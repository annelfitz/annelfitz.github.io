/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import"../../geometry.js";import{clone as r}from"../../core/lang.js";import{lengthUnitsJSONMap as t,angleUnitsJSONMap as o}from"../../core/unitUtils.js";import{property as s}from"../../core/accessorSupport/decorators/property.js";import"../../core/has.js";import"../../core/Logger.js";import{subclass as i}from"../../core/accessorSupport/decorators/subclass.js";import{writer as a}from"../../core/accessorSupport/decorators/writer.js";import{getJsonType as m}from"../../geometry/support/jsonUtils.js";import{measureOperationJSONMap as n,BaseImageMeasureParameters as p}from"./BaseImageMeasureParameters.js";import l from"../../geometry/Point.js";var y;let c=y=class extends p{constructor(){super(...arguments),this.type="distance-angle",this.fromGeometry=null,this.toGeometry=null,this.is3D=!1,this.linearUnit="meters",this.angularUnit="degrees"}writeFromGeometry(e,r,t){null!=e&&(r.geometryType=m(e),r[t]=e.toJSON())}get measureOperation(){return this.is3D?"distance-and-angle-3D":"distance-and-angle"}clone(){return new y(r({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,is3D:this.is3D,linearUnit:this.linearUnit,angularUnit:this.angularUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};e([s({type:l,json:{read:!0,write:!0}})],c.prototype,"fromGeometry",void 0),e([a("fromGeometry")],c.prototype,"writeFromGeometry",null),e([s({type:l,json:{read:!0,write:!0}})],c.prototype,"toGeometry",void 0),e([s({type:n.apiValues,json:{write:n.write}})],c.prototype,"measureOperation",null),e([s({json:{read:!0}})],c.prototype,"is3D",void 0),e([s({type:String,json:{read:t.read,write:t.write}})],c.prototype,"linearUnit",void 0),e([s({type:String,json:{read:o.read,write:o.write}})],c.prototype,"angularUnit",void 0),c=y=e([i("esri.rest.support.ImageDistanceParameters")],c);const u=c;export{u as default};
