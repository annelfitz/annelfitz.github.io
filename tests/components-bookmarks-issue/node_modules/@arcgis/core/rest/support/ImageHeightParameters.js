/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import"../../geometry.js";import{clone as r}from"../../core/lang.js";import{lengthUnitsJSONMap as t}from"../../core/unitUtils.js";import{property as o}from"../../core/accessorSupport/decorators/property.js";import"../../core/has.js";import"../../core/Logger.js";import{subclass as s}from"../../core/accessorSupport/decorators/subclass.js";import{writer as i}from"../../core/accessorSupport/decorators/writer.js";import{getJsonType as p}from"../../geometry/support/jsonUtils.js";import{measureOperationJSONMap as m,BaseImageMeasureParameters as a}from"./BaseImageMeasureParameters.js";import n from"../../geometry/Point.js";var y;let l=y=class extends a{constructor(){super(...arguments),this.type="height",this.fromGeometry=null,this.toGeometry=null,this.operationType="base-and-top",this.linearUnit="meters"}writeFromGeometry(e,r,t){null!=e&&(r.geometryType=p(e),r[t]=e.toJSON())}get measureOperation(){return this.operationType}clone(){return new y(r({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,operationType:this.operationType,linearUnit:this.linearUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};e([o({type:n,json:{read:!0}})],l.prototype,"fromGeometry",void 0),e([i("fromGeometry")],l.prototype,"writeFromGeometry",null),e([o({type:n,json:{read:!0,write:!0}})],l.prototype,"toGeometry",void 0),e([o({type:m.apiValues,json:{write:m.write}})],l.prototype,"measureOperation",null),e([o({json:{read:!0}})],l.prototype,"operationType",void 0),e([o({type:String,json:{read:t.read,write:t.write}})],l.prototype,"linearUnit",void 0),l=y=e([s("esri.rest.support.ImageHeightParameters")],l);const c=l;export{c as default};
