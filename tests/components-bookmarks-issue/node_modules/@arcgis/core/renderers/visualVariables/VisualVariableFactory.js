/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as r}from"../../chunks/tslib.es6.js";import s from"../../core/Accessor.js";import{JSONMap as o}from"../../core/jsonMap.js";import e from"../../core/Logger.js";import t from"../../core/Warning.js";import{property as a}from"../../core/accessorSupport/decorators/property.js";import"../../core/has.js";import"../../core/RandomLCG.js";import{subclass as i}from"../../core/accessorSupport/decorators/subclass.js";import l from"./ColorVariable.js";import n from"./OpacityVariable.js";import c from"./RotationVariable.js";import p from"./SizeVariable.js";const b={color:l,size:p,opacity:n,rotation:c},u=new o({colorInfo:"color",transparencyInfo:"opacity",rotationInfo:"rotation",sizeInfo:"size"}),h=/^\[([^\]]+)\]$/i;let m=class extends s{constructor(){super(...arguments),this.colorVariables=null,this.opacityVariables=null,this.rotationVariables=null,this.sizeVariables=null}set visualVariables(r){if(this._resetVariables(),r=r&&r.filter((r=>!!r)),r?.length){for(const s of r)switch(s.type){case"color":this.colorVariables.push(s);break;case"opacity":this.opacityVariables.push(s);break;case"rotation":this.rotationVariables.push(s);break;case"size":this.sizeVariables.push(s)}if(this.sizeVariables.length){this.sizeVariables.some((r=>!!r.target))&&r.sort(((r,s)=>{let o=null;return o=r.target===s.target?0:r.target?1:-1,o}))}for(let s=0;s<r.length;s++){r[s].index=s}this._set("visualVariables",r)}else this._set("visualVariables",r)}readVariables(r,s,o){const{rotationExpression:a,rotationType:i}=s,l=a?.match(h),n=l?.[1];if(n&&(r||(r=[]),r.push({type:"rotationInfo",rotationType:i,field:n})),r)return r.map((r=>{const s=u.read(r.type),a=b[s];a||(e.getLogger(this).warn(`Unknown variable type: ${s}`),o?.messages&&o.messages.push(new t("visual-variable:unsupported",`visualVariable of type '${s}' is not supported`,{definition:r,context:o})));const i=new a;return i.read(r,o),i}))}writeVariables(r,s){const o=[];for(const e of r){const r=e.toJSON(s);r&&o.push(r)}return o}_resetVariables(){this.colorVariables=[],this.opacityVariables=[],this.rotationVariables=[],this.sizeVariables=[]}};r([a()],m.prototype,"visualVariables",null),m=r([i("esri.renderers.visualVariables.VisualVariableFactory")],m);const V=m;export{V as default};
