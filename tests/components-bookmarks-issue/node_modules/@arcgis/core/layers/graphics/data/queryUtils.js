/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{JSONMap as e}from"../../../core/jsonMap.js";import{getUnitString as t}from"../../../core/unitUtils.js";import{canProjectWithoutEngine as i}from"../../../geometry/projection.js";import{getGeometryExtent as r}from"../../../geometry/support/extentUtils.js";import{fromJSON as n,isExtent as o,isPolygon as s,isPolyline as a}from"../../../geometry/support/jsonUtils.js";import{normalizeCentralMeridian as l}from"../../../geometry/support/normalizeUtils.js";import{equals as m,isGeographic as f,isWebMercator as c,wgs84 as u}from"../../../geometry/support/spatialReferenceUtils.js";import{checkProjectionSupport as p,project as y}from"./projectionSupport.js";const R=new e({esriSRUnit_Meter:"meters",esriSRUnit_Kilometer:"kilometers",esriSRUnit_Foot:"feet",esriSRUnit_StatuteMile:"miles",esriSRUnit_NauticalMile:"nautical-miles",esriSRUnit_USNauticalMile:"us-nautical-miles"}),g=Object.freeze({});async function S(e,t,i){const{outFields:r,orderByFields:n,groupByFieldsForStatistics:o,outStatistics:s}=e;if(r)for(let a=0;a<r.length;a++)r[a]=r[a].trim();if(n)for(let a=0;a<n.length;a++)n[a]=n[a].trim();if(o)for(let a=0;a<o.length;a++)o[a]=o[a].trim();if(s)for(let a=0;a<s.length;a++)s[a].onStatisticField&&(s[a].onStatisticField=s[a].onStatisticField.trim());return e.geometry&&!e.outSR&&(e.outSR=e.geometry.spatialReference),j(e,t,i)}async function j(e,t,i){if(!e)return null;let{where:o}=e;if(e.where=o=o?.trim(),(!o||/^1 *= *1$/.test(o)||t&&t===o)&&(e.where=null),!e.geometry)return e;let s=await d(e);if(e.distance=0,e.units=null,"esriSpatialRelEnvelopeIntersects"===e.spatialRel){const{spatialReference:t}=e.geometry;s=r(s),s.spatialReference=t}if(s){await p(s.spatialReference,i),s=x(s,i);const t=(await l(n(s)))[0];if(null==t)throw g;const r="quantizationParameters"in e&&e.quantizationParameters?.tolerance||"maxAllowableOffset"in e&&e.maxAllowableOffset||0,o=r&&w(s,i)?{densificationStep:8*r}:void 0,a=t.toJSON(),m=y(a,a.spatialReference,i,o);if(!m)throw g;m.spatialReference=i,e.geometry=m}return e}function w(e,t){if(!e)return!1;const r=e.spatialReference;return(o(e)||s(e)||a(e))&&!m(r,t)&&!i(r,t)}function x(e,t){const i=e.spatialReference;return w(e,t)&&o(e)?{spatialReference:i,rings:[[[e.xmin,e.ymin],[e.xmin,e.ymax],[e.xmax,e.ymax],[e.xmax,e.ymin],[e.xmin,e.ymin]]]}:e}async function d(e){const{distance:i,units:r}=e,n=e.geometry;if(null==i||"vertexAttributes"in n)return n;const o=n.spatialReference,s=r?R.fromJSON(r):t(o),a=o&&(f(o)||c(o))?n:await p(o,u).then((()=>y(n,u)));return(await U())(a.spatialReference,a,i,s)}async function U(){return(await import("../../../geometry/geometryEngineJSON.js")).geodesicBuffer}export{S as normalizeQuery,j as normalizeQueryLike,g as queryEngineEmptyResult,R as unitsKebabDict};
