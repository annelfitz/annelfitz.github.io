/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../geometry.js";import t from"../../../core/Error.js";import has from"../../../core/has.js";import r from"../../../core/Loadable.js";import o from"../../../core/Logger.js";import{debounce as a,eachAlways as s}from"../../../core/promiseUtils.js";import{open as i}from"../../../core/workers/workers.js";import{property as n}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/RandomLCG.js";import{subclass as l}from"../../../core/accessorSupport/decorators/subclass.js";import{featureGeometryTypeKebabDictionary as c}from"../../../geometry/support/typeUtils.js";import{createCapabilities as u,createDrawingInfo as p}from"./support/clientSideDefaults.js";import{getCapabilities as m,getWFSLayerInfo as d,prepareWFSLayerFields as y,findFeatureType as f}from"../../ogc/wfsUtils.js";import h from"../../../rest/support/FeatureSet.js";import{utc as w}from"../../../time/timeZoneUtils.js";import g from"../../../geometry/Extent.js";let x=class extends r{constructor(){super(...arguments),this._connection=null,this._workerHandler=null,this.capabilities=u(!1,!1),this.type="wfs",this.refresh=a((async()=>{await this.load();const e={customParameters:this.layer.customParameters,maxRecordCount:this.layer.maxRecordCount,maxTotalRecordCount:this.layer.maxTotalRecordCount,maxPageCount:this.layer.maxPageCount},{extent:t}=await this._workerHandler.refresh(e);return t&&(this.sourceJSON.extent=t),{dataChanged:!0,updates:{extent:this.sourceJSON.extent}}}))}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this._startWorker({signal:t})),Promise.resolve(this)}destroy(){this._connection?.close(),this._connection=null,this._workerHandler=null}async openPorts(){return await this.load(),this._connection.openPorts()}async queryFeatures(e,t={}){const r=await this.queryFeaturesJSON(e,t);return h.fromJSON(r)}async queryFeaturesJSON(e,t={}){return await this.load(t),this._workerHandler.queryFeatures(e?e.toJSON():void 0,t)}async queryFeatureCount(e,t={}){return await this.load(t),this._workerHandler.queryFeatureCount(e?e.toJSON():void 0,t)}async queryObjectIds(e,t={}){return await this.load(t),this._workerHandler.queryObjectIds(e?e.toJSON():void 0,t)}async queryExtent(e,t={}){await this.load(t);const r=await this._workerHandler.queryExtent(e?e.toJSON():void 0,t);return{count:r.count,extent:g.fromJSON(r.extent)}}async querySnapping(e,t={}){return await this.load(t),this._workerHandler.querySnapping(e,t)}async _createLoadOptions(e){const{url:r,customParameters:o,name:a,namespaceUri:s,fields:i,geometryType:n,maxRecordCount:l,maxPageCount:u,maxTotalRecordCount:p,swapXY:h}=this.layer,w="defaults"===this.layer.originOf("spatialReference")?void 0:this.layer.spatialReference;if(!r)throw new t("wfs-layer:missing-url","WFSLayer must be created with a url");this.wfsCapabilities||(this.wfsCapabilities=await m(r,{customParameters:o,...e}));const g=["fields","geometryType","name","namespaceUri","swapXY"].some((e=>null==this.layer[e])),x=g?await d(this.wfsCapabilities,a,s,{spatialReference:w,customParameters:o,signal:e?.signal}):{...y(i??[]),geometryType:n,name:a,namespaceUri:s,spatialReference:w,swapXY:h},F=f(this.wfsCapabilities.readFeatureTypes(),x.name,x.namespaceUri),S=c.toJSON(x.geometryType),{operations:j}=this.wfsCapabilities,C=j.GetFeature.url,O=j.GetFeature.outputFormat;return{customParameters:o,featureType:F,fields:x.fields?.map((e=>e.toJSON()))??[],geometryField:x.geometryField,geometryType:S,getFeatureUrl:C,getFeatureOutputFormat:O,maxRecordCount:l,maxPageCount:u,maxTotalRecordCount:p,objectIdField:x.objectIdField,spatialReference:x.spatialReference?.toJSON(),swapXY:!!x.swapXY}}async _startWorker(e){const[t,r]=await s([this._createLoadOptions(e),i("WFSSourceWorker",{...e,strategy:has("feature-layers-workers")?"dedicated":"local",registryTarget:this})]),a=t.error||r.error||null,n=r.value||null;if(a)throw n&&n.close(),a;const l=t.value;this._connection=r.value,this._workerHandler=this._connection.createInvokeProxy();const c=await this._workerHandler.load(l,e);for(const s of c.warnings)o.getLogger(this.layer).warn("#load()",`${s.message} (title: '${this.layer.title||"no title"}', id: '${this.layer.id??"no id"}')`,{warning:s});this.sourceJSON={dateFieldsTimeReference:{timeZoneIANA:w},extent:c.extent,fields:l.fields,geometryType:l.geometryType,objectIdField:l.objectIdField,geometryField:l.geometryField,drawingInfo:p(l.geometryType),name:l.featureType.title,wfsInfo:{name:l.featureType.name,featureUrl:l.getFeatureUrl,maxFeatures:l.maxRecordCount,swapXY:l.swapXY,supportedSpatialReferences:l.featureType.supportedSpatialReferences,version:"2.0.0",wfsNamespace:l.featureType.namespaceUri}}}};e([n()],x.prototype,"capabilities",void 0),e([n({constructOnly:!0})],x.prototype,"layer",void 0),e([n()],x.prototype,"sourceJSON",void 0),e([n()],x.prototype,"type",void 0),e([n()],x.prototype,"wfsCapabilities",void 0),x=e([l("esri.layers.graphics.sources.WFSSource")],x);export{x as WFSSource};
