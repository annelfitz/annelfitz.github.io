/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as e}from"../chunks/tslib.es6.js";import t from"../config.js";import r from"../Graphic.js";import o from"../PopupTemplate.js";import s from"../request.js";import i from"../core/Collection.js";import a from"../core/CollectionFlattener.js";import{JSONMap as n}from"../core/jsonMap.js";import{clone as l}from"../core/lang.js";import{MultiOriginJSONMixin as p}from"../core/MultiOriginJSONSupport.js";import{throwIfAbortError as m}from"../core/promiseUtils.js";import{on as u,watch as c,sync as f}from"../core/reactiveUtils.js";import{urlToObject as y,addQueryParameters as d,addProxy as h,Url as g}from"../core/urlUtils.js";import{property as b}from"../core/accessorSupport/decorators/property.js";import{Integer as w}from"../core/accessorSupport/ensureType.js";import{reader as v}from"../core/accessorSupport/decorators/reader.js";import{subclass as x}from"../core/accessorSupport/decorators/subclass.js";import{writer as j}from"../core/accessorSupport/decorators/writer.js";import{willPropertyWrite as I}from"../core/accessorSupport/write.js";import S from"../geometry/Extent.js";import F from"../geometry/SpatialReference.js";import{getScale as P}from"../geometry/support/scaleUtils.js";import{equals as R}from"../geometry/support/spatialReferenceUtils.js";import E from"./Layer.js";import{BlendLayer as O}from"./mixins/BlendLayer.js";import{OperationalLayer as L}from"./mixins/OperationalLayer.js";import{PortalLayer as U}from"./mixins/PortalLayer.js";import{RefreshableLayer as M}from"./mixins/RefreshableLayer.js";import{ScaleRangeLayer as T}from"./mixins/ScaleRangeLayer.js";import{TemporalLayer as _}from"./mixins/TemporalLayer.js";import{isAxesOrderReversedForWkid as $}from"./ogc/crsUtils.js";import{isWmsServer as C}from"./support/arcgisLayerUrl.js";import{legendEnabled as W,url as q}from"./support/commonProperties.js";import{ExportWMSImageParameters as N}from"./support/ExportWMSImageParameters.js";import{createBitmap as B}from"./support/imageBitmapUtils.js";import H from"./support/WMSSublayer.js";import{normalizeWKID as k,toISOString as G,getPopupLayers as A,parseCapabilities as D}from"./support/wmsUtils.js";const J=new n({bmp:"image/bmp",gif:"image/gif",jpg:"image/jpeg",png:"image/png",svg:"image/svg+xml"},{ignoreUnknown:!1});function V(e){return"text/html"===e}function z(e){return"text/plain"===e}let Q=class extends(O(_(M(T(L(U(p(E)))))))){constructor(...e){super(...e),this.allSublayers=new a({getCollections:()=>[this.sublayers],getChildrenFunction:e=>e.sublayers}),this.customParameters=null,this.customLayerParameters=null,this.copyright=null,this.description=null,this.dimensions=null,this.fullExtent=null,this.fullExtents=null,this.featureInfoFormats=null,this.featureInfoUrl=null,this.fetchFeatureInfoFunction=null,this.imageFormat=null,this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.legendEnabled=!0,this.mapUrl=null,this.isReference=null,this.operationalLayerType="WMS",this.spatialReference=null,this.spatialReferences=null,this.sublayers=null,this.type="wms",this.version=null,this.addHandles([u((()=>this.sublayers),"after-add",(({item:e})=>{e.parent=e.layer=this}),f),u((()=>this.sublayers),"after-remove",(({item:e})=>{e.layer=e.parent=null}),f),c((()=>this.sublayers),((e,t)=>{if(t)for(const r of t)r.layer=r.parent=null;if(e)for(const r of e)r.parent=r.layer=this}),f)])}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}destroy(){this.allSublayers.destroy()}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["WMS"]},e).catch(m).then((()=>this._fetchService(t)))),Promise.resolve(this)}readFullExtentFromItemOrMap(e,t){const r=t.extent;return r?new S({xmin:r[0][0],ymin:r[0][1],xmax:r[1][0],ymax:r[1][1]}):null}writeFullExtent(e,t){t.extent=[[e.xmin,e.ymin],[e.xmax,e.ymax]]}get featureInfoFormat(){return null==this.featureInfoFormats?null:this.featureInfoFormats.find(V)??this.featureInfoFormats.find(z)??null}set featureInfoFormat(e){null==e?(this.revert("featureInfoFormat","service"),this._clearOverride("featureInfoFormat")):(V(e)||z(e))&&this._override("featureInfoFormat",e)}readImageFormat(e,t){const r=t.supportedImageFormatTypes;return r&&r.includes("image/png")?"image/png":r&&r[0]}readSpatialReferenceFromItemOrDocument(e,t){return new F(t.spatialReferences[0])}writeSpatialReferences(e,t){const r=this.spatialReference?.wkid;e&&r?(t.spatialReferences=e.filter((e=>e!==r)),t.spatialReferences.unshift(r)):t.spatialReferences=e}readSublayersFromItemOrMap(e,t,r){return X(t.layers,r,t.visibleLayers)}readSublayers(e,t,r){return X(t.layers,r)}writeSublayers(e,t,r,o){t.layers=[];const s=new Map,i=e.flatten((({sublayers:e})=>e??[]));for(const a of i)if("number"==typeof a.parent?.id){const e=s.get(a.parent.id);null!=e?e.push(a.id):s.set(a.parent.id,[a.id])}for(const a of i){const e={sublayer:a,...o},r=a.write({parentLayerId:"number"==typeof a.parent?.id?a.parent.id:-1},e);if(s.has(a.id)&&(r.sublayerIds=s.get(a.id)),!a.sublayers&&a.name){const r=a.write({},e);delete r.id,t.layers.push(r)}}t.visibleLayers=i.filter((({visible:e,sublayers:t})=>e&&!t)).map((({name:e})=>e)).toArray()}set url(e){if(!e)return void this._set("url",e);const{path:t,query:r}=y(e);for(const s in r)/^(request|service)$/i.test(s)&&delete r[s];const o=d(t,r??{});this._set("url",o)}createExportImageParameters(e,t,r,o){const s=o?.pixelRatio??1,i=P({extent:e,width:t})*s,a=new N({layer:this,scale:i}),{xmin:n,ymin:l,xmax:p,ymax:m,spatialReference:u}=e,c=k(u,this.spatialReferences),f="1.3.0"===this.version&&$(c)?`${l},${n},${m},${p}`:`${n},${l},${p},${m}`,y=a.toJSON();return{bbox:f,["1.3.0"===this.version?"crs":"srs"]:null==c||isNaN(c)?void 0:"EPSG:"+c,...y}}async fetchImage(e,t,r,o){const i=this.mapUrl,a=this.createExportImageParameters(e,t,r,o);if(!a.layers){const e=document.createElement("canvas");return e.width=t,e.height=r,e}const n=o?.timeExtent?.start,l=o?.timeExtent?.end,p=null!=n&&null!=l?n.getTime()===l.getTime()?G(n):`${G(n)}/${G(l)}`:void 0,m={responseType:"image",query:this._mixCustomParameters({width:t,height:r,...a,time:p,...this.refreshParameters}),signal:o?.signal};return s(i??"",m).then((e=>e.data))}async fetchImageBitmap(e,t,r,o){const i=this.mapUrl??"",a=this.createExportImageParameters(e,t,r,o);if(!a.layers){const e=document.createElement("canvas");return e.width=t,e.height=r,e}const n=o?.timeExtent?.start,l=o?.timeExtent?.end,p=null!=n&&null!=l?n.getTime()===l.getTime()?G(n):`${G(n)}/${G(l)}`:void 0,m={responseType:"blob",query:this._mixCustomParameters({width:t,height:r,...a,time:p,...this.refreshParameters}),signal:o?.signal},{data:u}=await s(i,m);return B(u,i,o?.signal)}fetchFeatureInfo(e,t,r,o,s){const i=P({extent:e,width:t}),a=new N({layer:this,scale:i}),n=A(a.visibleSublayers);if(null==this.featureInfoUrl||null==n)return Promise.resolve([]);if(null==this.fetchFeatureInfoFunction&&null==this.featureInfoFormat)return Promise.resolve([]);const l="1.3.0"===this.version?{I:o,J:s}:{x:o,y:s},p={query_layers:n,request:"GetFeatureInfo",info_format:this.featureInfoFormat,feature_count:25,width:t,height:r,...l},m={...this.createExportImageParameters(e,t,r),...p},u=this._mixCustomParameters(m);return null!=this.fetchFeatureInfoFunction?this.fetchFeatureInfoFunction(u):this._defaultFetchFeatureInfoFunction(d(this.featureInfoUrl,u))}findSublayerById(e){return this.allSublayers.find((t=>t.id===e))}findSublayerByName(e){return this.allSublayers.find((t=>t.name===e))}serviceSupportsSpatialReference(e){return C(this.url)||null!=this.spatialReferences&&this.spatialReferences.some((t=>{const r=900913===t?F.WebMercator:new F({wkid:t});return R(r,e)}))}_defaultFetchFeatureInfoFunction(e){const t=document.createElement("iframe");t.src=h(e),t.style.border="none",t.style.margin="0",t.style.width="100%",t.setAttribute("sandbox","");const s=new o({title:this.title,content:t}),i=new r({sourceLayer:this,popupTemplate:s});return Promise.resolve([i])}async _fetchService(e){if(!this.resourceInfo&&this.parsedUrl?.path){const{path:t,query:r}=this.parsedUrl,{data:o}=await s(t,{query:{SERVICE:"WMS",REQUEST:"GetCapabilities",...r,...this.customParameters},responseType:"xml",signal:e});this.resourceInfo=D(o)}if(this.parsedUrl){const e=new g(this.parsedUrl.path),{httpsDomains:r}=t.request;"https"!==e.scheme||e.port&&"443"!==e.port||!e.host||r.includes(e.host)||r.push(e.host)}this.read(this.resourceInfo,{origin:"service"})}_mixCustomParameters(e){if(!this.customLayerParameters&&!this.customParameters)return e;const t={...this.customParameters,...this.customLayerParameters};for(const r in t)e[r.toLowerCase()]=t[r];return e}};function K(e,t){return e.some((e=>{for(const r in e)if(I(e,r,null,t))return!0;return!1}))}function X(e,t,r){e=e??[];const o=new Map;e.every((e=>null==e.id))&&(e=l(e)).forEach(((e,t)=>e.id=t));for(const i of e){const e=new H;e.read(i,t),r&&!r.includes(e.name)&&(e.visible=!1),o.set(e.id,e)}const s=[];for(const a of e){const e=null!=a.id?o.get(a.id):null;if(e)if(null!=a.parentLayerId&&a.parentLayerId>=0){const t=o.get(a.parentLayerId);if(!t)continue;t.sublayers||(t.sublayers=new i),t.sublayers.push(e)}else s.push(e)}return s}e([b({readOnly:!0})],Q.prototype,"allSublayers",void 0),e([b({json:{type:Object,write:!0}})],Q.prototype,"customParameters",void 0),e([b({json:{type:Object,write:!0}})],Q.prototype,"customLayerParameters",void 0),e([b({type:String,json:{write:!0}})],Q.prototype,"copyright",void 0),e([b()],Q.prototype,"description",void 0),e([b({readOnly:!0})],Q.prototype,"dimensions",void 0),e([b({json:{type:[[Number]],read:{source:"extent"},write:{target:"extent"},origins:{"web-document":{write:{ignoreOrigin:!0}},"portal-item":{write:{ignoreOrigin:!0}}}}})],Q.prototype,"fullExtent",void 0),e([v(["web-document","portal-item"],"fullExtent",["extent"])],Q.prototype,"readFullExtentFromItemOrMap",null),e([j(["web-document","portal-item"],"fullExtent",{extent:{type:[[Number]]}})],Q.prototype,"writeFullExtent",null),e([b()],Q.prototype,"fullExtents",void 0),e([b({type:String,json:{write:{ignoreOrigin:!0}}})],Q.prototype,"featureInfoFormat",null),e([b({type:[String],readOnly:!0})],Q.prototype,"featureInfoFormats",void 0),e([b({type:String,json:{write:{ignoreOrigin:!0}}})],Q.prototype,"featureInfoUrl",void 0),e([b()],Q.prototype,"fetchFeatureInfoFunction",void 0),e([b({type:String,json:{origins:{"web-document":{default:"image/png",type:J.jsonValues,read:{reader:J.read,source:"format"},write:{writer:J.write,target:"format"}}}}})],Q.prototype,"imageFormat",void 0),e([v("imageFormat",["supportedImageFormatTypes"])],Q.prototype,"readImageFormat",null),e([b({type:Number,json:{read:{source:"maxHeight"},write:{target:"maxHeight"}}})],Q.prototype,"imageMaxHeight",void 0),e([b({type:Number,json:{read:{source:"maxWidth"},write:{target:"maxWidth"}}})],Q.prototype,"imageMaxWidth",void 0),e([b()],Q.prototype,"imageTransparency",void 0),e([b(W)],Q.prototype,"legendEnabled",void 0),e([b({type:["show","hide","hide-children"]})],Q.prototype,"listMode",void 0),e([b({type:String,json:{write:{ignoreOrigin:!0}}})],Q.prototype,"mapUrl",void 0),e([b({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],Q.prototype,"isReference",void 0),e([b({type:["WMS"]})],Q.prototype,"operationalLayerType",void 0),e([b()],Q.prototype,"resourceInfo",void 0),e([b({type:F,json:{origins:{service:{read:{source:"extent.spatialReference"}}},write:!1}})],Q.prototype,"spatialReference",void 0),e([v(["web-document","portal-item"],"spatialReference",["spatialReferences"])],Q.prototype,"readSpatialReferenceFromItemOrDocument",null),e([b({type:[w],json:{read:!1,origins:{service:{read:!0},"web-document":{read:!1,write:{ignoreOrigin:!0}},"portal-item":{read:!1,write:{ignoreOrigin:!0}}}}})],Q.prototype,"spatialReferences",void 0),e([j(["web-document","portal-item"],"spatialReferences")],Q.prototype,"writeSpatialReferences",null),e([b({type:i.ofType(H),json:{write:{target:"layers",overridePolicy(e,t,r){if(K(this.allSublayers,r))return{ignoreOrigin:!0}}}}})],Q.prototype,"sublayers",void 0),e([v(["web-document","portal-item"],"sublayers",["layers","visibleLayers"])],Q.prototype,"readSublayersFromItemOrMap",null),e([v("service","sublayers",["layers"])],Q.prototype,"readSublayers",null),e([j("sublayers",{layers:{type:[H]},visibleLayers:{type:[String]}})],Q.prototype,"writeSublayers",null),e([b({json:{read:!1},readOnly:!0,value:"wms"})],Q.prototype,"type",void 0),e([b(q)],Q.prototype,"url",null),e([b({type:String,json:{write:{ignoreOrigin:!0}}})],Q.prototype,"version",void 0),Q=e([x("esri.layers.WMSLayer")],Q);const Y=Q;export{Y as default};
