/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as e}from"../chunks/tslib.es6.js";import t from"../core/Collection.js";import i from"../core/Error.js";import a from"../core/Logger.js";import{property as s}from"../core/accessorSupport/decorators/property.js";import"../core/has.js";import"../core/RandomLCG.js";import{subclass as o}from"../core/accessorSupport/decorators/subclass.js";import n from"./Layer.js";import{KnowledgeGraphLayerDataManager as r}from"./knowledgeGraph/KnowledgeGraphLayerDataManager.js";import p from"./knowledgeGraph/KnowledgeGraphSublayer.js";import{BlendLayer as h}from"./mixins/BlendLayer.js";import{ScaleRangeLayer as d}from"./mixins/ScaleRangeLayer.js";import{fetchKnowledgeGraph as l}from"../rest/knowledgeGraphService.js";import y from"../rest/knowledgeGraph/EntityType.js";import m from"../rest/knowledgeGraph/RelationshipType.js";const c=(e,t,i)=>(e.has(t)||e.set(t,i()),e.get(t));let g=class extends(h(d(n))){constructor(e){super(e),this._graphTypeLookup=new Map,this.dataManager=null,this.knowledgeGraph=null,this.layers=new t,this.memberEntityTypes=null,this.memberRelationshipTypes=null,this.sublayerIdsCache=new Map,this.tables=new t,this.type="knowledge-graph",this._originalInclusionList=e.inclusionModeDefinition}normalizeCtorArgs(e){return{url:e.url,title:e.title}}load(){return this.addResolvingPromise(l(this.url).then((e=>{this._initializeLayerProperties({knowledgeGraph:e,inclusionModeDefinition:this._originalInclusionList}),this.loadLayerAssumingLocalCache()}))),Promise.resolve(this)}_initializeLayerProperties(e){const t=new Set;let s=[],o=[];if(e.inclusionModeDefinition&&(!e.inclusionModeDefinition.namedTypeDefinitions||e.inclusionModeDefinition.namedTypeDefinitions.size<1))throw new i("knowledge-graph:composite-layer-constructor","If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined");e.knowledgeGraph.dataModel.entityTypes?.forEach((e=>{e.name&&this._graphTypeLookup.set(e.name,e)})),e.knowledgeGraph.dataModel.relationshipTypes?.forEach((e=>{e.name&&this._graphTypeLookup.set(e.name,e)})),e.inclusionModeDefinition?.generateAllSublayers?(s=e.knowledgeGraph.dataModel.entityTypes??[],o=e.knowledgeGraph.dataModel.relationshipTypes??[]):e.inclusionModeDefinition?.namedTypeDefinitions&&e.inclusionModeDefinition?.namedTypeDefinitions.size>0?e.inclusionModeDefinition?.namedTypeDefinitions.forEach(((i,n)=>{if(!this._graphTypeLookup.get(n))return a.getLogger(this).warn(`A named type, ${n}, was in the inclusion list that wasn't in the data model and will be removed`),void e.inclusionModeDefinition?.namedTypeDefinitions.delete(n);this._graphTypeLookup.get(n)instanceof m||"strictOrigin"in this._graphTypeLookup.get(n)?t.has(n)||(t.add(n),o.push(this._graphTypeLookup.get(n))):this._graphTypeLookup.get(n)instanceof y||"properties"in this._graphTypeLookup.get(n)?t.has(n)||(t.add(n),s.push(this._graphTypeLookup.get(n))):(a.getLogger(this).warn(`A named type, ${n}, was in the inclusion list that wasn't properly modeled and will be removed`),e.inclusionModeDefinition?.namedTypeDefinitions.delete(n))})):(s=e.knowledgeGraph.dataModel.entityTypes??[],o=e.knowledgeGraph.dataModel.relationshipTypes??[]);const n=new r({knowledgeGraph:e.knowledgeGraph,inclusionModeDefinition:e.inclusionModeDefinition});this.knowledgeGraph=e.knowledgeGraph,this.memberEntityTypes=s,this.memberRelationshipTypes=o,this.dataManager=n}_refreshNamedTypes(){for(const e of this.layers)e.emit("refresh",{dataChanged:!0});for(const e of this.tables)e.emit("refresh",{dataChanged:!0})}async _handleNewRecords(e){const t=[];this.dataManager.addToLayer(e);for(const i of e)this.sublayerIdsCache.has(i.typeName)||(this.sublayerIdsCache.set(i.typeName,new Set),t.push(i.typeName)),this.sublayerIdsCache.get(i.typeName).add(i.id);for(const i of t)if(this._graphTypeLookup.has(i)){const e=this._graphTypeLookup.get(i),t="endPoints"in e?"relationship":"entity",a=new p({objectType:e,parentCompositeLayer:this,graphType:t,title:i});"entity"===t?this.dataManager.entityTypeNames.add(i):this.dataManager.relationshipTypeNames.add(i),a.geometryType?this.layers.push(a):this.tables.push(a),this.dataManager.sublayerCaches.set(i,new Map)}this._refreshNamedTypes()}loadLayerAssumingLocalCache(){this.memberEntityTypes.forEach((e=>{const t=new p({objectType:e,parentCompositeLayer:this,graphType:"entity",title:e.name});t.geometryType?this.layers.push(t):this.tables.push(t),this.dataManager.sublayerCaches.has(e.name)||this.dataManager.sublayerCaches.set(e.name,new Map)})),this.memberRelationshipTypes.forEach((e=>{const t=new p({objectType:e,parentCompositeLayer:this,graphType:"relationship",title:e.name});t.geometryType?this.layers.push(t):this.tables.push(t),this.dataManager.sublayerCaches.has(e.name)||this.dataManager.sublayerCaches.set(e.name,new Map)})),this.dataManager.inclusionModeDefinition?.namedTypeDefinitions&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.forEach(((e,t)=>{const i=c(this.sublayerIdsCache,t,(()=>new Set));e.members?.forEach((e=>{i.add(e.id)}))}))}async addRecords(e){await this._handleNewRecords(e)}async removeRecords(e){const t=[];for(const i of e)!1===this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(i.typeName)?.useAllData&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(i.typeName)?.members?.has(i.id)&&t.push(i);this.dataManager.removeFromLayer(t);for(const i of t)this.sublayerIdsCache.get(i.typeName)?.delete(i.id);return this._refreshNamedTypes(),t}};e([s()],g.prototype,"dataManager",void 0),e([s()],g.prototype,"knowledgeGraph",void 0),e([s()],g.prototype,"layers",void 0),e([s()],g.prototype,"memberEntityTypes",void 0),e([s()],g.prototype,"memberRelationshipTypes",void 0),e([s()],g.prototype,"sublayerIdsCache",void 0),e([s()],g.prototype,"tables",void 0),e([s({json:{read:!1}})],g.prototype,"type",void 0),g=e([o("esri.layers.KnowledgeGraphLayer")],g);const u=g;export{u as default};
