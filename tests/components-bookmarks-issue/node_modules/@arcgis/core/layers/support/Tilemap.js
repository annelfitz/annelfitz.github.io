/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import t from"../../request.js";import{constant as i}from"../../core/arrayUtils.js";import e from"../../core/Error.js";import{clone as a}from"../../core/lang.js";import{estimateSize as o}from"../../core/typedArrayUtil.js";import{newUintArray as l}from"../../geometry/support/UintArray.js";class r{constructor(t){h(t);const{location:i,data:e}=t;this.location=Object.freeze(a(i));const r=this.location.width,n=this.location.height;let s=!0,c=!0;const m=Math.ceil(r*n/32),f=l(m);let d=0;for(let a=0;a<e.length;a++){const t=a%32;e[a]?(c=!1,f[d]|=1<<t):s=!1,31===t&&++d}c?(this._availability="unavailable",this.byteSize=40):s?(this._availability="available",this.byteSize=40):(this._availability=f,this.byteSize=40+o(f))}getAvailability(t,i){if("unavailable"===this._availability||"available"===this._availability)return this._availability;const e=(t-this.location.top)*this.location.width+(i-this.location.left),a=e%32,o=e>>5,l=this._availability;return o<0||o>l.length?"unknown":l[o]&1<<a?"available":"unavailable"}static fromDefinition(a,o){const l=a.service.request||t,{row:n,col:h,width:c,height:m}=a,f={query:{f:"json"}};return o=o?{...f,...o}:f,l(s(a),o).then((t=>t.data)).catch((t=>{if(t&&t.details&&422===t.details.httpStatus)return{location:{top:n,left:h,width:c,height:m},valid:!0,data:i(c*m,0)};throw t})).then((t=>{if(t.location&&(t.location.top!==n||t.location.left!==h||t.location.width!==c||t.location.height!==m))throw new e("tilemap:location-mismatch","Tilemap response for different location than requested",{response:t,definition:{top:n,left:h,width:c,height:m}});return r.fromJSON(t)}))}static fromJSON(t){return Object.freeze(new r(t))}}function n(t){return`${t.level}/${t.row}/${t.col}/${t.width}/${t.height}`}function s(t){let i;if(t.service.tileServers?.length){const e=t.service.tileServers;i=`${e&&e.length?e[t.row%e.length]:t.service.url}/tilemap/${t.level}/${t.row}/${t.col}/${t.width}/${t.height}`}else i=`${t.service.url}/tilemap/${t.level}/${t.row}/${t.col}/${t.width}/${t.height}`;const e=t.service.query;return e&&(i=`${i}?${e}`),i}function h(t){if(!t?.location)throw new e("tilemap:missing-location","Location missing from tilemap response");if(!1===t.valid)throw new e("tilemap:invalid","Tilemap response was marked as invalid");if(!t.data)throw new e("tilemap:missing-data","Data missing from tilemap response");if(!Array.isArray(t.data))throw new e("tilemap:data-mismatch","Data must be an array of numbers");if(t.data.length!==t.location.width*t.location.height)throw new e("tilemap:data-mismatch","Number of data items does not match width/height of tilemap")}export{r as Tilemap,n as tilemapDefinitionId};
