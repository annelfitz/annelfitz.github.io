/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import e from"../../core/Error.js";import{getFilename as r,urlToObject as a}from"../../core/urlUtils.js";import{parse as t,parseNonStandardSublayerUrl as s}from"./arcgisLayerUrl.js";import{findAssociatedFeatureService as l}from"./associatedFeatureServiceUtils.js";import{getLayerModuleType as n,fetchFeatureService as o}from"./fetchService.js";import{sceneServiceLayerTypeToClassName as c}from"./layerUtils.js";import{layerLookupMap as i}from"./lazyLayerLoader.js";import{fetchArcGISServiceJSON as u}from"../../support/requestPresets.js";const y={FeatureLayer:!0,SceneLayer:!0};async function f(e){const{properties:r,url:a}=e,t={...r,url:a},s=await v(a,r?.customParameters),{Constructor:l,layerId:n,sourceJSON:o,parsedUrl:c,layers:i,tables:u}=s;if(i.length+u.length===0)return null!=n&&(t.layerId=n),null!=o&&(t.sourceJSON=o),new l(t);const y=new(0,(await import("../GroupLayer.js")).default)({title:c.title});return await d(y,s,t),y}function m(e,r){return e?e.find((({id:e})=>e===r)):null}function p(e,r,a,t,s){const l={...s,layerId:r};return null!=e&&(l.url=e),null!=a&&(l.sourceJSON=a),"sublayerTitleMode"in t.prototype&&(l.sublayerTitleMode="service-name"),new t(l)}async function d(e,r,a){const t=r.sublayerConstructorProvider;for(const{id:s,serverUrl:l}of r.layers){const n=m(r.sublayerInfos,s),o=p(l,s,n,(n&&t?.(n))??r.Constructor,a);e.add(o)}if(r.tables.length){const t=await I("FeatureLayer");r.tables.forEach((({id:s,serverUrl:l})=>{const n=p(l,s,m(r.tableInfos,s),t,a);e.tables.add(n)}))}}async function v(r,a){let s=t(r);if(null==s&&(s=await S(r,a)),null==s)throw new e("arcgis-layers:url-mismatch","The url '${url}' is not a valid arcgis resource",{url:r});const{serverType:l,sublayer:o}=s;let i;const f={FeatureServer:"FeatureLayer",StreamServer:"StreamLayer",VectorTileServer:"VectorTileLayer"},m="FeatureServer"===l,p="SceneServer"===l,d={parsedUrl:s,Constructor:null,layerId:m||p?o??void 0:void 0,layers:[],tables:[]};switch(l){case"MapServer":if(null!=o)i="FeatureLayer";else{i=await P(r,a)?"TileLayer":"MapImageLayer"}break;case"ImageServer":{const e=await u(r,{customParameters:a}),{tileInfo:t,cacheType:s}=e;i=t?"LERC"!==t?.format?.toUpperCase()||s&&"elevation"!==s.toLowerCase()?"ImageryTileLayer":"ElevationLayer":"ImageryLayer";break}case"SceneServer":{const e=await u(s.url.path,{customParameters:a});if(i="SceneLayer",e){const r=e?.layers;if("Voxel"===e?.layerType)i="VoxelLayer";else if(r?.length){const e=r[0]?.layerType;null!=e&&null!=c[e]&&(i=c[e])}}break}case"3DTilesServer":throw new e("arcgis-layers:unsupported","fromUrl() not supported for 3DTiles layers");case"FeatureServer":if(i="FeatureLayer",null!=o){const e=await u(r,{customParameters:a});d.sourceJSON=e,i=n(e.type)}break;default:i=f[l]}if(y[i]&&null==o){const e=await b(r,l,a);m&&(d.sublayerInfos=e.layerInfos,d.tableInfos=e.tableInfos);if(1!==e.layers.length+e.tables.length)d.layers=e.layers,d.tables=e.tables,m&&e.layerInfos?.length&&(d.sublayerConstructorProvider=await L(e.layerInfos));else if(m||p){const r=e.layerInfos?.[0]??e.tableInfos?.[0];if(d.layerId=e.layers[0]?.id??e.tables[0]?.id,d.sourceJSON=r,m){const e=r?.type;i=n(e)}}}return d.Constructor=await I(i),d}async function S(e,t){const l=await u(e,{customParameters:t});let n=null,o=null;const c=l.type;if("Feature Layer"===c||"Table"===c?(n="FeatureServer",o=l.id??null):"indexedVector"===c?n="VectorTileServer":l.hasOwnProperty("mapName")?n="MapServer":l.hasOwnProperty("bandCount")&&l.hasOwnProperty("pixelSizeX")?n="ImageServer":l.hasOwnProperty("maxRecordCount")&&l.hasOwnProperty("allowGeometryUpdates")?n="FeatureServer":l.hasOwnProperty("streamUrls")?n="StreamServer":w(l)?(n="SceneServer",o=l.id):l.hasOwnProperty("layers")&&w(l.layers?.[0])&&(n="SceneServer"),!n)return null;const i=null!=o?s(e):null;return{title:null!=i&&l.name||r(e),serverType:n,sublayer:o,url:{path:null!=i?i.serviceUrl:a(e).path}}}function w(e){return null!=e&&e.hasOwnProperty("store")&&e.hasOwnProperty("id")&&"number"==typeof e.id}async function b(e,r,a){let t,s,l=!1;switch(r){case"FeatureServer":{const r=await o(e,{customParameters:a});l=!!r.layersJSON,t=r.layersJSON||r.serviceJSON;break}case"SceneServer":{const r=await h(e,a);t=r.serviceInfo,s=r.tableServerUrl;break}default:t=await u(e,{customParameters:a})}const n=t?.layers,c=t?.tables;return{layers:n?.map((e=>({id:e.id}))).reverse()||[],tables:c?.map((e=>({serverUrl:s,id:e.id}))).reverse()||[],layerInfos:l?n:[],tableInfos:l?c:[]}}async function h(e,r){const a=await u(e,{customParameters:r}),t=a.layers?.[0];if(!t)return{serviceInfo:a};try{const{serverUrl:t}=await l(e),s=await u(t,{customParameters:r}).catch((()=>null));return s&&(a.tables=s.tables),{serviceInfo:a,tableServerUrl:t}}catch{return{serviceInfo:a}}}async function I(e){return(0,i[e])()}async function P(e,r){return(await u(e,{customParameters:r})).tileInfo}async function L(e){if(!e.length)return;const r=new Set,a=[];for(const{type:l}of e)r.has(l)||(r.add(l),a.push(I(n(l))));const t=await Promise.all(a),s=new Map;return Array.from(r).forEach(((e,r)=>{s.set(e,t[r])})),e=>s.get(e.type)}export{f as fromUrl};
