/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import t from"../PixelBlock.js";import{SimpleBandStatistics as e}from"../SimpleBandStatistics.js";import{isValidPixelBlock as i}from"./pixelUtils.js";const s=1,n=1/111e3;function o(t){let{altitude:e,azimuth:i}=t;const{hillshadeType:s,pixelSizePower:o=1,pixelSizeFactor:a=1,scalingType:l,isGCS:r,resolution:c}=t,h="multi-directional"===s?2*t.zFactor:t.zFactor,{x:u,y:f}=c;let d=h/(8*u),p=h/(8*f);if(r&&h>.001&&(d/=n,p/=n),"adjusted"===l)if(r){const t=u*n,e=f*n;d=(h+t**o*a)/(8*t),p=(h+e**o*a)/(8*e)}else d=(h+u**o*a)/(8*u),p=(h+f**o*a)/(8*f);let x=(90-e)*Math.PI/180,w=Math.cos(x),y=(360-i+90)*Math.PI/180,M=Math.sin(x)*Math.cos(y),m=Math.sin(x)*Math.sin(y);const A=[315,270,225,360,180,0],g=[60,60,60,60,60,90],k=new Float32Array([3,5,3,2,1,4]),z=k.reduce(((t,e)=>t+e)),F=k.map((t=>t/z)),P="multi-directional"===s?A.length:1,C=new Float32Array(6),Z=new Float32Array(6),v=new Float32Array(6);if("multi-directional"===s)for(let n=0;n<P;n++)e=g[n],i=A[n],x=(90-e)*Math.PI/180,w=Math.cos(x),y=(360-i+90)*Math.PI/180,M=Math.sin(x)*Math.cos(y),m=Math.sin(x)*Math.sin(y),C[n]=w,Z[n]=M,v[n]=m;else C.fill(w),Z.fill(M),v.fill(m);return{resolution:c,factor:[d,p],sinZcosA:M,sinZsinA:m,cosZ:w,sinZcosAs:Z,sinZsinAs:v,cosZs:C,weights:F,hillshadeType:["traditional","multi-directional"].indexOf(s)}}function a(t,e){const{width:i,height:n}=t,o=i*n,a=new Uint8Array(o),l=null!=t.mask;let r;if(l){r=new Uint8Array(t.mask);for(let t=0;t<r.length;t++)r[t]&&(a[t]=1,r[t]=1)}const c=t.pixels[0],h=new Float32Array(o),u=new Float32Array(o);let f,d=0;if(e){const{resolution:t}=e,i=t?(t.x+t.y)/2:1;d=200*e.zFactor/(i*i),f=new Float32Array(o)}const p=e?.curvatureType;let x,w,y,M,m,A,g,k;for(let z=s;z<n-s;z++){const t=z*i;for(let e=s;e<i-s;e++){const s=t+e;if(!r||0!==r[s]){if(r){if(r[s-i-1]+r[s-i]+r[s-i+1]+r[s-1]+r[s+1]+r[s+i-1]+r[s+i]+r[s+i+1]<7){a[s]=0;continue}x=r[s-i-1]?c[s-i-1]:c[s],w=r[s-i]?c[s-i]:c[s],y=r[s-i+1]?c[s-i+1]:c[s],M=r[s-1]?c[s-1]:c[s],m=r[s+1]?c[s+1]:c[s],A=r[s+i-1]?c[s+i-1]:c[s],g=r[s+i]?c[s+i]:c[s],k=r[s+i+1]?c[s+i+1]:c[s]}else x=c[s-i-1],w=c[s-i],y=c[s-i+1],M=c[s-1],m=c[s+1],A=c[s+i-1],g=c[s+i],k=c[s+i+1];if(h[s]=y+m+m+k-(x+M+M+A),u[s]=A+g+g+k-(x+w+w+y),null!=f){const t=c[s],e=.5*(M+m)-t,i=.5*(w+g)-t;if("standard"===p)f[s]=-d*(e+i);else{const t=(-x+y+A-k)/4,n=(-M+m)/2,o=(w-g)/2,a=n*n,l=o*o,r=a+l;r&&(f[s]="profile"===p?d*(e*a+i*l+t*n*o)/r:-d*(e*l+i*a-t*n*o)/r)}}}}}return{outMask:l?a:null,dzxs:h,dzys:u,curvatures:f}}function l(t,e,i){for(let s=0;s<i;s++)t[s*e]=t[s*e+1],t[(s+1)*e-1]=t[(s+1)*e-2];for(let s=1;s<e-1;s++)t[s]=t[s+e],t[s+(i-1)*e]=t[s+(i-2)*e]}function r(n,r){if(!i(n))return n;const{factor:c,sinZcosA:h,sinZsinA:u,cosZ:f,sinZcosAs:d,sinZsinAs:p,cosZs:x,weights:w}=o(r),[y,M]=c,m="traditional"===r.hillshadeType,{width:A,height:g}=n,k=new Uint8Array(A*g),{dzxs:z,dzys:F,outMask:P}=a(n);for(let t=s;t<g-s;t++){const e=t*A;for(let t=s;t<A-s;t++){const i=e+t;if(!P||P[i]){const t=z[i]*y,e=F[i]*M,s=Math.sqrt(1+t*t+e*e);let n=0;if(m){let i=255*(f+u*e-h*t)/s;i<0&&(i=0),n=i}else{const i=p.length;for(let o=0;o<i;o++){let i=255*(x[o]+p[o]*e-d[o]*t)/s;i<0&&(i=0),n+=i*w[o]}}k[i]=255&n}}}l(k,A,g);return new t({width:A,height:g,pixels:[k],mask:P,pixelType:"u8",validPixelCount:n.validPixelCount,statistics:[new e(0,255)]})}function c(t,e,s,n){if(!i(t)||!i(e))return;const{min:o,max:a}=n,l=t.pixels[0],{pixels:r,mask:c}=e,h=r[0],u=255.00001/(a-o),f=new Uint8ClampedArray(h.length),d=new Uint8ClampedArray(h.length),p=new Uint8ClampedArray(h.length),x=s.length-1;for(let i=0;i<h.length;i++){if(c&&0===c[i])continue;const t=Math.floor((h[i]-o)*u),[e,n]=s[t<0?0:t>x?x:t],a=l[i],r=a*n,w=r*(1-Math.abs(e%2-1)),y=a-r;switch(Math.floor(e)){case 0:f[i]=r+y,d[i]=w+y,p[i]=y;break;case 1:f[i]=w+y,d[i]=r+y,p[i]=y;break;case 2:f[i]=y,d[i]=r+y,p[i]=w+y;break;case 3:f[i]=y,d[i]=w+y,p[i]=r+y;break;case 4:f[i]=w+y,d[i]=y,p[i]=r+y;break;case 5:case 6:f[i]=r+y,d[i]=y,p[i]=w+y}}t.pixels=[f,d,p],t.updateStatistics()}function h(e,o){if(!i(e))return e;const r=o.zFactor,c=o.pixelSizePower??1,h=o.pixelSizeFactor??1,u=o.slopeType,f=o.isGCS,{x:d,y:p}=o.resolution;let x=r/(8*d),w=r/(8*p);f&&Math.abs(r-1)<1e-4&&(x/=n,w/=n),"adjusted"===u&&(x=(r+d**c*h)/(8*d),w=(r+p**c*h)/(8*p));const{dzxs:y,dzys:M,outMask:m}=a(e),{width:A,height:g}=e,k=new Float32Array(A*g);for(let t=s;t<g-s;t++){const e=t*A;for(let t=s;t<A-s;t++){const i=e+t;if(!m||m[i]){const s=y[i]*x,n=M[i]*w,o=Math.sqrt(s*s+n*n);k[e+t]="percent-rise"===u?100*o:57.2957795*Math.atan(o)}}}l(k,A,g);const z=new t({width:A,height:g,pixels:[k],mask:m,pixelType:"f32",validPixelCount:e.validPixelCount});return z.updateStatistics(),z}function u(n,o={}){if(!i(n))return n;const{resolution:r}=o,c=r?1/r.x:1,h=r?1/r.y:1,{dzxs:u,dzys:f,outMask:d}=a(n),{width:p,height:x}=n,w=new Float32Array(p*x);for(let t=s;t<x-s;t++){const e=t*p;for(let t=s;t<p-s;t++){const i=e+t;if(!d||d[i]){const s=u[i]*c,n=f[i]*h;let o=-1;0===s&&0===n||(o=90-57.29578*Math.atan2(n,-s),o<0&&(o+=360),360===o?o=0:o>360&&(o%=360)),w[e+t]=o}}}l(w,p,x);return new t({width:p,height:x,pixels:[w],mask:d,pixelType:"f32",validPixelCount:n.validPixelCount,statistics:[new e(-1,360)]})}function f(e,s){if(!i(e))return e;const{curvatures:n,outMask:o}=a(e,s),{width:r,height:c}=e;l(n,r,c);const h=new t({width:r,height:c,pixels:[n],mask:o,pixelType:"f32",validPixelCount:e.validPixelCount});return h.updateStatistics(),h}export{u as aspect,o as calculateHillshadeParams,f as curvature,n as gcsFactor,r as hillshade,h as slope,c as tintHillshade};
