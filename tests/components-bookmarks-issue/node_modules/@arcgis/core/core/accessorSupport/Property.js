/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{ObservableBase as t}from"./ObservableBase.js";import{OriginId as s}from"./PropertyOrigin.js";import{trackAccess as e,runTracked as i,trackExplicitDependencies as n,runUntracked as a}from"./tracking.js";import{Flags as l}from"./tracking/Flags.js";class o extends t{constructor(t,s){super(),this.propertyName=t,this.metadata=s,this._accessed=null,this._handles=null,this.flags=0,this.flags=l.Dirty|(s.nonNullable?l.NonNullable:0)|(s.hasOwnProperty("value")?l.HasDefaultValue:0)|(void 0===s.get?l.DepTrackingInitialized:0)|(void 0===s.dependsOn?l.AutoTracked:0)}destroy(){this.flags&l.Dirty&&this.onCommitted(),super.destroy(),this._accessed=null,this._clearObservationHandles()}getComputed(t){e(this);const o=t.store,r=this.propertyName,h=this.flags,d=o.get(r);if(h&l.Computing)return d;if(~h&l.Dirty&&o.has(r))return d;this.flags|=l.Computing;const c=t.host;let g;h&l.AutoTracked?g=i(this,this.metadata.get,c):(n(c,this),g=this.metadata.get.call(c)),o.set(r,g,s.COMPUTED);const f=o.get(r);return f===d?this.flags&=~l.Dirty:a(this.commit,this),this.flags&=~l.Computing,f}onObservableAccessed(t){if(t===this)return;let s=this._accessed;if(null==s)s=[],this._accessed=s;else if(s.includes(t))return;s.push(t)}onTrackingEnd(){this._clearObservationHandles(),this.flags|=l.DepTrackingInitialized;const t=this._accessed;if(null==t||0===t.length)return;let s=this._handles;null==s&&(s=[],this._handles=s);for(let e=0;e<t.length;++e)s.push(t[e].observe(this));t.length=0}notifyChange(){this.onInvalidated(),this.onCommitted()}invalidate(){this.onInvalidated()}commit(){this.flags&=~l.Dirty,this.onCommitted()}_clearObservationHandles(){const t=this._handles;if(null!==t){for(let s=0;s<t.length;++s)t[s].remove();t.length=0}}onInvalidated(){~this.flags&l.Overridden&&(this.flags|=l.Dirty);const t=this._observers;if(t&&t.length>0)for(const s of t)s.onInvalidated()}onCommitted(){const t=this._observers;if(t&&t.length>0){const s=t.slice();for(const t of s)t.onCommitted()}}}export{o as Property};
