/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Error.js";import"../../../core/Logger.js";import"../../../core/has.js";import"../../../core/RandomLCG.js";import{subclass as r}from"../../../core/accessorSupport/decorators/subclass.js";import{createGenerateRendererClassBreaks as i,createGenerateRendererUniqueValues as s}from"../../../rest/support/generateRendererUtils.js";import{getDataValues as a,mergeWhereClauses as o}from"../../statistics/support/utils.js";import{WorkerClient as n}from"../../statistics/support/WorkerClient.js";import{getFieldsList as l}from"../utils.js";import c from"./FeatureLayerAdapter.js";import{ensureFeaturesJSON as p}from"./support/utils.js";let u=class extends c{constructor(){super(...arguments),this.adapterName="csv-layer-adapter"}async _createGenerateRendererResult(e,r,o,n,l){const c=e?.features,u=c?.length;if(!u)throw new t("csv-layer-adapter:insufficient-data","No features are available to calculate statistics");const m=p(c);let d=null;if("percent-of-total"===n){if(d=(await this.workerClient.summaryStatistics({field:r},m)).sum,null==d)throw new t("csv-layer-adapter:invalid","invalid normalizationTotal")}if("class-breaks-definition"===l?.type){const e=(await a({field:r,normalizationType:n,normalizationField:o,normalizationTotal:d},m)).filter((e=>Number.isFinite(e)));return i({definition:l,values:e,normalizationTotal:d})}const f=(await a({field:r},m)).filter((e=>null!=e&&"string"==typeof e&&""!==e.trim()));return s(f)}generateRenderer(e,t){const r=e.classificationDefinition;let i=null,s=null,a=null;"class-breaks-definition"===r?.type?(i=r.classificationField,s=r.normalizationField,a=r.normalizationType):i=r?.attributeField;const n=this.layer;return l({field:i,normalizationField:s}).then((l=>{const c=n.createQuery();return c.returnGeometry=!1,c.outFields=l,c.where=o(c.where,e.where),n.queryFeatures(c,{signal:t}).then((e=>this._createGenerateRendererResult(e,i,s,a,r)))}))}load(e){const t=this.layer.load(e).then((async t=>{this.geometryType=t.geometryType,this.objectIdField=t.objectIdField,this.supportsSQLExpression=!0,this._hasLocalSource=!1,this.hasQueryEngine=!0,this.workerClient=n.getInstance(),await this.workerClient.open(e.signal)}));return this.addResolvingPromise(t),Promise.resolve(this)}};u=e([r("esri.smartMapping.support.adapters.CSVLayerAdapter")],u);const m=u;export{m as default};
