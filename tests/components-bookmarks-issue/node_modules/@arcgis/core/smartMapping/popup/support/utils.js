/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{unique as e}from"../../../core/arrayUtils.js";import"../../../core/has.js";import{fetchMessageBundle as t}from"../../../intl/messages.js";import{substitute as n}from"../../../intl/substitute.js";import{numericTypes as i}from"../../../layers/support/fieldUtils.js";import"../../../popup/content/AttachmentsContent.js";import"../../../popup/content/Content.js";import"../../../popup/content/CustomContent.js";import"../../../popup/content/ExpressionContent.js";import o from"../../../popup/content/FieldsContent.js";import"../../../popup/content/MediaContent.js";import"../../../popup/content/RelationshipContent.js";import s from"../../../popup/content/TextContent.js";import r from"../../../popup/ExpressionInfo.js";import a from"../../../popup/FieldInfo.js";import{getAttributes as p}from"../../../renderers/support/utils.js";import{viewScaleRE as l}from"../../../renderers/visualVariables/support/visualVariableUtils.js";import{getFeatureReductionFields as u}from"../../support/adapters/support/utils.js";let m=0;function f(e=0){}const d="expression/";function c(e){return"hasVisualVariables"in e&&e.hasVisualVariables()?e.visualVariables.filter((e=>!l.test(e.valueExpression)&&(!("target"in e)||"outline"!==e.target))):[]}function b(e,t){if(!t)return null;const n=u(e);return n?.find((e=>e.name.toLowerCase()===t.toLowerCase()))}function x(e,t,n){let o=null;if(n){const t=e.featureReduction;t&&"popupTemplate"in t&&t.popupTemplate&&(o=t.popupTemplate.fieldInfos)}else"popupTemplate"in e&&e.popupTemplate&&(o=e.popupTemplate.fieldInfos);const s=n?b(e,t):e.getField(t);let r=null;if(o&&o.some((e=>!(!e||e.fieldName.toLowerCase()!==s?.name.toLowerCase())&&(r=e.clone(),!0))),!r){const e=i.includes(s.type),t="integer"===s.type||"small-integer"===s.type;r=new a({fieldName:s.name,isEditable:s.editable,visible:!0,format:e?{places:t?0:2,digitSeparator:!0}:null})}return r.label||(r.label=s.alias),r}function g(e){const{expression:t,title:n,returnType:i}=e;return new r({name:"expr"+m++,expression:t,title:n,returnType:i})}function j(e){const t="number"===e.returnType?{places:2,digitSeparator:!0}:null;return new a({fieldName:`${d}${e.name}`,visible:!0,format:t})}async function F(i){const o=await t("esri/smartMapping/t9n/smartMapping"),{renderer:s,layer:r,normFieldExpressionTemplate:a,isFeatureReduction:l}=i,u=[],m=[],f=p(s,c);for(const e of f)if("field"===e.type)u.push(x(r,e.field,l));else if("normalized-field"===e.type){const t=l?b(r,e.field):r.getField(e.field),i=l?b(r,e.normalizationField):r.getField(e.normalizationField),s=g({type:"expression",expression:`\n      $feature["${t.name}"];\n      $feature["${i.name}"];\n      ${"percentage"===a?`($feature["${t.name}"] / $feature["${i.name}"]) * 100;`:`$feature["${t.name}"] / $feature["${i.name}"];`}\n      `,title:n("percentage"===a?o.normFieldLabelAsPercent:o.normFieldLabel,{expression1:t.alias,expression2:i.alias}),returnType:"number"});u.push(j(s),x(r,e.field,l),x(r,e.normalizationField,l)),m.push(s)}else if("expression"===e.type){const t=g(e);u.push(j(t)),m.push(t)}return{fieldInfos:e(u,((e,t)=>e.fieldName===t.fieldName)),expressionInfos:e(m,((e,t)=>e.expression===t.expression))}}async function y(e,i,r){const{fieldInfos:a,expressionInfos:p}=i,l=await t("esri/smartMapping/t9n/smartMapping");if(a.length>2)return[new o({fieldInfos:a})];const u=[];for(const t of a){const i=t.fieldName;let o=t.label;if(!o){const t=r?b(e,i):e.getField(i);if(t)o=t.alias||i;else if(p){const e=i.split(d)[1],t=p[p.findIndex((t=>t.name===e))];t&&(o=t.title||t.name)}}u.push(new s({text:n(l.fieldInfo,{fieldLabel:o,fieldValue:`{${i}}`})}))}return u}function $(e){return!(!("normalizationField"in e)||!e.normalizationField)||"hasVisualVariables"in e&&e.hasVisualVariables()&&e.visualVariables.some((e=>!(!("normalizationField"in e)||!e.normalizationField)))}export{d as expressionFieldPrefix,y as getContentFromFieldInfos,g as getExpressionInfo,F as getFieldAndExpressionInfos,x as getFieldInfo,j as getFieldInfoFromExpressionInfo,c as getPrimaryVisualVariables,$ as hasNormalizedField,f as resetSuffixForTests};
