/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Error.js";import{makeHandle as r,handlesGroup as i,destroyHandle as n}from"../../../core/handleUtils.js";import{getProjectiveTransform as s}from"../../../core/perspectiveUtils.js";import{debounce as a,isPromiseLike as o}from"../../../core/promiseUtils.js";import{watch as d,on as l,syncAndInitial as m}from"../../../core/reactiveUtils.js";import{property as c}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/has.js";import"../../../core/Logger.js";import"../../../core/RandomLCG.js";import{subclass as p}from"../../../core/accessorSupport/decorators/subclass.js";import{create as h}from"../../../core/libs/gl-matrix-2/factories/mat3f64.js";import{toExtent as u}from"../../../geometry/support/aaBoundingRect.js";import{MediaElementView as y}from"../../../layers/support/MediaElementView.js";import{DrapeSourceType as g}from"./interfaces.js";import{LayerView3D as _}from"./LayerView3D.js";import{MediaLayerInteraction as f}from"./support/MediaLayerInteraction.js";import{drapedZ as E}from"../terrain/OverlayRenderer.js";import{Attribute as D}from"../webgl-engine/lib/Attribute.js";import{Geometry as w}from"../webgl-engine/lib/Geometry.js";import{DirtyOperation as v,DirtyState as b}from"../webgl-engine/lib/ModelDirtyTypes.js";import{RenderGeometry as R}from"../webgl-engine/lib/RenderGeometry.js";import{Texture as j}from"../webgl-engine/lib/Texture.js";import{UpdatePolicy as T}from"../webgl-engine/lib/UpdatePolicy.js";import{VertexAttribute as x}from"../webgl-engine/lib/VertexAttribute.js";import{ImageMaterial as A}from"../webgl-engine/materials/ImageMaterial.js";import P from"../../layers/LayerView.js";import M from"../../layers/MediaLayerView.js";import{isScaleRangeActive as G}from"../../support/layerViewUtils.js";import{TextureWrapMode as S}from"../../webgl/enums.js";let I=class extends(_(M(P))){get interactive(){return this._interaction.enabled}set interactive(e){this._interaction&&(this._interaction.enabled=e)}get selectedElement(){return this._interaction.selectedElement}set selectedElement(e){this._interaction&&(this._interaction.selectedElement=e)}constructor(e){super(e),this.type="media-3d",this.drapeSourceType=g.RasterImage,this.updatePolicy=T.ASYNC,this._uidToElement=new Map,this._renderedElements=new Map,this._lastDrapingExtent=null,this._update=a((async(e,t,r)=>{const i=await this._collectMediaElements(e,t,r);this._synchronizeRenderElements(i)}),0);const{view:t,layer:r}=e;this._interaction=new f({view:t,layer:r}),this.addHandles(d((()=>this.interactionOptions),(e=>this._interaction.options=e),m))}initialize(){const{view:e,layer:t}=this;this._renderer=e.basemapTerrain.overlayManager.registerGeometryDrapeSource(this);const i=()=>this._updateWithLastDrapingExtent();this.addHandles([r((()=>e.basemapTerrain.overlayManager.unregisterDrapeSource(this))),l((()=>t.effectiveSource),"change",i),l((()=>t.effectiveSource),"refresh",i)]),this._updatingHandles.add((()=>this.suspended),i)}setDrapingExtent(e,t){this._lastDrapingExtent={overlays:e,spatialReference:t},this._updateWithLastDrapingExtent()}getHit(e){const t=this._uidToElement.get(e);return t?{type:"media",element:t,layer:this.layer}:null}canResume(){if(!super.canResume())return!1;const{minScale:e,maxScale:t}=this.layer.effectiveScaleRange;if(G(e,t)){const r=this.view.scale;if(r<t||e>0&&r>e)return!1}return!0}isUpdating(){return super.isUpdating()||this._interaction.updating}_updateWithLastDrapingExtent(){if(null==this._lastDrapingExtent||this.suspended)return void(this._renderer&&this._synchronizeRenderElements(new Set));const{overlays:e,spatialReference:t}=this._lastDrapingExtent;this._updatingHandles.addPromise(this._update(e,t).catch((()=>{})))}async _collectMediaElements(e,t,r){const i=this.layer.effectiveSource;return null==i?new Set:new Set((await Promise.all(e.map((e=>i.queryElements(u(e.extent,t),{signal:r}))))).flat())}_synchronizeRenderElements(e){this._synchronizeRenderElementsRemove(e),this._synchronizeRenderElementsAdd(e)}_synchronizeRenderElementsRemove(e){const t=[];this._renderedElements.forEach(((r,i)=>{e.has(i)||(null!=r.renderData&&t.push(r.renderData.renderGeometry),this._removeElement(i,r),this.emit("element-render-changed",{element:i}))}))}_synchronizeRenderElementsAdd(e){for(const t of e)this._renderedElements.has(t)||this._createRenderElement(t)}_removeElement(e,{renderData:t,handle:r}){this._destroyRenderData(e,t),this._renderedElements.delete(e),this._uidToElement.delete(e.uid),r.remove()}async _createRenderElement(e){const t=new y({spatialReference:this.view.spatialReference,element:e}),r={renderData:null,handle:i([this._updatingHandles.add((()=>e.opacity),(e=>{null!=r.renderData&&r.renderData.material.setParameters({opacity:e})})),this._updatingHandles.add((()=>t.coords),(()=>{null!=r.renderData?this._updateGeometry(t,r,r.renderData):this._initializeRenderData(t,r)})),this._updatingHandles.add((()=>e.content),(()=>this._initializeRenderData(t,r))),n(t)])};this._renderedElements.set(e,r),this._uidToElement.set(e.uid,e),this._updatingHandles.addPromise(e.load().catch((()=>{}))),this._initializeRenderData(t,r)}_initializeRenderData(e,t){const{coords:r,element:i}=e,{contentWidth:n,contentHeight:s}=i;if(null==r||null==i.content)return void(t.renderData=this._destroyRenderData(i,t.renderData));if(null!=t.renderData)return;const a=this._createTexture(i.content),d=a.load(this.view._stage.renderView.renderingContext);this.view._stage.add(a),o(d)&&this._updatingHandles.addPromise(d);const l=new A({initTextureTransparent:!0,textureId:a.id,opacity:i.opacity,transparent:!0,perspectiveInterpolation:!0}),m=this._getPositionAttributeArray(r),c=[0,0,1,0,1,1,0,1],p=this._getPerspectiveDivideAttributeArray(m,n,s),h=[0,1,2,0,2,3],u=new w(l,[[x.POSITION,new D(m,h,3,!0)],[x.UV0,new D(c,h,2,!0)],[x.PERSPECTIVEDIVIDE,new D(p,h,1,!0)]]),y=new R(u,{layerUid:this.layer.uid,graphicUid:i.uid});this._renderer.addGeometries([y],v.ADD),t.renderData={renderGeometry:y,texture:a,material:l},this.emit("element-render-changed",{element:i})}_updateGeometry(e,t,r){const{coords:i,element:n}=e;if(null==i||null==n.content)return void(t.renderData=this._destroyRenderData(n,t.renderData));const s=this._getPositionAttributeArray(i);r.renderGeometry.geometry.setAttributeData(x.POSITION,s);const a=this._getPerspectiveDivideAttributeArray(s,n.contentWidth,n.contentHeight);r.renderGeometry.geometry.setAttributeData(x.PERSPECTIVEDIVIDE,a),r.renderGeometry.geometry.invalidateBoundingInfo(),this._renderer.modifyGeometries([r.renderGeometry],b.GEOMETRY),this.emit("element-render-changed",{element:n})}_getPositionAttributeArray(e){const[t,r,i,n]=e.rings[0];return[t[0],t[1],E,n[0],n[1],E,i[0],i[1],E,r[0],r[1],E]}_getPerspectiveDivideAttributeArray(e,t,r){s(H,[0,0,t,0,t,r,0,r],[e[0],e[1],e[3],e[4],e[6],e[7],e[9],e[10]]);const i=H[6]/H[8]*t,n=H[7]/H[8]*r;return[1,1+i,1+i+n,1+n]}_destroyRenderData(e,t){if(null==t)return null;const r=t.texture;return r.unload(),this.view._stage.remove(r),this._renderer.removeGeometries([t.renderGeometry],v.REMOVE),this.emit("element-render-changed",{element:e}),null}_createTexture(e){const r=e instanceof HTMLImageElement?e.naturalWidth:e.width,i=e instanceof HTMLImageElement?e.naturalHeight:e.height;if("getFrame"in e)throw new t("media-layer-view-3d","animation is not supported");return new j(e,{wrap:{s:S.CLAMP_TO_EDGE,t:S.CLAMP_TO_EDGE},preMultiplyAlpha:!0,width:r,height:i,mipmap:!0,updateCallback:()=>this.view.basemapTerrain.overlayManager.setDrawTexturesDirty()})}get test(){const e=this;return{get numberOfElements(){return e._renderedElements.size}}}};e([c({readOnly:!0})],I.prototype,"type",void 0),e([c()],I.prototype,"layer",void 0),e([c()],I.prototype,"interactive",null),e([c()],I.prototype,"selectedElement",null),I=e([p("esri.views.3d.layers.MediaLayerView3D")],I);const H=h(),L=I;export{L as default};
