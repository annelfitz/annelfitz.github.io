/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import e from"../../../../core/Error.js";import{isPromiseLike as t}from"../../../../core/promiseUtils.js";import{pt2px as r}from"../../../../core/screenUtils.js";import{fromValues as n,ZEROS as s,create as i}from"../../../../core/libs/gl-matrix-2/factories/vec2f64.js";import{fromValues as o}from"../../../../core/libs/gl-matrix-2/factories/vec3f64.js";import{hasCalloutSupport as l,textSymbolLayerSupportsVerticalOffset as a}from"../../../../symbols/callouts/calloutUtils.js";import{perObjectElevationAligner as c}from"./ElevationAligners.js";import{SymbolUpdateType as m,needsElevationUpdates2D as h}from"./elevationAlignmentUtils.js";import{ElevationContext as p}from"./ElevationContext.js";import{Graphics3DObject3DGraphicLayer as f}from"./Graphics3DObject3DGraphicLayer.js";import{Graphics3DObjectMetadata as u}from"./Graphics3DObjectMetadata.js";import{Graphics3DSymbolLayer as d}from"./Graphics3DSymbolLayer.js";import{validateSymbolLayerSize as g}from"./graphicUtils.js";import{LabelParameters as y,LabelPlacement as x}from"./LabelParameters.js";import{verticalScreenOffsetFromAlignment as v,verticalPlacementFromAlignment as b,textRenderAlignmentFromHorizontalPlacement as P,horizontalPlacementToAnchorX as O,anchorFromPlacements as j,namedAnchorToHUDMaterialAnchorPos as w}from"./placementUtils.js";import{placePointOnGeometry as S,createStageObject as E,extendPointGraphicElevationContext as _}from"./pointUtils.js";import{getFontMetrics as L}from"../../webgl-engine/lib/FontMetrics.js";import{createPointGeometry as z}from"../../webgl-engine/lib/GeometryUtil.js";import{TextRenderParameters as C}from"../../webgl-engine/lib/TextRenderParameters.js";import G from"../../webgl-engine/lib/TextTextureFactory.js";import{HUDMaterial as U}from"../../webgl-engine/materials/HUDMaterial.js";const R=o(0,0,1);class D extends d{constructor(e,t,r,n){super(e,t,r,n),this._elevationOptions={supportsOffsetAdjustment:!0,supportsOnTheGround:!1},this.ensureDrapedStatus(!1)}async doLoad(){if(!this._drivenProperties.size){const t=g(this.symbolLayer.size);if(t)throw new e("graphics3dtextsymbollayer:invalid-size",t)}await this._createTextRenderParameters()}async _createTextRenderParameters(){const e=this._context.graphicsCoreOwner.view.state.rasterPixelRatio;this._textRenderParameters=await C.fromSymbol(this.symbolLayer,e)}destroy(){super.destroy()}createGraphics3DGraphic(e){const t=e.graphic,r=S(t.geometry);if(null==r)return this.logger.warn(`unsupported geometry type for text symbol: ${t.geometry.type}`),null;const n=this.symbolLayer.text;if(null==n||""===n)return null;const s=l(this.symbol)&&this.symbol.hasVisibleVerticalOffset()?this.symbol.verticalOffset:null;if(null!=s&&!a(this.symbolLayer))return this.logger.errorOncePerTick(`Callouts and vertical offset on text symbols are currently only supported with 'center' horizontal alignment (not with '${this.symbolLayer.horizontalAlignment}' alignment)`),null;const{verticalAlignment:i}=this.symbolLayer,o=new x(s);v(i,o.screenOffset);const c=new y(o,this.symbolLayer.horizontalAlignment,b(i));return this._createAs3DShape(t,r,n,c)}createLabel(e,t,r,n,s){const i=e.graphic,o=S(i.geometry);if(null==o)return this.logger.warn(`unsupported geometry type for label: ${i.geometry.type}`),null;const l=t.text;return!l||/^\s+$/.test(l)?null:this._createAs3DShape(i,o,l,t,r,n,s)}setGraphicElevationContext(e,t,r=0){return super.setGraphicElevationContext(e,t),t.addOffsetRenderUnits(r),t}layerOpacityChanged(){return this.logger.warn("layer opacity change not yet implemented in Graphics3DTextSymbolLayer"),!1}layerElevationInfoChanged(e,t){return A(e,t,((e,t)=>{this.updateGraphicElevationContext(t,e)})),m.UPDATE}slicePlaneEnabledChanged(e,t){return A(e,t,(e=>{for(const t of e.stageObject.geometries)t.material.setParameters({hasSlicePlane:this._context.slicePlaneEnabled})})),!0}physicalBasedRenderingChanged(){return!0}get pixelRatioChanged(){return!1}updateGraphicElevationContext(e,t){const r=t.elevationContext;this.setGraphicElevationContext(e,r,null!=t.metadata?t.metadata.elevationOffset:0),t.needsElevationUpdates=h(r.mode)||"absolute-height"===r.mode}_defaultElevationInfoNoZ(){return W}_createAs3DShape(e,o,l,a,m=null,d=null,g=(()=>a.placement.elevationOffset)){const y=this.setGraphicElevationContext(e,new p,a.placement.elevationOffset),x="polyline"===e.geometry?.type,v=e.uid;let b=null,O=null;if(null==d){const e=P(a.horizontalPlacement);b=new G(l,e,this._textRenderParameters);let r=null;if(null!=this._context.sharedResources.textures){O=this._context.sharedResources.textures.fromData(b.key,(()=>b.create())),O.texture.events.on("unloaded",(()=>r?.release()));const e=this._context.stage.renderView.textureRepository.acquire(O.texture.id);if(null==e||t(e))return O.release(),null;r=e}}const j=T(b,a),w={occlusionTest:!0,screenOffset:a.placement.screenOffset,anchorPosition:j,polygonOffset:!0,color:[1,1,1,1],centerOffsetUnits:a.placement.centerOffsetUnits,drawInSecondSlot:!0};if(d?w.textureId=d.id:O&&(w.textureId=O.texture.id),null!=a.placement.verticalOffset){const{screenLength:e,minWorldLength:t,maxWorldLength:n}=a.placement.verticalOffset;w.verticalOffset={screenLength:r(e),minWorldLength:t||0,maxWorldLength:null!=n?n:1/0}}if(this._context.screenSizePerspectiveEnabled){const{screenSizePerspectiveSettings:e,screenSizePerspectiveSettingsLabels:t}=this._context.sharedResources,r=L(this._textRenderParameters);w.screenSizePerspective=t.overrideFontHeight(r.maxHeight),w.screenSizePerspectiveAlignment=e}x&&(w.shaderPolygonOffset=1e-4),w.hasSlicePlane=this._context.slicePlaneEnabled;const S=(e,t)=>{const r=JSON.stringify(t);let n=e.get(r);return null==n&&(n=new U(t),e.add(r,n)),n},C=m?S(m,w):new U(w),D=a.placement.translation,A=b?n(b.displayWidth,b.displayHeight):s,W=a.placement.centerOffset,H=R,I=i(),V=z(C,H,D,null,A,W,I,null),$=E(this._context,o,V,y,v);if(null==$)return null;const F=(t,r,n,s,i,o)=>{const l=g()||a.placement.elevationOffset,m=this.setGraphicElevationContext(e,r,l);return c(t,m,n,s,i,o)},M=new f(this,$.object,[V],null==m?[C]:null,O,F,y);M.alignedSampledElevation=$.sampledElevation,M.needsElevationUpdates=h(y.mode)||"absolute-height"===y.mode,M.getScreenSize=(e=i())=>(e[0]=b?b.displayWidth:a.displaySize[0],e[1]=b?b.displayHeight:a.displaySize[1],e);const k=new u(a.placement.elevationOffset,l);return M.metadata=k,_(M,o,this._context.elevationProvider),M}}function A(e,t,r){e&&e.forEach((e=>{const n=t(e);null!=n&&r(n,e.graphic)}))}function T(e,t){if("baseline"===t.verticalPlacement){const r=O[t.horizontalPlacement],s=null!=e?e.baselineAnchorY:0;return n(r,s)}const r=j(t.horizontalPlacement,t.verticalPlacement);return w[r]}const W={mode:"relative-to-ground",offset:0};export{D as Graphics3DTextSymbolLayer};
