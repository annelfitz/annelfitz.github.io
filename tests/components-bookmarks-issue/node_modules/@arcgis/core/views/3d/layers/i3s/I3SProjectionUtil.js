/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{create as t}from"../../../../core/libs/gl-matrix-2/factories/mat4f64.js";import{create as o}from"../../../../core/libs/gl-matrix-2/factories/vec3f64.js";import{getReferenceEllipsoid as r}from"../../../../geometry/ellipsoidUtils.js";import{computeTranslationToOriginAndRotation as a}from"../../../../geometry/projection/computeTranslationToOriginAndRotation.js";function i(o,r,i,n){const s=e(o,r,i),c=t();return a(i,s,c,n),c}const n=1,s=5-n;function e(t,a,i){const e=o(),c=t[3],m=2**(Math.ceil(Math.log(c)*Math.LOG2E/s)*s+n);if(i.isGeographic){const o=m/r(i).radius*180/Math.PI,a=Math.round(t[1]/o),n=Math.max(-90,Math.min(90,a*o)),s=o/Math.cos((Math.abs(n)-o/2)/180*Math.PI),c=Math.round(t[0]/s)*s;e[0]=c,e[1]=n}else{const o=Math.round(t[0]/m),r=Math.round(t[1]/m);e[0]=o*m,e[1]=r*m}const h=t[2]+a,M=Math.round(h/m);return e[2]=M*m,e}export{i as computeGlobalTransformation,e as getLocalOrigin};
