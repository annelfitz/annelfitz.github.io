/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import e from"../../../../Graphic.js";import"../../../../symbols.js";import t from"../../../../core/Collection.js";import i from"../../../../geometry/Polygon.js";import s from"../../../../symbols/FillSymbol3DLayer.js";import o from"../../../../symbols/PointSymbol3D.js";import r from"../../../../symbols/PolygonSymbol3D.js";import a from"../../../../symbols/TextSymbol3DLayer.js";import l from"../../../../symbols/support/Symbol3DVerticalOffset.js";import{TilingScheme as h}from"../../terrain/TilingScheme.js";import n from"../../../../symbols/callouts/LineCallout3D.js";const c=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];class m{constructor(e,i,o){this._loadingGraphics=new Map,this._loadedGraphics=new Map,this._pendingGraphics=new Map,this._dataExtentGraphic=null,this._enabled=!0,this._tileFetcher=e,this._view=o,this._tilingScheme=new h(i),this._loadedSymbols=c.map((e=>new r({symbolLayers:new t([new s({material:{color:[e[0],e[1],e[2],.6]},outline:{color:"black",size:1}})])}))),this._loadingSymbols=[new r({symbolLayers:new t([new s({material:{color:[200,200,200,.4]},outline:{color:[30,30,30],size:1}})])})],this._pendingSymbols=[new r({symbolLayers:new t([new s({material:{color:[100,100,100,.4]},outline:{color:[30,30,30],size:1}})])})],this._dataExtentSymbol=new r({symbolLayers:new t([new s({material:{color:[0,0,0,0]},outline:{color:"green",size:4}})])})}destroy(){this.enabled=!1}get enabled(){return this._enabled}set enabled(e){this._enabled=e,this.update()}update(){this._enabled?(this._synchronizeMaps(this._loadingGraphics,{filter:e=>e.isFetching,symbols:this._loadingSymbols}),this._synchronizeMaps(this._loadedGraphics,{filter:e=>!e.isFetching,symbols:this._loadedSymbols}),this._synchronizeMaps(this._pendingGraphics,{filter:e=>!e.isFetching,symbols:this._pendingSymbols}),this.showDataExtent(this._tileFetcher.filterExtent)):(this._loadingGraphics.forEach((e=>{this._view.graphics.removeMany(e)})),this._loadingGraphics.clear(),this._loadedGraphics.forEach((e=>{this._view.graphics.removeMany(e)})),this._loadedGraphics.clear(),this._pendingGraphics.forEach((e=>{this._view.graphics.removeMany(e)})),this._pendingGraphics.clear(),this._dataExtentGraphic&&(this._view.graphics.remove(this._dataExtentGraphic),this._dataExtentGraphic=null))}showDataExtent(t){if(this._dataExtentGraphic&&(this._view.graphics.remove(this._dataExtentGraphic),this._dataExtentGraphic=null),null==t)return;const s=i.fromExtent(t);this._dataExtentGraphic=new e({geometry:s,symbol:this._dataExtentSymbol}),this._view.graphics.add(this._dataExtentGraphic)}_synchronizeMaps(i,s){const r=[];i.forEach(((e,t)=>{const i=this._tileFetcher.test.getFeatureTileById(t);i&&s.filter(i)||(this._view.graphics.removeMany(e),r.push(t))})),r.forEach((e=>i.delete(e))),this._tileFetcher.test.forEachFeatureTile((r=>{if(s.filter(r)&&!i.has(r.id)){const[h,c,m]=r.descriptor.lij;this._tilingScheme.ensureMaxLod(h);const p=this._tilingScheme.getExtentGeometry(h,c,m),y=[new e({geometry:p,symbol:s.symbols[h%s.symbols.length]}),new e({geometry:p.center,symbol:new o({verticalOffset:new l({screenLength:40/.75}),callout:new n({color:"white",border:{color:"black"}}),symbolLayers:new t([new a({text:`${h}/${c}/${m}`,halo:{color:"white",size:1/.75},material:{color:"black"},size:16})])})})];i.set(r.id,y),this._view.graphics.addMany(y)}}))}}export{m as FeatureTileFetcher3DDebugger};
