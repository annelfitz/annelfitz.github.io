/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{set as t,normalize as e}from"../../../../../../core/libs/gl-matrix-2/math/vec2.js";import{create as s}from"../../../../../../core/libs/gl-matrix-2/factories/vec2f64.js";import{c as a,r as i,f as o,l as r,k as n}from"../../../../../../chunks/vec32.js";import{create as c}from"../../../../../../core/libs/gl-matrix-2/factories/vec3f64.js";import{a as l,c as p}from"../../../../../../chunks/boundedPlane.js";import{intersectRay as d}from"../../../../../../geometry/support/plane.js";import{sv3d as h}from"../../../../../../geometry/support/vectorStacks.js";import{ResizeManipulator as u}from"../../../../analysis/Slice/ResizeManipulator.js";import{updateResizeHandle as m,isDiagonalResizeHandle as _,calculateDiagonalResizeHandleScale as S}from"../../../../analysis/Slice/sliceToolUtils.js";import{screenToRenderPlane as f}from"../../dragEventPipeline3D.js";import{ManipulatorType as z}from"../../ManipulatorType.js";import{mapPlaneAutoSize2D as y}from"./extentUtils.js";import{fromScreenNormalized as x}from"../../../../support/geometryUtils/ray.js";import{createManipulatorDragEventPipeline as g}from"../../../../../interactive/dragEventPipeline.js";import{AccumulationBehavior as M}from"../../../../../interactive/editGeometry/interfaces.js";import{AccumulationType as b}from"../../../../../interactive/editGeometry/operations/UpdateVertices.js";import{ExtentScaleTooltipInfo as v}from"../../../../../interactive/tooltip/ExtentTooltipInfos.js";class j{get _object(){return this._tool.object}get _operations(){return this._object.operations}get zMax(){if(!this._zMaxDirty||!this._operations)return this._zMax;const t=this._operations.data;if(t.geometry.hasZ){const e=t.coordinateHelper;this._zMax=Number.NEGATIVE_INFINITY;for(const s of t.components)for(const t of s.vertices){const s=e.getZ(t.pos)??0;this._zMax=Math.max(s,this._zMax)}}else this._zMax=0;return this._zMaxDirty=!1,this._zMax}constructor(e,a,i){this._tool=e,this._bounds=a,this._preserveAspectRatioStep=i,this._resizeHandles=[{direction:[1,0]},{direction:[1,1]},{direction:[0,1]},{direction:[-1,1]},{direction:[-1,0]},{direction:[-1,-1]},{direction:[0,-1]},{direction:[1,-1]}],this._scaleTooltipInfo=null,this._displayBoundsStart=l(),this._displayBoundsMarginStart=0,this._startScale=s(),this._endScale=s(),this._sizeStart=null,this._zMax=0,this._zMaxDirty=!0;const o=this._tool,r=o.view;this.resizeManipulators=this._resizeHandles.map((t=>{const e=new u(r,t);return o.addHandles([e.events.on("grab-changed",(t=>this._onResizeGrab(t))),this._createResizeDragPipeline(e,t)]),e})),o.manipulators.addMany(this.resizeManipulators),o.addHandles([o.events.on("scale-start",(e=>{t(this._startScale,e.xScale,e.yScale),t(this._endScale,e.xScale,e.yScale)})),o.events.on("scale",(e=>{t(this._endScale,e.xScale,e.yScale)})),o.events.on("scale-stop",(()=>{t(this._startScale,0,0),t(this._endScale,0,0)}))]),this._operations&&o.addHandles(this._operations.data.on("change",(()=>{"resize"!==o.inputState?.type&&(this._zMaxDirty=!0)})))}destroy(){this.forEachManipulator((t=>{this._tool.manipulators.remove(t),t.destroy()}))}forEachManipulator(t){this.resizeManipulators.forEach((e=>t(e,z.SCALE)))}updateManipulators(t,e){this.resizeManipulators.forEach(((s,a)=>{m(s,this._resizeHandles[a],t,e)}))}getUpdatedTooltipInfo(){return this.resizeManipulators.some((t=>t.focused))?this._computeScaleTooltipInfo():null}_computeScaleTooltipInfo(){const t=this._tool,e=this._scaleTooltipInfo??=new v({sketchOptions:t.sketchOptions}),s=y(this._bounds.mapBounds,this.zMax,this._bounds.spatialReference);return null==s?null:(e.xSize=s.xSize,e.ySize=s.ySize,null!=this._sizeStart&&this.resizeManipulators.some((t=>t.dragging))?(e.xScale=s.xSize.value/this._sizeStart.xSize.value,e.yScale=s.ySize.value/this._sizeStart.ySize.value):(e.xScale=1,e.yScale=1),e)}_onResizeGrab({action:t,screenPoint:e}){const s=this._tool,a=this._bounds;if("start"!==t||!e)return;const i=x(s.view.state.camera,e);d(a.displayBounds.plane,i,h.get())&&(a.backupMapBounds(),p(a.displayBounds,this._displayBoundsStart),this._displayBoundsMarginStart=a.displayBoundsMargin,this._sizeStart=y(a.mapBoundsStart,this.zMax,a.spatialReference),s.inputState={type:"resize"})}_createResizeDragPipeline(t,e){const{_tool:s,_object:a}=this;return g(t,((t,i,o)=>{null!=s.inputState&&(i.next((t=>("start"===t.action&&s.events.emit("scale-start",{object:a,xScale:1,yScale:1}),t))).next(f(s.view,this._displayBoundsStart.plane)).next((t=>({...t,handle:e}))).next(this._resizeDragRenderPlaneToFactors()).next(...this._preserveAspectRatioStep()).next(this._resizeDragUpdateGeometry()).next((t=>{const e={object:a,xScale:t.factor1,yScale:t.factor2};switch(t.action){case"start":case"update":s.events.emit("scale",e);break;case"end":s.inputState=null,s.events.emit("scale-stop",e)}return t})),o.next((()=>{null!=s.inputState&&s.events.emit("scale-stop",{object:a,xScale:1,yScale:1}),s.cancel()})))}))}_resizeDragRenderPlaneToFactors(){const t=this._bounds;return e=>{const s=this._displayBoundsStart,c=e.handle.direction,l=t.displayBoundsMargin,p=this._displayBoundsMarginStart,d=a(h.get(),s.origin);i(d,d,s.basis1,-c[0]),i(d,d,s.basis2,-c[1]);const u=o(h.get(),e.renderEnd,d),m=o(h.get(),e.renderStart,d),f=_(e.handle),z=S(s),y=S(t.displayBounds)/z,x=(t,e)=>{if(0===t)return 1;let s=r(e),a=.5*t*n(e,u)/s;const i=a<0?-1:1;if(f){a+=(s-.5*t*n(e,m)/s)*i*y}const o=s<1.5*p?1:B;return s=Math.max(s-p,B),i>0&&(a-=l),i*Math.max(i*(a/s),o)};return{...e,factor1:x(c[0],s.basis1),factor2:x(c[1],s.basis2)}}}_resizeDragUpdateGeometry(){const o=this._bounds;return r=>{const n=a(c(),o.mapBoundsStart.origin);i(n,n,o.mapBoundsStart.basis1,-r.handle.direction[0]),i(n,n,o.mapBoundsStart.basis2,-r.handle.direction[1]);const l=t(s(),o.mapBoundsStart.basis1[0],o.mapBoundsStart.basis1[1]);e(l,l);const d="start"===r.action?M.NEW_STEP:M.ACCUMULATE_STEPS;if(this._operations){const t=this._operations.scale(n,l,r.factor1,r.factor2,d,b.REPLACE);p(o.mapBoundsStart,o.mapBounds),o.updateMapBoundsFromOperation(t)}return r}}}const B=1e-6;export{j as ExtentScale,B as scaleEpsilon};
