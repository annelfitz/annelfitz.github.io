/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../geometry.js";import t from"../../../core/Evented.js";import{destroyMaybe as i}from"../../../core/maybe.js";import{after as r}from"../../../core/promiseUtils.js";import{toUnit as n}from"../../../core/quantityUtils.js";import{watch as s,sync as o,syncAndInitial as a}from"../../../core/reactiveUtils.js";import{property as h}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/has.js";import"../../../core/Logger.js";import"../../../core/RandomLCG.js";import{subclass as c}from"../../../core/accessorSupport/decorators/subclass.js";import{s as d,h as l,c as p,m as u}from"../../../chunks/vec32.js";import{create as _,fromValues as g}from"../../../core/libs/gl-matrix-2/factories/vec3f64.js";import{canProjectWithoutEngine as m}from"../../../geometry/projection.js";import{projectPointToVector as f}from"../../../geometry/projection/projectPointToVector.js";import{isEarth as P}from"../../../geometry/support/spatialReferenceUtils.js";import{ViewingMode as v}from"../../ViewingMode.js";import{EnvironmentRenderer as y}from"./EnvironmentRenderer.js";import{positionToTimezoneInfo as w}from"../support/earthUtils.js";import{computeColorAndIntensity as U,computeVirtualLightDirection as b,computeShadowsEnabled as T,ColorAndIntensity as R}from"../support/sunUtils.js";import{Update as C}from"../webgl-engine/lib/Update.js";import{MainLight as M,AmbientLight as S,FillLight as G}from"../webgl-engine/lighting/Lightsources.js";import{euclideanDirectDistanceBetweenPoints as H}from"../../support/euclideanLengthMeasurementUtils.js";import j from"../../../geometry/SpatialReference.js";let L=class extends t.EventedAccessor{constructor(){super(),this._referencePointUpdateDelay=200,this._referencePointUpdateInterval=3e3,this._referencePointUpdateDistThreshold=1e6,this._referencePosUpdateQuery=null,this._referencePosMapCoordsRequested=null,this._viewHandlesKey="viewHandles",this._preserveAbsoluteDateTime=!1,this._trackingEnabled=!1,this._referencePosResetPreserveAbsoluteTime=!1,this._referencePosUpdateTimer=null,this._referencePosMapCoords=null,this._mainLight=new M,this._ambientLight=new S,this._moonLight=new G,this.disableQueries=!1,this._disableWeather=!1,this._renderer=null,this._referencePositionGeographic=null,this._resetReferencePosition()}destroy(){this.disconnectView()}get _view(){return this._renderer?.view}get updating(){return!((this.disableQueries||!this._referencePosUpdateQuery&&!this._referencePosMapCoordsRequested)&&!this._renderer?.updating)}get weatherEnabled(){return this._view?.environment.atmosphereEnabled&&!this._disableWeather&&this._view?.state?.viewingMode===v.Global&&P(this._view.spatialReference)}get weatherVisible(){return this.weatherEnabled&&this._renderer?.weatherVisible}get referencePositionGeographic(){return this._referencePositionGeographic}connectView(e){if(this._renderer)return;this._renderer=new y({view:e});const t=()=>this._updateRenderParameters(),i=()=>this._cameraHandler();this.addHandles([s((()=>e.environment.lighting),(e=>this._updateLightingHandler(e)),o),s((()=>"virtual"!==e.environment.lighting.type?e.environment.lighting.date:null),(e=>this._lightingDateHandler(e)),o),s((()=>e.stationary),(()=>this._interactingStationaryHandler())),s((()=>e.environment.lighting.directShadowsEnabled),t,o),s((()=>e.qualitySettings.ambientOcclusion),t,o),s((()=>e.qualitySettings.reflections),t,o),s((()=>e.spatialReference),(()=>this._resetReferencePosition(!0)),o),s((()=>e.environment.weather.type),(()=>this._updateLighting(null,C.Faded)),o),s((()=>this.weatherEnabled),(()=>this._updateLighting(null,C.Faded)),o),s((()=>e.viewingMode),(()=>this._resetReferencePosition(!0)),a),s((()=>"virtual"!==e.environment.lighting.type&&e.environment.lighting.cameraTrackingEnabled),(e=>this._updateCameraTracking(e)),a),s((()=>e.state.camera),i,a),s((()=>this.disableQueries),i)],this._viewHandlesKey),this._updateRenderParameters(),this._updateLighting(),this._cameraHandler(),this.notifyChange("updating")}disconnectView(){this.removeHandles(this._viewHandlesKey),this._resetReferencePosition(),this._renderer=i(this._renderer)}_updateLightingHandler(e){this._updateCameraTracking("virtual"!==e.type&&e.cameraTrackingEnabled),this._lightingDateHandler("virtual"!==e.type?e.date:null),this._updateRenderParameters()}_updateCameraTracking(e){if(this._trackingEnabled=e,e)this._cameraHandler();else{const e=this._view.environment.lighting;"virtual"!==e?.type&&(e.positionTimezoneInfo.autoUpdated=!1)}}_lightingDateHandler(e){const t=this._view.environment.lighting;if("virtual"!==t?.type){if(e){if(!t.positionTimezoneInfo.autoUpdated){this._preserveAbsoluteDateTime=!0;const i=this._view.spatialReference;if(!m(i,j.WGS84)){const e=this._view.camera.position;if(!this._referencePosMapCoords||!this._referencePosMapCoords.equals(e))return void this._requestReferencePositionUpdate(e)}if(this._preupdateTracking(e),null!=this._referencePositionGeographic){const e=w(this._referencePositionGeographic,D);null!=e&&(t.autoUpdate(null,e),this._trackingEnabled&&(t.positionTimezoneInfo.autoUpdated=!0))}}this._updateLighting(e)}}else this._updateLighting()}_preupdateTracking(e){!this._trackingEnabled&&"virtual"!==this._view.environment.lighting.type&&this._view.environment.lighting.cameraTrackingEnabled&&this._cameraHandler(e)}_cameraHandler(e=null){const t=this._view;if(!t.ready)return;const i=t.stateManager.camera;i&&(this._cameraHandlerClientSide(i,e)||this._cameraHandlerServerSide(i))}_cameraHandlerClientSide(e,t){const i=P(this._view.spatialReference);if(i&&!m(this._view.spatialReference,j.WGS84))return"virtual"===this._view.environment.lighting.type&&this._updateLighting(),!1;const r=e.position;return this._referencePositionGeographic??=_(),i?f(r,this._referencePositionGeographic,j.WGS84):d(this._referencePositionGeographic,r.longitude??0,r.latitude??0,r.z??0),this.notifyChange("referencePositionGeographic"),this._autoUpdateTimezone(this._referencePositionGeographic,t)||this._updateLighting(t),!0}_cameraHandlerServerSide(e){const t=e.position;(!this._referencePosMapCoords||this._referencePosMapCoordsRequested||this._exceedsReferencePosDistThreshold(t))&&this._requestReferencePositionUpdate(t,!0),this._view.mapCoordsHelper&&this._referencePositionGeographic&&(this._referencePositionGeographic[2]=(t.z??0)*this._view.mapCoordsHelper.unitInMeters,this._referencePosChanged())}_interactingStationaryHandler(){this._view.stationary&&this._executePendingReferencePositionUpdate()}_updateLighting(e,t=C.Immediate){const i=this._view;e=e||("virtual"===i.environment.lighting.type?null:i.environment.lighting.date);const r=this._referencePositionGeographic,n=r?q:E,s=this.weatherVisible?i.environment.weather.type:"disabled";null!=r?U(e,r,i.state.viewingMode,s,i.state.camera,n):"virtual"===i.environment.lighting.type&&b(i.state.camera,i.state.viewingMode,n.direct.directionToLightSource);const o=this._mainLight,a=n.direct;l(o.intensity,a.color,a.intensity*Math.PI),p(o.direction,a.directionToLightSource),o.specularStrength=n.specularStrength,o.environmentStrength=n.environmentStrength;const h=this._ambientLight;l(h.intensity,n.ambient.color,n.ambient.intensity);const c=this._moonLight;u(c.intensity,k,I,n.globalFactor);const d=(1-.5*n.globalFactor)*(1-.4*n.noonFactor*(1-n.globalFactor));l(c.intensity,c.intensity,d),p(c.direction,a.directionToLightSource),this._renderer.updateLightSources([o,h,c],n.noonFactor,n.globalFactor,t),this._updateRenderParameters()}_autoUpdateTimezone(e,t=null){if("virtual"===this._view.environment.lighting.type||!this._view.environment.lighting.cameraTrackingEnabled||null==e)return!1;const i=Q;i.setTime((t||this._view.environment.lighting.date).getTime());const r=w(e,D);if(null==r)return!1;let n=this._view.environment.lighting.positionTimezoneInfo;if(n.autoUpdated){if(n.hours===r.hours&&n.minutes===r.minutes&&n.seconds===r.seconds)return!1}else n=r;const s=i.getUTCHours()-(r.hours-n.hours),o=i.getUTCMinutes()-(r.minutes-n.minutes),a=i.getUTCSeconds()-(r.seconds-n.seconds);return i.setUTCHours(s),i.setUTCMinutes(o),i.setUTCSeconds(a),!t&&this._view.environment.lighting.autoUpdate(i,r)}_updateRenderParameters(){const e=this._view._stage;if(!e)return;const t=null==this._referencePositionGeographic||T(this._referencePositionGeographic[2],this._view.state.viewingMode);e.renderer.setParameters({shadowMap:this._view.environment.lighting.directShadowsEnabled&&t,environment:this._view.environment,weatherVisible:this._view.environmentManager.weatherVisible,qualitySettings:this._view.qualitySettings})}_resetReferencePosition(e=!1){this._cancelReferencePosUpdates(),this._referencePosMapCoords=null,this._referencePosMapCoordsRequested=null,this._referencePosResetPreserveAbsoluteTime=null,this._referencePositionGeographic=null,this.notifyChange("updating"),e&&this._cameraHandler()}_requestReferencePositionUpdate(e,t=!1){if(!this.disableQueries&&(this._referencePosMapCoordsRequested?this._referencePosMapCoordsRequested.copy(e):this._referencePosMapCoordsRequested=e.clone(),this._referencePosResetPreserveAbsoluteTime=!!t,!this._referencePosUpdateQuery&&!this._referencePosUpdateTimer&&this._view.stationary)){const e=this._referencePosUpdateQuery=r(this._referencePointUpdateDelay).then((()=>{if(this._referencePosUpdateQuery===e){const t=()=>this._referencePosUpdateQuery!==e;return this._doReferencePositionUpdateQuery(t)}})).catch((e=>{"mapcoordshelper:missing-geometry-service"===e.name&&(this.disableQueries=!0)})).then((()=>{this._referencePosUpdateQuery===e&&(this._referencePosUpdateQuery=null,this._referencePosUpdateTimer||this._executePendingReferencePositionUpdate(),this.notifyChange("updating"))})),t=this._referencePosUpdateTimer=r(this._referencePointUpdateInterval).then((()=>{this._referencePosUpdateTimer===t&&(this._referencePosUpdateTimer=null,this._referencePosUpdateQuery||this._executePendingReferencePositionUpdate())}));this.notifyChange("updating")}}async _doReferencePositionUpdateQuery(e){this._referencePosResetPreserveAbsoluteTime&&(this._preserveAbsoluteDateTime=!1),this._referencePosMapCoords?this._referencePosMapCoords.copy(this._referencePosMapCoordsRequested):this._referencePosMapCoords=this._referencePosMapCoordsRequested.clone(),this._referencePosResetPreserveAbsoluteTime=null,this._referencePosMapCoordsRequested=null;const t=await this._view.mapCoordsHelper.toGeographic(this._referencePosMapCoords);if(!e()&&!isNaN(t[0])&&!isNaN(t[1])){const e=(this._referencePosMapCoords.z??0)*this._view.mapCoordsHelper.unitInMeters;this._referencePositionGeographic?d(this._referencePositionGeographic,t[0],t[1],e):this._referencePositionGeographic=g(t[0],t[1],e),this._referencePosChanged()}}_executePendingReferencePositionUpdate(){const e=this._referencePosMapCoordsRequested;e&&this._requestReferencePositionUpdate(e,this._referencePosResetPreserveAbsoluteTime)}_referencePosChanged(){this._preserveAbsoluteDateTime?this._updateLighting():this._autoUpdateTimezone(this._referencePositionGeographic)||this._updateLighting(),this.notifyChange("referencePositionGeographic")}_exceedsReferencePosDistThreshold(e){const t=this._referencePosMapCoords;if(null==t)return!0;const i=H(t,e);if(null==i)return!0;return n(i,"meters").value>this._referencePointUpdateDistThreshold}_cancelReferencePosUpdates(){const e=!!this._referencePosUpdateQuery;return this._referencePosUpdateQuery=null,this._referencePosUpdateTimer=null,e}get test(){const e=this;return{get renderer(){return e._renderer},set referencePointUpdateInterval(t){e._referencePointUpdateInterval=t},set referencePointUpdateDistThreshold(t){e._referencePointUpdateDistThreshold=t},set referencePosUpdateTimer(t){e._referencePosUpdateTimer=t},set referencePointUpdateDelay(t){e._referencePointUpdateDelay=t},set disableWeather(t){e._disableWeather=t}}}};e([h({type:Boolean,readOnly:!0})],L.prototype,"updating",null),e([h()],L.prototype,"disableQueries",void 0),e([h()],L.prototype,"_disableWeather",void 0),e([h()],L.prototype,"weatherEnabled",null),e([h()],L.prototype,"weatherVisible",null),e([h()],L.prototype,"referencePositionGeographic",null),e([h()],L.prototype,"_renderer",void 0),e([h()],L.prototype,"_referencePositionGeographic",void 0),L=e([c("esri.views.3d.environment.SceneViewEnvironmentManager")],L);const q=new R,E=new R,Q=new Date,D={hours:0,minutes:0,seconds:0},k=g(.22,.22,.33),I=g(.22,.22,.22);export{L as SceneViewEnvironmentManager};
