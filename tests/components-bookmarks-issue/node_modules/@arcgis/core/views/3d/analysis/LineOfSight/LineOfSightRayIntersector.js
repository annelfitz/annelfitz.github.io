/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import"../../../../geometry.js";import r from"../../../../core/Accessor.js";import{screenPointObjectToArray as t}from"../../../../core/screenUtils.js";import{property as i}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/has.js";import"../../../../core/Logger.js";import"../../../../core/RandomLCG.js";import{subclass as o}from"../../../../core/accessorSupport/decorators/subclass.js";import{a as s,c as n,n as a,h as c,g as l}from"../../../../chunks/vec32.js";import{clone as p,create as m}from"../../../../core/libs/gl-matrix-2/factories/vec3f64.js";import{create as u,copy as d,fromPoints as g}from"../../../../geometry/support/ray.js";import{sv2d as f}from"../../../../geometry/support/vectorStacks.js";import{getObjectId as h}from"../../../../layers/graphics/dehydratedFeatures.js";import{LineOfSightIntersectionResult as y}from"./LineOfSightIntersectionResult.js";import{isI3sIntersectorResult as j,isTiles3DIntersectorResult as I}from"../../layers/i3s/Intersector.js";import{fromScreen as w}from"../../support/geometryUtils/ray.js";import{isTerrainIntersectorResult as v}from"../../terrain/Intersector.js";import{newIntersector as b}from"../../webgl-engine/lib/Intersector.js";import{StoreResults as P,IntersectorType as R}from"../../webgl-engine/lib/IntersectorInterfaces.js";import{toGraphic as x}from"../../webgl-engine/lib/intersectorUtilsConversions.js";import U from"../../../../geometry/Point.js";let C=class extends r{constructor(e){super(e),this._terrainIntersectionOptionsLayerUids=new Set(["terrain"])}initialize(){this.intersector=b(this.view.state.viewingMode),this.intersector.options.hud=!1,this.intersector.options.store=P.MIN}getScreenPointIntersection(e){const r=t(e,f.get()),i=w(this.view.state.camera,r,T);return this._getRayIntersection(i)}_getRayIntersection(e,r){if(null==e||null==this.view.sceneIntersectionHelper)return null;const{intersector:t}=this;t.options.store=P.MIN,this.view.sceneIntersectionHelper.intersectToolIntersectorRay(e,t,r);const i=t.results.min,o=m();if(!i.getIntersectionPoint(o))return null;if(null!=r?.maxDistance&&s(o,e.origin)>r.maxDistance**2)return null;const n=this.view.renderCoordsHelper.fromRenderCoords(o,new U({spatialReference:this.view.spatialReference})),a=p(i.normal);if(j(i))return new y({type:R.OBJECT,id:`${i.target.layerUid}/${i.target.nodeIndex}/${i.target.componentIndex}`,mapPoint:n,renderPoint:o,normal:a,ray:d(e),graphic:null});if(I(i))return new y({type:R.OBJECT,id:`${i.target.layerUid}/${i.target.graphicUid}`,mapPoint:n,renderPoint:o,normal:a,ray:d(e),graphic:null});if(v(i))return new y({type:R.TERRAIN,id:i.target.lij.slice(),mapPoint:n,renderPoint:o,normal:a,ray:d(e),graphic:null});const c=x(i,this.view);if(null!=c){const r=c.layer,t=c.sourceLayer;let i;if(t)if("scene"===t.type)i=h(c,t.objectIdField);else i=c.uid;else i=c.uid;return new y({type:R.OBJECT,id:`${r?.uid}/${i}`,mapPoint:n,renderPoint:o,normal:a,ray:d(e),graphic:c})}return null}updateFromGroundIntersection(e,r,t){const i=L,o=O,s=S,m=$;n(o,e),this.view.renderCoordsHelper.worldUpAtPosition(o,s),a(s,s);const u=this.view.basemapTerrain.visibleElevationBounds,d=(r>=0?1:-1)*((u?Math.abs(u.max-u.min):100)+Math.abs(r));c(m,s,d),l(i,o,m),g(i,o,T);const f=this._getRayIntersection(T,{include:this._terrainIntersectionOptionsLayerUids,maxDistance:d});if(null!=f){const e=$;return c(e,s,r),l(t,f.renderPoint,e),p(f.normal)}return n(t,e),null}};e([i()],C.prototype,"view",void 0),e([i()],C.prototype,"intersector",void 0),C=e([o("esri.views.3d.analysis.LineOfSight.LineOfSightRayIntersector")],C);const L=m(),O=m(),S=m(),$=m(),T=u();export{C as LineOfSightRayIntersector};
