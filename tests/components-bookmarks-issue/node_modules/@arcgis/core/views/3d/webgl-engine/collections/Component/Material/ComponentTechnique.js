/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{ViewingMode as e}from"../../../../../ViewingMode.js";import{IntegratedMeshMode as r}from"./ComponentTechniqueConfiguration.js";import{C as i}from"../../../../../../chunks/ComponentShader.glsl.js";import{ShaderOutput as t}from"../../../core/shaderLibrary/ShaderOutput.js";import{ReloadableShaderModule as o}from"../../../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as n}from"../../../core/shaderTechnique/ShaderTechnique.js";import{StencilBits as s}from"../../../lib/basicInterfaces.js";import{blendingDefault as l,oitBlending as a,oitDepthTest as c,OITPolygonOffset as u}from"../../../lib/OrderIndependentTransparency.js";import{Program as d}from"../../../lib/Program.js";import{stencilWriteMaskOn as p,replaceBitWhenDepthTestPasses as m,stencilBaseAllZerosParams as h}from"../../../lib/StencilUtils.js";import{TransparencyPassType as f}from"../../../lib/TransparencyPassType.js";import{VertexAttribute as b}from"../../../lib/VertexAttribute.js";import{makePipelineState as g,cullingParams as O,defaultDepthWriteParams as j,defaultColorWriteParams as P}from"../../../../../webgl/renderState.js";class T extends n{initializeConfiguration(r,i){i.spherical=r.viewingMode===e.Global,i.doublePrecisionRequiresObfuscation=r.rctx.driverTest.doublePrecisionRequiresObfuscation.result}initializeProgram(e){return new d(e.rctx,T.shader.get().build(this.configuration),M)}_setPipelineState(e){const i=this.configuration,o=i.integratedMeshMode!==r.None,n=e===f.NONE,d=e===f.FrontFace;return g({blending:i.output!==t.Color&&i.output!==t.Alpha||!i.blendingEnabled?null:n?l:a(e),culling:O(i.cullFace),depthTest:{func:c(e)},depthWrite:n||d?j:null,colorWrite:P,stencilWrite:o||i.hasOccludees?p:null,stencilTest:o?m(s.IntegratedMeshMaskExcluded):i.hasOccludees?h:null,polygonOffset:n||d?i.hasPolygonOffset?{factor:2,units:2}:null:u})}initializePipeline(){return this._setPipelineState(this.configuration.transparencyPassType)}}T.shader=new o(i,(()=>import("./shader/ComponentShader.glsl.js")));const M=new Map([[b.POSITION,0],[b.NORMAL,1],[b.NORMALCOMPRESSED,1],[b.COLOR,2],[b.UV0,3],[b.UVREGION,4],[b.COMPONENTINDEX,5]]);export{T as ComponentTechnique,M as attributeLocations};
