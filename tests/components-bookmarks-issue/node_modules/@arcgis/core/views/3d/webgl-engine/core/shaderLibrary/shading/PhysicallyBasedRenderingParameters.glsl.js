/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{VertexTextureCoordinates as e}from"../attributes/VertexTextureCoordinates.glsl.js";import{Float3DrawUniform as s}from"../../shaderModules/Float3DrawUniform.js";import{Float3PassUniform as o}from"../../shaderModules/Float3PassUniform.js";import{glsl as r}from"../../shaderModules/interfaces.js";import{Texture2DDrawUniform as i}from"../../shaderModules/Texture2DDrawUniform.js";import{Texture2DPassUniform as t}from"../../shaderModules/Texture2DPassUniform.js";import{BindType as a}from"../../shaderTechnique/BindType.js";import{GLTextureMaterialBindParameters as n}from"../../../lib/GLTextureMaterial.js";var c;!function(e){e[e.Disabled=0]="Disabled",e[e.Normal=1]="Normal",e[e.Schematic=2]="Schematic",e[e.Water=3]="Water",e[e.WaterOnIntegratedMesh=4]="WaterOnIntegratedMesh",e[e.Simplified=5]="Simplified",e[e.TerrainWithWater=6]="TerrainWithWater",e[e.COUNT=7]="COUNT"}(c||(c={}));class u extends n{}function l(n,u){const l=n.fragment,m=u.hasMetallicRoughnessTexture||u.hasEmissionTexture||u.hasOcclusionTexture;if(u.pbrMode===c.Normal&&m&&n.include(e,u),u.pbrMode!==c.Schematic)if(u.pbrMode!==c.Disabled){if(u.pbrMode===c.Normal){l.code.add(r`vec3 mrr;
vec3 emission;
float occlusion;`);const e=u.pbrTextureBindType;u.hasMetallicRoughnessTexture&&(l.uniforms.add(e===a.Pass?new t("texMetallicRoughness",(e=>e.textureMetallicRoughness)):new i("texMetallicRoughness",(e=>e.textureMetallicRoughness))),l.code.add(r`void applyMetallnessAndRoughness(vec2 uv) {
vec3 metallicRoughness = textureLookup(texMetallicRoughness, uv).rgb;
mrr[0] *= metallicRoughness.b;
mrr[1] *= metallicRoughness.g;
}`)),u.hasEmissionTexture&&(l.uniforms.add(e===a.Pass?new t("texEmission",(e=>e.textureEmissive)):new i("texEmission",(e=>e.textureEmissive))),l.code.add(r`void applyEmission(vec2 uv) {
emission *= textureLookup(texEmission, uv).rgb;
}`)),u.hasOcclusionTexture?(l.uniforms.add(e===a.Pass?new t("texOcclusion",(e=>e.textureOcclusion)):new i("texOcclusion",(e=>e.textureOcclusion))),l.code.add(r`void applyOcclusion(vec2 uv) {
occlusion *= textureLookup(texOcclusion, uv).r;
}
float getBakedOcclusion() {
return occlusion;
}`)):l.code.add(r`float getBakedOcclusion() { return 1.0; }`),e===a.Pass?l.uniforms.add(new o("emissionFactor",(e=>e.emissiveFactor)),new o("mrrFactors",(e=>e.mrrFactors))):l.uniforms.add(new s("emissionFactor",(e=>e.emissiveFactor)),new s("mrrFactors",(e=>e.mrrFactors))),l.code.add(r`
    void applyPBRFactors() {
      mrr = mrrFactors;
      emission = emissionFactor;
      occlusion = 1.0;

      ${u.hasMetallicRoughnessTexture?r`applyMetallnessAndRoughness(${u.hasMetallicRoughnessTextureTransform?r`metallicRoughnessUV`:"vuv0"});`:""}

      ${u.hasEmissionTexture?r`applyEmission(${u.hasEmissiveTextureTransform?r`emissiveUV`:"vuv0"});`:""}

      ${u.hasOcclusionTexture?r`applyOcclusion(${u.hasOcclusionTextureTransform?r`occlusionUV`:"vuv0"});`:""}
    }
  `)}}else l.code.add(r`float getBakedOcclusion() { return 1.0; }`);else l.code.add(r`vec3 mrr = vec3(0.0, 0.6, 0.2);
vec3 emission = vec3(0.0);
float occlusion = 1.0;
void applyPBRFactors() {}
float getBakedOcclusion() { return 1.0; }`)}export{u as PBRBindParameters,c as PBRMode,l as PhysicallyBasedRenderingParameters};
