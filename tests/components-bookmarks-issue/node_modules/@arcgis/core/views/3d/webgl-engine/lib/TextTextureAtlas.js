/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../chunks/tslib.es6.js";import e from"../../../../core/Accessor.js";import s from"../../../../core/Evented.js";import{disposeMaybe as i,removeMaybe as r}from"../../../../core/maybe.js";import{generateUID as n}from"../../../../core/uid.js";import{property as h}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/has.js";import"../../../../core/Logger.js";import"../../../../core/RandomLCG.js";import{subclass as a}from"../../../../core/accessorSupport/decorators/subclass.js";import{s as o}from"../../../../chunks/vec42.js";import{create as _,ZEROS as l}from"../../../../core/libs/gl-matrix-2/factories/vec4f64.js";import{ContentObjectType as c}from"./ContentObjectType.js";import{textTextureAtlas as d}from"./testUtils.js";import{applyTextureResizeModulo as u}from"./textureUtils.js";import{VertexAttribute as m}from"./VertexAttribute.js";import{TaskPriority as g}from"../../../support/Scheduler.js";import{Yield as p}from"../../../support/Yield.js";import{TextureWrapMode as f,TextureSamplingMode as x}from"../../../webgl/enums.js";import{Texture as w}from"../../../webgl/Texture.js";import{TextureDescriptor as T}from"../../../webgl/TextureDescriptor.js";const b=4096;let j=class extends e{constructor(t){super(t),this.type=c.Texture,this.id=n(),this.events=new s,this._glTexture=null,this._atlas=new k(256,256),this._needsRepack=!1,this._canRepack=!0,this._elementsToRender=new Map,this._elements=new Map,this._stageObjects=new Map,this.updating=!1}initialize(){this._canvas=document.createElement("canvas"),this._canvas.setAttribute("id","textAtlasCanvas"),this._canvas.setAttribute("style","display:none"),this._ctx=this._canvas.getContext("2d"),this._stage=this.view._stage,this._stage.add(this),this._updateCanvasElementSize(this._atlas),this._reset()}unload(){this._glTexture=i(this._glTexture),this.updating=!1,this.events.emit("unloaded")}get glTexture(){return this._glTexture}static get maxSize(){return S=d.stableRendering?A:0,[b-A-S,b-A-S-R]}load(t){if(this._glTexture)return this._glTexture;const e=new T;return e.wrapMode=f.CLAMP_TO_EDGE,e.samplingMode=x.LINEAR_MIPMAP_LINEAR,e.hasMipmap=!0,e.preMultiplyAlpha=!0,e.maxAnisotropy=t.parameters.maxMaxAnisotropy,this._glTexture=new w(t,e,this._canvas),this._frameWorker=this.view.resourceController.scheduler.registerTask(g.TEXT_TEXTURE_ATLAS,this),this.setDirty(),this._glTexture}dispose(){this._elements.clear(),this._elementsToRender.clear(),this._frameWorker=r(this._frameWorker),this._glTexture&&(this._stage.remove(this),this._glTexture=i(this._glTexture)),this._canvas.width=0,this._canvas.height=0,this._canvas=null,this._ctx=null}_updateCanvasElementSize(t){this._canvas.setAttribute("width",t.width.toString()),this._canvas.setAttribute("height",t.height.toString())}_resizeAtlas(t,e){const{width:s,height:i}=this._atlas;s===t&&i===e||(this._atlas.width=t,this._atlas.height=e,this._glTexture?.resize(t,e),this._glTexture?.updateData(0,0,0,s,i,this._canvas),this._updateCanvasElementSize(this._atlas),this._elements.forEach((t=>{const e=this._stageObjects.get(t.textRenderer.key);e?.forEach((e=>y(e,t)))})),this._reset())}_reset(){this._elementsToRender.clear(),this._atlas.reset(),this._needsRepack=!0,this.setDirty()}_addAtlasElement(t,e,s,i){const r=this._atlas;if(r.width<s||r.height<i)return!1;let n=r.cursors.get(i);if(!n){if(r.height<r.nextY+i)return!1;n=[new E(r.nextY)],r.cursors.set(i,n),r.nextY+=i}let h=n.find((t=>r.width>=t.x+s));if(null==h){if(r.height<r.nextY+i)return!1;h=new E(r.nextY),r.nextY+=i,n.push(h)}return t.setNewPosition(h),this._elements.set(e,t),this._elementsToRender.set(e,t),h.x+=s,!0}_ensureStageObjects(t){const e=this._stageObjects.get(t);if(e)return e;const s=new Set;return this._stageObjects.set(t,s),s}_addStageObject(t,e){this._ensureStageObjects(t).add(e)}_removeStageObject(t,e){const s=this._stageObjects.get(t);s?.delete(e)&&(e.geometries[0].setAttributeData(m.SIZE,[0,0]),e.geometryVertexAttributeUpdated(e.geometries[0],m.SIZE),this._elementsToRender.delete(t))}_processAddition(t){const e=t.textRenderer.key;if(this._needsRepack)return void this._elements.set(e,t);const s=this._atlas,i=t.textRenderer.renderedWidth,r=t.textRenderer.renderedHeight,n=i+A,h=r+A+R;if(!this._addAtlasElement(t,e,n,h)){if(this._canRepack)this._reset();else if(s.width<n){const t=Math.min(u(Math.max(n,1.5*s.width)),b);this._resizeAtlas(t,s.height)}else{const t=s.nextY+h,e=Math.min(u(Math.max(t,1.5*s.height)),b);if(e>s.height)this._resizeAtlas(s.width,e);else if(s.width<b){const t=Math.min(u(1.5*s.width),b);this._resizeAtlas(t,s.height)}}this._elements.set(e,t)}}_renderElement(t){const e=t.commitNewPosition(),s=t.textRenderer;this._ctx.clearRect(e[0]-A,e[1]-A,s.renderedWidth+2*A,s.renderedHeight+2*A),s.render(this._ctx,e[0],e[1]);const i=this._stageObjects.get(s.key);i?.forEach((e=>y(e,t)))}get running(){return this.updating}runTask(t){if(null==this._glTexture)return p;for(;this._needsRepack&&(this._canRepack||this._atlas.height<b&&this._atlas.height<b);){this._canRepack=this._needsRepack=!1;const e=this._elements;this._elements=new Map,e.forEach((t=>this._processAddition(t))),t.madeProgress()}if(this._elementsToRender.size>0){for(const[e,s]of this._elementsToRender){if(t.done)break;this._renderElement(s),this._elementsToRender.delete(e),t.madeProgress()}this._glTexture.setData(this._canvas)}this.updating=this._elementsToRender.size>0}addTextTexture(t,e){const s=t.key;this._addStageObject(s,e);let i=this._elements.get(s);null==i&&(i=new O(this._atlas,t),this._processAddition(i),this.setDirty()),v(e,i),y(e,i)}removeTextTexture(t,e){const s=t.key;if(!this._elements.get(s))return;this._removeStageObject(s,e);const i=this._stageObjects.get(s);i&&0!==i.size||this._elements.delete(s),0===i?.size&&this._stageObjects.delete(s),this._canRepack=!0}setDirty(){this._glTexture&&(this.updating=!0)}get test(){const{_elements:t,_stageObjects:e,_atlas:s}=this,i=this;return{elements:t,stageObjects:e,atlas:s,resizeAtlas:(t,e)=>i._resizeAtlas(t,e),run:t=>i.runTask(t)}}};function v(t,e){t.geometries[0].setAttributeData(m.SIZE,[e.textRenderer.displayWidth,e.textRenderer.displayHeight]),t.geometryVertexAttributeUpdated(t.geometries[0],m.SIZE)}function y(t,e){t.geometries[0].setAttributeData(m.UV0,e.uv),t.geometryVertexAttributeUpdated(t.geometries[0],m.UV0,!0)}t([h({constructOnly:!0})],j.prototype,"view",void 0),t([h({type:Boolean})],j.prototype,"updating",void 0),j=t([a("esri.views.3d.webgl-engine.lib.TextTextureAtlas")],j);const A=2,R=2;class O{constructor(t,e){this._atlas=t,this.textRenderer=e,this._uv=_(),this._newPosition=[0,0]}get uv(){if(null==this._xOffset||null==this._yOffset)return l;const{renderedWidth:t,renderedHeight:e}=this.textRenderer;return o(this._uv,this._xOffset/this._atlas.width,(this._yOffset+e)/this._atlas.height,(this._xOffset+t)/this._atlas.width,this._yOffset/this._atlas.height)}setNewPosition(t){this._newPosition[0]=t.x,this._newPosition[1]=t.y}commitNewPosition(){return this._xOffset=this._newPosition[0],this._yOffset=this._newPosition[1],this._newPosition}get xOffset(){return this._xOffset}get yOffset(){return this._yOffset}}class k{constructor(t,e){this.width=t,this.height=e,this.cursors=new Map,this.nextY=0}reset(){this.cursors.clear(),this.nextY=S}}class E{constructor(t){this.y=t,this.x=S}}let S=0;export{j as TextTextureAtlas};
