/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{createResolver as e}from"../../../../core/promiseUtils.js";import{clone as t}from"../../../../core/libs/gl-matrix-2/factories/vec4f64.js";import{RenderRequestType as r,Decorations as s}from"../lib/basicInterfaces.js";import{RendererTarget as i}from"../lib/rendererUtils.js";import{RenderState as o}from"../../../support/RenderState.js";import{resampleHermite as n}from"../../../support/screenshotUtils.js";import{PixelFormat as a,DataType as c}from"../../../webgl/enums.js";import{ensureAttachmentMaxSize as h}from"../../../webgl/FramebufferObject.js";import{createEmptyImageData as l}from"../../../../core/imageUtils.js";class d{constructor(e,t,r){this.parameters=e,this.frameHasDecorations=t,this.fbos=r}}class f{constructor(e,t,r){this._rctx=e,this._renderFunctions=t,this._forceCameraHook=r,this.supersample=!0,this._screenshotQueue=new Array}destroy(){this._rctx=null}async takeScreenshot(t){await this._renderFunctions.prepareOverlay(),this._renderFunctions.requestRenderScene(r.BACKGROUND);const s=e();return this._screenshotQueue.push({settings:t,resolver:s}),s.promise}update(e,t){for(const r of this._screenshotQueue){if(null==this._rctx){r.resolver.reject();continue}const s={...r.settings,pixelRatio:r.settings.pixelRatio*e.parameters.camera.pixelRatio},i=this._renderScreenshot(e,s,t);r.resolver(i)}this._screenshotQueue.length=0}_renderScreenshotOverlay(e,t,r){e.width=t.width,e.height=t.height;const i=e.getContext("2d"),o=r.pixelRatio;return i.save(),i.translate(0,t.height),i.scale(1,-1),r.region&&i.translate(-r.region.x,-r.region.y),i.scale(o,o),t=this._renderFunctions.renderOverlay(e,r.disableDecorations?s.OFF:s.ON,t),i.restore(),t}_readbackScreenshot(e,t){return e.resample?this._readbackScreenshotResampled({...e,resample:e.resample},t):this._readbackScreenshotImmediate(e,t)}_readbackScreenshotResampled(e,t){const{framebufferWidth:r,framebufferHeight:s,region:i,resample:o}=e,h=this._ensureScreenshotEncodeCanvas();let d=l(r,s,h);this._rctx.gl.readPixels(0,0,r,s,a.RGBA,c.UNSIGNED_BYTE,new Uint8Array(d.data.buffer)),t(),d=this._renderScreenshotOverlay(h,d,{...e,region:void 0});const f=l(i.width,i.height,h);return n(d,f,!0,o.region.x,s-(o.region.y+o.region.height),o.region.width,o.region.height)}_readbackScreenshotImmediate(e,t){const{framebufferHeight:r,region:s}=e,i=this._ensureScreenshotEncodeCanvas(),o=l(s.width,s.height,i);return this._rctx.gl.readPixels(s.x,r-(s.y+s.height),s.width,s.height,a.RGBA,c.UNSIGNED_BYTE,new Uint8Array(o.data.buffer)),t(),this._renderScreenshotOverlay(i,o,e)}_renderScreenshot(e,r,n){const a=e.parameters.camera,c={width:r.framebufferWidth,height:r.framebufferHeight};h(c,Math.min(this._rctx.parameters.maxTextureSize,this._rctx.parameters.maxRenderbufferSize));let l=!1;const d=r.disableDecorations&&e.frameHasDecorations,f=c.width!==a.fullWidth||c.height!==a.fullHeight,m=r.ignorePadding&&a.pixelRatio!==r.pixelRatio,u=f||d||m||r.objectAndLayerIdColor;let p=null,g=null;if(u){const e=a.clone();if(r.ignorePadding){const s=t(e.padding);for(let t=0;t<4;t++)s[t]=Math.round(s[t]/e.pixelRatio*r.pixelRatio);e.padding=s}e.fullWidth=c.width,e.fullHeight=c.height,e.pixelRatio=r.pixelRatio;const h=a.fovX-e.fovX,d=a.fovY-e.fovY;h<0&&h<d?e.fovX=a.fovX:d<0&&d<h&&(e.fovY=a.fovY);const f={camera:e,contentCamera:e,mode:o.IDLE,alignPixelEnabled:!0,contentPixelRatio:e.pixelRatio};this._forceCameraHook(f),l=!0;const m=this._renderFunctions.renderScene(f,n,r.objectAndLayerIdColor?i.ObjectAndLayerID:i.Screenshot,r.disableDecorations?s.OFF:s.ON);g=m.screen,p=m.oid}const b=()=>{this._rctx.bindFramebuffer(null),g?.release()};this._rctx.bindFramebuffer(g?.fbo);const _=this._readbackScreenshot(r,b);let x=null;if(r.objectAndLayerIdColor){const e=()=>{this._rctx.bindFramebuffer(null),p?.release()};this._rctx.bindFramebuffer(p?.fbo),x=this._readbackScreenshot(r,e),this._rctx.bindFramebuffer(null)}if(u&&!this._rctx.contextAttributes.alpha)for(let t=3;t<_.data.length;t+=4)_.data[t]=255;if(x&&!this._rctx.contextAttributes.alpha)for(let t=3;t<x.data.length;t+=4)x.data[t]=255;return l&&this._forceCameraHook(e.parameters),[_,x]}_ensureScreenshotEncodeCanvas(){return this._screenshotEncodeCanvas||(this._screenshotEncodeCanvas=document.createElement("canvas")),this._screenshotEncodeCanvas}}export{d as ScreenshotContext,f as ScreenshotManager};
