/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{ViewingMode as e}from"../../../ViewingMode.js";import{ReloadableShaderModule as i}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as t}from"../core/shaderTechnique/ShaderTechnique.js";import{Default3D as r}from"../lib/DefaultVertexAttributeLocations.js";import{Program as o}from"../lib/Program.js";import{L as n}from"../../../../chunks/LineCallout.glsl.js";import{CompareFunction as s,BlendFactor as l}from"../../../webgl/enums.js";import{makePipelineState as a,defaultDepthWriteParams as u,separateBlendingParams as d,defaultColorWriteParams as m}from"../../../webgl/renderState.js";class h extends t{initializeConfiguration(i,t){t.spherical=i.viewingMode===e.Global}initializeProgram(e){return new o(e.rctx,h.shader.get().build(this.configuration),r)}setPipelineState(e){const i=e?s.ALWAYS:s.LESS;return this.configuration.depthHudEnabled?a({depthTest:{func:i},depthWrite:u}):a({blending:d(l.ONE,l.SRC_ALPHA,l.ONE_MINUS_SRC_ALPHA,l.ONE_MINUS_SRC_ALPHA),depthTest:{func:i},colorWrite:m})}initializePipeline(){return this.setPipelineState(this.configuration.multipassEnabled)}}h.shader=new i(n,(()=>import("./LineCallout.glsl.js")));export{h as LineCalloutTechnique};
