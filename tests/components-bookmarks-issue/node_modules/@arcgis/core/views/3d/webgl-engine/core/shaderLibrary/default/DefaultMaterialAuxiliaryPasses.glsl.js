/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{addNearFar as o}from"../ForwardLinearDepth.glsl.js";import{ShaderOutput as e}from"../ShaderOutput.js";import{SliceDraw as r}from"../Slice.glsl.js";import{Transform as t}from"../Transform.glsl.js";import{NormalAttribute as i,NormalType as a}from"../attributes/NormalAttribute.glsl.js";import{ObjectAndLayerIdColor as s}from"../attributes/ObjectAndLayerIdColor.glsl.js";import{TextureCoordinateAttribute as l}from"../attributes/TextureCoordinateAttribute.glsl.js";import{VertexNormal as d}from"../attributes/VertexNormal.glsl.js";import{OutputDepth as n}from"../output/OutputDepth.glsl.js";import{OutputHighlight as c}from"../output/OutputHighlight.glsl.js";import{VisualVariables as u}from"../shading/VisualVariables.glsl.js";import{DiscardOrAdjustAlphaPass as p}from"../util/AlphaDiscard.glsl.js";import{addProjViewLocalOrigin as m}from"../util/View.glsl.js";import{glsl as v}from"../../shaderModules/interfaces.js";import{Texture2DPassUniform as f}from"../../shaderModules/Texture2DPassUniform.js";import{AlphaDiscardMode as g}from"../../../lib/basicInterfaces.js";function h(h,x){const{vertex:j,fragment:O}=h,w=x.hasColorTexture&&x.alphaDiscardMode!==g.Opaque;switch(x.output){case e.LinearDepth:case e.Shadow:case e.ShadowHighlight:case e.ShadowExcludeHighlight:case e.ObjectAndLayerIdColor:m(j,x),h.include(t,x),h.include(l,x),h.include(u,x),h.include(n,x),h.include(r,x),h.include(s,x),o(h),h.varyings.add("depth","float"),w&&O.uniforms.add(new f("tex",(o=>o.texture))),j.code.add(v`void main(void) {
vpos = getVertexInLocalOriginSpace();
vpos = subtractOrigin(vpos);
vpos = addVerticalOffset(vpos, localOrigin);
gl_Position = transformPositionWithDepth(proj, view, vpos, nearFar, depth);
forwardTextureCoordinates();
forwardObjectAndLayerIdColor();
}`),h.include(p,x),O.code.add(v`
          void main(void) {
            discardBySlice(vpos);
            ${w?v`
                    vec4 texColor = texture(tex, ${x.hasColorTextureTransform?v`colorUV`:v`vuv0`});
                    discardOrAdjustAlpha(texColor);`:""}
            ${x.output===e.ObjectAndLayerIdColor?v`outputObjectAndLayerIdColor();`:v`outputDepth(depth);`}
          }
        `);break;case e.Normal:{m(j,x),h.include(t,x),h.include(i,x),h.include(d,x),h.include(l,x),h.include(u,x),w&&O.uniforms.add(new f("tex",(o=>o.texture))),x.normalType===a.ScreenDerivative&&h.varyings.add("vPositionView","vec3");const o=x.normalType===a.Attribute||x.normalType===a.Compressed;j.code.add(v`
          void main(void) {
            vpos = getVertexInLocalOriginSpace();

            ${o?v`vNormalWorld = dpNormalView(vvLocalNormal(normalModel()));`:v`
                  // Get vertex position in camera space for screen-space derivative normals
                  vPositionView = (view * vec4(vpos, 1.0)).xyz;
                `}
            vpos = subtractOrigin(vpos);
            vpos = addVerticalOffset(vpos, localOrigin);
            gl_Position = transformPosition(proj, view, vpos);
            forwardTextureCoordinates();
          }
        `),h.include(r,x),h.include(p,x),O.code.add(v`
          void main() {
            discardBySlice(vpos);
            ${w?v`
                    vec4 texColor = texture(tex, ${x.hasColorTextureTransform?v`colorUV`:v`vuv0`});
                    discardOrAdjustAlpha(texColor);`:""}

            ${x.normalType===a.ScreenDerivative?v`vec3 normal = screenDerivativeNormal(vPositionView);`:v`
                  vec3 normal = normalize(vNormalWorld);
                  if (gl_FrontFacing == false){
                    normal = -normal;
                  }`}
            fragColor = vec4(0.5 + 0.5 * normal, 1.0);
          }
        `);break}case e.Highlight:m(j,x),h.include(t,x),h.include(l,x),h.include(u,x),w&&O.uniforms.add(new f("tex",(o=>o.texture))),j.code.add(v`void main(void) {
vpos = getVertexInLocalOriginSpace();
vpos = subtractOrigin(vpos);
vpos = addVerticalOffset(vpos, localOrigin);
gl_Position = transformPosition(proj, view, vpos);
forwardTextureCoordinates();
}`),h.include(r,x),h.include(p,x),h.include(c,x),O.code.add(v`
          void main() {
            discardBySlice(vpos);
            ${w?v`
                    vec4 texColor = texture(tex, ${x.hasColorTextureTransform?v`colorUV`:v`vuv0`});
                    discardOrAdjustAlpha(texColor);`:""}
            outputHighlight();
          }
        `)}}export{h as DefaultMaterialAuxiliaryPasses};
