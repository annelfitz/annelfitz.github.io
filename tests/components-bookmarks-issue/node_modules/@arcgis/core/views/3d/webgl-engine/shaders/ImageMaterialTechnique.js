/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import{ShaderOutput as t}from"../core/shaderLibrary/ShaderOutput.js";import{NoParameters as r}from"../core/shaderModules/interfaces.js";import{ReloadableShaderModule as o}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as i}from"../core/shaderTechnique/ShaderTechnique.js";import{parameter as s}from"../core/shaderTechnique/ShaderTechniqueConfiguration.js";import{CullFaceOptions as n}from"../lib/basicInterfaces.js";import{oitBlending as a,oitDepthTest as l,oitDepthWrite as p,getOITPolygonOffset as c}from"../lib/OrderIndependentTransparency.js";import{Program as u}from"../lib/Program.js";import{stencilWriteMaskOn as h,stencilToolMaskBaseParams as d,stencilBaseAllZerosParams as m}from"../lib/StencilUtils.js";import{TransparencyPassType as f}from"../lib/TransparencyPassType.js";import{VertexAttribute as y}from"../lib/VertexAttribute.js";import{DefaultTechniqueConfiguration as b}from"../materials/DefaultTechniqueConfiguration.js";import{I as P}from"../../../../chunks/ImageMaterial.glsl.js";import{BlendFactor as g}from"../../../webgl/enums.js";import{simpleBlendingParams as T,makePipelineState as O,cullingParams as j,defaultDepthWriteParams as S,defaultColorWriteParams as v}from"../../../webgl/renderState.js";class I extends r{}class N extends i{initializeProgram(e){return new u(e.rctx,N.shader.get().build(this.configuration),_)}_setPipelineState(e,r){const o=this.configuration,i=e===f.NONE,s=e===f.FrontFace;return O({blending:o.output!==t.Color&&o.output!==t.Alpha||!o.transparent?null:i?E:a(e),culling:j(o.cullFace),depthTest:{func:l(e)},depthWrite:i?o.writeDepth?S:null:p(e),colorWrite:v,stencilWrite:o.hasOccludees?h:null,stencilTest:o.hasOccludees?r?d:m:null,polygonOffset:i||s?null:c(o.enableOffset)})}initializePipeline(){return this._occludeePipelineState=this._setPipelineState(this.configuration.transparencyPassType,!0),this._setPipelineState(this.configuration.transparencyPassType,!1)}getPipeline(e){return e?this._occludeePipelineState:super.getPipeline()}}N.shader=new o(P,(()=>import("./ImageMaterial.glsl.js")));const E=T(g.ONE,g.ONE_MINUS_SRC_ALPHA);class C extends b{constructor(){super(...arguments),this.output=t.Color,this.cullFace=n.None,this.hasSlicePlane=!1,this.transparent=!1,this.enableOffset=!0,this.writeDepth=!0,this.hasOccludees=!1,this.transparencyPassType=f.NONE,this.multipassEnabled=!1,this.cullAboveGround=!1,this.perspectiveInterpolation=!0}}e([s({count:t.COUNT})],C.prototype,"output",void 0),e([s({count:n.COUNT})],C.prototype,"cullFace",void 0),e([s()],C.prototype,"hasSlicePlane",void 0),e([s()],C.prototype,"transparent",void 0),e([s()],C.prototype,"enableOffset",void 0),e([s()],C.prototype,"writeDepth",void 0),e([s()],C.prototype,"hasOccludees",void 0),e([s({count:f.COUNT})],C.prototype,"transparencyPassType",void 0),e([s()],C.prototype,"multipassEnabled",void 0),e([s()],C.prototype,"cullAboveGround",void 0),e([s()],C.prototype,"perspectiveInterpolation",void 0),e([s({constValue:!1})],C.prototype,"occlusionPass",void 0);const _=new Map([[y.POSITION,0],[y.UV0,2],[y.PERSPECTIVEDIVIDE,3]]);export{I as ImageMaterialPassParameters,N as ImageMaterialTechnique,C as ImageMaterialTechniqueConfiguration,_ as vertexAttributeLocations};
