/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{neverReached as e}from"../../../../../../core/compilerUtils.js";import{RgbaFloatEncoding as t}from"../../../core/shaderLibrary/util/RgbaFloatEncoding.glsl.js";import{FloatDrawUniform as r}from"../../../core/shaderModules/FloatDrawUniform.js";import{NoParameters as a,glsl as s}from"../../../core/shaderModules/interfaces.js";import{Texture2DDrawUniform as o}from"../../../core/shaderModules/Texture2DDrawUniform.js";import{usesSketchLogic as u,EdgeType as l}from"./EdgeUtil.glsl.js";import{UnpackAttributes as c}from"./UnpackAttributes.glsl.js";class i extends a{}function n(a,i){a.include(c,i);const{vertex:n,fragment:d}=a;switch(u(i.type)&&(n.uniforms.add(new o("strokesTexture",(e=>e.strokesTexture.texture))),n.uniforms.add(new r("strokesLog2Resolution",(e=>Math.log2(e.strokesTexture.resolution))),new r("strokeVariants",(e=>e.strokesTexture.variants))),a.varyings.add("vStrokeUV","vec2"),d.uniforms.add(new o("strokesTexture",(e=>e.strokesTexture.texture)),new r("strokesNormalizationScale",(e=>e.strokesTexture.normalizationScale))),n.code.add(s`void calculateStyleOutputsSketch(float lineLength, UnpackedAttributes unpackedAttributes) {
vec2 sidenessNorm = unpackedAttributes.sidenessNorm;
float lineIndex = clamp(ceil(log2(lineLength)), 0.0, strokesLog2Resolution);
vStrokeUV = vec2(exp2(lineIndex) * sidenessNorm.y, lineIndex * strokeVariants + variantStroke + 0.5) / vec2(textureSize(strokesTexture, 0));
vStrokeUV.x += variantOffset;
}`),a.fragment.include(t),d.code.add(s`float calculateLineOffsetSketch() {
float offsetNorm = rgba2float(texture(strokesTexture, vStrokeUV));
return (offsetNorm - 0.5) * strokesNormalizationScale;
}
float calculateLinePressureSketch() {
return rgba2float(texture(strokesTexture, vStrokeUV + vec2(0.0, 0.5)));
}`)),i.type){case l.Solid:n.code.add(s`void calculateStyleOutputs(UnpackedAttributes unpackedAttributes) {}`),d.code.add(s`float calculateLineOffset() {
return 0.0;
}
float calculateLinePressure() {
return 1.0;
}`);break;case l.Sketch:n.code.add(s`void calculateStyleOutputs(UnpackedAttributes unpackedAttributes)
{
calculateStyleOutputsSketch(vLineLengthPixels, unpackedAttributes);
}`),d.code.add(s`float calculateLineOffset() {
return calculateLineOffsetSketch();
}
float calculateLinePressure() {
return calculateLinePressureSketch();
}`);break;case l.Mixed:a.varyings.add("vType","float"),n.code.add(s`void calculateStyleOutputs(UnpackedAttributes unpackedAttributes)
{
vType = unpackedAttributes.type;
if (unpackedAttributes.type <= 0.0) {
calculateStyleOutputsSketch(vLineLengthPixels, unpackedAttributes);
}
}`),d.code.add(s`float calculateLineOffset() {
if (vType <= 0.0) {
return calculateLineOffsetSketch();
}
else {
return 0.0;
}
}
float calculateLinePressure() {
if (vType <= 0.0) {
return calculateLinePressureSketch();
}
else {
return 1.0;
}
}`);break;case l.COUNT:break;default:e(i.type)}}export{n as LineOffset,i as LineOffsetDrawParameters};
