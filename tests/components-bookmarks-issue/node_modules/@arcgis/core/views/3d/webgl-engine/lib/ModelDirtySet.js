/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import t from"../../../../core/Accessor.js";import{someMap as r}from"../../../../core/MapUtils.js";import{nullUid as o}from"../../../../core/uid.js";import{property as s}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/has.js";import"../../../../core/Logger.js";import"../../../../core/RandomLCG.js";import{subclass as d}from"../../../../core/accessorSupport/decorators/subclass.js";import{DirtyOperation as i,DirtyState as c}from"./ModelDirtyTypes.js";import{assert as a}from"./Util.js";class n{constructor(e,t,r,o){this.operation=e,this.geometry=t,this.states=r,this.sync=o}}let m=class extends t{constructor(e){super(e),this._residentGeomRecords=new Map,this._dirtyGeomRecords=new Map,this.dirty=!1}commitLayer(e,t){const r=this._dirtyGeomRecords.get(e);r&&(r.forEach(((r,o)=>{const s=this._ensureGeomRecord(e,o);r.forEach((({geometry:e,operation:r,states:d},n)=>{let m=!1;if(r===i.UPDATE){const r=s.get(n);if(r){if(d&c.TRANSFORMATION){const t=this.model.getObject(o);this.model.updateRenderGeometryTransformation(t,e,r)&&(m=!0)}m||t.updates.push({renderGeometry:r,updateType:d})}else a(!1,"ModelDirtySet.commitLayer: invalid update")}if(r===i.REMOVE||m){const e=s.get(n);e?(t.removes.push(e),s.delete(n)):r===i.REMOVE&&a(!1,"ModelDirtySet.commitLayer: invalid remove")}if(r===i.ADD||m){const r=this.model.getObject(o);if(null!=r){const o=this.model.getRenderGeometry(r,e);t.adds.push(o),s.set(n,o)}}})),0===s.size&&this._residentGeomRecords.get(e).delete(o)})),0===this._residentGeomRecords.get(e).size&&this._residentGeomRecords.delete(e),this._dirtyGeomRecords.delete(e),this.dirty=this._hasDirtyGeometryRecords)}commitSyncUpdates(e,t){const r=this._dirtyGeomRecords.get(e);r&&r.forEach(((r,o)=>{const s=this._ensureGeomRecord(e,o);r.forEach((({geometry:e,operation:r,states:d,sync:n},m)=>{let h=!1;if(r===i.UPDATE&&n){const r=s.get(m);if(r){if(d&c.TRANSFORMATION){const t=this.model.getObject(o);this.model.updateRenderGeometryTransformation(t,e,r)&&(h=!0)}h||t.updates.push({renderGeometry:r,updateType:d})}else a(!1,"ModelDirtySet.commitSyncUpdates: invalid update")}}))}))}getResidentRenderGeometries(e,t){const r=this._residentGeomRecords.get(e);r&&r.forEach((e=>e.forEach((e=>t.push(e)))))}_objectStateChanged(e,t){for(const r of t.geometries)this._updateOrCreateDirtyRecord(t,r,null,i.UPDATE,e)}visibilityChanged(e){this._objectStateChanged(c.VISIBILITY,e)}highlightChanged(e){this._objectStateChanged(c.HIGHLIGHT,e)}occlusionChanged(e){this._objectStateChanged(c.OCCLUDEE,e)}attributesChanged({object:e,geometry:t,sync:r}){this._updateOrCreateDirtyRecord(e,t,null,i.UPDATE,c.GEOMETRY,r)}layerAdded(e){e.objects.forAll((t=>this._layerObjectAdded(e,t)))}layerRemoved(e){e.objects.forAll((t=>this._layerObjectRemoved(e,t)))}layerObjectAdded(e){this._layerObjectAdded(e.layer,e.object)}_layerObjectAdded(e,t){const r=e.id;for(const o of t.geometries)this._geometryAdded(t,o,r)}layerObjectRemoved(e){this._layerObjectRemoved(e.layer,e.object)}layerObjectsAdded(e){for(const t of e.objects)this._layerObjectAdded(e.layer,t)}layerObjectsRemoved(e){for(const t of e.objects)this._layerObjectRemoved(e.layer,t)}_layerObjectRemoved(e,t){const r=e.id;for(const o of t.geometries)this._geometryRemoved(t,o,r)}transformationChanged(e){const t=this._getParentLayerId(e),r=e.id;this._ensureGeomRecord(t,r).forEach((r=>{this._updateOrCreateDirtyRecord(e,r.geometry,t,i.UPDATE,c.TRANSFORMATION)}))}shaderTransformationChanged(e){const t=this._getParentLayerId(e),r=e.id;this._ensureGeomRecord(t,r).forEach((t=>{t.objectShaderTransformationChanged(e.shaderTransformation)}))}geometryAdded(e){this._geometryAdded(e.object,e.geometry)}_geometryAdded(e,t,r=null){this._updateOrCreateDirtyRecord(e,t,r,i.ADD)}geometryRemoved(e){this._geometryRemoved(e.object,e.geometry)}_geometryRemoved(e,t,r=null){this._updateOrCreateDirtyRecord(e,t,r,i.REMOVE)}_updateOrCreateDirtyRecord(e,t,r,o,s=c.NONE,d=!1){r=r??this._getParentLayerId(e);const m=e.id,h=t.id,y=this._ensureDirtyRecord(r,m),l=y.get(h);if(l){const e=l.operation;e===i.REMOVE&&o===i.ADD&&l.states!==c.NONE?l.operation=i.UPDATE:e===i.REMOVE&&o===i.ADD||e===i.ADD&&o===i.REMOVE?y.delete(h):e!==i.UPDATE||o!==i.REMOVE&&o!==i.UPDATE?(a((e===i.REMOVE||e===i.ADD)&&o===i.UPDATE,"ModelDirtySet.objectGeometryAdded: inconsistent state"),l.states|=s):(l.operation=o,l.states|=s),l.sync=l.sync||d}else y.set(h,new n(o,t,s,d));this.dirty=this._hasDirtyGeometryRecords}_ensureGeomRecord(e,t){let r=this._residentGeomRecords.get(e);r||(r=new Map,this._residentGeomRecords.set(e,r));let o=r.get(t);return o||(o=new Map,r.set(t,o)),o}get _hasDirtyGeometryRecords(){return r(this._dirtyGeomRecords,(e=>r(e,(e=>e&&e.size>0))))}_ensureDirtyRecord(e,t){let r=this._dirtyGeomRecords.get(e);r||(r=new Map,this._dirtyGeomRecords.set(e,r));let o=r.get(t);return o||(o=new Map,r.set(t,o)),o}_getParentLayerId(e){return e.parentLayer?e.parentLayer.id:o}formatDebugInfo(){const e=["ADD","UPD",void 0,"REM"];let t="";return this._dirtyGeomRecords.forEach(((r,o)=>{r.forEach(((r,s)=>{t.length>0&&(t+="\n"),t+=o+"."+s;const d=[];r.forEach((e=>{const t=e.operation;d[t]||(d[t]=[]),d[t].push(e.geometry.id)}));for(let o=0;o<d.length;o++)if(d[o]){t+=" "+e[o-1]+": ";for(let e=0;e<d[o].length;e++)t+=d[o][e]+", "}}))})),t}get test(){const e=this;return{get residentLayerCount(){return e._residentGeomRecords.size},get residentObjectCount(){return Array.from(e._residentGeomRecords.values()).reduce(((e,t)=>e+t.size),0)},commit:t=>e._dirtyGeomRecords.forEach(((r,o)=>e.commitLayer(o,t)))}}};e([s({constructOnly:!0})],m.prototype,"model",void 0),e([s()],m.prototype,"dirty",void 0),m=e([d("esri.views.3d.webgl-engine.lib.ModelDirtySet")],m);const h=m;export{h as default};
