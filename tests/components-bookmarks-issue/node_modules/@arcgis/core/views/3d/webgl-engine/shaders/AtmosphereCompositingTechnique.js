/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{ReloadableShaderModule as e}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as r}from"../core/shaderTechnique/ShaderTechnique.js";import{Default3D as i}from"../lib/DefaultVertexAttributeLocations.js";import{Program as o}from"../lib/Program.js";import{a as t}from"../../../../chunks/AtmosphereCompositing.glsl.js";import{BlendFactor as s,CompareFunction as n}from"../../../webgl/enums.js";import{makePipelineState as m,separateBlendingParams as a,defaultColorWriteParams as l,simpleBlendingParams as h}from"../../../webgl/renderState.js";class p extends r{initializeProgram(e){return new o(e.rctx,p.shader.get().build(this.configuration),i)}initializePipeline(){return this.configuration.haze?m({blending:a(s.ONE,s.ZERO,s.ONE_MINUS_SRC_COLOR,s.ONE),depthTest:{func:n.ALWAYS},colorWrite:l}):m({blending:h(s.SRC_ALPHA,s.ONE_MINUS_SRC_ALPHA),depthTest:{func:n.ALWAYS},colorWrite:l})}}p.shader=new e(t,(()=>import("./AtmosphereCompositing.glsl.js")));export{p as AtmosphereCompositingTechnique};
