/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import t from"../../../Camera.js";import i from"../../../Viewpoint.js";import e from"../../../core/Error.js";import{onAbort as a,createAbortError as n}from"../../../core/promiseUtils.js";import{whenOnce as o}from"../../../core/reactiveUtils.js";import{applyAll as r}from"../camera/constraintUtils.js";import{applySurfaceCollisionConstraint as s,Mode as l}from"../camera/constraintUtils/surfaceCollision.js";import{State as c}from"./controllers/CameraController.js";import{PointToPointAnimationController as h}from"./controllers/PointToPointAnimationController.js";import{SurfaceCollisionCorrectionController as m}from"./controllers/SurfaceCollisionCorrectionController.js";import{externalToInternal as w}from"../support/cameraUtils.js";import{create as p}from"../support/viewpointUtils.js";class f{constructor(t,i,e){this.target=t,this.options=i,this.view=e,this.state="pending",this._animationController=null,this.promise=new Promise(((t,i)=>{this._resolveCallback=t,this._rejectCallback=i;const e=new AbortController;null!=this.options.signal&&a(this.options.signal,(()=>{this.abort()})),this._abortController=e,this.waitForReady()}))}resolve(t){if("finished"!==this.state)return this.state="finished",this._resolveCallback(t)}reject(t){if("finished"!==this.state)return this.state="finished",this._rejectCallback(t)}abort(t=!1){if(this._abortController.abort(),"wait-for-animation-finish"===this.state)!t&&null!=this._animationController&&this.view.state.cameraController===this._animationController&&this._animationController.active&&this._animationController.stopController();this.reject(n())}async waitForReady(){if(this.state="wait-for-ready",!this.view.ready)try{await o((()=>this.view.ready),this._abortController.signal)}catch(t){return this.reject(t)}this.createViewPoint()}async createViewPoint(){if("finished"!==this.state){this.state="wait-for-viewpoint",this._animationController=this.options.animate?this._getAnimationController():null;try{const t=await p(this.view,this.target,this._abortController.signal);if("finished"===this.state)return;const i=t?this._getCameraFromViewpoint(t):null;if(null==i)return;if(this.options.animate){if(null==this._animationController)return;this.startAnimation(i,this._animationController)}else this.view.stateManager.setStateCamera(i.camera,{applyConstraints:!i.isFullySpecified,positionAndOrientationOnly:!0,doNotCancelGoToOperation:!0}),this.resolve()}catch(t){this.reject(t)}}}_getCameraFromViewpoint(a){const n=!!(this.target instanceof i&&this.target.camera||this.target instanceof t),o=a.camera;if(null==o)return null;if(!this.view.stateManager.isCompatible(o)){const t=o.position,i=t&&t.spatialReference,a=i?i.wkid:"none",n=this.view.spatialReference?.wkid;return this.reject(new e("GotoAnimation:incompatible-spatialreference",`Resulting camera has an incompatible spatial reference (camera: ${a}, view: ${n})`,{camera:o})),null}const r=w(this.view,o);return null==r?(this.reject(new e("GotoAnimation:invalid-camera","Resulting camera is invalid")),null):{viewpoint:a,camera:r,isFullySpecified:n}}startAnimation(t,i){this.state="wait-for-animation-finish";const a=i.viewAnimation;if(null==a)return void this.reject(new e("GotoAnimation:missing-animation","Unreachable code in view.stateManager"));if(a.update(t.viewpoint,"running"),!i.active||null==i.viewAnimation||i.viewAnimation.target!==t.viewpoint||this.view.state.cameraController!==i)return this.abort();let n;t.isFullySpecified?(n=new m({view:this.view,desiredCamera:t.camera}),s(this.view,t.camera,l.EYE_AND_CENTER)):r(this.view,t.camera),i.begin(t.camera,this.options);const o=()=>{const e=this.view.state.cameraController;n&&(e&&e.active?e instanceof h&&null!=e.viewAnimation&&e.viewAnimation.target===t.viewpoint&&(this.view.state.cameraController=n):null!=i.viewAnimation&&i.viewAnimation.target===t.viewpoint&&i.state===c.Finished&&(this.view.state.cameraController=n))},w=t=>{if(null!=this.view.state)switch(i.state){case c.Finished:switch(this.state){case"pending":case"wait-for-ready":case"wait-for-viewpoint":case"wait-for-animation-finish":this.resolve()}break;case c.Ready:case c.Rejected:case c.Running:case c.Stopped:switch(this.state){case"pending":case"wait-for-ready":case"wait-for-viewpoint":case"wait-for-animation-finish":this.reject(t)}}};a.when(o,(t=>w(t))),i.asyncResult={resolve:()=>w(),reject:t=>w(t)}}_getAnimationController(){let t=null,i=null;const a=this.view.state.cameraController;return a instanceof h&&(a.updateStateFromViewAnimation(),a.active&&(t=a,i=t.viewAnimation)),null!=t||(t=new h({view:this.view,mode:"animation"}),i=t.viewAnimation,this.view.state.switchCameraController(t))?t:(null!=i&&i.stop(),this.reject(new e("GotoAnimation:goto-cannot-interrupt","Cannot start an animation while interacting")),null)}}export{f as GoToOperation};
