/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import e from"../../../Graphic.js";import{nativeArrayMaxSize as r}from"../../../core/typedArrayUtil.js";import{WorkerHandle as s}from"../../../core/workers/WorkerHandle.js";import t from"../../../geometry/SpatialReference.js";import o from"../../../layers/support/Field.js";class n{constructor(e){this._controller=e,this._handle=new c((r=>e.schedule(r)))}destroy(){this._handle.destroy()}invoke(r,s){return r.buffer&&0!==r.buffer.byteLength?(r.options.sourceSpatialReference&&r.options.sourceSpatialReference instanceof t&&(r.options={...r.options,sourceSpatialReference:r.options.sourceSpatialReference.toJSON()}),this._handle.invoke(r,s).then((r=>{let s=0,n=0;const c=t.fromJSON(r.spatialReference);r.spatialReference=c;const i=async t=>{const l=r.fields;if(l)for(;s<l.length;)if(l[s]=o.fromJSON(l[s]),s++,t.madeProgress())return this._controller.reschedule((e=>i(e)));const p=r.features;for(;n<p.length;){const r=p[n];++n,r.uid=e.generateUID();const s=r.geometry;if(null!=s&&(s.spatialReference=c,a(s),t.madeProgress()))return this._controller.reschedule((e=>i(e)))}return r};return this._controller.schedule((e=>i(e)))}))):Promise.resolve(null)}}function a(e){switch(e.type){case"polyline":e.paths.reduce(((e,r)=>e+r.length),0)<r&&(e.paths=e.hasZ||e.hasM?e.paths.map((e=>e.map((e=>[e[0],e[1],e[2]])))):e.paths.map((e=>e.map((e=>[e[0],e[1]])))));break;case"polygon":e.rings.reduce(((e,r)=>e+r.length),0)<r&&(e.rings=e.hasZ||e.hasM?e.rings.map((e=>e.map((e=>[e[0],e[1],e[2]])))):e.rings.map((e=>e.map((e=>[e[0],e[1]])))))}}class c extends s{constructor(e){super("PBFDecoderWorker","_parseFeatureQuery",{_parseFeatureQuery:e=>[e.buffer]},e)}}export{n as PBFDecoder};
