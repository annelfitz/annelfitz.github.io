/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import has from"../../../core/has.js";import{OverlayContent as r}from"./OverlayContent.js";import{OverlayFramebufferObject as e}from"./OverlayFramebufferObject.js";import{ColorFormat as o}from"../webgl/formats.js";import{ShaderOutput as t}from"../webgl-engine/core/shaderLibrary/ShaderOutput.js";class a{constructor(r,t,a,s,l=o.RGBA_MIPMAP){this.output=a,this.content=s,this.fbo=new e(r,l,t)}get valid(){return this.fbo.valid}}class s{constructor(e){this.targets=[new a(e,"overlay color",t.Color,r.Color),new a(e,"overlay IM color",t.Color,r.ColorNoRasterImage),new a(e,"overlay highlight",t.Highlight,r.Highlight,o.RGBA4),new a(e,"overlay water",t.Normal,r.WaterNormal),new a(e,"overlay occluded",t.Color,r.Occluded)],has("enable-feature:objectAndLayerId-rendering")&&this.targets.push(new a(e,"overlay oid",t.ObjectAndLayerIdColor,r.ObjectAndLayerIdColor))}getTexture(r){return this.targets[r]?.fbo.texture}dispose(){for(const r of this.targets)r.fbo.dispose()}computeValidity(){return this.targets.reduce(((r,e,o)=>e.valid?r|=1<<o:r),0)}}export{s as OverlayRenderTargets,a as RenderTargetDescriptor};
