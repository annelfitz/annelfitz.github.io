/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../chunks/tslib.es6.js";import r from"../../../../core/Accessor.js";import has from"../../../../core/has.js";import s from"../../../../core/ReactiveMap.js";import{watch as o}from"../../../../core/reactiveUtils.js";import{property as e}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/Logger.js";import"../../../../core/RandomLCG.js";import{subclass as a}from"../../../../core/accessorSupport/decorators/subclass.js";import{UpdatingHandles as i}from"../../../../core/support/UpdatingHandles.js";let d=class extends r{constructor(t){super(t),this.debugName="",this._updatingHandles=new i,this._idToUpdatingState=new s}get updating(){const t=this._updatingHandles.updating||Array.from(this._idToUpdatingState.values()).some((t=>t));if(has("esri-2d-log-updating")){const r=Array.from(this._idToUpdatingState.entries()).map((([t,r])=>`-> ${t}: ${r}`)).join("\n");console.log(`${this.debugName}: Updating: ${t}\n-> Handles: ${this._updatingHandles.updating}\n${r}`)}return t}addUpdateTracking(t,r){const s=o((()=>r.updating),(r=>this._idToUpdatingState.set(t,r)),{sync:!0});this.addHandles(s)}addPromise(t){return this._updatingHandles.addPromise(t)}};t([e({constructOnly:!0})],d.prototype,"debugName",void 0),t([e({readOnly:!0})],d.prototype,"updating",null),d=t([a("esri.views.2d.layers.support.UpdateTracking2D")],d);export{d as UpdateTracking2D};
