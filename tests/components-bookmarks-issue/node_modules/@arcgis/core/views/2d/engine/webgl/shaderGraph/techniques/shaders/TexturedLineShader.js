/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as t,a as e}from"../../../../../../../chunks/tslib.es6.js";import{dashRadius as i}from"../../../../../../../symbols/cim/constants.js";import{location as s,uniform as a,input as n}from"../../GraphShaderModule.js";import{Float as o,max as l,fract as r,mix as m,Vec2 as d,texture2D as c,clamp as p,Vec4 as u,ifElse as h,greaterThan as y,dot as w}from"../../graph/glsl.js";import{BaseHittestVertexInput as f}from"./AFeatureShader.js";import{bitsetLineScaleDash as b,bitsetLineIsSdf as x,bitsetGenericConsiderAlphaOnly as g}from"./constants.js";import{LineVertexInput as v,LineFragmentInput as D,LineShader as S,getLineVertexData as j,getLineAntialiasing as W}from"./LineShader.js";import{MosaicInfo as z}from"./MosaicInfo.js";import{getBit as F,rgba2float as _}from"./utils.js";class A extends v{}t([s(9,o)],A.prototype,"accumulatedDistance",void 0),t([s(10,d)],A.prototype,"segmentDirection",void 0),t([s(11,u)],A.prototype,"tlbr",void 0);class I extends D{}class R extends S{_getLineWidthRatio(t,e){const s=new o(i),a=F(t.bitset,b);return a.multiply(l(e,new o(.25))).add(new o(1).subtract(a)).divide(s)}_getSDFAlpha(t){const{halfWidth:e,normal:i,tlbr:s,patternSize:a,accumulatedDistance:n,lineWidthRatio:l}=t,h=a.x.multiply(new o(2)).multiply(l),y=r(n.divide(h)),w=new o(.25).multiply(i.y).add(new o(.5)),f=m(s.xy,s.zw,new d(y,w)),b=_(c(this.mosaicInfo.texture,f)).subtract(new o(.5)).multiply(e),x=p(new o(.5).subtract(b),new o(0),new o(1));return new u(x)}_getPatternColor(t){const{halfWidth:e,normal:i,color:s,accumulatedDistance:a,patternSize:n,sampleAlphaOnly:l,tlbr:p}=t,w=n.y.multiply(new o(2).multiply(e).divide(n.x)),f=r(a.divide(w)),b=new o(.5).multiply(i.y).add(new o(.5)),x=m(p.xy,p.zw,new d(b,f));let g=c(this.mosaicInfo.texture,x);return null!=this.visualVariableColor&&(g=h(y(l,new o(.5)),new u(s.a),s)),g}vertex(t,e){const{segmentDirection:i,tlbr:s,bitset:a}=t,n=j(this,t),l=t.accumulatedDistance.divide(this.view.displayZoomFactor).add(w(i,n.scaledOffset)),r=new d(s.z.subtract(s.x),s.w.subtract(s.y)),m=s.divide(this.mosaicInfo.size.xyxy),c=F(a,x),p=F(a,g),u=h(y(c,new o(.5)),this._getLineWidthRatio(t,n.scaledHalfWidth),new o(1));return{...n,tlbr:m,patternSize:r,accumulatedDistance:l,isSDF:c,sampleAlphaOnly:p,lineWidthRatio:u,...this.maybeRunHittest(t,e,n.halfWidth)}}fragment(t){const{color:e,opacity:i,isSDF:s}=t,a=W(t,this.antialiasingControls.blur),n=h(y(s,new o(.5)),this._getSDFAlpha(t),this._getPatternColor(t)),l=e.multiply(i).multiply(a).multiply(n);return this.getFragmentOutput(l,t)}}t([a(z)],R.prototype,"mosaicInfo",void 0),t([e(0,n(A)),e(1,n(f))],R.prototype,"vertex",null);export{I as TexturedLineFragmentInput,R as TexturedLineShader,A as TexturedLineVertexInput};
