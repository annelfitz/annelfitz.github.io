/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as t,a as o}from"../../../../../../../chunks/tslib.es6.js";import{tileSize as e}from"../../../definitions.js";import{VertexInput as i,location as s,UniformGroup as r,uniform as d,GraphShaderModule as n,FragmentOutput as a,input as l}from"../../GraphShaderModule.js";import{Mat3 as p,Vec3 as m,texture2D as c,max as y,Float as v,step as w,Vec4 as u,length as h,smoothstep as x,Vec2 as g,Sampler2D as f}from"../../graph/glsl.js";import{FeatureFragmentInput as S}from"../shaders/AFeatureShader.js";import{ViewInfo as j}from"../shaders/ViewInfo.js";class z extends i{}t([s(0,g)],z.prototype,"pos",void 0);class F extends S{}class R extends r{}t([d(v)],R.prototype,"dotSize",void 0);class b extends r{}t([d(f)],b.prototype,"locations",void 0),t([d(v)],b.prototype,"pixelRatio",void 0),t([d(v)],b.prototype,"tileZoomFactor",void 0);const P=1e-6;class C extends n{vertex(t){const o=new p(1,0,0,0,-1,0,0,1,1).multiply(new m(t.pos.xy.divide(e),1)),i=c(this.draw.locations,o.xy),s=y(this.instance.dotSize.divide(2),new v(1));let r=new v(0);r=r.add(w(i.a,new v(P)).multiply(2));let d=s.add(this.instance.dotSize);const n=this.view.displayViewScreenMat3.multiply(new m(t.pos.add(.5),1)),a=new u(n.xy,r,1),l=this.instance.dotSize.divide(d),h=new v(-1).divide(s.divide(d));return d=d.multiply(this.draw.pixelRatio.multiply(this.draw.tileZoomFactor)),{glPosition:a,glPointSize:d,color:i,ratio:l,invEdgeRatio:h}}fragment(t){const o=h(t.glPointCoord.subtract(.5)).multiply(2),e=x(new v(0),new v(1),t.invEdgeRatio.multiply(o.subtract(t.ratio)).add(1)),i=new a;return i.glFragColor=t.color.multiply(e),i}}t([d(R)],C.prototype,"instance",void 0),t([d(b)],C.prototype,"draw",void 0),t([d(j)],C.prototype,"view",void 0),t([o(0,l(z))],C.prototype,"vertex",null),t([o(0,l(F))],C.prototype,"fragment",null);export{b as DotDensityPointDrawUniforms,F as DotDensityPointFragmentInput,R as DotDensityPointInstanceUniforms,C as DotDensityPointShader,z as DotDensityPointVertexInput};
