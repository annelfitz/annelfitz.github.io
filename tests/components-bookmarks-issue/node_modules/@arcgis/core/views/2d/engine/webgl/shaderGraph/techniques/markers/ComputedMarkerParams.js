/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{pt2px as t}from"../../../../../../../core/screenUtils.js";import{Alignment as e}from"../../../../../../../symbols/cim/enums.js";import{applyParentTransform as i}from"../../../../../../../symbols/cim/utils.js";import{spritePadding as o}from"../../../definitions.js";class s{static from(t){return"width"in t?this.fromSimpleMeshParams(t):this.fromComplexMeshParams(t)}static fromSimpleMeshParams(e){const i=new s(e.sprite,e.color,e.outlineColor,e.minPixelBuffer,e.placement,e.scaleInfo,e.effects),{type:o,width:h,height:r,angle:n,alignment:a,outlineSize:c,referenceSize:l,sprite:m,overrideOutlineColor:f}=e;i.rawWidth=t(h),i.rawHeight=t(r),i.angle=n,i.alignment=a,i.outlineSize=t(c),i.referenceSize=t(l),i.overrideOutlineColor=f,i.offsetX=t(e.offsetX),i.offsetY=t(e.offsetY),"simple"!==o||m.sdf||(i.rawWidth=m.width,i.rawHeight=m.height);const d=2;return i.sizeRatio=m.sdf?d:1,i._computeSize(e,!1),i}static fromComplexMeshParams(e){const o=new s(e.sprite,e.color,e.outlineColor,e.minPixelBuffer,e.placement,e.scaleInfo,e.effects);let{alignment:h,transforms:r,size:n,scaleX:a,anchorX:c,anchorY:l,angle:m,colorLocked:f,frameHeight:d,widthRatio:u,offsetX:p,offsetY:g,outlineSize:x,referenceSize:w,scaleFactor:z,sizeRatio:S,isAbsoluteAnchorPoint:X,rotateClockwise:Y,scaleSymbolsProportionally:H,sprite:M}=e;if(r&&r.infos.length>0){const t=i(n,m,Y,p,g,r);n=t.size,m=t.rotation,p=t.offsetX,g=t.offsetY,Y=!1}z&&(n*=z,p*=z,g*=z);const C=a*(M.width/M.height);o.alignment=h,o.rawHeight=t(n),o.rawWidth=o.rawHeight*C,o.referenceSize=t(w),o.sizeRatio=S,o.angle=m,o.rotateClockwise=Y,o.anchorX=c,o.anchorY=l,o.offsetX=t(p),o.offsetY=t(g),X&&n&&(M.sdf?o.anchorX=c/(n*u):o.anchorX=c/(n*C),o.anchorY=l/n);const W=H&&d?n/d:1;return o.outlineSize=0===x||isNaN(x)?0:t(x)*W,o.scaleSymbolsProportionally=H,o.colorLocked=f,o._computeSize(e,!0),o}constructor(t,i,o,s,h,r,n){this.sprite=t,this.color=i,this.outlineColor=o,this.minPixelBuffer=s,this.placement=h,this.scaleInfo=r,this.effects=n,this.rawWidth=0,this.rawHeight=0,this.angle=0,this.outlineSize=0,this.referenceSize=0,this.sizeRatio=1,this.alignment=e.SCREEN,this.scaleSymbolsProportionally=!1,this.overrideOutlineColor=!1,this.colorLocked=!1,this.anchorX=0,this.anchorY=0,this.computedWidth=0,this.computedHeight=0,this.texXmin=0,this.texYmin=0,this.texXmax=0,this.texYmax=0,this.offsetX=0,this.offsetY=0,this.rotateClockwise=!0}get boundsInfo(){return{size:Math.max(this.computedHeight,this.computedWidth),offsetX:this.offsetX,offsetY:this.offsetY}}_computeSize(t,e){const{sprite:i,hasSizeVV:s}=t,h=!!i.sdf,{rawWidth:r,rawHeight:n,sizeRatio:a,outlineSize:c}=this,l=r*a,m=n*a;if(h&&!s){const t=e&&r>n?l:r,i=n,o=c+2*1;this.computedWidth=Math.min(t+o,l),this.computedHeight=Math.min(i+o,m)}else this.computedWidth=l,this.computedHeight=m;const f=h?Math.max(i.width,i.height)/Math.max(l,m):1,d=.5*(l-this.computedWidth)*f,u=.5*(m-this.computedHeight)*f,p=i.rect.x+o+d,g=i.rect.y+o+u,x=p+i.width-2*d,w=g+i.height-2*u;this.texXmin=Math.floor(p),this.texYmin=Math.floor(g),this.texXmax=Math.ceil(x),this.texYmax=Math.ceil(w),this.computedWidth*=(this.texXmax-this.texXmin)/(x-p),this.computedHeight*=(this.texYmax-this.texYmin)/(w-g),this.anchorX*=l/this.computedWidth,this.anchorY*=m/this.computedHeight}}export{s as ComputedMarkerParams};
