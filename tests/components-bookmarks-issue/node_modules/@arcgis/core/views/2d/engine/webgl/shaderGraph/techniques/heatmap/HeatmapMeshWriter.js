/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{MeshWriter as e}from"../mesh/MeshWriter.js";import{DataType as t}from"../../../../../../webgl/enums.js";const r={createComputedParams:e=>e,attributes:{pos:{type:t.SHORT,count:2,pack:"position",packPrecisionFactor:10},id:{type:t.UNSIGNED_BYTE,count:3,pack:"id"},bitset:{type:t.UNSIGNED_BYTE,count:1},offset:{type:t.BYTE,count:2,packAlternating:{count:4,pack:()=>[[-1,-1],[1,-1],[-1,1],[1,1]]}}}};class i extends e{constructor(){super(...arguments),this.vertexSpec=r}_write(e,t){e.recordStart(this.instanceId,this.attributeLayout);const r=t.getDisplayId();if("esriGeometryPoint"===t.geometryType){const i=t.readXForDisplay(),o=t.readYForDisplay();this._writeQuad(e,r,i,o)}else if("esriGeometryMultipoint"===t.geometryType){const i=t.readGeometryForDisplay();i?.forEachVertex(((t,i)=>{t>=0&&t<=512&&i>=0&&i<=512&&this._writeQuad(e,r,t,i)}))}e.recordEnd()}_writeQuad(e,t,r,i){const o=e.vertexCount();this._writeVertex(e,t,r,i),e.indexWrite(o+0),e.indexWrite(o+1),e.indexWrite(o+2),e.indexWrite(o+1),e.indexWrite(o+3),e.indexWrite(o+2)}}export{i as HeatmapMeshWriter,r as heatmapVertexSpec};
