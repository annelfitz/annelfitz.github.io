/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import e from"../../../../../core/Error.js";import r from"../../../../../core/Logger.js";import{disposeMaybe as t}from"../../../../../core/maybe.js";import{WGLDrawPhase as s}from"../enums.js";import i from"../VertexStream.js";import{createProgramTemplate as n}from"../shaders/BlendPrograms.js";import{BlendFactor as o,PixelFormat as a,TextureWrapMode as d}from"../../../../webgl/enums.js";import{Texture as u}from"../../../../webgl/Texture.js";import{TextureDescriptor as f}from"../../../../webgl/TextureDescriptor.js";const c=()=>r.getLogger("esri.views.2d.engine.webgl.effects.blendEffects.BlendEffect");class m{constructor(){this._size=[0,0]}dispose(e){this._backBufferTexture=t(this._backBufferTexture),this._quad=t(this._quad)}draw(r,t,i,a,d){const{context:u,drawPhase:f}=r;if(this._setupShader(u),a&&"normal"!==a&&f!==s.LABEL)return void this._drawBlended(r,t,i,a,d);const m=n("normal"),h=u.programCache.acquire(m.shaders.vertexShader,m.shaders.fragmentShader,m.attributes);if(!h)return void c().error(new e("mapview-BlendEffect",'Error creating shader program for blend mode "normal"'));u.useProgram(h),t.setSamplingMode(i),u.bindTexture(t,0),h.setUniform1i("u_layerTexture",0),h.setUniform1f("u_opacity",d),u.setBlendingEnabled(!0),u.setBlendFunction(o.ONE,o.ONE_MINUS_SRC_ALPHA);const l=this._quad;l.draw(),l.unbind(),h.dispose()}_drawBlended(r,t,s,i,a){const{context:d,state:u,pixelRatio:f,inFadeTransition:m}=r,{size:h}=u,l=d.getBoundFramebufferObject();let _,p;null!=l?(_=l.width,p=l.height):(_=Math.round(f*h[0]),p=Math.round(f*h[1])),this._createOrResizeTexture(r,_,p);const b=this._backBufferTexture;l.copyToTexture(0,0,_,p,0,0,b),d.setStencilTestEnabled(!1),d.setStencilWriteMask(0),d.setBlendingEnabled(!0),d.setDepthTestEnabled(!1),d.setDepthWriteEnabled(!1);const g=n(i),x=d.programCache.acquire(g.shaders.vertexShader,g.shaders.fragmentShader,g.attributes);if(!x)return void c().error(new e("mapview-BlendEffect",`Error creating shader program for blend mode ${i}`));d.useProgram(x),b.setSamplingMode(s),d.bindTexture(b,0),x.setUniform1i("u_backbufferTexture",0),t.setSamplingMode(s),d.bindTexture(t,1),x.setUniform1i("u_layerTexture",1),x.setUniform1f("u_opacity",a),x.setUniform1f("u_inFadeOpacity",m?1:0),d.setBlendFunction(o.ONE,o.ZERO);const T=this._quad;T.draw(),T.unbind(),x.dispose(),d.setBlendFunction(o.ONE,o.ONE_MINUS_SRC_ALPHA)}_setupShader(e){this._quad||(this._quad=new i(e,[-1,-1,1,-1,-1,1,1,1]))}_createOrResizeTexture(e,r,t){const{context:s}=e;if(null===this._backBufferTexture||r!==this._size[0]||t!==this._size[1]){if(this._backBufferTexture)this._backBufferTexture.resize(r,t);else{const e=new f;e.internalFormat=a.RGBA,e.wrapMode=d.CLAMP_TO_EDGE,e.width=r,e.height=t,this._backBufferTexture=new u(s,e)}this._size[0]=r,this._size[1]=t}}}export{m as BlendEffect};
