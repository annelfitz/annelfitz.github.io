/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{DictionaryMatcher as e}from"./DictionaryMatcher.js";import{IntervalMatcher as t}from"./IntervalMatcher.js";import{LabelMatcher as r}from"./LabelMatcher.js";import{MapMatcher as s}from"./MapMatcher.js";import{FeatureMatcher as a}from"./Matcher.js";async function c(c,u,i,h){switch(i.type){case"simple":case"heatmap":case"dot-density":case"pie-chart":return a.from(c,u,i,h);case"interval":return t.fromIntervalSchema(c,u,i,h);case"dictionary":return e.fromDictionaryRenderer(c,i,h);case"label":return r.fromLabelSchema(c,u,i,h);case"map":return s.fromMatcherSchema(c,u,i,h);case"subtype":return n.fromSubtypes(c,u,i,h);case"cluster":return o.fromClusterSchema(c,u,i,h);default:throw new Error("Impl")}}class n extends a{constructor(e,t){super(),this._subMatchers=e,this._subtypeField=t}static async fromSubtypes(e,t,r,s){const a=new Map,o=[];for(const n in r.renderers){const u=parseInt(n,10),i=c(e,t,r.renderers[n],s).then((e=>a.set(u,e)));o.push(i)}return await Promise.all(o),new n(a,r.subtypeField)}match(e,t){const r=e.readAttribute(this._subtypeField),s=this._subMatchers.get(r);return s?s.match(e,t):null}}class o extends a{static async fromClusterSchema(e,t,r,s){const[a,n]=await Promise.all([c(e,t,r.feature,s),c(e,t,r.cluster,s)]);return new o(a,n)}constructor(e,t){super(),this._featureMatcher=e,this._clusterMatcher=t}match(e,t){return 1===e.readAttribute("cluster_count")?this._featureMatcher.match(e,t):this._clusterMatcher.match(e,t)}}export{o as ClusterMatcher,n as SubtypeMatcher,c as createMatcher};
