/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{tileSize as e,textureBindingRenderer0 as t,textureBindingRenderer1 as i}from"../../../definitions.js";import{isHighlight as o,isHittest as r,getFeatureUniforms as s,getSelectionDefines as n,getFeaturePipelineState as a,getViewUniforms as l}from"../featureTechniqueUtils.js";import{Technique as d}from"../Technique.js";import{DotDensityPointShader as u}from"./DotDensityPointShader.js";import{DotDensityPolygonShader as c}from"./DotDensityPolygonShader.js";import{DotDensityResources as h}from"./DotDensityResources.js";import{meshWriterRegistry as p}from"../mesh/MeshWriterRegistry.js";import{FillShader as m}from"../shaders/FillShader.js";import{ClearBufferBit as w}from"../../../../../../webgl/enums.js";class f extends d{constructor(){super(...arguments),this.shaders={polygon:new c,point:new u,fill:new m},this.meshWriter=p.DotDensityMeshWriter,this._resources=new Map}render(e,t){o(e)||r(e)?this._renderPolygons(e,t):this._renderDotDensity(e,t)}_renderPolygons(e,t){const{context:i,painter:o}=e;o.setShader({shader:this.shaders.fill,uniforms:{...s(e,t.target),visualVariableColor:null,visualVariableOpacity:null},defines:{...n(e)},optionalAttributes:{zoomRange:!1},useComputeBuffer:r(e)}),o.setPipelineState(a(e)),o.submitDraw(i,t)}_renderDotDensity(o,r){const{context:d,painter:u,requiredLevel:c}=o,h=r.instance.getInput(),p=this._getOrCreateResourcesRecord(d),m=p.getDotDensityTextures(d,e,h.seed),f=1/2**(c-r.target.key.level),g=e,x=g*window.devicePixelRatio*g*window.devicePixelRatio,D=1/f*(1/f),b=h.dotScale?o.state.scale/h.dotScale:1,y=h.dotValue*b*D;u.setShader({shader:this.shaders.polygon,uniforms:{...s(o,r.target),instance:{isActive:h.isActive,colors:h.colors,dotValue:Math.max(1,y)},draw:{dotTexture0:{unit:t,texture:m[0]},dotTexture1:{unit:i,texture:m[1]},tileZoomFactor:f,pixelRatio:window.devicePixelRatio,tileDotsOverArea:x/(e*window.devicePixelRatio*e*window.devicePixelRatio)}},defines:{...n(o),blending:h.blending},optionalAttributes:{},useComputeBuffer:!1}),u.setPipelineState(a(o));const R=d.getViewport();d.setViewport(0,0,e,e);const P=d.getBoundFramebufferObject(),S=p.getFBO(d);d.bindFramebuffer(S),d.setClearColor(0,0,0,0),u.setPipelineState({color:{write:[!0,!0,!0,!0],blendMode:"composite"},depth:!1,stencil:!1}),u.updatePipelineState(d),d.clear(w.COLOR_BUFFER_BIT),u.submitDraw(d,r),d.bindFramebuffer(P),d.setViewport(R.x,R.y,R.width,R.height);const v=p.getFBO(d).colorTexture;u.setShader({shader:this.shaders.point,uniforms:{view:l(o,r.target),instance:{dotSize:h.dotSize},draw:{locations:{unit:t,texture:v},tileZoomFactor:1,pixelRatio:window.devicePixelRatio}},defines:{...n(o)},optionalAttributes:{},useComputeBuffer:!1}),u.setPipelineState({color:{write:[!0,!0,!0,!0],blendMode:"composite"},depth:!1,stencil:!1}),u.submitDrawMesh(d,p.getDotDensityMesh(d))}shutdown(e){super.shutdown(e),this._resources.get(e)?.destroy(),this._resources.delete(e)}_getOrCreateResourcesRecord(e){let t=this._resources.get(e);return null==t&&(t=new h,this._resources.set(e,t)),t}}export{f as DotDensityTechnique};
