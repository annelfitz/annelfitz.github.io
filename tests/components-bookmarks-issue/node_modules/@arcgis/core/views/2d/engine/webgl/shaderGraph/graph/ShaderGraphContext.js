/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{cloneShaderNode as e}from"./ShaderGraphNode.js";class t{constructor(e,t,n){this.variableName=e,this.variableInputType=t,this.node=n,this.type="shader-input",this.isUsed=!1}clone(){return new t(this.variableName,this.variableInputType,e(this.node))}}class n{constructor(e,t,n){this.outVariableName=e,this.outVariableType=t,this.node=n,this.type="shader-output"}clone(){const t=new n(this.outVariableName,this.outVariableType,e(this.node));return t.variableName=this.variableName,t}}class o{static createVertex(e,a,d,i,r,s){const u=[];for(const n in e){const o=e[n],a=d.get(n);a?u.push(new t(a,"builtin",o)):u.push(new t("a_"+n,"attribute",o))}for(const n of i){const e=n.uniformHydrated;u.push(new t(n.uniformName,"uniform",e))}const p=[];for(const t in a){const e=a[t];"glPosition"===t?p.push(new n("gl_Position","builtin",e)):"glPointSize"===t?p.push(new n("gl_PointSize","builtin",e)):p.push(new n("v_"+t,"varying",e))}return new o(u,p,r,s)}static createFragment(e,a,d,i,r,s){const u=[],p=Array.from(r.rootOutputNodes());for(const n in e){const o=e[n],a=d.get(n);if(a){u.push(new t(a,"builtin",o));continue}const i=p.find((e=>e.node===o));i&&u.push(new t(i.outVariableName,i.outVariableType,o))}for(const n of i){const e=n.uniformHydrated;u.push(new t(n.uniformName,"uniform",e))}const h=[];for(const t in a){const e=a[t],o=d.get(t);if("discard"===t)h.push(new n(null,"discard",e));else{if(!o)throw new Error(`Member ${t} in shader fragment output shoule be tagged as builtin`);h.push(new n(o,"builtin",e))}}return new o(u,h,s)}constructor(e,t,n,o){this.type="shader-graph-context",this.indent=0,this.body="",this.varCount=0,this._inputShaderTypesByNodeUid=new Map,this._nodeEmitMap=new Map;for(const a of e)this._inputShaderTypesByNodeUid.set(a.node.uid,a);this._outputShaderTypes=t,this._transformFeedbackBindings=n,this._transformFeedbackNames=new Set(n.map((e=>"v_"+e.propertyKey))),this._usedInFragmentShader=o}shouldPruneOutputNode(e){return!!this._usedInFragmentShader&&("builtin"!==e.outVariableType&&(!this._transformFeedbackNames.has(e.outVariableName)&&!this._usedInFragmentShader.has(e.node.uid)))}setEmit(e,t){this._nodeEmitMap.set(e.uid,t)}getEmit(e){return this._nodeEmitMap.get(e.uid)}inputs(){return this._inputShaderTypesByNodeUid.values()}getInput(e){return this._inputShaderTypesByNodeUid.get(e.uid)}*rootOutputNodes(){for(const e of this._outputShaderTypes)yield e}*nodes(){const e=[];for(const t of this._outputShaderTypes.values())e.push(t.node);for(;e.length;){const t=e.pop();"number"!=typeof t&&"boolean"!=typeof t&&e.push(...t.children.filter(Boolean)),yield t}}*nodesOfTypeOrFunction(){for(const e of this.nodes())"number"!=typeof e&&"boolean"!=typeof e&&(yield e)}createSubgraphContext(){const e=this.clone();return e.body="",e.indent=this.indent+2,e._nodeEmitMap=new Map(this._nodeEmitMap),e}clone(){const e=new o([],this._outputShaderTypes,this._transformFeedbackBindings,this._usedInFragmentShader);return e._inputShaderTypesByNodeUid=this._inputShaderTypesByNodeUid,e.indent=this.indent,e.body=this.body,e.varCount=this.varCount,e._nodeEmitMap=this._nodeEmitMap,e}insertVertexShader(e){e.vertex.code.add(""),this._insertInputs(e,"vertex"),e.vertex.code.add(""),e.vertex.code.add("// OUTPUTS: "),e.vertex.code.add("// --------------------------------------------------------- ");for(const t of this.rootOutputNodes()){const n="builtin"===t.outVariableType;this.shouldPruneOutputNode(t)||(n?e.vertex.code.add(`// ${t.outVariableType.padEnd(7)} ${t.node.type.padEnd(9)} ${t.outVariableName};`):e.vertex.code.add(`${t.outVariableType.padEnd(10)} ${t.node.type.padEnd(9)} ${t.outVariableName};`))}e.vertex.code.add(""),e.vertex.code.add("void main() {"),e.vertex.code.add("  "+this.body.split("\n").join("\n  "));for(const t of this.rootOutputNodes())this.shouldPruneOutputNode(t)||e.vertex.code.add(`  ${t.outVariableName} = ${t.variableName};`);e.vertex.code.add("}")}insertFragmentShader(e){this._insertInputs(e,"fragment"),e.fragment.code.add(""),e.fragment.code.add("void main() {"),e.fragment.code.add("  "+this.body.split("\n").join("\n  "));for(const t of this.rootOutputNodes())"discard"===t.outVariableType?(e.fragment.code.add("  // TODO: Should ensure codegen for discard appears first in fragment shader"),e.fragment.code.add(`  if (${t.variableName}) {`),e.fragment.code.add("    discard;"),e.fragment.code.add("  }"),e.fragment.code.add("  ")):e.fragment.code.add(`  ${t.outVariableName} = ${t.variableName};`);e.fragment.code.add("}")}_insertInputs(e,t){e[t].code.add("// INPUTS: "),e[t].code.add("// --------------------------------------------------------- ");for(const n of this.inputs())n.isUsed&&"builtin"!==n.variableInputType&&("array"===n.node.type?e[t].code.add(`${n.variableInputType.padEnd(10)} ${n.node.elementType.type.padEnd(9)} ${n.variableName}[${n.node.size}];`):e[t].code.add(`${n.variableInputType.padEnd(10)} ${n.node.type.padEnd(9)} ${n.variableName};`))}}export{o as ShaderGraphContext,t as ShaderInput,n as ShaderOutput};
