/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{ArcadeDate as t}from"./ArcadeDate.js";import{deepClone as s}from"./deepClone.js";import{ArcadeExecutionError as i,ExecutionErrorCodes as e}from"./executionError.js";import r from"./ImmutableArray.js";import{i as n,a as o,b as a,c as u,t as l,d as c,e as f,f as h,g as m,h as y,j as b,k as d,l as g,m as w,n as p,o as J,p as A}from"../chunks/languageUtils.js";import T from"../geometry/Geometry.js";function v(t,s,i=!1,e=!1){if(null==t)return null;if(a(t))return m(t);if(o(t))return y(t);if(u(t))return b(t);if(d(t))return g(t,s);if(w(t))return t;if(p(t))return t;if(J(t)){const r=[];for(const n of t)r.push(v(n,s,i,e));return r}if(e&&A(t))return t;const r=new N;r.immutable=!1;for(const n of Object.keys(t)){const o=t[n];void 0!==o&&r.setField(n,v(o,s,i,e))}return r.immutable=i,r}class N{constructor(t){this.declaredClass="esri.arcade.Dictionary",this.attributes=null,this.plain=!1,this.immutable=!0,this.attributes=t instanceof N?t.attributes:t??{}}field(t){const s=t.toLowerCase(),r=this.attributes[t];if(void 0!==r)return r;for(const i in this.attributes)if(i.toLowerCase()===s)return this.attributes[i];throw new i(null,e.FieldNotFound,null,{key:t})}setField(s,r){if(this.immutable)throw new i(null,e.Immutable,null);if(n(r))throw new i(null,e.NoFunctionInDictionary,null);const o=s.toLowerCase();r instanceof Date&&(r=t.dateJSToArcadeDate(r));if(void 0===this.attributes[s]){for(const t in this.attributes)if(t.toLowerCase()===o)return void(this.attributes[t]=r);this.attributes[s]=r}else this.attributes[s]=r}hasField(t){const s=t.toLowerCase();if(void 0!==this.attributes[t])return!0;for(const i in this.attributes)if(i.toLowerCase()===s)return!0;return!1}keys(){let t=[];for(const s in this.attributes)t.push(s);return t=t.sort(),t}castToText(s=!1){let i="";for(const e in this.attributes){""!==i&&(i+=",");const n=this.attributes[e];null==n?i+=JSON.stringify(e)+":null":o(n)||a(n)||u(n)?i+=JSON.stringify(e)+":"+JSON.stringify(n):n instanceof T?i+=JSON.stringify(e)+":"+l(n):n instanceof r||Array.isArray(n)?i+=JSON.stringify(e)+":"+l(n,null,s):n instanceof t?i+=s?JSON.stringify(e)+":"+JSON.stringify(n.getTime()):JSON.stringify(e)+":"+n.stringify():null!==n&&"object"==typeof n&&void 0!==n.castToText&&(i+=JSON.stringify(e)+":"+n.castToText(s))}return"{"+i+"}"}static convertObjectToArcadeDictionary(t,s,i=!0,e=!1){const r=new N;r.immutable=!1;for(const n in t){const o=t[n];void 0!==o&&r.setField(n.toString(),v(o,s,i,e))}return r.immutable=i,r}static convertJsonToArcade(t,s,i=!1,e=!1){return v(t,s,i,e)}castAsJson(t=null){const s={};for(let i in this.attributes){const e=this.attributes[i];void 0!==e&&(t?.keyTranslate&&(i=t.keyTranslate(i)),s[i]=c(e,t))}return s}async castDictionaryValueAsJsonAsync(t,s,i,e=null,r){const n=await f(i,e,r);return t[s]=n,n}async castAsJsonAsync(s=null,i=null){const e={},r=[];for(let n in this.attributes){const o=this.attributes[n];i?.keyTranslate&&(n=i.keyTranslate(n)),void 0!==o&&(h(o)||o instanceof T||o instanceof t?e[n]=c(o,i):r.push(this.castDictionaryValueAsJsonAsync(e,n,o,s,i)))}return r.length>0&&await Promise.all(r),e}deepClone(){const t=new N;t.immutable=!1;for(const i of this.keys())t.setField(i,s(this.field(i)));return t}}export{N as default};
