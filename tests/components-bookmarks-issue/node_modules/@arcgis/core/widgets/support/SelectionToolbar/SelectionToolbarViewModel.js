/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import{deprecatedProperty as t}from"../../../core/deprecate.js";import o from"../../../core/Evented.js";import{handlesGroup as r}from"../../../core/handleUtils.js";import s from"../../../core/Logger.js";import{removeMaybe as i}from"../../../core/maybe.js";import{watch as a}from"../../../core/reactiveUtils.js";import{property as n}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/has.js";import"../../../core/RandomLCG.js";import{subclass as c}from"../../../core/accessorSupport/decorators/subclass.js";import{isKnowledgeGraphLayer as l,isLinkChartLayer as p}from"../../../layers/support/layerUtils.js";import{findLayerView as u}from"../../../views/draw/support/layerUtils.js";import{isSelectableLayerView2D as h}from"../../../views/support/layerViewUtils.js";import m from"../Selector2D/SelectionOperation.js";let d=class extends o.EventedAccessor{constructor(e){super(e),this._operationHandlesGroup=null,this.activeOperation=null,this.sources=null}initialize(){this.addHandles([a((()=>this._sources),(e=>{this.activeOperation&&(this.activeOperation.sources=e)}))])}destroy(){this._operationHandlesGroup=i(this._operationHandlesGroup)}get _sources(){const{sources:e,view:t}=this;return t&&e?.length?e.flatMap((e=>{if(h(e))return e;if(l(e)||p(e)){const o=e.layers||[],r=o.map((e=>{const o=u(t,e)||void 0;return h(o)?o:e}));return r.length?r.toArray():o.length?o.toArray():e}const o=u(t,e)||void 0;return h(o)?o:e})):[]}get layers(){return t(s.getLogger(this),"layers",{replacement:"Use SelectionToolbar.sources instead."}),this.sources}set layers(e){t(s.getLogger(this),"layers",{replacement:"Use SelectionToolbar.sources instead."}),this.sources=e}get state(){const{_sources:e,view:t}=this,o=!e?.length&&!t?.selectionManager.sources.length;return this.activeOperation?"active":t?.ready&&!o?"ready":"disabled"}cancel(){"active"===this.state&&(this.activeOperation?.cancel(),this._set("activeOperation",null))}activate(e){const{_sources:t,state:o,view:s}=this,i=!t?.length&&!s?.selectionManager.sources.length;if("disabled"===o||i||!this.view)return;"active"===o&&this.cancel();const a=new m({view:this.view,sources:t,options:e});return this._operationHandlesGroup=r([a.selection.on("change",(e=>this.emit("selection-change",e))),a.once("complete",(e=>this._onOperationComplete(e)))]),this._set("activeOperation",a),a}_onOperationComplete(e){this._operationHandlesGroup=i(this._operationHandlesGroup),this._set("activeOperation",null),this.emit("complete",e)}};e([n()],d.prototype,"_sources",null),e([n({readOnly:!0})],d.prototype,"activeOperation",void 0),e([n()],d.prototype,"layers",null),e([n()],d.prototype,"sources",void 0),e([n({readOnly:!0})],d.prototype,"state",null),e([n()],d.prototype,"view",void 0),d=e([c("esri.widgets.support.SelectionToolbar.SelectionToolbarViewModel")],d);const v=d;export{v as default};
