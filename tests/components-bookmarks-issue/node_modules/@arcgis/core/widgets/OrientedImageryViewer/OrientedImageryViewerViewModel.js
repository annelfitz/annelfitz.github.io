/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import"../../geometry.js";import t from"../../Graphic.js";import{isSome as r,equals as i}from"../../core/arrayUtils.js";import o from"../../core/Collection.js";import{deprecatedProperty as a}from"../../core/deprecate.js";import s from"../../core/Error.js";import n from"../../core/Evented.js";import{isSerializable as l}from"../../core/JSONSupport.js";import{clone as c,equalsShallow as h}from"../../core/lang.js";import u from"../../core/Logger.js";import{clamp as g}from"../../core/mathUtils.js";import{destroyMaybe as d}from"../../core/maybe.js";import{isAbortError as m,waitTick as p}from"../../core/promiseUtils.js";import{watch as y,initial as f,syncAndInitial as v,when as _}from"../../core/reactiveUtils.js";import{property as w}from"../../core/accessorSupport/decorators/property.js";import"../../core/has.js";import{subclass as b}from"../../core/accessorSupport/decorators/subclass.js";import{geographicToWebMercator as P}from"../../geometry/support/webMercatorUtils.js";import C from"../../layers/GraphicsLayer.js";import{searchImages as F}from"../../layers/orientedImagery/queries.js";import{calculateSuitabilities as I}from"../../layers/orientedImagery/core/bestImageUtils.js";import{createCoveragePolygon as V,computePolygonForInspection as S,resizePolygon as O,checkIfPolygonContainsSelectedPoint as A}from"../../layers/orientedImagery/core/coverageUtils.js";import{updateElevation as B,transformPoints as j}from"../../layers/orientedImagery/transformations/groundToImageUtils.js";import{transformPoints as G}from"../../layers/orientedImagery/transformations/imageToGroundUtils.js";import{getInitialAngle as M,convertPixelToHeadingPitch as R,convertHeadingPitchToSphereVertex as x}from"../../layers/orientedImagery/transformations/utils.js";import H from"../../rest/support/AttachmentQuery.js";import{ViewEventPriorities as L}from"../../views/input/InputManager.js";import k from"../PanoramicViewer.js";import{sectorsInOrder as D,sectorsRadii as E}from"./constants.js";import{activePolygonSymbol as U,crossSymbol as N,crossSymbol3D as T,diamondSymbol as z,diamondSymbol3D as W,polygonSymbol as J,activeSourcePointSymbol as q,sourcePointSymbol as $}from"./symbols.js";import{getContentType as K,isNoAttachmentError as Q,isTifOrMrf as Z,isSceneView as X,isGraphic as Y,calculateSegment as ee,calculateDirection as te}from"./utils.js";import re from"./components/ImageViewer.js";import ie from"../../geometry/Point.js";import oe from"../../geometry/Polygon.js";import ae from"../../geometry/SpatialReference.js";const se={click:"view-click",imageClick:"image-click",interactionHandles:"interaction-handles",footprintHandles:"footprint-handles"},ne=new Set(["JPG","JPEG"]),le=/\.(\w+)$/,ce=e=>"FA"===e;let he=class extends n.EventedAccessor{constructor(e){super(e),this.additionalFeatures=new o,this.determineWorkflowForFeature=async()=>{const{currentBestFeature:e,selectedPoint:t}=this;if(e&&t){this._initialCurrentCoverageUpdate=!0,this._updatePointsAndPolygons(),this._fetchFeaturesController??=new AbortController;const{signal:e}=this._fetchFeaturesController;try{await this._loadImage({signal:e})}catch(r){m(r)||(this.loadImageError(r),u.getLogger(this).error("#loadIImage()","error occured while loading image",r))}this._fetchFeaturesController=null}},this.drawFootprint=()=>{this._initialCurrentCoveragePolygon&&this.updateCurrentCoveragePolygon(this._initialCurrentCoveragePolygon)},this.layer=null,this.shouldShowSelectedImage=!1,this.coverageFrustums=new o,this.coveragePolygons=new o,this.currentCoverageVisible=!0,this.disabled=!1,this.displayMessage={key:"onLoadMessage",type:"info"},this.pointSources=new o,this.previousFeatureAngle=0,this.currentBestFeature=null,this.bestFeatureAngle=0,this.selectedPoint=null,this.features=new o,this.isAdditionalCoverageVisible=!1,this.isAdditionalPointSourcesVisible=!1,this.localPort=null,this.mapImageConversionToolState=!1,this.navigatorCurrentBestFeature=null,this.updateFootprint=async e=>{if("image-loaded"!==this.state)return;const t=new AbortController,{signal:r}=t;if(this._updateCoverageController=t,"default"===this.mode)try{const t=await G(e,{feature:this.currentBestFeature,imageProperties:this._imageViewer.viewModel.image.serviceRasterInfo,options:{signal:r},footprintExtent:this._footprintExtent});await this._updateCurrentFootprint(t,r)}catch(i){m(i)||u.getLogger(this).error("#updateFootprint()",i)}},this._additionalCoveragePolygons=new o,this._additionalFeatureGraphics=new o,this._currentCoveragePolygon=null,this._fetchFeaturesController=null,this._highlightedFeatureHandle=null,this._imageViewer=new re,this._initialCurrentCoveragePolygon=null,this._initialCurrentCoverageUpdate=!0,this._loading=!1,this._overlays=new C({listMode:"hide",internal:!0}),this._panoramicViewer=new k,this._referencePointOnGround=null,this._referencePointOnImage=null,this._sectorData=null,this._crossSymbol=null,this._footprintExtent=null,this._suitabilities=null,this._transformController=new AbortController,this._updateCoverageController=null,this.highlight=e=>{if(!this._overlaysView)return;this.removeHighlight();const t=this._additionalCoveragePolygons.find((({attributes:{imageID:t}})=>t===Number(e)));this._highlightedFeatureHandle=t?this._overlaysView?.highlight(t):null},this.loadImageFromSource=async(e,t)=>{const{mode:r,imageRotation:i,options:o}=t,a="string"==typeof e,s=a?e:e.url;let n=a?e.match(le)?.[1]??"":e.datasetFormat;if(!n){const e=await K(s,{...t.options});e&&(n=e.split("/")[1]),n="UNKNOWN FORMAT"}switch(r){case"default":this._imageViewer.imageSource=e,this._imageViewer.imageRotation=i??0,await this._imageViewer.loadImage(o);break;case"panoramic":if(ne.has(n.toUpperCase())){const{pitch:e,yaw:r,cameraLocation:i}=t;this._panoramicViewer.imageSource=s;const a=await M(i,this.selectedPoint)-(r??0);this._panoramicViewer.pitch=e??0,this._panoramicViewer.yaw=a,await this._panoramicViewer.loadImage(o)}else this.setMessage("unsupportedPanoramicImageryError","error",void 0,{datasetFormat:n});break}},this.loadImageViewer=e=>{this._imageViewer.container=e},this.loadPanoramicViewer=e=>{this._panoramicViewer.container=e},this.removeHighlight=()=>this._highlightedFeatureHandle?.remove(),this._getImageSourceFromAttachment=async(e,t,r)=>{const i=new H({objectIds:[t]}),o=await e.queryAttachments(i,r),a=o[`${t}`]?.[0],n=a?.url;if(!n)throw new s("NoAttachmentError","no attachments found",{[e.objectIdField]:t,layer:e});return{datasetFormat:a.contentType.split("/")[1].toUpperCase(),url:n}},this._loadImage=async e=>{const{currentBestFeature:t,layer:r,mode:i}=this;if(this.clearGraphics(),!r||!t||"none"===i)return;const{attributes:o}=t,{imagePath:a,imageRotation:s,cameraHeading:n,cameraRoll:l,cameraPitch:c,objectId:h,cameraOrientation:g,location:d}=o,p=(l??0)+(s??0),y=d.spatialReference.isWGS84&&4!==g?.type?P(d):new ie(d);let f=a;if(ce(a))try{f=await this._getImageSourceFromAttachment(r,h,e)}catch(v){if(m(v))return;return Q(v)?(u.getLogger(this).error(v),void this.setMessage("noAttachment","error",`${r.objectIdField}: ${h}`)):(u.getLogger(this).error(v,{[r.objectIdField]:h,layer:r}),void this.setMessage("imageLoadError","error",`query-attachments-failed:${r.objectIdField} ${h}`))}try{await this.loadImageFromSource(f,{imageRotation:p,options:e,pitch:c,yaw:n,mode:i,cameraLocation:y}),this.transformAndPlotSelectedLocation(e)}catch(v){m(v)||this.loadImageError(v)}},this._mapImageConversionToolViewClickHandler=e=>{e.stopPropagation(),e.preventDefault(),e.mapPoint&&this.plotMapPoint(e.mapPoint)},this._updateCurrentFootprint=async(e,i)=>{await p(i);const o=e.filter(r);if(o.length){const e=[o.map((({x:e,y:t})=>[e,t,1]))];e[0].push(e[0][0]);const r=new oe({hasZ:!0,rings:e,spatialReference:o[0].spatialReference});this.updateCurrentCoveragePolygon(new t({attributes:{imageID:this.currentBestFeature?.attributes.objectId},geometry:r,symbol:U,visible:this.currentCoverageVisible}))}},this._viewClickHandler=e=>{"mouse"===e.pointerType&&0!==e.button||(e.stopPropagation(),e.preventDefault(),e.mapPoint&&this.loadBestImage(e.mapPoint))},this.plotSelectedPointOnImage=async(e,r)=>{if(await p(r),!e)return;const i=new ie({...l(e)?e.toJSON():e,spatialReference:ae.WebMercator});if("default"===this.mode)i.x-=.5,i.y=.5-i.y,this._crossSymbol=new t({geometry:i,symbol:N}),this._imageViewer.addGraphic(this._crossSymbol,0);else if("panoramic"===this.mode){const{imageSize:r}=this._panoramicViewer;if(!r)return;const[i,o]=r,{heading:a,pitch:s}=R(e,i,o),n=x(a,s);this._crossSymbol=new t({geometry:new ie(n,ae.WebMercator),symbol:T}),this._panoramicViewer.addGraphic(this._crossSymbol,0)}},this.updateFootprintPanorama=async()=>{const{yaw:e,pitch:r,fov:i,imageSize:o,imageRenderer:{size:a}}=this._panoramicViewer,s=this.currentBestFeature?.clone();if(!o||!s)return;const n=i/(a[0]/a[1]),{attributes:l}=s;l.orientedImageryType=null,l.cameraHeading=(e+l.cameraHeading)%360,l.cameraPitch=r,l.horizontalFieldOfView=i,l.verticalFieldOfView=n,l.cameraRoll=0;const{polygon:c}=V(s);this.updateCurrentCoveragePolygon(new t({attributes:{imageID:l.objectId},geometry:c,symbol:U,visible:this.currentCoverageVisible}))},this.handleSectorClick=this.handleSectorClick.bind(this),this.searchBestImage=this.searchBestImage.bind(this),this.transformAndPlotReferencePointOnImage=this.transformAndPlotReferencePointOnImage.bind(this),this.updateSuitabilities=this.updateSuitabilities.bind(this),this.determineWorkflowForFeature=this.determineWorkflowForFeature.bind(this),this.updateCoverage=this.updateCoverage.bind(this),this.selectBestFeature=this.selectBestFeature.bind(this),this.drawFootprint=this.drawFootprint.bind(this)}initialize(){this.addHandles([y((()=>this.view?.map),((e,t)=>{t?.layers.remove(this._overlays),e?.layers.add(this._overlays)}),f),y((()=>this.view?.map?.allLayers?.length),(e=>{e&&this.view?.map?.layers.reorder(this._overlays,e-1)}),f),y((()=>[this.state,this.mapImageConversionToolState,this.view]),(()=>{if(this.removeHandles(se.click),"disabled"===this.state||null==this.view)return;const e=this.mapImageConversionToolState&&"image-loaded"===this.state?this._mapImageConversionToolViewClickHandler:this._viewClickHandler;this.addHandles(this.view.on("click",e,L.WIDGET),se.click),this.removeHandles(se.imageClick);const{mapImageConversionToolState:t,mode:r}=this;if(t&&"none"!==r)switch(r){case"default":this._imageViewer.clickAction="pixel-location",this.addHandles(this._imageViewer.on("pixel-location",(async e=>{this.plotReferencePointOnImage(e);const t=this.currentBestFeature;if(t){const r=(await G([e.toJSON()],{feature:t,imageProperties:{width:this._imageViewer.imageSize[0],height:this._imageViewer.imageSize[1]},options:{signal:this._transformController?.signal},footprintExtent:this._footprintExtent}))[0];r&&this.plotReferencePointOnGround(r)}})),se.imageClick);break;case"panoramic":this._panoramicViewer.clickAction="pixel-location",this.addHandles(this._panoramicViewer.on("pixel-location",(async e=>{this.plotReferencePointOnImage(e);const t=this.currentBestFeature,{imageSize:r}=this._panoramicViewer;if(t&&e&&r){const i=(await G([e],{feature:t,imageProperties:{width:r[0],height:r[1]},options:{signal:this._transformController?.signal},footprintExtent:this._footprintExtent}))[0];i&&this.plotReferencePointOnGround(i)}})),se.imageClick)}}),v),y((()=>this.bestFeatureAngle),((e,t)=>{this.previousFeatureAngle=t??0}),v),y((()=>this.currentBestFeature),((e,t)=>{this.determineWorkflowForFeature(e,t)}),{sync:!0}),y((()=>this.mode),(e=>{switch(this.removeHandles(se.interactionHandles),e){case"default":this.addHandles(y((()=>this._imageViewer.imagePointsInView),(e=>{e&&this.updateCoverage()}),{...v,equals:(e,t)=>i(e,t,h)}),se.interactionHandles);break;case"panoramic":this.addHandles(_((()=>this._panoramicViewer.imageSize),(()=>{this._createFootprintHandles()})),se.interactionHandles)}}),v),y((()=>[this.brightness,this.contrast,this.sharpness]),(()=>{const{_imageViewer:e,brightness:t,contrast:r,mode:i,sharpness:o}=this;"default"===i&&(e.brightness=t,e.contrast=r,e.sharpness=o)}),v)])}destroy(){this._cancelCurrentCoverageUpdate(),this._cancelFetchingFeatures(),this.coverageFrustums.destroy(),this.coveragePolygons.destroy(),this.pointSources.destroy(),this._additionalCoveragePolygons.destroy(),this._additionalFeatureGraphics.destroy(),this._initialCurrentCoveragePolygon=d(this._initialCurrentCoveragePolygon),this._currentCoveragePolygon=d(this._currentCoveragePolygon),this._crossSymbol=d(this._crossSymbol),this._referencePointOnGround=d(this._referencePointOnGround),this._referencePointOnImage=d(this._referencePointOnImage),this._overlays&&this.view?.map.remove(this._overlays),this._overlays.destroy()}get activeLayer(){return a(u.getLogger(this),"activeLayer",{replacement:"layer"}),this.layer}set activeLayer(e){a(u.getLogger(this),"activeLayer",{replacement:"layer"}),this.layer=e}get mode(){const e=this.currentBestFeature?.attributes;if(!e)return"none";const{horizontalFieldOfView:t,isSpherical:r}=e;return 360===t||r?"panoramic":"default"}get imagePointsInView(){const{mode:e,_imageViewer:t}=this;return"default"===e?t.imagePointsInView:null}get brightness(){return this._get("brightness")??0}set brightness(e){this._set("brightness",e>10?10:e<-10?-10:e)}get contrast(){return this._get("contrast")??0}set contrast(e){this._set("contrast",g(e,-10,10))}get featureCount(){return this.features?.length??0}get imageGalleryEnabled(){return Z(this.currentBestFeature?.attributes.imagePath.trim())}get imageLoaded(){return a(u.getLogger(this),"imageLoaded",{replacement:'Use OrientedImageryViewer.state === "image-loaded"',version:"4.29",warnOnce:!0}),"image-loaded"===this.state}get referencePoint(){return this._referencePointOnGround?.geometry}get sharpness(){return this._get("sharpness")??0}set sharpness(e){this._set("sharpness",g(e,0,1))}get sectorData(){const{_sectorData:e}=this;return e?D.map((t=>e[t])):null}get state(){const{mode:e,disabled:t}=this;if(t)return"disabled";if(this._loading)return"image-loading";switch(e){case"default":return this._imageViewer.state;case"panoramic":return this._panoramicViewer.state}return"ready"}get thumbnails(){const{features:e}=this;return e?new o(e.map((({attributes:{imagePath:e,objectId:t,cameraRoll:r,imageRotation:i}})=>{const o=e.trim();return Z(o)?{url:o,objectId:t,rotation:(r??0)+(i??0)}:null})).filter(r)):null}set view(e){this._set("view",e)}get _overlaysView(){return this.view?.layerViews.find((({layer:e})=>e===this._overlays))}filterByFootprints(e,t){const r=[],i=[],o=[];return e.forEach((e=>{const{layer:{coveragePercent:a},attributes:s}=e;let n;const{polygon:c,frustum:h}=V(e);if(n=c,s.isInspection&&(n=S(s)),a&&(n=O(n,a)),A(n,t)){o.push(e);const t=n.toJSON(),a=h?.toJSON(),{cameraHeight:c,cameraHeading:u,location:g,objectId:d}=s,m=l(g)?g.toJSON():g;t.imageID=m.imageID=d,a&&(a.imageID=d),m.z=c,this.pointSources?.push(m),r.push(u>0?t:void 0),i.push(u>0?a:void 0)}})),{features:o,polygons:r,frustums:i}}getCurrentCoveragePolygon(){return this._currentCoveragePolygon}getCurrentBestFeaturePolygon(){return this._initialCurrentCoveragePolygon}handleSectorClick(e){if(isNaN(e))return;const t=this._sectorData?.[D[e]];t?.length&&this._updateCurrentBestFeature(t.at(0))}handleFeatureClick(e){const{sector:t,featureIndexInSector:r}=e;if(isNaN(r))return;const i=this._sectorData?.[t];i?.length&&this._updateCurrentBestFeature(i.at(r))}async loadBestImage(e){this._loading=!0,this.displayMessage=null,this.selectedPoint=e.spatialReference.isGeographic?P(e):e.clone(),this.features.removeAll(),this.currentBestFeature=null,this.additionalFeatures.removeAll(),this._additionalCoveragePolygons.removeAll(),this._additionalFeatureGraphics.removeAll(),this._currentCoveragePolygon=d(this._currentCoveragePolygon),this._overlays?.removeAll(),await this._fetchFeaturesWithController(e)}loadImageError(e){u.getLogger(this).error("oriented-imagery-viewer:load-image",e),this.setMessage("imageLoadError","error",e.message)}async plotMapPoint(e){return this.plotReferencePoint(e),this.transformAndPlotReferencePointOnImage({feature:this.currentBestFeature,selectedLocation:e,options:{signal:this._transformController?.signal}})}plotReferencePointOnGround(e){this._referencePointOnGround&&(this._overlays?.remove(this._referencePointOnGround),this._referencePointOnGround.destroy()),null!=e&&(this._referencePointOnGround=new t({geometry:{type:"point",...e.toJSON()},symbol:z}),this.view?this._overlays?.add(this._referencePointOnGround):this.emit("plot-ground-point",{data:{point:this._referencePointOnGround?.geometry}}))}plotReferencePointOnImage(e){if("image-loaded"===this.state)switch(this._referencePointOnImage&&(this._imageViewer.removeGraphic(this._referencePointOnImage),this._panoramicViewer.removeGraphic(this._referencePointOnImage),this._referencePointOnImage.destroy()),this.mode){case"default":{const r=l(e)?e.toJSON():e;r.x-=.5,r.y=.5-r.y,this._referencePointOnImage=new t({geometry:{type:"point",spatialReference:this._imageViewer.imageRenderer.spatialReference,...r},symbol:z}),this._imageViewer.addGraphic(this._referencePointOnImage,0);break}case"panoramic":{const{imageSize:r}=this._panoramicViewer;if(!r)return;const[i,o]=r,{heading:a,pitch:s}=R(e,i,o),n=x(a,s);this._referencePointOnImage=new t({geometry:new ie(n,ae.WebMercator),symbol:W}),this._panoramicViewer.addGraphic(this._referencePointOnImage,0);break}}}resetImage(){switch(this.setMessage("onLoadMessage","info"),this.mode){case"default":this._imageViewer.clearImage(),this._imageViewer.clearGraphics();break;case"panoramic":this._panoramicViewer.clearGraphics()}this._cancelCurrentCoverageUpdate(),this._cancelFetchingFeatures()}async searchBestImage(e,t){try{const r=await F(e,t);r&&await this._processFeatureResponse(r,{signal:t?.signal})}catch(r){m(r)||(this.setMessage("imageLoadError","error",r.message),u.getLogger(this).error("error occurred while finding best image",r))}}selectBestFeature(e){this.currentBestFeature=this.features?.find((({attributes:t})=>t.objectId===Number(e)))}setAdditionalCameraLocationsVisibility(e){this._additionalFeatureGraphics.forEach((t=>{t.visible=e}))}setAdditionalCoverageVisibility(e){this._additionalCoveragePolygons.forEach((t=>{t.visible=e}))}setCurrentCoverageVisibility(e){this._currentCoveragePolygon&&(this._currentCoveragePolygon.visible=e),this._currentBestFeatureGraphic&&(this._currentBestFeatureGraphic.visible=e)}setMapImageConversionToolState(e){this.mapImageConversionToolState=e}async transformAndPlotReferencePointOnImage(e){const{selectedLocation:t,options:r}=e,i=this._initialCurrentCoveragePolygon?.geometry;if(!i?.contains(t))return;const o=await this.transformPoint(t,r);return o?(this.plotReferencePointOnImage(o),{x:o.x,y:o.y}):void 0}updateSuitabilities(e){this._suitabilities=e.sort(((e,t)=>e.suitability-t.suitability));const t=this._suitabilities.map((e=>e.feature));this._updateFeatures(t),this._groupFeaturesBySectors(),this._initialCurrentCoverageUpdate=!0}_cancelFetchingFeatures(e){const t=this._fetchFeaturesController;t&&t.abort(e),this._fetchFeaturesController=null}_cancelCurrentCoverageUpdate(){const e=this._updateCoverageController;e&&e.abort("Multiple Coverage Updates: Aborting Current Coverage Update to sync image and coverage"),this._updateCoverageController=null}_createFootprintHandles(){this.removeHandles(se.footprintHandles),this.addHandles(y((()=>[this._panoramicViewer.fov,this._panoramicViewer.yaw,this._panoramicViewer.pitch]),(()=>{this.updateFootprintPanorama()}),v),se.footprintHandles)}async _fetchFeatures(e,t){if(!this.view)return;const r=this.layer;if(r){const i={include:r},o=this.view.toScreen(e);if(!o)return;const a=await this.view.hitTest(o,i);this._processHitTestResults(r,a,t)}}async _fetchFeaturesWithController(e){this._cancelFetchingFeatures();const t=new AbortController,{signal:r}=t;this._fetchFeaturesController=t;try{await this._fetchFeatures(e,{signal:r}).finally((()=>{this._fetchFeaturesController=null}))}catch(i){this.setMessage("imageLoadError","error"),u.getLogger(this).error("error occurred while fetching features",i)}}_groupFeaturesBySectors(){const{_suitabilities:e,additionalFeatures:t,currentBestFeature:r,features:i}=this;if(!(e&&t&&r&&i))return void(this._sectorData=null);this._sectorData={};for(const l of D)this._sectorData[l]=new o;const a=e.map(((e,t)=>({...e,featureIndex:t})));a.sort(((e,t)=>e.trueSuitability-t.trueSuitability));const s=a.map((({distance:e})=>e)),n=Math.max(...s);a.forEach((e=>{const{distance:t,angle:r,featureIndex:o}=e,a=t/n*E[2],s=ee(t,n),l=te(r);if(!this._sectorData)return;const c=E[3]+a*Math.sin(r*Math.PI/180),h=E[3]+a*Math.cos(r*Math.PI/180);let u;const g=i.at(o),d=g===this.currentBestFeature,m=this.currentBestFeature?.attributes.cameraPitch&&this.currentBestFeature?.attributes.cameraPitch<5;if(d&&m)u=-90;else{const e=c-E[3],t=h-E[3],r=t/Math.sqrt(e**2+t**2);let i=180*Math.acos(r)/Math.PI;(e<0&&t<0||e<0&&t>0)&&(i*=-1),u=i}const p=""===s?l:`${s}_${l}`;d&&(u===this.bestFeatureAngle?this.previousFeatureAngle=u:this.bestFeatureAngle=u,this.navigatorCurrentBestFeature=m?null:{x:c,y:h,direction:l});const y=this._sectorData[p];y.add({angle:r,featureIndex:o,x:c,y:h,objectID:g.attributes.objectId,sector:p,featureIndexInSector:y.length})}))}async _processFeatureResponse(e,t){const{selectedPoint:i}=this;if(!i)return;if(!e)return;const o=e;if(!o)return;const{features:a}=o;if(!a.length)return this.setMessage("noImageError","error"),void(this.currentBestFeature=null);this.coveragePolygons.removeAll(),this.coverageFrustums.removeAll(),this.pointSources.removeAll();const{features:s,polygons:n,frustums:l}=this.filterByFootprints(a,i),c=s;this.coveragePolygons.addMany(n),this.coverageFrustums.addMany(l);const h=n.filter(r).reduce(((e,t)=>(e.push(...t.rings.flat()),e)),new Array),u=new oe({rings:h,spatialReference:n[0]?.spatialReference}).extent;if(!c.length)return void this.setMessage("noImageError","error");if(this._footprintExtent=u,c[0].attributes.elevationSource&&!i.z&&u){const e=await B([i],{feature:c[0],footprintExtent:u,options:t});if(e[0]){const t=e[0];i.elevation=t.z}c[0].elevationSample&&c.forEach((e=>{e.elevationSample=c[0].elevationSample}))}this._suitabilities=I({features:c,selectedPoint:i,camera:X(this.view)?this.view.camera:null,currentImage:this.currentBestFeature}),this.updateSuitabilities(this._suitabilities);const g=this._suitabilities.map((e=>e.feature));this.currentBestFeature=g[0],this._loading=!1}async _processHitTestResults(e,t,r){const{screenPoint:i,results:[o]}=t,a="graphic"===o?.type&&this.shouldShowSelectedImage,s={layerInstanceOrURL:e,point:o?.mapPoint??this.view?.toMap(i),queryParams:{maximumDistance:e.maximumDistance,objectIds:a?[o.graphic.getAttribute(e.objectIdField)]:void 0},queryFeatures:null};await this.searchBestImage(s,r)}_updateFeatures(e){if(!e.length)return this.currentBestFeature=null,void this.additionalFeatures.removeAll();this.features.removeAll(),this.features.addMany(e),this.currentBestFeature=e[0],e.length>1?this.additionalFeatures.addMany(e.slice(1)):this.additionalFeatures.removeAll()}_updatePointsAndPolygons(){const{coveragePolygons:e,pointSources:r,currentBestFeature:i,currentCoverageVisible:o,isAdditionalCoverageVisible:a,isAdditionalPointSourcesVisible:s}=this;if(e&&r&&i){this._additionalCoveragePolygons.removeAll(),this._additionalFeatureGraphics.removeAll(),this._currentCoveragePolygon&&(this._currentCoveragePolygon.destroy(),this._currentCoveragePolygon=null,this._initialCurrentCoveragePolygon=null);for(const r of e)r?.imageID===i.attributes.objectId?this._initialCurrentCoveragePolygon=new t({attributes:{imageID:r?.imageID},geometry:{type:"polygon",...r},symbol:U,visible:!1}):this._additionalCoveragePolygons.push(new t({attributes:{imageID:r?.imageID},geometry:{type:"polygon",...r},symbol:J,visible:a}));for(const e of r)e.imageID===i.attributes.objectId?this._currentBestFeatureGraphic=new t({attributes:{imageID:e.imageID},geometry:{type:"point",...e},symbol:q,visible:o}):this._additionalFeatureGraphics?.push(new t({attributes:{imageID:e.imageID},geometry:{type:"point",...e},symbol:$,visible:s}))}}_updateCurrentBestFeature(e){if(!e)return;this.currentBestFeature=this.features?.at(e.featureIndex);const t=this.currentBestFeature?.attributes.cameraPitch&&this.currentBestFeature?.attributes.cameraPitch<5;let r;if(t)r=-90;else{const t=e.x-E[3],i=e.y-E[3],o=i/Math.sqrt(t**2+i**2);let a=180*Math.acos(o)/Math.PI;(t<0&&i<0||t<0&&i>0)&&(a*=-1),r=a}r===this.bestFeatureAngle?this.previousFeatureAngle=r:this.bestFeatureAngle=r,this.navigatorCurrentBestFeature=t?null:{x:e.x,y:e.y,direction:e.sector.includes("_")?e.sector.split("_")[1]:e.sector}}clearGraphics(){this._imageViewer.clearGraphics(),this._panoramicViewer.clearGraphics()}plotReferencePoint(e){"mapPoint"in e?this.plotReferencePointOnGround(e.mapPoint):this.plotReferencePointOnGround(e)}setMessage(e,t,r,i){this._loading=!1,this.displayMessage={key:e,type:t,data:r,map:i}}async transformAndPlotSelectedLocation(e){const{currentBestFeature:t,selectedPoint:r,state:i}=this;if(this._crossSymbol&&(this._panoramicViewer.removeGraphic(this._crossSymbol),this._imageViewer.removeGraphic(this._crossSymbol),this._crossSymbol=d(this._crossSymbol)),!r||!t||"image-loaded"!==i)return;let o;try{o=await this.transformPoint(r,e),await this.plotSelectedPointOnImage(o,e)}catch(a){m(a)||u.getLogger(this).error("failed to transform map point to pixel, cross symbol will not be plotted on image",{error:a,selectedPoint:r,feature:t})}}async transformPoint(e,t){if("none"===this.mode)return;const r=this.currentBestFeature,i=await j([e],{feature:r,imageProperties:"default"===this.mode?this._imageViewer.viewModel.image.serviceRasterInfo:{width:this._panoramicViewer.imageSize?.[0],height:this._panoramicViewer.imageSize?.[1]},options:t});if(!i.length)return;return i[0]}updateCurrentCoveragePolygon(e){if(this._initialCurrentCoverageUpdate){if(this._overlays?.removeAll(),this._initialCurrentCoverageUpdate=!1,e&&(this._currentCoveragePolygon&&this._currentCoveragePolygon.destroy(),e.visible=this.currentCoverageVisible,this._currentCoveragePolygon=e),this.view){const e=this.selectedPoint?new t({geometry:this.selectedPoint.clone(),symbol:N,attributes:{imageID:this.currentBestFeature?.attributes.objectId}}):null;this._overlays?.graphics.addMany([...this._additionalCoveragePolygons,...this._additionalFeatureGraphics,this._currentCoveragePolygon,this._currentBestFeatureGraphic,e].filter(Y))}}else if(this.view){const t=this._currentCoveragePolygon&&this._overlays?this._overlays.graphics.indexOf(this._currentCoveragePolygon):-1;e&&(this._currentCoveragePolygon&&(this._overlays?.remove(this._currentCoveragePolygon),this._currentCoveragePolygon.destroy()),e.visible=this.currentCoverageVisible,this._currentCoveragePolygon=e,this._overlays?.graphics.add(this._currentCoveragePolygon,t>=0?t:void 0))}}async updateCoverage(){if("default"===this.mode){this._cancelCurrentCoverageUpdate();const{imagePointsInView:e,state:t}=this._imageViewer,r=c(e);if(!r||"image-loaded"!==t)return;this.updateFootprint(r)}}};e([w()],he.prototype,"activeLayer",null),e([w()],he.prototype,"additionalFeatures",void 0),e([w({json:{write:!1}})],he.prototype,"determineWorkflowForFeature",void 0),e([w()],he.prototype,"drawFootprint",void 0),e([w({readOnly:!0,value:"none"})],he.prototype,"mode",null),e([w()],he.prototype,"imagePointsInView",null),e([w()],he.prototype,"layer",void 0),e([w()],he.prototype,"shouldShowSelectedImage",void 0),e([w({type:Number})],he.prototype,"brightness",null),e([w({type:Number})],he.prototype,"contrast",null),e([w()],he.prototype,"coverageFrustums",void 0),e([w()],he.prototype,"coveragePolygons",void 0),e([w()],he.prototype,"currentCoverageVisible",void 0),e([w()],he.prototype,"disabled",void 0),e([w()],he.prototype,"displayMessage",void 0),e([w()],he.prototype,"pointSources",void 0),e([w()],he.prototype,"previousFeatureAngle",void 0),e([w()],he.prototype,"currentBestFeature",void 0),e([w()],he.prototype,"bestFeatureAngle",void 0),e([w()],he.prototype,"selectedPoint",void 0),e([w({readOnly:!0})],he.prototype,"featureCount",null),e([w()],he.prototype,"features",void 0),e([w({readOnly:!0})],he.prototype,"imageGalleryEnabled",null),e([w({readOnly:!0})],he.prototype,"imageLoaded",null),e([w()],he.prototype,"isAdditionalCoverageVisible",void 0),e([w()],he.prototype,"isAdditionalPointSourcesVisible",void 0),e([w({type:Number})],he.prototype,"localPort",void 0),e([w()],he.prototype,"mapImageConversionToolState",void 0),e([w()],he.prototype,"navigatorCurrentBestFeature",void 0),e([w()],he.prototype,"referencePoint",null),e([w({type:Number})],he.prototype,"sharpness",null),e([w({readOnly:!0})],he.prototype,"sectorData",null),e([w({readOnly:!0})],he.prototype,"state",null),e([w({readOnly:!0})],he.prototype,"thumbnails",null),e([w()],he.prototype,"updateFootprint",void 0),e([w({value:null})],he.prototype,"view",null),e([w()],he.prototype,"_additionalCoveragePolygons",void 0),e([w()],he.prototype,"_additionalFeatureGraphics",void 0),e([w()],he.prototype,"_currentCoveragePolygon",void 0),e([w()],he.prototype,"_fetchFeaturesController",void 0),e([w()],he.prototype,"_highlightedFeatureHandle",void 0),e([w()],he.prototype,"_imageViewer",void 0),e([w()],he.prototype,"_initialCurrentCoveragePolygon",void 0),e([w()],he.prototype,"_initialCurrentCoverageUpdate",void 0),e([w()],he.prototype,"_loading",void 0),e([w()],he.prototype,"_overlays",void 0),e([w({readOnly:!0})],he.prototype,"_overlaysView",null),e([w()],he.prototype,"_panoramicViewer",void 0),e([w()],he.prototype,"_referencePointOnGround",void 0),e([w()],he.prototype,"_referencePointOnImage",void 0),e([w()],he.prototype,"_currentBestFeatureGraphic",void 0),e([w()],he.prototype,"_sectorData",void 0),he=e([b("esri.widgets.OrientedImageryViewer.OrientedImageryViewerViewModel")],he);const ue=he;export{ue as default};
