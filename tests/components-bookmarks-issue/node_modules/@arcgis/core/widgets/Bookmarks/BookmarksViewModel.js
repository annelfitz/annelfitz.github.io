/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import e from"../../Viewpoint.js";import o from"../../core/Collection.js";import{deprecatedProperty as i}from"../../core/deprecate.js";import a from"../../core/Error.js";import r from"../../core/Evented.js";import s from"../../core/Logger.js";import{property as n}from"../../core/accessorSupport/decorators/property.js";import{cast as c}from"../../core/accessorSupport/decorators/cast.js";import"../../core/RandomLCG.js";import"../../core/has.js";import{subclass as p}from"../../core/accessorSupport/decorators/subclass.js";import{SlideThumbnail as l}from"../../webdoc/support/SlideThumbnail.js";import m from"../../webmap/Bookmark.js";import{GoToMixin as u}from"../support/GoTo.js";const k=o.ofType(m),w={width:128,height:128,format:"png"},h={takeScreenshot:!0,captureViewpoint:!0,captureRotation:!0,captureScale:!0,captureTimeExtent:!0},d={time:!0};let b=class extends(u(r.EventedAccessor)){constructor(t){super(t),this.capabilities={...d},this.activeBookmark=null,this.view=null}destroy(){this.view=null,this._set("activeBookmark",null)}get abilities(){return i(s.getLogger(this),"abilities",{replacement:"capabilities",version:"4.27"}),this.capabilities}set abilities(t){i(s.getLogger(this),"abilities",{replacement:"capabilities",version:"4.27"}),this.capabilities=t}castAbilities(t){return{...d,...t}}castCapabilities(t){return{...d,...t}}get bookmarks(){return this.view?.map?.bookmarks??new k}set bookmarks(t){this._overrideIfSome("bookmarks",t)}set defaultCreateOptions(t){this._set("defaultCreateOptions",{...h,...t})}get defaultCreateOptions(){return h}set defaultEditOptions(t){this._set("defaultEditOptions",{...h,...t})}get defaultEditOptions(){return h}get state(){const{view:t}=this;return t&&!t.ready?"loading":"ready"}async createBookmark(t){const{view:e,defaultCreateOptions:o,capabilities:i}=this;if(!e)throw new a("create-bookmark:invalid-view","Cannot create a bookmark without a view.");const{takeScreenshot:r,screenshotSettings:s,captureViewpoint:n,captureRotation:c,captureScale:p,captureTimeExtent:l}={...o,...t},u=r?await this._createThumbnail(s):void 0,k=i.time&&l&&null!=e.timeExtent?e.timeExtent.clone():void 0;return new m({...u&&{thumbnail:u},...l&&{timeExtent:k},...n&&{viewpoint:this._createViewpoint({view:e,captureScale:p,captureRotation:c})}})}async editBookmark(t,e){if(!t)return t;const{view:o,defaultEditOptions:i}=this;if(!o)throw new a("edit-bookmark:invalid-view","Cannot edit a bookmark without a view.");const{takeScreenshot:r,screenshotSettings:s,captureViewpoint:n,captureRotation:c,captureScale:p,captureTimeExtent:l}={...i,...e},m=r?await this._createThumbnail(s):void 0;return m&&(t.thumbnail=m),n&&(t.viewpoint=this._createViewpoint({view:o,captureScale:p,captureRotation:c})),l&&null!=o.timeExtent&&(t.timeExtent=o.timeExtent.clone()),this.emit("bookmark-edit",{bookmark:t}),t}goTo(t){const{capabilities:e,view:o}=this;if(!o)throw new a("go-to:invalid-view","Cannot go to a bookmark without a view");const i=t?.viewpoint;if(!i)throw new a("go-to:invalid-bookmark","Cannot go to a bookmark that does not contain a 'viewpoint'.",{bookmark:t});this._set("activeBookmark",t);const r={target:i},s=this.callGoTo(r),n=t?.timeExtent;return e.time&&n&&(o.timeExtent=n),this.emit("bookmark-select",{bookmark:t}),s.catch((()=>{})).then((()=>this._set("activeBookmark",null))),s}async _createThumbnail(t){const{view:e}=this;if(!e)throw new a("bookmark:invalid-view","Cannot create slide thumbnail without a view");const o=await e.takeScreenshot({...w,...t});return new l({url:o.dataUrl})}_createViewpoint({view:t,captureRotation:o,captureScale:i}){const a=t.viewpoint?.clone();return new e({targetGeometry:t.extent?.clone(),rotation:(o?a?.rotation:null)??0,scale:(i?a?.scale:null)??0})}};t([n()],b.prototype,"abilities",null),t([c("abilities")],b.prototype,"castAbilities",null),t([n()],b.prototype,"capabilities",void 0),t([c("capabilities")],b.prototype,"castCapabilities",null),t([n({readOnly:!0})],b.prototype,"activeBookmark",void 0),t([n({type:k})],b.prototype,"bookmarks",null),t([n()],b.prototype,"defaultCreateOptions",null),t([n()],b.prototype,"defaultEditOptions",null),t([n({readOnly:!0})],b.prototype,"state",null),t([n()],b.prototype,"view",void 0),b=t([p("esri.widgets.Bookmarks.BookmarksViewModel")],b);const v=b;export{v as default};
