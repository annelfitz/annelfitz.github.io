/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import{deprecatedProperty as t}from"../../core/deprecate.js";import s from"../../core/Logger.js";import{watch as i,initial as o,whenOnce as r}from"../../core/reactiveUtils.js";import{measurementAreaUnits as n}from"../../core/unitUtils.js";import{property as l}from"../../core/accessorSupport/decorators/property.js";import"../../core/has.js";import"../../core/RandomLCG.js";import{subclass as a}from"../../core/accessorSupport/decorators/subclass.js";import{load as u}from"../../geometry/projection.js";import{defaultUnitPropertyMetadata as c}from"../../properties/defaultUnit.js";import{isSupported as d,isProjectionEngineRequired as h,AreaMeasurement2DTool as p}from"./AreaMeasurement2DTool.js";import{InteractiveToolViewModel as m}from"../support/InteractiveToolViewModel.js";let g=class extends m{constructor(e){super(e),this.supportedViewType="2d",this.unsupportedErrorMessage="AreaMeasurement2DViewModel is only supported in 2D views."}initialize(){this.addHandles([i((()=>this.view?.spatialReference),(()=>this.clear())),i((()=>this.unit),(e=>{null!=this.tool&&(this.tool.unit=e)}),o),i((()=>this.geodesicDistanceThreshold),(e=>{null!=this.tool&&(this.tool.geodesicDistanceThreshold=e)}),o)])}get geodesicDistanceThreshold(){return this._get("geodesicDistanceThreshold")}set geodesicDistanceThreshold(e){t(s.getLogger(this),"geodesicDistanceThreshold",{version:"4.29",warnOnce:!0}),this._set("geodesicDistanceThreshold",e)}get measurement(){return null!=this.tool?this.tool.measurement:null}get measurementLabel(){return null!=this.tool?this.tool.measurementLabel:null}get state(){return this.disabled||null==this.view||!d(this.view.spatialReference)?"disabled":this.tool?.measurement?this.tool.active?"measuring":"measured":"ready"}get unit(){return this._validateUnit(this.defaultUnit)}set unit(e){this._overrideIfSome("unit",this._validateUnit(e))}get unitOptions(){return n}set unitOptions(e){this._overrideIfSome("unitOptions",this._validateUnits(e))}async start(){const e=this.view;null!=e&&(await r((()=>e.ready)),h(e.spatialReference)&&await u()),this.createTool({interactive:!0})}clear(){this.removeTool()}constructTool(){return new p({view:this.view,visible:this.visible,geodesicDistanceThreshold:this.geodesicDistanceThreshold,unit:this.unit})}_validateUnit(e){const{unitOptions:t,defaultUnit:s}=this;return null!=e&&t.includes(e)?e:t.includes(s)?s:t.length>0?t[0]:s}_validateUnits(e){if(null==e)return[];const t=e.filter((e=>n.includes(e)));return 0===t.length?n.slice():t}};e([l(c)],g.prototype,"defaultUnit",void 0),e([l()],g.prototype,"geodesicDistanceThreshold",null),e([l({readOnly:!0})],g.prototype,"measurement",null),e([l({readOnly:!0})],g.prototype,"measurementLabel",null),e([l({readOnly:!0})],g.prototype,"state",null),e([l({type:String})],g.prototype,"unit",null),e([l({type:[String]})],g.prototype,"unitOptions",null),g=e([a("esri.widgets.AreaMeasurement2D.AreaMeasurement2DViewModel")],g);const f=g;export{f as default};
