/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{G as n}from"../chunks/geometryEngineBase.js";import{hydratedAdapter as e}from"./geometryAdapters/hydrated.js";function t(n){return Array.isArray(n)?n[0].spatialReference:n&&n.spatialReference}function r(e){return n.extendedSpatialReferenceInfo(e)}function u(r,u){return n.clip(e,t(r),r,u)}function i(r,u){return n.cut(e,t(r),r,u)}function c(r,u){return n.contains(e,t(r),r,u)}function o(r,u){return n.crosses(e,t(r),r,u)}function f(r,u,i){return n.distance(e,t(r),r,u,i)}function s(r,u){return n.equals(e,t(r),r,u)}function a(r,u){return n.intersects(e,t(r),r,u)}function l(r,u){return n.touches(e,t(r),r,u)}function p(r,u){return n.within(e,t(r),r,u)}function d(r,u){return n.disjoint(e,t(r),r,u)}function m(r,u){return n.overlaps(e,t(r),r,u)}function g(r,u,i){return n.relate(e,t(r),r,u,i)}function h(r){return n.isSimple(e,t(r),r)}function w(r){return n.simplify(e,t(r),r)}function R(r,u=!1){return n.convexHull(e,t(r),r,u)}function x(r,u){return n.difference(e,t(r),r,u)}function y(r,u){return n.symmetricDifference(e,t(r),r,u)}function S(r,u){return n.intersect(e,t(r),r,u)}function A(r,u=null){return n.union(e,t(r),r,u)}function D(r,u,i,c,o,f){return n.offset(e,t(r),r,u,i,c,o,f)}function j(r,u,i,c=!1){return n.buffer(e,t(r),r,u,i,c)}function E(r,u,i,c,o,f){return n.geodesicBuffer(e,t(r),r,u,i,c,o,f)}function J(r,u,i=!0){return n.nearestCoordinate(e,t(r),r,u,i)}function L(r,u){return n.nearestVertex(e,t(r),r,u)}function N(r,u,i,c){return n.nearestVertices(e,t(r),r,u,i,c)}function O(n){return"xmin"in n?"center"in n?n.center:null:"x"in n?n:"extent"in n?n.extent?.center??null:null}function T(e,t,r){if(null==e)throw new F;const u=e.spatialReference;if(null==(r=r??O(e)))throw new F;const i=e.constructor.fromJSON(n.rotate(e,t,r));return i.spatialReference=u,i}function V(e,t){if(null==e)throw new F;const r=e.spatialReference;if(null==(t=t??O(e)))throw new F;const u=e.constructor.fromJSON(n.flipHorizontal(e,t));return u.spatialReference=r,u}function v(e,t){if(null==e)throw new F;const r=e.spatialReference;if(null==(t=t??O(e)))throw new F;const u=e.constructor.fromJSON(n.flipVertical(e,t));return u.spatialReference=r,u}function z(r,u,i,c){return n.generalize(e,t(r),r,u,i,c)}function B(r,u,i){return n.densify(e,t(r),r,u,i)}function H(r,u,i,c=0){return n.geodesicDensify(e,t(r),r,u,i,c)}function I(r,u){return n.planarArea(e,t(r),r,u)}function b(r,u){return n.planarLength(e,t(r),r,u)}function k(r,u,i){return n.geodesicArea(e,t(r),r,u,i)}function q(r,u,i){return n.geodesicLength(e,t(r),r,u,i)}function C(r,u){return n.intersectLinesToPoints(e,t(r),r,u)}function G(e,t){n.changeDefaultSpatialReferenceTolerance(e,t)}function P(e){n.clearDefaultSpatialReferenceTolerance(e)}class F extends Error{constructor(){super("Illegal Argument Exception")}}export{j as buffer,G as changeDefaultSpatialReferenceTolerance,P as clearDefaultSpatialReferenceTolerance,u as clip,c as contains,R as convexHull,o as crosses,i as cut,B as densify,x as difference,d as disjoint,f as distance,s as equals,r as extendedSpatialReferenceInfo,V as flipHorizontal,v as flipVertical,z as generalize,k as geodesicArea,E as geodesicBuffer,H as geodesicDensify,q as geodesicLength,S as intersect,C as intersectLinesToPoints,a as intersects,h as isSimple,J as nearestCoordinate,L as nearestVertex,N as nearestVertices,D as offset,m as overlaps,I as planarArea,b as planarLength,g as relate,T as rotate,w as simplify,y as symmetricDifference,l as touches,A as union,p as within};
