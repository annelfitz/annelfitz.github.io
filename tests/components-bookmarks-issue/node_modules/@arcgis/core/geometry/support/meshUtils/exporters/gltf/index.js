/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import e from"../../../../Point.js";import{GLB as t}from"./glb.js";import{GLTF as r}from"./gltf.js";import{ImageOutputType as o,BufferOutputType as n}from"./types.js";export{AlphaMode,AttributeType,ColorMode,MeshMode}from"./types.js";import{isArrayBufferPNG as s,encodeBase64DataUri as i}from"./imageutils.js";export{Asset}from"./asset.js";export{Scene}from"./scene.js";export{Node}from"./node.js";const a="model.gltf",f="model.glb";async function u(u,p,m){const c=new r(u,p=p||{},m);let l=c.params;l?l.origin||(l.origin=new e({x:-1,y:-1,z:-1})):l={origin:new e({x:-1,y:-1,z:-1})};const g=l.origin,y=c.gltf,d=y.extras?.promises??[];let j=1,x=1,b=null;await Promise.allSettled(d);const w={origin:g};delete y.extras;const B="number"==typeof p.jsonSpacing?p.jsonSpacing:4,h=JSON.stringify(y,((e,t)=>{if("extras"!==e){if(t instanceof ArrayBuffer){if(s(t))switch(p.imageOutputType){case o.DataURI:case o.GLB:break;case o.External:default:{const e=`img${x}.png`;return x++,w[e]=t,e}}switch(p.bufferOutputType){case n.DataURI:return i(t);case n.GLB:if(b)throw new Error("Already encountered an ArrayBuffer, there should only be one in the GLB format.");return void(b=t);case n.External:default:{const e=`data${j}.bin`;return j++,w[e]=t,e}}}return t}}),B);return p.bufferOutputType===n.GLB||p.imageOutputType===o.GLB?w[f]=new t(h,b).buffer:w[a]=h,w}function p(e,t){return u(e,{bufferOutputType:n.GLB,imageOutputType:o.GLB,jsonSpacing:0},t)}export{n as BufferOutputType,o as ImageOutputType,p as exportGLB,u as exportGLTF,f as modelNameGlb,a as modelNameGltf};
