/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import e from"../../../core/Error.js";import{whenOrAbort as t,throwIfAborted as s,allSettledValues as n,isAborted as r,createAbortError as o}from"../../../core/promiseUtils.js";import{removeFile as i,makeRelative as a}from"../../../core/urlUtils.js";import l from"../../Point.js";async function c(e,n,r){const{source:o}=n,{loadGLTFMesh:i}=await t(import("./loadGLTFMesh.js"),r),a=await f(o,r);s(r);const c=i(new l({x:0,y:0,z:0,spatialReference:e.spatialReference}),a.url,{resolveFile:u(a),signal:r?.signal,expectedType:a.type});c.then((()=>a.dispose()),(()=>a.dispose()));const{vertexAttributes:m,components:p}=await c;e.vertexAttributes=m,e.components=p}function u(e){const t=i(e.url);return s=>{const n=a(s,t,t),r=n?n.replace(/^ *\.\//,""):null;return(r?e.files.get(r):null)??s}}async function f(t,s){if(Array.isArray(t)){if(!t.length)throw new e("mesh-load-external:missing-assets","There must be at least one file to load");return t[0]instanceof File?h(t):y(t,s)}return p(t)}async function m(e,t){const{parts:n,assetMimeType:r,assetName:o}=e;if(1===n.length)return new j(n[0].partUrl);const i=await e.toBlob(t);return s(t),j.fromBlob(i,x(o,r))}function p(e){return j.fromBlob(e,x(e.name,e.type))}function h(e){return T(e.map((e=>({name:e.name,mimeType:e.type,source:p(e)}))))}async function y(e,t){const i=await n(e.map((async e=>{const n=await m(e);return s(t),{name:e.assetName,mimeType:e.assetMimeType,source:n}})));if(r(t))throw i.forEach((e=>e.source.dispose())),o();return T(i)}const w=/^model\/gltf\+json$/,d=/^model\/gltf-binary$/,g=/\.gltf$/i,b=/\.glb$/i;function T(t){const s=new Map;let n,r=null;for(const{name:e,mimeType:o,source:i}of t)null===r&&(w.test(o)||g.test(e)?(r=i.url,n="gltf"):(d.test(o)||b.test(e))&&(r=i.url,n="glb")),s.set(e,i.url),i.files.forEach(((e,t)=>s.set(t,e)));if(null==r)throw new e("mesh-load-external:missing-files","Missing files to load external mesh source");return new j(r,(()=>t.forEach((({source:e})=>e.dispose()))),s,n)}class j{constructor(e,t=(()=>{}),s=new Map,n){this.url=e,this.dispose=t,this.files=s,this.type=n}static fromBlob(e,t){const s=URL.createObjectURL(e);return new j(s,(()=>URL.revokeObjectURL(s)),void 0,t)}}function x(e,t){return w.test(t)||g.test(e)?"gltf":d.test(t)||g.test(e)?"glb":void 0}export{c as loadExternal};
