/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{px2pt as e,pt2px as t}from"../../core/screenUtils.js";import{CIMSymbolHelper as i}from"../cim/CIMSymbolHelper.js";import{CIMSymbolRasterizer as l}from"../cim/CIMSymbolRasterizer.js";import{OverrideHelper as r}from"../cim/OverrideHelper.js";import{mapCIMSymbolToGeometryType as n}from"../cim/utils.js";import{SymbolSizeDefaults as a}from"./previewUtils.js";import{renderSymbol as o}from"./renderUtils.js";const s=new l(null),c=e(a.size),m=e(a.maxSize),u=e(a.lineWidth),f=1;async function h(e,t,i){const l=t?.size;let r=null!=l&&"object"==typeof l&&"width"in l?l.width:l,n=null!=l&&"object"==typeof l&&"height"in l?l.height:l;if(null==r||null==n)if("esriGeometryPolygon"===i)r=c,n=c;else{const l=await y(e,t,i);l&&(r=l.width,n=l.height),"esriGeometryPolyline"===i&&(r=u),r=null!=r&&isFinite(r)?Math.min(r,m):c,n=null!=n&&isFinite(n)?Math.max(Math.min(n,m),f):c}return"legend"===t.style&&"esriGeometryPolyline"===i&&(r=u),{width:r,height:n}}async function y(e,t,l){const{feature:n,fieldMap:a,viewParams:o}=t.cimOptions||t,c=await r.resolveSymbolOverrides(e.data,n,null,a,l,null,o);if(!c)return null;(e=e.clone()).data={type:"CIMSymbolReference",symbol:c},e.data.primitiveOverrides=void 0;const m=[];return i.fetchResources(c,s.resourceManager,m),i.fetchFonts(c,s.resourceManager,m),m.length>0&&await Promise.all(m),i.getEnvelope(c,null,s.resourceManager)}async function p(e,i={}){const{node:l,opacity:r,symbolConfig:a}=i,c=null!=a&&"object"==typeof a&&"isSquareFill"in a&&a.isSquareFill,m=i.cimOptions||i,u=m.geometryType||n(e?.data?.symbol),f=await h(e,i,u),{feature:y,fieldMap:p}=m,d=c||"esriGeometryPolygon"!==u?"preview":"legend",g=await s.rasterizeCIMSymbolAsync(e,y,f,d,p,u,null,m.viewParams,m.allowScalingUp);if(!g)return null;const{width:w,height:b}=g,v=document.createElement("canvas");v.width=w,v.height=b;v.getContext("2d").putImageData(g,0,0);const M=t(f.width),j=t(f.height),S=new Image(M,j);S.src=v.toDataURL(),S.ariaLabel=i.ariaLabel??null,S.alt=i.ariaLabel??"",null!=r&&(S.style.opacity=`${r}`);let C=S;if(null!=i.effectView){const e={shape:{type:"image",x:0,y:0,width:M,height:j,src:S.src},fill:null,stroke:null,offset:[0,0]};C=o([[e]],[M,j],{effectView:i.effectView,ariaLabel:i.ariaLabel})}return l&&C&&l.appendChild(C),C}export{p as previewCIMSymbol};
