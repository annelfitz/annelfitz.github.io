/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import e from"../../Color.js";import{isRGB as r}from"../../core/colorUtils.js";import{clone as i}from"../../core/lang.js";import{createRendererExpression as t}from"../../support/arcadeOnDemand.js";import{normalizeDashTemplate as s,uncapitalize as o,attributesToFields as a,analyzeTextParts as c,assignTextValuesFromFeature as l}from"./utils.js";import n from"../../views/2d/arcade/callExpressionWithFeature.js";const p=e=>{if(!e)return[0,0,0,0];const{r,g:i,b:t,a:s}=e;return[r,i,t,255*s]};class f{static findApplicableOverrides(e,r,i){if(e&&r){if(e.primitiveName){let t=!1;for(const r of i)if(r.primitiveName===e.primitiveName){t=!0;break}if(!t)for(const s of r)s.primitiveName===e.primitiveName&&i.push(s)}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(const t of e.effects)f.findApplicableOverrides(t,r,i);if(e.symbolLayers)for(const t of e.symbolLayers)f.findApplicableOverrides(t,r,i);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMPictureStroke":case"CIMGradientStroke":case"CIMSolidFill":case"CIMPictureFill":case"CIMHatchFill":case"CIMGradientFill":case"CIMVectorMarker":case"CIMCharacterMarker":case"CIMPictureMarker":if(e.effects)for(const t of e.effects)f.findApplicableOverrides(t,r,i);if(e.markerPlacement&&f.findApplicableOverrides(e.markerPlacement,r,i),"CIMVectorMarker"===e.type){if(e.markerGraphics)for(const t of e.markerGraphics)f.findApplicableOverrides(t,r,i),f.findApplicableOverrides(t.symbol,r,i)}else"CIMCharacterMarker"===e.type?f.findApplicableOverrides(e.symbol,r,i):"CIMHatchFill"===e.type?f.findApplicableOverrides(e.lineSymbol,r,i):"CIMPictureMarker"===e.type&&f.findApplicableOverrides(e.animatedSymbolProperties,r,i)}}}static findEffectOverrides(e,r){if(!e)return null;if("CIMGeometricEffectDashes"===e.type&&s(e),!r||!e.primitiveName)return{type:"cim-effect-info",effect:e,overrides:[]};const i=e.primitiveName,t=[];for(const s of r)s.primitiveName===i&&t.push({...s,propertyName:o(s.propertyName)});return{type:"cim-effect-info",effect:e,overrides:t}}static async resolveSymbolOverrides(e,r,t,s,o,c,l){if(!e?.symbol)return null;let{symbol:n,primitiveOverrides:p}=e;const m=!!p;if(!m&&!s)return n;n=i(n),p=i(p);let y=!0;if(r||(r={attributes:{}},y=!1),m){if(y||(p=p.filter((e=>!e.valueExpressionInfo?.expression.includes("$feature")))),l||(p=p.filter((e=>!e.valueExpressionInfo?.expression.includes("$view")))),p.length>0){const e={spatialReference:t,fields:a(r.attributes),geometryType:o};await f.createRenderExpressions(p,e),f.evaluateOverrides(p,r,o??"esriGeometryPoint",c,l)}f.applyOverrides(n,p)}return s&&f.applyDictionaryTextOverrides(n,r,s,null),n}static async createRenderExpressions(e,r){const i=[];for(const s of e){const e=s.valueExpressionInfo;if(!e||f._expressionToRenderExpression.has(e.expression))continue;const o=t(e.expression,r.spatialReference,r.fields);i.push(o),o.then((r=>f._expressionToRenderExpression.set(e.expression,r)))}i.length>0&&await Promise.all(i)}static evaluateOverrides(e,i,t,s,o){const a={$view:{scale:o?.scale}};for(const c of e){c.value&&"object"==typeof c.value&&r(c.value)&&("Color"===c.propertyName||"StrokeColor"===c.propertyName)&&(c.value=p(c.value));const e=c.valueExpressionInfo;if(!e)continue;const o=f._expressionToRenderExpression.get(e.expression);o&&(c.value=n(o,i,a,t,s))}}static applyDictionaryTextOverrides(e,r,i,t,s="Normal"){if(e?.type)switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":case"CIMTextSymbol":{const o=e.symbolLayers;if(!o)return;for(const a of o)a&&"CIMVectorMarker"===a.type&&f.applyDictionaryTextOverrides(a,r,i,t,"CIMTextSymbol"===e.type?e.textCase:s)}break;case"CIMVectorMarker":{const s=e.markerGraphics;if(!s)return;for(const e of s)e&&f.applyDictionaryTextOverrides(e,r,i,t)}break;case"CIMMarkerGraphic":{const o=e.textString;if(o&&o.includes("[")){const a=c(o,i);e.textString=l(r,a,t,s)}}}}static applyOverrides(e,r,i,t){if(e.primitiveName)for(const s of r)if(s.primitiveName===e.primitiveName){const r=o(s.propertyName);if(t&&t.push({cim:e,nocapPropertyName:r,value:e[r]}),i){let r=!1;for(const t of i)t.primitiveName===e.primitiveName&&(r=!0);r||i.push(s)}null!=s.value&&(e[r]=s.value)}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(const s of e.effects)f.applyOverrides(s,r,i,t);if(e.symbolLayers)for(const s of e.symbolLayers)f.applyOverrides(s,r,i,t);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMSolidFill":case"CIMVectorMarker":if(e.effects)for(const s of e.effects)f.applyOverrides(s,r,i,t);if("CIMVectorMarker"===e.type&&e.markerGraphics)for(const s of e.markerGraphics)f.applyOverrides(s,r,i,t),f.applyOverrides(s.symbol,r,i,t)}}static restoreOverrides(e){for(const r of e)r.cim[r.nocapPropertyName]=r.value}static buildOverrideKey(e){let r="";for(const i of e)void 0!==i.value&&(r+=`${i.primitiveName}${i.propertyName}${JSON.stringify(i.value)}`);return r}static toValue(r,i){if("DashTemplate"===r)return i.split(" ").map((e=>Number(e)));if("Color"===r){const r=new e(i).toRgba();return r[3]*=255,r}return i}}f._expressionToRenderExpression=new Map;export{f as OverrideHelper};
