/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{set as e,copy as o}from"../core/libs/gl-matrix-2/math/vec2.js";import{create as i}from"../core/libs/gl-matrix-2/factories/vec2f64.js";import{ZEROS as r}from"../core/libs/gl-matrix-2/factories/vec4f64.js";import{ShaderOutput as l}from"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js";import{SliceDraw as t}from"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js";import{ObjectAndLayerIdColor as a}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/ObjectAndLayerIdColor.glsl.js";import{AlignPixel as s}from"../views/3d/webgl-engine/core/shaderLibrary/hud/AlignPixel.glsl.js";import{HUD as n}from"../views/3d/webgl-engine/core/shaderLibrary/hud/HUD.glsl.js";import{HUDOcclusionPass as c}from"../views/3d/webgl-engine/core/shaderLibrary/hud/HUDOcclusionPass.glsl.js";import{HUDVisibility as d}from"../views/3d/webgl-engine/core/shaderLibrary/hud/HUDVisibility.glsl.js";import{occludedHighlightFlag as u,unoccludedHighlightFlag as p}from"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js";import{VisualVariables as g}from"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js";import{symbolAlphaCutoff as f,defaultMaskAlphaCutoff as v}from"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js";import{ColorConversion as m}from"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js";import{RgbaFloatEncoding as b}from"../views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloatEncoding.glsl.js";import{ScreenSizePerspective as h,addScreenSizePerspective as w,addScreenSizePerspectiveAlignment as x}from"../views/3d/webgl-engine/core/shaderLibrary/util/ScreenSizePerspective.glsl.js";import{addPixelRatio as C}from"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js";import{Float2PassUniform as P}from"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js";import{Float4PassUniform as S}from"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js";import{FloatPassUniform as j}from"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js";import{glsl as z}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{ShaderBuilder as y}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";import{Texture2DPassUniform as A}from"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js";import{TransparencyPassType as O}from"../views/3d/webgl-engine/lib/TransparencyPassType.js";import{VertexAttribute as $}from"../views/3d/webgl-engine/lib/VertexAttribute.js";function F(o){const i=new y,F=o.signedDistanceFieldEnabled;if(i.include(n,o),i.include(t,o),o.occlusionPass)return i.include(c,o),i;const{vertex:B,fragment:H}=i;i.include(h),H.include(b),H.include(m),i.include(g,o),i.include(a,o),i.include(d),i.varyings.add("vcolor","vec4"),i.varyings.add("vtc","vec2"),i.varyings.add("vsize","vec2"),i.varyings.add("voccluded","float"),B.uniforms.add(new S("viewport",((e,o)=>o.camera.fullViewport)),new P("screenOffset",((o,i)=>e(T,2*o.screenOffset[0]*i.camera.pixelRatio,2*o.screenOffset[1]*i.camera.pixelRatio))),new P("anchorPosition",(e=>D(e))),new S("materialColor",(e=>e.color))),C(B),F&&(B.uniforms.add(new S("outlineColor",(e=>e.outlineColor))),H.uniforms.add(new S("outlineColor",(e=>L(e)?e.outlineColor:r)),new j("outlineSize",(e=>L(e)?e.outlineSize:0)))),o.pixelSnappingEnabled&&B.include(s),o.hasScreenSizePerspective&&(w(B),x(B)),o.debugDrawLabelBorder&&i.varyings.add("debugBorderCoords","vec4"),i.attributes.add($.UV0,"vec2"),i.attributes.add($.COLOR,"vec4"),i.attributes.add($.SIZE,"vec2"),i.attributes.add($.FEATUREATTRIBUTE,"vec4"),B.code.add(z`
    void main(void) {
      ProjectHUDAux projectAux;
      vec4 posProj = projectPositionHUD(projectAux);
      forwardObjectAndLayerIdColor();

      if (rejectBySlice(projectAux.posModel)) {
        // Project outside of clip plane
        gl_Position = vec4(1e038, 1e038, 1e038, 1.0);
        return;
      }
      vec2 inputSize;
      ${o.hasScreenSizePerspective?z`
            inputSize = screenSizePerspectiveScaleVec2(size, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspective);
            vec2 screenOffsetScaled = screenSizePerspectiveScaleVec2(screenOffset, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspectiveAlignment);
         `:z`
            inputSize = size;
            vec2 screenOffsetScaled = screenOffset;`}

      ${o.vvSize?"inputSize *= vvScale(featureAttribute).xx;":""}

      vec2 combinedSize = inputSize * pixelRatio;
      vec4 quadOffset = vec4(0.0);
      bool visible = testHUDVisibility(posProj);
      voccluded = visible ? 0.0 : 1.0;
    `);const U=z`vec2 uv01 = floor(uv0);
vec2 uv = uv0 - uv01;
quadOffset.xy = ((uv01 - anchorPosition) * 2.0 * combinedSize + screenOffsetScaled) / viewport.zw * posProj.w;`,V=o.pixelSnappingEnabled?F?z`posProj = alignToPixelOrigin(posProj, viewport.zw) + quadOffset;`:z`posProj += quadOffset;
if (inputSize.x == size.x) {
posProj = alignToPixelOrigin(posProj, viewport.zw);
}`:z`posProj += quadOffset;`;B.code.add(z`
    ${o.occlusionTestEnabled?"if (visible) {":""}
    ${U}
    ${o.vvColor?"vcolor = interpolateVVColor(featureAttribute.y) * materialColor;":"vcolor = color / 255.0 * materialColor;"}

    ${o.output===l.ObjectAndLayerIdColor?z`vcolor.a = 1.0;`:""}

    bool alphaDiscard = vcolor.a < ${z.float(f)};
    ${F?`alphaDiscard = alphaDiscard && outlineColor.a < ${z.float(f)};`:""}
    if (alphaDiscard) {
      // "early discard" if both symbol color (= fill) and outline color (if applicable) are transparent
      gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
      return;
    } else {
      ${V}
      gl_Position = posProj;
    }

    vtc = uv;

    ${o.debugDrawLabelBorder?"debugBorderCoords = vec4(uv01, 1.5 / combinedSize);":""}
    vsize = inputSize;
    ${o.occlusionTestEnabled?z`} else { vtc = vec2(0.0);
      ${o.debugDrawLabelBorder?"debugBorderCoords = vec4(0.5, 0.5, 1.5 / combinedSize);}":"}"}`:""}
  }
  `),H.uniforms.add(new A("tex",(e=>e.texture)));const E=o.debugDrawLabelBorder?z`(isBorder > 0.0 ? 0.0 : ${z.float(v)})`:z.float(v),I=z`
    ${o.debugDrawLabelBorder?z`
      float isBorder = float(any(lessThan(debugBorderCoords.xy, debugBorderCoords.zw)) || any(greaterThan(debugBorderCoords.xy, 1.0 - debugBorderCoords.zw)));`:""}

    ${o.sampleSignedDistanceFieldTexelCenter?z`
      // Attempt to sample texel centers to avoid that thin cross outlines
      // disappear with large symbol sizes.
      // see: https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/7058#issuecomment-603041
      float txSize = float(textureSize(tex, 0).x);
      float texelSize = 1.0 / txSize;

      // Calculate how much we have to add/subtract to/from each texel to reach the size of an onscreen pixel
      vec2 scaleFactor = (vsize - txSize) * texelSize;
      vec2 samplePos = vtc + (vec2(1.0, -1.0) * texelSize) * scaleFactor;
      `:z`
      vec2 samplePos = vtc;
      `}

    ${F?z`
      vec4 fillPixelColor = vcolor;

      // Get distance and map it into [-0.5, 0.5]
      float d = rgba2float(texture(tex, samplePos)) - 0.5;

      // Distance in output units (i.e. pixels)
      float dist = d * vsize.x;

      // Create smooth transition from the icon into its outline
      float fillAlphaFactor = clamp(0.5 - dist, 0.0, 1.0);
      fillPixelColor.a *= fillAlphaFactor;

      if (outlineSize > 0.25) {
        vec4 outlinePixelColor = outlineColor;
        float clampedOutlineSize = min(outlineSize, 0.5*vsize.x);

        // Create smooth transition around outline
        float outlineAlphaFactor = clamp(0.5 - (abs(dist) - 0.5*clampedOutlineSize), 0.0, 1.0);
        outlinePixelColor.a *= outlineAlphaFactor;

        if (
          outlineAlphaFactor + fillAlphaFactor < ${E} ||
          fillPixelColor.a + outlinePixelColor.a < ${z.float(f)}
        ) {
          discard;
        }

        // perform un-premultiplied over operator (see https://en.wikipedia.org/wiki/Alpha_compositing#Description)
        float compositeAlpha = outlinePixelColor.a + fillPixelColor.a * (1.0 - outlinePixelColor.a);
        vec3 compositeColor = vec3(outlinePixelColor) * outlinePixelColor.a +
          vec3(fillPixelColor) * fillPixelColor.a * (1.0 - outlinePixelColor.a);

        fragColor = vec4(compositeColor, compositeAlpha);
      } else {
        if (fillAlphaFactor < ${E}) {
          discard;
        }

        fragColor = premultiplyAlpha(fillPixelColor);
      }

      // visualize SDF:
      // fragColor = vec4(clamp(-dist/vsize.x*2.0, 0.0, 1.0), clamp(dist/vsize.x*2.0, 0.0, 1.0), 0.0, 1.0);
      `:z`
          vec4 texColor = texture(tex, vtc, -0.5);
          if (texColor.a < ${E}) {
            discard;
          }
          fragColor = texColor * premultiplyAlpha(vcolor);
          `}

    // Draw debug border with transparency, so that original texels along border are still partially visible
    ${o.debugDrawLabelBorder?z`fragColor = mix(fragColor, vec4(1.0, 0.0, 1.0, 1.0), isBorder * 0.5);`:""}
  `;switch(o.output){case l.Color:H.code.add(z`
        void main() {
          ${I}
          ${o.transparencyPassType===O.FrontFace?"fragColor.rgb /= fragColor.a;":""}
        }`);break;case l.Alpha:H.code.add(z`
        void main() {
          ${I}
          fragColor = vec4(fragColor.a);
        }`);break;case l.ObjectAndLayerIdColor:H.code.add(z`
        void main() {
          ${I}
          outputObjectAndLayerIdColor();
        }`);break;case l.Highlight:H.constants.add("occludedHighlightFlag","vec4",u),H.constants.add("unoccludedHighlightFlag","vec4",p),H.code.add(z`
        void main() {
          ${I}
          if (voccluded == 1.0) {
            fragColor = occludedHighlightFlag;
          } else {
            fragColor = unoccludedHighlightFlag;
          }
        }`)}return i}function L(e){return e.outlineColor[3]>0&&e.outlineSize>0}function D(e,i=T){return e.textureIsSignedDistanceField?B(e.anchorPosition,e.distanceFieldBoundingBox,i):o(i,e.anchorPosition),i}function B(o,i,r){null!=i?e(r,o[0]*(i[2]-i[0])+i[0],o[1]*(i[3]-i[1])+i[1]):e(r,0,0)}const T=i(),H=Object.freeze(Object.defineProperty({__proto__:null,build:F,calculateAnchorPosForRendering:D},Symbol.toStringTag,{value:"Module"}));export{H,F as b,D as c};
