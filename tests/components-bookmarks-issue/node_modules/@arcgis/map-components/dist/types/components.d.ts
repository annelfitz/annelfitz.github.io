/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { ArcgisReferenceElement } from "./utils/component-utils";
import { AreaMeasurement2dWidget } from "./components/area-measurement-2d/area-measurement-2d";
import { ArcGISGraphic, ArcGISMapView, ArcGISSceneView } from "./components/types";
import { AreaMeasurement3dWidget } from "./components/area-measurement-3d/area-measurement-3d";
import { AttachmentsWidget } from "./components/attachments/attachments";
import { BasemapGalleryWidget } from "./components/basemap-gallery/basemap-gallery";
import { BasemapLayerListWidget } from "./components/basemap-layer-list/basemap-layer-list";
import { BasemapToggleWidget } from "./components/basemap-toggle/basemap-toggle";
import { BookmarksWidget } from "./components/bookmarks/bookmarks";
import { BuildingExplorerWidget } from "./components/building-explorer/building-explorer";
import { CompassWidget } from "./components/compass/compass";
import { CoordinateConversionWidget } from "./components/coordinate-conversion/coordinate-conversion";
import { DaylightWidget } from "./components/daylight/daylight";
import { DirectionalPadWidget } from "./components/directional-pad/directional-pad";
import { DirectionsWidget } from "./components/directions/directions";
import { DirectLineMeasurement3dWidget } from "./components/directline-measurement-3d/directline-measurement-3d";
import { DistanceMeasurement2dWidget } from "./components/distance-measurement-2d/distance-measurement-2d";
import { EditorWidget } from "./components/editor/editor";
import { ElevationProfileWidget } from "./components/elevation-profile/elevation-profile";
import { ExpandWidget } from "./components/expand/expand";
import { FeatureWidget } from "./components/feature/feature";
import { FeatureFormWidget } from "./components/feature-form/feature-form";
import { FeatureTableWidget } from "./components/feature-table/feature-table";
import { FeatureTemplatesWidget } from "./components/feature-templates/feature-templates";
import { FeaturesWidget } from "./components/features/features";
import { FloorFilterWidget } from "./components/floor-filter/floor-filter";
import { FullscreenWidget } from "./components/fullscreen/fullscreen";
import { HistogramWidget } from "./components/histogram/histogram";
import { HistogramRangeSliderWidget } from "./components/histogram-range-slider/histogram-range-slider";
import { HomeWidget } from "./components/home/home";
import { LayerListWidget } from "./components/layer-list/layer-list";
import { LegendWidget } from "./components/legend/legend";
import { LineOfSightWidget } from "./components/line-of-sight/line-of-sight";
import { LocateWidget } from "./components/locate/locate";
import { ArcGISWebMap } from "./components/map/map";
import { MeasurementWidget } from "./components/measurement/measurement";
import { NavigationToggleWidget } from "./components/navigation-toggle/navigation-toggle";
import { PrintWidget } from "./components/print/print";
import { ScaleBarWidget } from "./components/scale-bar/scale-bar";
import { ScaleRangeSliderWidget } from "./components/scale-range-slider/scale-range-slider";
import { ArcGISWebScene } from "./components/scene/scene";
import { SearchWidget } from "./components/search/search";
import { ShadowCastWidget } from "./components/shadow-cast/shadow-cast";
import { SketchWidget } from "./components/sketch/sketch";
import { SliceWidget } from "./components/slice/slice";
import { SliderWidget } from "./components/slider/slider";
import { SwipeWidget } from "./components/swipe/swipe";
import { TableListWidget } from "./components/table-list/table-list";
import { TimeSliderWidget } from "./components/time-slider/time-slider";
import { TrackWidget } from "./components/track/track";
import { UtilityNetworkAssociationsWidget } from "./components/utility-network-associations/utility-network-associations";
import { UtilityNetworkTraceWidget } from "./components/utility-network-trace/utility-network-trace";
import { UtilityNetworkValidateTopologyWidget } from "./components/utility-network-validate-topology/utility-network-validate-topology";
import { ValuePickerWidget } from "./components/value-picker/value-picker";
import { VersionManagementStrings } from "./components/version-management/t9n-types";
import { WeatherWidget } from "./components/weather/weather";
import { ZoomWidget } from "./components/zoom/zoom";
export { ArcgisReferenceElement } from "./utils/component-utils";
export { AreaMeasurement2dWidget } from "./components/area-measurement-2d/area-measurement-2d";
export { ArcGISGraphic, ArcGISMapView, ArcGISSceneView } from "./components/types";
export { AreaMeasurement3dWidget } from "./components/area-measurement-3d/area-measurement-3d";
export { AttachmentsWidget } from "./components/attachments/attachments";
export { BasemapGalleryWidget } from "./components/basemap-gallery/basemap-gallery";
export { BasemapLayerListWidget } from "./components/basemap-layer-list/basemap-layer-list";
export { BasemapToggleWidget } from "./components/basemap-toggle/basemap-toggle";
export { BookmarksWidget } from "./components/bookmarks/bookmarks";
export { BuildingExplorerWidget } from "./components/building-explorer/building-explorer";
export { CompassWidget } from "./components/compass/compass";
export { CoordinateConversionWidget } from "./components/coordinate-conversion/coordinate-conversion";
export { DaylightWidget } from "./components/daylight/daylight";
export { DirectionalPadWidget } from "./components/directional-pad/directional-pad";
export { DirectionsWidget } from "./components/directions/directions";
export { DirectLineMeasurement3dWidget } from "./components/directline-measurement-3d/directline-measurement-3d";
export { DistanceMeasurement2dWidget } from "./components/distance-measurement-2d/distance-measurement-2d";
export { EditorWidget } from "./components/editor/editor";
export { ElevationProfileWidget } from "./components/elevation-profile/elevation-profile";
export { ExpandWidget } from "./components/expand/expand";
export { FeatureWidget } from "./components/feature/feature";
export { FeatureFormWidget } from "./components/feature-form/feature-form";
export { FeatureTableWidget } from "./components/feature-table/feature-table";
export { FeatureTemplatesWidget } from "./components/feature-templates/feature-templates";
export { FeaturesWidget } from "./components/features/features";
export { FloorFilterWidget } from "./components/floor-filter/floor-filter";
export { FullscreenWidget } from "./components/fullscreen/fullscreen";
export { HistogramWidget } from "./components/histogram/histogram";
export { HistogramRangeSliderWidget } from "./components/histogram-range-slider/histogram-range-slider";
export { HomeWidget } from "./components/home/home";
export { LayerListWidget } from "./components/layer-list/layer-list";
export { LegendWidget } from "./components/legend/legend";
export { LineOfSightWidget } from "./components/line-of-sight/line-of-sight";
export { LocateWidget } from "./components/locate/locate";
export { ArcGISWebMap } from "./components/map/map";
export { MeasurementWidget } from "./components/measurement/measurement";
export { NavigationToggleWidget } from "./components/navigation-toggle/navigation-toggle";
export { PrintWidget } from "./components/print/print";
export { ScaleBarWidget } from "./components/scale-bar/scale-bar";
export { ScaleRangeSliderWidget } from "./components/scale-range-slider/scale-range-slider";
export { ArcGISWebScene } from "./components/scene/scene";
export { SearchWidget } from "./components/search/search";
export { ShadowCastWidget } from "./components/shadow-cast/shadow-cast";
export { SketchWidget } from "./components/sketch/sketch";
export { SliceWidget } from "./components/slice/slice";
export { SliderWidget } from "./components/slider/slider";
export { SwipeWidget } from "./components/swipe/swipe";
export { TableListWidget } from "./components/table-list/table-list";
export { TimeSliderWidget } from "./components/time-slider/time-slider";
export { TrackWidget } from "./components/track/track";
export { UtilityNetworkAssociationsWidget } from "./components/utility-network-associations/utility-network-associations";
export { UtilityNetworkTraceWidget } from "./components/utility-network-trace/utility-network-trace";
export { UtilityNetworkValidateTopologyWidget } from "./components/utility-network-validate-topology/utility-network-validate-topology";
export { ValuePickerWidget } from "./components/value-picker/value-picker";
export { VersionManagementStrings } from "./components/version-management/t9n-types";
export { WeatherWidget } from "./components/weather/weather";
export { ZoomWidget } from "./components/zoom/zoom";
export namespace Components {
    interface ArcgisAreaMeasurement2d {
        "icon": AreaMeasurement2dWidget["icon"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "unit": AreaMeasurement2dWidget["unit"];
        "unitOptions": AreaMeasurement2dWidget["unitOptions"];
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView;
        /**
          * Internal widget of the component.
         */
        "widget": AreaMeasurement2dWidget;
    }
    interface ArcgisAreaMeasurement3d {
        "analysis": AreaMeasurement3dWidget["analysis"];
        "clear": () => Promise<void>;
        "icon": AreaMeasurement3dWidget["icon"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "start": () => Promise<void>;
        "unit": AreaMeasurement3dWidget["unit"];
        "unitOptions": AreaMeasurement3dWidget["unitOptions"];
        /**
          * Internal view of the component.
         */
        "view": ArcGISSceneView;
        /**
          * Internal widget of the component.
         */
        "widget": AreaMeasurement3dWidget;
    }
    interface ArcgisAttachments {
        "capabilities": AttachmentsWidget["capabilities"];
        "displayType": AttachmentsWidget["displayType"];
        "expandable": boolean;
        "graphic": ArcGISGraphic;
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "submitting": AttachmentsWidget["submitting"];
        "visibleElements": AttachmentsWidget["visibleElements"];
        "widget": AttachmentsWidget;
    }
    interface ArcgisBasemapGallery {
        "activeBasemap": BasemapGalleryWidget["activeBasemap"];
        "disabled": boolean;
        "icon": BasemapGalleryWidget["icon"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "source": BasemapGalleryWidget["source"];
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        /**
          * Internal widget of the component.
         */
        "widget": BasemapGalleryWidget;
    }
    interface ArcgisBasemapLayerList {
        "baseFilterText": string;
        "baseItems": BasemapLayerListWidget["baseItems"];
        "baseListItemCreatedFunction": BasemapLayerListWidget["baseListItemCreatedFunction"];
        "basemapTitle": string;
        "collapsed": boolean;
        "dragEnabled": boolean;
        "editingTitle": boolean;
        "filterPlaceholder": string;
        "icon": BasemapLayerListWidget["icon"];
        "minFilterItems": number;
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "referenceFilterText": string;
        "referenceListItemCreatedFunction": BasemapLayerListWidget["referenceListItemCreatedFunction"];
        "selectedItems": BasemapLayerListWidget["selectedItems"];
        "selectionMode": BasemapLayerListWidget["selectionMode"];
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        "visibilityAppearance": BasemapLayerListWidget["visibilityAppearance"];
        "visibleElementsBaseLayers": boolean;
        "visibleElementsCloseButton": boolean;
        "visibleElementsCollapseButton": boolean;
        "visibleElementsEditTitleButton": boolean;
        "visibleElementsErrors": boolean;
        "visibleElementsFilter": boolean;
        "visibleElementsFlow": boolean;
        "visibleElementsHeading": boolean;
        "visibleElementsReferenceLayers": boolean;
        "visibleElementsStatusIndicators": boolean;
        "visibleElementsTemporaryLayerIndicators": boolean;
        /**
          * Internal widget of the component.
         */
        "widget": BasemapLayerListWidget;
    }
    interface ArcgisBasemapToggle {
        "activeBasemap": BasemapToggleWidget["activeBasemap"];
        "nextBasemap": BasemapToggleWidget["nextBasemap"] | string;
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "toggle": () => Promise<any>;
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        "visibleElementsTitle": boolean;
        /**
          * Internal widget of the component.
         */
        "widget": BasemapToggleWidget;
    }
    interface ArcgisBookmarks {
        "bookmarks": BookmarksWidget["bookmarks"];
        "defaultCreateOptions": BookmarksWidget["defaultCreateOptions"];
        "defaultEditOptions": BookmarksWidget["defaultEditOptions"];
        "disabled": boolean;
        "dragEnabled": boolean;
        "filterPlaceholder": string;
        "filterText": string;
        "icon": BookmarksWidget["icon"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView;
        "visibleElementsAddBookmarkButton": boolean;
        "visibleElementsCloseButton": boolean;
        "visibleElementsCollapseButton": boolean;
        "visibleElementsEditBookmarkButton": boolean;
        "visibleElementsFilter": boolean;
        "visibleElementsFlow": boolean;
        "visibleElementsHeading": boolean;
        "visibleElementsThumbnail": boolean;
        "visibleElementsTime": boolean;
        /**
          * Internal widget of the component.
         */
        "widget": BookmarksWidget;
    }
    interface ArcgisBuildingExplorer {
        "icon": BuildingExplorerWidget["icon"];
        "layers": BuildingExplorerWidget["layers"];
        "level": BuildingExplorerWidget["viewModel"]["level"];
        "phase": BuildingExplorerWidget["viewModel"]["phase"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "state": BuildingExplorerWidget["viewModel"]["state"];
        /**
          * Internal view of the component.
         */
        "view": ArcGISSceneView;
        "visibleElementsDisciplines": boolean;
        "visibleElementsLevels": boolean;
        "visibleElementsPhases": boolean;
        /**
          * Internal widget of the component.
         */
        "widget": BuildingExplorerWidget;
    }
    interface ArcgisCompass {
        "icon": CompassWidget["icon"];
        "orientation": CompassOrientation;
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "reset": () => Promise<void>;
        "state": CompassWidget["viewModel"]["state"];
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        /**
          * Internal widget of the component.
         */
        "widget": CompassWidget;
    }
    interface ArcgisCoordinateConversion {
        "conversions": CoordinateConversionWidget["conversions"];
        "currentLocation": CoordinateConversionWidget["currentLocation"];
        "formats": CoordinateConversionWidget["formats"];
        "icon": CoordinateConversionWidget["icon"];
        "locationSymbol": CoordinateConversionWidget["locationSymbol"];
        "mode": CoordinateConversionWidget["mode"];
        "multipleConversions": boolean;
        "orientation": CoordinateConversionWidget["orientation"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "reverseConvert": (coordinate: string, format: __esri.Format) => Promise<__esri.Point>;
        "storageEnabled": boolean;
        "storageType": CoordinateConversionWidget["storageType"];
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        "visibleElementsCaptureButton": boolean;
        "visibleElementsEditButton": boolean;
        "visibleElementsExpandButton": boolean;
        "visibleElementsSettingsButton": boolean;
        /**
          * Internal widget of the component.
         */
        "widget": CoordinateConversionWidget;
    }
    interface ArcgisDaylight {
        "currentSeason": DaylightWidget["viewModel"]["currentSeason"];
        "dateOrSeason": DaylightWidget["dateOrSeason"];
        "dayPlaying": boolean;
        "icon": DaylightWidget["icon"];
        "playSpeedMultiplier": number;
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "timeSliderSteps": DaylightWidget["timeSliderSteps"];
        /**
          * Internal view of the component.
         */
        "view": ArcGISSceneView;
        "visibleElementsDatePicker": boolean;
        "visibleElementsHeader": boolean;
        "visibleElementsPlayButtons": boolean;
        "visibleElementsShadowsToggle": boolean;
        "visibleElementsSunLightingToggle": boolean;
        "visibleElementsTimezone": boolean;
        /**
          * Internal widget of the component.
         */
        "widget": DaylightWidget;
        "yearPlaying": boolean;
    }
    interface ArcgisDirectionalPad {
        "icon": DirectionalPadWidget["icon"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView;
        "visualScale": DirectionalPadWidget["visualScale"];
        /**
          * Internal widget of the component.
         */
        "widget": DirectionalPadWidget;
    }
    interface ArcgisDirections {
        "apiKey": string;
        "getDirections": () => Promise<__esri.RouteLayerSolveResult>;
        "icon": DirectionsWidget["icon"];
        "lastRoute": DirectionsWidget["lastRoute"];
        "layer": DirectionsWidget["layer"];
        "maxStops": number;
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "routeLayerItemId": string;
        "save": () => Promise<__esri.PortalItem>;
        "saveAs": (portalItem: Promise<__esri.PortalItem>, options: { folder: __esri.PortalFolder; }) => Promise<__esri.PortalItem>;
        "searchProperties": DirectionsWidget["searchProperties"];
        "unit": DirectionsWidget["unit"];
        "useDefaultRouteLayer": boolean;
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        "visibleElementsLayerDetails": boolean;
        "visibleElementsSaveAsButton": boolean;
        "visibleElementsSaveButton": boolean;
        /**
          * Internal widget of the component.
         */
        "widget": DirectionsWidget;
        "zoomToRoute": () => Promise<void>;
    }
    interface ArcgisDirectlineMeasurement3d {
        "analysis": DirectLineMeasurement3dWidget["analysis"];
        "clear": () => Promise<void>;
        "icon": DirectLineMeasurement3dWidget["icon"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "start": () => Promise<void>;
        "unit": DirectLineMeasurement3dWidget["unit"];
        "unitOptions": DirectLineMeasurement3dWidget["unitOptions"];
        /**
          * Internal view of the component.
         */
        "view": ArcGISSceneView;
        /**
          * Internal widget of the component.
         */
        "widget": DirectLineMeasurement3dWidget;
    }
    interface ArcgisDistanceMeasurement2d {
        "icon": DistanceMeasurement2dWidget["icon"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "unit": DistanceMeasurement2dWidget["unit"];
        "unitOptions": DistanceMeasurement2dWidget["unitOptions"];
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView;
        /**
          * Internal widget of the component.
         */
        "widget": DistanceMeasurement2dWidget;
    }
    interface ArcgisEditor {
        "activeWorkflow": EditorWidget["activeWorkflow"];
        "allowedWorkflows": EditorWidget["allowedWorkflows"];
        "cancelWorkflow": () => Promise<void>;
        "deleteFeatureFromWorkflow": () => Promise<void>;
        "icon": EditorWidget["icon"];
        "labelOptions": EditorWidget["labelOptions"];
        "layerInfos": EditorWidget["layerInfos"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "snappingOptions": EditorWidget["snappingOptions"];
        "startCreateFeaturesWorkflowAtFeatureCreation": (info: __esri.CreationInfo) => Promise<void>;
        "startCreateFeaturesWorkflowAtFeatureTypeSelection": () => Promise<void>;
        "startUpdateWorkflowAtFeatureEdit": (feature: ArcGISGraphic) => Promise<void>;
        "startUpdateWorkflowAtFeatureSelection": () => Promise<void>;
        "startUpdateWorkflowAtMultipleFeatureSelection": (candidates: ArcGISGraphic[]) => Promise<void>;
        "supportingWidgetDefaults": EditorWidget["supportingWidgetDefaults"];
        "tooltipOptions": EditorWidget["tooltipOptions"];
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        "visibleElementsCreateFeaturesSection": boolean;
        "visibleElementsEditFeaturesSection": boolean;
        "visibleElementsLabelsToggle": boolean;
        "visibleElementsSnappingControls": boolean;
        "visibleElementsSnappingControlsEnabledToggle": boolean;
        "visibleElementsSnappingControlsFeatureEnabledToggle": boolean;
        "visibleElementsSnappingControlsHeader": boolean;
        "visibleElementsSnappingControlsLayerList": boolean;
        "visibleElementsSnappingControlsSelfEnabledToggle": boolean;
        "visibleElementsTooltipsToggle": boolean;
        /**
          * Internal widget of the component.
         */
        "widget": EditorWidget;
    }
    interface ArcgisElevationProfile {
        "effectiveUnits": ElevationProfileWidget["viewModel"]["effectiveUnits"];
        "highlightEnabled": boolean;
        "hoveredChartPosition": number;
        "icon": ElevationProfileWidget["icon"];
        "input": ElevationProfileWidget["input"];
        "position": string;
        "profiles": ElevationProfileWidget["profiles"];
        "progress": number;
        "referenceElement": ArcgisReferenceElement | string;
        "start": () => Promise<void>;
        "state": ElevationProfileWidget["viewModel"]["state"];
        "stop": () => Promise<void>;
        "uniformChartScaling": boolean;
        "unit": ElevationProfileWidget["unit"];
        "unitOptions": ElevationProfileWidget["unitOptions"];
        /**
          * Internal view of the component.
         */
        "view": ArcGISSceneView;
        "visibleElementsChart": boolean;
        "visibleElementsClearButton": boolean;
        "visibleElementsLegend": boolean;
        "visibleElementsSelectButton": boolean;
        "visibleElementsSettingsButton": boolean;
        "visibleElementsSketchButton": boolean;
        "visibleElementsUniformChartScalingToggle": boolean;
        "visibleElementsUnitSelector": boolean;
        /**
          * Internal widget of the component.
         */
        "widget": ElevationProfileWidget;
    }
    interface ArcgisExpand {
        "autoCollapse": boolean;
        "closeOnEsc": boolean;
        "collapse": () => Promise<void>;
        "collapseIcon": ExpandWidget["collapseIcon"];
        "collapseTooltip": ExpandWidget["collapseTooltip"];
        "expand": () => Promise<void>;
        "expandIcon": ExpandWidget["expandIcon"];
        "expandTooltip": ExpandWidget["expandTooltip"];
        "expanded": boolean;
        "group": ExpandWidget["group"];
        "iconNumber": ExpandWidget["iconNumber"];
        "mode": ExpandWidget["mode"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "toggle": () => Promise<void>;
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        /**
          * Internal widget of the component.
         */
        "widget": ExpandWidget;
    }
    interface ArcgisFeature {
        "defaultPopupTemplateEnabled": boolean;
        "graphic": FeatureWidget["graphic"];
        "location": __esri.Point;
        "map": FeatureWidget["map"];
        "nextMedia": (contentElementIndex: number) => Promise<void>;
        "position": string;
        "previousMedia": (contentElementIndex: number) => Promise<void>;
        "referenceElement": ArcgisReferenceElement | string;
        "setActiveMedia": (contentElementIndex: number, mediaInfoIndex: number) => Promise<void>;
        "spatialReference": FeatureWidget["spatialReference"];
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        "visibleElementsContentAttachments": boolean;
        "visibleElementsContentExpression": boolean;
        "visibleElementsContentFields": boolean;
        "visibleElementsContentMedia": boolean;
        "visibleElementsContentText": boolean;
        "visibleElementsLastEditInfo": boolean;
        "visibleElementsTitle": boolean;
        /**
          * Internal widget of the component.
         */
        "widget": FeatureWidget;
    }
    interface ArcgisFeatureForm {
        "expandable": boolean;
        "feature": FeatureFormWidget["feature"];
        "formTemplate": FeatureFormWidget["formTemplate"];
        "getValues": () => Promise<any>;
        "groupDisplay": FeatureFormWidget["groupDisplay"];
        "layer": FeatureFormWidget["layer"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "submit": () => Promise<void>;
        "timeZone": FeatureFormWidget["timeZone"];
        "view": ArcGISMapView | ArcGISSceneView;
        "widget": FeatureFormWidget;
    }
    interface ArcgisFeatureTable {
        "activeFilters": FeatureTableWidget["activeFilters"];
        "activeSortOrders": FeatureTableWidget["activeSortOrders"];
        "attachmentsEnabled": boolean;
        "autoRefreshEnabled": boolean;
        "clearSelectionFilter": () => Promise<void>;
        "columnReorderingEnabled": boolean;
        "columns": FeatureTableWidget["columns"];
        "deleteSelection": (showWarningPrompt?: boolean) => Promise<void>;
        "editingEnabled": boolean;
        "filterBySelection": () => Promise<void>;
        "filterGeometry": FeatureTableWidget["filterGeometry"];
        "findColumn": (fieldName: string) => Promise<__esri.Column | __esri.GroupColumn>;
        "hiddenFields": boolean;
        "hideColumn": (fieldName: string) => Promise<void>;
        "highlightEnabled": boolean;
        "highlightIds": FeatureTableWidget["highlightIds"];
        "itemId": string;
        "layer": FeatureTableWidget["layer"];
        "menu": FeatureTableWidget["menu"];
        "menuConfig": FeatureTableWidget["menuConfig"];
        "multiSortEnabled": boolean;
        "pageSize": number;
        "referenceElement": ArcgisReferenceElement | string;
        "refresh": () => Promise<void>;
        "returnGeometryEnabled": boolean;
        "scrollToIndex": (index: number) => Promise<void>;
        "showAllColumns": () => Promise<void>;
        "showColumn": (fieldName: string) => Promise<void>;
        "sortColumn": (path: string, direction: "asc" | "desc") => Promise<void>;
        "state": FeatureTableWidget["state"];
        "tableTemplate": FeatureTableWidget["tableTemplate"];
        "timeZone": FeatureTableWidget["timeZone"];
        "url": string;
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        "visibleElementsColumnMenus": boolean;
        "visibleElementsHeader": boolean;
        "visibleElementsMenu": boolean;
        "visibleElementsMenuItemsClearSelection": boolean;
        "visibleElementsMenuItemsDeleteSelection": boolean;
        "visibleElementsMenuItemsRefreshData": boolean;
        "visibleElementsMenuItemsSelectedRecordsShowAllToggle": boolean;
        "visibleElementsMenuItemsToggleColumns": boolean;
        "visibleElementsMenuItemsZoomToSelection": boolean;
        "visibleElementsSelectionColumn": boolean;
        /**
          * Internal widget of the component.
         */
        "widget": FeatureTableWidget;
        "zoomToSelection": () => Promise<void>;
    }
    interface ArcgisFeatureTemplates {
        "enableListScroll": FeatureTemplatesWidget["enableListScroll"];
        "expandable": boolean;
        "filterFunction": FeatureTemplatesWidget["filterFunction"];
        "filterText": FeatureTemplatesWidget["filterText"];
        "groupBy": FeatureTemplatesWidget["groupBy"];
        "layers": FeatureTemplatesWidget["layers"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "selectionMode": FeatureTemplatesWidget["selectionMode"];
        "visibleElements": FeatureTemplatesWidget["visibleElements"];
        "widget": FeatureTemplatesWidget;
    }
    interface ArcgisFeatures {
        "clear": () => Promise<void>;
        "close": () => Promise<void>;
        "collapsed": boolean;
        "content": FeaturesWidget["content"];
        "features": FeaturesWidget["features"];
        "featuresTitle": FeaturesWidget["title"];
        "fetchFeatures": (screenPoint: __esri.FeaturesFetchFeaturesScreenPoint, options?: __esri.FetchFeaturesOptions) => Promise<__esri.FetchPopupFeaturesResult>;
        "icon": FeaturesWidget["icon"];
        "next": () => Promise<__esri.FeaturesViewModel>;
        "open": (options?: __esri.FeaturesOpenOptions) => Promise<void>;
        "position": string;
        "previous": () => Promise<__esri.FeaturesViewModel>;
        "promises": FeaturesWidget["promises"];
        "referenceElement": ArcgisReferenceElement | string;
        "selectedFeature": FeaturesWidget["selectedFeature"];
        "selectedFeatureIndex": FeaturesWidget["selectedFeatureIndex"];
        "triggerAction": (actionIndex: number) => Promise<void>;
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        "visibleElementsActionBar": boolean;
        "visibleElementsCloseButton": boolean;
        "visibleElementsCollapseButton": boolean;
        "visibleElementsFeatureNavigation": boolean;
        "visibleElementsHeading": boolean;
        "visibleElementsSpinner": boolean;
        /**
          * Internal widget of the component.
         */
        "widget": FeaturesWidget;
    }
    interface ArcgisFloorFilter {
        "facility": FloorFilterWidget["facility"];
        "level": FloorFilterWidget["level"];
        "longNames": boolean;
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "site": FloorFilterWidget["site"];
        "updateWebDocument": (webmap: __esri.WebMap) => Promise<void>;
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        /**
          * Internal widget of the component.
         */
        "widget": FloorFilterWidget;
    }
    interface ArcgisFullscreen {
        "element": FullscreenWidget["element"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "view": ArcGISMapView | ArcGISSceneView;
        "widget": FullscreenWidget;
    }
    interface ArcgisHistogram {
        "average": HistogramWidget["average"];
        "barCreatedFunction": HistogramWidget["barCreatedFunction"];
        "bins": HistogramWidget["bins"];
        "dataLineCreatedFunction": HistogramWidget["dataLineCreatedFunction"];
        "dataLines": HistogramWidget["dataLines"];
        "expandable": boolean;
        "labelFormatFunction": HistogramWidget["labelFormatFunction"];
        "layout": HistogramWidget["layout"];
        "max": number;
        "min": number;
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "state": HistogramWidget["state"];
        "widget": HistogramWidget;
    }
    interface ArcgisHistogramRangeSlider {
        "average": HistogramRangeSliderWidget["average"];
        "barCreatedFunction": HistogramRangeSliderWidget["barCreatedFunction"];
        "bins": HistogramRangeSliderWidget["bins"];
        "dataLineCreatedFunction": HistogramRangeSliderWidget["dataLineCreatedFunction"];
        "dataLines": HistogramRangeSliderWidget["dataLines"];
        "excludedBarColor": HistogramRangeSliderWidget["excludedBarColor"];
        "expandable": boolean;
        "includedBarColor": HistogramRangeSliderWidget["includedBarColor"];
        "labelFormatFunction": HistogramRangeSliderWidget["labelFormatFunction"];
        "max": number;
        "min": number;
        "position": string;
        "precision": HistogramRangeSliderWidget["precision"];
        "rangeType": HistogramRangeSliderWidget["rangeType"];
        "referenceElement": ArcgisReferenceElement | string;
        "standardDeviation": HistogramRangeSliderWidget["standardDeviation"];
        "standardDeviationCount": HistogramRangeSliderWidget["standardDeviationCount"];
        "values": HistogramRangeSliderWidget["values"];
        "widget": HistogramRangeSliderWidget;
    }
    interface ArcgisHome {
        "cancelGo": () => Promise<void>;
        "go": () => Promise<void>;
        "icon": HomeWidget["icon"];
        "messageOverrides": HomeWidget["uiStrings"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        "viewpoint": HomeWidget["viewpoint"];
        /**
          * Internal widget of the component.
         */
        "widget": HomeWidget;
    }
    interface ArcgisLayerList {
        "collapsed": boolean;
        "dragEnabled": boolean;
        "filterPlaceholder": string;
        "filterText": string;
        "icon": LayerListWidget["icon"];
        "listItemCreatedFunction": LayerListWidget["listItemCreatedFunction"];
        "minDragEnabledItems": number;
        "minFilterItems": number;
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "selectedItems": LayerListWidget["selectedItems"];
        "selectionMode": LayerListWidget["selectionMode"];
        "triggerAction": (action: __esri.ActionButton | __esri.ActionToggle, item: __esri.ListItem) => Promise<void>;
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        "visibilityAppearance": LayerListWidget["visibilityAppearance"];
        "visibleElementsCloseButton": boolean;
        "visibleElementsCollapseButton": boolean;
        "visibleElementsErrors": boolean;
        "visibleElementsFilter": boolean;
        "visibleElementsFlow": boolean;
        "visibleElementsHeading": boolean;
        "visibleElementsStatusIndicators": boolean;
        "visibleElementsTemporaryLayerIndicators": boolean;
        /**
          * Internal widget of the component.
         */
        "widget": LayerListWidget;
    }
    interface ArcgisLegend {
        "activeLayerInfos": LegendWidget["activeLayerInfos"];
        "basemapLegendVisible": boolean;
        "hideLayersNotInCurrentView": boolean;
        "icon": LegendWidget["icon"];
        "legendStyle": LegendWidget["style"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "respectLayerVisibilityDisabled": boolean;
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        /**
          * Internal widget of the component.
         */
        "widget": LegendWidget;
    }
    interface ArcgisLineOfSight {
        "analysis": LineOfSightWidget["analysis"];
        "clear": () => Promise<void>;
        "continue": () => Promise<void>;
        "icon": LineOfSightWidget["icon"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "start": () => Promise<void>;
        "stop": () => Promise<void>;
        /**
          * Internal view of the component.
         */
        "view": ArcGISSceneView;
        /**
          * Internal widget of the component.
         */
        "widget": LineOfSightWidget;
    }
    interface ArcgisLocate {
        "cancelLocate": () => Promise<void>;
        "error": LocateWidget["viewModel"]["error"];
        "geolocationOptions": LocateWidget["geolocationOptions"];
        "goToLocationDisabled": LocateWidget["goToLocationEnabled"];
        "graphic": LocateWidget["graphic"];
        "icon": LocateWidget["icon"];
        "locate": () => Promise<any>;
        "popupDisabled": LocateWidget["popupEnabled"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "scale": LocateWidget["scale"];
        "state": LocateWidget["viewModel"]["state"];
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        /**
          * Internal widget of the component.
         */
        "widget": LocateWidget;
    }
    interface ArcgisMap {
        /**
          * Collection containing a flat list of all the created LayerViews related to the basemap, operational layers, and group layers in this view.
         */
        "allLayerViews": ArcGISMapView["allLayerViews"];
        /**
          * The background color of the MapView. If the view's map changes, the view's `background` is reset to the map's background, even if the user set it previously.
         */
        "background": ArcGISMapView["background"];
        /**
          * Specifies a basemap for the map. The basemap is a set of layers that give geographic context to the MapView or SceneView and the other operational layers in the map.
         */
        "basemap": __esri.Basemap | string;
        /**
          * Represents the view for a single basemap after it has been added to the map.
         */
        "basemapView": ArcGISMapView["basemapView"];
        /**
          * Represents the view's center point; when setting the center, you may pass a esri/geometry/Point instance or a string representing a longitude/latitude pair (`"-100.4593, 36.9014"`). Setting the center immediately changes the current view. For animating the view, see this component's goTo() method.
         */
        "center": ArcGISMapView["center"] | number[] | string;
        /**
          * Closes the popup.
         */
        "closePopup": () => Promise<void>;
        /**
          * Specifies constraints to scale, zoom, and rotation that may be applied to the MapView.
         */
        "constraints": ArcGISMapView["constraints"];
        /**
          * Destroys the view, and any associated resources, including its map, popup, and UI elements.
         */
        "destroy": () => Promise<void>;
        /**
          * Retains element and view state even when removed from DOM
         */
        "destroyDisabled": boolean;
        /**
          * The extent represents the visible portion of a map within the view as an instance of esri/geometry/Extent. Setting the extent immediately changes the view without animation. To animate the view, see this component's goTo() method. When the view is rotated, the extent does not update to include the newly visible portions of the map.
         */
        "extent": ArcGISMapView["extent"];
        /**
          * A rejected view indicates a fatal error making it unable to display.
         */
        "fatalError": ArcGISMapView["fatalError"];
        /**
          * Applies a display filter on the view for a specific set of floor levels. It can filter the map display on floor-aware layers by zero or more level IDs.
         */
        "floors": ArcGISMapView["floors"];
        "gamepad": __esri.GamepadSettings;
        /**
          * Sets the view to a given target.
         */
        "goTo": (target: __esri.GoToTarget2D, options?: __esri.GoToOptions2D) => Promise<any>;
        /**
          * Allows for adding graphics directly to the default graphics in the View. Example: ``` // Adds a graphic to the View graphics.add(pointGraphic); ``` Example: ``` // Removes a graphic from the View graphics.remove(pointGraphic); ```
         */
        "graphics": ArcGISMapView["graphics"];
        /**
          * Options for configuring the highlight. Use the highlight method on the appropriate esri/views/layers/LayerView to highlight a feature. The layerView's `highlightOptions` will take precedence over the MapView's `highlightOptions` if both properties are set.
         */
        "highlightOptions": ArcGISMapView["highlightOptions"];
        /**
          * Returns hit test results from each layer that intersects the specified screen coordinates.
         */
        "hitTest": (screenPoint: __esri.ScreenPoint, options?: Record<string, any>) => Promise<__esri.HitTestResult>;
        /**
          * Indication whether the view is being interacted with (for example when panning or by an interactive tool).
         */
        "interacting": boolean;
        /**
          * The ID of a WebMap from ArcGIS Online or ArcGIS Enterprise portal.
         */
        "itemId": string;
        /**
          * A collection containing a hierarchical list of all the created esri/views/layers/LayerView LayerViews of the esri/Map#layers operational layers in the map.
         */
        "layerViews": ArcGISMapView["layerViews"];
        /**
          * The magnifier allows for showing a portion of the view as a magnifier image on top of the view.
         */
        "magnifier": ArcGISMapView["magnifier"];
        /**
          * An instance of a esri/Map object to display in the view.
         */
        "map": ArcGISWebMap;
        /**
          * Indication whether the view is being navigated (for example when panning).
         */
        "navigating": boolean;
        /**
          * Options to configure the navigation behavior of the View.
         */
        "navigation": ArcGISMapView["navigation"];
        /**
          * Opens the popup at the given location with content defined either explicitly with content or driven from the PopupTemplate of input features.
         */
        "openPopup": (options?: Record<string, any>) => Promise<any>;
        /**
          * Use the padding property to make the center, and extent, etc. work off a subsection of the full view. This is particularly useful when layering UI elements or semi-transparent content on top of portions of the view.
         */
        "padding": ArcGISMapView["padding"];
        /**
          * A Popup object that displays general content or attributes from layers in the map.
         */
        "popup": ArcGISMapView["popup"];
        /**
          * Controls whether the popup opens when users click on the view.
         */
        "popupEnabled": boolean;
        /**
          * When `true`, this property indicates whether the view successfully satisfied all dependencies, signaling that the following conditions are met.
         */
        "ready": boolean;
        /**
          * Defines which anchor stays still while resizing the browser window. The default, `center`, ensures the view's center point remains constantly visible as the window size changes. The other options allow  the respective portion of the view to remain visible when the window's size is changed.
         */
        "resizeAlign": ArcGISMapView["resizeAlign"];
        /**
          * Represents the current value of one pixel in the unit of the view's spatialReference. The value of resolution is calculated by dividing the view's extent width by its width.
         */
        "resolution": ArcGISMapView["resolution"];
        /**
          * The clockwise rotation of due north in relation to the top of the view in degrees. The view may be rotated by directly setting the rotation or by using the following mouse event: `Right-click + Drag`. Map rotation may be disabled by setting the `rotationEnabled` property in [constraints](#constraints) to `false`. See the code snippet below for an example of this.
         */
        "rotation": number;
        /**
          * Represents the map scale at the center of the view. Setting the scale immediately changes the view. For animating the view, see this component's goTo() method.
         */
        "scale": number;
        /**
          * The spatial reference of the view. This indicates the projected or geographic coordinate system used to locate geographic features in the map.
         */
        "spatialReference": ArcGISMapView["spatialReference"];
        /**
          * Indication whether the view is animating, being navigated with or resizing.
         */
        "stationary": boolean;
        /**
          * Indicates if the view is visible on the page.
         */
        "suspended": boolean;
        /**
          * Create a screenshot of the current view.
         */
        "takeScreenshot": (options?: Record<string, any>) => Promise<__esri.Screenshot>;
        /**
          * This property specifies the base colors used by some widgets and components to render graphics and labels.
         */
        "theme": ArcGISMapView["theme"];
        /**
          * The view's time extent. Time-aware layers display their temporal data that falls within the view's time extent. Setting the view's time extent is similar to setting the spatial extent because once the time extent is set, the view updates automatically to conform to the change.
         */
        "timeExtent": ArcGISMapView["timeExtent"];
        /**
          * Defines the time zone of the view. The time zone property determines how dates and times are represented to the user, but the underlying data is unchanged.
         */
        "timeZone": ArcGISMapView["timeZone"];
        /**
          * toMap() function as a property.
         */
        "toMap": ArcGISMapView["toMap"];
        /**
          * toScreen() function as a property.
         */
        "toScreen": ArcGISMapView["toScreen"];
        /**
          * Call this method to clear any fatal errors resulting from a lost WebGL context.
         */
        "tryFatalErrorRecovery": () => Promise<void>;
        /**
          * Indicates whether the view is being updated by additional data requests to the network, or by processing received data.
         */
        "updating": boolean;
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView;
        /**
          * Represents the current view as a Viewpoint or point of observation on the view. Setting the viewpoint immediately changes the current view. For animating the view, see this component's goTo() method.
         */
        "viewpoint": ArcGISMapView["viewpoint"];
        /**
          * Gets the LayerView created on the view for the given layer.
         */
        "whenLayerView": (layer: __esri.Layer) => Promise<__esri.LayerView>;
        /**
          * Represents the level of detail (LOD) at the center of the view. A zoom level (or scale) is a number that defines how large or small the contents of a map appear in a map view. Zoom level is a number usually between 0 (global view) and 23 (very detailed view) and is used as a shorthand for predetermined scale values. A value of -1 means the view has no LODs. When setting the zoom value, the MapView converts it to the corresponding scale, or interpolates it if the zoom is a fractional number. MapView can display maps with different projections at a full range of scales, and so use the scale property on this component rather than zoom level.  Setting the zoom immediately changes the current view. For animating the view, see this component's goTo() method. Setting this property in conjunction with `center` is a convenient way to set the initial extent of the view.
         */
        "zoom": number;
    }
    interface ArcgisMeasurement {
        "activeComponent": MeasurementWidget["activeWidget"];
        "activeTool": MeasurementWidget["activeTool"];
        "areaUnit": MeasurementWidget["areaUnit"];
        "clear": () => Promise<void>;
        "icon": MeasurementWidget["icon"];
        "linearUnit": MeasurementWidget["linearUnit"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "startMeasurement": () => Promise<void>;
        "view": ArcGISMapView | ArcGISSceneView;
        "widget": MeasurementWidget;
    }
    interface ArcgisNavigationToggle {
        "layout": NavigationToggleWidget["layout"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "toggle": () => Promise<void>;
        /**
          * Internal view of the component.
         */
        "view": ArcGISSceneView;
        /**
          * Internal widget of the component.
         */
        "widget": NavigationToggleWidget;
    }
    interface ArcgisPlacement {
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "view": ArcGISMapView | ArcGISSceneView;
    }
    interface ArcgisPrint {
        "allowedFormats": PrintWidget["allowedFormats"];
        "allowedLayouts": PrintWidget["allowedLayouts"];
        "exportedLinks": PrintWidget["exportedLinks"];
        "extraParameters": PrintWidget["extraParameters"];
        "icon": PrintWidget["icon"];
        "includeDefaultTemplates": boolean;
        "portal": PrintWidget["portal"];
        "position": string;
        "printServiceUrl": PrintWidget["printServiceUrl"];
        "referenceElement": ArcgisReferenceElement | string;
        "templateCustomTextElements": PrintWidget["templateCustomTextElements"];
        "templateOptions": PrintWidget["templateOptions"];
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView;
        /**
          * Internal widget of the component.
         */
        "widget": PrintWidget;
    }
    interface ArcgisScaleBar {
        "barStyle": ScaleBarWidget["style"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "unit": ScaleBarWidget["unit"];
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView;
        /**
          * Internal widget of the component.
         */
        "widget": ScaleBarWidget;
    }
    interface ArcgisScaleRangeSlider {
        "disabled": boolean;
        "layer": ScaleRangeSliderWidget["layer"];
        "maxScale": ScaleRangeSliderWidget["maxScale"];
        "maxScaleLimit": ScaleRangeSliderWidget["maxScaleLimit"];
        "minScale": ScaleRangeSliderWidget["minScale"];
        "minScaleLimit": ScaleRangeSliderWidget["minScaleLimit"];
        "mode": ScaleRangeSliderWidget["mode"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "region": ScaleRangeSliderWidget["region"];
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        "visibleElementsPreview": boolean;
        "visibleElementsScaleMenusMaxScaleMenu": boolean;
        "visibleElementsScaleMenusMinScaleMenu": boolean;
        /**
          * Internal widget of the component.
         */
        "widget": ScaleRangeSliderWidget;
    }
    interface ArcgisScene {
        "allLayerViews": ArcGISSceneView["allLayerViews"];
        "alphaCompositingEnabled": boolean;
        "analyses": ArcGISSceneView["analyses"];
        "basemap": __esri.Basemap | string;
        "basemapView": ArcGISSceneView["basemapView"];
        "camera": ArcGISSceneView["camera"];
        "center": ArcGISSceneView["center"] | number[] | string;
        "clippingArea": ArcGISSceneView["clippingArea"];
        "closePopup": () => Promise<void>;
        "constraints": ArcGISSceneView["constraints"];
        "destroy": () => Promise<void>;
        "destroyDisabled": boolean;
        "environment": ArcGISSceneView["environment"];
        "extent": ArcGISSceneView["extent"];
        "fatalError": ArcGISSceneView["fatalError"];
        "floors": ArcGISSceneView["floors"];
        "gamepad": __esri.GamepadSettings;
        "goTo": (target: __esri.GoToTarget3D, options?: __esri.GoToOptions3D) => Promise<any>;
        "graphics": ArcGISSceneView["graphics"];
        "ground": ArcGISWebScene["ground"];
        "groundView": ArcGISSceneView["groundView"];
        "highlightOptions": ArcGISSceneView["highlightOptions"];
        "hitTest": (screenPoint: __esri.ScreenPoint, options?: Record<string, any>) => Promise<__esri.HitTestResult>;
        "interacting": boolean;
        "itemId": string;
        "layerViews": ArcGISSceneView["layerViews"];
        "magnifier": ArcGISSceneView["magnifier"];
        "map": ArcGISWebScene;
        "navigating": boolean;
        "navigation": ArcGISSceneView["navigation"];
        "openPopup": (options?: Record<string, any>) => Promise<any>;
        "padding": ArcGISSceneView["padding"];
        "performanceInfo": ArcGISSceneView["performanceInfo"];
        "popup": ArcGISSceneView["popup"];
        "popupEnabled": boolean;
        "qualityProfile": ArcGISSceneView["qualityProfile"];
        "ready": boolean;
        "resolution": ArcGISSceneView["resolution"];
        "scale": number;
        "spatialReference": ArcGISSceneView["spatialReference"];
        "stationary": boolean;
        "suspended": boolean;
        "takeScreenshot": (options?: Record<string, any>) => Promise<__esri.Screenshot>;
        "theme": ArcGISSceneView["theme"];
        "timeExtent": ArcGISSceneView["timeExtent"];
        "toMap": ArcGISSceneView["toMap"];
        "toScreen": ArcGISSceneView["toScreen"];
        "tryFatalErrorRecovery": () => Promise<void>;
        "updating": boolean;
        /**
          * Internal view of the component.
         */
        "view": ArcGISSceneView;
        "viewingMode": ArcGISSceneView["viewingMode"];
        "viewpoint": ArcGISSceneView["viewpoint"];
        "whenAnalysisView": (analysis: __esri.AreaMeasurementAnalysis | __esri.DimensionAnalysis | __esri.DirectLineMeasurementAnalysis | __esri.LineOfSightAnalysis | __esri.SliceAnalysis) => Promise<__esri.AreaMeasurementAnalysisView3D | __esri.DimensionAnalysisView | __esri.DirectLineMeasurementAnalysisView3D | __esri.LineOfSightAnalysisView3D | __esri.SliceAnalysisView3D>;
        "whenLayerView": (layer: __esri.Layer) => Promise<__esri.LayerView>;
        "zoom": number;
    }
    interface ArcgisSearch {
        "activeMenu": SearchWidget["activeMenu"];
        "activeSource": SearchWidget["activeSource"];
        "activeSourceIndex": number;
        "allPlaceholder": string;
        "allSources": SearchWidget["allSources"];
        "autoSelect": boolean;
        "blurSearch": () => Promise<void>;
        "clearSearch": () => Promise<void>;
        "defaultSources": SearchWidget["defaultSources"];
        "disabled": boolean;
        "focusSearch": () => Promise<void>;
        "icon": SearchWidget["icon"];
        "includeDefaultSources": boolean;
        "locationEnabled": boolean;
        "maxResults": number;
        "maxSuggestions": number;
        "minSuggestCharacters": number;
        "popupEnabled": boolean;
        "popupTemplate": SearchWidget["popupTemplate"];
        "portal": SearchWidget["portal"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "resultGraphic": SearchWidget["resultGraphic"];
        "resultGraphicEnabled": boolean;
        "results": SearchWidget["results"];
        "search": (term: __esri.Geometry | __esri.SuggestResult | number[][] | string) => Promise<__esri.SearchResponse>;
        "searchAllEnabled": boolean;
        "searchTerm": SearchWidget["searchTerm"];
        "selectedResult": SearchWidget["selectedResult"];
        "sources": SearchWidget["sources"];
        "suggest": (term: string) => Promise<__esri.SuggestResponse>;
        "suggestions": SearchWidget["suggestions"];
        "suggestionsEnabled": boolean;
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        /**
          * Internal widget of the component.
         */
        "widget": SearchWidget;
    }
    interface ArcgisShadowCast {
        "discreteOptions": ShadowCastWidget["viewModel"]["discreteOptions"];
        "durationOptions": ShadowCastWidget["viewModel"]["durationOptions"];
        "endTimeOfDay": number;
        "getDuration": (point: __esri.Point) => Promise<number>;
        "icon": ShadowCastWidget["icon"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "start": () => Promise<void>;
        "startTimeOfDay": number;
        "stop": () => Promise<void>;
        "thresholdOptions": ShadowCastWidget["viewModel"]["thresholdOptions"];
        "utcOffset": number;
        /**
          * Internal view of the component.
         */
        "view": ArcGISSceneView;
        "visibleElementsColorPicker": boolean;
        "visibleElementsDatePicker": boolean;
        "visibleElementsTimeRangeSlider": boolean;
        "visibleElementsTimezone": boolean;
        "visibleElementsTooltip": boolean;
        "visibleElementsVisualizationOptions": boolean;
        "visualizationType": ShadowCastWidget["viewModel"]["visualizationType"];
        /**
          * Internal widget of the component.
         */
        "widget": ShadowCastWidget;
    }
    interface ArcgisSketch {
        "activeTool": SketchWidget["activeTool"];
        "availableCreateTools": SketchWidget["availableCreateTools"];
        "cancel": () => Promise<void>;
        "complete": () => Promise<void>;
        "create": (tool: "circle" | "point" | "polygon" | "polyline" | "rectangle", createOptions?: __esri.SketchViewModelCreateCreateOptions) => Promise<void>;
        "createGraphic": SketchWidget["createGraphic"];
        "creationMode": SketchWidget["creationMode"];
        "defaultCreateOptions": SketchWidget["defaultCreateOptions"];
        "defaultUpdateOptions": SketchWidget["defaultUpdateOptions"];
        "delete": () => Promise<void>;
        "duplicate": () => Promise<void>;
        "icon": SketchWidget["icon"];
        "labelOptions": SketchWidget["labelOptions"];
        "layer": SketchWidget["layer"];
        "layout": SketchWidget["layout"];
        "pointSymbol": SketchWidget["viewModel"]["pointSymbol"];
        "polygonSymbol": SketchWidget["viewModel"]["polygonSymbol"];
        "polylineSymbol": SketchWidget["viewModel"]["polylineSymbol"];
        "position": string;
        "redo": () => Promise<void>;
        "referenceElement": ArcgisReferenceElement | string;
        "snappingOptions": SketchWidget["snappingOptions"];
        "tooltipOptions": SketchWidget["tooltipOptions"];
        "undo": () => Promise<void>;
        "update": (graphic: __esri.Graphic | __esri.Graphic[], updateOptions?: __esri.SketchViewModelUpdateUpdateOptions) => Promise<void>;
        "updateGraphics": SketchWidget["updateGraphics"];
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        "visibleElementsCreateToolsCircle": boolean;
        "visibleElementsCreateToolsPoint": boolean;
        "visibleElementsCreateToolsPolygon": boolean;
        "visibleElementsCreateToolsPolyline": boolean;
        "visibleElementsCreateToolsRectangle": boolean;
        "visibleElementsDuplicateButton": boolean;
        "visibleElementsLabelsToggle": boolean;
        "visibleElementsSelectionToolsLasso": boolean;
        "visibleElementsSelectionToolsRectangle": boolean;
        "visibleElementsSettingsMenu": boolean;
        "visibleElementsSnappingControls": boolean;
        "visibleElementsSnappingControlsElementsEnabledToggle": boolean;
        "visibleElementsSnappingControlsElementsFeatureEnabledToggle": boolean;
        "visibleElementsSnappingControlsElementsHeader": boolean;
        "visibleElementsSnappingControlsElementsLayerList": boolean;
        "visibleElementsSnappingControlsElementsSelfEnabledToggle": boolean;
        "visibleElementsTooltipsToggle": boolean;
        "visibleElementsUndoRedoMenu": boolean;
        /**
          * Internal widget of the component.
         */
        "widget": SketchWidget;
    }
    interface ArcgisSlice {
        "analysis": SliceWidget["analysis"];
        "clear": () => Promise<void>;
        "excludeGroundSurface": boolean;
        "excludedLayers": SliceWidget["viewModel"]["excludedLayers"];
        "icon": SliceWidget["icon"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "shape": SliceWidget["viewModel"]["shape"];
        "start": () => Promise<void>;
        "tiltEnabled": boolean;
        /**
          * Internal view of the component.
         */
        "view": ArcGISSceneView;
        /**
          * Internal widget of the component.
         */
        "widget": SliceWidget;
    }
    interface ArcgisSlider {
        "draggableSegmentsEnabled": SliderWidget["draggableSegmentsEnabled"];
        "effectiveMax": SliderWidget["effectiveMax"];
        "effectiveMin": SliderWidget["effectiveMin"];
        "effectiveSegmentElements": SliderWidget["effectiveSegmentElements"];
        "expandable": boolean;
        "labelElements": SliderWidget["labelElements"];
        "labelInputsEnabled": SliderWidget["labelInputsEnabled"];
        "labels": SliderWidget["labels"];
        "layout": SliderWidget["layout"];
        "max": SliderWidget["max"];
        "maxLabelElement": SliderWidget["maxLabelElement"];
        "min": SliderWidget["min"];
        "minLabelElement": SliderWidget["minLabelElement"];
        "position": string;
        "precision": SliderWidget["precision"];
        "rangeLabelInputsEnabled": SliderWidget["rangeLabelInputsEnabled"];
        "referenceElement": ArcgisReferenceElement | string;
        "segmentElements": SliderWidget["segmentElements"];
        "snapOnClickEnabled": SliderWidget["snapOnClickEnabled"];
        "steps": SliderWidget["steps"] | string;
        "syncedSegmentsEnabled": SliderWidget["syncedSegmentsEnabled"];
        "thumbElements": SliderWidget["thumbElements"];
        "thumbsConstrained": SliderWidget["thumbsConstrained"];
        "tickConfigs": SliderWidget["tickConfigs"];
        "tickElements": SliderWidget["tickElements"];
        "trackElement": SliderWidget["trackElement"];
        "values": SliderWidget["values"] | string;
        "widget": SliderWidget;
    }
    interface ArcgisSwipe {
        "direction": SwipeWidget["direction"];
        "dragLabel": SwipeWidget["dragLabel"];
        "leadingLayers": SwipeWidget["leadingLayers"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "swipePosition": SwipeWidget["position"];
        "trailingLayers": SwipeWidget["trailingLayers"];
        "view": ArcGISMapView;
        "widget": SwipeWidget;
    }
    interface ArcgisTableList {
        "collapsed": boolean;
        "dragEnabled": boolean;
        "filterPlaceholder": string;
        "filterText": string;
        "icon": TableListWidget["icon"];
        "listItemCreatedFunction": TableListWidget["listItemCreatedFunction"];
        "minDragEnabledItems": number;
        "minFilterItems": number;
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "selectedItems": TableListWidget["selectedItems"];
        "selectionMode": TableListWidget["selectionMode"];
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        "visibleElementsCloseButton": boolean;
        "visibleElementsCollapseButton": boolean;
        "visibleElementsErrors": boolean;
        "visibleElementsFilter": boolean;
        "visibleElementsFlow": boolean;
        "visibleElementsHeading": boolean;
        "visibleElementsStatusIndicators": boolean;
        "visibleElementsTemporaryTableIndicators": boolean;
        /**
          * Internal widget of the component.
         */
        "widget": TableListWidget;
    }
    interface ArcgisTimeSlider {
        "actions": TimeSliderWidget["actions"];
        "disabled": boolean;
        "effectiveStops": TimeSliderWidget["effectiveStops"];
        "fullTimeExtent": TimeSliderWidget["fullTimeExtent"];
        "layout": TimeSliderWidget["layout"];
        "loop": boolean;
        "mode": TimeSliderWidget["mode"];
        "next": () => Promise<void>;
        "play": () => Promise<void>;
        "playRate": number;
        "position": string;
        "previous": () => Promise<void>;
        "referenceElement": ArcgisReferenceElement | string;
        "stop": () => Promise<void>;
        "stops": TimeSliderWidget["stops"];
        "tickConfigs": TimeSliderWidget["tickConfigs"];
        "timeExtent": TimeSliderWidget["timeExtent"];
        "timeVisible": boolean;
        "timeZone": TimeSliderWidget["timeZone"];
        "updateWebDocument": (webmap: __esri.WebMap) => Promise<void>;
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        /**
          * Internal widget of the component.
         */
        "widget": TimeSliderWidget;
    }
    interface ArcgisTrack {
        "error": TrackWidget["viewModel"]["error"];
        "geolocationOptions": TrackWidget["geolocationOptions"];
        "goToLocationEnabled": boolean;
        "graphic": TrackWidget["graphic"];
        "icon": TrackWidget["icon"];
        "position": string;
        "positionFilterFunction": TrackWidget["viewModel"]["positionFilterFunction"];
        "referenceElement": ArcgisReferenceElement | string;
        "rotationEnabled": boolean;
        "scale": TrackWidget["scale"];
        "start": () => Promise<void>;
        "state": TrackWidget["viewModel"]["state"];
        "stop": () => Promise<void>;
        "tracking": boolean;
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        /**
          * Internal widget of the component.
         */
        "widget": TrackWidget;
    }
    interface ArcgisUtilityNetworkAssociations {
        "autoRefreshAssociations": boolean;
        "connectivityAssociationsLineSymbol": UtilityNetworkAssociationsWidget["connectivityAssociationsLineSymbol"];
        "includeConnectivityAssociations": boolean;
        "includeStructuralAttachmentAssociations": boolean;
        "maxAllowableAssociations": number;
        "maxAllowableAssociationsSliderMax": UtilityNetworkAssociationsWidget["maxAllowableAssociationsSliderMax"];
        "maxAllowableAssociationsSliderMin": UtilityNetworkAssociationsWidget["maxAllowableAssociationsSliderMin"];
        "maxAllowableAssociationsSliderStep": UtilityNetworkAssociationsWidget["maxAllowableAssociationsSliderStep"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "showArrowsConnectivity": boolean;
        "showArrowsStructuralAttachment": boolean;
        "showAssociationsEnabled": boolean;
        "structuralAttachmentAssociationsLineSymbol": UtilityNetworkAssociationsWidget["structuralAttachmentAssociationsLineSymbol"];
        "utilityNetwork": UtilityNetworkAssociationsWidget["utilityNetwork"];
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView;
        "visibleElementsConnectivityAssociationsSettingsArrowsToggle": boolean;
        "visibleElementsConnectivityAssociationsSettingsCapSelect": boolean;
        "visibleElementsConnectivityAssociationsSettingsColorPicker": boolean;
        "visibleElementsConnectivityAssociationsSettingsStylePicker": boolean;
        "visibleElementsConnectivityAssociationsSettingsWidthInput": boolean;
        "visibleElementsMaxAllowableAssociationsSlider": boolean;
        "visibleElementsStructuralAttachmentAssociationsSettingsArrowsToggle": boolean;
        "visibleElementsStructuralAttachmentAssociationsSettingsCapSelect": boolean;
        "visibleElementsStructuralAttachmentAssociationsSettingsStylePicker": boolean;
        "visibleElementsStructuralAttachmentAssociationsSettingsWidthInput": boolean;
        /**
          * Internal widget of the component.
         */
        "widget": UtilityNetworkAssociationsWidget;
    }
    interface ArcgisUtilityNetworkTrace {
        "checkCanTrace": () => Promise<void>;
        "confirmReset": () => Promise<void>;
        "defaultGraphicColor": UtilityNetworkTraceWidget["defaultGraphicColor"];
        "disabled": boolean;
        "enableResultArea": boolean;
        "flags": UtilityNetworkTraceWidget["flags"];
        "gdbVersion": string;
        "inputSettings": UtilityNetworkTraceWidget["inputSettings"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "resultAreaProperties": UtilityNetworkTraceWidget["resultAreaProperties"];
        "selectOnComplete": boolean;
        "selectedTraces": UtilityNetworkTraceWidget["selectedTraces"];
        "showGraphicsOnComplete": boolean;
        "showSelectionAttributes": boolean;
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView;
        /**
          * Internal widget of the component.
         */
        "widget": UtilityNetworkTraceWidget;
    }
    interface ArcgisUtilityNetworkValidateTopology {
        "extentToValidate": UtilityNetworkValidateTopologyWidget["extentToValidate"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        "utilityNetwork": UtilityNetworkValidateTopologyWidget["utilityNetwork"];
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView;
        /**
          * Internal widget of the component.
         */
        "widget": UtilityNetworkValidateTopologyWidget;
    }
    interface ArcgisValuePicker {
        "canNext": ValuePickerWidget["canNext"];
        "canPlay": ValuePickerWidget["canPlay"];
        "canPrevious": ValuePickerWidget["canPrevious"];
        "caption": ValuePickerWidget["caption"];
        "component": ValuePickerWidget["component"];
        "layout": ValuePickerWidget["layout"];
        "loop": ValuePickerWidget["loop"];
        "next": () => Promise<void>;
        "pause": () => Promise<void>;
        "play": () => Promise<void>;
        "playRate": ValuePickerWidget["playRate"];
        "position": string;
        "previous": () => Promise<void>;
        "referenceElement": ArcgisReferenceElement | string;
        "values": ValuePickerWidget["values"];
        "view": ArcGISMapView | ArcGISSceneView;
        "visibleElements": ValuePickerWidget["visibleElements"];
        "widget": ValuePickerWidget;
    }
    interface ArcgisVersionManagement {
        "label": string;
        "position": string;
        "view": ArcGISMapView;
    }
    interface ArcgisVersionManagementServiceItem {
        "flowElement": HTMLCalciteFlowElement;
        "heading": string;
        "serviceUrl": string;
        "strings": VersionManagementStrings;
        "viewModel": __esri.VersionManagementViewModel;
    }
    interface ArcgisVersionManagementVersionItem {
        "hasAdvEditingUte": boolean;
        "isVersioningApiAvailable": boolean;
        "strings": VersionManagementStrings;
        "versionInfo": __esri.VersionInfo;
    }
    interface ArcgisVersionManagementVersionList {
        "heading": string;
        "serviceName": string;
        "serviceUrl": string;
        "strings": VersionManagementStrings;
        "userHasAdvancedEditingUserTypeExtension": boolean;
        "versionInfos": __esri.VersionInfo[];
        "viewModel": __esri.VersionManagementViewModel;
    }
    interface ArcgisVersionManagementVersionProperties {
        "flowElement": HTMLCalciteFlowElement;
        "serviceUrl": string;
        "strings": VersionManagementStrings;
        "versionInfo": __esri.VersionInfo | undefined;
        "viewModel": __esri.VersionManagementViewModel;
    }
    interface ArcgisWeather {
        "icon": WeatherWidget["icon"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        /**
          * Internal view of the component.
         */
        "view": ArcGISSceneView;
        "visibleElementsHeader": boolean;
        /**
          * Internal widget of the component.
         */
        "widget": WeatherWidget;
    }
    interface ArcgisZoom {
        "icon": ZoomWidget["icon"];
        "layout": ZoomWidget["layout"];
        "position": string;
        "referenceElement": ArcgisReferenceElement | string;
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView | ArcGISSceneView;
        /**
          * Internal widget of the component.
         */
        "widget": ZoomWidget;
        "zoomIn": () => Promise<void>;
        "zoomOut": () => Promise<void>;
    }
}
export interface ArcgisAreaMeasurement2dCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisAreaMeasurement2dElement;
}
export interface ArcgisAreaMeasurement3dCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisAreaMeasurement3dElement;
}
export interface ArcgisAttachmentsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisAttachmentsElement;
}
export interface ArcgisBasemapGalleryCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisBasemapGalleryElement;
}
export interface ArcgisBasemapLayerListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisBasemapLayerListElement;
}
export interface ArcgisBasemapToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisBasemapToggleElement;
}
export interface ArcgisBookmarksCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisBookmarksElement;
}
export interface ArcgisBuildingExplorerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisBuildingExplorerElement;
}
export interface ArcgisCompassCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisCompassElement;
}
export interface ArcgisCoordinateConversionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisCoordinateConversionElement;
}
export interface ArcgisDaylightCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisDaylightElement;
}
export interface ArcgisDirectionalPadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisDirectionalPadElement;
}
export interface ArcgisDirectionsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisDirectionsElement;
}
export interface ArcgisDirectlineMeasurement3dCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisDirectlineMeasurement3dElement;
}
export interface ArcgisDistanceMeasurement2dCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisDistanceMeasurement2dElement;
}
export interface ArcgisEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisEditorElement;
}
export interface ArcgisElevationProfileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisElevationProfileElement;
}
export interface ArcgisExpandCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisExpandElement;
}
export interface ArcgisFeatureCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisFeatureElement;
}
export interface ArcgisFeatureFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisFeatureFormElement;
}
export interface ArcgisFeatureTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisFeatureTableElement;
}
export interface ArcgisFeatureTemplatesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisFeatureTemplatesElement;
}
export interface ArcgisFeaturesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisFeaturesElement;
}
export interface ArcgisFloorFilterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisFloorFilterElement;
}
export interface ArcgisFullscreenCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisFullscreenElement;
}
export interface ArcgisHistogramCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisHistogramElement;
}
export interface ArcgisHistogramRangeSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisHistogramRangeSliderElement;
}
export interface ArcgisHomeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisHomeElement;
}
export interface ArcgisLayerListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisLayerListElement;
}
export interface ArcgisLegendCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisLegendElement;
}
export interface ArcgisLineOfSightCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisLineOfSightElement;
}
export interface ArcgisLocateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisLocateElement;
}
export interface ArcgisMapCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisMapElement;
}
export interface ArcgisMeasurementCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisMeasurementElement;
}
export interface ArcgisNavigationToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisNavigationToggleElement;
}
export interface ArcgisPlacementCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisPlacementElement;
}
export interface ArcgisPrintCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisPrintElement;
}
export interface ArcgisScaleBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisScaleBarElement;
}
export interface ArcgisScaleRangeSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisScaleRangeSliderElement;
}
export interface ArcgisSceneCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisSceneElement;
}
export interface ArcgisSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisSearchElement;
}
export interface ArcgisShadowCastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisShadowCastElement;
}
export interface ArcgisSketchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisSketchElement;
}
export interface ArcgisSliceCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisSliceElement;
}
export interface ArcgisSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisSliderElement;
}
export interface ArcgisSwipeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisSwipeElement;
}
export interface ArcgisTableListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisTableListElement;
}
export interface ArcgisTimeSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisTimeSliderElement;
}
export interface ArcgisTrackCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisTrackElement;
}
export interface ArcgisUtilityNetworkAssociationsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisUtilityNetworkAssociationsElement;
}
export interface ArcgisUtilityNetworkTraceCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisUtilityNetworkTraceElement;
}
export interface ArcgisUtilityNetworkValidateTopologyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisUtilityNetworkValidateTopologyElement;
}
export interface ArcgisValuePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisValuePickerElement;
}
export interface ArcgisVersionManagementServiceItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisVersionManagementServiceItemElement;
}
export interface ArcgisVersionManagementVersionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisVersionManagementVersionItemElement;
}
export interface ArcgisVersionManagementVersionListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisVersionManagementVersionListElement;
}
export interface ArcgisVersionManagementVersionPropertiesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisVersionManagementVersionPropertiesElement;
}
export interface ArcgisWeatherCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisWeatherElement;
}
export interface ArcgisZoomCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisZoomElement;
}
declare global {
    interface HTMLArcgisAreaMeasurement2dElementEventMap {
        "arcgisAreaMeasurement2dReady": void;
    }
    interface HTMLArcgisAreaMeasurement2dElement extends Components.ArcgisAreaMeasurement2d, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisAreaMeasurement2dElementEventMap>(type: K, listener: (this: HTMLArcgisAreaMeasurement2dElement, ev: ArcgisAreaMeasurement2dCustomEvent<HTMLArcgisAreaMeasurement2dElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisAreaMeasurement2dElementEventMap>(type: K, listener: (this: HTMLArcgisAreaMeasurement2dElement, ev: ArcgisAreaMeasurement2dCustomEvent<HTMLArcgisAreaMeasurement2dElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisAreaMeasurement2dElement: {
        prototype: HTMLArcgisAreaMeasurement2dElement;
        new (): HTMLArcgisAreaMeasurement2dElement;
    };
    interface HTMLArcgisAreaMeasurement3dElementEventMap {
        "arcgisAreaMeasurement3dReady": void;
        "arcgisPropertyChange": {
    name: string;
  };
    }
    interface HTMLArcgisAreaMeasurement3dElement extends Components.ArcgisAreaMeasurement3d, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisAreaMeasurement3dElementEventMap>(type: K, listener: (this: HTMLArcgisAreaMeasurement3dElement, ev: ArcgisAreaMeasurement3dCustomEvent<HTMLArcgisAreaMeasurement3dElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisAreaMeasurement3dElementEventMap>(type: K, listener: (this: HTMLArcgisAreaMeasurement3dElement, ev: ArcgisAreaMeasurement3dCustomEvent<HTMLArcgisAreaMeasurement3dElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisAreaMeasurement3dElement: {
        prototype: HTMLArcgisAreaMeasurement3dElement;
        new (): HTMLArcgisAreaMeasurement3dElement;
    };
    interface HTMLArcgisAttachmentsElementEventMap {
        "widgetReady": { widget: __esri.Attachments };
    }
    interface HTMLArcgisAttachmentsElement extends Components.ArcgisAttachments, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisAttachmentsElementEventMap>(type: K, listener: (this: HTMLArcgisAttachmentsElement, ev: ArcgisAttachmentsCustomEvent<HTMLArcgisAttachmentsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisAttachmentsElementEventMap>(type: K, listener: (this: HTMLArcgisAttachmentsElement, ev: ArcgisAttachmentsCustomEvent<HTMLArcgisAttachmentsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisAttachmentsElement: {
        prototype: HTMLArcgisAttachmentsElement;
        new (): HTMLArcgisAttachmentsElement;
    };
    interface HTMLArcgisBasemapGalleryElementEventMap {
        "arcgisBasemapGalleryReady": void;
        "arcgisPropertyChange": {
    name: string;
  };
    }
    interface HTMLArcgisBasemapGalleryElement extends Components.ArcgisBasemapGallery, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisBasemapGalleryElementEventMap>(type: K, listener: (this: HTMLArcgisBasemapGalleryElement, ev: ArcgisBasemapGalleryCustomEvent<HTMLArcgisBasemapGalleryElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisBasemapGalleryElementEventMap>(type: K, listener: (this: HTMLArcgisBasemapGalleryElement, ev: ArcgisBasemapGalleryCustomEvent<HTMLArcgisBasemapGalleryElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisBasemapGalleryElement: {
        prototype: HTMLArcgisBasemapGalleryElement;
        new (): HTMLArcgisBasemapGalleryElement;
    };
    interface HTMLArcgisBasemapLayerListElementEventMap {
        "arcgisBasemapLayerListReady": void;
        "basemapLayerListTriggerAction": __esri.BasemapLayerListTriggerActionEvent;
    }
    interface HTMLArcgisBasemapLayerListElement extends Components.ArcgisBasemapLayerList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisBasemapLayerListElementEventMap>(type: K, listener: (this: HTMLArcgisBasemapLayerListElement, ev: ArcgisBasemapLayerListCustomEvent<HTMLArcgisBasemapLayerListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisBasemapLayerListElementEventMap>(type: K, listener: (this: HTMLArcgisBasemapLayerListElement, ev: ArcgisBasemapLayerListCustomEvent<HTMLArcgisBasemapLayerListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisBasemapLayerListElement: {
        prototype: HTMLArcgisBasemapLayerListElement;
        new (): HTMLArcgisBasemapLayerListElement;
    };
    interface HTMLArcgisBasemapToggleElementEventMap {
        "arcgisBasemapToggleReady": void;
        "arcgisPropertyChange": { name: string };
    }
    interface HTMLArcgisBasemapToggleElement extends Components.ArcgisBasemapToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisBasemapToggleElementEventMap>(type: K, listener: (this: HTMLArcgisBasemapToggleElement, ev: ArcgisBasemapToggleCustomEvent<HTMLArcgisBasemapToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisBasemapToggleElementEventMap>(type: K, listener: (this: HTMLArcgisBasemapToggleElement, ev: ArcgisBasemapToggleCustomEvent<HTMLArcgisBasemapToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisBasemapToggleElement: {
        prototype: HTMLArcgisBasemapToggleElement;
        new (): HTMLArcgisBasemapToggleElement;
    };
    interface HTMLArcgisBookmarksElementEventMap {
        "arcgisBookmarksReady": void;
        "bookmarkEdit": __esri.BookmarksBookmarkEditEvent;
        "bookmarkSelect": __esri.BookmarksBookmarkSelectEvent;
    }
    interface HTMLArcgisBookmarksElement extends Components.ArcgisBookmarks, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisBookmarksElementEventMap>(type: K, listener: (this: HTMLArcgisBookmarksElement, ev: ArcgisBookmarksCustomEvent<HTMLArcgisBookmarksElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisBookmarksElementEventMap>(type: K, listener: (this: HTMLArcgisBookmarksElement, ev: ArcgisBookmarksCustomEvent<HTMLArcgisBookmarksElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisBookmarksElement: {
        prototype: HTMLArcgisBookmarksElement;
        new (): HTMLArcgisBookmarksElement;
    };
    interface HTMLArcgisBuildingExplorerElementEventMap {
        "arcgisBuildingExplorerReady": void;
        "arcgisPropertyChange": {
    name: string;
  };
    }
    interface HTMLArcgisBuildingExplorerElement extends Components.ArcgisBuildingExplorer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisBuildingExplorerElementEventMap>(type: K, listener: (this: HTMLArcgisBuildingExplorerElement, ev: ArcgisBuildingExplorerCustomEvent<HTMLArcgisBuildingExplorerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisBuildingExplorerElementEventMap>(type: K, listener: (this: HTMLArcgisBuildingExplorerElement, ev: ArcgisBuildingExplorerCustomEvent<HTMLArcgisBuildingExplorerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisBuildingExplorerElement: {
        prototype: HTMLArcgisBuildingExplorerElement;
        new (): HTMLArcgisBuildingExplorerElement;
    };
    interface HTMLArcgisCompassElementEventMap {
        "arcgisCompassReady": void;
        "arcgisPropertyChange": {
    name: string;
  };
    }
    interface HTMLArcgisCompassElement extends Components.ArcgisCompass, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisCompassElementEventMap>(type: K, listener: (this: HTMLArcgisCompassElement, ev: ArcgisCompassCustomEvent<HTMLArcgisCompassElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisCompassElementEventMap>(type: K, listener: (this: HTMLArcgisCompassElement, ev: ArcgisCompassCustomEvent<HTMLArcgisCompassElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisCompassElement: {
        prototype: HTMLArcgisCompassElement;
        new (): HTMLArcgisCompassElement;
    };
    interface HTMLArcgisCoordinateConversionElementEventMap {
        "arcgisCoordinateConversionReady": void;
        "arcgisPropertyChange": { name: string };
    }
    interface HTMLArcgisCoordinateConversionElement extends Components.ArcgisCoordinateConversion, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisCoordinateConversionElementEventMap>(type: K, listener: (this: HTMLArcgisCoordinateConversionElement, ev: ArcgisCoordinateConversionCustomEvent<HTMLArcgisCoordinateConversionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisCoordinateConversionElementEventMap>(type: K, listener: (this: HTMLArcgisCoordinateConversionElement, ev: ArcgisCoordinateConversionCustomEvent<HTMLArcgisCoordinateConversionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisCoordinateConversionElement: {
        prototype: HTMLArcgisCoordinateConversionElement;
        new (): HTMLArcgisCoordinateConversionElement;
    };
    interface HTMLArcgisDaylightElementEventMap {
        "arcgisDaylightReady": void;
    }
    interface HTMLArcgisDaylightElement extends Components.ArcgisDaylight, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisDaylightElementEventMap>(type: K, listener: (this: HTMLArcgisDaylightElement, ev: ArcgisDaylightCustomEvent<HTMLArcgisDaylightElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisDaylightElementEventMap>(type: K, listener: (this: HTMLArcgisDaylightElement, ev: ArcgisDaylightCustomEvent<HTMLArcgisDaylightElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisDaylightElement: {
        prototype: HTMLArcgisDaylightElement;
        new (): HTMLArcgisDaylightElement;
    };
    interface HTMLArcgisDirectionalPadElementEventMap {
        "arcgisDirectionalPadReady": void;
    }
    interface HTMLArcgisDirectionalPadElement extends Components.ArcgisDirectionalPad, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisDirectionalPadElementEventMap>(type: K, listener: (this: HTMLArcgisDirectionalPadElement, ev: ArcgisDirectionalPadCustomEvent<HTMLArcgisDirectionalPadElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisDirectionalPadElementEventMap>(type: K, listener: (this: HTMLArcgisDirectionalPadElement, ev: ArcgisDirectionalPadCustomEvent<HTMLArcgisDirectionalPadElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisDirectionalPadElement: {
        prototype: HTMLArcgisDirectionalPadElement;
        new (): HTMLArcgisDirectionalPadElement;
    };
    interface HTMLArcgisDirectionsElementEventMap {
        "arcgisDirectionsReady": void;
        "arcgisPropertyChange": {
    name: string;
  };
    }
    interface HTMLArcgisDirectionsElement extends Components.ArcgisDirections, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisDirectionsElementEventMap>(type: K, listener: (this: HTMLArcgisDirectionsElement, ev: ArcgisDirectionsCustomEvent<HTMLArcgisDirectionsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisDirectionsElementEventMap>(type: K, listener: (this: HTMLArcgisDirectionsElement, ev: ArcgisDirectionsCustomEvent<HTMLArcgisDirectionsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisDirectionsElement: {
        prototype: HTMLArcgisDirectionsElement;
        new (): HTMLArcgisDirectionsElement;
    };
    interface HTMLArcgisDirectlineMeasurement3dElementEventMap {
        "arcgisDirectLineMeasurement3dReady": void;
        "arcgisPropertyChange": {
    name: string;
  };
    }
    interface HTMLArcgisDirectlineMeasurement3dElement extends Components.ArcgisDirectlineMeasurement3d, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisDirectlineMeasurement3dElementEventMap>(type: K, listener: (this: HTMLArcgisDirectlineMeasurement3dElement, ev: ArcgisDirectlineMeasurement3dCustomEvent<HTMLArcgisDirectlineMeasurement3dElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisDirectlineMeasurement3dElementEventMap>(type: K, listener: (this: HTMLArcgisDirectlineMeasurement3dElement, ev: ArcgisDirectlineMeasurement3dCustomEvent<HTMLArcgisDirectlineMeasurement3dElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisDirectlineMeasurement3dElement: {
        prototype: HTMLArcgisDirectlineMeasurement3dElement;
        new (): HTMLArcgisDirectlineMeasurement3dElement;
    };
    interface HTMLArcgisDistanceMeasurement2dElementEventMap {
        "arcgisDistanceMeasurement2dReady": void;
    }
    interface HTMLArcgisDistanceMeasurement2dElement extends Components.ArcgisDistanceMeasurement2d, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisDistanceMeasurement2dElementEventMap>(type: K, listener: (this: HTMLArcgisDistanceMeasurement2dElement, ev: ArcgisDistanceMeasurement2dCustomEvent<HTMLArcgisDistanceMeasurement2dElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisDistanceMeasurement2dElementEventMap>(type: K, listener: (this: HTMLArcgisDistanceMeasurement2dElement, ev: ArcgisDistanceMeasurement2dCustomEvent<HTMLArcgisDistanceMeasurement2dElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisDistanceMeasurement2dElement: {
        prototype: HTMLArcgisDistanceMeasurement2dElement;
        new (): HTMLArcgisDistanceMeasurement2dElement;
    };
    interface HTMLArcgisEditorElementEventMap {
        "arcgisEditorReady": void;
        "arcgisPropertyChange": {
    name: string;
  };
    }
    interface HTMLArcgisEditorElement extends Components.ArcgisEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisEditorElementEventMap>(type: K, listener: (this: HTMLArcgisEditorElement, ev: ArcgisEditorCustomEvent<HTMLArcgisEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisEditorElementEventMap>(type: K, listener: (this: HTMLArcgisEditorElement, ev: ArcgisEditorCustomEvent<HTMLArcgisEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisEditorElement: {
        prototype: HTMLArcgisEditorElement;
        new (): HTMLArcgisEditorElement;
    };
    interface HTMLArcgisElevationProfileElementEventMap {
        "arcgisElevationProfileReady": void;
        "arcgisPropertyChange": {
    name: string;
  };
    }
    interface HTMLArcgisElevationProfileElement extends Components.ArcgisElevationProfile, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisElevationProfileElementEventMap>(type: K, listener: (this: HTMLArcgisElevationProfileElement, ev: ArcgisElevationProfileCustomEvent<HTMLArcgisElevationProfileElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisElevationProfileElementEventMap>(type: K, listener: (this: HTMLArcgisElevationProfileElement, ev: ArcgisElevationProfileCustomEvent<HTMLArcgisElevationProfileElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisElevationProfileElement: {
        prototype: HTMLArcgisElevationProfileElement;
        new (): HTMLArcgisElevationProfileElement;
    };
    interface HTMLArcgisExpandElementEventMap {
        "arcgisExpandReady": void;
    }
    interface HTMLArcgisExpandElement extends Components.ArcgisExpand, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisExpandElementEventMap>(type: K, listener: (this: HTMLArcgisExpandElement, ev: ArcgisExpandCustomEvent<HTMLArcgisExpandElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisExpandElementEventMap>(type: K, listener: (this: HTMLArcgisExpandElement, ev: ArcgisExpandCustomEvent<HTMLArcgisExpandElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisExpandElement: {
        prototype: HTMLArcgisExpandElement;
        new (): HTMLArcgisExpandElement;
    };
    interface HTMLArcgisFeatureElementEventMap {
        "arcgisFeatureReady": void;
    }
    interface HTMLArcgisFeatureElement extends Components.ArcgisFeature, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisFeatureElementEventMap>(type: K, listener: (this: HTMLArcgisFeatureElement, ev: ArcgisFeatureCustomEvent<HTMLArcgisFeatureElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisFeatureElementEventMap>(type: K, listener: (this: HTMLArcgisFeatureElement, ev: ArcgisFeatureCustomEvent<HTMLArcgisFeatureElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisFeatureElement: {
        prototype: HTMLArcgisFeatureElement;
        new (): HTMLArcgisFeatureElement;
    };
    interface HTMLArcgisFeatureFormElementEventMap {
        "widgetReady": { widget: __esri.FeatureForm };
        "featureFormSubmit": __esri.FeatureFormSubmitEvent;
        "featureFormValueChange": __esri.FeatureFormValueChangeEvent;
    }
    interface HTMLArcgisFeatureFormElement extends Components.ArcgisFeatureForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisFeatureFormElementEventMap>(type: K, listener: (this: HTMLArcgisFeatureFormElement, ev: ArcgisFeatureFormCustomEvent<HTMLArcgisFeatureFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisFeatureFormElementEventMap>(type: K, listener: (this: HTMLArcgisFeatureFormElement, ev: ArcgisFeatureFormCustomEvent<HTMLArcgisFeatureFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisFeatureFormElement: {
        prototype: HTMLArcgisFeatureFormElement;
        new (): HTMLArcgisFeatureFormElement;
    };
    interface HTMLArcgisFeatureTableElementEventMap {
        "arcgisFeatureTableReady": void;
        "featureTableSelectionChange": __esri.CollectionChangeEvent<number>;
    }
    interface HTMLArcgisFeatureTableElement extends Components.ArcgisFeatureTable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisFeatureTableElementEventMap>(type: K, listener: (this: HTMLArcgisFeatureTableElement, ev: ArcgisFeatureTableCustomEvent<HTMLArcgisFeatureTableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisFeatureTableElementEventMap>(type: K, listener: (this: HTMLArcgisFeatureTableElement, ev: ArcgisFeatureTableCustomEvent<HTMLArcgisFeatureTableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisFeatureTableElement: {
        prototype: HTMLArcgisFeatureTableElement;
        new (): HTMLArcgisFeatureTableElement;
    };
    interface HTMLArcgisFeatureTemplatesElementEventMap {
        "widgetReady": { widget: __esri.FeatureTemplates };
        "featureTemplatesSelect": __esri.FeatureTemplatesSelectEvent;
    }
    interface HTMLArcgisFeatureTemplatesElement extends Components.ArcgisFeatureTemplates, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisFeatureTemplatesElementEventMap>(type: K, listener: (this: HTMLArcgisFeatureTemplatesElement, ev: ArcgisFeatureTemplatesCustomEvent<HTMLArcgisFeatureTemplatesElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisFeatureTemplatesElementEventMap>(type: K, listener: (this: HTMLArcgisFeatureTemplatesElement, ev: ArcgisFeatureTemplatesCustomEvent<HTMLArcgisFeatureTemplatesElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisFeatureTemplatesElement: {
        prototype: HTMLArcgisFeatureTemplatesElement;
        new (): HTMLArcgisFeatureTemplatesElement;
    };
    interface HTMLArcgisFeaturesElementEventMap {
        "arcgisFeaturesReady": void;
        "arcgisPropertyChange": {
    name: string;
  };
        "featuresTriggerAction": __esri.FeaturesTriggerActionEvent;
    }
    interface HTMLArcgisFeaturesElement extends Components.ArcgisFeatures, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisFeaturesElementEventMap>(type: K, listener: (this: HTMLArcgisFeaturesElement, ev: ArcgisFeaturesCustomEvent<HTMLArcgisFeaturesElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisFeaturesElementEventMap>(type: K, listener: (this: HTMLArcgisFeaturesElement, ev: ArcgisFeaturesCustomEvent<HTMLArcgisFeaturesElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisFeaturesElement: {
        prototype: HTMLArcgisFeaturesElement;
        new (): HTMLArcgisFeaturesElement;
    };
    interface HTMLArcgisFloorFilterElementEventMap {
        "arcgisFloorFilterReady": void;
    }
    interface HTMLArcgisFloorFilterElement extends Components.ArcgisFloorFilter, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisFloorFilterElementEventMap>(type: K, listener: (this: HTMLArcgisFloorFilterElement, ev: ArcgisFloorFilterCustomEvent<HTMLArcgisFloorFilterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisFloorFilterElementEventMap>(type: K, listener: (this: HTMLArcgisFloorFilterElement, ev: ArcgisFloorFilterCustomEvent<HTMLArcgisFloorFilterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisFloorFilterElement: {
        prototype: HTMLArcgisFloorFilterElement;
        new (): HTMLArcgisFloorFilterElement;
    };
    interface HTMLArcgisFullscreenElementEventMap {
        "widgetReady": { widget: __esri.Fullscreen };
    }
    interface HTMLArcgisFullscreenElement extends Components.ArcgisFullscreen, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisFullscreenElementEventMap>(type: K, listener: (this: HTMLArcgisFullscreenElement, ev: ArcgisFullscreenCustomEvent<HTMLArcgisFullscreenElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisFullscreenElementEventMap>(type: K, listener: (this: HTMLArcgisFullscreenElement, ev: ArcgisFullscreenCustomEvent<HTMLArcgisFullscreenElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisFullscreenElement: {
        prototype: HTMLArcgisFullscreenElement;
        new (): HTMLArcgisFullscreenElement;
    };
    interface HTMLArcgisHistogramElementEventMap {
        "widgetReady": { widget: __esri.Histogram };
    }
    interface HTMLArcgisHistogramElement extends Components.ArcgisHistogram, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisHistogramElementEventMap>(type: K, listener: (this: HTMLArcgisHistogramElement, ev: ArcgisHistogramCustomEvent<HTMLArcgisHistogramElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisHistogramElementEventMap>(type: K, listener: (this: HTMLArcgisHistogramElement, ev: ArcgisHistogramCustomEvent<HTMLArcgisHistogramElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisHistogramElement: {
        prototype: HTMLArcgisHistogramElement;
        new (): HTMLArcgisHistogramElement;
    };
    interface HTMLArcgisHistogramRangeSliderElementEventMap {
        "widgetReady": { widget: __esri.HistogramRangeSlider };
    }
    interface HTMLArcgisHistogramRangeSliderElement extends Components.ArcgisHistogramRangeSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisHistogramRangeSliderElementEventMap>(type: K, listener: (this: HTMLArcgisHistogramRangeSliderElement, ev: ArcgisHistogramRangeSliderCustomEvent<HTMLArcgisHistogramRangeSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisHistogramRangeSliderElementEventMap>(type: K, listener: (this: HTMLArcgisHistogramRangeSliderElement, ev: ArcgisHistogramRangeSliderCustomEvent<HTMLArcgisHistogramRangeSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisHistogramRangeSliderElement: {
        prototype: HTMLArcgisHistogramRangeSliderElement;
        new (): HTMLArcgisHistogramRangeSliderElement;
    };
    interface HTMLArcgisHomeElementEventMap {
        "arcgisHomeReady": void;
    }
    interface HTMLArcgisHomeElement extends Components.ArcgisHome, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisHomeElementEventMap>(type: K, listener: (this: HTMLArcgisHomeElement, ev: ArcgisHomeCustomEvent<HTMLArcgisHomeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisHomeElementEventMap>(type: K, listener: (this: HTMLArcgisHomeElement, ev: ArcgisHomeCustomEvent<HTMLArcgisHomeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisHomeElement: {
        prototype: HTMLArcgisHomeElement;
        new (): HTMLArcgisHomeElement;
    };
    interface HTMLArcgisLayerListElementEventMap {
        "arcgisLayerListReady": void;
        "layerListTriggerAction": __esri.LayerListTriggerActionEvent;
    }
    interface HTMLArcgisLayerListElement extends Components.ArcgisLayerList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisLayerListElementEventMap>(type: K, listener: (this: HTMLArcgisLayerListElement, ev: ArcgisLayerListCustomEvent<HTMLArcgisLayerListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisLayerListElementEventMap>(type: K, listener: (this: HTMLArcgisLayerListElement, ev: ArcgisLayerListCustomEvent<HTMLArcgisLayerListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisLayerListElement: {
        prototype: HTMLArcgisLayerListElement;
        new (): HTMLArcgisLayerListElement;
    };
    interface HTMLArcgisLegendElementEventMap {
        "arcgisLegendReady": void;
    }
    interface HTMLArcgisLegendElement extends Components.ArcgisLegend, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisLegendElementEventMap>(type: K, listener: (this: HTMLArcgisLegendElement, ev: ArcgisLegendCustomEvent<HTMLArcgisLegendElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisLegendElementEventMap>(type: K, listener: (this: HTMLArcgisLegendElement, ev: ArcgisLegendCustomEvent<HTMLArcgisLegendElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisLegendElement: {
        prototype: HTMLArcgisLegendElement;
        new (): HTMLArcgisLegendElement;
    };
    interface HTMLArcgisLineOfSightElementEventMap {
        "arcgisLineOfSightReady": void;
        "arcgisPropertyChange": {
    name: string;
  };
    }
    interface HTMLArcgisLineOfSightElement extends Components.ArcgisLineOfSight, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisLineOfSightElementEventMap>(type: K, listener: (this: HTMLArcgisLineOfSightElement, ev: ArcgisLineOfSightCustomEvent<HTMLArcgisLineOfSightElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisLineOfSightElementEventMap>(type: K, listener: (this: HTMLArcgisLineOfSightElement, ev: ArcgisLineOfSightCustomEvent<HTMLArcgisLineOfSightElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisLineOfSightElement: {
        prototype: HTMLArcgisLineOfSightElement;
        new (): HTMLArcgisLineOfSightElement;
    };
    interface HTMLArcgisLocateElementEventMap {
        "arcgisLocateReady": void;
        "locateSuccess": __esri.LocateLocateEvent;
        "locateError": __esri.LocateLocateErrorEvent;
    }
    interface HTMLArcgisLocateElement extends Components.ArcgisLocate, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisLocateElementEventMap>(type: K, listener: (this: HTMLArcgisLocateElement, ev: ArcgisLocateCustomEvent<HTMLArcgisLocateElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisLocateElementEventMap>(type: K, listener: (this: HTMLArcgisLocateElement, ev: ArcgisLocateCustomEvent<HTMLArcgisLocateElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisLocateElement: {
        prototype: HTMLArcgisLocateElement;
        new (): HTMLArcgisLocateElement;
    };
    interface HTMLArcgisMapElementEventMap {
        "arcgisViewReadyChange": void;
        "arcgisViewChange": void;
        "arcgisViewClick": __esri.ViewClickEvent;
        "arcgisViewDoubleClick": __esri.ViewDoubleClickEvent;
        "arcgisViewDrag": __esri.ViewDragEvent;
        "arcgisViewHold": __esri.ViewHoldEvent;
        "arcgisViewImmediateClick": __esri.ViewImmediateClickEvent;
        "arcgisViewImmediateDoubleClick": __esri.ViewImmediateDoubleClickEvent;
        "arcgisViewKeyDown": __esri.ViewKeyDownEvent;
        "arcgisViewKeyUp": __esri.ViewKeyUpEvent;
        "arcgisViewLayerviewCreate": __esri.ViewLayerviewCreateEvent;
        "arcgisViewLayerviewCreateError": __esri.ViewLayerviewCreateErrorEvent;
        "arcgisViewLayerviewDestroy": __esri.ViewLayerviewDestroyEvent;
        "arcgisViewMouseWheel": __esri.ViewMouseWheelEvent;
        "arcgisViewPointerDown": __esri.ViewPointerDownEvent;
        "arcgisViewPointerEnter": __esri.ViewPointerEnterEvent;
        "arcgisViewPointerLeave": __esri.ViewPointerLeaveEvent;
        "arcgisViewPointerMove": __esri.ViewPointerMoveEvent;
        "arcgisViewPointerUp": __esri.ViewPointerUpEvent;
    }
    interface HTMLArcgisMapElement extends Components.ArcgisMap, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisMapElementEventMap>(type: K, listener: (this: HTMLArcgisMapElement, ev: ArcgisMapCustomEvent<HTMLArcgisMapElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisMapElementEventMap>(type: K, listener: (this: HTMLArcgisMapElement, ev: ArcgisMapCustomEvent<HTMLArcgisMapElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisMapElement: {
        prototype: HTMLArcgisMapElement;
        new (): HTMLArcgisMapElement;
    };
    interface HTMLArcgisMeasurementElementEventMap {
        "arcgisMeasurementReady": void;
    }
    interface HTMLArcgisMeasurementElement extends Components.ArcgisMeasurement, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisMeasurementElementEventMap>(type: K, listener: (this: HTMLArcgisMeasurementElement, ev: ArcgisMeasurementCustomEvent<HTMLArcgisMeasurementElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisMeasurementElementEventMap>(type: K, listener: (this: HTMLArcgisMeasurementElement, ev: ArcgisMeasurementCustomEvent<HTMLArcgisMeasurementElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisMeasurementElement: {
        prototype: HTMLArcgisMeasurementElement;
        new (): HTMLArcgisMeasurementElement;
    };
    interface HTMLArcgisNavigationToggleElementEventMap {
        "arcgisNavigationToggleReady": void;
    }
    interface HTMLArcgisNavigationToggleElement extends Components.ArcgisNavigationToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisNavigationToggleElementEventMap>(type: K, listener: (this: HTMLArcgisNavigationToggleElement, ev: ArcgisNavigationToggleCustomEvent<HTMLArcgisNavigationToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisNavigationToggleElementEventMap>(type: K, listener: (this: HTMLArcgisNavigationToggleElement, ev: ArcgisNavigationToggleCustomEvent<HTMLArcgisNavigationToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisNavigationToggleElement: {
        prototype: HTMLArcgisNavigationToggleElement;
        new (): HTMLArcgisNavigationToggleElement;
    };
    interface HTMLArcgisPlacementElementEventMap {
        "placementReady": { ready: boolean };
    }
    interface HTMLArcgisPlacementElement extends Components.ArcgisPlacement, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisPlacementElementEventMap>(type: K, listener: (this: HTMLArcgisPlacementElement, ev: ArcgisPlacementCustomEvent<HTMLArcgisPlacementElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisPlacementElementEventMap>(type: K, listener: (this: HTMLArcgisPlacementElement, ev: ArcgisPlacementCustomEvent<HTMLArcgisPlacementElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisPlacementElement: {
        prototype: HTMLArcgisPlacementElement;
        new (): HTMLArcgisPlacementElement;
    };
    interface HTMLArcgisPrintElementEventMap {
        "arcgisPrintReady": void;
        "printComplete": __esri.PrintCompleteEvent;
        "printSubmit": __esri.PrintSubmitEvent;
    }
    interface HTMLArcgisPrintElement extends Components.ArcgisPrint, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisPrintElementEventMap>(type: K, listener: (this: HTMLArcgisPrintElement, ev: ArcgisPrintCustomEvent<HTMLArcgisPrintElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisPrintElementEventMap>(type: K, listener: (this: HTMLArcgisPrintElement, ev: ArcgisPrintCustomEvent<HTMLArcgisPrintElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisPrintElement: {
        prototype: HTMLArcgisPrintElement;
        new (): HTMLArcgisPrintElement;
    };
    interface HTMLArcgisScaleBarElementEventMap {
        "arcgisScaleBarReady": void;
    }
    interface HTMLArcgisScaleBarElement extends Components.ArcgisScaleBar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisScaleBarElementEventMap>(type: K, listener: (this: HTMLArcgisScaleBarElement, ev: ArcgisScaleBarCustomEvent<HTMLArcgisScaleBarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisScaleBarElementEventMap>(type: K, listener: (this: HTMLArcgisScaleBarElement, ev: ArcgisScaleBarCustomEvent<HTMLArcgisScaleBarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisScaleBarElement: {
        prototype: HTMLArcgisScaleBarElement;
        new (): HTMLArcgisScaleBarElement;
    };
    interface HTMLArcgisScaleRangeSliderElementEventMap {
        "arcgisScaleRangeSliderReady": void;
    }
    interface HTMLArcgisScaleRangeSliderElement extends Components.ArcgisScaleRangeSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisScaleRangeSliderElementEventMap>(type: K, listener: (this: HTMLArcgisScaleRangeSliderElement, ev: ArcgisScaleRangeSliderCustomEvent<HTMLArcgisScaleRangeSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisScaleRangeSliderElementEventMap>(type: K, listener: (this: HTMLArcgisScaleRangeSliderElement, ev: ArcgisScaleRangeSliderCustomEvent<HTMLArcgisScaleRangeSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisScaleRangeSliderElement: {
        prototype: HTMLArcgisScaleRangeSliderElement;
        new (): HTMLArcgisScaleRangeSliderElement;
    };
    interface HTMLArcgisSceneElementEventMap {
        "arcgisViewReadyChange": void;
        "arcgisViewChange": void;
        "arcgisViewClick": __esri.ViewClickEvent;
        "arcgisViewDoubleClick": __esri.ViewDoubleClickEvent;
        "arcgisViewDrag": __esri.ViewDragEvent;
        "arcgisViewHold": __esri.ViewHoldEvent;
        "arcgisViewImmediateClick": __esri.ViewImmediateClickEvent;
        "arcgisViewImmediateDoubleClick": __esri.ViewImmediateDoubleClickEvent;
        "arcgisViewKeyDown": __esri.ViewKeyDownEvent;
        "arcgisViewKeyUp": __esri.ViewKeyUpEvent;
        "arcgisViewLayerviewCreate": __esri.ViewLayerviewCreateEvent;
        "arcgisViewLayerviewCreateError": __esri.ViewLayerviewCreateErrorEvent;
        "arcgisViewLayerviewDestroy": __esri.ViewLayerviewDestroyEvent;
        "arcgisViewMouseWheel": __esri.ViewMouseWheelEvent;
        "arcgisViewPointerDown": __esri.ViewPointerDownEvent;
        "arcgisViewPointerEnter": __esri.ViewPointerEnterEvent;
        "arcgisViewPointerLeave": __esri.ViewPointerLeaveEvent;
        "arcgisViewPointerMove": __esri.ViewPointerMoveEvent;
        "arcgisViewPointerUp": __esri.ViewPointerUpEvent;
    }
    interface HTMLArcgisSceneElement extends Components.ArcgisScene, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisSceneElementEventMap>(type: K, listener: (this: HTMLArcgisSceneElement, ev: ArcgisSceneCustomEvent<HTMLArcgisSceneElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisSceneElementEventMap>(type: K, listener: (this: HTMLArcgisSceneElement, ev: ArcgisSceneCustomEvent<HTMLArcgisSceneElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisSceneElement: {
        prototype: HTMLArcgisSceneElement;
        new (): HTMLArcgisSceneElement;
    };
    interface HTMLArcgisSearchElementEventMap {
        "arcgisSearchReady": void;
        "searchBlur": __esri.SearchSearchBlurEvent;
        "searchClear": __esri.SearchSearchClearEvent;
        "searchComplete": __esri.SearchSearchCompleteEvent;
        "searchFocus": __esri.SearchSearchFocusEvent;
        "searchStart": __esri.SearchSearchStartEvent;
        "searchSelectResult": __esri.SearchSelectResultEvent;
        "searchSuggestComplete": __esri.SearchSuggestCompleteEvent;
        "searchSuggestStart": __esri.SearchSuggestStartEvent;
    }
    interface HTMLArcgisSearchElement extends Components.ArcgisSearch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisSearchElementEventMap>(type: K, listener: (this: HTMLArcgisSearchElement, ev: ArcgisSearchCustomEvent<HTMLArcgisSearchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisSearchElementEventMap>(type: K, listener: (this: HTMLArcgisSearchElement, ev: ArcgisSearchCustomEvent<HTMLArcgisSearchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisSearchElement: {
        prototype: HTMLArcgisSearchElement;
        new (): HTMLArcgisSearchElement;
    };
    interface HTMLArcgisShadowCastElementEventMap {
        "arcgisShadowCastReady": void;
    }
    interface HTMLArcgisShadowCastElement extends Components.ArcgisShadowCast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisShadowCastElementEventMap>(type: K, listener: (this: HTMLArcgisShadowCastElement, ev: ArcgisShadowCastCustomEvent<HTMLArcgisShadowCastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisShadowCastElementEventMap>(type: K, listener: (this: HTMLArcgisShadowCastElement, ev: ArcgisShadowCastCustomEvent<HTMLArcgisShadowCastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisShadowCastElement: {
        prototype: HTMLArcgisShadowCastElement;
        new (): HTMLArcgisShadowCastElement;
    };
    interface HTMLArcgisSketchElementEventMap {
        "arcgisSketchReady": void;
        "sketchCreate": __esri.SketchCreateEvent;
        "sketchDelete": __esri.SketchDeleteEvent;
        "sketchRedo": __esri.SketchRedoEvent;
        "sketchUndo": __esri.SketchUndoEvent;
        "sketchUpdate": __esri.SketchUpdateEvent;
    }
    interface HTMLArcgisSketchElement extends Components.ArcgisSketch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisSketchElementEventMap>(type: K, listener: (this: HTMLArcgisSketchElement, ev: ArcgisSketchCustomEvent<HTMLArcgisSketchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisSketchElementEventMap>(type: K, listener: (this: HTMLArcgisSketchElement, ev: ArcgisSketchCustomEvent<HTMLArcgisSketchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisSketchElement: {
        prototype: HTMLArcgisSketchElement;
        new (): HTMLArcgisSketchElement;
    };
    interface HTMLArcgisSliceElementEventMap {
        "arcgisSliceReady": void;
        "arcgisPropertyChange": {
    name: string;
  };
    }
    interface HTMLArcgisSliceElement extends Components.ArcgisSlice, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisSliceElementEventMap>(type: K, listener: (this: HTMLArcgisSliceElement, ev: ArcgisSliceCustomEvent<HTMLArcgisSliceElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisSliceElementEventMap>(type: K, listener: (this: HTMLArcgisSliceElement, ev: ArcgisSliceCustomEvent<HTMLArcgisSliceElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisSliceElement: {
        prototype: HTMLArcgisSliceElement;
        new (): HTMLArcgisSliceElement;
    };
    interface HTMLArcgisSliderElementEventMap {
        "sliderMaxChange": __esri.SliderMaxChangeEvent;
        "sliderMaxClick": __esri.SliderMaxClickEvent;
        "sliderMinChange": __esri.SliderMinChangeEvent;
        "sliderMinClick": __esri.SliderMinClickEvent;
        "sliderSegmentClick": __esri.SliderSegmentClickEvent;
        "sliderSegmentDrag": __esri.SliderSegmentDragEvent;
        "sliderThumbChange": __esri.SliderThumbChangeEvent;
        "sliderThumbClick": __esri.SliderThumbClickEvent;
        "sliderThumbDrag": __esri.SliderThumbDragEvent;
        "sliderTickClick": __esri.SliderTickClickEvent;
        "sliderTrackClick": __esri.SliderTrackClickEvent;
        "widgetReady": { widget: __esri.Slider };
    }
    interface HTMLArcgisSliderElement extends Components.ArcgisSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisSliderElementEventMap>(type: K, listener: (this: HTMLArcgisSliderElement, ev: ArcgisSliderCustomEvent<HTMLArcgisSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisSliderElementEventMap>(type: K, listener: (this: HTMLArcgisSliderElement, ev: ArcgisSliderCustomEvent<HTMLArcgisSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisSliderElement: {
        prototype: HTMLArcgisSliderElement;
        new (): HTMLArcgisSliderElement;
    };
    interface HTMLArcgisSwipeElementEventMap {
        "widgetReady": { widget: __esri.Swipe };
    }
    interface HTMLArcgisSwipeElement extends Components.ArcgisSwipe, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisSwipeElementEventMap>(type: K, listener: (this: HTMLArcgisSwipeElement, ev: ArcgisSwipeCustomEvent<HTMLArcgisSwipeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisSwipeElementEventMap>(type: K, listener: (this: HTMLArcgisSwipeElement, ev: ArcgisSwipeCustomEvent<HTMLArcgisSwipeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisSwipeElement: {
        prototype: HTMLArcgisSwipeElement;
        new (): HTMLArcgisSwipeElement;
    };
    interface HTMLArcgisTableListElementEventMap {
        "arcgisTableListReady": void;
        "tableListTriggerAction": __esri.TableListTriggerActionEvent;
    }
    interface HTMLArcgisTableListElement extends Components.ArcgisTableList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisTableListElementEventMap>(type: K, listener: (this: HTMLArcgisTableListElement, ev: ArcgisTableListCustomEvent<HTMLArcgisTableListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisTableListElementEventMap>(type: K, listener: (this: HTMLArcgisTableListElement, ev: ArcgisTableListCustomEvent<HTMLArcgisTableListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisTableListElement: {
        prototype: HTMLArcgisTableListElement;
        new (): HTMLArcgisTableListElement;
    };
    interface HTMLArcgisTimeSliderElementEventMap {
        "arcgisTimeSliderReady": void;
        "arcgisPropertyChange": { name: string };
        "timeSliderTriggerAction": __esri.TimeSliderTriggerActionEvent;
    }
    interface HTMLArcgisTimeSliderElement extends Components.ArcgisTimeSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisTimeSliderElementEventMap>(type: K, listener: (this: HTMLArcgisTimeSliderElement, ev: ArcgisTimeSliderCustomEvent<HTMLArcgisTimeSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisTimeSliderElementEventMap>(type: K, listener: (this: HTMLArcgisTimeSliderElement, ev: ArcgisTimeSliderCustomEvent<HTMLArcgisTimeSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisTimeSliderElement: {
        prototype: HTMLArcgisTimeSliderElement;
        new (): HTMLArcgisTimeSliderElement;
    };
    interface HTMLArcgisTrackElementEventMap {
        "arcgisTrackReady": void;
        "trackComplete": __esri.TrackTrackEvent;
        "trackError": __esri.TrackTrackErrorEvent;
    }
    interface HTMLArcgisTrackElement extends Components.ArcgisTrack, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisTrackElementEventMap>(type: K, listener: (this: HTMLArcgisTrackElement, ev: ArcgisTrackCustomEvent<HTMLArcgisTrackElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisTrackElementEventMap>(type: K, listener: (this: HTMLArcgisTrackElement, ev: ArcgisTrackCustomEvent<HTMLArcgisTrackElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisTrackElement: {
        prototype: HTMLArcgisTrackElement;
        new (): HTMLArcgisTrackElement;
    };
    interface HTMLArcgisUtilityNetworkAssociationsElementEventMap {
        "arcgisUtilityNetworkAssociationsReady": void;
    }
    interface HTMLArcgisUtilityNetworkAssociationsElement extends Components.ArcgisUtilityNetworkAssociations, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisUtilityNetworkAssociationsElementEventMap>(type: K, listener: (this: HTMLArcgisUtilityNetworkAssociationsElement, ev: ArcgisUtilityNetworkAssociationsCustomEvent<HTMLArcgisUtilityNetworkAssociationsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisUtilityNetworkAssociationsElementEventMap>(type: K, listener: (this: HTMLArcgisUtilityNetworkAssociationsElement, ev: ArcgisUtilityNetworkAssociationsCustomEvent<HTMLArcgisUtilityNetworkAssociationsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisUtilityNetworkAssociationsElement: {
        prototype: HTMLArcgisUtilityNetworkAssociationsElement;
        new (): HTMLArcgisUtilityNetworkAssociationsElement;
    };
    interface HTMLArcgisUtilityNetworkTraceElementEventMap {
        "arcgisUtilityNetworkTraceReady": void;
        "utilityNetworkTraceAddFlag": __esri.UtilityNetworkTraceAddFlagEvent;
        "utilityNetworkTraceAddFlagComplete": __esri.UtilityNetworkTraceAddFlagCompleteEvent;
        "utilityNetworkTraceAddFlagError": __esri.UtilityNetworkTraceAddFlagErrorEvent;
        "utilityNetworkTraceAddResultArea": __esri.UtilityNetworkTraceAddResultAreaEvent;
        "utilityNetworkTraceRemoveResultArea": __esri.UtilityNetworkTraceRemoveResultAreaEvent;
    }
    interface HTMLArcgisUtilityNetworkTraceElement extends Components.ArcgisUtilityNetworkTrace, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisUtilityNetworkTraceElementEventMap>(type: K, listener: (this: HTMLArcgisUtilityNetworkTraceElement, ev: ArcgisUtilityNetworkTraceCustomEvent<HTMLArcgisUtilityNetworkTraceElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisUtilityNetworkTraceElementEventMap>(type: K, listener: (this: HTMLArcgisUtilityNetworkTraceElement, ev: ArcgisUtilityNetworkTraceCustomEvent<HTMLArcgisUtilityNetworkTraceElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisUtilityNetworkTraceElement: {
        prototype: HTMLArcgisUtilityNetworkTraceElement;
        new (): HTMLArcgisUtilityNetworkTraceElement;
    };
    interface HTMLArcgisUtilityNetworkValidateTopologyElementEventMap {
        "arcgisUtilityNetworkValidateTopologyReady": void;
    }
    interface HTMLArcgisUtilityNetworkValidateTopologyElement extends Components.ArcgisUtilityNetworkValidateTopology, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisUtilityNetworkValidateTopologyElementEventMap>(type: K, listener: (this: HTMLArcgisUtilityNetworkValidateTopologyElement, ev: ArcgisUtilityNetworkValidateTopologyCustomEvent<HTMLArcgisUtilityNetworkValidateTopologyElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisUtilityNetworkValidateTopologyElementEventMap>(type: K, listener: (this: HTMLArcgisUtilityNetworkValidateTopologyElement, ev: ArcgisUtilityNetworkValidateTopologyCustomEvent<HTMLArcgisUtilityNetworkValidateTopologyElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisUtilityNetworkValidateTopologyElement: {
        prototype: HTMLArcgisUtilityNetworkValidateTopologyElement;
        new (): HTMLArcgisUtilityNetworkValidateTopologyElement;
    };
    interface HTMLArcgisValuePickerElementEventMap {
        "arcgisValuePickerReady": void;
        "arcgisPropertyChange": {
    name: string;
  };
        "valuePickerAnimate": __esri.ValuePickerAnimateEvent;
        "valuePickerNext": __esri.ValuePickerNextEvent;
        "valuePickerPause": __esri.ValuePickerPauseEvent;
        "valuePickerPlay": __esri.ValuePickerPlayEvent;
        "valuePickerPrevious": __esri.ValuePickerPreviousEvent;
    }
    interface HTMLArcgisValuePickerElement extends Components.ArcgisValuePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisValuePickerElementEventMap>(type: K, listener: (this: HTMLArcgisValuePickerElement, ev: ArcgisValuePickerCustomEvent<HTMLArcgisValuePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisValuePickerElementEventMap>(type: K, listener: (this: HTMLArcgisValuePickerElement, ev: ArcgisValuePickerCustomEvent<HTMLArcgisValuePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisValuePickerElement: {
        prototype: HTMLArcgisValuePickerElement;
        new (): HTMLArcgisValuePickerElement;
    };
    interface HTMLArcgisVersionManagementElement extends Components.ArcgisVersionManagement, HTMLStencilElement {
    }
    var HTMLArcgisVersionManagementElement: {
        prototype: HTMLArcgisVersionManagementElement;
        new (): HTMLArcgisVersionManagementElement;
    };
    interface HTMLArcgisVersionManagementServiceItemElementEventMap {
        "versionItemActionClickedEventWithServiceUrl": {
    actionType: string;
    serviceUrl: string;
    versionInfo: __esri.VersionInfo;
  };
        "versionListActionClickedEvent": {
    actionType: string;
    serviceUrl: string;
  };
    }
    interface HTMLArcgisVersionManagementServiceItemElement extends Components.ArcgisVersionManagementServiceItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisVersionManagementServiceItemElementEventMap>(type: K, listener: (this: HTMLArcgisVersionManagementServiceItemElement, ev: ArcgisVersionManagementServiceItemCustomEvent<HTMLArcgisVersionManagementServiceItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisVersionManagementServiceItemElementEventMap>(type: K, listener: (this: HTMLArcgisVersionManagementServiceItemElement, ev: ArcgisVersionManagementServiceItemCustomEvent<HTMLArcgisVersionManagementServiceItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisVersionManagementServiceItemElement: {
        prototype: HTMLArcgisVersionManagementServiceItemElement;
        new (): HTMLArcgisVersionManagementServiceItemElement;
    };
    interface HTMLArcgisVersionManagementVersionItemElementEventMap {
        "versionItemActionClickedEvent": {
    actionType: string;
    versionInfo: __esri.VersionInfo;
  };
    }
    interface HTMLArcgisVersionManagementVersionItemElement extends Components.ArcgisVersionManagementVersionItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisVersionManagementVersionItemElementEventMap>(type: K, listener: (this: HTMLArcgisVersionManagementVersionItemElement, ev: ArcgisVersionManagementVersionItemCustomEvent<HTMLArcgisVersionManagementVersionItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisVersionManagementVersionItemElementEventMap>(type: K, listener: (this: HTMLArcgisVersionManagementVersionItemElement, ev: ArcgisVersionManagementVersionItemCustomEvent<HTMLArcgisVersionManagementVersionItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisVersionManagementVersionItemElement: {
        prototype: HTMLArcgisVersionManagementVersionItemElement;
        new (): HTMLArcgisVersionManagementVersionItemElement;
    };
    interface HTMLArcgisVersionManagementVersionListElementEventMap {
        "versionItemActionClickedEventWithServiceUrl": {
    actionType: string;
    serviceUrl: string;
    versionInfo: __esri.VersionInfo;
  };
        "versionListActionClickedEvent": {
    actionType: string;
    serviceUrl: string;
  };
    }
    interface HTMLArcgisVersionManagementVersionListElement extends Components.ArcgisVersionManagementVersionList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisVersionManagementVersionListElementEventMap>(type: K, listener: (this: HTMLArcgisVersionManagementVersionListElement, ev: ArcgisVersionManagementVersionListCustomEvent<HTMLArcgisVersionManagementVersionListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisVersionManagementVersionListElementEventMap>(type: K, listener: (this: HTMLArcgisVersionManagementVersionListElement, ev: ArcgisVersionManagementVersionListCustomEvent<HTMLArcgisVersionManagementVersionListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisVersionManagementVersionListElement: {
        prototype: HTMLArcgisVersionManagementVersionListElement;
        new (): HTMLArcgisVersionManagementVersionListElement;
    };
    interface HTMLArcgisVersionManagementVersionPropertiesElementEventMap {
        "versionPropertiesSaveClickedEvent": {
    serviceUrl: string;
    versionInfo: __esri.VersionInfo;
  };
    }
    interface HTMLArcgisVersionManagementVersionPropertiesElement extends Components.ArcgisVersionManagementVersionProperties, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisVersionManagementVersionPropertiesElementEventMap>(type: K, listener: (this: HTMLArcgisVersionManagementVersionPropertiesElement, ev: ArcgisVersionManagementVersionPropertiesCustomEvent<HTMLArcgisVersionManagementVersionPropertiesElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisVersionManagementVersionPropertiesElementEventMap>(type: K, listener: (this: HTMLArcgisVersionManagementVersionPropertiesElement, ev: ArcgisVersionManagementVersionPropertiesCustomEvent<HTMLArcgisVersionManagementVersionPropertiesElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisVersionManagementVersionPropertiesElement: {
        prototype: HTMLArcgisVersionManagementVersionPropertiesElement;
        new (): HTMLArcgisVersionManagementVersionPropertiesElement;
    };
    interface HTMLArcgisWeatherElementEventMap {
        "arcgisWeatherReady": void;
    }
    interface HTMLArcgisWeatherElement extends Components.ArcgisWeather, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisWeatherElementEventMap>(type: K, listener: (this: HTMLArcgisWeatherElement, ev: ArcgisWeatherCustomEvent<HTMLArcgisWeatherElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisWeatherElementEventMap>(type: K, listener: (this: HTMLArcgisWeatherElement, ev: ArcgisWeatherCustomEvent<HTMLArcgisWeatherElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisWeatherElement: {
        prototype: HTMLArcgisWeatherElement;
        new (): HTMLArcgisWeatherElement;
    };
    interface HTMLArcgisZoomElementEventMap {
        "arcgisZoomReady": void;
    }
    interface HTMLArcgisZoomElement extends Components.ArcgisZoom, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisZoomElementEventMap>(type: K, listener: (this: HTMLArcgisZoomElement, ev: ArcgisZoomCustomEvent<HTMLArcgisZoomElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisZoomElementEventMap>(type: K, listener: (this: HTMLArcgisZoomElement, ev: ArcgisZoomCustomEvent<HTMLArcgisZoomElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisZoomElement: {
        prototype: HTMLArcgisZoomElement;
        new (): HTMLArcgisZoomElement;
    };
    interface HTMLElementTagNameMap {
        "arcgis-area-measurement-2d": HTMLArcgisAreaMeasurement2dElement;
        "arcgis-area-measurement-3d": HTMLArcgisAreaMeasurement3dElement;
        "arcgis-attachments": HTMLArcgisAttachmentsElement;
        "arcgis-basemap-gallery": HTMLArcgisBasemapGalleryElement;
        "arcgis-basemap-layer-list": HTMLArcgisBasemapLayerListElement;
        "arcgis-basemap-toggle": HTMLArcgisBasemapToggleElement;
        "arcgis-bookmarks": HTMLArcgisBookmarksElement;
        "arcgis-building-explorer": HTMLArcgisBuildingExplorerElement;
        "arcgis-compass": HTMLArcgisCompassElement;
        "arcgis-coordinate-conversion": HTMLArcgisCoordinateConversionElement;
        "arcgis-daylight": HTMLArcgisDaylightElement;
        "arcgis-directional-pad": HTMLArcgisDirectionalPadElement;
        "arcgis-directions": HTMLArcgisDirectionsElement;
        "arcgis-directline-measurement-3d": HTMLArcgisDirectlineMeasurement3dElement;
        "arcgis-distance-measurement-2d": HTMLArcgisDistanceMeasurement2dElement;
        "arcgis-editor": HTMLArcgisEditorElement;
        "arcgis-elevation-profile": HTMLArcgisElevationProfileElement;
        "arcgis-expand": HTMLArcgisExpandElement;
        "arcgis-feature": HTMLArcgisFeatureElement;
        "arcgis-feature-form": HTMLArcgisFeatureFormElement;
        "arcgis-feature-table": HTMLArcgisFeatureTableElement;
        "arcgis-feature-templates": HTMLArcgisFeatureTemplatesElement;
        "arcgis-features": HTMLArcgisFeaturesElement;
        "arcgis-floor-filter": HTMLArcgisFloorFilterElement;
        "arcgis-fullscreen": HTMLArcgisFullscreenElement;
        "arcgis-histogram": HTMLArcgisHistogramElement;
        "arcgis-histogram-range-slider": HTMLArcgisHistogramRangeSliderElement;
        "arcgis-home": HTMLArcgisHomeElement;
        "arcgis-layer-list": HTMLArcgisLayerListElement;
        "arcgis-legend": HTMLArcgisLegendElement;
        "arcgis-line-of-sight": HTMLArcgisLineOfSightElement;
        "arcgis-locate": HTMLArcgisLocateElement;
        "arcgis-map": HTMLArcgisMapElement;
        "arcgis-measurement": HTMLArcgisMeasurementElement;
        "arcgis-navigation-toggle": HTMLArcgisNavigationToggleElement;
        "arcgis-placement": HTMLArcgisPlacementElement;
        "arcgis-print": HTMLArcgisPrintElement;
        "arcgis-scale-bar": HTMLArcgisScaleBarElement;
        "arcgis-scale-range-slider": HTMLArcgisScaleRangeSliderElement;
        "arcgis-scene": HTMLArcgisSceneElement;
        "arcgis-search": HTMLArcgisSearchElement;
        "arcgis-shadow-cast": HTMLArcgisShadowCastElement;
        "arcgis-sketch": HTMLArcgisSketchElement;
        "arcgis-slice": HTMLArcgisSliceElement;
        "arcgis-slider": HTMLArcgisSliderElement;
        "arcgis-swipe": HTMLArcgisSwipeElement;
        "arcgis-table-list": HTMLArcgisTableListElement;
        "arcgis-time-slider": HTMLArcgisTimeSliderElement;
        "arcgis-track": HTMLArcgisTrackElement;
        "arcgis-utility-network-associations": HTMLArcgisUtilityNetworkAssociationsElement;
        "arcgis-utility-network-trace": HTMLArcgisUtilityNetworkTraceElement;
        "arcgis-utility-network-validate-topology": HTMLArcgisUtilityNetworkValidateTopologyElement;
        "arcgis-value-picker": HTMLArcgisValuePickerElement;
        "arcgis-version-management": HTMLArcgisVersionManagementElement;
        "arcgis-version-management-service-item": HTMLArcgisVersionManagementServiceItemElement;
        "arcgis-version-management-version-item": HTMLArcgisVersionManagementVersionItemElement;
        "arcgis-version-management-version-list": HTMLArcgisVersionManagementVersionListElement;
        "arcgis-version-management-version-properties": HTMLArcgisVersionManagementVersionPropertiesElement;
        "arcgis-weather": HTMLArcgisWeatherElement;
        "arcgis-zoom": HTMLArcgisZoomElement;
    }
}
declare namespace LocalJSX {
    interface ArcgisAreaMeasurement2d {
        "icon"?: AreaMeasurement2dWidget["icon"];
        "onArcgisAreaMeasurement2dReady"?: (event: ArcgisAreaMeasurement2dCustomEvent<void>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "unit"?: AreaMeasurement2dWidget["unit"];
        "unitOptions"?: AreaMeasurement2dWidget["unitOptions"];
    }
    interface ArcgisAreaMeasurement3d {
        "analysis"?: AreaMeasurement3dWidget["analysis"];
        "icon"?: AreaMeasurement3dWidget["icon"];
        "onArcgisAreaMeasurement3dReady"?: (event: ArcgisAreaMeasurement3dCustomEvent<void>) => void;
        "onArcgisPropertyChange"?: (event: ArcgisAreaMeasurement3dCustomEvent<{
    name: string;
  }>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "unit"?: AreaMeasurement3dWidget["unit"];
        "unitOptions"?: AreaMeasurement3dWidget["unitOptions"];
    }
    interface ArcgisAttachments {
        "capabilities"?: AttachmentsWidget["capabilities"];
        "displayType"?: AttachmentsWidget["displayType"];
        "expandable"?: boolean;
        "graphic"?: ArcGISGraphic;
        "onWidgetReady"?: (event: ArcgisAttachmentsCustomEvent<{ widget: __esri.Attachments }>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "submitting"?: AttachmentsWidget["submitting"];
        "visibleElements"?: AttachmentsWidget["visibleElements"];
        "widget"?: AttachmentsWidget;
    }
    interface ArcgisBasemapGallery {
        "activeBasemap"?: BasemapGalleryWidget["activeBasemap"];
        "disabled"?: boolean;
        "icon"?: BasemapGalleryWidget["icon"];
        "onArcgisBasemapGalleryReady"?: (event: ArcgisBasemapGalleryCustomEvent<void>) => void;
        "onArcgisPropertyChange"?: (event: ArcgisBasemapGalleryCustomEvent<{
    name: string;
  }>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "source"?: BasemapGalleryWidget["source"];
    }
    interface ArcgisBasemapLayerList {
        "baseFilterText"?: string;
        "baseItems"?: BasemapLayerListWidget["baseItems"];
        "baseListItemCreatedFunction"?: BasemapLayerListWidget["baseListItemCreatedFunction"];
        "basemapTitle"?: string;
        "collapsed"?: boolean;
        "dragEnabled"?: boolean;
        "editingTitle"?: boolean;
        "filterPlaceholder"?: string;
        "icon"?: BasemapLayerListWidget["icon"];
        "minFilterItems"?: number;
        "onArcgisBasemapLayerListReady"?: (event: ArcgisBasemapLayerListCustomEvent<void>) => void;
        "onBasemapLayerListTriggerAction"?: (event: ArcgisBasemapLayerListCustomEvent<__esri.BasemapLayerListTriggerActionEvent>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "referenceFilterText"?: string;
        "referenceListItemCreatedFunction"?: BasemapLayerListWidget["referenceListItemCreatedFunction"];
        "selectedItems"?: BasemapLayerListWidget["selectedItems"];
        "selectionMode"?: BasemapLayerListWidget["selectionMode"];
        "visibilityAppearance"?: BasemapLayerListWidget["visibilityAppearance"];
        "visibleElementsBaseLayers"?: boolean;
        "visibleElementsCloseButton"?: boolean;
        "visibleElementsCollapseButton"?: boolean;
        "visibleElementsEditTitleButton"?: boolean;
        "visibleElementsErrors"?: boolean;
        "visibleElementsFilter"?: boolean;
        "visibleElementsFlow"?: boolean;
        "visibleElementsHeading"?: boolean;
        "visibleElementsReferenceLayers"?: boolean;
        "visibleElementsStatusIndicators"?: boolean;
        "visibleElementsTemporaryLayerIndicators"?: boolean;
    }
    interface ArcgisBasemapToggle {
        "activeBasemap"?: BasemapToggleWidget["activeBasemap"];
        "nextBasemap"?: BasemapToggleWidget["nextBasemap"] | string;
        "onArcgisBasemapToggleReady"?: (event: ArcgisBasemapToggleCustomEvent<void>) => void;
        "onArcgisPropertyChange"?: (event: ArcgisBasemapToggleCustomEvent<{ name: string }>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "visibleElementsTitle"?: boolean;
    }
    interface ArcgisBookmarks {
        "bookmarks"?: BookmarksWidget["bookmarks"];
        "defaultCreateOptions"?: BookmarksWidget["defaultCreateOptions"];
        "defaultEditOptions"?: BookmarksWidget["defaultEditOptions"];
        "disabled"?: boolean;
        "dragEnabled"?: boolean;
        "filterPlaceholder"?: string;
        "filterText"?: string;
        "icon"?: BookmarksWidget["icon"];
        "onArcgisBookmarksReady"?: (event: ArcgisBookmarksCustomEvent<void>) => void;
        "onBookmarkEdit"?: (event: ArcgisBookmarksCustomEvent<__esri.BookmarksBookmarkEditEvent>) => void;
        "onBookmarkSelect"?: (event: ArcgisBookmarksCustomEvent<__esri.BookmarksBookmarkSelectEvent>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "visibleElementsAddBookmarkButton"?: boolean;
        "visibleElementsCloseButton"?: boolean;
        "visibleElementsCollapseButton"?: boolean;
        "visibleElementsEditBookmarkButton"?: boolean;
        "visibleElementsFilter"?: boolean;
        "visibleElementsFlow"?: boolean;
        "visibleElementsHeading"?: boolean;
        "visibleElementsThumbnail"?: boolean;
        "visibleElementsTime"?: boolean;
    }
    interface ArcgisBuildingExplorer {
        "icon"?: BuildingExplorerWidget["icon"];
        "layers"?: BuildingExplorerWidget["layers"];
        "level"?: BuildingExplorerWidget["viewModel"]["level"];
        "onArcgisBuildingExplorerReady"?: (event: ArcgisBuildingExplorerCustomEvent<void>) => void;
        "onArcgisPropertyChange"?: (event: ArcgisBuildingExplorerCustomEvent<{
    name: string;
  }>) => void;
        "phase"?: BuildingExplorerWidget["viewModel"]["phase"];
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "state"?: BuildingExplorerWidget["viewModel"]["state"];
        "visibleElementsDisciplines"?: boolean;
        "visibleElementsLevels"?: boolean;
        "visibleElementsPhases"?: boolean;
    }
    interface ArcgisCompass {
        "icon"?: CompassWidget["icon"];
        "onArcgisCompassReady"?: (event: ArcgisCompassCustomEvent<void>) => void;
        "onArcgisPropertyChange"?: (event: ArcgisCompassCustomEvent<{
    name: string;
  }>) => void;
        "orientation"?: CompassOrientation;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "state"?: CompassWidget["viewModel"]["state"];
    }
    interface ArcgisCoordinateConversion {
        "conversions"?: CoordinateConversionWidget["conversions"];
        "currentLocation"?: CoordinateConversionWidget["currentLocation"];
        "formats"?: CoordinateConversionWidget["formats"];
        "icon"?: CoordinateConversionWidget["icon"];
        "locationSymbol"?: CoordinateConversionWidget["locationSymbol"];
        "mode"?: CoordinateConversionWidget["mode"];
        "multipleConversions"?: boolean;
        "onArcgisCoordinateConversionReady"?: (event: ArcgisCoordinateConversionCustomEvent<void>) => void;
        "onArcgisPropertyChange"?: (event: ArcgisCoordinateConversionCustomEvent<{ name: string }>) => void;
        "orientation"?: CoordinateConversionWidget["orientation"];
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "storageEnabled"?: boolean;
        "storageType"?: CoordinateConversionWidget["storageType"];
        "visibleElementsCaptureButton"?: boolean;
        "visibleElementsEditButton"?: boolean;
        "visibleElementsExpandButton"?: boolean;
        "visibleElementsSettingsButton"?: boolean;
    }
    interface ArcgisDaylight {
        "currentSeason"?: DaylightWidget["viewModel"]["currentSeason"];
        "dateOrSeason"?: DaylightWidget["dateOrSeason"];
        "dayPlaying"?: boolean;
        "icon"?: DaylightWidget["icon"];
        "onArcgisDaylightReady"?: (event: ArcgisDaylightCustomEvent<void>) => void;
        "playSpeedMultiplier"?: number;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "timeSliderSteps"?: DaylightWidget["timeSliderSteps"];
        "visibleElementsDatePicker"?: boolean;
        "visibleElementsHeader"?: boolean;
        "visibleElementsPlayButtons"?: boolean;
        "visibleElementsShadowsToggle"?: boolean;
        "visibleElementsSunLightingToggle"?: boolean;
        "visibleElementsTimezone"?: boolean;
        "yearPlaying"?: boolean;
    }
    interface ArcgisDirectionalPad {
        "icon"?: DirectionalPadWidget["icon"];
        "onArcgisDirectionalPadReady"?: (event: ArcgisDirectionalPadCustomEvent<void>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "visualScale"?: DirectionalPadWidget["visualScale"];
    }
    interface ArcgisDirections {
        "apiKey"?: string;
        "icon"?: DirectionsWidget["icon"];
        "lastRoute"?: DirectionsWidget["lastRoute"];
        "layer"?: DirectionsWidget["layer"];
        "maxStops"?: number;
        "onArcgisDirectionsReady"?: (event: ArcgisDirectionsCustomEvent<void>) => void;
        "onArcgisPropertyChange"?: (event: ArcgisDirectionsCustomEvent<{
    name: string;
  }>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "routeLayerItemId"?: string;
        "searchProperties"?: DirectionsWidget["searchProperties"];
        "unit"?: DirectionsWidget["unit"];
        "useDefaultRouteLayer"?: boolean;
        "visibleElementsLayerDetails"?: boolean;
        "visibleElementsSaveAsButton"?: boolean;
        "visibleElementsSaveButton"?: boolean;
    }
    interface ArcgisDirectlineMeasurement3d {
        "analysis"?: DirectLineMeasurement3dWidget["analysis"];
        "icon"?: DirectLineMeasurement3dWidget["icon"];
        "onArcgisDirectLineMeasurement3dReady"?: (event: ArcgisDirectlineMeasurement3dCustomEvent<void>) => void;
        "onArcgisPropertyChange"?: (event: ArcgisDirectlineMeasurement3dCustomEvent<{
    name: string;
  }>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "unit"?: DirectLineMeasurement3dWidget["unit"];
        "unitOptions"?: DirectLineMeasurement3dWidget["unitOptions"];
    }
    interface ArcgisDistanceMeasurement2d {
        "icon"?: DistanceMeasurement2dWidget["icon"];
        "onArcgisDistanceMeasurement2dReady"?: (event: ArcgisDistanceMeasurement2dCustomEvent<void>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "unit"?: DistanceMeasurement2dWidget["unit"];
        "unitOptions"?: DistanceMeasurement2dWidget["unitOptions"];
    }
    interface ArcgisEditor {
        "activeWorkflow"?: EditorWidget["activeWorkflow"];
        "allowedWorkflows"?: EditorWidget["allowedWorkflows"];
        "icon"?: EditorWidget["icon"];
        "labelOptions"?: EditorWidget["labelOptions"];
        "layerInfos"?: EditorWidget["layerInfos"];
        "onArcgisEditorReady"?: (event: ArcgisEditorCustomEvent<void>) => void;
        "onArcgisPropertyChange"?: (event: ArcgisEditorCustomEvent<{
    name: string;
  }>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "snappingOptions"?: EditorWidget["snappingOptions"];
        "supportingWidgetDefaults"?: EditorWidget["supportingWidgetDefaults"];
        "tooltipOptions"?: EditorWidget["tooltipOptions"];
        "visibleElementsCreateFeaturesSection"?: boolean;
        "visibleElementsEditFeaturesSection"?: boolean;
        "visibleElementsLabelsToggle"?: boolean;
        "visibleElementsSnappingControls"?: boolean;
        "visibleElementsSnappingControlsEnabledToggle"?: boolean;
        "visibleElementsSnappingControlsFeatureEnabledToggle"?: boolean;
        "visibleElementsSnappingControlsHeader"?: boolean;
        "visibleElementsSnappingControlsLayerList"?: boolean;
        "visibleElementsSnappingControlsSelfEnabledToggle"?: boolean;
        "visibleElementsTooltipsToggle"?: boolean;
    }
    interface ArcgisElevationProfile {
        "effectiveUnits"?: ElevationProfileWidget["viewModel"]["effectiveUnits"];
        "highlightEnabled"?: boolean;
        "hoveredChartPosition"?: number;
        "icon"?: ElevationProfileWidget["icon"];
        "input"?: ElevationProfileWidget["input"];
        "onArcgisElevationProfileReady"?: (event: ArcgisElevationProfileCustomEvent<void>) => void;
        "onArcgisPropertyChange"?: (event: ArcgisElevationProfileCustomEvent<{
    name: string;
  }>) => void;
        "position"?: string;
        "profiles"?: ElevationProfileWidget["profiles"];
        "progress"?: number;
        "referenceElement"?: ArcgisReferenceElement | string;
        "state"?: ElevationProfileWidget["viewModel"]["state"];
        "uniformChartScaling"?: boolean;
        "unit"?: ElevationProfileWidget["unit"];
        "unitOptions"?: ElevationProfileWidget["unitOptions"];
        "visibleElementsChart"?: boolean;
        "visibleElementsClearButton"?: boolean;
        "visibleElementsLegend"?: boolean;
        "visibleElementsSelectButton"?: boolean;
        "visibleElementsSettingsButton"?: boolean;
        "visibleElementsSketchButton"?: boolean;
        "visibleElementsUniformChartScalingToggle"?: boolean;
        "visibleElementsUnitSelector"?: boolean;
    }
    interface ArcgisExpand {
        "autoCollapse"?: boolean;
        "closeOnEsc"?: boolean;
        "collapseIcon"?: ExpandWidget["collapseIcon"];
        "collapseTooltip"?: ExpandWidget["collapseTooltip"];
        "expandIcon"?: ExpandWidget["expandIcon"];
        "expandTooltip"?: ExpandWidget["expandTooltip"];
        "expanded"?: boolean;
        "group"?: ExpandWidget["group"];
        "iconNumber"?: ExpandWidget["iconNumber"];
        "mode"?: ExpandWidget["mode"];
        "onArcgisExpandReady"?: (event: ArcgisExpandCustomEvent<void>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
    }
    interface ArcgisFeature {
        "defaultPopupTemplateEnabled"?: boolean;
        "graphic"?: FeatureWidget["graphic"];
        "location"?: __esri.Point;
        "map"?: FeatureWidget["map"];
        "onArcgisFeatureReady"?: (event: ArcgisFeatureCustomEvent<void>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "spatialReference"?: FeatureWidget["spatialReference"];
        "visibleElementsContentAttachments"?: boolean;
        "visibleElementsContentExpression"?: boolean;
        "visibleElementsContentFields"?: boolean;
        "visibleElementsContentMedia"?: boolean;
        "visibleElementsContentText"?: boolean;
        "visibleElementsLastEditInfo"?: boolean;
        "visibleElementsTitle"?: boolean;
    }
    interface ArcgisFeatureForm {
        "expandable"?: boolean;
        "feature"?: FeatureFormWidget["feature"];
        "formTemplate"?: FeatureFormWidget["formTemplate"];
        "groupDisplay"?: FeatureFormWidget["groupDisplay"];
        "layer"?: FeatureFormWidget["layer"];
        "onFeatureFormSubmit"?: (event: ArcgisFeatureFormCustomEvent<__esri.FeatureFormSubmitEvent>) => void;
        "onFeatureFormValueChange"?: (event: ArcgisFeatureFormCustomEvent<__esri.FeatureFormValueChangeEvent>) => void;
        "onWidgetReady"?: (event: ArcgisFeatureFormCustomEvent<{ widget: __esri.FeatureForm }>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "timeZone"?: FeatureFormWidget["timeZone"];
        "view"?: ArcGISMapView | ArcGISSceneView;
        "widget"?: FeatureFormWidget;
    }
    interface ArcgisFeatureTable {
        "activeFilters"?: FeatureTableWidget["activeFilters"];
        "activeSortOrders"?: FeatureTableWidget["activeSortOrders"];
        "attachmentsEnabled"?: boolean;
        "autoRefreshEnabled"?: boolean;
        "columnReorderingEnabled"?: boolean;
        "columns"?: FeatureTableWidget["columns"];
        "editingEnabled"?: boolean;
        "filterGeometry"?: FeatureTableWidget["filterGeometry"];
        "hiddenFields"?: boolean;
        "highlightEnabled"?: boolean;
        "highlightIds"?: FeatureTableWidget["highlightIds"];
        "itemId"?: string;
        "layer"?: FeatureTableWidget["layer"];
        "menu"?: FeatureTableWidget["menu"];
        "menuConfig"?: FeatureTableWidget["menuConfig"];
        "multiSortEnabled"?: boolean;
        "onArcgisFeatureTableReady"?: (event: ArcgisFeatureTableCustomEvent<void>) => void;
        "onFeatureTableSelectionChange"?: (event: ArcgisFeatureTableCustomEvent<__esri.CollectionChangeEvent<number>>) => void;
        "pageSize"?: number;
        "referenceElement"?: ArcgisReferenceElement | string;
        "returnGeometryEnabled"?: boolean;
        "state"?: FeatureTableWidget["state"];
        "tableTemplate"?: FeatureTableWidget["tableTemplate"];
        "timeZone"?: FeatureTableWidget["timeZone"];
        "url"?: string;
        "visibleElementsColumnMenus"?: boolean;
        "visibleElementsHeader"?: boolean;
        "visibleElementsMenu"?: boolean;
        "visibleElementsMenuItemsClearSelection"?: boolean;
        "visibleElementsMenuItemsDeleteSelection"?: boolean;
        "visibleElementsMenuItemsRefreshData"?: boolean;
        "visibleElementsMenuItemsSelectedRecordsShowAllToggle"?: boolean;
        "visibleElementsMenuItemsToggleColumns"?: boolean;
        "visibleElementsMenuItemsZoomToSelection"?: boolean;
        "visibleElementsSelectionColumn"?: boolean;
    }
    interface ArcgisFeatureTemplates {
        "enableListScroll"?: FeatureTemplatesWidget["enableListScroll"];
        "expandable"?: boolean;
        "filterFunction"?: FeatureTemplatesWidget["filterFunction"];
        "filterText"?: FeatureTemplatesWidget["filterText"];
        "groupBy"?: FeatureTemplatesWidget["groupBy"];
        "layers"?: FeatureTemplatesWidget["layers"];
        "onFeatureTemplatesSelect"?: (event: ArcgisFeatureTemplatesCustomEvent<__esri.FeatureTemplatesSelectEvent>) => void;
        "onWidgetReady"?: (event: ArcgisFeatureTemplatesCustomEvent<{ widget: __esri.FeatureTemplates }>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "selectionMode"?: FeatureTemplatesWidget["selectionMode"];
        "visibleElements"?: FeatureTemplatesWidget["visibleElements"];
        "widget"?: FeatureTemplatesWidget;
    }
    interface ArcgisFeatures {
        "collapsed"?: boolean;
        "content"?: FeaturesWidget["content"];
        "features"?: FeaturesWidget["features"];
        "featuresTitle"?: FeaturesWidget["title"];
        "icon"?: FeaturesWidget["icon"];
        "onArcgisFeaturesReady"?: (event: ArcgisFeaturesCustomEvent<void>) => void;
        "onArcgisPropertyChange"?: (event: ArcgisFeaturesCustomEvent<{
    name: string;
  }>) => void;
        "onFeaturesTriggerAction"?: (event: ArcgisFeaturesCustomEvent<__esri.FeaturesTriggerActionEvent>) => void;
        "position"?: string;
        "promises"?: FeaturesWidget["promises"];
        "referenceElement"?: ArcgisReferenceElement | string;
        "selectedFeature"?: FeaturesWidget["selectedFeature"];
        "selectedFeatureIndex"?: FeaturesWidget["selectedFeatureIndex"];
        "visibleElementsActionBar"?: boolean;
        "visibleElementsCloseButton"?: boolean;
        "visibleElementsCollapseButton"?: boolean;
        "visibleElementsFeatureNavigation"?: boolean;
        "visibleElementsHeading"?: boolean;
        "visibleElementsSpinner"?: boolean;
    }
    interface ArcgisFloorFilter {
        "facility"?: FloorFilterWidget["facility"];
        "level"?: FloorFilterWidget["level"];
        "longNames"?: boolean;
        "onArcgisFloorFilterReady"?: (event: ArcgisFloorFilterCustomEvent<void>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "site"?: FloorFilterWidget["site"];
    }
    interface ArcgisFullscreen {
        "element"?: FullscreenWidget["element"];
        "onWidgetReady"?: (event: ArcgisFullscreenCustomEvent<{ widget: __esri.Fullscreen }>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "view"?: ArcGISMapView | ArcGISSceneView;
        "widget"?: FullscreenWidget;
    }
    interface ArcgisHistogram {
        "average"?: HistogramWidget["average"];
        "barCreatedFunction"?: HistogramWidget["barCreatedFunction"];
        "bins"?: HistogramWidget["bins"];
        "dataLineCreatedFunction"?: HistogramWidget["dataLineCreatedFunction"];
        "dataLines"?: HistogramWidget["dataLines"];
        "expandable"?: boolean;
        "labelFormatFunction"?: HistogramWidget["labelFormatFunction"];
        "layout"?: HistogramWidget["layout"];
        "max"?: number;
        "min"?: number;
        "onWidgetReady"?: (event: ArcgisHistogramCustomEvent<{ widget: __esri.Histogram }>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "state"?: HistogramWidget["state"];
        "widget"?: HistogramWidget;
    }
    interface ArcgisHistogramRangeSlider {
        "average"?: HistogramRangeSliderWidget["average"];
        "barCreatedFunction"?: HistogramRangeSliderWidget["barCreatedFunction"];
        "bins"?: HistogramRangeSliderWidget["bins"];
        "dataLineCreatedFunction"?: HistogramRangeSliderWidget["dataLineCreatedFunction"];
        "dataLines"?: HistogramRangeSliderWidget["dataLines"];
        "excludedBarColor"?: HistogramRangeSliderWidget["excludedBarColor"];
        "expandable"?: boolean;
        "includedBarColor"?: HistogramRangeSliderWidget["includedBarColor"];
        "labelFormatFunction"?: HistogramRangeSliderWidget["labelFormatFunction"];
        "max"?: number;
        "min"?: number;
        "onWidgetReady"?: (event: ArcgisHistogramRangeSliderCustomEvent<{ widget: __esri.HistogramRangeSlider }>) => void;
        "position"?: string;
        "precision"?: HistogramRangeSliderWidget["precision"];
        "rangeType"?: HistogramRangeSliderWidget["rangeType"];
        "referenceElement"?: ArcgisReferenceElement | string;
        "standardDeviation"?: HistogramRangeSliderWidget["standardDeviation"];
        "standardDeviationCount"?: HistogramRangeSliderWidget["standardDeviationCount"];
        "values"?: HistogramRangeSliderWidget["values"];
        "widget"?: HistogramRangeSliderWidget;
    }
    interface ArcgisHome {
        "icon"?: HomeWidget["icon"];
        "messageOverrides"?: HomeWidget["uiStrings"];
        "onArcgisHomeReady"?: (event: ArcgisHomeCustomEvent<void>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "viewpoint"?: HomeWidget["viewpoint"];
    }
    interface ArcgisLayerList {
        "collapsed"?: boolean;
        "dragEnabled"?: boolean;
        "filterPlaceholder"?: string;
        "filterText"?: string;
        "icon"?: LayerListWidget["icon"];
        "listItemCreatedFunction"?: LayerListWidget["listItemCreatedFunction"];
        "minDragEnabledItems"?: number;
        "minFilterItems"?: number;
        "onArcgisLayerListReady"?: (event: ArcgisLayerListCustomEvent<void>) => void;
        "onLayerListTriggerAction"?: (event: ArcgisLayerListCustomEvent<__esri.LayerListTriggerActionEvent>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "selectedItems"?: LayerListWidget["selectedItems"];
        "selectionMode"?: LayerListWidget["selectionMode"];
        "visibilityAppearance"?: LayerListWidget["visibilityAppearance"];
        "visibleElementsCloseButton"?: boolean;
        "visibleElementsCollapseButton"?: boolean;
        "visibleElementsErrors"?: boolean;
        "visibleElementsFilter"?: boolean;
        "visibleElementsFlow"?: boolean;
        "visibleElementsHeading"?: boolean;
        "visibleElementsStatusIndicators"?: boolean;
        "visibleElementsTemporaryLayerIndicators"?: boolean;
    }
    interface ArcgisLegend {
        "activeLayerInfos"?: LegendWidget["activeLayerInfos"];
        "basemapLegendVisible"?: boolean;
        "hideLayersNotInCurrentView"?: boolean;
        "icon"?: LegendWidget["icon"];
        "legendStyle"?: LegendWidget["style"];
        "onArcgisLegendReady"?: (event: ArcgisLegendCustomEvent<void>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "respectLayerVisibilityDisabled"?: boolean;
    }
    interface ArcgisLineOfSight {
        "analysis"?: LineOfSightWidget["analysis"];
        "icon"?: LineOfSightWidget["icon"];
        "onArcgisLineOfSightReady"?: (event: ArcgisLineOfSightCustomEvent<void>) => void;
        "onArcgisPropertyChange"?: (event: ArcgisLineOfSightCustomEvent<{
    name: string;
  }>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
    }
    interface ArcgisLocate {
        "error"?: LocateWidget["viewModel"]["error"];
        "geolocationOptions"?: LocateWidget["geolocationOptions"];
        "goToLocationDisabled"?: LocateWidget["goToLocationEnabled"];
        "graphic"?: LocateWidget["graphic"];
        "icon"?: LocateWidget["icon"];
        "onArcgisLocateReady"?: (event: ArcgisLocateCustomEvent<void>) => void;
        "onLocateError"?: (event: ArcgisLocateCustomEvent<__esri.LocateLocateErrorEvent>) => void;
        "onLocateSuccess"?: (event: ArcgisLocateCustomEvent<__esri.LocateLocateEvent>) => void;
        "popupDisabled"?: LocateWidget["popupEnabled"];
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "scale"?: LocateWidget["scale"];
        "state"?: LocateWidget["viewModel"]["state"];
    }
    interface ArcgisMap {
        /**
          * Collection containing a flat list of all the created LayerViews related to the basemap, operational layers, and group layers in this view.
         */
        "allLayerViews"?: ArcGISMapView["allLayerViews"];
        /**
          * The background color of the MapView. If the view's map changes, the view's `background` is reset to the map's background, even if the user set it previously.
         */
        "background"?: ArcGISMapView["background"];
        /**
          * Specifies a basemap for the map. The basemap is a set of layers that give geographic context to the MapView or SceneView and the other operational layers in the map.
         */
        "basemap"?: __esri.Basemap | string;
        /**
          * Represents the view for a single basemap after it has been added to the map.
         */
        "basemapView"?: ArcGISMapView["basemapView"];
        /**
          * Represents the view's center point; when setting the center, you may pass a esri/geometry/Point instance or a string representing a longitude/latitude pair (`"-100.4593, 36.9014"`). Setting the center immediately changes the current view. For animating the view, see this component's goTo() method.
         */
        "center"?: ArcGISMapView["center"] | number[] | string;
        /**
          * Specifies constraints to scale, zoom, and rotation that may be applied to the MapView.
         */
        "constraints"?: ArcGISMapView["constraints"];
        /**
          * Retains element and view state even when removed from DOM
         */
        "destroyDisabled"?: boolean;
        /**
          * The extent represents the visible portion of a map within the view as an instance of esri/geometry/Extent. Setting the extent immediately changes the view without animation. To animate the view, see this component's goTo() method. When the view is rotated, the extent does not update to include the newly visible portions of the map.
         */
        "extent"?: ArcGISMapView["extent"];
        /**
          * A rejected view indicates a fatal error making it unable to display.
         */
        "fatalError"?: ArcGISMapView["fatalError"];
        /**
          * Applies a display filter on the view for a specific set of floor levels. It can filter the map display on floor-aware layers by zero or more level IDs.
         */
        "floors"?: ArcGISMapView["floors"];
        "gamepad"?: __esri.GamepadSettings;
        /**
          * Allows for adding graphics directly to the default graphics in the View. Example: ``` // Adds a graphic to the View graphics.add(pointGraphic); ``` Example: ``` // Removes a graphic from the View graphics.remove(pointGraphic); ```
         */
        "graphics"?: ArcGISMapView["graphics"];
        /**
          * Options for configuring the highlight. Use the highlight method on the appropriate esri/views/layers/LayerView to highlight a feature. The layerView's `highlightOptions` will take precedence over the MapView's `highlightOptions` if both properties are set.
         */
        "highlightOptions"?: ArcGISMapView["highlightOptions"];
        /**
          * Indication whether the view is being interacted with (for example when panning or by an interactive tool).
         */
        "interacting"?: boolean;
        /**
          * The ID of a WebMap from ArcGIS Online or ArcGIS Enterprise portal.
         */
        "itemId"?: string;
        /**
          * A collection containing a hierarchical list of all the created esri/views/layers/LayerView LayerViews of the esri/Map#layers operational layers in the map.
         */
        "layerViews"?: ArcGISMapView["layerViews"];
        /**
          * The magnifier allows for showing a portion of the view as a magnifier image on top of the view.
         */
        "magnifier"?: ArcGISMapView["magnifier"];
        /**
          * An instance of a esri/Map object to display in the view.
         */
        "map"?: ArcGISWebMap;
        /**
          * Indication whether the view is being navigated (for example when panning).
         */
        "navigating"?: boolean;
        /**
          * Options to configure the navigation behavior of the View.
         */
        "navigation"?: ArcGISMapView["navigation"];
        /**
          * This event is for view related property changes: zoom, scale, center, rotation, extent, camera, viewpoint. This event will also emit if stationary toggles from true to false.
         */
        "onArcgisViewChange"?: (event: ArcgisMapCustomEvent<void>) => void;
        /**
          * Fires after a user clicks on the view.
         */
        "onArcgisViewClick"?: (event: ArcgisMapCustomEvent<__esri.ViewClickEvent>) => void;
        /**
          * Fires after double-clicking on the view.
         */
        "onArcgisViewDoubleClick"?: (event: ArcgisMapCustomEvent<__esri.ViewDoubleClickEvent>) => void;
        /**
          * Fires during a pointer drag on the view.
         */
        "onArcgisViewDrag"?: (event: ArcgisMapCustomEvent<__esri.ViewDragEvent>) => void;
        /**
          * Fires during a pointer drag on the view.
         */
        "onArcgisViewHold"?: (event: ArcgisMapCustomEvent<__esri.ViewHoldEvent>) => void;
        /**
          * Fires right after a user clicks on the view.
         */
        "onArcgisViewImmediateClick"?: (event: ArcgisMapCustomEvent<__esri.ViewImmediateClickEvent>) => void;
        /**
          * Is emitted after two consecutive immediate-click events.
         */
        "onArcgisViewImmediateDoubleClick"?: (event: ArcgisMapCustomEvent<__esri.ViewImmediateDoubleClickEvent>) => void;
        /**
          * Fires after a keyboard key is pressed.
         */
        "onArcgisViewKeyDown"?: (event: ArcgisMapCustomEvent<__esri.ViewKeyDownEvent>) => void;
        /**
          * Fires after a keyboard key is pressed.
         */
        "onArcgisViewKeyUp"?: (event: ArcgisMapCustomEvent<__esri.ViewKeyUpEvent>) => void;
        /**
          * Fires after each layer in the map has a corresponding LayerView created and rendered in the view.
         */
        "onArcgisViewLayerviewCreate"?: (event: ArcgisMapCustomEvent<__esri.ViewLayerviewCreateEvent>) => void;
        /**
          * Fires when an error emits during the creation of a LayerView after a layer has been added to the map.
         */
        "onArcgisViewLayerviewCreateError"?: (event: ArcgisMapCustomEvent<__esri.ViewLayerviewCreateErrorEvent>) => void;
        /**
          * Fires after a LayerView is destroyed and is no longer rendered in the view.
         */
        "onArcgisViewLayerviewDestroy"?: (event: ArcgisMapCustomEvent<__esri.ViewLayerviewDestroyEvent>) => void;
        /**
          * Fires when a wheel button of a pointing device (typically a mouse) is scrolled on the view.
         */
        "onArcgisViewMouseWheel"?: (event: ArcgisMapCustomEvent<__esri.ViewMouseWheelEvent>) => void;
        /**
          * Fires after a mouse button is pressed, or a finger touches the display.
         */
        "onArcgisViewPointerDown"?: (event: ArcgisMapCustomEvent<__esri.ViewPointerDownEvent>) => void;
        /**
          * Fires after a mouse cursor enters the view, or a display touch begins.
         */
        "onArcgisViewPointerEnter"?: (event: ArcgisMapCustomEvent<__esri.ViewPointerEnterEvent>) => void;
        /**
          * Fires after a mouse cursor leaves the view, or a display touch ends.
         */
        "onArcgisViewPointerLeave"?: (event: ArcgisMapCustomEvent<__esri.ViewPointerLeaveEvent>) => void;
        /**
          * Fires after the mouse or a finger on the display moves.
         */
        "onArcgisViewPointerMove"?: (event: ArcgisMapCustomEvent<__esri.ViewPointerMoveEvent>) => void;
        /**
          * Fires after a mouse button is released, or a display touch ends.
         */
        "onArcgisViewPointerUp"?: (event: ArcgisMapCustomEvent<__esri.ViewPointerUpEvent>) => void;
        /**
          * This event is for the `ready` property and will be emitted when the view is ready. This event will also emit if the `map` property is changed.
         */
        "onArcgisViewReadyChange"?: (event: ArcgisMapCustomEvent<void>) => void;
        /**
          * Use the padding property to make the center, and extent, etc. work off a subsection of the full view. This is particularly useful when layering UI elements or semi-transparent content on top of portions of the view.
         */
        "padding"?: ArcGISMapView["padding"];
        /**
          * A Popup object that displays general content or attributes from layers in the map.
         */
        "popup"?: ArcGISMapView["popup"];
        /**
          * Controls whether the popup opens when users click on the view.
         */
        "popupEnabled"?: boolean;
        /**
          * When `true`, this property indicates whether the view successfully satisfied all dependencies, signaling that the following conditions are met.
         */
        "ready"?: boolean;
        /**
          * Defines which anchor stays still while resizing the browser window. The default, `center`, ensures the view's center point remains constantly visible as the window size changes. The other options allow  the respective portion of the view to remain visible when the window's size is changed.
         */
        "resizeAlign"?: ArcGISMapView["resizeAlign"];
        /**
          * Represents the current value of one pixel in the unit of the view's spatialReference. The value of resolution is calculated by dividing the view's extent width by its width.
         */
        "resolution"?: ArcGISMapView["resolution"];
        /**
          * The clockwise rotation of due north in relation to the top of the view in degrees. The view may be rotated by directly setting the rotation or by using the following mouse event: `Right-click + Drag`. Map rotation may be disabled by setting the `rotationEnabled` property in [constraints](#constraints) to `false`. See the code snippet below for an example of this.
         */
        "rotation"?: number;
        /**
          * Represents the map scale at the center of the view. Setting the scale immediately changes the view. For animating the view, see this component's goTo() method.
         */
        "scale"?: number;
        /**
          * The spatial reference of the view. This indicates the projected or geographic coordinate system used to locate geographic features in the map.
         */
        "spatialReference"?: ArcGISMapView["spatialReference"];
        /**
          * Indication whether the view is animating, being navigated with or resizing.
         */
        "stationary"?: boolean;
        /**
          * Indicates if the view is visible on the page.
         */
        "suspended"?: boolean;
        /**
          * This property specifies the base colors used by some widgets and components to render graphics and labels.
         */
        "theme"?: ArcGISMapView["theme"];
        /**
          * The view's time extent. Time-aware layers display their temporal data that falls within the view's time extent. Setting the view's time extent is similar to setting the spatial extent because once the time extent is set, the view updates automatically to conform to the change.
         */
        "timeExtent"?: ArcGISMapView["timeExtent"];
        /**
          * Defines the time zone of the view. The time zone property determines how dates and times are represented to the user, but the underlying data is unchanged.
         */
        "timeZone"?: ArcGISMapView["timeZone"];
        /**
          * toMap() function as a property.
         */
        "toMap"?: ArcGISMapView["toMap"];
        /**
          * toScreen() function as a property.
         */
        "toScreen"?: ArcGISMapView["toScreen"];
        /**
          * Indicates whether the view is being updated by additional data requests to the network, or by processing received data.
         */
        "updating"?: boolean;
        /**
          * Internal view of the component.
         */
        "view"?: ArcGISMapView;
        /**
          * Represents the current view as a Viewpoint or point of observation on the view. Setting the viewpoint immediately changes the current view. For animating the view, see this component's goTo() method.
         */
        "viewpoint"?: ArcGISMapView["viewpoint"];
        /**
          * Represents the level of detail (LOD) at the center of the view. A zoom level (or scale) is a number that defines how large or small the contents of a map appear in a map view. Zoom level is a number usually between 0 (global view) and 23 (very detailed view) and is used as a shorthand for predetermined scale values. A value of -1 means the view has no LODs. When setting the zoom value, the MapView converts it to the corresponding scale, or interpolates it if the zoom is a fractional number. MapView can display maps with different projections at a full range of scales, and so use the scale property on this component rather than zoom level.  Setting the zoom immediately changes the current view. For animating the view, see this component's goTo() method. Setting this property in conjunction with `center` is a convenient way to set the initial extent of the view.
         */
        "zoom"?: number;
    }
    interface ArcgisMeasurement {
        "activeComponent"?: MeasurementWidget["activeWidget"];
        "activeTool"?: MeasurementWidget["activeTool"];
        "areaUnit"?: MeasurementWidget["areaUnit"];
        "icon"?: MeasurementWidget["icon"];
        "linearUnit"?: MeasurementWidget["linearUnit"];
        "onArcgisMeasurementReady"?: (event: ArcgisMeasurementCustomEvent<void>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "view"?: ArcGISMapView | ArcGISSceneView;
        "widget"?: MeasurementWidget;
    }
    interface ArcgisNavigationToggle {
        "layout"?: NavigationToggleWidget["layout"];
        "onArcgisNavigationToggleReady"?: (event: ArcgisNavigationToggleCustomEvent<void>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
    }
    interface ArcgisPlacement {
        "onPlacementReady"?: (event: ArcgisPlacementCustomEvent<{ ready: boolean }>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "view"?: ArcGISMapView | ArcGISSceneView;
    }
    interface ArcgisPrint {
        "allowedFormats"?: PrintWidget["allowedFormats"];
        "allowedLayouts"?: PrintWidget["allowedLayouts"];
        "exportedLinks"?: PrintWidget["exportedLinks"];
        "extraParameters"?: PrintWidget["extraParameters"];
        "icon"?: PrintWidget["icon"];
        "includeDefaultTemplates"?: boolean;
        "onArcgisPrintReady"?: (event: ArcgisPrintCustomEvent<void>) => void;
        "onPrintComplete"?: (event: ArcgisPrintCustomEvent<__esri.PrintCompleteEvent>) => void;
        "onPrintSubmit"?: (event: ArcgisPrintCustomEvent<__esri.PrintSubmitEvent>) => void;
        "portal"?: PrintWidget["portal"];
        "position"?: string;
        "printServiceUrl"?: PrintWidget["printServiceUrl"];
        "referenceElement"?: ArcgisReferenceElement | string;
        "templateCustomTextElements"?: PrintWidget["templateCustomTextElements"];
        "templateOptions"?: PrintWidget["templateOptions"];
    }
    interface ArcgisScaleBar {
        "barStyle"?: ScaleBarWidget["style"];
        "onArcgisScaleBarReady"?: (event: ArcgisScaleBarCustomEvent<void>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "unit"?: ScaleBarWidget["unit"];
    }
    interface ArcgisScaleRangeSlider {
        "disabled"?: boolean;
        "layer"?: ScaleRangeSliderWidget["layer"];
        "maxScale"?: ScaleRangeSliderWidget["maxScale"];
        "maxScaleLimit"?: ScaleRangeSliderWidget["maxScaleLimit"];
        "minScale"?: ScaleRangeSliderWidget["minScale"];
        "minScaleLimit"?: ScaleRangeSliderWidget["minScaleLimit"];
        "mode"?: ScaleRangeSliderWidget["mode"];
        "onArcgisScaleRangeSliderReady"?: (event: ArcgisScaleRangeSliderCustomEvent<void>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "region"?: ScaleRangeSliderWidget["region"];
        "visibleElementsPreview"?: boolean;
        "visibleElementsScaleMenusMaxScaleMenu"?: boolean;
        "visibleElementsScaleMenusMinScaleMenu"?: boolean;
    }
    interface ArcgisScene {
        "allLayerViews"?: ArcGISSceneView["allLayerViews"];
        "alphaCompositingEnabled"?: boolean;
        "analyses"?: ArcGISSceneView["analyses"];
        "basemap"?: __esri.Basemap | string;
        "basemapView"?: ArcGISSceneView["basemapView"];
        "camera"?: ArcGISSceneView["camera"];
        "center"?: ArcGISSceneView["center"] | number[] | string;
        "clippingArea"?: ArcGISSceneView["clippingArea"];
        "constraints"?: ArcGISSceneView["constraints"];
        "destroyDisabled"?: boolean;
        "environment"?: ArcGISSceneView["environment"];
        "extent"?: ArcGISSceneView["extent"];
        "fatalError"?: ArcGISSceneView["fatalError"];
        "floors"?: ArcGISSceneView["floors"];
        "gamepad"?: __esri.GamepadSettings;
        "graphics"?: ArcGISSceneView["graphics"];
        "ground"?: ArcGISWebScene["ground"];
        "groundView"?: ArcGISSceneView["groundView"];
        "highlightOptions"?: ArcGISSceneView["highlightOptions"];
        "interacting"?: boolean;
        "itemId"?: string;
        "layerViews"?: ArcGISSceneView["layerViews"];
        "magnifier"?: ArcGISSceneView["magnifier"];
        "map"?: ArcGISWebScene;
        "navigating"?: boolean;
        "navigation"?: ArcGISSceneView["navigation"];
        "onArcgisViewChange"?: (event: ArcgisSceneCustomEvent<void>) => void;
        "onArcgisViewClick"?: (event: ArcgisSceneCustomEvent<__esri.ViewClickEvent>) => void;
        "onArcgisViewDoubleClick"?: (event: ArcgisSceneCustomEvent<__esri.ViewDoubleClickEvent>) => void;
        "onArcgisViewDrag"?: (event: ArcgisSceneCustomEvent<__esri.ViewDragEvent>) => void;
        "onArcgisViewHold"?: (event: ArcgisSceneCustomEvent<__esri.ViewHoldEvent>) => void;
        "onArcgisViewImmediateClick"?: (event: ArcgisSceneCustomEvent<__esri.ViewImmediateClickEvent>) => void;
        "onArcgisViewImmediateDoubleClick"?: (event: ArcgisSceneCustomEvent<__esri.ViewImmediateDoubleClickEvent>) => void;
        "onArcgisViewKeyDown"?: (event: ArcgisSceneCustomEvent<__esri.ViewKeyDownEvent>) => void;
        "onArcgisViewKeyUp"?: (event: ArcgisSceneCustomEvent<__esri.ViewKeyUpEvent>) => void;
        "onArcgisViewLayerviewCreate"?: (event: ArcgisSceneCustomEvent<__esri.ViewLayerviewCreateEvent>) => void;
        "onArcgisViewLayerviewCreateError"?: (event: ArcgisSceneCustomEvent<__esri.ViewLayerviewCreateErrorEvent>) => void;
        "onArcgisViewLayerviewDestroy"?: (event: ArcgisSceneCustomEvent<__esri.ViewLayerviewDestroyEvent>) => void;
        "onArcgisViewMouseWheel"?: (event: ArcgisSceneCustomEvent<__esri.ViewMouseWheelEvent>) => void;
        "onArcgisViewPointerDown"?: (event: ArcgisSceneCustomEvent<__esri.ViewPointerDownEvent>) => void;
        "onArcgisViewPointerEnter"?: (event: ArcgisSceneCustomEvent<__esri.ViewPointerEnterEvent>) => void;
        "onArcgisViewPointerLeave"?: (event: ArcgisSceneCustomEvent<__esri.ViewPointerLeaveEvent>) => void;
        "onArcgisViewPointerMove"?: (event: ArcgisSceneCustomEvent<__esri.ViewPointerMoveEvent>) => void;
        "onArcgisViewPointerUp"?: (event: ArcgisSceneCustomEvent<__esri.ViewPointerUpEvent>) => void;
        /**
          * This event is for the `ready` property and will be emitted when the view is ready. This event will also emit if the `map` property is changed.
         */
        "onArcgisViewReadyChange"?: (event: ArcgisSceneCustomEvent<void>) => void;
        "padding"?: ArcGISSceneView["padding"];
        "performanceInfo"?: ArcGISSceneView["performanceInfo"];
        "popup"?: ArcGISSceneView["popup"];
        "popupEnabled"?: boolean;
        "qualityProfile"?: ArcGISSceneView["qualityProfile"];
        "ready"?: boolean;
        "resolution"?: ArcGISSceneView["resolution"];
        "scale"?: number;
        "spatialReference"?: ArcGISSceneView["spatialReference"];
        "stationary"?: boolean;
        "suspended"?: boolean;
        "theme"?: ArcGISSceneView["theme"];
        "timeExtent"?: ArcGISSceneView["timeExtent"];
        "toMap"?: ArcGISSceneView["toMap"];
        "toScreen"?: ArcGISSceneView["toScreen"];
        "updating"?: boolean;
        /**
          * Internal view of the component.
         */
        "view"?: ArcGISSceneView;
        "viewingMode"?: ArcGISSceneView["viewingMode"];
        "viewpoint"?: ArcGISSceneView["viewpoint"];
        "zoom"?: number;
    }
    interface ArcgisSearch {
        "activeMenu"?: SearchWidget["activeMenu"];
        "activeSource"?: SearchWidget["activeSource"];
        "activeSourceIndex"?: number;
        "allPlaceholder"?: string;
        "allSources"?: SearchWidget["allSources"];
        "autoSelect"?: boolean;
        "defaultSources"?: SearchWidget["defaultSources"];
        "disabled"?: boolean;
        "icon"?: SearchWidget["icon"];
        "includeDefaultSources"?: boolean;
        "locationEnabled"?: boolean;
        "maxResults"?: number;
        "maxSuggestions"?: number;
        "minSuggestCharacters"?: number;
        "onArcgisSearchReady"?: (event: ArcgisSearchCustomEvent<void>) => void;
        "onSearchBlur"?: (event: ArcgisSearchCustomEvent<__esri.SearchSearchBlurEvent>) => void;
        "onSearchClear"?: (event: ArcgisSearchCustomEvent<__esri.SearchSearchClearEvent>) => void;
        "onSearchComplete"?: (event: ArcgisSearchCustomEvent<__esri.SearchSearchCompleteEvent>) => void;
        "onSearchFocus"?: (event: ArcgisSearchCustomEvent<__esri.SearchSearchFocusEvent>) => void;
        "onSearchSelectResult"?: (event: ArcgisSearchCustomEvent<__esri.SearchSelectResultEvent>) => void;
        "onSearchStart"?: (event: ArcgisSearchCustomEvent<__esri.SearchSearchStartEvent>) => void;
        "onSearchSuggestComplete"?: (event: ArcgisSearchCustomEvent<__esri.SearchSuggestCompleteEvent>) => void;
        "onSearchSuggestStart"?: (event: ArcgisSearchCustomEvent<__esri.SearchSuggestStartEvent>) => void;
        "popupEnabled"?: boolean;
        "popupTemplate"?: SearchWidget["popupTemplate"];
        "portal"?: SearchWidget["portal"];
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "resultGraphic"?: SearchWidget["resultGraphic"];
        "resultGraphicEnabled"?: boolean;
        "results"?: SearchWidget["results"];
        "searchAllEnabled"?: boolean;
        "searchTerm"?: SearchWidget["searchTerm"];
        "selectedResult"?: SearchWidget["selectedResult"];
        "sources"?: SearchWidget["sources"];
        "suggestions"?: SearchWidget["suggestions"];
        "suggestionsEnabled"?: boolean;
    }
    interface ArcgisShadowCast {
        "discreteOptions"?: ShadowCastWidget["viewModel"]["discreteOptions"];
        "durationOptions"?: ShadowCastWidget["viewModel"]["durationOptions"];
        "endTimeOfDay"?: number;
        "icon"?: ShadowCastWidget["icon"];
        "onArcgisShadowCastReady"?: (event: ArcgisShadowCastCustomEvent<void>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "startTimeOfDay"?: number;
        "thresholdOptions"?: ShadowCastWidget["viewModel"]["thresholdOptions"];
        "utcOffset"?: number;
        "visibleElementsColorPicker"?: boolean;
        "visibleElementsDatePicker"?: boolean;
        "visibleElementsTimeRangeSlider"?: boolean;
        "visibleElementsTimezone"?: boolean;
        "visibleElementsTooltip"?: boolean;
        "visibleElementsVisualizationOptions"?: boolean;
        "visualizationType"?: ShadowCastWidget["viewModel"]["visualizationType"];
    }
    interface ArcgisSketch {
        "activeTool"?: SketchWidget["activeTool"];
        "availableCreateTools"?: SketchWidget["availableCreateTools"];
        "createGraphic"?: SketchWidget["createGraphic"];
        "creationMode"?: SketchWidget["creationMode"];
        "defaultCreateOptions"?: SketchWidget["defaultCreateOptions"];
        "defaultUpdateOptions"?: SketchWidget["defaultUpdateOptions"];
        "icon"?: SketchWidget["icon"];
        "labelOptions"?: SketchWidget["labelOptions"];
        "layer"?: SketchWidget["layer"];
        "layout"?: SketchWidget["layout"];
        "onArcgisSketchReady"?: (event: ArcgisSketchCustomEvent<void>) => void;
        "onSketchCreate"?: (event: ArcgisSketchCustomEvent<__esri.SketchCreateEvent>) => void;
        "onSketchDelete"?: (event: ArcgisSketchCustomEvent<__esri.SketchDeleteEvent>) => void;
        "onSketchRedo"?: (event: ArcgisSketchCustomEvent<__esri.SketchRedoEvent>) => void;
        "onSketchUndo"?: (event: ArcgisSketchCustomEvent<__esri.SketchUndoEvent>) => void;
        "onSketchUpdate"?: (event: ArcgisSketchCustomEvent<__esri.SketchUpdateEvent>) => void;
        "pointSymbol"?: SketchWidget["viewModel"]["pointSymbol"];
        "polygonSymbol"?: SketchWidget["viewModel"]["polygonSymbol"];
        "polylineSymbol"?: SketchWidget["viewModel"]["polylineSymbol"];
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "snappingOptions"?: SketchWidget["snappingOptions"];
        "tooltipOptions"?: SketchWidget["tooltipOptions"];
        "updateGraphics"?: SketchWidget["updateGraphics"];
        "visibleElementsCreateToolsCircle"?: boolean;
        "visibleElementsCreateToolsPoint"?: boolean;
        "visibleElementsCreateToolsPolygon"?: boolean;
        "visibleElementsCreateToolsPolyline"?: boolean;
        "visibleElementsCreateToolsRectangle"?: boolean;
        "visibleElementsDuplicateButton"?: boolean;
        "visibleElementsLabelsToggle"?: boolean;
        "visibleElementsSelectionToolsLasso"?: boolean;
        "visibleElementsSelectionToolsRectangle"?: boolean;
        "visibleElementsSettingsMenu"?: boolean;
        "visibleElementsSnappingControls"?: boolean;
        "visibleElementsSnappingControlsElementsEnabledToggle"?: boolean;
        "visibleElementsSnappingControlsElementsFeatureEnabledToggle"?: boolean;
        "visibleElementsSnappingControlsElementsHeader"?: boolean;
        "visibleElementsSnappingControlsElementsLayerList"?: boolean;
        "visibleElementsSnappingControlsElementsSelfEnabledToggle"?: boolean;
        "visibleElementsTooltipsToggle"?: boolean;
        "visibleElementsUndoRedoMenu"?: boolean;
    }
    interface ArcgisSlice {
        "analysis"?: SliceWidget["analysis"];
        "excludeGroundSurface"?: boolean;
        "excludedLayers"?: SliceWidget["viewModel"]["excludedLayers"];
        "icon"?: SliceWidget["icon"];
        "onArcgisPropertyChange"?: (event: ArcgisSliceCustomEvent<{
    name: string;
  }>) => void;
        "onArcgisSliceReady"?: (event: ArcgisSliceCustomEvent<void>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "shape"?: SliceWidget["viewModel"]["shape"];
        "tiltEnabled"?: boolean;
    }
    interface ArcgisSlider {
        "draggableSegmentsEnabled"?: SliderWidget["draggableSegmentsEnabled"];
        "effectiveMax"?: SliderWidget["effectiveMax"];
        "effectiveMin"?: SliderWidget["effectiveMin"];
        "effectiveSegmentElements"?: SliderWidget["effectiveSegmentElements"];
        "expandable"?: boolean;
        "labelElements"?: SliderWidget["labelElements"];
        "labelInputsEnabled"?: SliderWidget["labelInputsEnabled"];
        "labels"?: SliderWidget["labels"];
        "layout"?: SliderWidget["layout"];
        "max"?: SliderWidget["max"];
        "maxLabelElement"?: SliderWidget["maxLabelElement"];
        "min"?: SliderWidget["min"];
        "minLabelElement"?: SliderWidget["minLabelElement"];
        "onSliderMaxChange"?: (event: ArcgisSliderCustomEvent<__esri.SliderMaxChangeEvent>) => void;
        "onSliderMaxClick"?: (event: ArcgisSliderCustomEvent<__esri.SliderMaxClickEvent>) => void;
        "onSliderMinChange"?: (event: ArcgisSliderCustomEvent<__esri.SliderMinChangeEvent>) => void;
        "onSliderMinClick"?: (event: ArcgisSliderCustomEvent<__esri.SliderMinClickEvent>) => void;
        "onSliderSegmentClick"?: (event: ArcgisSliderCustomEvent<__esri.SliderSegmentClickEvent>) => void;
        "onSliderSegmentDrag"?: (event: ArcgisSliderCustomEvent<__esri.SliderSegmentDragEvent>) => void;
        "onSliderThumbChange"?: (event: ArcgisSliderCustomEvent<__esri.SliderThumbChangeEvent>) => void;
        "onSliderThumbClick"?: (event: ArcgisSliderCustomEvent<__esri.SliderThumbClickEvent>) => void;
        "onSliderThumbDrag"?: (event: ArcgisSliderCustomEvent<__esri.SliderThumbDragEvent>) => void;
        "onSliderTickClick"?: (event: ArcgisSliderCustomEvent<__esri.SliderTickClickEvent>) => void;
        "onSliderTrackClick"?: (event: ArcgisSliderCustomEvent<__esri.SliderTrackClickEvent>) => void;
        "onWidgetReady"?: (event: ArcgisSliderCustomEvent<{ widget: __esri.Slider }>) => void;
        "position"?: string;
        "precision"?: SliderWidget["precision"];
        "rangeLabelInputsEnabled"?: SliderWidget["rangeLabelInputsEnabled"];
        "referenceElement"?: ArcgisReferenceElement | string;
        "segmentElements"?: SliderWidget["segmentElements"];
        "snapOnClickEnabled"?: SliderWidget["snapOnClickEnabled"];
        "steps"?: SliderWidget["steps"] | string;
        "syncedSegmentsEnabled"?: SliderWidget["syncedSegmentsEnabled"];
        "thumbElements"?: SliderWidget["thumbElements"];
        "thumbsConstrained"?: SliderWidget["thumbsConstrained"];
        "tickConfigs"?: SliderWidget["tickConfigs"];
        "tickElements"?: SliderWidget["tickElements"];
        "trackElement"?: SliderWidget["trackElement"];
        "values"?: SliderWidget["values"] | string;
        "widget"?: SliderWidget;
    }
    interface ArcgisSwipe {
        "direction"?: SwipeWidget["direction"];
        "dragLabel"?: SwipeWidget["dragLabel"];
        "leadingLayers"?: SwipeWidget["leadingLayers"];
        "onWidgetReady"?: (event: ArcgisSwipeCustomEvent<{ widget: __esri.Swipe }>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "swipePosition"?: SwipeWidget["position"];
        "trailingLayers"?: SwipeWidget["trailingLayers"];
        "view"?: ArcGISMapView;
        "widget"?: SwipeWidget;
    }
    interface ArcgisTableList {
        "collapsed"?: boolean;
        "dragEnabled"?: boolean;
        "filterPlaceholder"?: string;
        "filterText"?: string;
        "icon"?: TableListWidget["icon"];
        "listItemCreatedFunction"?: TableListWidget["listItemCreatedFunction"];
        "minDragEnabledItems"?: number;
        "minFilterItems"?: number;
        "onArcgisTableListReady"?: (event: ArcgisTableListCustomEvent<void>) => void;
        "onTableListTriggerAction"?: (event: ArcgisTableListCustomEvent<__esri.TableListTriggerActionEvent>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "selectedItems"?: TableListWidget["selectedItems"];
        "selectionMode"?: TableListWidget["selectionMode"];
        "visibleElementsCloseButton"?: boolean;
        "visibleElementsCollapseButton"?: boolean;
        "visibleElementsErrors"?: boolean;
        "visibleElementsFilter"?: boolean;
        "visibleElementsFlow"?: boolean;
        "visibleElementsHeading"?: boolean;
        "visibleElementsStatusIndicators"?: boolean;
        "visibleElementsTemporaryTableIndicators"?: boolean;
    }
    interface ArcgisTimeSlider {
        "actions"?: TimeSliderWidget["actions"];
        "disabled"?: boolean;
        "effectiveStops"?: TimeSliderWidget["effectiveStops"];
        "fullTimeExtent"?: TimeSliderWidget["fullTimeExtent"];
        "layout"?: TimeSliderWidget["layout"];
        "loop"?: boolean;
        "mode"?: TimeSliderWidget["mode"];
        "onArcgisPropertyChange"?: (event: ArcgisTimeSliderCustomEvent<{ name: string }>) => void;
        "onArcgisTimeSliderReady"?: (event: ArcgisTimeSliderCustomEvent<void>) => void;
        "onTimeSliderTriggerAction"?: (event: ArcgisTimeSliderCustomEvent<__esri.TimeSliderTriggerActionEvent>) => void;
        "playRate"?: number;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "stops"?: TimeSliderWidget["stops"];
        "tickConfigs"?: TimeSliderWidget["tickConfigs"];
        "timeExtent"?: TimeSliderWidget["timeExtent"];
        "timeVisible"?: boolean;
        "timeZone"?: TimeSliderWidget["timeZone"];
    }
    interface ArcgisTrack {
        "error"?: TrackWidget["viewModel"]["error"];
        "geolocationOptions"?: TrackWidget["geolocationOptions"];
        "goToLocationEnabled"?: boolean;
        "graphic"?: TrackWidget["graphic"];
        "icon"?: TrackWidget["icon"];
        "onArcgisTrackReady"?: (event: ArcgisTrackCustomEvent<void>) => void;
        "onTrackComplete"?: (event: ArcgisTrackCustomEvent<__esri.TrackTrackEvent>) => void;
        "onTrackError"?: (event: ArcgisTrackCustomEvent<__esri.TrackTrackErrorEvent>) => void;
        "position"?: string;
        "positionFilterFunction"?: TrackWidget["viewModel"]["positionFilterFunction"];
        "referenceElement"?: ArcgisReferenceElement | string;
        "rotationEnabled"?: boolean;
        "scale"?: TrackWidget["scale"];
        "state"?: TrackWidget["viewModel"]["state"];
        "tracking"?: boolean;
    }
    interface ArcgisUtilityNetworkAssociations {
        "autoRefreshAssociations"?: boolean;
        "connectivityAssociationsLineSymbol"?: UtilityNetworkAssociationsWidget["connectivityAssociationsLineSymbol"];
        "includeConnectivityAssociations"?: boolean;
        "includeStructuralAttachmentAssociations"?: boolean;
        "maxAllowableAssociations"?: number;
        "maxAllowableAssociationsSliderMax"?: UtilityNetworkAssociationsWidget["maxAllowableAssociationsSliderMax"];
        "maxAllowableAssociationsSliderMin"?: UtilityNetworkAssociationsWidget["maxAllowableAssociationsSliderMin"];
        "maxAllowableAssociationsSliderStep"?: UtilityNetworkAssociationsWidget["maxAllowableAssociationsSliderStep"];
        "onArcgisUtilityNetworkAssociationsReady"?: (event: ArcgisUtilityNetworkAssociationsCustomEvent<void>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "showArrowsConnectivity"?: boolean;
        "showArrowsStructuralAttachment"?: boolean;
        "showAssociationsEnabled"?: boolean;
        "structuralAttachmentAssociationsLineSymbol"?: UtilityNetworkAssociationsWidget["structuralAttachmentAssociationsLineSymbol"];
        "utilityNetwork"?: UtilityNetworkAssociationsWidget["utilityNetwork"];
        "visibleElementsConnectivityAssociationsSettingsArrowsToggle"?: boolean;
        "visibleElementsConnectivityAssociationsSettingsCapSelect"?: boolean;
        "visibleElementsConnectivityAssociationsSettingsColorPicker"?: boolean;
        "visibleElementsConnectivityAssociationsSettingsStylePicker"?: boolean;
        "visibleElementsConnectivityAssociationsSettingsWidthInput"?: boolean;
        "visibleElementsMaxAllowableAssociationsSlider"?: boolean;
        "visibleElementsStructuralAttachmentAssociationsSettingsArrowsToggle"?: boolean;
        "visibleElementsStructuralAttachmentAssociationsSettingsCapSelect"?: boolean;
        "visibleElementsStructuralAttachmentAssociationsSettingsStylePicker"?: boolean;
        "visibleElementsStructuralAttachmentAssociationsSettingsWidthInput"?: boolean;
    }
    interface ArcgisUtilityNetworkTrace {
        "defaultGraphicColor"?: UtilityNetworkTraceWidget["defaultGraphicColor"];
        "disabled"?: boolean;
        "enableResultArea"?: boolean;
        "flags"?: UtilityNetworkTraceWidget["flags"];
        "gdbVersion"?: string;
        "inputSettings"?: UtilityNetworkTraceWidget["inputSettings"];
        "onArcgisUtilityNetworkTraceReady"?: (event: ArcgisUtilityNetworkTraceCustomEvent<void>) => void;
        "onUtilityNetworkTraceAddFlag"?: (event: ArcgisUtilityNetworkTraceCustomEvent<__esri.UtilityNetworkTraceAddFlagEvent>) => void;
        "onUtilityNetworkTraceAddFlagComplete"?: (event: ArcgisUtilityNetworkTraceCustomEvent<__esri.UtilityNetworkTraceAddFlagCompleteEvent>) => void;
        "onUtilityNetworkTraceAddFlagError"?: (event: ArcgisUtilityNetworkTraceCustomEvent<__esri.UtilityNetworkTraceAddFlagErrorEvent>) => void;
        "onUtilityNetworkTraceAddResultArea"?: (event: ArcgisUtilityNetworkTraceCustomEvent<__esri.UtilityNetworkTraceAddResultAreaEvent>) => void;
        "onUtilityNetworkTraceRemoveResultArea"?: (event: ArcgisUtilityNetworkTraceCustomEvent<__esri.UtilityNetworkTraceRemoveResultAreaEvent>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "resultAreaProperties"?: UtilityNetworkTraceWidget["resultAreaProperties"];
        "selectOnComplete"?: boolean;
        "selectedTraces"?: UtilityNetworkTraceWidget["selectedTraces"];
        "showGraphicsOnComplete"?: boolean;
        "showSelectionAttributes"?: boolean;
    }
    interface ArcgisUtilityNetworkValidateTopology {
        "extentToValidate"?: UtilityNetworkValidateTopologyWidget["extentToValidate"];
        "onArcgisUtilityNetworkValidateTopologyReady"?: (event: ArcgisUtilityNetworkValidateTopologyCustomEvent<void>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "utilityNetwork"?: UtilityNetworkValidateTopologyWidget["utilityNetwork"];
    }
    interface ArcgisValuePicker {
        "canNext"?: ValuePickerWidget["canNext"];
        "canPlay"?: ValuePickerWidget["canPlay"];
        "canPrevious"?: ValuePickerWidget["canPrevious"];
        "caption"?: ValuePickerWidget["caption"];
        "component"?: ValuePickerWidget["component"];
        "layout"?: ValuePickerWidget["layout"];
        "loop"?: ValuePickerWidget["loop"];
        "onArcgisPropertyChange"?: (event: ArcgisValuePickerCustomEvent<{
    name: string;
  }>) => void;
        "onArcgisValuePickerReady"?: (event: ArcgisValuePickerCustomEvent<void>) => void;
        "onValuePickerAnimate"?: (event: ArcgisValuePickerCustomEvent<__esri.ValuePickerAnimateEvent>) => void;
        "onValuePickerNext"?: (event: ArcgisValuePickerCustomEvent<__esri.ValuePickerNextEvent>) => void;
        "onValuePickerPause"?: (event: ArcgisValuePickerCustomEvent<__esri.ValuePickerPauseEvent>) => void;
        "onValuePickerPlay"?: (event: ArcgisValuePickerCustomEvent<__esri.ValuePickerPlayEvent>) => void;
        "onValuePickerPrevious"?: (event: ArcgisValuePickerCustomEvent<__esri.ValuePickerPreviousEvent>) => void;
        "playRate"?: ValuePickerWidget["playRate"];
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "values"?: ValuePickerWidget["values"];
        "view"?: ArcGISMapView | ArcGISSceneView;
        "visibleElements"?: ValuePickerWidget["visibleElements"];
        "widget"?: ValuePickerWidget;
    }
    interface ArcgisVersionManagement {
        "label"?: string;
        "position"?: string;
        "view"?: ArcGISMapView;
    }
    interface ArcgisVersionManagementServiceItem {
        "flowElement"?: HTMLCalciteFlowElement;
        "heading"?: string;
        "onVersionItemActionClickedEventWithServiceUrl"?: (event: ArcgisVersionManagementServiceItemCustomEvent<{
    actionType: string;
    serviceUrl: string;
    versionInfo: __esri.VersionInfo;
  }>) => void;
        "onVersionListActionClickedEvent"?: (event: ArcgisVersionManagementServiceItemCustomEvent<{
    actionType: string;
    serviceUrl: string;
  }>) => void;
        "serviceUrl"?: string;
        "strings"?: VersionManagementStrings;
        "viewModel"?: __esri.VersionManagementViewModel;
    }
    interface ArcgisVersionManagementVersionItem {
        "hasAdvEditingUte"?: boolean;
        "isVersioningApiAvailable"?: boolean;
        "onVersionItemActionClickedEvent"?: (event: ArcgisVersionManagementVersionItemCustomEvent<{
    actionType: string;
    versionInfo: __esri.VersionInfo;
  }>) => void;
        "strings"?: VersionManagementStrings;
        "versionInfo"?: __esri.VersionInfo;
    }
    interface ArcgisVersionManagementVersionList {
        "heading"?: string;
        "onVersionItemActionClickedEventWithServiceUrl"?: (event: ArcgisVersionManagementVersionListCustomEvent<{
    actionType: string;
    serviceUrl: string;
    versionInfo: __esri.VersionInfo;
  }>) => void;
        "onVersionListActionClickedEvent"?: (event: ArcgisVersionManagementVersionListCustomEvent<{
    actionType: string;
    serviceUrl: string;
  }>) => void;
        "serviceName"?: string;
        "serviceUrl"?: string;
        "strings"?: VersionManagementStrings;
        "userHasAdvancedEditingUserTypeExtension"?: boolean;
        "versionInfos"?: __esri.VersionInfo[];
        "viewModel"?: __esri.VersionManagementViewModel;
    }
    interface ArcgisVersionManagementVersionProperties {
        "flowElement"?: HTMLCalciteFlowElement;
        "onVersionPropertiesSaveClickedEvent"?: (event: ArcgisVersionManagementVersionPropertiesCustomEvent<{
    serviceUrl: string;
    versionInfo: __esri.VersionInfo;
  }>) => void;
        "serviceUrl"?: string;
        "strings"?: VersionManagementStrings;
        "versionInfo"?: __esri.VersionInfo | undefined;
        "viewModel"?: __esri.VersionManagementViewModel;
    }
    interface ArcgisWeather {
        "icon"?: WeatherWidget["icon"];
        "onArcgisWeatherReady"?: (event: ArcgisWeatherCustomEvent<void>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
        "visibleElementsHeader"?: boolean;
    }
    interface ArcgisZoom {
        "icon"?: ZoomWidget["icon"];
        "layout"?: ZoomWidget["layout"];
        "onArcgisZoomReady"?: (event: ArcgisZoomCustomEvent<void>) => void;
        "position"?: string;
        "referenceElement"?: ArcgisReferenceElement | string;
    }
    interface IntrinsicElements {
        "arcgis-area-measurement-2d": ArcgisAreaMeasurement2d;
        "arcgis-area-measurement-3d": ArcgisAreaMeasurement3d;
        "arcgis-attachments": ArcgisAttachments;
        "arcgis-basemap-gallery": ArcgisBasemapGallery;
        "arcgis-basemap-layer-list": ArcgisBasemapLayerList;
        "arcgis-basemap-toggle": ArcgisBasemapToggle;
        "arcgis-bookmarks": ArcgisBookmarks;
        "arcgis-building-explorer": ArcgisBuildingExplorer;
        "arcgis-compass": ArcgisCompass;
        "arcgis-coordinate-conversion": ArcgisCoordinateConversion;
        "arcgis-daylight": ArcgisDaylight;
        "arcgis-directional-pad": ArcgisDirectionalPad;
        "arcgis-directions": ArcgisDirections;
        "arcgis-directline-measurement-3d": ArcgisDirectlineMeasurement3d;
        "arcgis-distance-measurement-2d": ArcgisDistanceMeasurement2d;
        "arcgis-editor": ArcgisEditor;
        "arcgis-elevation-profile": ArcgisElevationProfile;
        "arcgis-expand": ArcgisExpand;
        "arcgis-feature": ArcgisFeature;
        "arcgis-feature-form": ArcgisFeatureForm;
        "arcgis-feature-table": ArcgisFeatureTable;
        "arcgis-feature-templates": ArcgisFeatureTemplates;
        "arcgis-features": ArcgisFeatures;
        "arcgis-floor-filter": ArcgisFloorFilter;
        "arcgis-fullscreen": ArcgisFullscreen;
        "arcgis-histogram": ArcgisHistogram;
        "arcgis-histogram-range-slider": ArcgisHistogramRangeSlider;
        "arcgis-home": ArcgisHome;
        "arcgis-layer-list": ArcgisLayerList;
        "arcgis-legend": ArcgisLegend;
        "arcgis-line-of-sight": ArcgisLineOfSight;
        "arcgis-locate": ArcgisLocate;
        "arcgis-map": ArcgisMap;
        "arcgis-measurement": ArcgisMeasurement;
        "arcgis-navigation-toggle": ArcgisNavigationToggle;
        "arcgis-placement": ArcgisPlacement;
        "arcgis-print": ArcgisPrint;
        "arcgis-scale-bar": ArcgisScaleBar;
        "arcgis-scale-range-slider": ArcgisScaleRangeSlider;
        "arcgis-scene": ArcgisScene;
        "arcgis-search": ArcgisSearch;
        "arcgis-shadow-cast": ArcgisShadowCast;
        "arcgis-sketch": ArcgisSketch;
        "arcgis-slice": ArcgisSlice;
        "arcgis-slider": ArcgisSlider;
        "arcgis-swipe": ArcgisSwipe;
        "arcgis-table-list": ArcgisTableList;
        "arcgis-time-slider": ArcgisTimeSlider;
        "arcgis-track": ArcgisTrack;
        "arcgis-utility-network-associations": ArcgisUtilityNetworkAssociations;
        "arcgis-utility-network-trace": ArcgisUtilityNetworkTrace;
        "arcgis-utility-network-validate-topology": ArcgisUtilityNetworkValidateTopology;
        "arcgis-value-picker": ArcgisValuePicker;
        "arcgis-version-management": ArcgisVersionManagement;
        "arcgis-version-management-service-item": ArcgisVersionManagementServiceItem;
        "arcgis-version-management-version-item": ArcgisVersionManagementVersionItem;
        "arcgis-version-management-version-list": ArcgisVersionManagementVersionList;
        "arcgis-version-management-version-properties": ArcgisVersionManagementVersionProperties;
        "arcgis-weather": ArcgisWeather;
        "arcgis-zoom": ArcgisZoom;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "arcgis-area-measurement-2d": LocalJSX.ArcgisAreaMeasurement2d & JSXBase.HTMLAttributes<HTMLArcgisAreaMeasurement2dElement>;
            "arcgis-area-measurement-3d": LocalJSX.ArcgisAreaMeasurement3d & JSXBase.HTMLAttributes<HTMLArcgisAreaMeasurement3dElement>;
            "arcgis-attachments": LocalJSX.ArcgisAttachments & JSXBase.HTMLAttributes<HTMLArcgisAttachmentsElement>;
            "arcgis-basemap-gallery": LocalJSX.ArcgisBasemapGallery & JSXBase.HTMLAttributes<HTMLArcgisBasemapGalleryElement>;
            "arcgis-basemap-layer-list": LocalJSX.ArcgisBasemapLayerList & JSXBase.HTMLAttributes<HTMLArcgisBasemapLayerListElement>;
            "arcgis-basemap-toggle": LocalJSX.ArcgisBasemapToggle & JSXBase.HTMLAttributes<HTMLArcgisBasemapToggleElement>;
            "arcgis-bookmarks": LocalJSX.ArcgisBookmarks & JSXBase.HTMLAttributes<HTMLArcgisBookmarksElement>;
            "arcgis-building-explorer": LocalJSX.ArcgisBuildingExplorer & JSXBase.HTMLAttributes<HTMLArcgisBuildingExplorerElement>;
            "arcgis-compass": LocalJSX.ArcgisCompass & JSXBase.HTMLAttributes<HTMLArcgisCompassElement>;
            "arcgis-coordinate-conversion": LocalJSX.ArcgisCoordinateConversion & JSXBase.HTMLAttributes<HTMLArcgisCoordinateConversionElement>;
            "arcgis-daylight": LocalJSX.ArcgisDaylight & JSXBase.HTMLAttributes<HTMLArcgisDaylightElement>;
            "arcgis-directional-pad": LocalJSX.ArcgisDirectionalPad & JSXBase.HTMLAttributes<HTMLArcgisDirectionalPadElement>;
            "arcgis-directions": LocalJSX.ArcgisDirections & JSXBase.HTMLAttributes<HTMLArcgisDirectionsElement>;
            "arcgis-directline-measurement-3d": LocalJSX.ArcgisDirectlineMeasurement3d & JSXBase.HTMLAttributes<HTMLArcgisDirectlineMeasurement3dElement>;
            "arcgis-distance-measurement-2d": LocalJSX.ArcgisDistanceMeasurement2d & JSXBase.HTMLAttributes<HTMLArcgisDistanceMeasurement2dElement>;
            "arcgis-editor": LocalJSX.ArcgisEditor & JSXBase.HTMLAttributes<HTMLArcgisEditorElement>;
            "arcgis-elevation-profile": LocalJSX.ArcgisElevationProfile & JSXBase.HTMLAttributes<HTMLArcgisElevationProfileElement>;
            "arcgis-expand": LocalJSX.ArcgisExpand & JSXBase.HTMLAttributes<HTMLArcgisExpandElement>;
            "arcgis-feature": LocalJSX.ArcgisFeature & JSXBase.HTMLAttributes<HTMLArcgisFeatureElement>;
            "arcgis-feature-form": LocalJSX.ArcgisFeatureForm & JSXBase.HTMLAttributes<HTMLArcgisFeatureFormElement>;
            "arcgis-feature-table": LocalJSX.ArcgisFeatureTable & JSXBase.HTMLAttributes<HTMLArcgisFeatureTableElement>;
            "arcgis-feature-templates": LocalJSX.ArcgisFeatureTemplates & JSXBase.HTMLAttributes<HTMLArcgisFeatureTemplatesElement>;
            "arcgis-features": LocalJSX.ArcgisFeatures & JSXBase.HTMLAttributes<HTMLArcgisFeaturesElement>;
            "arcgis-floor-filter": LocalJSX.ArcgisFloorFilter & JSXBase.HTMLAttributes<HTMLArcgisFloorFilterElement>;
            "arcgis-fullscreen": LocalJSX.ArcgisFullscreen & JSXBase.HTMLAttributes<HTMLArcgisFullscreenElement>;
            "arcgis-histogram": LocalJSX.ArcgisHistogram & JSXBase.HTMLAttributes<HTMLArcgisHistogramElement>;
            "arcgis-histogram-range-slider": LocalJSX.ArcgisHistogramRangeSlider & JSXBase.HTMLAttributes<HTMLArcgisHistogramRangeSliderElement>;
            "arcgis-home": LocalJSX.ArcgisHome & JSXBase.HTMLAttributes<HTMLArcgisHomeElement>;
            "arcgis-layer-list": LocalJSX.ArcgisLayerList & JSXBase.HTMLAttributes<HTMLArcgisLayerListElement>;
            "arcgis-legend": LocalJSX.ArcgisLegend & JSXBase.HTMLAttributes<HTMLArcgisLegendElement>;
            "arcgis-line-of-sight": LocalJSX.ArcgisLineOfSight & JSXBase.HTMLAttributes<HTMLArcgisLineOfSightElement>;
            "arcgis-locate": LocalJSX.ArcgisLocate & JSXBase.HTMLAttributes<HTMLArcgisLocateElement>;
            "arcgis-map": LocalJSX.ArcgisMap & JSXBase.HTMLAttributes<HTMLArcgisMapElement>;
            "arcgis-measurement": LocalJSX.ArcgisMeasurement & JSXBase.HTMLAttributes<HTMLArcgisMeasurementElement>;
            "arcgis-navigation-toggle": LocalJSX.ArcgisNavigationToggle & JSXBase.HTMLAttributes<HTMLArcgisNavigationToggleElement>;
            "arcgis-placement": LocalJSX.ArcgisPlacement & JSXBase.HTMLAttributes<HTMLArcgisPlacementElement>;
            "arcgis-print": LocalJSX.ArcgisPrint & JSXBase.HTMLAttributes<HTMLArcgisPrintElement>;
            "arcgis-scale-bar": LocalJSX.ArcgisScaleBar & JSXBase.HTMLAttributes<HTMLArcgisScaleBarElement>;
            "arcgis-scale-range-slider": LocalJSX.ArcgisScaleRangeSlider & JSXBase.HTMLAttributes<HTMLArcgisScaleRangeSliderElement>;
            "arcgis-scene": LocalJSX.ArcgisScene & JSXBase.HTMLAttributes<HTMLArcgisSceneElement>;
            "arcgis-search": LocalJSX.ArcgisSearch & JSXBase.HTMLAttributes<HTMLArcgisSearchElement>;
            "arcgis-shadow-cast": LocalJSX.ArcgisShadowCast & JSXBase.HTMLAttributes<HTMLArcgisShadowCastElement>;
            "arcgis-sketch": LocalJSX.ArcgisSketch & JSXBase.HTMLAttributes<HTMLArcgisSketchElement>;
            "arcgis-slice": LocalJSX.ArcgisSlice & JSXBase.HTMLAttributes<HTMLArcgisSliceElement>;
            "arcgis-slider": LocalJSX.ArcgisSlider & JSXBase.HTMLAttributes<HTMLArcgisSliderElement>;
            "arcgis-swipe": LocalJSX.ArcgisSwipe & JSXBase.HTMLAttributes<HTMLArcgisSwipeElement>;
            "arcgis-table-list": LocalJSX.ArcgisTableList & JSXBase.HTMLAttributes<HTMLArcgisTableListElement>;
            "arcgis-time-slider": LocalJSX.ArcgisTimeSlider & JSXBase.HTMLAttributes<HTMLArcgisTimeSliderElement>;
            "arcgis-track": LocalJSX.ArcgisTrack & JSXBase.HTMLAttributes<HTMLArcgisTrackElement>;
            "arcgis-utility-network-associations": LocalJSX.ArcgisUtilityNetworkAssociations & JSXBase.HTMLAttributes<HTMLArcgisUtilityNetworkAssociationsElement>;
            "arcgis-utility-network-trace": LocalJSX.ArcgisUtilityNetworkTrace & JSXBase.HTMLAttributes<HTMLArcgisUtilityNetworkTraceElement>;
            "arcgis-utility-network-validate-topology": LocalJSX.ArcgisUtilityNetworkValidateTopology & JSXBase.HTMLAttributes<HTMLArcgisUtilityNetworkValidateTopologyElement>;
            "arcgis-value-picker": LocalJSX.ArcgisValuePicker & JSXBase.HTMLAttributes<HTMLArcgisValuePickerElement>;
            "arcgis-version-management": LocalJSX.ArcgisVersionManagement & JSXBase.HTMLAttributes<HTMLArcgisVersionManagementElement>;
            "arcgis-version-management-service-item": LocalJSX.ArcgisVersionManagementServiceItem & JSXBase.HTMLAttributes<HTMLArcgisVersionManagementServiceItemElement>;
            "arcgis-version-management-version-item": LocalJSX.ArcgisVersionManagementVersionItem & JSXBase.HTMLAttributes<HTMLArcgisVersionManagementVersionItemElement>;
            "arcgis-version-management-version-list": LocalJSX.ArcgisVersionManagementVersionList & JSXBase.HTMLAttributes<HTMLArcgisVersionManagementVersionListElement>;
            "arcgis-version-management-version-properties": LocalJSX.ArcgisVersionManagementVersionProperties & JSXBase.HTMLAttributes<HTMLArcgisVersionManagementVersionPropertiesElement>;
            "arcgis-weather": LocalJSX.ArcgisWeather & JSXBase.HTMLAttributes<HTMLArcgisWeatherElement>;
            "arcgis-zoom": LocalJSX.ArcgisZoom & JSXBase.HTMLAttributes<HTMLArcgisZoomElement>;
        }
    }
}
