import type { EventEmitter } from "../stencil-public-runtime";
import type { ArcGISMapView, ArcGISSceneView } from "../components/types";
import type { BaseSubComponent } from "./SubWidget";
import { SubWidget } from "./SubWidget";
import type { Nil } from "@arcgis/components-utils";
type WidgetOptions<ViewModel extends BaseViewModel, ViewModelParams> = {
    readonly component: BaseComponent<ViewModel>;
    readonly loadViewModel: (properties: Partial<ViewModelParams>) => Promise<ViewModel>;
};
type BaseViewModel = __esri.Evented & {
    state?: string;
    view?: ArcGISMapView | ArcGISSceneView | undefined;
};
export type BaseComponent<ViewModel extends BaseViewModel = BaseViewModel> = BaseSubComponent & {
    iconClass: Nil | string;
    icon: Nil | string;
    label: Nil | string;
    uiStrings?: Record<string, unknown>;
    view: ArcGISMapView | ArcGISSceneView | undefined;
    viewModel: ViewModel;
    componentReady: EventEmitter<{
        ready: boolean;
    }>;
    position: string;
    state?: ViewModel["state"];
};
export declare class Widget<ViewModel extends BaseViewModel, ViewModelParams> extends SubWidget {
    protected _options: WidgetOptions<ViewModel, ViewModelParams>;
    constructor(_options: WidgetOptions<ViewModel, ViewModelParams>);
    componentWillLoad(): Promise<void>;
    positionWatcher(): void;
    referenceElementWatcher(): Promise<void>;
    private _bindViewModelEvents;
    private _bindViewModelAliases;
    private _findViewModelAliases;
    propertyWatcher(propertyName: keyof ViewModel): void;
}
export {};
