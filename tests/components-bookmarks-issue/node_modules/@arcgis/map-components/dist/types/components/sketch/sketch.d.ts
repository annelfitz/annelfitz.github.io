import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type Sketch from "@arcgis/core/widgets/Sketch";
import type { ArcgisReferenceElement, WidgetElement } from "../../utils/component-utils";
import type { ArcGISMapView, ArcGISSceneView } from "../types";
export type SketchWidget = InstanceType<typeof Sketch>;
export declare class ArcgisSketch implements WidgetElement {
    el: HTMLDivElement;
    childElem: HTMLDivElement;
    referenceElement: ArcgisReferenceElement | string;
    referenceElementWatcher(value: ArcgisReferenceElement | string): void;
    activeTool: SketchWidget["activeTool"];
    availableCreateTools: SketchWidget["availableCreateTools"];
    availableCreateToolsWatcher(value: SketchWidget["availableCreateTools"]): void;
    createGraphic: SketchWidget["createGraphic"];
    creationMode: SketchWidget["creationMode"];
    creationModeWatcher(value: SketchWidget["creationMode"]): void;
    defaultCreateOptions: SketchWidget["defaultCreateOptions"];
    defaultCreateOptionsWatcher(value: SketchWidget["defaultCreateOptions"]): void;
    defaultUpdateOptions: SketchWidget["defaultUpdateOptions"];
    defaultUpdateOptionsWatcher(value: SketchWidget["defaultUpdateOptions"]): void;
    icon: SketchWidget["icon"];
    iconWatcher(value: SketchWidget["icon"]): void;
    labelOptions: SketchWidget["labelOptions"];
    labelOptionsWatcher(value: SketchWidget["labelOptions"]): void;
    layer: SketchWidget["layer"];
    layerWatcher(value: SketchWidget["layer"]): void;
    layout: SketchWidget["layout"];
    layoutWatcher(value: SketchWidget["layout"]): void;
    pointSymbol: SketchWidget["viewModel"]["pointSymbol"];
    pointSymbolWatcher(value: SketchWidget["viewModel"]["pointSymbol"]): void;
    polylineSymbol: SketchWidget["viewModel"]["polylineSymbol"];
    polylineSymbolWatcher(value: SketchWidget["viewModel"]["polylineSymbol"]): void;
    polygonSymbol: SketchWidget["viewModel"]["polygonSymbol"];
    polygonSymbolWatcher(value: SketchWidget["viewModel"]["polygonSymbol"]): void;
    snappingOptions: SketchWidget["snappingOptions"];
    snappingOptionsWatcher(value: SketchWidget["snappingOptions"]): void;
    tooltipOptions: SketchWidget["tooltipOptions"];
    tooltipOptionsWatcher(value: SketchWidget["tooltipOptions"]): void;
    updateGraphics: SketchWidget["updateGraphics"];
    visibleElementsCreateToolsPoint: boolean;
    visibleElementsCreateToolsPointWatcher(value: boolean): void;
    visibleElementsCreateToolsPolyline: boolean;
    visibleElementsCreateToolsPolylineWatcher(value: boolean): void;
    visibleElementsCreateToolsPolygon: boolean;
    visibleElementsCreateToolsPolygonWatcher(value: boolean): void;
    visibleElementsCreateToolsRectangle: boolean;
    visibleElementsCreateToolsRectangleWatcher(value: boolean): void;
    visibleElementsCreateToolsCircle: boolean;
    visibleElementsCreateToolsCircleWatcher(value: boolean): void;
    visibleElementsDuplicateButton: boolean;
    visibleElementsDuplicateButtonWatcher(value: boolean): void;
    visibleElementsSelectionToolsRectangle: boolean;
    visibleElementsSelectionToolsRectangleWatcher(value: boolean): void;
    visibleElementsSelectionToolsLasso: boolean;
    visibleElementsSelectionToolsLassoWatcher(value: boolean): void;
    visibleElementsSettingsMenu: boolean;
    visibleElementsSettingsMenuWatcher(value: boolean): void;
    visibleElementsLabelsToggle: boolean;
    visibleElementsLabelsToggleWatcher(value: boolean): void;
    visibleElementsTooltipsToggle: boolean;
    visibleElementsTooltipsToggleWatcher(value: boolean): void;
    visibleElementsSnappingControls: boolean;
    visibleElementsSnappingControlsWatcher(value: boolean): void;
    visibleElementsSnappingControlsElementsHeader: boolean;
    visibleElementsSnappingControlsElementsHeaderWatcher(value: boolean): void;
    visibleElementsSnappingControlsElementsEnabledToggle: boolean;
    visibleElementsSnappingControlsElementsEnabledToggleWatcher(value: boolean): void;
    visibleElementsSnappingControlsElementsSelfEnabledToggle: boolean;
    visibleElementsSnappingControlsElementsSelfEnabledToggleWatcher(value: boolean): void;
    visibleElementsSnappingControlsElementsFeatureEnabledToggle: boolean;
    visibleElementsSnappingControlsElementsFeatureEnabledToggleWatcher(value: boolean): void;
    visibleElementsSnappingControlsElementsLayerList: boolean;
    visibleElementsSnappingControlsElementsLayerListWatcher(value: boolean): void;
    visibleElementsUndoRedoMenu: boolean;
    visibleElementsUndoRedoMenuWatcher(value: boolean): void;
    position: string;
    positionWatcher(value: string): void;
    /**
     * Internal view of the component.
     *
     * @internal
     */
    view: ArcGISMapView | ArcGISSceneView;
    viewWatcher(value: ArcGISMapView): void;
    /**
     * Internal widget of the component.
     *
     * @internal
     */
    widget: SketchWidget;
    _watchHandles: __esri.WatchHandle[];
    arcgisSketchReady: EventEmitter<void>;
    sketchCreate: EventEmitter<__esri.SketchCreateEvent>;
    sketchDelete: EventEmitter<__esri.SketchDeleteEvent>;
    sketchRedo: EventEmitter<__esri.SketchRedoEvent>;
    sketchUndo: EventEmitter<__esri.SketchUndoEvent>;
    sketchUpdate: EventEmitter<__esri.SketchUpdateEvent>;
    cancel(): Promise<void>;
    complete(): Promise<void>;
    create(tool: "circle" | "point" | "polygon" | "polyline" | "rectangle", createOptions?: __esri.SketchViewModelCreateCreateOptions): Promise<void>;
    delete(): Promise<void>;
    duplicate(): Promise<void>;
    redo(): Promise<void>;
    undo(): Promise<void>;
    update(graphic: __esri.Graphic | __esri.Graphic[], updateOptions?: __esri.SketchViewModelUpdateUpdateOptions): Promise<void>;
    componentDidLoad(): Promise<void>;
    disconnectedCallback(): void;
    render(): VNode;
    private _addContainer;
    private _addWatchers;
    private _createParams;
    private _setViewModelParams;
    private _proxyEvents;
}
