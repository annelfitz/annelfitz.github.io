import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type Directions from "@arcgis/core/widgets/Directions";
import type { ArcgisReferenceElement, WidgetElement } from "../../utils/component-utils";
import type { ArcGISMapView, ArcGISSceneView } from "../types";
export type DirectionsWidget = InstanceType<typeof Directions>;
export declare class ArcgisDirections implements WidgetElement {
    el: HTMLDivElement;
    childElem: HTMLDivElement;
    referenceElement: ArcgisReferenceElement | string;
    referenceElementWatcher(value: ArcgisReferenceElement | string): void;
    apiKey: string;
    apiKeyWatcher(value: string): void;
    icon: DirectionsWidget["icon"];
    iconWatcher(value: DirectionsWidget["icon"]): void;
    routeLayerItemId: string;
    routeLayerItemIdWatcher(value: string): void;
    lastRoute: DirectionsWidget["lastRoute"];
    layer: DirectionsWidget["layer"];
    layerWatcher(value: DirectionsWidget["layer"], old: DirectionsWidget["layer"]): void;
    maxStops: number;
    maxStopsWatcher(value: number): void;
    searchProperties: DirectionsWidget["searchProperties"];
    searchPropertiesWatcher(value: DirectionsWidget["searchProperties"]): void;
    unit: DirectionsWidget["unit"];
    unitWatcher(value: DirectionsWidget["unit"]): void;
    useDefaultRouteLayer: boolean;
    visibleElementsLayerDetails: boolean;
    visibleElementsLayerDetailsWatcher(value: boolean): void;
    visibleElementsSaveAsButton: boolean;
    visibleElementsSaveAsButtonWatcher(value: boolean): void;
    visibleElementsSaveButton: boolean;
    visibleElementsSaveButtonWatcher(value: boolean): void;
    position: string;
    positionWatcher(value: string): void;
    /**
     * Internal view of the component.
     *
     * @internal
     */
    view: ArcGISMapView | ArcGISSceneView;
    viewWatcher(value: ArcGISMapView | ArcGISSceneView): void;
    /**
     * Internal widget of the component.
     *
     * @internal
     */
    widget: DirectionsWidget;
    _watchHandles: __esri.WatchHandle[];
    arcgisDirectionsReady: EventEmitter<void>;
    arcgisPropertyChange: EventEmitter<{
        name: string;
    }>;
    getDirections(): Promise<__esri.RouteLayerSolveResult>;
    save(): Promise<__esri.PortalItem>;
    saveAs(portalItem: Promise<__esri.PortalItem>, options: {
        folder: __esri.PortalFolder;
    }): Promise<__esri.PortalItem>;
    zoomToRoute(): Promise<void>;
    componentDidLoad(): Promise<void>;
    disconnectedCallback(): void;
    render(): VNode;
    private _addContainer;
    private _addWatchers;
    private _createParams;
}
