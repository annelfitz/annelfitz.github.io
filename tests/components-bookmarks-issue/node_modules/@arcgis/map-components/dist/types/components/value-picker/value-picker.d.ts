import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type ValuePicker from "@arcgis/core/widgets/ValuePicker";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
import type { ArcGISMapView, ArcGISSceneView } from "../types";
export type ValuePickerWidget = InstanceType<typeof ValuePicker>;
export declare class ArcgisValuePicker {
    el: HTMLDivElement;
    childElem: HTMLDivElement;
    referenceElement: ArcgisReferenceElement | string;
    view: ArcGISMapView | ArcGISSceneView;
    position: string;
    positionWatcher(newValue: string): void;
    widget: ValuePickerWidget;
    canNext: ValuePickerWidget["canNext"];
    canPlay: ValuePickerWidget["canPlay"];
    canPrevious: ValuePickerWidget["canPrevious"];
    caption: ValuePickerWidget["caption"];
    captionWatcher(newValue: ValuePickerWidget["caption"]): void;
    component: ValuePickerWidget["component"];
    componentWatcher(newValue: ValuePickerWidget["component"]): void;
    layout: ValuePickerWidget["layout"];
    layoutWatcher(newValue: ValuePickerWidget["layout"]): void;
    loop: ValuePickerWidget["loop"];
    loopWatcher(newValue: ValuePickerWidget["loop"]): void;
    playRate: ValuePickerWidget["playRate"];
    playRateWatcher(newValue: ValuePickerWidget["playRate"]): void;
    visibleElements: ValuePickerWidget["visibleElements"];
    visibleElementsWatcher(newValue: ValuePickerWidget["visibleElements"]): void;
    values: ValuePickerWidget["values"];
    _watchHandles: __esri.WatchHandle[];
    arcgisValuePickerReady: EventEmitter<void>;
    arcgisPropertyChange: EventEmitter<{
        name: string;
    }>;
    valuePickerAnimate: EventEmitter<__esri.ValuePickerAnimateEvent>;
    valuePickerNext: EventEmitter<__esri.ValuePickerNextEvent>;
    valuePickerPause: EventEmitter<__esri.ValuePickerPauseEvent>;
    valuePickerPlay: EventEmitter<__esri.ValuePickerPlayEvent>;
    valuePickerPrevious: EventEmitter<__esri.ValuePickerPreviousEvent>;
    next(): Promise<void>;
    pause(): Promise<void>;
    play(): Promise<void>;
    previous(): Promise<void>;
    componentDidLoad(): Promise<void>;
    disconnectedCallback(): void;
    render(): VNode;
    private _addWatchers;
    private _createParams;
    private _proxyEvents;
}
