import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type ArcGISMap from "@arcgis/core/Map";
import type { ViewElement } from "../../utils/component-utils";
import type { ArcGISMapView } from "../types";
export type ArcGISWebMap = InstanceType<typeof ArcGISMap>;
export declare class ArcgisMap implements ViewElement {
    el: HTMLDivElement;
    _hostElement: HTMLArcgisMapElement;
    /**
     * Collection containing a flat list of all the created LayerViews
     * related to the basemap, operational layers, and group layers in this view.
     */
    allLayerViews: ArcGISMapView["allLayerViews"];
    /**
     * The background color of the MapView. If the view's map changes, the view's `background` is reset to the map's background,
     * even if the user set it previously.
     */
    background: ArcGISMapView["background"];
    backgroundWatcher(value: ArcGISMapView["background"]): void;
    /**
     * Represents the view for a single basemap after it has been added to the map.
     */
    basemapView: ArcGISMapView["basemapView"];
    /**
     * Specifies a basemap for the map. The basemap is a set of layers that give
     * geographic context to the MapView or SceneView and the other operational layers
     * in the map.
     */
    basemap: __esri.Basemap | string;
    basemapWatcher(value: __esri.Basemap | string): void;
    /**
     * Represents the view's center point; when setting the center, you may pass a
     * esri/geometry/Point instance or a string representing
     * a longitude/latitude pair (`"-100.4593, 36.9014"`).
     * Setting the center immediately changes the current view.
     * For animating the view, see this component's goTo() method.
     */
    center: ArcGISMapView["center"] | number[] | string;
    centerWatcher(value: ArcGISMapView["center"] | number[] | string, old: ArcGISMapView["center"] | number[] | string): void;
    /**
     * Specifies constraints to scale, zoom, and rotation that may be applied to the MapView.
     */
    constraints: ArcGISMapView["constraints"];
    constraintsWatcher(value: ArcGISMapView["constraints"]): void;
    /**
     * Retains element and view state even when removed from DOM
     */
    destroyDisabled: boolean;
    /**
     * The extent represents the visible portion of a map within the view as an instance of esri/geometry/Extent.
     * Setting the extent immediately changes the view without animation. To animate
     * the view, see this component's goTo() method.
     * When the view is rotated, the extent does not update to include the newly visible portions of the map.
     */
    extent: ArcGISMapView["extent"];
    extentWatcher(value: ArcGISMapView["extent"]): void;
    /**
     * A rejected view indicates a fatal error making it unable to display.
     */
    fatalError: ArcGISMapView["fatalError"];
    /**
     * Applies a display filter on the view for a specific set of floor levels.
     * It can filter the map display on floor-aware layers by zero or more level IDs.
     */
    floors: ArcGISMapView["floors"];
    floorsWatcher(value: ArcGISMapView["floors"]): void;
    gamepad: __esri.GamepadSettings;
    /**
     * Allows for adding graphics directly to the default graphics in the View.
     * Example:
     * ```
     * // Adds a graphic to the View
     * graphics.add(pointGraphic);
     * ```
     * Example:
     * ```
     * // Removes a graphic from the View
     * graphics.remove(pointGraphic);
     * ```
     */
    graphics: ArcGISMapView["graphics"];
    graphicsWatcher(value: ArcGISMapView["graphics"]): void;
    /**
     * Options for configuring the highlight. Use the highlight method on the
     * appropriate esri/views/layers/LayerView to highlight a feature.
     * The layerView's `highlightOptions` will take precedence over the MapView's `highlightOptions` if both properties are set.
     */
    highlightOptions: ArcGISMapView["highlightOptions"];
    highlightOptionsWatcher(value: ArcGISMapView["highlightOptions"]): void;
    /**
     * Indication whether the view is being interacted with (for example when panning or by an interactive tool).
     */
    interacting: boolean;
    /**
     * The ID of a WebMap from ArcGIS Online or ArcGIS Enterprise portal.
     */
    itemId: string;
    itemIdWatcher(value: string, old: string): void;
    /**
     * A collection containing a hierarchical list of all the created
     * esri/views/layers/LayerView LayerViews of the
     * esri/Map#layers operational layers in the map.
     */
    layerViews: ArcGISMapView["layerViews"];
    /**
     * The magnifier allows for showing a portion of the view as a magnifier image on top of the view.
     */
    magnifier: ArcGISMapView["magnifier"];
    /**
     * An instance of a esri/Map object to display in the view.
     */
    map: ArcGISWebMap;
    mapWatcher(value: ArcGISWebMap): void;
    /**
     * Indication whether the view is being navigated (for example when panning).
     */
    navigating: boolean;
    /**
     * Options to configure the navigation behavior of the View.
     */
    navigation: ArcGISMapView["navigation"];
    navigationWatcher(value: ArcGISMapView["navigation"]): void;
    /**
     * Use the padding property to make the center,
     * and extent, etc. work off a
     * subsection of the full view. This is particularly useful when layering UI
     * elements or semi-transparent content on top of portions of the view.
     */
    padding: ArcGISMapView["padding"];
    paddingWatcher(value: ArcGISMapView["padding"]): void;
    /**
     * A Popup object that displays general content or attributes from layers in the map.
     */
    popup: ArcGISMapView["popup"];
    popupWatcher(value: ArcGISMapView["popup"]): void;
    /**
     * Controls whether the popup opens when users click on the view.
     */
    popupEnabled: boolean;
    popupEnabledWatcher(value: boolean, old: boolean): void;
    /**
     * When `true`, this property indicates whether the view successfully satisfied all dependencies,
     * signaling that the following conditions are met.
     */
    ready: boolean;
    /**
     * Defines which anchor stays still while resizing the browser window. The default, `center`,
     * ensures the view's center point remains constantly visible as the window size changes. The other
     * options allow  the respective portion of the view to remain visible when the window's size is changed.
     */
    resizeAlign: ArcGISMapView["resizeAlign"];
    resizeAlignWatcher(value: ArcGISMapView["resizeAlign"]): void;
    /**
     * Represents the current value of one pixel in the unit of the view's spatialReference.
     * The value of resolution is calculated by dividing the view's extent width
     * by its width.
     */
    resolution: ArcGISMapView["resolution"];
    /**
     * The clockwise rotation of due north in relation to the top of the view in degrees.
     * The view may be rotated by directly setting
     * the rotation or by using the following mouse event: `Right-click + Drag`.
     * Map rotation may be disabled by setting the `rotationEnabled` property
     * in [constraints](#constraints) to `false`. See the code snippet below for
     * an example of this.
     */
    rotation: number;
    rotationWatcher(value: number): void;
    /**
     * Represents the map scale at the center of the view. Setting the scale immediately changes the view. For animating
     * the view, see this component's goTo() method.
     */
    scale: number;
    scaleWatcher(value: number, old: number): void;
    /**
     * The spatial reference of the view.
     * This indicates the projected or geographic coordinate system used
     * to locate geographic features in the map.
     */
    spatialReference: ArcGISMapView["spatialReference"];
    spatialReferenceWatcher(value: ArcGISMapView["spatialReference"]): void;
    /**
     * Indication whether the view is animating, being navigated with or resizing.
     */
    stationary: boolean;
    /**
     * Indicates if the view is visible on the page.
     */
    suspended: boolean;
    /**
     * This property specifies the base colors used by some widgets
     * and components to render graphics and labels.
     */
    theme: ArcGISMapView["theme"];
    themeWatcher(value: ArcGISMapView["theme"]): void;
    /**
     * The view's time extent. Time-aware layers display their temporal data that falls within
     * the view's time extent. Setting the view's time extent is similar to setting the spatial
     * extent because once the time extent is set, the
     * view updates automatically to conform to the change.
     */
    timeExtent: ArcGISMapView["timeExtent"];
    timeExtentWatcher(value: ArcGISMapView["timeExtent"]): void;
    /**
     * Defines the time zone of the view.
     * The time zone property determines how dates and times are represented to the user,
     * but the underlying data is unchanged.
     */
    timeZone: ArcGISMapView["timeZone"];
    timeZoneWatcher(value: ArcGISMapView["timeZone"]): void;
    /**
     * toMap() function as a property.
     */
    toMap: ArcGISMapView["toMap"];
    /**
     * toScreen() function as a property.
     */
    toScreen: ArcGISMapView["toScreen"];
    /**
     * Indicates whether the view is being updated by additional data requests to the network,
     * or by processing received data.
     */
    updating: boolean;
    /**
     * Represents the current view as a Viewpoint or point of observation on the view.
     * Setting the viewpoint immediately changes the current view. For animating
     * the view, see this component's goTo() method.
     */
    viewpoint: ArcGISMapView["viewpoint"];
    viewpointWatcher(value: ArcGISMapView["viewpoint"]): void;
    /**
     * Represents the level of detail (LOD) at the center of the view.
     * A zoom level (or scale) is a number that defines how large or small the contents of a map appear in a map view.
     * Zoom level is a number usually between 0 (global view) and 23 (very detailed view) and is used as a shorthand for predetermined scale values.
     * A value of -1 means the view has no LODs.
     * When setting the zoom value, the MapView converts it to the corresponding scale, or interpolates it if the zoom is a fractional number.
     * MapView can display maps with different projections at a full range of scales, and so use the scale property on this component rather than zoom level.
     *
     * Setting the zoom immediately changes the current view. For animating the view, see this component's goTo() method.
     * Setting this property in conjunction with `center` is a convenient way to set the initial extent of the view.
     */
    zoom: number;
    zoomWatcher(value: number, old: number): void;
    /**
     * Internal view of the component.
     */
    view: ArcGISMapView;
    _watchHandles: __esri.WatchHandle[];
    /**
     * This event is for the `ready` property and will be emitted when the view is ready.
     * This event will also emit if the `map` property is changed.
     */
    arcgisViewReadyChange: EventEmitter<void>;
    /**
     * This event is for view related property changes: zoom, scale, center, rotation, extent, camera, viewpoint.
     * This event will also emit if stationary toggles from true to false.
     */
    arcgisViewChange: EventEmitter<void>;
    /**
     * Fires after a user clicks on the view.
     */
    arcgisViewClick: EventEmitter<__esri.ViewClickEvent>;
    /**
     * Fires after double-clicking on the view.
     */
    arcgisViewDoubleClick: EventEmitter<__esri.ViewDoubleClickEvent>;
    /**
     * Fires during a pointer drag on the view.
     */
    arcgisViewDrag: EventEmitter<__esri.ViewDragEvent>;
    /**
     * Fires during a pointer drag on the view.
     */
    arcgisViewHold: EventEmitter<__esri.ViewHoldEvent>;
    /**
     * Fires right after a user clicks on the view.
     */
    arcgisViewImmediateClick: EventEmitter<__esri.ViewImmediateClickEvent>;
    /**
     * Is emitted after two consecutive immediate-click events.
     */
    arcgisViewImmediateDoubleClick: EventEmitter<__esri.ViewImmediateDoubleClickEvent>;
    /**
     * Fires after a keyboard key is pressed.
     */
    arcgisViewKeyDown: EventEmitter<__esri.ViewKeyDownEvent>;
    /**
     * Fires after a keyboard key is pressed.
     */
    arcgisViewKeyUp: EventEmitter<__esri.ViewKeyUpEvent>;
    /**
     * Fires after each layer in the map has a corresponding LayerView created and rendered in the view.
     */
    arcgisViewLayerviewCreate: EventEmitter<__esri.ViewLayerviewCreateEvent>;
    /**
     * Fires when an error emits during the creation of a LayerView after a layer has been added to the map.
     */
    arcgisViewLayerviewCreateError: EventEmitter<__esri.ViewLayerviewCreateErrorEvent>;
    /**
     * Fires after a LayerView is destroyed and is no longer rendered in the view.
     */
    arcgisViewLayerviewDestroy: EventEmitter<__esri.ViewLayerviewDestroyEvent>;
    /**
     * Fires when a wheel button of a pointing device (typically a mouse) is scrolled on the view.
     */
    arcgisViewMouseWheel: EventEmitter<__esri.ViewMouseWheelEvent>;
    /**
     * Fires after a mouse button is pressed, or a finger touches the display.
     */
    arcgisViewPointerDown: EventEmitter<__esri.ViewPointerDownEvent>;
    /**
     * Fires after a mouse cursor enters the view, or a display touch begins.
     */
    arcgisViewPointerEnter: EventEmitter<__esri.ViewPointerEnterEvent>;
    /**
     * Fires after a mouse cursor leaves the view, or a display touch ends.
     */
    arcgisViewPointerLeave: EventEmitter<__esri.ViewPointerLeaveEvent>;
    /**
     * Fires after the mouse or a finger on the display moves.
     */
    arcgisViewPointerMove: EventEmitter<__esri.ViewPointerMoveEvent>;
    /**
     * Fires after a mouse button is released, or a display touch ends.
     */
    arcgisViewPointerUp: EventEmitter<__esri.ViewPointerUpEvent>;
    /**
     * Closes the popup.
     */
    closePopup(): Promise<void>;
    /**
     * Destroys the view, and any associated resources, including its map, popup, and UI elements.
     */
    destroy(): Promise<void>;
    /**
     * Sets the view to a given target.
     */
    goTo(target: __esri.GoToTarget2D, options?: __esri.GoToOptions2D): Promise<any>;
    /**
     * Returns hit test results from each layer that intersects the specified screen coordinates.
     */
    hitTest(screenPoint: __esri.ScreenPoint, options?: Record<string, any>): Promise<__esri.HitTestResult>;
    /**
     * Opens the popup at the given location with content defined either explicitly with content or driven
     * from the PopupTemplate of input features.
     */
    openPopup(options?: Record<string, any>): Promise<any>;
    /**
     * Create a screenshot of the current view.
     */
    takeScreenshot(options?: Record<string, any>): Promise<__esri.Screenshot>;
    /**
     * Call this method to clear any fatal errors resulting from a lost WebGL context.
     */
    tryFatalErrorRecovery(): Promise<void>;
    /**
     * Gets the LayerView created on the view for the given layer.
     */
    whenLayerView(layer: __esri.Layer): Promise<__esri.LayerView>;
    componentWillLoad(): Promise<void>;
    componentDidRender(): void;
    componentDidLoad(): void;
    disconnectedCallback(): void;
    render(): VNode;
    private _clearWatchHandles;
    private _addWatchers;
    private _createMap;
    private _createPortalItem;
    private _createViewParams;
    private _loadMap;
    private _proxyEvents;
    private _updateMap;
}
