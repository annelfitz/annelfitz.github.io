import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type Histogram from "@arcgis/core/widgets/Histogram";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
import type { ExpandableComponent } from "../../utils/expandable";
export type HistogramWidget = InstanceType<typeof Histogram>;
export declare class ArcgisHistogram implements ExpandableComponent {
    el: HTMLDivElement;
    childElem: HTMLDivElement;
    expandElem: HTMLArcgisExpandElement;
    referenceElement: ArcgisReferenceElement | string;
    average: HistogramWidget["average"];
    averageWatcher(newValue: HistogramWidget["average"]): void;
    barCreatedFunction: HistogramWidget["barCreatedFunction"];
    barCreatedFunctionWatcher(newValue: HistogramWidget["barCreatedFunction"]): void;
    bins: HistogramWidget["bins"];
    binsWatcher(newValue: HistogramWidget["bins"]): void;
    dataLineCreatedFunction: HistogramWidget["dataLineCreatedFunction"];
    dataLineCreatedFunctionWatcher(newValue: HistogramWidget["dataLineCreatedFunction"]): void;
    dataLines: HistogramWidget["dataLines"];
    dataLinesWatcher(newValue: HistogramWidget["dataLines"]): void;
    labelFormatFunction: HistogramWidget["labelFormatFunction"];
    labelFormatFunctionWatcher(newValue: HistogramWidget["labelFormatFunction"]): void;
    layout: HistogramWidget["layout"];
    layoutWatcher(newValue: HistogramWidget["layout"]): void;
    max: number;
    maxWatcher(newValue: number): void;
    min: number;
    minWatcher(newValue: number): void;
    state: HistogramWidget["state"];
    position: string;
    expandable: boolean;
    widget: HistogramWidget;
    _watchHandles: __esri.WatchHandle[];
    widgetReady: EventEmitter<{
        widget: __esri.Histogram;
    }>;
    componentDidLoad(): Promise<void>;
    render(): VNode;
    private _addWatchers;
    private _createParams;
}
