import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type Track from "@arcgis/core/widgets/Track";
import type { ArcgisReferenceElement, WidgetElement } from "../../utils/component-utils";
import type { ArcGISMapView, ArcGISSceneView } from "../types";
export type TrackWidget = InstanceType<typeof Track>;
export declare class ArcgisTrack implements WidgetElement {
    el: HTMLDivElement;
    childElem: HTMLDivElement;
    referenceElement: ArcgisReferenceElement | string;
    referenceElementWatcher(value: ArcgisReferenceElement | string): void;
    error: TrackWidget["viewModel"]["error"];
    geolocationOptions: TrackWidget["geolocationOptions"];
    geolocationOptionsWatcher(value: TrackWidget["geolocationOptions"]): void;
    goToLocationEnabled: boolean;
    goToLocationEnabledWatcher(value: boolean): void;
    graphic: TrackWidget["graphic"];
    graphicWatcher(value: TrackWidget["graphic"]): void;
    icon: TrackWidget["icon"];
    iconWatcher(value: TrackWidget["icon"]): void;
    positionFilterFunction: TrackWidget["viewModel"]["positionFilterFunction"];
    positionFilterFunctionWatcher(value: TrackWidget["viewModel"]["positionFilterFunction"]): void;
    rotationEnabled: boolean;
    rotationEnabledWatcher(value: boolean): void;
    scale: TrackWidget["scale"];
    scaleWatcher(value: TrackWidget["scale"]): void;
    state: TrackWidget["viewModel"]["state"];
    tracking: boolean;
    position: string;
    positionWatcher(value: string): void;
    /**
     * Internal view of the component.
     *
     * @internal
     */
    view: ArcGISMapView | ArcGISSceneView;
    viewWatcher(value: ArcGISMapView | ArcGISSceneView): void;
    /**
     * Internal widget of the component.
     *
     * @internal
     */
    widget: TrackWidget;
    _watchHandles: __esri.WatchHandle[];
    arcgisTrackReady: EventEmitter<void>;
    trackComplete: EventEmitter<__esri.TrackTrackEvent>;
    trackError: EventEmitter<__esri.TrackTrackErrorEvent>;
    start(): Promise<void>;
    stop(): Promise<void>;
    componentDidLoad(): Promise<void>;
    disconnectedCallback(): void;
    render(): VNode;
    private _addContainer;
    private _addWatchers;
    private _createParams;
    private _proxyEvents;
}
