import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type Slider from "@arcgis/core/widgets/Slider";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
import type { ExpandableComponent } from "../../utils/expandable";
export type SliderWidget = InstanceType<typeof Slider>;
export declare class ArcgisSlider implements ExpandableComponent {
    el: HTMLDivElement;
    childElem: HTMLDivElement;
    expandElem: HTMLArcgisExpandElement;
    referenceElement: ArcgisReferenceElement | string;
    draggableSegmentsEnabled: SliderWidget["draggableSegmentsEnabled"];
    draggableSegmentsEnabledWatcher(newValue: SliderWidget["draggableSegmentsEnabled"]): void;
    effectiveMax: SliderWidget["effectiveMax"];
    effectiveMaxWatcher(newValue: SliderWidget["effectiveMax"]): void;
    effectiveMin: SliderWidget["effectiveMin"];
    effectiveMinWatcher(newValue: SliderWidget["effectiveMin"]): void;
    effectiveSegmentElements: SliderWidget["effectiveSegmentElements"];
    labelElements: SliderWidget["labelElements"];
    labelInputsEnabled: SliderWidget["labelInputsEnabled"];
    labels: SliderWidget["labels"];
    layout: SliderWidget["layout"];
    layoutWatcher(newValue: SliderWidget["layout"]): void;
    min: SliderWidget["min"];
    minWatcher(newValue: SliderWidget["min"]): void;
    max: SliderWidget["max"];
    maxWatcher(newValue: SliderWidget["max"]): void;
    maxLabelElement: SliderWidget["maxLabelElement"];
    minLabelElement: SliderWidget["minLabelElement"];
    precision: SliderWidget["precision"];
    precisionWatcher(newValue: SliderWidget["precision"]): void;
    rangeLabelInputsEnabled: SliderWidget["rangeLabelInputsEnabled"];
    rangeLabelInputsEnabledWatcher(newValue: SliderWidget["rangeLabelInputsEnabled"]): void;
    segmentElements: SliderWidget["segmentElements"];
    snapOnClickEnabled: SliderWidget["snapOnClickEnabled"];
    snapOnClickEnabledWatcher(newValue: SliderWidget["snapOnClickEnabled"]): void;
    syncedSegmentsEnabled: SliderWidget["syncedSegmentsEnabled"];
    syncedSegmentsEnabledWatcher(newValue: SliderWidget["syncedSegmentsEnabled"]): void;
    thumbElements: SliderWidget["thumbElements"];
    thumbsConstrained: SliderWidget["thumbsConstrained"];
    thumbsConstrainedWatcher(newValue: SliderWidget["thumbsConstrained"]): void;
    tickConfigs: SliderWidget["tickConfigs"];
    tickConfigsWatcher(newValue: SliderWidget["tickConfigs"]): void;
    tickElements: SliderWidget["tickElements"];
    trackElement: SliderWidget["trackElement"];
    steps: SliderWidget["steps"] | string;
    stepsWatcher(newValue: SliderWidget["steps"]): void;
    values: SliderWidget["values"] | string;
    valuesWatcher(newValue: SliderWidget["values"] | string): void;
    position: string;
    expandable: boolean;
    widget: SliderWidget;
    _watchHandles: __esri.WatchHandle[];
    sliderMaxChange: EventEmitter<__esri.SliderMaxChangeEvent>;
    sliderMaxClick: EventEmitter<__esri.SliderMaxClickEvent>;
    sliderMinChange: EventEmitter<__esri.SliderMinChangeEvent>;
    sliderMinClick: EventEmitter<__esri.SliderMinClickEvent>;
    sliderSegmentClick: EventEmitter<__esri.SliderSegmentClickEvent>;
    sliderSegmentDrag: EventEmitter<__esri.SliderSegmentDragEvent>;
    sliderThumbChange: EventEmitter<__esri.SliderThumbChangeEvent>;
    sliderThumbClick: EventEmitter<__esri.SliderThumbClickEvent>;
    sliderThumbDrag: EventEmitter<__esri.SliderThumbDragEvent>;
    sliderTickClick: EventEmitter<__esri.SliderTickClickEvent>;
    sliderTrackClick: EventEmitter<__esri.SliderTrackClickEvent>;
    widgetReady: EventEmitter<{
        widget: __esri.Slider;
    }>;
    componentDidLoad(): Promise<void>;
    disconnectedCallback(): void;
    render(): VNode;
    private _addWatchers;
    private _createParams;
}
