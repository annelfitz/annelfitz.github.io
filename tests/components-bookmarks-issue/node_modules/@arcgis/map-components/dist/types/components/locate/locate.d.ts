import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type Locate from "@arcgis/core/widgets/Locate";
import type { ArcgisReferenceElement, WidgetElement } from "../../utils/component-utils";
import type { ArcGISMapView, ArcGISSceneView } from "../types";
export type LocateWidget = InstanceType<typeof Locate>;
export declare class ArcgisLocate implements WidgetElement {
    el: HTMLDivElement;
    childElem: HTMLDivElement;
    referenceElement: ArcgisReferenceElement | string;
    referenceElementWatcher(value: ArcgisReferenceElement | string): void;
    error: LocateWidget["viewModel"]["error"];
    geolocationOptions: LocateWidget["geolocationOptions"];
    geolocationOptionsWatcher(value: LocateWidget["geolocationOptions"]): void;
    goToLocationDisabled: LocateWidget["goToLocationEnabled"];
    goToLocationDisabledWatcher(value: LocateWidget["goToLocationEnabled"]): void;
    graphic: LocateWidget["graphic"];
    graphicWatcher(value: LocateWidget["graphic"]): void;
    icon: LocateWidget["icon"];
    iconWatcher(value: LocateWidget["icon"]): void;
    popupDisabled: LocateWidget["popupEnabled"];
    popupDisabledWatcher(value: LocateWidget["popupEnabled"]): void;
    scale: LocateWidget["scale"];
    scaleWatcher(value: LocateWidget["scale"]): void;
    state: LocateWidget["viewModel"]["state"];
    position: string;
    positionWatcher(value: string): void;
    /**
     * Internal view of the component.
     *
     * @internal
     */
    view: ArcGISMapView | ArcGISSceneView;
    viewWatcher(value: ArcGISMapView | ArcGISSceneView): void;
    /**
     * Internal widget of the component.
     *
     * @internal
     */
    widget: LocateWidget;
    _watchHandles: __esri.WatchHandle[];
    arcgisLocateReady: EventEmitter<void>;
    locateSuccess: EventEmitter<__esri.LocateLocateEvent>;
    locateError: EventEmitter<__esri.LocateLocateErrorEvent>;
    cancelLocate(): Promise<void>;
    locate(): Promise<any>;
    componentDidLoad(): Promise<void>;
    disconnectedCallback(): void;
    render(): VNode;
    private _addContainer;
    private _addWatchers;
    private _createParams;
    private _proxyEvents;
}
