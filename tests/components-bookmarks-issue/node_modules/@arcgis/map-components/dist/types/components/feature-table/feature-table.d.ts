import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type FeatureTable from "@arcgis/core/widgets/FeatureTable";
import type { ArcgisReferenceElement, WidgetElement } from "../../utils/component-utils";
import type { ArcGISMapView, ArcGISSceneView } from "../types";
export type FeatureTableWidget = InstanceType<typeof FeatureTable>;
export declare class ArcgisFeatureTable implements WidgetElement {
    el: HTMLDivElement;
    childElem: HTMLDivElement;
    referenceElement: ArcgisReferenceElement | string;
    referenceElementWatcher(value: ArcgisReferenceElement | string): void;
    activeFilters: FeatureTableWidget["activeFilters"];
    activeSortOrders: FeatureTableWidget["activeSortOrders"];
    attachmentsEnabled: boolean;
    attachmentsEnabledWatcher(value: boolean): void;
    autoRefreshEnabled: boolean;
    autoRefreshEnabledWatcher(value: boolean): void;
    columnReorderingEnabled: boolean;
    columnReorderingEnabledWatcher(value: boolean): void;
    columns: FeatureTableWidget["columns"];
    editingEnabled: boolean;
    editingEnabledWatcher(value: boolean): void;
    filterGeometry: FeatureTableWidget["filterGeometry"];
    filterGeometryWatcher(value: FeatureTableWidget["filterGeometry"]): void;
    hiddenFields: boolean;
    hiddenFieldsWatcher(value: FeatureTableWidget["hiddenFields"]): void;
    highlightEnabled: boolean;
    highlightEnabledWatcher(value: boolean): void;
    highlightIds: FeatureTableWidget["highlightIds"];
    highlightIdsWatcher(value: FeatureTableWidget["highlightIds"]): void;
    layer: FeatureTableWidget["layer"];
    layerWatcher(value: FeatureTableWidget["layer"]): void;
    menu: FeatureTableWidget["menu"];
    menuConfig: FeatureTableWidget["menuConfig"];
    menuConfigWatcher(value: FeatureTableWidget["menuConfig"]): void;
    multiSortEnabled: boolean;
    multiSortEnabledWatcher(value: boolean): void;
    pageSize: number;
    pageSizeWatcher(value: number): void;
    returnGeometryEnabled: boolean;
    returnGeometryEnabledWatcher(value: boolean): void;
    state: FeatureTableWidget["state"];
    tableTemplate: FeatureTableWidget["tableTemplate"];
    tableTemplateWatcher(value: FeatureTableWidget["tableTemplate"]): void;
    timeZone: FeatureTableWidget["timeZone"];
    timeZoneWatcher(value: FeatureTableWidget["timeZone"]): void;
    itemId: string;
    itemIdWatcher(value: string, old: string): Promise<void>;
    url: string;
    urlWatcher(value: string, old: string): Promise<void>;
    visibleElementsHeader: boolean;
    visibleElementsHeaderWatcher(value: boolean): void;
    visibleElementsMenu: boolean;
    visibleElementsMenuWatcher(value: boolean): void;
    visibleElementsSelectionColumn: boolean;
    visibleElementsSelectionColumnWatcher(value: boolean): void;
    visibleElementsColumnMenus: boolean;
    visibleElementsColumnMenusWatcher(value: boolean): void;
    visibleElementsMenuItemsClearSelection: boolean;
    visibleElementsMenuItemsClearSelectionWatcher(value: boolean): void;
    visibleElementsMenuItemsDeleteSelection: boolean;
    visibleElementsMenuItemsDeleteSelectionWatcher(value: boolean): void;
    visibleElementsMenuItemsRefreshData: boolean;
    visibleElementsMenuItemsRefreshDataWatcher(value: boolean): void;
    visibleElementsMenuItemsSelectedRecordsShowAllToggle: boolean;
    visibleElementsMenuItemsSelectedRecordsShowAllToggleWatcher(value: boolean): void;
    visibleElementsMenuItemsToggleColumns: boolean;
    visibleElementsMenuItemsToggleColumnsWatcher(value: boolean): void;
    visibleElementsMenuItemsZoomToSelection: boolean;
    visibleElementsMenuItemsZoomToSelectionWatcher(value: boolean): void;
    /**
     * Internal view of the component.
     *
     * @internal
     */
    view: ArcGISMapView | ArcGISSceneView;
    viewWatcher(value: ArcGISMapView): void;
    /**
     * Internal widget of the component.
     *
     * @internal
     */
    widget: FeatureTableWidget;
    _watchHandles: __esri.WatchHandle[];
    arcgisFeatureTableReady: EventEmitter<void>;
    featureTableSelectionChange: EventEmitter<__esri.CollectionChangeEvent<number>>;
    clearSelectionFilter(): Promise<void>;
    deleteSelection(showWarningPrompt?: boolean): Promise<void>;
    filterBySelection(): Promise<void>;
    findColumn(fieldName: string): Promise<__esri.Column | __esri.GroupColumn>;
    hideColumn(fieldName: string): Promise<void>;
    refresh(): Promise<void>;
    scrollToIndex(index: number): Promise<void>;
    showAllColumns(): Promise<void>;
    showColumn(fieldName: string): Promise<void>;
    sortColumn(path: string, direction: "asc" | "desc"): Promise<void>;
    zoomToSelection(): Promise<void>;
    componentDidLoad(): Promise<void>;
    disconnectedCallback(): void;
    render(): VNode;
    private _addContainer;
    private _addWatchers;
    private _createParams;
    private _proxyEvents;
}
