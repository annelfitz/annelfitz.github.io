import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type Search from "@arcgis/core/widgets/Search";
import type { ArcgisReferenceElement, WidgetElement } from "../../utils/component-utils";
import type { ArcGISMapView, ArcGISSceneView } from "../types";
export type SearchWidget = InstanceType<typeof Search>;
export declare class ArcgisSearch implements WidgetElement {
    el: HTMLDivElement;
    childElem: HTMLDivElement;
    referenceElement: ArcgisReferenceElement | string;
    referenceElementWatcher(value: ArcgisReferenceElement | string): void;
    activeMenu: SearchWidget["activeMenu"];
    activeMenuWatcher(value: SearchWidget["activeMenu"]): void;
    activeSource: SearchWidget["activeSource"];
    activeSourceIndex: number;
    activeSourceIndexWatcher(value: number): void;
    allPlaceholder: string;
    allPlaceholderWatcher(value: string): void;
    allSources: SearchWidget["allSources"];
    autoSelect: boolean;
    autoSelectWatcher(value: boolean): void;
    defaultSources: SearchWidget["defaultSources"];
    disabled: boolean;
    disabledWatcher(value: boolean, old: boolean): void;
    icon: SearchWidget["icon"];
    iconWatcher(value: SearchWidget["icon"]): void;
    includeDefaultSources: boolean;
    includeDefaultSourcesWatcher(value: boolean): void;
    locationEnabled: boolean;
    locationEnabledWatcher(value: boolean): void;
    maxResults: number;
    maxResultsWatcher(value: number): void;
    maxSuggestions: number;
    maxSuggestionsWatcher(value: number): void;
    minSuggestCharacters: number;
    minSuggestCharactersWatcher(value: number): void;
    popupEnabled: boolean;
    popupEnabledWatcher(value: boolean): void;
    popupTemplate: SearchWidget["popupTemplate"];
    popupTemplateWatcher(value: SearchWidget["popupTemplate"]): void;
    portal: SearchWidget["portal"];
    portalWatcher(value: SearchWidget["portal"]): void;
    resultGraphic: SearchWidget["resultGraphic"];
    resultGraphicEnabled: boolean;
    resultGraphicEnabledWatcher(value: boolean): void;
    results: SearchWidget["results"];
    searchAllEnabled: boolean;
    searchAllEnabledWatcher(value: boolean): void;
    searchTerm: SearchWidget["searchTerm"];
    searchTermWatcher(value: SearchWidget["searchTerm"]): void;
    selectedResult: SearchWidget["selectedResult"];
    sources: SearchWidget["sources"];
    sourcesWatcher(value: SearchWidget["sources"]): void;
    suggestions: SearchWidget["suggestions"];
    suggestionsEnabled: boolean;
    suggestionsEnabledWatcher(value: boolean): void;
    position: string;
    positionWatcher(value: string): void;
    /**
     * Internal view of the component.
     *
     * @internal
     */
    view: ArcGISMapView | ArcGISSceneView;
    viewWatcher(value: ArcGISMapView | ArcGISSceneView): void;
    /**
     * Internal widget of the component.
     *
     * @internal
     */
    widget: SearchWidget;
    _watchHandles: __esri.WatchHandle[];
    arcgisSearchReady: EventEmitter<void>;
    searchBlur: EventEmitter<__esri.SearchSearchBlurEvent>;
    searchClear: EventEmitter<__esri.SearchSearchClearEvent>;
    searchComplete: EventEmitter<__esri.SearchSearchCompleteEvent>;
    searchFocus: EventEmitter<__esri.SearchSearchFocusEvent>;
    searchStart: EventEmitter<__esri.SearchSearchStartEvent>;
    searchSelectResult: EventEmitter<__esri.SearchSelectResultEvent>;
    searchSuggestComplete: EventEmitter<__esri.SearchSuggestCompleteEvent>;
    searchSuggestStart: EventEmitter<__esri.SearchSuggestStartEvent>;
    blurSearch(): Promise<void>;
    clearSearch(): Promise<void>;
    focusSearch(): Promise<void>;
    search(term: __esri.Geometry | __esri.SuggestResult | number[][] | string): Promise<__esri.SearchResponse>;
    suggest(term: string): Promise<__esri.SuggestResponse>;
    componentDidLoad(): Promise<void>;
    disconnectedCallback(): void;
    render(): VNode;
    private _addContainer;
    private _addWatchers;
    private _createParams;
    private _proxyEvents;
}
