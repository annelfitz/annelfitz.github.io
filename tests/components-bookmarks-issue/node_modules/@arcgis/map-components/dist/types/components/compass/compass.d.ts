import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type Compass from "@arcgis/core/widgets/Compass";
import type { ArcgisReferenceElement, WidgetElement } from "../../utils/component-utils";
import type { ArcGISMapView, ArcGISSceneView } from "../types";
export type CompassWidget = InstanceType<typeof Compass>;
type CompassOrientation = {
    x?: number;
    y?: number;
    z?: number;
};
export declare class ArcgisCompass implements WidgetElement {
    el: HTMLDivElement;
    childElem: HTMLDivElement;
    referenceElement: ArcgisReferenceElement | string;
    referenceElementWatcher(value: ArcgisReferenceElement | string): void;
    orientation: CompassOrientation;
    orientationWatcher(value: CompassOrientation, old: CompassOrientation): void;
    icon: CompassWidget["icon"];
    iconWatcher(value: CompassWidget["icon"]): void;
    state: CompassWidget["viewModel"]["state"];
    position: string;
    positionWatcher(value: string): void;
    /**
     * Internal view of the component.
     *
     * @internal
     */
    view: ArcGISMapView | ArcGISSceneView;
    viewWatcher(value: ArcGISMapView | ArcGISSceneView): void;
    /**
     * Internal widget of the component.
     *
     * @internal
     */
    widget: CompassWidget;
    _watchHandles: __esri.WatchHandle[];
    arcgisCompassReady: EventEmitter<void>;
    arcgisPropertyChange: EventEmitter<{
        name: string;
    }>;
    reset(): Promise<void>;
    componentDidLoad(): Promise<void>;
    disconnectedCallback(): void;
    render(): VNode;
    private _addContainer;
    private _addWatchers;
    private _createParams;
    private _setViewModelParams;
}
export {};
