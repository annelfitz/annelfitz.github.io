import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type FeatureTemplates from "@arcgis/core/widgets/FeatureTemplates";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
import type { ExpandableComponent } from "../../utils/expandable";
export type FeatureTemplatesWidget = InstanceType<typeof FeatureTemplates>;
export declare class ArcgisFeatureTemplates implements ExpandableComponent {
    el: HTMLDivElement;
    childElem: HTMLDivElement;
    expandElem: HTMLArcgisExpandElement;
    referenceElement: ArcgisReferenceElement | string;
    position: string;
    expandable: boolean;
    widget: FeatureTemplatesWidget;
    enableListScroll: FeatureTemplatesWidget["enableListScroll"];
    enableListScrolWatcher(newValue: FeatureTemplatesWidget["enableListScroll"]): void;
    filterFunction: FeatureTemplatesWidget["filterFunction"];
    filterFunctionWatcher(newValue: FeatureTemplatesWidget["filterFunction"]): void;
    filterText: FeatureTemplatesWidget["filterText"];
    filterTextWatcher(newValue: FeatureTemplatesWidget["filterText"]): void;
    groupBy: FeatureTemplatesWidget["groupBy"];
    groupByWatcher(newValue: FeatureTemplatesWidget["groupBy"]): void;
    layers: FeatureTemplatesWidget["layers"];
    layersWatcher(newValue: FeatureTemplatesWidget["layers"]): void;
    selectionMode: FeatureTemplatesWidget["selectionMode"];
    selectionModeWatcher(newValue: FeatureTemplatesWidget["selectionMode"]): void;
    visibleElements: FeatureTemplatesWidget["visibleElements"];
    visibleElementsWatcher(newValue: FeatureTemplatesWidget["visibleElements"]): void;
    _watchHandles: __esri.WatchHandle[];
    widgetReady: EventEmitter<{
        widget: __esri.FeatureTemplates;
    }>;
    featureTemplatesSelect: EventEmitter<__esri.FeatureTemplatesSelectEvent>;
    componentDidLoad(): Promise<void>;
    disconnectedCallback(): void;
    render(): VNode;
    private _createParams;
    private _proxyEvents;
}
