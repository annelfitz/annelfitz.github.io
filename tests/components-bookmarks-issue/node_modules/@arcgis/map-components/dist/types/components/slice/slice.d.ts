import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type Slice from "@arcgis/core/widgets/Slice";
import type { ArcgisReferenceElement, WidgetElement } from "../../utils/component-utils";
import type { ArcGISSceneView } from "../types";
export type SliceWidget = InstanceType<typeof Slice>;
export declare class ArcgisSlice implements WidgetElement {
    el: HTMLDivElement;
    childElem: HTMLDivElement;
    referenceElement: ArcgisReferenceElement | string;
    referenceElementWatcher(value: ArcgisReferenceElement | string): void;
    analysis: SliceWidget["analysis"];
    excludedLayers: SliceWidget["viewModel"]["excludedLayers"];
    excludedLayersWatcher(value: SliceWidget["viewModel"]["excludedLayers"]): void;
    excludeGroundSurface: boolean;
    excludeGroundSurfaceWatcher(value: boolean): void;
    icon: SliceWidget["icon"];
    iconWatcher(value: SliceWidget["icon"]): void;
    shape: SliceWidget["viewModel"]["shape"];
    shapeWatcher(value: SliceWidget["viewModel"]["shape"]): void;
    tiltEnabled: boolean;
    tiltEnabledWatcher(value: boolean): void;
    position: string;
    positionWatcher(value: string): void;
    /**
     * Internal view of the component.
     *
     * @internal
     */
    view: ArcGISSceneView;
    viewWatcher(value: ArcGISSceneView): void;
    /**
     * Internal widget of the component.
     *
     * @internal
     */
    widget: SliceWidget;
    _watchHandles: __esri.WatchHandle[];
    arcgisSliceReady: EventEmitter<void>;
    arcgisPropertyChange: EventEmitter<{
        name: string;
    }>;
    clear(): Promise<void>;
    start(): Promise<void>;
    componentDidLoad(): Promise<void>;
    disconnectedCallback(): void;
    render(): VNode;
    private _addContainer;
    private _addWatchers;
    private _createParams;
}
