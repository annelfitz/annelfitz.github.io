import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type Features from "@arcgis/core/widgets/Features";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
import type { ArcGISMapView, ArcGISSceneView } from "../types";
export type FeaturesWidget = InstanceType<typeof Features>;
export declare class ArcgisFeatures {
    el: HTMLDivElement;
    childElem: HTMLDivElement;
    referenceElement: ArcgisReferenceElement | string;
    referenceElementWatcher(value: ArcgisReferenceElement | string): void;
    collapsed: boolean;
    content: FeaturesWidget["content"];
    contentWatcher(value: FeaturesWidget["content"]): void;
    features: FeaturesWidget["features"];
    featuresWatcher(value: FeaturesWidget["features"]): void;
    icon: FeaturesWidget["icon"];
    iconWatcher(value: FeaturesWidget["icon"]): void;
    promises: FeaturesWidget["promises"];
    selectedFeature: FeaturesWidget["selectedFeature"];
    selectedFeatureIndex: FeaturesWidget["selectedFeatureIndex"];
    featuresTitle: FeaturesWidget["title"];
    featuresTitleWatcher(value: FeaturesWidget["title"]): void;
    visibleElementsActionBar: boolean;
    visibleElementsActionBarWatcher(value: boolean): void;
    visibleElementsCloseButton: boolean;
    visibleElementsCloseButtonWatcher(value: boolean): void;
    visibleElementsCollapseButton: boolean;
    visibleElementsCollapseButtonWatcher(value: boolean): void;
    visibleElementsFeatureNavigation: boolean;
    visibleElementsFeatureNavigationWatcher(value: boolean): void;
    visibleElementsHeading: boolean;
    visibleElementsHeadingWatcher(value: boolean): void;
    visibleElementsSpinner: boolean;
    visibleElementsSpinnerWatcher(value: boolean): void;
    position: string;
    positionWatcher(value: string): void;
    /**
     * Internal view of the component.
     *
     * @internal
     */
    view: ArcGISMapView | ArcGISSceneView;
    viewWatcher(value: ArcGISMapView | ArcGISSceneView): void;
    /**
     * Internal widget of the component.
     *
     * @internal
     */
    widget: FeaturesWidget;
    _watchHandles: __esri.WatchHandle[];
    arcgisFeaturesReady: EventEmitter<void>;
    arcgisPropertyChange: EventEmitter<{
        name: string;
    }>;
    featuresTriggerAction: EventEmitter<__esri.FeaturesTriggerActionEvent>;
    fetchFeatures(screenPoint: __esri.FeaturesFetchFeaturesScreenPoint, options?: __esri.FetchFeaturesOptions): Promise<__esri.FetchPopupFeaturesResult>;
    clear(): Promise<void>;
    close(): Promise<void>;
    next(): Promise<__esri.FeaturesViewModel>;
    open(options?: __esri.FeaturesOpenOptions): Promise<void>;
    previous(): Promise<__esri.FeaturesViewModel>;
    triggerAction(actionIndex: number): Promise<void>;
    componentDidLoad(): Promise<void>;
    disconnectedCallback(): void;
    render(): VNode;
    private _addContainer;
    private _addWatchers;
    private _createParams;
    private _proxyEvents;
}
