import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type Measurement from "@arcgis/core/widgets/Measurement";
import type { ArcgisReferenceElement, WidgetElement } from "../../utils/component-utils";
import type { ArcGISMapView, ArcGISSceneView } from "../types";
export type MeasurementWidget = InstanceType<typeof Measurement>;
export declare class ArcgisMeasurement implements WidgetElement {
    el: HTMLDivElement;
    childElem: HTMLDivElement;
    referenceElement: ArcgisReferenceElement | string;
    referenceElementWatcher(value: ArcgisReferenceElement | string): void;
    activeTool: MeasurementWidget["activeTool"];
    activeToolWatcher(value: MeasurementWidget["activeTool"]): void;
    activeComponent: MeasurementWidget["activeWidget"];
    areaUnit: MeasurementWidget["areaUnit"];
    areaUnitWatcher(value: MeasurementWidget["areaUnit"]): void;
    icon: MeasurementWidget["icon"];
    iconWatcher(value: MeasurementWidget["icon"]): void;
    linearUnit: MeasurementWidget["linearUnit"];
    linearUnitWatcher(value: MeasurementWidget["linearUnit"]): void;
    position: string;
    positionWatcher(value: string): void;
    view: ArcGISMapView | ArcGISSceneView;
    viewWatcher(value: ArcGISMapView | ArcGISSceneView): void;
    widget: MeasurementWidget;
    _watchHandles: __esri.WatchHandle[];
    arcgisMeasurementReady: EventEmitter<void>;
    clear(): Promise<void>;
    startMeasurement(): Promise<void>;
    componentDidLoad(): Promise<void>;
    disconnectedCallback(): void;
    render(): VNode;
    private _addContainer;
    private _addWatchers;
    private _createParams;
}
