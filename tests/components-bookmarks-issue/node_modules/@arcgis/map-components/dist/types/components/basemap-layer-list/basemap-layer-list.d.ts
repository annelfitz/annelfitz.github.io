import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type BasemapLayerList from "@arcgis/core/widgets/BasemapLayerList";
import type { ArcgisReferenceElement, WidgetElement } from "../../utils/component-utils";
import type { ArcGISMapView, ArcGISSceneView } from "../types";
export type BasemapLayerListWidget = InstanceType<typeof BasemapLayerList>;
export declare class ArcgisBasemapLayerList implements WidgetElement {
    el: HTMLDivElement;
    childElem: HTMLDivElement;
    referenceElement: ArcgisReferenceElement | string;
    referenceElementWatcher(value: ArcgisReferenceElement | string): void;
    baseFilterText: string;
    baseFilterTextWatcher(value: string): void;
    baseItems: BasemapLayerListWidget["baseItems"];
    baseListItemCreatedFunction: BasemapLayerListWidget["baseListItemCreatedFunction"];
    baseListItemCreatedFunctionWatcher(value: BasemapLayerListWidget["baseListItemCreatedFunction"]): void;
    basemapTitle: string;
    basemapTitleWatcher(value: string, old: string): void;
    collapsed: boolean;
    collapsedWatcher(value: boolean): void;
    dragEnabled: boolean;
    dragEnabledWatcher(value: boolean): void;
    editingTitle: boolean;
    editingTitleWatcher(value: boolean): void;
    filterPlaceholder: string;
    filterPlaceholderWatcher(value: string): void;
    icon: BasemapLayerListWidget["icon"];
    iconWatcher(value: BasemapLayerListWidget["icon"]): void;
    minFilterItems: number;
    minFilterItemsWatcher(value: number): void;
    referenceFilterText: string;
    referenceFilterTextWatcher(value: string): void;
    referenceListItemCreatedFunction: BasemapLayerListWidget["referenceListItemCreatedFunction"];
    referenceListItemCreatedFunctionWatcher(value: BasemapLayerListWidget["referenceListItemCreatedFunction"]): void;
    selectedItems: BasemapLayerListWidget["selectedItems"];
    selectionMode: BasemapLayerListWidget["selectionMode"];
    selectionModeWatcher(value: BasemapLayerListWidget["selectionMode"]): void;
    visibilityAppearance: BasemapLayerListWidget["visibilityAppearance"];
    visibilityAppearanceWatcher(value: BasemapLayerListWidget["visibilityAppearance"]): void;
    visibleElementsBaseLayers: boolean;
    visibleElementsBaseLayersWatcher(value: boolean): void;
    visibleElementsCloseButton: boolean;
    visibleElementsCloseButtonWatcher(value: boolean): void;
    visibleElementsCollapseButton: boolean;
    visibleElementsCollapseButtonWatcher(value: boolean): void;
    visibleElementsEditTitleButton: boolean;
    visibleElementsEditTitleButtonWatcher(value: boolean): void;
    visibleElementsErrors: boolean;
    visibleElementsErrorsWatcher(value: boolean): void;
    visibleElementsFilter: boolean;
    visibleElementsFilterWatcher(value: boolean): void;
    visibleElementsFlow: boolean;
    visibleElementsFlowWatcher(value: boolean): void;
    visibleElementsHeading: boolean;
    visibleElementsHeadingWatcher(value: boolean): void;
    visibleElementsReferenceLayers: boolean;
    visibleElementsReferenceLayersWatcher(value: boolean): void;
    visibleElementsStatusIndicators: boolean;
    visibleElementsStatusIndicatorsWatcher(value: boolean): void;
    visibleElementsTemporaryLayerIndicators: boolean;
    visibleElementsTemporaryLayerIndicatorsWatcher(value: boolean): void;
    /**
     * Internal view of the component.
     *
     * @internal
     */
    view: ArcGISMapView | ArcGISSceneView;
    viewWatcher(value: ArcGISMapView | ArcGISSceneView): void;
    /**
     * Internal widget of the component.
     *
     * @internal
     */
    widget: BasemapLayerListWidget;
    position: string;
    positionWatcher(value: string): void;
    _watchHandles: __esri.WatchHandle[];
    arcgisBasemapLayerListReady: EventEmitter<void>;
    basemapLayerListTriggerAction: EventEmitter<__esri.BasemapLayerListTriggerActionEvent>;
    componentDidLoad(): Promise<void>;
    disconnectedCallback(): void;
    render(): VNode;
    private _addContainer;
    private _createParams;
    private _addWatchers;
    private _proxyEvents;
}
