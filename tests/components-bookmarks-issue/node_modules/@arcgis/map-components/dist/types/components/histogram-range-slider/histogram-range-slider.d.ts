import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type HistogramRangeSlider from "@arcgis/core/widgets/HistogramRangeSlider";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
import type { ExpandableComponent } from "../../utils/expandable";
export type HistogramRangeSliderWidget = InstanceType<typeof HistogramRangeSlider>;
export declare class ArcgisHistogramRangeSlider implements ExpandableComponent {
    el: HTMLDivElement;
    childElem: HTMLDivElement;
    expandElem: HTMLArcgisExpandElement;
    referenceElement: ArcgisReferenceElement | string;
    average: HistogramRangeSliderWidget["average"];
    averageWatcher(newValue: HistogramRangeSliderWidget["average"]): void;
    barCreatedFunction: HistogramRangeSliderWidget["barCreatedFunction"];
    barCreatedFunctionWatcher(newValue: HistogramRangeSliderWidget["barCreatedFunction"]): void;
    bins: HistogramRangeSliderWidget["bins"];
    binsWatcher(newValue: HistogramRangeSliderWidget["bins"]): void;
    dataLineCreatedFunction: HistogramRangeSliderWidget["dataLineCreatedFunction"];
    dataLineCreatedFunctionWatcher(newValue: HistogramRangeSliderWidget["dataLineCreatedFunction"]): void;
    dataLines: HistogramRangeSliderWidget["dataLines"];
    dataLinesWatcher(newValue: HistogramRangeSliderWidget["dataLines"]): void;
    excludedBarColor: HistogramRangeSliderWidget["excludedBarColor"];
    excludedBarColorWatcher(newValue: HistogramRangeSliderWidget["excludedBarColor"]): void;
    includedBarColor: HistogramRangeSliderWidget["includedBarColor"];
    includedBarColorWatcher(newValue: HistogramRangeSliderWidget["includedBarColor"]): void;
    labelFormatFunction: HistogramRangeSliderWidget["labelFormatFunction"];
    labelFormatFunctionWatcher(newValue: HistogramRangeSliderWidget["labelFormatFunction"]): void;
    max: number;
    maxWatcher(newValue: number): void;
    min: number;
    minWatcher(newValue: number): void;
    precision: HistogramRangeSliderWidget["precision"];
    precisionWatcher(newValue: HistogramRangeSliderWidget["precision"]): void;
    rangeType: HistogramRangeSliderWidget["rangeType"];
    rangeTypeWatcher(newValue: HistogramRangeSliderWidget["rangeType"]): void;
    standardDeviation: HistogramRangeSliderWidget["standardDeviation"];
    standardDeviationWatcher(newValue: HistogramRangeSliderWidget["standardDeviation"]): void;
    standardDeviationCount: HistogramRangeSliderWidget["standardDeviationCount"];
    standardDeviationCountWatcher(newValue: HistogramRangeSliderWidget["standardDeviationCount"]): void;
    values: HistogramRangeSliderWidget["values"];
    valuesWatcher(newValue: HistogramRangeSliderWidget["values"]): void;
    position: string;
    expandable: boolean;
    widget: HistogramRangeSliderWidget;
    _watchHandles: __esri.WatchHandle[];
    widgetReady: EventEmitter<{
        widget: __esri.HistogramRangeSlider;
    }>;
    componentDidLoad(): Promise<void>;
    disconnectedCallback(): void;
    render(): VNode;
    private _createParams;
}
