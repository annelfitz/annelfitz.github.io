import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type ArcGISMap from "@arcgis/core/Map";
import type { ViewElement } from "../../utils/component-utils";
import type { ArcGISSceneView } from "../types";
export type ArcGISWebScene = InstanceType<typeof ArcGISMap>;
export declare class ArcgisScene implements ViewElement {
    el: HTMLDivElement;
    _hostElement: HTMLArcgisSceneElement;
    allLayerViews: ArcGISSceneView["allLayerViews"];
    alphaCompositingEnabled: boolean;
    alphaCompositingEnabledWatcher(value: boolean): void;
    analyses: ArcGISSceneView["analyses"];
    basemapView: ArcGISSceneView["basemapView"];
    basemap: __esri.Basemap | string;
    basemapWatcher(value: __esri.Basemap | string): void;
    camera: ArcGISSceneView["camera"];
    cameraWatcher(value: ArcGISSceneView["camera"]): void;
    center: ArcGISSceneView["center"] | number[] | string;
    centerWatcher(value: ArcGISSceneView["center"] | number[] | string, old: ArcGISSceneView["center"] | number[] | string): void;
    clippingArea: ArcGISSceneView["clippingArea"];
    clippingAreaWatcher(value: ArcGISSceneView["clippingArea"]): void;
    constraints: ArcGISSceneView["constraints"];
    constraintsWatcher(value: ArcGISSceneView["constraints"]): void;
    destroyDisabled: boolean;
    environment: ArcGISSceneView["environment"];
    environmentWatcher(value: ArcGISSceneView["environment"]): void;
    extent: ArcGISSceneView["extent"];
    extentWatcher(value: ArcGISSceneView["extent"]): void;
    fatalError: ArcGISSceneView["fatalError"];
    floors: ArcGISSceneView["floors"];
    floorsWatcher(value: ArcGISSceneView["floors"]): void;
    gamepad: __esri.GamepadSettings;
    graphics: ArcGISSceneView["graphics"];
    graphicsWatcher(value: ArcGISSceneView["graphics"]): void;
    ground: ArcGISWebScene["ground"];
    groundWatcher(value: string): void;
    groundView: ArcGISSceneView["groundView"];
    highlightOptions: ArcGISSceneView["highlightOptions"];
    highlightOptionsWatcher(value: ArcGISSceneView["highlightOptions"]): void;
    interacting: boolean;
    itemId: string;
    itemIdWatcher(value: string, old: string): void;
    layerViews: ArcGISSceneView["layerViews"];
    magnifier: ArcGISSceneView["magnifier"];
    map: ArcGISWebScene;
    mapWatcher(value: ArcGISWebScene): void;
    navigating: boolean;
    navigation: ArcGISSceneView["navigation"];
    navigationWatcher(value: ArcGISSceneView["navigation"]): void;
    padding: ArcGISSceneView["padding"];
    paddingWatcher(value: ArcGISSceneView["padding"]): void;
    performanceInfo: ArcGISSceneView["performanceInfo"];
    popup: ArcGISSceneView["popup"];
    popupWatcher(value: ArcGISSceneView["popup"]): void;
    popupEnabled: boolean;
    popupEnabledWatcher(value: boolean, old: boolean): void;
    qualityProfile: ArcGISSceneView["qualityProfile"];
    qualityProfileWatcher(value: ArcGISSceneView["qualityProfile"]): void;
    ready: boolean;
    resolution: ArcGISSceneView["resolution"];
    scale: number;
    scaleWatcher(value: number, old: number): void;
    spatialReference: ArcGISSceneView["spatialReference"];
    spatialReferenceWatcher(value: ArcGISSceneView["spatialReference"]): void;
    stationary: boolean;
    suspended: boolean;
    theme: ArcGISSceneView["theme"];
    themeWatcher(value: ArcGISSceneView["theme"]): void;
    timeExtent: ArcGISSceneView["timeExtent"];
    timeExtentWatcher(value: ArcGISSceneView["timeExtent"]): void;
    toMap: ArcGISSceneView["toMap"];
    toScreen: ArcGISSceneView["toScreen"];
    updating: boolean;
    viewingMode: ArcGISSceneView["viewingMode"];
    viewingModeWatcher(value: ArcGISSceneView["viewingMode"]): void;
    viewpoint: ArcGISSceneView["viewpoint"];
    viewpointWatcher(value: ArcGISSceneView["viewpoint"]): void;
    zoom: number;
    zoomWatcher(value: number, old: number): void;
    /**
     * Internal view of the component.
     */
    view: ArcGISSceneView;
    config: __esri.config;
    _watchHandles: __esri.WatchHandle[];
    /**
     * This event is for the `ready` property and will be emitted when the view is ready.
     * This event will also emit if the `map` property is changed.
     */
    arcgisViewReadyChange: EventEmitter<void>;
    arcgisViewChange: EventEmitter<void>;
    arcgisViewClick: EventEmitter<__esri.ViewClickEvent>;
    arcgisViewDoubleClick: EventEmitter<__esri.ViewDoubleClickEvent>;
    arcgisViewDrag: EventEmitter<__esri.ViewDragEvent>;
    arcgisViewHold: EventEmitter<__esri.ViewHoldEvent>;
    arcgisViewImmediateClick: EventEmitter<__esri.ViewImmediateClickEvent>;
    arcgisViewImmediateDoubleClick: EventEmitter<__esri.ViewImmediateDoubleClickEvent>;
    arcgisViewKeyDown: EventEmitter<__esri.ViewKeyDownEvent>;
    arcgisViewKeyUp: EventEmitter<__esri.ViewKeyUpEvent>;
    arcgisViewLayerviewCreate: EventEmitter<__esri.ViewLayerviewCreateEvent>;
    arcgisViewLayerviewCreateError: EventEmitter<__esri.ViewLayerviewCreateErrorEvent>;
    arcgisViewLayerviewDestroy: EventEmitter<__esri.ViewLayerviewDestroyEvent>;
    arcgisViewMouseWheel: EventEmitter<__esri.ViewMouseWheelEvent>;
    arcgisViewPointerDown: EventEmitter<__esri.ViewPointerDownEvent>;
    arcgisViewPointerEnter: EventEmitter<__esri.ViewPointerEnterEvent>;
    arcgisViewPointerLeave: EventEmitter<__esri.ViewPointerLeaveEvent>;
    arcgisViewPointerMove: EventEmitter<__esri.ViewPointerMoveEvent>;
    arcgisViewPointerUp: EventEmitter<__esri.ViewPointerUpEvent>;
    closePopup(): Promise<void>;
    destroy(): Promise<void>;
    goTo(target: __esri.GoToTarget3D, options?: __esri.GoToOptions3D): Promise<any>;
    hitTest(screenPoint: __esri.ScreenPoint, options?: Record<string, any>): Promise<__esri.HitTestResult>;
    openPopup(options?: Record<string, any>): Promise<any>;
    takeScreenshot(options?: Record<string, any>): Promise<__esri.Screenshot>;
    tryFatalErrorRecovery(): Promise<void>;
    whenAnalysisView(analysis: __esri.AreaMeasurementAnalysis | __esri.DimensionAnalysis | __esri.DirectLineMeasurementAnalysis | __esri.LineOfSightAnalysis | __esri.SliceAnalysis): Promise<__esri.AreaMeasurementAnalysisView3D | __esri.DimensionAnalysisView | __esri.DirectLineMeasurementAnalysisView3D | __esri.LineOfSightAnalysisView3D | __esri.SliceAnalysisView3D>;
    whenLayerView(layer: __esri.Layer): Promise<__esri.LayerView>;
    componentWillLoad(): Promise<void>;
    componentDidRender(): void;
    componentDidLoad(): void;
    disconnectedCallback(): void;
    render(): VNode;
    private _clearWatchHandles;
    private _addWatchers;
    private _createMap;
    private _createPortalItem;
    private _createViewParams;
    private _loadMap;
    private _proxyEvents;
    private _updateMap;
}
