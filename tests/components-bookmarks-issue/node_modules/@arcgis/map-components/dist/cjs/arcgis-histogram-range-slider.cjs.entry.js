/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6e62126d.js');
const index$1 = require('./index-b2323407.js');
const componentUtils = require('./component-utils-e47db275.js');
const disconnected = require('./disconnected-bc6a8942.js');

const histogramRangeSliderCss = "arcgis-histogram-range-slider{}";

const ArcgisHistogramRangeSlider = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.widgetReady = index.createEvent(this, "widgetReady", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.average = undefined;
        this.barCreatedFunction = undefined;
        this.bins = undefined;
        this.dataLineCreatedFunction = undefined;
        this.dataLines = undefined;
        this.excludedBarColor = undefined;
        this.includedBarColor = undefined;
        this.labelFormatFunction = undefined;
        this.max = 0;
        this.min = 0;
        this.precision = undefined;
        this.rangeType = undefined;
        this.standardDeviation = undefined;
        this.standardDeviationCount = undefined;
        this.values = undefined;
        this.position = "bottom-left";
        this.expandable = false;
        this.widget = undefined;
    }
    averageWatcher(newValue) {
        if (this.widget) {
            this.widget.average = newValue;
        }
    }
    barCreatedFunctionWatcher(newValue) {
        if (this.widget) {
            this.widget.barCreatedFunction = newValue;
        }
    }
    binsWatcher(newValue) {
        if (this.widget) {
            this.widget.bins = newValue;
        }
    }
    dataLineCreatedFunctionWatcher(newValue) {
        if (this.widget) {
            this.widget.dataLineCreatedFunction = newValue;
        }
    }
    dataLinesWatcher(newValue) {
        if (this.widget) {
            this.widget.dataLines = newValue;
        }
    }
    excludedBarColorWatcher(newValue) {
        if (this.widget) {
            this.widget.excludedBarColor = newValue;
        }
    }
    includedBarColorWatcher(newValue) {
        if (this.widget) {
            this.widget.includedBarColor = newValue;
        }
    }
    labelFormatFunctionWatcher(newValue) {
        if (this.widget) {
            this.widget.labelFormatFunction = newValue;
        }
    }
    maxWatcher(newValue) {
        if (this.widget) {
            this.widget.max = Number(newValue);
        }
    }
    minWatcher(newValue) {
        if (this.widget) {
            this.widget.min = Number(newValue);
        }
    }
    precisionWatcher(newValue) {
        if (this.widget) {
            this.widget.precision = newValue;
        }
    }
    rangeTypeWatcher(newValue) {
        if (this.widget) {
            this.widget.rangeType = newValue;
        }
    }
    standardDeviationWatcher(newValue) {
        if (this.widget) {
            this.widget.standardDeviation = newValue;
        }
    }
    standardDeviationCountWatcher(newValue) {
        if (this.widget) {
            this.widget.standardDeviationCount = newValue;
        }
    }
    valuesWatcher(newValue) {
        if (this.widget) {
            this.widget.values = newValue;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await index$1.newWidgetsHistogramRangeSlider(params);
        this.widget = widget;
        this.widgetReady.emit({ widget: this.widget });
        componentUtils.checkForView(this);
    }
    disconnectedCallback() {
        disconnected.onDisconnectedHelper(this);
    }
    render() {
        if (this.expandable) {
            return (index.h("arcgis-expand", { position: this.position, ref: (el) => (this.expandElem = el) }, index.h("div", { ref: (el) => (this.childElem = el) })));
        }
        return index.h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _createParams() {
        const params = {
            container: this.childElem,
            min: this.min,
            max: this.max
        };
        if (this.average !== undefined) {
            params.average = this.average;
        }
        if (this.barCreatedFunction) {
            params.barCreatedFunction = this.barCreatedFunction;
        }
        if (this.bins !== undefined) {
            params.bins = this.bins;
        }
        if (this.dataLineCreatedFunction) {
            params.dataLineCreatedFunction = this.dataLineCreatedFunction;
        }
        if (this.dataLines !== undefined) {
            params.dataLines = this.dataLines;
        }
        if (this.excludedBarColor) {
            params.excludedBarColor = this.excludedBarColor;
        }
        if (this.includedBarColor) {
            params.includedBarColor = this.includedBarColor;
        }
        if (this.labelFormatFunction) {
            params.labelFormatFunction = this.labelFormatFunction;
        }
        if (this.precision !== undefined) {
            params.precision = this.precision;
        }
        if (this.rangeType) {
            params.rangeType = this.rangeType;
        }
        if (this.standardDeviation !== undefined) {
            params.standardDeviation = this.standardDeviation;
        }
        if (this.standardDeviationCount !== undefined) {
            params.standardDeviationCount = this.standardDeviationCount;
        }
        if (this.values !== undefined) {
            params.values = this.values;
        }
        return params;
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "average": ["averageWatcher"],
        "barCreatedFunction": ["barCreatedFunctionWatcher"],
        "bins": ["binsWatcher"],
        "dataLineCreatedFunction": ["dataLineCreatedFunctionWatcher"],
        "dataLines": ["dataLinesWatcher"],
        "excludedBarColor": ["excludedBarColorWatcher"],
        "includedBarColor": ["includedBarColorWatcher"],
        "labelFormatFunction": ["labelFormatFunctionWatcher"],
        "max": ["maxWatcher"],
        "min": ["minWatcher"],
        "precision": ["precisionWatcher"],
        "rangeType": ["rangeTypeWatcher"],
        "standardDeviation": ["standardDeviationWatcher"],
        "standardDeviationCount": ["standardDeviationCountWatcher"],
        "values": ["valuesWatcher"]
    }; }
};
ArcgisHistogramRangeSlider.style = histogramRangeSliderCss;

exports.arcgis_histogram_range_slider = ArcgisHistogramRangeSlider;
