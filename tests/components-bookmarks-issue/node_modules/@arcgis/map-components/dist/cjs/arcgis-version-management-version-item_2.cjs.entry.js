/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6e62126d.js');
const index$1 = require('./index-b2323407.js');

const ArcgisVersionManagementVersionItem = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.versionItemActionClickedEvent = index.createEvent(this, "versionItemActionClickedEvent", 7);
        this.strings = undefined;
        this.hasAdvEditingUte = undefined;
        this.isVersioningApiAvailable = undefined;
        this.versionInfo = undefined;
    }
    render() {
        const { strings: { actions }, versionInfo } = this;
        const fullVersionName = versionInfo.versionIdentifier.name;
        const guid = versionInfo.versionIdentifier.guid;
        const actionElementId = `actionSwitchToVersion_${guid}`;
        return (index.h(index.Host, null, index.h("calcite-list-item", { description: fullVersionName.split(".")[0], label: fullVersionName.split(".")[1], value: guid }, index.h("calcite-action", { id: actionElementId, icon: "switch", text: "", onClick: () => {
                this.versionItemActionClickedEvent.emit({ actionType: "changeVersion", versionInfo });
            }, slot: "actions-start" }), index.h("calcite-tooltip", { "overlay-positioning": "fixed", referenceElement: actionElementId }, index.h("span", null, actions.switchToVersion)), index.h("calcite-action-menu", { "overlay-positioning": "fixed", slot: "actions-end", label: "" }, index.h("calcite-action", { icon: "switch", onClick: () => {
                this.versionItemActionClickedEvent.emit({ actionType: "changeVersion", versionInfo });
            }, scale: "s", text: actions.switchToVersion, textEnabled: true }), index.h("calcite-action", { disabled: fullVersionName.toUpperCase() === "SDE.DEFAULT" ||
                !this.hasAdvEditingUte ||
                !this.isVersioningApiAvailable, icon: "edit-attributes", onClick: () => {
                this.versionItemActionClickedEvent.emit({ actionType: "editVersion", versionInfo });
            }, scale: "s", text: actions.editVersion, textEnabled: true })))));
    }
    get _hostElement() { return index.getElement(this); }
};

const ArcgisVersionManagementVersionList = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.versionItemActionClickedEventWithServiceUrl = index.createEvent(this, "versionItemActionClickedEventWithServiceUrl", 7);
        this.versionListActionClickedEvent = index.createEvent(this, "versionListActionClickedEvent", 7);
        this._watchHandles = [];
        this.heading = undefined;
        this.serviceName = undefined;
        this.serviceUrl = undefined;
        this.strings = undefined;
        this.userHasAdvancedEditingUserTypeExtension = undefined;
        this.versionInfos = undefined;
        this.viewModel = undefined;
        this.state = undefined;
    }
    async componentDidLoad() {
        const { watch } = await index$1.importCoreReactiveUtils();
        this._watchHandles.push(watch(() => this.versionInfos, (versionInfos) => {
            this.versionInfos = versionInfos;
        }), watch(() => this.viewModel.state, (state) => {
            this.state = state;
        }));
    }
    async componentWillLoad() {
        this.state = this.viewModel.state;
    }
    disconnectedCallback() {
        this._watchHandles.forEach((handle) => {
            handle.remove();
        });
        this._watchHandles = [];
    }
    render() {
        const { heading, serviceName, serviceUrl, state, strings, versionInfos, viewModel } = this;
        // @ts-ignore
        const currentVersionIdentifier = viewModel.versionIdentifierLookup.get(serviceUrl);
        return (index.h(index.Host, null, index.h("calcite-flow-item", { heading: heading, description: serviceName }, currentVersionIdentifier ? (index.h("calcite-panel", { disabled: state === "executing", class: "panel-versions", heading: "Current version", description: currentVersionIdentifier.name })) : undefined, index.h("calcite-panel", { loading: state === "executing", class: "panel-versions", heading: versionInfos.length
                ? `${strings.headers.manageVersions} (${versionInfos.length})`
                : strings.headers.manageVersions }, index.h("calcite-action", { id: "actionRefreshVersions", icon: "refresh", text: "", onClick: () => {
                this.versionListActionClickedEvent.emit({
                    actionType: "refreshVersions",
                    serviceUrl
                });
            }, slot: "header-actions-end" }), index.h("calcite-tooltip", { "overlay-positioning": "fixed", referenceElement: "actionRefreshVersions" }, index.h("span", null, strings.actions.refreshVersions)), index.h("calcite-list", { class: "version-list", filterEnabled: true }, versionInfos.map((versionInfo) => (index.h("arcgis-version-management-version-item", { strings: strings, hasAdvEditingUte: viewModel.advancedEditingUserTypeExtensionLookup.get(serviceUrl), isVersioningApiAvailable: (viewModel.serverVersionLookup.get(serviceUrl) ?? 0) >= 11.2, versionInfo: versionInfo, onVersionItemActionClickedEvent: (e) => {
                this.versionItemActionClickedEventWithServiceUrl.emit({ ...e.detail, serviceUrl });
            } })))), index.h("calcite-fab", { appearance: "outline-fill", slot: "fab", textEnabled: true, text: strings.actions.newVersion, onClick: () => {
                this.versionListActionClickedEvent.emit({
                    actionType: "newVersion",
                    serviceUrl
                });
            } })))));
    }
    get _hostElement() { return index.getElement(this); }
};

exports.arcgis_version_management_version_item = ArcgisVersionManagementVersionItem;
exports.arcgis_version_management_version_list = ArcgisVersionManagementVersionList;
