/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6e62126d.js');
const index$1 = require('./index-b2323407.js');
const componentUtils = require('./component-utils-e47db275.js');
const disconnected = require('./disconnected-bc6a8942.js');

const expandCss = "arcgis-expand>.esri-expand__content--expanded{background-color:var(--calcite-color-background)}";

const ArcgisExpand = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisExpandReady = index.createEvent(this, "arcgisExpandReady", 7);
        this._watchHandles = [];
        this.autoCollapse = false;
        this.closeOnEsc = true;
        this.collapseIcon = undefined;
        this.collapseTooltip = undefined;
        this.expanded = false;
        this.expandIcon = undefined;
        this.expandTooltip = undefined;
        this.group = undefined;
        this.iconNumber = undefined;
        this.mode = "auto";
        this.referenceElement = undefined;
        this.position = "top-right";
        this.view = undefined;
        this.widget = undefined;
    }
    autoCollapseWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.autoCollapse = value;
        }
    }
    closeOnEscWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.closeOnEsc = value;
        }
    }
    collapseIconWatcher(value) {
        if (this.widget) {
            this.widget.collapseIcon = value;
        }
    }
    collapseTooltipWatcher(value) {
        if (this.widget) {
            this.widget.collapseTooltip = value;
        }
    }
    expandedWatcher(value) {
        if (this.widget && this.widget.expanded !== value) {
            this.widget.expanded = value;
        }
    }
    expandIconWatcher(value) {
        if (this.widget) {
            this.widget.expandIcon = value;
        }
    }
    expandTooltipWatcher(value) {
        if (this.widget) {
            this.widget.expandTooltip = value;
        }
    }
    groupWatcher(value) {
        if (this.widget) {
            this.widget.group = value;
        }
    }
    iconNumberWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.iconNumber = value;
        }
    }
    modeWatcher(value) {
        if (this.widget) {
            this.widget.mode = value;
        }
    }
    referenceElementWatcher(value) {
        void componentUtils.referenceElementHelper(this, value);
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async collapse() {
        this.widget?.collapse();
    }
    async expand() {
        this.widget?.expand();
    }
    async toggle() {
        if (this.expanded)
            await this.collapse();
        else
            await this.expand();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await index$1.newWidgetsExpand(params);
        this.widget = widget;
        await this._addWatchers();
        this._addContainer();
        this.arcgisExpandReady.emit();
        this._checkForView();
    }
    disconnectedCallback() {
        disconnected.onDisconnectedHelper(this);
    }
    render() {
        return index.h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Internal Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await index$1.importCoreReactiveUtils();
        componentUtils.addHandles(this, [
            watch(() => this.widget.expanded, (value) => (this.expanded = value))
        ]);
    }
    _createParams() {
        const params = {};
        if (this.autoCollapse !== undefined) {
            params.autoCollapse = this.autoCollapse;
        }
        if (this.closeOnEsc !== undefined) {
            params.closeOnEsc = this.closeOnEsc;
        }
        if (this.collapseIcon) {
            params.collapseIcon = this.collapseIcon;
        }
        if (this.collapseTooltip) {
            params.collapseTooltip = this.collapseTooltip;
        }
        if (this.expanded !== undefined) {
            params.expanded = this.expanded;
        }
        if (this.expandIcon) {
            params.expandIcon = this.expandIcon;
        }
        if (this.expandTooltip) {
            params.expandTooltip = this.expandTooltip;
        }
        if (this.group) {
            params.group = this.group;
        }
        if (this.iconNumber !== undefined) {
            params.iconNumber = this.iconNumber;
        }
        if (this.mode) {
            params.mode = this.mode;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    _checkForView() {
        const viewRef = this.el.closest("arcgis-map") ?? this.el.closest("arcgis-scene");
        if (viewRef?.view) {
            this.view = viewRef.view;
            this.view.ui.add(this.childElem, this.position);
        }
        else if (viewRef) {
            const handler = () => {
                viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
                this.view = viewRef.view;
                this.view.ui.add(this.childElem, this.position);
            };
            viewRef.addEventListener("arcgisViewReadyChange", handler, false);
        }
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "autoCollapse": ["autoCollapseWatcher"],
        "closeOnEsc": ["closeOnEscWatcher"],
        "collapseIcon": ["collapseIconWatcher"],
        "collapseTooltip": ["collapseTooltipWatcher"],
        "expanded": ["expandedWatcher"],
        "expandIcon": ["expandIconWatcher"],
        "expandTooltip": ["expandTooltipWatcher"],
        "group": ["groupWatcher"],
        "iconNumber": ["iconNumberWatcher"],
        "mode": ["modeWatcher"],
        "referenceElement": ["referenceElementWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisExpand.style = expandCss;

exports.arcgis_expand = ArcgisExpand;
