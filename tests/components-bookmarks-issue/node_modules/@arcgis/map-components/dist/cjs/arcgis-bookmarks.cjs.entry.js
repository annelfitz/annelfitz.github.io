/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6e62126d.js');
const index$1 = require('./index-b2323407.js');
const componentUtils = require('./component-utils-e47db275.js');
const disconnected = require('./disconnected-bc6a8942.js');

const bookmarksCss = "";

const ArcgisBookmarks = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisBookmarksReady = index.createEvent(this, "arcgisBookmarksReady", 7);
        this.bookmarkEdit = index.createEvent(this, "bookmarkEdit", 7);
        this.bookmarkSelect = index.createEvent(this, "bookmarkSelect", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.bookmarks = undefined;
        this.defaultCreateOptions = undefined;
        this.defaultEditOptions = undefined;
        this.disabled = false;
        this.dragEnabled = false;
        this.filterPlaceholder = undefined;
        this.filterText = undefined;
        this.icon = undefined;
        this.visibleElementsAddBookmarkButton = false;
        this.visibleElementsCloseButton = false;
        this.visibleElementsCollapseButton = false;
        this.visibleElementsEditBookmarkButton = false;
        this.visibleElementsFilter = false;
        this.visibleElementsFlow = true;
        this.visibleElementsHeading = false;
        this.visibleElementsThumbnail = true;
        this.visibleElementsTime = true;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void componentUtils.referenceElementHelper(this, value);
    }
    bookmarksWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.bookmarks = value;
        }
    }
    defaultCreateOptionsWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.defaultCreateOptions = value;
        }
    }
    defaultEditOptionsWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.defaultEditOptions = value;
        }
    }
    disabledWatcher(value, old) {
        if (this.widget && value !== old) {
            this.widget.disabled = value;
        }
    }
    dragEnabledWatcher(value) {
        if (this.widget) {
            this.widget.dragEnabled = value;
        }
    }
    filterPlaceholderWatcher(value) {
        if (this.widget) {
            this.widget.filterPlaceholder = value;
        }
    }
    filterTextWatcher(value) {
        if (this.widget) {
            this.widget.filterText = value;
        }
    }
    iconWatcher(value) {
        if (this.widget) {
            this.widget.icon = value;
        }
    }
    visibleElementsAddBookmarkButtonWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = { ...this.widget.visibleElements, addBookmarkButton: value };
        }
    }
    visibleElementsCloseButtonWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = { ...this.widget.visibleElements, closeButton: value };
        }
    }
    visibleElementsCollapseButtonWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = { ...this.widget.visibleElements, collapseButton: value };
        }
    }
    visibleElementsEditBookmarkButtonWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = { ...this.widget.visibleElements, editBookmarkButton: value };
        }
    }
    visibleElementsFilterWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = { ...this.widget.visibleElements, filter: value };
        }
    }
    visibleElementsFlowWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = { ...this.widget.visibleElements, flow: value };
        }
    }
    visibleElementsHeadingWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = { ...this.widget.visibleElements, heading: value };
        }
    }
    visibleElementsThumbnailWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = { ...this.widget.visibleElements, thumbnail: value };
        }
    }
    visibleElementsTimeWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = { ...this.widget.visibleElements, time: value };
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await index$1.newWidgetsBookmarks(params);
        this.widget = widget;
        await this._addWatchers();
        this._proxyEvents();
        this._addContainer();
        this.arcgisBookmarksReady.emit();
        componentUtils.checkForView(this);
    }
    disconnectedCallback() {
        disconnected.onDisconnectedHelper(this);
    }
    render() {
        return index.h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await index$1.importCoreReactiveUtils();
        componentUtils.addHandles(this, [
            watch(() => this.widget.disabled, (value) => (this.disabled = value))
        ]);
    }
    _createParams() {
        const params = {};
        params.visibleElements = {
            addBookmarkButton: this.visibleElementsAddBookmarkButton,
            closeButton: this.visibleElementsCloseButton,
            collapseButton: this.visibleElementsCollapseButton,
            editBookmarkButton: this.visibleElementsEditBookmarkButton,
            filter: this.visibleElementsFilter,
            flow: this.visibleElementsFlow,
            heading: this.visibleElementsHeading,
            thumbnail: this.visibleElementsThumbnail,
            time: this.visibleElementsTime
        };
        if (this.view) {
            params.view = this.view;
        }
        if (this.bookmarks) {
            params.bookmarks = this.bookmarks;
        }
        if (this.defaultCreateOptions) {
            params.defaultCreateOptions = this.defaultCreateOptions;
        }
        if (this.defaultEditOptions) {
            params.defaultEditOptions = this.defaultEditOptions;
        }
        if (this.dragEnabled !== undefined) {
            params.dragEnabled = this.dragEnabled;
        }
        if (this.filterPlaceholder) {
            params.filterPlaceholder = this.filterPlaceholder;
        }
        if (this.filterText) {
            params.filterText = this.filterText;
        }
        if (this.icon) {
            params.icon = this.icon;
        }
        return params;
    }
    _proxyEvents() {
        this.widget.on("bookmark-edit", (e) => this.bookmarkEdit.emit(e));
        this.widget.on("bookmark-select", (e) => this.bookmarkSelect.emit(e));
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "bookmarks": ["bookmarksWatcher"],
        "defaultCreateOptions": ["defaultCreateOptionsWatcher"],
        "defaultEditOptions": ["defaultEditOptionsWatcher"],
        "disabled": ["disabledWatcher"],
        "dragEnabled": ["dragEnabledWatcher"],
        "filterPlaceholder": ["filterPlaceholderWatcher"],
        "filterText": ["filterTextWatcher"],
        "icon": ["iconWatcher"],
        "visibleElementsAddBookmarkButton": ["visibleElementsAddBookmarkButtonWatcher"],
        "visibleElementsCloseButton": ["visibleElementsCloseButtonWatcher"],
        "visibleElementsCollapseButton": ["visibleElementsCollapseButtonWatcher"],
        "visibleElementsEditBookmarkButton": ["visibleElementsEditBookmarkButtonWatcher"],
        "visibleElementsFilter": ["visibleElementsFilterWatcher"],
        "visibleElementsFlow": ["visibleElementsFlowWatcher"],
        "visibleElementsHeading": ["visibleElementsHeadingWatcher"],
        "visibleElementsThumbnail": ["visibleElementsThumbnailWatcher"],
        "visibleElementsTime": ["visibleElementsTimeWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisBookmarks.style = bookmarksCss;

exports.arcgis_bookmarks = ArcgisBookmarks;
