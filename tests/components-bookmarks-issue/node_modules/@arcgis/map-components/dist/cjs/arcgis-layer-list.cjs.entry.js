/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6e62126d.js');
const index$1 = require('./index-b2323407.js');
const componentUtils = require('./component-utils-e47db275.js');
const disconnected = require('./disconnected-bc6a8942.js');

const layerListCss = "";

const ArcgisLayerList = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisLayerListReady = index.createEvent(this, "arcgisLayerListReady", 7);
        this.layerListTriggerAction = index.createEvent(this, "layerListTriggerAction", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.collapsed = false;
        this.dragEnabled = false;
        this.filterPlaceholder = "";
        this.filterText = "";
        this.icon = undefined;
        this.listItemCreatedFunction = undefined;
        this.minDragEnabledItems = 2;
        this.minFilterItems = 10;
        this.selectedItems = undefined;
        this.selectionMode = "none";
        this.visibilityAppearance = "default";
        this.visibleElementsCloseButton = false;
        this.visibleElementsCollapseButton = false;
        this.visibleElementsErrors = false;
        this.visibleElementsFilter = false;
        this.visibleElementsFlow = true;
        this.visibleElementsHeading = false;
        this.visibleElementsStatusIndicators = true;
        this.visibleElementsTemporaryLayerIndicators = false;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void componentUtils.referenceElementHelper(this, value);
    }
    collapsedWatcher(value) {
        if (this.widget && this.widget.collapsed !== value) {
            this.widget.collapsed = value;
        }
    }
    dragEnabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.dragEnabled = value;
        }
    }
    filterPlaceholderWatcher(value) {
        if (this.widget) {
            this.widget.filterPlaceholder = value;
        }
    }
    filterTextWatcher(value) {
        if (this.widget) {
            this.widget.filterText = value;
        }
    }
    iconWatcher(value) {
        if (this.widget) {
            this.widget.icon = value;
        }
    }
    listItemCreatedFunctionWatcher(value) {
        if (this.widget) {
            this.widget.listItemCreatedFunction = value;
        }
    }
    minDragEnabledItemsWatcher(value) {
        if (this.widget) {
            this.widget.minDragEnabledItems = value;
        }
    }
    minFilterItemsWatcher(value) {
        if (this.widget) {
            this.widget.minFilterItems = value;
        }
    }
    selectionModeWatcher(value) {
        if (this.widget) {
            this.widget.selectionMode = value;
        }
    }
    visibilityAppearanceWatcher(value) {
        if (this.widget) {
            this.widget.visibilityAppearance = value;
        }
    }
    visibleElementsCloseButtonWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                closeButton: value
            };
        }
    }
    visibleElementsCollapseButtonWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                collapseButton: value
            };
        }
    }
    visibleElementsErrorsWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                errors: value
            };
        }
    }
    visibleElementsFilterWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                filter: value
            };
        }
    }
    visibleElementsFlowWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                flow: value
            };
        }
    }
    visibleElementsHeadingWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                heading: value
            };
        }
    }
    visibleElementsStatusIndicatorsWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                statusIndicators: value
            };
        }
    }
    visibleElementsTemporaryLayerIndicatorsWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                temporaryLayerIndicators: value
            };
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async triggerAction(action, item) {
        this.widget?.triggerAction(action, item);
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await index$1.newWidgetsLayerList(params);
        this.widget = widget;
        await this._addWatchers();
        this._proxyEvents();
        this.arcgisLayerListReady.emit();
        componentUtils.checkForView(this);
    }
    disconnectedCallback() {
        disconnected.onDisconnectedHelper(this);
    }
    render() {
        return index.h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    async _addWatchers() {
        const { watch } = await index$1.importCoreReactiveUtils();
        componentUtils.addHandles(this, [
            watch(() => this.widget.selectedItems, (value) => (this.selectedItems = value), {
                initial: true
            }),
            watch(() => this.widget.collapsed, (value) => (this.collapsed = value))
        ]);
    }
    _createParams() {
        const params = {
            container: this.childElem
        };
        params.visibleElements = {
            closeButton: this.visibleElementsCloseButton,
            collapseButton: this.visibleElementsCollapseButton,
            errors: this.visibleElementsErrors,
            filter: this.visibleElementsFilter,
            flow: this.visibleElementsFlow,
            heading: this.visibleElementsHeading,
            statusIndicators: this.visibleElementsStatusIndicators,
            temporaryLayerIndicators: this.visibleElementsTemporaryLayerIndicators
        };
        if (this.collapsed !== undefined) {
            params.collapsed = this.collapsed;
        }
        if (this.dragEnabled !== undefined) {
            params.dragEnabled = this.dragEnabled;
        }
        if (this.filterPlaceholder) {
            params.filterPlaceholder = this.filterPlaceholder;
        }
        if (this.filterText) {
            params.filterText = this.filterText;
        }
        if (this.icon) {
            params.icon = this.icon;
        }
        if (this.listItemCreatedFunction) {
            params.listItemCreatedFunction = this.listItemCreatedFunction;
        }
        if (this.minDragEnabledItems !== undefined) {
            params.minDragEnabledItems = this.minDragEnabledItems;
        }
        if (this.minFilterItems !== undefined) {
            params.minFilterItems = this.minFilterItems;
        }
        if (this.selectedItems) {
            params.selectedItems = this.selectedItems;
        }
        if (this.selectionMode) {
            params.selectionMode = this.selectionMode;
        }
        if (this.visibilityAppearance) {
            params.visibilityAppearance = this.visibilityAppearance;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    _proxyEvents() {
        this.widget?.on("trigger-action", (e) => this.layerListTriggerAction.emit(e));
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "collapsed": ["collapsedWatcher"],
        "dragEnabled": ["dragEnabledWatcher"],
        "filterPlaceholder": ["filterPlaceholderWatcher"],
        "filterText": ["filterTextWatcher"],
        "icon": ["iconWatcher"],
        "listItemCreatedFunction": ["listItemCreatedFunctionWatcher"],
        "minDragEnabledItems": ["minDragEnabledItemsWatcher"],
        "minFilterItems": ["minFilterItemsWatcher"],
        "selectionMode": ["selectionModeWatcher"],
        "visibilityAppearance": ["visibilityAppearanceWatcher"],
        "visibleElementsCloseButton": ["visibleElementsCloseButtonWatcher"],
        "visibleElementsCollapseButton": ["visibleElementsCollapseButtonWatcher"],
        "visibleElementsErrors": ["visibleElementsErrorsWatcher"],
        "visibleElementsFilter": ["visibleElementsFilterWatcher"],
        "visibleElementsFlow": ["visibleElementsFlowWatcher"],
        "visibleElementsHeading": ["visibleElementsHeadingWatcher"],
        "visibleElementsStatusIndicators": ["visibleElementsStatusIndicatorsWatcher"],
        "visibleElementsTemporaryLayerIndicators": ["visibleElementsTemporaryLayerIndicatorsWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisLayerList.style = layerListCss;

exports.arcgis_layer_list = ArcgisLayerList;
