/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6e62126d.js');
const index$1 = require('./index-b2323407.js');
const componentUtils = require('./component-utils-e47db275.js');
const disconnected = require('./disconnected-bc6a8942.js');

const elevationProfileCss = "";

const ArcgisElevationProfile = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisElevationProfileReady = index.createEvent(this, "arcgisElevationProfileReady", 7);
        this.arcgisPropertyChange = index.createEvent(this, "arcgisPropertyChange", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.effectiveUnits = undefined;
        this.highlightEnabled = true;
        this.hoveredChartPosition = undefined;
        this.icon = undefined;
        this.input = undefined;
        this.profiles = undefined;
        this.progress = undefined;
        this.state = "disabled";
        this.unit = undefined;
        this.uniformChartScaling = undefined;
        this.unitOptions = undefined;
        this.visibleElementsLegend = true;
        this.visibleElementsChart = true;
        this.visibleElementsClearButton = true;
        this.visibleElementsSettingsButton = true;
        this.visibleElementsSketchButton = true;
        this.visibleElementsSelectButton = true;
        this.visibleElementsUnitSelector = true;
        this.visibleElementsUniformChartScalingToggle = true;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void componentUtils.referenceElementHelper(this, value);
    }
    highlightEnabledWatcher(value) {
        if (this.widget) {
            this.widget.viewModel.highlightEnabled = value;
        }
    }
    iconWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.icon = value;
        }
    }
    inputWatcher(value) {
        if (value && this.widget) {
            this.widget.input = value;
        }
    }
    profilesWatcher(value) {
        if (value && this.widget) {
            this.widget.profiles = value;
        }
    }
    unitWatcher(value) {
        if (value && this.widget) {
            this.widget.unit = value;
        }
    }
    uniformChartScalingWatcher(value) {
        if (this.widget) {
            this.widget.viewModel.uniformChartScaling = value;
        }
    }
    unitOptionsWatcher(value) {
        if (value && this.widget) {
            this.widget.unitOptions = value;
        }
    }
    visibleElementsLegendWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                legend: value
            };
        }
    }
    visibleElementsChartWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                chart: value
            };
        }
    }
    visibleElementsClearButtonWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                clearButton: value
            };
        }
    }
    visibleElementsSettingsButtonWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                settingsButton: value
            };
        }
    }
    visibleElementsSketchButtonWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                sketchButton: value
            };
        }
    }
    visibleElementsSelectButtonWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                selectButton: value
            };
        }
    }
    visibleElementsUnitSelectorWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                unitSelector: value
            };
        }
    }
    visibleElementsUniformChartScalingToggleWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                uniformChartScalingToggle: value
            };
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async start() {
        this.widget.viewModel.start();
    }
    async stop() {
        this.widget.viewModel.stop();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await index$1.newWidgetsElevationProfile(params);
        this.widget = widget;
        this._setViewModelParams();
        await this._addWatchers();
        this._addContainer();
        this.arcgisElevationProfileReady.emit();
        componentUtils.checkForView(this);
    }
    disconnectedCallback() {
        disconnected.onDisconnectedHelper(this);
    }
    render() {
        return index.h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch, whenOnce } = await index$1.importCoreReactiveUtils();
        componentUtils.addHandles(this, [
            watch(() => this.widget.input, () => {
                this.input = this.widget.input;
                this.arcgisPropertyChange.emit({ name: "input" });
            }, {
                initial: true
            }),
            watch(() => this.widget.viewModel.effectiveUnits, () => (this.effectiveUnits = this.widget.viewModel.effectiveUnits), {
                initial: true
            }),
            watch(() => this.widget.viewModel.hoveredChartPosition, () => (this.hoveredChartPosition = this.widget.viewModel.hoveredChartPosition), {
                initial: true
            }),
            watch(() => this.widget.viewModel.progress, () => (this.progress = this.widget.viewModel.progress), {
                initial: true
            }),
            watch(() => this.widget.viewModel.state, () => (this.state = this.widget.viewModel.state), {
                initial: true
            })
        ]);
        await whenOnce(() => this.widget.unitOptions);
        this.unitOptions = this.widget.unitOptions;
    }
    _createParams() {
        const params = {};
        params.visibleElements = {
            legend: this.visibleElementsLegend,
            chart: this.visibleElementsChart,
            clearButton: this.visibleElementsClearButton,
            settingsButton: this.visibleElementsSettingsButton,
            sketchButton: this.visibleElementsSketchButton,
            selectButton: this.visibleElementsSelectButton,
            unitSelector: this.visibleElementsUnitSelector,
            uniformChartScalingToggle: this.visibleElementsUniformChartScalingToggle
        };
        if (this.view) {
            params.view = this.view;
        }
        if (this.icon) {
            params.icon = this.icon;
        }
        if (this.input) {
            params.input = this.input;
        }
        if (this.profiles) {
            params.profiles = this.profiles;
        }
        if (this.unit) {
            params.unit = this.unit;
        }
        if (this.unitOptions) {
            params.unitOptions = this.unitOptions;
        }
        return params;
    }
    _setViewModelParams() {
        const params = {};
        if (this.highlightEnabled !== undefined) {
            params.highlightEnabled = this.highlightEnabled;
        }
        if (this.uniformChartScaling !== undefined) {
            params.uniformChartScaling = this.uniformChartScaling;
        }
        this.widget.viewModel.set(params);
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "highlightEnabled": ["highlightEnabledWatcher"],
        "icon": ["iconWatcher"],
        "input": ["inputWatcher"],
        "profiles": ["profilesWatcher"],
        "unit": ["unitWatcher"],
        "uniformChartScaling": ["uniformChartScalingWatcher"],
        "unitOptions": ["unitOptionsWatcher"],
        "visibleElementsLegend": ["visibleElementsLegendWatcher"],
        "visibleElementsChart": ["visibleElementsChartWatcher"],
        "visibleElementsClearButton": ["visibleElementsClearButtonWatcher"],
        "visibleElementsSettingsButton": ["visibleElementsSettingsButtonWatcher"],
        "visibleElementsSketchButton": ["visibleElementsSketchButtonWatcher"],
        "visibleElementsSelectButton": ["visibleElementsSelectButtonWatcher"],
        "visibleElementsUnitSelector": ["visibleElementsUnitSelectorWatcher"],
        "visibleElementsUniformChartScalingToggle": ["visibleElementsUniformChartScalingToggleWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisElevationProfile.style = elevationProfileCss;

exports.arcgis_elevation_profile = ArcgisElevationProfile;
