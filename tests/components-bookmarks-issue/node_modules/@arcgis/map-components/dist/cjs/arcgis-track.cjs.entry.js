/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6e62126d.js');
const index$1 = require('./index-b2323407.js');
const componentUtils = require('./component-utils-e47db275.js');
const disconnected = require('./disconnected-bc6a8942.js');

const trackCss = "";

const ArcgisTrack = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisTrackReady = index.createEvent(this, "arcgisTrackReady", 7);
        this.trackComplete = index.createEvent(this, "trackComplete", 7);
        this.trackError = index.createEvent(this, "trackError", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.error = undefined;
        this.geolocationOptions = undefined;
        this.goToLocationEnabled = true;
        this.graphic = undefined;
        this.icon = undefined;
        this.positionFilterFunction = undefined;
        this.rotationEnabled = true;
        this.scale = undefined;
        this.state = "disabled";
        this.tracking = false;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void componentUtils.referenceElementHelper(this, value);
    }
    geolocationOptionsWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.geolocationOptions = value;
        }
    }
    goToLocationEnabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.goToLocationEnabled = value;
        }
    }
    graphicWatcher(value) {
        if (this.widget) {
            this.widget.graphic = value;
        }
    }
    iconWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.icon = value;
        }
    }
    positionFilterFunctionWatcher(value) {
        if (this.widget) {
            this.widget.viewModel.positionFilterFunction = value;
        }
    }
    rotationEnabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.rotationEnabled = value;
        }
    }
    scaleWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.scale = value;
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async start() {
        this.widget.start();
    }
    async stop() {
        this.widget.stop();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await index$1.newWidgetsTrack(params);
        this.widget = widget;
        await this._addWatchers();
        this._proxyEvents();
        this._addContainer();
        this.arcgisTrackReady.emit();
        componentUtils.checkForView(this);
    }
    disconnectedCallback() {
        disconnected.onDisconnectedHelper(this);
    }
    render() {
        return index.h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await index$1.importCoreReactiveUtils();
        componentUtils.addHandles(this, [
            watch(() => this.widget.viewModel.error, (value) => (this.error = value)),
            watch(() => this.widget.viewModel.state, (value) => (this.state = value)),
            watch(() => this.widget.tracking, (value) => (this.tracking = value), {
                initial: true
            })
        ]);
    }
    _createParams() {
        const params = {};
        if (this.geolocationOptions !== undefined) {
            params.geolocationOptions = this.geolocationOptions;
        }
        if (this.goToLocationEnabled !== undefined) {
            params.goToLocationEnabled = this.goToLocationEnabled;
        }
        if (this.graphic !== undefined) {
            params.graphic = this.graphic;
        }
        if (this.icon !== undefined) {
            params.icon = this.icon;
        }
        if (this.positionFilterFunction !== undefined) {
            params.viewModel = {
                positionFilterFunction: this.positionFilterFunction
            };
        }
        if (this.rotationEnabled !== undefined) {
            params.rotationEnabled = this.rotationEnabled;
        }
        if (this.scale !== undefined) {
            params.scale = this.scale;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    _proxyEvents() {
        this.widget.on("track", (e) => this.trackComplete.emit(e));
        this.widget.on("track-error", (e) => this.trackError.emit(e));
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "geolocationOptions": ["geolocationOptionsWatcher"],
        "goToLocationEnabled": ["goToLocationEnabledWatcher"],
        "graphic": ["graphicWatcher"],
        "icon": ["iconWatcher"],
        "positionFilterFunction": ["positionFilterFunctionWatcher"],
        "rotationEnabled": ["rotationEnabledWatcher"],
        "scale": ["scaleWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisTrack.style = trackCss;

exports.arcgis_track = ArcgisTrack;
