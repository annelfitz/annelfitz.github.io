/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6e62126d.js');
const index$1 = require('./index-b2323407.js');
const componentUtils = require('./component-utils-e47db275.js');
const disconnected = require('./disconnected-bc6a8942.js');

const daylightCss = "";

const ArcgisDaylight = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisDaylightReady = index.createEvent(this, "arcgisDaylightReady", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.currentSeason = undefined;
        this.dayPlaying = false;
        this.yearPlaying = false;
        this.dateOrSeason = "date";
        this.icon = undefined;
        this.playSpeedMultiplier = 1.0;
        this.timeSliderSteps = 5;
        this.visibleElementsHeader = true;
        this.visibleElementsPlayButtons = true;
        this.visibleElementsDatePicker = true;
        this.visibleElementsTimezone = true;
        this.visibleElementsSunLightingToggle = true;
        this.visibleElementsShadowsToggle = true;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void componentUtils.referenceElementHelper(this, value);
    }
    currentSeasonWatcher(value) {
        if (this.widget) {
            this.widget.viewModel.currentSeason = value;
        }
    }
    dayPlayingWatcher(value) {
        if (this.widget) {
            this.widget.viewModel.dayPlaying = value;
        }
    }
    yearPlayingWatcher(value) {
        if (this.widget) {
            this.widget.viewModel.yearPlaying = value;
        }
    }
    dateOrSeasonWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.dateOrSeason = value;
        }
    }
    iconWatcher(value) {
        if (this.widget) {
            this.widget.icon = value;
        }
    }
    playSpeedMultiplierWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.playSpeedMultiplier = value;
        }
    }
    timeSliderStepsWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.timeSliderSteps = value;
        }
    }
    visibleElementsHeaderWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements.header = value;
        }
    }
    visibleElementsPlayButtonsWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                playButtons: value
            };
        }
    }
    visibleElementsDatePickerWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                datePicker: value
            };
        }
    }
    visibleElementsTimezoneWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                timezone: value
            };
        }
    }
    visibleElementsSunLightingToggleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                sunLightingToggle: value
            };
        }
    }
    visibleElementsShadowsToggleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                shadowsToggle: value
            };
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await index$1.newWidgetsDaylight(params);
        this.widget = widget;
        this._addContainer();
        this._setViewModelParams();
        this.arcgisDaylightReady.emit();
        componentUtils.checkForView(this);
    }
    disconnectedCallback() {
        disconnected.onDisconnectedHelper(this);
    }
    render() {
        return index.h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    _createParams() {
        const params = {};
        params.visibleElements = {
            header: this.visibleElementsHeader,
            playButtons: this.visibleElementsPlayButtons,
            datePicker: this.visibleElementsDatePicker,
            timezone: this.visibleElementsTimezone,
            sunLightingToggle: this.visibleElementsSunLightingToggle,
            shadowsToggle: this.visibleElementsShadowsToggle
        };
        if (this.icon) {
            params.icon = this.icon;
        }
        if (this.view) {
            params.view = this.view;
        }
        if (this.dateOrSeason) {
            params.dateOrSeason = this.dateOrSeason;
        }
        if (this.playSpeedMultiplier) {
            params.playSpeedMultiplier = this.playSpeedMultiplier;
        }
        if (this.timeSliderSteps) {
            params.timeSliderSteps = this.timeSliderSteps;
        }
        return params;
    }
    _setViewModelParams() {
        const params = {
            dayPlaying: this.dayPlaying,
            yearPlaying: this.yearPlaying
        };
        if (this.currentSeason) {
            params.currentSeason = this.currentSeason;
        }
        this.widget.viewModel.set(params);
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "currentSeason": ["currentSeasonWatcher"],
        "dayPlaying": ["dayPlayingWatcher"],
        "yearPlaying": ["yearPlayingWatcher"],
        "dateOrSeason": ["dateOrSeasonWatcher"],
        "icon": ["iconWatcher"],
        "playSpeedMultiplier": ["playSpeedMultiplierWatcher"],
        "timeSliderSteps": ["timeSliderStepsWatcher"],
        "visibleElementsHeader": ["visibleElementsHeaderWatcher"],
        "visibleElementsPlayButtons": ["visibleElementsPlayButtonsWatcher"],
        "visibleElementsDatePicker": ["visibleElementsDatePickerWatcher"],
        "visibleElementsTimezone": ["visibleElementsTimezoneWatcher"],
        "visibleElementsSunLightingToggle": ["visibleElementsSunLightingToggleWatcher"],
        "visibleElementsShadowsToggle": ["visibleElementsShadowsToggleWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisDaylight.style = daylightCss;

exports.arcgis_daylight = ArcgisDaylight;
