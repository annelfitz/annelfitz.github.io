/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6e62126d.js');
const index$1 = require('./index-b2323407.js');
const componentUtils = require('./component-utils-e47db275.js');
const disconnected = require('./disconnected-bc6a8942.js');

const featureTemplatesCss = "";

const ArcgisFeatureTemplates = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.widgetReady = index.createEvent(this, "widgetReady", 7);
        this.featureTemplatesSelect = index.createEvent(this, "featureTemplatesSelect", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.position = "bottom-left";
        this.expandable = false;
        this.widget = undefined;
        this.enableListScroll = undefined;
        this.filterFunction = undefined;
        this.filterText = undefined;
        this.groupBy = undefined;
        this.layers = undefined;
        this.selectionMode = undefined;
        this.visibleElements = undefined;
    }
    enableListScrolWatcher(newValue) {
        if (newValue !== undefined && this.widget) {
            this.widget.enableListScroll = newValue;
        }
    }
    filterFunctionWatcher(newValue) {
        if (this.widget) {
            this.widget.filterFunction = newValue;
        }
    }
    filterTextWatcher(newValue) {
        if (this.widget) {
            this.widget.filterText = newValue;
        }
    }
    groupByWatcher(newValue) {
        if (this.widget) {
            this.widget.groupBy = newValue;
        }
    }
    layersWatcher(newValue) {
        if (this.widget) {
            this.widget.layers = newValue;
        }
    }
    selectionModeWatcher(newValue) {
        if (this.widget) {
            this.widget.selectionMode = newValue;
        }
    }
    visibleElementsWatcher(newValue) {
        if (this.widget) {
            this.widget.visibleElements = newValue;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await index$1.newWidgetsFeatureTemplates(params);
        this.widget = widget;
        this._proxyEvents();
        this.widgetReady.emit({ widget: this.widget });
        componentUtils.checkForView(this);
    }
    disconnectedCallback() {
        disconnected.onDisconnectedHelper(this);
    }
    render() {
        if (this.expandable) {
            return (index.h("arcgis-expand", { position: this.position, ref: (el) => (this.expandElem = el) }, index.h("div", { ref: (el) => (this.childElem = el) })));
        }
        return index.h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _createParams() {
        const params = {
            container: this.childElem
        };
        if (this.enableListScroll !== undefined) {
            params.enableListScroll = this.enableListScroll;
        }
        if (this.filterFunction) {
            params.filterFunction = this.filterFunction;
        }
        if (this.filterText) {
            params.filterText = this.filterText;
        }
        if (this.groupBy) {
            params.groupBy = this.groupBy;
        }
        if (this.layers) {
            params.layers = this.layers;
        }
        if (this.selectionMode !== undefined) {
            params.selectionMode = this.selectionMode;
        }
        if (this.visibleElements) {
            params.visibleElements = this.visibleElements;
        }
        return params;
    }
    _proxyEvents() {
        this.widget.on("select", (e) => this.featureTemplatesSelect.emit(e));
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "enableListScroll": ["enableListScrolWatcher"],
        "filterFunction": ["filterFunctionWatcher"],
        "filterText": ["filterTextWatcher"],
        "groupBy": ["groupByWatcher"],
        "layers": ["layersWatcher"],
        "selectionMode": ["selectionModeWatcher"],
        "visibleElements": ["visibleElementsWatcher"]
    }; }
};
ArcgisFeatureTemplates.style = featureTemplatesCss;

exports.arcgis_feature_templates = ArcgisFeatureTemplates;
