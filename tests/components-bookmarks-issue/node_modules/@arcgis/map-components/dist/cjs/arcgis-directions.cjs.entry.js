/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6e62126d.js');
const index$1 = require('./index-b2323407.js');
const componentUtils = require('./component-utils-e47db275.js');
const disconnected = require('./disconnected-bc6a8942.js');

const directionsCss = "";

const ArcgisDirections = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisDirectionsReady = index.createEvent(this, "arcgisDirectionsReady", 7);
        this.arcgisPropertyChange = index.createEvent(this, "arcgisPropertyChange", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.apiKey = undefined;
        this.icon = undefined;
        this.routeLayerItemId = undefined;
        this.lastRoute = undefined;
        this.layer = undefined;
        this.maxStops = 50;
        this.searchProperties = undefined;
        this.unit = undefined;
        this.useDefaultRouteLayer = true;
        this.visibleElementsLayerDetails = true;
        this.visibleElementsSaveAsButton = true;
        this.visibleElementsSaveButton = true;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void componentUtils.referenceElementHelper(this, value);
    }
    apiKeyWatcher(value) {
        if (value && this.widget) {
            this.widget.apiKey = value;
        }
    }
    iconWatcher(value) {
        if (value && this.widget) {
            this.widget.icon = value;
        }
    }
    routeLayerItemIdWatcher(value) {
        if (componentUtils.isNullOrEmptyString(value)) {
            this.view?.map.remove(this.layer);
            // maintain a default route layer
            if (this.useDefaultRouteLayer) {
                void index$1.newLayersRouteLayer({}).then((layer) => {
                    this.layer = layer;
                });
            }
        }
        else if (value && this.widget) {
            void index$1.newLayersRouteLayer({
                portalItem: {
                    id: value
                }
            }).then((layer) => {
                this.layer = layer;
            });
        }
    }
    layerWatcher(value, old) {
        if (old) {
            this.view?.map.remove(old);
        }
        if (value && this.widget) {
            this.widget.layer = value;
            this.view?.map.add(this.layer);
        }
        else if (!value) {
            this.widget.layer = null;
        }
    }
    maxStopsWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.maxStops = value;
        }
    }
    searchPropertiesWatcher(value) {
        if (this.widget) {
            this.widget.searchProperties = value;
        }
    }
    unitWatcher(value) {
        if (this.widget) {
            this.widget.unit = value;
        }
    }
    visibleElementsLayerDetailsWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                layerDetails: value
            };
        }
    }
    visibleElementsSaveAsButtonWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                saveAsButton: value
            };
        }
    }
    visibleElementsSaveButtonWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                saveButton: value
            };
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
            if (this.layer) {
                this.widget.view.map.add(this.layer);
            }
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async getDirections() {
        return await this.widget?.getDirections();
    }
    async save() {
        return await this.widget?.save();
    }
    async saveAs(portalItem, options) {
        return await this.widget?.saveAs(portalItem, options);
    }
    async zoomToRoute() {
        this.widget?.zoomToRoute();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = await this._createParams();
        const widget = await index$1.newWidgetsDirections(params);
        this.widget = widget;
        await this._addWatchers();
        this._addContainer();
        this.arcgisDirectionsReady.emit();
        componentUtils.checkForView(this);
    }
    disconnectedCallback() {
        disconnected.onDisconnectedHelper(this);
    }
    render() {
        return index.h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await index$1.importCoreReactiveUtils();
        componentUtils.addHandles(this, watch(() => this.widget.lastRoute, (value) => {
            this.lastRoute = value;
            this.arcgisPropertyChange.emit({ name: "lastRoute" });
        }, {
            initial: true
        }));
    }
    async _createParams() {
        const params = {};
        params.visibleElements = {
            layerDetails: this.visibleElementsLayerDetails,
            saveAsButton: this.visibleElementsSaveAsButton,
            saveButton: this.visibleElementsSaveButton
        };
        if (this.view) {
            params.view = this.view;
        }
        if (this.apiKey) {
            params.apiKey = this.apiKey;
        }
        if (this.icon) {
            params.icon = this.icon;
        }
        if (this.routeLayerItemId) {
            params.layer = await index$1.newLayersRouteLayer({
                portalItem: {
                    id: this.routeLayerItemId
                }
            });
            this.layer = params.layer;
        }
        else if (this.layer) {
            params.layer = this.layer;
            this.layer = params.layer;
        }
        else if (this.useDefaultRouteLayer) {
            params.layer = await index$1.newLayersRouteLayer({});
            this.layer = params.layer;
        }
        if (this.layer !== undefined) {
            this.view?.map.add(this.layer);
        }
        if (this.maxStops !== undefined) {
            params.maxStops = this.maxStops;
        }
        if (this.searchProperties) {
            params.searchProperties = this.searchProperties;
        }
        if (this.unit) {
            params.unit = this.unit;
        }
        return params;
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "apiKey": ["apiKeyWatcher"],
        "icon": ["iconWatcher"],
        "routeLayerItemId": ["routeLayerItemIdWatcher"],
        "layer": ["layerWatcher"],
        "maxStops": ["maxStopsWatcher"],
        "searchProperties": ["searchPropertiesWatcher"],
        "unit": ["unitWatcher"],
        "visibleElementsLayerDetails": ["visibleElementsLayerDetailsWatcher"],
        "visibleElementsSaveAsButton": ["visibleElementsSaveAsButtonWatcher"],
        "visibleElementsSaveButton": ["visibleElementsSaveButtonWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisDirections.style = directionsCss;

exports.arcgis_directions = ArcgisDirections;
