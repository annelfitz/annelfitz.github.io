/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6e62126d.js');
const index$1 = require('./index-b2323407.js');
const componentUtils = require('./component-utils-e47db275.js');
const disconnected = require('./disconnected-bc6a8942.js');

const coordinateConversionCss = "";

const ArcgisCoordinateConversion = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisCoordinateConversionReady = index.createEvent(this, "arcgisCoordinateConversionReady", 7);
        this.arcgisPropertyChange = index.createEvent(this, "arcgisPropertyChange", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.conversions = undefined;
        this.currentLocation = undefined;
        this.formats = undefined;
        this.icon = undefined;
        this.locationSymbol = undefined;
        this.mode = "live";
        this.multipleConversions = true;
        this.orientation = "auto";
        this.storageEnabled = true;
        this.storageType = "session";
        this.visibleElementsSettingsButton = true;
        this.visibleElementsEditButton = true;
        this.visibleElementsExpandButton = true;
        this.visibleElementsCaptureButton = true;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void componentUtils.referenceElementHelper(this, value);
    }
    conversionsWatcher(value) {
        if (this.widget) {
            this.widget.conversions = value;
        }
    }
    formatsWatcher(value) {
        if (this.widget) {
            this.widget.formats = value;
        }
    }
    iconWatcher(value) {
        if (this.widget) {
            this.widget.icon = value;
        }
    }
    locationSymbolWatcher(value) {
        if (this.widget) {
            this.widget.locationSymbol = value;
        }
    }
    modeWatcher(value) {
        if (this.widget) {
            this.widget.mode = value;
        }
    }
    multipleConversionsWatcher(value) {
        if (this.widget) {
            this.widget.multipleConversions = value;
        }
    }
    orientationWatcher(value) {
        if (this.widget) {
            this.widget.orientation = value;
        }
    }
    storageEnabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.storageEnabled = value;
        }
    }
    storageTypeWatcher(value) {
        if (this.widget) {
            this.widget.storageType = value;
        }
    }
    visibleElementsSettingsButtonWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                settingsButton: value
            };
        }
    }
    visibleElementsEditButtonWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                editButton: value
            };
        }
    }
    visibleElementsExpandButtonWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                expandButton: value
            };
        }
    }
    visibleElementsCaptureButtonWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                captureButton: value
            };
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async reverseConvert(coordinate, format) {
        return await this.widget?.reverseConvert(coordinate, format);
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await index$1.newWidgetsCoordinateConversion(params);
        this.widget = widget;
        await this._addWatchers();
        this._addContainer();
        this.arcgisCoordinateConversionReady.emit();
        componentUtils.checkForView(this);
    }
    disconnectedCallback() {
        disconnected.onDisconnectedHelper(this);
    }
    render() {
        return index.h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch, whenOnce } = await index$1.importCoreReactiveUtils();
        componentUtils.addHandles(this, watch(() => this.widget.currentLocation, (value) => {
            this.currentLocation = value;
            this.arcgisPropertyChange.emit({ name: "currentLocation" });
        }, {
            initial: true
        }));
        await whenOnce(() => this.widget.formats);
        this.formats = this.widget.formats;
    }
    _createParams() {
        const params = {};
        params.visibleElements = {
            settingsButton: this.visibleElementsSettingsButton,
            editButton: this.visibleElementsEditButton,
            expandButton: this.visibleElementsExpandButton,
            captureButton: this.visibleElementsCaptureButton
        };
        if (this.conversions) {
            params.conversions = this.conversions;
        }
        if (this.icon) {
            params.icon = this.icon;
        }
        if (this.formats) {
            params.formats = this.formats;
        }
        if (this.locationSymbol) {
            params.locationSymbol = this.locationSymbol;
        }
        if (this.mode) {
            params.mode = this.mode;
        }
        if (this.multipleConversions) {
            params.multipleConversions = this.multipleConversions;
        }
        if (this.orientation) {
            params.orientation = this.orientation;
        }
        if (this.storageEnabled !== undefined) {
            params.storageEnabled = this.storageEnabled;
        }
        if (this.storageType) {
            params.storageType = this.storageType;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "conversions": ["conversionsWatcher"],
        "formats": ["formatsWatcher"],
        "icon": ["iconWatcher"],
        "locationSymbol": ["locationSymbolWatcher"],
        "mode": ["modeWatcher"],
        "multipleConversions": ["multipleConversionsWatcher"],
        "orientation": ["orientationWatcher"],
        "storageEnabled": ["storageEnabledWatcher"],
        "storageType": ["storageTypeWatcher"],
        "visibleElementsSettingsButton": ["visibleElementsSettingsButtonWatcher"],
        "visibleElementsEditButton": ["visibleElementsEditButtonWatcher"],
        "visibleElementsExpandButton": ["visibleElementsExpandButtonWatcher"],
        "visibleElementsCaptureButton": ["visibleElementsCaptureButtonWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisCoordinateConversion.style = coordinateConversionCss;

exports.arcgis_coordinate_conversion = ArcgisCoordinateConversion;
