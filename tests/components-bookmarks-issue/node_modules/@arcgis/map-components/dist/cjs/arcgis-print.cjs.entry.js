/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6e62126d.js');
const index$1 = require('./index-b2323407.js');
const componentUtils = require('./component-utils-e47db275.js');
const disconnected = require('./disconnected-bc6a8942.js');

const printCss = "";

const ArcgisPrint = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisPrintReady = index.createEvent(this, "arcgisPrintReady", 7);
        this.printComplete = index.createEvent(this, "printComplete", 7);
        this.printSubmit = index.createEvent(this, "printSubmit", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.allowedFormats = "all";
        this.allowedLayouts = "all";
        this.exportedLinks = undefined;
        this.extraParameters = undefined;
        this.icon = undefined;
        this.includeDefaultTemplates = true;
        this.portal = undefined;
        this.printServiceUrl = undefined;
        this.templateCustomTextElements = undefined;
        this.templateOptions = undefined;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void componentUtils.referenceElementHelper(this, value);
    }
    allowedFormatsWatcher(value) {
        if (this.widget) {
            this.widget.allowedFormats = value.split(",");
        }
    }
    allowedLayoutsWatcher(value) {
        if (this.widget) {
            this.widget.allowedLayouts = value.split(",");
        }
    }
    extraParametersWatcher(value) {
        if (this.widget) {
            this.widget.extraParameters = value;
        }
    }
    iconWatcher(value) {
        if (this.widget) {
            this.widget.icon = value;
        }
    }
    includeDefaultTemplatesWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.includeDefaultTemplates = value;
        }
    }
    portalWatcher(value) {
        if (this.widget) {
            this.widget.portal = value;
        }
    }
    printServiceUrlWatcher(value) {
        if (this.widget) {
            this.widget.printServiceUrl = value;
        }
    }
    templateCustomTextElementsWatcher(value) {
        if (this.widget) {
            this.widget.templateCustomTextElements = value;
        }
    }
    templateOptionsWatcher(value) {
        if (this.widget) {
            this.widget.templateOptions = value;
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await index$1.newWidgetsPrint(params);
        this.widget = widget;
        await this._addWatchers();
        this._proxyEvents();
        this._addContainer();
        this.arcgisPrintReady.emit();
        componentUtils.checkForView(this);
    }
    disconnectedCallback() {
        disconnected.onDisconnectedHelper(this);
    }
    render() {
        return index.h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await index$1.importCoreReactiveUtils();
        componentUtils.addHandles(this, watch(() => this.widget.exportedLinks, (value) => (this.exportedLinks = value), {
            initial: true
        }));
    }
    _createParams() {
        const params = {};
        if (this.allowedFormats) {
            params.allowedFormats = this.allowedFormats;
        }
        if (this.allowedLayouts) {
            params.allowedLayouts = this.allowedLayouts;
        }
        if (this.extraParameters) {
            params.extraParameters = this.extraParameters;
        }
        if (this.icon) {
            params.icon = this.icon;
        }
        if (this.includeDefaultTemplates !== undefined) {
            params.includeDefaultTemplates = this.includeDefaultTemplates;
        }
        if (this.portal) {
            params.portal = this.portal;
        }
        if (this.printServiceUrl) {
            params.printServiceUrl = this.printServiceUrl;
        }
        if (this.templateCustomTextElements) {
            params.templateCustomTextElements = this.templateCustomTextElements;
        }
        if (this.templateOptions) {
            params.templateOptions = this.templateOptions;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    _proxyEvents() {
        this.widget.on("complete", (e) => this.printComplete.emit(e));
        this.widget.on("submit", (e) => this.printSubmit.emit(e));
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "allowedFormats": ["allowedFormatsWatcher"],
        "allowedLayouts": ["allowedLayoutsWatcher"],
        "extraParameters": ["extraParametersWatcher"],
        "icon": ["iconWatcher"],
        "includeDefaultTemplates": ["includeDefaultTemplatesWatcher"],
        "portal": ["portalWatcher"],
        "printServiceUrl": ["printServiceUrlWatcher"],
        "templateCustomTextElements": ["templateCustomTextElementsWatcher"],
        "templateOptions": ["templateOptionsWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisPrint.style = printCss;

exports.arcgis_print = ArcgisPrint;
