/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6e62126d.js');
const index$1 = require('./index-b2323407.js');
const componentUtils = require('./component-utils-e47db275.js');
const disconnected = require('./disconnected-bc6a8942.js');

const locateCss = "arcgis-locate{}";

const ArcgisLocate = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisLocateReady = index.createEvent(this, "arcgisLocateReady", 7);
        this.locateSuccess = index.createEvent(this, "locateSuccess", 7);
        this.locateError = index.createEvent(this, "locateError", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.error = undefined;
        this.geolocationOptions = undefined;
        this.goToLocationDisabled = false;
        this.graphic = undefined;
        this.icon = undefined;
        this.popupDisabled = false;
        this.scale = undefined;
        this.state = undefined;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void componentUtils.referenceElementHelper(this, value);
    }
    geolocationOptionsWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.geolocationOptions = value;
        }
    }
    goToLocationDisabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.goToLocationEnabled = !value;
        }
    }
    graphicWatcher(value) {
        if (this.widget) {
            this.widget.graphic = value;
        }
    }
    iconWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.icon = value;
        }
    }
    popupDisabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.popupEnabled = !value;
        }
    }
    scaleWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.scale = value;
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async cancelLocate() {
        this.widget?.cancelLocate();
    }
    async locate() {
        return await this.widget?.locate();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await index$1.newWidgetsLocate(params);
        this.widget = widget;
        await this._addWatchers();
        this._addContainer();
        this.arcgisLocateReady.emit();
        this._proxyEvents();
        componentUtils.checkForView(this);
    }
    disconnectedCallback() {
        disconnected.onDisconnectedHelper(this);
    }
    render() {
        return index.h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await index$1.importCoreReactiveUtils();
        componentUtils.addHandles(this, [
            watch(() => this.widget?.viewModel?.state, (value) => (this.state = value)),
            watch(() => this.widget?.viewModel?.error, (value) => (this.error = value))
        ]);
    }
    _createParams() {
        const params = {};
        if (this.geolocationOptions !== undefined) {
            params.geolocationOptions = this.geolocationOptions;
        }
        if (this.goToLocationDisabled !== undefined) {
            params.goToLocationEnabled = !this.goToLocationDisabled;
        }
        if (this.graphic !== undefined) {
            params.graphic = this.graphic;
        }
        if (this.icon !== undefined) {
            params.icon = this.icon;
        }
        if (this.popupDisabled !== undefined) {
            params.popupEnabled = !this.popupDisabled;
        }
        if (this.scale !== undefined) {
            params.scale = this.scale;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    _proxyEvents() {
        this.widget?.on("locate", (e) => this.locateSuccess.emit(e));
        this.widget?.on("locate-error", (e) => this.locateError.emit(e));
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "geolocationOptions": ["geolocationOptionsWatcher"],
        "goToLocationDisabled": ["goToLocationDisabledWatcher"],
        "graphic": ["graphicWatcher"],
        "icon": ["iconWatcher"],
        "popupDisabled": ["popupDisabledWatcher"],
        "scale": ["scaleWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisLocate.style = locateCss;

exports.arcgis_locate = ArcgisLocate;
