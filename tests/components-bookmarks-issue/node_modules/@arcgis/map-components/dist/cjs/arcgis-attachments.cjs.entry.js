/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6e62126d.js');
const index$1 = require('./index-b2323407.js');
const componentUtils = require('./component-utils-e47db275.js');
const disconnected = require('./disconnected-bc6a8942.js');

const attachmentsCss = "";

const ArcgisAttachments = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.widgetReady = index.createEvent(this, "widgetReady", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.position = "bottom-left";
        this.expandable = false;
        this.capabilities = undefined;
        this.displayType = undefined;
        this.graphic = undefined;
        this.submitting = undefined;
        this.visibleElements = undefined;
        this.widget = undefined;
    }
    capabilitiesWatcher(newValue) {
        if (this.widget) {
            this.widget.capabilities = newValue;
        }
    }
    displayTypeWatcher(newValue) {
        if (this.widget) {
            this.widget.displayType = newValue;
        }
    }
    graphicWatcher(newValue) {
        if (this.widget) {
            this.widget.graphic = newValue;
        }
    }
    visibleElementsWatcher(newValue) {
        if (this.widget) {
            this.widget.visibleElements = newValue;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await index$1.newWidgetsAttachments(params);
        this.widget = widget;
        await this._addWatchers();
        this.widgetReady.emit({ widget: this.widget });
        componentUtils.checkForExpand(this);
    }
    disconnectedCallback() {
        disconnected.onDisconnectedHelper(this);
    }
    render() {
        if (this.expandable) {
            return (index.h("arcgis-expand", { position: this.position, ref: (el) => (this.expandElem = el) }, index.h("div", { ref: (el) => (this.childElem = el) })));
        }
        return index.h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    async _addWatchers() {
        const { watch } = await index$1.importCoreReactiveUtils();
        componentUtils.addHandles(this, watch(() => this.widget.submitting, (value) => (this.submitting = value), {
            initial: true
        }));
    }
    _createParams() {
        const params = {
            container: this.childElem
        };
        if (this.displayType) {
            params.displayType = this.displayType;
        }
        if (this.graphic) {
            params.graphic = this.graphic;
        }
        if (this.visibleElements) {
            params.visibleElements = this.visibleElements;
        }
        return params;
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "capabilities": ["capabilitiesWatcher"],
        "displayType": ["displayTypeWatcher"],
        "graphic": ["graphicWatcher"],
        "visibleElements": ["visibleElementsWatcher"]
    }; }
};
ArcgisAttachments.style = attachmentsCss;

exports.arcgis_attachments = ArcgisAttachments;
