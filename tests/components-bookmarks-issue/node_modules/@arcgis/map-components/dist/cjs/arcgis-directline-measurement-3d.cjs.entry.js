/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6e62126d.js');
const index$1 = require('./index-b2323407.js');
const componentUtils = require('./component-utils-e47db275.js');
const disconnected = require('./disconnected-bc6a8942.js');

const directlineMeasurement3dCss = "";

const ArcgisDirectLineMeasurement3d = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisDirectLineMeasurement3dReady = index.createEvent(this, "arcgisDirectLineMeasurement3dReady", 7);
        this.arcgisPropertyChange = index.createEvent(this, "arcgisPropertyChange", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.analysis = undefined;
        this.icon = undefined;
        this.unit = undefined;
        this.unitOptions = undefined;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void componentUtils.referenceElementHelper(this, value);
    }
    iconWatcher(value) {
        if (this.widget) {
            this.widget.icon = value;
        }
    }
    unitWatcher(value) {
        if (this.widget) {
            this.widget.unit = value;
        }
    }
    unitOptionsWatcher(value) {
        if (this.widget) {
            this.widget.unitOptions = value;
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async clear() {
        this.widget?.viewModel.clear();
    }
    async start() {
        this.widget?.viewModel.start();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await index$1.newWidgetsDirectLineMeasurement3D(params);
        this.widget = widget;
        await this._addWatchers();
        this._addContainer();
        this.arcgisDirectLineMeasurement3dReady.emit();
        componentUtils.checkForView(this);
    }
    disconnectedCallback() {
        disconnected.onDisconnectedHelper(this);
    }
    render() {
        return index.h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch, whenOnce } = await index$1.importCoreReactiveUtils();
        componentUtils.addHandles(this, watch(() => this.widget.analysis, (value) => {
            this.analysis = value;
            this.arcgisPropertyChange.emit({ name: "analysis" });
        }, {
            initial: true
        }));
        await whenOnce(() => this.widget.unitOptions);
        this.unitOptions = this.widget.unitOptions;
    }
    _createParams() {
        const params = {};
        if (this.icon) {
            params.icon = this.icon;
        }
        if (this.view) {
            params.view = this.view;
        }
        if (this.unit) {
            params.unit = this.unit;
        }
        if (this.unitOptions) {
            params.unitOptions = this.unitOptions;
        }
        return params;
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "icon": ["iconWatcher"],
        "unit": ["unitWatcher"],
        "unitOptions": ["unitOptionsWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisDirectLineMeasurement3d.style = directlineMeasurement3dCss;

exports.arcgis_directline_measurement_3d = ArcgisDirectLineMeasurement3d;
