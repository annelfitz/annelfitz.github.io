/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6e62126d.js');
const index$1 = require('./index-b2323407.js');
const componentUtils = require('./component-utils-e47db275.js');
const disconnected = require('./disconnected-bc6a8942.js');

const featureCss = "";

const ArcgisFeature = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisFeatureReady = index.createEvent(this, "arcgisFeatureReady", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.defaultPopupTemplateEnabled = false;
        this.graphic = undefined;
        this.location = undefined;
        this.map = undefined;
        this.spatialReference = undefined;
        this.visibleElementsTitle = true;
        this.visibleElementsContentAttachments = true;
        this.visibleElementsContentFields = true;
        this.visibleElementsContentMedia = true;
        this.visibleElementsContentText = true;
        this.visibleElementsContentExpression = true;
        this.visibleElementsLastEditInfo = true;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void componentUtils.referenceElementHelper(this, value);
    }
    defaultPopupTemplateEnabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.defaultPopupTemplateEnabled = value;
        }
    }
    graphicWatcher(value) {
        if (this.widget) {
            this.widget.graphic = value;
        }
    }
    locationWatcher(value) {
        if (this.widget) {
            this.widget.viewModel.location = value;
        }
    }
    spatialReferenceWatcher(value) {
        if (this.widget) {
            this.widget.spatialReference = value;
        }
    }
    visibleElementsTitleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                title: value
            };
        }
    }
    visibleElementsContentAttachmentsWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                content: {
                    ...this.widget.visibleElements.content,
                    attachments: value
                }
            };
        }
    }
    visibleElementsContentFieldsWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                content: {
                    ...this.widget.visibleElements.content,
                    fields: value
                }
            };
        }
    }
    visibleElementsContentMediaWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                content: {
                    ...this.widget.visibleElements.content,
                    media: value
                }
            };
        }
    }
    visibleElementsContentTextWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                content: {
                    ...this.widget.visibleElements.content,
                    text: value
                }
            };
        }
    }
    visibleElementsContentExpressionWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                content: {
                    ...this.widget.visibleElements.content,
                    expression: value
                }
            };
        }
    }
    visibleElementsLastEditInfoWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                lastEditInfo: value
            };
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async nextMedia(contentElementIndex) {
        this.widget?.nextMedia(contentElementIndex);
    }
    async previousMedia(contentElementIndex) {
        this.widget?.previousMedia(contentElementIndex);
    }
    async setActiveMedia(contentElementIndex, mediaInfoIndex) {
        this.widget?.setActiveMedia(contentElementIndex, mediaInfoIndex);
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await index$1.newWidgetsFeature(params);
        this.widget = widget;
        this._addContainer();
        this._setViewModelParams();
        await this._addWatchers();
        this.arcgisFeatureReady.emit();
        componentUtils.checkForView(this);
    }
    disconnectedCallback() {
        disconnected.onDisconnectedHelper(this);
    }
    render() {
        return index.h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await index$1.importCoreReactiveUtils();
        componentUtils.addHandles(this, watch(() => this.widget.view?.map, (value) => (this.map = value)));
    }
    _createParams() {
        const params = {};
        params.visibleElements = {
            title: this.visibleElementsTitle,
            content: {
                attachments: this.visibleElementsContentAttachments,
                fields: this.visibleElementsContentFields,
                media: this.visibleElementsContentMedia,
                text: this.visibleElementsContentText,
                expression: this.visibleElementsContentExpression
            },
            lastEditInfo: this.visibleElementsLastEditInfo
        };
        if (this.defaultPopupTemplateEnabled !== undefined) {
            params.defaultPopupTemplateEnabled = this.defaultPopupTemplateEnabled;
        }
        if (this.graphic) {
            params.graphic = this.graphic;
        }
        if (this.view) {
            params.view = this.view;
        }
        if (this.spatialReference) {
            params.spatialReference = this.spatialReference;
        }
        return params;
    }
    _setViewModelParams() {
        const params = {};
        if (this.location) {
            params.location = this.location;
        }
        this.widget.viewModel.set(params);
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "defaultPopupTemplateEnabled": ["defaultPopupTemplateEnabledWatcher"],
        "graphic": ["graphicWatcher"],
        "location": ["locationWatcher"],
        "spatialReference": ["spatialReferenceWatcher"],
        "visibleElementsTitle": ["visibleElementsTitleWatcher"],
        "visibleElementsContentAttachments": ["visibleElementsContentAttachmentsWatcher"],
        "visibleElementsContentFields": ["visibleElementsContentFieldsWatcher"],
        "visibleElementsContentMedia": ["visibleElementsContentMediaWatcher"],
        "visibleElementsContentText": ["visibleElementsContentTextWatcher"],
        "visibleElementsContentExpression": ["visibleElementsContentExpressionWatcher"],
        "visibleElementsLastEditInfo": ["visibleElementsLastEditInfoWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisFeature.style = featureCss;

exports.arcgis_feature = ArcgisFeature;
