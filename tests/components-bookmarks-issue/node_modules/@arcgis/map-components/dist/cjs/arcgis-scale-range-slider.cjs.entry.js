/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6e62126d.js');
const index$1 = require('./index-b2323407.js');
const componentUtils = require('./component-utils-e47db275.js');
const disconnected = require('./disconnected-bc6a8942.js');

const scaleRangeSliderCss = "arcgis-scale-range-slider{}";

const ArcgisScaleRangeSlider = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisScaleRangeSliderReady = index.createEvent(this, "arcgisScaleRangeSliderReady", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.disabled = false;
        this.layer = undefined;
        this.maxScale = undefined;
        this.maxScaleLimit = undefined;
        this.minScale = undefined;
        this.minScaleLimit = undefined;
        this.mode = "range";
        this.region = "US";
        this.visibleElementsPreview = true;
        this.visibleElementsScaleMenusMinScaleMenu = true;
        this.visibleElementsScaleMenusMaxScaleMenu = true;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void componentUtils.referenceElementHelper(this, value);
    }
    disabledWatcher(value, old) {
        if (this.widget && value !== old) {
            this.widget.disabled = value;
        }
    }
    layerWatcher(value) {
        if (this.widget) {
            this.widget.layer = value;
        }
    }
    maxScaleWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.maxScale = value;
        }
    }
    maxScaleLimitWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.maxScaleLimit = value;
        }
    }
    minScaleWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.minScale = value;
        }
    }
    minScaleLimitWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.minScaleLimit = value;
        }
    }
    modeWatcher(value) {
        if (this.widget) {
            this.widget.mode = value;
        }
    }
    regionWatcher(value) {
        if (this.widget) {
            this.widget.region = value;
        }
    }
    visibleElementsPreviewWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                preview: value
            };
        }
    }
    visibleElementsScaleMenusMinScaleMenuWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                scaleMenus: {
                    ...this.widget.visibleElements.scaleMenus,
                    minScaleMenu: value
                }
            };
        }
    }
    visibleElementsScaleMenusMaxScaleMenuWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                scaleMenus: {
                    ...this.widget.visibleElements.scaleMenus,
                    maxScaleMenu: value
                }
            };
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await index$1.newWidgetsScaleRangeSlider(params);
        this.widget = widget;
        await this._addWatchers();
        this._addContainer();
        this.arcgisScaleRangeSliderReady.emit();
        componentUtils.checkForView(this);
    }
    disconnectedCallback() {
        disconnected.onDisconnectedHelper(this);
    }
    render() {
        return index.h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await index$1.importCoreReactiveUtils();
        componentUtils.addHandles(this, watch(() => this.widget?.disabled, (value) => (this.disabled = value)));
    }
    _createParams() {
        const params = {};
        params.visibleElements = {
            preview: this.visibleElementsPreview,
            scaleMenus: {
                minScaleMenu: this.visibleElementsScaleMenusMinScaleMenu,
                maxScaleMenu: this.visibleElementsScaleMenusMaxScaleMenu
            }
        };
        if (this.layer) {
            params.layer = this.layer;
        }
        if (this.maxScale !== undefined) {
            params.maxScale = this.maxScale;
        }
        if (this.minScale !== undefined) {
            params.minScale = this.minScale;
        }
        if (this.maxScaleLimit !== undefined) {
            params.maxScaleLimit = this.maxScaleLimit;
        }
        if (this.minScaleLimit !== undefined) {
            params.minScaleLimit = this.minScaleLimit;
        }
        if (this.mode) {
            params.mode = this.mode;
        }
        if (this.region) {
            params.region = this.region;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "disabled": ["disabledWatcher"],
        "layer": ["layerWatcher"],
        "maxScale": ["maxScaleWatcher"],
        "maxScaleLimit": ["maxScaleLimitWatcher"],
        "minScale": ["minScaleWatcher"],
        "minScaleLimit": ["minScaleLimitWatcher"],
        "mode": ["modeWatcher"],
        "region": ["regionWatcher"],
        "visibleElementsPreview": ["visibleElementsPreviewWatcher"],
        "visibleElementsScaleMenusMinScaleMenu": ["visibleElementsScaleMenusMinScaleMenuWatcher"],
        "visibleElementsScaleMenusMaxScaleMenu": ["visibleElementsScaleMenusMaxScaleMenuWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisScaleRangeSlider.style = scaleRangeSliderCss;

exports.arcgis_scale_range_slider = ArcgisScaleRangeSlider;
