/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6e62126d.js');
const index$1 = require('./index-b2323407.js');
const componentUtils = require('./component-utils-e47db275.js');
const disconnected = require('./disconnected-bc6a8942.js');

const shadowCastCss = "arcgis-shadow-cast{}";

const END_TIME = 16 * 3600 * 1000;
const START_TIME = 10 * 3600 * 1000;
const ArcgisShadowCast = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisShadowCastReady = index.createEvent(this, "arcgisShadowCastReady", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.discreteOptions = undefined;
        this.durationOptions = undefined;
        this.endTimeOfDay = END_TIME;
        this.startTimeOfDay = START_TIME;
        this.thresholdOptions = undefined;
        this.utcOffset = undefined;
        this.visualizationType = "threshold";
        this.icon = undefined;
        this.visibleElementsTimeRangeSlider = true;
        this.visibleElementsTimezone = true;
        this.visibleElementsDatePicker = true;
        this.visibleElementsVisualizationOptions = true;
        this.visibleElementsColorPicker = true;
        this.visibleElementsTooltip = true;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void componentUtils.referenceElementHelper(this, value);
    }
    discreteOptionsWatcher(value) {
        if (this.widget) {
            this.widget.viewModel.discreteOptions = value;
        }
    }
    durationOptionsWatcher(value) {
        if (this.widget) {
            this.widget.viewModel.durationOptions = value;
        }
    }
    endTimeOfDayWatcher(value) {
        if (this.widget) {
            this.widget.viewModel.endTimeOfDay = value;
        }
    }
    startTimeOfDayWatcher(value) {
        if (this.widget) {
            this.widget.viewModel.startTimeOfDay = value;
        }
    }
    thresholdOptionsWatcher(value) {
        if (this.widget) {
            this.widget.viewModel.thresholdOptions = value;
        }
    }
    utcOffsetWatcher(value) {
        if (this.widget) {
            this.widget.viewModel.utcOffset = value;
        }
    }
    visualizationTypeWatcher(value) {
        if (this.widget) {
            this.widget.viewModel.visualizationType = value;
        }
    }
    iconWatcher(value) {
        if (this.widget) {
            this.widget.icon = value;
        }
    }
    visibleElementsTimeRangeSliderWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                timeRangeSlider: value
            };
        }
    }
    visibleElementsTimezoneWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                timezone: value
            };
        }
    }
    visibleElementsDatePickerWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                datePicker: value
            };
        }
    }
    visibleElementsVisualizationOptionsWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                visualizationOptions: value
            };
        }
    }
    visibleElementsColorPickerWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                colorPicker: value
            };
        }
    }
    visibleElementsTooltipWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                tooltip: value
            };
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async getDuration(point) {
        return this.widget?.viewModel.getDuration(point);
    }
    async start() {
        this.widget?.viewModel.start();
    }
    async stop() {
        this.widget?.viewModel.stop();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await index$1.newWidgetsShadowCast(params);
        this.widget = widget;
        this._setViewModelParams();
        this._addContainer();
        this.arcgisShadowCastReady.emit();
        componentUtils.checkForView(this);
    }
    disconnectedCallback() {
        disconnected.onDisconnectedHelper(this);
    }
    render() {
        return index.h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    _createParams() {
        const params = {};
        params.visibleElements = {
            timeRangeSlider: this.visibleElementsTimeRangeSlider,
            timezone: this.visibleElementsTimezone,
            datePicker: this.visibleElementsDatePicker,
            visualizationOptions: this.visibleElementsVisualizationOptions,
            colorPicker: this.visibleElementsColorPicker,
            tooltip: this.visibleElementsTooltip
        };
        if (this.icon) {
            params.icon = this.icon;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    _setViewModelParams() {
        const params = {
            endTimeOfDay: this.endTimeOfDay,
            startTimeOfDay: this.startTimeOfDay,
            visualizationType: this.visualizationType
        };
        if (this.discreteOptions) {
            params.discreteOptions = this.discreteOptions;
        }
        if (this.durationOptions) {
            params.durationOptions = this.durationOptions;
        }
        if (this.thresholdOptions) {
            params.thresholdOptions = this.thresholdOptions;
        }
        if (this.utcOffset) {
            params.utcOffset = this.utcOffset;
        }
        this.widget.viewModel.set(params);
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "discreteOptions": ["discreteOptionsWatcher"],
        "durationOptions": ["durationOptionsWatcher"],
        "endTimeOfDay": ["endTimeOfDayWatcher"],
        "startTimeOfDay": ["startTimeOfDayWatcher"],
        "thresholdOptions": ["thresholdOptionsWatcher"],
        "utcOffset": ["utcOffsetWatcher"],
        "visualizationType": ["visualizationTypeWatcher"],
        "icon": ["iconWatcher"],
        "visibleElementsTimeRangeSlider": ["visibleElementsTimeRangeSliderWatcher"],
        "visibleElementsTimezone": ["visibleElementsTimezoneWatcher"],
        "visibleElementsDatePicker": ["visibleElementsDatePickerWatcher"],
        "visibleElementsVisualizationOptions": ["visibleElementsVisualizationOptionsWatcher"],
        "visibleElementsColorPicker": ["visibleElementsColorPickerWatcher"],
        "visibleElementsTooltip": ["visibleElementsTooltipWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisShadowCast.style = shadowCastCss;

exports.arcgis_shadow_cast = ArcgisShadowCast;
