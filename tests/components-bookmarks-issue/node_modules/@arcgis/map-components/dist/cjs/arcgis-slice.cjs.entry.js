/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6e62126d.js');
const index$1 = require('./index-b2323407.js');
const componentUtils = require('./component-utils-e47db275.js');
const disconnected = require('./disconnected-bc6a8942.js');

const sliceCss = "arcgis-slice{}";

const ArcgisSlice = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisSliceReady = index.createEvent(this, "arcgisSliceReady", 7);
        this.arcgisPropertyChange = index.createEvent(this, "arcgisPropertyChange", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.analysis = undefined;
        this.excludedLayers = undefined;
        this.excludeGroundSurface = false;
        this.icon = undefined;
        this.shape = undefined;
        this.tiltEnabled = false;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void componentUtils.referenceElementHelper(this, value);
    }
    excludedLayersWatcher(value) {
        if (this.widget) {
            this.widget.viewModel.excludedLayers = value;
        }
    }
    excludeGroundSurfaceWatcher(value) {
        if (this.widget) {
            this.widget.viewModel.excludeGroundSurface = value;
        }
    }
    iconWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.icon = value;
        }
    }
    shapeWatcher(value) {
        if (this.widget) {
            this.widget.viewModel.shape = value;
        }
    }
    tiltEnabledWatcher(value) {
        if (this.widget) {
            this.widget.viewModel.tiltEnabled = value;
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async clear() {
        this.widget?.viewModel.clear();
    }
    async start() {
        this.widget?.viewModel.start();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await index$1.newWidgetsSlice(params);
        this.widget = widget;
        await this._addWatchers();
        this._addContainer();
        this.arcgisSliceReady.emit();
        componentUtils.checkForView(this);
    }
    disconnectedCallback() {
        disconnected.onDisconnectedHelper(this);
    }
    render() {
        return index.h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await index$1.importCoreReactiveUtils();
        componentUtils.addHandles(this, watch(() => this.widget.analysis, (value) => {
            this.analysis = value;
            this.arcgisPropertyChange.emit({ name: "analysis" });
        }, {
            initial: true
        }));
    }
    _createParams() {
        const params = {};
        params.viewModel = {
            excludeGroundSurface: this.excludeGroundSurface,
            tiltEnabled: this.tiltEnabled
        };
        if (this.excludedLayers) {
            params.viewModel.excludedLayers = this.excludedLayers;
        }
        if (this.shape) {
            params.viewModel.shape = this.shape;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "excludedLayers": ["excludedLayersWatcher"],
        "excludeGroundSurface": ["excludeGroundSurfaceWatcher"],
        "icon": ["iconWatcher"],
        "shape": ["shapeWatcher"],
        "tiltEnabled": ["tiltEnabledWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisSlice.style = sliceCss;

exports.arcgis_slice = ArcgisSlice;
