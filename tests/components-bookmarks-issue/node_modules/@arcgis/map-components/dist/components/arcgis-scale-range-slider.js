/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { P as newWidgetsScaleRangeSlider, i as importCoreReactiveUtils } from './index2.js';
import { r as referenceElementHelper, c as checkForView, a as addHandles } from './component-utils.js';
import { o as onDisconnectedHelper } from './disconnected.js';

const scaleRangeSliderCss = "arcgis-scale-range-slider{}";

const ArcgisScaleRangeSlider$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisScaleRangeSlider extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.arcgisScaleRangeSliderReady = createEvent(this, "arcgisScaleRangeSliderReady", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.disabled = false;
        this.layer = undefined;
        this.maxScale = undefined;
        this.maxScaleLimit = undefined;
        this.minScale = undefined;
        this.minScaleLimit = undefined;
        this.mode = "range";
        this.region = "US";
        this.visibleElementsPreview = true;
        this.visibleElementsScaleMenusMinScaleMenu = true;
        this.visibleElementsScaleMenusMaxScaleMenu = true;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void referenceElementHelper(this, value);
    }
    disabledWatcher(value, old) {
        if (this.widget && value !== old) {
            this.widget.disabled = value;
        }
    }
    layerWatcher(value) {
        if (this.widget) {
            this.widget.layer = value;
        }
    }
    maxScaleWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.maxScale = value;
        }
    }
    maxScaleLimitWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.maxScaleLimit = value;
        }
    }
    minScaleWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.minScale = value;
        }
    }
    minScaleLimitWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.minScaleLimit = value;
        }
    }
    modeWatcher(value) {
        if (this.widget) {
            this.widget.mode = value;
        }
    }
    regionWatcher(value) {
        if (this.widget) {
            this.widget.region = value;
        }
    }
    visibleElementsPreviewWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                preview: value
            };
        }
    }
    visibleElementsScaleMenusMinScaleMenuWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                scaleMenus: {
                    ...this.widget.visibleElements.scaleMenus,
                    minScaleMenu: value
                }
            };
        }
    }
    visibleElementsScaleMenusMaxScaleMenuWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                scaleMenus: {
                    ...this.widget.visibleElements.scaleMenus,
                    maxScaleMenu: value
                }
            };
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await newWidgetsScaleRangeSlider(params);
        this.widget = widget;
        await this._addWatchers();
        this._addContainer();
        this.arcgisScaleRangeSliderReady.emit();
        checkForView(this);
    }
    disconnectedCallback() {
        onDisconnectedHelper(this);
    }
    render() {
        return h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await importCoreReactiveUtils();
        addHandles(this, watch(() => this.widget?.disabled, (value) => (this.disabled = value)));
    }
    _createParams() {
        const params = {};
        params.visibleElements = {
            preview: this.visibleElementsPreview,
            scaleMenus: {
                minScaleMenu: this.visibleElementsScaleMenusMinScaleMenu,
                maxScaleMenu: this.visibleElementsScaleMenusMaxScaleMenu
            }
        };
        if (this.layer) {
            params.layer = this.layer;
        }
        if (this.maxScale !== undefined) {
            params.maxScale = this.maxScale;
        }
        if (this.minScale !== undefined) {
            params.minScale = this.minScale;
        }
        if (this.maxScaleLimit !== undefined) {
            params.maxScaleLimit = this.maxScaleLimit;
        }
        if (this.minScaleLimit !== undefined) {
            params.minScaleLimit = this.minScaleLimit;
        }
        if (this.mode) {
            params.mode = this.mode;
        }
        if (this.region) {
            params.region = this.region;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    get el() { return this; }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "disabled": ["disabledWatcher"],
        "layer": ["layerWatcher"],
        "maxScale": ["maxScaleWatcher"],
        "maxScaleLimit": ["maxScaleLimitWatcher"],
        "minScale": ["minScaleWatcher"],
        "minScaleLimit": ["minScaleLimitWatcher"],
        "mode": ["modeWatcher"],
        "region": ["regionWatcher"],
        "visibleElementsPreview": ["visibleElementsPreviewWatcher"],
        "visibleElementsScaleMenusMinScaleMenu": ["visibleElementsScaleMenusMinScaleMenuWatcher"],
        "visibleElementsScaleMenusMaxScaleMenu": ["visibleElementsScaleMenusMaxScaleMenuWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
    static get style() { return scaleRangeSliderCss; }
}, [0, "arcgis-scale-range-slider", {
        "referenceElement": [1, "reference-element"],
        "disabled": [1540],
        "layer": [16],
        "maxScale": [2, "max-scale"],
        "maxScaleLimit": [2, "max-scale-limit"],
        "minScale": [2, "min-scale"],
        "minScaleLimit": [2, "min-scale-limit"],
        "mode": [1],
        "region": [1],
        "visibleElementsPreview": [4, "visible-elements-preview"],
        "visibleElementsScaleMenusMinScaleMenu": [4, "visible-elements-scale-menus-min-scale-menu"],
        "visibleElementsScaleMenusMaxScaleMenu": [4, "visible-elements-scale-menus-max-scale-menu"],
        "position": [1],
        "view": [1040],
        "widget": [1040]
    }, undefined, {
        "referenceElement": ["referenceElementWatcher"],
        "disabled": ["disabledWatcher"],
        "layer": ["layerWatcher"],
        "maxScale": ["maxScaleWatcher"],
        "maxScaleLimit": ["maxScaleLimitWatcher"],
        "minScale": ["minScaleWatcher"],
        "minScaleLimit": ["minScaleLimitWatcher"],
        "mode": ["modeWatcher"],
        "region": ["regionWatcher"],
        "visibleElementsPreview": ["visibleElementsPreviewWatcher"],
        "visibleElementsScaleMenusMinScaleMenu": ["visibleElementsScaleMenusMinScaleMenuWatcher"],
        "visibleElementsScaleMenusMaxScaleMenu": ["visibleElementsScaleMenusMaxScaleMenuWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-scale-range-slider"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-scale-range-slider":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisScaleRangeSlider$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisScaleRangeSlider = ArcgisScaleRangeSlider$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisScaleRangeSlider, defineCustomElement };
