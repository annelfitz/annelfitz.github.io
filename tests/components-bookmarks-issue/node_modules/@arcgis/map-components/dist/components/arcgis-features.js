/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { z as newWidgetsFeatures, i as importCoreReactiveUtils } from './index2.js';
import { r as referenceElementHelper, c as checkForView, a as addHandles } from './component-utils.js';
import { o as onDisconnectedHelper } from './disconnected.js';

const featuresCss = "arcgis-features{}";

const ArcgisFeatures$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisFeatures extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.arcgisFeaturesReady = createEvent(this, "arcgisFeaturesReady", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.featuresTriggerAction = createEvent(this, "featuresTriggerAction", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.collapsed = false;
        this.content = undefined;
        this.features = undefined;
        this.icon = undefined;
        this.promises = undefined;
        this.selectedFeature = undefined;
        this.selectedFeatureIndex = undefined;
        this.featuresTitle = undefined;
        this.visibleElementsActionBar = true;
        this.visibleElementsCloseButton = true;
        this.visibleElementsCollapseButton = true;
        this.visibleElementsFeatureNavigation = true;
        this.visibleElementsHeading = true;
        this.visibleElementsSpinner = true;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void referenceElementHelper(this, value);
    }
    contentWatcher(value) {
        if (this.widget) {
            this.widget.content = value;
        }
    }
    featuresWatcher(value) {
        if (this.widget) {
            this.widget.features = value;
        }
    }
    iconWatcher(value) {
        if (this.widget) {
            this.widget.icon = value;
        }
    }
    featuresTitleWatcher(value) {
        if (this.widget) {
            this.widget.title = value;
        }
    }
    visibleElementsActionBarWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                actionBar: value
            };
        }
    }
    visibleElementsCloseButtonWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                closeButton: value
            };
        }
    }
    visibleElementsCollapseButtonWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                collapseButton: value
            };
        }
    }
    visibleElementsFeatureNavigationWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                featureNavigation: value
            };
        }
    }
    visibleElementsHeadingWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                heading: value
            };
        }
    }
    visibleElementsSpinnerWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                spinner: value
            };
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async fetchFeatures(screenPoint, options) {
        return await this.widget?.fetchFeatures(screenPoint, options);
    }
    async clear() {
        this.widget?.clear();
    }
    async close() {
        this.widget?.close();
    }
    async next() {
        return this.widget?.next();
    }
    async open(options) {
        this.widget?.open(options);
    }
    async previous() {
        return this.widget?.previous();
    }
    async triggerAction(actionIndex) {
        this.widget?.triggerAction(actionIndex);
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await newWidgetsFeatures(params);
        this.widget = widget;
        await this._addWatchers();
        this._proxyEvents();
        this._addContainer();
        this.arcgisFeaturesReady.emit();
        checkForView(this);
    }
    disconnectedCallback() {
        onDisconnectedHelper(this);
    }
    render() {
        return h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await importCoreReactiveUtils();
        addHandles(this, watch(() => this.widget.collapsed, (value) => (this.collapsed = value), {
            initial: true
        }));
        addHandles(this, watch(() => this.widget.promises, (value) => (this.promises = value), {
            initial: true
        }));
        addHandles(this, watch(() => this.widget.selectedFeature, (value) => {
            this.selectedFeature = value;
            this.arcgisPropertyChange.emit({ name: "selectedFeature" });
        }, {
            initial: true
        }));
        addHandles(this, watch(() => this.widget.selectedFeatureIndex, (value) => {
            this.selectedFeatureIndex = value;
            this.arcgisPropertyChange.emit({ name: "selectedFeatureIndex" });
        }, {
            initial: true
        }));
    }
    _createParams() {
        const params = {};
        params.visibleElements = {
            actionBar: this.visibleElementsActionBar,
            closeButton: this.visibleElementsCloseButton,
            collapseButton: this.visibleElementsCollapseButton,
            featureNavigation: this.visibleElementsFeatureNavigation,
            heading: this.visibleElementsHeading,
            spinner: this.visibleElementsSpinner
        };
        if (this.icon) {
            params.icon = this.icon;
        }
        if (this.view) {
            params.view = this.view;
        }
        if (this.content) {
            params.content = this.content;
        }
        if (this.features) {
            params.features = this.features;
        }
        if (this.featuresTitle) {
            params.title = this.featuresTitle;
        }
        return params;
    }
    _proxyEvents() {
        this.widget.on("trigger-action", (e) => this.featuresTriggerAction.emit(e));
    }
    get el() { return this; }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "content": ["contentWatcher"],
        "features": ["featuresWatcher"],
        "icon": ["iconWatcher"],
        "featuresTitle": ["featuresTitleWatcher"],
        "visibleElementsActionBar": ["visibleElementsActionBarWatcher"],
        "visibleElementsCloseButton": ["visibleElementsCloseButtonWatcher"],
        "visibleElementsCollapseButton": ["visibleElementsCollapseButtonWatcher"],
        "visibleElementsFeatureNavigation": ["visibleElementsFeatureNavigationWatcher"],
        "visibleElementsHeading": ["visibleElementsHeadingWatcher"],
        "visibleElementsSpinner": ["visibleElementsSpinnerWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
    static get style() { return featuresCss; }
}, [0, "arcgis-features", {
        "referenceElement": [1, "reference-element"],
        "collapsed": [1540],
        "content": [1],
        "features": [16],
        "icon": [1],
        "promises": [1040],
        "selectedFeature": [1040],
        "selectedFeatureIndex": [1026, "selected-feature-index"],
        "featuresTitle": [1, "features-title"],
        "visibleElementsActionBar": [4, "visible-elements-action-bar"],
        "visibleElementsCloseButton": [4, "visible-elements-close-button"],
        "visibleElementsCollapseButton": [4, "visible-elements-collapse-button"],
        "visibleElementsFeatureNavigation": [4, "visible-elements-feature-navigation"],
        "visibleElementsHeading": [4, "visible-elements-heading"],
        "visibleElementsSpinner": [4, "visible-elements-spinner"],
        "position": [1],
        "view": [1040],
        "widget": [1040],
        "fetchFeatures": [64],
        "clear": [64],
        "close": [64],
        "next": [64],
        "open": [64],
        "previous": [64],
        "triggerAction": [64]
    }, undefined, {
        "referenceElement": ["referenceElementWatcher"],
        "content": ["contentWatcher"],
        "features": ["featuresWatcher"],
        "icon": ["iconWatcher"],
        "featuresTitle": ["featuresTitleWatcher"],
        "visibleElementsActionBar": ["visibleElementsActionBarWatcher"],
        "visibleElementsCloseButton": ["visibleElementsCloseButtonWatcher"],
        "visibleElementsCollapseButton": ["visibleElementsCollapseButtonWatcher"],
        "visibleElementsFeatureNavigation": ["visibleElementsFeatureNavigationWatcher"],
        "visibleElementsHeading": ["visibleElementsHeadingWatcher"],
        "visibleElementsSpinner": ["visibleElementsSpinnerWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-features"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-features":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisFeatures$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisFeatures = ArcgisFeatures$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisFeatures, defineCustomElement };
