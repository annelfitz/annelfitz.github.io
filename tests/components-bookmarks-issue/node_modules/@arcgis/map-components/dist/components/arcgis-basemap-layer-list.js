/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { e as newWidgetsBasemapLayerList, i as importCoreReactiveUtils } from './index2.js';
import { r as referenceElementHelper, c as checkForView, a as addHandles } from './component-utils.js';
import { o as onDisconnectedHelper } from './disconnected.js';

const basemapLayerListCss = "";

const ArcgisBasemapLayerList$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisBasemapLayerList extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.arcgisBasemapLayerListReady = createEvent(this, "arcgisBasemapLayerListReady", 7);
        this.basemapLayerListTriggerAction = createEvent(this, "basemapLayerListTriggerAction", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.baseFilterText = "";
        this.baseItems = undefined;
        this.baseListItemCreatedFunction = undefined;
        this.basemapTitle = undefined;
        this.collapsed = false;
        this.dragEnabled = false;
        this.editingTitle = false;
        this.filterPlaceholder = "";
        this.icon = undefined;
        this.minFilterItems = 10;
        this.referenceFilterText = "";
        this.referenceListItemCreatedFunction = undefined;
        this.selectedItems = undefined;
        this.selectionMode = "none";
        this.visibilityAppearance = "default";
        this.visibleElementsBaseLayers = true;
        this.visibleElementsCloseButton = false;
        this.visibleElementsCollapseButton = false;
        this.visibleElementsEditTitleButton = false;
        this.visibleElementsErrors = false;
        this.visibleElementsFilter = false;
        this.visibleElementsFlow = true;
        this.visibleElementsHeading = true;
        this.visibleElementsReferenceLayers = true;
        this.visibleElementsStatusIndicators = true;
        this.visibleElementsTemporaryLayerIndicators = false;
        this.view = undefined;
        this.widget = undefined;
        this.position = "bottom-left";
    }
    referenceElementWatcher(value) {
        void referenceElementHelper(this, value);
    }
    baseFilterTextWatcher(value) {
        if (this.widget) {
            this.widget.baseFilterText = value;
        }
    }
    baseListItemCreatedFunctionWatcher(value) {
        if (this.widget) {
            this.widget.baseListItemCreatedFunction = value;
        }
    }
    basemapTitleWatcher(value, old) {
        if (this.widget && value !== old) {
            this.widget.basemapTitle = value;
        }
    }
    collapsedWatcher(value) {
        if (this.widget && this.widget.collapsed !== value) {
            this.widget.collapsed = value;
        }
    }
    dragEnabledWatcher(value) {
        if (this.widget && value !== undefined) {
            this.widget.dragEnabled = value;
        }
    }
    editingTitleWatcher(value) {
        if (this.widget && value !== undefined) {
            this.widget.editingTitle = value;
        }
    }
    filterPlaceholderWatcher(value) {
        if (this.widget) {
            this.widget.filterPlaceholder = value;
        }
    }
    iconWatcher(value) {
        if (this.widget) {
            this.widget.icon = value;
        }
    }
    minFilterItemsWatcher(value) {
        if (this.widget) {
            this.widget.minFilterItems = value;
        }
    }
    referenceFilterTextWatcher(value) {
        if (this.widget) {
            this.widget.referenceFilterText = value;
        }
    }
    referenceListItemCreatedFunctionWatcher(value) {
        if (this.widget) {
            this.widget.referenceListItemCreatedFunction = value;
        }
    }
    selectionModeWatcher(value) {
        if (this.widget) {
            this.widget.selectionMode = value;
        }
    }
    visibilityAppearanceWatcher(value) {
        if (this.widget) {
            this.widget.visibilityAppearance = value;
        }
    }
    visibleElementsBaseLayersWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                baseLayers: value
            };
        }
    }
    visibleElementsCloseButtonWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                closeButton: value
            };
        }
    }
    visibleElementsCollapseButtonWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                collapseButton: value
            };
        }
    }
    visibleElementsEditTitleButtonWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                editTitleButton: value
            };
        }
    }
    visibleElementsErrorsWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                errors: value
            };
        }
    }
    visibleElementsFilterWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                filter: value
            };
        }
    }
    visibleElementsFlowWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                flow: value
            };
        }
    }
    visibleElementsHeadingWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                filter: value
            };
        }
    }
    visibleElementsReferenceLayersWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                referenceLayers: value
            };
        }
    }
    visibleElementsStatusIndicatorsWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                statusIndicators: value
            };
        }
    }
    visibleElementsTemporaryLayerIndicatorsWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                temporaryLayerIndicators: value
            };
        }
    }
    viewWatcher(value) {
        if (this.widget) {
            this.widget.view = value;
        }
    }
    positionWatcher(value) {
        if (this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await newWidgetsBasemapLayerList(params);
        this.widget = widget;
        await this._addWatchers();
        await this._addWatchers();
        this._proxyEvents();
        this._addContainer();
        this.arcgisBasemapLayerListReady.emit();
        checkForView(this);
    }
    disconnectedCallback() {
        onDisconnectedHelper(this);
    }
    render() {
        return h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    _createParams() {
        const params = {};
        params.visibleElements = {
            baseLayers: this.visibleElementsBaseLayers,
            closeButton: this.visibleElementsCloseButton,
            collapseButton: this.visibleElementsCollapseButton,
            editTitleButton: this.visibleElementsEditTitleButton,
            errors: this.visibleElementsErrors,
            filter: this.visibleElementsFilter,
            flow: this.visibleElementsFlow,
            heading: this.visibleElementsHeading,
            referenceLayers: this.visibleElementsReferenceLayers,
            statusIndicators: this.visibleElementsStatusIndicators,
            temporaryLayerIndicators: this.visibleElementsTemporaryLayerIndicators
        };
        if (this.baseFilterText) {
            params.baseFilterText = this.baseFilterText;
        }
        if (this.baseListItemCreatedFunction) {
            params.baseListItemCreatedFunction = this.baseListItemCreatedFunction;
        }
        if (this.basemapTitle) {
            params.basemapTitle = this.basemapTitle;
        }
        if (this.collapsed !== undefined) {
            params.collapsed = this.collapsed;
        }
        if (this.dragEnabled !== undefined) {
            params.dragEnabled = this.dragEnabled;
        }
        if (this.editingTitle !== undefined) {
            params.editingTitle = this.editingTitle;
        }
        if (this.filterPlaceholder) {
            params.filterPlaceholder = this.filterPlaceholder;
        }
        if (this.icon) {
            params.icon = this.icon;
        }
        if (this.minFilterItems !== undefined) {
            params.minFilterItems = this.minFilterItems;
        }
        if (this.referenceFilterText) {
            params.referenceFilterText = this.referenceFilterText;
        }
        if (this.referenceListItemCreatedFunction) {
            params.referenceListItemCreatedFunction = this.referenceListItemCreatedFunction;
        }
        if (this.selectionMode) {
            params.selectionMode = this.selectionMode;
        }
        if (this.visibilityAppearance) {
            params.visibilityAppearance = this.visibilityAppearance;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    async _addWatchers() {
        const { watch } = await importCoreReactiveUtils();
        addHandles(this, [
            watch(() => this.widget.baseItems, (value) => (this.baseItems = value), {
                initial: true
            }),
            watch(() => this.widget.selectedItems, (value) => (this.selectedItems = value), {
                initial: true
            }),
            watch(() => this.widget.basemapTitle, (value) => {
                if (!this.basemapTitle) {
                    this.basemapTitle = value;
                }
            }, {
                initial: true
            }),
            watch(() => this.widget.collapsed, (value) => (this.collapsed = value))
        ]);
    }
    _proxyEvents() {
        this.widget?.on("trigger-action", (e) => this.basemapLayerListTriggerAction.emit(e));
    }
    get el() { return this; }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "baseFilterText": ["baseFilterTextWatcher"],
        "baseListItemCreatedFunction": ["baseListItemCreatedFunctionWatcher"],
        "basemapTitle": ["basemapTitleWatcher"],
        "collapsed": ["collapsedWatcher"],
        "dragEnabled": ["dragEnabledWatcher"],
        "editingTitle": ["editingTitleWatcher"],
        "filterPlaceholder": ["filterPlaceholderWatcher"],
        "icon": ["iconWatcher"],
        "minFilterItems": ["minFilterItemsWatcher"],
        "referenceFilterText": ["referenceFilterTextWatcher"],
        "referenceListItemCreatedFunction": ["referenceListItemCreatedFunctionWatcher"],
        "selectionMode": ["selectionModeWatcher"],
        "visibilityAppearance": ["visibilityAppearanceWatcher"],
        "visibleElementsBaseLayers": ["visibleElementsBaseLayersWatcher"],
        "visibleElementsCloseButton": ["visibleElementsCloseButtonWatcher"],
        "visibleElementsCollapseButton": ["visibleElementsCollapseButtonWatcher"],
        "visibleElementsEditTitleButton": ["visibleElementsEditTitleButtonWatcher"],
        "visibleElementsErrors": ["visibleElementsErrorsWatcher"],
        "visibleElementsFilter": ["visibleElementsFilterWatcher"],
        "visibleElementsFlow": ["visibleElementsFlowWatcher"],
        "visibleElementsHeading": ["visibleElementsHeadingWatcher"],
        "visibleElementsReferenceLayers": ["visibleElementsReferenceLayersWatcher"],
        "visibleElementsStatusIndicators": ["visibleElementsStatusIndicatorsWatcher"],
        "visibleElementsTemporaryLayerIndicators": ["visibleElementsTemporaryLayerIndicatorsWatcher"],
        "view": ["viewWatcher"],
        "position": ["positionWatcher"]
    }; }
    static get style() { return basemapLayerListCss; }
}, [0, "arcgis-basemap-layer-list", {
        "referenceElement": [1, "reference-element"],
        "baseFilterText": [1, "base-filter-text"],
        "baseItems": [1040],
        "baseListItemCreatedFunction": [16],
        "basemapTitle": [1025, "basemap-title"],
        "collapsed": [1540],
        "dragEnabled": [4, "drag-enabled"],
        "editingTitle": [4, "editing-title"],
        "filterPlaceholder": [1, "filter-placeholder"],
        "icon": [1],
        "minFilterItems": [2, "min-filter-items"],
        "referenceFilterText": [1, "reference-filter-text"],
        "referenceListItemCreatedFunction": [16],
        "selectedItems": [1040],
        "selectionMode": [1, "selection-mode"],
        "visibilityAppearance": [1, "visibility-appearance"],
        "visibleElementsBaseLayers": [4, "visible-elements-base-layers"],
        "visibleElementsCloseButton": [4, "visible-elements-close-button"],
        "visibleElementsCollapseButton": [4, "visible-elements-collapse-button"],
        "visibleElementsEditTitleButton": [4, "visible-elements-edit-title-button"],
        "visibleElementsErrors": [4, "visible-elements-errors"],
        "visibleElementsFilter": [4, "visible-elements-filter"],
        "visibleElementsFlow": [4, "visible-elements-flow"],
        "visibleElementsHeading": [4, "visible-elements-heading"],
        "visibleElementsReferenceLayers": [4, "visible-elements-reference-layers"],
        "visibleElementsStatusIndicators": [4, "visible-elements-status-indicators"],
        "visibleElementsTemporaryLayerIndicators": [4, "visible-elements-temporary-layer-indicators"],
        "view": [1040],
        "widget": [1040],
        "position": [1]
    }, undefined, {
        "referenceElement": ["referenceElementWatcher"],
        "baseFilterText": ["baseFilterTextWatcher"],
        "baseListItemCreatedFunction": ["baseListItemCreatedFunctionWatcher"],
        "basemapTitle": ["basemapTitleWatcher"],
        "collapsed": ["collapsedWatcher"],
        "dragEnabled": ["dragEnabledWatcher"],
        "editingTitle": ["editingTitleWatcher"],
        "filterPlaceholder": ["filterPlaceholderWatcher"],
        "icon": ["iconWatcher"],
        "minFilterItems": ["minFilterItemsWatcher"],
        "referenceFilterText": ["referenceFilterTextWatcher"],
        "referenceListItemCreatedFunction": ["referenceListItemCreatedFunctionWatcher"],
        "selectionMode": ["selectionModeWatcher"],
        "visibilityAppearance": ["visibilityAppearanceWatcher"],
        "visibleElementsBaseLayers": ["visibleElementsBaseLayersWatcher"],
        "visibleElementsCloseButton": ["visibleElementsCloseButtonWatcher"],
        "visibleElementsCollapseButton": ["visibleElementsCollapseButtonWatcher"],
        "visibleElementsEditTitleButton": ["visibleElementsEditTitleButtonWatcher"],
        "visibleElementsErrors": ["visibleElementsErrorsWatcher"],
        "visibleElementsFilter": ["visibleElementsFilterWatcher"],
        "visibleElementsFlow": ["visibleElementsFlowWatcher"],
        "visibleElementsHeading": ["visibleElementsHeadingWatcher"],
        "visibleElementsReferenceLayers": ["visibleElementsReferenceLayersWatcher"],
        "visibleElementsStatusIndicators": ["visibleElementsStatusIndicatorsWatcher"],
        "visibleElementsTemporaryLayerIndicators": ["visibleElementsTemporaryLayerIndicatorsWatcher"],
        "view": ["viewWatcher"],
        "position": ["positionWatcher"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-basemap-layer-list"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-basemap-layer-list":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisBasemapLayerList$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisBasemapLayerList = ArcgisBasemapLayerList$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisBasemapLayerList, defineCustomElement };
