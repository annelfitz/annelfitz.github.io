/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { i as importCoreReactiveUtils } from './index2.js';
import "@esri/calcite-components/dist/components/calcite-flow-item.js";
import "@esri/calcite-components/dist/components/calcite-panel.js";
import "@esri/calcite-components/dist/components/calcite-label.js";
import "@esri/calcite-components/dist/components/calcite-input-text.js";
import "@esri/calcite-components/dist/components/calcite-text-area.js";
import "@esri/calcite-components/dist/components/calcite-chip-group.js";
import "@esri/calcite-components/dist/components/calcite-chip.js";
import "@esri/calcite-components/dist/components/calcite-button.js";
import "@esri/calcite-components/dist/components/calcite-notice.js";

const ArcgisVersionManagementVersionProperties = /*@__PURE__*/ proxyCustomElement(class ArcgisVersionManagementVersionProperties extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.versionPropertiesSaveClickedEvent = createEvent(this, "versionPropertiesSaveClickedEvent", 7);
        this._watchHandles = [];
        this.flowElement = undefined;
        this.serviceUrl = undefined;
        this.strings = undefined;
        this.versionInfo = undefined;
        this.viewModel = undefined;
        this.executionError = undefined;
        this.state = undefined;
    }
    async componentDidLoad() {
        await this.viewModel.getVersionInfos(this.serviceUrl, false);
    }
    async componentWillLoad() {
        const { watch } = await importCoreReactiveUtils();
        this._watchHandles.push(watch(() => this.viewModel.state, (state) => {
            this.state = state;
        }));
    }
    disconnectedCallback() {
        this._watchHandles.forEach((handle) => {
            handle.remove();
        });
        this._watchHandles = [];
    }
    render() {
        const { serviceUrl, strings, versionInfo } = this;
        const { viewModel: { executionError } } = this;
        return (h(Host, null, h("calcite-flow-item", { description: versionInfo ? versionInfo.versionIdentifier.name : "", heading: versionInfo ? strings.actions.editVersion : strings.actions.newVersion }, h("calcite-panel", { loading: this.state === "executing" }, h("div", { class: "div-content" }, h("calcite-label", null, strings.input.versionName, h("calcite-input-text", { id: "inputName", maxLength: 62, value: versionInfo ? versionInfo.versionIdentifier.name.split(".")[1] : "" })), h("calcite-label", null, strings.input.versionDescription, h("calcite-text-area", { id: "inputDescription", resize: "vertical", value: versionInfo ? versionInfo.description : "" })), h("calcite-label", null, strings.input.versionAccess, h("calcite-chip-group", { id: "chipGroupAccessLevel", selectionMode: "single", label: "" }, h("calcite-chip", { selected: versionInfo?.access === "public" || !versionInfo, value: "public" }, strings.accessLevels.public), h("calcite-chip", { selected: versionInfo?.access === "protected", value: "protected" }, strings.accessLevels.protected), h("calcite-chip", { selected: versionInfo?.access === "private", value: "private" }, strings.accessLevels.private))), h("calcite-label", null, strings.input.versionOwner, h("calcite-input-text", { id: "inputOwner", disabled: !this.viewModel.advancedEditingUserTypeExtensionLookup.get(serviceUrl), value: versionInfo
                ? versionInfo.versionIdentifier.name.split(".")[0]
                : this.viewModel.userLookup.get(serviceUrl)?.toUpperCase() })), h("calcite-button", { appearance: "outline", slot: "footer", width: "half", onClick: () => {
                void this.flowElement.back();
            } }, strings.actions.cancelSave), h("calcite-button", { slot: "footer", width: "half", onClick: async () => {
                const textInputs = Array.from(this._hostElement.getElementsByTagName("calcite-input-text"));
                const inputDescription = this._hostElement.getElementsByTagName("calcite-text-area")[0];
                const inputName = textInputs.find((input) => input.id === "inputName");
                const inputOwner = textInputs.find((input) => input.id === "inputOwner");
                const chipGroupAccessLevel = Array.from(this._hostElement.getElementsByTagName("calcite-chip-group"))[0];
                const info = {
                    access: chipGroupAccessLevel.selectedItems[0].value,
                    description: inputDescription.value,
                    versionIdentifier: {
                        name: inputOwner.value !== "" ? `${inputOwner.value}.${inputName.value}` : inputName.value,
                        guid: versionInfo ? versionInfo.versionIdentifier.guid : ""
                    }
                };
                this.versionPropertiesSaveClickedEvent.emit({
                    serviceUrl,
                    versionInfo: info
                });
            } }, strings.actions.saveVersion)), this.state === "failed" ? (h("calcite-notice", { class: "notice", closable: true, kind: "warning", open: true, scale: "s", slot: "footer" }, h("div", { slot: "message" }, this._getExecutionError(executionError)))) : undefined))));
    }
    _getExecutionError(executionError) {
        const { strings: { executionErrors } } = this;
        switch (executionError) {
            case "no-advanced-editing-user-type-extension":
                return executionErrors.noAdvancedEditingUserTypeExtension;
            case "no-feature-service-found":
                return executionErrors.noFeatureServiceFound;
            case "no-valid-enterprise-version":
                return executionErrors.notValidEnterpriseVersion;
            case "no-valid-version-name":
                return executionErrors.invalidVersionName;
            default:
                return executionError;
        }
    }
    get _hostElement() { return this; }
}, [0, "arcgis-version-management-version-properties", {
        "flowElement": [16],
        "serviceUrl": [1, "service-url"],
        "strings": [16],
        "versionInfo": [16],
        "viewModel": [16],
        "executionError": [32],
        "state": [32]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-version-management-version-properties"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-version-management-version-properties":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisVersionManagementVersionProperties);
            }
            break;
    } });
}
defineCustomElement();

export { ArcgisVersionManagementVersionProperties as A, defineCustomElement as d };
