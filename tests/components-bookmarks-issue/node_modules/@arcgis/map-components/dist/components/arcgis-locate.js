/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { I as newWidgetsLocate, i as importCoreReactiveUtils } from './index2.js';
import { r as referenceElementHelper, c as checkForView, a as addHandles } from './component-utils.js';
import { o as onDisconnectedHelper } from './disconnected.js';

const locateCss = "arcgis-locate{}";

const ArcgisLocate$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisLocate extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.arcgisLocateReady = createEvent(this, "arcgisLocateReady", 7);
        this.locateSuccess = createEvent(this, "locateSuccess", 7);
        this.locateError = createEvent(this, "locateError", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.error = undefined;
        this.geolocationOptions = undefined;
        this.goToLocationDisabled = false;
        this.graphic = undefined;
        this.icon = undefined;
        this.popupDisabled = false;
        this.scale = undefined;
        this.state = undefined;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void referenceElementHelper(this, value);
    }
    geolocationOptionsWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.geolocationOptions = value;
        }
    }
    goToLocationDisabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.goToLocationEnabled = !value;
        }
    }
    graphicWatcher(value) {
        if (this.widget) {
            this.widget.graphic = value;
        }
    }
    iconWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.icon = value;
        }
    }
    popupDisabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.popupEnabled = !value;
        }
    }
    scaleWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.scale = value;
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async cancelLocate() {
        this.widget?.cancelLocate();
    }
    async locate() {
        return await this.widget?.locate();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await newWidgetsLocate(params);
        this.widget = widget;
        await this._addWatchers();
        this._addContainer();
        this.arcgisLocateReady.emit();
        this._proxyEvents();
        checkForView(this);
    }
    disconnectedCallback() {
        onDisconnectedHelper(this);
    }
    render() {
        return h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await importCoreReactiveUtils();
        addHandles(this, [
            watch(() => this.widget?.viewModel?.state, (value) => (this.state = value)),
            watch(() => this.widget?.viewModel?.error, (value) => (this.error = value))
        ]);
    }
    _createParams() {
        const params = {};
        if (this.geolocationOptions !== undefined) {
            params.geolocationOptions = this.geolocationOptions;
        }
        if (this.goToLocationDisabled !== undefined) {
            params.goToLocationEnabled = !this.goToLocationDisabled;
        }
        if (this.graphic !== undefined) {
            params.graphic = this.graphic;
        }
        if (this.icon !== undefined) {
            params.icon = this.icon;
        }
        if (this.popupDisabled !== undefined) {
            params.popupEnabled = !this.popupDisabled;
        }
        if (this.scale !== undefined) {
            params.scale = this.scale;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    _proxyEvents() {
        this.widget?.on("locate", (e) => this.locateSuccess.emit(e));
        this.widget?.on("locate-error", (e) => this.locateError.emit(e));
    }
    get el() { return this; }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "geolocationOptions": ["geolocationOptionsWatcher"],
        "goToLocationDisabled": ["goToLocationDisabledWatcher"],
        "graphic": ["graphicWatcher"],
        "icon": ["iconWatcher"],
        "popupDisabled": ["popupDisabledWatcher"],
        "scale": ["scaleWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
    static get style() { return locateCss; }
}, [0, "arcgis-locate", {
        "referenceElement": [1, "reference-element"],
        "error": [1032],
        "geolocationOptions": [8, "geolocation-options"],
        "goToLocationDisabled": [4, "go-to-location-disabled"],
        "graphic": [16],
        "icon": [1],
        "popupDisabled": [4, "popup-disabled"],
        "scale": [2],
        "state": [1537],
        "position": [1],
        "view": [1040],
        "widget": [1040],
        "cancelLocate": [64],
        "locate": [64]
    }, undefined, {
        "referenceElement": ["referenceElementWatcher"],
        "geolocationOptions": ["geolocationOptionsWatcher"],
        "goToLocationDisabled": ["goToLocationDisabledWatcher"],
        "graphic": ["graphicWatcher"],
        "icon": ["iconWatcher"],
        "popupDisabled": ["popupDisabledWatcher"],
        "scale": ["scaleWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-locate"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-locate":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisLocate$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisLocate = ArcgisLocate$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisLocate, defineCustomElement };
