/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { L as newWidgetsMeasurement, i as importCoreReactiveUtils } from './index2.js';
import { r as referenceElementHelper, c as checkForView, a as addHandles } from './component-utils.js';
import { o as onDisconnectedHelper } from './disconnected.js';

const measurementCss = "arcgis-measurement{}";

const ArcgisMeasurement$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisMeasurement extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.arcgisMeasurementReady = createEvent(this, "arcgisMeasurementReady", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.activeTool = undefined;
        this.activeComponent = undefined;
        this.areaUnit = undefined;
        this.icon = undefined;
        this.linearUnit = undefined;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void referenceElementHelper(this, value);
    }
    activeToolWatcher(value) {
        if (this.widget) {
            this.widget.activeTool = value;
        }
    }
    areaUnitWatcher(value) {
        if (this.widget) {
            this.widget.areaUnit = value;
        }
    }
    iconWatcher(value) {
        if (this.widget) {
            this.widget.icon = value;
        }
    }
    linearUnitWatcher(value) {
        if (this.widget) {
            this.widget.linearUnit = value;
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async clear() {
        this.widget?.clear();
    }
    async startMeasurement() {
        this.widget?.startMeasurement();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await newWidgetsMeasurement(params);
        this.widget = widget;
        await this._addWatchers();
        this._addContainer();
        this.arcgisMeasurementReady.emit();
        checkForView(this);
    }
    disconnectedCallback() {
        onDisconnectedHelper(this);
    }
    render() {
        return h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await importCoreReactiveUtils();
        addHandles(this, watch(() => this.widget.activeWidget, (value) => (this.activeComponent = value), {
            initial: true
        }));
    }
    _createParams() {
        const params = {};
        if (this.activeTool) {
            params.activeTool = this.activeTool;
        }
        if (this.areaUnit) {
            params.areaUnit = this.areaUnit;
        }
        if (this.linearUnit) {
            params.linearUnit = this.linearUnit;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    get el() { return this; }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "activeTool": ["activeToolWatcher"],
        "areaUnit": ["areaUnitWatcher"],
        "icon": ["iconWatcher"],
        "linearUnit": ["linearUnitWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
    static get style() { return measurementCss; }
}, [0, "arcgis-measurement", {
        "referenceElement": [1, "reference-element"],
        "activeTool": [1, "active-tool"],
        "activeComponent": [1040],
        "areaUnit": [1, "area-unit"],
        "icon": [1],
        "linearUnit": [1, "linear-unit"],
        "position": [1],
        "view": [1040],
        "widget": [1040],
        "clear": [64],
        "startMeasurement": [64]
    }, undefined, {
        "referenceElement": ["referenceElementWatcher"],
        "activeTool": ["activeToolWatcher"],
        "areaUnit": ["areaUnitWatcher"],
        "icon": ["iconWatcher"],
        "linearUnit": ["linearUnitWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-measurement"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-measurement":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisMeasurement$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisMeasurement = ArcgisMeasurement$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisMeasurement, defineCustomElement };
