/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { w as newLayersFeatureLayer, x as newWidgetsFeatureTable, i as importCoreReactiveUtils } from './index2.js';
import { r as referenceElementHelper, i as isNullOrEmptyString, c as checkForView, a as addHandles } from './component-utils.js';
import { o as onDisconnectedHelper } from './disconnected.js';

const featureTableCss = ".arcgis-feature-table{width:100%;height:100%}";

const ArcgisFeatureTable$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisFeatureTable extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.arcgisFeatureTableReady = createEvent(this, "arcgisFeatureTableReady", 7);
        this.featureTableSelectionChange = createEvent(this, "featureTableSelectionChange", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.activeFilters = undefined;
        this.activeSortOrders = [];
        this.attachmentsEnabled = false;
        this.autoRefreshEnabled = true;
        this.columnReorderingEnabled = true;
        this.columns = undefined;
        this.editingEnabled = false;
        this.filterGeometry = undefined;
        this.hiddenFields = true;
        this.highlightEnabled = true;
        this.highlightIds = undefined;
        this.layer = undefined;
        this.menu = undefined;
        this.menuConfig = undefined;
        this.multiSortEnabled = false;
        this.pageSize = 50;
        this.returnGeometryEnabled = false;
        this.state = undefined;
        this.tableTemplate = undefined;
        this.timeZone = undefined;
        this.itemId = undefined;
        this.url = undefined;
        this.visibleElementsHeader = true;
        this.visibleElementsMenu = true;
        this.visibleElementsSelectionColumn = true;
        this.visibleElementsColumnMenus = true;
        this.visibleElementsMenuItemsClearSelection = true;
        this.visibleElementsMenuItemsDeleteSelection = true;
        this.visibleElementsMenuItemsRefreshData = true;
        this.visibleElementsMenuItemsSelectedRecordsShowAllToggle = true;
        this.visibleElementsMenuItemsToggleColumns = true;
        this.visibleElementsMenuItemsZoomToSelection = true;
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void referenceElementHelper(this, value);
    }
    attachmentsEnabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.attachmentsEnabled = value;
        }
    }
    autoRefreshEnabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.autoRefreshEnabled = value;
        }
    }
    columnReorderingEnabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.columnReorderingEnabled = value;
        }
    }
    editingEnabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.editingEnabled = value;
        }
    }
    filterGeometryWatcher(value) {
        if (value && this.widget) {
            this.widget.filterGeometry = value;
        }
    }
    hiddenFieldsWatcher(value) {
        if (value && this.widget) {
            this.widget.hiddenFields = value;
        }
    }
    highlightEnabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.highlightEnabled = value;
        }
    }
    highlightIdsWatcher(value) {
        if (value && this.widget) {
            this.widget.highlightIds = value;
        }
    }
    layerWatcher(value) {
        if (value && this.widget) {
            this.widget.layer = value;
        }
        else if (!value) {
            this.widget.layer = null;
        }
    }
    menuConfigWatcher(value) {
        if (value && this.widget) {
            this.widget.menuConfig = value;
        }
    }
    multiSortEnabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.multiSortEnabled = value;
        }
    }
    pageSizeWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.pageSize = value;
        }
    }
    returnGeometryEnabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.returnGeometryEnabled = value;
        }
    }
    tableTemplateWatcher(value) {
        if (value && this.widget) {
            this.widget.tableTemplate = value;
        }
    }
    timeZoneWatcher(value) {
        if (this.widget) {
            this.widget.timeZone = value;
        }
    }
    async itemIdWatcher(value, old) {
        if (isNullOrEmptyString(value)) {
            this.layer = null;
        }
        else if (value && value !== old) {
            const layer = await newLayersFeatureLayer({
                portalItem: {
                    id: value
                }
            });
            this.layer = layer;
        }
    }
    async urlWatcher(value, old) {
        if (value && value !== old) {
            const layer = await newLayersFeatureLayer({ url: value });
            this.layer = layer;
        }
    }
    visibleElementsHeaderWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                header: value
            };
        }
    }
    visibleElementsMenuWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                menu: value
            };
        }
    }
    visibleElementsSelectionColumnWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                selectionColumn: value
            };
        }
    }
    visibleElementsColumnMenusWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                columnMenus: value
            };
        }
    }
    visibleElementsMenuItemsClearSelectionWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                menuItems: {
                    ...this.widget.visibleElements.menuItems,
                    clearSelection: value
                }
            };
        }
    }
    visibleElementsMenuItemsDeleteSelectionWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                menuItems: {
                    ...this.widget.visibleElements.menuItems,
                    deleteSelection: value
                }
            };
        }
    }
    visibleElementsMenuItemsRefreshDataWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                menuItems: {
                    ...this.widget.visibleElements.menuItems,
                    refreshData: value
                }
            };
        }
    }
    visibleElementsMenuItemsSelectedRecordsShowAllToggleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                menuItems: {
                    ...this.widget.visibleElements.menuItems,
                    selectedRecordsShowAllToggle: value
                }
            };
        }
    }
    visibleElementsMenuItemsToggleColumnsWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                menuItems: {
                    ...this.widget.visibleElements.menuItems,
                    toggleColumns: value
                }
            };
        }
    }
    visibleElementsMenuItemsZoomToSelectionWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                menuItems: {
                    ...this.widget.visibleElements.menuItems,
                    zoomToSelection: value
                }
            };
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async clearSelectionFilter() {
        this.widget?.clearSelectionFilter();
    }
    async deleteSelection(showWarningPrompt) {
        await this.widget?.deleteSelection(showWarningPrompt);
    }
    async filterBySelection() {
        this.widget?.filterBySelection();
    }
    async findColumn(fieldName) {
        return this.widget?.findColumn(fieldName);
    }
    async hideColumn(fieldName) {
        this.widget?.hideColumn(fieldName);
    }
    async refresh() {
        await this.widget?.refresh();
    }
    async scrollToIndex(index) {
        this.widget?.scrollToIndex(index);
    }
    async showAllColumns() {
        this.widget?.showAllColumns();
    }
    async showColumn(fieldName) {
        this.widget?.showColumn(fieldName);
    }
    async sortColumn(path, direction) {
        this.widget?.sortColumn(path, direction);
    }
    async zoomToSelection() {
        this.widget?.zoomToSelection();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = await this._createParams();
        const widget = await newWidgetsFeatureTable(params);
        this.widget = widget;
        await this._addWatchers();
        this._proxyEvents();
        this._addContainer();
        this.arcgisFeatureTableReady.emit();
        checkForView(this);
    }
    disconnectedCallback() {
        onDisconnectedHelper(this);
    }
    render() {
        return h("div", { class: "arcgis-feature-table", ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await importCoreReactiveUtils();
        addHandles(this, watch(() => this.widget.activeFilters, (value) => (this.activeFilters = value), {
            initial: true
        }));
        addHandles(this, watch(() => this.widget.activeSortOrders, (value) => (this.activeSortOrders = value), {
            initial: true
        }));
        addHandles(this, watch(() => this.widget.columns, (value) => (this.columns = value), {
            initial: true
        }));
        addHandles(this, watch(() => this.widget.menu, (value) => (this.menu = value), {
            initial: true
        }));
        addHandles(this, watch(() => this.widget.state, (value) => (this.state = value), {
            initial: true
        }));
    }
    async _createParams() {
        const params = {};
        params.visibleElements = {
            header: this.visibleElementsHeader,
            menu: this.visibleElementsMenu,
            selectionColumn: this.visibleElementsSelectionColumn,
            columnMenus: this.visibleElementsColumnMenus,
            menuItems: {
                clearSelection: this.visibleElementsMenuItemsClearSelection,
                deleteSelection: this.visibleElementsMenuItemsDeleteSelection,
                refreshData: this.visibleElementsMenuItemsRefreshData,
                selectedRecordsShowAllToggle: this.visibleElementsMenuItemsSelectedRecordsShowAllToggle,
                toggleColumns: this.visibleElementsMenuItemsToggleColumns,
                zoomToSelection: this.visibleElementsMenuItemsZoomToSelection
            }
        };
        if (this.view) {
            params.view = this.view;
        }
        if (this.attachmentsEnabled !== undefined) {
            params.attachmentsEnabled = this.attachmentsEnabled;
        }
        if (this.autoRefreshEnabled !== undefined) {
            params.autoRefreshEnabled = this.autoRefreshEnabled;
        }
        if (this.columnReorderingEnabled !== undefined) {
            params.columnReorderingEnabled = this.columnReorderingEnabled;
        }
        if (this.editingEnabled !== undefined) {
            params.editingEnabled = this.editingEnabled;
        }
        if (this.filterGeometry !== undefined) {
            params.filterGeometry = this.filterGeometry;
        }
        if (this.hiddenFields !== undefined) {
            params.hiddenFields = this.hiddenFields;
        }
        if (this.highlightEnabled !== undefined) {
            params.highlightEnabled = this.highlightEnabled;
        }
        if (this.highlightIds !== undefined) {
            params.highlightIds = this.highlightIds;
        }
        if (this.menuConfig !== undefined) {
            params.menuConfig = this.menuConfig;
        }
        if (this.multiSortEnabled !== undefined) {
            params.multiSortEnabled = this.multiSortEnabled;
        }
        if (this.pageSize !== undefined) {
            params.pageSize = this.pageSize;
        }
        if (this.tableTemplate !== undefined) {
            params.tableTemplate = this.tableTemplate;
        }
        if (this.timeZone !== undefined) {
            params.timeZone = this.timeZone;
        }
        // Handle loading a layer, url, or itemId
        if (this.layer !== undefined) {
            params.layer = this.layer;
        }
        else if (this.url) {
            params.layer = await newLayersFeatureLayer({ url: this.url });
        }
        else if (this.itemId) {
            params.layer = await newLayersFeatureLayer({
                portalItem: {
                    id: this.itemId
                }
            });
        }
        return params;
    }
    _proxyEvents() {
        this.widget?.highlightIds.on("change", (e) => this.featureTableSelectionChange.emit(e));
    }
    get el() { return this; }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "attachmentsEnabled": ["attachmentsEnabledWatcher"],
        "autoRefreshEnabled": ["autoRefreshEnabledWatcher"],
        "columnReorderingEnabled": ["columnReorderingEnabledWatcher"],
        "editingEnabled": ["editingEnabledWatcher"],
        "filterGeometry": ["filterGeometryWatcher"],
        "hiddenFields": ["hiddenFieldsWatcher"],
        "highlightEnabled": ["highlightEnabledWatcher"],
        "highlightIds": ["highlightIdsWatcher"],
        "layer": ["layerWatcher"],
        "menuConfig": ["menuConfigWatcher"],
        "multiSortEnabled": ["multiSortEnabledWatcher"],
        "pageSize": ["pageSizeWatcher"],
        "returnGeometryEnabled": ["returnGeometryEnabledWatcher"],
        "tableTemplate": ["tableTemplateWatcher"],
        "timeZone": ["timeZoneWatcher"],
        "itemId": ["itemIdWatcher"],
        "url": ["urlWatcher"],
        "visibleElementsHeader": ["visibleElementsHeaderWatcher"],
        "visibleElementsMenu": ["visibleElementsMenuWatcher"],
        "visibleElementsSelectionColumn": ["visibleElementsSelectionColumnWatcher"],
        "visibleElementsColumnMenus": ["visibleElementsColumnMenusWatcher"],
        "visibleElementsMenuItemsClearSelection": ["visibleElementsMenuItemsClearSelectionWatcher"],
        "visibleElementsMenuItemsDeleteSelection": ["visibleElementsMenuItemsDeleteSelectionWatcher"],
        "visibleElementsMenuItemsRefreshData": ["visibleElementsMenuItemsRefreshDataWatcher"],
        "visibleElementsMenuItemsSelectedRecordsShowAllToggle": ["visibleElementsMenuItemsSelectedRecordsShowAllToggleWatcher"],
        "visibleElementsMenuItemsToggleColumns": ["visibleElementsMenuItemsToggleColumnsWatcher"],
        "visibleElementsMenuItemsZoomToSelection": ["visibleElementsMenuItemsZoomToSelectionWatcher"],
        "view": ["viewWatcher"]
    }; }
    static get style() { return featureTableCss; }
}, [0, "arcgis-feature-table", {
        "referenceElement": [1, "reference-element"],
        "activeFilters": [1040],
        "activeSortOrders": [1040],
        "attachmentsEnabled": [4, "attachments-enabled"],
        "autoRefreshEnabled": [4, "auto-refresh-enabled"],
        "columnReorderingEnabled": [4, "column-reordering-enabled"],
        "columns": [1040],
        "editingEnabled": [4, "editing-enabled"],
        "filterGeometry": [16],
        "hiddenFields": [4, "hidden-fields"],
        "highlightEnabled": [4, "highlight-enabled"],
        "highlightIds": [16],
        "layer": [1040],
        "menu": [1040],
        "menuConfig": [16],
        "multiSortEnabled": [4, "multi-sort-enabled"],
        "pageSize": [2, "page-size"],
        "returnGeometryEnabled": [4, "return-geometry-enabled"],
        "state": [1025],
        "tableTemplate": [16],
        "timeZone": [1, "time-zone"],
        "itemId": [1, "item-id"],
        "url": [1],
        "visibleElementsHeader": [4, "visible-elements-header"],
        "visibleElementsMenu": [4, "visible-elements-menu"],
        "visibleElementsSelectionColumn": [4, "visible-elements-selection-column"],
        "visibleElementsColumnMenus": [4, "visible-elements-column-menus"],
        "visibleElementsMenuItemsClearSelection": [4, "visible-elements-menu-items-clear-selection"],
        "visibleElementsMenuItemsDeleteSelection": [4, "visible-elements-menu-items-delete-selection"],
        "visibleElementsMenuItemsRefreshData": [4, "visible-elements-menu-items-refresh-data"],
        "visibleElementsMenuItemsSelectedRecordsShowAllToggle": [4, "visible-elements-menu-items-selected-records-show-all-toggle"],
        "visibleElementsMenuItemsToggleColumns": [4, "visible-elements-menu-items-toggle-columns"],
        "visibleElementsMenuItemsZoomToSelection": [4, "visible-elements-menu-items-zoom-to-selection"],
        "view": [1040],
        "widget": [1040],
        "clearSelectionFilter": [64],
        "deleteSelection": [64],
        "filterBySelection": [64],
        "findColumn": [64],
        "hideColumn": [64],
        "refresh": [64],
        "scrollToIndex": [64],
        "showAllColumns": [64],
        "showColumn": [64],
        "sortColumn": [64],
        "zoomToSelection": [64]
    }, undefined, {
        "referenceElement": ["referenceElementWatcher"],
        "attachmentsEnabled": ["attachmentsEnabledWatcher"],
        "autoRefreshEnabled": ["autoRefreshEnabledWatcher"],
        "columnReorderingEnabled": ["columnReorderingEnabledWatcher"],
        "editingEnabled": ["editingEnabledWatcher"],
        "filterGeometry": ["filterGeometryWatcher"],
        "hiddenFields": ["hiddenFieldsWatcher"],
        "highlightEnabled": ["highlightEnabledWatcher"],
        "highlightIds": ["highlightIdsWatcher"],
        "layer": ["layerWatcher"],
        "menuConfig": ["menuConfigWatcher"],
        "multiSortEnabled": ["multiSortEnabledWatcher"],
        "pageSize": ["pageSizeWatcher"],
        "returnGeometryEnabled": ["returnGeometryEnabledWatcher"],
        "tableTemplate": ["tableTemplateWatcher"],
        "timeZone": ["timeZoneWatcher"],
        "itemId": ["itemIdWatcher"],
        "url": ["urlWatcher"],
        "visibleElementsHeader": ["visibleElementsHeaderWatcher"],
        "visibleElementsMenu": ["visibleElementsMenuWatcher"],
        "visibleElementsSelectionColumn": ["visibleElementsSelectionColumnWatcher"],
        "visibleElementsColumnMenus": ["visibleElementsColumnMenusWatcher"],
        "visibleElementsMenuItemsClearSelection": ["visibleElementsMenuItemsClearSelectionWatcher"],
        "visibleElementsMenuItemsDeleteSelection": ["visibleElementsMenuItemsDeleteSelectionWatcher"],
        "visibleElementsMenuItemsRefreshData": ["visibleElementsMenuItemsRefreshDataWatcher"],
        "visibleElementsMenuItemsSelectedRecordsShowAllToggle": ["visibleElementsMenuItemsSelectedRecordsShowAllToggleWatcher"],
        "visibleElementsMenuItemsToggleColumns": ["visibleElementsMenuItemsToggleColumnsWatcher"],
        "visibleElementsMenuItemsZoomToSelection": ["visibleElementsMenuItemsZoomToSelectionWatcher"],
        "view": ["viewWatcher"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-feature-table"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-feature-table":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisFeatureTable$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisFeatureTable = ArcgisFeatureTable$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisFeatureTable, defineCustomElement };
