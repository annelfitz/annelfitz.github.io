/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { H as newWidgetsLineOfSight, i as importCoreReactiveUtils } from './index2.js';
import { r as referenceElementHelper, c as checkForView, a as addHandles } from './component-utils.js';
import { o as onDisconnectedHelper } from './disconnected.js';

const lineOfSightCss = "arcgis-line-of-sight{}";

const ArcgisLineOfSight$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisLineOfSight extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.arcgisLineOfSightReady = createEvent(this, "arcgisLineOfSightReady", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.analysis = undefined;
        this.icon = undefined;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void referenceElementHelper(this, value);
    }
    iconWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.icon = value;
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async clear() {
        this.widget?.viewModel.clear();
    }
    async continue() {
        this.widget?.viewModel.continue();
    }
    async start() {
        this.widget?.viewModel.start();
    }
    async stop() {
        this.widget?.viewModel.stop();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await newWidgetsLineOfSight(params);
        this.widget = widget;
        await this._addWatchers();
        this._addContainer();
        this.arcgisLineOfSightReady.emit();
        checkForView(this);
    }
    disconnectedCallback() {
        onDisconnectedHelper(this);
    }
    render() {
        return h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await importCoreReactiveUtils();
        addHandles(this, watch(() => this.widget.analysis, (value) => {
            this.analysis = value;
            this.arcgisPropertyChange.emit({ name: "analysis" });
        }, {
            initial: true
        }));
    }
    _createParams() {
        const params = {};
        if (this.icon) {
            params.icon = this.icon;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    get el() { return this; }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "icon": ["iconWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
    static get style() { return lineOfSightCss; }
}, [0, "arcgis-line-of-sight", {
        "referenceElement": [1, "reference-element"],
        "analysis": [1040],
        "icon": [1],
        "position": [1],
        "view": [1040],
        "widget": [1040],
        "clear": [64],
        "continue": [64],
        "start": [64],
        "stop": [64]
    }, undefined, {
        "referenceElement": ["referenceElementWatcher"],
        "icon": ["iconWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-line-of-sight"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-line-of-sight":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisLineOfSight$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisLineOfSight = ArcgisLineOfSight$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisLineOfSight, defineCustomElement };
