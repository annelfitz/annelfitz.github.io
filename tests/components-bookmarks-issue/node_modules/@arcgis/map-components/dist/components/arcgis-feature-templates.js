/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { y as newWidgetsFeatureTemplates } from './index2.js';
import { c as checkForView } from './component-utils.js';
import { o as onDisconnectedHelper } from './disconnected.js';
import { d as defineCustomElement$2 } from './expand.js';

const featureTemplatesCss = "";

const ArcgisFeatureTemplates$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisFeatureTemplates extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.widgetReady = createEvent(this, "widgetReady", 7);
        this.featureTemplatesSelect = createEvent(this, "featureTemplatesSelect", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.position = "bottom-left";
        this.expandable = false;
        this.widget = undefined;
        this.enableListScroll = undefined;
        this.filterFunction = undefined;
        this.filterText = undefined;
        this.groupBy = undefined;
        this.layers = undefined;
        this.selectionMode = undefined;
        this.visibleElements = undefined;
    }
    enableListScrolWatcher(newValue) {
        if (newValue !== undefined && this.widget) {
            this.widget.enableListScroll = newValue;
        }
    }
    filterFunctionWatcher(newValue) {
        if (this.widget) {
            this.widget.filterFunction = newValue;
        }
    }
    filterTextWatcher(newValue) {
        if (this.widget) {
            this.widget.filterText = newValue;
        }
    }
    groupByWatcher(newValue) {
        if (this.widget) {
            this.widget.groupBy = newValue;
        }
    }
    layersWatcher(newValue) {
        if (this.widget) {
            this.widget.layers = newValue;
        }
    }
    selectionModeWatcher(newValue) {
        if (this.widget) {
            this.widget.selectionMode = newValue;
        }
    }
    visibleElementsWatcher(newValue) {
        if (this.widget) {
            this.widget.visibleElements = newValue;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await newWidgetsFeatureTemplates(params);
        this.widget = widget;
        this._proxyEvents();
        this.widgetReady.emit({ widget: this.widget });
        checkForView(this);
    }
    disconnectedCallback() {
        onDisconnectedHelper(this);
    }
    render() {
        if (this.expandable) {
            return (h("arcgis-expand", { position: this.position, ref: (el) => (this.expandElem = el) }, h("div", { ref: (el) => (this.childElem = el) })));
        }
        return h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _createParams() {
        const params = {
            container: this.childElem
        };
        if (this.enableListScroll !== undefined) {
            params.enableListScroll = this.enableListScroll;
        }
        if (this.filterFunction) {
            params.filterFunction = this.filterFunction;
        }
        if (this.filterText) {
            params.filterText = this.filterText;
        }
        if (this.groupBy) {
            params.groupBy = this.groupBy;
        }
        if (this.layers) {
            params.layers = this.layers;
        }
        if (this.selectionMode !== undefined) {
            params.selectionMode = this.selectionMode;
        }
        if (this.visibleElements) {
            params.visibleElements = this.visibleElements;
        }
        return params;
    }
    _proxyEvents() {
        this.widget.on("select", (e) => this.featureTemplatesSelect.emit(e));
    }
    get el() { return this; }
    static get watchers() { return {
        "enableListScroll": ["enableListScrolWatcher"],
        "filterFunction": ["filterFunctionWatcher"],
        "filterText": ["filterTextWatcher"],
        "groupBy": ["groupByWatcher"],
        "layers": ["layersWatcher"],
        "selectionMode": ["selectionModeWatcher"],
        "visibleElements": ["visibleElementsWatcher"]
    }; }
    static get style() { return featureTemplatesCss; }
}, [0, "arcgis-feature-templates", {
        "referenceElement": [1, "reference-element"],
        "position": [1],
        "expandable": [4],
        "widget": [1040],
        "enableListScroll": [4, "enable-list-scroll"],
        "filterFunction": [16],
        "filterText": [1, "filter-text"],
        "groupBy": [1, "group-by"],
        "layers": [16],
        "selectionMode": [1, "selection-mode"],
        "visibleElements": [16]
    }, undefined, {
        "enableListScroll": ["enableListScrolWatcher"],
        "filterFunction": ["filterFunctionWatcher"],
        "filterText": ["filterTextWatcher"],
        "groupBy": ["groupByWatcher"],
        "layers": ["layersWatcher"],
        "selectionMode": ["selectionModeWatcher"],
        "visibleElements": ["visibleElementsWatcher"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-feature-templates", "arcgis-expand"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-feature-templates":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisFeatureTemplates$1);
            }
            break;
        case "arcgis-expand":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisFeatureTemplates = ArcgisFeatureTemplates$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisFeatureTemplates, defineCustomElement };
