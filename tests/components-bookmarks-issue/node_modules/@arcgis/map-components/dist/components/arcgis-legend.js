/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { G as newWidgetsLegend, i as importCoreReactiveUtils } from './index2.js';
import { r as referenceElementHelper, c as checkForView, a as addHandles } from './component-utils.js';
import { o as onDisconnectedHelper } from './disconnected.js';

const legendCss = "";

const ArcgisLegend$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisLegend extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.arcgisLegendReady = createEvent(this, "arcgisLegendReady", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.activeLayerInfos = undefined;
        this.basemapLegendVisible = false;
        this.hideLayersNotInCurrentView = false;
        this.icon = undefined;
        this.respectLayerVisibilityDisabled = false;
        this.legendStyle = "classic";
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void referenceElementHelper(this, value);
    }
    activeLayerInfosWatcher(value) {
        if (this.widget) {
            this.widget.activeLayerInfos = value;
        }
    }
    basemapLegendVisibleWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.basemapLegendVisible = value;
        }
    }
    hideLayersNotInCurrentViewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.hideLayersNotInCurrentView = value;
        }
    }
    iconWatcher(value) {
        if (this.widget && this.widget.icon !== value) {
            this.widget.icon = value;
        }
    }
    respectLayerVisibilityDisabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.respectLayerVisibility = !value;
        }
    }
    styleWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.style = value;
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await newWidgetsLegend(params);
        this.widget = widget;
        await this._addWatchers();
        this._addContainer();
        this.arcgisLegendReady.emit();
        checkForView(this);
    }
    disconnectedCallback() {
        onDisconnectedHelper(this);
    }
    render() {
        return h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await importCoreReactiveUtils();
        addHandles(this, [
            watch(() => this.widget.activeLayerInfos, (value) => {
                this.activeLayerInfos = value;
            })
        ]);
    }
    _createParams() {
        const params = {};
        if (this.activeLayerInfos) {
            params.activeLayerInfos = this.activeLayerInfos;
        }
        if (this.basemapLegendVisible !== undefined) {
            params.basemapLegendVisible = this.basemapLegendVisible;
        }
        if (this.hideLayersNotInCurrentView !== undefined) {
            params.hideLayersNotInCurrentView = this.hideLayersNotInCurrentView;
        }
        if (this.respectLayerVisibilityDisabled !== undefined) {
            params.respectLayerVisibility = !this.respectLayerVisibilityDisabled;
        }
        if (this.legendStyle) {
            params.style = this.legendStyle;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    get el() { return this; }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "activeLayerInfos": ["activeLayerInfosWatcher"],
        "basemapLegendVisible": ["basemapLegendVisibleWatcher"],
        "hideLayersNotInCurrentView": ["hideLayersNotInCurrentViewWatcher"],
        "icon": ["iconWatcher"],
        "respectLayerVisibilityDisabled": ["respectLayerVisibilityDisabledWatcher"],
        "legendStyle": ["styleWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
    static get style() { return legendCss; }
}, [0, "arcgis-legend", {
        "referenceElement": [1, "reference-element"],
        "activeLayerInfos": [16],
        "basemapLegendVisible": [4, "basemap-legend-visible"],
        "hideLayersNotInCurrentView": [4, "hide-layers-not-in-current-view"],
        "icon": [1],
        "respectLayerVisibilityDisabled": [4, "respect-layer-visibility-disabled"],
        "legendStyle": [1, "legend-style"],
        "position": [1],
        "view": [1040],
        "widget": [1040]
    }, undefined, {
        "referenceElement": ["referenceElementWatcher"],
        "activeLayerInfos": ["activeLayerInfosWatcher"],
        "basemapLegendVisible": ["basemapLegendVisibleWatcher"],
        "hideLayersNotInCurrentView": ["hideLayersNotInCurrentViewWatcher"],
        "icon": ["iconWatcher"],
        "respectLayerVisibilityDisabled": ["respectLayerVisibilityDisabledWatcher"],
        "legendStyle": ["styleWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-legend"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-legend":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisLegend$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisLegend = ArcgisLegend$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisLegend, defineCustomElement };
