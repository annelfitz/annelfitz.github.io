/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { v as newWidgetsFeatureForm } from './index2.js';
import { r as referenceElementHelper } from './component-utils.js';
import { o as onDisconnectedHelper } from './disconnected.js';
import { d as defineCustomElement$2 } from './expand.js';

const featureFormCss = "";

const ArcgisFeatureForm$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisFeatureForm extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.widgetReady = createEvent(this, "widgetReady", 7);
        this.featureFormSubmit = createEvent(this, "featureFormSubmit", 7);
        this.featureFormValueChange = createEvent(this, "featureFormValueChange", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.position = "bottom-left";
        this.expandable = false;
        this.feature = undefined;
        this.formTemplate = undefined;
        this.groupDisplay = undefined;
        this.layer = undefined;
        this.timeZone = undefined;
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(newValue) {
        referenceElementHelper(this, newValue);
    }
    positionWatcher(newValue) {
        if (newValue !== undefined && this.widget) {
            this.view.ui.move(this.childElem, newValue);
        }
    }
    featureWatcher(newValue) {
        if (this.widget) {
            this.widget.feature = newValue;
        }
    }
    formTemplateWatcher(newValue) {
        if (this.widget) {
            this.widget.formTemplate = newValue;
        }
    }
    groupDisplayWatcher(newValue) {
        if (this.widget) {
            this.widget.groupDisplay = newValue;
        }
    }
    layerWatcher(newValue) {
        if (this.widget) {
            this.widget.layer = newValue;
        }
    }
    timeZoneWatcher(newValue) {
        if (this.widget) {
            this.widget.timeZone = newValue;
        }
    }
    viewWatcher(newValue) {
        if (newValue !== undefined && this.widget) {
            this.widget.map = newValue.map;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async getValues() {
        return this.widget?.getValues();
    }
    async submit() {
        return this.widget?.submit();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await newWidgetsFeatureForm(params);
        this.widget = widget;
        this._proxyEvents();
        this.widgetReady.emit({ widget: this.widget });
    }
    disconnectedCallback() {
        onDisconnectedHelper(this);
    }
    render() {
        if (this.expandable) {
            return (h("arcgis-expand", { position: this.position, ref: (el) => (this.expandElem = el) }, h("div", { ref: (el) => (this.childElem = el) })));
        }
        return h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Interal Methods
    //
    //--------------------------------------------------------------------------
    _createParams() {
        const params = {
            container: this.childElem
        };
        if (this.feature) {
            params.feature = this.feature;
        }
        if (this.formTemplate) {
            params.formTemplate = this.formTemplate;
        }
        if (this.groupDisplay) {
            params.groupDisplay = this.groupDisplay;
        }
        if (this.layer) {
            params.layer = this.layer;
        }
        if (this.timeZone) {
            params.timeZone = this.timeZone;
        }
        if (this.view) {
            params.map = this.view.map;
        }
        return params;
    }
    _proxyEvents() {
        this.widget.on("submit", (e) => this.featureFormSubmit.emit(e));
        this.widget.on("value-change", (e) => this.featureFormValueChange.emit(e));
    }
    get el() { return this; }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "position": ["positionWatcher"],
        "feature": ["featureWatcher"],
        "formTemplate": ["formTemplateWatcher"],
        "groupDisplay": ["groupDisplayWatcher"],
        "layer": ["layerWatcher"],
        "timeZone": ["timeZoneWatcher"],
        "view": ["viewWatcher"]
    }; }
    static get style() { return featureFormCss; }
}, [0, "arcgis-feature-form", {
        "referenceElement": [1, "reference-element"],
        "position": [1],
        "expandable": [4],
        "feature": [16],
        "formTemplate": [16],
        "groupDisplay": [1, "group-display"],
        "layer": [16],
        "timeZone": [1, "time-zone"],
        "view": [1040],
        "widget": [1040],
        "getValues": [64],
        "submit": [64]
    }, undefined, {
        "referenceElement": ["referenceElementWatcher"],
        "position": ["positionWatcher"],
        "feature": ["featureWatcher"],
        "formTemplate": ["formTemplateWatcher"],
        "groupDisplay": ["groupDisplayWatcher"],
        "layer": ["layerWatcher"],
        "timeZone": ["timeZoneWatcher"],
        "view": ["viewWatcher"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-feature-form", "arcgis-expand"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-feature-form":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisFeatureForm$1);
            }
            break;
        case "arcgis-expand":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisFeatureForm = ArcgisFeatureForm$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisFeatureForm, defineCustomElement };
