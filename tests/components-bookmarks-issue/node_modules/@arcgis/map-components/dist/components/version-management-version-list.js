/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { i as importCoreReactiveUtils } from './index2.js';
import { d as defineCustomElement$1 } from './version-management-version-item.js';
import "@esri/calcite-components/dist/components/calcite-flow-item.js";
import "@esri/calcite-components/dist/components/calcite-panel.js";
import "@esri/calcite-components/dist/components/calcite-action.js";
import "@esri/calcite-components/dist/components/calcite-tooltip.js";
import "@esri/calcite-components/dist/components/calcite-list.js";
import "@esri/calcite-components/dist/components/calcite-fab.js";

const ArcgisVersionManagementVersionList = /*@__PURE__*/ proxyCustomElement(class ArcgisVersionManagementVersionList extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.versionItemActionClickedEventWithServiceUrl = createEvent(this, "versionItemActionClickedEventWithServiceUrl", 7);
        this.versionListActionClickedEvent = createEvent(this, "versionListActionClickedEvent", 7);
        this._watchHandles = [];
        this.heading = undefined;
        this.serviceName = undefined;
        this.serviceUrl = undefined;
        this.strings = undefined;
        this.userHasAdvancedEditingUserTypeExtension = undefined;
        this.versionInfos = undefined;
        this.viewModel = undefined;
        this.state = undefined;
    }
    async componentDidLoad() {
        const { watch } = await importCoreReactiveUtils();
        this._watchHandles.push(watch(() => this.versionInfos, (versionInfos) => {
            this.versionInfos = versionInfos;
        }), watch(() => this.viewModel.state, (state) => {
            this.state = state;
        }));
    }
    async componentWillLoad() {
        this.state = this.viewModel.state;
    }
    disconnectedCallback() {
        this._watchHandles.forEach((handle) => {
            handle.remove();
        });
        this._watchHandles = [];
    }
    render() {
        const { heading, serviceName, serviceUrl, state, strings, versionInfos, viewModel } = this;
        // @ts-ignore
        const currentVersionIdentifier = viewModel.versionIdentifierLookup.get(serviceUrl);
        return (h(Host, null, h("calcite-flow-item", { heading: heading, description: serviceName }, currentVersionIdentifier ? (h("calcite-panel", { disabled: state === "executing", class: "panel-versions", heading: "Current version", description: currentVersionIdentifier.name })) : undefined, h("calcite-panel", { loading: state === "executing", class: "panel-versions", heading: versionInfos.length
                ? `${strings.headers.manageVersions} (${versionInfos.length})`
                : strings.headers.manageVersions }, h("calcite-action", { id: "actionRefreshVersions", icon: "refresh", text: "", onClick: () => {
                this.versionListActionClickedEvent.emit({
                    actionType: "refreshVersions",
                    serviceUrl
                });
            }, slot: "header-actions-end" }), h("calcite-tooltip", { "overlay-positioning": "fixed", referenceElement: "actionRefreshVersions" }, h("span", null, strings.actions.refreshVersions)), h("calcite-list", { class: "version-list", filterEnabled: true }, versionInfos.map((versionInfo) => (h("arcgis-version-management-version-item", { strings: strings, hasAdvEditingUte: viewModel.advancedEditingUserTypeExtensionLookup.get(serviceUrl), isVersioningApiAvailable: (viewModel.serverVersionLookup.get(serviceUrl) ?? 0) >= 11.2, versionInfo: versionInfo, onVersionItemActionClickedEvent: (e) => {
                this.versionItemActionClickedEventWithServiceUrl.emit({ ...e.detail, serviceUrl });
            } })))), h("calcite-fab", { appearance: "outline-fill", slot: "fab", textEnabled: true, text: strings.actions.newVersion, onClick: () => {
                this.versionListActionClickedEvent.emit({
                    actionType: "newVersion",
                    serviceUrl
                });
            } })))));
    }
    get _hostElement() { return this; }
}, [0, "arcgis-version-management-version-list", {
        "heading": [1],
        "serviceName": [1, "service-name"],
        "serviceUrl": [1, "service-url"],
        "strings": [16],
        "userHasAdvancedEditingUserTypeExtension": [4, "user-has-advanced-editing-user-type-extension"],
        "versionInfos": [1040],
        "viewModel": [16],
        "state": [32]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-version-management-version-list", "arcgis-version-management-version-item"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-version-management-version-list":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisVersionManagementVersionList);
            }
            break;
        case "arcgis-version-management-version-item":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { ArcgisVersionManagementVersionList as A, defineCustomElement as d };
