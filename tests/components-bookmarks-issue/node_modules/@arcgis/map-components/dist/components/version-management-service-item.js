/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { i as importCoreReactiveUtils } from './index2.js';
import { d as defineCustomElement$2 } from './version-management-version-item.js';
import { d as defineCustomElement$1 } from './version-management-version-list.js';
import "@esri/calcite-components/dist/components/calcite-panel.js";
import "@esri/calcite-components/dist/components/calcite-action.js";
import "@esri/calcite-components/dist/components/calcite-tooltip.js";

const ArcgisVersionManagementServiceItem = /*@__PURE__*/ proxyCustomElement(class ArcgisVersionManagementServiceItem extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.versionItemActionClickedEventWithServiceUrl = createEvent(this, "versionItemActionClickedEventWithServiceUrl", 7);
        this.versionListActionClickedEvent = createEvent(this, "versionListActionClickedEvent", 7);
        this._versionListEventListeners = new Map();
        this._watchHandles = [];
        this._versionItemActionClickedEventWithServiceUrl = (e) => {
            this.versionItemActionClickedEventWithServiceUrl.emit(e.detail);
        };
        this._versionListActionClickedEvent = (e) => {
            this.versionListActionClickedEvent.emit(e.detail);
        };
        this.flowElement = undefined;
        this.heading = undefined;
        this.serviceUrl = undefined;
        this.strings = undefined;
        this.viewModel = undefined;
        this.state = undefined;
    }
    async componentDidLoad() {
        const { watch } = await importCoreReactiveUtils();
        this._watchHandles.push(watch(() => this.viewModel.state, (state) => {
            this.state = state;
        }));
    }
    async componentWillLoad() {
        this.state = this.viewModel.state;
    }
    disconnectedCallback() {
        this._watchHandles.forEach((handle) => {
            handle.remove();
        });
        this._watchHandles = [];
        this._removeVersionListEventListeners(this._versionList);
    }
    render() {
        const { flowElement, heading, serviceUrl, strings, viewModel } = this;
        let { _versionList } = this;
        const serviceName = viewModel.serviceNameLookup.get(serviceUrl);
        return (h(Host, null, h("calcite-panel", { heading: serviceName }, h("calcite-action", { id: `actionManageVersions_${serviceName}`, icon: "list", scale: "s", slot: "header-actions-end", text: "", onClick: async () => {
                await viewModel.getVersionInfos(serviceUrl, false);
                _versionList = document.createElement("arcgis-version-management-version-list");
                _versionList.addEventListener("calciteFlowItemBack", async () => {
                    _versionList.remove();
                });
                _versionList.heading = heading;
                _versionList.serviceUrl = serviceUrl;
                _versionList.serviceName = serviceName;
                _versionList.strings = strings;
                _versionList.userHasAdvancedEditingUserTypeExtension =
                    viewModel.advancedEditingUserTypeExtensionLookup.get(serviceUrl);
                _versionList.versionInfos = viewModel.versionInfoLookup.get(serviceUrl);
                _versionList.viewModel = viewModel;
                this._addVersionListEventListeners(_versionList);
                flowElement.append(_versionList);
            } }), h("calcite-tooltip", { "overlay-positioning": "fixed", referenceElement: `actionManageVersions_${serviceName}` }, h("span", null, strings.headers.manageVersions)))));
    }
    _addVersionListEventListeners(versionList) {
        versionList.addEventListener("versionItemActionClickedEventWithServiceUrl", this._versionItemActionClickedEventWithServiceUrl);
        this._versionListEventListeners.set("versionItemActionClickedEventWithServiceUrl", this._versionItemActionClickedEventWithServiceUrl);
        versionList.addEventListener("versionListActionClickedEvent", this._versionListActionClickedEvent);
        this._versionListEventListeners.set("versionListActionClickedEvent", this._versionListActionClickedEvent);
    }
    _removeVersionListEventListeners(versionList) {
        for (const [type, listener] of this._versionListEventListeners) {
            versionList.removeEventListener(type, listener);
        }
    }
    get _hostElement() { return this; }
}, [0, "arcgis-version-management-service-item", {
        "flowElement": [16],
        "heading": [1],
        "serviceUrl": [1, "service-url"],
        "strings": [16],
        "viewModel": [16],
        "state": [32]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-version-management-service-item", "arcgis-version-management-version-item", "arcgis-version-management-version-list"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-version-management-service-item":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisVersionManagementServiceItem);
            }
            break;
        case "arcgis-version-management-version-item":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "arcgis-version-management-version-list":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { ArcgisVersionManagementServiceItem as A, defineCustomElement as d };
