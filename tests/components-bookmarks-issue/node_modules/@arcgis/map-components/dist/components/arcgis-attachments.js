/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { b as newWidgetsAttachments, i as importCoreReactiveUtils } from './index2.js';
import { b as checkForExpand, a as addHandles } from './component-utils.js';
import { o as onDisconnectedHelper } from './disconnected.js';
import { d as defineCustomElement$2 } from './expand.js';

const attachmentsCss = "";

const ArcgisAttachments$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisAttachments extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.widgetReady = createEvent(this, "widgetReady", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.position = "bottom-left";
        this.expandable = false;
        this.capabilities = undefined;
        this.displayType = undefined;
        this.graphic = undefined;
        this.submitting = undefined;
        this.visibleElements = undefined;
        this.widget = undefined;
    }
    capabilitiesWatcher(newValue) {
        if (this.widget) {
            this.widget.capabilities = newValue;
        }
    }
    displayTypeWatcher(newValue) {
        if (this.widget) {
            this.widget.displayType = newValue;
        }
    }
    graphicWatcher(newValue) {
        if (this.widget) {
            this.widget.graphic = newValue;
        }
    }
    visibleElementsWatcher(newValue) {
        if (this.widget) {
            this.widget.visibleElements = newValue;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await newWidgetsAttachments(params);
        this.widget = widget;
        await this._addWatchers();
        this.widgetReady.emit({ widget: this.widget });
        checkForExpand(this);
    }
    disconnectedCallback() {
        onDisconnectedHelper(this);
    }
    render() {
        if (this.expandable) {
            return (h("arcgis-expand", { position: this.position, ref: (el) => (this.expandElem = el) }, h("div", { ref: (el) => (this.childElem = el) })));
        }
        return h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    async _addWatchers() {
        const { watch } = await importCoreReactiveUtils();
        addHandles(this, watch(() => this.widget.submitting, (value) => (this.submitting = value), {
            initial: true
        }));
    }
    _createParams() {
        const params = {
            container: this.childElem
        };
        if (this.displayType) {
            params.displayType = this.displayType;
        }
        if (this.graphic) {
            params.graphic = this.graphic;
        }
        if (this.visibleElements) {
            params.visibleElements = this.visibleElements;
        }
        return params;
    }
    get el() { return this; }
    static get watchers() { return {
        "capabilities": ["capabilitiesWatcher"],
        "displayType": ["displayTypeWatcher"],
        "graphic": ["graphicWatcher"],
        "visibleElements": ["visibleElementsWatcher"]
    }; }
    static get style() { return attachmentsCss; }
}, [0, "arcgis-attachments", {
        "referenceElement": [1, "reference-element"],
        "position": [1],
        "expandable": [4],
        "capabilities": [16],
        "displayType": [1, "display-type"],
        "graphic": [16],
        "submitting": [1028],
        "visibleElements": [16],
        "widget": [1040]
    }, undefined, {
        "capabilities": ["capabilitiesWatcher"],
        "displayType": ["displayTypeWatcher"],
        "graphic": ["graphicWatcher"],
        "visibleElements": ["visibleElementsWatcher"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-attachments", "arcgis-expand"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-attachments":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisAttachments$1);
            }
            break;
        case "arcgis-expand":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisAttachments = ArcgisAttachments$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisAttachments, defineCustomElement };
