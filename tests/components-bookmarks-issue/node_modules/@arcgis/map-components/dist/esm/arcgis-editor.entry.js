/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
import { r as registerInstance, c as createEvent, h, g as getElement } from './index-2198b48c.js';
import { t as newWidgetsEditor, i as importCoreReactiveUtils } from './index-08887307.js';
import { r as referenceElementHelper, c as checkForView, a as addHandles } from './component-utils-97b1c3e3.js';
import { o as onDisconnectedHelper } from './disconnected-45c113cb.js';

const editorCss = "";

const ArcgisEditor = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.arcgisEditorReady = createEvent(this, "arcgisEditorReady", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.activeWorkflow = undefined;
        this.allowedWorkflows = undefined;
        this.icon = undefined;
        this.labelOptions = undefined;
        this.layerInfos = undefined;
        this.snappingOptions = undefined;
        this.supportingWidgetDefaults = undefined;
        this.tooltipOptions = undefined;
        this.visibleElementsCreateFeaturesSection = true;
        this.visibleElementsEditFeaturesSection = true;
        this.visibleElementsLabelsToggle = true;
        this.visibleElementsTooltipsToggle = true;
        this.visibleElementsSnappingControls = true;
        this.visibleElementsSnappingControlsHeader = true;
        this.visibleElementsSnappingControlsEnabledToggle = true;
        this.visibleElementsSnappingControlsSelfEnabledToggle = true;
        this.visibleElementsSnappingControlsFeatureEnabledToggle = true;
        this.visibleElementsSnappingControlsLayerList = true;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void referenceElementHelper(this, value);
    }
    allowedWorkflowsWatcher(value) {
        if (this.widget) {
            this.widget.allowedWorkflows = value;
        }
    }
    iconWatcher(value) {
        if (this.widget) {
            this.widget.icon = value;
        }
    }
    labelOptionsWatcher(value) {
        if (this.widget) {
            this.widget.labelOptions = value;
        }
    }
    layerInfosWatcher(value) {
        if (this.widget) {
            this.widget.layerInfos = value;
        }
    }
    snappingOptionsWatcher(value) {
        if (this.widget) {
            this.widget.snappingOptions = value;
        }
    }
    supportingWidgetDefaultsWatcher(value) {
        if (this.widget) {
            this.widget.supportingWidgetDefaults = value;
        }
    }
    tooltipOptionsWatcher(value) {
        if (this.widget) {
            this.widget.tooltipOptions = value;
        }
    }
    visibleElementsCreateFeaturesSectionWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                createFeaturesSection: value
            };
        }
    }
    visibleElementsEditFeaturesSectionWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                editFeaturesSection: value
            };
        }
    }
    visibleElementsLabelsToggleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                labelsToggle: value
            };
        }
    }
    visibleElementsTooltipsToggleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                tooltipsToggle: value
            };
        }
    }
    visibleElementsSnappingControlsWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                snappingControls: value
            };
        }
    }
    visibleElementsSnappingControlsHeaderWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                snappingControlsElements: {
                    ...this.widget.visibleElements.snappingControlsElements,
                    header: value
                }
            };
        }
    }
    visibleElementsSnappingControlsEnabledToggleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                snappingControlsElements: {
                    ...this.widget.visibleElements.snappingControlsElements,
                    enabledToggle: value
                }
            };
        }
    }
    visibleElementsSnappingControlsSelfEnabledToggleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                snappingControlsElements: {
                    ...this.widget.visibleElements.snappingControlsElements,
                    selfEnabledToggle: value
                }
            };
        }
    }
    visibleElementsSnappingControlsFeatureEnabledToggleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                snappingControlsElements: {
                    ...this.widget.visibleElements.snappingControlsElements,
                    featureEnabledToggle: value
                }
            };
        }
    }
    visibleElementsSnappingControlsLayerListWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                snappingControlsElements: {
                    ...this.widget.visibleElements.snappingControlsElements,
                    layerList: value
                }
            };
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async cancelWorkflow() {
        await this.widget?.cancelWorkflow();
    }
    async deleteFeatureFromWorkflow() {
        await this.widget?.deleteFeatureFromWorkflow();
    }
    async startCreateFeaturesWorkflowAtFeatureCreation(info) {
        await this.widget?.startCreateFeaturesWorkflowAtFeatureCreation(info);
    }
    async startCreateFeaturesWorkflowAtFeatureTypeSelection() {
        await this.widget?.startCreateFeaturesWorkflowAtFeatureTypeSelection();
    }
    async startUpdateWorkflowAtFeatureEdit(feature) {
        await this.widget?.startUpdateWorkflowAtFeatureEdit(feature);
    }
    async startUpdateWorkflowAtFeatureSelection() {
        await this.widget?.startUpdateWorkflowAtFeatureSelection();
    }
    async startUpdateWorkflowAtMultipleFeatureSelection(candidates) {
        await this.widget?.startUpdateWorkflowAtMultipleFeatureSelection(candidates);
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await newWidgetsEditor(params);
        this.widget = widget;
        await this._addWatchers();
        this._addContainer();
        this.arcgisEditorReady.emit();
        checkForView(this);
    }
    disconnectedCallback() {
        onDisconnectedHelper(this);
    }
    render() {
        return h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await importCoreReactiveUtils();
        addHandles(this, watch(() => this.widget.activeWorkflow, (value) => {
            this.activeWorkflow = value;
            this.arcgisPropertyChange.emit({ name: "activeWorkflow" });
        }, {
            initial: true
        }));
    }
    _createParams() {
        const params = {};
        params.visibleElements = {
            createFeaturesSection: this.visibleElementsCreateFeaturesSection,
            editFeaturesSection: this.visibleElementsEditFeaturesSection,
            labelsToggle: this.visibleElementsLabelsToggle,
            tooltipsToggle: this.visibleElementsTooltipsToggle,
            snappingControls: this.visibleElementsSnappingControls,
            snappingControlsElements: {
                header: this.visibleElementsSnappingControlsHeader,
                enabledToggle: this.visibleElementsSnappingControlsEnabledToggle,
                selfEnabledToggle: this.visibleElementsSnappingControlsSelfEnabledToggle,
                featureEnabledToggle: this.visibleElementsSnappingControlsFeatureEnabledToggle,
                layerList: this.visibleElementsSnappingControlsLayerList
            }
        };
        if (this.allowedWorkflows) {
            params.allowedWorkflows = this.allowedWorkflows;
        }
        if (this.icon) {
            params.icon = this.icon;
        }
        if (this.labelOptions) {
            params.labelOptions = this.labelOptions;
        }
        if (this.layerInfos) {
            params.layerInfos = this.layerInfos;
        }
        if (this.snappingOptions) {
            params.snappingOptions = this.snappingOptions;
        }
        if (this.supportingWidgetDefaults) {
            params.supportingWidgetDefaults = this.supportingWidgetDefaults;
        }
        if (this.tooltipOptions) {
            params.tooltipOptions = this.tooltipOptions;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "allowedWorkflows": ["allowedWorkflowsWatcher"],
        "icon": ["iconWatcher"],
        "labelOptions": ["labelOptionsWatcher"],
        "layerInfos": ["layerInfosWatcher"],
        "snappingOptions": ["snappingOptionsWatcher"],
        "supportingWidgetDefaults": ["supportingWidgetDefaultsWatcher"],
        "tooltipOptions": ["tooltipOptionsWatcher"],
        "visibleElementsCreateFeaturesSection": ["visibleElementsCreateFeaturesSectionWatcher"],
        "visibleElementsEditFeaturesSection": ["visibleElementsEditFeaturesSectionWatcher"],
        "visibleElementsLabelsToggle": ["visibleElementsLabelsToggleWatcher"],
        "visibleElementsTooltipsToggle": ["visibleElementsTooltipsToggleWatcher"],
        "visibleElementsSnappingControls": ["visibleElementsSnappingControlsWatcher"],
        "visibleElementsSnappingControlsHeader": ["visibleElementsSnappingControlsHeaderWatcher"],
        "visibleElementsSnappingControlsEnabledToggle": ["visibleElementsSnappingControlsEnabledToggleWatcher"],
        "visibleElementsSnappingControlsSelfEnabledToggle": ["visibleElementsSnappingControlsSelfEnabledToggleWatcher"],
        "visibleElementsSnappingControlsFeatureEnabledToggle": ["visibleElementsSnappingControlsFeatureEnabledToggleWatcher"],
        "visibleElementsSnappingControlsLayerList": ["visibleElementsSnappingControlsLayerListWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisEditor.style = editorCss;

export { ArcgisEditor as arcgis_editor };
