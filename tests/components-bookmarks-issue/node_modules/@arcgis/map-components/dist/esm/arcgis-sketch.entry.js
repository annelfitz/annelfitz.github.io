/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
import { r as registerInstance, c as createEvent, h, g as getElement } from './index-2198b48c.js';
import { T as newWidgetsSketch, i as importCoreReactiveUtils, U as newLayersGraphicsLayer } from './index-08887307.js';
import { r as referenceElementHelper, c as checkForView, a as addHandles } from './component-utils-97b1c3e3.js';
import { o as onDisconnectedHelper } from './disconnected-45c113cb.js';

const sketchCss = "arcgis-sketch{}";

const ArcgisSketch = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.arcgisSketchReady = createEvent(this, "arcgisSketchReady", 7);
        this.sketchCreate = createEvent(this, "sketchCreate", 7);
        this.sketchDelete = createEvent(this, "sketchDelete", 7);
        this.sketchRedo = createEvent(this, "sketchRedo", 7);
        this.sketchUndo = createEvent(this, "sketchUndo", 7);
        this.sketchUpdate = createEvent(this, "sketchUpdate", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.activeTool = undefined;
        this.availableCreateTools = undefined;
        this.createGraphic = undefined;
        this.creationMode = "continuous";
        this.defaultCreateOptions = undefined;
        this.defaultUpdateOptions = undefined;
        this.icon = undefined;
        this.labelOptions = undefined;
        this.layer = undefined;
        this.layout = "horizontal";
        this.pointSymbol = undefined;
        this.polylineSymbol = undefined;
        this.polygonSymbol = undefined;
        this.snappingOptions = undefined;
        this.tooltipOptions = undefined;
        this.updateGraphics = undefined;
        this.visibleElementsCreateToolsPoint = true;
        this.visibleElementsCreateToolsPolyline = true;
        this.visibleElementsCreateToolsPolygon = true;
        this.visibleElementsCreateToolsRectangle = true;
        this.visibleElementsCreateToolsCircle = true;
        this.visibleElementsDuplicateButton = true;
        this.visibleElementsSelectionToolsRectangle = true;
        this.visibleElementsSelectionToolsLasso = true;
        this.visibleElementsSettingsMenu = true;
        this.visibleElementsLabelsToggle = true;
        this.visibleElementsTooltipsToggle = true;
        this.visibleElementsSnappingControls = true;
        this.visibleElementsSnappingControlsElementsHeader = true;
        this.visibleElementsSnappingControlsElementsEnabledToggle = true;
        this.visibleElementsSnappingControlsElementsSelfEnabledToggle = true;
        this.visibleElementsSnappingControlsElementsFeatureEnabledToggle = true;
        this.visibleElementsSnappingControlsElementsLayerList = true;
        this.visibleElementsUndoRedoMenu = true;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void referenceElementHelper(this, value);
    }
    availableCreateToolsWatcher(value) {
        if (this.widget) {
            this.widget.availableCreateTools = value;
        }
    }
    creationModeWatcher(value) {
        if (this.widget) {
            this.widget.creationMode = value;
        }
    }
    defaultCreateOptionsWatcher(value) {
        if (this.widget) {
            this.widget.defaultCreateOptions = value;
        }
    }
    defaultUpdateOptionsWatcher(value) {
        if (this.widget) {
            this.widget.defaultUpdateOptions = value;
        }
    }
    iconWatcher(value) {
        if (this.widget) {
            this.widget.icon = value;
        }
    }
    labelOptionsWatcher(value) {
        if (this.widget) {
            this.widget.labelOptions = value;
        }
    }
    layerWatcher(value) {
        if (this.widget) {
            this.widget.layer = value;
        }
    }
    layoutWatcher(value) {
        if (this.widget) {
            this.widget.layout = value;
        }
    }
    pointSymbolWatcher(value) {
        if (this.widget) {
            this.widget.viewModel.pointSymbol = value;
        }
    }
    polylineSymbolWatcher(value) {
        if (this.widget) {
            this.widget.viewModel.polylineSymbol = value;
        }
    }
    polygonSymbolWatcher(value) {
        if (this.widget) {
            this.widget.viewModel.polygonSymbol = value;
        }
    }
    snappingOptionsWatcher(value) {
        if (this.widget) {
            this.widget.snappingOptions = value;
        }
    }
    tooltipOptionsWatcher(value) {
        if (this.widget) {
            this.widget.tooltipOptions = value;
        }
    }
    visibleElementsCreateToolsPointWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                createTools: {
                    ...this.widget.visibleElements.createTools,
                    point: value
                }
            };
        }
    }
    visibleElementsCreateToolsPolylineWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                createTools: {
                    ...this.widget.visibleElements.createTools,
                    polyline: value
                }
            };
        }
    }
    visibleElementsCreateToolsPolygonWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                createTools: {
                    ...this.widget.visibleElements.createTools,
                    polygon: value
                }
            };
        }
    }
    visibleElementsCreateToolsRectangleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                createTools: {
                    ...this.widget.visibleElements.createTools,
                    rectangle: value
                }
            };
        }
    }
    visibleElementsCreateToolsCircleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                createTools: {
                    ...this.widget.visibleElements.createTools,
                    circle: value
                }
            };
        }
    }
    visibleElementsDuplicateButtonWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                duplicateButton: value
            };
        }
    }
    visibleElementsSelectionToolsRectangleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                selectionTools: {
                    ...this.widget.visibleElements.selectionTools,
                    "rectangle-selection": value
                }
            };
        }
    }
    visibleElementsSelectionToolsLassoWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                selectionTools: {
                    ...this.widget.visibleElements.selectionTools,
                    "lasso-selection": value
                }
            };
        }
    }
    visibleElementsSettingsMenuWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                settingsMenu: value
            };
        }
    }
    visibleElementsLabelsToggleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                labelsToggle: value
            };
        }
    }
    visibleElementsTooltipsToggleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                tooltipsToggle: value
            };
        }
    }
    visibleElementsSnappingControlsWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                snappingControls: value
            };
        }
    }
    visibleElementsSnappingControlsElementsHeaderWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                snappingControlsElements: {
                    header: value
                }
            };
        }
    }
    visibleElementsSnappingControlsElementsEnabledToggleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                snappingControlsElements: {
                    enabledToggle: value
                }
            };
        }
    }
    visibleElementsSnappingControlsElementsSelfEnabledToggleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                snappingControlsElements: {
                    selfEnabledToggle: value
                }
            };
        }
    }
    visibleElementsSnappingControlsElementsFeatureEnabledToggleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                snappingControlsElements: {
                    featureEnabledToggle: value
                }
            };
        }
    }
    visibleElementsSnappingControlsElementsLayerListWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                snappingControlsElements: {
                    layerList: value
                }
            };
        }
    }
    visibleElementsUndoRedoMenuWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                undoRedoMenu: value
            };
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
            this.widget.view.map?.add(this.layer);
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async cancel() {
        this.widget?.cancel();
    }
    async complete() {
        this.widget?.complete();
    }
    async create(tool, createOptions) {
        this.widget?.create(tool, createOptions);
    }
    async delete() {
        this.widget?.delete();
    }
    async duplicate() {
        this.widget?.duplicate();
    }
    async redo() {
        this.widget?.redo();
    }
    async undo() {
        this.widget?.undo();
    }
    async update(graphic, updateOptions) {
        return void this.widget?.update(graphic, updateOptions);
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = await this._createParams();
        const widget = await newWidgetsSketch(params);
        this.widget = widget;
        this._setViewModelParams();
        await this._addWatchers();
        this._proxyEvents();
        this._addContainer();
        this.arcgisSketchReady.emit();
        checkForView(this);
    }
    disconnectedCallback() {
        onDisconnectedHelper(this);
    }
    render() {
        return h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await importCoreReactiveUtils();
        addHandles(this, watch(() => this.widget.activeTool, (value) => (this.activeTool = value), {
            initial: true
        }));
        addHandles(this, watch(() => this.widget.createGraphic, (value) => (this.createGraphic = value), {
            initial: true
        }));
        addHandles(this, watch(() => this.widget.updateGraphics, (value) => (this.updateGraphics = value), {
            initial: true
        }));
    }
    async _createParams() {
        const graphicsLayerProps = {
            title: "Sketch Layer",
            creationMode: "update"
        };
        this.layer || (this.layer = await newLayersGraphicsLayer(graphicsLayerProps));
        const params = {
            layer: this.layer
        };
        params.visibleElements = {
            createTools: {
                point: this.visibleElementsCreateToolsPoint,
                polyline: this.visibleElementsCreateToolsPolyline,
                polygon: this.visibleElementsCreateToolsPolygon,
                rectangle: this.visibleElementsCreateToolsRectangle,
                circle: this.visibleElementsCreateToolsCircle
            },
            duplicateButton: this.visibleElementsDuplicateButton,
            selectionTools: {
                "rectangle-selection": this.visibleElementsSelectionToolsRectangle,
                "lasso-selection": this.visibleElementsSelectionToolsLasso
            },
            settingsMenu: this.visibleElementsSettingsMenu,
            labelsToggle: this.visibleElementsLabelsToggle,
            tooltipsToggle: this.visibleElementsTooltipsToggle,
            snappingControls: this.visibleElementsSnappingControls,
            snappingControlsElements: {
                header: this.visibleElementsSnappingControlsElementsHeader,
                enabledToggle: this.visibleElementsSnappingControlsElementsEnabledToggle,
                selfEnabledToggle: this.visibleElementsSnappingControlsElementsSelfEnabledToggle,
                featureEnabledToggle: this.visibleElementsSnappingControlsElementsFeatureEnabledToggle,
                layerList: this.visibleElementsSnappingControlsElementsLayerList
            },
            undoRedoMenu: this.visibleElementsUndoRedoMenu
        };
        if (this.view) {
            params.view = this.view;
        }
        if (this.availableCreateTools) {
            params.availableCreateTools = this.availableCreateTools;
        }
        if (this.creationMode) {
            params.creationMode = this.creationMode;
        }
        if (this.defaultCreateOptions) {
            params.defaultCreateOptions = this.defaultCreateOptions;
        }
        if (this.defaultUpdateOptions) {
            params.defaultUpdateOptions = this.defaultUpdateOptions;
        }
        if (this.labelOptions) {
            params.labelOptions = this.labelOptions;
        }
        if (this.layout) {
            params.layout = this.layout;
        }
        if (this.snappingOptions) {
            params.snappingOptions = this.snappingOptions;
        }
        if (this.tooltipOptions) {
            params.tooltipOptions = this.tooltipOptions;
        }
        return params;
    }
    _setViewModelParams() {
        const params = {};
        if (this.pointSymbol) {
            params.pointSymbol = this.pointSymbol;
        }
        if (this.polylineSymbol) {
            params.polylineSymbol = this.polylineSymbol;
        }
        if (this.polygonSymbol) {
            params.polygonSymbol = this.polygonSymbol;
        }
        this.widget.viewModel.set(params);
    }
    _proxyEvents() {
        this.widget.on("create", (e) => this.sketchCreate.emit(e));
        this.widget.on("delete", (e) => this.sketchDelete.emit(e));
        this.widget.on("redo", (e) => this.sketchRedo.emit(e));
        this.widget.on("undo", (e) => this.sketchUndo.emit(e));
        this.widget.on("update", (e) => this.sketchUpdate.emit(e));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "availableCreateTools": ["availableCreateToolsWatcher"],
        "creationMode": ["creationModeWatcher"],
        "defaultCreateOptions": ["defaultCreateOptionsWatcher"],
        "defaultUpdateOptions": ["defaultUpdateOptionsWatcher"],
        "icon": ["iconWatcher"],
        "labelOptions": ["labelOptionsWatcher"],
        "layer": ["layerWatcher"],
        "layout": ["layoutWatcher"],
        "pointSymbol": ["pointSymbolWatcher"],
        "polylineSymbol": ["polylineSymbolWatcher"],
        "polygonSymbol": ["polygonSymbolWatcher"],
        "snappingOptions": ["snappingOptionsWatcher"],
        "tooltipOptions": ["tooltipOptionsWatcher"],
        "visibleElementsCreateToolsPoint": ["visibleElementsCreateToolsPointWatcher"],
        "visibleElementsCreateToolsPolyline": ["visibleElementsCreateToolsPolylineWatcher"],
        "visibleElementsCreateToolsPolygon": ["visibleElementsCreateToolsPolygonWatcher"],
        "visibleElementsCreateToolsRectangle": ["visibleElementsCreateToolsRectangleWatcher"],
        "visibleElementsCreateToolsCircle": ["visibleElementsCreateToolsCircleWatcher"],
        "visibleElementsDuplicateButton": ["visibleElementsDuplicateButtonWatcher"],
        "visibleElementsSelectionToolsRectangle": ["visibleElementsSelectionToolsRectangleWatcher"],
        "visibleElementsSelectionToolsLasso": ["visibleElementsSelectionToolsLassoWatcher"],
        "visibleElementsSettingsMenu": ["visibleElementsSettingsMenuWatcher"],
        "visibleElementsLabelsToggle": ["visibleElementsLabelsToggleWatcher"],
        "visibleElementsTooltipsToggle": ["visibleElementsTooltipsToggleWatcher"],
        "visibleElementsSnappingControls": ["visibleElementsSnappingControlsWatcher"],
        "visibleElementsSnappingControlsElementsHeader": ["visibleElementsSnappingControlsElementsHeaderWatcher"],
        "visibleElementsSnappingControlsElementsEnabledToggle": ["visibleElementsSnappingControlsElementsEnabledToggleWatcher"],
        "visibleElementsSnappingControlsElementsSelfEnabledToggle": ["visibleElementsSnappingControlsElementsSelfEnabledToggleWatcher"],
        "visibleElementsSnappingControlsElementsFeatureEnabledToggle": ["visibleElementsSnappingControlsElementsFeatureEnabledToggleWatcher"],
        "visibleElementsSnappingControlsElementsLayerList": ["visibleElementsSnappingControlsElementsLayerListWatcher"],
        "visibleElementsUndoRedoMenu": ["visibleElementsUndoRedoMenuWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisSketch.style = sketchCss;

export { ArcgisSketch as arcgis_sketch };
