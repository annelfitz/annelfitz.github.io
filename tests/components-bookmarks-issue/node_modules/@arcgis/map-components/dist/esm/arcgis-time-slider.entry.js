/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
import { r as registerInstance, c as createEvent, h, g as getElement } from './index-2198b48c.js';
import { Z as newWidgetsTimeSlider, i as importCoreReactiveUtils } from './index-08887307.js';
import { r as referenceElementHelper, c as checkForView, a as addHandles } from './component-utils-97b1c3e3.js';
import { o as onDisconnectedHelper } from './disconnected-45c113cb.js';

const timeSliderCss = "arcgis-time-slider{}";

const ArcgisTimeSlider = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.arcgisTimeSliderReady = createEvent(this, "arcgisTimeSliderReady", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.timeSliderTriggerAction = createEvent(this, "timeSliderTriggerAction", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.actions = undefined;
        this.disabled = false;
        this.effectiveStops = undefined;
        this.fullTimeExtent = undefined;
        this.layout = "auto";
        this.loop = false;
        this.mode = "time-window";
        this.playRate = 1000;
        this.stops = { count: 10 };
        this.tickConfigs = undefined;
        this.timeExtent = undefined;
        this.timeVisible = false;
        this.timeZone = undefined;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void referenceElementHelper(this, value);
    }
    actionsWatcher(value) {
        if (this.widget) {
            this.widget.actions = value;
        }
    }
    disabledWatcher(value, old) {
        if (this.widget && value !== old) {
            this.widget.disabled = value;
        }
    }
    fullTimeExtentWatcher(value) {
        if (this.widget) {
            this.widget.fullTimeExtent = value;
        }
    }
    layoutWatcher(value) {
        if (this.widget) {
            this.widget.layout = value;
        }
    }
    loopWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.loop = value;
        }
    }
    modeWatcher(value) {
        if (this.widget) {
            this.widget.mode = value;
        }
    }
    playRateWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.playRate = value;
        }
    }
    stopsWatcher(value) {
        if (this.widget) {
            this.widget.stops = value;
        }
    }
    tickConfigsWatcher(value) {
        if (this.widget) {
            this.widget.tickConfigs = value;
        }
    }
    timeExtentWatcher(value) {
        if (this.widget) {
            this.widget.timeExtent = value;
        }
    }
    timeVisibleWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.timeVisible = value;
        }
    }
    timeZoneWatcher(value) {
        if (this.widget) {
            this.widget.timeZone = value;
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async next() {
        this.widget?.next();
    }
    async play() {
        this.widget?.play();
    }
    async previous() {
        this.widget?.previous();
    }
    async stop() {
        this.widget?.stop();
    }
    async updateWebDocument(webmap) {
        this.widget?.updateWebDocument(webmap);
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await newWidgetsTimeSlider(params);
        this.widget = widget;
        await this._addWatchers();
        this._proxyEvents();
        this._addContainer();
        this.arcgisTimeSliderReady.emit();
        checkForView(this);
    }
    disconnectedCallback() {
        onDisconnectedHelper(this);
    }
    render() {
        return h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await importCoreReactiveUtils();
        addHandles(this, [
            watch(() => this.widget.effectiveStops, (value) => {
                this.effectiveStops = value;
                this.arcgisPropertyChange.emit({ name: "effectiveStops" });
            }, {
                initial: true
            }),
            watch(() => this.widget.disabled, (value) => (this.disabled = value)),
            watch(() => this.widget.fullTimeExtent, (value) => {
                this.fullTimeExtent = value;
                this.arcgisPropertyChange.emit({ name: "fullTimeExtent" });
            }),
            watch(() => this.widget.timeExtent, (value) => {
                this.timeExtent = value;
                this.arcgisPropertyChange.emit({ name: "timeExtent" });
            })
        ]);
    }
    _createParams() {
        const params = {};
        if (this.actions !== undefined) {
            params.actions = this.actions;
        }
        if (this.fullTimeExtent !== undefined) {
            params.fullTimeExtent = this.fullTimeExtent;
        }
        if (this.layout !== undefined) {
            params.layout = this.layout;
        }
        if (this.loop !== undefined) {
            params.loop = this.loop;
        }
        if (this.mode !== undefined) {
            params.mode = this.mode;
        }
        if (this.playRate !== undefined) {
            params.playRate = this.playRate;
        }
        if (this.stops !== undefined) {
            params.stops = this.stops;
        }
        if (this.tickConfigs !== undefined) {
            params.tickConfigs = this.tickConfigs;
        }
        if (this.timeExtent !== undefined) {
            params.timeExtent = this.timeExtent;
        }
        if (this.timeVisible !== undefined) {
            params.timeVisible = this.timeVisible;
        }
        if (this.timeZone) {
            params.timeZone = this.timeZone;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    _proxyEvents() {
        this.widget?.on("trigger-action", (e) => this.timeSliderTriggerAction.emit(e));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "actions": ["actionsWatcher"],
        "disabled": ["disabledWatcher"],
        "fullTimeExtent": ["fullTimeExtentWatcher"],
        "layout": ["layoutWatcher"],
        "loop": ["loopWatcher"],
        "mode": ["modeWatcher"],
        "playRate": ["playRateWatcher"],
        "stops": ["stopsWatcher"],
        "tickConfigs": ["tickConfigsWatcher"],
        "timeExtent": ["timeExtentWatcher"],
        "timeVisible": ["timeVisibleWatcher"],
        "timeZone": ["timeZoneWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisTimeSlider.style = timeSliderCss;

export { ArcgisTimeSlider as arcgis_time_slider };
