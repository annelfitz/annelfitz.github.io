/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
import { r as registerInstance, c as createEvent, h, g as getElement } from './index-2198b48c.js';
import { j as newWidgetsBuildingExplorer, i as importCoreReactiveUtils } from './index-08887307.js';
import { r as referenceElementHelper, c as checkForView, a as addHandles } from './component-utils-97b1c3e3.js';
import { o as onDisconnectedHelper } from './disconnected-45c113cb.js';

const buildingExplorerCss = "";

const ArcgisBuildingExplorer = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.arcgisBuildingExplorerReady = createEvent(this, "arcgisBuildingExplorerReady", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.icon = undefined;
        this.layers = undefined;
        this.level = undefined;
        this.phase = undefined;
        this.state = "disabled";
        this.visibleElementsLevels = true;
        this.visibleElementsPhases = true;
        this.visibleElementsDisciplines = true;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void referenceElementHelper(this, value);
    }
    iconWatcher(value) {
        if (this.widget) {
            this.widget.icon = value;
        }
    }
    layersWatcher(value) {
        if (this.widget) {
            this.widget.layers = value;
        }
    }
    visibleElementsLevelsWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = { ...this.widget.visibleElements, levels: value };
        }
    }
    visibleElementsPhasesWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = { ...this.widget.visibleElements, phases: value };
        }
    }
    visibleElementsDisciplinesWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = { ...this.widget.visibleElements, disciplines: value };
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await newWidgetsBuildingExplorer(params);
        this.widget = widget;
        await this._addWatchers();
        this._addContainer();
        this.arcgisBuildingExplorerReady.emit();
        checkForView(this);
    }
    disconnectedCallback() {
        onDisconnectedHelper(this);
    }
    render() {
        return h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await importCoreReactiveUtils();
        addHandles(this, [
            watch(() => this.widget.viewModel.level, (value) => {
                this.level = value;
                this.arcgisPropertyChange.emit({ name: "level" });
            }, {
                initial: true
            }),
            watch(() => this.widget.viewModel.phase, (value) => {
                this.phase = value;
                this.arcgisPropertyChange.emit({ name: "phase" });
            }, {
                initial: true
            }),
            watch(() => this.widget.viewModel.state, (value) => (this.state = value), {
                initial: true
            })
        ]);
    }
    _createParams() {
        const params = {};
        params.visibleElements = {
            levels: this.visibleElementsLevels,
            phases: this.visibleElementsPhases,
            disciplines: this.visibleElementsDisciplines
        };
        if (this.icon) {
            params.icon = this.icon;
        }
        if (this.layers) {
            params.layers = this.layers;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "icon": ["iconWatcher"],
        "layers": ["layersWatcher"],
        "visibleElementsLevels": ["visibleElementsLevelsWatcher"],
        "visibleElementsPhases": ["visibleElementsPhasesWatcher"],
        "visibleElementsDisciplines": ["visibleElementsDisciplinesWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisBuildingExplorer.style = buildingExplorerCss;

export { ArcgisBuildingExplorer as arcgis_building_explorer };
