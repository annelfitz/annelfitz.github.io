/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
import { r as registerInstance, c as createEvent, h, g as getElement } from './index-2198b48c.js';
import { k as newWidgetsCompass, i as importCoreReactiveUtils } from './index-08887307.js';
import { r as referenceElementHelper, c as checkForView, a as addHandles } from './component-utils-97b1c3e3.js';
import { o as onDisconnectedHelper } from './disconnected-45c113cb.js';

const compassCss = "";

function notSameOrientation(a, b) {
    return a.x !== b.x || a.y !== b.y || a.z !== b.z;
}
const ArcgisCompass = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.arcgisCompassReady = createEvent(this, "arcgisCompassReady", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.orientation = { x: 0, y: 0, z: 0 };
        this.icon = undefined;
        this.state = "disabled";
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void referenceElementHelper(this, value);
    }
    orientationWatcher(value, old) {
        if (this.widget && notSameOrientation(value, old)) {
            this.widget.viewModel.orientation = value;
        }
    }
    iconWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.icon = value;
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async reset() {
        this.widget?.reset();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await newWidgetsCompass(params);
        this.widget = widget;
        this._addContainer();
        this._setViewModelParams();
        await this._addWatchers();
        this.arcgisCompassReady.emit();
        checkForView(this);
    }
    disconnectedCallback() {
        onDisconnectedHelper(this);
    }
    render() {
        return h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await importCoreReactiveUtils();
        addHandles(this, [
            watch(() => this.widget?.viewModel.orientation, (value) => {
                this.orientation = value;
                this.arcgisPropertyChange.emit({ name: "orientation" });
            }),
            watch(() => this.widget?.viewModel.state, (value) => (this.state = value))
        ]);
    }
    _createParams() {
        const params = {};
        if (this.icon) {
            params.icon = this.icon;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    _setViewModelParams() {
        const params = {
            orientation: this.orientation
        };
        this.widget.viewModel.set(params);
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "orientation": ["orientationWatcher"],
        "icon": ["iconWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisCompass.style = compassCss;

export { ArcgisCompass as arcgis_compass };
