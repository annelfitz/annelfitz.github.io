/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
import { r as registerInstance, c as createEvent, h, g as getElement } from './index-2198b48c.js';
import { c as newWidgetsAreaMeasurement2D, i as importCoreReactiveUtils } from './index-08887307.js';
import { r as referenceElementHelper, c as checkForView, a as addHandles } from './component-utils-97b1c3e3.js';
import { o as onDisconnectedHelper } from './disconnected-45c113cb.js';

const areaMeasurement2dCss = "";

const ArcgisAreaMeasurement2d = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.arcgisAreaMeasurement2dReady = createEvent(this, "arcgisAreaMeasurement2dReady", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.icon = undefined;
        this.unit = undefined;
        this.unitOptions = undefined;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void referenceElementHelper(this, value);
    }
    iconWatcher(value) {
        if (this.widget) {
            this.widget.icon = value;
        }
    }
    unitWatcher(value) {
        if (this.widget) {
            this.widget.unit = value;
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await newWidgetsAreaMeasurement2D(params);
        this.widget = widget;
        await this._addWatchers();
        this.arcgisAreaMeasurement2dReady.emit();
        checkForView(this);
    }
    disconnectedCallback() {
        onDisconnectedHelper(this);
    }
    render() {
        return h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    async _addWatchers() {
        const { watch, whenOnce } = await importCoreReactiveUtils();
        addHandles(this, watch(() => this.widget.unit, (value) => (this.unit = value), {
            initial: true
        }));
        await whenOnce(() => this.widget.unitOptions);
        this.unitOptions = this.widget.unitOptions;
    }
    _createParams() {
        const params = {
            container: this.childElem
        };
        if (this.icon) {
            params.icon = this.icon;
        }
        if (this.view) {
            params.view = this.view;
        }
        if (this.unit) {
            params.unit = this.unit;
        }
        if (this.unitOptions) {
            params.unitOptions = this.unitOptions;
        }
        return params;
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "icon": ["iconWatcher"],
        "unit": ["unitWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisAreaMeasurement2d.style = areaMeasurement2dCss;

export { ArcgisAreaMeasurement2d as arcgis_area_measurement_2d };
