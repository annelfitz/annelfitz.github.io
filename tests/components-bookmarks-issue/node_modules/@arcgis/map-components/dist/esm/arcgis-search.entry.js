/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
import { r as registerInstance, c as createEvent, h, g as getElement } from './index-2198b48c.js';
import { R as newWidgetsSearch, i as importCoreReactiveUtils } from './index-08887307.js';
import { r as referenceElementHelper, c as checkForView, a as addHandles } from './component-utils-97b1c3e3.js';
import { o as onDisconnectedHelper } from './disconnected-45c113cb.js';

const searchCss = "";

const ArcgisSearch = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.arcgisSearchReady = createEvent(this, "arcgisSearchReady", 7);
        this.searchBlur = createEvent(this, "searchBlur", 7);
        this.searchClear = createEvent(this, "searchClear", 7);
        this.searchComplete = createEvent(this, "searchComplete", 7);
        this.searchFocus = createEvent(this, "searchFocus", 7);
        this.searchStart = createEvent(this, "searchStart", 7);
        this.searchSelectResult = createEvent(this, "searchSelectResult", 7);
        this.searchSuggestComplete = createEvent(this, "searchSuggestComplete", 7);
        this.searchSuggestStart = createEvent(this, "searchSuggestStart", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.activeMenu = "none";
        this.activeSource = undefined;
        this.activeSourceIndex = 0;
        this.allPlaceholder = "Find address or place";
        this.allSources = undefined;
        this.autoSelect = true;
        this.defaultSources = undefined;
        this.disabled = false;
        this.icon = undefined;
        this.includeDefaultSources = true;
        this.locationEnabled = true;
        this.maxResults = 6;
        this.maxSuggestions = 6;
        this.minSuggestCharacters = 3;
        this.popupEnabled = true;
        this.popupTemplate = undefined;
        this.portal = undefined;
        this.resultGraphic = undefined;
        this.resultGraphicEnabled = true;
        this.results = undefined;
        this.searchAllEnabled = true;
        this.searchTerm = undefined;
        this.selectedResult = undefined;
        this.sources = undefined;
        this.suggestions = undefined;
        this.suggestionsEnabled = true;
        this.position = "top-right";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void referenceElementHelper(this, value);
    }
    activeMenuWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.activeMenu = value;
        }
    }
    activeSourceIndexWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.activeSourceIndex = value;
        }
    }
    allPlaceholderWatcher(value) {
        if (this.widget) {
            this.widget.allPlaceholder = value;
        }
    }
    autoSelectWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.autoSelect = value;
        }
    }
    disabledWatcher(value, old) {
        if (this.widget && value !== old) {
            this.widget.disabled = value;
        }
    }
    iconWatcher(value) {
        if (this.widget) {
            this.widget.icon = value;
        }
    }
    includeDefaultSourcesWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.includeDefaultSources = value;
        }
    }
    locationEnabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.locationEnabled = value;
        }
    }
    maxResultsWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.maxResults = value;
        }
    }
    maxSuggestionsWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.maxSuggestions = value;
        }
    }
    minSuggestCharactersWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.minSuggestCharacters = value;
        }
    }
    popupEnabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.popupEnabled = value;
        }
    }
    popupTemplateWatcher(value) {
        if (this.widget) {
            this.widget.popupTemplate = value;
        }
    }
    portalWatcher(value) {
        if (this.widget) {
            this.widget.portal = value;
        }
    }
    resultGraphicEnabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.resultGraphicEnabled = value;
        }
    }
    searchAllEnabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.searchAllEnabled = value;
        }
    }
    searchTermWatcher(value) {
        if (this.widget) {
            this.widget.searchTerm = value;
        }
    }
    sourcesWatcher(value) {
        if (this.widget) {
            this.widget.sources = value;
        }
    }
    suggestionsEnabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.suggestionsEnabled = value;
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async blurSearch() {
        this.widget?.blur();
    }
    async clearSearch() {
        this.widget?.clear();
    }
    async focusSearch() {
        this.widget?.focus();
    }
    async search(term) {
        return await this.widget?.search(term);
    }
    async suggest(term) {
        return await this.widget?.suggest(term);
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await newWidgetsSearch(params);
        this.widget = widget;
        await this._addWatchers();
        this._proxyEvents();
        this._addContainer();
        this.arcgisSearchReady.emit();
        checkForView(this);
    }
    disconnectedCallback() {
        onDisconnectedHelper(this);
    }
    render() {
        return h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Interal Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await importCoreReactiveUtils();
        addHandles(this, watch(() => this.widget.activeSource, (value) => (this.activeSource = value), {
            initial: true
        }));
        addHandles(this, watch(() => this.widget.activeSourceIndex, (value) => (this.activeSourceIndex = value), {
            initial: true
        }));
        addHandles(this, watch(() => this.widget.allSources, (value) => (this.allSources = value), {
            initial: true
        }));
        addHandles(this, watch(() => this.widget.defaultSources, (value) => (this.defaultSources = value), {
            initial: true
        }));
        addHandles(this, watch(() => this.widget.disabled, (value) => (this.disabled = value), {
            initial: true
        }));
        addHandles(this, watch(() => this.widget.resultGraphic, (value) => (this.resultGraphic = value), {
            initial: true
        }));
        addHandles(this, watch(() => this.widget.results, (value) => (this.results = value), {
            initial: true
        }));
        addHandles(this, watch(() => this.widget.selectedResult, (value) => (this.selectedResult = value), {
            initial: true
        }));
        addHandles(this, watch(() => this.widget.suggestions, (value) => (this.suggestions = value), {
            initial: true
        }));
    }
    _createParams() {
        const params = {};
        if (this.allPlaceholder) {
            params.allPlaceholder = this.allPlaceholder;
        }
        if (this.autoSelect !== undefined) {
            params.autoSelect = this.autoSelect;
        }
        if (this.includeDefaultSources !== undefined) {
            params.includeDefaultSources = this.includeDefaultSources;
        }
        if (this.locationEnabled !== undefined) {
            params.locationEnabled = this.locationEnabled;
        }
        if (this.maxResults !== undefined) {
            params.maxResults = this.maxResults;
        }
        if (this.maxSuggestions !== undefined) {
            params.maxSuggestions = this.maxSuggestions;
        }
        if (this.minSuggestCharacters !== undefined) {
            params.minSuggestCharacters = this.minSuggestCharacters;
        }
        if (this.popupEnabled !== undefined) {
            params.popupEnabled = this.popupEnabled;
        }
        if (this.popupTemplate) {
            params.popupTemplate = this.popupTemplate;
        }
        if (this.portal) {
            params.portal = this.portal;
        }
        if (this.resultGraphicEnabled !== undefined) {
            params.resultGraphicEnabled = this.resultGraphicEnabled;
        }
        if (this.searchAllEnabled !== undefined) {
            params.searchAllEnabled = this.searchAllEnabled;
        }
        if (this.searchTerm) {
            params.searchTerm = this.searchTerm;
        }
        if (this.sources) {
            params.sources = this.sources;
        }
        if (this.suggestionsEnabled !== undefined) {
            params.suggestionsEnabled = this.suggestionsEnabled;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    _proxyEvents() {
        this.widget.on("search-blur", (e) => this.searchBlur.emit(e));
        this.widget.on("search-clear", (e) => this.searchClear.emit(e));
        this.widget.on("search-complete", (e) => this.searchComplete.emit(e));
        this.widget.on("search-focus", (e) => this.searchFocus.emit(e));
        this.widget.on("search-start", (e) => this.searchStart.emit(e));
        this.widget.on("select-result", (e) => this.searchSelectResult.emit(e));
        this.widget.on("suggest-complete", (e) => this.searchSuggestComplete.emit(e));
        this.widget.on("suggest-start", (e) => this.searchSuggestStart.emit(e));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "activeMenu": ["activeMenuWatcher"],
        "activeSourceIndex": ["activeSourceIndexWatcher"],
        "allPlaceholder": ["allPlaceholderWatcher"],
        "autoSelect": ["autoSelectWatcher"],
        "disabled": ["disabledWatcher"],
        "icon": ["iconWatcher"],
        "includeDefaultSources": ["includeDefaultSourcesWatcher"],
        "locationEnabled": ["locationEnabledWatcher"],
        "maxResults": ["maxResultsWatcher"],
        "maxSuggestions": ["maxSuggestionsWatcher"],
        "minSuggestCharacters": ["minSuggestCharactersWatcher"],
        "popupEnabled": ["popupEnabledWatcher"],
        "popupTemplate": ["popupTemplateWatcher"],
        "portal": ["portalWatcher"],
        "resultGraphicEnabled": ["resultGraphicEnabledWatcher"],
        "searchAllEnabled": ["searchAllEnabledWatcher"],
        "searchTerm": ["searchTermWatcher"],
        "sources": ["sourcesWatcher"],
        "suggestionsEnabled": ["suggestionsEnabledWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisSearch.style = searchCss;

export { ArcgisSearch as arcgis_search };
