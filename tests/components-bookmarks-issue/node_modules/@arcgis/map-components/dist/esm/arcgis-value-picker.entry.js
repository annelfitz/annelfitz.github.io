/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.13
 */
import { r as registerInstance, c as createEvent, h, g as getElement } from './index-2198b48c.js';
import { a2 as newWidgetsValuePicker, i as importCoreReactiveUtils } from './index-08887307.js';
import { c as checkForView, a as addHandles } from './component-utils-97b1c3e3.js';
import { o as onDisconnectedHelper } from './disconnected-45c113cb.js';

const valuePickerCss = "arcgis-value-picker{}";

const ArcgisValuePicker = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.arcgisValuePickerReady = createEvent(this, "arcgisValuePickerReady", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.valuePickerAnimate = createEvent(this, "valuePickerAnimate", 7);
        this.valuePickerNext = createEvent(this, "valuePickerNext", 7);
        this.valuePickerPause = createEvent(this, "valuePickerPause", 7);
        this.valuePickerPlay = createEvent(this, "valuePickerPlay", 7);
        this.valuePickerPrevious = createEvent(this, "valuePickerPrevious", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.view = undefined;
        this.position = "bottom-left";
        this.widget = undefined;
        this.canNext = undefined;
        this.canPlay = undefined;
        this.canPrevious = undefined;
        this.caption = undefined;
        this.component = undefined;
        this.layout = undefined;
        this.loop = undefined;
        this.playRate = undefined;
        this.visibleElements = undefined;
        this.values = undefined;
    }
    positionWatcher(newValue) {
        if (newValue !== undefined && this.widget) {
            this.view.ui.move(this.childElem, newValue);
        }
    }
    captionWatcher(newValue) {
        this.widget.caption = newValue;
    }
    componentWatcher(newValue) {
        if (this.widget) {
            this.widget.component = newValue;
        }
    }
    layoutWatcher(newValue) {
        if (this.widget) {
            this.widget.layout = newValue;
        }
    }
    loopWatcher(newValue) {
        if (newValue !== undefined && this.widget) {
            this.widget.loop = newValue;
        }
    }
    playRateWatcher(newValue) {
        if (newValue !== undefined && this.widget) {
            this.widget.playRate = newValue;
        }
    }
    visibleElementsWatcher(newValue) {
        if (this.widget) {
            this.widget.visibleElements = newValue;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async next() {
        this.widget?.next();
    }
    async pause() {
        this.widget?.pause();
    }
    async play() {
        this.widget?.play();
    }
    async previous() {
        this.widget?.previous();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await newWidgetsValuePicker(params);
        this.widget = widget;
        await this._addWatchers();
        this._proxyEvents();
        this.arcgisValuePickerReady.emit();
        checkForView(this);
    }
    disconnectedCallback() {
        onDisconnectedHelper(this);
    }
    render() {
        return h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Interal Methods
    //
    //--------------------------------------------------------------------------
    async _addWatchers() {
        const { watch } = await importCoreReactiveUtils();
        addHandles(this, watch(() => this.widget.canNext, (value) => (this.canNext = value), {
            initial: true
        }));
        addHandles(this, watch(() => this.widget.canPlay, (value) => (this.canPlay = value), {
            initial: true
        }));
        addHandles(this, watch(() => this.widget.canPrevious, (value) => (this.canPrevious = value), {
            initial: true
        }));
        addHandles(this, watch(() => this.widget.values, (value) => {
            this.values = value;
            this.arcgisPropertyChange.emit({ name: "values" });
        }, {
            initial: true
        }));
    }
    _createParams() {
        const params = {
            container: this.childElem
        };
        if (this.caption) {
            params.caption = this.caption;
        }
        if (this.component) {
            params.component = this.component;
        }
        if (this.layout) {
            params.layout = this.layout;
        }
        if (this.loop !== undefined) {
            params.loop = this.loop;
        }
        if (this.playRate !== undefined) {
            params.playRate = this.playRate;
        }
        if (this.visibleElements) {
            params.visibleElements = this.visibleElements;
        }
        return params;
    }
    _proxyEvents() {
        this.widget.on("animate", (e) => this.valuePickerAnimate.emit(e));
        this.widget.on("next", (e) => this.valuePickerNext.emit(e));
        this.widget.on("pause", (e) => this.valuePickerPause.emit(e));
        this.widget.on("play", (e) => this.valuePickerPlay.emit(e));
        this.widget.on("previous", (e) => this.valuePickerPrevious.emit(e));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "position": ["positionWatcher"],
        "caption": ["captionWatcher"],
        "component": ["componentWatcher"],
        "layout": ["layoutWatcher"],
        "loop": ["loopWatcher"],
        "playRate": ["playRateWatcher"],
        "visibleElements": ["visibleElementsWatcher"]
    }; }
};
ArcgisValuePicker.style = valuePickerCss;

export { ArcgisValuePicker as arcgis_value_picker };
