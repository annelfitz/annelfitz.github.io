import { E2EElement, E2EPage } from "@stencil/core/testing";
import type { JSX } from "../components";
/**
 * Util to help type global props for testing.
 */
export type GlobalTestProps<T> = T & Window & typeof globalThis;
type FilterPropsByPropertyName<T, PropName extends string> = {
    [K in keyof T]: PropName extends keyof T[K] ? T[K] : never;
};
/**
 * Helper to extract a type by filtering the type by the property name.
 */
export type IntrinsicElementsWithProp<T extends string> = FilterPropsByPropertyName<JSX.IntrinsicElements, T>[keyof FilterPropsByPropertyName<JSX.IntrinsicElements, T>];
type DragAndDropSelector = string | SelectorOptions;
type PointerPosition = {
    vertical?: "bottom" | "center" | "top";
    horizontal?: "left" | "center" | "right";
    offset?: [number, number];
};
interface SelectorOptions {
    element: string;
    shadow?: string;
    pointerPosition?: PointerPosition;
}
/**
 * Drag and drop utility based on https://github.com/puppeteer/puppeteer/issues/1366#issuecomment-615887204
 *
 * @param {E2EPage} page - the e2e page
 * @param {DragAndDropSelector} dragStartSelector - Selector for the drag's start
 * @param {DragAndDropSelector} dragEndSelector - Selector for the drag's end
 */
export declare function dragAndDrop(page: E2EPage, dragStartSelector: DragAndDropSelector, dragEndSelector: DragAndDropSelector): Promise<void>;
/**
 *
 * @param {E2EElement} input - the element to select text from
 * @returns {Promise<void>}
 */
export declare function selectText(input: E2EElement): Promise<void>;
/**
 * Helper to get an E2EElement's x,y coordinates.
 *
 * @param {E2EPage} page - the e2e page
 * @param {string} elementSelector - the element selector
 * @param {string} shadowSelector - the shadowRoot selector
 * @deprecated Use `getElementRect` instead.
 */
export declare function getElementXY(page: E2EPage, elementSelector: string, shadowSelector?: string): Promise<[number, number]>;
/**
 * Helper to get an E2EElement's DOMRect object.
 *
 * @param {E2EPage} page - the e2e page
 * @param {string} elementSelector - the element selector
 * @param {string} shadowSelector - the shadowRoot selector
 * @returns {Promise<DOMRect>} Promise with DOMRect object.
 */
export declare function getElementRect(page: E2EPage, elementSelector: string, shadowSelector?: string): Promise<DOMRect>;
/**
 * This util helps visualize mouse movement when running tests in headful mode.
 * Note that this util should only be used for test debugging purposes and not be included in a test.
 * Based on https://github.com/puppeteer/puppeteer/issues/4378#issuecomment-499726973
 *
 * @example
 * import { visualizeMouseCursor } from "../../tests/utils";
 *
 * const page = await newE2EPage();
 * await page.setContent(`<calcite-tooltip>Content</calcite-tooltip>`);
 *
 * await visualizeMouseCursor(page);
 * await page.waitForChanges();
 *
 * @param {E2EPage} page - the e2e page
 */
export declare function visualizeMouseCursor(page: E2EPage): Promise<void>;
/**
 * Tells the browser that you wish to perform an animation.
 * https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame
 *
 * @returns {Promise<void>}
 */
export declare function waitForAnimationFrame(): Promise<void>;
/**
 * Creates an E2E page for tests that need to create and set up elements programmatically.
 *
 * @returns {Promise<E2EPage>} an e2e page
 */
export declare function newProgrammaticE2EPage(): Promise<E2EPage>;
/**
 * Sets CSS vars to skip animations/transitions.
 *
 * @example
 * import { skipAnimations } from "../../tests/utils";
 *
 * const page = await newE2EPage();
 * await page.setContent(`<calcite-tooltip>Content</calcite-tooltip>`);
 *
 * await skipAnimations(page);
 * await page.waitForChanges();
 *
 * @param page
 */
export declare function skipAnimations(page: E2EPage): Promise<void>;
interface MatchesFocusedElementOptions {
    /**
     * Set this to true when the focused element is expected to reside in the shadow DOM
     */
    shadowed: boolean;
}
/**
 * This util helps determine if a selector matches the currently focused element.
 *
 * @param page – the E2E page
 * @param selector – selector of element to match
 * @param options - options to customize the utility behavior
 */
export declare function isElementFocused(page: E2EPage, selector: string, options?: MatchesFocusedElementOptions): Promise<boolean>;
type GetFocusedElementProp = {
    /**
     * Set to true to use the shadow root's active element instead of the light DOM's.
     */
    shadow: boolean;
};
/**
 * This helps get serializable properties from the focused element.
 *
 * @param {E2EPage} page - the E2E test page
 * @param {string} prop - the property to get from the focused element (note: must be serializable)
 * @param {GetFocusedElementProp} options – additional configuration options
 */
export declare function getFocusedElementProp(page: E2EPage, prop: keyof HTMLElement, options?: GetFocusedElementProp): Promise<ReturnType<E2EPage["evaluate"]>>;
/**
 * Custom integer matcher to use with object matchers.
 *
 * @see https://jasmine.github.io/tutorials/custom_argument_matchers
 */
export declare function toBeInteger(): any;
/**
 * Custom number matcher to use with object matchers.
 *
 * @see https://jasmine.github.io/tutorials/custom_argument_matchers
 */
export declare function toBeNumber(): any;
export {};
