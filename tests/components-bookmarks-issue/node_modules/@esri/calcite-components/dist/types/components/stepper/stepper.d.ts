import { Event, EventEmitter, VNode } from "../../stencil-public-runtime";
import { Scale } from "../interfaces";
import { StepperItemChangeEventDetail, StepperItemKeyEventDetail, StepperLayout } from "./interfaces";
import { LocalizedComponent, NumberingSystem } from "../../utils/locale";
import { T9nComponent } from "../../utils/t9n";
import { StepperMessages } from "./assets/stepper/t9n";
/**
 * @slot - A slot for adding `calcite-stepper-item` elements.
 */
export declare class Stepper implements LocalizedComponent, T9nComponent {
    /** When `true`, displays a status icon in the `calcite-stepper-item` heading. */
    icon: boolean;
    /** Defines the layout of the component. */
    layout: StepperLayout;
    /** When `true`, displays the step number in the `calcite-stepper-item` heading. */
    numbered: boolean;
    /** Specifies the size of the component. */
    scale: Scale;
    handleItemPropChange(): void;
    /**
     * Made into a prop for testing purposes only
     *
     * @internal
     */
    messages: StepperMessages;
    /**
     * Specifies the Unicode numeral system used by the component for localization.
     */
    numberingSystem?: NumberingSystem;
    numberingSystemChange(): void;
    /**
     * Specifies the component's selected item.
     *
     * @readonly
     */
    selectedItem: HTMLCalciteStepperItemElement;
    /**
     * Use this property to override individual strings used by the component.
     */
    messageOverrides: Partial<StepperMessages>;
    onMessagesChange(): void;
    /**
     * Fires when the active `calcite-stepper-item` changes.
     *
     */
    calciteStepperItemChange: EventEmitter<void>;
    /**
     * Fires when the active `calcite-stepper-item` changes.
     *
     * @internal
     */
    calciteInternalStepperItemChange: EventEmitter<StepperItemChangeEventDetail>;
    connectedCallback(): void;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): void;
    disconnectedCallback(): void;
    render(): VNode;
    calciteInternalStepperItemKeyEvent(event: CustomEvent<StepperItemKeyEventDetail>): void;
    registerItem(event: CustomEvent): void;
    updateItem(event: CustomEvent): void;
    handleUserRequestedStepperItemSelect(): void;
    /** Set the next `calcite-stepper-item` as active. */
    nextStep(): Promise<void>;
    /** Set the previous `calcite-stepper-item` as active. */
    prevStep(): Promise<void>;
    /**
     * Set a specified `calcite-stepper-item` as active.
     *
     * @param step
     */
    goToStep(step: number): Promise<void>;
    /** Set the first `calcite-stepper-item` as active. */
    startStep(): Promise<void>;
    /** Set the last `calcite-stepper-item` as active. */
    endStep(): Promise<void>;
    el: HTMLCalciteStepperElement;
    defaultMessages: StepperMessages;
    effectiveLocale: string;
    effectiveLocaleChange(): void;
    currentActivePosition: number;
    handlePositionChange(): void;
    elWidth: number;
    handleElWidthChange(): void;
    private enabledItems;
    private itemMap;
    private items;
    private mutationObserver;
    /** Specifies if the user is viewing one `stepper-item` at a time when the page width is less than sum of min-width of each item. */
    private multipleViewMode;
    private guid;
    private containerEl;
    private resizeObserver;
    private updateItems;
    private determineActiveStepper;
    private getEnabledStepIndex;
    private updateStep;
    private filterItems;
    private setStepperItemNumberingSystem;
    private renderAction;
    private handleActionClick;
    private getFirstEnabledStepperPosition;
    private setContainerEl;
    handleDefaultSlotChange: (event: Event) => void;
}
