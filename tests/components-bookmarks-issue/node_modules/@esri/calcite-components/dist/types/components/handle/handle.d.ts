import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { LoadableComponent } from "../../utils/loadable";
import { T9nComponent } from "../../utils/t9n";
import { HandleMessages } from "./assets/handle/t9n";
import { HandleChange, HandleNudge } from "./interfaces";
import { InteractiveComponent } from "../../utils/interactive";
export declare class Handle implements LoadableComponent, T9nComponent, InteractiveComponent {
    /**
     * When `true`, the component is selected.
     */
    selected: boolean;
    handleAriaTextChange(): void;
    /**
     * When `true`, interaction is prevented and the component is displayed with lower opacity.
     */
    disabled: boolean;
    /**
     * Value for the button title attribute.
     */
    dragHandle: string;
    /**
     * Made into a prop for testing purposes only.
     *
     * @internal
     */
    messages: HandleMessages;
    /**
     *
     *
     * @internal
     */
    setPosition: number;
    /**
     *
     *
     * @internal
     */
    setSize: number;
    /**
     *
     *
     * @internal
     */
    label: string;
    /**
     * When `true`, disables unselecting the component when blurred.
     *
     * @internal
     */
    blurUnselectDisabled: boolean;
    /**
     * Use this property to override individual strings used by the component.
     */
    messageOverrides: Partial<HandleMessages>;
    onMessagesChange(): void;
    connectedCallback(): void;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): void;
    componentDidRender(): void;
    disconnectedCallback(): void;
    el: HTMLCalciteHandleElement;
    handleButton: HTMLElement;
    effectiveLocale: string;
    defaultMessages: HandleMessages;
    effectiveLocaleChange(): void;
    /**
     * Fires whenever the component is selected or unselected.
     *
     */
    calciteHandleChange: EventEmitter<void>;
    /**
     * Fires when the handle is selected and the up or down arrow key is pressed.
     */
    calciteHandleNudge: EventEmitter<HandleNudge>;
    /**
     * Fires when the assistive text has changed.
     * @internal
     */
    calciteInternalAssistiveTextChange: EventEmitter<HandleChange>;
    /** Sets focus on the component. */
    setFocus(): Promise<void>;
    private getTooltip;
    getAriaText(type: "label" | "live"): string;
    handleKeyDown: (event: KeyboardEvent) => void;
    handleBlur: () => void;
    render(): VNode;
}
