import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { LabelableComponent } from "../../utils/label";
import { InteractiveComponent } from "../../utils/interactive";
import { LocalizedComponent, SupportedLocale } from "../../utils/locale";
import { TimeZoneMode } from "./interfaces";
import { Scale, Status } from "../interfaces";
import { T9nComponent } from "../../utils/t9n";
import { InputTimeZoneMessages } from "./assets/input-time-zone/t9n";
import { OverlayPositioning } from "../../utils/floating-ui";
import { LoadableComponent } from "../../utils/loadable";
import { FormComponent } from "../../utils/form";
export declare class InputTimeZone implements FormComponent, InteractiveComponent, LabelableComponent, LoadableComponent, LocalizedComponent, T9nComponent {
    /**
     * When `true`, interaction is prevented and the component is displayed with lower opacity.
     */
    disabled: boolean;
    /**
     * The `id` of the form that will be associated with the component.
     *
     * When not set, the component will be associated with its ancestor form element, if any.
     */
    form: string;
    /** Specifies the component's maximum number of options to display before displaying a scrollbar. */
    maxItems: number;
    /**
     * Made into a prop for testing purposes only
     *
     * @internal
     */
    messages: InputTimeZoneMessages;
    /**
     * Use this property to override individual strings used by the component.
     */
    messageOverrides: Partial<InputTimeZoneMessages>;
    onMessagesChange(): void;
    /**
     * This specifies the type of `value` and the associated options presented to the user:
     *
     * Using `"offset"` will provide options that show timezone offsets.
     *
     * Using `"name"` will provide options that show the IANA time zone names.
     *
     * @default "offset"
     */
    mode: TimeZoneMode;
    handleTimeZoneItemPropsChange(): void;
    /** Specifies the validation message to display under the component. */
    validationMessage: string;
    /** Specifies the validation icon to display under the component. */
    validationIcon: string | boolean;
    /**
     * Specifies the name of the component.
     *
     * Required to pass the component's `value` on form submission.
     */
    name: string;
    /** When `true`, displays and positions the component. */
    open: boolean;
    /**
     * Determines the type of positioning to use for the overlaid content.
     *
     * Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.
     *
     * `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
     *
     */
    overlayPositioning: OverlayPositioning;
    /**
     * This `date` will be used as a reference to Daylight Savings Time when creating time zone item groups.
     *
     * It can be either a Date instance or a string in ISO format (`"YYYY-MM-DD"`, `"YYYY-MM-DDTHH:MM:SS.SSSZ"`).
     *
     * @see [Date.prototype.toISOString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
     */
    referenceDate: Date | string;
    /**
     * When `true`, the component must have a value in order for the form to submit.
     *
     * @internal
     */
    required: boolean;
    /** Specifies the size of the component. */
    scale: Scale;
    /** Specifies the status of the input field, which determines message and icons. */
    status: Status;
    /**
     * The component's value, where the value is the time zone offset or the difference, in minutes, between the selected time zone and UTC.
     *
     * If no value is provided, the user's time zone offset will be selected by default.
     *
     * @see https://www.w3.org/International/core/2005/09/timezone.html#:~:text=What%20is%20a%20%22zone%20offset,or%20%22%2D%22%20from%20UTC.
     */
    value: string;
    handleValueChange(value: string, oldValue: string): void;
    setFocus(): Promise<void>;
    /**
     * Fires when the component is requested to be closed and before the closing transition begins.
     */
    calciteInputTimeZoneBeforeClose: EventEmitter<void>;
    /**
     * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.
     */
    calciteInputTimeZoneBeforeOpen: EventEmitter<void>;
    /**
     * Fires when the component's `value` changes.
     */
    calciteInputTimeZoneChange: EventEmitter<void>;
    /**
     * Fires after the component is closed and animation is complete.
     */
    calciteInputTimeZoneClose: EventEmitter<void>;
    /**
     * Fires after the component is opened and animation is complete.
     */
    calciteInputTimeZoneOpen: EventEmitter<void>;
    el: HTMLCalciteInputTimeZoneElement;
    private comboboxEl;
    defaultMessages: InputTimeZoneMessages;
    defaultValue: InputTimeZone["value"];
    effectiveLocale: SupportedLocale;
    effectiveLocaleWatcher(): void;
    formEl: HTMLFormElement;
    labelEl: HTMLCalciteLabelElement;
    private selectedTimeZoneItem;
    private timeZoneItems;
    onLabelClick(): void;
    private setComboboxRef;
    private onComboboxBeforeClose;
    private onComboboxBeforeOpen;
    private onComboboxChange;
    private onComboboxClose;
    private onComboboxOpen;
    private findTimeZoneItem;
    private updateTimeZoneItemsAndSelection;
    private createTimeZoneItems;
    connectedCallback(): void;
    disconnectedCallback(): void;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): void;
    componentDidRender(): void;
    render(): VNode;
}
