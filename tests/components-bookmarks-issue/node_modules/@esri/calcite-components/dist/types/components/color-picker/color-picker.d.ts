import { EventEmitter, VNode } from "../../stencil-public-runtime";
import Color from "color";
import { Channels, ColorMode, ColorValue, InternalColor } from "./interfaces";
import { Scale } from "../interfaces";
import { Format } from "./utils";
import { InteractiveComponent } from "../../utils/interactive";
import { LoadableComponent } from "../../utils/loadable";
import { LocalizedComponent, NumberingSystem } from "../../utils/locale";
import { T9nComponent } from "../../utils/t9n";
import { ColorPickerMessages } from "./assets/color-picker/t9n";
export declare class ColorPicker implements InteractiveComponent, LoadableComponent, LocalizedComponent, T9nComponent {
    /**
     * When `true`, an empty color (`null`) will be allowed as a `value`.
     *
     * When `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.
     */
    allowEmpty: boolean;
    /**
     * When `true`, the component will allow updates to the color's alpha value.
     */
    alphaChannel: boolean;
    handleAlphaChannelChange(alphaChannel: boolean): void;
    /** When `true`, hides the RGB/HSV channel inputs. */
    channelsDisabled: boolean;
    /**
     * Internal prop for advanced use-cases.
     *
     * @internal
     */
    color: InternalColor | null;
    handleColorChange(color: Color | null, oldColor: Color | null): void;
    /**
     * When `true`, interaction is prevented and the component is displayed with lower opacity.
     */
    disabled: boolean;
    /**
     * The format of `value`.
     *
     * When `"auto"`, the format will be inferred from `value` when set.
     *
     * @default "auto"
     */
    format: Format;
    handleFormatOrAlphaChannelChange(): void;
    /**
     * When `true`, hides the RGB/HSV channel inputs.
     *
     * @deprecated use `channelsDisabled` instead
     */
    hideChannels: boolean;
    /** When `true`, hides the hex input. */
    hexDisabled: boolean;
    /**
     * When `true`, hides the hex input.
     *
     * @deprecated use `hexDisabled` instead
     */
    hideHex: boolean;
    /**
     * When `true`, hides the saved colors section.
     *
     * @deprecated use `savedDisabled` instead
     */
    hideSaved: boolean;
    /** When `true`, hides the saved colors section. */
    savedDisabled: boolean;
    /** Specifies the size of the component. */
    scale: Scale;
    handleScaleChange(scale?: Scale): void;
    /** Specifies the storage ID for colors. */
    storageId: string;
    /**
     * Use this property to override individual strings used by the component.
     */
    messageOverrides: Partial<ColorPickerMessages>;
    onMessagesChange(): void;
    /** Specifies the Unicode numeral system used by the component for localization. */
    numberingSystem: NumberingSystem;
    /**
     * The component's value, where the value can be a CSS color string, or a RGB, HSL or HSV object.
     *
     * The type will be preserved as the color is updated.
     *
     * @default "#007ac2"
     * @see [CSS Color](https://developer.mozilla.org/en-US/docs/Web/CSS/color)
     * @see [ColorValue](https://github.com/Esri/calcite-design-system/blob/main/src/components/color-picker/interfaces.ts#L10)
     */
    value: ColorValue | null;
    handleValueChange(value: ColorValue | null, oldValue: ColorValue | null): void;
    el: HTMLCalciteColorPickerElement;
    private activeCanvasInfo;
    private get baseColorFieldColor();
    private checkerPattern;
    private colorFieldRenderingContext;
    private colorFieldScopeNode;
    private hueSliderRenderingContext;
    private hueScopeNode;
    private internalColorUpdateContext;
    private mode;
    private opacityScopeNode;
    private opacitySliderRenderingContext;
    private previousColor;
    private shiftKeyChannelAdjustment;
    defaultMessages: ColorPickerMessages;
    channelMode: ColorMode;
    channels: Channels;
    dimensions: {
        slider: {
            height: number;
            width: number;
        };
        colorField: {
            height: number;
            width: number;
        };
        thumb: {
            radius: number;
        };
    };
    effectiveLocale: string;
    effectiveLocaleChange(): void;
    /**
     * Made into a prop for testing purposes only
     *
     * @internal
     */
    messages: ColorPickerMessages;
    savedColors: string[];
    colorFieldScopeTop: number;
    colorFieldScopeLeft: number;
    hueScopeLeft: number;
    opacityScopeLeft: number;
    scopeOrientation: "vertical" | "horizontal";
    /**
     * Fires when the color value has changed.
     */
    calciteColorPickerChange: EventEmitter<void>;
    /**
     * Fires as the color value changes.
     *
     * Similar to the `calciteColorPickerChange` event with the exception of dragging. When dragging the color field or hue slider thumb, this event fires as the thumb is moved.
     */
    calciteColorPickerInput: EventEmitter<void>;
    private handleTabActivate;
    private handleColorFieldScopeKeyDown;
    private handleHueScopeKeyDown;
    private handleHexInputChange;
    private handleSavedColorSelect;
    private handleChannelInput;
    protected handleChannelKeyUpOrDown(event: KeyboardEvent): void;
    private handleChannelChange;
    private handleSavedColorKeyDown;
    private handleColorFieldPointerDown;
    private handleHueSliderPointerDown;
    private handleOpacitySliderPointerDown;
    private globalPointerUpHandler;
    private globalPointerMoveHandler;
    /** Sets focus on the component's first focusable element. */
    setFocus(): Promise<void>;
    componentWillLoad(): Promise<void>;
    connectedCallback(): void;
    componentDidLoad(): void;
    disconnectedCallback(): void;
    componentDidRender(): void;
    render(): VNode;
    private storeColorFieldScope;
    private storeHueScope;
    private renderChannelsTabTitle;
    private renderChannelsTab;
    private renderChannel;
    handleKeyDown(event: KeyboardEvent): void;
    private showIncompatibleColorWarning;
    private setMode;
    private ensureCompatibleMode;
    private captureHueSliderColor;
    private captureOpacitySliderValue;
    private internalColorSet;
    private toValue;
    private getSliderCapSpacing;
    private updateDimensions;
    private deleteColor;
    private saveColor;
    private drawColorControls;
    private drawColorField;
    private setCanvasContextSize;
    private captureColorFieldColor;
    private initColorField;
    private initHueSlider;
    private initOpacitySlider;
    private updateCanvasSize;
    private drawActiveColorFieldColor;
    private drawThumb;
    private drawActiveHueSliderColor;
    private drawHueSlider;
    private drawOpacitySlider;
    private drawSliderPath;
    private getCheckeredBackgroundPattern;
    private drawActiveOpacitySliderColor;
    private getSliderBoundX;
    private storeOpacityScope;
    private handleOpacityScopeKeyDown;
    private updateColorFromChannels;
    private updateChannelsFromColor;
    private toChannels;
    private getAdjustedScopePosition;
}
