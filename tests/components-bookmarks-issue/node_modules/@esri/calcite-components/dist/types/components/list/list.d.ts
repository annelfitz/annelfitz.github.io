import { EventEmitter, VNode } from "../../stencil-public-runtime";
import Sortable from "sortablejs";
import { InteractiveComponent } from "../../utils/interactive";
import { SelectionMode } from "../interfaces";
import { ItemData } from "../list-item/interfaces";
import { SelectionAppearance } from "./resources";
import { SortableComponent } from "../../utils/sortableComponent";
import { LoadableComponent } from "../../utils/loadable";
import { HandleNudge } from "../handle/interfaces";
import { T9nComponent } from "../../utils/t9n";
import { ListMessages } from "./assets/list/t9n";
import { NumberingSystem } from "../../utils/locale";
import { ListDragDetail } from "./interfaces";
/**
 * A general purpose list that enables users to construct list items that conform to Calcite styling.
 *
 * @slot - A slot for adding `calcite-list-item` elements.
 * @slot filter-actions-start - A slot for adding actionable `calcite-action` elements before the filter component.
 * @slot filter-actions-end - A slot for adding actionable `calcite-action` elements after the filter component.
 */
export declare class List implements InteractiveComponent, LoadableComponent, SortableComponent, T9nComponent {
    /**
     * When `true`, interaction is prevented and the component is displayed with lower opacity.
     */
    disabled: boolean;
    /**
     * When provided, the method will be called to determine whether the element can  move from the list.
     */
    canPull: (detail: ListDragDetail) => boolean;
    /**
     * When provided, the method will be called to determine whether the element can be added from another list.
     */
    canPut: (detail: ListDragDetail) => boolean;
    /**
     * When `true`, `calcite-list-item`s are sortable via a draggable button.
     */
    dragEnabled: boolean;
    /**
     * The list's group identifier.
     *
     * To drag elements from one list into another, both lists must have the same group value.
     */
    group?: string;
    /**
     * When `true`, an input appears at the top of the component that can be used by end users to filter `calcite-list-item`s.
     */
    filterEnabled: boolean;
    /**
     * The currently filtered `calcite-list-item`s.
     *
     * @readonly
     */
    filteredItems: HTMLCalciteListItemElement[];
    /**
     * The currently filtered `calcite-list-item` data.
     *
     * @readonly
     */
    filteredData: ItemData;
    /**
     * Placeholder text for the component's filter input field.
     */
    filterPlaceholder: string;
    /**
     * Text for the component's filter input field.
     */
    filterText: string;
    handleFilterTextChange(): Promise<void>;
    /**
     * Specifies an accessible name for the component.
     */
    label: string;
    /**
     * When `true`, a busy indicator is displayed.
     */
    loading: boolean;
    /**
     * Use this property to override individual strings used by the component.
     */
    messageOverrides: Partial<ListMessages>;
    /**
     * Made into a prop for testing purposes only
     *
     * @internal
     */
    messages: ListMessages;
    onMessagesChange(): void;
    /**
     * Specifies the Unicode numeral system used by the component for localization.
     */
    numberingSystem: NumberingSystem;
    /**
     * One of the items within the list can be opened.
     *
     * @internal
     */
    openable: boolean;
    /**
     * The currently selected items.
     *
     * @readonly
     */
    selectedItems: HTMLCalciteListItemElement[];
    /**
     * Specifies the selection mode of the component, where:
     *
     * `"multiple"` allows any number of selections,
     *
     * `"single"` allows only one selection,
     *
     * `"single-persist"` allows one selection and prevents de-selection, and
     *
     * `"none"` does not allow any selections.
     */
    selectionMode: Extract<"none" | "multiple" | "single" | "single-persist", SelectionMode>;
    /**
     * Specifies the selection appearance - `"icon"` (displays a checkmark or dot) or `"border"` (displays a border).
     */
    selectionAppearance: SelectionAppearance;
    handleListItemChange(): void;
    /**
     * Fires when the component's selected items have changed.
     */
    calciteListChange: EventEmitter<void>;
    /**
     * Fires when the component's dragging has ended.
     */
    calciteListDragEnd: EventEmitter<ListDragDetail>;
    /**
     * Fires when the component's dragging has started.
     */
    calciteListDragStart: EventEmitter<ListDragDetail>;
    /**
     * Fires when the component's filter has changed.
     */
    calciteListFilter: EventEmitter<void>;
    /**
     * Fires when the component's item order changes.
     */
    calciteListOrderChange: EventEmitter<ListDragDetail>;
    /**
     * Fires when the default slot has changes in order to notify parent lists.
     */
    calciteInternalListDefaultSlotChange: EventEmitter<void>;
    handleCalciteInternalFocusPreviousItem(event: CustomEvent): void;
    handleCalciteInternalListItemActive(event: CustomEvent): void;
    handleCalciteListItemSelect(): void;
    handleCalciteInternalAssistiveTextChange(event: CustomEvent): void;
    handleCalciteHandleNudge(event: CustomEvent<HandleNudge>): void;
    handleCalciteInternalListItemSelect(event: CustomEvent): void;
    handleCalciteInternalListItemSelectMultiple(event: CustomEvent<{
        selectMultiple: boolean;
    }>): void;
    handleCalciteInternalListItemChange(event: CustomEvent): void;
    handleCalciteInternalListItemGroupDefaultSlotChange(event: CustomEvent): void;
    connectedCallback(): void;
    componentWillLoad(): Promise<void>;
    componentDidRender(): void;
    componentDidLoad(): void;
    disconnectedCallback(): void;
    effectiveLocale: string;
    effectiveLocaleChange(): void;
    defaultMessages: ListMessages;
    el: HTMLCalciteListElement;
    assistiveText: string;
    dataForFilter: ItemData;
    dragSelector: string;
    filterEl: HTMLCalciteFilterElement;
    focusableItems: HTMLCalciteListItemElement[];
    handleSelector: string;
    hasFilterActionsEnd: boolean;
    hasFilterActionsStart: boolean;
    hasFilterNoResults: boolean;
    listItems: HTMLCalciteListItemElement[];
    mutationObserver: import("../../utils/observers").ExtendedMutationObserver;
    visibleItems: HTMLCalciteListItemElement[];
    parentListEl: HTMLCalciteListElement;
    sortable: Sortable;
    private ancestorOfFirstFilteredItem;
    private lastSelectedInfo;
    /**
     * Sets focus on the component's first focusable element.
     *
     * @returns {Promise<void>}
     */
    setFocus(): Promise<void>;
    render(): VNode;
    private renderItemAriaLive;
    private connectObserver;
    private disconnectObserver;
    private setUpSorting;
    onGlobalDragStart(): void;
    onGlobalDragEnd(): void;
    onDragEnd(detail: ListDragDetail): void;
    onDragStart(detail: ListDragDetail): void;
    onDragSort(detail: ListDragDetail): void;
    private setParentList;
    private handleDefaultSlotChange;
    private handleFilterActionsStartSlotChange;
    private handleFilterActionsEndSlotChange;
    private handleFilterNoResultsSlotChange;
    private setActiveListItem;
    private updateSelectedItems;
    private filterElements;
    private updateFilteredItems;
    private updateFilteredData;
    private performFilter;
    private setFilterEl;
    private handleFilterChange;
    private getItemData;
    private updateListItems;
    private queryListItems;
    private focusRow;
    private isNavigable;
    private handleListKeydown;
    private findAncestorOfFirstFilteredItem;
    private getTopLevelAncestorItemElement;
    handleNudgeEvent(event: CustomEvent<HandleNudge>): void;
}
