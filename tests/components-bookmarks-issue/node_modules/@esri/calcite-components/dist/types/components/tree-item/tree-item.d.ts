import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { ConditionalSlotComponent } from "../../utils/conditionalSlot";
import { InteractiveComponent } from "../../utils/interactive";
import { FlipContext, Scale, SelectionMode } from "../interfaces";
import { TreeItemSelectDetail } from "./interfaces";
/**
 * @slot - A slot for adding text.
 * @slot children - A slot for adding nested `calcite-tree` elements.
 * @slot actions-end - A slot for adding actions to the end of the component. It is recommended to use two or fewer actions.
 */
export declare class TreeItem implements ConditionalSlotComponent, InteractiveComponent {
    /**
     * When `true`, interaction is prevented and the component is displayed with lower opacity.
     */
    disabled: boolean;
    /** When `true`, the component is expanded. */
    expanded: boolean;
    expandedHandler(newValue: boolean): void;
    /** When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`). */
    iconFlipRtl: FlipContext;
    /** Specifies an icon to display at the start of the component. */
    iconStart: string;
    /** When `true`, the component is selected. */
    selected: boolean;
    handleSelectedChange(value: boolean): void;
    /**
     * @internal
     */
    parentExpanded: boolean;
    /**
     * @internal
     */
    depth: number;
    /**
     * @internal
     */
    hasChildren: boolean;
    /**
     * @internal
     */
    lines: boolean;
    /**
     * @internal
     */
    scale: Scale;
    /**
     * In ancestor selection mode, show as indeterminate when only some children are selected.
     *
     * @internal
     */
    indeterminate: boolean;
    /**
     * @internal
     */
    selectionMode: SelectionMode;
    getSelectionMode(): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    componentWillRender(): void;
    componentWillLoad(): void;
    componentDidLoad(): void;
    componentDidRender(): void;
    el: HTMLCalciteTreeItemElement;
    private isSelectionMultiLike;
    render(): VNode;
    onClick(event: Event): void;
    private iconClickHandler;
    private childrenClickHandler;
    keyDownHandler(event: KeyboardEvent): void;
    /**
     * @internal
     */
    calciteInternalTreeItemSelect: EventEmitter<TreeItemSelectDetail>;
    hasEndActions: boolean;
    /**
     * Used to make sure initially expanded tree-item can properly
     * transition and emit events from closed state when rendered.
     *
     * @private
     */
    updateAfterInitialRender: boolean;
    actionSlotWrapper: HTMLElement;
    childrenSlotWrapper: HTMLElement;
    defaultSlotWrapper: HTMLElement;
    private parentTreeItem?;
    private userChangedValue;
    private isActionEndEvent;
    private updateParentIsExpanded;
    /**
     * This is meant to be called in `componentDidLoad` in order to take advantage of the hierarchical component lifecycle
     * and help check for item selection as items are initialized
     *
     * @private
     */
    private updateAncestorTree;
    private actionsEndSlotChangeHandler;
}
