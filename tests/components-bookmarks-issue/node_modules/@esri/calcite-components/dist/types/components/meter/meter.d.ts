import { VNode } from "../../stencil-public-runtime";
import { Appearance, Scale } from "../interfaces";
import { LoadableComponent } from "../../utils/loadable";
import { FormComponent } from "../../utils/form";
import { LocalizedComponent, NumberingSystem } from "../../utils/locale";
import { MeterLabelType } from "./interfaces";
export declare class Meter implements FormComponent, LoadableComponent, LocalizedComponent {
    /** Specifies the appearance style of the component. */
    appearance: Extract<"outline" | "outline-fill" | "solid", Appearance>;
    /** When `true`, interaction is prevented and the component is displayed with lower opacity. */
    disabled: boolean;
    /** Specifies the component's display, where `"single"` displays a single color and `"range"` displays a range of colors based on provided `low`, `high`, `min` or `max` values. */
    fillType: "single" | "range";
    /**
     * The `id` of the form that will be associated with the component.
     *
     * When not set, the component will be associated with its ancestor form element, if any.
     */
    form: string;
    /** When `true`, number values are displayed with a group separator corresponding to the language and country format. */
    groupSeparator: boolean;
    /** Specifies a high value.  When `fillType` is `"range"`, displays a different color when above the specified threshold.  */
    high: number;
    /**  Accessible name for the component. */
    label: string;
    /** Specifies a low value.  When `fillType` is `"range"`, displays a different color when above the specified threshold.  */
    low: number;
    /** Specifies the highest allowed value of the component. */
    max: number;
    /** Specifies the lowest allowed value of the component. */
    min: number;
    handleRangeChange(): void;
    /**
     * Specifies the name of the component.
     *
     * Required to pass the component's `value` on form submission.
     */
    name: string;
    /** Specifies the Unicode numeral system used by the component for localization. */
    numberingSystem: NumberingSystem;
    /** When `true`, displays the values of `high`, `low`, `min`, and `max`. */
    rangeLabels: boolean;
    /** When `rangeLabels` is `true`, specifies the format of displayed labels. */
    rangeLabelType: MeterLabelType;
    /** Specifies the size of the component. */
    scale: Scale;
    /** When `rangeLabelType` is `"units"` and either `valueLabel` or `rangeLabels` are `true`, displays beside the `value` and/or  `min` values. */
    unitLabel: string;
    /** Specifies the current value of the component. */
    value: number;
    /** When `true`, displays the current value. */
    valueLabel: boolean;
    /** When `valueLabel` is `true`, specifies the format of displayed label. */
    valueLabelType: MeterLabelType;
    handleLabelChange(): void;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    el: HTMLCalciteMeterElement;
    defaultValue: Meter["value"];
    formEl: HTMLFormElement;
    labelEl: HTMLCalciteLabelElement;
    private highLabelEl;
    private labelFlipMax;
    private labelFlipProximity;
    private lowLabelEl;
    private maxLabelEl;
    private maxPercent;
    private meterContainerEl;
    private minLabelEl;
    private minPercent;
    private percentFormatting;
    private resizeObserver;
    private valueLabelEl;
    currentPercent: number;
    effectiveLocale: string;
    highActive: boolean;
    highPercent: number;
    lowActive: boolean;
    lowPercent: number;
    private resizeHandler;
    private updateLabels;
    private calculateValues;
    private formatLabel;
    private getMeterKindCssClass;
    private intersects;
    private determineVisibleLabels;
    private determineValueLabelPosition;
    renderMeterFill(): VNode;
    renderRangeLine(position: number): VNode;
    renderValueLabel(): VNode;
    renderMinLabel(): VNode;
    renderLowLabel(): VNode;
    renderHighLabel(): VNode;
    renderMaxLabel(): VNode;
    render(): VNode;
}
