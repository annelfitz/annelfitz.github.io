import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { FocusTrap, FocusTrapComponent } from "../../utils/focusTrapComponent";
import { LoadableComponent } from "../../utils/loadable";
import { OpenCloseComponent } from "../../utils/openCloseComponent";
import { DisplayMode } from "./interfaces";
import { LogicalFlowPosition, Scale } from "../interfaces";
export declare class Sheet implements OpenCloseComponent, FocusTrapComponent, LoadableComponent {
    /**
     *  Passes a function to run before the component closes.
     *
     * @returns {Promise<void>}
     */
    beforeClose: (el: HTMLCalciteSheetElement) => Promise<void>;
    /**
     * Specifies the display mode - `"float"` (content is separated detached),
     * or `"overlay"` (displays on top of center content).
     */
    displayMode: DisplayMode;
    /** When `true`, disables the default close on escape behavior. */
    escapeDisabled: boolean;
    /**
     * When `position` is `"block-start"` or `"block-end"`, specifies the height of the component.
     */
    heightScale: Scale;
    /**
     * When `true`, prevents focus trapping.
     */
    focusTrapDisabled: boolean;
    handleFocusTrapDisabled(focusTrapDisabled: boolean): void;
    /**
     * Specifies the label of the component.
     */
    label: string;
    /** When `true`, displays and positions the component.  */
    open: boolean;
    toggleSheet(value: boolean): void;
    handleOpenedChange(): void;
    /**
     * We use an internal property to handle styles for when a modal is actually opened, not just when the open attribute is applied. This is a property because we need to apply styles to the host element and to keep the styles present while beforeClose is .
     *
     * @internal.
     */
    opened: boolean;
    /** When `true`, disables the closing of the component when clicked outside. */
    outsideCloseDisabled: boolean;
    /** Determines where the component will be positioned. */
    position: LogicalFlowPosition;
    /**
     * This internal property, managed by a containing calcite-shell, is used
     * to inform the component if special configuration or styles are needed
     *
     * @internal
     */
    slottedInShell: boolean;
    /**
     * When `position` is `"inline-start"` or `"inline-end"`, specifies the width of the component.
     */
    widthScale: Scale;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    render(): VNode;
    openTransitionProp: string;
    transitionEl: HTMLDivElement;
    focusTrap: FocusTrap;
    el: HTMLCalciteSheetElement;
    private contentId;
    private initialOverflowCSS;
    private ignoreOpenChange;
    private mutationObserver;
    handleEscape(event: KeyboardEvent): void;
    /** Fires when the component is requested to be closed and before the closing transition begins. */
    calciteSheetBeforeClose: EventEmitter<void>;
    /** Fires when the component is closed and animation is complete. */
    calciteSheetClose: EventEmitter<void>;
    /** Fires when the component is added to the DOM but not rendered, and before the opening transition begins. */
    calciteSheetBeforeOpen: EventEmitter<void>;
    /** Fires when the component is open and animation is complete. */
    calciteSheetOpen: EventEmitter<void>;
    /**
     * Sets focus on the component's "close" button - the first focusable item.
     *
     */
    setFocus(): Promise<void>;
    /**
     * Updates the element(s) that are used within the focus-trap of the component.
     */
    updateFocusTrapElements(): Promise<void>;
    onBeforeOpen(): void;
    onOpen(): void;
    onBeforeClose(): void;
    onClose(): void;
    private setTransitionEl;
    private openEnd;
    private openSheet;
    private handleOutsideClose;
    private closeSheet;
    private removeOverflowHiddenClass;
    private handleMutationObserver;
}
