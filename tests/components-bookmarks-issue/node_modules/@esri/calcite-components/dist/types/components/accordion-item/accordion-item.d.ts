import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { ConditionalSlotComponent } from "../../utils/conditionalSlot";
import { FlipContext, Position, Scale } from "../interfaces";
import { RequestedItem } from "./interfaces";
/**
 * @slot - A slot for adding custom content, including nested `calcite-accordion-item`s.
 * @slot actions-end - A slot for adding `calcite-action`s or content to the end side of the component's header.
 * @slot actions-start - A slot for adding `calcite-action`s or content to the start side of the component's header.
 */
export declare class AccordionItem implements ConditionalSlotComponent {
    /** When `true`, the component is expanded. */
    expanded: boolean;
    /** Specifies heading text for the component. */
    heading: string;
    /** Specifies a description for the component. */
    description: string;
    /** Specifies an icon to display at the start of the component. */
    iconStart: string;
    /** Specifies an icon to display at the end of the component. */
    iconEnd: string;
    /** Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`). */
    iconFlipRtl: FlipContext;
    /**
     * Specifies the placement of the icon in the header inherited from the `calcite-accordion`.
     *
     * @internal
     */
    iconPosition: Position;
    /** Specifies the type of the icon in the header inherited from the `calcite-accordion`.
     *
     * @internal
     */
    iconType: "chevron" | "caret" | "plus-minus";
    /**
     * The containing `accordion` element.
     *
     * @internal
     */
    accordionParent: HTMLCalciteAccordionElement;
    /**
     * Specifies the size of the component inherited from the `calcite-accordion`.
     *
     * @internal
     */
    scale: Scale;
    /**
     * @internal
     */
    calciteInternalAccordionItemSelect: EventEmitter<RequestedItem>;
    /**
     * @internal
     */
    calciteInternalAccordionItemClose: EventEmitter<void>;
    connectedCallback(): void;
    disconnectedCallback(): void;
    renderActionsStart(): VNode;
    renderActionsEnd(): VNode;
    render(): VNode;
    keyDownHandler(event: KeyboardEvent): void;
    updateActiveItemOnChange(event: CustomEvent): void;
    accordionItemSyncHandler(event: CustomEvent): void;
    el: HTMLCalciteAccordionItemElement;
    /** handle clicks on item header */
    private itemHeaderClickHandler;
    private determineActiveItem;
    private emitRequestedItem;
}
