import { VNode, EventEmitter } from "../../stencil-public-runtime";
import { InteractiveComponent } from "../../utils/interactive";
import { Scale, SelectionMode } from "../interfaces";
/**
 * @slot - A slot for adding one or more `calcite-chip`s.
 */
export declare class ChipGroup implements InteractiveComponent {
    /** When `true`, interaction is prevented and the component is displayed with lower opacity. */
    disabled: boolean;
    /** Accessible name for the component. */
    label: string;
    /** Specifies the size of the component. Child `calcite-chip`s inherit the component's value. */
    scale: Scale;
    /**
     * Specifies the selection mode of the component, where:
     *
     * `"multiple"` allows any number of selections,
     *
     * `"single"` allows only one selection,
     *
     * `"single-persist"` allows one selection and prevents de-selection, and
     *
     * `"none"` does not allow any selections.
     */
    selectionMode: Extract<"multiple" | "single" | "single-persist" | "none", SelectionMode>;
    onSelectionModeChange(): void;
    /**
     * Specifies the component's selected items.
     *
     * @readonly
     */
    selectedItems: HTMLCalciteChipElement[];
    el: HTMLCalciteChipGroupElement;
    mutationObserver: import("../../utils/observers").ExtendedMutationObserver;
    private items;
    private slotRefEl;
    /** Fires when the component's selection changes. */
    calciteChipGroupSelect: EventEmitter<void>;
    connectedCallback(): void;
    componentDidRender(): void;
    componentDidLoad(): void;
    disconnectedCallback(): void;
    componentWillLoad(): Promise<void>;
    calciteInternalChipKeyEventListener(event: CustomEvent): void;
    calciteChipCloseListener(event: CustomEvent): void;
    calciteChipSelectListener(event: CustomEvent): void;
    /**
     * Sets focus on the component's first focusable element.
     */
    setFocus(): Promise<void>;
    private updateItems;
    private setSelectedItems;
    render(): VNode;
}
