import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { Scale } from "../interfaces";
import { LocalizedComponent, NumberingSystem } from "../../utils/locale";
import { T9nComponent } from "../../utils/t9n";
import { HourCycle, Meridiem } from "../../utils/time";
import { TimePickerMessages } from "./assets/time-picker/t9n";
import { LoadableComponent } from "../../utils/loadable";
export declare class TimePicker implements LocalizedComponent, LoadableComponent, LocalizedComponent, T9nComponent {
    /** Specifies the size of the component. */
    scale: Scale;
    /** Specifies the granularity the `value` must adhere to (in seconds). */
    step: number;
    stepChange(): void;
    /**
     * Specifies the Unicode numeral system used by the component for localization.
     *
     */
    numberingSystem: NumberingSystem;
    /** The component's value in UTC (always 24-hour format). */
    value: string;
    valueWatcher(newValue: string): void;
    /**
     * Made into a prop for testing purposes only
     *
     * @internal
     */
    messages: TimePickerMessages;
    /**
     * Use this property to override individual strings used by the component.
     */
    messageOverrides: Partial<TimePickerMessages>;
    onMessagesChange(): void;
    el: HTMLCalciteTimePickerElement;
    private fractionalSecondEl;
    private hourEl;
    private meridiemEl;
    private meridiemOrder;
    private minuteEl;
    private pointerActivated;
    private secondEl;
    activeEl: HTMLSpanElement;
    effectiveLocale: string;
    effectiveLocaleWatcher(): void;
    fractionalSecond: string;
    hour: string;
    hourCycle: HourCycle;
    localizedDecimalSeparator: string;
    localizedHour: string;
    localizedHourSuffix: string;
    localizedMeridiem: string;
    localizedFractionalSecond: string;
    localizedMinute: string;
    localizedMinuteSuffix: string;
    localizedSecond: string;
    localizedSecondSuffix: string;
    meridiem: Meridiem;
    minute: string;
    second: string;
    showFractionalSecond: boolean;
    showSecond: boolean;
    defaultMessages: TimePickerMessages;
    /**
     * @internal
     */
    calciteInternalTimePickerBlur: EventEmitter<void>;
    /**
     * @internal
     */
    calciteInternalTimePickerChange: EventEmitter<string>;
    /**
     * @internal
     */
    calciteInternalTimePickerFocus: EventEmitter<void>;
    blurHandler(): void;
    hostFocusHandler(): void;
    keyDownHandler(event: KeyboardEvent): void;
    pointerDownHandler(): void;
    /**
     * Sets focus on the component's first focusable element.
     */
    setFocus(): Promise<void>;
    private focusPart;
    private decrementHour;
    private decrementMeridiem;
    private decrementMinuteOrSecond;
    private decrementMinute;
    private decrementSecond;
    private focusHandler;
    private fractionalSecondKeyDownHandler;
    private fractionalSecondDownClickHandler;
    private fractionalSecondUpClickHandler;
    private hourDownClickHandler;
    private hourKeyDownHandler;
    private hourUpClickHandler;
    private incrementMeridiem;
    private incrementHour;
    private incrementMinuteOrSecond;
    private incrementMinute;
    private incrementSecond;
    private inputClickHandler;
    private meridiemUpClickHandler;
    private meridiemKeyDownHandler;
    private meridiemDownClickHandler;
    private minuteDownClickHandler;
    private minuteUpClickHandler;
    private minuteKeyDownHandler;
    private nudgeFractionalSecond;
    private sanitizeValue;
    private sanitizeFractionalSecond;
    private secondKeyDownHandler;
    private secondDownClickHandler;
    private secondUpClickHandler;
    private setHourEl;
    private setMeridiemEl;
    private setMinuteEl;
    private setSecondEl;
    private setFractionalSecondEl;
    private setValue;
    private setValuePart;
    private toggleSecond;
    private getMeridiemOrder;
    private updateLocale;
    connectedCallback(): void;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): void;
    disconnectedCallback(): void;
    render(): VNode;
}
