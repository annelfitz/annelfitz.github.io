import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { Scale, SelectionMode } from "../interfaces";
import { LoadableComponent } from "../../utils/loadable";
import { T9nComponent } from "../../utils/t9n";
import { LocalizedComponent, NumberingSystem } from "../../utils/locale";
import { TableInteractionMode, TableLayout, TableRowFocusEvent } from "./interfaces";
import { TableMessages } from "./assets/table/t9n";
/**
 * @slot - A slot for adding `calcite-table-row` elements containing `calcite-table-cell` and/or `calcite-table-header` elements.
 * @slot table-header - A slot for adding `calcite-table-row` elements containing `calcite-table-header` elements.
 * @slot table-footer - A slot for adding `calcite-table-row` elements containing `calcite-table-cell` and/or `calcite-table-header` elements.
 * @slot selection-actions - A slot for adding a `calcite-action-bar` or other elements to display when `selectionMode` is not `"none"`.
 */
export declare class Table implements LocalizedComponent, LoadableComponent, T9nComponent {
    /** When `true`, displays borders in the component. */
    bordered: boolean;
    /** Specifies an accessible title for the component. */
    caption: string;
    /** When `true`, number values are displayed with a group separator corresponding to the language and country format. */
    groupSeparator: boolean;
    /** When `"interactive"`, allows focus and keyboard navigation of `table-header`s and `table-cell`s.  When `"static"`, prevents focus and keyboard navigation of `table-header`s and `table-cell`s when assistive technologies are not active. Selection affordances and slotted content within `table-cell`s remain focusable. */
    interactionMode: TableInteractionMode;
    /** Specifies the layout of the component. */
    layout: TableLayout;
    /** When `true`, displays the position of the row in numeric form. */
    numbered: boolean;
    /** Specifies the Unicode numeral system used by the component for localization. */
    numberingSystem?: NumberingSystem;
    /** Specifies the page size of the component. When `true`, renders `calcite-pagination`. */
    pageSize: number;
    /** Specifies the size of the component. */
    scale: Scale;
    /**
     * Specifies the selection mode of the component, where:
     *
     * `"multiple"` allows any number of selections,
     *
     * `"single"` allows only one selection, and
     *
     * `"none"` does not allow any selections.
     */
    selectionMode: Extract<"none" | "multiple" | "single", SelectionMode>;
    /**
     * When `true`, displays striped styling in the component.
     *
     * @deprecated Use the `striped` property instead.
     */
    zebra: boolean;
    /** When `true`, displays striped styling in the component. */
    striped: boolean;
    handleNumberedChange(): void;
    /**
     * Specifies the component's selected items.
     *
     * @readonly
     */
    selectedItems: HTMLCalciteTableRowElement[];
    /**
     * Made into a prop for testing purposes only
     *
     * @internal
     */
    messages: TableMessages;
    /**
     * Use this property to override individual strings used by the component.
     */
    messageOverrides: Partial<TableMessages>;
    onMessagesChange(): void;
    el: HTMLCalciteTableElement;
    colCount: number;
    pageStartRow: number;
    selectedCount: number;
    readCellContentsToAT: boolean;
    defaultMessages: TableMessages;
    effectiveLocale: string;
    effectiveLocaleChange(): void;
    private allRows;
    private bodyRows;
    private headRows;
    private footRows;
    private paginationEl;
    private tableBodySlotEl;
    private tableHeadSlotEl;
    private tableFootSlotEl;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    /** Emits when the component's selected rows change. */
    calciteTableSelect: EventEmitter<void>;
    /** Emits when the component's page selection changes. */
    calciteTablePageChange: EventEmitter<void>;
    /** @internal */
    calciteInternalTableRowFocusChange: EventEmitter<TableRowFocusEvent>;
    calciteChipSelectListener(event: CustomEvent): void;
    calciteInternalTableRowFocusEvent(event: TableRowFocusEvent): void;
    private getSlottedRows;
    private updateRows;
    private handlePaginationChange;
    private paginateRows;
    private updateSelectedItems;
    private handleDeselectAllRows;
    private setSelectedItems;
    private localizeNumber;
    renderSelectionArea(): VNode;
    renderPaginationArea(): VNode;
    renderTHead(): VNode;
    renderTBody(): VNode;
    renderTFoot(): VNode;
    render(): VNode;
}
