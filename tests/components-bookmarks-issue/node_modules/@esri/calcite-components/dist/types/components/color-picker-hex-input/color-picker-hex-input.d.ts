import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { Scale } from "../interfaces";
import Color from "color";
import { LoadableComponent } from "../../utils/loadable";
import { NumberingSystem } from "../../utils/locale";
import { ColorPickerMessages } from "../color-picker/assets/color-picker/t9n";
export declare class ColorPickerHexInput implements LoadableComponent {
    connectedCallback(): void;
    componentWillLoad(): void;
    componentDidLoad(): void;
    /**
     * When `true`, an empty color (`null`) will be allowed as a `value`.
     *
     * When `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.
     */
    allowEmpty: boolean;
    /**
     * When `true`, the component will allow updates to the color's alpha value.
     */
    alphaChannel: boolean;
    /**
     * Specifies accessible label for the input field.
     *
     * @deprecated use `messages` instead
     */
    hexLabel: string;
    /**
     * Messages are passed by parent component for accessible labels.
     *
     * @internal
     */
    messages: ColorPickerMessages;
    /** Specifies the Unicode numeral system used by the component for localization. */
    numberingSystem?: NumberingSystem;
    /** Specifies the size of the component. */
    scale: Scale;
    /**
     * The hex value.
     */
    value: string;
    handleValueChange(value: string, oldValue: string): void;
    /**
     * Emitted when the hex value changes.
     */
    calciteColorPickerHexInputChange: EventEmitter<void>;
    private onHexInputBlur;
    private onOpacityInputBlur;
    private onHexInputChange;
    private onOpacityInputChange;
    protected onInputKeyDown: (event: KeyboardEvent) => void;
    private onHexInputPaste;
    el: HTMLCalciteColorPickerHexInputElement;
    private hexInputNode;
    /**
     * The last valid/selected color. Used as a fallback if an invalid hex code is entered.
     */
    internalColor: Color | null;
    private opacityInputNode;
    private previousNonNullValue;
    render(): VNode;
    /** Sets focus on the component. */
    setFocus(): Promise<void>;
    private internalSetValue;
    private storeHexInputRef;
    private storeOpacityInputRef;
    private formatHexForInternalInput;
    private formatOpacityForInternalInput;
    private nudgeRGBChannels;
}
