import { Event, EventEmitter, VNode } from "../../stencil-public-runtime";
import { ConditionalSlotComponent } from "../../utils/conditionalSlot";
import { LoadableComponent } from "../../utils/loadable";
import { LocalizedComponent } from "../../utils/locale";
import { T9nComponent } from "../../utils/t9n";
import { Layout, Position, Scale } from "../interfaces";
import { ActionBarMessages } from "./assets/action-bar/t9n";
import { OverlayPositioning } from "../../utils/floating-ui";
/**
 * @slot - A slot for adding `calcite-action`s that will appear at the top of the component.
 * @slot bottom-actions - [Deprecated] Use the `"actions-end"` slot instead. A slot for adding `calcite-action`s that will appear at the bottom of the component, above the collapse/expand button.
 * @slot actions-end - A slot for adding `calcite-action`s that will appear at the end of the component, prior to the collapse/expand button.
 * @slot expand-tooltip - A slot to set the `calcite-tooltip` for the expand toggle.
 */
export declare class ActionBar implements ConditionalSlotComponent, LoadableComponent, LocalizedComponent, T9nComponent {
    /**
     * Specifies the accessible label for the last `calcite-action-group`.
     */
    actionsEndGroupLabel: string;
    /**
     * When `true`, the expand-toggling behavior is disabled.
     */
    expandDisabled: boolean;
    expandHandler(): void;
    /**
     * When `true`, the component is expanded.
     */
    expanded: boolean;
    expandedHandler(): void;
    /**
     *  Specifies the layout direction of the actions.
     */
    layout: Extract<"horizontal" | "vertical", Layout>;
    layoutHandler(): void;
    /**
     * Disables automatically overflowing `calcite-action`s that won't fit into menus.
     */
    overflowActionsDisabled: boolean;
    overflowDisabledHandler(overflowActionsDisabled: boolean): void;
    /**
     * Determines the type of positioning to use for the overlaid content.
     *
     * Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.
     *
     * `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
     *
     */
    overlayPositioning: OverlayPositioning;
    /**
     * Arranges the component depending on the element's `dir` property.
     */
    position: Position;
    /**
     * Specifies the size of the expand `calcite-action`.
     */
    scale: Scale;
    /**
     * Made into a prop for testing purposes only
     *
     * @internal
     */
    messages: ActionBarMessages;
    /**
     * Use this property to override individual strings used by the component.
     */
    messageOverrides: Partial<ActionBarMessages>;
    onMessagesChange(): void;
    /**
     * Fires when the `expanded` property is toggled.
     */
    calciteActionBarToggle: EventEmitter<void>;
    el: HTMLCalciteActionBarElement;
    mutationObserver: import("../../utils/observers").ExtendedMutationObserver;
    resizeObserver: ResizeObserver;
    expandToggleEl: HTMLCalciteActionElement;
    effectiveLocale: string;
    hasActionsEnd: boolean;
    hasBottomActions: boolean;
    expandTooltip: HTMLCalciteTooltipElement;
    effectiveLocaleChange(): void;
    defaultMessages: ActionBarMessages;
    componentDidLoad(): void;
    connectedCallback(): void;
    componentWillLoad(): Promise<void>;
    disconnectedCallback(): void;
    /**
     * Overflows actions that won't fit into menus.
     *
     * @internal
     */
    overflowActions(): Promise<void>;
    /**
     * Sets focus on the component's first focusable element.
     */
    setFocus(): Promise<void>;
    actionMenuOpenHandler: (event: CustomEvent<void>) => void;
    resizeHandlerEntries: (entries: ResizeObserverEntry[]) => void;
    resizeHandler: (entry: ResizeObserverEntry) => void;
    private resize;
    toggleExpand: () => void;
    setExpandToggleRef: (el: HTMLCalciteActionElement) => void;
    updateGroups(): void;
    setGroupLayout(groups: HTMLCalciteActionGroupElement[]): void;
    handleDefaultSlotChange: (event: Event) => void;
    handleActionsEndSlotChange: (event: Event) => void;
    handleBottomActionsSlotChange: (event: Event) => void;
    handleTooltipSlotChange: (event: Event) => void;
    renderBottomActionGroup(): VNode;
    render(): VNode;
}
