import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { LocalizedComponent } from "../../utils/locale";
import { T9nComponent } from "../../utils/t9n";
import { LoadableComponent } from "../../utils/loadable";
import { LogicalFlowPosition } from "../interfaces";
import { CardMessages } from "./assets/card/t9n";
import { SelectionMode } from "../interfaces";
import { InteractiveComponent } from "../../utils/interactive";
/**
 * @slot - A slot for adding content.
 * @slot title - [Deprecated] use `heading` instead. A slot for adding a heading.
 * @slot subtitle - [Deprecated] use `description` instead. A slot for adding a description.
 * @slot thumbnail - A slot for adding a thumbnail.
 * @slot heading - A slot for adding a heading.
 * @slot description - A slot for adding a description.
 * @slot footer-start - A slot for adding a leading footer.
 * @slot footer-end - A slot for adding a trailing footer.
 */
export declare class Card implements InteractiveComponent, LoadableComponent, LocalizedComponent, T9nComponent {
    /**  When `true`, a busy indicator is displayed. */
    loading: boolean;
    /** Sets the placement of the thumbnail defined in the `thumbnail` slot. */
    thumbnailPosition: LogicalFlowPosition;
    /** When `true`, interaction is prevented and the component is displayed with lower opacity. */
    disabled: boolean;
    /** Accessible name for the component. */
    label: string;
    /**
     * When `true`, the component is selectable.
     *
     * @deprecated use `selectionMode` property on a parent `calcite-card-group` instead.
     */
    selectable: boolean;
    /** When `true`, the component is selected.  */
    selected: boolean;
    /**
     * Made into a prop for testing purposes only
     *
     * @internal
     */
    messages: CardMessages;
    /**
     * This internal property, managed by a containing `calcite-card-group`, is
     * conditionally set based on the `selectionMode` of the parent
     *
     * @internal
     */
    selectionMode: Extract<"multiple" | "single" | "single-persist" | "none", SelectionMode>;
    /**
     * Use this property to override individual strings used by the component.
     */
    messageOverrides: Partial<CardMessages>;
    onMessagesChange(): void;
    /** Fires when the deprecated `selectable` is true, or `selectionMode` set on parent `calcite-card-group` is not `none` and the component is selected. */
    calciteCardSelect: EventEmitter<void>;
    /**
     * @internal
     */
    calciteInternalCardKeyEvent: EventEmitter<KeyboardEvent>;
    /** Sets focus on the component. */
    setFocus(): Promise<void>;
    connectedCallback(): void;
    componentDidLoad(): void;
    componentDidRender(): void;
    disconnectedCallback(): void;
    componentWillLoad(): Promise<void>;
    el: HTMLCalciteCardElement;
    effectiveLocale: string;
    effectiveLocaleChange(): void;
    defaultMessages: CardMessages;
    private hasContent;
    private containerEl;
    private handleDefaultSlotChange;
    private keyDownHandler;
    private cardBodyClickHandler;
    private renderCheckboxDeprecated;
    private cardSelectKeyDownDeprecated;
    private selectCardDeprecated;
    private cardSelectClick;
    private renderThumbnail;
    private renderSelectionIcon;
    private renderHeader;
    private renderFooter;
    render(): VNode;
}
