import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { InteractiveComponent } from "../../utils/interactive";
import { SelectionMode } from "../interfaces";
import { SelectionAppearance } from "../list/resources";
import { LocalizedComponent } from "../../utils/locale";
import { T9nComponent } from "../../utils/t9n";
import { ListItemMessages } from "./assets/list-item/t9n";
import { LoadableComponent } from "../../utils/loadable";
import { SortableComponentItem } from "../../utils/sortableComponent";
/**
 * @slot - A slot for adding `calcite-list-item` and `calcite-list-item-group` elements.
 * @slot actions-start - A slot for adding actionable `calcite-action` elements before the content of the component.
 * @slot content-start - A slot for adding non-actionable elements before the label and description of the component.
 * @slot content - A slot for adding non-actionable, centered content in place of the `label` and `description` of the component.
 * @slot content-end - A slot for adding non-actionable elements after the label and description of the component.
 * @slot actions-end - A slot for adding actionable `calcite-action` elements after the content of the component.
 * @slot content-bottom - A slot for adding content below the component's `label` and `description`.
 */
export declare class ListItem implements InteractiveComponent, LoadableComponent, LocalizedComponent, T9nComponent, SortableComponentItem {
    /**
     * Sets the item as focusable. Only one item should be focusable within a list.
     *
     * @internal
     */
    active: boolean;
    activeHandler(active: boolean): void;
    /** When `true`, a close button is added to the component. */
    closable: boolean;
    /** When `true`, hides the component. */
    closed: boolean;
    handleClosedChange(): void;
    /**
     * A description for the component. Displays below the label text.
     */
    description: string;
    /**
     * When `true`, interaction is prevented and the component is displayed with lower opacity.
     */
    disabled: boolean;
    handleDisabledChange(): void;
    /**
     * When `true`, the item is not draggable.
     */
    dragDisabled: boolean;
    /**
     * When `true`, the component displays a draggable button.
     *
     * @internal
     */
    dragHandle: boolean;
    /**
     * When `true`, the component's drag handle is selected.
     */
    dragSelected: boolean;
    /**
     * Hides the component when filtered.
     *
     * @internal
     */
    filterHidden: boolean;
    /**
     * The label text of the component. Displays above the description text.
     */
    label: string;
    /**
     * Provides additional metadata to the component. Primary use is for a filter on the parent `calcite-list`.
     */
    metadata: Record<string, unknown>;
    /**
     * When `true`, the item is open to show child components.
     */
    open: boolean;
    /**
     * Used to specify the aria-setsize attribute to define the number of items in the current set of list for accessibility.
     *
     * @internal
     */
    setSize: number;
    /**
     * Used to specify the aria-posinset attribute to define the number or position in the current set of list items for accessibility.
     *
     * @internal
     */
    setPosition: number;
    /**
     * When `true` and the parent `calcite-list`'s `selectionMode` is `"single"`, `"single-persist"', or `"multiple"`, the component is selected.
     */
    selected: boolean;
    handleSelectedChange(): void;
    /**
     * The component's value.
     */
    value: any;
    /**
     * Specifies the selection mode - `"multiple"` (allow any number of selected items), `"single"` (allow one selected item), `"single-persist"` (allow one selected item and prevent de-selection), or `"none"` (no selected items).
     *
     * @internal
     */
    selectionMode: Extract<"none" | "multiple" | "single" | "single-persist", SelectionMode>;
    /**
     * Specifies the selection appearance - `"icon"` (displays a checkmark or dot) or `"border"` (displays a border).
     *
     * @internal
     */
    selectionAppearance: SelectionAppearance;
    /**
     * Use this property to override individual strings used by the component.
     */
    messageOverrides: Partial<ListItemMessages>;
    /**
     * Made into a prop for testing purposes only
     *
     * @internal
     */
    messages: ListItemMessages;
    onMessagesChange(): void;
    /**
     * Fires when the component is selected.
     */
    calciteListItemSelect: EventEmitter<void>;
    /**
     * Fires when the close button is clicked.
     */
    calciteListItemClose: EventEmitter<void>;
    /**
     * Fires when the drag handle is selected.
     */
    calciteListItemDragHandleChange: EventEmitter<void>;
    /**
     * Fires when the open button is clicked.
     */
    calciteListItemToggle: EventEmitter<void>;
    /**
     *
     * @internal
     */
    calciteInternalListItemSelect: EventEmitter<void>;
    /**
     *
     * @internal
     */
    calciteInternalListItemSelectMultiple: EventEmitter<{
        selectMultiple: boolean;
    }>;
    /**
     *
     * @internal
     */
    calciteInternalListItemActive: EventEmitter<void>;
    /**
     *
     * @internal
     */
    calciteInternalFocusPreviousItem: EventEmitter<void>;
    /**
     *
     * @internal
     */
    calciteInternalListItemChange: EventEmitter<void>;
    handleCalciteInternalListDefaultSlotChanges(event: CustomEvent<void>): void;
    el: HTMLCalciteListItemElement;
    effectiveLocale: string;
    effectiveLocaleChange(): void;
    defaultMessages: ListItemMessages;
    level: number;
    visualLevel: number;
    parentListEl: HTMLCalciteListElement;
    openable: boolean;
    hasActionsStart: boolean;
    hasActionsEnd: boolean;
    hasCustomContent: boolean;
    hasContentStart: boolean;
    hasContentEnd: boolean;
    hasContentBottom: boolean;
    containerEl: HTMLTableRowElement;
    contentEl: HTMLTableCellElement;
    actionsStartEl: HTMLTableCellElement;
    actionsEndEl: HTMLTableCellElement;
    handleGridEl: HTMLTableCellElement;
    defaultSlotEl: HTMLSlotElement;
    connectedCallback(): void;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): void;
    componentDidRender(): void;
    disconnectedCallback(): void;
    /** Sets focus on the component. */
    setFocus(): Promise<void>;
    renderSelected(): VNode;
    renderDragHandle(): VNode;
    renderOpen(): VNode;
    renderActionsStart(): VNode;
    renderActionsEnd(): VNode;
    renderContentStart(): VNode;
    renderCustomContent(): VNode;
    renderContentEnd(): VNode;
    renderContentBottom(): VNode;
    renderDefaultContainer(): VNode;
    renderContentProperties(): VNode;
    renderContentContainer(): VNode;
    render(): VNode;
    private dragHandleSelectedChangeHandler;
    private emitInternalListItemActive;
    private focusCellHandle;
    private focusCellActionsStart;
    private focusCellContent;
    private focusCellActionsEnd;
    private emitCalciteInternalListItemChange;
    private handleCloseClick;
    private handleContentSlotChange;
    private handleActionsStartSlotChange;
    private handleActionsEndSlotChange;
    private handleContentStartSlotChange;
    private handleContentEndSlotChange;
    private handleContentBottomSlotChange;
    private setSelectionDefaults;
    private handleOpenableChange;
    private handleDefaultSlotChange;
    private handleToggleClick;
    private toggle;
    private handleItemClick;
    private toggleSelected;
    private getGridCells;
    private handleItemKeyDown;
    private focusCellNull;
    private handleCellFocusIn;
    private setFocusCell;
    private focusCell;
}
