import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { ConditionalSlotComponent } from "../../utils/conditionalSlot";
import { InteractiveComponent } from "../../utils/interactive";
import { LocalizedComponent } from "../../utils/locale";
import { T9nComponent } from "../../utils/t9n";
import { HeadingLevel } from "../functional/Heading";
import { Status } from "../interfaces";
import { BlockMessages } from "./assets/block/t9n";
import { LoadableComponent } from "../../utils/loadable";
import { OpenCloseComponent } from "../../utils/openCloseComponent";
import { OverlayPositioning } from "../../utils/floating-ui";
/**
 * @slot - A slot for adding custom content.
 * @slot icon - A slot for adding a leading header icon with `calcite-icon`.
 * @slot control - A slot for adding a single HTML input element in a header.
 * @slot header-menu-actions - A slot for adding an overflow menu with `calcite-action`s inside a dropdown menu.
 */
export declare class Block implements ConditionalSlotComponent, InteractiveComponent, LocalizedComponent, T9nComponent, LoadableComponent, OpenCloseComponent {
    /**
     * When `true`, the component is collapsible.
     */
    collapsible: boolean;
    /**
     * When `true`, interaction is prevented and the component is displayed with lower opacity.
     */
    disabled: boolean;
    /**
     * When `true`, displays a drag handle in the header.
     */
    dragHandle: boolean;
    /**
     * The component header text.
     */
    heading: string;
    /**
     * Specifies the number at which section headings should start.
     */
    headingLevel: HeadingLevel;
    /**
     * When `true`, a busy indicator is displayed.
     */
    loading: boolean;
    /**
     * When `true`, expands the component and its contents.
     */
    open: boolean;
    openHandler(): void;
    /**
     * Displays a status-related indicator icon.
     */
    status: Status;
    /**
     * A description for the component, which displays below the heading.
     */
    description: string;
    /**
     * Made into a prop for testing purposes only
     *
     * @internal
     */
    messages: BlockMessages;
    /**
     * Use this property to override individual strings used by the component.
     */
    messageOverrides: Partial<BlockMessages>;
    onMessagesChange(): void;
    /**
     * Determines the type of positioning to use for the overlaid content.
     *
     * Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.
     *
     * `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
     *
     */
    overlayPositioning: OverlayPositioning;
    /**
     * Sets focus on the component's first tabbable element.
     *
     */
    setFocus(): Promise<void>;
    onBeforeOpen(): void;
    onOpen(): void;
    onBeforeClose(): void;
    onClose(): void;
    el: HTMLCalciteBlockElement;
    effectiveLocale: string;
    effectiveLocaleChange(): void;
    defaultMessages: BlockMessages;
    openTransitionProp: string;
    transitionEl: HTMLElement;
    connectedCallback(): void;
    disconnectedCallback(): void;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): void;
    componentDidRender(): void;
    /** Fires when the component is requested to be closed and before the closing transition begins. */
    calciteBlockBeforeClose: EventEmitter<void>;
    /** Fires when the component is added to the DOM but not rendered, and before the opening transition begins. */
    calciteBlockBeforeOpen: EventEmitter<void>;
    /** Fires when the component is closed and animation is complete. */
    calciteBlockClose: EventEmitter<void>;
    /** Fires when the component is open and animation is complete. */
    calciteBlockOpen: EventEmitter<void>;
    /**
     * Fires when the component's header is clicked.
     *
     * @deprecated Use `openClose` events such as `calciteBlockOpen`, `calciteBlockClose`, `calciteBlockBeforeOpen`, and `calciteBlockBeforeClose` instead.
     */
    calciteBlockToggle: EventEmitter<void>;
    onHeaderClick: () => void;
    private setTransitionEl;
    renderScrim(): VNode[];
    renderIcon(): VNode[];
    renderTitle(): VNode;
    render(): VNode;
}
