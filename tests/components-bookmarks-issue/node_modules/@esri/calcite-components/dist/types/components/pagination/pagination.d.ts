import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { LoadableComponent } from "../../utils/loadable";
import { LocalizedComponent, NumberingSystem } from "../../utils/locale";
import { T9nComponent } from "../../utils/t9n";
import { Scale } from "../interfaces";
import { PaginationMessages } from "./assets/pagination/t9n";
export interface PaginationDetail {
    start: number;
    totalItems: number;
    startItem: number;
}
export declare class Pagination implements LocalizedComponent, LocalizedComponent, LoadableComponent, T9nComponent {
    /**
     * When `true`, number values are displayed with a group separator corresponding to the language and country format.
     */
    groupSeparator: boolean;
    /**
     * Made into a prop for testing purposes only
     *
     * @internal
     */
    messages: PaginationMessages;
    /**
     * Use this property to override individual strings used by the component.
     */
    messageOverrides: Partial<PaginationMessages>;
    onMessagesChange(): void;
    /**
     * Specifies the Unicode numeral system used by the component for localization.
     */
    numberingSystem: NumberingSystem;
    /** Specifies the number of items per page. */
    pageSize: number;
    /** Specifies the size of the component. */
    scale: Scale;
    /** Specifies the starting item number. */
    startItem: number;
    /** Specifies the total number of items. */
    totalItems: number;
    handleTotalPages(): void;
    el: HTMLCalcitePaginationElement;
    defaultMessages: PaginationMessages;
    effectiveLocale: string;
    effectiveLocaleChange(): void;
    effectiveLocaleWatcher(): void;
    maxItems: number;
    totalPages: number;
    lastStartItem: number;
    handleLastStartItemChange(): void;
    isXXSmall: boolean;
    handleIsXXSmall(): void;
    private resizeObserver;
    /**
     * Emits when the selected page changes.
     */
    calcitePaginationChange: EventEmitter<void>;
    connectedCallback(): void;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): void;
    disconnectedCallback(): void;
    /** Sets focus on the component's first focusable element. */
    setFocus(): Promise<void>;
    /** Go to the next page of results. */
    nextPage(): Promise<void>;
    /** Go to the previous page of results. */
    previousPage(): Promise<void>;
    private setMaxItemsToBreakpoint;
    private resizeHandler;
    private firstClicked;
    private lastClicked;
    private previousClicked;
    private nextClicked;
    private showStartEllipsis;
    private showEndEllipsis;
    private emitUpdate;
    private handlePageClick;
    renderEllipsis(type: "start" | "end"): VNode;
    renderItems(): VNode[];
    renderPage(start: number): VNode;
    renderPreviousChevron(): VNode;
    renderNextChevron(): VNode;
    renderFirstChevron(): VNode;
    renderLastChevron(): VNode;
    render(): VNode;
}
