import { EventEmitter, VNode } from "../../stencil-public-runtime";
import Sortable from "sortablejs";
import { InteractiveComponent } from "../../utils/interactive";
import { HandleNudge } from "../handle/interfaces";
import { Layout } from "../interfaces";
import { DragDetail, SortableComponent } from "../../utils/sortableComponent";
/**
 * @slot - A slot for adding sortable items.
 */
export declare class SortableList implements InteractiveComponent, SortableComponent {
    /**
     * When provided, the method will be called to determine whether the element can  move from the list.
     */
    canPull: (detail: DragDetail) => boolean;
    /**
     * When provided, the method will be called to determine whether the element can be added from another list.
     */
    canPut: (detail: DragDetail) => boolean;
    /**
     * Specifies which items inside the element should be draggable.
     */
    dragSelector?: string;
    /**
     * The list's group identifier.
     *
     * To drag elements from one list into another, both lists must have the same group value.
     */
    group?: string;
    /**
     * The selector for the handle elements.
     */
    handleSelector: string;
    /**
     * Indicates the horizontal or vertical orientation of the component.
     */
    layout: Layout;
    /**
     * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
     */
    disabled: boolean;
    /**
     * When true, content is waiting to be loaded. This state shows a busy indicator.
     */
    loading: boolean;
    el: HTMLCalciteSortableListElement;
    items: Element[];
    mutationObserver: import("../../utils/observers").ExtendedMutationObserver;
    sortable: Sortable;
    dragEnabled: boolean;
    connectedCallback(): void;
    disconnectedCallback(): void;
    componentDidRender(): void;
    /**
     * Emitted when the order of the list has changed.
     */
    calciteListOrderChange: EventEmitter<void>;
    calciteHandleNudgeNextHandler(event: CustomEvent<HandleNudge>): void;
    onGlobalDragStart(): void;
    onGlobalDragEnd(): void;
    onDragEnd(): void;
    onDragStart(): void;
    onDragSort(): void;
    handleNudgeEvent(event: CustomEvent<HandleNudge>): void;
    setUpSorting(): void;
    beginObserving(): void;
    endObserving(): void;
    render(): VNode;
}
