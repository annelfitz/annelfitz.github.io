{
  "timestamp": "2024-02-27T18:52:32",
  "compiler": {
    "name": "@stencil/core",
    "version": "4.9.0",
    "typescriptVersion": "5.2.2"
  },
  "components": [
    {
      "filePath": "src/components/accordion/accordion.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-accordion",
      "readme": "# calcite-accordion\n\n`calcite-accordion` can be used to present content in collapsible sections. Configuration options exist for visual style (icon-position, scale, appearance), and selection functionality.\n",
      "docs": "`calcite-accordion` can be used to present content in collapsible sections. Configuration options exist for visual style (icon-position, scale, appearance), and selection functionality.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-accordion-item`s. `calcite-accordion` cannot be nested, however `calcite-accordion-item`s can."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-accordion>\n  <calcite-accordion-item heading=\"Accordion Item\">Accordion Section Content </calcite-accordion-item>\n  <calcite-accordion-item heading=\"Accordion Item 2\" expanded>Accordion Section Content </calcite-accordion-item>\n  <calcite-accordion-item heading=\"Accordion Item 3\">Accordion Section Content </calcite-accordion-item>\n</calcite-accordion>\n```\n"
      },
      "props": [
        {
          "name": "appearance",
          "type": "\"solid\" | \"transparent\"",
          "complexType": {
            "original": "Extract<\"solid\" | \"transparent\", Appearance>",
            "resolved": "\"solid\" | \"transparent\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Appearance": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Appearance"
              }
            }
          },
          "mutable": false,
          "attr": "appearance",
          "reflectToAttr": true,
          "docs": "Specifies the appearance of the component.",
          "docsTags": [],
          "default": "\"solid\"",
          "values": [
            {
              "value": "solid",
              "type": "string"
            },
            {
              "value": "transparent",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconPosition",
          "type": "\"end\" | \"start\"",
          "complexType": {
            "original": "Position",
            "resolved": "\"end\" | \"start\"",
            "references": {
              "Position": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Position"
              }
            }
          },
          "mutable": false,
          "attr": "icon-position",
          "reflectToAttr": true,
          "docs": "Specifies the placement of the icon in the header.",
          "docsTags": [],
          "default": "\"end\"",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconType",
          "type": "\"caret\" | \"chevron\" | \"plus-minus\"",
          "complexType": {
            "original": "\"chevron\" | \"caret\" | \"plus-minus\"",
            "resolved": "\"caret\" | \"chevron\" | \"plus-minus\"",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-type",
          "reflectToAttr": true,
          "docs": "Specifies the type of the icon in the header.",
          "docsTags": [],
          "default": "\"chevron\"",
          "values": [
            {
              "value": "caret",
              "type": "string"
            },
            {
              "value": "chevron",
              "type": "string"
            },
            {
              "value": "plus-minus",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "\"multiple\" | \"single\" | \"single-persist\"",
          "complexType": {
            "original": "Extract<\n    \"single\" | \"single-persist\" | \"multiple\",\n    SelectionMode\n  >",
            "resolved": "\"multiple\" | \"single\" | \"single-persist\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "SelectionMode": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::SelectionMode"
              }
            }
          },
          "mutable": false,
          "attr": "selection-mode",
          "reflectToAttr": true,
          "docs": "Specifies the selection mode of the component, where:\n\n`\"multiple\"` allows any number of selections,\n\n`\"single\"` allows only one selection, and\n\n`\"single-persist\"` allows one selection and prevents de-selection.",
          "docsTags": [],
          "default": "\"multiple\"",
          "values": [
            {
              "value": "multiple",
              "type": "string"
            },
            {
              "value": "single",
              "type": "string"
            },
            {
              "value": "single-persist",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "calciteInternalAccordionItemSelect",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-accordion-item`s. `calcite-accordion` cannot be nested, however `calcite-accordion-item`s can."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/accordion-item/accordion-item.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-accordion-item",
      "readme": "# calcite-accordion-item\n\nA child component of `calcite-accordion`, where some behavior is inherited from its parent such as the `appearance` and `selectionMode`.\n",
      "docs": "A child component of `calcite-accordion`, where some behavior is inherited from its parent such as the `appearance` and `selectionMode`.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding custom content, including nested `calcite-accordion-item`s."
        },
        {
          "name": "slot",
          "text": "actions-end - A slot for adding `calcite-action`s or content to the end side of the component's header."
        },
        {
          "name": "slot",
          "text": "actions-start - A slot for adding `calcite-action`s or content to the start side of the component's header."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "Specifies a description for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": true,
          "docs": "When `true`, the component is expanded.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "Specifies heading text for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconEnd",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-end",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display at the end of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "\"both\" | \"end\" | \"start\"",
          "complexType": {
            "original": "FlipContext",
            "resolved": "\"both\" | \"end\" | \"start\"",
            "references": {
              "FlipContext": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::FlipContext"
              }
            }
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "values": [
            {
              "value": "both",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconStart",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-start",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display at the start of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalAccordionChange",
          "target": "body",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalAccordionItemsSync",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding custom content, including nested `calcite-accordion-item`s."
        },
        {
          "name": "actions-end",
          "docs": "A slot for adding `calcite-action`s or content to the end side of the component's header."
        },
        {
          "name": "actions-start",
          "docs": "A slot for adding `calcite-action`s or content to the start side of the component's header."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-accordion-item": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/action/action.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-action",
      "readme": "# calcite-action\n\nThe `calcite-action` component lives in either a `calcite-action-bar` or `calcite-action-pad`. Actions look like an icon with a text description option of the component that will be revealed when the icon/ text is clicked or selected.\n",
      "docs": "The `calcite-action` component lives in either a `calcite-action-bar` or `calcite-action-pad`. Actions look like an icon with a text description option of the component that will be revealed when the icon/ text is clicked or selected.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding a `calcite-icon`."
        },
        {
          "name": "slot",
          "text": "tooltip - A slot for adding a `calcite-tooltip`."
        }
      ],
      "usage": {
        "Transparent-appearance": "Renders a `calcite-action` that is transparent.\n\n```html\n<calcite-action appearance=\"transparent\" text=\"Layers\" icon=\"layers\"></calcite-action>\n```\n",
        "With-text-displayed": "Renders a `calcite-action` that displays text alongside an icon.\n\n```html\n<calcite-action label=\"Performs my custom action\" text=\"Perform Action!\" text-enabled icon=\"save\"></calcite-action>\n```\n",
        "With-tooltip": "Renders a `calcite-action` that displays text alongside an icon. A `calcite-tooltip` will be displayed on hover or focus.\n\n```html\n<calcite-action label=\"Performs my custom action\" text=\"Perform Action!\" text-enabled icon=\"save\"\n  ><calcite-tooltip slot=\"tooltip\">Save me!</calcite-tooltip></calcite-action\n>\n```\n",
        "Without-text-displayed": "Renders a `calcite-action` that displays only an icon.\n\n```html\n<calcite-action label=\"Performs my custom action\" text=\"My Custom Action\" icon=\"plus\"></calcite-action>\n```\n"
      },
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "When `true`, the component is highlighted.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "alignment",
          "type": "\"center\" | \"end\" | \"start\"",
          "complexType": {
            "original": "Alignment",
            "resolved": "\"center\" | \"end\" | \"start\"",
            "references": {
              "Alignment": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Alignment"
              }
            }
          },
          "mutable": false,
          "attr": "alignment",
          "reflectToAttr": true,
          "docs": "Specifies the horizontal alignment of button elements with text content.",
          "docsTags": [],
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "appearance",
          "type": "\"solid\" | \"transparent\"",
          "complexType": {
            "original": "Extract<\"solid\" | \"transparent\", Appearance>",
            "resolved": "\"solid\" | \"transparent\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Appearance": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Appearance"
              }
            }
          },
          "mutable": false,
          "attr": "appearance",
          "reflectToAttr": true,
          "docs": "Specifies the appearance of the component.",
          "docsTags": [],
          "default": "\"solid\"",
          "values": [
            {
              "value": "solid",
              "type": "string"
            },
            {
              "value": "transparent",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "compact",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "compact",
          "reflectToAttr": true,
          "docs": "When `true`, the side padding of the component is reduced. Compact mode is used internally by components, e.g. `calcite-block-section`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Specifies an icon to display.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "indicator",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "indicator",
          "reflectToAttr": true,
          "docs": "When `true`, displays a visual indicator.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Specifies the label of the component. If no label is provided, the label inherits what's provided for the `text` prop.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When `true`, a busy indicator is displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ loading?: string; indicator?: string; }",
          "complexType": {
            "original": "Partial<ActionMessages>",
            "resolved": "{ loading?: string; indicator?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "ActionMessages": {
                "location": "import",
                "path": "./assets/action/t9n",
                "id": "src/components/action/assets/action/t9n/index.d.ts::ActionMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ loading?: string; indicator?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "Specifies text that accompanies the icon.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "textEnabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "text-enabled",
          "reflectToAttr": true,
          "docs": "Indicates whether the text is displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-action-indicator-color",
          "annotation": "prop",
          "docs": "Specifies the color of the component's indicator."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding a `calcite-icon`."
        },
        {
          "name": "tooltip",
          "docs": "A slot for adding a `calcite-tooltip`."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-action-bar",
        "calcite-action-group",
        "calcite-action-menu",
        "calcite-action-pad",
        "calcite-flow-item",
        "calcite-list-item",
        "calcite-menu-item",
        "calcite-navigation",
        "calcite-panel",
        "calcite-pick-list-item",
        "calcite-popover",
        "calcite-stepper",
        "calcite-tip",
        "calcite-tip-manager"
      ],
      "dependencies": [
        "calcite-loader",
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-action-bar": [
          "calcite-action"
        ],
        "calcite-action-group": [
          "calcite-action"
        ],
        "calcite-action-menu": [
          "calcite-action"
        ],
        "calcite-action-pad": [
          "calcite-action"
        ],
        "calcite-flow-item": [
          "calcite-action"
        ],
        "calcite-list-item": [
          "calcite-action"
        ],
        "calcite-menu-item": [
          "calcite-action"
        ],
        "calcite-navigation": [
          "calcite-action"
        ],
        "calcite-panel": [
          "calcite-action"
        ],
        "calcite-pick-list-item": [
          "calcite-action"
        ],
        "calcite-popover": [
          "calcite-action"
        ],
        "calcite-stepper": [
          "calcite-action"
        ],
        "calcite-tip": [
          "calcite-action"
        ],
        "calcite-tip-manager": [
          "calcite-action"
        ]
      }
    },
    {
      "filePath": "src/components/action-bar/action-bar.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-action-bar",
      "readme": "# calcite-action-bar\n\n## Description\n\nThe `calcite-action-bar` component is made up of multiple `calcite-action`s in the form of clickable icons. The action bar can be expanded to view actions with descriptive text or made smaller to view with just icons.\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-action`s that will appear at the top of the component."
        },
        {
          "name": "slot",
          "text": "bottom-actions - [Deprecated] Use the `\"actions-end\"` slot instead. A slot for adding `calcite-action`s that will appear at the bottom of the component, above the collapse/expand button."
        },
        {
          "name": "slot",
          "text": "actions-end - A slot for adding `calcite-action`s that will appear at the end of the component, prior to the collapse/expand button."
        },
        {
          "name": "slot",
          "text": "expand-tooltip - A slot to set the `calcite-tooltip` for the expand toggle."
        }
      ],
      "usage": {
        "Actions-end": "The actions-end slot renders `calcite-action`s that stick to the end of the bar prior to the expand/collapse icon.\n\n```html\n<calcite-action-bar>\n  <calcite-action text=\"Information\" icon=\"information\"></calcite-action>\n  <calcite-action text=\"Feedback\" slot=\"actions-end\" icon=\"mega-phone\"></calcite-action>\n</calcite-action-bar>\n```\n",
        "Basic": "Renders `calcite-action`s that stick to the top of the bar.\n\n```html\n<calcite-action-bar>\n  <calcite-action text=\"Add\" icon=\"plus\"></calcite-action>\n  <calcite-action text=\"Save\" icon=\"save\"></calcite-action>\n</calcite-action-bar>\n```\n",
        "Tooltip": "Renders with a tooltip on the expand action.\n\n```html\n<calcite-action-bar id=\"action-bar-test\">\n  <calcite-tooltip slot=\"expand-tooltip\">Expand</calcite-tooltip>\n  <calcite-action text=\"Add\" icon=\"plus\"></calcite-action>\n</calcite-action-bar>\n```\n",
        "With-grouping": "Renders a group of `calcite-action`s contained in a `calcite-action-group`. Actions in a group are visually separated from other groups or actions in the bar.\n\n```html\n<calcite-action-bar>\n  <calcite-action-group label=\"Manage item\">\n    <calcite-action text=\"Add\" icon=\"plus\"></calcite-action>\n    <calcite-action text=\"Save\" icon=\"save\"></calcite-action>\n  </calcite-action-group>\n\n  <calcite-action-group label=\"Item types\">\n    <calcite-action text=\"Layers\" icon=\"layers\"></calcite-action>\n    <calcite-action text=\"Basemaps\" icon=\"layer-basemap\"></calcite-action>\n  </calcite-action-group>\n</calcite-action-bar>\n```\n"
      },
      "props": [
        {
          "name": "actionsEndGroupLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "actions-end-group-label",
          "reflectToAttr": false,
          "docs": "Specifies the accessible label for the last `calcite-action-group`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expandDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "expand-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, the expand-toggling behavior is disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": true,
          "docs": "When `true`, the component is expanded.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "Extract<\"horizontal\" | \"vertical\", Layout>",
            "resolved": "\"horizontal\" | \"vertical\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Layout": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Layout"
              }
            }
          },
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "Specifies the layout direction of the actions.",
          "docsTags": [],
          "default": "\"vertical\"",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ expand?: string; collapse?: string; }",
          "complexType": {
            "original": "Partial<ActionBarMessages>",
            "resolved": "{ expand?: string; collapse?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "ActionBarMessages": {
                "location": "import",
                "path": "./assets/action-bar/t9n",
                "id": "src/components/action-bar/assets/action-bar/t9n/index.d.ts::ActionBarMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ expand?: string; collapse?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overflowActionsDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "overflow-actions-disabled",
          "reflectToAttr": true,
          "docs": "Disables automatically overflowing `calcite-action`s that won't fit into menus.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPositioning",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "OverlayPositioning",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {
              "OverlayPositioning": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::OverlayPositioning"
              }
            }
          },
          "mutable": false,
          "attr": "overlay-positioning",
          "reflectToAttr": true,
          "docs": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
          "docsTags": [],
          "default": "\"absolute\"",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"end\" | \"start\"",
          "complexType": {
            "original": "Position",
            "resolved": "\"end\" | \"start\"",
            "references": {
              "Position": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Position"
              }
            }
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": true,
          "docs": "Arranges the component depending on the element's `dir` property.",
          "docsTags": [],
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the expand `calcite-action`.",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component's first focusable element.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteActionBarToggle",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the `expanded` property is toggled.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-action-bar-expanded-max-width",
          "annotation": "prop",
          "docs": "When `layout` is `\"vertical\"`, specifies the expanded max width of the component."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-action`s that will appear at the top of the component."
        },
        {
          "name": "actions-end",
          "docs": "A slot for adding `calcite-action`s that will appear at the end of the component, prior to the collapse/expand button."
        },
        {
          "name": "bottom-actions",
          "docs": "[Deprecated] Use the `\"actions-end\"` slot instead. A slot for adding `calcite-action`s that will appear at the bottom of the component, above the collapse/expand button."
        },
        {
          "name": "expand-tooltip",
          "docs": "A slot to set the `calcite-tooltip` for the expand toggle."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-action-group",
        "calcite-action"
      ],
      "dependencyGraph": {
        "calcite-action-bar": [
          "calcite-action-group",
          "calcite-action"
        ],
        "calcite-action-group": [
          "calcite-action-menu",
          "calcite-action"
        ],
        "calcite-action-menu": [
          "calcite-action",
          "calcite-popover"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-popover": [
          "calcite-action",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/action-group/action-group.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-action-group",
      "readme": "# calcite-action-group\n\nThe `calcite-action-group` is a wrapper for multiple `calcite-action`s and housed in `calcite-action-bar` and `calcite-action-pad`.\n",
      "docs": "The `calcite-action-group` is a wrapper for multiple `calcite-action`s and housed in `calcite-action-bar` and `calcite-action-pad`.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding a group of `calcite-action`s."
        },
        {
          "name": "slot",
          "text": "menu-actions - A slot for adding an overflow menu with `calcite-action`s inside a `calcite-dropdown`."
        },
        {
          "name": "slot",
          "text": "menu-tooltip - A slot for adding a `calcite-tooltip` for the menu."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "columns",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "complexType": {
            "original": "Columns",
            "resolved": "1 | 2 | 3 | 4 | 5 | 6",
            "references": {
              "Columns": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Columns"
              }
            }
          },
          "mutable": false,
          "attr": "columns",
          "reflectToAttr": true,
          "docs": "Indicates number of columns.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": true,
          "docs": "When `true`, the component is expanded.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"grid\" | \"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "Layout",
            "resolved": "\"grid\" | \"horizontal\" | \"vertical\"",
            "references": {
              "Layout": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Layout"
              }
            }
          },
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "Indicates the layout of the component.",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "Use the `layout` property on the component's parent instead."
            }
          ],
          "default": "\"vertical\"",
          "deprecation": "Use the `layout` property on the component's parent instead.",
          "values": [
            {
              "value": "grid",
              "type": "string"
            },
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "menuOpen",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "menu-open",
          "reflectToAttr": true,
          "docs": "When `true`, the `calcite-action-menu` is open.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ more?: string; }",
          "complexType": {
            "original": "Partial<ActionGroupMessages>",
            "resolved": "{ more?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "ActionGroupMessages": {
                "location": "import",
                "path": "./assets/action-group/t9n",
                "id": "src/components/action-group/assets/action-group/t9n/index.d.ts::ActionGroupMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ more?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPositioning",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "OverlayPositioning",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {
              "OverlayPositioning": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::OverlayPositioning"
              }
            }
          },
          "mutable": false,
          "attr": "overlay-positioning",
          "reflectToAttr": true,
          "docs": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
          "docsTags": [],
          "default": "\"absolute\"",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the `calcite-action-menu`.",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component's first focusable element.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-action-group-columns",
          "annotation": "prop",
          "docs": "Sets number of grid-template-columns when the `layout` property is `\"grid\"`."
        },
        {
          "name": "--calcite-action-group-gap",
          "annotation": "prop",
          "docs": "Sets the gap (gutters) between rows and columns when the `layout` property is `\"grid\"`."
        },
        {
          "name": "--calcite-action-group-padding",
          "annotation": "prop",
          "docs": "Sets the padding when the `layout` property is `\"grid\"`."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding a group of `calcite-action`s."
        },
        {
          "name": "menu-actions",
          "docs": "A slot for adding an overflow menu with `calcite-action`s inside a `calcite-dropdown`."
        },
        {
          "name": "menu-tooltip",
          "docs": "A slot for adding a `calcite-tooltip` for the menu."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-action-bar",
        "calcite-action-pad"
      ],
      "dependencies": [
        "calcite-action-menu",
        "calcite-action"
      ],
      "dependencyGraph": {
        "calcite-action-group": [
          "calcite-action-menu",
          "calcite-action"
        ],
        "calcite-action-menu": [
          "calcite-action",
          "calcite-popover"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-popover": [
          "calcite-action",
          "calcite-icon"
        ],
        "calcite-action-bar": [
          "calcite-action-group"
        ],
        "calcite-action-pad": [
          "calcite-action-group"
        ]
      }
    },
    {
      "filePath": "src/components/action-menu/action-menu.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-action-menu",
      "readme": "# calcite-action-menu\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-action`s."
        },
        {
          "name": "slot",
          "text": "trigger - A slot for adding a `calcite-action` to trigger opening the menu."
        },
        {
          "name": "slot",
          "text": "tooltip - A slot for adding an tooltip for the menu."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "appearance",
          "type": "\"solid\" | \"transparent\"",
          "complexType": {
            "original": "Extract<\"solid\" | \"transparent\", Appearance>",
            "resolved": "\"solid\" | \"transparent\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Appearance": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Appearance"
              }
            }
          },
          "mutable": false,
          "attr": "appearance",
          "reflectToAttr": true,
          "docs": "Specifies the appearance of the component.",
          "docsTags": [],
          "default": "\"solid\"",
          "values": [
            {
              "value": "solid",
              "type": "string"
            },
            {
              "value": "transparent",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": true,
          "docs": "When `true`, the component is expanded.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "flipPlacements",
          "type": "Placement[]",
          "complexType": {
            "original": "EffectivePlacement[]",
            "resolved": "Placement[]",
            "references": {
              "EffectivePlacement": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::EffectivePlacement"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Defines the available placements that can be used when a flip occurs.",
          "docsTags": [],
          "values": [
            {
              "type": "Placement[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Specifies the text string for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "When `true`, the component is open.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPositioning",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "OverlayPositioning",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {
              "OverlayPositioning": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::OverlayPositioning"
              }
            }
          },
          "mutable": false,
          "attr": "overlay-positioning",
          "reflectToAttr": true,
          "docs": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
          "docsTags": [],
          "default": "\"absolute\"",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "\"auto\" | \"top\" | \"right\" | \"bottom\" | \"left\" | \"top-start\" | \"top-end\" | \"right-start\" | \"right-end\" | \"bottom-start\" | \"bottom-end\" | \"left-start\" | \"left-end\" | \"auto-start\" | \"auto-end\" | \"leading-start\" | \"leading\" | \"leading-end\" | \"trailing-end\" | \"trailing\" | \"trailing-start\"",
          "complexType": {
            "original": "LogicalPlacement",
            "resolved": "\"auto\" | \"top\" | \"right\" | \"bottom\" | \"left\" | \"top-start\" | \"top-end\" | \"right-start\" | \"right-end\" | \"bottom-start\" | \"bottom-end\" | \"left-start\" | \"left-end\" | \"auto-start\" | \"auto-end\" | \"leading-start\" | \"leading\" | \"leading-end\" | \"trailing-end\" | \"trailing\" | \"trailing-start\"",
            "references": {
              "LogicalPlacement": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::LogicalPlacement"
              }
            }
          },
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": true,
          "docs": "Determines where the component will be positioned relative to the `referenceElement`.",
          "docsTags": [],
          "default": "\"auto\"",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "leading-start",
              "type": "string"
            },
            {
              "value": "leading",
              "type": "string"
            },
            {
              "value": "leading-end",
              "type": "string"
            },
            {
              "value": "trailing-end",
              "type": "string"
            },
            {
              "value": "trailing",
              "type": "string"
            },
            {
              "value": "trailing-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component's trigger `calcite-action`.",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteActionMenuOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the `open` property is toggled.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-action`s."
        },
        {
          "name": "tooltip",
          "docs": "A slot for adding an tooltip for the menu."
        },
        {
          "name": "trigger",
          "docs": "A slot for adding a `calcite-action` to trigger opening the menu."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-action-group",
        "calcite-block",
        "calcite-panel"
      ],
      "dependencies": [
        "calcite-action",
        "calcite-popover"
      ],
      "dependencyGraph": {
        "calcite-action-menu": [
          "calcite-action",
          "calcite-popover"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-popover": [
          "calcite-action",
          "calcite-icon"
        ],
        "calcite-action-group": [
          "calcite-action-menu"
        ],
        "calcite-block": [
          "calcite-action-menu"
        ],
        "calcite-panel": [
          "calcite-action-menu"
        ]
      }
    },
    {
      "filePath": "src/components/action-pad/action-pad.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-action-pad",
      "readme": "# calcite-action-pad\n\nThe `calcite-action-pad` component is made up of `calcite-action`s in the form of clickable icons. This does not have an expandable option and is a smaller and simpler component than `calcite-action-bar`.\n",
      "docs": "The `calcite-action-pad` component is made up of `calcite-action`s in the form of clickable icons. This does not have an expandable option and is a smaller and simpler component than `calcite-action-bar`.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-action`s to the component."
        },
        {
          "name": "slot",
          "text": "expand-tooltip - A slot to set the `calcite-tooltip` for the expand toggle."
        }
      ],
      "usage": {
        "Basic": "Renders a basic action pad with `calcite-action`s.\n\n```html\n<calcite-action-pad>\n  <calcite-action text=\"Undo\" icon=\"undo\"></calcite-action>\n  <calcite-action text=\"Redo\" icon=\"redo\"></calcite-action>\n</calcite-action-pad>\n```\n",
        "Tooltip": "Renders an action pad with a tooltip on the expand action.\n\n```html\n<calcite-action-pad id=\"action-pad-test\">\n  <calcite-action text=\"Add\" icon=\"plus\"></calcite-action>\n  <calcite-tooltip slot=\"expand-tooltip\">Let's expand</calcite-tooltip>\n</calcite-action-pad>\n```\n",
        "With-grouping": "Renders a group of `calcite-action`s contained in a `calcite-action-group`. Actions in a group are visually separated from other groups or actions in the pad.\n\n```html\n<calcite-action-pad>\n  <calcite-action-group label=\"Manage item\">\n    <calcite-action text=\"Home\" icon=\"home\"></calcite-action>\n    <calcite-action text=\"Styles\" icon=\"add-in-edit\"></calcite-action>\n  </calcite-action-group>\n\n  <calcite-action text=\"Tips\" icon=\"lightbulb\"></calcite-action>\n</calcite-action-pad>\n```\n"
      },
      "props": [
        {
          "name": "actionsEndGroupLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "actions-end-group-label",
          "reflectToAttr": false,
          "docs": "Specifies the accessible label for the last `calcite-action-group`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expandDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "expand-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, the expand-toggling behavior is disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": true,
          "docs": "When `true`, the component is expanded.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"grid\" | \"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "Layout",
            "resolved": "\"grid\" | \"horizontal\" | \"vertical\"",
            "references": {
              "Layout": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Layout"
              }
            }
          },
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "Indicates the layout of the component.",
          "docsTags": [],
          "default": "\"vertical\"",
          "values": [
            {
              "value": "grid",
              "type": "string"
            },
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ expand?: string; collapse?: string; }",
          "complexType": {
            "original": "Partial<ActionPadMessages>",
            "resolved": "{ expand?: string; collapse?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "ActionPadMessages": {
                "location": "import",
                "path": "./assets/action-pad/t9n",
                "id": "src/components/action-pad/assets/action-pad/t9n/index.d.ts::ActionPadMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ expand?: string; collapse?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPositioning",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "OverlayPositioning",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {
              "OverlayPositioning": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::OverlayPositioning"
              }
            }
          },
          "mutable": false,
          "attr": "overlay-positioning",
          "reflectToAttr": true,
          "docs": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
          "docsTags": [],
          "default": "\"absolute\"",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"end\" | \"start\"",
          "complexType": {
            "original": "Position",
            "resolved": "\"end\" | \"start\"",
            "references": {
              "Position": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Position"
              }
            }
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": true,
          "docs": "Arranges the component depending on the element's `dir` property.",
          "docsTags": [],
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the expand `calcite-action`.",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component's first focusable element.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteActionPadToggle",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the `expanded` property is toggled.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-action-pad-expanded-max-width",
          "annotation": "prop",
          "docs": "When `layout` is `\"vertical\"`, specifies the expanded max width of the component."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-action`s to the component."
        },
        {
          "name": "expand-tooltip",
          "docs": "A slot to set the `calcite-tooltip` for the expand toggle."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-action-group",
        "calcite-action"
      ],
      "dependencyGraph": {
        "calcite-action-pad": [
          "calcite-action-group",
          "calcite-action"
        ],
        "calcite-action-group": [
          "calcite-action-menu",
          "calcite-action"
        ],
        "calcite-action-menu": [
          "calcite-action",
          "calcite-popover"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-popover": [
          "calcite-action",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/alert/alert.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-alert",
      "readme": "# calcite-alert\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "title - A slot for adding a title to the component."
        },
        {
          "name": "slot",
          "text": "message - A slot for adding main text to the component."
        },
        {
          "name": "slot",
          "text": "link - A slot for adding a `calcite-action` to take from the component such as: \"undo\", \"try again\", \"link to page\", etc."
        },
        {
          "name": "slot",
          "text": "actions-end - A slot for adding `calcite-action`s to the end of the component. It is recommended to use two or fewer actions."
        }
      ],
      "usage": {
        "Basic": "A single instance of an alert. Multiple alerts will aggregate in a queue.\n\n```html\n<calcite-alert open>\n  <div slot=\"title\">Title of alert</div>\n  <div slot=\"message\">Message text of the alert</div>\n  <a slot=\"link\" href=\"#\">Retry</a>\n</calcite-alert>\n```\n"
      },
      "props": [
        {
          "name": "autoClose",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "auto-close",
          "reflectToAttr": true,
          "docs": "When `true`, the component closes automatically. Recommended for passive, non-blocking alerts.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autoCloseDuration",
          "type": "\"fast\" | \"medium\" | \"slow\"",
          "complexType": {
            "original": "AlertDuration",
            "resolved": "\"fast\" | \"medium\" | \"slow\"",
            "references": {
              "AlertDuration": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/alert/interfaces.ts::AlertDuration"
              }
            }
          },
          "mutable": false,
          "attr": "auto-close-duration",
          "reflectToAttr": true,
          "docs": "Specifies the duration before the component automatically closes - only use with `autoClose`.",
          "docsTags": [],
          "default": "\"medium\"",
          "values": [
            {
              "value": "fast",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "slow",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "boolean | string",
          "complexType": {
            "original": "string | boolean",
            "resolved": "boolean | string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "When `true`, shows a default recommended icon. Alternatively,\npass a Calcite UI Icon name to display a specific icon.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "kind",
          "type": "\"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "Extract<\n    \"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\",\n    Kind\n  >",
            "resolved": "\"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Kind": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Kind"
              }
            }
          },
          "mutable": false,
          "attr": "kind",
          "reflectToAttr": true,
          "docs": "Specifies the kind of the component, which will apply to top border and icon.",
          "docsTags": [],
          "default": "\"brand\"",
          "values": [
            {
              "value": "brand",
              "type": "string"
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Specifies an accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "messageOverrides",
          "type": "{ close?: string; }",
          "complexType": {
            "original": "Partial<AlertMessages>",
            "resolved": "{ close?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "AlertMessages": {
                "location": "import",
                "path": "./assets/alert/t9n",
                "id": "src/components/alert/assets/alert/t9n/index.d.ts::AlertMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ close?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberingSystem",
          "type": "\"arab\" | \"arabext\" | \"latn\"",
          "complexType": {
            "original": "NumberingSystem",
            "resolved": "\"arab\" | \"arabext\" | \"latn\"",
            "references": {
              "NumberingSystem": {
                "location": "import",
                "path": "../../utils/locale",
                "id": "src/utils/locale.ts::NumberingSystem"
              }
            }
          },
          "mutable": false,
          "attr": "numbering-system",
          "reflectToAttr": true,
          "docs": "Specifies the Unicode numeral system used by the component for localization.",
          "docsTags": [],
          "values": [
            {
              "value": "arab",
              "type": "string"
            },
            {
              "value": "arabext",
              "type": "string"
            },
            {
              "value": "latn",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "When `true`, displays and positions the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "complexType": {
            "original": "MenuPlacement",
            "resolved": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"top\" | \"top-end\" | \"top-start\"",
            "references": {
              "MenuPlacement": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::MenuPlacement"
              }
            }
          },
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": true,
          "docs": "Specifies the placement of the component.",
          "docsTags": [],
          "default": "\"bottom\"",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLCalciteLinkElement": {
                "location": "global",
                "id": "global::HTMLCalciteLinkElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component's \"close\" button, the first focusable item.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteAlertBeforeClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is requested to be closed and before the closing transition begins.",
          "docsTags": []
        },
        {
          "event": "calciteAlertBeforeOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
          "docsTags": []
        },
        {
          "event": "calciteAlertClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is closed and animation is complete.",
          "docsTags": []
        },
        {
          "event": "calciteAlertOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is open and animation is complete.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteInternalAlertSync",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalAlertRegister",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalAlertUnregister",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--calcite-alert-width",
          "annotation": "prop",
          "docs": "Specifies the width of the component."
        }
      ],
      "slots": [
        {
          "name": "actions-end",
          "docs": "A slot for adding `calcite-action`s to the end of the component. It is recommended to use two or fewer actions."
        },
        {
          "name": "link",
          "docs": "A slot for adding a `calcite-action` to take from the component such as: \"undo\", \"try again\", \"link to page\", etc."
        },
        {
          "name": "message",
          "docs": "A slot for adding main text to the component."
        },
        {
          "name": "title",
          "docs": "A slot for adding a title to the component."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon",
        "calcite-chip"
      ],
      "dependencyGraph": {
        "calcite-alert": [
          "calcite-icon",
          "calcite-chip"
        ],
        "calcite-chip": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/avatar/avatar.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-avatar",
      "readme": "# calcite-avatar\n\nThe avatar component provides a unique (but consistent) visual for a user. It's built\nto work with users returned from the ArcGIS REST API.\n",
      "docs": "The avatar component provides a unique (but consistent) visual for a user. It's built\nto work with users returned from the ArcGIS REST API.",
      "docsTags": [],
      "usage": {
        "Basic": "The JSON sample user below is returned from a [search for users](https://developers.arcgis.com/rest/users-groups-and-items/user-search.htm). You can create an avatar for Ron by passing these properties directly to the avatar component.\n\nWhen no thumbnail is provided, the avatar component will construct a useful placeholder, leveraging the user's information to construct a unique background-color with initials.\n\n**Note:** if your user is private, remember to append a token to the end of the thumbnail using the form `thumbnail.jpg?token=YOUR_LOGGED_IN_USER_TOKEN`.\n\n```json\n{\n  \"username\": \"ron_swanson_pawnee\",\n  \"id\": \"a81470986eaeee1833b74b7d8abcd5b2\",\n  \"fullName\": \"Ron Swanson\",\n  \"firstName\": \"Ron\",\n  \"lastName\": \"Swanson\",\n  \"thumbnail\": \"mySelf.jpg\",\n  ...\n}\n```\n\n```html\n<calcite-avatar\n  username=\"ron_swanson_pawnee\"\n  user-id=\"a81470986eaeee1833b74b7d8abcd5b2\"\n  full-name=\"Ron Swanson\"\n  thumbnail=\"mySelf.jpg\"\n>\n</calcite-avatar>\n```\n"
      },
      "props": [
        {
          "name": "fullName",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "full-name",
          "reflectToAttr": true,
          "docs": "Specifies the full name of the user. When `label` and `thumbnail` are not defined, specifies the accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Specifies alternative text when `thumbnail` is defined, otherwise specifies an accessible label.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "thumbnail",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "thumbnail",
          "reflectToAttr": true,
          "docs": "Specifies the `src` to an image (remember to add a token if the user is private).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "userId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "user-id",
          "reflectToAttr": true,
          "docs": "Specifies the unique id of the user.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "username",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "username",
          "reflectToAttr": true,
          "docs": "Specifies the username of the user.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-navigation-user"
      ],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-avatar": [
          "calcite-icon"
        ],
        "calcite-navigation-user": [
          "calcite-avatar"
        ]
      }
    },
    {
      "filePath": "src/components/block/block.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-block",
      "readme": "# calcite-block\n\nThe `calcite-block` component is intended for displaying a heading and content. Content can also include stacked, collapsible `calcite-block-section`s typically housed in a panel.\n",
      "docs": "The `calcite-block` component is intended for displaying a heading and content. Content can also include stacked, collapsible `calcite-block-section`s typically housed in a panel.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding custom content."
        },
        {
          "name": "slot",
          "text": "icon - A slot for adding a leading header icon with `calcite-icon`."
        },
        {
          "name": "slot",
          "text": "control - A slot for adding a single HTML input element in a header."
        },
        {
          "name": "slot",
          "text": "header-menu-actions - A slot for adding an overflow menu with `calcite-action`s inside a dropdown menu."
        }
      ],
      "usage": {
        "Always-open": "Renders a header and content that remains open - no collapsible option.\n\n```html\n<calcite-block heading=\"Dogs\" open>\n  <ul>\n    <li>The first species to be domesticated</li>\n    <li>Domesticated from wolves over 15,000 years ago</li>\n    <li>Adapted to human behavior performing many roles such as hunting, protection, military, therapy, etc.</li>\n  </ul>\n</calcite-block>\n```\n",
        "Basic": "Renders a basic, non-collapsible block.\n\n```html\n<calcite-block heading=\"Fruit\" description=\"It's nature's candy\"> </calcite-block>\n```\n",
        "Collapsible": "Renders a header with a clickable icon to toggle the block open and closed.\n\n```html\n<calcite-block heading=\"Domestic pets\" open collapsible>\n  <calcite-block-section text=\"Dogs\" open>\n    <ul>\n      <li>The first species to be domesticated</li>\n      <li>Domesticated from wolves over 15,000 years ago</li>\n      <li>Adapted to human behavior performing many roles such as hunting, protection, military, therapy, etc.</li>\n    </ul>\n  </calcite-block-section>\n</calcite-block>\n```\n",
        "Header-with-control": "Renders a header and control with a slot for adding a single HTML element (in the header).\n\n```html\n<calcite-block heading=\"A fantastic heading\" description=\"Add a control, such as an editing action\">\n  <calcite-action icon=\"pencil\" text=\"edit\" slot=\"control\"></calcite-action>\n</calcite-block>\n```\n",
        "Header-with-icon": "Renders a header and icon with the icon.\n\n```html\n<calcite-block heading=\"Dogs\">\n  <div slot=\"icon\">🐕</div>\n</calcite-block>\n```\n"
      },
      "props": [
        {
          "name": "collapsible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "collapsible",
          "reflectToAttr": true,
          "docs": "When `true`, the component is collapsible.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "A description for the component, which displays below the heading.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dragHandle",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "drag-handle",
          "reflectToAttr": true,
          "docs": "When `true`, displays a drag handle in the header.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "The component header text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "headingLevel",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "complexType": {
            "original": "HeadingLevel",
            "resolved": "1 | 2 | 3 | 4 | 5 | 6",
            "references": {
              "HeadingLevel": {
                "location": "import",
                "path": "../functional/Heading",
                "id": "src/components/functional/Heading.tsx::HeadingLevel"
              }
            }
          },
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": true,
          "docs": "Specifies the number at which section headings should start.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When `true`, a busy indicator is displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ collapse?: string; expand?: string; loading?: string; options?: string; }",
          "complexType": {
            "original": "Partial<BlockMessages>",
            "resolved": "{ collapse?: string; expand?: string; loading?: string; options?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "BlockMessages": {
                "location": "import",
                "path": "./assets/block/t9n",
                "id": "src/components/block/assets/block/t9n/index.d.ts::BlockMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ collapse?: string; expand?: string; loading?: string; options?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "When `true`, expands the component and its contents.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPositioning",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "OverlayPositioning",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {
              "OverlayPositioning": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::OverlayPositioning"
              }
            }
          },
          "mutable": false,
          "attr": "overlay-positioning",
          "reflectToAttr": true,
          "docs": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
          "docsTags": [],
          "default": "\"absolute\"",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "status",
          "type": "\"idle\" | \"invalid\" | \"valid\"",
          "complexType": {
            "original": "Status",
            "resolved": "\"idle\" | \"invalid\" | \"valid\"",
            "references": {
              "Status": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Status"
              }
            }
          },
          "mutable": false,
          "attr": "status",
          "reflectToAttr": true,
          "docs": "Displays a status-related indicator icon.",
          "docsTags": [],
          "values": [
            {
              "value": "idle",
              "type": "string"
            },
            {
              "value": "invalid",
              "type": "string"
            },
            {
              "value": "valid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component's first tabbable element.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteBlockBeforeClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is requested to be closed and before the closing transition begins.",
          "docsTags": []
        },
        {
          "event": "calciteBlockBeforeOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
          "docsTags": []
        },
        {
          "event": "calciteBlockClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is closed and animation is complete.",
          "docsTags": []
        },
        {
          "event": "calciteBlockOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is open and animation is complete.",
          "docsTags": []
        },
        {
          "event": "calciteBlockToggle",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component's header is clicked.",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "Use `openClose` events such as `calciteBlockOpen`, `calciteBlockClose`, `calciteBlockBeforeOpen`, and `calciteBlockBeforeClose` instead."
            }
          ],
          "deprecation": "Use `openClose` events such as `calciteBlockOpen`, `calciteBlockClose`, `calciteBlockBeforeOpen`, and `calciteBlockBeforeClose` instead."
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-block-padding",
          "annotation": "prop",
          "docs": "Specifies the padding of the block `default` slot."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding custom content."
        },
        {
          "name": "control",
          "docs": "A slot for adding a single HTML input element in a header."
        },
        {
          "name": "header-menu-actions",
          "docs": "A slot for adding an overflow menu with `calcite-action`s inside a dropdown menu."
        },
        {
          "name": "icon",
          "docs": "A slot for adding a leading header icon with `calcite-icon`."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-scrim",
        "calcite-loader",
        "calcite-icon",
        "calcite-handle",
        "calcite-action-menu"
      ],
      "dependencyGraph": {
        "calcite-block": [
          "calcite-scrim",
          "calcite-loader",
          "calcite-icon",
          "calcite-handle",
          "calcite-action-menu"
        ],
        "calcite-scrim": [
          "calcite-loader"
        ],
        "calcite-handle": [
          "calcite-icon"
        ],
        "calcite-action-menu": [
          "calcite-action",
          "calcite-popover"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-popover": [
          "calcite-action",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/block-section/block-section.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-block-section",
      "readme": "# calcite-block-section\n\nThe `calcite-block-section` component is a child element of `calcite-block`. Sections can have their own header and content and can be toggled open or closed.\n",
      "docs": "The `calcite-block-section` component is a child element of `calcite-block`. Sections can have their own header and content and can be toggled open or closed.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding custom content."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "messageOverrides",
          "type": "{ collapse?: string; expand?: string; }",
          "complexType": {
            "original": "Partial<BlockSectionMessages>",
            "resolved": "{ collapse?: string; expand?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "BlockSectionMessages": {
                "location": "import",
                "path": "./assets/block-section/t9n",
                "id": "src/components/block-section/assets/block-section/t9n/index.d.ts::BlockSectionMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ collapse?: string; expand?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "When `true`, expands the component and its contents.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "status",
          "type": "\"idle\" | \"invalid\" | \"valid\"",
          "complexType": {
            "original": "Status",
            "resolved": "\"idle\" | \"invalid\" | \"valid\"",
            "references": {
              "Status": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Status"
              }
            }
          },
          "mutable": false,
          "attr": "status",
          "reflectToAttr": true,
          "docs": "Displays a status-related indicator icon.",
          "docsTags": [],
          "values": [
            {
              "value": "idle",
              "type": "string"
            },
            {
              "value": "invalid",
              "type": "string"
            },
            {
              "value": "valid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "The component header text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "toggleDisplay",
          "type": "\"button\" | \"switch\"",
          "complexType": {
            "original": "BlockSectionToggleDisplay",
            "resolved": "\"button\" | \"switch\"",
            "references": {
              "BlockSectionToggleDisplay": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/block-section/interfaces.ts::BlockSectionToggleDisplay"
              }
            }
          },
          "mutable": false,
          "attr": "toggle-display",
          "reflectToAttr": true,
          "docs": "Specifies how the component's toggle is displayed, where:\n\n`\"button\"` sets the toggle to a selectable header, and\n\n`\"switch\"` sets the toggle to a switch.",
          "docsTags": [],
          "default": "\"button\"",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "switch",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component's first tabbable element.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteBlockSectionToggle",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the header has been clicked.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding custom content."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon",
        "calcite-label",
        "calcite-switch"
      ],
      "dependencyGraph": {
        "calcite-block-section": [
          "calcite-icon",
          "calcite-label",
          "calcite-switch"
        ]
      }
    },
    {
      "filePath": "src/components/button/button.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-button",
      "readme": "# calcite-button\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding text."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-button icon-start=\"plus\">Go!</calcite-button>\n```\n",
        "Focusing": "You can programmatically focus a `calcite-button` with the `setFocus()` method:\n\n```html\n<div onclick=\"document.querySelector('#my-button').setFocus()\">Focus!</div>\n```\n",
        "Internals": "Any additional attributes set on `<calcite-button>` are passed to the internal `<a>` or `<button>` tag. For example, the first button below sets `target=\"_blank` On the internal `<a>`. The second button sets `type=\"submit\"` on the internal `<button>`.\n\n- ```html\n  <calcite-button href=\"https://github.com/Esri/calcite-design-system\" target=\"_blank\">\n    Calcite Components on GitHub\n  </calcite-button>\n\n  <calcite-button type=\"submit\">Submit</calcite-button>\n  ```\n",
        "With-icons": "```html\n<calcite-button appearance=\"solid\" icon-start=\"arrow-left\">Back</calcite-button>\n<calcite-button icon-end=\"map\" kind=\"danger\">Delete Map Options</calcite-button>\n<calcite-button icon-end=\"plus\" appearance=\"outline-fill\" kind=\"inverse\">Add to favorites</calcite-button>\n```\n",
        "With-loader-disabled": "```html\n<calcite-button loading kind=\"neutral\">Fetching data...</calcite-button>\n<calcite-button disabled>Can't touch this</calcite-button>\n```\n",
        "Within-form": "```html\n<form name=\"sign-up\">\n  <calcite-label>\n    First name\n    <calcite-input name=\"first-name\" required value=\"Jane\"></calcite-input>\n  </calcite-label>\n  <calcite-button type=\"reset\">I should reset the form (type reset)</calcite-button>\n  <calcite-button type=\"button\">I should not submit the form (type button)</calcite-button>\n  <calcite-button type=\"submit\">Submit</calcite-button>\n</form>\n```\n"
      },
      "props": [
        {
          "name": "alignment",
          "type": "\"center\" | \"end\" | \"icon-end-space-between\" | \"icon-start-space-between\" | \"space-between\" | \"start\"",
          "complexType": {
            "original": "ButtonAlignment",
            "resolved": "\"center\" | \"end\" | \"icon-end-space-between\" | \"icon-start-space-between\" | \"space-between\" | \"start\"",
            "references": {
              "ButtonAlignment": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/button/interfaces.ts::ButtonAlignment"
              }
            }
          },
          "mutable": false,
          "attr": "alignment",
          "reflectToAttr": true,
          "docs": "Specifies the alignment of the component's elements.",
          "docsTags": [],
          "default": "\"center\"",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "icon-end-space-between",
              "type": "string"
            },
            {
              "value": "icon-start-space-between",
              "type": "string"
            },
            {
              "value": "space-between",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "appearance",
          "type": "\"outline\" | \"outline-fill\" | \"solid\" | \"transparent\"",
          "complexType": {
            "original": "Extract<\n    \"outline\" | \"outline-fill\" | \"solid\" | \"transparent\",\n    Appearance\n  >",
            "resolved": "\"outline\" | \"outline-fill\" | \"solid\" | \"transparent\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Appearance": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Appearance"
              }
            }
          },
          "mutable": false,
          "attr": "appearance",
          "reflectToAttr": true,
          "docs": "Specifies the appearance style of the component.",
          "docsTags": [],
          "default": "\"solid\"",
          "values": [
            {
              "value": "outline",
              "type": "string"
            },
            {
              "value": "outline-fill",
              "type": "string"
            },
            {
              "value": "solid",
              "type": "string"
            },
            {
              "value": "transparent",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "form",
          "reflectToAttr": true,
          "docs": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": true,
          "docs": "Specifies the URL of the linked resource, which can be set as an absolute or relative path.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconEnd",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-end",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display at the end of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "\"both\" | \"end\" | \"start\"",
          "complexType": {
            "original": "FlipContext",
            "resolved": "\"both\" | \"end\" | \"start\"",
            "references": {
              "FlipContext": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::FlipContext"
              }
            }
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "values": [
            {
              "value": "both",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconStart",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-start",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display at the start of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "kind",
          "type": "\"brand\" | \"danger\" | \"inverse\" | \"neutral\"",
          "complexType": {
            "original": "Extract<\"brand\" | \"danger\" | \"inverse\" | \"neutral\", Kind>",
            "resolved": "\"brand\" | \"danger\" | \"inverse\" | \"neutral\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Kind": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Kind"
              }
            }
          },
          "mutable": false,
          "attr": "kind",
          "reflectToAttr": true,
          "docs": "Specifies the kind of the component, which will apply to the border and background if applicable.",
          "docsTags": [],
          "default": "\"brand\"",
          "values": [
            {
              "value": "brand",
              "type": "string"
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "inverse",
              "type": "string"
            },
            {
              "value": "neutral",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When `true`, a busy indicator is displayed and interaction is disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ loading?: string; }",
          "complexType": {
            "original": "Partial<ButtonMessages>",
            "resolved": "{ loading?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "ButtonMessages": {
                "location": "import",
                "path": "./assets/button/t9n",
                "id": "src/components/button/assets/button/t9n/index.d.ts::ButtonMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ loading?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Specifies the name of the component on form submission.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "rel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": true,
          "docs": "Defines the relationship between the `href` value and the current document.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[rel](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "round",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "round",
          "reflectToAttr": true,
          "docs": "When `true`, adds a round style to the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "splitChild",
          "type": "\"primary\" | \"secondary\" | boolean",
          "complexType": {
            "original": "\"primary\" | \"secondary\" | false",
            "resolved": "\"primary\" | \"secondary\" | boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "split-child",
          "reflectToAttr": true,
          "docs": "Specifies if the component is a child of a `calcite-split-button`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": true,
          "docs": "Specifies where to open the linked document defined in the `href` property.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "Specifies the default behavior of the component.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type)"
            }
          ],
          "default": "\"button\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "\"auto\" | \"full\" | \"half\"",
          "complexType": {
            "original": "Width",
            "resolved": "\"auto\" | \"full\" | \"half\"",
            "references": {
              "Width": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Width"
              }
            }
          },
          "mutable": false,
          "attr": "width",
          "reflectToAttr": true,
          "docs": "Specifies the width of the component.",
          "docsTags": [],
          "default": "\"auto\"",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "half",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding text."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-color-picker",
        "calcite-fab",
        "calcite-inline-editable",
        "calcite-split-button",
        "calcite-table"
      ],
      "dependencies": [
        "calcite-loader",
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-button": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-color-picker": [
          "calcite-button"
        ],
        "calcite-fab": [
          "calcite-button"
        ],
        "calcite-inline-editable": [
          "calcite-button"
        ],
        "calcite-split-button": [
          "calcite-button"
        ],
        "calcite-table": [
          "calcite-button"
        ]
      }
    },
    {
      "filePath": "src/components/card/card.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-card",
      "readme": "# calcite-card\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding content."
        },
        {
          "name": "slot",
          "text": "title - [Deprecated] use `heading` instead. A slot for adding a heading."
        },
        {
          "name": "slot",
          "text": "subtitle - [Deprecated] use `description` instead. A slot for adding a description."
        },
        {
          "name": "slot",
          "text": "thumbnail - A slot for adding a thumbnail."
        },
        {
          "name": "slot",
          "text": "heading - A slot for adding a heading."
        },
        {
          "name": "slot",
          "text": "description - A slot for adding a description."
        },
        {
          "name": "slot",
          "text": "footer-start - A slot for adding a leading footer."
        },
        {
          "name": "slot",
          "text": "footer-end - A slot for adding a trailing footer."
        }
      ],
      "usage": {
        "Basic": "```html\n<div style=\"width:260px\">\n  <calcite-card>\n    <h3 slot=\"title\">ArcGIS Online: Gallery and Organization pages</h3>\n    <span slot=\"subtitle\">\n      A great example of a study description that might wrap to a line or two, but isn't overly verbose.\n    </span>\n  </calcite-card>\n</div>\n```\n"
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When `true`, a busy indicator is displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ select?: string; loading?: string; }",
          "complexType": {
            "original": "Partial<CardMessages>",
            "resolved": "{ select?: string; loading?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "CardMessages": {
                "location": "import",
                "path": "./assets/card/t9n",
                "id": "src/components/card/assets/card/t9n/index.d.ts::CardMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ select?: string; loading?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selectable",
          "reflectToAttr": true,
          "docs": "When `true`, the component is selectable.",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "use `selectionMode` property on a parent `calcite-card-group` instead."
            }
          ],
          "default": "false",
          "deprecation": "use `selectionMode` property on a parent `calcite-card-group` instead.",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "When `true`, the component is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "thumbnailPosition",
          "type": "\"block-end\" | \"block-start\" | \"inline-end\" | \"inline-start\"",
          "complexType": {
            "original": "LogicalFlowPosition",
            "resolved": "\"block-end\" | \"block-start\" | \"inline-end\" | \"inline-start\"",
            "references": {
              "LogicalFlowPosition": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::LogicalFlowPosition"
              }
            }
          },
          "mutable": false,
          "attr": "thumbnail-position",
          "reflectToAttr": true,
          "docs": "Sets the placement of the thumbnail defined in the `thumbnail` slot.",
          "docsTags": [],
          "default": "\"block-start\"",
          "values": [
            {
              "value": "block-end",
              "type": "string"
            },
            {
              "value": "block-start",
              "type": "string"
            },
            {
              "value": "inline-end",
              "type": "string"
            },
            {
              "value": "inline-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteCardSelect",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the deprecated `selectable` is true, or `selectionMode` set on parent `calcite-card-group` is not `none` and the component is selected.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-card-accent-color-selected",
          "annotation": "prop",
          "docs": "Specifies the accent color of the component when `selected`."
        },
        {
          "name": "--calcite-card-background-color",
          "annotation": "prop",
          "docs": "Specifies the background color of the component."
        },
        {
          "name": "--calcite-card-border-color",
          "annotation": "prop",
          "docs": "Specifies the border color of the component."
        },
        {
          "name": "--calcite-card-corner-radius",
          "annotation": "prop",
          "docs": "Specifies the corner radius of the component."
        },
        {
          "name": "--calcite-card-selection-background-color",
          "annotation": "prop",
          "docs": "Specifies the background color of the component's selection element."
        },
        {
          "name": "--calcite-card-selection-background-color-active",
          "annotation": "prop",
          "docs": "Specifies the background color of the component's selection element when active."
        },
        {
          "name": "--calcite-card-selection-background-color-hover",
          "annotation": "prop",
          "docs": "Specifies the background color of the component's selection element when hovered."
        },
        {
          "name": "--calcite-card-selection-background-color-selected",
          "annotation": "prop",
          "docs": "Specifies the icon color of the component's selection element when `selected`."
        },
        {
          "name": "--calcite-card-selection-icon-color",
          "annotation": "prop",
          "docs": "Specifies the icon color of the component's selection element."
        },
        {
          "name": "--calcite-card-selection-icon-color-hover",
          "annotation": "prop",
          "docs": "Specifies the icon color of the component's selection element when hovered."
        },
        {
          "name": "--calcite-card-selection-icon-color-selected",
          "annotation": "prop",
          "docs": "Specifies the icon color of the component's selection element when `selected`."
        },
        {
          "name": "--calcite-card-shadow",
          "annotation": "prop",
          "docs": "Specifies the shadow of the component."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding content."
        },
        {
          "name": "description",
          "docs": "A slot for adding a description."
        },
        {
          "name": "footer-end",
          "docs": "A slot for adding a trailing footer."
        },
        {
          "name": "footer-start",
          "docs": "A slot for adding a leading footer."
        },
        {
          "name": "heading",
          "docs": "A slot for adding a heading."
        },
        {
          "name": "subtitle",
          "docs": "[Deprecated] use `description` instead. A slot for adding a description."
        },
        {
          "name": "thumbnail",
          "docs": "A slot for adding a thumbnail."
        },
        {
          "name": "title",
          "docs": "[Deprecated] use `heading` instead. A slot for adding a heading."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-label",
        "calcite-checkbox",
        "calcite-icon",
        "calcite-loader"
      ],
      "dependencyGraph": {
        "calcite-card": [
          "calcite-label",
          "calcite-checkbox",
          "calcite-icon",
          "calcite-loader"
        ]
      }
    },
    {
      "filePath": "src/components/card-group/card-group.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-card-group",
      "readme": "# calcite-card-group\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding one or more `calcite-card`s."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-card-group label=\"Sports stadium layers\">\n  <calcite-card label=\"Baseball stadiums\">\n    <span slot=\"heading\">Baseball stadium layer</span>\n    <span slot=\"description\">This layer contains baseball stadiums</span>\n  </calcite-card>\n  <calcite-card label=\"Hockey stadiums\">\n    <span slot=\"heading\">Hockey stadium layer</span>\n    <span slot=\"description\">This layer contains hockey stadiums</span>\n  </calcite-card>\n  <calcite-card label=\"Football stadiums\">\n    <span slot=\"heading\">Football stadium layer</span>\n    <span slot=\"description\">This layer contains football stadiums</span>\n  </calcite-card>\n  <calcite-card label=\"Soccer stadiums\">\n    <span slot=\"heading\">Soccer stadium layer</span>\n    <span slot=\"description\">This layer contains soccer stadiums</span>\n  </calcite-card>\n</calcite-card-group>\n```\n",
        "SelectionMode": "```html\n<calcite-card-group label=\"Sports stadium layers\" selection-mode=\"multiple\">\n  <calcite-card label=\"Baseball stadiums\">\n    <span slot=\"heading\">Baseball stadium layer</span>\n    <span slot=\"description\">This layer contains baseball stadiums</span>\n  </calcite-card>\n  <calcite-card label=\"Hockey stadiums\">\n    <span slot=\"heading\">Hockey stadium layer</span>\n    <span slot=\"description\">This layer contains hockey stadiums</span>\n  </calcite-card>\n  <calcite-card label=\"Football stadiums\">\n    <span slot=\"heading\">Football stadium layer</span>\n    <span slot=\"description\">This layer contains football stadiums</span>\n  </calcite-card>\n  <calcite-card label=\"Soccer stadiums\">\n    <span slot=\"heading\">Soccer stadium layer</span>\n    <span slot=\"description\">This layer contains soccer stadiums</span>\n  </calcite-card>\n</calcite-card-group>\n```\n"
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component. Child `calcite-card`s inherit the component's value.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedItems",
          "type": "HTMLCalciteCardElement[]",
          "complexType": {
            "original": "HTMLCalciteCardElement[]",
            "resolved": "HTMLCalciteCardElement[]",
            "references": {
              "HTMLCalciteCardElement": {
                "location": "global",
                "id": "global::HTMLCalciteCardElement"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Specifies the component's selected items.",
          "docsTags": [
            {
              "name": "readonly"
            }
          ],
          "default": "[]",
          "values": [
            {
              "type": "HTMLCalciteCardElement[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "\"multiple\" | \"none\" | \"single\" | \"single-persist\"",
          "complexType": {
            "original": "Extract<\n    \"multiple\" | \"single\" | \"single-persist\" | \"none\",\n    SelectionMode\n  >",
            "resolved": "\"multiple\" | \"none\" | \"single\" | \"single-persist\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "SelectionMode": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::SelectionMode"
              }
            }
          },
          "mutable": false,
          "attr": "selection-mode",
          "reflectToAttr": true,
          "docs": "Specifies the selection mode of the component.",
          "docsTags": [],
          "default": "\"none\"",
          "values": [
            {
              "value": "multiple",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "single",
              "type": "string"
            },
            {
              "value": "single-persist",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component's first focusable element.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteCardGroupSelect",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Emits when the component's selection changes and the `selectionMode` is not `none`.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteInternalCardKeyEvent",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteCardSelect",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--calcite-card-group-gap",
          "annotation": "prop",
          "docs": "Specifies the gap between slotted components."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding one or more `calcite-card`s."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/checkbox/checkbox.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-checkbox",
      "readme": "# calcite-checkbox\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "Basic": "```html\n<calcite-checkbox id=\"first-name\" name=\"first-name\"></calcite-checkbox>\n```\n",
        "Checked-with-calcite-label": "```html\n<calcite-label layout=\"inline\" for=\"checked-item\">\n  To do\n  <calcite-checkbox checked id=\"checked-item\" name=\"checked-item\"></calcite-checkbox>\n</calcite-label>\n```\n",
        "Indeterminate-with-native-label": "```html\n<calcite-label for=\"checked-indeterminate\">Status</calcite-label>\n<calcite-checkbox checked indeterminate id=\"checked-indeterminate\" name=\"checked-indeterminate\"></calcite-checkbox>\n```\n"
      },
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "When `true`, the component is checked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "form",
          "reflectToAttr": true,
          "docs": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "guid",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "guid",
          "reflectToAttr": true,
          "docs": "The `id` attribute of the component. When omitted, a globally unique identifier is used.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "indeterminate",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "indeterminate",
          "reflectToAttr": true,
          "docs": "When `true`, the component is initially indeterminate, which is independent from its `checked` value.\n\nThe state is visual only, and can look different across browsers.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[indeterminate](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#indeterminate_state_checkboxes)"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "When `true`, the component must have a value in order for the form to submit.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "status",
          "type": "\"idle\" | \"invalid\" | \"valid\"",
          "complexType": {
            "original": "Status",
            "resolved": "\"idle\" | \"invalid\" | \"valid\"",
            "references": {
              "Status": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Status"
              }
            }
          },
          "mutable": false,
          "attr": "status",
          "reflectToAttr": true,
          "docs": "Specifies the status of the input field, which determines message and icons.",
          "docsTags": [],
          "default": "\"idle\"",
          "values": [
            {
              "value": "idle",
              "type": "string"
            },
            {
              "value": "invalid",
              "type": "string"
            },
            {
              "value": "valid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's value.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteCheckboxChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component's `checked` status changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-checkbox-size",
          "annotation": "prop",
          "docs": "Specifies the component's height and width."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-card",
        "calcite-tile-select",
        "calcite-tree-item"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-card": [
          "calcite-checkbox"
        ],
        "calcite-tile-select": [
          "calcite-checkbox"
        ],
        "calcite-tree-item": [
          "calcite-checkbox"
        ]
      }
    },
    {
      "filePath": "src/components/chip/chip.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-chip",
      "readme": "# calcite-chip\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding text."
        },
        {
          "name": "slot",
          "text": "image - A slot for adding an image."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-chip value=\"Global\" closable icon=\"globe\" appearance=\"outline\" kind=\"brand\">Global</calcite-chip>\n```\n"
      },
      "props": [
        {
          "name": "appearance",
          "type": "\"outline\" | \"outline-fill\" | \"solid\"",
          "complexType": {
            "original": "Extract<\"outline\" | \"outline-fill\" | \"solid\", Appearance>",
            "resolved": "\"outline\" | \"outline-fill\" | \"solid\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Appearance": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Appearance"
              }
            }
          },
          "mutable": false,
          "attr": "appearance",
          "reflectToAttr": true,
          "docs": "Specifies the appearance style of the component.",
          "docsTags": [],
          "default": "\"solid\"",
          "values": [
            {
              "value": "outline",
              "type": "string"
            },
            {
              "value": "outline-fill",
              "type": "string"
            },
            {
              "value": "solid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "closable",
          "reflectToAttr": true,
          "docs": "When `true`, a close button is added to the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "closed",
          "reflectToAttr": true,
          "docs": "When `true`, hides the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "kind",
          "type": "\"brand\" | \"inverse\" | \"neutral\"",
          "complexType": {
            "original": "Extract<\"brand\" | \"inverse\" | \"neutral\", Kind>",
            "resolved": "\"brand\" | \"inverse\" | \"neutral\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Kind": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Kind"
              }
            }
          },
          "mutable": false,
          "attr": "kind",
          "reflectToAttr": true,
          "docs": "Specifies the kind of the component, which will apply to border and background if applicable.",
          "docsTags": [],
          "default": "\"neutral\"",
          "values": [
            {
              "value": "brand",
              "type": "string"
            },
            {
              "value": "inverse",
              "type": "string"
            },
            {
              "value": "neutral",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ dismissLabel?: string; }",
          "complexType": {
            "original": "Partial<ChipMessages>",
            "resolved": "{ dismissLabel?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "ChipMessages": {
                "location": "import",
                "path": "./assets/chip/t9n",
                "id": "src/components/chip/assets/chip/t9n/index.d.ts::ChipMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ dismissLabel?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component. When contained in a parent `calcite-chip-group` inherits the parent's `scale` value.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "When `true`, the component is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's value.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteChipClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component's close button is selected.",
          "docsTags": []
        },
        {
          "event": "calciteChipSelect",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the selected state of the component changes.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "click",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding text."
        },
        {
          "name": "image",
          "docs": "A slot for adding an image."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-alert",
        "calcite-combobox",
        "calcite-rating",
        "calcite-table"
      ],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-chip": [
          "calcite-icon"
        ],
        "calcite-alert": [
          "calcite-chip"
        ],
        "calcite-combobox": [
          "calcite-chip"
        ],
        "calcite-rating": [
          "calcite-chip"
        ],
        "calcite-table": [
          "calcite-chip"
        ]
      }
    },
    {
      "filePath": "src/components/chip-group/chip-group.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-chip-group",
      "readme": "# calcite-chip-group\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding one or more `calcite-chip`s."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-chip-group label=\"Basemaps\">\n  <calcite-chip value=\"topographic\">Topographic</calcite-chip>\n  <calcite-chip value=\"navigation\">Navigation</calcite-chip>\n  <calcite-chip value=\"streets\">Streets</calcite-chip>\n  <calcite-chip value=\"imagery\">Imagery</calcite-chip>\n</calcite-chip-group>\n```\n",
        "SinglePersist": "```html\n<calcite-chip-group label=\"Basemaps\" selection-mode=\"single-persist\">\n  <calcite-chip value=\"topographic\" selected>Topographic</calcite-chip>\n  <calcite-chip value=\"navigation\">Navigation</calcite-chip>\n  <calcite-chip value=\"streets\">Streets</calcite-chip>\n  <calcite-chip value=\"imagery\">Imagery</calcite-chip>\n</calcite-chip-group>\n```\n"
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component. Child `calcite-chip`s inherit the component's value.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedItems",
          "type": "HTMLCalciteChipElement[]",
          "complexType": {
            "original": "HTMLCalciteChipElement[]",
            "resolved": "HTMLCalciteChipElement[]",
            "references": {
              "HTMLCalciteChipElement": {
                "location": "global",
                "id": "global::HTMLCalciteChipElement"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Specifies the component's selected items.",
          "docsTags": [
            {
              "name": "readonly"
            }
          ],
          "default": "[]",
          "values": [
            {
              "type": "HTMLCalciteChipElement[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "\"multiple\" | \"none\" | \"single\" | \"single-persist\"",
          "complexType": {
            "original": "Extract<\n    \"multiple\" | \"single\" | \"single-persist\" | \"none\",\n    SelectionMode\n  >",
            "resolved": "\"multiple\" | \"none\" | \"single\" | \"single-persist\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "SelectionMode": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::SelectionMode"
              }
            }
          },
          "mutable": false,
          "attr": "selection-mode",
          "reflectToAttr": true,
          "docs": "Specifies the selection mode of the component, where:\n\n`\"multiple\"` allows any number of selections,\n\n`\"single\"` allows only one selection,\n\n`\"single-persist\"` allows one selection and prevents de-selection, and\n\n`\"none\"` does not allow any selections.",
          "docsTags": [],
          "default": "\"none\"",
          "values": [
            {
              "value": "multiple",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "single",
              "type": "string"
            },
            {
              "value": "single-persist",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component's first focusable element.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteChipGroupSelect",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component's selection changes.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteInternalChipKeyEvent",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteChipClose",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteChipSelect",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding one or more `calcite-chip`s."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/color-picker/color-picker.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-color-picker",
      "readme": "# calcite-color-picker\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "Basic": "```html\n<calcite-color-picker dir=\"ltr\" scale=\"m\" value=\"#b33f33\"></calcite-color-picker>\n```\n"
      },
      "props": [
        {
          "name": "allowEmpty",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "allow-empty",
          "reflectToAttr": true,
          "docs": "When `true`, an empty color (`null`) will be allowed as a `value`.\n\nWhen `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "alphaChannel",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "alpha-channel",
          "reflectToAttr": false,
          "docs": "When `true`, the component will allow updates to the color's alpha value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "channelsDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "channels-disabled",
          "reflectToAttr": false,
          "docs": "When `true`, hides the RGB/HSV channel inputs.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "format",
          "type": "\"auto\" | \"hex\" | \"hexa\" | \"hsl\" | \"hsl-css\" | \"hsla\" | \"hsla-css\" | \"hsv\" | \"hsva\" | \"rgb\" | \"rgb-css\" | \"rgba\" | \"rgba-css\"",
          "complexType": {
            "original": "Format",
            "resolved": "\"auto\" | \"hex\" | \"hexa\" | \"hsl\" | \"hsl-css\" | \"hsla\" | \"hsla-css\" | \"hsv\" | \"hsva\" | \"rgb\" | \"rgb-css\" | \"rgba\" | \"rgba-css\"",
            "references": {
              "Format": {
                "location": "import",
                "path": "./utils",
                "id": "src/components/color-picker/utils.ts::Format"
              }
            }
          },
          "mutable": false,
          "attr": "format",
          "reflectToAttr": true,
          "docs": "The format of `value`.\n\nWhen `\"auto\"`, the format will be inferred from `value` when set.",
          "docsTags": [
            {
              "name": "default",
              "text": "\"auto\""
            }
          ],
          "default": "\"auto\"",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "hex",
              "type": "string"
            },
            {
              "value": "hexa",
              "type": "string"
            },
            {
              "value": "hsl",
              "type": "string"
            },
            {
              "value": "hsl-css",
              "type": "string"
            },
            {
              "value": "hsla",
              "type": "string"
            },
            {
              "value": "hsla-css",
              "type": "string"
            },
            {
              "value": "hsv",
              "type": "string"
            },
            {
              "value": "hsva",
              "type": "string"
            },
            {
              "value": "rgb",
              "type": "string"
            },
            {
              "value": "rgb-css",
              "type": "string"
            },
            {
              "value": "rgba",
              "type": "string"
            },
            {
              "value": "rgba-css",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hexDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hex-disabled",
          "reflectToAttr": false,
          "docs": "When `true`, hides the hex input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideChannels",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-channels",
          "reflectToAttr": true,
          "docs": "When `true`, hides the RGB/HSV channel inputs.",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "use `channelsDisabled` instead"
            }
          ],
          "default": "false",
          "deprecation": "use `channelsDisabled` instead",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideHex",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-hex",
          "reflectToAttr": true,
          "docs": "When `true`, hides the hex input.",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "use `hexDisabled` instead"
            }
          ],
          "default": "false",
          "deprecation": "use `hexDisabled` instead",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideSaved",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-saved",
          "reflectToAttr": true,
          "docs": "When `true`, hides the saved colors section.",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "use `savedDisabled` instead"
            }
          ],
          "default": "false",
          "deprecation": "use `savedDisabled` instead",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ b?: string; blue?: string; deleteColor?: string; g?: string; green?: string; h?: string; hsv?: string; hex?: string; hue?: string; noColor?: string; opacity?: string; r?: string; red?: string; rgb?: string; s?: string; saturation?: string; saveColor?: string; saved?: string; v?: string; value?: string; }",
          "complexType": {
            "original": "Partial<ColorPickerMessages>",
            "resolved": "{ b?: string; blue?: string; deleteColor?: string; g?: string; green?: string; h?: string; hsv?: string; hex?: string; hue?: string; noColor?: string; opacity?: string; r?: string; red?: string; rgb?: string; s?: string; saturation?: string; saveColor?: string; saved?: string; v?: string; value?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "ColorPickerMessages": {
                "location": "import",
                "path": "./assets/color-picker/t9n",
                "id": "src/components/color-picker/assets/color-picker/t9n/index.d.ts::ColorPickerMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ b?: string; blue?: string; deleteColor?: string; g?: string; green?: string; h?: string; hsv?: string; hex?: string; hue?: string; noColor?: string; opacity?: string; r?: string; red?: string; rgb?: string; s?: string; saturation?: string; saveColor?: string; saved?: string; v?: string; value?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberingSystem",
          "type": "\"arab\" | \"arabext\" | \"latn\"",
          "complexType": {
            "original": "NumberingSystem",
            "resolved": "\"arab\" | \"arabext\" | \"latn\"",
            "references": {
              "NumberingSystem": {
                "location": "import",
                "path": "../../utils/locale",
                "id": "src/utils/locale.ts::NumberingSystem"
              }
            }
          },
          "mutable": false,
          "attr": "numbering-system",
          "reflectToAttr": true,
          "docs": "Specifies the Unicode numeral system used by the component for localization.",
          "docsTags": [],
          "values": [
            {
              "value": "arab",
              "type": "string"
            },
            {
              "value": "arabext",
              "type": "string"
            },
            {
              "value": "latn",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "savedDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "saved-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, hides the saved colors section.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "storageId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "storage-id",
          "reflectToAttr": true,
          "docs": "Specifies the storage ID for colors.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "HSL | HSL & ObjectWithAlpha | HSV | HSV & ObjectWithAlpha | RGB | RGB & ObjectWithAlpha | string",
          "complexType": {
            "original": "ColorValue | null",
            "resolved": "HSL | HSL & ObjectWithAlpha | HSV | HSV & ObjectWithAlpha | RGB | RGB & ObjectWithAlpha | string",
            "references": {
              "ColorValue": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/color-picker/interfaces.ts::ColorValue"
              }
            }
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's value, where the value can be a CSS color string, or a RGB, HSL or HSV object.\n\nThe type will be preserved as the color is updated.",
          "docsTags": [
            {
              "name": "default",
              "text": "\"#007ac2\""
            },
            {
              "name": "see",
              "text": "[CSS Color](https://developer.mozilla.org/en-US/docs/Web/CSS/color)"
            },
            {
              "name": "see",
              "text": "[ColorValue](https://github.com/Esri/calcite-design-system/blob/main/src/components/color-picker/interfaces.ts#L10)"
            }
          ],
          "default": "normalizeHex(\n    hexify(DEFAULT_COLOR, this.alphaChannel),\n  )",
          "values": [
            {
              "type": "HSL"
            },
            {
              "type": "HSL & ObjectWithAlpha"
            },
            {
              "type": "HSV"
            },
            {
              "type": "HSV & ObjectWithAlpha"
            },
            {
              "type": "RGB"
            },
            {
              "type": "RGB & ObjectWithAlpha"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component's first focusable element.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteColorPickerChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the color value has changed.",
          "docsTags": []
        },
        {
          "event": "calciteColorPickerInput",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires as the color value changes.\n\nSimilar to the `calciteColorPickerChange` event with the exception of dragging. When dragging the color field or hue slider thumb, this event fires as the thumb is moved.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": true,
          "passive": false
        },
        {
          "event": "keyup",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-tab-title",
        "calcite-tab",
        "calcite-input-number",
        "calcite-color-picker-swatch",
        "calcite-color-picker-hex-input",
        "calcite-tabs",
        "calcite-tab-nav",
        "calcite-button"
      ],
      "dependencyGraph": {
        "calcite-color-picker": [
          "calcite-tab-title",
          "calcite-tab",
          "calcite-input-number",
          "calcite-color-picker-swatch",
          "calcite-color-picker-hex-input",
          "calcite-tabs",
          "calcite-tab-nav",
          "calcite-button"
        ],
        "calcite-tab-title": [
          "calcite-icon"
        ],
        "calcite-input-number": [
          "calcite-progress",
          "calcite-icon",
          "calcite-input-message"
        ],
        "calcite-input-message": [
          "calcite-icon"
        ],
        "calcite-color-picker-hex-input": [
          "calcite-input-text",
          "calcite-input-number"
        ],
        "calcite-input-text": [
          "calcite-progress",
          "calcite-icon",
          "calcite-input-message"
        ],
        "calcite-button": [
          "calcite-loader",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/color-picker-hex-input/color-picker-hex-input.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-color-picker-hex-input",
      "readme": "# calcite-hex-input\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "allowEmpty",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "allow-empty",
          "reflectToAttr": false,
          "docs": "When `true`, an empty color (`null`) will be allowed as a `value`.\n\nWhen `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "alphaChannel",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "alpha-channel",
          "reflectToAttr": false,
          "docs": "When `true`, the component will allow updates to the color's alpha value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hexLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hex-label",
          "reflectToAttr": false,
          "docs": "Specifies accessible label for the input field.",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "use `messages` instead"
            }
          ],
          "default": "\"Hex\"",
          "deprecation": "use `messages` instead",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberingSystem",
          "type": "\"arab\" | \"arabext\" | \"latn\"",
          "complexType": {
            "original": "NumberingSystem",
            "resolved": "\"arab\" | \"arabext\" | \"latn\"",
            "references": {
              "NumberingSystem": {
                "location": "import",
                "path": "../../utils/locale",
                "id": "src/utils/locale.ts::NumberingSystem"
              }
            }
          },
          "mutable": false,
          "attr": "numbering-system",
          "reflectToAttr": false,
          "docs": "Specifies the Unicode numeral system used by the component for localization.",
          "docsTags": [],
          "values": [
            {
              "value": "arab",
              "type": "string"
            },
            {
              "value": "arabext",
              "type": "string"
            },
            {
              "value": "latn",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "The hex value.",
          "docsTags": [],
          "default": "normalizeHex(\n    hexify(DEFAULT_COLOR, this.alphaChannel),\n    this.alphaChannel,\n    true,\n  )",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteColorPickerHexInputChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Emitted when the hex value changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-color-picker"
      ],
      "dependencies": [
        "calcite-input-text",
        "calcite-input-number"
      ],
      "dependencyGraph": {
        "calcite-color-picker-hex-input": [
          "calcite-input-text",
          "calcite-input-number"
        ],
        "calcite-input-text": [
          "calcite-progress",
          "calcite-icon",
          "calcite-input-message"
        ],
        "calcite-input-message": [
          "calcite-icon"
        ],
        "calcite-input-number": [
          "calcite-progress",
          "calcite-icon",
          "calcite-input-message"
        ],
        "calcite-color-picker": [
          "calcite-color-picker-hex-input"
        ]
      }
    },
    {
      "filePath": "src/components/color-picker-swatch/color-picker-swatch.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-color-picker-swatch",
      "readme": "# calcite-color-picker-swatch\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "When `true`, the component is active.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "string",
          "complexType": {
            "original": "string | null",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "The color value.",
          "docsTags": [
            {
              "name": "see",
              "text": "https://developer.mozilla.org/en-US/docs/Web/CSS/color_value"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-color-picker"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-color-picker": [
          "calcite-color-picker-swatch"
        ]
      }
    },
    {
      "filePath": "src/components/combobox/combobox.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-combobox",
      "readme": "# calcite-combobox\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-combobox-item`s."
        }
      ],
      "usage": {
        "Ancestors": "```html\n<calcite-combobox label=\"Ancestors selection-mode combobox\" selection-mode=\"ancestors\">\n  <calcite-combobox-item value=\"Trees\" text-label=\"Trees\">\n    <calcite-combobox-item\n      value=\"CommercialDamageAssessment - Damage to Commercial Buildings & Damage to Commercial Buildings\"\n      text-label=\"CommercialDamageAssessment - Damage to Commercial Buildings & Damage to Commercial Buildings\"\n      selected\n    ></calcite-combobox-item>\n    <calcite-combobox-item value=\"Sequoia\" disabled text-label=\"Sequoia\"></calcite-combobox-item>\n    <calcite-combobox-item value=\"Douglas Fir\" text-label=\"Douglas Fir\"></calcite-combobox-item>\n  </calcite-combobox-item>\n</calcite-combobox>\n```\n",
        "Multiple": "```html\n<calcite-combobox label=\"Mulit selection-mode combobox\" selection-mode=\"multiple\">\n  <calcite-combobox-item value=\"Trees\" text-label=\"Trees\">\n    <calcite-combobox-item\n      value=\"CommercialDamageAssessment - Damage to Commercial Buildings & Damage to Commercial Buildings\"\n      text-label=\"CommercialDamageAssessment - Damage to Commercial Buildings & Damage to Commercial Buildings\"\n      selected\n    ></calcite-combobox-item>\n    <calcite-combobox-item value=\"Sequoia\" disabled text-label=\"Sequoia\"></calcite-combobox-item>\n    <calcite-combobox-item value=\"Douglas Fir\" text-label=\"Douglas Fir\"></calcite-combobox-item>\n  </calcite-combobox-item>\n</calcite-combobox>\n```\n",
        "Single": "```html\n<calcite-combobox label=\"Single selection-mode combobox\" selection-mode=\"single\">\n  <calcite-combobox-item value=\"Trees\" text-label=\"Trees\">\n    <calcite-combobox-item\n      value=\"CommercialDamageAssessment - Damage to Commercial Buildings\"\n      text-label=\"CommercialDamageAssessment - Damage to Commercial Buildings\"\n      selected\n    ></calcite-combobox-item>\n    <calcite-combobox-item value=\"Sequoia\" disabled text-label=\"Sequoia\"></calcite-combobox-item>\n    <calcite-combobox-item value=\"Douglas Fir\" text-label=\"Douglas Fir\"></calcite-combobox-item>\n  </calcite-combobox-item>\n  <calcite-combobox-item value=\"Rivers\" text-label=\"Rivers\"></calcite-combobox-item>\n</calcite-combobox>\n```\n",
        "SinglePersist": "```html\n<calcite-combobox label=\"Single selection-mode combobox\" selection-mode=\"single-persist\">\n  <calcite-combobox-item value=\"Trees\" text-label=\"Trees\">\n    <calcite-combobox-item\n      value=\"CommercialDamageAssessment - Damage to Commercial Buildings\"\n      text-label=\"CommercialDamageAssessment - Damage to Commercial Buildings\"\n      selected\n    ></calcite-combobox-item>\n    <calcite-combobox-item value=\"Sequoia\" disabled text-label=\"Sequoia\"></calcite-combobox-item>\n    <calcite-combobox-item value=\"Douglas Fir\" text-label=\"Douglas Fir\"></calcite-combobox-item>\n  </calcite-combobox-item>\n  <calcite-combobox-item value=\"Rivers\" text-label=\"Rivers\"></calcite-combobox-item>\n</calcite-combobox>\n```\n"
      },
      "props": [
        {
          "name": "allowCustomValues",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "allow-custom-values",
          "reflectToAttr": true,
          "docs": "When `true`, allows entry of custom values, which are not in the original set of items.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clearDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clear-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, the value-clearing will be disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filteredItems",
          "type": "HTMLCalciteComboboxItemElement[]",
          "complexType": {
            "original": "HTMLCalciteComboboxItemElement[]",
            "resolved": "HTMLCalciteComboboxItemElement[]",
            "references": {
              "HTMLCalciteComboboxItemElement": {
                "location": "global",
                "id": "global::HTMLCalciteComboboxItemElement"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Specifies the component's filtered items.",
          "docsTags": [
            {
              "name": "readonly"
            }
          ],
          "default": "[]",
          "values": [
            {
              "type": "HTMLCalciteComboboxItemElement[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "flipPlacements",
          "type": "Placement[]",
          "complexType": {
            "original": "EffectivePlacement[]",
            "resolved": "Placement[]",
            "references": {
              "EffectivePlacement": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::EffectivePlacement"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Defines the available placements that can be used when a flip occurs.",
          "docsTags": [],
          "values": [
            {
              "type": "Placement[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "form",
          "reflectToAttr": true,
          "docs": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "maxItems",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max-items",
          "reflectToAttr": true,
          "docs": "Specifies the maximum number of `calcite-combobox-item`s (including nested children) to display before displaying a scrollbar.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ all?: string; allSelected?: string; clear?: string; removeTag?: string; selected?: string; }",
          "complexType": {
            "original": "Partial<ComboboxMessages>",
            "resolved": "{ all?: string; allSelected?: string; clear?: string; removeTag?: string; selected?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "ComboboxMessages": {
                "location": "import",
                "path": "./assets/combobox/t9n",
                "id": "src/components/combobox/assets/combobox/t9n/index.d.ts::ComboboxMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ all?: string; allSelected?: string; clear?: string; removeTag?: string; selected?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "When `true`, displays and positions the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPositioning",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "OverlayPositioning",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {
              "OverlayPositioning": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::OverlayPositioning"
              }
            }
          },
          "mutable": false,
          "attr": "overlay-positioning",
          "reflectToAttr": true,
          "docs": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
          "docsTags": [],
          "default": "\"absolute\"",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Specifies the placeholder text for the input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholderIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder-icon",
          "reflectToAttr": true,
          "docs": "Specifies the placeholder icon for the input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholderIconFlipRtl",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder-icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "When `true`, the component must have a value in order for the form to submit.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedItems",
          "type": "HTMLCalciteComboboxItemElement[]",
          "complexType": {
            "original": "HTMLCalciteComboboxItemElement[]",
            "resolved": "HTMLCalciteComboboxItemElement[]",
            "references": {
              "HTMLCalciteComboboxItemElement": {
                "location": "global",
                "id": "global::HTMLCalciteComboboxItemElement"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Specifies the component's selected items.",
          "docsTags": [
            {
              "name": "readonly"
            }
          ],
          "default": "[]",
          "values": [
            {
              "type": "HTMLCalciteComboboxItemElement[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionDisplay",
          "type": "\"all\" | \"fit\" | \"single\"",
          "complexType": {
            "original": "SelectionDisplay",
            "resolved": "\"all\" | \"fit\" | \"single\"",
            "references": {
              "SelectionDisplay": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/combobox/interfaces.ts::SelectionDisplay"
              }
            }
          },
          "mutable": false,
          "attr": "selection-display",
          "reflectToAttr": true,
          "docs": "When `selectionMode` is `\"ancestors\"` or `\"multiple\"`, specifies the display of multiple `calcite-combobox-item` selections, where:\n\n`\"all\"` displays all selections with individual `calcite-chip`s,\n\n`\"fit\"` displays individual `calcite-chip`s that scale to the component's size, including a non-closable `calcite-chip`, which provides the number of additional `calcite-combobox-item` selections not visually displayed, and\n\n`\"single\"` displays one `calcite-chip` with the total number of selections.",
          "docsTags": [],
          "default": "\"all\"",
          "values": [
            {
              "value": "all",
              "type": "string"
            },
            {
              "value": "fit",
              "type": "string"
            },
            {
              "value": "single",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "\"ancestors\" | \"multiple\" | \"single\" | \"single-persist\"",
          "complexType": {
            "original": "Extract<\n    \"single\" | \"single-persist\" | \"ancestors\" | \"multiple\",\n    SelectionMode\n  >",
            "resolved": "\"ancestors\" | \"multiple\" | \"single\" | \"single-persist\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "SelectionMode": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::SelectionMode"
              }
            }
          },
          "mutable": false,
          "attr": "selection-mode",
          "reflectToAttr": true,
          "docs": "Specifies the selection mode of the component, where:\n\n`\"multiple\"` allows any number of selections,\n\n`\"single\"` allows only one selection,\n\n`\"single-persist\"` allows one selection and prevents de-selection, and\n\n`\"ancestors\"` allows multiple selections, but shows ancestors of selected items as selected, with only deepest children shown in chips.",
          "docsTags": [],
          "default": "\"multiple\"",
          "values": [
            {
              "value": "ancestors",
              "type": "string"
            },
            {
              "value": "multiple",
              "type": "string"
            },
            {
              "value": "single",
              "type": "string"
            },
            {
              "value": "single-persist",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "status",
          "type": "\"idle\" | \"invalid\" | \"valid\"",
          "complexType": {
            "original": "Status",
            "resolved": "\"idle\" | \"invalid\" | \"valid\"",
            "references": {
              "Status": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Status"
              }
            }
          },
          "mutable": false,
          "attr": "status",
          "reflectToAttr": true,
          "docs": "Specifies the status of the input field, which determines message and icons.",
          "docsTags": [],
          "default": "\"idle\"",
          "values": [
            {
              "value": "idle",
              "type": "string"
            },
            {
              "value": "invalid",
              "type": "string"
            },
            {
              "value": "valid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validationIcon",
          "type": "boolean | string",
          "complexType": {
            "original": "string | boolean",
            "resolved": "boolean | string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-icon",
          "reflectToAttr": true,
          "docs": "Specifies the validation icon to display under the component.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validationMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-message",
          "reflectToAttr": false,
          "docs": "Specifies the validation message to display under the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string | string[]",
          "complexType": {
            "original": "string | string[]",
            "resolved": "string | string[]",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's value(s) from the selected `calcite-combobox-item`(s).",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "reposition",
          "returns": {
            "type": "Promise<void>",
            "docs": "Promise"
          },
          "complexType": {
            "signature": "(delayed?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "delayed",
                "type": "boolean",
                "docs": "Reposition the component after a delay"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "reposition(delayed?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "delayed",
              "type": "boolean",
              "docs": "Reposition the component after a delay"
            }
          ],
          "docs": "Updates the position of the component.",
          "docsTags": [
            {
              "name": "param",
              "text": "delayed Reposition the component after a delay"
            },
            {
              "name": "returns",
              "text": "Promise"
            }
          ]
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteComboboxBeforeClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is requested to be closed, and before the closing transition begins.",
          "docsTags": []
        },
        {
          "event": "calciteComboboxBeforeOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
          "docsTags": []
        },
        {
          "event": "calciteComboboxChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the selected item(s) changes.",
          "docsTags": []
        },
        {
          "event": "calciteComboboxChipClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when a selected item in the component is closed via its `calcite-chip`.",
          "docsTags": []
        },
        {
          "event": "calciteComboboxClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is closed and animation is complete.",
          "docsTags": []
        },
        {
          "event": "calciteComboboxFilterChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when text is added to filter the options list.",
          "docsTags": []
        },
        {
          "event": "calciteComboboxOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is open and animation is complete.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "pointerdown",
          "target": "document",
          "capture": false,
          "passive": true
        },
        {
          "event": "calciteComboboxItemChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--calcite-combobox-input-height",
          "annotation": "prop",
          "docs": "Specifies the height of the component's input."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-combobox-item`s."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-input-time-zone"
      ],
      "dependencies": [
        "calcite-combobox-item",
        "calcite-chip",
        "calcite-icon",
        "calcite-input-message"
      ],
      "dependencyGraph": {
        "calcite-combobox": [
          "calcite-combobox-item",
          "calcite-chip",
          "calcite-icon",
          "calcite-input-message"
        ],
        "calcite-combobox-item": [
          "calcite-icon"
        ],
        "calcite-chip": [
          "calcite-icon"
        ],
        "calcite-input-message": [
          "calcite-icon"
        ],
        "calcite-input-time-zone": [
          "calcite-combobox"
        ]
      }
    },
    {
      "filePath": "src/components/combobox-item/combobox-item.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-combobox-item",
      "readme": "# calcite-combobox-item\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding nested `calcite-combobox-item`s."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "When `true`, the component is active.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "ancestors",
          "type": "ComboboxChildElement[]",
          "complexType": {
            "original": "ComboboxChildElement[]",
            "resolved": "ComboboxChildElement[]",
            "references": {
              "ComboboxChildElement": {
                "location": "import",
                "path": "../combobox/interfaces",
                "id": "src/components/combobox/interfaces.ts::ComboboxChildElement"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Specifies the parent and grandparent items, which are set on `calcite-combobox`.",
          "docsTags": [],
          "values": [
            {
              "type": "ComboboxChildElement[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "filter-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, omits the component from the `calcite-combobox` filtered search results.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "guid",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "guid",
          "reflectToAttr": true,
          "docs": "The `id` attribute of the component. When omitted, a globally unique identifier is used.",
          "docsTags": [],
          "default": "guid()",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "When `true`, the component is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-label",
          "reflectToAttr": true,
          "docs": "The component's text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's value.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteComboboxItemChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires whenever the component is selected or unselected.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding nested `calcite-combobox-item`s."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-combobox",
        "calcite-input-time-zone"
      ],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-combobox-item": [
          "calcite-icon"
        ],
        "calcite-combobox": [
          "calcite-combobox-item"
        ],
        "calcite-input-time-zone": [
          "calcite-combobox-item"
        ]
      }
    },
    {
      "filePath": "src/components/combobox-item-group/combobox-item-group.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-combobox-item-group",
      "readme": "# calcite-combobox-item-group\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-combobox-item`s."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "ancestors",
          "type": "ComboboxChildElement[]",
          "complexType": {
            "original": "ComboboxChildElement[]",
            "resolved": "ComboboxChildElement[]",
            "references": {
              "ComboboxChildElement": {
                "location": "import",
                "path": "../combobox/interfaces",
                "id": "src/components/combobox/interfaces.ts::ComboboxChildElement"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Specifies the parent and grandparent `calcite-combobox-item`s, which are set on `calcite-combobox`.",
          "docsTags": [],
          "values": [
            {
              "type": "ComboboxChildElement[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Specifies the title of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-combobox-item`s."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/date-picker/date-picker.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-date-picker",
      "readme": "# calcite-date-picker\n\nThe `calcite-date-picker` component allows for selecting a date via a calendar or text input. It supports multiple locales, languages, right to left, and is fully keyboard accessible.\n",
      "docs": "The `calcite-date-picker` component allows for selecting a date via a calendar or text input. It supports multiple locales, languages, right to left, and is fully keyboard accessible.",
      "docsTags": [],
      "usage": {
        "Basic": "You can set a min and max range, as well as an initial value with ISO 8601 formatted strings:\n\n```html\n<calcite-date-picker value=\"2020-03-27\" min=\"2020-02-01\" max=\"2021-01-01\"></calcite-date-picker>\n```\n",
        "Range": "You can also add range property to activate date range mode. In this mode, you will have to set the value property directly on the component's instance to an array of date strings.\n\n```html\n<calcite-date-picker min=\"2020-01-01\" max=\"2021-01-31\" range />\n```\n\n```js\ndocument.querySelector(\"calcite-date-picker\").value = [\"2020-01-03\", \"2020-01-05\"];\n```\n"
      },
      "props": [
        {
          "name": "activeDate",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Specifies the component's active date.",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "activeRange",
          "type": "\"end\" | \"start\"",
          "complexType": {
            "original": "\"start\" | \"end\"",
            "resolved": "\"end\" | \"start\"",
            "references": {}
          },
          "mutable": false,
          "attr": "active-range",
          "reflectToAttr": true,
          "docs": "When `range` is true, specifies the active `range`. Where `\"start\"` specifies the starting range date and `\"end\"` the ending range date.",
          "docsTags": [],
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "complexType": {
            "original": "HeadingLevel",
            "resolved": "1 | 2 | 3 | 4 | 5 | 6",
            "references": {
              "HeadingLevel": {
                "location": "import",
                "path": "../functional/Heading",
                "id": "src/components/functional/Heading.tsx::HeadingLevel"
              }
            }
          },
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": true,
          "docs": "Specifies the number at which section headings should start.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": true,
          "docs": "Specifies the latest allowed date (`\"yyyy-mm-dd\"`).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxAsDate",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Specifies the latest allowed date as a full date object (`new Date(\"yyyy-mm-dd\")`).",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ nextMonth?: string; prevMonth?: string; year?: string; }",
          "complexType": {
            "original": "Partial<DatePickerMessages>",
            "resolved": "{ nextMonth?: string; prevMonth?: string; year?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "DatePickerMessages": {
                "location": "import",
                "path": "./assets/date-picker/t9n",
                "id": "src/components/date-picker/assets/date-picker/t9n/index.d.ts::DatePickerMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ nextMonth?: string; prevMonth?: string; year?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": true,
          "docs": "Specifies the earliest allowed date (`\"yyyy-mm-dd\"`).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minAsDate",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Specifies the earliest allowed date as a full date object (`new Date(\"yyyy-mm-dd\")`).",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberingSystem",
          "type": "\"arab\" | \"arabext\" | \"latn\"",
          "complexType": {
            "original": "NumberingSystem",
            "resolved": "\"arab\" | \"arabext\" | \"latn\"",
            "references": {
              "NumberingSystem": {
                "location": "import",
                "path": "../../utils/locale",
                "id": "src/utils/locale.ts::NumberingSystem"
              }
            }
          },
          "mutable": false,
          "attr": "numbering-system",
          "reflectToAttr": true,
          "docs": "Specifies the Unicode numeral system used by the component for localization. This property cannot be dynamically changed.",
          "docsTags": [],
          "values": [
            {
              "value": "arab",
              "type": "string"
            },
            {
              "value": "arabext",
              "type": "string"
            },
            {
              "value": "latn",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "proximitySelectionDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "proximity-selection-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, disables the default behavior on the third click of narrowing or extending the range and instead starts a new range.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "range",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "range",
          "reflectToAttr": true,
          "docs": "When `true`, activates the component's range mode to allow a start and end date.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "\"s\" | \"m\" | \"l\"",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {}
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string | string[]",
          "complexType": {
            "original": "string | string[]",
            "resolved": "string | string[]",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Specifies the selected date as a string (`\"yyyy-mm-dd\"`), or an array of strings for `range` values (`[\"yyyy-mm-dd\", \"yyyy-mm-dd\"]`).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valueAsDate",
          "type": "Date | Date[]",
          "complexType": {
            "original": "Date | Date[]",
            "resolved": "Date | Date[]",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Specifies the selected date as a full date object (`new Date(\"yyyy-mm-dd\")`), or an array containing full date objects (`[new Date(\"yyyy-mm-dd\"), new Date(\"yyyy-mm-dd\")]`).",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            },
            {
              "type": "Date[]"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component's first focusable element.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteDatePickerChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when a user changes the component's date. For `range` events, use `calciteDatePickerRangeChange`.",
          "docsTags": []
        },
        {
          "event": "calciteDatePickerRangeChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when a user changes the component's date `range`. For components without `range` use `calciteDatePickerChange`.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-input-date-picker"
      ],
      "dependencies": [
        "calcite-date-picker-month-header",
        "calcite-date-picker-month"
      ],
      "dependencyGraph": {
        "calcite-date-picker": [
          "calcite-date-picker-month-header",
          "calcite-date-picker-month"
        ],
        "calcite-date-picker-month-header": [
          "calcite-icon"
        ],
        "calcite-date-picker-month": [
          "calcite-date-picker-day"
        ],
        "calcite-input-date-picker": [
          "calcite-date-picker"
        ]
      }
    },
    {
      "filePath": "src/components/date-picker-day/date-picker-day.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-date-picker-day",
      "readme": "# calcite-date-day\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "When `true`, the component is active.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "currentMonth",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "current-month",
          "reflectToAttr": true,
          "docs": "Date is in the current month.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "day",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "day",
          "reflectToAttr": false,
          "docs": "Day of the month to be shown.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "endOfRange",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "end-of-range",
          "reflectToAttr": true,
          "docs": "Date is the end of date range.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "highlighted",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "highlighted",
          "reflectToAttr": true,
          "docs": "Date is currently highlighted as part of the range,",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "range",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "range",
          "reflectToAttr": true,
          "docs": "When `true`, activates the component's range mode to allow a start and end date.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rangeHover",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "range-hover",
          "reflectToAttr": true,
          "docs": "Date is being hovered and within the set range.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "When `true`, the component is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "startOfRange",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "start-of-range",
          "reflectToAttr": true,
          "docs": "Date is the start of date range.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The component's value.",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteDaySelect",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when user selects day.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "pointerover",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-date-picker-month"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-date-picker-month": [
          "calcite-date-picker-day"
        ]
      }
    },
    {
      "filePath": "src/components/date-picker-month/date-picker-month.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-date-picker-month",
      "readme": "# calcite-date-month\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "activeDate",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The currently active Date.",
          "docsTags": [],
          "default": "new Date()",
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "endDate",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "End date currently active.",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hoverRange",
          "type": "HoverRange",
          "complexType": {
            "original": "HoverRange",
            "resolved": "HoverRange",
            "references": {
              "HoverRange": {
                "location": "import",
                "path": "../../utils/date",
                "id": "src/utils/date.ts::HoverRange"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The range of dates currently being hovered.",
          "docsTags": [],
          "values": [
            {
              "type": "HoverRange"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Specifies the latest allowed date (`\"yyyy-mm-dd\"`).",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Specifies the earliest allowed date (`\"yyyy-mm-dd\"`).",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedDate",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Already selected date.",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "startDate",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Start date currently active.",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "pointerout",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-date-picker"
      ],
      "dependencies": [
        "calcite-date-picker-day"
      ],
      "dependencyGraph": {
        "calcite-date-picker-month": [
          "calcite-date-picker-day"
        ],
        "calcite-date-picker": [
          "calcite-date-picker-month"
        ]
      }
    },
    {
      "filePath": "src/components/date-picker-month-header/date-picker-month-header.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-date-picker-month-header",
      "readme": "# calcite-date-month-header\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "activeDate",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The focused date is indicated and will become the selected date if the user proceeds.",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "complexType": {
            "original": "HeadingLevel",
            "resolved": "1 | 2 | 3 | 4 | 5 | 6",
            "references": {
              "HeadingLevel": {
                "location": "import",
                "path": "../functional/Heading",
                "id": "src/components/functional/Heading.tsx::HeadingLevel"
              }
            }
          },
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": false,
          "docs": "Specifies the number at which section headings should start.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "localeData",
          "type": "DateLocaleData",
          "complexType": {
            "original": "DateLocaleData",
            "resolved": "DateLocaleData",
            "references": {
              "DateLocaleData": {
                "location": "import",
                "path": "../date-picker/utils",
                "id": "src/components/date-picker/utils.ts::DateLocaleData"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "CLDR locale data for translated calendar info.",
          "docsTags": [],
          "values": [
            {
              "type": "DateLocaleData"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Specifies the latest allowed date (`\"yyyy-mm-dd\"`).",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Specifies the earliest allowed date (`\"yyyy-mm-dd\"`).",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedDate",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Already selected date.",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-date-picker"
      ],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-date-picker-month-header": [
          "calcite-icon"
        ],
        "calcite-date-picker": [
          "calcite-date-picker-month-header"
        ]
      }
    },
    {
      "filePath": "src/components/dropdown/dropdown.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-dropdown",
      "readme": "# calcite-dropdown\n\nA `calcite-dropdown` can be used to provide an absolutely positioned set of selectable items. You can combine multiple groups of items and selection modes, and optionally pass a title for each group. Every `calcite-dropdown-item` must have a parent `calcite-dropdown-group`, even if the `groupTitle` property is not set.\n",
      "docs": "A `calcite-dropdown` can be used to provide an absolutely positioned set of selectable items. You can combine multiple groups of items and selection modes, and optionally pass a title for each group. Every `calcite-dropdown-item` must have a parent `calcite-dropdown-group`, even if the `groupTitle` property is not set.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-dropdown-group` elements. Every `calcite-dropdown-item` must have a parent `calcite-dropdown-group`, even if the `groupTitle` property is not set."
        },
        {
          "name": "slot",
          "text": "trigger - A slot for the element that triggers the `calcite-dropdown`."
        }
      ],
      "usage": {
        "Basic": "Every `calcite-dropdown-item` must have a parent `calcite-dropdown-group`.\n\n```html\n<calcite-dropdown>\n  <calcite-button slot=\"trigger\">Choose a fruit</calcite-button>\n  <calcite-dropdown-group>\n    <calcite-dropdown-item>Apple</calcite-dropdown-item>\n    <calcite-dropdown-item selected>Orange</calcite-dropdown-item>\n    <calcite-dropdown-item>Banana</calcite-dropdown-item>\n  </calcite-dropdown-group>\n</calcite-dropdown>\n```\n",
        "Disabling-close-on-select": "You can choose to leave the Dropdown open when an item is selected with the `close-on-select-disabled` attribute. Note that this will only apply when the `calcite-dropdown-group`'s `selectionMode` is set to `\"single\"` or `\"multiple\"`. Dropdowns will always close when the `calcite-dropdown-group`'s `selectionMode` is `\"none\"`.\n\n```html\n<calcite-dropdown close-on-select-disabled>\n  <calcite-button id=\"trigger\" slot=\"trigger\">Choose a fruit</calcite-button>\n  <calcite-dropdown-group id=\"fruits\" selection-mode=\"single\">\n    <calcite-dropdown-item id=\"apple\">Apple</calcite-dropdown-item>\n    <calcite-dropdown-item id=\"orange\" selected>Orange</calcite-dropdown-item>\n    <calcite-dropdown-item id=\"banana\">Banana</calcite-dropdown-item>\n  </calcite-dropdown-group>\n</calcite-dropdown>\n```\n",
        "Groups": "You can combine groups in a single Dropdown, with different `selectionMode`s:\n\n```html\n<calcite-dropdown>\n  <calcite-button slot=\"trigger\">Add to cart</calcite-button>\n  <calcite-dropdown-group group-title=\"Select one fruit\">\n    <calcite-dropdown-item>Apple</calcite-dropdown-item>\n    <calcite-dropdown-item selected>Orange</calcite-dropdown-item>\n    <calcite-dropdown-item>Banana</calcite-dropdown-item>\n  </calcite-dropdown-group>\n  <calcite-dropdown-group group-title=\"Select multiple vegetables\" selection-mode=\"multiple\">\n    <calcite-dropdown-item>Asparagus</calcite-dropdown-item>\n    <calcite-dropdown-item selected>Potato</calcite-dropdown-item>\n    <calcite-dropdown-item>Yam</calcite-dropdown-item>\n  </calcite-dropdown-group>\n  <calcite-dropdown-group group-title=\"Select none (useful for actions)\" selection-mode=\"none\">\n    <calcite-dropdown-item>Plant beans</calcite-dropdown-item>\n    <calcite-dropdown-item selected>Add peas</calcite-dropdown-item>\n  </calcite-dropdown-group>\n</calcite-dropdown>\n```\n"
      },
      "props": [
        {
          "name": "closeOnSelectDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "close-on-select-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, the component will remain open after a selection is made.\n\nIf the `selectionMode` of the selected `calcite-dropdown-item`'s containing `calcite-dropdown-group` is `\"none\"`, the component will always close.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "flipPlacements",
          "type": "Placement[]",
          "complexType": {
            "original": "EffectivePlacement[]",
            "resolved": "Placement[]",
            "references": {
              "EffectivePlacement": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::EffectivePlacement"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Defines the available placements that can be used when a flip occurs.",
          "docsTags": [],
          "values": [
            {
              "type": "Placement[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxItems",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max-items",
          "reflectToAttr": true,
          "docs": "Specifies the maximum number of `calcite-dropdown-item`s to display before showing a scroller.\nValue must be greater than `0`, and does not include `groupTitle`'s from `calcite-dropdown-group`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "When `true`, displays and positions the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPositioning",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "OverlayPositioning",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {
              "OverlayPositioning": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::OverlayPositioning"
              }
            }
          },
          "mutable": false,
          "attr": "overlay-positioning",
          "reflectToAttr": true,
          "docs": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
          "docsTags": [],
          "default": "\"absolute\"",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "complexType": {
            "original": "MenuPlacement",
            "resolved": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"top\" | \"top-end\" | \"top-start\"",
            "references": {
              "MenuPlacement": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::MenuPlacement"
              }
            }
          },
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": true,
          "docs": "Determines where the component will be positioned relative to the container element.",
          "docsTags": [
            {
              "name": "default",
              "text": "\"bottom-start\""
            }
          ],
          "default": "defaultMenuPlacement",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedItems",
          "type": "HTMLCalciteDropdownItemElement[]",
          "complexType": {
            "original": "HTMLCalciteDropdownItemElement[]",
            "resolved": "HTMLCalciteDropdownItemElement[]",
            "references": {
              "HTMLCalciteDropdownItemElement": {
                "location": "global",
                "id": "global::HTMLCalciteDropdownItemElement"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Specifies the component's selected items.",
          "docsTags": [
            {
              "name": "readonly"
            }
          ],
          "default": "[]",
          "values": [
            {
              "type": "HTMLCalciteDropdownItemElement[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"click\" | \"hover\"",
          "complexType": {
            "original": "\"hover\" | \"click\"",
            "resolved": "\"click\" | \"hover\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "Specifies the action to open the component from the container element.",
          "docsTags": [],
          "default": "\"click\"",
          "values": [
            {
              "value": "click",
              "type": "string"
            },
            {
              "value": "hover",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "widthScale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "width-scale",
          "reflectToAttr": true,
          "docs": "Specifies the width of the component.",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "reposition",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(delayed?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "delayed",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "reposition(delayed?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "delayed",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Updates the position of the component.",
          "docsTags": [
            {
              "name": "param",
              "text": "delayed"
            }
          ]
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component's first focusable element.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteDropdownBeforeClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is requested to be closed and before the closing transition begins.",
          "docsTags": []
        },
        {
          "event": "calciteDropdownBeforeOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
          "docsTags": []
        },
        {
          "event": "calciteDropdownClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is closed and animation is complete.",
          "docsTags": []
        },
        {
          "event": "calciteDropdownOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is open and animation is complete.",
          "docsTags": []
        },
        {
          "event": "calciteDropdownSelect",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when a `calcite-dropdown-item`'s selection changes.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "pointerdown",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "calciteInternalDropdownCloseRequest",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteDropdownOpen",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "pointerenter",
          "capture": false,
          "passive": true
        },
        {
          "event": "pointerleave",
          "capture": false,
          "passive": true
        },
        {
          "event": "calciteInternalDropdownItemKeyEvent",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalDropdownItemSelect",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--calcite-dropdown-width",
          "annotation": "prop",
          "docs": "Specifies the width of the component's wrapper."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-dropdown-group` elements. Every `calcite-dropdown-item` must have a parent `calcite-dropdown-group`, even if the `groupTitle` property is not set."
        },
        {
          "name": "trigger",
          "docs": "A slot for the element that triggers the `calcite-dropdown`."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-split-button"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-split-button": [
          "calcite-dropdown"
        ]
      }
    },
    {
      "filePath": "src/components/dropdown-group/dropdown-group.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-dropdown-group",
      "readme": "# calcite-dropdown-group\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-dropdown-item`s."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "groupTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "group-title",
          "reflectToAttr": true,
          "docs": "Specifies and displays a group title.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "\"multiple\" | \"none\" | \"single\"",
          "complexType": {
            "original": "Extract<\"none\" | \"single\" | \"multiple\", SelectionMode>",
            "resolved": "\"multiple\" | \"none\" | \"single\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "SelectionMode": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::SelectionMode"
              }
            }
          },
          "mutable": false,
          "attr": "selection-mode",
          "reflectToAttr": true,
          "docs": "Specifies the selection mode of the component, where:\n\n`\"multiple\"` allows any number of selections,\n\n`\"single\"` allows only one selection, and\n\n`\"none\"` does not allow any selections.",
          "docsTags": [],
          "default": "\"single\"",
          "values": [
            {
              "value": "multiple",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "single",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "calciteInternalDropdownItemSelect",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-dropdown-item`s."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/dropdown-item/dropdown-item.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-dropdown-item",
      "readme": "# calcite-dropdown-item\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding text."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": true,
          "docs": "Specifies the URL of the linked resource, which can be set as an absolute or relative path.\n\nDetermines if the component will render as an anchor.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconEnd",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-end",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display at the end of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "\"both\" | \"end\" | \"start\"",
          "complexType": {
            "original": "FlipContext",
            "resolved": "\"both\" | \"end\" | \"start\"",
            "references": {
              "FlipContext": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::FlipContext"
              }
            }
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "values": [
            {
              "value": "both",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconStart",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-start",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display at the start of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": true,
          "docs": "Specifies the relationship to the linked document defined in `href`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "When `true`, the component is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": true,
          "docs": "Specifies the frame or window to open the linked document.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteDropdownItemSelect",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is selected.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalDropdownItemChange",
          "target": "body",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding text."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-dropdown-item": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/fab/fab.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-fab",
      "readme": "# calcite-fab\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "Basic": "Renders a `calcite-fab` that displays only an icon and a tooltip label.\n\n```html\n<calcite-fab label=\"Performs my custom action\"></calcite-fab>\n```\n",
        "Loading-and-disabled": "Renders a `calcite-fab` that is `loading` and `disabled`.\n\n```html\n<calcite-fab loading disabled></calcite-fab>\n```\n",
        "Styling": "Configure styling for a `calcite-fab` to fit your UI and branding with the `appearance` and `kind` attributes/properties:\n\n```html\n<calcite-fab appearance=\"outline-fill\" kind=\"danger\" icon=\"trash\" label=\"Remove layer\"></calcite-fab>\n```\n",
        "With-text": "Renders a `calcite-fab` that displays text alongside an icon.\n\n```html\n<calcite-fab label=\"Performs my custom action\" text=\"Perform Action!\" text-enabled></calcite-fab>\n```\n"
      },
      "props": [
        {
          "name": "appearance",
          "type": "\"outline-fill\" | \"solid\"",
          "complexType": {
            "original": "Extract<\"solid\" | \"outline-fill\", Appearance>",
            "resolved": "\"outline-fill\" | \"solid\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Appearance": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Appearance"
              }
            }
          },
          "mutable": false,
          "attr": "appearance",
          "reflectToAttr": true,
          "docs": "Specifies the appearance style of the component.",
          "docsTags": [],
          "default": "\"solid\"",
          "values": [
            {
              "value": "outline-fill",
              "type": "string"
            },
            {
              "value": "solid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display.",
          "docsTags": [
            {
              "name": "default",
              "text": "\"plus\""
            }
          ],
          "default": "ICONS.plus",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "kind",
          "type": "\"brand\" | \"danger\" | \"inverse\" | \"neutral\"",
          "complexType": {
            "original": "Extract<\"brand\" | \"danger\" | \"inverse\" | \"neutral\", Kind>",
            "resolved": "\"brand\" | \"danger\" | \"inverse\" | \"neutral\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Kind": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Kind"
              }
            }
          },
          "mutable": false,
          "attr": "kind",
          "reflectToAttr": true,
          "docs": "Specifies the kind of the component, which will apply to border and background.",
          "docsTags": [],
          "default": "\"brand\"",
          "values": [
            {
              "value": "brand",
              "type": "string"
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "inverse",
              "type": "string"
            },
            {
              "value": "neutral",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When `true`, a busy indicator is displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "Specifies text to accompany the component's icon.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textEnabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "text-enabled",
          "reflectToAttr": true,
          "docs": "When `true`, displays the `text` value in the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-button"
      ],
      "dependencyGraph": {
        "calcite-fab": [
          "calcite-button"
        ],
        "calcite-button": [
          "calcite-loader",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/filter/filter.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-filter",
      "readme": "# calcite-filter\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filteredItems",
          "type": "object[]",
          "complexType": {
            "original": "object[]",
            "resolved": "object[]",
            "references": {}
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The component's resulting items after filtering.",
          "docsTags": [
            {
              "name": "readonly"
            }
          ],
          "default": "[]",
          "values": [
            {
              "type": "object[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "object[]",
          "complexType": {
            "original": "object[]",
            "resolved": "object[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Defines the items to filter. The component uses the values as the starting point, and returns items\n\nthat contain the string entered in the input, using a partial match and recursive search.\n\nThis property is needed to conduct filtering.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "object[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ label?: string; clear?: string; }",
          "complexType": {
            "original": "Partial<FilterMessages>",
            "resolved": "{ label?: string; clear?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "FilterMessages": {
                "location": "import",
                "path": "./assets/filter/t9n",
                "id": "src/components/filter/assets/filter/t9n/index.d.ts::FilterMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ label?: string; clear?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Specifies placeholder text for the input element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's value.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "filter",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(value?: string) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "string",
                "docs": "- The filter text value."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "filter(value?: string) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "string",
              "docs": "- The filter text value."
            }
          ],
          "docs": "Performs a filter on the component.\n\nThis method can be useful because filtering is delayed and asynchronous.",
          "docsTags": [
            {
              "name": "param",
              "text": "value - The filter text value."
            },
            {
              "name": "returns"
            }
          ]
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteFilterChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the filter text changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-list",
        "calcite-pick-list",
        "calcite-value-list"
      ],
      "dependencies": [
        "calcite-input"
      ],
      "dependencyGraph": {
        "calcite-filter": [
          "calcite-input"
        ],
        "calcite-input": [
          "calcite-progress",
          "calcite-icon",
          "calcite-input-message"
        ],
        "calcite-input-message": [
          "calcite-icon"
        ],
        "calcite-list": [
          "calcite-filter"
        ],
        "calcite-pick-list": [
          "calcite-filter"
        ],
        "calcite-value-list": [
          "calcite-filter"
        ]
      }
    },
    {
      "filePath": "src/components/flow/flow.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-flow",
      "readme": "# calcite-flow\n\nThe `calcite-flow` component is a series of panels that provides a user with a workflow (eg. editing experience), by which the user can switch from panel to panel of `calcite-panel`s.\n",
      "docs": "The `calcite-flow` component is a series of panels that provides a user with a workflow (eg. editing experience), by which the user can switch from panel to panel of `calcite-panel`s.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-flow-item` elements to the component."
        }
      ],
      "usage": {
        "Basic": "Populate Flow with `calcite-flow-item`s to step inside a `calcite-panel` element with HTML and JavaScript:\n\n```html\n<calcite-shell>\n  <calcite-shell-panel slot=\"panel-start\" width-scale=\"l\">\n    <calcite-flow id=\"example-flow\">\n      <calcite-flow-item heading=\"Places of Education\">\n        <calcite-block id=\"first-flow-item-block\" heading=\"Recommended for you\" description=\"4 results\" open>\n          <calcite-list>\n            <calcite-list-item label=\"Narnia Community College\" description=\"Wardobe, IA\"> </calcite-list-item>\n            <calcite-list-item label=\"University of Acme\" description=\"Acmeton, CA\"></calcite-list-item>\n            <calcite-list-item label=\"Roadrunner Trade School\" description=\"Zion, UT\"></calcite-list-item>\n            <calcite-list-item label=\"Cartographic Institute\" description=\"Redlands, CA\"> </calcite-list-item>\n          </calcite-list>\n        </calcite-block>\n      </calcite-flow-item>\n    </calcite-flow>\n  </calcite-shell-panel>\n  <calcite-panel heading=\"Content\"></calcite-panel>\n</calcite-shell>\n```\n\n```js\nconst flow = document.getElementById(\"example-flow\");\nconst items = document.querySelectorAll(\"calcite-list-item\");\n\nitems?.forEach((item) => {\n  item.addEventListener(\"calciteListItemSelect\", (event) => {\n    createFlowItem(event, event.target.label, event.target.description, false);\n  });\n});\n\nfunction createFlowItem(event, title, description, isLastLevel) {\n  const newFlowItem = document.createElement(\"calcite-flow-item\");\n  newFlowItem.heading = !isLastLevel ? title : \"Even more details\";\n  newFlowItem.description = !isLastLevel ? description : title;\n\n  const block = document.createElement(\"calcite-block\");\n  block.open = true;\n  block.heading = \"Details\";\n  newFlowItem.append(block);\n\n  const notice = document.createElement(\"calcite-notice\");\n  notice.open = true;\n  notice.width = \"full\";\n  block.append(notice);\n\n  const noticeMessage = document.createElement(\"span\");\n  noticeMessage.slot = \"message\";\n  noticeMessage.innerText = !isLastLevel ? `A new Flow Item for ${title}.` : \"You've reached the end of the line.\";\n  notice.append(noticeMessage);\n\n  if (!isLastLevel) {\n    const button = document.createElement(\"calcite-button\");\n    button.slot = \"footer\";\n    button.width = \"full\";\n    button.innerText = \"Move to a third Flow Item\";\n    button.addEventListener(\"click\", (event) => createFlowItem(event, title, description, true));\n    if (!isLastLevel) newFlowItem.append(button);\n  }\n\n  flow.append(newFlowItem);\n}\n```\n",
        "Menu-actions-and-footer-actions": "Renders a flow with `\"header-actions-start\"`, `\"header-actions-end\"`, `\"header-menu-actions\"`, `\"fab\"`, and `\"footer\"` slots.\n\n```html\n<calcite-shell>\n  <calcite-shell-panel slot=\"panel-start\" width-scale=\"l\">\n    <calcite-flow>\n      <calcite-flow-item heading=\"Map Options\">\n        <calcite-action icon=\"question\" text=\"Information\" slot=\"header-actions-start\"></calcite-action>\n        <calcite-action icon=\"save\" text=\"Save\" slot=\"header-actions-end\"></calcite-action>\n        <calcite-action icon=\"reset\" text-enabled text=\"Reset\" slot=\"header-menu-actions\"></calcite-action>\n        <calcite-action icon=\"pencil\" text-enabled text=\"Rename\" slot=\"header-menu-actions\"> </calcite-action>\n        <calcite-fab slot=\"fab\"></calcite-fab>\n        <calcite-button width=\"half\" slot=\"footer\" appearance=\"outline\">Cancel</calcite-button>\n        <calcite-button width=\"half\" slot=\"footer\">Next</calcite-button>\n      </calcite-flow-item>\n    </calcite-flow>\n  </calcite-shell-panel>\n  <calcite-panel heading=\"Map\"></calcite-panel>\n</calcite-shell>\n```\n"
      },
      "props": [],
      "methods": [
        {
          "name": "back",
          "returns": {
            "type": "Promise<HTMLCalciteFlowItemElement | FlowItemLikeElement>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<HTMLCalciteFlowItemElement | FlowItemLikeElement>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLCalciteFlowItemElement": {
                "location": "global",
                "id": "global::HTMLCalciteFlowItemElement"
              },
              "FlowItemLikeElement": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/flow/interfaces.ts::FlowItemLikeElement"
              }
            },
            "return": "Promise<HTMLCalciteFlowItemElement | FlowItemLikeElement>"
          },
          "signature": "back() => Promise<HTMLCalciteFlowItemElement | FlowItemLikeElement>",
          "parameters": [],
          "docs": "Removes the currently active `calcite-flow-item`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "calciteFlowItemBack",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-flow-item` elements to the component."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/flow-item/flow-item.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-flow-item",
      "readme": "# calcite-flow-item\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding custom content."
        },
        {
          "name": "slot",
          "text": "action-bar - A slot for adding a `calcite-action-bar` to the component."
        },
        {
          "name": "slot",
          "text": "header-actions-start - A slot for adding `calcite-action`s or content to the start side of the component's header."
        },
        {
          "name": "slot",
          "text": "header-actions-end - A slot for adding `calcite-action`s or content to the end side of the component's header."
        },
        {
          "name": "slot",
          "text": "header-content - A slot for adding custom content to the component's header."
        },
        {
          "name": "slot",
          "text": "header-menu-actions - A slot for adding an overflow menu with `calcite-action`s inside a `calcite-dropdown`."
        },
        {
          "name": "slot",
          "text": "fab - A slot for adding a `calcite-fab` (floating action button) to perform an action."
        },
        {
          "name": "slot",
          "text": "footer-actions - [Deprecated] Use the `\"footer\"` slot instead. A slot for adding `calcite-button`s to the component's footer."
        },
        {
          "name": "slot",
          "text": "footer - A slot for adding custom content to the component's footer."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "beforeBack",
          "type": "() => Promise<void>",
          "complexType": {
            "original": "() => Promise<void>",
            "resolved": "() => Promise<void>",
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "When provided, the method will be called before it is removed from its parent `calcite-flow`.",
          "docsTags": [],
          "values": [
            {
              "type": "() => Promise<void>"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "closable",
          "reflectToAttr": true,
          "docs": "When `true`, displays a close button in the trailing side of the component's header.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "closed",
          "reflectToAttr": true,
          "docs": "When `true`, the component will be hidden.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "collapsed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "collapsed",
          "reflectToAttr": true,
          "docs": "When `true`, hides the component's content area.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "collapsible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "collapsible",
          "reflectToAttr": true,
          "docs": "When `true`, the component is collapsible.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "A description for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "The component header text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "complexType": {
            "original": "HeadingLevel",
            "resolved": "1 | 2 | 3 | 4 | 5 | 6",
            "references": {
              "HeadingLevel": {
                "location": "import",
                "path": "../functional/Heading",
                "id": "src/components/functional/Heading.tsx::HeadingLevel"
              }
            }
          },
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": true,
          "docs": "Specifies the number at which section headings should start.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When `true`, a busy indicator is displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "menuOpen",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "menu-open",
          "reflectToAttr": true,
          "docs": "When `true`, the action menu items in the `header-menu-actions` slot are open.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ back?: string; close?: string; options?: string; }",
          "complexType": {
            "original": "Partial<FlowItemMessages>",
            "resolved": "{ back?: string; close?: string; options?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "FlowItemMessages": {
                "location": "import",
                "path": "./assets/flow-item/t9n",
                "id": "src/components/flow-item/assets/flow-item/t9n/index.d.ts::FlowItemMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ back?: string; close?: string; options?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPositioning",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "OverlayPositioning",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {
              "OverlayPositioning": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::OverlayPositioning"
              }
            }
          },
          "mutable": false,
          "attr": "overlay-positioning",
          "reflectToAttr": true,
          "docs": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
          "docsTags": [],
          "default": "\"absolute\"",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "scrollContentTo",
          "returns": {
            "type": "Promise<void>",
            "docs": "- promise that resolves once the content is scrolled to."
          },
          "complexType": {
            "signature": "(options?: ScrollToOptions) => Promise<void>",
            "parameters": [
              {
                "name": "options",
                "type": "ScrollToOptions",
                "docs": "- allows specific coordinates to be defined."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "ScrollToOptions": {
                "location": "global",
                "id": "global::ScrollToOptions"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "scrollContentTo(options?: ScrollToOptions) => Promise<void>",
          "parameters": [
            {
              "name": "options",
              "type": "ScrollToOptions",
              "docs": "- allows specific coordinates to be defined."
            }
          ],
          "docs": "Scrolls the component's content to a specified set of coordinates.",
          "docsTags": [
            {
              "name": "example",
              "text": "myCalciteFlowItem.scrollContentTo({\n  left: 0, // Specifies the number of pixels along the X axis to scroll the window or element.\n  top: 0, // Specifies the number of pixels along the Y axis to scroll the window or element\n  behavior: \"auto\" // Specifies whether the scrolling should animate smoothly (smooth), or happen instantly in a single jump (auto, the default value).\n});"
            },
            {
              "name": "param",
              "text": "options - allows specific coordinates to be defined."
            },
            {
              "name": "returns",
              "text": "- promise that resolves once the content is scrolled to."
            }
          ]
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": "promise."
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": [
            {
              "name": "returns",
              "text": "promise."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "calciteFlowItemBack",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fires when the back button is clicked.",
          "docsTags": []
        },
        {
          "event": "calciteFlowItemClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the close button is clicked.",
          "docsTags": []
        },
        {
          "event": "calciteFlowItemScroll",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the content is scrolled.",
          "docsTags": []
        },
        {
          "event": "calciteFlowItemToggle",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the collapse button is clicked.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-flow-item-footer-padding",
          "annotation": "prop",
          "docs": "Specifies the padding of the component's footer."
        },
        {
          "name": "--calcite-flow-item-header-border-block-end",
          "annotation": "prop",
          "docs": "Specifies the component header's block end border."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding custom content."
        },
        {
          "name": "action-bar",
          "docs": "A slot for adding a `calcite-action-bar` to the component."
        },
        {
          "name": "fab",
          "docs": "A slot for adding a `calcite-fab` (floating action button) to perform an action."
        },
        {
          "name": "footer",
          "docs": "A slot for adding custom content to the component's footer."
        },
        {
          "name": "footer-actions",
          "docs": "[Deprecated] Use the `\"footer\"` slot instead. A slot for adding `calcite-button`s to the component's footer."
        },
        {
          "name": "header-actions-end",
          "docs": "A slot for adding `calcite-action`s or content to the end side of the component's header."
        },
        {
          "name": "header-actions-start",
          "docs": "A slot for adding `calcite-action`s or content to the start side of the component's header."
        },
        {
          "name": "header-content",
          "docs": "A slot for adding custom content to the component's header."
        },
        {
          "name": "header-menu-actions",
          "docs": "A slot for adding an overflow menu with `calcite-action`s inside a `calcite-dropdown`."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-action",
        "calcite-panel"
      ],
      "dependencyGraph": {
        "calcite-flow-item": [
          "calcite-action",
          "calcite-panel"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-panel": [
          "calcite-action",
          "calcite-action-menu",
          "calcite-scrim"
        ],
        "calcite-action-menu": [
          "calcite-action",
          "calcite-popover"
        ],
        "calcite-popover": [
          "calcite-action",
          "calcite-icon"
        ],
        "calcite-scrim": [
          "calcite-loader"
        ]
      }
    },
    {
      "filePath": "src/components/graph/graph.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-graph",
      "readme": "# calcite-graph\n\nThe graph component is used to show small, lightweight graphs in places where a full interactive chart is not needed. This includes sparklines, histograms, and small trend plots.\n",
      "docs": "The graph component is used to show small, lightweight graphs in places where a full interactive chart is not needed. This includes sparklines, histograms, and small trend plots.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "colorStops",
          "type": "ColorStop[]",
          "complexType": {
            "original": "ColorStop[]",
            "resolved": "ColorStop[]",
            "references": {
              "ColorStop": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/graph/interfaces.ts::ColorStop"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Array of values describing a single color stop ([offset, color, opacity])\nThese color stops should be sorted by offset value.",
          "docsTags": [],
          "values": [
            {
              "type": "ColorStop[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "data",
          "type": "Point[]",
          "complexType": {
            "original": "DataSeries",
            "resolved": "Point[]",
            "references": {
              "DataSeries": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/graph/interfaces.ts::DataSeries"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Array of tuples describing a single data point ([x, y])\nThese data points should be sorted by x-axis value.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "Point[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "highlightMax",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "highlight-max",
          "reflectToAttr": false,
          "docs": "End of highlight color if highlighting range.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "highlightMin",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "highlight-min",
          "reflectToAttr": false,
          "docs": "Start of highlight color if highlighting range.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": true,
          "docs": "Highest point of the range.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "min",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": true,
          "docs": "Lowest point of the range.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-slider"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-slider": [
          "calcite-graph"
        ]
      }
    },
    {
      "filePath": "src/components/handle/handle.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-handle",
      "readme": "# calcite-handle\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dragHandle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "drag-handle",
          "reflectToAttr": true,
          "docs": "Value for the button title attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ dragHandle?: string; dragHandleUntitled?: string; dragHandleActive?: string; dragHandleChange?: string; dragHandleCommit?: string; dragHandleIdle?: string; }",
          "complexType": {
            "original": "Partial<HandleMessages>",
            "resolved": "{ dragHandle?: string; dragHandleUntitled?: string; dragHandleActive?: string; dragHandleChange?: string; dragHandleCommit?: string; dragHandleIdle?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "HandleMessages": {
                "location": "import",
                "path": "./assets/handle/t9n",
                "id": "src/components/handle/assets/handle/t9n/index.d.ts::HandleMessages"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ dragHandle?: string; dragHandleUntitled?: string; dragHandleActive?: string; dragHandleChange?: string; dragHandleCommit?: string; dragHandleIdle?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "When `true`, the component is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteHandleChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires whenever the component is selected or unselected.",
          "docsTags": []
        },
        {
          "event": "calciteHandleNudge",
          "detail": "HandleNudge",
          "bubbles": true,
          "complexType": {
            "original": "HandleNudge",
            "resolved": "HandleNudge",
            "references": {
              "HandleNudge": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/handle/interfaces.d.ts::HandleNudge"
              }
            }
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the handle is selected and the up or down arrow key is pressed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-block",
        "calcite-list-item"
      ],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-handle": [
          "calcite-icon"
        ],
        "calcite-block": [
          "calcite-handle"
        ],
        "calcite-list-item": [
          "calcite-handle"
        ]
      }
    },
    {
      "filePath": "src/components/icon/icon.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-icon",
      "readme": "# calcite-icon\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "Custom-icon-color": "To use a custom color for the icon fill, you can supply your desired color to the `--calcite-ui-icon-color` CSS variable:\n\n```html\n<calcite-icon class=\"my-icon-color-class\" icon=\"arrowBoldLeft\"></calcite-icon>\n```\n\n```css\n.my-icon-color-class {\n  --calcite-ui-icon-color: #007ac2;\n}\n```\n"
      },
      "props": [
        {
          "name": "flipRtl",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "flip-rtl",
          "reflectToAttr": true,
          "docs": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "Displays a specific icon.",
          "docsTags": [
            {
              "name": "see",
              "text": "[Icons](https://esri.github.io/calcite-ui-icons)"
            }
          ],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.\n\nIt is recommended to set this value if your icon is semantic.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-ui-icon-color",
          "annotation": "prop",
          "docs": "The component's color. Defaults to `currentColor`."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-accordion-item",
        "calcite-action",
        "calcite-alert",
        "calcite-avatar",
        "calcite-block",
        "calcite-block-section",
        "calcite-button",
        "calcite-card",
        "calcite-chip",
        "calcite-combobox",
        "calcite-combobox-item",
        "calcite-date-picker-month-header",
        "calcite-dropdown-item",
        "calcite-handle",
        "calcite-input",
        "calcite-input-date-picker",
        "calcite-input-message",
        "calcite-input-number",
        "calcite-input-text",
        "calcite-input-time-picker",
        "calcite-link",
        "calcite-list-item",
        "calcite-menu-item",
        "calcite-modal",
        "calcite-navigation-logo",
        "calcite-notice",
        "calcite-pagination",
        "calcite-pick-list-item",
        "calcite-popover",
        "calcite-rating",
        "calcite-segmented-control-item",
        "calcite-select",
        "calcite-stepper-item",
        "calcite-tab-title",
        "calcite-table-header",
        "calcite-table-row",
        "calcite-tile",
        "calcite-tile-select",
        "calcite-time-picker",
        "calcite-tip-manager",
        "calcite-tree-item",
        "calcite-value-list-item"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-accordion-item": [
          "calcite-icon"
        ],
        "calcite-action": [
          "calcite-icon"
        ],
        "calcite-alert": [
          "calcite-icon"
        ],
        "calcite-avatar": [
          "calcite-icon"
        ],
        "calcite-block": [
          "calcite-icon"
        ],
        "calcite-block-section": [
          "calcite-icon"
        ],
        "calcite-button": [
          "calcite-icon"
        ],
        "calcite-card": [
          "calcite-icon"
        ],
        "calcite-chip": [
          "calcite-icon"
        ],
        "calcite-combobox": [
          "calcite-icon"
        ],
        "calcite-combobox-item": [
          "calcite-icon"
        ],
        "calcite-date-picker-month-header": [
          "calcite-icon"
        ],
        "calcite-dropdown-item": [
          "calcite-icon"
        ],
        "calcite-handle": [
          "calcite-icon"
        ],
        "calcite-input": [
          "calcite-icon"
        ],
        "calcite-input-date-picker": [
          "calcite-icon"
        ],
        "calcite-input-message": [
          "calcite-icon"
        ],
        "calcite-input-number": [
          "calcite-icon"
        ],
        "calcite-input-text": [
          "calcite-icon"
        ],
        "calcite-input-time-picker": [
          "calcite-icon"
        ],
        "calcite-link": [
          "calcite-icon"
        ],
        "calcite-list-item": [
          "calcite-icon"
        ],
        "calcite-menu-item": [
          "calcite-icon"
        ],
        "calcite-modal": [
          "calcite-icon"
        ],
        "calcite-navigation-logo": [
          "calcite-icon"
        ],
        "calcite-notice": [
          "calcite-icon"
        ],
        "calcite-pagination": [
          "calcite-icon"
        ],
        "calcite-pick-list-item": [
          "calcite-icon"
        ],
        "calcite-popover": [
          "calcite-icon"
        ],
        "calcite-rating": [
          "calcite-icon"
        ],
        "calcite-segmented-control-item": [
          "calcite-icon"
        ],
        "calcite-select": [
          "calcite-icon"
        ],
        "calcite-stepper-item": [
          "calcite-icon"
        ],
        "calcite-tab-title": [
          "calcite-icon"
        ],
        "calcite-table-header": [
          "calcite-icon"
        ],
        "calcite-table-row": [
          "calcite-icon"
        ],
        "calcite-tile": [
          "calcite-icon"
        ],
        "calcite-tile-select": [
          "calcite-icon"
        ],
        "calcite-time-picker": [
          "calcite-icon"
        ],
        "calcite-tip-manager": [
          "calcite-icon"
        ],
        "calcite-tree-item": [
          "calcite-icon"
        ],
        "calcite-value-list-item": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/inline-editable/inline-editable.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-inline-editable",
      "readme": "# calcite-inline-editable\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding a `calcite-input`."
        }
      ],
      "usage": {
        "Basic": "There is no need to set a theme or scale on the `<calcite-inline-editable>` component, as it inherits these values from the wrapped `<calcite-input>`, or the closest parent component where these props are set.\n\n```html\n<calcite-inline-editable>\n  <calcite-input value=\"City of Acme Tree Survey\" placeholder=\"City of Acme Tree Survey\"></calcite-input>\n</calcite-inline-editable>\n```\n",
        "With-label": "```html\n<calcite-label>\n  Survey name\n  <calcite-inline-editable>\n    <calcite-input value=\"City of Acme Tree Survey\" placeholder=\"City of Acme Tree Survey\"></calcite-input>\n  </calcite-inline-editable>\n</calcite-label>\n```\n",
        "With-save-and-cancel-controls": "Add \"Save\" and \"Cancel\" controls:\n\n```html\n<calcite-inline-editable controls>\n  <calcite-input value=\"City of Acme Tree Survey\" placeholder=\"City of Acme Tree Survey\"></calcite-input>\n</calcite-inline-editable>\n```\n"
      },
      "props": [
        {
          "name": "afterConfirm",
          "type": "() => Promise<void>",
          "complexType": {
            "original": "() => Promise<void>",
            "resolved": "() => Promise<void>",
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Specifies a callback to be executed prior to disabling editing via the controls. When provided, the component's loading state will be handled automatically.",
          "docsTags": [],
          "values": [
            {
              "type": "() => Promise<void>"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "controls",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "controls",
          "reflectToAttr": true,
          "docs": "When `true` and `editingEnabled` is `true`, displays save and cancel controls on the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "editingEnabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "editing-enabled",
          "reflectToAttr": true,
          "docs": "When `true`, inline editing is enabled on the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When `true`, a busy indicator is displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ enableEditing?: string; cancelEditing?: string; confirmChanges?: string; }",
          "complexType": {
            "original": "Partial<InlineEditableMessages>",
            "resolved": "{ enableEditing?: string; cancelEditing?: string; confirmChanges?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "InlineEditableMessages": {
                "location": "import",
                "path": "./assets/inline-editable/t9n",
                "id": "src/components/inline-editable/assets/inline-editable/t9n/index.d.ts::InlineEditableMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ enableEditing?: string; cancelEditing?: string; confirmChanges?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": true,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component. Defaults to the scale of the wrapped `calcite-input` or the scale of the closest wrapping component with a set scale.",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteInlineEditableEditCancel",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Emits when the component's \"cancel editing\" button is pressed.",
          "docsTags": []
        },
        {
          "event": "calciteInlineEditableEditConfirm",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Emits when the component's \"confirm edits\" button is pressed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteInternalInputBlur",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding a `calcite-input`."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-button"
      ],
      "dependencyGraph": {
        "calcite-inline-editable": [
          "calcite-button"
        ],
        "calcite-button": [
          "calcite-loader",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/input/input.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-input",
      "readme": "# calcite-input\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "action - A slot for positioning a `calcite-button` next to the component."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-input placeholder=\"Enter your region\"></calcite-input>\n```\n",
        "Clearable": "Display a clear button when the component has a value with the `clearable` attribute:\n\n```html\n<calcite-label>\n  Full name\n  <calcite-input clearable value=\"John Doe\" placeholder=\"John Doe\"></calcite-input>\n</calcite-label>\n```\n",
        "Native-events": "You can also listen for native events emitted from `<calcite-input>`.\n\nYou must use `focusin`/`focusout` instead of `focus`/`blur` because these events bubble up from the rendered child element rendered inside of `<calcite-input>`\n\nAll events return an element and a value:\n\n```js\ninputEl.addEventListener(\"focusin\", logFocus);\ninputEl.addEventListener(\"focusout\", logBlur);\n\nfunction logFocus() {\n  console.log(event.target);\n}\n\nfunction logBlur() {\n  console.log(event.target.value);\n}\n```\n",
        "With-label": "```html\n<calcite-label for=\"invalid-input\">\n  Invalid input\n  <calcite-input status=\"invalid\" id=\"invalid-input\" placeholder=\"Filter your files\" value=\"adfo2h2\"></calcite-input>\n  <calcite-input-message status=\"invalid\" icon> Something doesn't look right </calcite-input-message>\n</calcite-label>\n```\n",
        "With-message": "```html\n<calcite-label>\n  Desired subdomain\n  <calcite-input\n    suffix-text=\".city-of-acme.gov\"\n    status=\"invalid\"\n    placeholder=\"Enter your subdomain\"\n    value=\"i-love-maps\"\n  ></calcite-input>\n  <calcite-input-message icon=\"frown\" status=\"invalid\">\n    Apologies, this subdomain has already been registered.\n  </calcite-input-message>\n</calcite-label>\n```\n"
      },
      "props": [
        {
          "name": "accept",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "accept",
          "reflectToAttr": false,
          "docs": "Specifies a comma separated list of unique file type specifiers for limiting accepted file types.\nThis property only has an effect when `type` is \"file\".\nRead the native attribute's documentation on MDN for more info.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "alignment",
          "type": "\"end\" | \"start\"",
          "complexType": {
            "original": "Extract<\"start\" | \"end\", Alignment>",
            "resolved": "\"end\" | \"start\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Alignment": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Alignment"
              }
            }
          },
          "mutable": false,
          "attr": "alignment",
          "reflectToAttr": true,
          "docs": "Specifies the text alignment of the component's value.",
          "docsTags": [],
          "default": "\"start\"",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocomplete",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Specifies the type of content to autocomplete, for use in forms.\nRead the native attribute's documentation on MDN for more info.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": true,
          "docs": "When `true`, the component is focused on page load. Only one element can contain `autofocus`. If multiple elements have `autofocus`, the first element will receive focus.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[autofocus](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus)"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clearable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": true,
          "docs": "When `true`, a clear button is displayed when the component has a value. The clear button shows by default for `\"search\"`, `\"time\"`, and `\"date\"` types, and will not display for the `\"textarea\"` type.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "enterKeyHint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "enter-key-hint",
          "reflectToAttr": false,
          "docs": "Specifies the action label or icon for the Enter key on virtual keyboards.\nRead the native attribute's documentation on MDN for more info.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[step](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "files",
          "type": "FileList",
          "complexType": {
            "original": "FileList | undefined",
            "resolved": "FileList",
            "references": {
              "FileList": {
                "location": "global",
                "id": "global::FileList"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "When `type` is `\"file\"`, specifies the component's selected files.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/files"
            }
          ],
          "values": [
            {
              "type": "FileList"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "form",
          "reflectToAttr": true,
          "docs": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "groupSeparator",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "group-separator",
          "reflectToAttr": true,
          "docs": "When `true`, number values are displayed with a group separator corresponding to the language and country format.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "boolean | string",
          "complexType": {
            "original": "string | boolean",
            "resolved": "boolean | string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputMode",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-mode",
          "reflectToAttr": false,
          "docs": "Specifies the type of content to help devices display an appropriate virtual keyboard.\nRead the native attribute's documentation on MDN for more info.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[step](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)"
            }
          ],
          "default": "\"text\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When `true`, a busy indicator is displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": true,
          "docs": "Specifies the maximum value for type \"number\".",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[max](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max)"
            }
          ],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxLength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max-length",
          "reflectToAttr": true,
          "docs": "Specifies the maximum length of text for the component's value.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)"
            }
          ],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ clear?: string; loading?: string; }",
          "complexType": {
            "original": "Partial<InputMessages>",
            "resolved": "{ clear?: string; loading?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "InputMessages": {
                "location": "import",
                "path": "./assets/input/t9n",
                "id": "src/components/input/assets/input/t9n/index.d.ts::InputMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ clear?: string; loading?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": true,
          "docs": "Specifies the minimum value for `type=\"number\"`.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[min](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min)"
            }
          ],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minLength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "min-length",
          "reflectToAttr": true,
          "docs": "Specifies the minimum length of text for the component's value.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)"
            }
          ],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "When `true`, the component can accept more than one value.\nThis property only has an effect when `type` is \"email\" or \"file\".\nRead the native attribute's documentation on MDN for more info.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/multiple)"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberButtonType",
          "type": "\"horizontal\" | \"none\" | \"vertical\"",
          "complexType": {
            "original": "InputPlacement",
            "resolved": "\"horizontal\" | \"none\" | \"vertical\"",
            "references": {
              "InputPlacement": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/input/interfaces.ts::InputPlacement"
              }
            }
          },
          "mutable": false,
          "attr": "number-button-type",
          "reflectToAttr": true,
          "docs": "Specifies the placement of the buttons for `type=\"number\"`.",
          "docsTags": [],
          "default": "\"vertical\"",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberingSystem",
          "type": "\"arab\" | \"arabext\" | \"latn\"",
          "complexType": {
            "original": "NumberingSystem",
            "resolved": "\"arab\" | \"arabext\" | \"latn\"",
            "references": {
              "NumberingSystem": {
                "location": "import",
                "path": "../../utils/locale",
                "id": "src/utils/locale.ts::NumberingSystem"
              }
            }
          },
          "mutable": false,
          "attr": "numbering-system",
          "reflectToAttr": true,
          "docs": "Specifies the Unicode numeral system used by the component for localization.",
          "docsTags": [],
          "values": [
            {
              "value": "arab",
              "type": "string"
            },
            {
              "value": "arabext",
              "type": "string"
            },
            {
              "value": "latn",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pattern",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "pattern",
          "reflectToAttr": false,
          "docs": "Specifies a regex pattern the component's `value` must match for validation.\nRead the native attribute's documentation on MDN for more info.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Specifies placeholder text for the component.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "prefixText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "prefix-text",
          "reflectToAttr": false,
          "docs": "Adds text to the start of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readOnly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "read-only",
          "reflectToAttr": true,
          "docs": "When `true`, the component's value can be read, but cannot be modified.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "When `true`, the component must have a value in order for the form to submit.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "status",
          "type": "\"idle\" | \"invalid\" | \"valid\"",
          "complexType": {
            "original": "Status",
            "resolved": "\"idle\" | \"invalid\" | \"valid\"",
            "references": {
              "Status": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Status"
              }
            }
          },
          "mutable": false,
          "attr": "status",
          "reflectToAttr": true,
          "docs": "Specifies the status of the input field, which determines message and icons.",
          "docsTags": [],
          "default": "\"idle\"",
          "values": [
            {
              "value": "idle",
              "type": "string"
            },
            {
              "value": "invalid",
              "type": "string"
            },
            {
              "value": "valid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "\"any\" | number",
          "complexType": {
            "original": "number | \"any\"",
            "resolved": "\"any\" | number",
            "references": {}
          },
          "mutable": false,
          "attr": "step",
          "reflectToAttr": true,
          "docs": "Specifies the granularity the component's `value` must adhere to.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)"
            }
          ],
          "values": [
            {
              "value": "any",
              "type": "string"
            },
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "suffixText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "suffix-text",
          "reflectToAttr": false,
          "docs": "Adds text to the end of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"color\" | \"date\" | \"datetime-local\" | \"email\" | \"file\" | \"image\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"textarea\" | \"time\" | \"url\" | \"week\"",
          "complexType": {
            "original": "| \"color\"\n    | \"date\"\n    | \"datetime-local\"\n    | \"email\"\n    | \"file\"\n    | \"image\"\n    | \"month\"\n    | \"number\"\n    | \"password\"\n    | \"search\"\n    | \"tel\"\n    | \"text\"\n    | \"textarea\"\n    | \"time\"\n    | \"url\"\n    | \"week\"",
            "resolved": "\"color\" | \"date\" | \"datetime-local\" | \"email\" | \"file\" | \"image\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"textarea\" | \"time\" | \"url\" | \"week\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "Specifies the component type.\n\nNote that the following `type`s add type-specific icons by default: `\"date\"`, `\"email\"`, `\"password\"`, `\"search\"`, `\"tel\"`, `\"time\"`.",
          "docsTags": [],
          "default": "\"text\"",
          "values": [
            {
              "value": "color",
              "type": "string"
            },
            {
              "value": "date",
              "type": "string"
            },
            {
              "value": "datetime-local",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "file",
              "type": "string"
            },
            {
              "value": "image",
              "type": "string"
            },
            {
              "value": "month",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "password",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "textarea",
              "type": "string"
            },
            {
              "value": "time",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "value": "week",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validationIcon",
          "type": "boolean | string",
          "complexType": {
            "original": "string | boolean",
            "resolved": "boolean | string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-icon",
          "reflectToAttr": true,
          "docs": "Specifies the validation icon to display under the component.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validationMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-message",
          "reflectToAttr": false,
          "docs": "Specifies the validation message to display under the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's value.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "selectText",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "selectText() => Promise<void>",
          "parameters": [],
          "docs": "Selects the text of the component's `value`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteInputChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires each time a new `value` is typed and committed.",
          "docsTags": []
        },
        {
          "event": "calciteInputInput",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fires each time a new `value` is typed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "action",
          "docs": "A slot for positioning a `calcite-button` next to the component."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-filter"
      ],
      "dependencies": [
        "calcite-progress",
        "calcite-icon",
        "calcite-input-message"
      ],
      "dependencyGraph": {
        "calcite-input": [
          "calcite-progress",
          "calcite-icon",
          "calcite-input-message"
        ],
        "calcite-input-message": [
          "calcite-icon"
        ],
        "calcite-filter": [
          "calcite-input"
        ]
      }
    },
    {
      "filePath": "src/components/input-date-picker/input-date-picker.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-input-date-picker",
      "readme": "# calcite-input-date-picker\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "Basic": "```html\n<div style=\"width: 400px\">\n  <calcite-label layout=\"inline\">\n    Date\n    <calcite-input-date-picker min=\"2016-08-09\" max=\"2023-12-18\" lang=\"en\"></calcite-input-date-picker>\n  </calcite-label>\n</div>\n```\n",
        "Range": "Add a `range` to the component. To set the component's value use the JavaScript `value` property with an array of strings:\n\n```html\n<calcite-input-date-picker min=\"2016-08-09\" max=\"2023-12-18\" lang=\"en\" range></calcite-input-date-picker>\n```\n\n```js\ndocument.querySelector(\"calcite-input-date-picker\").value = [\"2023-10-01\", \"2023-11-30\"];\n```\n"
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "flipPlacements",
          "type": "Placement[]",
          "complexType": {
            "original": "EffectivePlacement[]",
            "resolved": "Placement[]",
            "references": {
              "EffectivePlacement": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::EffectivePlacement"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Defines the available placements that can be used when a flip occurs.",
          "docsTags": [],
          "values": [
            {
              "type": "Placement[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focusTrapDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "focus-trap-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, prevents focus trapping.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "form",
          "reflectToAttr": true,
          "docs": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "complexType": {
            "original": "HeadingLevel",
            "resolved": "1 | 2 | 3 | 4 | 5 | 6",
            "references": {
              "HeadingLevel": {
                "location": "import",
                "path": "../functional/Heading",
                "id": "src/components/functional/Heading.tsx::HeadingLevel"
              }
            }
          },
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": true,
          "docs": "Specifies the number at which section headings should start.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "\"horizontal\" | \"vertical\"",
            "resolved": "\"horizontal\" | \"vertical\"",
            "references": {}
          },
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "Defines the layout of the component.",
          "docsTags": [],
          "default": "\"horizontal\"",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Specifies the latest allowed date (\"yyyy-mm-dd\").",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxAsDate",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Specifies the latest allowed date as a full date object.",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ chooseDate?: string; dateFormat?: string; nextMonth?: string; prevMonth?: string; year?: string; }",
          "complexType": {
            "original": "Partial<InputDatePickerMessages & DatePickerMessages>",
            "resolved": "{ chooseDate?: string; dateFormat?: string; nextMonth?: string; prevMonth?: string; year?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "InputDatePickerMessages": {
                "location": "import",
                "path": "./assets/input-date-picker/t9n",
                "id": "src/components/input-date-picker/assets/input-date-picker/t9n/index.d.ts::InputDatePickerMessages"
              },
              "DatePickerMessages": {
                "location": "import",
                "path": "../date-picker/assets/date-picker/t9n",
                "id": "src/components/date-picker/assets/date-picker/t9n/index.d.ts::DatePickerMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ chooseDate?: string; dateFormat?: string; nextMonth?: string; prevMonth?: string; year?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "Specifies the earliest allowed date (\"yyyy-mm-dd\").",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minAsDate",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Specifies the earliest allowed date as a full date object.",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberingSystem",
          "type": "\"arab\" | \"arabext\" | \"latn\"",
          "complexType": {
            "original": "NumberingSystem",
            "resolved": "\"arab\" | \"arabext\" | \"latn\"",
            "references": {
              "NumberingSystem": {
                "location": "import",
                "path": "../../utils/locale",
                "id": "src/utils/locale.ts::NumberingSystem"
              }
            }
          },
          "mutable": false,
          "attr": "numbering-system",
          "reflectToAttr": true,
          "docs": "Specifies the Unicode numeral system used by the component for localization. This property cannot be dynamically changed.",
          "docsTags": [],
          "values": [
            {
              "value": "arab",
              "type": "string"
            },
            {
              "value": "arabext",
              "type": "string"
            },
            {
              "value": "latn",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "When `true`, displays the `calcite-date-picker` component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPositioning",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "OverlayPositioning",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {
              "OverlayPositioning": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::OverlayPositioning"
              }
            }
          },
          "mutable": false,
          "attr": "overlay-positioning",
          "reflectToAttr": true,
          "docs": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
          "docsTags": [],
          "default": "\"absolute\"",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "complexType": {
            "original": "MenuPlacement",
            "resolved": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"top\" | \"top-end\" | \"top-start\"",
            "references": {
              "MenuPlacement": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::MenuPlacement"
              }
            }
          },
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": true,
          "docs": "Specifies the placement of the `calcite-date-picker` relative to the component.",
          "docsTags": [
            {
              "name": "default",
              "text": "\"bottom-start\""
            }
          ],
          "default": "defaultMenuPlacement",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "proximitySelectionDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "proximity-selection-disabled",
          "reflectToAttr": false,
          "docs": "When `true`, disables the default behavior on the third click of narrowing or extending the range.\nInstead starts a new range.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "range",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "range",
          "reflectToAttr": true,
          "docs": "When `true`, activates a range for the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readOnly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "read-only",
          "reflectToAttr": true,
          "docs": "When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "When `true`, the component must have a value in order for the form to submit.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "\"s\" | \"m\" | \"l\"",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {}
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "status",
          "type": "\"idle\" | \"invalid\" | \"valid\"",
          "complexType": {
            "original": "Status",
            "resolved": "\"idle\" | \"invalid\" | \"valid\"",
            "references": {
              "Status": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Status"
              }
            }
          },
          "mutable": false,
          "attr": "status",
          "reflectToAttr": true,
          "docs": "Specifies the status of the input field, which determines message and icons.",
          "docsTags": [],
          "default": "\"idle\"",
          "values": [
            {
              "value": "idle",
              "type": "string"
            },
            {
              "value": "invalid",
              "type": "string"
            },
            {
              "value": "valid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validationIcon",
          "type": "boolean | string",
          "complexType": {
            "original": "string | boolean",
            "resolved": "boolean | string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-icon",
          "reflectToAttr": true,
          "docs": "Specifies the validation icon to display under the component.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validationMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-message",
          "reflectToAttr": false,
          "docs": "Specifies the validation message to display under the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string | string[]",
          "complexType": {
            "original": "string | string[]",
            "resolved": "string | string[]",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Selected date as a string in ISO format (`\"yyyy-mm-dd\"`).",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valueAsDate",
          "type": "Date | Date[]",
          "complexType": {
            "original": "Date | Date[]",
            "resolved": "Date | Date[]",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The component's value as a full date object.",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            },
            {
              "type": "Date[]"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "reposition",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(delayed?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "delayed",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "reposition(delayed?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "delayed",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Updates the position of the component.",
          "docsTags": [
            {
              "name": "param",
              "text": "delayed"
            }
          ]
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteInputDatePickerBeforeClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is requested to be closed and before the closing transition begins.",
          "docsTags": []
        },
        {
          "event": "calciteInputDatePickerBeforeOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
          "docsTags": []
        },
        {
          "event": "calciteInputDatePickerChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component's `value` changes.",
          "docsTags": []
        },
        {
          "event": "calciteInputDatePickerClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is closed and animation is complete.",
          "docsTags": []
        },
        {
          "event": "calciteInputDatePickerOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is open and animation is complete.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteDaySelect",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-input-text",
        "calcite-date-picker",
        "calcite-icon",
        "calcite-input-message"
      ],
      "dependencyGraph": {
        "calcite-input-date-picker": [
          "calcite-input-text",
          "calcite-date-picker",
          "calcite-icon",
          "calcite-input-message"
        ],
        "calcite-input-text": [
          "calcite-progress",
          "calcite-icon",
          "calcite-input-message"
        ],
        "calcite-input-message": [
          "calcite-icon"
        ],
        "calcite-date-picker": [
          "calcite-date-picker-month-header",
          "calcite-date-picker-month"
        ],
        "calcite-date-picker-month-header": [
          "calcite-icon"
        ],
        "calcite-date-picker-month": [
          "calcite-date-picker-day"
        ]
      }
    },
    {
      "filePath": "src/components/input-message/input-message.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-input-message",
      "readme": "# calcite-input-message\n\nDisplays a contextual message to a user. Allows the passing of content, links, etc.\n",
      "docs": "Displays a contextual message to a user. Allows the passing of content, links, etc.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding text."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-label>\n  Desired subdomain\n  <calcite-input suffix-text=\".city-of-acme.gov\" placeholder=\"Enter your subdomain\" value=\"big-map-fan\">\n  </calcite-input>\n  <calcite-input-message icon=\"check-circle\" status=\"valid\">\n    Excellent news - this domain is available.\n  </calcite-input-message>\n</calcite-label>\n```\n"
      },
      "props": [
        {
          "name": "icon",
          "type": "boolean | string",
          "complexType": {
            "original": "boolean | string",
            "resolved": "boolean | string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "status",
          "type": "\"idle\" | \"invalid\" | \"valid\"",
          "complexType": {
            "original": "Status",
            "resolved": "\"idle\" | \"invalid\" | \"valid\"",
            "references": {
              "Status": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Status"
              }
            }
          },
          "mutable": false,
          "attr": "status",
          "reflectToAttr": true,
          "docs": "Specifies the status of the input field, which determines message and icons.",
          "docsTags": [],
          "default": "\"idle\"",
          "values": [
            {
              "value": "idle",
              "type": "string"
            },
            {
              "value": "invalid",
              "type": "string"
            },
            {
              "value": "valid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-input-message-spacing-value",
          "annotation": "prop",
          "docs": "The top margin spacing above the component."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding text."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-combobox",
        "calcite-input",
        "calcite-input-date-picker",
        "calcite-input-number",
        "calcite-input-text",
        "calcite-input-time-picker",
        "calcite-radio-button-group",
        "calcite-segmented-control",
        "calcite-select",
        "calcite-text-area"
      ],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-input-message": [
          "calcite-icon"
        ],
        "calcite-combobox": [
          "calcite-input-message"
        ],
        "calcite-input": [
          "calcite-input-message"
        ],
        "calcite-input-date-picker": [
          "calcite-input-message"
        ],
        "calcite-input-number": [
          "calcite-input-message"
        ],
        "calcite-input-text": [
          "calcite-input-message"
        ],
        "calcite-input-time-picker": [
          "calcite-input-message"
        ],
        "calcite-radio-button-group": [
          "calcite-input-message"
        ],
        "calcite-segmented-control": [
          "calcite-input-message"
        ],
        "calcite-select": [
          "calcite-input-message"
        ],
        "calcite-text-area": [
          "calcite-input-message"
        ]
      }
    },
    {
      "filePath": "src/components/input-number/input-number.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-input-number",
      "readme": "# calcite-input-number\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "action - A slot for positioning a button next to the component."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-input-number placeholder=\"Offset distance\" step=\"0.25\" suffix-text=\"miles\"></calcite-input-number>\n```\n",
        "Integer": "Restrict the component to integer numbers only with `integer`, which will disable exponential notation.\n\n```html\n<calcite-label layout=\"inline\">\n  Birds observed\n  <calcite-input-number placeholder=\"Number of birds\" step=\"1\" min=\"0\" integer></calcite-input-number>\n</calcite-label>\n```\n"
      },
      "props": [
        {
          "name": "alignment",
          "type": "\"end\" | \"start\"",
          "complexType": {
            "original": "Extract<\"start\" | \"end\", Alignment>",
            "resolved": "\"end\" | \"start\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Alignment": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Alignment"
              }
            }
          },
          "mutable": false,
          "attr": "alignment",
          "reflectToAttr": true,
          "docs": "Specifies the text alignment of the component's value.",
          "docsTags": [],
          "default": "\"start\"",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocomplete",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Specifies the type of content to autocomplete, for use in forms.\nRead the native attribute's documentation on MDN for more info.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": true,
          "docs": "When `true`, the component is focused on page load. Only one element can contain `autofocus`. If multiple elements have `autofocus`, the first element will receive focus.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[autofocus](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus)"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clearable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": true,
          "docs": "When `true`, a clear button is displayed when the component has a value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "enterKeyHint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "enter-key-hint",
          "reflectToAttr": false,
          "docs": "Specifies the action label or icon for the Enter key on virtual keyboards.\nRead the native attribute's documentation on MDN for more info.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[step](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "form",
          "reflectToAttr": true,
          "docs": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "groupSeparator",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "group-separator",
          "reflectToAttr": true,
          "docs": "When `true`, number values are displayed with a group separator corresponding to the language and country format.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "boolean | string",
          "complexType": {
            "original": "string | boolean",
            "resolved": "boolean | string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display.",
          "docsTags": [
            {
              "name": "futureBreaking",
              "text": "Remove boolean type as it is not supported."
            }
          ],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputMode",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-mode",
          "reflectToAttr": false,
          "docs": "Specifies the type of content to help devices display an appropriate virtual keyboard.\nRead the native attribute's documentation on MDN for more info.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[step](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)"
            }
          ],
          "default": "\"decimal\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "integer",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "integer",
          "reflectToAttr": false,
          "docs": "When `true`, restricts the component to integer numbers only and disables exponential notation.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component's button or hyperlink.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When `true`, the component is in the loading state and `calcite-progress` is displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": true,
          "docs": "Specifies the maximum value.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[max](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max)"
            }
          ],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxLength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max-length",
          "reflectToAttr": true,
          "docs": "Specifies the maximum length of text for the component's value.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)"
            },
            {
              "name": "deprecated",
              "text": "This property has no effect on the component."
            }
          ],
          "deprecation": "This property has no effect on the component.",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ clear?: string; loading?: string; }",
          "complexType": {
            "original": "Partial<InputNumberMessages>",
            "resolved": "{ clear?: string; loading?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "InputNumberMessages": {
                "location": "import",
                "path": "./assets/input-number/t9n",
                "id": "src/components/input-number/assets/input-number/t9n/index.d.ts::InputNumberMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ clear?: string; loading?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": true,
          "docs": "Specifies the minimum value.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[min](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min)"
            }
          ],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minLength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "min-length",
          "reflectToAttr": true,
          "docs": "Specifies the minimum length of text for the component's value.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)"
            },
            {
              "name": "deprecated",
              "text": "This property has no effect on the component."
            }
          ],
          "deprecation": "This property has no effect on the component.",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberButtonType",
          "type": "\"horizontal\" | \"none\" | \"vertical\"",
          "complexType": {
            "original": "InputPlacement",
            "resolved": "\"horizontal\" | \"none\" | \"vertical\"",
            "references": {
              "InputPlacement": {
                "location": "import",
                "path": "../input/interfaces",
                "id": "src/components/input/interfaces.ts::InputPlacement"
              }
            }
          },
          "mutable": false,
          "attr": "number-button-type",
          "reflectToAttr": true,
          "docs": "Specifies the placement of the buttons.",
          "docsTags": [],
          "default": "\"vertical\"",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberingSystem",
          "type": "\"arab\" | \"arabext\" | \"latn\"",
          "complexType": {
            "original": "NumberingSystem",
            "resolved": "\"arab\" | \"arabext\" | \"latn\"",
            "references": {
              "NumberingSystem": {
                "location": "import",
                "path": "../../utils/locale",
                "id": "src/utils/locale.ts::NumberingSystem"
              }
            }
          },
          "mutable": false,
          "attr": "numbering-system",
          "reflectToAttr": true,
          "docs": "Specifies the Unicode numeral system used by the component for localization.",
          "docsTags": [],
          "values": [
            {
              "value": "arab",
              "type": "string"
            },
            {
              "value": "arabext",
              "type": "string"
            },
            {
              "value": "latn",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Specifies placeholder text for the component.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "prefixText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "prefix-text",
          "reflectToAttr": false,
          "docs": "Adds text to the start of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readOnly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "read-only",
          "reflectToAttr": true,
          "docs": "When `true`, the component's value can be read, but cannot be modified.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "When `true`, the component must have a value in order for the form to submit.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "status",
          "type": "\"idle\" | \"invalid\" | \"valid\"",
          "complexType": {
            "original": "Status",
            "resolved": "\"idle\" | \"invalid\" | \"valid\"",
            "references": {
              "Status": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Status"
              }
            }
          },
          "mutable": false,
          "attr": "status",
          "reflectToAttr": true,
          "docs": "Specifies the status of the input field, which determines message and icons.",
          "docsTags": [],
          "default": "\"idle\"",
          "values": [
            {
              "value": "idle",
              "type": "string"
            },
            {
              "value": "invalid",
              "type": "string"
            },
            {
              "value": "valid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "\"any\" | number",
          "complexType": {
            "original": "number | \"any\"",
            "resolved": "\"any\" | number",
            "references": {}
          },
          "mutable": false,
          "attr": "step",
          "reflectToAttr": true,
          "docs": "Specifies the granularity that the component's value must adhere to.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)"
            }
          ],
          "values": [
            {
              "value": "any",
              "type": "string"
            },
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "suffixText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "suffix-text",
          "reflectToAttr": false,
          "docs": "Adds text to the end of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validationIcon",
          "type": "boolean | string",
          "complexType": {
            "original": "string | boolean",
            "resolved": "boolean | string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-icon",
          "reflectToAttr": true,
          "docs": "Specifies the validation icon to display under the component.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validationMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-message",
          "reflectToAttr": false,
          "docs": "Specifies the validation message to display under the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's value.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "selectText",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "selectText() => Promise<void>",
          "parameters": [],
          "docs": "Selects the text of the component's `value`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteInputNumberChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires each time a new value is typed and committed.",
          "docsTags": []
        },
        {
          "event": "calciteInputNumberInput",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fires each time a new value is typed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "action",
          "docs": "A slot for positioning a button next to the component."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-color-picker",
        "calcite-color-picker-hex-input"
      ],
      "dependencies": [
        "calcite-progress",
        "calcite-icon",
        "calcite-input-message"
      ],
      "dependencyGraph": {
        "calcite-input-number": [
          "calcite-progress",
          "calcite-icon",
          "calcite-input-message"
        ],
        "calcite-input-message": [
          "calcite-icon"
        ],
        "calcite-color-picker": [
          "calcite-input-number"
        ],
        "calcite-color-picker-hex-input": [
          "calcite-input-number"
        ]
      }
    },
    {
      "filePath": "src/components/input-text/input-text.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-input-text",
      "readme": "# calcite-input-text\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "action - A slot for positioning a button next to the component."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-input-text placeholder=\"Enter your region\"></calcite-input-text>\n```\n"
      },
      "props": [
        {
          "name": "alignment",
          "type": "\"end\" | \"start\"",
          "complexType": {
            "original": "Extract<\"start\" | \"end\", Alignment>",
            "resolved": "\"end\" | \"start\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Alignment": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Alignment"
              }
            }
          },
          "mutable": false,
          "attr": "alignment",
          "reflectToAttr": true,
          "docs": "Specifies the text alignment of the component's value.",
          "docsTags": [],
          "default": "\"start\"",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocomplete",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Specifies the type of content to autocomplete, for use in forms.\nRead the native attribute's documentation on MDN for more info.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": true,
          "docs": "When `true`, the component is focused on page load. Only one element can contain `autofocus`. If multiple elements have `autofocus`, the first element will receive focus.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[autofocus](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus)"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clearable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": true,
          "docs": "When `true`, a clear button is displayed when the component has a value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "enterKeyHint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "enter-key-hint",
          "reflectToAttr": false,
          "docs": "Specifies the action label or icon for the Enter key on virtual keyboards.\nRead the native attribute's documentation on MDN for more info.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[step](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "form",
          "reflectToAttr": true,
          "docs": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "boolean | string",
          "complexType": {
            "original": "string | boolean",
            "resolved": "boolean | string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display.",
          "docsTags": [
            {
              "name": "futureBreaking",
              "text": "Remove boolean type as it is not supported."
            }
          ],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputMode",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-mode",
          "reflectToAttr": false,
          "docs": "Specifies the type of content to help devices display an appropriate virtual keyboard.\nRead the native attribute's documentation on MDN for more info.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[step](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)"
            }
          ],
          "default": "\"text\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component's button or hyperlink.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When `true`, the component is in the loading state and `calcite-progress` is displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxLength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max-length",
          "reflectToAttr": true,
          "docs": "Specifies the maximum length of text for the component's value.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)"
            }
          ],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ clear?: string; loading?: string; }",
          "complexType": {
            "original": "Partial<InputTextMessages>",
            "resolved": "{ clear?: string; loading?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "InputTextMessages": {
                "location": "import",
                "path": "./assets/input-text/t9n",
                "id": "src/components/input-text/assets/input-text/t9n/index.d.ts::InputTextMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ clear?: string; loading?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minLength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "min-length",
          "reflectToAttr": true,
          "docs": "Specifies the minimum length of text for the component's value.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)"
            }
          ],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pattern",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "pattern",
          "reflectToAttr": false,
          "docs": "Specifies a regex pattern the component's `value` must match for validation.\nRead the native attribute's documentation on MDN for more info.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Specifies placeholder text for the component.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "prefixText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "prefix-text",
          "reflectToAttr": false,
          "docs": "Adds text to the start of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readOnly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "read-only",
          "reflectToAttr": true,
          "docs": "When `true`, the component's value can be read, but cannot be modified.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "When `true`, the component must have a value in order for the form to submit.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "status",
          "type": "\"idle\" | \"invalid\" | \"valid\"",
          "complexType": {
            "original": "Status",
            "resolved": "\"idle\" | \"invalid\" | \"valid\"",
            "references": {
              "Status": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Status"
              }
            }
          },
          "mutable": false,
          "attr": "status",
          "reflectToAttr": true,
          "docs": "Specifies the status of the input field, which determines message and icons.",
          "docsTags": [],
          "default": "\"idle\"",
          "values": [
            {
              "value": "idle",
              "type": "string"
            },
            {
              "value": "invalid",
              "type": "string"
            },
            {
              "value": "valid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "suffixText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "suffix-text",
          "reflectToAttr": false,
          "docs": "Adds text to the end of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validationIcon",
          "type": "boolean | string",
          "complexType": {
            "original": "string | boolean",
            "resolved": "boolean | string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-icon",
          "reflectToAttr": true,
          "docs": "Specifies the validation icon to display under the component.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validationMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-message",
          "reflectToAttr": false,
          "docs": "Specifies the validation message to display under the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's value.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "selectText",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "selectText() => Promise<void>",
          "parameters": [],
          "docs": "Selects the text of the component's `value`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteInputTextChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fires each time a new value is typed and committed.",
          "docsTags": []
        },
        {
          "event": "calciteInputTextInput",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fires each time a new value is typed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "action",
          "docs": "A slot for positioning a button next to the component."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-color-picker-hex-input",
        "calcite-input-date-picker",
        "calcite-input-time-picker"
      ],
      "dependencies": [
        "calcite-progress",
        "calcite-icon",
        "calcite-input-message"
      ],
      "dependencyGraph": {
        "calcite-input-text": [
          "calcite-progress",
          "calcite-icon",
          "calcite-input-message"
        ],
        "calcite-input-message": [
          "calcite-icon"
        ],
        "calcite-color-picker-hex-input": [
          "calcite-input-text"
        ],
        "calcite-input-date-picker": [
          "calcite-input-text"
        ],
        "calcite-input-time-picker": [
          "calcite-input-text"
        ]
      }
    },
    {
      "filePath": "src/components/input-time-picker/input-time-picker.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-input-time-picker",
      "readme": "# calcite-input-time-picker\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "Basic": "```html\n<calcite-input-time-picker name=\"light\" scale=\"m\" step=\"1\" value=\"12:21:30\"></calcite-input-time-picker>\n```\n",
        "Fractional-seconds": "```html\n<calcite-input-time-picker name=\"light\" scale=\"m\" step=\".001\" value=\"12:21:30.045\"></calcite-input-time-picker>\n```\n"
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focusTrapDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "focus-trap-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, prevents focus trapping.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "form",
          "reflectToAttr": true,
          "docs": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ chooseTime?: string; fractionalSecond?: string; fractionalSecondDown?: string; fractionalSecondUp?: string; hour?: string; hourDown?: string; hourUp?: string; meridiem?: string; meridiemDown?: string; meridiemUp?: string; minute?: string; minuteDown?: string; minuteUp?: string; second?: string; secondDown?: string; secondUp?: string; }",
          "complexType": {
            "original": "Partial<InputTimePickerMessages & TimePickerMessages>",
            "resolved": "{ chooseTime?: string; fractionalSecond?: string; fractionalSecondDown?: string; fractionalSecondUp?: string; hour?: string; hourDown?: string; hourUp?: string; meridiem?: string; meridiemDown?: string; meridiemUp?: string; minute?: string; minuteDown?: string; minuteUp?: string; second?: string; secondDown?: string; secondUp?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "InputTimePickerMessages": {
                "location": "import",
                "path": "./assets/input-time-picker/t9n",
                "id": "src/components/input-time-picker/assets/input-time-picker/t9n/index.d.ts::InputTimePickerMessages"
              },
              "TimePickerMessages": {
                "location": "import",
                "path": "../time-picker/assets/time-picker/t9n",
                "id": "src/components/time-picker/assets/time-picker/t9n/index.d.ts::TimePickerMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ chooseTime?: string; fractionalSecond?: string; fractionalSecondDown?: string; fractionalSecondUp?: string; hour?: string; hourDown?: string; hourUp?: string; meridiem?: string; meridiemDown?: string; meridiemUp?: string; minute?: string; minuteDown?: string; minuteUp?: string; second?: string; secondDown?: string; secondUp?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Specifies the name of the component on form submission.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberingSystem",
          "type": "\"arab\" | \"arabext\" | \"latn\"",
          "complexType": {
            "original": "NumberingSystem",
            "resolved": "\"arab\" | \"arabext\" | \"latn\"",
            "references": {
              "NumberingSystem": {
                "location": "import",
                "path": "../../utils/locale",
                "id": "src/utils/locale.ts::NumberingSystem"
              }
            }
          },
          "mutable": false,
          "attr": "numbering-system",
          "reflectToAttr": false,
          "docs": "Specifies the Unicode numeral system used by the component for localization.",
          "docsTags": [],
          "values": [
            {
              "value": "arab",
              "type": "string"
            },
            {
              "value": "arabext",
              "type": "string"
            },
            {
              "value": "latn",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "When `true`, displays the `calcite-time-picker` component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPositioning",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "OverlayPositioning",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {
              "OverlayPositioning": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::OverlayPositioning"
              }
            }
          },
          "mutable": false,
          "attr": "overlay-positioning",
          "reflectToAttr": false,
          "docs": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
          "docsTags": [],
          "default": "\"absolute\"",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "\"auto\" | \"top\" | \"right\" | \"bottom\" | \"left\" | \"top-start\" | \"top-end\" | \"right-start\" | \"right-end\" | \"bottom-start\" | \"bottom-end\" | \"left-start\" | \"left-end\" | \"auto-start\" | \"auto-end\" | \"leading-start\" | \"leading\" | \"leading-end\" | \"trailing-end\" | \"trailing\" | \"trailing-start\"",
          "complexType": {
            "original": "LogicalPlacement",
            "resolved": "\"auto\" | \"top\" | \"right\" | \"bottom\" | \"left\" | \"top-start\" | \"top-end\" | \"right-start\" | \"right-end\" | \"bottom-start\" | \"bottom-end\" | \"left-start\" | \"left-end\" | \"auto-start\" | \"auto-end\" | \"leading-start\" | \"leading\" | \"leading-end\" | \"trailing-end\" | \"trailing\" | \"trailing-start\"",
            "references": {
              "LogicalPlacement": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::LogicalPlacement"
              }
            }
          },
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": true,
          "docs": "Determines where the popover will be positioned relative to the input.",
          "docsTags": [],
          "default": "\"auto\"",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "leading-start",
              "type": "string"
            },
            {
              "value": "leading",
              "type": "string"
            },
            {
              "value": "leading-end",
              "type": "string"
            },
            {
              "value": "trailing-end",
              "type": "string"
            },
            {
              "value": "trailing",
              "type": "string"
            },
            {
              "value": "trailing-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readOnly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "read-only",
          "reflectToAttr": true,
          "docs": "When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "When `true`, the component must have a value in order for the form to submit.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "status",
          "type": "\"idle\" | \"invalid\" | \"valid\"",
          "complexType": {
            "original": "Status",
            "resolved": "\"idle\" | \"invalid\" | \"valid\"",
            "references": {
              "Status": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Status"
              }
            }
          },
          "mutable": false,
          "attr": "status",
          "reflectToAttr": true,
          "docs": "Specifies the status of the input field, which determines message and icons.",
          "docsTags": [],
          "default": "\"idle\"",
          "values": [
            {
              "value": "idle",
              "type": "string"
            },
            {
              "value": "invalid",
              "type": "string"
            },
            {
              "value": "valid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "Specifies the granularity the component's `value` must adhere to (in seconds).",
          "docsTags": [],
          "default": "60",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validationIcon",
          "type": "boolean | string",
          "complexType": {
            "original": "string | boolean",
            "resolved": "boolean | string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-icon",
          "reflectToAttr": true,
          "docs": "Specifies the validation icon to display under the component.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validationMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-message",
          "reflectToAttr": false,
          "docs": "Specifies the validation message to display under the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The time value in ISO (24-hour) format.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "reposition",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(delayed?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "delayed",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "reposition(delayed?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "delayed",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Updates the position of the component.",
          "docsTags": [
            {
              "name": "param",
              "text": "delayed"
            }
          ]
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteInputTimePickerBeforeClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is requested to be closed and before the closing transition begins.",
          "docsTags": []
        },
        {
          "event": "calciteInputTimePickerBeforeOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
          "docsTags": []
        },
        {
          "event": "calciteInputTimePickerChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fires when the component's `value` is changes.",
          "docsTags": []
        },
        {
          "event": "calciteInputTimePickerClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is closed and animation is complete.",
          "docsTags": []
        },
        {
          "event": "calciteInputTimePickerOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is open and animation is complete.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-input-text",
        "calcite-popover",
        "calcite-time-picker",
        "calcite-icon",
        "calcite-input-message"
      ],
      "dependencyGraph": {
        "calcite-input-time-picker": [
          "calcite-input-text",
          "calcite-popover",
          "calcite-time-picker",
          "calcite-icon",
          "calcite-input-message"
        ],
        "calcite-input-text": [
          "calcite-progress",
          "calcite-icon",
          "calcite-input-message"
        ],
        "calcite-input-message": [
          "calcite-icon"
        ],
        "calcite-popover": [
          "calcite-action",
          "calcite-icon"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-time-picker": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/input-time-zone/input-time-zone.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-input-time-zone",
      "readme": "# calcite-input-time-zone\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "Basic": "Displays options to select a time zone offset (in minutes).\n\n```html\n<calcite-input-time-zone value=\"-360\"></calcite-input-time-zone>\n```\n",
        "TimeZoneNames": "Displays options to select a IANA time zone name.\n\n```html\n<calcite-input-time-zone mode=\"name\" value=\"America/Ciudad_Juarez\"></calcite-input-time-zone>\n```\n"
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "form",
          "reflectToAttr": true,
          "docs": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxItems",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max-items",
          "reflectToAttr": true,
          "docs": "Specifies the component's maximum number of options to display before displaying a scrollbar.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ chooseTimeZone?: string; timeZoneLabel?: string; \"Africa/Abidjan\"?: string; \"Africa/Accra\"?: string; \"Africa/Addis_Ababa\"?: string; \"Africa/Algiers\"?: string; \"Africa/Asmera\"?: string; \"Africa/Bamako\"?: string; \"Africa/Bangui\"?: string; \"Africa/Banjul\"?: string; \"Africa/Bissau\"?: string; \"Africa/Blantyre\"?: string; \"Africa/Brazzaville\"?: string; \"Africa/Bujumbura\"?: string; \"Africa/Cairo\"?: string; \"Africa/Casablanca\"?: string; \"Africa/Ceuta\"?: string; \"Africa/Conakry\"?: string; \"Africa/Dakar\"?: string; \"Africa/Dar_es_Salaam\"?: string; \"Africa/Djibouti\"?: string; \"Africa/Douala\"?: string; \"Africa/El_Aaiun\"?: string; \"Africa/Freetown\"?: string; \"Africa/Gaborone\"?: string; \"Africa/Harare\"?: string; \"Africa/Johannesburg\"?: string; \"Africa/Juba\"?: string; \"Africa/Kampala\"?: string; \"Africa/Khartoum\"?: string; \"Africa/Kigali\"?: string; \"Africa/Kinshasa\"?: string; \"Africa/Lagos\"?: string; \"Africa/Libreville\"?: string; \"Africa/Lome\"?: string; \"Africa/Luanda\"?: string; \"Africa/Lubumbashi\"?: string; \"Africa/Lusaka\"?: string; \"Africa/Malabo\"?: string; \"Africa/Maputo\"?: string; \"Africa/Maseru\"?: string; \"Africa/Mbabane\"?: string; \"Africa/Mogadishu\"?: string; \"Africa/Monrovia\"?: string; \"Africa/Nairobi\"?: string; \"Africa/Ndjamena\"?: string; \"Africa/Niamey\"?: string; \"Africa/Nouakchott\"?: string; \"Africa/Ouagadougou\"?: string; \"Africa/Porto-Novo\"?: string; \"Africa/Sao_Tome\"?: string; \"Africa/Tripoli\"?: string; \"Africa/Tunis\"?: string; \"Africa/Windhoek\"?: string; \"America/Adak\"?: string; \"America/Anchorage\"?: string; \"America/Anguilla\"?: string; \"America/Antigua\"?: string; \"America/Araguaina\"?: string; \"America/Argentina/La_Rioja\"?: string; \"America/Argentina/Rio_Gallegos\"?: string; \"America/Argentina/Salta\"?: string; \"America/Argentina/San_Juan\"?: string; \"America/Argentina/San_Luis\"?: string; \"America/Argentina/Tucuman\"?: string; \"America/Argentina/Ushuaia\"?: string; \"America/Aruba\"?: string; \"America/Asuncion\"?: string; \"America/Bahia\"?: string; \"America/Bahia_Banderas\"?: string; \"America/Barbados\"?: string; \"America/Belem\"?: string; \"America/Belize\"?: string; \"America/Blanc-Sablon\"?: string; \"America/Boa_Vista\"?: string; \"America/Bogota\"?: string; \"America/Boise\"?: string; \"America/Buenos_Aires\"?: string; \"America/Cambridge_Bay\"?: string; \"America/Campo_Grande\"?: string; \"America/Cancun\"?: string; \"America/Caracas\"?: string; \"America/Catamarca\"?: string; \"America/Cayenne\"?: string; \"America/Cayman\"?: string; \"America/Chicago\"?: string; \"America/Chihuahua\"?: string; \"America/Ciudad_Juarez\"?: string; \"America/Coral_Harbour\"?: string; \"America/Cordoba\"?: string; \"America/Costa_Rica\"?: string; \"America/Creston\"?: string; \"America/Cuiaba\"?: string; \"America/Curacao\"?: string; \"America/Danmarkshavn\"?: string; \"America/Dawson\"?: string; \"America/Dawson_Creek\"?: string; \"America/Denver\"?: string; \"America/Detroit\"?: string; \"America/Dominica\"?: string; \"America/Edmonton\"?: string; \"America/Eirunepe\"?: string; \"America/El_Salvador\"?: string; \"America/Fort_Nelson\"?: string; \"America/Fortaleza\"?: string; \"America/Glace_Bay\"?: string; \"America/Godthab\"?: string; \"America/Goose_Bay\"?: string; \"America/Grand_Turk\"?: string; \"America/Grenada\"?: string; \"America/Guadeloupe\"?: string; \"America/Guatemala\"?: string; \"America/Guayaquil\"?: string; \"America/Guyana\"?: string; \"America/Halifax\"?: string; \"America/Havana\"?: string; \"America/Hermosillo\"?: string; \"America/Indiana/Knox\"?: string; \"America/Indiana/Marengo\"?: string; \"America/Indiana/Petersburg\"?: string; \"America/Indiana/Tell_City\"?: string; \"America/Indiana/Vevay\"?: string; \"America/Indiana/Vincennes\"?: string; \"America/Indiana/Winamac\"?: string; \"America/Indianapolis\"?: string; \"America/Inuvik\"?: string; \"America/Iqaluit\"?: string; \"America/Jamaica\"?: string; \"America/Jujuy\"?: string; \"America/Juneau\"?: string; \"America/Kentucky/Monticello\"?: string; \"America/Kralendijk\"?: string; \"America/La_Paz\"?: string; \"America/Lima\"?: string; \"America/Los_Angeles\"?: string; \"America/Louisville\"?: string; \"America/Lower_Princes\"?: string; \"America/Maceio\"?: string; \"America/Managua\"?: string; \"America/Manaus\"?: string; \"America/Marigot\"?: string; \"America/Martinique\"?: string; \"America/Matamoros\"?: string; \"America/Mazatlan\"?: string; \"America/Mendoza\"?: string; \"America/Menominee\"?: string; \"America/Merida\"?: string; \"America/Metlakatla\"?: string; \"America/Mexico_City\"?: string; \"America/Miquelon\"?: string; \"America/Moncton\"?: string; \"America/Monterrey\"?: string; \"America/Montevideo\"?: string; \"America/Montreal\"?: string; \"America/Montserrat\"?: string; \"America/Nassau\"?: string; \"America/New_York\"?: string; \"America/Nipigon\"?: string; \"America/Nome\"?: string; \"America/Noronha\"?: string; \"America/North_Dakota/Beulah\"?: string; \"America/North_Dakota/Center\"?: string; \"America/North_Dakota/New_Salem\"?: string; \"America/Ojinaga\"?: string; \"America/Panama\"?: string; \"America/Pangnirtung\"?: string; \"America/Paramaribo\"?: string; \"America/Phoenix\"?: string; \"America/Port-au-Prince\"?: string; \"America/Port_of_Spain\"?: string; \"America/Porto_Velho\"?: string; \"America/Puerto_Rico\"?: string; \"America/Punta_Arenas\"?: string; \"America/Rainy_River\"?: string; \"America/Rankin_Inlet\"?: string; \"America/Recife\"?: string; \"America/Regina\"?: string; \"America/Resolute\"?: string; \"America/Rio_Branco\"?: string; \"America/Santa_Isabel\"?: string; \"America/Santarem\"?: string; \"America/Santiago\"?: string; \"America/Santo_Domingo\"?: string; \"America/Sao_Paulo\"?: string; \"America/Scoresbysund\"?: string; \"America/Sitka\"?: string; \"America/St_Barthelemy\"?: string; \"America/St_Johns\"?: string; \"America/St_Kitts\"?: string; \"America/St_Lucia\"?: string; \"America/St_Thomas\"?: string; \"America/St_Vincent\"?: string; \"America/Swift_Current\"?: string; \"America/Tegucigalpa\"?: string; \"America/Thule\"?: string; \"America/Thunder_Bay\"?: string; \"America/Tijuana\"?: string; \"America/Toronto\"?: string; \"America/Tortola\"?: string; \"America/Vancouver\"?: string; \"America/Whitehorse\"?: string; \"America/Winnipeg\"?: string; \"America/Yakutat\"?: string; \"America/Yellowknife\"?: string; \"Antarctica/Casey\"?: string; \"Antarctica/Davis\"?: string; \"Antarctica/DumontDUrville\"?: string; \"Antarctica/Macquarie\"?: string; \"Antarctica/Mawson\"?: string; \"Antarctica/McMurdo\"?: string; \"Antarctica/Palmer\"?: string; \"Antarctica/Rothera\"?: string; \"Antarctica/Syowa\"?: string; \"Antarctica/Troll\"?: string; \"Antarctica/Vostok\"?: string; \"Arctic/Longyearbyen\"?: string; \"Asia/Aden\"?: string; \"Asia/Almaty\"?: string; \"Asia/Amman\"?: string; \"Asia/Anadyr\"?: string; \"Asia/Aqtau\"?: string; \"Asia/Aqtobe\"?: string; \"Asia/Ashgabat\"?: string; \"Asia/Atyrau\"?: string; \"Asia/Baghdad\"?: string; \"Asia/Bahrain\"?: string; \"Asia/Baku\"?: string; \"Asia/Bangkok\"?: string; \"Asia/Barnaul\"?: string; \"Asia/Beirut\"?: string; \"Asia/Bishkek\"?: string; \"Asia/Brunei\"?: string; \"Asia/Calcutta\"?: string; \"Asia/Chita\"?: string; \"Asia/Choibalsan\"?: string; \"Asia/Colombo\"?: string; \"Asia/Damascus\"?: string; \"Asia/Dhaka\"?: string; \"Asia/Dili\"?: string; \"Asia/Dubai\"?: string; \"Asia/Dushanbe\"?: string; \"Asia/Famagusta\"?: string; \"Asia/Gaza\"?: string; \"Asia/Hebron\"?: string; \"Asia/Hong_Kong\"?: string; \"Asia/Hovd\"?: string; \"Asia/Irkutsk\"?: string; \"Asia/Jakarta\"?: string; \"Asia/Jayapura\"?: string; \"Asia/Jerusalem\"?: string; \"Asia/Kabul\"?: string; \"Asia/Kamchatka\"?: string; \"Asia/Karachi\"?: string; \"Asia/Katmandu\"?: string; \"Asia/Khandyga\"?: string; \"Asia/Krasnoyarsk\"?: string; \"Asia/Kuala_Lumpur\"?: string; \"Asia/Kuching\"?: string; \"Asia/Kuwait\"?: string; \"Asia/Macau\"?: string; \"Asia/Magadan\"?: string; \"Asia/Makassar\"?: string; \"Asia/Manila\"?: string; \"Asia/Muscat\"?: string; \"Asia/Nicosia\"?: string; \"Asia/Novokuznetsk\"?: string; \"Asia/Novosibirsk\"?: string; \"Asia/Omsk\"?: string; \"Asia/Oral\"?: string; \"Asia/Phnom_Penh\"?: string; \"Asia/Pontianak\"?: string; \"Asia/Pyongyang\"?: string; \"Asia/Qatar\"?: string; \"Asia/Qostanay\"?: string; \"Asia/Qyzylorda\"?: string; \"Asia/Rangoon\"?: string; \"Asia/Riyadh\"?: string; \"Asia/Saigon\"?: string; \"Asia/Sakhalin\"?: string; \"Asia/Samarkand\"?: string; \"Asia/Seoul\"?: string; \"Asia/Shanghai\"?: string; \"Asia/Singapore\"?: string; \"Asia/Srednekolymsk\"?: string; \"Asia/Taipei\"?: string; \"Asia/Tashkent\"?: string; \"Asia/Tbilisi\"?: string; \"Asia/Tehran\"?: string; \"Asia/Thimphu\"?: string; \"Asia/Tokyo\"?: string; \"Asia/Tomsk\"?: string; \"Asia/Ulaanbaatar\"?: string; \"Asia/Urumqi\"?: string; \"Asia/Ust-Nera\"?: string; \"Asia/Vientiane\"?: string; \"Asia/Vladivostok\"?: string; \"Asia/Yakutsk\"?: string; \"Asia/Yekaterinburg\"?: string; \"Asia/Yerevan\"?: string; \"Atlantic/Azores\"?: string; \"Atlantic/Bermuda\"?: string; \"Atlantic/Canary\"?: string; \"Atlantic/Cape_Verde\"?: string; \"Atlantic/Faeroe\"?: string; \"Atlantic/Madeira\"?: string; \"Atlantic/Reykjavik\"?: string; \"Atlantic/South_Georgia\"?: string; \"Atlantic/St_Helena\"?: string; \"Atlantic/Stanley\"?: string; \"Australia/Adelaide\"?: string; \"Australia/Brisbane\"?: string; \"Australia/Broken_Hill\"?: string; \"Australia/Currie\"?: string; \"Australia/Darwin\"?: string; \"Australia/Eucla\"?: string; \"Australia/Hobart\"?: string; \"Australia/Lindeman\"?: string; \"Australia/Lord_Howe\"?: string; \"Australia/Melbourne\"?: string; \"Australia/Perth\"?: string; \"Australia/Sydney\"?: string; \"Europe/Amsterdam\"?: string; \"Europe/Andorra\"?: string; \"Europe/Astrakhan\"?: string; \"Europe/Athens\"?: string; \"Europe/Belgrade\"?: string; \"Europe/Berlin\"?: string; \"Europe/Bratislava\"?: string; \"Europe/Brussels\"?: string; \"Europe/Bucharest\"?: string; \"Europe/Budapest\"?: string; \"Europe/Busingen\"?: string; \"Europe/Chisinau\"?: string; \"Europe/Copenhagen\"?: string; \"Europe/Dublin\"?: string; \"Europe/Gibraltar\"?: string; \"Europe/Guernsey\"?: string; \"Europe/Helsinki\"?: string; \"Europe/Isle_of_Man\"?: string; \"Europe/Istanbul\"?: string; \"Europe/Jersey\"?: string; \"Europe/Kaliningrad\"?: string; \"Europe/Kiev\"?: string; \"Europe/Kirov\"?: string; \"Europe/Lisbon\"?: string; \"Europe/Ljubljana\"?: string; \"Europe/London\"?: string; \"Europe/Luxembourg\"?: string; \"Europe/Madrid\"?: string; \"Europe/Malta\"?: string; \"Europe/Mariehamn\"?: string; \"Europe/Minsk\"?: string; \"Europe/Monaco\"?: string; \"Europe/Moscow\"?: string; \"Europe/Oslo\"?: string; \"Europe/Paris\"?: string; \"Europe/Podgorica\"?: string; \"Europe/Prague\"?: string; \"Europe/Riga\"?: string; \"Europe/Rome\"?: string; \"Europe/Samara\"?: string; \"Europe/San_Marino\"?: string; \"Europe/Sarajevo\"?: string; \"Europe/Saratov\"?: string; \"Europe/Simferopol\"?: string; \"Europe/Skopje\"?: string; \"Europe/Sofia\"?: string; \"Europe/Stockholm\"?: string; \"Europe/Tallinn\"?: string; \"Europe/Tirane\"?: string; \"Europe/Ulyanovsk\"?: string; \"Europe/Uzhgorod\"?: string; \"Europe/Vaduz\"?: string; \"Europe/Vatican\"?: string; \"Europe/Vienna\"?: string; \"Europe/Vilnius\"?: string; \"Europe/Volgograd\"?: string; \"Europe/Warsaw\"?: string; \"Europe/Zagreb\"?: string; \"Europe/Zaporozhye\"?: string; \"Europe/Zurich\"?: string; \"Indian/Antananarivo\"?: string; \"Indian/Chagos\"?: string; \"Indian/Christmas\"?: string; \"Indian/Cocos\"?: string; \"Indian/Comoro\"?: string; \"Indian/Kerguelen\"?: string; \"Indian/Mahe\"?: string; \"Indian/Maldives\"?: string; \"Indian/Mauritius\"?: string; \"Indian/Mayotte\"?: string; \"Indian/Reunion\"?: string; \"Pacific/Apia\"?: string; \"Pacific/Auckland\"?: string; \"Pacific/Bougainville\"?: string; \"Pacific/Chatham\"?: string; \"Pacific/Easter\"?: string; \"Pacific/Efate\"?: string; \"Pacific/Enderbury\"?: string; \"Pacific/Fakaofo\"?: string; \"Pacific/Fiji\"?: string; \"Pacific/Funafuti\"?: string; \"Pacific/Galapagos\"?: string; \"Pacific/Gambier\"?: string; \"Pacific/Guadalcanal\"?: string; \"Pacific/Guam\"?: string; \"Pacific/Honolulu\"?: string; \"Pacific/Johnston\"?: string; \"Pacific/Kiritimati\"?: string; \"Pacific/Kosrae\"?: string; \"Pacific/Kwajalein\"?: string; \"Pacific/Majuro\"?: string; \"Pacific/Marquesas\"?: string; \"Pacific/Midway\"?: string; \"Pacific/Nauru\"?: string; \"Pacific/Niue\"?: string; \"Pacific/Norfolk\"?: string; \"Pacific/Noumea\"?: string; \"Pacific/Pago_Pago\"?: string; \"Pacific/Palau\"?: string; \"Pacific/Pitcairn\"?: string; \"Pacific/Ponape\"?: string; \"Pacific/Port_Moresby\"?: string; \"Pacific/Rarotonga\"?: string; \"Pacific/Saipan\"?: string; \"Pacific/Tahiti\"?: string; \"Pacific/Tarawa\"?: string; \"Pacific/Tongatapu\"?: string; \"Pacific/Truk\"?: string; \"Pacific/Wake\"?: string; \"Pacific/Wallis\"?: string; }",
          "complexType": {
            "original": "Partial<InputTimeZoneMessages>",
            "resolved": "{ chooseTimeZone?: string; timeZoneLabel?: string; \"Africa/Abidjan\"?: string; \"Africa/Accra\"?: string; \"Africa/Addis_Ababa\"?: string; \"Africa/Algiers\"?: string; \"Africa/Asmera\"?: string; \"Africa/Bamako\"?: string; \"Africa/Bangui\"?: string; \"Africa/Banjul\"?: string; \"Africa/Bissau\"?: string; \"Africa/Blantyre\"?: string; \"Africa/Brazzaville\"?: string; \"Africa/Bujumbura\"?: string; \"Africa/Cairo\"?: string; \"Africa/Casablanca\"?: string; \"Africa/Ceuta\"?: string; \"Africa/Conakry\"?: string; \"Africa/Dakar\"?: string; \"Africa/Dar_es_Salaam\"?: string; \"Africa/Djibouti\"?: string; \"Africa/Douala\"?: string; \"Africa/El_Aaiun\"?: string; \"Africa/Freetown\"?: string; \"Africa/Gaborone\"?: string; \"Africa/Harare\"?: string; \"Africa/Johannesburg\"?: string; \"Africa/Juba\"?: string; \"Africa/Kampala\"?: string; \"Africa/Khartoum\"?: string; \"Africa/Kigali\"?: string; \"Africa/Kinshasa\"?: string; \"Africa/Lagos\"?: string; \"Africa/Libreville\"?: string; \"Africa/Lome\"?: string; \"Africa/Luanda\"?: string; \"Africa/Lubumbashi\"?: string; \"Africa/Lusaka\"?: string; \"Africa/Malabo\"?: string; \"Africa/Maputo\"?: string; \"Africa/Maseru\"?: string; \"Africa/Mbabane\"?: string; \"Africa/Mogadishu\"?: string; \"Africa/Monrovia\"?: string; \"Africa/Nairobi\"?: string; \"Africa/Ndjamena\"?: string; \"Africa/Niamey\"?: string; \"Africa/Nouakchott\"?: string; \"Africa/Ouagadougou\"?: string; \"Africa/Porto-Novo\"?: string; \"Africa/Sao_Tome\"?: string; \"Africa/Tripoli\"?: string; \"Africa/Tunis\"?: string; \"Africa/Windhoek\"?: string; \"America/Adak\"?: string; \"America/Anchorage\"?: string; \"America/Anguilla\"?: string; \"America/Antigua\"?: string; \"America/Araguaina\"?: string; \"America/Argentina/La_Rioja\"?: string; \"America/Argentina/Rio_Gallegos\"?: string; \"America/Argentina/Salta\"?: string; \"America/Argentina/San_Juan\"?: string; \"America/Argentina/San_Luis\"?: string; \"America/Argentina/Tucuman\"?: string; \"America/Argentina/Ushuaia\"?: string; \"America/Aruba\"?: string; \"America/Asuncion\"?: string; \"America/Bahia\"?: string; \"America/Bahia_Banderas\"?: string; \"America/Barbados\"?: string; \"America/Belem\"?: string; \"America/Belize\"?: string; \"America/Blanc-Sablon\"?: string; \"America/Boa_Vista\"?: string; \"America/Bogota\"?: string; \"America/Boise\"?: string; \"America/Buenos_Aires\"?: string; \"America/Cambridge_Bay\"?: string; \"America/Campo_Grande\"?: string; \"America/Cancun\"?: string; \"America/Caracas\"?: string; \"America/Catamarca\"?: string; \"America/Cayenne\"?: string; \"America/Cayman\"?: string; \"America/Chicago\"?: string; \"America/Chihuahua\"?: string; \"America/Ciudad_Juarez\"?: string; \"America/Coral_Harbour\"?: string; \"America/Cordoba\"?: string; \"America/Costa_Rica\"?: string; \"America/Creston\"?: string; \"America/Cuiaba\"?: string; \"America/Curacao\"?: string; \"America/Danmarkshavn\"?: string; \"America/Dawson\"?: string; \"America/Dawson_Creek\"?: string; \"America/Denver\"?: string; \"America/Detroit\"?: string; \"America/Dominica\"?: string; \"America/Edmonton\"?: string; \"America/Eirunepe\"?: string; \"America/El_Salvador\"?: string; \"America/Fort_Nelson\"?: string; \"America/Fortaleza\"?: string; \"America/Glace_Bay\"?: string; \"America/Godthab\"?: string; \"America/Goose_Bay\"?: string; \"America/Grand_Turk\"?: string; \"America/Grenada\"?: string; \"America/Guadeloupe\"?: string; \"America/Guatemala\"?: string; \"America/Guayaquil\"?: string; \"America/Guyana\"?: string; \"America/Halifax\"?: string; \"America/Havana\"?: string; \"America/Hermosillo\"?: string; \"America/Indiana/Knox\"?: string; \"America/Indiana/Marengo\"?: string; \"America/Indiana/Petersburg\"?: string; \"America/Indiana/Tell_City\"?: string; \"America/Indiana/Vevay\"?: string; \"America/Indiana/Vincennes\"?: string; \"America/Indiana/Winamac\"?: string; \"America/Indianapolis\"?: string; \"America/Inuvik\"?: string; \"America/Iqaluit\"?: string; \"America/Jamaica\"?: string; \"America/Jujuy\"?: string; \"America/Juneau\"?: string; \"America/Kentucky/Monticello\"?: string; \"America/Kralendijk\"?: string; \"America/La_Paz\"?: string; \"America/Lima\"?: string; \"America/Los_Angeles\"?: string; \"America/Louisville\"?: string; \"America/Lower_Princes\"?: string; \"America/Maceio\"?: string; \"America/Managua\"?: string; \"America/Manaus\"?: string; \"America/Marigot\"?: string; \"America/Martinique\"?: string; \"America/Matamoros\"?: string; \"America/Mazatlan\"?: string; \"America/Mendoza\"?: string; \"America/Menominee\"?: string; \"America/Merida\"?: string; \"America/Metlakatla\"?: string; \"America/Mexico_City\"?: string; \"America/Miquelon\"?: string; \"America/Moncton\"?: string; \"America/Monterrey\"?: string; \"America/Montevideo\"?: string; \"America/Montreal\"?: string; \"America/Montserrat\"?: string; \"America/Nassau\"?: string; \"America/New_York\"?: string; \"America/Nipigon\"?: string; \"America/Nome\"?: string; \"America/Noronha\"?: string; \"America/North_Dakota/Beulah\"?: string; \"America/North_Dakota/Center\"?: string; \"America/North_Dakota/New_Salem\"?: string; \"America/Ojinaga\"?: string; \"America/Panama\"?: string; \"America/Pangnirtung\"?: string; \"America/Paramaribo\"?: string; \"America/Phoenix\"?: string; \"America/Port-au-Prince\"?: string; \"America/Port_of_Spain\"?: string; \"America/Porto_Velho\"?: string; \"America/Puerto_Rico\"?: string; \"America/Punta_Arenas\"?: string; \"America/Rainy_River\"?: string; \"America/Rankin_Inlet\"?: string; \"America/Recife\"?: string; \"America/Regina\"?: string; \"America/Resolute\"?: string; \"America/Rio_Branco\"?: string; \"America/Santa_Isabel\"?: string; \"America/Santarem\"?: string; \"America/Santiago\"?: string; \"America/Santo_Domingo\"?: string; \"America/Sao_Paulo\"?: string; \"America/Scoresbysund\"?: string; \"America/Sitka\"?: string; \"America/St_Barthelemy\"?: string; \"America/St_Johns\"?: string; \"America/St_Kitts\"?: string; \"America/St_Lucia\"?: string; \"America/St_Thomas\"?: string; \"America/St_Vincent\"?: string; \"America/Swift_Current\"?: string; \"America/Tegucigalpa\"?: string; \"America/Thule\"?: string; \"America/Thunder_Bay\"?: string; \"America/Tijuana\"?: string; \"America/Toronto\"?: string; \"America/Tortola\"?: string; \"America/Vancouver\"?: string; \"America/Whitehorse\"?: string; \"America/Winnipeg\"?: string; \"America/Yakutat\"?: string; \"America/Yellowknife\"?: string; \"Antarctica/Casey\"?: string; \"Antarctica/Davis\"?: string; \"Antarctica/DumontDUrville\"?: string; \"Antarctica/Macquarie\"?: string; \"Antarctica/Mawson\"?: string; \"Antarctica/McMurdo\"?: string; \"Antarctica/Palmer\"?: string; \"Antarctica/Rothera\"?: string; \"Antarctica/Syowa\"?: string; \"Antarctica/Troll\"?: string; \"Antarctica/Vostok\"?: string; \"Arctic/Longyearbyen\"?: string; \"Asia/Aden\"?: string; \"Asia/Almaty\"?: string; \"Asia/Amman\"?: string; \"Asia/Anadyr\"?: string; \"Asia/Aqtau\"?: string; \"Asia/Aqtobe\"?: string; \"Asia/Ashgabat\"?: string; \"Asia/Atyrau\"?: string; \"Asia/Baghdad\"?: string; \"Asia/Bahrain\"?: string; \"Asia/Baku\"?: string; \"Asia/Bangkok\"?: string; \"Asia/Barnaul\"?: string; \"Asia/Beirut\"?: string; \"Asia/Bishkek\"?: string; \"Asia/Brunei\"?: string; \"Asia/Calcutta\"?: string; \"Asia/Chita\"?: string; \"Asia/Choibalsan\"?: string; \"Asia/Colombo\"?: string; \"Asia/Damascus\"?: string; \"Asia/Dhaka\"?: string; \"Asia/Dili\"?: string; \"Asia/Dubai\"?: string; \"Asia/Dushanbe\"?: string; \"Asia/Famagusta\"?: string; \"Asia/Gaza\"?: string; \"Asia/Hebron\"?: string; \"Asia/Hong_Kong\"?: string; \"Asia/Hovd\"?: string; \"Asia/Irkutsk\"?: string; \"Asia/Jakarta\"?: string; \"Asia/Jayapura\"?: string; \"Asia/Jerusalem\"?: string; \"Asia/Kabul\"?: string; \"Asia/Kamchatka\"?: string; \"Asia/Karachi\"?: string; \"Asia/Katmandu\"?: string; \"Asia/Khandyga\"?: string; \"Asia/Krasnoyarsk\"?: string; \"Asia/Kuala_Lumpur\"?: string; \"Asia/Kuching\"?: string; \"Asia/Kuwait\"?: string; \"Asia/Macau\"?: string; \"Asia/Magadan\"?: string; \"Asia/Makassar\"?: string; \"Asia/Manila\"?: string; \"Asia/Muscat\"?: string; \"Asia/Nicosia\"?: string; \"Asia/Novokuznetsk\"?: string; \"Asia/Novosibirsk\"?: string; \"Asia/Omsk\"?: string; \"Asia/Oral\"?: string; \"Asia/Phnom_Penh\"?: string; \"Asia/Pontianak\"?: string; \"Asia/Pyongyang\"?: string; \"Asia/Qatar\"?: string; \"Asia/Qostanay\"?: string; \"Asia/Qyzylorda\"?: string; \"Asia/Rangoon\"?: string; \"Asia/Riyadh\"?: string; \"Asia/Saigon\"?: string; \"Asia/Sakhalin\"?: string; \"Asia/Samarkand\"?: string; \"Asia/Seoul\"?: string; \"Asia/Shanghai\"?: string; \"Asia/Singapore\"?: string; \"Asia/Srednekolymsk\"?: string; \"Asia/Taipei\"?: string; \"Asia/Tashkent\"?: string; \"Asia/Tbilisi\"?: string; \"Asia/Tehran\"?: string; \"Asia/Thimphu\"?: string; \"Asia/Tokyo\"?: string; \"Asia/Tomsk\"?: string; \"Asia/Ulaanbaatar\"?: string; \"Asia/Urumqi\"?: string; \"Asia/Ust-Nera\"?: string; \"Asia/Vientiane\"?: string; \"Asia/Vladivostok\"?: string; \"Asia/Yakutsk\"?: string; \"Asia/Yekaterinburg\"?: string; \"Asia/Yerevan\"?: string; \"Atlantic/Azores\"?: string; \"Atlantic/Bermuda\"?: string; \"Atlantic/Canary\"?: string; \"Atlantic/Cape_Verde\"?: string; \"Atlantic/Faeroe\"?: string; \"Atlantic/Madeira\"?: string; \"Atlantic/Reykjavik\"?: string; \"Atlantic/South_Georgia\"?: string; \"Atlantic/St_Helena\"?: string; \"Atlantic/Stanley\"?: string; \"Australia/Adelaide\"?: string; \"Australia/Brisbane\"?: string; \"Australia/Broken_Hill\"?: string; \"Australia/Currie\"?: string; \"Australia/Darwin\"?: string; \"Australia/Eucla\"?: string; \"Australia/Hobart\"?: string; \"Australia/Lindeman\"?: string; \"Australia/Lord_Howe\"?: string; \"Australia/Melbourne\"?: string; \"Australia/Perth\"?: string; \"Australia/Sydney\"?: string; \"Europe/Amsterdam\"?: string; \"Europe/Andorra\"?: string; \"Europe/Astrakhan\"?: string; \"Europe/Athens\"?: string; \"Europe/Belgrade\"?: string; \"Europe/Berlin\"?: string; \"Europe/Bratislava\"?: string; \"Europe/Brussels\"?: string; \"Europe/Bucharest\"?: string; \"Europe/Budapest\"?: string; \"Europe/Busingen\"?: string; \"Europe/Chisinau\"?: string; \"Europe/Copenhagen\"?: string; \"Europe/Dublin\"?: string; \"Europe/Gibraltar\"?: string; \"Europe/Guernsey\"?: string; \"Europe/Helsinki\"?: string; \"Europe/Isle_of_Man\"?: string; \"Europe/Istanbul\"?: string; \"Europe/Jersey\"?: string; \"Europe/Kaliningrad\"?: string; \"Europe/Kiev\"?: string; \"Europe/Kirov\"?: string; \"Europe/Lisbon\"?: string; \"Europe/Ljubljana\"?: string; \"Europe/London\"?: string; \"Europe/Luxembourg\"?: string; \"Europe/Madrid\"?: string; \"Europe/Malta\"?: string; \"Europe/Mariehamn\"?: string; \"Europe/Minsk\"?: string; \"Europe/Monaco\"?: string; \"Europe/Moscow\"?: string; \"Europe/Oslo\"?: string; \"Europe/Paris\"?: string; \"Europe/Podgorica\"?: string; \"Europe/Prague\"?: string; \"Europe/Riga\"?: string; \"Europe/Rome\"?: string; \"Europe/Samara\"?: string; \"Europe/San_Marino\"?: string; \"Europe/Sarajevo\"?: string; \"Europe/Saratov\"?: string; \"Europe/Simferopol\"?: string; \"Europe/Skopje\"?: string; \"Europe/Sofia\"?: string; \"Europe/Stockholm\"?: string; \"Europe/Tallinn\"?: string; \"Europe/Tirane\"?: string; \"Europe/Ulyanovsk\"?: string; \"Europe/Uzhgorod\"?: string; \"Europe/Vaduz\"?: string; \"Europe/Vatican\"?: string; \"Europe/Vienna\"?: string; \"Europe/Vilnius\"?: string; \"Europe/Volgograd\"?: string; \"Europe/Warsaw\"?: string; \"Europe/Zagreb\"?: string; \"Europe/Zaporozhye\"?: string; \"Europe/Zurich\"?: string; \"Indian/Antananarivo\"?: string; \"Indian/Chagos\"?: string; \"Indian/Christmas\"?: string; \"Indian/Cocos\"?: string; \"Indian/Comoro\"?: string; \"Indian/Kerguelen\"?: string; \"Indian/Mahe\"?: string; \"Indian/Maldives\"?: string; \"Indian/Mauritius\"?: string; \"Indian/Mayotte\"?: string; \"Indian/Reunion\"?: string; \"Pacific/Apia\"?: string; \"Pacific/Auckland\"?: string; \"Pacific/Bougainville\"?: string; \"Pacific/Chatham\"?: string; \"Pacific/Easter\"?: string; \"Pacific/Efate\"?: string; \"Pacific/Enderbury\"?: string; \"Pacific/Fakaofo\"?: string; \"Pacific/Fiji\"?: string; \"Pacific/Funafuti\"?: string; \"Pacific/Galapagos\"?: string; \"Pacific/Gambier\"?: string; \"Pacific/Guadalcanal\"?: string; \"Pacific/Guam\"?: string; \"Pacific/Honolulu\"?: string; \"Pacific/Johnston\"?: string; \"Pacific/Kiritimati\"?: string; \"Pacific/Kosrae\"?: string; \"Pacific/Kwajalein\"?: string; \"Pacific/Majuro\"?: string; \"Pacific/Marquesas\"?: string; \"Pacific/Midway\"?: string; \"Pacific/Nauru\"?: string; \"Pacific/Niue\"?: string; \"Pacific/Norfolk\"?: string; \"Pacific/Noumea\"?: string; \"Pacific/Pago_Pago\"?: string; \"Pacific/Palau\"?: string; \"Pacific/Pitcairn\"?: string; \"Pacific/Ponape\"?: string; \"Pacific/Port_Moresby\"?: string; \"Pacific/Rarotonga\"?: string; \"Pacific/Saipan\"?: string; \"Pacific/Tahiti\"?: string; \"Pacific/Tarawa\"?: string; \"Pacific/Tongatapu\"?: string; \"Pacific/Truk\"?: string; \"Pacific/Wake\"?: string; \"Pacific/Wallis\"?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "InputTimeZoneMessages": {
                "location": "import",
                "path": "./assets/input-time-zone/t9n",
                "id": "src/components/input-time-zone/assets/input-time-zone/t9n/index.d.ts::InputTimeZoneMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ chooseTimeZone?: string; timeZoneLabel?: string; \"Africa/Abidjan\"?: string; \"Africa/Accra\"?: string; \"Africa/Addis_Ababa\"?: string; \"Africa/Algiers\"?: string; \"Africa/Asmera\"?: string; \"Africa/Bamako\"?: string; \"Africa/Bangui\"?: string; \"Africa/Banjul\"?: string; \"Africa/Bissau\"?: string; \"Africa/Blantyre\"?: string; \"Africa/Brazzaville\"?: string; \"Africa/Bujumbura\"?: string; \"Africa/Cairo\"?: string; \"Africa/Casablanca\"?: string; \"Africa/Ceuta\"?: string; \"Africa/Conakry\"?: string; \"Africa/Dakar\"?: string; \"Africa/Dar_es_Salaam\"?: string; \"Africa/Djibouti\"?: string; \"Africa/Douala\"?: string; \"Africa/El_Aaiun\"?: string; \"Africa/Freetown\"?: string; \"Africa/Gaborone\"?: string; \"Africa/Harare\"?: string; \"Africa/Johannesburg\"?: string; \"Africa/Juba\"?: string; \"Africa/Kampala\"?: string; \"Africa/Khartoum\"?: string; \"Africa/Kigali\"?: string; \"Africa/Kinshasa\"?: string; \"Africa/Lagos\"?: string; \"Africa/Libreville\"?: string; \"Africa/Lome\"?: string; \"Africa/Luanda\"?: string; \"Africa/Lubumbashi\"?: string; \"Africa/Lusaka\"?: string; \"Africa/Malabo\"?: string; \"Africa/Maputo\"?: string; \"Africa/Maseru\"?: string; \"Africa/Mbabane\"?: string; \"Africa/Mogadishu\"?: string; \"Africa/Monrovia\"?: string; \"Africa/Nairobi\"?: string; \"Africa/Ndjamena\"?: string; \"Africa/Niamey\"?: string; \"Africa/Nouakchott\"?: string; \"Africa/Ouagadougou\"?: string; \"Africa/Porto-Novo\"?: string; \"Africa/Sao_Tome\"?: string; \"Africa/Tripoli\"?: string; \"Africa/Tunis\"?: string; \"Africa/Windhoek\"?: string; \"America/Adak\"?: string; \"America/Anchorage\"?: string; \"America/Anguilla\"?: string; \"America/Antigua\"?: string; \"America/Araguaina\"?: string; \"America/Argentina/La_Rioja\"?: string; \"America/Argentina/Rio_Gallegos\"?: string; \"America/Argentina/Salta\"?: string; \"America/Argentina/San_Juan\"?: string; \"America/Argentina/San_Luis\"?: string; \"America/Argentina/Tucuman\"?: string; \"America/Argentina/Ushuaia\"?: string; \"America/Aruba\"?: string; \"America/Asuncion\"?: string; \"America/Bahia\"?: string; \"America/Bahia_Banderas\"?: string; \"America/Barbados\"?: string; \"America/Belem\"?: string; \"America/Belize\"?: string; \"America/Blanc-Sablon\"?: string; \"America/Boa_Vista\"?: string; \"America/Bogota\"?: string; \"America/Boise\"?: string; \"America/Buenos_Aires\"?: string; \"America/Cambridge_Bay\"?: string; \"America/Campo_Grande\"?: string; \"America/Cancun\"?: string; \"America/Caracas\"?: string; \"America/Catamarca\"?: string; \"America/Cayenne\"?: string; \"America/Cayman\"?: string; \"America/Chicago\"?: string; \"America/Chihuahua\"?: string; \"America/Ciudad_Juarez\"?: string; \"America/Coral_Harbour\"?: string; \"America/Cordoba\"?: string; \"America/Costa_Rica\"?: string; \"America/Creston\"?: string; \"America/Cuiaba\"?: string; \"America/Curacao\"?: string; \"America/Danmarkshavn\"?: string; \"America/Dawson\"?: string; \"America/Dawson_Creek\"?: string; \"America/Denver\"?: string; \"America/Detroit\"?: string; \"America/Dominica\"?: string; \"America/Edmonton\"?: string; \"America/Eirunepe\"?: string; \"America/El_Salvador\"?: string; \"America/Fort_Nelson\"?: string; \"America/Fortaleza\"?: string; \"America/Glace_Bay\"?: string; \"America/Godthab\"?: string; \"America/Goose_Bay\"?: string; \"America/Grand_Turk\"?: string; \"America/Grenada\"?: string; \"America/Guadeloupe\"?: string; \"America/Guatemala\"?: string; \"America/Guayaquil\"?: string; \"America/Guyana\"?: string; \"America/Halifax\"?: string; \"America/Havana\"?: string; \"America/Hermosillo\"?: string; \"America/Indiana/Knox\"?: string; \"America/Indiana/Marengo\"?: string; \"America/Indiana/Petersburg\"?: string; \"America/Indiana/Tell_City\"?: string; \"America/Indiana/Vevay\"?: string; \"America/Indiana/Vincennes\"?: string; \"America/Indiana/Winamac\"?: string; \"America/Indianapolis\"?: string; \"America/Inuvik\"?: string; \"America/Iqaluit\"?: string; \"America/Jamaica\"?: string; \"America/Jujuy\"?: string; \"America/Juneau\"?: string; \"America/Kentucky/Monticello\"?: string; \"America/Kralendijk\"?: string; \"America/La_Paz\"?: string; \"America/Lima\"?: string; \"America/Los_Angeles\"?: string; \"America/Louisville\"?: string; \"America/Lower_Princes\"?: string; \"America/Maceio\"?: string; \"America/Managua\"?: string; \"America/Manaus\"?: string; \"America/Marigot\"?: string; \"America/Martinique\"?: string; \"America/Matamoros\"?: string; \"America/Mazatlan\"?: string; \"America/Mendoza\"?: string; \"America/Menominee\"?: string; \"America/Merida\"?: string; \"America/Metlakatla\"?: string; \"America/Mexico_City\"?: string; \"America/Miquelon\"?: string; \"America/Moncton\"?: string; \"America/Monterrey\"?: string; \"America/Montevideo\"?: string; \"America/Montreal\"?: string; \"America/Montserrat\"?: string; \"America/Nassau\"?: string; \"America/New_York\"?: string; \"America/Nipigon\"?: string; \"America/Nome\"?: string; \"America/Noronha\"?: string; \"America/North_Dakota/Beulah\"?: string; \"America/North_Dakota/Center\"?: string; \"America/North_Dakota/New_Salem\"?: string; \"America/Ojinaga\"?: string; \"America/Panama\"?: string; \"America/Pangnirtung\"?: string; \"America/Paramaribo\"?: string; \"America/Phoenix\"?: string; \"America/Port-au-Prince\"?: string; \"America/Port_of_Spain\"?: string; \"America/Porto_Velho\"?: string; \"America/Puerto_Rico\"?: string; \"America/Punta_Arenas\"?: string; \"America/Rainy_River\"?: string; \"America/Rankin_Inlet\"?: string; \"America/Recife\"?: string; \"America/Regina\"?: string; \"America/Resolute\"?: string; \"America/Rio_Branco\"?: string; \"America/Santa_Isabel\"?: string; \"America/Santarem\"?: string; \"America/Santiago\"?: string; \"America/Santo_Domingo\"?: string; \"America/Sao_Paulo\"?: string; \"America/Scoresbysund\"?: string; \"America/Sitka\"?: string; \"America/St_Barthelemy\"?: string; \"America/St_Johns\"?: string; \"America/St_Kitts\"?: string; \"America/St_Lucia\"?: string; \"America/St_Thomas\"?: string; \"America/St_Vincent\"?: string; \"America/Swift_Current\"?: string; \"America/Tegucigalpa\"?: string; \"America/Thule\"?: string; \"America/Thunder_Bay\"?: string; \"America/Tijuana\"?: string; \"America/Toronto\"?: string; \"America/Tortola\"?: string; \"America/Vancouver\"?: string; \"America/Whitehorse\"?: string; \"America/Winnipeg\"?: string; \"America/Yakutat\"?: string; \"America/Yellowknife\"?: string; \"Antarctica/Casey\"?: string; \"Antarctica/Davis\"?: string; \"Antarctica/DumontDUrville\"?: string; \"Antarctica/Macquarie\"?: string; \"Antarctica/Mawson\"?: string; \"Antarctica/McMurdo\"?: string; \"Antarctica/Palmer\"?: string; \"Antarctica/Rothera\"?: string; \"Antarctica/Syowa\"?: string; \"Antarctica/Troll\"?: string; \"Antarctica/Vostok\"?: string; \"Arctic/Longyearbyen\"?: string; \"Asia/Aden\"?: string; \"Asia/Almaty\"?: string; \"Asia/Amman\"?: string; \"Asia/Anadyr\"?: string; \"Asia/Aqtau\"?: string; \"Asia/Aqtobe\"?: string; \"Asia/Ashgabat\"?: string; \"Asia/Atyrau\"?: string; \"Asia/Baghdad\"?: string; \"Asia/Bahrain\"?: string; \"Asia/Baku\"?: string; \"Asia/Bangkok\"?: string; \"Asia/Barnaul\"?: string; \"Asia/Beirut\"?: string; \"Asia/Bishkek\"?: string; \"Asia/Brunei\"?: string; \"Asia/Calcutta\"?: string; \"Asia/Chita\"?: string; \"Asia/Choibalsan\"?: string; \"Asia/Colombo\"?: string; \"Asia/Damascus\"?: string; \"Asia/Dhaka\"?: string; \"Asia/Dili\"?: string; \"Asia/Dubai\"?: string; \"Asia/Dushanbe\"?: string; \"Asia/Famagusta\"?: string; \"Asia/Gaza\"?: string; \"Asia/Hebron\"?: string; \"Asia/Hong_Kong\"?: string; \"Asia/Hovd\"?: string; \"Asia/Irkutsk\"?: string; \"Asia/Jakarta\"?: string; \"Asia/Jayapura\"?: string; \"Asia/Jerusalem\"?: string; \"Asia/Kabul\"?: string; \"Asia/Kamchatka\"?: string; \"Asia/Karachi\"?: string; \"Asia/Katmandu\"?: string; \"Asia/Khandyga\"?: string; \"Asia/Krasnoyarsk\"?: string; \"Asia/Kuala_Lumpur\"?: string; \"Asia/Kuching\"?: string; \"Asia/Kuwait\"?: string; \"Asia/Macau\"?: string; \"Asia/Magadan\"?: string; \"Asia/Makassar\"?: string; \"Asia/Manila\"?: string; \"Asia/Muscat\"?: string; \"Asia/Nicosia\"?: string; \"Asia/Novokuznetsk\"?: string; \"Asia/Novosibirsk\"?: string; \"Asia/Omsk\"?: string; \"Asia/Oral\"?: string; \"Asia/Phnom_Penh\"?: string; \"Asia/Pontianak\"?: string; \"Asia/Pyongyang\"?: string; \"Asia/Qatar\"?: string; \"Asia/Qostanay\"?: string; \"Asia/Qyzylorda\"?: string; \"Asia/Rangoon\"?: string; \"Asia/Riyadh\"?: string; \"Asia/Saigon\"?: string; \"Asia/Sakhalin\"?: string; \"Asia/Samarkand\"?: string; \"Asia/Seoul\"?: string; \"Asia/Shanghai\"?: string; \"Asia/Singapore\"?: string; \"Asia/Srednekolymsk\"?: string; \"Asia/Taipei\"?: string; \"Asia/Tashkent\"?: string; \"Asia/Tbilisi\"?: string; \"Asia/Tehran\"?: string; \"Asia/Thimphu\"?: string; \"Asia/Tokyo\"?: string; \"Asia/Tomsk\"?: string; \"Asia/Ulaanbaatar\"?: string; \"Asia/Urumqi\"?: string; \"Asia/Ust-Nera\"?: string; \"Asia/Vientiane\"?: string; \"Asia/Vladivostok\"?: string; \"Asia/Yakutsk\"?: string; \"Asia/Yekaterinburg\"?: string; \"Asia/Yerevan\"?: string; \"Atlantic/Azores\"?: string; \"Atlantic/Bermuda\"?: string; \"Atlantic/Canary\"?: string; \"Atlantic/Cape_Verde\"?: string; \"Atlantic/Faeroe\"?: string; \"Atlantic/Madeira\"?: string; \"Atlantic/Reykjavik\"?: string; \"Atlantic/South_Georgia\"?: string; \"Atlantic/St_Helena\"?: string; \"Atlantic/Stanley\"?: string; \"Australia/Adelaide\"?: string; \"Australia/Brisbane\"?: string; \"Australia/Broken_Hill\"?: string; \"Australia/Currie\"?: string; \"Australia/Darwin\"?: string; \"Australia/Eucla\"?: string; \"Australia/Hobart\"?: string; \"Australia/Lindeman\"?: string; \"Australia/Lord_Howe\"?: string; \"Australia/Melbourne\"?: string; \"Australia/Perth\"?: string; \"Australia/Sydney\"?: string; \"Europe/Amsterdam\"?: string; \"Europe/Andorra\"?: string; \"Europe/Astrakhan\"?: string; \"Europe/Athens\"?: string; \"Europe/Belgrade\"?: string; \"Europe/Berlin\"?: string; \"Europe/Bratislava\"?: string; \"Europe/Brussels\"?: string; \"Europe/Bucharest\"?: string; \"Europe/Budapest\"?: string; \"Europe/Busingen\"?: string; \"Europe/Chisinau\"?: string; \"Europe/Copenhagen\"?: string; \"Europe/Dublin\"?: string; \"Europe/Gibraltar\"?: string; \"Europe/Guernsey\"?: string; \"Europe/Helsinki\"?: string; \"Europe/Isle_of_Man\"?: string; \"Europe/Istanbul\"?: string; \"Europe/Jersey\"?: string; \"Europe/Kaliningrad\"?: string; \"Europe/Kiev\"?: string; \"Europe/Kirov\"?: string; \"Europe/Lisbon\"?: string; \"Europe/Ljubljana\"?: string; \"Europe/London\"?: string; \"Europe/Luxembourg\"?: string; \"Europe/Madrid\"?: string; \"Europe/Malta\"?: string; \"Europe/Mariehamn\"?: string; \"Europe/Minsk\"?: string; \"Europe/Monaco\"?: string; \"Europe/Moscow\"?: string; \"Europe/Oslo\"?: string; \"Europe/Paris\"?: string; \"Europe/Podgorica\"?: string; \"Europe/Prague\"?: string; \"Europe/Riga\"?: string; \"Europe/Rome\"?: string; \"Europe/Samara\"?: string; \"Europe/San_Marino\"?: string; \"Europe/Sarajevo\"?: string; \"Europe/Saratov\"?: string; \"Europe/Simferopol\"?: string; \"Europe/Skopje\"?: string; \"Europe/Sofia\"?: string; \"Europe/Stockholm\"?: string; \"Europe/Tallinn\"?: string; \"Europe/Tirane\"?: string; \"Europe/Ulyanovsk\"?: string; \"Europe/Uzhgorod\"?: string; \"Europe/Vaduz\"?: string; \"Europe/Vatican\"?: string; \"Europe/Vienna\"?: string; \"Europe/Vilnius\"?: string; \"Europe/Volgograd\"?: string; \"Europe/Warsaw\"?: string; \"Europe/Zagreb\"?: string; \"Europe/Zaporozhye\"?: string; \"Europe/Zurich\"?: string; \"Indian/Antananarivo\"?: string; \"Indian/Chagos\"?: string; \"Indian/Christmas\"?: string; \"Indian/Cocos\"?: string; \"Indian/Comoro\"?: string; \"Indian/Kerguelen\"?: string; \"Indian/Mahe\"?: string; \"Indian/Maldives\"?: string; \"Indian/Mauritius\"?: string; \"Indian/Mayotte\"?: string; \"Indian/Reunion\"?: string; \"Pacific/Apia\"?: string; \"Pacific/Auckland\"?: string; \"Pacific/Bougainville\"?: string; \"Pacific/Chatham\"?: string; \"Pacific/Easter\"?: string; \"Pacific/Efate\"?: string; \"Pacific/Enderbury\"?: string; \"Pacific/Fakaofo\"?: string; \"Pacific/Fiji\"?: string; \"Pacific/Funafuti\"?: string; \"Pacific/Galapagos\"?: string; \"Pacific/Gambier\"?: string; \"Pacific/Guadalcanal\"?: string; \"Pacific/Guam\"?: string; \"Pacific/Honolulu\"?: string; \"Pacific/Johnston\"?: string; \"Pacific/Kiritimati\"?: string; \"Pacific/Kosrae\"?: string; \"Pacific/Kwajalein\"?: string; \"Pacific/Majuro\"?: string; \"Pacific/Marquesas\"?: string; \"Pacific/Midway\"?: string; \"Pacific/Nauru\"?: string; \"Pacific/Niue\"?: string; \"Pacific/Norfolk\"?: string; \"Pacific/Noumea\"?: string; \"Pacific/Pago_Pago\"?: string; \"Pacific/Palau\"?: string; \"Pacific/Pitcairn\"?: string; \"Pacific/Ponape\"?: string; \"Pacific/Port_Moresby\"?: string; \"Pacific/Rarotonga\"?: string; \"Pacific/Saipan\"?: string; \"Pacific/Tahiti\"?: string; \"Pacific/Tarawa\"?: string; \"Pacific/Tongatapu\"?: string; \"Pacific/Truk\"?: string; \"Pacific/Wake\"?: string; \"Pacific/Wallis\"?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"name\" | \"offset\"",
          "complexType": {
            "original": "TimeZoneMode",
            "resolved": "\"name\" | \"offset\"",
            "references": {
              "TimeZoneMode": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/input-time-zone/interfaces.d.ts::TimeZoneMode"
              }
            }
          },
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": true,
          "docs": "This specifies the type of `value` and the associated options presented to the user:\n\nUsing `\"offset\"` will provide options that show timezone offsets.\n\nUsing `\"name\"` will provide options that show the IANA time zone names.",
          "docsTags": [
            {
              "name": "default",
              "text": "\"offset\""
            }
          ],
          "default": "\"offset\"",
          "values": [
            {
              "value": "name",
              "type": "string"
            },
            {
              "value": "offset",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "When `true`, displays and positions the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPositioning",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "OverlayPositioning",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {
              "OverlayPositioning": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::OverlayPositioning"
              }
            }
          },
          "mutable": false,
          "attr": "overlay-positioning",
          "reflectToAttr": true,
          "docs": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
          "docsTags": [],
          "default": "\"absolute\"",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "referenceDate",
          "type": "Date | string",
          "complexType": {
            "original": "Date | string",
            "resolved": "Date | string",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "attr": "reference-date",
          "reflectToAttr": false,
          "docs": "This `date` will be used as a reference to Daylight Savings Time when creating time zone item groups.\n\nIt can be either a Date instance or a string in ISO format (`\"YYYY-MM-DD\"`, `\"YYYY-MM-DDTHH:MM:SS.SSSZ\"`).",
          "docsTags": [
            {
              "name": "see",
              "text": "[Date.prototype.toISOString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)"
            }
          ],
          "values": [
            {
              "type": "Date"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "status",
          "type": "\"idle\" | \"invalid\" | \"valid\"",
          "complexType": {
            "original": "Status",
            "resolved": "\"idle\" | \"invalid\" | \"valid\"",
            "references": {
              "Status": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Status"
              }
            }
          },
          "mutable": false,
          "attr": "status",
          "reflectToAttr": true,
          "docs": "Specifies the status of the input field, which determines message and icons.",
          "docsTags": [],
          "default": "\"idle\"",
          "values": [
            {
              "value": "idle",
              "type": "string"
            },
            {
              "value": "invalid",
              "type": "string"
            },
            {
              "value": "valid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validationIcon",
          "type": "boolean | string",
          "complexType": {
            "original": "string | boolean",
            "resolved": "boolean | string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-icon",
          "reflectToAttr": true,
          "docs": "Specifies the validation icon to display under the component.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validationMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-message",
          "reflectToAttr": false,
          "docs": "Specifies the validation message to display under the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's value, where the value is the time zone offset or the difference, in minutes, between the selected time zone and UTC.\n\nIf no value is provided, the user's time zone offset will be selected by default.",
          "docsTags": [
            {
              "name": "see",
              "text": "https://www.w3.org/International/core/2005/09/timezone.html#:~:text=What%20is%20a%20%22zone%20offset,or%20%22%2D%22%20from%20UTC."
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteInputTimeZoneBeforeClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is requested to be closed and before the closing transition begins.",
          "docsTags": []
        },
        {
          "event": "calciteInputTimeZoneBeforeOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
          "docsTags": []
        },
        {
          "event": "calciteInputTimeZoneChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component's `value` changes.",
          "docsTags": []
        },
        {
          "event": "calciteInputTimeZoneClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires after the component is closed and animation is complete.",
          "docsTags": []
        },
        {
          "event": "calciteInputTimeZoneOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires after the component is opened and animation is complete.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-combobox",
        "calcite-combobox-item"
      ],
      "dependencyGraph": {
        "calcite-input-time-zone": [
          "calcite-combobox",
          "calcite-combobox-item"
        ],
        "calcite-combobox": [
          "calcite-combobox-item",
          "calcite-chip",
          "calcite-icon",
          "calcite-input-message"
        ],
        "calcite-combobox-item": [
          "calcite-icon"
        ],
        "calcite-chip": [
          "calcite-icon"
        ],
        "calcite-input-message": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/label/label.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-label",
      "readme": "# calcite-label\n\nRenders a `<label>` around its children and can be used with any [labelable native](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#Form_labelable) or labelable calcite element.\n",
      "docs": "Renders a `<label>` around its children and can be used with any [labelable native](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#Form_labelable) or labelable calcite element.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding text and a component that can be labeled."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-label>\n  Email address\n  <calcite-input\n    status=\"invalid\"\n    type=\"email\"\n    placeholder=\"Enter your email address\"\n    value=\"invalidemailformat.com\"\n  ></calcite-input>\n  <calcite-input-message icon status=\"invalid\">Enter a valid email address</calcite-input-message>\n</calcite-label>\n```\n",
        "Browser-caveat": "When using the `default`, `inline` or `inline-space-between` layout option with [browsers that do not support the CSS `gap` property when used with flexbox](https://caniuse.com/flexbox-gap), you will need to use the `--calcite-label-margin-bottom` CSS variable and apply spacing manually to the label by wrapping it in a styled span like so:\n\n```html\n<calcite-label layout=\"inline\" style=\"--calcite-label-margin-bottom:0;\">\n  <span style=\"margin-right: 0.75rem\">Text leading inline</span>\n  <calcite-checkbox></calcite-checkbox>\n</calcite-label>\n```\n"
      },
      "props": [
        {
          "name": "alignment",
          "type": "\"center\" | \"end\" | \"start\"",
          "complexType": {
            "original": "Alignment",
            "resolved": "\"center\" | \"end\" | \"start\"",
            "references": {
              "Alignment": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Alignment"
              }
            }
          },
          "mutable": false,
          "attr": "alignment",
          "reflectToAttr": true,
          "docs": "Specifies the text alignment of the component.",
          "docsTags": [],
          "default": "\"start\"",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "for",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "for",
          "reflectToAttr": true,
          "docs": "Specifies the `id` of the component the label is bound to. Use when the component the label is bound to does not reside within the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"default\" | \"inline\" | \"inline-space-between\"",
          "complexType": {
            "original": "\"inline\" | \"inline-space-between\" | \"default\"",
            "resolved": "\"default\" | \"inline\" | \"inline-space-between\"",
            "references": {}
          },
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "Defines the layout of the label in relation to the component. Use `\"inline\"` positions to wrap the label and component on the same line.",
          "docsTags": [],
          "default": "\"default\"",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "inline",
              "type": "string"
            },
            {
              "value": "inline-space-between",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-label-margin-bottom",
          "annotation": "prop",
          "docs": "The spacing below the component."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding text and a component that can be labeled."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-block-section",
        "calcite-card"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-block-section": [
          "calcite-label"
        ],
        "calcite-card": [
          "calcite-label"
        ]
      }
    },
    {
      "filePath": "src/components/link/link.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-link",
      "readme": "# calcite-link\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding text."
        }
      ],
      "usage": {
        "Basic": "```html\n<div style=\"font-size: 16px; font-weight: 400;\">\n  Checkout the\n  <calcite-link href=\"https://developers.arcgis.com/calcite-design-system/\" icon-end=\"launch\" target=\"_blank\">\n    Calcite Design System\n  </calcite-link>\n  website for comprehensive information about Calcite\n</div>\n```\n",
        "Focusing": "You can programmatically focus a `calcite-link` with the `setFocus()` method:\n\n```html\n<div onclick=document.querySelector('#my-link').setFocus()>Focus!</div>\n```\n"
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "download",
          "type": "boolean | string",
          "complexType": {
            "original": "string | boolean",
            "resolved": "boolean | string",
            "references": {}
          },
          "mutable": false,
          "attr": "download",
          "reflectToAttr": true,
          "docs": "Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value:\nWithout a value, the browser will suggest a filename/extension\nSee https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": true,
          "docs": "Specifies the URL of the linked resource, which can be set as an absolute or relative path.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconEnd",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-end",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display at the end of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "\"both\" | \"end\" | \"start\"",
          "complexType": {
            "original": "FlipContext",
            "resolved": "\"both\" | \"end\" | \"start\"",
            "references": {
              "FlipContext": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::FlipContext"
              }
            }
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "values": [
            {
              "value": "both",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconStart",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-start",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display at the start of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": false,
          "docs": "Specifies the relationship to the linked document defined in `href`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Specifies the frame or window to open the linked document.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding text."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-tile"
      ],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-link": [
          "calcite-icon"
        ],
        "calcite-tile": [
          "calcite-link"
        ]
      }
    },
    {
      "filePath": "src/components/list/list.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-list",
      "readme": "# calcite-list\n",
      "docs": "A general purpose list that enables users to construct list items that conform to Calcite styling.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-list-item` elements."
        },
        {
          "name": "slot",
          "text": "filter-actions-start - A slot for adding actionable `calcite-action` elements before the filter component."
        },
        {
          "name": "slot",
          "text": "filter-actions-end - A slot for adding actionable `calcite-action` elements after the filter component."
        }
      ],
      "usage": {
        "Advanced": "```html\n<calcite-list>\n  <calcite-list-item\n    label=\"Dog\"\n    description=\"Also known as Canis familiaris, a carnivorous mammal closely related to the gray wolf that has been domesticated as a pet.\"\n  >\n    <calcite-action icon=\"information\" label=\"information\" scale=\"s\" slot=\"actions-start\"></calcite-action>\n    <calcite-icon scale=\"l\" icon=\"layer\" slot=\"content-start\"></calcite-icon>\n    <calcite-avatar scale=\"l\" slot=\"content-start\" thumbnail=\"https://placedog.net/300/300\"></calcite-avatar>\n    <calcite-icon\n      scale=\"s\"\n      icon=\"check\"\n      slot=\"content-end\"\n      style=\"color: var(--calcite-color-status-success)\"\n    ></calcite-icon>\n    <calcite-action icon=\"ellipsis\" label=\"menu\" slot=\"actions-end\"></calcite-action>\n    <calcite-action icon=\"x\" label=\"remove\" slot=\"actions-end\"></calcite-action>\n  </calcite-list-item>\n  <calcite-list-item\n    label=\"Cat\"\n    description=\"Also known as Felis catus, a carnivorous mammal that has long been domesticated as a pet and for catching rats and mice.\"\n  >\n    <calcite-action icon=\"information\" label=\"information\" scale=\"s\" slot=\"actions-start\"></calcite-action>\n    <calcite-icon scale=\"l\" icon=\"layer\" slot=\"content-start\"></calcite-icon>\n    <calcite-avatar scale=\"l\" slot=\"content-start\" thumbnail=\"my-thumbnail.png\"></calcite-avatar>\n    <calcite-icon\n      scale=\"s\"\n      icon=\"check\"\n      slot=\"content-end\"\n      style=\"color: var(--calcite-color-status-success)\"\n    ></calcite-icon>\n    <calcite-action icon=\"ellipsis\" label=\"menu\" slot=\"actions-end\"></calcite-action>\n    <calcite-action icon=\"x\" label=\"remove\" slot=\"actions-end\"></calcite-action>\n  </calcite-list-item>\n  <calcite-list-item label=\"Bear\" description=\"Carnivorous mammals of the family Ursidae.\">\n    <calcite-action icon=\"information\" label=\"information\" scale=\"s\" slot=\"actions-start\"></calcite-action>\n    <calcite-icon scale=\"l\" icon=\"layer\" slot=\"content-start\"></calcite-icon>\n    <calcite-avatar scale=\"l\" slot=\"content-start\" thumbnail=\"https://placebear.com/g/400/400\"></calcite-avatar>\n    <calcite-icon\n      scale=\"s\"\n      icon=\"exclamation-mark-triangle\"\n      slot=\"content-end\"\n      style=\"color: var(--calcite-color-status-danger)\"\n    ></calcite-icon>\n    <calcite-action icon=\"ellipsis\" label=\"menu\" slot=\"actions-end\"></calcite-action>\n    <calcite-action icon=\"x\" label=\"remove\" slot=\"actions-end\"></calcite-action>\n  </calcite-list-item>\n</calcite-list>\n```\n",
        "Basic": "```html\n<calcite-list>\n  <calcite-list-item\n    label=\"Comet\"\n    description=\"Cosmic snowballs of frozen gases, rock, and dust that orbit the Sun.\"\n  ></calcite-list-item>\n  <calcite-list-item\n    label=\"Meteoroid\"\n    description=\"A small body of matter from outer space that enters Earth's atmosphere and appears like a streak of light.\"\n  ></calcite-list-item>\n  <calcite-list-item\n    label=\"Asteroid\"\n    description=\"A celestial body made of rock and metal that orbits the Sun.\"\n  ></calcite-list-item>\n</calcite-list>\n```\n",
        "DragEnabled": "```html\n<calcite-list drag-enabled>\n  <calcite-list-item\n    label=\"Don Quixote\"\n    value=\"1\"\n    description=\"Don Quixote is a Spanish epic novel by Miguel de Cervantes.\"\n  >\n    <calcite-icon icon=\"book\" slot=\"content-start\"></calcite-icon>\n  </calcite-list-item>\n  <calcite-list-item\n    label=\"A Tale of Two Cities\"\n    value=\"2\"\n    description=\"A historical novel published in 1859 by Charles Dickens, set in London and Paris before and during the French Revolution.\"\n  >\n    <calcite-icon icon=\"book\" slot=\"content-start\"></calcite-icon>\n  </calcite-list-item>\n  <calcite-list-item\n    label=\"The Lord of the Rings\"\n    value=\"3\"\n    description=\"An epic high-fantasy novel by the English author and scholar J. R. R. Tolkien.\"\n  >\n    <calcite-icon icon=\"book\" slot=\"content-start\"></calcite-icon>\n  </calcite-list-item>\n</calcite-list>\n```\n",
        "DragEnabledNested": "```html\n<calcite-list drag-enabled group=\"Birds\">\n  <calcite-list-item open label=\"Eagles\">\n    <calcite-list>\n      <calcite-list-item\n        label=\"Bald Eagle\"\n        description=\"The bald eagle is a bird of prey found in North America.\"\n      ></calcite-list-item>\n      <calcite-list-item\n        label=\"Golden Eagle\"\n        description=\"The golden eagle is a bird of prey living in the Northern Hemisphere.\"\n      ></calcite-list-item>\n    </calcite-list>\n  </calcite-list-item>\n  <calcite-list-item open label=\"Owls\">\n    <calcite-list>\n      <calcite-list-item\n        label=\"Great Horned Owl\"\n        description=\"The great horned owl, also known as the tiger owl, or the hoot owl, is a large owl native to the Americas.\"\n      ></calcite-list-item>\n      <calcite-list-item\n        label=\"Snow Owl\"\n        description=\"The snowy owl, also known as the polar owl, the white owl and the Arctic owl, is a large, white owl of the true owl family.\"\n      ></calcite-list-item>\n    </calcite-list>\n  </calcite-list-item>\n</calcite-list>\n```\n",
        "Grouped": "```html\n<calcite-list>\n  <calcite-list-item-group heading=\"Continents in order of size\">\n    <calcite-list-item\n      label=\"Asia\"\n      description=\"Asia is the largest continent in the world by both land area and population.\"\n    ></calcite-list-item>\n    <calcite-list-item\n      label=\"Africa\"\n      description=\"Africa is the world's second-largest and second-most populous continent, after Asia in both aspects.\"\n    ></calcite-list-item>\n    <calcite-list-item\n      label=\"North America\"\n      description=\"North America is the third largest continent, after Asia and Africa.\"\n    ></calcite-list-item>\n  </calcite-list-item-group>\n  <calcite-list-item-group heading=\"Mountains in order of height\">\n    <calcite-list-item\n      label=\"Mount Everest\"\n      description=\"Mount Everest is the highest of the Himalayan mountains, and at 8,850 meters considered the highest point on Earth.\"\n    ></calcite-list-item>\n    <calcite-list-item\n      label=\"Godwin Austen (K2)\"\n      description=\"Mount Godwin-Austen also known as K2 is the second highest mountain in the world at 8,611 meters above sea level.\"\n    ></calcite-list-item>\n    <calcite-list-item\n      label=\"Kangchenjunga\"\n      description=\"Mount Kanchenjunga Main is the third highest mountain peak in the world with an elevation of 8,586 meters.\"\n    ></calcite-list-item>\n  </calcite-list-item-group>\n</calcite-list>\n```\n",
        "MultipleSelections": "```html\n<calcite-list selection-mode=\"multiple\">\n  <calcite-list-item-group heading=\"Sports\">\n    <calcite-list-item\n      label=\"Tennis\"\n      description=\"Tennis is a racket sport that is played either individually against a single opponent or between two teams of two players each.\"\n    ></calcite-list-item>\n    <calcite-list-item\n      label=\"Baseball\"\n      description=\"Baseball is a bat-and-ball sport played between two teams of nine players each, taking turns batting and fielding.\"\n    ></calcite-list-item>\n    <calcite-list-item\n      label=\"Golf\"\n      description=\"Golf is a sport in which a small ball is struck with a club into a series of small holes in the ground, the object being to use the fewest possible strokes to complete the course.\"\n    ></calcite-list-item>\n  </calcite-list-item-group>\n</calcite-list>\n```\n",
        "Nested": "```html\n<calcite-list>\n  <calcite-list-item\n    label=\"United States of America\"\n    description=\"A country located in North America consisting of 50 states.\"\n  >\n    <calcite-list>\n      <calcite-list-item label=\"California\" description=\"A state on the western coast of the United States.\">\n        <calcite-list>\n          <calcite-list-item\n            label=\"Redlands\"\n            description=\"A city in California and the hometown of Esri.\"\n          ></calcite-list-item>\n        </calcite-list>\n      </calcite-list-item>\n    </calcite-list>\n  </calcite-list-item>\n</calcite-list>\n```\n"
      },
      "props": [
        {
          "name": "canPull",
          "type": "(detail: ListDragDetail) => boolean",
          "complexType": {
            "original": "(detail: ListDragDetail) => boolean",
            "resolved": "(detail: ListDragDetail) => boolean",
            "references": {
              "ListDragDetail": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/list/interfaces.ts::ListDragDetail"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "When provided, the method will be called to determine whether the element can  move from the list.",
          "docsTags": [],
          "values": [
            {
              "type": "(detail: ListDragDetail) => boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "canPut",
          "type": "(detail: ListDragDetail) => boolean",
          "complexType": {
            "original": "(detail: ListDragDetail) => boolean",
            "resolved": "(detail: ListDragDetail) => boolean",
            "references": {
              "ListDragDetail": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/list/interfaces.ts::ListDragDetail"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "When provided, the method will be called to determine whether the element can be added from another list.",
          "docsTags": [],
          "values": [
            {
              "type": "(detail: ListDragDetail) => boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dragEnabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "drag-enabled",
          "reflectToAttr": true,
          "docs": "When `true`, `calcite-list-item`s are sortable via a draggable button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterEnabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "filter-enabled",
          "reflectToAttr": true,
          "docs": "When `true`, an input appears at the top of the component that can be used by end users to filter `calcite-list-item`s.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterPlaceholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filter-placeholder",
          "reflectToAttr": true,
          "docs": "Placeholder text for the component's filter input field.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "filter-text",
          "reflectToAttr": true,
          "docs": "Text for the component's filter input field.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filteredData",
          "type": "{ label: string; description: string; metadata: Record<string, unknown>; value: string; }[]",
          "complexType": {
            "original": "ItemData",
            "resolved": "{ label: string; description: string; metadata: Record<string, unknown>; value: string; }[]",
            "references": {
              "ItemData": {
                "location": "import",
                "path": "../list-item/interfaces",
                "id": "src/components/list-item/interfaces.d.ts::ItemData"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The currently filtered `calcite-list-item` data.",
          "docsTags": [
            {
              "name": "readonly"
            }
          ],
          "default": "[]",
          "values": [
            {
              "type": "{ label: string; description: string; metadata: Record<string, unknown>; value: string; }[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filteredItems",
          "type": "HTMLCalciteListItemElement[]",
          "complexType": {
            "original": "HTMLCalciteListItemElement[]",
            "resolved": "HTMLCalciteListItemElement[]",
            "references": {
              "HTMLCalciteListItemElement": {
                "location": "global",
                "id": "global::HTMLCalciteListItemElement"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The currently filtered `calcite-list-item`s.",
          "docsTags": [
            {
              "name": "readonly"
            }
          ],
          "default": "[]",
          "values": [
            {
              "type": "HTMLCalciteListItemElement[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "group",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "group",
          "reflectToAttr": true,
          "docs": "The list's group identifier.\n\nTo drag elements from one list into another, both lists must have the same group value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Specifies an accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When `true`, a busy indicator is displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ filterEnabled?: string; total?: string; }",
          "complexType": {
            "original": "Partial<ListMessages>",
            "resolved": "{ filterEnabled?: string; total?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "ListMessages": {
                "location": "import",
                "path": "./assets/list/t9n",
                "id": "src/components/list/assets/list/t9n/index.d.ts::ListMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ filterEnabled?: string; total?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberingSystem",
          "type": "\"arab\" | \"arabext\" | \"latn\"",
          "complexType": {
            "original": "NumberingSystem",
            "resolved": "\"arab\" | \"arabext\" | \"latn\"",
            "references": {
              "NumberingSystem": {
                "location": "import",
                "path": "../../utils/locale",
                "id": "src/utils/locale.ts::NumberingSystem"
              }
            }
          },
          "mutable": false,
          "attr": "numbering-system",
          "reflectToAttr": false,
          "docs": "Specifies the Unicode numeral system used by the component for localization.",
          "docsTags": [],
          "values": [
            {
              "value": "arab",
              "type": "string"
            },
            {
              "value": "arabext",
              "type": "string"
            },
            {
              "value": "latn",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedItems",
          "type": "HTMLCalciteListItemElement[]",
          "complexType": {
            "original": "HTMLCalciteListItemElement[]",
            "resolved": "HTMLCalciteListItemElement[]",
            "references": {
              "HTMLCalciteListItemElement": {
                "location": "global",
                "id": "global::HTMLCalciteListItemElement"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The currently selected items.",
          "docsTags": [
            {
              "name": "readonly"
            }
          ],
          "default": "[]",
          "values": [
            {
              "type": "HTMLCalciteListItemElement[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionAppearance",
          "type": "\"border\" | \"icon\"",
          "complexType": {
            "original": "SelectionAppearance",
            "resolved": "\"border\" | \"icon\"",
            "references": {
              "SelectionAppearance": {
                "location": "import",
                "path": "./resources",
                "id": "src/components/list/resources.ts::SelectionAppearance"
              }
            }
          },
          "mutable": false,
          "attr": "selection-appearance",
          "reflectToAttr": true,
          "docs": "Specifies the selection appearance - `\"icon\"` (displays a checkmark or dot) or `\"border\"` (displays a border).",
          "docsTags": [],
          "default": "\"icon\"",
          "values": [
            {
              "value": "border",
              "type": "string"
            },
            {
              "value": "icon",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "\"multiple\" | \"none\" | \"single\" | \"single-persist\"",
          "complexType": {
            "original": "Extract<\n    \"none\" | \"multiple\" | \"single\" | \"single-persist\",\n    SelectionMode\n  >",
            "resolved": "\"multiple\" | \"none\" | \"single\" | \"single-persist\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "SelectionMode": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::SelectionMode"
              }
            }
          },
          "mutable": false,
          "attr": "selection-mode",
          "reflectToAttr": true,
          "docs": "Specifies the selection mode of the component, where:\n\n`\"multiple\"` allows any number of selections,\n\n`\"single\"` allows only one selection,\n\n`\"single-persist\"` allows one selection and prevents de-selection, and\n\n`\"none\"` does not allow any selections.",
          "docsTags": [],
          "default": "\"none\"",
          "values": [
            {
              "value": "multiple",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "single",
              "type": "string"
            },
            {
              "value": "single-persist",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component's first focusable element.",
          "docsTags": [
            {
              "name": "returns"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "calciteInternalListDefaultSlotChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the default slot has changes in order to notify parent lists.",
          "docsTags": []
        },
        {
          "event": "calciteListChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component's selected items have changed.",
          "docsTags": []
        },
        {
          "event": "calciteListDragEnd",
          "detail": "ListDragDetail",
          "bubbles": true,
          "complexType": {
            "original": "ListDragDetail",
            "resolved": "ListDragDetail",
            "references": {
              "ListDragDetail": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/list/interfaces.ts::ListDragDetail"
              }
            }
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component's dragging has ended.",
          "docsTags": []
        },
        {
          "event": "calciteListDragStart",
          "detail": "ListDragDetail",
          "bubbles": true,
          "complexType": {
            "original": "ListDragDetail",
            "resolved": "ListDragDetail",
            "references": {
              "ListDragDetail": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/list/interfaces.ts::ListDragDetail"
              }
            }
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component's dragging has started.",
          "docsTags": []
        },
        {
          "event": "calciteListFilter",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component's filter has changed.",
          "docsTags": []
        },
        {
          "event": "calciteListOrderChange",
          "detail": "ListDragDetail",
          "bubbles": true,
          "complexType": {
            "original": "ListDragDetail",
            "resolved": "ListDragDetail",
            "references": {
              "ListDragDetail": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/list/interfaces.ts::ListDragDetail"
              }
            }
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component's item order changes.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteInternalFocusPreviousItem",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalListItemActive",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteListItemSelect",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalAssistiveTextChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteHandleNudge",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalListItemSelect",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalListItemSelectMultiple",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalListItemChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalListItemGroupDefaultSlotChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-list-item` elements."
        },
        {
          "name": "filter-actions-end",
          "docs": "A slot for adding actionable `calcite-action` elements after the filter component."
        },
        {
          "name": "filter-actions-start",
          "docs": "A slot for adding actionable `calcite-action` elements before the filter component."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-scrim",
        "calcite-stack",
        "calcite-filter"
      ],
      "dependencyGraph": {
        "calcite-list": [
          "calcite-scrim",
          "calcite-stack",
          "calcite-filter"
        ],
        "calcite-scrim": [
          "calcite-loader"
        ],
        "calcite-filter": [
          "calcite-input"
        ],
        "calcite-input": [
          "calcite-progress",
          "calcite-icon",
          "calcite-input-message"
        ],
        "calcite-input-message": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/list-item/list-item.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-list-item",
      "readme": "# calcite-list-item\n\nA general purpose list that enables users to construct list items that conform to Calcite styling.\n\nIf you are looking for a list that handles more advanced usage like selection, see the documentation for 'calcite-pick-list' or 'calcite-value-list'.\n",
      "docs": "A general purpose list that enables users to construct list items that conform to Calcite styling.\n\nIf you are looking for a list that handles more advanced usage like selection, see the documentation for 'calcite-pick-list' or 'calcite-value-list'.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-list-item` and `calcite-list-item-group` elements."
        },
        {
          "name": "slot",
          "text": "actions-start - A slot for adding actionable `calcite-action` elements before the content of the component."
        },
        {
          "name": "slot",
          "text": "content-start - A slot for adding non-actionable elements before the label and description of the component."
        },
        {
          "name": "slot",
          "text": "content - A slot for adding non-actionable, centered content in place of the `label` and `description` of the component."
        },
        {
          "name": "slot",
          "text": "content-end - A slot for adding non-actionable elements after the label and description of the component."
        },
        {
          "name": "slot",
          "text": "actions-end - A slot for adding actionable `calcite-action` elements after the content of the component."
        },
        {
          "name": "slot",
          "text": "content-bottom - A slot for adding content below the component's `label` and `description`."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "closable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "closable",
          "reflectToAttr": true,
          "docs": "When `true`, a close button is added to the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "closed",
          "reflectToAttr": true,
          "docs": "When `true`, hides the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "A description for the component. Displays below the label text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dragDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "drag-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, the item is not draggable.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dragSelected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "drag-selected",
          "reflectToAttr": true,
          "docs": "When `true`, the component's drag handle is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The label text of the component. Displays above the description text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ close?: string; expand?: string; collapse?: string; }",
          "complexType": {
            "original": "Partial<ListItemMessages>",
            "resolved": "{ close?: string; expand?: string; collapse?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "ListItemMessages": {
                "location": "import",
                "path": "./assets/list-item/t9n",
                "id": "src/components/list-item/assets/list-item/t9n/index.d.ts::ListItemMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ close?: string; expand?: string; collapse?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "metadata",
          "type": "{ [x: string]: unknown; }",
          "complexType": {
            "original": "Record<string, unknown>",
            "resolved": "{ [x: string]: unknown; }",
            "references": {
              "Record": {
                "location": "global",
                "id": "global::Record"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Provides additional metadata to the component. Primary use is for a filter on the parent `calcite-list`.",
          "docsTags": [],
          "values": [
            {
              "type": "{ [x: string]: unknown; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "When `true`, the item is open to show child components.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "When `true` and the parent `calcite-list`'s `selectionMode` is `\"single\"`, `\"single-persist\"', or `\"multiple\"`, the component is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's value.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteListItemClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the close button is clicked.",
          "docsTags": []
        },
        {
          "event": "calciteListItemDragHandleChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the drag handle is selected.",
          "docsTags": []
        },
        {
          "event": "calciteListItemSelect",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is selected.",
          "docsTags": []
        },
        {
          "event": "calciteListItemToggle",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the open button is clicked.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteInternalListItemGroupDefaultSlotChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalListDefaultSlotChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-list-item` and `calcite-list-item-group` elements."
        },
        {
          "name": "actions-end",
          "docs": "A slot for adding actionable `calcite-action` elements after the content of the component."
        },
        {
          "name": "actions-start",
          "docs": "A slot for adding actionable `calcite-action` elements before the content of the component."
        },
        {
          "name": "content",
          "docs": "A slot for adding non-actionable, centered content in place of the `label` and `description` of the component."
        },
        {
          "name": "content-bottom",
          "docs": "A slot for adding content below the component's `label` and `description`."
        },
        {
          "name": "content-end",
          "docs": "A slot for adding non-actionable elements after the label and description of the component."
        },
        {
          "name": "content-start",
          "docs": "A slot for adding non-actionable elements before the label and description of the component."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon",
        "calcite-handle",
        "calcite-action"
      ],
      "dependencyGraph": {
        "calcite-list-item": [
          "calcite-icon",
          "calcite-handle",
          "calcite-action"
        ],
        "calcite-handle": [
          "calcite-icon"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/list-item-group/list-item-group.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-list-item-group",
      "readme": "# calcite-list-item-group\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-list-item` and `calcite-list-item-group` elements."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": true,
          "docs": "The header text for all nested `calcite-list-item` rows.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteInternalListItemGroupDefaultSlotChange",
          "detail": "DragEvent",
          "bubbles": true,
          "complexType": {
            "original": "DragEvent",
            "resolved": "DragEvent",
            "references": {
              "DragEvent": {
                "location": "global",
                "id": "global::DragEvent"
              }
            }
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when changes occur in the default slot, notifying parent lists of the changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-list-item` and `calcite-list-item-group` elements."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/loader/loader.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-loader",
      "readme": "# calcite-loader\n\nThe `calcite-loader` component can act as a determinate or indeterminate loading indicator.\n",
      "docs": "The `calcite-loader` component can act as a determinate or indeterminate loading indicator.",
      "docsTags": [],
      "usage": {
        "Basic": "You can use the `active` attribute to toggle visibility:\n\n```html\n<calcite-loader text=\"Fetching data...\"></calcite-loader>\n```\n",
        "Compact": "For instances when you don't have room for the full loader, you can use the smaller `inline` version of the loader. The inline version is meant to sit to the left of text:\n\n```html\n<p><calcite-loader inline></calcite-loader>Inline loader</p>\n```\n",
        "Determinate": "If you can calculate your progress, it's best to use the determinate version of the loader. Update the `value` of the element when progress is made. This will display a progress bar along the perimeter of the loader showing 32% complete:\n\n```html\n<calcite-loader type=\"determinate\" value=\"32\"></calcite-loader>\n```\n"
      },
      "props": [
        {
          "name": "inline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inline",
          "reflectToAttr": true,
          "docs": "When `true`, displays smaller and appears to the left of the text.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "Text that displays under the component's indicator.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"determinate\" | \"indeterminate\"",
          "complexType": {
            "original": "\"indeterminate\" | \"determinate\"",
            "resolved": "\"determinate\" | \"indeterminate\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "Specifies the component type.\n\nUse `\"indeterminate\"` if finding actual progress value is impossible.",
          "docsTags": [],
          "values": [
            {
              "value": "determinate",
              "type": "string"
            },
            {
              "value": "indeterminate",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's value. Valid only for `\"determinate\"` indicators. Percent complete of 100.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-loader-font-size",
          "annotation": "prop",
          "docs": "Specifies the font size of the loading percentage when type is `\"determinate\"`."
        },
        {
          "name": "--calcite-loader-padding",
          "annotation": "prop",
          "docs": "Specifies the padding of the loader."
        },
        {
          "name": "--calcite-loader-size",
          "annotation": "prop",
          "docs": "The width and height of a non-inline loader."
        },
        {
          "name": "--calcite-loader-size-inline",
          "annotation": "prop",
          "docs": "The width and height of an inline loader"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-action",
        "calcite-block",
        "calcite-button",
        "calcite-card",
        "calcite-scrim"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-action": [
          "calcite-loader"
        ],
        "calcite-block": [
          "calcite-loader"
        ],
        "calcite-button": [
          "calcite-loader"
        ],
        "calcite-card": [
          "calcite-loader"
        ],
        "calcite-scrim": [
          "calcite-loader"
        ]
      }
    },
    {
      "filePath": "src/components/menu/menu.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-menu",
      "readme": "# calcite-menu\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "layout",
          "type": "\"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "Layout",
            "resolved": "\"horizontal\" | \"vertical\"",
            "references": {
              "Layout": {
                "location": "global",
                "id": "global::Layout"
              }
            }
          },
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "Specifies the layout of the component.",
          "docsTags": [],
          "default": "\"horizontal\"",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ more?: string; }",
          "complexType": {
            "original": "Partial<MenuMessages>",
            "resolved": "{ more?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "MenuMessages": {
                "location": "import",
                "path": "./assets/menu/t9n",
                "id": "src/components/menu/assets/menu/t9n/index.d.ts::MenuMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ more?: string; }"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component's first focusable element.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "calciteInternalMenuItemKeyEvent",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-menu-item"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-menu-item": [
          "calcite-menu"
        ]
      }
    },
    {
      "filePath": "src/components/menu-item/menu-item.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-menu-item",
      "readme": "# calcite-menu-item\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "submenu-item - A slot for adding `calcite-menu-item`s in a submenu."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "When `true`, the component is highlighted.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "breadcrumb",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "breadcrumb",
          "reflectToAttr": true,
          "docs": "When `true`, the component displays a breadcrumb trail for use as a navigational aid.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Specifies the URL destination of the component, which can be set as an absolute or relative path.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconEnd",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-end",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display at the end of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "\"both\" | \"end\" | \"start\"",
          "complexType": {
            "original": "FlipContext",
            "resolved": "\"both\" | \"end\" | \"start\"",
            "references": {
              "FlipContext": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::FlipContext"
              }
            }
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "values": [
            {
              "value": "both",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconStart",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-start",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display at the start of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "messageOverrides",
          "type": "{ submenu?: string; open?: string; }",
          "complexType": {
            "original": "Partial<MenuItemMessages>",
            "resolved": "{ submenu?: string; open?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "MenuItemMessages": {
                "location": "import",
                "path": "./assets/menu-item/t9n",
                "id": "src/components/menu-item/assets/menu-item/t9n/index.d.ts::MenuItemMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ submenu?: string; open?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "When `true`, the component will display any slotted `calcite-menu-item` in an open overflow menu.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": true,
          "docs": "Defines the relationship between the `href` value and the current document.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[rel](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": true,
          "docs": "Specifies where to open the linked document defined in the `href` property.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "Specifies the text to display.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteMenuItemSelect",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the component is selected.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusout",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "submenu-item",
          "docs": "A slot for adding `calcite-menu-item`s in a submenu."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon",
        "calcite-action",
        "calcite-menu"
      ],
      "dependencyGraph": {
        "calcite-menu-item": [
          "calcite-icon",
          "calcite-action",
          "calcite-menu"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/meter/meter.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-meter",
      "readme": "# calcite-meter\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "Advanced": "A complex meter component, which includes value and custom unit labels.\n\n```html\n<calcite-meter\n  group-separator=\"en\"\n  unit-label=\"GB\"\n  value-label-type=\"units\"\n  value-label\n  range-labels\n  min=\"0\"\n  max=\"12400\"\n  low=\"4600\"\n  high=\"7600\"\n  value=\"2200\"\n></calcite-meter>\n```\n",
        "Basic": "A simple meter component.\n\n```html\n<calcite-meter min=\"0\" max=\"100\" low=\"25\" high=\"75\" value=\"50\"></calcite-meter>\n```\n"
      },
      "props": [
        {
          "name": "appearance",
          "type": "\"outline\" | \"outline-fill\" | \"solid\"",
          "complexType": {
            "original": "Extract<\"outline\" | \"outline-fill\" | \"solid\", Appearance>",
            "resolved": "\"outline\" | \"outline-fill\" | \"solid\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Appearance": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Appearance"
              }
            }
          },
          "mutable": false,
          "attr": "appearance",
          "reflectToAttr": true,
          "docs": "Specifies the appearance style of the component.",
          "docsTags": [],
          "default": "\"outline-fill\"",
          "values": [
            {
              "value": "outline",
              "type": "string"
            },
            {
              "value": "outline-fill",
              "type": "string"
            },
            {
              "value": "solid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fillType",
          "type": "\"range\" | \"single\"",
          "complexType": {
            "original": "\"single\" | \"range\"",
            "resolved": "\"range\" | \"single\"",
            "references": {}
          },
          "mutable": false,
          "attr": "fill-type",
          "reflectToAttr": true,
          "docs": "Specifies the component's display, where `\"single\"` displays a single color and `\"range\"` displays a range of colors based on provided `low`, `high`, `min` or `max` values.",
          "docsTags": [],
          "default": "\"range\"",
          "values": [
            {
              "value": "range",
              "type": "string"
            },
            {
              "value": "single",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "form",
          "reflectToAttr": true,
          "docs": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "groupSeparator",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "group-separator",
          "reflectToAttr": true,
          "docs": "When `true`, number values are displayed with a group separator corresponding to the language and country format.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "high",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "high",
          "reflectToAttr": true,
          "docs": "Specifies a high value.  When `fillType` is `\"range\"`, displays a different color when above the specified threshold.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "low",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "low",
          "reflectToAttr": true,
          "docs": "Specifies a low value.  When `fillType` is `\"range\"`, displays a different color when above the specified threshold.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": true,
          "docs": "Specifies the highest allowed value of the component.",
          "docsTags": [],
          "default": "100",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": true,
          "docs": "Specifies the lowest allowed value of the component.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberingSystem",
          "type": "\"arab\" | \"arabext\" | \"latn\"",
          "complexType": {
            "original": "NumberingSystem",
            "resolved": "\"arab\" | \"arabext\" | \"latn\"",
            "references": {
              "NumberingSystem": {
                "location": "import",
                "path": "../../utils/locale",
                "id": "src/utils/locale.ts::NumberingSystem"
              }
            }
          },
          "mutable": false,
          "attr": "numbering-system",
          "reflectToAttr": false,
          "docs": "Specifies the Unicode numeral system used by the component for localization.",
          "docsTags": [],
          "values": [
            {
              "value": "arab",
              "type": "string"
            },
            {
              "value": "arabext",
              "type": "string"
            },
            {
              "value": "latn",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rangeLabelType",
          "type": "\"percent\" | \"units\"",
          "complexType": {
            "original": "MeterLabelType",
            "resolved": "\"percent\" | \"units\"",
            "references": {
              "MeterLabelType": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/meter/interfaces.ts::MeterLabelType"
              }
            }
          },
          "mutable": false,
          "attr": "range-label-type",
          "reflectToAttr": true,
          "docs": "When `rangeLabels` is `true`, specifies the format of displayed labels.",
          "docsTags": [],
          "default": "\"percent\"",
          "values": [
            {
              "value": "percent",
              "type": "string"
            },
            {
              "value": "units",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rangeLabels",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "range-labels",
          "reflectToAttr": true,
          "docs": "When `true`, displays the values of `high`, `low`, `min`, and `max`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "unitLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "unit-label",
          "reflectToAttr": false,
          "docs": "When `rangeLabelType` is `\"units\"` and either `valueLabel` or `rangeLabels` are `true`, displays beside the `value` and/or  `min` values.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Specifies the current value of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valueLabel",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "value-label",
          "reflectToAttr": true,
          "docs": "When `true`, displays the current value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valueLabelType",
          "type": "\"percent\" | \"units\"",
          "complexType": {
            "original": "MeterLabelType",
            "resolved": "\"percent\" | \"units\"",
            "references": {
              "MeterLabelType": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/meter/interfaces.ts::MeterLabelType"
              }
            }
          },
          "mutable": false,
          "attr": "value-label-type",
          "reflectToAttr": true,
          "docs": "When `valueLabel` is `true`, specifies the format of displayed label.",
          "docsTags": [],
          "default": "\"percent\"",
          "values": [
            {
              "value": "percent",
              "type": "string"
            },
            {
              "value": "units",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/modal/modal.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-modal",
      "readme": "# calcite-modal\n\n`calcite-modal` allows you to show a modal/dialog to your users. The modal handles fencing focus and animating in/out.\n\n<style>\n  html {\n      overflow:auto !important;\n  }\n</style>",
      "docs": "`calcite-modal` allows you to show a modal/dialog to your users. The modal handles fencing focus and animating in/out.\n\n<style>\n  html {\n      overflow:auto !important;\n  }\n</style>",
      "docsTags": [
        {
          "name": "slot",
          "text": "header - A slot for adding header text."
        },
        {
          "name": "slot",
          "text": "content - A slot for adding the component's content."
        },
        {
          "name": "slot",
          "text": "content-top - A slot for adding content to the component's sticky header, where content remains at the top of the component when scrolling up and down."
        },
        {
          "name": "slot",
          "text": "content-bottom - A slot for adding content to the component's sticky footer, where content remains at the bottom of the component when scrolling up and down."
        },
        {
          "name": "slot",
          "text": "primary - A slot for adding a primary button."
        },
        {
          "name": "slot",
          "text": "secondary - A slot for adding a secondary button."
        },
        {
          "name": "slot",
          "text": "back - A slot for adding a back button."
        }
      ],
      "usage": {
        "Basic": "Customize the modal by passing your content into multiple named slots: `header` (title-area of the modal), `content` (main body of the modal), and up to three modal actions: primary, secondary, and back. Notice below we use the `aria-labelledby` attribute, relating it to the title of the modal. In order to ensure good accessibility, it's recommended that you use either an `aria-label` or `aria-labelledby` attribute so screen readers can infer what the subject matter of your modal is.\n\n```html\n<calcite-modal aria-labelledby=\"modal-title\" open>\n  <h3 slot=\"header\" id=\"modal-title\">Edit profile</h3>\n  <div slot=\"content\">Please update your profile information below:</div>\n  <calcite-button slot=\"back\" kind=\"neutral\" appearance=\"outline\" icon=\"chevron-left\" width=\"full\">\n    Back\n  </calcite-button>\n  <calcite-button slot=\"secondary\" width=\"full\" appearance=\"outline\">Cancel</calcite-button>\n  <calcite-button slot=\"primary\" width=\"full\">Save changes</calcite-button>\n</calcite-modal>\n```\n",
        "Open": "To open a modal, add the `open` prop. Once the opening animation is complete, the `calciteModalOpen` event will be fired.\n\nTo close the modal, simply remove the attribute. This will run your before close method (if provided, see below) and fire the `calciteModalClose` event after the animation and teardown is complete.\n\n```html\n<calcite-modal open></calcite-modal>\n```\n",
        "Reacting-before-close": "If you'd like to perform some actions prior to closing (ie. warning users they will lose their changes) you can pass a function to the `beforeClose` property. This method will be called prior to close and should return a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise):\n\n```js\nfunction beforeClose() {\n  return new Promise((resolve) => {\n    // do something async\n    resolve(); // this will trigger the close animation\n  });\n}\n\nconst modal = document.getElementById(\"my-modal\");\nmodal.beforeClose = beforeClose;\n```\n"
      },
      "props": [
        {
          "name": "beforeClose",
          "type": "(el: HTMLCalciteModalElement) => Promise<void>",
          "complexType": {
            "original": "(el: HTMLCalciteModalElement) => Promise<void>",
            "resolved": "(el: HTMLCalciteModalElement) => Promise<void>",
            "references": {
              "HTMLCalciteModalElement": {
                "location": "global",
                "id": "global::HTMLCalciteModalElement"
              },
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Passes a function to run before the component closes.",
          "docsTags": [],
          "values": [
            {
              "type": "(el: HTMLCalciteModalElement) => Promise<void>"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closeButtonDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "close-button-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, disables the component's close button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "docked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "docked",
          "reflectToAttr": true,
          "docs": "When `true`, prevents the component from expanding to the entire screen on mobile devices.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "escapeDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "escape-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, disables the default close on escape behavior.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focusTrapDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "focus-trap-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, prevents focus trapping.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fullscreen",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "fullscreen",
          "reflectToAttr": true,
          "docs": "Sets the component to always be fullscreen. Overrides `widthScale` and `--calcite-modal-width` / `--calcite-modal-height`.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "kind",
          "type": "\"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "Extract<\"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\", Kind>",
            "resolved": "\"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Kind": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Kind"
              }
            }
          },
          "mutable": false,
          "attr": "kind",
          "reflectToAttr": true,
          "docs": "Specifies the kind of the component, which will apply to top border.",
          "docsTags": [],
          "values": [
            {
              "value": "brand",
              "type": "string"
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ close?: string; }",
          "complexType": {
            "original": "Partial<ModalMessages>",
            "resolved": "{ close?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "ModalMessages": {
                "location": "import",
                "path": "./assets/modal/t9n",
                "id": "src/components/modal/assets/modal/t9n/index.d.ts::ModalMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ close?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "When `true`, displays and positions the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outsideCloseDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outside-close-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, disables the closing of the component when clicked outside.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "widthScale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "width-scale",
          "reflectToAttr": true,
          "docs": "Specifies the width of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "scrollContent",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(top?: number, left?: number) => Promise<void>",
            "parameters": [
              {
                "name": "top",
                "type": "number",
                "docs": ""
              },
              {
                "name": "left",
                "type": "number",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "scrollContent(top?: number, left?: number) => Promise<void>",
          "parameters": [
            {
              "name": "top",
              "type": "number",
              "docs": ""
            },
            {
              "name": "left",
              "type": "number",
              "docs": ""
            }
          ],
          "docs": "Sets the scroll top of the component's content.",
          "docsTags": [
            {
              "name": "param",
              "text": "top"
            },
            {
              "name": "param",
              "text": "left"
            }
          ]
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component's \"close\" button (the first focusable item).",
          "docsTags": []
        },
        {
          "name": "updateFocusTrapElements",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "updateFocusTrapElements() => Promise<void>",
          "parameters": [],
          "docs": "Updates the element(s) that are used within the focus-trap of the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteModalBeforeClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is requested to be closed and before the closing transition begins.",
          "docsTags": []
        },
        {
          "event": "calciteModalBeforeOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
          "docsTags": []
        },
        {
          "event": "calciteModalClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is closed and animation is complete.",
          "docsTags": []
        },
        {
          "event": "calciteModalOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is open and animation is complete.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--calcite-modal-content-background",
          "annotation": "prop",
          "docs": "Specifies the background color of content placed in the component's `\"content\"` slot."
        },
        {
          "name": "--calcite-modal-content-padding",
          "annotation": "prop",
          "docs": "Specifies the padding of the component's `\"content\"` slot."
        },
        {
          "name": "--calcite-modal-height",
          "annotation": "prop",
          "docs": "Specifies the height of the component, using `px`, `em`, `rem`, `vh`, or `%`. Will never exceed the height of the viewport. Will not apply if `fullscreen` if set."
        },
        {
          "name": "--calcite-modal-scrim-background",
          "annotation": "prop",
          "docs": "Specifies the background color of the component's scrim."
        },
        {
          "name": "--calcite-modal-width",
          "annotation": "prop",
          "docs": "Specifies the width of the component, using `px`, `em`, `rem`, `vw`, or `%`. Will never exceed the width of the viewport. Will not apply if `fullscreen` if set."
        }
      ],
      "slots": [
        {
          "name": "back",
          "docs": "A slot for adding a back button."
        },
        {
          "name": "content",
          "docs": "A slot for adding the component's content."
        },
        {
          "name": "content-bottom",
          "docs": "A slot for adding content to the component's sticky footer, where content remains at the bottom of the component when scrolling up and down."
        },
        {
          "name": "content-top",
          "docs": "A slot for adding content to the component's sticky header, where content remains at the top of the component when scrolling up and down."
        },
        {
          "name": "header",
          "docs": "A slot for adding header text."
        },
        {
          "name": "primary",
          "docs": "A slot for adding a primary button."
        },
        {
          "name": "secondary",
          "docs": "A slot for adding a secondary button."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-scrim",
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-modal": [
          "calcite-scrim",
          "calcite-icon"
        ],
        "calcite-scrim": [
          "calcite-loader"
        ]
      }
    },
    {
      "filePath": "src/components/navigation/navigation.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-navigation",
      "readme": "# calcite-navigation\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "logo - A slot for adding a `calcite-logo` component to the primary navigation level."
        },
        {
          "name": "slot",
          "text": "user - A slot for adding a `calcite-user` component to the primary navigation level."
        },
        {
          "name": "slot",
          "text": "progress - A slot for adding a `calcite-progress` component to the primary navigation level."
        },
        {
          "name": "slot",
          "text": "navigation-action - A slot for adding a `calcite-action` component to the primary navigation level."
        },
        {
          "name": "slot",
          "text": "content-start - A slot for adding a `calcite-menu`, `calcite-action`, or other interactive elements in the start position of any navigation level."
        },
        {
          "name": "slot",
          "text": "content-center - A slot for adding a `calcite-menu`, `calcite-action`, or other interactive elements in the center position of the primary navigation level."
        },
        {
          "name": "slot",
          "text": "content-end - A slot for adding a `calcite-menu`, `calcite-action`, or other interactive elements in the end position of any navigation level."
        },
        {
          "name": "slot",
          "text": "navigation-secondary - A slot for adding a `calcite-navigation` component in the secondary navigation level. Components rendered here will not display `calcite-navigation-logo` or `calcite-navigation-user` components."
        },
        {
          "name": "slot",
          "text": "navigation-tertiary - A slot for adding a `calcite-navigation` component in the tertiary navigation level.  Components rendered here will not display `calcite-navigation-logo` or `calcite-navigation-user` components."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-shell>\n  <calcite-navigation slot=\"header\">\n    <calcite-chip-group slot=\"content-center\">\n      <calcite-chip>nav item 1</calcite-chip>\n      <calcite-chip>nav item 2</calcite-chip>\n      <calcite-chip>nav item 3</calcite-chip>\n    </calcite-chip-group>\n  </calcite-navigation>\n</calcite-shell>\n```\n"
      },
      "props": [
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "When `navigationAction` is `true`, specifies the label of the `calcite-action`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "navigationAction",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "navigation-action",
          "reflectToAttr": true,
          "docs": "When `true`, displays a `calcite-action` and emits a `calciteNavActionSelect` event on selection change.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "When `navigationAction` is `true`, sets focus on the component's action element.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteNavigationActionSelect",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "When `navigationAction` is `true`, emits when the displayed action selection changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-navigation-background",
          "annotation": "prop",
          "docs": "Specifies the background color of the component."
        },
        {
          "name": "--calcite-navigation-border-color",
          "annotation": "prop",
          "docs": "Specifies the border color of the component."
        },
        {
          "name": "--calcite-navigation-width",
          "annotation": "prop",
          "docs": "Specifies the width of the component's content area."
        }
      ],
      "slots": [
        {
          "name": "content-center",
          "docs": "A slot for adding a `calcite-menu`, `calcite-action`, or other interactive elements in the center position of the primary navigation level."
        },
        {
          "name": "content-end",
          "docs": "A slot for adding a `calcite-menu`, `calcite-action`, or other interactive elements in the end position of any navigation level."
        },
        {
          "name": "content-start",
          "docs": "A slot for adding a `calcite-menu`, `calcite-action`, or other interactive elements in the start position of any navigation level."
        },
        {
          "name": "logo",
          "docs": "A slot for adding a `calcite-logo` component to the primary navigation level."
        },
        {
          "name": "navigation-action",
          "docs": "A slot for adding a `calcite-action` component to the primary navigation level."
        },
        {
          "name": "navigation-secondary",
          "docs": "A slot for adding a `calcite-navigation` component in the secondary navigation level. Components rendered here will not display `calcite-navigation-logo` or `calcite-navigation-user` components."
        },
        {
          "name": "navigation-tertiary",
          "docs": "A slot for adding a `calcite-navigation` component in the tertiary navigation level.  Components rendered here will not display `calcite-navigation-logo` or `calcite-navigation-user` components."
        },
        {
          "name": "progress",
          "docs": "A slot for adding a `calcite-progress` component to the primary navigation level."
        },
        {
          "name": "user",
          "docs": "A slot for adding a `calcite-user` component to the primary navigation level."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-action"
      ],
      "dependencyGraph": {
        "calcite-navigation": [
          "calcite-action"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/navigation-logo/navigation-logo.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-navigation-logo",
      "readme": "# calcite-navigation-logo\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "Basic": "```html\n<calcite-navigation-logo active thumbnail=\"./_assets/images/esri-logo.svg\"></calcite-navigation-user>\n```\n"
      },
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "When `true`, the component is highlighted.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "A description for the component, which displays below the `heading`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "Specifies heading text for the component, such as a product or organization name.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": true,
          "docs": "Specifies the URL destination of the component, which can be set as an absolute or relative path.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Describes the appearance or function of the `thumbnail`. If no label is provided, context will not be provided to assistive technologies.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": true,
          "docs": "Defines the relationship between the `href` value and the current document.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[rel](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": true,
          "docs": "Specifies where to open the linked document defined in the `href` property.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "thumbnail",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "thumbnail",
          "reflectToAttr": false,
          "docs": "Specifies the `src` to an image.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-navigation-logo": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/navigation-user/navigation-user.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-navigation-user",
      "readme": "# calcite-navigation-user\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "Basic": "```html\n<calcite-navigation-user full-name=\"Jhon Doe\" user-id=\"Jhon123\" active></calcite-navigation-user>\n```\n"
      },
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "When `true`, the component is highlighted.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fullName",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "full-name",
          "reflectToAttr": false,
          "docs": "Specifies the full name of the user.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Describes the appearance of the avatar. If no label is provided, context will not be provided to assistive technologies.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "text-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, hides the `fullName` and `username` contents.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "thumbnail",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "thumbnail",
          "reflectToAttr": false,
          "docs": "Specifies the `src` to an image (remember to add a token if the user is private).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "userId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "user-id",
          "reflectToAttr": false,
          "docs": "Specifies the unique id of the user.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "username",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "username",
          "reflectToAttr": false,
          "docs": "Specifies the username of the user.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-avatar"
      ],
      "dependencyGraph": {
        "calcite-navigation-user": [
          "calcite-avatar"
        ],
        "calcite-avatar": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/notice/notice.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-notice",
      "readme": "# calcite-notice\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "title - A slot for adding the title."
        },
        {
          "name": "slot",
          "text": "message - A slot for adding the message."
        },
        {
          "name": "slot",
          "text": "link - A slot for adding a `calcite-action` to take, such as: \"undo\", \"try again\", \"link to page\", etc."
        },
        {
          "name": "slot",
          "text": "actions-end - A slot for adding `calcite-action`s to the end of the component. It is recommended to use two or less actions."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-notice scale=\"l\" width=\"half\" open>\n  <div slot=\"title\">Operation failed</div>\n  <div slot=\"message\">The operation you attempted has encountered an unexpected issue.</div>\n  <calcite-link slot=\"link\" href=\"/\">View details</calcite-link>\n  <calcite-action id=\"retry-action\" slot=\"actions-end\" title=\"Retry\" icon=\"reset\"></calcite-action>\n</calcite-notice>\n```\n",
        "Set-focus": "You can programmatically focus the close button of a `dismissible` `calcite-notice` with the `setFocus()` method:\n\n```html\n<div onclick=\"document.querySelector('#my-notice').setFocus();\">Focus!</div>\n```\n"
      },
      "props": [
        {
          "name": "closable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "closable",
          "reflectToAttr": true,
          "docs": "When `true`, a close button is added to the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "boolean | string",
          "complexType": {
            "original": "string | boolean",
            "resolved": "boolean | string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "kind",
          "type": "\"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "Extract<\n    \"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\",\n    Kind\n  >",
            "resolved": "\"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Kind": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Kind"
              }
            }
          },
          "mutable": false,
          "attr": "kind",
          "reflectToAttr": true,
          "docs": "Specifies the kind of the component, which will apply to top border and icon.",
          "docsTags": [],
          "default": "\"brand\"",
          "values": [
            {
              "value": "brand",
              "type": "string"
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ close?: string; }",
          "complexType": {
            "original": "Partial<NoticeMessages>",
            "resolved": "{ close?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "NoticeMessages": {
                "location": "import",
                "path": "./assets/notice/t9n",
                "id": "src/components/notice/assets/notice/t9n/index.d.ts::NoticeMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ close?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "When `true`, the component is visible.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "\"auto\" | \"full\" | \"half\"",
          "complexType": {
            "original": "Width",
            "resolved": "\"auto\" | \"full\" | \"half\"",
            "references": {
              "Width": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Width"
              }
            }
          },
          "mutable": false,
          "attr": "width",
          "reflectToAttr": true,
          "docs": "Specifies the width of the component.",
          "docsTags": [],
          "default": "\"auto\"",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "half",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component's first focusable element.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteNoticeBeforeClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is requested to be closed and before the closing transition begins.",
          "docsTags": []
        },
        {
          "event": "calciteNoticeBeforeOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
          "docsTags": []
        },
        {
          "event": "calciteNoticeClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is closed and animation is complete.",
          "docsTags": []
        },
        {
          "event": "calciteNoticeOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is open and animation is complete.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-notice-width",
          "annotation": "prop",
          "docs": "The width of the component."
        }
      ],
      "slots": [
        {
          "name": "actions-end",
          "docs": "A slot for adding `calcite-action`s to the end of the component. It is recommended to use two or less actions."
        },
        {
          "name": "link",
          "docs": "A slot for adding a `calcite-action` to take, such as: \"undo\", \"try again\", \"link to page\", etc."
        },
        {
          "name": "message",
          "docs": "A slot for adding the message."
        },
        {
          "name": "title",
          "docs": "A slot for adding the title."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-notice": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/option/option.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-option",
      "readme": "# calcite-option\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "When `true`, the component is selected.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's value.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/option-group/option-group.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-option-group",
      "readme": "# calcite-option-group\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-option`s."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-option`s."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/pagination/pagination.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-pagination",
      "readme": "# calcite-pagination\n\n`calcite-pagination` allows users to select a page from a paginated API.\n",
      "docs": "`calcite-pagination` allows users to select a page from a paginated API.",
      "docsTags": [],
      "usage": {
        "Basic": "The component is meant to interface with responses from ArcGIS REST services, so the props share names with [response properties](https://developers.arcgis.com/rest/users-groups-and-items/search.htm) from various search endpoints.\n\nFor example, after querying the search API, you'll get back a response similar to JSON below. The response can be passed straight to the `calcite-pagination` component.\n\n```JSON\n{\n  \"total\": 2021,\n  \"start\": 1,\n  \"num\": 100,\n  \"results\": []\n}\n```\n\n```html\n<calcite-pagination start-item=\"1\" page-size=\"100\" total-items=\"2021\"></calcite-pagination>\n```\n"
      },
      "props": [
        {
          "name": "groupSeparator",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "group-separator",
          "reflectToAttr": true,
          "docs": "When `true`, number values are displayed with a group separator corresponding to the language and country format.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ next?: string; previous?: string; first?: string; last?: string; }",
          "complexType": {
            "original": "Partial<PaginationMessages>",
            "resolved": "{ next?: string; previous?: string; first?: string; last?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "PaginationMessages": {
                "location": "import",
                "path": "./assets/pagination/t9n",
                "id": "src/components/pagination/assets/pagination/t9n/index.d.ts::PaginationMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ next?: string; previous?: string; first?: string; last?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberingSystem",
          "type": "\"arab\" | \"arabext\" | \"latn\"",
          "complexType": {
            "original": "NumberingSystem",
            "resolved": "\"arab\" | \"arabext\" | \"latn\"",
            "references": {
              "NumberingSystem": {
                "location": "import",
                "path": "../../utils/locale",
                "id": "src/utils/locale.ts::NumberingSystem"
              }
            }
          },
          "mutable": false,
          "attr": "numbering-system",
          "reflectToAttr": false,
          "docs": "Specifies the Unicode numeral system used by the component for localization.",
          "docsTags": [],
          "values": [
            {
              "value": "arab",
              "type": "string"
            },
            {
              "value": "arabext",
              "type": "string"
            },
            {
              "value": "latn",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pageSize",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "page-size",
          "reflectToAttr": true,
          "docs": "Specifies the number of items per page.",
          "docsTags": [],
          "default": "20",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "startItem",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "start-item",
          "reflectToAttr": true,
          "docs": "Specifies the starting item number.",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "totalItems",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "total-items",
          "reflectToAttr": true,
          "docs": "Specifies the total number of items.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "nextPage",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "nextPage() => Promise<void>",
          "parameters": [],
          "docs": "Go to the next page of results.",
          "docsTags": []
        },
        {
          "name": "previousPage",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "previousPage() => Promise<void>",
          "parameters": [],
          "docs": "Go to the previous page of results.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component's first focusable element.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calcitePaginationChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Emits when the selected page changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-table"
      ],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-pagination": [
          "calcite-icon"
        ],
        "calcite-table": [
          "calcite-pagination"
        ]
      }
    },
    {
      "filePath": "src/components/panel/panel.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-panel",
      "readme": "# calcite-panel\n\nThe `calcite-panel` component is a container for a header, content and optional footer. The header will have centered content as well as optional leading and trailing content. The panel can also be setup to be dismissible which allows it to be closed by a user.\n",
      "docs": "The `calcite-panel` component is a container for a header, content and optional footer. The header will have centered content as well as optional leading and trailing content. The panel can also be setup to be dismissible which allows it to be closed by a user.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding custom content."
        },
        {
          "name": "slot",
          "text": "action-bar - A slot for adding a `calcite-action-bar` to the component."
        },
        {
          "name": "slot",
          "text": "header-actions-start - A slot for adding actions or content to the start side of the header."
        },
        {
          "name": "slot",
          "text": "header-actions-end - A slot for adding actions or content to the end side of the header."
        },
        {
          "name": "slot",
          "text": "header-content - A slot for adding custom content to the header."
        },
        {
          "name": "slot",
          "text": "header-menu-actions - A slot for adding an overflow menu with actions inside a `calcite-dropdown`."
        },
        {
          "name": "slot",
          "text": "fab - A slot for adding a `calcite-fab` (floating action button) to perform an action."
        },
        {
          "name": "slot",
          "text": "footer-actions - [Deprecated] Use the `\"footer\"` slot instead. A slot for adding `calcite-button`s to the component's footer."
        },
        {
          "name": "slot",
          "text": "footer - A slot for adding custom content to the footer."
        }
      ],
      "usage": {
        "Basic": "Renders a basic panel with a header.\n\n```html\n<calcite-panel>\n  <div slot=\"header-content\">Header!</div>\n  <p>Slotted content!</p>\n</calcite-panel>\n```\n",
        "Closable": "Renders a panel that is closable with a click of the \"x\".\n\n```html\n<calcite-panel closable id=\"closable-panel\">\n  <div slot=\"header-content\">Closable Header</div>\n  <p>Click the X and I go away!</p>\n</calcite-panel>\n```\n",
        "Collapsible": "Renders a panel that is collapsible with a click of the chevron.\n\n```html\n<calcite-panel collapsible id=\"collapsible-panel\">\n  <div slot=\"header-content\">Collapsible Header</div>\n  <p>Click the chevron and I go away!</p>\n</calcite-panel>\n```\n",
        "Header-with-actions": "Renders a panel with leading and trailing `calcite-action`s.\n\n```html\n<calcite-panel>\n  <calcite-action\n    label=\"Performs my custom action\"\n    text=\"Perform Action!\"\n    text-enabled\n    icon=\"home\"\n    slot=\"header-actions-start\"\n  ></calcite-action>\n  <div slot=\"header-content\">Header!</div>\n  <calcite-action\n    label=\"Performs another custom action\"\n    text=\"Perform Another Action!\"\n    text-enabled\n    icon=\"blog\"\n    slot=\"header-actions-end\"\n  ></calcite-action>\n  <p>Actions are in the top left and right.</p>\n</calcite-panel>\n```\n",
        "With-action-bar": "Renders a panel with an action bar.\n\n```html\n<calcite-panel heading=\"Map Options\">\n  <calcite-action-bar slot=\"action-bar\" expand-disabled>\n    <calcite-action-group>\n      <calcite-action text=\"Save\" icon=\"save\"></calcite-action>\n      <calcite-action text=\"Duplicate\" icon=\"duplicate\"></calcite-action>\n    </calcite-action-group>\n    <calcite-action-group>\n      <calcite-action text=\"Undo\" icon=\"undo\"></calcite-action>\n      <calcite-action text=\"Redo\" icon=\"redo\"></calcite-action>\n    </calcite-action-group>\n  </calcite-action-bar>\n</calcite-panel>\n```\n",
        "With-fab": "Renders a panel with a fab (floating action button).\n\n```html\n<calcite-panel heading=\"layer\">\n  <calcite-list>\n    <calcite-list-item-group heading=\"Outdoor recreation\">\n      <calcite-list-item label=\"Waterfalls\" description=\"Vertical drops from a river.\" value=\"waterfalls\">\n        <calcite-action slot=\"actions-end\" icon=\"layer\" text=\"Waterfalls layer\"></calcite-action>\n      </calcite-list-item>\n      <calcite-list-item label=\"Rivers\" description=\"Large naturally flowing watercourses.\" value=\"rivers\">\n        <calcite-action slot=\"actions-end\" icon=\"layer\" text=\"Rivers layer\"></calcite-action>\n      </calcite-list-item>\n    </calcite-list-item-group>\n  </calcite-list>\n  <calcite-fab slot=\"fab\" text=\"Add layer\" text-enabled></calcite-fab>\n</calcite-panel>\n```\n",
        "With-footer": "Renders a panel with a header and a footer.\n\n```html\n<calcite-panel>\n  <div slot=\"header-content\">Header!</div>\n  <p>I have a footer.</p>\n  <div slot=\"footer\">Footer!</div>\n</calcite-panel>\n```\n"
      },
      "props": [
        {
          "name": "closable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "closable",
          "reflectToAttr": true,
          "docs": "When `true`, displays a close button in the trailing side of the header.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "closed",
          "reflectToAttr": true,
          "docs": "When `true`, the component will be hidden.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "collapsed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "collapsed",
          "reflectToAttr": true,
          "docs": "When `true`, hides the component's content area.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "collapsible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "collapsible",
          "reflectToAttr": true,
          "docs": "When `true`, the component is collapsible.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "A description for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "The component header text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "complexType": {
            "original": "HeadingLevel",
            "resolved": "1 | 2 | 3 | 4 | 5 | 6",
            "references": {
              "HeadingLevel": {
                "location": "import",
                "path": "../functional/Heading",
                "id": "src/components/functional/Heading.tsx::HeadingLevel"
              }
            }
          },
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": true,
          "docs": "Specifies the number at which section headings should start.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When `true`, a busy indicator is displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "menuOpen",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "menu-open",
          "reflectToAttr": true,
          "docs": "When `true`, the action menu items in the `header-menu-actions` slot are open.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ close?: string; options?: string; collapse?: string; expand?: string; }",
          "complexType": {
            "original": "Partial<PanelMessages>",
            "resolved": "{ close?: string; options?: string; collapse?: string; expand?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "PanelMessages": {
                "location": "import",
                "path": "./assets/panel/t9n",
                "id": "src/components/panel/assets/panel/t9n/index.d.ts::PanelMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ close?: string; options?: string; collapse?: string; expand?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPositioning",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "OverlayPositioning",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {
              "OverlayPositioning": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::OverlayPositioning"
              }
            }
          },
          "mutable": false,
          "attr": "overlay-positioning",
          "reflectToAttr": true,
          "docs": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
          "docsTags": [],
          "default": "\"absolute\"",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "scrollContentTo",
          "returns": {
            "type": "Promise<void>",
            "docs": "- promise that resolves once the content is scrolled to."
          },
          "complexType": {
            "signature": "(options?: ScrollToOptions) => Promise<void>",
            "parameters": [
              {
                "name": "options",
                "type": "ScrollToOptions",
                "docs": "- allows specific coordinates to be defined."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "ScrollToOptions": {
                "location": "global",
                "id": "global::ScrollToOptions"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "scrollContentTo(options?: ScrollToOptions) => Promise<void>",
          "parameters": [
            {
              "name": "options",
              "type": "ScrollToOptions",
              "docs": "- allows specific coordinates to be defined."
            }
          ],
          "docs": "Scrolls the component's content to a specified set of coordinates.",
          "docsTags": [
            {
              "name": "example",
              "text": "myCalciteFlowItem.scrollContentTo({\n  left: 0, // Specifies the number of pixels along the X axis to scroll the window or element.\n  top: 0, // Specifies the number of pixels along the Y axis to scroll the window or element\n  behavior: \"auto\" // Specifies whether the scrolling should animate smoothly (smooth), or happen instantly in a single jump (auto, the default value).\n});"
            },
            {
              "name": "param",
              "text": "options - allows specific coordinates to be defined."
            },
            {
              "name": "returns",
              "text": "- promise that resolves once the content is scrolled to."
            }
          ]
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component's first focusable element.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calcitePanelClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the close button is clicked.",
          "docsTags": []
        },
        {
          "event": "calcitePanelScroll",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the content is scrolled.",
          "docsTags": []
        },
        {
          "event": "calcitePanelToggle",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the collapse button is clicked.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-panel-footer-padding",
          "annotation": "prop",
          "docs": "Specifies the padding of the component's footer."
        },
        {
          "name": "--calcite-panel-header-border-block-end",
          "annotation": "prop",
          "docs": "Specifies the component header's block end border."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding custom content."
        },
        {
          "name": "action-bar",
          "docs": "A slot for adding a `calcite-action-bar` to the component."
        },
        {
          "name": "fab",
          "docs": "A slot for adding a `calcite-fab` (floating action button) to perform an action."
        },
        {
          "name": "footer",
          "docs": "A slot for adding custom content to the footer."
        },
        {
          "name": "footer-actions",
          "docs": "[Deprecated] Use the `\"footer\"` slot instead. A slot for adding `calcite-button`s to the component's footer."
        },
        {
          "name": "header-actions-end",
          "docs": "A slot for adding actions or content to the end side of the header."
        },
        {
          "name": "header-actions-start",
          "docs": "A slot for adding actions or content to the start side of the header."
        },
        {
          "name": "header-content",
          "docs": "A slot for adding custom content to the header."
        },
        {
          "name": "header-menu-actions",
          "docs": "A slot for adding an overflow menu with actions inside a `calcite-dropdown`."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-flow-item"
      ],
      "dependencies": [
        "calcite-action",
        "calcite-action-menu",
        "calcite-scrim"
      ],
      "dependencyGraph": {
        "calcite-panel": [
          "calcite-action",
          "calcite-action-menu",
          "calcite-scrim"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-action-menu": [
          "calcite-action",
          "calcite-popover"
        ],
        "calcite-popover": [
          "calcite-action",
          "calcite-icon"
        ],
        "calcite-scrim": [
          "calcite-loader"
        ],
        "calcite-flow-item": [
          "calcite-panel"
        ]
      }
    },
    {
      "filePath": "src/components/pick-list/pick-list.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-pick-list",
      "readme": "# calcite-pick-list\n\n`calcite-pick-list` lives in a panel and contains `calcite-pick-list-item`s. Each item is able to be be selected via radio button or checkboxes (which have a multiselect and shift-click capability). There is also an option for a filter at the top of the list for searching.\n",
      "docs": "`calcite-pick-list` lives in a panel and contains `calcite-pick-list-item`s. Each item is able to be be selected via radio button or checkboxes (which have a multiselect and shift-click capability). There is also an option for a filter at the top of the list for searching.",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "Use the `list` component instead."
        },
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-pick-list-item` or `calcite-pick-list-group` elements. Items are displayed as a vertical list."
        },
        {
          "name": "slot",
          "text": "menu-actions - A slot for adding a button and menu combination for performing actions, such as sorting."
        }
      ],
      "usage": {
        "Basic": "Renders a basic pick list with radio buttons on the left and actions on the right side.\n\n```html\n<calcite-pick-list>\n  <calcite-pick-list-item label=\"T. Rex\" description=\"Arm strength impaired\" value=\"trex\">\n    <calcite-action slot=\"actions-end\" icon=\"circle\"></calcite-action>\n  </calcite-pick-list-item>\n  <calcite-pick-list-item label=\"Triceratops\" description=\"3 horn\" value=\"triceratops\" selected>\n    <calcite-action slot=\"actions-end\" icon=\"circle\"></calcite-action>\n  </calcite-pick-list-item>\n  <calcite-pick-list-item label=\"Velociraptor\" description=\"Swift seizer\" value=\"velociraptor\">\n    <calcite-action slot=\"actions-end\" icon=\"circle\"></calcite-action>\n  </calcite-pick-list-item>\n</calcite-pick-list>\n```\n",
        "Multi-select-and-filter-enabled": "Renders a pick list with a sticky filter and checkboxes for multiple selection of items.\n\n```html\n<calcite-pick-list multiple filter-enabled>\n  <calcite-pick-list-item label=\"Chocolate\" value=\"chocolate\">\n    <calcite-action slot=\"actions-end\" icon=\"ellipsis-circle\"></calcite-action>\n  </calcite-pick-list-item>\n  <calcite-pick-list-item label=\"Vanilla\" description=\"Oldie but goodie\" value=\"vanilla\">\n    <calcite-action slot=\"actions-end\" icon=\"ellipsis-circle\"></calcite-action>\n  </calcite-pick-list-item>\n  <calcite-pick-list-item label=\"Strawberry\" description=\"no metadata on this one\" value=\"strawberry\">\n    <calcite-action slot=\"actions-end\" icon=\"ellipsis-circle\"></calcite-action>\n  </calcite-pick-list-item>\n</calcite-pick-list>\n```\n",
        "Sub-groups": "Renders groups of pick list items that are visually separated.\n\n```html\n<calcite-pick-list>\n  <calcite-pick-list-group group-title=\"numbers\">\n    <calcite-pick-list-item label=\"one\" description=\"fish\" value=\"one\" icon=\"grip\">\n      <calcite-action slot=\"actions-end\" icon=\"ellipsis\"></calcite-action>\n    </calcite-pick-list-item>\n    <calcite-pick-list-item label=\"two\" description=\"fish\" value=\"two\" icon=\"grip\">\n      <calcite-action slot=\"actions-end\" icon=\"ellipsis\"></calcite-action>\n    </calcite-pick-list-item>\n  </calcite-pick-list-group>\n  <calcite-pick-list-group group-title=\"colors\">\n    <calcite-pick-list-item label=\"red\" description=\"fish\" value=\"red\" icon=\"grip\">\n      <calcite-action slot=\"actions-end\" icon=\"ellipsis\"></calcite-action>\n    </calcite-pick-list-item>\n    <calcite-pick-list-item label=\"blue\" description=\"fish\" value=\"blue\" icon=\"grip\">\n      <calcite-action slot=\"actions-end\" icon=\"ellipsis\"></calcite-action>\n    </calcite-pick-list-item>\n  </calcite-pick-list-group>\n</calcite-pick-list>\n```\n"
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterEnabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "filter-enabled",
          "reflectToAttr": true,
          "docs": "When `true`, an input appears at the top of the list that can be used by end users to filter items in the list.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterPlaceholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filter-placeholder",
          "reflectToAttr": true,
          "docs": "Placeholder text for the filter input field.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "filter-text",
          "reflectToAttr": true,
          "docs": "Text for the filter input field.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filteredData",
          "type": "{ label: string; description: string; metadata: Record<string, unknown>; value: string; }[]",
          "complexType": {
            "original": "ItemData",
            "resolved": "{ label: string; description: string; metadata: Record<string, unknown>; value: string; }[]",
            "references": {
              "ItemData": {
                "location": "import",
                "path": "./shared-list-logic",
                "id": "src/components/pick-list/shared-list-logic.ts::ItemData"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The component's filtered data.",
          "docsTags": [
            {
              "name": "readonly"
            }
          ],
          "default": "[]",
          "values": [
            {
              "type": "{ label: string; description: string; metadata: Record<string, unknown>; value: string; }[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filteredItems",
          "type": "HTMLCalcitePickListItemElement[]",
          "complexType": {
            "original": "HTMLCalcitePickListItemElement[]",
            "resolved": "HTMLCalcitePickListItemElement[]",
            "references": {
              "HTMLCalcitePickListItemElement": {
                "location": "global",
                "id": "global::HTMLCalcitePickListItemElement"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The component's filtered items.",
          "docsTags": [
            {
              "name": "readonly"
            }
          ],
          "default": "[]",
          "values": [
            {
              "type": "HTMLCalcitePickListItemElement[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "complexType": {
            "original": "HeadingLevel",
            "resolved": "1 | 2 | 3 | 4 | 5 | 6",
            "references": {
              "HeadingLevel": {
                "location": "import",
                "path": "../functional/Heading",
                "id": "src/components/functional/Heading.tsx::HeadingLevel"
              }
            }
          },
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": true,
          "docs": "Specifies the number at which section headings should start.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When `true`, a busy indicator is displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": true,
          "docs": "Similar to standard radio buttons and checkboxes.\nWhen `true`, a user can select multiple `calcite-pick-list-item`s at a time.\nWhen `false`, only a single `calcite-pick-list-item` can be selected at a time,\nand a new selection will deselect previous selections.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionFollowsFocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selection-follows-focus",
          "reflectToAttr": true,
          "docs": "When `true` and single selection is enabled, the selection changes when navigating `calcite-pick-list-item`s via keyboard.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getSelectedItems",
          "returns": {
            "type": "Promise<Map<string, HTMLCalcitePickListItemElement>>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<Map<string, HTMLCalcitePickListItemElement>>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "Map": {
                "location": "global",
                "id": "global::Map"
              },
              "HTMLCalcitePickListItemElement": {
                "location": "global",
                "id": "global::HTMLCalcitePickListItemElement"
              }
            },
            "return": "Promise<Map<string, HTMLCalcitePickListItemElement>>"
          },
          "signature": "getSelectedItems() => Promise<Map<string, HTMLCalcitePickListItemElement>>",
          "parameters": [],
          "docs": "Returns the component's selected `calcite-pick-list-item`s.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(focusId?: ListFocusId) => Promise<void>",
            "parameters": [
              {
                "name": "focusId",
                "type": "\"filter\"",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "ListFocusId": {
                "location": "import",
                "path": "./shared-list-logic",
                "id": "src/components/pick-list/shared-list-logic.ts::ListFocusId"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus(focusId?: ListFocusId) => Promise<void>",
          "parameters": [
            {
              "name": "focusId",
              "type": "\"filter\"",
              "docs": ""
            }
          ],
          "docs": "Sets focus on the component's first focusable element.",
          "docsTags": [
            {
              "name": "param",
              "text": "focusId"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "calciteListChange",
          "detail": "Map<string, HTMLCalcitePickListItemElement>",
          "bubbles": true,
          "complexType": {
            "original": "Map<string, HTMLCalcitePickListItemElement>",
            "resolved": "Map<string, HTMLCalcitePickListItemElement>",
            "references": {
              "Map": {
                "location": "global",
                "id": "global::Map"
              },
              "HTMLCalcitePickListItemElement": {
                "location": "global",
                "id": "global::HTMLCalcitePickListItemElement"
              }
            }
          },
          "cancelable": false,
          "composed": true,
          "docs": "Emits when any of the `calcite-pick-list-item` selections have changed.",
          "docsTags": []
        },
        {
          "event": "calciteListFilter",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Emits when a filter has changed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteListItemRemove",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteListItemChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalListItemPropsChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalListItemValueChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusout",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-pick-list-item` or `calcite-pick-list-group` elements. Items are displayed as a vertical list."
        },
        {
          "name": "menu-actions",
          "docs": "A slot for adding a button and menu combination for performing actions, such as sorting."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-filter",
        "calcite-scrim"
      ],
      "dependencyGraph": {
        "calcite-pick-list": [
          "calcite-filter",
          "calcite-scrim"
        ],
        "calcite-filter": [
          "calcite-input"
        ],
        "calcite-input": [
          "calcite-progress",
          "calcite-icon",
          "calcite-input-message"
        ],
        "calcite-input-message": [
          "calcite-icon"
        ],
        "calcite-scrim": [
          "calcite-loader"
        ]
      },
      "deprecation": "Use the `list` component instead."
    },
    {
      "filePath": "src/components/pick-list-group/pick-list-group.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-pick-list-group",
      "readme": "# calcite-pick-list-group\n\n`calcite-pick-list-group` is a wrapper for multiple `calcite-pick-list-item`s and lives in `calcite-pick-list`.\n",
      "docs": "`calcite-pick-list-group` is a wrapper for multiple `calcite-pick-list-item`s and lives in `calcite-pick-list`.",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "Use the `list` component instead."
        },
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-pick-list-item` elements."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "groupTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "group-title",
          "reflectToAttr": true,
          "docs": "Specifies the title for all nested `calcite-pick-list-item`s.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "complexType": {
            "original": "HeadingLevel",
            "resolved": "1 | 2 | 3 | 4 | 5 | 6",
            "references": {
              "HeadingLevel": {
                "location": "import",
                "path": "../functional/Heading",
                "id": "src/components/functional/Heading.tsx::HeadingLevel"
              }
            }
          },
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": true,
          "docs": "Specifies the number at which section headings should start.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-pick-list-item` elements."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "deprecation": "Use the `list` component instead."
    },
    {
      "filePath": "src/components/pick-list-item/pick-list-item.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-pick-list-item",
      "readme": "# calcite-pick-list-item\n\n`calcite-pick-list-item`s are cards contained in a `calcite-pick-list`. They each can have a label, description and an icon. The developer can disable or preselect each list item and give it a value.\n",
      "docs": "`calcite-pick-list-item`s are cards contained in a `calcite-pick-list`. They each can have a label, description and an icon. The developer can disable or preselect each list item and give it a value.",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "Use the `list` component instead."
        },
        {
          "name": "slot",
          "text": "actions-end - A slot for adding `calcite-action`s or content to the end side of the component."
        },
        {
          "name": "slot",
          "text": "actions-start - A slot for adding `calcite-action`s or content to the start side of the component."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": true,
          "docs": "A description for the component that displays below the label text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "deselectDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "deselect-disabled",
          "reflectToAttr": true,
          "docs": "When `false`, the component cannot be deselected by user interaction.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "ICON_TYPES.circle | ICON_TYPES.grip | ICON_TYPES.square",
          "complexType": {
            "original": "ICON_TYPES | null",
            "resolved": "ICON_TYPES.circle | ICON_TYPES.grip | ICON_TYPES.square",
            "references": {
              "ICON_TYPES": {
                "location": "import",
                "path": "../pick-list/resources",
                "id": "src/components/pick-list/resources.ts::ICON_TYPES"
              }
            }
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "Determines the icon SVG symbol that will be shown. Options are `\"circle\"`, `\"square\"`, `\"grip\"` or `null`.",
          "docsTags": [
            {
              "name": "see",
              "text": "[ICON_TYPES](https://github.com/Esri/calcite-design-system/blob/main/src/components/pick-list/resources.ts#L5)"
            }
          ],
          "default": "null",
          "values": [
            {
              "type": "ICON_TYPES.circle"
            },
            {
              "type": "ICON_TYPES.grip"
            },
            {
              "type": "ICON_TYPES.square"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": true,
          "docs": "Label and accessible name for the component. Appears next to the icon.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "messageOverrides",
          "type": "{ remove?: string; }",
          "complexType": {
            "original": "Partial<PickListItemMessages>",
            "resolved": "{ remove?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "PickListItemMessages": {
                "location": "import",
                "path": "./assets/pick-list-item/t9n",
                "id": "src/components/pick-list-item/assets/pick-list-item/t9n/index.d.ts::PickListItemMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ remove?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "metadata",
          "type": "{ [x: string]: unknown; }",
          "complexType": {
            "original": "Record<string, unknown>",
            "resolved": "{ [x: string]: unknown; }",
            "references": {
              "Record": {
                "location": "global",
                "id": "global::Record"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Provides additional metadata to the component. Primary use is for a filter on the parent list.",
          "docsTags": [],
          "values": [
            {
              "type": "{ [x: string]: unknown; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "removable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "removable",
          "reflectToAttr": true,
          "docs": "When `true`, displays a remove action that removes the item from the list.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "When `true`, selects an item. Toggles when an item is checked/unchecked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's value.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        },
        {
          "name": "toggleSelected",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(coerce?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "coerce",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "toggleSelected(coerce?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "coerce",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Toggles the selection state. By default this won't trigger an event.\nThe first argument allows the value to be coerced, rather than swapping values.",
          "docsTags": [
            {
              "name": "param",
              "text": "coerce"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "calciteListItemChange",
          "detail": "{ item: HTMLCalcitePickListItemElement; value: any; selected: boolean; shiftPressed: boolean; }",
          "bubbles": true,
          "complexType": {
            "original": "{\n    item: HTMLCalcitePickListItemElement;\n    value: any;\n    selected: boolean;\n    shiftPressed: boolean;\n  }",
            "resolved": "{ item: HTMLCalcitePickListItemElement; value: any; selected: boolean; shiftPressed: boolean; }",
            "references": {
              "HTMLCalcitePickListItemElement": {
                "location": "global",
                "id": "global::HTMLCalcitePickListItemElement"
              }
            }
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is selected or unselected.",
          "docsTags": []
        },
        {
          "event": "calciteListItemRemove",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fires when the remove button is pressed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "actions-end",
          "docs": "A slot for adding `calcite-action`s or content to the end side of the component."
        },
        {
          "name": "actions-start",
          "docs": "A slot for adding `calcite-action`s or content to the start side of the component."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-value-list-item"
      ],
      "dependencies": [
        "calcite-icon",
        "calcite-action"
      ],
      "dependencyGraph": {
        "calcite-pick-list-item": [
          "calcite-icon",
          "calcite-action"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-value-list-item": [
          "calcite-pick-list-item"
        ]
      },
      "deprecation": "Use the `list` component instead."
    },
    {
      "filePath": "src/components/popover/popover.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-popover",
      "readme": "# calcite-popover\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding custom content."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-popover reference-element=\"popover-button\">Hello! I am some popover content!</calcite-popover>\n\n<calcite-button id=\"popover-button\">Clickable popover</calcite-button>\n```\n",
        "Virtual": "```html\n<!-- virtually positioned popover -->\n<calcite-popover id=\"virtual-popover\" label=\"Hello world!\" open>\n  <p>Hello! I am some virtual popover content!</p>\n</calcite-popover>\n\n<script>\n  function generateGetBoundingClientRect() {\n    return () => ({\n      width: 0,\n      height: 0,\n      top: 100,\n      right: 100,\n      bottom: 100,\n      left: 600,\n    });\n  }\n\n  const virtualElement = {\n    getBoundingClientRect: generateGetBoundingClientRect(),\n  };\n\n  const popover = document.getElementById(\"virtual-popover\");\n  popover.referenceElement = virtualElement;\n</script>\n```\n"
      },
      "props": [
        {
          "name": "autoClose",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "auto-close",
          "reflectToAttr": true,
          "docs": "When `true`, clicking outside of the component automatically closes open `calcite-popover`s.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "closable",
          "reflectToAttr": true,
          "docs": "When `true`, displays a close button within the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "flipDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "flip-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, prevents flipping the component's placement when overlapping its `referenceElement`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "flipPlacements",
          "type": "Placement[]",
          "complexType": {
            "original": "EffectivePlacement[]",
            "resolved": "Placement[]",
            "references": {
              "EffectivePlacement": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::EffectivePlacement"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Defines the available placements that can be used when a flip occurs.",
          "docsTags": [],
          "values": [
            {
              "type": "Placement[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focusTrapDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "focus-trap-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, prevents focus trapping.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "The component header text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "complexType": {
            "original": "HeadingLevel",
            "resolved": "1 | 2 | 3 | 4 | 5 | 6",
            "references": {
              "HeadingLevel": {
                "location": "import",
                "path": "../functional/Heading",
                "id": "src/components/functional/Heading.tsx::HeadingLevel"
              }
            }
          },
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": true,
          "docs": "Specifies the number at which section headings should start.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "messageOverrides",
          "type": "{ close?: string; }",
          "complexType": {
            "original": "Partial<PopoverMessages>",
            "resolved": "{ close?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "PopoverMessages": {
                "location": "import",
                "path": "./assets/popover/t9n",
                "id": "src/components/popover/assets/popover/t9n/index.d.ts::PopoverMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ close?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "offsetDistance",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "offset-distance",
          "reflectToAttr": true,
          "docs": "Offsets the position of the popover away from the `referenceElement`.",
          "docsTags": [
            {
              "name": "default",
              "text": "6"
            }
          ],
          "default": "defaultOffsetDistance",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "offsetSkidding",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "offset-skidding",
          "reflectToAttr": true,
          "docs": "Offsets the position of the component along the `referenceElement`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "When `true`, displays and positions the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPositioning",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "OverlayPositioning",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {
              "OverlayPositioning": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::OverlayPositioning"
              }
            }
          },
          "mutable": false,
          "attr": "overlay-positioning",
          "reflectToAttr": true,
          "docs": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` value should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
          "docsTags": [],
          "default": "\"absolute\"",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "\"auto\" | \"top\" | \"right\" | \"bottom\" | \"left\" | \"top-start\" | \"top-end\" | \"right-start\" | \"right-end\" | \"bottom-start\" | \"bottom-end\" | \"left-start\" | \"left-end\" | \"auto-start\" | \"auto-end\" | \"leading-start\" | \"leading\" | \"leading-end\" | \"trailing-end\" | \"trailing\" | \"trailing-start\"",
          "complexType": {
            "original": "LogicalPlacement",
            "resolved": "\"auto\" | \"top\" | \"right\" | \"bottom\" | \"left\" | \"top-start\" | \"top-end\" | \"right-start\" | \"right-end\" | \"bottom-start\" | \"bottom-end\" | \"left-start\" | \"left-end\" | \"auto-start\" | \"auto-end\" | \"leading-start\" | \"leading\" | \"leading-end\" | \"trailing-end\" | \"trailing\" | \"trailing-start\"",
            "references": {
              "LogicalPlacement": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::LogicalPlacement"
              }
            }
          },
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": true,
          "docs": "Determines where the component will be positioned relative to the `referenceElement`.",
          "docsTags": [],
          "default": "defaultPopoverPlacement",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "leading-start",
              "type": "string"
            },
            {
              "value": "leading",
              "type": "string"
            },
            {
              "value": "leading-end",
              "type": "string"
            },
            {
              "value": "trailing-end",
              "type": "string"
            },
            {
              "value": "trailing",
              "type": "string"
            },
            {
              "value": "trailing-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pointerDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "pointer-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, removes the caret pointer.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "referenceElement",
          "type": "Element | VirtualElement | string",
          "complexType": {
            "original": "ReferenceElement | string",
            "resolved": "Element | VirtualElement | string",
            "references": {
              "ReferenceElement": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::ReferenceElement"
              }
            }
          },
          "mutable": false,
          "attr": "reference-element",
          "reflectToAttr": false,
          "docs": "The `referenceElement` used to position the component according to its `placement` value. Setting to an `HTMLElement` is preferred so the component does not need to query the DOM. However, a string `id` of the reference element can also be used.",
          "docsTags": [],
          "values": [
            {
              "type": "Element"
            },
            {
              "type": "VirtualElement"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "triggerDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "trigger-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, disables automatically toggling the component when its `referenceElement` has been triggered.\n\nThis property can be set to `true` to manage when the component is open.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "reposition",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(delayed?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "delayed",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "reposition(delayed?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "delayed",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Updates the position of the component.",
          "docsTags": [
            {
              "name": "param",
              "text": "delayed"
            }
          ]
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component's first focusable element.",
          "docsTags": []
        },
        {
          "name": "updateFocusTrapElements",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "updateFocusTrapElements() => Promise<void>",
          "parameters": [],
          "docs": "Updates the element(s) that are used within the focus-trap of the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calcitePopoverBeforeClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is requested to be closed and before the closing transition begins.",
          "docsTags": []
        },
        {
          "event": "calcitePopoverBeforeOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
          "docsTags": []
        },
        {
          "event": "calcitePopoverClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is closed and animation is complete.",
          "docsTags": []
        },
        {
          "event": "calcitePopoverOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is open and animation is complete.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-popover-z-index",
          "annotation": "prop",
          "docs": "Sets the z-index value for the component."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding custom content."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-action-menu",
        "calcite-input-time-picker"
      ],
      "dependencies": [
        "calcite-action",
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-popover": [
          "calcite-action",
          "calcite-icon"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-action-menu": [
          "calcite-popover"
        ],
        "calcite-input-time-picker": [
          "calcite-popover"
        ]
      }
    },
    {
      "filePath": "src/components/progress/progress.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-progress",
      "readme": "# calcite-progress\n\nThe `calcite-progress` component is used to show progress on some async task to the user.\n",
      "docs": "The `calcite-progress` component is used to show progress on some async task to the user.",
      "docsTags": [],
      "usage": {
        "Basic": "```html\n<calcite-progress type=\"indeterminate\"></calcite-progress>\n```\n"
      },
      "props": [
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "reversed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "reversed",
          "reflectToAttr": true,
          "docs": "When `true` and for `\"indeterminate\"` progress bars, reverses the animation direction.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "Text that displays under the component's indicator.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"determinate\" | \"indeterminate\"",
          "complexType": {
            "original": "\"indeterminate\" | \"determinate\"",
            "resolved": "\"determinate\" | \"indeterminate\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "Specifies the component type.\n\nUse `\"indeterminate\"` if finding actual progress value is impossible.",
          "docsTags": [],
          "default": "\"determinate\"",
          "values": [
            {
              "value": "determinate",
              "type": "string"
            },
            {
              "value": "indeterminate",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "When `type` is `\"determinate\"`, the component's progress value with a range of 0.0 - 1.0.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-input",
        "calcite-input-number",
        "calcite-input-text"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-input": [
          "calcite-progress"
        ],
        "calcite-input-number": [
          "calcite-progress"
        ],
        "calcite-input-text": [
          "calcite-progress"
        ]
      }
    },
    {
      "filePath": "src/components/radio-button/radio-button.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-radio-button",
      "readme": "# calcite-radio-button\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "Basic": "```html\n<calcite-label for=\"item-a\" layout=\"inline\">\n  <calcite-radio-button id=\"item-a\" name=\"preferred-feature\" value=\"Maps\" checked></calcite-radio-button>\n  Maps\n</calcite-label>\n```\n"
      },
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "When `true`, the component is checked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "form",
          "reflectToAttr": true,
          "docs": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "guid",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "guid",
          "reflectToAttr": true,
          "docs": "The `id` of the component. When omitted, a globally unique identifier is used.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Specifies the name of the component. Can be inherited from `calcite-radio-button-group`.\n\nRequired to pass the component's `value` on form submission.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "When `true`, the component must have a value selected from the `calcite-radio-button-group` in order for the form to submit.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component inherited from the `calcite-radio-button-group`.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's value.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteRadioButtonChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires only when the radio button is checked.  This behavior is identical to the native HTML input element.\nSince this event does not fire when the radio button is unchecked, it's not recommended to attach a listener for this event\ndirectly on the element, but instead either attach it to a node that contains all of the radio buttons in the group\nor use the `calciteRadioButtonGroupChange` event if using this with `calcite-radio-button-group`.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "pointerenter",
          "capture": false,
          "passive": true
        },
        {
          "event": "pointerleave",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-tile-select"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-tile-select": [
          "calcite-radio-button"
        ]
      }
    },
    {
      "filePath": "src/components/radio-button-group/radio-button-group.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-radio-button-group",
      "readme": "# calcite-radio-button-group\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-radio-button`s."
        }
      ],
      "usage": {
        "Basic": "Renders the radio button group with default horizontal layout\n\n```html\n<calcite-radio-button-group name=\"basic-group\">\n  <calcite-label layout=\"inline\">\n    <calcite-radio-button></calcite-radio-button>\n    Maps\n  </calcite-label>\n  <calcite-label layout=\"inline\">\n    <calcite-radio-button></calcite-radio-button>\n    Layers\n  </calcite-label>\n  <calcite-label layout=\"inline\">\n    <calcite-radio-button></calcite-radio-button>\n    Data\n  </calcite-label>\n  <calcite-label layout=\"inline\">\n    <calcite-radio-button></calcite-radio-button>\n    Geography\n  </calcite-label>\n</calcite-radio-button-group>\n```\n",
        "Disabled-checked": "Renders all radio button inputs disabled, first one checked\n\n```html\n<calcite-radio-button-group name=\"disabled-group\" disabled>\n  <calcite-label layout=\"inline\">\n    <calcite-radio-button checked></calcite-radio-button>\n    A\n  </calcite-label>\n  <calcite-label layout=\"inline\">\n    <calcite-radio-button></calcite-radio-button>\n    B\n  </calcite-label>\n  <calcite-label layout=\"inline\">\n    <calcite-radio-button></calcite-radio-button>\n    C\n  </calcite-label>\n</calcite-radio-button-group>\n```\n",
        "With-vertical-layout": "```html\n<calcite-radio-button-group name=\"vertical-group\" layout=\"vertical\">\n  <calcite-label layout=\"inline\">\n    <calcite-radio-button></calcite-radio-button>\n    Maps\n  </calcite-label>\n  <calcite-label layout=\"inline\">\n    <calcite-radio-button></calcite-radio-button>\n    Layers\n  </calcite-label>\n  <calcite-label layout=\"inline\">\n    <calcite-radio-button></calcite-radio-button>\n    Data\n  </calcite-label>\n  <calcite-label layout=\"inline\">\n    <calcite-radio-button></calcite-radio-button>\n    Geography\n  </calcite-label>\n</calcite-radio-button-group>\n```\n"
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"grid\" | \"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "Layout",
            "resolved": "\"grid\" | \"horizontal\" | \"vertical\"",
            "references": {
              "Layout": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Layout"
              }
            }
          },
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "Defines the layout of the component.",
          "docsTags": [],
          "default": "\"horizontal\"",
          "values": [
            {
              "value": "grid",
              "type": "string"
            },
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Specifies the name of the component on form submission. Must be unique to other component instances.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "When `true`, the component must have a value in order for the form to submit.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedItem",
          "type": "HTMLCalciteRadioButtonElement",
          "complexType": {
            "original": "HTMLCalciteRadioButtonElement",
            "resolved": "HTMLCalciteRadioButtonElement",
            "references": {
              "HTMLCalciteRadioButtonElement": {
                "location": "global",
                "id": "global::HTMLCalciteRadioButtonElement"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Specifies the component's selected item.",
          "docsTags": [
            {
              "name": "readonly"
            }
          ],
          "default": "null",
          "values": [
            {
              "type": "HTMLCalciteRadioButtonElement"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "status",
          "type": "\"idle\" | \"invalid\" | \"valid\"",
          "complexType": {
            "original": "Status",
            "resolved": "\"idle\" | \"invalid\" | \"valid\"",
            "references": {
              "Status": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Status"
              }
            }
          },
          "mutable": false,
          "attr": "status",
          "reflectToAttr": true,
          "docs": "Specifies the status of the validation message.",
          "docsTags": [],
          "default": "\"idle\"",
          "values": [
            {
              "value": "idle",
              "type": "string"
            },
            {
              "value": "invalid",
              "type": "string"
            },
            {
              "value": "valid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validationIcon",
          "type": "boolean | string",
          "complexType": {
            "original": "string | boolean",
            "resolved": "boolean | string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-icon",
          "reflectToAttr": true,
          "docs": "Specifies the validation icon to display under the component.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validationMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-message",
          "reflectToAttr": false,
          "docs": "Specifies the validation message to display under the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the fist focusable `calcite-radio-button` element in the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteRadioButtonGroupChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component has changed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteRadioButtonChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-radio-button`s."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-input-message"
      ],
      "dependencyGraph": {
        "calcite-radio-button-group": [
          "calcite-input-message"
        ],
        "calcite-input-message": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/rating/rating.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-rating",
      "readme": "# calcite-rating\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "Basic": "```html\n<calcite-rating show-chip scale=\"m\" value=\"0\" average=\"4.4\" count=\"10\"></calcite-rating>\n```\n"
      },
      "props": [
        {
          "name": "average",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "average",
          "reflectToAttr": true,
          "docs": "Specifies a cumulative average from previous ratings to display.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "count",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "count",
          "reflectToAttr": true,
          "docs": "Specifies the number of previous ratings to display.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "form",
          "reflectToAttr": true,
          "docs": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ rating?: string; stars?: string; }",
          "complexType": {
            "original": "Partial<RatingMessages>",
            "resolved": "{ rating?: string; stars?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "RatingMessages": {
                "location": "import",
                "path": "./assets/rating/t9n",
                "id": "src/components/rating/assets/rating/t9n/index.d.ts::RatingMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ rating?: string; stars?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readOnly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "read-only",
          "reflectToAttr": true,
          "docs": "When `true`, the component's value can be read, but cannot be modified.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showChip",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-chip",
          "reflectToAttr": true,
          "docs": "When `true`, and if available, displays the `average` and/or `count` data summary in a `calcite-chip`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "The component's value.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteRatingChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component's value changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-rating-spacing-unit",
          "annotation": "prop",
          "docs": "The amount of left and right margin spacing between each rating star."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-chip",
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-rating": [
          "calcite-chip",
          "calcite-icon"
        ],
        "calcite-chip": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/scrim/scrim.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-scrim",
      "readme": "# calcite-scrim\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding custom content, primarily loading information."
        }
      ],
      "usage": {
        "Basic": "```html\n<div\n  tabindex=\"0\"\n  style=\"position: relative; width: 400px; margin: 25px; padding: 25px; resize: both; overflow: auto; background-color: lightBlue;\"\n>\n  <calcite-scrim>\n    <p>I'm a panel that is not loading.</p>\n    <p>The content below can have any zIndex and it will not be placed above.</p>\n  </calcite-scrim>\n  <div style=\"width: 100%; height: 100%; overflow: auto; z-index: 99\">\n    <p>\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugit libero sint eveniet suscipit voluptatibus esse\n      neque ipsa cum placeat sequi deserunt hic facere sunt quisquam nostrum itaque officia, labore maiores obcaecati\n      repudiandae rerum! Debitis, delectus enim, dignissimos excepturi, accusantium ullam aspernatur quae numquam optio\n      porro laudantium. A eaque accusantium quo?\n    </p>\n    <ul>\n      <li>\n        Lorem ipsum dolor, sit amet consectetur adipisicing elit. Sit ipsum vitae doloribus praesentium numquam iure\n        harum, sequi quibusdam at odio.\n      </li>\n      <li>\n        Lorem, ipsum dolor sit amet consectetur adipisicing elit. Nesciunt at aliquam suscipit nostrum, nulla dolor sunt\n        eum, quasi tenetur similique voluptatem corrupti neque voluptatum sint!\n      </li>\n      <li>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Nam corporis quos, dolorem veritatis aliquid aut nihil\n        sint velit obcaecati praesentium?\n      </li>\n    </ul>\n  </div>\n</div>\n```\n",
        "Loading-scrim-panel": "```html\n<div\n  tabindex=\"0\"\n  style=\"position: relative; width: 400px; margin: 25px; padding: 25px; resize: both; overflow: auto; background-color: lightBlue;\"\n>\n  <calcite-scrim loading>Loading</calcite-scrim>\n  <div style=\"width: 100%; height: 100%; overflow: auto; z-index: 99\">\n    <p>\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugit libero sint eveniet suscipit voluptatibus esse\n      neque ipsa cum placeat sequi deserunt hic facere sunt quisquam nostrum itaque officia, labore maiores obcaecati\n      repudiandae rerum! Debitis, delectus enim, dignissimos excepturi, accusantium ullam aspernatur quae numquam optio\n      porro laudantium. A eaque accusantium quo?\n    </p>\n    <ul>\n      <li>\n        Lorem ipsum dolor, sit amet consectetur adipisicing elit. Sit ipsum vitae doloribus praesentium numquam iure\n        harum, sequi quibusdam at odio.\n      </li>\n      <li>\n        Lorem, ipsum dolor sit amet consectetur adipisicing elit. Nesciunt at aliquam suscipit nostrum, nulla dolor sunt\n        eum, quasi tenetur similique voluptatem corrupti neque voluptatum sint!\n      </li>\n      <li>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Nam corporis quos, dolorem veritatis aliquid aut nihil\n        sint velit obcaecati praesentium?\n      </li>\n    </ul>\n  </div>\n</div>\n```\n"
      },
      "props": [
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When `true`, a busy indicator is displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ loading?: string; }",
          "complexType": {
            "original": "Partial<ScrimMessages>",
            "resolved": "{ loading?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "ScrimMessages": {
                "location": "import",
                "path": "./assets/scrim/t9n",
                "id": "src/components/scrim/assets/scrim/t9n/index.d.ts::ScrimMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ loading?: string; }"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-scrim-background",
          "annotation": "prop",
          "docs": "Specifies the background color of the scrim."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding custom content, primarily loading information."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-block",
        "calcite-list",
        "calcite-modal",
        "calcite-panel",
        "calcite-pick-list",
        "calcite-sheet",
        "calcite-value-list"
      ],
      "dependencies": [
        "calcite-loader"
      ],
      "dependencyGraph": {
        "calcite-scrim": [
          "calcite-loader"
        ],
        "calcite-block": [
          "calcite-scrim"
        ],
        "calcite-list": [
          "calcite-scrim"
        ],
        "calcite-modal": [
          "calcite-scrim"
        ],
        "calcite-panel": [
          "calcite-scrim"
        ],
        "calcite-pick-list": [
          "calcite-scrim"
        ],
        "calcite-sheet": [
          "calcite-scrim"
        ],
        "calcite-value-list": [
          "calcite-scrim"
        ]
      }
    },
    {
      "filePath": "src/components/segmented-control/segmented-control.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-segmented-control",
      "readme": "# calcite-segmented-control\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-segmented-control-item`s."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-segmented-control layout=\"horizontal\" appearance=\"solid\" scale=\"m\" width=\"auto\">\n  <calcite-segmented-control-item value=\"apple\" checked>Apple</calcite-segmented-control-item>\n  <calcite-segmented-control-item value=\"mango\">Mango</calcite-segmented-control-item>\n  <calcite-segmented-control-item value=\"tomato\">Tomato</calcite-segmented-control-item>\n  <calcite-segmented-control-item value=\"banana\">Banana</calcite-segmented-control-item>\n</calcite-segmented-control>\n```\n"
      },
      "props": [
        {
          "name": "appearance",
          "type": "\"outline\" | \"outline-fill\" | \"solid\"",
          "complexType": {
            "original": "Extract<\"outline\" | \"outline-fill\" | \"solid\", Appearance>",
            "resolved": "\"outline\" | \"outline-fill\" | \"solid\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Appearance": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Appearance"
              }
            }
          },
          "mutable": false,
          "attr": "appearance",
          "reflectToAttr": true,
          "docs": "Specifies the appearance style of the component.",
          "docsTags": [],
          "default": "\"solid\"",
          "values": [
            {
              "value": "outline",
              "type": "string"
            },
            {
              "value": "outline-fill",
              "type": "string"
            },
            {
              "value": "solid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "form",
          "reflectToAttr": true,
          "docs": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "Extract<\"horizontal\" | \"vertical\", Layout>",
            "resolved": "\"horizontal\" | \"vertical\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Layout": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Layout"
              }
            }
          },
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "Defines the layout of the component.",
          "docsTags": [],
          "default": "\"horizontal\"",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "When `true`, the component must have a value in order for the form to submit.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedItem",
          "type": "HTMLCalciteSegmentedControlItemElement",
          "complexType": {
            "original": "HTMLCalciteSegmentedControlItemElement",
            "resolved": "HTMLCalciteSegmentedControlItemElement",
            "references": {
              "HTMLCalciteSegmentedControlItemElement": {
                "location": "global",
                "id": "global::HTMLCalciteSegmentedControlItemElement"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The component's selected item `HTMLElement`.",
          "docsTags": [
            {
              "name": "readonly"
            }
          ],
          "values": [
            {
              "type": "HTMLCalciteSegmentedControlItemElement"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "status",
          "type": "\"idle\" | \"invalid\" | \"valid\"",
          "complexType": {
            "original": "Status",
            "resolved": "\"idle\" | \"invalid\" | \"valid\"",
            "references": {
              "Status": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Status"
              }
            }
          },
          "mutable": false,
          "attr": "status",
          "reflectToAttr": true,
          "docs": "Specifies the status of the validation message.",
          "docsTags": [],
          "default": "\"idle\"",
          "values": [
            {
              "value": "idle",
              "type": "string"
            },
            {
              "value": "invalid",
              "type": "string"
            },
            {
              "value": "valid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validationIcon",
          "type": "boolean | string",
          "complexType": {
            "original": "string | boolean",
            "resolved": "boolean | string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-icon",
          "reflectToAttr": true,
          "docs": "Specifies the validation icon to display under the component.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validationMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-message",
          "reflectToAttr": false,
          "docs": "Specifies the validation message to display under the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's `selectedItem` value.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "\"auto\" | \"full\"",
          "complexType": {
            "original": "Extract<\"auto\" | \"full\", Width>",
            "resolved": "\"auto\" | \"full\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Width": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Width"
              }
            }
          },
          "mutable": false,
          "attr": "width",
          "reflectToAttr": true,
          "docs": "Specifies the width of the component.",
          "docsTags": [],
          "default": "\"auto\"",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "full",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteSegmentedControlChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the `calcite-segmented-control-item` selection changes.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteInternalSegmentedControlItemChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-segmented-control-item`s."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-input-message"
      ],
      "dependencyGraph": {
        "calcite-segmented-control": [
          "calcite-input-message"
        ],
        "calcite-input-message": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/segmented-control-item/segmented-control-item.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-segmented-control-item",
      "readme": "# calcite-segmented-control-item\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "When `true`, the component is checked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconEnd",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-end",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display at the end of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconStart",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-start",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display at the start of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any | null",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's value.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-segmented-control-item": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/select/select.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-select",
      "readme": "# calcite-select\n\nThis component represents a menu of options.\n",
      "docs": "This component represents a menu of options.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-option`s."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-select>\n  <calcite-option label=\"Java\" value=\"java\"></calcite-option>\n  <calcite-option label=\"Python\" value=\"python\"></calcite-option>\n  <calcite-option label=\"JavaScript\" value=\"javascript\"></calcite-option>\n  <calcite-option label=\"C#\" value=\"csharp\" disabled></calcite-option>\n</calcite-select>\n```\n",
        "Content": "Specify the underlying value and content for each option.\n\n```html\n<calcite-select>\n  <calcite-option label=\"Java\" value=\"java\">Java Programming</calcite-option>\n  <calcite-option label=\"Python\" value=\"python\">Python Programming</calcite-option>\n  <calcite-option label=\"JavaScript\" value=\"javascript\">JavaScript Development</calcite-option>\n  <calcite-option label=\"C#\" value=\"csharp\" disabled>C# Programming (Disabled)</calcite-option>\n</calcite-select>\n```\n",
        "Disable": "Disable specific items or groups.\n\n```html\n<calcite-select>\n  <calcite-option-group label=\"Mammals\">\n    <calcite-option>Cat</calcite-option>\n    <calcite-option>Dog</calcite-option>\n    <calcite-option>Horse</calcite-option>\n    <calcite-option disabled>Elephant (disabled)</calcite-option>\n  </calcite-option-group>\n  <calcite-option-group label=\"Birds\">\n    <calcite-option disabled>Penguin (disabled)</calcite-option>\n    <calcite-option>Parrot</calcite-option>\n    <calcite-option selected>Owl</calcite-option>\n  </calcite-option-group>\n  <calcite-option-group label=\"Reptiles\">\n    <calcite-option disabled>Crocodile (disabled)</calcite-option>\n    <calcite-option>Lizard</calcite-option>\n    <calcite-option>Snake</calcite-option>\n  </calcite-option-group>\n</calcite-select>\n```\n",
        "Grouped": "Separate the options into groups.\n\n```html\n<calcite-select>\n  <calcite-option-group label=\"Continents\">\n    <calcite-option>Africa</calcite-option>\n    <calcite-option>Asia</calcite-option>\n    <calcite-option>Europe</calcite-option>\n    <calcite-option>North America</calcite-option>\n    <calcite-option>South America</calcite-option>\n    <calcite-option>Australia</calcite-option>\n    <calcite-option>Antarctica</calcite-option>\n  </calcite-option-group>\n  <calcite-option-group label=\"Oceans\">\n    <calcite-option>Atlantic Ocean</calcite-option>\n    <calcite-option>Indian Ocean</calcite-option>\n    <calcite-option selected>Pacific Ocean</calcite-option>\n    <calcite-option>Southern Ocean</calcite-option>\n    <calcite-option>Arctic Ocean</calcite-option>\n  </calcite-option-group>\n</calcite-select>\n```\n",
        "Side-by-side": "Separate the options side by side using a flex-box container.\n\n```html\n<div class=\"demo-side-by-side\">\n  <calcite-select width=\"half\" label=\"Preferred Activity\">\n    <calcite-option selected>🚴 Cycling</calcite-option>\n    <calcite-option>🏞️ Hiking</calcite-option>\n    <calcite-option>🎣 Fishing</calcite-option>\n  </calcite-select>\n  <calcite-select width=\"half\" label=\"Preferred Music Genre\">\n    <calcite-option>🎸 Rock</calcite-option>\n    <calcite-option>🎷 Jazz</calcite-option>\n    <calcite-option>🤠 Country</calcite-option>\n  </calcite-select>\n</div>\n```\n",
        "Value": "Specify the underlying value for each option.\n\n```html\n<calcite-select>\n  <calcite-option value=\"3\">High</calcite-option>\n  <calcite-option value=\"2\">Medium</calcite-option>\n  <calcite-option value=\"1\">Low</calcite-option>\n</calcite-select>\n```\n"
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "form",
          "reflectToAttr": true,
          "docs": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "When `true`, the component must have a value in order for the form to submit.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedOption",
          "type": "HTMLCalciteOptionElement",
          "complexType": {
            "original": "HTMLCalciteOptionElement",
            "resolved": "HTMLCalciteOptionElement",
            "references": {
              "HTMLCalciteOptionElement": {
                "location": "global",
                "id": "global::HTMLCalciteOptionElement"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The component's selected option `HTMLElement`.",
          "docsTags": [
            {
              "name": "readonly"
            }
          ],
          "values": [
            {
              "type": "HTMLCalciteOptionElement"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "status",
          "type": "\"idle\" | \"invalid\" | \"valid\"",
          "complexType": {
            "original": "Status",
            "resolved": "\"idle\" | \"invalid\" | \"valid\"",
            "references": {
              "Status": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Status"
              }
            }
          },
          "mutable": false,
          "attr": "status",
          "reflectToAttr": true,
          "docs": "Specifies the status of the input field, which determines message and icons.",
          "docsTags": [],
          "default": "\"idle\"",
          "values": [
            {
              "value": "idle",
              "type": "string"
            },
            {
              "value": "invalid",
              "type": "string"
            },
            {
              "value": "valid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validationIcon",
          "type": "boolean | string",
          "complexType": {
            "original": "string | boolean",
            "resolved": "boolean | string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-icon",
          "reflectToAttr": true,
          "docs": "Specifies the validation icon to display under the component.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validationMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-message",
          "reflectToAttr": false,
          "docs": "Specifies the validation message to display under the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's `selectedOption` value.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "\"auto\" | \"full\" | \"half\"",
          "complexType": {
            "original": "Width",
            "resolved": "\"auto\" | \"full\" | \"half\"",
            "references": {
              "Width": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Width"
              }
            }
          },
          "mutable": false,
          "attr": "width",
          "reflectToAttr": true,
          "docs": "Specifies the width of the component.",
          "docsTags": [],
          "default": "\"auto\"",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "half",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteSelectChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the `selectedOption` changes.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteInternalOptionChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalOptionGroupChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--calcite-select-font-size",
          "annotation": "prop",
          "docs": "The font size of `calcite-option`s in the component."
        },
        {
          "name": "--calcite-select-spacing",
          "annotation": "prop",
          "docs": "The padding around the selected option text."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-option`s."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon",
        "calcite-input-message"
      ],
      "dependencyGraph": {
        "calcite-select": [
          "calcite-icon",
          "calcite-input-message"
        ],
        "calcite-input-message": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/sheet/sheet.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-sheet",
      "readme": "# calcite-sheet\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "Basic": "```html\n<calcite-sheet open label=\"libero nunc\" position=\"inline-start\">\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n    aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n    Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur\n    sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  </p>\n</calcite-sheet>\n```\n",
        "Open": "To open a sheet, add the `open` prop. Once the opening animation is complete, the `calciteSheetOpen` event will be fired.\n\nTo close the sheet, simply remove the attribute. This will run your before close method (if provided, see below) and fire the `calciteSheetClose` event after the animation and teardown is complete.\n\n```html\n<calcite-sheet open\n  >Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et\n  dolore</calcite-sheet\n>\n```\n",
        "Panel": "```html\n<calcite-sheet open label=\"libero nunc\" position=\"inline-start\">\n  <calcite-panel closable heading=\"Ultrices neque\"\n    ><p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n      magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n      consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n      Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n    </p>\n    <calcite-button slot=\"footer\" width=\"half\" appearance=\"outline\">tincidunt lobortis</calcite-button>\n    <calcite-button slot=\"footer\" width=\"half\" appearance=\"outline\">amet porttitor</calcite-button>\n  </calcite-panel>\n  <script>\n    document.addEventListener(\"calcitePanelClose\", () => {\n      document.querySelector(\"calcite-sheet\").open = false;\n    });\n  </script>\n</calcite-sheet>\n```\n",
        "Reacting-before-close": "If you'd like to perform some actions prior to closing (ie. warning users they will lose their changes) you can pass a function to the `beforeClose` property. This method will be called prior to close and should return a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise):\n\n```js\nfunction beforeClose() {\n  return new Promise((resolve) => {\n    // do something async\n    resolve(); // this will trigger the close animation\n  });\n}\n\nconst sheet = document.getElementById(\"my-sheet\");\nsheet.beforeClose = beforeClose;\n```\n"
      },
      "props": [
        {
          "name": "beforeClose",
          "type": "(el: HTMLCalciteSheetElement) => Promise<void>",
          "complexType": {
            "original": "(el: HTMLCalciteSheetElement) => Promise<void>",
            "resolved": "(el: HTMLCalciteSheetElement) => Promise<void>",
            "references": {
              "HTMLCalciteSheetElement": {
                "location": "global",
                "id": "global::HTMLCalciteSheetElement"
              },
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Passes a function to run before the component closes.",
          "docsTags": [
            {
              "name": "returns"
            }
          ],
          "values": [
            {
              "type": "(el: HTMLCalciteSheetElement) => Promise<void>"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "displayMode",
          "type": "\"float\" | \"overlay\"",
          "complexType": {
            "original": "DisplayMode",
            "resolved": "\"float\" | \"overlay\"",
            "references": {
              "DisplayMode": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/sheet/interfaces.ts::DisplayMode"
              }
            }
          },
          "mutable": false,
          "attr": "display-mode",
          "reflectToAttr": true,
          "docs": "Specifies the display mode - `\"float\"` (content is separated detached),\nor `\"overlay\"` (displays on top of center content).",
          "docsTags": [],
          "default": "\"overlay\"",
          "values": [
            {
              "value": "float",
              "type": "string"
            },
            {
              "value": "overlay",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "escapeDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "escape-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, disables the default close on escape behavior.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focusTrapDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "focus-trap-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, prevents focus trapping.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heightScale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "height-scale",
          "reflectToAttr": true,
          "docs": "When `position` is `\"block-start\"` or `\"block-end\"`, specifies the height of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Specifies the label of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "When `true`, displays and positions the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outsideCloseDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outside-close-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, disables the closing of the component when clicked outside.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"block-end\" | \"block-start\" | \"inline-end\" | \"inline-start\"",
          "complexType": {
            "original": "LogicalFlowPosition",
            "resolved": "\"block-end\" | \"block-start\" | \"inline-end\" | \"inline-start\"",
            "references": {
              "LogicalFlowPosition": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::LogicalFlowPosition"
              }
            }
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": true,
          "docs": "Determines where the component will be positioned.",
          "docsTags": [],
          "default": "\"inline-start\"",
          "values": [
            {
              "value": "block-end",
              "type": "string"
            },
            {
              "value": "block-start",
              "type": "string"
            },
            {
              "value": "inline-end",
              "type": "string"
            },
            {
              "value": "inline-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "widthScale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "width-scale",
          "reflectToAttr": true,
          "docs": "When `position` is `\"inline-start\"` or `\"inline-end\"`, specifies the width of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component's \"close\" button - the first focusable item.",
          "docsTags": []
        },
        {
          "name": "updateFocusTrapElements",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "updateFocusTrapElements() => Promise<void>",
          "parameters": [],
          "docs": "Updates the element(s) that are used within the focus-trap of the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteSheetBeforeClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is requested to be closed and before the closing transition begins.",
          "docsTags": []
        },
        {
          "event": "calciteSheetBeforeOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
          "docsTags": []
        },
        {
          "event": "calciteSheetClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is closed and animation is complete.",
          "docsTags": []
        },
        {
          "event": "calciteSheetOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is open and animation is complete.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--calcite-sheet-height",
          "annotation": "prop",
          "docs": "When `position` is `\"block-start\"` or `\"block-end\"`, specifies the height of the component."
        },
        {
          "name": "--calcite-sheet-max-height",
          "annotation": "prop",
          "docs": "When `position` is `\"block-start\"` or `\"block-end\"`, specifies the maximum height of the component."
        },
        {
          "name": "--calcite-sheet-max-width",
          "annotation": "prop",
          "docs": "When `position` is `\"inline-start\"` or `\"inline-end\"`, specifies the maximum width of the component."
        },
        {
          "name": "--calcite-sheet-min-height",
          "annotation": "prop",
          "docs": "When `position` is `\"block-start\"` or `\"block-end\"`, specifies the minimum height of the component."
        },
        {
          "name": "--calcite-sheet-min-width",
          "annotation": "prop",
          "docs": "When `position` is `\"inline-start\"` or `\"inline-end\"`, specifies the minimum width of the component."
        },
        {
          "name": "--calcite-sheet-scrim-background",
          "annotation": "prop",
          "docs": "Specifies the background color of the sheet scrim."
        },
        {
          "name": "--calcite-sheet-width",
          "annotation": "prop",
          "docs": "When `position` is `\"inline-start\"` or `\"inline-end\"`, specifies the width of the component."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-scrim"
      ],
      "dependencyGraph": {
        "calcite-sheet": [
          "calcite-scrim"
        ],
        "calcite-scrim": [
          "calcite-loader"
        ]
      }
    },
    {
      "filePath": "src/components/shell/shell.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-shell",
      "readme": "# calcite-shell\n\nThe `calcite-shell` component is used for application layout management. It is a container for the view as well as other calcite components like `calcite-shell-panel` and `calcite-tip-manager`.\n\n**Note:** `calcite-shell` supports tablet as the smallest screen size.\n",
      "docs": "The `calcite-shell` component is used for application layout management. It is a container for the view as well as other calcite components like `calcite-shell-panel` and `calcite-tip-manager`.\n\n**Note:** `calcite-shell` supports tablet as the smallest screen size.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding custom content. This content will appear between any leading and trailing panels added to the component, such as a map."
        },
        {
          "name": "slot",
          "text": "header - A slot for adding header content. This content will be positioned at the top of the component."
        },
        {
          "name": "slot",
          "text": "footer - A slot for adding footer content. This content will be positioned at the bottom of the component."
        },
        {
          "name": "slot",
          "text": "panel-start - A slot for adding the starting `calcite-shell-panel`."
        },
        {
          "name": "slot",
          "text": "panel-end - A slot for adding the ending `calcite-shell-panel`."
        },
        {
          "name": "slot",
          "text": "panel-top - A slot for adding the top `calcite-shell-center-row`."
        },
        {
          "name": "slot",
          "text": "panel-bottom - A slot for adding the bottom `calcite-shell-center-row`."
        },
        {
          "name": "slot",
          "text": "center-row - [Deprecated] Use the `\"panel-bottom\"` slot instead. A slot for adding the bottom `calcite-shell-center-row`."
        },
        {
          "name": "slot",
          "text": "modals - A slot for adding `calcite-modal` components. When placed in this slot, the modal position will be constrained to the extent of the shell."
        },
        {
          "name": "slot",
          "text": "alerts - A slot for adding `calcite-alert` components. When placed in this slot, the alert position will be constrained to the extent of the shell."
        },
        {
          "name": "slot",
          "text": "sheets - A slot for adding `calcite-sheet` components. When placed in this slot, the sheet position will be constrained to the extent of the shell."
        }
      ],
      "usage": {
        "Advanced": "Renders a shell with leading and trailing floating panels, action bar/pad, block, flow, tip manager, footer.\n\n```html\n<calcite-shell>\n  <calcite-shell-panel slot=\"panel-start\" position=\"start\" display-mode=\"float\">\n    <calcite-action-bar slot=\"action-bar\">\n      <calcite-action-group label=\"Manage item\">\n        <calcite-action text=\"Add\" icon=\"plus\"></calcite-action>\n        <calcite-action text=\"Save\" disabled icon=\"save\"></calcite-action>\n        <calcite-action text=\"Layers\" active indicator icon=\"layers\"></calcite-action>\n      </calcite-action-group>\n    </calcite-action-bar>\n    <calcite-block collapsible heading=\"Modes of transportation\" summary=\"This is the primary.\">\n      <calcite-block-content>\n        <calcite-action text=\"Driving\" text-enabled indicator icon=\"car\"></calcite-action>\n        <calcite-action text=\"Biking\" text-enabled icon=\"biking\"></calcite-action>\n        <calcite-action text=\"Flying\" text-enabled icon=\"plane\"></calcite-action>\n      </calcite-block-content>\n    </calcite-block>\n    <calcite-block collapsible heading=\"Activities\" summary=\"Additional content.\">\n      <calcite-block-content>\n        <calcite-action text=\"Running\" text-enabled indicator icon=\"running\"></calcite-action>\n        <calcite-action text=\"Painting\" text-enabled icon=\"paintBucket\"></calcite-action>\n        <calcite-action text=\"Drone Flying\" text-enabled icon=\"droneFlyingWing\"></calcite-action>\n      </calcite-block-content>\n    </calcite-block>\n  </calcite-shell-panel>\n\n  <calcite-shell-panel slot=\"panel-end\" position=\"end\" display-mode=\"float\" height-scale=\"l\">\n    <calcite-action-bar slot=\"action-bar\">\n      <calcite-action-group label=\"Manage item\">\n        <calcite-action text=\"Add\" active icon=\"plus\"></calcite-action>\n        <calcite-action text=\"Save\" disabled icon=\"save\"></calcite-action>\n        <calcite-action text=\"Layers\" icon=\"layers\"></calcite-action>\n      </calcite-action-group>\n      <calcite-action-group label=\"Item types\">\n        <calcite-action text=\"Add\" icon=\"file\"></calcite-action>\n        <calcite-action text=\"Save\" disabled icon=\"folder\"></calcite-action>\n      </calcite-action-group>\n      <calcite-action slot=\"actions-end\" text=\"Tips\" icon=\"lightbulb\"></calcite-action>\n    </calcite-action-bar>\n    <calcite-flow>\n      <calcite-flow-item heading=\"Layer settings\">\n        <calcite-block collapsible open heading=\"Contextual Content\" summary=\"Select goodness\">\n          <calcite-value-list multiple filter-enabled>\n            <calcite-value-list-item\n              label=\"2018 Population Density (Esri)\"\n              description=\"{POPDENS_CY}\"\n              value=\"POPDENS_CY\"\n            >\n              <calcite-action slot=\"actions-end\" icon=\"person\"></calcite-action>\n            </calcite-value-list-item>\n            <calcite-value-list-item\n              label=\"2018 Population Density [Updated]\"\n              description=\"{POPDENS_CY}\"\n              value=\"POPDENS_CY2\"\n            >\n              <calcite-action slot=\"actions-end\" icon=\"person2\"></calcite-action>\n            </calcite-value-list-item>\n            <calcite-value-list-item label=\"2018 Total Households (Esri)\" description=\"{TOTHH_CY}\" value=\"TOTHH_CY\">\n              <calcite-action slot=\"actions-end\" icon=\"home\"></calcite-action>\n            </calcite-value-list-item>\n          </calcite-value-list>\n        </calcite-block>\n      </calcite-flow-item>\n    </calcite-flow>\n  </calcite-shell-panel>\n  <calcite-tip-manager slot=\"center-row\">\n    <calcite-tip heading=\"Be cautious of wildlife\">\n      <img slot=\"thumbnail\" src=\"https://placebear.com/400/200\" alt=\"\" />\n      <p>\n        Lorem, ipsum dolor sit amet consectetur adipisicing elit. Fugiat, reiciendis est quisquam dolor deserunt saepe\n        corrupti temporibus a totam adipisci accusantium ex non quidem et veritatis asperiores molestias eligendi\n        provident magni nostrum, vero, laboriosam cupiditate!\n      </p>\n    </calcite-tip>\n  </calcite-tip-manager>\n  <footer slot=\"footer\">\n    <calcite-action-bar slot=\"action-bar\" layout=\"horizontal\">\n      <calcite-action-group label=\"Manage item\">\n        <calcite-action text=\"Add\" active icon=\"question\"></calcite-action>\n        <calcite-action text=\"Settings\" icon=\"gear\"></calcite-action>\n      </calcite-action-group>\n    </calcite-action-bar>\n  </footer>\n</calcite-shell>\n```\n",
        "Basic": "Renders a basic shell with a header and a footer.\n\n```html\n<calcite-shell>\n  <div slot=\"header\">\n    <header>\n      <h2>Shell Header: My App</h2>\n    </header>\n  </div>\n  <p>Shell Content</p>\n  <!-- insert map or fillable content here -->\n  <footer slot=\"footer\">Footer</footer>\n</calcite-shell>\n```\n",
        "With-panel-and-action-bar": "Renders a single panel with actions in an action bar.\n\n```html\n<calcite-shell>\n  <calcite-shell-panel slot=\"panel-start\" position=\"start\">\n    <img src=\"https://via.placeholder.com/300x200\" alt=\"placeholder\" />\n    <calcite-action-bar slot=\"action-bar\">\n      <calcite-action text=\"Add\" active icon=\"plus\"></calcite-action>\n      <calcite-action text=\"Save\" disabled icon=\"save\"></calcite-action>\n      <calcite-action text=\"Layers\" icon=\"layers\"></calcite-action>\n    </calcite-action-bar>\n  </calcite-shell-panel>\n</calcite-shell>\n```\n",
        "With-panels": "Renders a shell with a header and panels on the left and right sides of the app.\n\n```html\n<calcite-shell>\n  <div slot=\"header\">\n    <header>\n      <h2>Shell Header: My App</h2>\n    </header>\n  </div>\n  <calcite-shell-panel slot=\"panel-start\" position=\"start\">\n    <calcite-action-bar slot=\"action-bar\">\n      <calcite-action-group label=\"Manage item\">\n        <calcite-action text=\"Add\" icon=\"plus\"></calcite-action>\n        <calcite-action text=\"Save\" disabled icon=\"save\"></calcite-action>\n        <calcite-action text=\"Layers\" active indicator icon=\"layers\"></calcite-action>\n      </calcite-action-group>\n    </calcite-action-bar>\n  </calcite-shell-panel>\n  <calcite-shell-panel slot=\"panel-end\" position=\"end\">\n    <calcite-action-bar slot=\"action-bar\">\n      <calcite-action-group label=\"Manage item\">\n        <calcite-action text=\"Add\" active icon=\"plus\"></calcite-action>\n        <calcite-action text=\"Save\" disabled icon=\"save\"></calcite-action>\n        <calcite-action text=\"Layers\" icon=\"layers\"></calcite-action>\n      </calcite-action-group>\n      <calcite-action-group label=\"Item types\">\n        <calcite-action text=\"Add\" icon=\"file\"></calcite-action>\n        <calcite-action text=\"Save\" disabled icon=\"folder\"></calcite-action>\n      </calcite-action-group>\n      <calcite-action slot=\"actions-end\" text=\"Tips\" icon=\"lightbulb\"></calcite-action>\n    </calcite-action-bar>\n  </calcite-shell-panel>\n  <calcite-shell-center-row slot=\"center-row\" position=\"end\" height-scale=\"m\">\n    <img src=\"https://placebear.com/1000/700\" alt=\"\" />\n  </calcite-shell-center-row>\n  <p>Shell Content</p>\n  <!-- insert map or fillable content here -->\n</calcite-shell>\n```\n"
      },
      "props": [
        {
          "name": "contentBehind",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "content-behind",
          "reflectToAttr": true,
          "docs": "Positions the center content behind any `calcite-shell-panel`s.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "calciteInternalShellPanelResizeStart",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalShellPanelResizeEnd",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--calcite-shell-tip-spacing",
          "annotation": "prop",
          "docs": "The left and right spacing of the `calcite-tip-manager` when slotted in the component."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding custom content. This content will appear between any leading and trailing panels added to the component, such as a map."
        },
        {
          "name": "alerts",
          "docs": "A slot for adding `calcite-alert` components. When placed in this slot, the alert position will be constrained to the extent of the shell."
        },
        {
          "name": "center-row",
          "docs": "[Deprecated] Use the `\"panel-bottom\"` slot instead. A slot for adding the bottom `calcite-shell-center-row`."
        },
        {
          "name": "footer",
          "docs": "A slot for adding footer content. This content will be positioned at the bottom of the component."
        },
        {
          "name": "header",
          "docs": "A slot for adding header content. This content will be positioned at the top of the component."
        },
        {
          "name": "modals",
          "docs": "A slot for adding `calcite-modal` components. When placed in this slot, the modal position will be constrained to the extent of the shell."
        },
        {
          "name": "panel-bottom",
          "docs": "A slot for adding the bottom `calcite-shell-center-row`."
        },
        {
          "name": "panel-end",
          "docs": "A slot for adding the ending `calcite-shell-panel`."
        },
        {
          "name": "panel-start",
          "docs": "A slot for adding the starting `calcite-shell-panel`."
        },
        {
          "name": "panel-top",
          "docs": "A slot for adding the top `calcite-shell-center-row`."
        },
        {
          "name": "sheets",
          "docs": "A slot for adding `calcite-sheet` components. When placed in this slot, the sheet position will be constrained to the extent of the shell."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/shell-center-row/shell-center-row.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-shell-center-row",
      "readme": "# calcite-shell-center-row\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding content to the `calcite-shell-panel`."
        },
        {
          "name": "slot",
          "text": "action-bar - A slot for adding a `calcite-action-bar` to the `calcite-shell-panel`."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "detached",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "detached",
          "reflectToAttr": true,
          "docs": "When `true`, the content area displays like a floating panel.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heightScale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "height-scale",
          "reflectToAttr": true,
          "docs": "Specifies the maximum height of the component.",
          "docsTags": [],
          "default": "\"s\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"end\" | \"start\"",
          "complexType": {
            "original": "Position",
            "resolved": "\"end\" | \"start\"",
            "references": {
              "Position": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Position"
              }
            }
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": true,
          "docs": "Specifies the component's position. Will be flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "default": "\"end\"",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding content to the `calcite-shell-panel`."
        },
        {
          "name": "action-bar",
          "docs": "A slot for adding a `calcite-action-bar` to the `calcite-shell-panel`."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/shell-panel/shell-panel.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-shell-panel",
      "readme": "# calcite-shell-panel\n\nThe `calcite-shell-panel` is a child component of `calcite-shell` used as a container to display other components like `calcite-block` and `calcite-flow`.\n",
      "docs": "The `calcite-shell-panel` is a child component of `calcite-shell` used as a container to display other components like `calcite-block` and `calcite-flow`.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding custom content."
        },
        {
          "name": "slot",
          "text": "action-bar - A slot for adding a `calcite-action-bar` to the component."
        }
      ],
      "usage": {
        "Basic": "Renders a basic shell panel with text content.\n\n```html\n<calcite-shell-panel>\n  <p>Primary Content</p>\n</calcite-shell-panel>\n```\n",
        "With-action-bar": "Renders a panel with an action bar.\n\n```html\n<calcite-shell-panel>\n  <calcite-action-bar slot=\"action-bar\">\n    <calcite-action text=\"Add\" icon=\"plus\"></calcite-action>\n    <calcite-action text=\"Save\" icon=\"save\"></calcite-action>\n    <calcite-action text=\"Layers\" icon=\"layers\"></calcite-action>\n  </calcite-action-bar>\n</calcite-shell-panel>\n```\n",
        "With-custom-element": "Add `calcite-match-height` to a wrapping element to ensure proper height, scrolling, and sticky behavior (header, footer, fab). Note that multiple levels of nesting is not supported.\n\n```html\n<calcite-shell-panel>\n  <calcite-action-bar slot=\"action-bar\">\n    <calcite-action text=\"Add\" icon=\"plus\"></calcite-action>\n    <calcite-action text=\"Save\" icon=\"save\"></calcite-action>\n    <calcite-action text=\"Layers\" icon=\"layers\"></calcite-action>\n  </calcite-action-bar>\n  <your-custom-element class=\"calcite-match-height\">\n    <calcite-panel> <img src=\"https://placebear.com/g/600/600\" alt=\"\" /> </calcite-panel>\n  </your-custom-element>\n</calcite-shell-panel>\n```\n",
        "With-flow": "```html\n<calcite-shell-panel>\n  <calcite-action-bar slot=\"action-bar\">\n    <calcite-action text=\"Add\" icon=\"plus\"></calcite-action>\n    <calcite-action text=\"Save\" icon=\"save\"></calcite-action>\n    <calcite-action text=\"Layers\" icon=\"layers\"></calcite-action>\n  </calcite-action-bar>\n  <calcite-flow>\n    <calcite-flow-item> <img src=\"https://placebear.com/g/600/600\" alt=\"\" /> </calcite-flow-item>\n    <calcite-flow-item> <img src=\"https://placebear.com/g/500/500\" alt=\"\" /> </calcite-flow-item>\n  </calcite-flow>\n</calcite-shell-panel>\n```\n",
        "With-panel": "```html\n<calcite-shell-panel>\n  <calcite-action-bar slot=\"action-bar\">\n    <calcite-action text=\"Add\" icon=\"plus\"></calcite-action>\n    <calcite-action text=\"Save\" icon=\"save\"></calcite-action>\n    <calcite-action text=\"Layers\" icon=\"layers\"></calcite-action>\n  </calcite-action-bar>\n  <calcite-panel> <img src=\"https://placebear.com/g/600/600\" alt=\"\" /> </calcite-panel>\n</calcite-shell-panel>\n```\n"
      },
      "props": [
        {
          "name": "collapsed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "collapsed",
          "reflectToAttr": true,
          "docs": "When `true`, hides the component's content area.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "detached",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "detached",
          "reflectToAttr": true,
          "docs": "When `true`, the content area displays like a floating panel.",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "Use `displayMode` instead."
            }
          ],
          "default": "false",
          "deprecation": "Use `displayMode` instead.",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "detachedHeightScale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "detached-height-scale",
          "reflectToAttr": true,
          "docs": "When `displayMode` is `float`, specifies the maximum height of the component.",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "Use `heightScale` instead."
            }
          ],
          "deprecation": "Use `heightScale` instead.",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "displayMode",
          "type": "\"dock\" | \"float\" | \"overlay\"",
          "complexType": {
            "original": "DisplayMode",
            "resolved": "\"dock\" | \"float\" | \"overlay\"",
            "references": {
              "DisplayMode": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/shell-panel/interfaces.d.ts::DisplayMode"
              }
            }
          },
          "mutable": false,
          "attr": "display-mode",
          "reflectToAttr": true,
          "docs": "Specifies the display mode of the component, where:\n\n`\"dock\"` displays at full height adjacent to center content,\n\n`\"overlay\"` displays at full height on top of center content, and\n\n`\"float\"` does not display at full height with content separately detached from `calcite-action-bar` on top of center content.",
          "docsTags": [],
          "default": "\"dock\"",
          "values": [
            {
              "value": "dock",
              "type": "string"
            },
            {
              "value": "float",
              "type": "string"
            },
            {
              "value": "overlay",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heightScale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "height-scale",
          "reflectToAttr": true,
          "docs": "When `layout` is `horizontal`, specifies the maximum height of the component.",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "Extract<\"horizontal\" | \"vertical\", Layout>",
            "resolved": "\"horizontal\" | \"vertical\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Layout": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Layout"
              }
            }
          },
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "The direction of the component.",
          "docsTags": [],
          "default": "\"vertical\"",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ resize?: string; }",
          "complexType": {
            "original": "Partial<ShellPanelMessages>",
            "resolved": "{ resize?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "ShellPanelMessages": {
                "location": "import",
                "path": "./assets/shell-panel/t9n",
                "id": "src/components/shell-panel/assets/shell-panel/t9n/index.d.ts::ShellPanelMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ resize?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"end\" | \"start\"",
          "complexType": {
            "original": "Position",
            "resolved": "\"end\" | \"start\"",
            "references": {
              "Position": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Position"
              }
            }
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": true,
          "docs": "Specifies the component's position. Will be flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "default": "\"start\"",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "resizable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "resizable",
          "reflectToAttr": true,
          "docs": "When `true` and `displayMode` is not `float`, the component's content area is resizable.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "widthScale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "width-scale",
          "reflectToAttr": true,
          "docs": "When `layout` is `vertical`, specifies the width of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-shell-panel-detached-max-height",
          "annotation": "prop",
          "docs": "[Deprecated] Use the `heightScale` property instead. When `displayMode` is `float`, specifies the maximum height of the component."
        },
        {
          "name": "--calcite-shell-panel-height",
          "annotation": "prop",
          "docs": "When `layout` is `horizontal`, or `layout` is `vertical` and `displayMode` is `float`, specifies the height of the component."
        },
        {
          "name": "--calcite-shell-panel-max-height",
          "annotation": "prop",
          "docs": "When `layout` is `horizontal`, or `layout` is `vertical` and `displayMode` is `float`, specifies the maximum height of the component."
        },
        {
          "name": "--calcite-shell-panel-max-width",
          "annotation": "prop",
          "docs": "Specifies the maximum width of the component."
        },
        {
          "name": "--calcite-shell-panel-min-height",
          "annotation": "prop",
          "docs": "When `layout` is `horizontal`, or `layout` is `vertical` and `displayMode` is `float`, specifies the minimum height of the component."
        },
        {
          "name": "--calcite-shell-panel-min-width",
          "annotation": "prop",
          "docs": "Specifies the minimum width of the component."
        },
        {
          "name": "--calcite-shell-panel-width",
          "annotation": "prop",
          "docs": "Specifies the width of the component."
        },
        {
          "name": "--calcite-shell-panel-z-index",
          "annotation": "prop",
          "docs": "Specifies the z-index value for the component."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding custom content."
        },
        {
          "name": "action-bar",
          "docs": "A slot for adding a `calcite-action-bar` to the component."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/slider/slider.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-slider",
      "readme": "# calcite-slider\n\nRange selection component for selecting single or multiple numeric values inside a given range.\n",
      "docs": "Range selection component for selecting single or multiple numeric values inside a given range.",
      "docsTags": [],
      "usage": {
        "Basic": "```html\n<calcite-slider min=\"1\" max=\"100\" value=\"50\" step=\"1\"></calcite-slider>\n```\n",
        "Two-handles": "If you'd like to allow an upper and lower value selection (two handles), you can set `min-value` and `max-value` rather than `value`. Note: these are mutually exclusive.\n\n```html\n<calcite-slider\n  min=\"1\"\n  max=\"100\"\n  min-value=\"50\"\n  max-value=\"85\"\n  step=\"1\"\n  min-label=\"Temperature (lower)\"\n  max-label=\"Temperature (upper)\"\n></calcite-slider>\n```\n"
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "form",
          "reflectToAttr": true,
          "docs": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "groupSeparator",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "group-separator",
          "reflectToAttr": true,
          "docs": "When `true`, number values are displayed with a group separator corresponding to the language and country format.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasHistogram",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "has-histogram",
          "reflectToAttr": true,
          "docs": "When `true`, indicates a histogram is present.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "histogram",
          "type": "Point[]",
          "complexType": {
            "original": "DataSeries",
            "resolved": "Point[]",
            "references": {
              "DataSeries": {
                "location": "import",
                "path": "../graph/interfaces",
                "id": "src/components/graph/interfaces.ts::DataSeries"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "A list of the histogram's x,y coordinates within the component's `min` and `max`. Displays above the component's track.",
          "docsTags": [
            {
              "name": "see",
              "text": "[DataSeries](https://github.com/Esri/calcite-design-system/blob/main/src/components/graph/interfaces.ts#L5)"
            }
          ],
          "values": [
            {
              "type": "Point[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "histogramStops",
          "type": "ColorStop[]",
          "complexType": {
            "original": "ColorStop[]",
            "resolved": "ColorStop[]",
            "references": {
              "ColorStop": {
                "location": "import",
                "path": "../graph/interfaces",
                "id": "src/components/graph/interfaces.ts::ColorStop"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "A set of single color stops for a histogram, sorted by offset ascending.",
          "docsTags": [],
          "values": [
            {
              "type": "ColorStop[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelHandles",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-handles",
          "reflectToAttr": true,
          "docs": "When `true`, displays label handles with their numeric value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelTicks",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-ticks",
          "reflectToAttr": true,
          "docs": "When `true` and `ticks` is specified, displays label tick marks with their numeric value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": true,
          "docs": "The component's maximum selectable value.",
          "docsTags": [],
          "default": "100",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "max-label",
          "reflectToAttr": false,
          "docs": "For multiple selections, the accessible name for the second handle, such as `\"Temperature, upper bound\"`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxValue",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "max-value",
          "reflectToAttr": false,
          "docs": "For multiple selections, the component's upper value.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": true,
          "docs": "The component's minimum selectable value.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "min-label",
          "reflectToAttr": false,
          "docs": "Accessible name for first (or only) handle, such as `\"Temperature, lower bound\"`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minValue",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "min-value",
          "reflectToAttr": false,
          "docs": "For multiple selections, the component's lower value.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mirrored",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "mirrored",
          "reflectToAttr": true,
          "docs": "When `true`, the slider will display values from high to low.\n\nNote that this value will be ignored if the slider has an associated histogram.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberingSystem",
          "type": "\"arab\" | \"arabext\" | \"latn\"",
          "complexType": {
            "original": "NumberingSystem",
            "resolved": "\"arab\" | \"arabext\" | \"latn\"",
            "references": {
              "NumberingSystem": {
                "location": "import",
                "path": "../../utils/locale",
                "id": "src/utils/locale.ts::NumberingSystem"
              }
            }
          },
          "mutable": false,
          "attr": "numbering-system",
          "reflectToAttr": false,
          "docs": "Specifies the Unicode numeral system used by the component for localization.",
          "docsTags": [],
          "values": [
            {
              "value": "arab",
              "type": "string"
            },
            {
              "value": "arabext",
              "type": "string"
            },
            {
              "value": "latn",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pageStep",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "page-step",
          "reflectToAttr": true,
          "docs": "Specifies the interval to move with the page up, or page down keys.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "precise",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "precise",
          "reflectToAttr": true,
          "docs": "When `true`, sets a finer point for handles.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "When `true`, the component must have a value in order for the form to submit.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "snap",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "snap",
          "reflectToAttr": true,
          "docs": "When `true`, enables snap selection in coordination with `step` via a mouse.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "step",
          "reflectToAttr": true,
          "docs": "Specifies the interval to move with the up, or down keys.",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "ticks",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "ticks",
          "reflectToAttr": true,
          "docs": "Displays tick marks on the number line at a specified interval.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | number[]",
          "complexType": {
            "original": "null | number | number[]",
            "resolved": "number | number[]",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "The component's value.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "number[]"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteSliderChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the thumb is released on the component.\n\nNote: To constantly listen to the drag event,\nuse `calciteSliderInput` instead.",
          "docsTags": []
        },
        {
          "event": "calciteSliderInput",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires on all updates to the component.\n\nNote: Fires frequently during drag. To perform\nexpensive operations consider using a debounce or throttle to avoid\nlocking up the main thread.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "pointerdown",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-graph"
      ],
      "dependencyGraph": {
        "calcite-slider": [
          "calcite-graph"
        ]
      }
    },
    {
      "filePath": "src/components/sortable-list/sortable-list.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-sortable-list",
      "readme": "# calcite-sortable-list\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding sortable items."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "canPull",
          "type": "(detail: DragDetail) => boolean",
          "complexType": {
            "original": "(detail: DragDetail) => boolean",
            "resolved": "(detail: DragDetail) => boolean",
            "references": {
              "DragDetail": {
                "location": "import",
                "path": "../../utils/sortableComponent",
                "id": "src/utils/sortableComponent.ts::DragDetail"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "When provided, the method will be called to determine whether the element can  move from the list.",
          "docsTags": [],
          "values": [
            {
              "type": "(detail: DragDetail) => boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "canPut",
          "type": "(detail: DragDetail) => boolean",
          "complexType": {
            "original": "(detail: DragDetail) => boolean",
            "resolved": "(detail: DragDetail) => boolean",
            "references": {
              "DragDetail": {
                "location": "import",
                "path": "../../utils/sortableComponent",
                "id": "src/utils/sortableComponent.ts::DragDetail"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "When provided, the method will be called to determine whether the element can be added from another list.",
          "docsTags": [],
          "values": [
            {
              "type": "(detail: DragDetail) => boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When true, disabled prevents interaction. This state shows items with lower opacity/grayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dragSelector",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "drag-selector",
          "reflectToAttr": true,
          "docs": "Specifies which items inside the element should be draggable.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "group",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "group",
          "reflectToAttr": true,
          "docs": "The list's group identifier.\n\nTo drag elements from one list into another, both lists must have the same group value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "handleSelector",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "handle-selector",
          "reflectToAttr": true,
          "docs": "The selector for the handle elements.",
          "docsTags": [],
          "default": "\"calcite-handle\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"grid\" | \"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "Layout",
            "resolved": "\"grid\" | \"horizontal\" | \"vertical\"",
            "references": {
              "Layout": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Layout"
              }
            }
          },
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "Indicates the horizontal or vertical orientation of the component.",
          "docsTags": [],
          "default": "\"vertical\"",
          "values": [
            {
              "value": "grid",
              "type": "string"
            },
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When true, content is waiting to be loaded. This state shows a busy indicator.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteListOrderChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Emitted when the order of the list has changed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteHandleNudge",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding sortable items."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/split-button/split-button.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-split-button",
      "readme": "# calcite-split-button\n\nThe calcite-split-button control is one that combines a button with a dropdown menu in order to provide a primary action along with one or more related secondary options / actions. It's useful for grouping related actions or options for users, while elevating a commonly-used or default action for easier access. Its inner content populates the control's dropdown menu, and is thus expected to be valid `calcite-dropdown` content.\n",
      "docs": "The calcite-split-button control is one that combines a button with a dropdown menu in order to provide a primary action along with one or more related secondary options / actions. It's useful for grouping related actions or options for users, while elevating a commonly-used or default action for easier access. Its inner content populates the control's dropdown menu, and is thus expected to be valid `calcite-dropdown` content.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-dropdown` content."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-split-button primary-icon-start=\"addLayer\" primary-text=\"Add a layer\">\n  <calcite-dropdown-group selection-mode=\"none\">\n    <calcite-dropdown-item>Trails</calcite-dropdown-item>\n    <calcite-dropdown-item>Lakes</calcite-dropdown-item>\n    <calcite-dropdown-item>Rivers</calcite-dropdown-item>\n  </calcite-dropdown-group>\n</calcite-split-button>\n```\n"
      },
      "props": [
        {
          "name": "appearance",
          "type": "\"outline\" | \"outline-fill\" | \"solid\" | \"transparent\"",
          "complexType": {
            "original": "Extract<\n    \"outline\" | \"outline-fill\" | \"solid\" | \"transparent\",\n    Appearance\n  >",
            "resolved": "\"outline\" | \"outline-fill\" | \"solid\" | \"transparent\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Appearance": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Appearance"
              }
            }
          },
          "mutable": false,
          "attr": "appearance",
          "reflectToAttr": true,
          "docs": "Specifies the appearance style of the component.",
          "docsTags": [],
          "default": "\"solid\"",
          "values": [
            {
              "value": "outline",
              "type": "string"
            },
            {
              "value": "outline-fill",
              "type": "string"
            },
            {
              "value": "solid",
              "type": "string"
            },
            {
              "value": "transparent",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dropdownIconType",
          "type": "\"caret\" | \"chevron\" | \"ellipsis\" | \"overflow\"",
          "complexType": {
            "original": "DropdownIconType",
            "resolved": "\"caret\" | \"chevron\" | \"ellipsis\" | \"overflow\"",
            "references": {
              "DropdownIconType": {
                "location": "import",
                "path": "../button/interfaces",
                "id": "src/components/button/interfaces.ts::DropdownIconType"
              }
            }
          },
          "mutable": false,
          "attr": "dropdown-icon-type",
          "reflectToAttr": true,
          "docs": "Specifies the icon used for the dropdown menu.",
          "docsTags": [],
          "default": "\"chevron\"",
          "values": [
            {
              "value": "caret",
              "type": "string"
            },
            {
              "value": "chevron",
              "type": "string"
            },
            {
              "value": "ellipsis",
              "type": "string"
            },
            {
              "value": "overflow",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dropdownLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "dropdown-label",
          "reflectToAttr": true,
          "docs": "Accessible name for the dropdown menu.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "kind",
          "type": "\"brand\" | \"danger\" | \"inverse\" | \"neutral\"",
          "complexType": {
            "original": "Extract<\"brand\" | \"danger\" | \"inverse\" | \"neutral\", Kind>",
            "resolved": "\"brand\" | \"danger\" | \"inverse\" | \"neutral\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Kind": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Kind"
              }
            }
          },
          "mutable": false,
          "attr": "kind",
          "reflectToAttr": true,
          "docs": "Specifies the kind of the component, which will apply to border and background, if applicable.",
          "docsTags": [],
          "default": "\"brand\"",
          "values": [
            {
              "value": "brand",
              "type": "string"
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "inverse",
              "type": "string"
            },
            {
              "value": "neutral",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When `true`, a busy indicator is displayed on the primary button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPositioning",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "OverlayPositioning",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {
              "OverlayPositioning": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::OverlayPositioning"
              }
            }
          },
          "mutable": false,
          "attr": "overlay-positioning",
          "reflectToAttr": true,
          "docs": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
          "docsTags": [],
          "default": "\"absolute\"",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "primaryIconEnd",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "primary-icon-end",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display at the end of the primary button.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "primaryIconFlipRtl",
          "type": "\"both\" | \"end\" | \"start\"",
          "complexType": {
            "original": "FlipContext",
            "resolved": "\"both\" | \"end\" | \"start\"",
            "references": {
              "FlipContext": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::FlipContext"
              }
            }
          },
          "mutable": false,
          "attr": "primary-icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "Displays the `primaryIconStart` and/or `primaryIconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "values": [
            {
              "value": "both",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "primaryIconStart",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "primary-icon-start",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display at the start of the primary button.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "primaryLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "primary-label",
          "reflectToAttr": true,
          "docs": "Accessible name for the primary button.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "primaryText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "primary-text",
          "reflectToAttr": true,
          "docs": "Text displayed in the primary button.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "\"auto\" | \"full\" | \"half\"",
          "complexType": {
            "original": "Width",
            "resolved": "\"auto\" | \"full\" | \"half\"",
            "references": {
              "Width": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Width"
              }
            }
          },
          "mutable": false,
          "attr": "width",
          "reflectToAttr": true,
          "docs": "Specifies the width of the component.",
          "docsTags": [],
          "default": "\"auto\"",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "half",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component's first focusable element.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteSplitButtonPrimaryClick",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the primary button is clicked.",
          "docsTags": []
        },
        {
          "event": "calciteSplitButtonSecondaryClick",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the dropdown menu is clicked.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-dropdown` content."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-button",
        "calcite-dropdown"
      ],
      "dependencyGraph": {
        "calcite-split-button": [
          "calcite-button",
          "calcite-dropdown"
        ],
        "calcite-button": [
          "calcite-loader",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/stack/stack.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-stack",
      "readme": "# calcite-stack\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding content."
        },
        {
          "name": "slot",
          "text": "actions-start - A slot for adding actionable `calcite-action` elements before the content of the component."
        },
        {
          "name": "slot",
          "text": "content-start - A slot for adding non-actionable elements before content of the component."
        },
        {
          "name": "slot",
          "text": "content-end - A slot for adding non-actionable elements after content of the component."
        },
        {
          "name": "slot",
          "text": "actions-end - A slot for adding actionable `calcite-action` elements after the content of the component."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-stack>\n  <calcite-action appearance=\"transparent\" text=\"banana\" icon=\"banana\" slot=\"actions-start\"></calcite-action>\n  <calcite-chip slot=\"content-start\" value=\"chip\" scale=\"s\" appearance=\"outline\">My great chip</calcite-chip>\n  Hello World\n  <calcite-avatar slot=\"content-end\" thumbnail=\"my-thumbnail.png\" scale=\"s\"> </calcite-avatar>\n  <calcite-action appearance=\"transparent\" text=\"Close\" icon=\"x\" slot=\"actions-end\"></calcite-action>\n</calcite-stack>\n```\n",
        "Disabled": "```html\n<calcite-stack disabled>\n  <calcite-action appearance=\"transparent\" text=\"banana\" icon=\"banana\" slot=\"actions-start\"></calcite-action>\n  Hello World\n  <calcite-avatar slot=\"content-end\" thumbnail=\"my-thumbnail.png\" scale=\"s\"> </calcite-avatar>\n  <calcite-chip slot=\"content-start\" value=\"chip\" scale=\"s\" appearance=\"outline\">My great chip</calcite-chip>\n  <calcite-action appearance=\"transparent\" text=\"Close\" icon=\"x\" slot=\"actions-end\"></calcite-action>\n</calcite-stack>\n```\n"
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, content interaction is prevented and displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-stack-padding-block",
          "annotation": "prop",
          "docs": "Specifies the block padding of the component's content."
        },
        {
          "name": "--calcite-stack-padding-inline",
          "annotation": "prop",
          "docs": "Specifies the inline padding of the component's content."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding content."
        },
        {
          "name": "actions-end",
          "docs": "A slot for adding actionable `calcite-action` elements after the content of the component."
        },
        {
          "name": "actions-start",
          "docs": "A slot for adding actionable `calcite-action` elements before the content of the component."
        },
        {
          "name": "content-end",
          "docs": "A slot for adding non-actionable elements after content of the component."
        },
        {
          "name": "content-start",
          "docs": "A slot for adding non-actionable elements before content of the component."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-list"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-list": [
          "calcite-stack"
        ]
      }
    },
    {
      "filePath": "src/components/stepper/stepper.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-stepper",
      "readme": "# calcite-stepper\n\nCalcite stepper can be used to present a stepper workflow to a user. It has configurable display options for layout (horizontal or vertical), and the ability to automatically render status icons, and step numbers.\n",
      "docs": "Calcite stepper can be used to present a stepper workflow to a user. It has configurable display options for layout (horizontal or vertical), and the ability to automatically render status icons, and step numbers.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-stepper-item` elements."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-stepper icon numbered id=\"my-example-stepper\">\n  <calcite-stepper-item heading=\"Choose Group\" description=\"Select a group to make changes\" complete>\n    <calcite-notice width=\"full\" open>\n      <div slot=\"title\">\n        In this step, choose a group from the list to make changes. Make sure to select the right one for your updates.\n      </div>\n    </calcite-notice>\n  </calcite-stepper-item>\n  <calcite-stepper-item heading=\"Compile Member List\" description=\"Add or remove members from the list\" complete>\n    <calcite-notice width=\"full\" open>\n      <div slot=\"title\">\n        Now, compile the member list. Add or remove members as needed. Ensure the list is accurate before proceeding to\n        the next step.\n      </div>\n    </calcite-notice>\n  </calcite-stepper-item>\n  <calcite-stepper-item heading=\"Set Member Properties\" description=\"Specify properties for each member\" selected>\n    <calcite-notice width=\"full\" open>\n      <div slot=\"title\">\n        In this step, set individual properties for each member. Customize their details to meet your requirements.\n      </div>\n    </calcite-notice>\n  </calcite-stepper-item>\n  <calcite-stepper-item heading=\"Confirm and Complete\" description=\"Review and finalize your changes\" disabled>\n    <calcite-notice width=\"full\" open>\n      <div slot=\"title\">\n        Review the changes you've made in the previous steps. Once confirmed, proceed to complete the process. This step\n        is currently disabled.\n      </div>\n    </calcite-notice>\n  </calcite-stepper-item>\n</calcite-stepper>\n```\n"
      },
      "props": [
        {
          "name": "icon",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "When `true`, displays a status icon in the `calcite-stepper-item` heading.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"horizontal\" | \"horizontal-single\" | \"vertical\"",
          "complexType": {
            "original": "StepperLayout",
            "resolved": "\"horizontal\" | \"horizontal-single\" | \"vertical\"",
            "references": {
              "StepperLayout": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/stepper/interfaces.ts::StepperLayout"
              }
            }
          },
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "Defines the layout of the component.",
          "docsTags": [],
          "default": "\"horizontal\"",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "horizontal-single",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ label?: string; previousStep?: string; nextStep?: string; }",
          "complexType": {
            "original": "Partial<StepperMessages>",
            "resolved": "{ label?: string; previousStep?: string; nextStep?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "StepperMessages": {
                "location": "import",
                "path": "./assets/stepper/t9n",
                "id": "src/components/stepper/assets/stepper/t9n/index.d.ts::StepperMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ label?: string; previousStep?: string; nextStep?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numbered",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "numbered",
          "reflectToAttr": true,
          "docs": "When `true`, displays the step number in the `calcite-stepper-item` heading.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberingSystem",
          "type": "\"arab\" | \"arabext\" | \"latn\"",
          "complexType": {
            "original": "NumberingSystem",
            "resolved": "\"arab\" | \"arabext\" | \"latn\"",
            "references": {
              "NumberingSystem": {
                "location": "import",
                "path": "../../utils/locale",
                "id": "src/utils/locale.ts::NumberingSystem"
              }
            }
          },
          "mutable": false,
          "attr": "numbering-system",
          "reflectToAttr": true,
          "docs": "Specifies the Unicode numeral system used by the component for localization.",
          "docsTags": [],
          "values": [
            {
              "value": "arab",
              "type": "string"
            },
            {
              "value": "arabext",
              "type": "string"
            },
            {
              "value": "latn",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedItem",
          "type": "HTMLCalciteStepperItemElement",
          "complexType": {
            "original": "HTMLCalciteStepperItemElement",
            "resolved": "HTMLCalciteStepperItemElement",
            "references": {
              "HTMLCalciteStepperItemElement": {
                "location": "global",
                "id": "global::HTMLCalciteStepperItemElement"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Specifies the component's selected item.",
          "docsTags": [
            {
              "name": "readonly"
            }
          ],
          "default": "null",
          "values": [
            {
              "type": "HTMLCalciteStepperItemElement"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "endStep",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "endStep() => Promise<void>",
          "parameters": [],
          "docs": "Set the last `calcite-stepper-item` as active.",
          "docsTags": []
        },
        {
          "name": "goToStep",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(step: number) => Promise<void>",
            "parameters": [
              {
                "name": "step",
                "type": "number",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "goToStep(step: number) => Promise<void>",
          "parameters": [
            {
              "name": "step",
              "type": "number",
              "docs": ""
            }
          ],
          "docs": "Set a specified `calcite-stepper-item` as active.",
          "docsTags": [
            {
              "name": "param",
              "text": "step"
            }
          ]
        },
        {
          "name": "nextStep",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "nextStep() => Promise<void>",
          "parameters": [],
          "docs": "Set the next `calcite-stepper-item` as active.",
          "docsTags": []
        },
        {
          "name": "prevStep",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "prevStep() => Promise<void>",
          "parameters": [],
          "docs": "Set the previous `calcite-stepper-item` as active.",
          "docsTags": []
        },
        {
          "name": "startStep",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "startStep() => Promise<void>",
          "parameters": [],
          "docs": "Set the first `calcite-stepper-item` as active.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteStepperItemChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the active `calcite-stepper-item` changes.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteInternalStepperItemKeyEvent",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalStepperItemRegister",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalStepperItemSelect",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalUserRequestedStepperItemSelect",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-stepper-item` elements."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-action"
      ],
      "dependencyGraph": {
        "calcite-stepper": [
          "calcite-action"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/stepper-item/stepper-item.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-stepper-item",
      "readme": "# calcite-stepper-item\n\nindividual `calcite-stepper-item` item\n",
      "docs": "individual `calcite-stepper-item` item",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding custom content."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "complete",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "complete",
          "reflectToAttr": true,
          "docs": "When `true`, the step has been completed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "A description for the component. Displays below the header text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "error",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "error",
          "reflectToAttr": true,
          "docs": "When `true`, the component contains an error that requires resolution from the user.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "The component header text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ complete?: string; previousStep?: string; nextStep?: string; }",
          "complexType": {
            "original": "Partial<StepperItemMessages>",
            "resolved": "{ complete?: string; previousStep?: string; nextStep?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "StepperItemMessages": {
                "location": "import",
                "path": "./assets/stepper-item/t9n",
                "id": "src/components/stepper-item/assets/stepper-item/t9n/index.d.ts::StepperItemMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ complete?: string; previousStep?: string; nextStep?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "When `true`, the component is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "calciteInternalStepperItemChange",
          "target": "body",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding custom content."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-stepper-item": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/switch/switch.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-switch",
      "readme": "# calcite-switch\n\n`calcite-switch` is used to toggle a value on or off.\n",
      "docs": "`calcite-switch` is used to toggle a value on or off.",
      "docsTags": [],
      "usage": {
        "Basic": "```html\n<label>\n  Off\n  <calcite-switch checked></calcite-switch>\n  On\n</label>\n```\n"
      },
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "When `true`, the component is checked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "form",
          "reflectToAttr": true,
          "docs": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's value.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteSwitchChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the `checked` value has changed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-block-section"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-block-section": [
          "calcite-switch"
        ]
      }
    },
    {
      "filePath": "src/components/tab/tab.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tab",
      "readme": "# calcite-tab\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding custom content."
        }
      ],
      "usage": {
        "Basic": "`calcite-tab` wraps the content you would like to appear when that tab is selected:\n\n```html\n<calcite-tab>My stuff!</calcite-tab>\n```\n"
      },
      "props": [
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "When `true`, the component's contents are selected.\n\nOnly one tab can be selected within the `calcite-tabs` parent.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tab",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tab",
          "reflectToAttr": true,
          "docs": "Specifies a unique name for the component.\n\nWhen specified, use the same value on the `calcite-tab-title`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getTabIndex",
          "returns": {
            "type": "Promise<number>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<number>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<number>"
          },
          "signature": "getTabIndex() => Promise<number>",
          "parameters": [],
          "docs": "Returns the index of the component item within the tab array.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "calciteInternalTabChange",
          "target": "body",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--calcite-tab-content-block-padding",
          "annotation": "prop",
          "docs": "Specifies the block padding of the component's content in the `default` slot."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding custom content."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-color-picker"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-color-picker": [
          "calcite-tab"
        ]
      }
    },
    {
      "filePath": "src/components/tab-nav/tab-nav.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tab-nav",
      "readme": "# calcite-tab-nav\n\nThe tab-nav groups several [calcite-tab-title](../tab-title) components and builds out the navigation. You can optionally use attibutes on the tab-nav to configure client side storage of the selected tab.\n",
      "docs": "The tab-nav groups several [calcite-tab-title](../tab-title) components and builds out the navigation. You can optionally use attibutes on the tab-nav to configure client side storage of the selected tab.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-tab-title`s."
        }
      ],
      "usage": {
        "Basic": "Tabs `scale` and `position` properties are inherited by it's child components, tab-nav and tab-title.\n\n```html\n<calcite-tabs scale=\"l\" position=\"bottom\">\n  <calcite-tab-nav>\n    <calcite-tab-title>Layers</calcite-tab-title>\n    <calcite-tab-title>Maps</calcite-tab-title>\n    <calcite-tab-title selected>Data</calcite-tab-title>\n  </calcite-tab-nav>\n</calcite-tabs>\n```\n"
      },
      "props": [
        {
          "name": "selectedTitle",
          "type": "HTMLCalciteTabTitleElement",
          "complexType": {
            "original": "HTMLCalciteTabTitleElement",
            "resolved": "HTMLCalciteTabTitleElement",
            "references": {
              "HTMLCalciteTabTitleElement": {
                "location": "global",
                "id": "global::HTMLCalciteTabTitleElement"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Specifies the component's selected `calcite-tab-title`.",
          "docsTags": [
            {
              "name": "readonly"
            }
          ],
          "default": "null",
          "values": [
            {
              "type": "HTMLCalciteTabTitleElement"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "storageId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "storage-id",
          "reflectToAttr": true,
          "docs": "Specifies the name when saving selected `calcite-tab` data to `localStorage`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "syncId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "sync-id",
          "reflectToAttr": true,
          "docs": "Specifies text to update multiple components to keep in sync if one changes.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteTabChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Emits when the selected `calcite-tab` changes.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteInternalTabsFocusPrevious",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalTabsFocusNext",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalTabsFocusFirst",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalTabsFocusLast",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalTabsActivate",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteTabsActivate",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalTabsClose",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalTabTitleRegister",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalTabChange",
          "target": "body",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalTabIconChanged",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-tab-title`s."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-color-picker"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-color-picker": [
          "calcite-tab-nav"
        ]
      }
    },
    {
      "filePath": "src/components/tab-title/tab-title.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tab-title",
      "readme": "# calcite-tab-title\n\nThe tab-title is the link that switches between panes in [calcite-tabs](../tabs).\n",
      "docs": "The tab-title is the link that switches between panes in [calcite-tabs](../tabs).",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding text."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "closable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "closable",
          "reflectToAttr": true,
          "docs": "When `true`, a close button is added to the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "closed",
          "reflectToAttr": true,
          "docs": "When `true`, does not display or position the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconEnd",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-end",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display at the end of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "\"both\" | \"end\" | \"start\"",
          "complexType": {
            "original": "FlipContext",
            "resolved": "\"both\" | \"end\" | \"start\"",
            "references": {
              "FlipContext": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::FlipContext"
              }
            }
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "values": [
            {
              "value": "both",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconStart",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-start",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display at the start of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ close?: string; }",
          "complexType": {
            "original": "Partial<TabTitleMessages>",
            "resolved": "{ close?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "TabTitleMessages": {
                "location": "import",
                "path": "./assets/tab-title/t9n",
                "id": "src/components/tab-title/assets/tab-title/t9n/index.d.ts::TabTitleMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ close?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "When `true`, the component and its respective `calcite-tab` contents are selected.\n\nOnly one tab can be selected within the `calcite-tabs` parent.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tab",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tab",
          "reflectToAttr": true,
          "docs": "Specifies a unique name for the component.\n\nWhen specified, use the same value on the `calcite-tab`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getTabIndex",
          "returns": {
            "type": "Promise<number>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<number>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<number>"
          },
          "signature": "getTabIndex() => Promise<number>",
          "parameters": [],
          "docs": "Returns the index of the title within the `calcite-tab-nav`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteTabsActivate",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when a `calcite-tab` is selected.",
          "docsTags": []
        },
        {
          "event": "calciteTabsClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when a `calcite-tab` is closed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteInternalTabChange",
          "target": "body",
          "capture": false,
          "passive": false
        },
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding text."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-color-picker"
      ],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-tab-title": [
          "calcite-icon"
        ],
        "calcite-color-picker": [
          "calcite-tab-title"
        ]
      }
    },
    {
      "filePath": "src/components/table/table.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-table",
      "readme": "# calcite-table\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-table-row` elements containing `calcite-table-cell` and/or `calcite-table-header` elements."
        },
        {
          "name": "slot",
          "text": "table-header - A slot for adding `calcite-table-row` elements containing `calcite-table-header` elements."
        },
        {
          "name": "slot",
          "text": "table-footer - A slot for adding `calcite-table-row` elements containing `calcite-table-cell` and/or `calcite-table-header` elements."
        },
        {
          "name": "slot",
          "text": "selection-actions - A slot for adding a `calcite-action-bar` or other elements to display when `selectionMode` is not `\"none\"`."
        }
      ],
      "usage": {
        "Advanced": "A complex table component, with selection modes and slotted actions, pagination, and various display options configured.\n\n```html\n<calcite-table page-size=\"4\" selection-mode=\"multiple\" numbered bordered caption=\"Example table\">\n  <calcite-action slot=\"selection-actions\" icon=\"layer\"></calcite-action>\n  <calcite-action slot=\"selection-actions\" icon=\"send\"></calcite-action>\n  <calcite-action slot=\"selection-actions\" icon=\"copy\"></calcite-action>\n  <calcite-action slot=\"selection-actions\" icon=\"plus\"></calcite-action>\n  <calcite-table-row slot=\"table-header\">\n    <calcite-table-header heading=\"Heading\"></calcite-table-header>\n    <calcite-table-header heading=\"Heading\"></calcite-table-header>\n    <calcite-table-header heading=\"Heading\"></calcite-table-header>\n    <calcite-table-header heading=\"Heading\"></calcite-table-header>\n  </calcite-table-row>\n  <calcite-table-row>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n  </calcite-table-row>\n  <calcite-table-row selected>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n  </calcite-table-row>\n  <calcite-table-row selected>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n  </calcite-table-row>\n  <calcite-table-row>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n  </calcite-table-row>\n  <calcite-table-row>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n  </calcite-table-row>\n  <calcite-table-row>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n  </calcite-table-row>\n  <calcite-table-row selected>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n  </calcite-table-row>\n  <calcite-table-row selected>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n  </calcite-table-row>\n  <calcite-table-row slot=\"table-footer\">\n    <calcite-table-cell></calcite-table-cell>\n    <calcite-table-cell alignment=\"end\">24,212</calcite-table-cell>\n    <calcite-table-cell><calcite-chip scale=\"s\" icon=\"smile\">58% happiness</calcite-chip></calcite-table-cell>\n    <calcite-table-cell> </calcite-table-cell>\n  </calcite-table-row>\n</calcite-table>\n```\n",
        "Basic": "A simple table component.\n\n```html\n<calcite-table caption=\"Example table\">\n  <calcite-table-row slot=\"table-header\">\n    <calcite-table-header heading=\"Heading\" description=\"Description\"></calcite-table-header>\n    <calcite-table-header heading=\"Heading\" description=\"Description\"></calcite-table-header>\n    <calcite-table-header heading=\"Heading\" description=\"Description\"></calcite-table-header>\n    <calcite-table-header heading=\"Heading\" description=\"Description\"></calcite-table-header>\n  </calcite-table-row>\n  <calcite-table-row>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n  </calcite-table-row>\n  <calcite-table-row>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n  </calcite-table-row>\n  <calcite-table-row>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n    <calcite-table-cell>cell</calcite-table-cell>\n  </calcite-table-row>\n</calcite-table>\n```\n"
      },
      "props": [
        {
          "name": "bordered",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "bordered",
          "reflectToAttr": true,
          "docs": "When `true`, displays borders in the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "caption",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "caption",
          "reflectToAttr": false,
          "docs": "Specifies an accessible title for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "groupSeparator",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "group-separator",
          "reflectToAttr": true,
          "docs": "When `true`, number values are displayed with a group separator corresponding to the language and country format.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interactionMode",
          "type": "\"interactive\" | \"static\"",
          "complexType": {
            "original": "TableInteractionMode",
            "resolved": "\"interactive\" | \"static\"",
            "references": {
              "TableInteractionMode": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/table/interfaces.ts::TableInteractionMode"
              }
            }
          },
          "mutable": false,
          "attr": "interaction-mode",
          "reflectToAttr": true,
          "docs": "When `\"interactive\"`, allows focus and keyboard navigation of `table-header`s and `table-cell`s.  When `\"static\"`, prevents focus and keyboard navigation of `table-header`s and `table-cell`s when assistive technologies are not active. Selection affordances and slotted content within `table-cell`s remain focusable.",
          "docsTags": [],
          "default": "\"interactive\"",
          "values": [
            {
              "value": "interactive",
              "type": "string"
            },
            {
              "value": "static",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"auto\" | \"fixed\"",
          "complexType": {
            "original": "TableLayout",
            "resolved": "\"auto\" | \"fixed\"",
            "references": {
              "TableLayout": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/table/interfaces.ts::TableLayout"
              }
            }
          },
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "Specifies the layout of the component.",
          "docsTags": [],
          "default": "\"auto\"",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ clear?: string; hiddenSelected?: string; page?: string; row?: string; selected?: string; }",
          "complexType": {
            "original": "Partial<TableMessages>",
            "resolved": "{ clear?: string; hiddenSelected?: string; page?: string; row?: string; selected?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "TableMessages": {
                "location": "import",
                "path": "./assets/table/t9n",
                "id": "src/components/table/assets/table/t9n/index.d.ts::TableMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ clear?: string; hiddenSelected?: string; page?: string; row?: string; selected?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numbered",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "numbered",
          "reflectToAttr": true,
          "docs": "When `true`, displays the position of the row in numeric form.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberingSystem",
          "type": "\"arab\" | \"arabext\" | \"latn\"",
          "complexType": {
            "original": "NumberingSystem",
            "resolved": "\"arab\" | \"arabext\" | \"latn\"",
            "references": {
              "NumberingSystem": {
                "location": "import",
                "path": "../../utils/locale",
                "id": "src/utils/locale.ts::NumberingSystem"
              }
            }
          },
          "mutable": false,
          "attr": "numbering-system",
          "reflectToAttr": true,
          "docs": "Specifies the Unicode numeral system used by the component for localization.",
          "docsTags": [],
          "values": [
            {
              "value": "arab",
              "type": "string"
            },
            {
              "value": "arabext",
              "type": "string"
            },
            {
              "value": "latn",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "pageSize",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "page-size",
          "reflectToAttr": true,
          "docs": "Specifies the page size of the component. When `true`, renders `calcite-pagination`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedItems",
          "type": "HTMLCalciteTableRowElement[]",
          "complexType": {
            "original": "HTMLCalciteTableRowElement[]",
            "resolved": "HTMLCalciteTableRowElement[]",
            "references": {
              "HTMLCalciteTableRowElement": {
                "location": "global",
                "id": "global::HTMLCalciteTableRowElement"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Specifies the component's selected items.",
          "docsTags": [
            {
              "name": "readonly"
            }
          ],
          "default": "[]",
          "values": [
            {
              "type": "HTMLCalciteTableRowElement[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "\"multiple\" | \"none\" | \"single\"",
          "complexType": {
            "original": "Extract<\"none\" | \"multiple\" | \"single\", SelectionMode>",
            "resolved": "\"multiple\" | \"none\" | \"single\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "SelectionMode": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::SelectionMode"
              }
            }
          },
          "mutable": false,
          "attr": "selection-mode",
          "reflectToAttr": true,
          "docs": "Specifies the selection mode of the component, where:\n\n`\"multiple\"` allows any number of selections,\n\n`\"single\"` allows only one selection, and\n\n`\"none\"` does not allow any selections.",
          "docsTags": [],
          "default": "\"none\"",
          "values": [
            {
              "value": "multiple",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "single",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "striped",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "striped",
          "reflectToAttr": true,
          "docs": "When `true`, displays striped styling in the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zebra",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "zebra",
          "reflectToAttr": true,
          "docs": "When `true`, displays striped styling in the component.",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "Use the `striped` property instead."
            }
          ],
          "default": "false",
          "deprecation": "Use the `striped` property instead.",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteTablePageChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Emits when the component's page selection changes.",
          "docsTags": []
        },
        {
          "event": "calciteTableSelect",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Emits when the component's selected rows change.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteTableRowSelect",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalTableRowFocusRequest",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-table-row` elements containing `calcite-table-cell` and/or `calcite-table-header` elements."
        },
        {
          "name": "selection-actions",
          "docs": "A slot for adding a `calcite-action-bar` or other elements to display when `selectionMode` is not `\"none\"`."
        },
        {
          "name": "table-footer",
          "docs": "A slot for adding `calcite-table-row` elements containing `calcite-table-cell` and/or `calcite-table-header` elements."
        },
        {
          "name": "table-header",
          "docs": "A slot for adding `calcite-table-row` elements containing `calcite-table-header` elements."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-chip",
        "calcite-button",
        "calcite-pagination"
      ],
      "dependencyGraph": {
        "calcite-table": [
          "calcite-chip",
          "calcite-button",
          "calcite-pagination"
        ],
        "calcite-chip": [
          "calcite-icon"
        ],
        "calcite-button": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-pagination": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/table-cell/table-cell.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-table-cell",
      "readme": "# calcite-table-cell\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding content, usually text content."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "alignment",
          "type": "\"center\" | \"end\" | \"start\"",
          "complexType": {
            "original": "Alignment",
            "resolved": "\"center\" | \"end\" | \"start\"",
            "references": {
              "Alignment": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Alignment"
              }
            }
          },
          "mutable": false,
          "attr": "alignment",
          "reflectToAttr": true,
          "docs": "Specifies the alignment of the component.",
          "docsTags": [],
          "default": "\"start\"",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "colSpan",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "col-span",
          "reflectToAttr": true,
          "docs": "Specifies the number of columns the component should span.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ keyboardDeselect?: string; keyboardSelect?: string; row?: string; selected?: string; unselected?: string; }",
          "complexType": {
            "original": "Partial<TableCellMessages>",
            "resolved": "{ keyboardDeselect?: string; keyboardSelect?: string; row?: string; selected?: string; unselected?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "TableCellMessages": {
                "location": "import",
                "path": "./assets/table-cell/t9n",
                "id": "src/components/table-cell/assets/table-cell/t9n/index.d.ts::TableCellMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ keyboardDeselect?: string; keyboardSelect?: string; row?: string; selected?: string; unselected?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rowSpan",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "row-span",
          "reflectToAttr": true,
          "docs": "Specifies the number of rows the component should span.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-table-cell-background",
          "annotation": "prop",
          "docs": "Specifies the background color of the component."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding content, usually text content."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-table-row"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-table-row": [
          "calcite-table-cell"
        ]
      }
    },
    {
      "filePath": "src/components/table-header/table-header.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-table-header",
      "readme": "# calcite-table-header\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "alignment",
          "type": "\"center\" | \"end\" | \"start\"",
          "complexType": {
            "original": "Alignment",
            "resolved": "\"center\" | \"end\" | \"start\"",
            "references": {
              "Alignment": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Alignment"
              }
            }
          },
          "mutable": false,
          "attr": "alignment",
          "reflectToAttr": true,
          "docs": "Specifies the alignment of the component.",
          "docsTags": [],
          "default": "\"start\"",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "colSpan",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "col-span",
          "reflectToAttr": true,
          "docs": "Specifies the number of columns the component should span.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": true,
          "docs": "A description to display beneath heading content.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": true,
          "docs": "A heading to display above description content.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ all?: string; keyboardDeselectAll?: string; keyboardSelectAll?: string; rowNumber?: string; selected?: string; selectionColumn?: string; }",
          "complexType": {
            "original": "Partial<TableHeaderMessages>",
            "resolved": "{ all?: string; keyboardDeselectAll?: string; keyboardSelectAll?: string; rowNumber?: string; selected?: string; selectionColumn?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "TableHeaderMessages": {
                "location": "import",
                "path": "./assets/table-header/t9n",
                "id": "src/components/table-header/assets/table-header/t9n/index.d.ts::TableHeaderMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ all?: string; keyboardDeselectAll?: string; keyboardSelectAll?: string; rowNumber?: string; selected?: string; selectionColumn?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rowSpan",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "row-span",
          "reflectToAttr": true,
          "docs": "Specifies the number of rows the component should span.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-table-header-background",
          "annotation": "prop",
          "docs": "Specifies the background color of the component."
        },
        {
          "name": "--calcite-table-header-border-color",
          "annotation": "prop",
          "docs": "Specifies the border color of the component."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-table-row"
      ],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-table-header": [
          "calcite-icon"
        ],
        "calcite-table-row": [
          "calcite-table-header"
        ]
      }
    },
    {
      "filePath": "src/components/table-row/table-row.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-table-row",
      "readme": "# calcite-table-row\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-table-cell` or `calcite-table-header` elements."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "When `true`, the component is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteTableRowSelect",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the selected state of the component changes.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteInternalTableRowFocusChange",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--calcite-table-row-background",
          "annotation": "prop",
          "docs": "Specifies the background color of the component."
        },
        {
          "name": "--calcite-table-row-border-color",
          "annotation": "prop",
          "docs": "Specifies the border color of the component."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-table-cell` or `calcite-table-header` elements."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon",
        "calcite-table-header",
        "calcite-table-cell"
      ],
      "dependencyGraph": {
        "calcite-table-row": [
          "calcite-icon",
          "calcite-table-header",
          "calcite-table-cell"
        ],
        "calcite-table-header": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/tabs/tabs.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tabs",
      "readme": "# calcite-tabs\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-tab`s."
        },
        {
          "name": "slot",
          "text": "title-group - A slot for adding a `calcite-tab-nav`."
        }
      ],
      "usage": {
        "Basic": "`calcite-tabs` uses several sub-components ([calcite-tab-nav](../tab-nav), [calcite-tab](../tab), [calcite-tab-title](../tab-title)) to create a tabbed interface with optional client side storage. Place your content inside of the `<calcite-tab>` element:\n\n```html\n<calcite-tabs>\n  <calcite-tab-nav slot=\"title-group\">\n    <calcite-tab-title selected>Dogs</calcite-tab-title>\n    <calcite-tab-title>Cats</calcite-tab-title>\n    <calcite-tab-title>Bears</calcite-tab-title>\n  </calcite-tab-nav>\n  <calcite-tab selected><img src=\"https://placedog.net/550/600\" /></calcite-tab>\n  <calcite-tab><img src=\"my-image.png\" /></calcite-tab>\n  <calcite-tab><img src=\"my-image2.png\" /></calcite-tab>\n</calcite-tabs>\n```\n",
        "Bordered": "```html\n<calcite-tabs bordered layout=\"center\" position=\"bottom\">\n  <calcite-tab-nav slot=\"title-group\">\n    <calcite-tab-title selected>Dogs</calcite-tab-title>\n    <calcite-tab-title>Cats</calcite-tab-title>\n    <calcite-tab-title>Bears</calcite-tab-title>\n  </calcite-tab-nav>\n  <calcite-tab selected><img src=\"https://placedog.net/550/600\" /></calcite-tab>\n  <calcite-tab><img src=\"my-image.png\" /></calcite-tab>\n  <calcite-tab><img src=\"my-image2.png\" /></calcite-tab>\n</calcite-tabs>\n```\n"
      },
      "props": [
        {
          "name": "bordered",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "bordered",
          "reflectToAttr": false,
          "docs": "When `true`, the component will display with a folder style menu.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"center\" | \"inline\"",
          "complexType": {
            "original": "TabLayout",
            "resolved": "\"center\" | \"inline\"",
            "references": {
              "TabLayout": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/tabs/interfaces.ts::TabLayout"
              }
            }
          },
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "Specifies the layout of the `calcite-tab-nav`, justifying the `calcite-tab-title`s to the start (`\"inline\"`), or across and centered (`\"center\"`).",
          "docsTags": [],
          "default": "\"inline\"",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "inline",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"bottom\" | \"top\"",
          "complexType": {
            "original": "TabPosition",
            "resolved": "\"bottom\" | \"top\"",
            "references": {
              "TabPosition": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/tabs/interfaces.ts::TabPosition"
              }
            }
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": true,
          "docs": "Specifies the position of `calcite-tab-nav` and `calcite-tab-title` components in relation to the `calcite-tabs`.",
          "docsTags": [],
          "default": "\"top\"",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "calciteInternalTabTitleRegister",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteTabTitleUnregister",
          "target": "body",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalTabRegister",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteTabUnregister",
          "target": "body",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-tab`s."
        },
        {
          "name": "title-group",
          "docs": "A slot for adding a `calcite-tab-nav`."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-color-picker"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-color-picker": [
          "calcite-tabs"
        ]
      }
    },
    {
      "filePath": "src/components/text-area/text-area.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-text-area",
      "readme": "# calcite-text-area\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding text."
        },
        {
          "name": "slot",
          "text": "footer-start - A slot for adding content to the start of the component's footer."
        },
        {
          "name": "slot",
          "text": "footer-end - A slot for adding content to the end of the component's footer."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-text-area placeholder=\"Add Notes\"></calcite-text-area>\n```\n",
        "Exceeding-max-length": "Renders text-area with character limit counter.\n\n```html\n<calcite-text-area placeholder=\"Add Notes\" value=\"Rocky Mountains National Park\" max-length=\"20\"></calcite-text-area>\n```\n"
      },
      "props": [
        {
          "name": "autofocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": true,
          "docs": "When `true`, the component is focused on page load. Only one element can contain `autofocus`. If multiple elements have `autofocus`, the first element will receive focus.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[autofocus](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus)"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "columns",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "columns",
          "reflectToAttr": true,
          "docs": "Specifies the component's number of columns.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[cols](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-cols)"
            }
          ],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "form",
          "reflectToAttr": true,
          "docs": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "groupSeparator",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "group-separator",
          "reflectToAttr": true,
          "docs": "When `true`, number values are displayed with a group separator corresponding to the language and country format.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxLength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max-length",
          "reflectToAttr": true,
          "docs": "Specifies the maximum number of characters allowed.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-maxlength)"
            }
          ],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ invalid?: string; tooLong?: string; }",
          "complexType": {
            "original": "Partial<TextAreaMessages>",
            "resolved": "{ invalid?: string; tooLong?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "TextAreaMessages": {
                "location": "import",
                "path": "./assets/text-area/t9n",
                "id": "src/components/text-area/assets/text-area/t9n/index.d.ts::TextAreaMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ invalid?: string; tooLong?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minLength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "min-length",
          "reflectToAttr": true,
          "docs": "Specifies the minimum number of characters allowed.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-minlength)"
            }
          ],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Specifies the name of the component.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-name)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberingSystem",
          "type": "\"arab\" | \"arabext\" | \"latn\"",
          "complexType": {
            "original": "NumberingSystem",
            "resolved": "\"arab\" | \"arabext\" | \"latn\"",
            "references": {
              "NumberingSystem": {
                "location": "import",
                "path": "../../utils/locale",
                "id": "src/utils/locale.ts::NumberingSystem"
              }
            }
          },
          "mutable": false,
          "attr": "numbering-system",
          "reflectToAttr": false,
          "docs": "Specifies the Unicode numeral system used by the component for localization.",
          "docsTags": [],
          "values": [
            {
              "value": "arab",
              "type": "string"
            },
            {
              "value": "arabext",
              "type": "string"
            },
            {
              "value": "latn",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Specifies the placeholder text for the component.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-placeholder)"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readOnly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "read-only",
          "reflectToAttr": true,
          "docs": "When `true`, the component's `value` can be read, but cannot be modified.",
          "docsTags": [
            {
              "name": "readonly"
            },
            {
              "name": "mdn",
              "text": "[readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "When `true`, the component must have a value in order for the form to submit.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[required]https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "resize",
          "type": "\"both\" | \"horizontal\" | \"none\" | \"vertical\"",
          "complexType": {
            "original": "\"both\" | \"horizontal\" | \"vertical\" | \"none\"",
            "resolved": "\"both\" | \"horizontal\" | \"none\" | \"vertical\"",
            "references": {}
          },
          "mutable": false,
          "attr": "resize",
          "reflectToAttr": true,
          "docs": "Specifies if the component is resizable.",
          "docsTags": [],
          "default": "\"both\"",
          "values": [
            {
              "value": "both",
              "type": "string"
            },
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rows",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "rows",
          "reflectToAttr": true,
          "docs": "Specifies the component's number of rows.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[rows](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-rows)"
            }
          ],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "\"l\" | \"m\" | \"s\"",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {}
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "status",
          "type": "\"idle\" | \"invalid\" | \"valid\"",
          "complexType": {
            "original": "Status",
            "resolved": "\"idle\" | \"invalid\" | \"valid\"",
            "references": {
              "Status": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Status"
              }
            }
          },
          "mutable": false,
          "attr": "status",
          "reflectToAttr": true,
          "docs": "Specifies the status of the input field, which determines message and icons.",
          "docsTags": [],
          "default": "\"idle\"",
          "values": [
            {
              "value": "idle",
              "type": "string"
            },
            {
              "value": "invalid",
              "type": "string"
            },
            {
              "value": "valid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validationIcon",
          "type": "boolean | string",
          "complexType": {
            "original": "string | boolean",
            "resolved": "boolean | string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-icon",
          "reflectToAttr": true,
          "docs": "Specifies the validation icon to display under the component.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validationMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-message",
          "reflectToAttr": false,
          "docs": "Specifies the validation message to display under the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's value.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "wrap",
          "type": "\"hard\" | \"soft\"",
          "complexType": {
            "original": "\"soft\" | \"hard\"",
            "resolved": "\"hard\" | \"soft\"",
            "references": {}
          },
          "mutable": false,
          "attr": "wrap",
          "reflectToAttr": true,
          "docs": "Specifies the wrapping mechanism for the text.",
          "docsTags": [
            {
              "name": "mdn",
              "text": "[wrap](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-wrap)"
            }
          ],
          "default": "\"soft\"",
          "values": [
            {
              "value": "hard",
              "type": "string"
            },
            {
              "value": "soft",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "selectText",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "selectText() => Promise<void>",
          "parameters": [],
          "docs": "Selects the text of the component's `value`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteTextAreaChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fires each time a new `value` is typed and committed.",
          "docsTags": []
        },
        {
          "event": "calciteTextAreaInput",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fires each time a new `value` is typed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding text."
        },
        {
          "name": "footer-end",
          "docs": "A slot for adding content to the end of the component's footer."
        },
        {
          "name": "footer-start",
          "docs": "A slot for adding content to the start of the component's footer."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-input-message"
      ],
      "dependencyGraph": {
        "calcite-text-area": [
          "calcite-input-message"
        ],
        "calcite-input-message": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/tile/tile.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tile",
      "readme": "# calcite-tile\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "content-start - A slot for adding non-actionable elements before the component's content."
        },
        {
          "name": "slot",
          "text": "content-end - A slot for adding non-actionable elements after the component's content."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-tile\n  description=\"Explore a curated collection of high-quality images and visuals. Find inspiration for your projects and discover the beauty of photography.\"\n  heading=\"Discover stunning images\"\n  href=\"#\"\n  icon=\"images\"\n></calcite-tile>\n```\n"
      },
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "When `true`, the component is active.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "alignment",
          "type": "\"center\" | \"start\"",
          "complexType": {
            "original": "Exclude<Alignment, \"end\">",
            "resolved": "\"center\" | \"start\"",
            "references": {
              "Exclude": {
                "location": "global",
                "id": "global::Exclude"
              },
              "Alignment": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Alignment"
              }
            }
          },
          "mutable": false,
          "attr": "alignment",
          "reflectToAttr": true,
          "docs": "Specifies the alignment of the Tile's content.",
          "docsTags": [],
          "default": "\"start\"",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": true,
          "docs": "A description for the component, which displays below the heading.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "embed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "embed",
          "reflectToAttr": true,
          "docs": "The component's embed mode.\n\nWhen `true`, renders without a border and padding for use by other components.",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "No longer necessary."
            }
          ],
          "default": "false",
          "deprecation": "No longer necessary.",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": true,
          "docs": "The component header text, which displays between the icon and description.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": true,
          "docs": "When embed is `\"false\"`, the URL for the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-tile-background-color",
          "annotation": "prop",
          "docs": "Specifies the background color of the component."
        },
        {
          "name": "--calcite-tile-border-color",
          "annotation": "prop",
          "docs": "Specifies the border color of the component."
        },
        {
          "name": "--calcite-tile-description-text-color",
          "annotation": "prop",
          "docs": "Specifies the description text color of the component."
        },
        {
          "name": "--calcite-tile-heading-text-color",
          "annotation": "prop",
          "docs": "Specifies the heading text color of the component."
        }
      ],
      "slots": [
        {
          "name": "content-end",
          "docs": "A slot for adding non-actionable elements after the component's content."
        },
        {
          "name": "content-start",
          "docs": "A slot for adding non-actionable elements before the component's content."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon",
        "calcite-link"
      ],
      "dependencyGraph": {
        "calcite-tile": [
          "calcite-icon",
          "calcite-link"
        ],
        "calcite-link": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/tile-group/tile-group.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tile-group",
      "readme": "# calcite-tile-group\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-tile` elements."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "Exclude<Layout, \"grid\">",
            "resolved": "\"horizontal\" | \"vertical\"",
            "references": {
              "Exclude": {
                "location": "global",
                "id": "global::Exclude"
              },
              "Layout": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Layout"
              }
            }
          },
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "Defines the layout of the component.\n\nUse `\"horizontal\"` for rows, and `\"vertical\"` for a single column.",
          "docsTags": [],
          "default": "\"horizontal\"",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-tile` elements."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tile-select/tile-select.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tile-select",
      "readme": "# calcite-tile-select\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding custom content."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-tile-select\n  checked\n  input-enabled\n  description=\"Discover new opportunities for growth and success in your industry. Embrace forward-thinking strategies to stay ahead of the competition.\"\n  heading=\"Innovate for success\"\n  icon=\"lightbulb\"\n  input-alignment=\"end\"\n  type=\"radio\"\n  value=\"one\"\n></calcite-tile-select>\n```\n"
      },
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "When `true`, the component is checked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": true,
          "docs": "A description for the component, which displays below the heading.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": true,
          "docs": "The component header text, which displays between the icon and description.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputAlignment",
          "type": "\"end\" | \"start\"",
          "complexType": {
            "original": "Extract<\"end\" | \"start\", Alignment>",
            "resolved": "\"end\" | \"start\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Alignment": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Alignment"
              }
            }
          },
          "mutable": false,
          "attr": "input-alignment",
          "reflectToAttr": true,
          "docs": "When `inputEnabled` is `true`, specifies the placement of the interactive input on the component.",
          "docsTags": [],
          "default": "\"start\"",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputEnabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "input-enabled",
          "reflectToAttr": true,
          "docs": "When `true`, displays an interactive input based on the `type` property.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Specifies the name of the component on form submission.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"checkbox\" | \"radio\"",
          "complexType": {
            "original": "TileSelectType",
            "resolved": "\"checkbox\" | \"radio\"",
            "references": {
              "TileSelectType": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/tile-select/interfaces.ts::TileSelectType"
              }
            }
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "Specifies the selection mode of the component, where:\n\n`\"radio\"` is for single selection, and\n\n`\"checkbox\"` is for multiple selections.",
          "docsTags": [],
          "default": "\"radio\"",
          "values": [
            {
              "value": "checkbox",
              "type": "string"
            },
            {
              "value": "radio",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's value.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "\"auto\" | \"full\"",
          "complexType": {
            "original": "Extract<\"auto\" | \"full\", Width>",
            "resolved": "\"auto\" | \"full\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "Width": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Width"
              }
            }
          },
          "mutable": false,
          "attr": "width",
          "reflectToAttr": true,
          "docs": "Specifies the width of the component.",
          "docsTags": [],
          "default": "\"auto\"",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "full",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteTileSelectChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Emits a custom change event.\n\nFor checkboxes it emits when checked or unchecked.\n\nFor radios it only emits when checked.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteCheckboxChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalCheckboxFocus",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalCheckboxBlur",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteRadioButtonChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalRadioButtonCheckedChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalRadioButtonFocus",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalRadioButtonBlur",
          "capture": false,
          "passive": false
        },
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "pointerenter",
          "capture": false,
          "passive": true
        },
        {
          "event": "pointerleave",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding custom content."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-radio-button",
        "calcite-checkbox",
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-tile-select": [
          "calcite-radio-button",
          "calcite-checkbox",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/tile-select-group/tile-select-group.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tile-select-group",
      "readme": "# calcite-tile-select-group\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-tile-select` elements."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-tile-select-group layout=\"vertical\">\n  <calcite-tile-select\n    input-enabled\n    description=\"Discover new opportunities for growth and success in your industry. Embrace forward-thinking strategies to stay ahead of the competition.\"\n    heading=\"Innovate for success\"\n    icon=\"lightbulb\"\n    input-alignment=\"end\"\n    type=\"radio\"\n    value=\"one\"\n  ></calcite-tile-select>\n  <calcite-tile-select\n    checked\n    input-enabled\n    description=\"Explore a world of creativity with diverse artistic content to fuel your creative endeavors.\"\n    heading=\"Creative Exploration\"\n    icon=\"palette\"\n    input-alignment=\"end\"\n    type=\"radio\"\n    value=\"four\"\n  ></calcite-tile-select>\n  <calcite-tile-select\n    input-enabled\n    description=\"Optimize workflow and achieve greater productivity with streamlined processes and powerful tools.\"\n    heading=\"Workflow Optimization\"\n    icon=\"gear\"\n    input-alignment=\"end\"\n    type=\"radio\"\n    value=\"two\"\n  ></calcite-tile-select>\n</calcite-tile-select-group>\n```\n"
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "TileSelectGroupLayout",
            "resolved": "\"horizontal\" | \"vertical\"",
            "references": {
              "TileSelectGroupLayout": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/tile-select-group/interfaces.ts::TileSelectGroupLayout"
              }
            }
          },
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "Defines the layout of the component.\n\nUse `\"horizontal\"` for rows, and `\"vertical\"` for a single column.",
          "docsTags": [],
          "default": "\"horizontal\"",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-tile-select` elements."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/time-picker/time-picker.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-time-picker",
      "readme": "# calcite-time-picker\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "Basic": "```html\n<calcite-time-picker scale=\"l\" value=\"14:00\"></calcite-time-picker>\n```\n"
      },
      "props": [
        {
          "name": "messageOverrides",
          "type": "{ fractionalSecond?: string; fractionalSecondDown?: string; fractionalSecondUp?: string; hour?: string; hourDown?: string; hourUp?: string; meridiem?: string; meridiemDown?: string; meridiemUp?: string; minute?: string; minuteDown?: string; minuteUp?: string; second?: string; secondDown?: string; secondUp?: string; }",
          "complexType": {
            "original": "Partial<TimePickerMessages>",
            "resolved": "{ fractionalSecond?: string; fractionalSecondDown?: string; fractionalSecondUp?: string; hour?: string; hourDown?: string; hourUp?: string; meridiem?: string; meridiemDown?: string; meridiemUp?: string; minute?: string; minuteDown?: string; minuteUp?: string; second?: string; secondDown?: string; secondUp?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "TimePickerMessages": {
                "location": "import",
                "path": "./assets/time-picker/t9n",
                "id": "src/components/time-picker/assets/time-picker/t9n/index.d.ts::TimePickerMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ fractionalSecond?: string; fractionalSecondDown?: string; fractionalSecondUp?: string; hour?: string; hourDown?: string; hourUp?: string; meridiem?: string; meridiemDown?: string; meridiemUp?: string; minute?: string; minuteDown?: string; minuteUp?: string; second?: string; secondDown?: string; secondUp?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberingSystem",
          "type": "\"arab\" | \"arabext\" | \"latn\"",
          "complexType": {
            "original": "NumberingSystem",
            "resolved": "\"arab\" | \"arabext\" | \"latn\"",
            "references": {
              "NumberingSystem": {
                "location": "import",
                "path": "../../utils/locale",
                "id": "src/utils/locale.ts::NumberingSystem"
              }
            }
          },
          "mutable": false,
          "attr": "numbering-system",
          "reflectToAttr": false,
          "docs": "Specifies the Unicode numeral system used by the component for localization.",
          "docsTags": [],
          "values": [
            {
              "value": "arab",
              "type": "string"
            },
            {
              "value": "arabext",
              "type": "string"
            },
            {
              "value": "latn",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "step",
          "reflectToAttr": true,
          "docs": "Specifies the granularity the `value` must adhere to (in seconds).",
          "docsTags": [],
          "default": "60",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's value in UTC (always 24-hour format).",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component's first focusable element.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "blur",
          "capture": false,
          "passive": false
        },
        {
          "event": "focus",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "pointerdown",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-input-time-picker"
      ],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-time-picker": [
          "calcite-icon"
        ],
        "calcite-input-time-picker": [
          "calcite-time-picker"
        ]
      }
    },
    {
      "filePath": "src/components/tip/tip.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tip",
      "readme": "# calcite-tip\n\nThe `calcite-tip` component can comprise of an image, text and hyperlink to give helpful hints to a user about using the platform.\n",
      "docs": "The `calcite-tip` component can comprise of an image, text and hyperlink to give helpful hints to a user about using the platform.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding text and a hyperlink."
        },
        {
          "name": "slot",
          "text": "thumbnail - A slot for adding an HTML image element."
        }
      ],
      "usage": {
        "Basic": "Renders a close-disabled tip with a heading, thumbnail, info and a link.\n\n```html\n<calcite-tip close-disabled heading=\"Kittens\">\n  <img slot=\"thumbnail\" src=\"my-thumbnail.png\" alt=\"\" />\n  <p>\n    Did you know that kittens are born with their eyes shut and ears folded? They start to open their eyes and unfold\n    their ears after about a week.\n  </p>\n</calcite-tip>\n```\n"
      },
      "props": [
        {
          "name": "closeDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "close-disabled",
          "reflectToAttr": true,
          "docs": "When `true`, the close button is not present on the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "closed",
          "reflectToAttr": true,
          "docs": "When `true`, the component does not display.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "The component header text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "complexType": {
            "original": "HeadingLevel",
            "resolved": "1 | 2 | 3 | 4 | 5 | 6",
            "references": {
              "HeadingLevel": {
                "location": "import",
                "path": "../functional/Heading",
                "id": "src/components/functional/Heading.tsx::HeadingLevel"
              }
            }
          },
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": true,
          "docs": "Specifies the number at which section headings should start.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ close?: string; }",
          "complexType": {
            "original": "Partial<TipMessages>",
            "resolved": "{ close?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "TipMessages": {
                "location": "import",
                "path": "./assets/tip/t9n",
                "id": "src/components/tip/assets/tip/t9n/index.d.ts::TipMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ close?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "When `true`, the component is selected if it has a parent `calcite-tip-manager`.\n\nOnly one tip can be selected within the `calcite-tip-manager` parent.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteTipDismiss",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Emits when the component has been closed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding text and a hyperlink."
        },
        {
          "name": "thumbnail",
          "docs": "A slot for adding an HTML image element."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-action"
      ],
      "dependencyGraph": {
        "calcite-tip": [
          "calcite-action"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/tip-group/tip-group.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tip-group",
      "readme": "# calcite-tip-group\n\n`calcite-tip-group` is a wrapper for multiple `calcite-tip`s and is housed in `calcite-tip-manager`.\n",
      "docs": "`calcite-tip-group` is a wrapper for multiple `calcite-tip`s and is housed in `calcite-tip-manager`.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-tip`s."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "groupTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "group-title",
          "reflectToAttr": false,
          "docs": "The component header text for all nested `calcite-tip`s.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-tip`s."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tip-manager/tip-manager.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tip-manager",
      "readme": "# calcite-tip-manager\n\nThe `calcite-tip-manager` component contains multiple `calcite-tip`s that a user can view through via interactive arrows to go back and forth through the tips in the deck.\n",
      "docs": "The `calcite-tip-manager` component contains multiple `calcite-tip`s that a user can view through via interactive arrows to go back and forth through the tips in the deck.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-tip`s."
        }
      ],
      "usage": {
        "Basic": "Renders a tip manager using a group of tips as well as a single tip.\n\n```html\n<calcite-tip-manager>\n  <calcite-tip-group group-title=\"Animal Insights\">\n    <calcite-tip heading=\"Paws for Thought\" selected>\n      <img slot=\"thumbnail\" src=\"https://placedog.net/400/200\" />\n      <p>\n        Did you know that a dog's sense of smell is so powerful that it can detect certain diseases, including cancer,\n        with remarkable accuracy?\n      </p>\n      <p>\n        Explore the incredible abilities of dogs with our\n        <calcite-link href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">Canine Marvels</calcite-link>.\n      </p>\n    </calcite-tip>\n    <calcite-tip heading=\"Whisker Wisdom\" hidden>\n      <img slot=\"thumbnail\" src=\"my-thumbnail.png\" />\n      <p>\n        Cats use their whiskers not only for balance but also to measure openings. If a cat's whiskers fit through an\n        opening, the rest of its body will too!\n      </p>\n      <p>\n        Discover intriguing facts about cats with our\n        <calcite-link href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">Curious Cat Chronicles</calcite-link>.\n      </p>\n    </calcite-tip>\n  </calcite-tip-group>\n  <calcite-tip heading=\"Bear Essentials\" hidden>\n    <img slot=\"thumbnail\" src=\"https://placebear.com/400/200\" />\n    <p>\n      Bears are excellent swimmers! They can swim long distances and even dive for their meals. Polar bears, in\n      particular, are known to swim for hours in search of food.\n    </p>\n    <p>\n      Explore the aquatic side of bears with our\n      <calcite-link href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">Bear Aquatics</calcite-link>.\n    </p>\n  </calcite-tip>\n</calcite-tip-manager>\n```\n"
      },
      "props": [
        {
          "name": "closed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "closed",
          "reflectToAttr": true,
          "docs": "When `true`, does not display or position the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "complexType": {
            "original": "HeadingLevel",
            "resolved": "1 | 2 | 3 | 4 | 5 | 6",
            "references": {
              "HeadingLevel": {
                "location": "import",
                "path": "../functional/Heading",
                "id": "src/components/functional/Heading.tsx::HeadingLevel"
              }
            }
          },
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": true,
          "docs": "Specifies the number at which section headings should start.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ defaultGroupTitle?: string; defaultPaginationLabel?: string; close?: string; previous?: string; next?: string; }",
          "complexType": {
            "original": "Partial<TipManagerMessages>",
            "resolved": "{ defaultGroupTitle?: string; defaultPaginationLabel?: string; close?: string; previous?: string; next?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "TipManagerMessages": {
                "location": "import",
                "path": "./assets/tip-manager/t9n",
                "id": "src/components/tip-manager/assets/tip-manager/t9n/index.d.ts::TipManagerMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ defaultGroupTitle?: string; defaultPaginationLabel?: string; close?: string; previous?: string; next?: string; }"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "nextTip",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "nextTip() => Promise<void>",
          "parameters": [],
          "docs": "Selects the next `calcite-tip` to display.",
          "docsTags": []
        },
        {
          "name": "previousTip",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "previousTip() => Promise<void>",
          "parameters": [],
          "docs": "Selects the previous `calcite-tip` to display.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteTipManagerClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Emits when the component has been closed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-tip-manager-height",
          "annotation": "prop",
          "docs": "The maximum height of the component."
        },
        {
          "name": "--calcite-tip-max-width",
          "annotation": "prop",
          "docs": "The maximum width of a slotted `calcite-tip` within the component."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-tip`s."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-action",
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-tip-manager": [
          "calcite-action",
          "calcite-icon"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "src/components/tooltip/tooltip.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tooltip",
      "readme": "# calcite-tooltip\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding text."
        }
      ],
      "usage": {
        "Basic": "```html\n<calcite-tooltip placement=\"auto\" reference-element=\"tooltip-button\" id=\"tooltip-content\">\n  Honeybees communicate through intricate dances, navigate using the sun's position, and play a vital role in\n  maintaining biodiversity by pollinating flowers and crops.\n</calcite-tooltip>\n<span>\n  Discover fascinating facts about the\n  <a id=\"tooltip-button\" href=\"#\" aria-describedby=\"tooltip-content\">secret lives of honeybees</a> and their crucial\n  role in pollination.\n</span>\n```\n",
        "Virtual": "```html\n<!-- virtually positioned tooltip -->\n<calcite-tooltip id=\"virtual-tooltip\" open>This is the message of the tooltip</calcite-tooltip>\n\n<script>\n  function generateGetBoundingClientRect() {\n    return () => ({\n      width: 0,\n      height: 0,\n      top: 100,\n      right: 100,\n      bottom: 100,\n      left: 600,\n    });\n  }\n\n  const virtualElement = {\n    getBoundingClientRect: generateGetBoundingClientRect(),\n  };\n\n  const tooltip = document.getElementById(\"virtual-tooltip\");\n  tooltip.referenceElement = virtualElement;\n</script>\n```\n"
      },
      "props": [
        {
          "name": "closeOnClick",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "close-on-click",
          "reflectToAttr": true,
          "docs": "Closes the component when the `referenceElement` is clicked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component.",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "No longer necessary. Overrides the context of the component's description, which could confuse assistive technology users."
            }
          ],
          "deprecation": "No longer necessary. Overrides the context of the component's description, which could confuse assistive technology users.",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "offsetDistance",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "offset-distance",
          "reflectToAttr": true,
          "docs": "Offset the position of the component away from the `referenceElement`.",
          "docsTags": [
            {
              "name": "default",
              "text": "6"
            }
          ],
          "default": "defaultOffsetDistance",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "offsetSkidding",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "offset-skidding",
          "reflectToAttr": true,
          "docs": "Offset the position of the component along the `referenceElement`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "When `true`, the component is open.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPositioning",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "OverlayPositioning",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {
              "OverlayPositioning": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::OverlayPositioning"
              }
            }
          },
          "mutable": false,
          "attr": "overlay-positioning",
          "reflectToAttr": true,
          "docs": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\nThe `\"fixed\"` value should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
          "docsTags": [],
          "default": "\"absolute\"",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "\"auto\" | \"top\" | \"right\" | \"bottom\" | \"left\" | \"top-start\" | \"top-end\" | \"right-start\" | \"right-end\" | \"bottom-start\" | \"bottom-end\" | \"left-start\" | \"left-end\" | \"auto-start\" | \"auto-end\" | \"leading-start\" | \"leading\" | \"leading-end\" | \"trailing-end\" | \"trailing\" | \"trailing-start\"",
          "complexType": {
            "original": "LogicalPlacement",
            "resolved": "\"auto\" | \"top\" | \"right\" | \"bottom\" | \"left\" | \"top-start\" | \"top-end\" | \"right-start\" | \"right-end\" | \"bottom-start\" | \"bottom-end\" | \"left-start\" | \"left-end\" | \"auto-start\" | \"auto-end\" | \"leading-start\" | \"leading\" | \"leading-end\" | \"trailing-end\" | \"trailing\" | \"trailing-start\"",
            "references": {
              "LogicalPlacement": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::LogicalPlacement"
              }
            }
          },
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": true,
          "docs": "Determines where the component will be positioned relative to the `referenceElement`.",
          "docsTags": [],
          "default": "\"auto\"",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "leading-start",
              "type": "string"
            },
            {
              "value": "leading",
              "type": "string"
            },
            {
              "value": "leading-end",
              "type": "string"
            },
            {
              "value": "trailing-end",
              "type": "string"
            },
            {
              "value": "trailing",
              "type": "string"
            },
            {
              "value": "trailing-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "referenceElement",
          "type": "Element | VirtualElement | string",
          "complexType": {
            "original": "ReferenceElement | string",
            "resolved": "Element | VirtualElement | string",
            "references": {
              "ReferenceElement": {
                "location": "import",
                "path": "../../utils/floating-ui",
                "id": "src/utils/floating-ui.ts::ReferenceElement"
              }
            }
          },
          "mutable": false,
          "attr": "reference-element",
          "reflectToAttr": false,
          "docs": "The `referenceElement` to position the component according to its `\"placement\"` value.\n\nSetting to the `HTMLElement` is preferred so the component does not need to query the DOM for the `referenceElement`.\n\nHowever, a string ID of the reference element can be used.",
          "docsTags": [],
          "values": [
            {
              "type": "Element"
            },
            {
              "type": "VirtualElement"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "reposition",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(delayed?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "delayed",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "reposition(delayed?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "delayed",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Updates the position of the component.",
          "docsTags": [
            {
              "name": "param",
              "text": "delayed"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "calciteTooltipBeforeClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is requested to be closed and before the closing transition begins.",
          "docsTags": []
        },
        {
          "event": "calciteTooltipBeforeOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
          "docsTags": []
        },
        {
          "event": "calciteTooltipClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is closed and animation is complete.",
          "docsTags": []
        },
        {
          "event": "calciteTooltipOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is open and animation is complete.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--calcite-tooltip-z-index",
          "annotation": "prop",
          "docs": "Sets the z-index value for the component."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding text."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tree/tree.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tree",
      "readme": "# calcite-tree\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for `calcite-tree-item` elements."
        }
      ],
      "usage": {
        "Basic": "`<calcite-tree>` can be used as a sidebar navigation tree with optional lines and different selection modes.\n\n```html\n<calcite-tree>\n  <calcite-tree-item>\n    <a href=\"#\">Technology</a>\n    <calcite-tree slot=\"children\">\n      <calcite-tree-item>\n        <a href=\"#\">Programming Languages</a>\n        <calcite-tree slot=\"children\">\n          <calcite-tree-item>\n            <a href=\"#\">JavaScript</a>\n          </calcite-tree-item>\n          <calcite-tree-item>\n            <a href=\"#\">Python</a>\n          </calcite-tree-item>\n        </calcite-tree>\n      </calcite-tree-item>\n      <calcite-tree-item>\n        <a href=\"#\">Frameworks</a>\n        <calcite-tree slot=\"children\">\n          <calcite-tree-item>\n            <a href=\"#\">React</a>\n          </calcite-tree-item>\n          <calcite-tree-item>\n            <a href=\"#\">Vue.js</a>\n          </calcite-tree-item>\n        </calcite-tree>\n      </calcite-tree-item>\n    </calcite-tree>\n  </calcite-tree-item>\n</calcite-tree>\n```\n"
      },
      "props": [
        {
          "name": "lines",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "lines",
          "reflectToAttr": true,
          "docs": "When `true`, displays indentation guide lines.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "Scale",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "Scale": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::Scale"
              }
            }
          },
          "mutable": true,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the component.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedItems",
          "type": "HTMLCalciteTreeItemElement[]",
          "complexType": {
            "original": "HTMLCalciteTreeItemElement[]",
            "resolved": "HTMLCalciteTreeItemElement[]",
            "references": {
              "HTMLCalciteTreeItemElement": {
                "location": "global",
                "id": "global::HTMLCalciteTreeItemElement"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Specifies the component's selected items.",
          "docsTags": [
            {
              "name": "readonly"
            }
          ],
          "default": "[]",
          "values": [
            {
              "type": "HTMLCalciteTreeItemElement[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "\"ancestors\" | \"children\" | \"multichildren\" | \"multiple\" | \"none\" | \"single\" | \"single-persist\"",
          "complexType": {
            "original": "SelectionMode",
            "resolved": "\"ancestors\" | \"children\" | \"multichildren\" | \"multiple\" | \"none\" | \"single\" | \"single-persist\"",
            "references": {
              "SelectionMode": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::SelectionMode"
              }
            }
          },
          "mutable": true,
          "attr": "selection-mode",
          "reflectToAttr": true,
          "docs": "Specifies the selection mode of the component, where:\n\n`\"ancestors\"` displays with a checkbox and allows any number of selections from corresponding parent and child selections,\n\n`\"children\"` allows any number of selections from one parent from corresponding parent and child selections,\n\n`\"multichildren\"` allows any number of selections from corresponding parent and child selections,\n\n`\"multiple\"` allows any number of selections,\n\n`\"none\"` allows no selections,\n\n`\"single\"` allows one selection, and\n\n`\"single-persist\"` allows and requires one selection.",
          "docsTags": [
            {
              "name": "default",
              "text": "\"single\""
            }
          ],
          "default": "\"single\"",
          "values": [
            {
              "value": "ancestors",
              "type": "string"
            },
            {
              "value": "children",
              "type": "string"
            },
            {
              "value": "multichildren",
              "type": "string"
            },
            {
              "value": "multiple",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "single",
              "type": "string"
            },
            {
              "value": "single-persist",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteTreeSelect",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the user selects/deselects `calcite-tree-items`.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "focus",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusin",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusout",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalTreeItemSelect",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for `calcite-tree-item` elements."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tree-item/tree-item.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tree-item",
      "readme": "# calcite-tree-item\n\n`<calcite-tree-item>` is used to represent a single item in a `<calcite-tree>`.\n",
      "docs": "`<calcite-tree-item>` is used to represent a single item in a `<calcite-tree>`.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A slot for adding text."
        },
        {
          "name": "slot",
          "text": "children - A slot for adding nested `calcite-tree` elements."
        },
        {
          "name": "slot",
          "text": "actions-end - A slot for adding actions to the end of the component. It is recommended to use two or fewer actions."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": true,
          "docs": "When `true`, the component is expanded.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "\"both\" | \"end\" | \"start\"",
          "complexType": {
            "original": "FlipContext",
            "resolved": "\"both\" | \"end\" | \"start\"",
            "references": {
              "FlipContext": {
                "location": "import",
                "path": "../interfaces",
                "id": "src/components/interfaces.ts::FlipContext"
              }
            }
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "values": [
            {
              "value": "both",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconStart",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-start",
          "reflectToAttr": true,
          "docs": "Specifies an icon to display at the start of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "When `true`, the component is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding text."
        },
        {
          "name": "actions-end",
          "docs": "A slot for adding actions to the end of the component. It is recommended to use two or fewer actions."
        },
        {
          "name": "children",
          "docs": "A slot for adding nested `calcite-tree` elements."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon",
        "calcite-checkbox"
      ],
      "dependencyGraph": {
        "calcite-tree-item": [
          "calcite-icon",
          "calcite-checkbox"
        ]
      }
    },
    {
      "filePath": "src/components/value-list/value-list.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-value-list",
      "readme": "# calcite-value-list\n\n`calcite-value-list` is housed in a panel and contains `calcite-value-list-item`s. The value list has options for drag and drop, label editing, and single or multi-select of items which can be done through shift+click.\n",
      "docs": "`calcite-value-list` is housed in a panel and contains `calcite-value-list-item`s. The value list has options for drag and drop, label editing, and single or multi-select of items which can be done through shift+click.",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "Use the `list` component instead."
        },
        {
          "name": "slot",
          "text": "- A slot for adding `calcite-value-list-item` elements. List items are displayed as a vertical list."
        },
        {
          "name": "slot",
          "text": "menu-actions - A slot for adding a button and menu combination for performing actions, such as sorting."
        }
      ],
      "usage": {
        "Basic": "Renders a value list with multiple items able to be selected and a filter.\n\n```html\n<calcite-value-list multiple filter-enabled>\n  <calcite-value-list-item label=\"Dogs\" description=\"Man's best friend\" value=\"dogs\">\n    <calcite-action slot=\"actions-end\" icon=\"plus\"></calcite-action>\n  </calcite-value-list-item>\n  <calcite-value-list-item label=\"Cats\" description=\"Independent and fluffy\" value=\"cats\">\n    <calcite-action slot=\"actions-end\" icon=\"plus\"></calcite-action>\n  </calcite-value-list-item>\n  <calcite-value-list-item\n    label=\"Fish. But not just any fish, a tiger fish caught live in the Atlantic Ocean while on vacation.\"\n    description=\"Easy to care for.\"\n    value=\"fish\"\n  >\n    <calcite-action slot=\"actions-end\" icon=\"plus\"></calcite-action>\n  </calcite-value-list-item>\n</calcite-value-list>\n```\n",
        "Drag-and-drop": "Renders a value list with drag and drop capability between the items.\n\n```html\n<calcite-value-list drag-enabled>\n  <calcite-value-list-item label=\"Rent\" description=\"Mortgage + housing costs\" value=\"rent\"> </calcite-value-list-item>\n  <calcite-value-list-item label=\"Food\" description=\"its what you eat.\" value=\"food\"> </calcite-value-list-item>\n  <calcite-value-list-item label=\"Utilities\" value=\"utilities\"> </calcite-value-list-item>\n  <calcite-value-list-item label=\"Entertainment\" description=\"Toys and leisure\" value=\"entertainment\">\n  </calcite-value-list-item>\n</calcite-value-list>\n```\n"
      },
      "props": [
        {
          "name": "canPull",
          "type": "(detail: DragDetail) => boolean",
          "complexType": {
            "original": "(detail: DragDetail) => boolean",
            "resolved": "(detail: DragDetail) => boolean",
            "references": {
              "DragDetail": {
                "location": "import",
                "path": "../../utils/sortableComponent",
                "id": "src/utils/sortableComponent.ts::DragDetail"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "When provided, the method will be called to determine whether the element can move from the list.",
          "docsTags": [],
          "values": [
            {
              "type": "(detail: DragDetail) => boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "canPut",
          "type": "(detail: DragDetail) => boolean",
          "complexType": {
            "original": "(detail: DragDetail) => boolean",
            "resolved": "(detail: DragDetail) => boolean",
            "references": {
              "DragDetail": {
                "location": "import",
                "path": "../../utils/sortableComponent",
                "id": "src/utils/sortableComponent.ts::DragDetail"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "When provided, the method will be called to determine whether the element can be added from another list.",
          "docsTags": [],
          "values": [
            {
              "type": "(detail: DragDetail) => boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dragEnabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "drag-enabled",
          "reflectToAttr": true,
          "docs": "When `true`, `calcite-value-list-item`s are sortable via a draggable button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterEnabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "filter-enabled",
          "reflectToAttr": true,
          "docs": "When `true`, an input appears at the top of the component that can be used by end users to filter list items.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterPlaceholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filter-placeholder",
          "reflectToAttr": true,
          "docs": "Placeholder text for the filter's input field.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "filter-text",
          "reflectToAttr": true,
          "docs": "Text for the filter input field.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filteredData",
          "type": "{ label: string; description: string; metadata: Record<string, unknown>; value: string; }[]",
          "complexType": {
            "original": "ItemData",
            "resolved": "{ label: string; description: string; metadata: Record<string, unknown>; value: string; }[]",
            "references": {
              "ItemData": {
                "location": "import",
                "path": "../pick-list/shared-list-logic",
                "id": "src/components/pick-list/shared-list-logic.ts::ItemData"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The currently filtered data.",
          "docsTags": [
            {
              "name": "readonly"
            }
          ],
          "default": "[]",
          "values": [
            {
              "type": "{ label: string; description: string; metadata: Record<string, unknown>; value: string; }[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filteredItems",
          "type": "HTMLCalciteValueListItemElement[]",
          "complexType": {
            "original": "HTMLCalciteValueListItemElement[]",
            "resolved": "HTMLCalciteValueListItemElement[]",
            "references": {
              "HTMLCalciteValueListItemElement": {
                "location": "global",
                "id": "global::HTMLCalciteValueListItemElement"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The currently filtered items.",
          "docsTags": [
            {
              "name": "readonly"
            }
          ],
          "default": "[]",
          "values": [
            {
              "type": "HTMLCalciteValueListItemElement[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "group",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "group",
          "reflectToAttr": true,
          "docs": "The component's group identifier.\n\nTo drag elements from one list into another, both lists must have the same group value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When `true`, a busy indicator is displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "{ dragHandleActive?: string; dragHandleChange?: string; dragHandleCommit?: string; dragHandleIdle?: string; }",
          "complexType": {
            "original": "Partial<ValueListMessages>",
            "resolved": "{ dragHandleActive?: string; dragHandleChange?: string; dragHandleCommit?: string; dragHandleIdle?: string; }",
            "references": {
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "ValueListMessages": {
                "location": "import",
                "path": "./assets/value-list/t9n",
                "id": "src/components/value-list/assets/value-list/t9n/index.d.ts::ValueListMessages"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Use this property to override individual strings used by the component.",
          "docsTags": [],
          "values": [
            {
              "type": "{ dragHandleActive?: string; dragHandleChange?: string; dragHandleCommit?: string; dragHandleIdle?: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": true,
          "docs": "Similar to standard radio buttons and checkboxes.\nWhen `true`, a user can select multiple `calcite-value-list-item`s at a time.\nWhen `false`, only a single `calcite-value-list-item` can be selected at a time,\nand a new selection will deselect previous selections.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionFollowsFocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selection-follows-focus",
          "reflectToAttr": true,
          "docs": "When `true` and single-selection is enabled, the selection changes when navigating `calcite-value-list-item`s via keyboard.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getSelectedItems",
          "returns": {
            "type": "Promise<Map<string, HTMLCalciteValueListItemElement>>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<Map<string, HTMLCalciteValueListItemElement>>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "Map": {
                "location": "global",
                "id": "global::Map"
              },
              "HTMLCalciteValueListItemElement": {
                "location": "global",
                "id": "global::HTMLCalciteValueListItemElement"
              }
            },
            "return": "Promise<Map<string, HTMLCalciteValueListItemElement>>"
          },
          "signature": "getSelectedItems() => Promise<Map<string, HTMLCalciteValueListItemElement>>",
          "parameters": [],
          "docs": "Returns the component's selected items.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(focusId?: ListFocusId) => Promise<void>",
            "parameters": [
              {
                "name": "focusId",
                "type": "\"filter\"",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "ListFocusId": {
                "location": "import",
                "path": "../pick-list/shared-list-logic",
                "id": "src/components/pick-list/shared-list-logic.ts::ListFocusId"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus(focusId?: ListFocusId) => Promise<void>",
          "parameters": [
            {
              "name": "focusId",
              "type": "\"filter\"",
              "docs": ""
            }
          ],
          "docs": "Sets focus on the component's first focusable element.",
          "docsTags": [
            {
              "name": "param",
              "text": "focusId"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "calciteListChange",
          "detail": "Map<string, HTMLCalciteValueListItemElement>",
          "bubbles": true,
          "complexType": {
            "original": "Map<string, HTMLCalciteValueListItemElement>",
            "resolved": "Map<string, HTMLCalciteValueListItemElement>",
            "references": {
              "Map": {
                "location": "global",
                "id": "global::Map"
              },
              "HTMLCalciteValueListItemElement": {
                "location": "global",
                "id": "global::HTMLCalciteValueListItemElement"
              }
            }
          },
          "cancelable": false,
          "composed": true,
          "docs": "Emits when any of the list item selections have changed.",
          "docsTags": []
        },
        {
          "event": "calciteListFilter",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Emits when a filter has changed.",
          "docsTags": []
        },
        {
          "event": "calciteListOrderChange",
          "detail": "any[]",
          "bubbles": true,
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Emits when the order of the list has changed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "focusout",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteListItemRemove",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteListItemChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalListItemPropsChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteInternalListItemValueChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteValueListItemDragHandleBlur",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-value-list-item` elements. List items are displayed as a vertical list."
        },
        {
          "name": "menu-actions",
          "docs": "A slot for adding a button and menu combination for performing actions, such as sorting."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-filter",
        "calcite-scrim"
      ],
      "dependencyGraph": {
        "calcite-value-list": [
          "calcite-filter",
          "calcite-scrim"
        ],
        "calcite-filter": [
          "calcite-input"
        ],
        "calcite-input": [
          "calcite-progress",
          "calcite-icon",
          "calcite-input-message"
        ],
        "calcite-input-message": [
          "calcite-icon"
        ],
        "calcite-scrim": [
          "calcite-loader"
        ]
      },
      "deprecation": "Use the `list` component instead."
    },
    {
      "filePath": "src/components/value-list-item/value-list-item.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-value-list-item",
      "readme": "# calcite-value-list-item\n\n`calcite-value-list-item`s are cards contained in a `calcite-value-list`. They each can have a label and description, an icon and can have their label's be editable (inherited from `calcite-value-list`). The developer can disable or preselect each list item and give it a value.\n",
      "docs": "`calcite-value-list-item`s are cards contained in a `calcite-value-list`. They each can have a label and description, an icon and can have their label's be editable (inherited from `calcite-value-list`). The developer can disable or preselect each list item and give it a value.",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "Use the `list` component instead."
        },
        {
          "name": "slot",
          "text": "actions-end - A slot for adding `calcite-action`s or content to the end side of the component."
        },
        {
          "name": "slot",
          "text": "actions-start - A slot for adding `calcite-action`s or content to the start side of the component."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": true,
          "docs": "A description for the component that displays below the label text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "ICON_TYPES.circle | ICON_TYPES.grip | ICON_TYPES.square",
          "complexType": {
            "original": "ICON_TYPES | null",
            "resolved": "ICON_TYPES.circle | ICON_TYPES.grip | ICON_TYPES.square",
            "references": {
              "ICON_TYPES": {
                "location": "import",
                "path": "../pick-list/resources",
                "id": "src/components/pick-list/resources.ts::ICON_TYPES"
              }
            }
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "Determines the icon SVG symbol that will be shown. Options are circle, square, grip or null.",
          "docsTags": [
            {
              "name": "see",
              "text": "[ICON_TYPES](https://github.com/Esri/calcite-design-system/blob/main/src/components/pick-list/resources.ts#L5)"
            }
          ],
          "default": "null",
          "values": [
            {
              "type": "ICON_TYPES.circle"
            },
            {
              "type": "ICON_TYPES.grip"
            },
            {
              "type": "ICON_TYPES.square"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": true,
          "docs": "Label and accessible name for the component. Appears next to the icon.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "metadata",
          "type": "{ [x: string]: unknown; }",
          "complexType": {
            "original": "Record<string, unknown>",
            "resolved": "{ [x: string]: unknown; }",
            "references": {
              "Record": {
                "location": "global",
                "id": "global::Record"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Provides additional metadata to the component. Primary use is for a filter on the parent list.",
          "docsTags": [],
          "values": [
            {
              "type": "{ [x: string]: unknown; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "nonInteractive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "non-interactive",
          "reflectToAttr": true,
          "docs": "When `true`, prevents the content of the component from user interaction.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "removable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "removable",
          "reflectToAttr": true,
          "docs": "When `true`, adds an action to remove the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "When `true`, the component is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The component's value.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Set focus on the component.",
          "docsTags": []
        },
        {
          "name": "toggleSelected",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(coerce?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "coerce",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "toggleSelected(coerce?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "coerce",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Toggle the selection state. By default this won't trigger an event.\nThe first argument allows the value to be coerced, rather than swapping values.",
          "docsTags": [
            {
              "name": "param",
              "text": "coerce"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "calciteListItemChange",
          "detail": "{ item: HTMLCalciteValueListItemElement; value: any; selected: boolean; shiftPressed: boolean; }",
          "bubbles": true,
          "complexType": {
            "original": "{\n    item: HTMLCalciteValueListItemElement;\n    value: any;\n    selected: boolean;\n    shiftPressed: boolean;\n  }",
            "resolved": "{ item: HTMLCalciteValueListItemElement; value: any; selected: boolean; shiftPressed: boolean; }",
            "references": {
              "HTMLCalciteValueListItemElement": {
                "location": "global",
                "id": "global::HTMLCalciteValueListItemElement"
              }
            }
          },
          "cancelable": false,
          "composed": true,
          "docs": "Fires when the component is selected or unselected.",
          "docsTags": []
        },
        {
          "event": "calciteListItemRemove",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fires when the remove button is pressed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteListItemChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "actions-end",
          "docs": "A slot for adding `calcite-action`s or content to the end side of the component."
        },
        {
          "name": "actions-start",
          "docs": "A slot for adding `calcite-action`s or content to the start side of the component."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon",
        "calcite-pick-list-item"
      ],
      "dependencyGraph": {
        "calcite-value-list-item": [
          "calcite-icon",
          "calcite-pick-list-item"
        ],
        "calcite-pick-list-item": [
          "calcite-icon",
          "calcite-action"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ]
      },
      "deprecation": "Use the `list` component instead."
    }
  ],
  "typeLibrary": {
    "src/utils/sortableComponent.ts::DragDetail": {
      "declaration": "export interface DragDetail {\n  toEl: HTMLElement;\n  fromEl: HTMLElement;\n  dragEl: HTMLElement;\n  newIndex: number;\n  oldIndex: number;\n}",
      "docstring": "",
      "path": "src/utils/sortableComponent.ts"
    },
    "src/components/pick-list/shared-list-logic.ts::ItemData": {
      "declaration": "interface Array<T> {\n    /**\n     * Gets or sets the length of the array. This is a number one higher than the highest index in the array.\n     */\n    length: number;\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n    /**\n     * Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.\n     */\n    toLocaleString(): string;\n    /**\n     * Removes the last element from an array and returns it.\n     * If the array is empty, undefined is returned and the array is not modified.\n     */\n    pop(): T | undefined;\n    /**\n     * Appends new elements to the end of an array, and returns the new length of the array.\n     * @param items New elements to add to the array.\n     */\n    push(...items: T[]): number;\n    /**\n     * Combines two or more arrays.\n     * This method returns a new array without modifying any existing arrays.\n     * @param items Additional arrays and/or items to add to the end of the array.\n     */\n    concat(...items: ConcatArray<T>[]): T[];\n    /**\n     * Combines two or more arrays.\n     * This method returns a new array without modifying any existing arrays.\n     * @param items Additional arrays and/or items to add to the end of the array.\n     */\n    concat(...items: (T | ConcatArray<T>)[]): T[];\n    /**\n     * Adds all the elements of an array into a string, separated by the specified separator string.\n     * @param separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n    /**\n     * Reverses the elements in an array in place.\n     * This method mutates the array and returns a reference to the same array.\n     */\n    reverse(): T[];\n    /**\n     * Removes the first element from an array and returns it.\n     * If the array is empty, undefined is returned and the array is not modified.\n     */\n    shift(): T | undefined;\n    /**\n     * Returns a copy of a section of an array.\n     * For both start and end, a negative index can be used to indicate an offset from the end of the array.\n     * For example, -2 refers to the second to last element of the array.\n     * @param start The beginning index of the specified portion of the array.\n     * If start is undefined, then the slice begins at index 0.\n     * @param end The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\n     * If end is undefined, then the slice extends to the end of the array.\n     */\n    slice(start?: number, end?: number): T[];\n    /**\n     * Sorts an array in place.\n     * This method mutates the array and returns a reference to the same array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: T, b: T) => number): this;\n    /**\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n     * @param start The zero-based location in the array from which to start removing elements.\n     * @param deleteCount The number of elements to remove.\n     * @returns An array containing the elements that were deleted.\n     */\n    splice(start: number, deleteCount?: number): T[];\n    /**\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n     * @param start The zero-based location in the array from which to start removing elements.\n     * @param deleteCount The number of elements to remove.\n     * @param items Elements to insert into the array in place of the deleted elements.\n     * @returns An array containing the elements that were deleted.\n     */\n    splice(start: number, deleteCount: number, ...items: T[]): T[];\n    /**\n     * Inserts new elements at the start of an array, and returns the new length of the array.\n     * @param items Elements to insert at the start of the array.\n     */\n    unshift(...items: T[]): number;\n    /**\n     * Returns the index of the first occurrence of a value in an array, or -1 if it is not present.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n     */\n    indexOf(searchElement: T, fromIndex?: number): number;\n    /**\n     * Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array.\n     */\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): this is S[];\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): S[];\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): T[];\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n\n    [n: number]: T;\n}",
      "docstring": "",
      "path": "src/components/pick-list/shared-list-logic.ts"
    },
    "src/components/value-list/assets/value-list/t9n/index.d.ts::ValueListMessages": {
      "declaration": "{\n  dragHandleActive: string;\n  dragHandleChange: string;\n  dragHandleCommit: string;\n  dragHandleIdle: string;\n}",
      "docstring": "",
      "path": "src/components/value-list/assets/value-list/t9n/index.d.ts"
    },
    "src/components/pick-list/shared-list-logic.ts::ListFocusId": {
      "declaration": "\"filter\"",
      "docstring": "",
      "path": "src/components/pick-list/shared-list-logic.ts"
    },
    "src/components/functional/Heading.tsx::HeadingLevel": {
      "declaration": "export type HeadingLevel = 1 | 2 | 3 | 4 | 5 | 6;",
      "docstring": "",
      "path": "src/components/functional/Heading.tsx"
    },
    "src/components/interfaces.ts::Appearance": {
      "declaration": "export type Appearance = \"outline\" | \"outline-fill\" | \"solid\" | \"transparent\";",
      "docstring": "",
      "path": "src/components/interfaces.ts"
    },
    "src/components/interfaces.ts::Position": {
      "declaration": "export type Position = \"start\" | \"end\";",
      "docstring": "",
      "path": "src/components/interfaces.ts"
    },
    "src/components/interfaces.ts::Scale": {
      "declaration": "export type Scale = \"s\" | \"m\" | \"l\";",
      "docstring": "",
      "path": "src/components/interfaces.ts"
    },
    "src/components/interfaces.ts::SelectionMode": {
      "declaration": "export type SelectionMode =\n  | \"single\"\n  | \"none\"\n  | \"children\"\n  | \"single-persist\"\n  | \"multichildren\"\n  | \"ancestors\"\n  | \"multiple\";",
      "docstring": "",
      "path": "src/components/interfaces.ts"
    },
    "src/components/accordion/interfaces.ts::RequestedItem": {
      "declaration": "export interface RequestedItem {\n  requestedAccordionItem: HTMLCalciteAccordionItemElement;\n}",
      "docstring": "",
      "path": "src/components/accordion/interfaces.ts"
    },
    "src/components/interfaces.ts::FlipContext": {
      "declaration": "export type FlipContext = \"both\" | \"start\" | \"end\";",
      "docstring": "",
      "path": "src/components/interfaces.ts"
    },
    "src/components/accordion-item/interfaces.ts::RequestedItem": {
      "declaration": "export interface RequestedItem {\n  requestedAccordionItem: HTMLCalciteAccordionItemElement;\n}",
      "docstring": "",
      "path": "src/components/accordion-item/interfaces.ts"
    },
    "src/components/interfaces.ts::Alignment": {
      "declaration": "export type Alignment = \"start\" | \"center\" | \"end\";",
      "docstring": "",
      "path": "src/components/interfaces.ts"
    },
    "src/components/action/assets/action/t9n/index.d.ts::ActionMessages": {
      "declaration": "{\n  loading: string;\n  indicator: string;\n}",
      "docstring": "",
      "path": "src/components/action/assets/action/t9n/index.d.ts"
    },
    "src/components/interfaces.ts::Layout": {
      "declaration": "export type Layout = \"horizontal\" | \"vertical\" | \"grid\";",
      "docstring": "",
      "path": "src/components/interfaces.ts"
    },
    "src/utils/floating-ui.ts::OverlayPositioning": {
      "declaration": "export declare type Strategy = 'absolute' | 'fixed';",
      "docstring": "",
      "path": "src/utils/floating-ui.ts"
    },
    "src/components/action-bar/assets/action-bar/t9n/index.d.ts::ActionBarMessages": {
      "declaration": "{\n  expand: string;\n  collapse: string;\n}",
      "docstring": "",
      "path": "src/components/action-bar/assets/action-bar/t9n/index.d.ts"
    },
    "src/components/interfaces.ts::Columns": {
      "declaration": "export type Columns = 1 | 2 | 3 | 4 | 5 | 6;",
      "docstring": "",
      "path": "src/components/interfaces.ts"
    },
    "src/components/action-group/assets/action-group/t9n/index.d.ts::ActionGroupMessages": {
      "declaration": "{\n  more: string;\n}",
      "docstring": "",
      "path": "src/components/action-group/assets/action-group/t9n/index.d.ts"
    },
    "src/utils/floating-ui.ts::EffectivePlacement": {
      "declaration": "export declare type Placement = Side | AlignedPlacement;",
      "docstring": "",
      "path": "src/utils/floating-ui.ts"
    },
    "src/utils/floating-ui.ts::LogicalPlacement": {
      "declaration": "\"auto\" | \"top\" | \"right\" | \"bottom\" | \"left\" | \"top-start\" | \"top-end\" | \"right-start\" | \"right-end\" | \"bottom-start\" | \"bottom-end\" | \"left-start\" | \"left-end\" | \"auto-start\" | \"auto-end\" | \"leading-start\" | \"leading\" | \"leading-end\" | \"trailing-end\" | \"trailing\" | \"trailing-start\"",
      "docstring": "",
      "path": "src/utils/floating-ui.ts"
    },
    "src/components/action-pad/assets/action-pad/t9n/index.d.ts::ActionPadMessages": {
      "declaration": "{\n  expand: string;\n  collapse: string;\n}",
      "docstring": "",
      "path": "src/components/action-pad/assets/action-pad/t9n/index.d.ts"
    },
    "src/components/alert/interfaces.ts::AlertDuration": {
      "declaration": "export type AlertDuration = \"fast\" | \"medium\" | \"slow\";",
      "docstring": "",
      "path": "src/components/alert/interfaces.ts"
    },
    "src/components/interfaces.ts::Kind": {
      "declaration": "export type Kind = \"brand\" | \"danger\" | \"info\" | \"inverse\" | \"neutral\" | \"warning\" | \"success\";",
      "docstring": "",
      "path": "src/components/interfaces.ts"
    },
    "src/utils/locale.ts::NumberingSystem": {
      "declaration": "\"arab\" | \"arabext\" | \"latn\"",
      "docstring": "",
      "path": "src/utils/locale.ts"
    },
    "src/utils/floating-ui.ts::MenuPlacement": {
      "declaration": "export type MenuPlacement = Extract<\n  LogicalPlacement,\n  \"top-start\" | \"top\" | \"top-end\" | \"bottom-start\" | \"bottom\" | \"bottom-end\"\n>;",
      "docstring": "",
      "path": "src/utils/floating-ui.ts"
    },
    "src/components/alert/assets/alert/t9n/index.d.ts::AlertMessages": {
      "declaration": "{\n  close: string;\n}",
      "docstring": "",
      "path": "src/components/alert/assets/alert/t9n/index.d.ts"
    },
    "src/components/alert/interfaces.ts::Sync": {
      "declaration": "export interface Sync {\n  queue: HTMLCalciteAlertElement[];\n}",
      "docstring": "",
      "path": "src/components/alert/interfaces.ts"
    },
    "src/components/interfaces.ts::Status": {
      "declaration": "export type Status = \"invalid\" | \"valid\" | \"idle\";",
      "docstring": "",
      "path": "src/components/interfaces.ts"
    },
    "src/components/block/assets/block/t9n/index.d.ts::BlockMessages": {
      "declaration": "{\n  collapse: string;\n  expand: string;\n  loading: string;\n  options: string;\n}",
      "docstring": "",
      "path": "src/components/block/assets/block/t9n/index.d.ts"
    },
    "src/components/block-section/interfaces.ts::BlockSectionToggleDisplay": {
      "declaration": "export type BlockSectionToggleDisplay = \"button\" | \"switch\";",
      "docstring": "",
      "path": "src/components/block-section/interfaces.ts"
    },
    "src/components/block-section/assets/block-section/t9n/index.d.ts::BlockSectionMessages": {
      "declaration": "{\n  collapse: string;\n  expand: string;\n}",
      "docstring": "",
      "path": "src/components/block-section/assets/block-section/t9n/index.d.ts"
    },
    "src/components/button/interfaces.ts::ButtonAlignment": {
      "declaration": "export type ButtonAlignment =\n  | \"start\"\n  | \"end\"\n  | \"center\"\n  | \"space-between\"\n  | \"icon-start-space-between\"\n  | \"icon-end-space-between\";",
      "docstring": "",
      "path": "src/components/button/interfaces.ts"
    },
    "src/components/interfaces.ts::Width": {
      "declaration": "export type Width = \"auto\" | \"half\" | \"full\";",
      "docstring": "",
      "path": "src/components/interfaces.ts"
    },
    "src/components/button/assets/button/t9n/index.d.ts::ButtonMessages": {
      "declaration": "{\n  loading: string;\n}",
      "docstring": "",
      "path": "src/components/button/assets/button/t9n/index.d.ts"
    },
    "src/components/interfaces.ts::LogicalFlowPosition": {
      "declaration": "export type LogicalFlowPosition = \"inline-start\" | \"inline-end\" | \"block-start\" | \"block-end\";",
      "docstring": "",
      "path": "src/components/interfaces.ts"
    },
    "src/components/card/assets/card/t9n/index.d.ts::CardMessages": {
      "declaration": "{\n  select: string;\n  loading: string;\n}",
      "docstring": "",
      "path": "src/components/card/assets/card/t9n/index.d.ts"
    },
    "src/components/chip/assets/chip/t9n/index.d.ts::ChipMessages": {
      "declaration": "{\n  dismissLabel: string;\n}",
      "docstring": "",
      "path": "src/components/chip/assets/chip/t9n/index.d.ts"
    },
    "src/components/color-picker/interfaces.ts::InternalColor": {
      "declaration": "interface Color<T extends ColorParam = ColorParam> {\n    toString(): string;\n    toJSON(): Color<T>;\n    string(places?: number): string;\n    percentString(places?: number): string;\n    array(): number[];\n    object(): { alpha?: number | undefined } & { [key: string]: number };\n    unitArray(): number[];\n    unitObject(): { r: number; g: number; b: number; alpha?: number | undefined };\n    round(places?: number): Color;\n    alpha(): number;\n    alpha(val: number): Color;\n    red(): number;\n    red(val: number): Color;\n    green(): number;\n    green(val: number): Color;\n    blue(): number;\n    blue(val: number): Color;\n    hue(): number;\n    hue(val: number): Color;\n    saturationl(): number;\n    saturationl(val: number): Color;\n    lightness(): number;\n    lightness(val: number): Color;\n    saturationv(): number;\n    saturationv(val: number): Color;\n    value(): number;\n    value(val: number): Color;\n    chroma(): number;\n    chroma(val: number): Color;\n    gray(): number;\n    gray(val: number): Color;\n    white(): number;\n    white(val: number): Color;\n    wblack(): number;\n    wblack(val: number): Color;\n    cyan(): number;\n    cyan(val: number): Color;\n    magenta(): number;\n    magenta(val: number): Color;\n    yellow(): number;\n    yellow(val: number): Color;\n    black(): number;\n    black(val: number): Color;\n    x(): number;\n    x(val: number): Color;\n    y(): number;\n    y(val: number): Color;\n    z(): number;\n    z(val: number): Color;\n    l(): number;\n    l(val: number): Color;\n    a(): number;\n    a(val: number): Color;\n    b(): number;\n    b(val: number): Color;\n    keyword(): string;\n    keyword<V extends string>(val: V): Color<V>;\n    hex(): string;\n    hex<V extends string>(val: V): Color<V>;\n    hexa(): string;\n    hexa<V extends string>(val: V): Color<V>;\n    rgbNumber(): number;\n    luminosity(): number;\n    contrast(color2: Color): number;\n    level(color2: Color): \"AAA\" | \"AA\" | \"\";\n    isDark(): boolean;\n    isLight(): boolean;\n    negate(): Color;\n    lighten(ratio: number): Color;\n    darken(ratio: number): Color;\n    saturate(ratio: number): Color;\n    desaturate(ratio: number): Color;\n    whiten(ratio: number): Color;\n    blacken(ratio: number): Color;\n    grayscale(): Color;\n    fade(ratio: number): Color;\n    opaquer(ratio: number): Color;\n    rotate(degrees: number): Color;\n    mix(mixinColor: Color, weight?: number): Color;\n\n    rgb(...args: number[]): Color;\n    hsl(...args: number[]): Color;\n    hsv(...args: number[]): Color;\n    hwb(...args: number[]): Color;\n    cmyk(...args: number[]): Color;\n    xyz(...args: number[]): Color;\n    lab(...args: number[]): Color;\n    lch(...args: number[]): Color;\n    ansi16(...args: number[]): Color;\n    ansi256(...args: number[]): Color;\n    hcg(...args: number[]): Color;\n    apple(...args: number[]): Color;\n}",
      "docstring": "",
      "path": "src/components/color-picker/interfaces.ts"
    },
    "src/components/color-picker/utils.ts::Format": {
      "declaration": "export type Format = \"auto\" | SupportedMode;",
      "docstring": "",
      "path": "src/components/color-picker/utils.ts"
    },
    "src/components/color-picker/assets/color-picker/t9n/index.d.ts::ColorPickerMessages": {
      "declaration": "{\n  b: string;\n  blue: string;\n  deleteColor: string;\n  g: string;\n  green: string;\n  h: string;\n  hsv: string;\n  hex: string;\n  hue: string;\n  noColor: string;\n  opacity: string;\n  r: string;\n  red: string;\n  rgb: string;\n  s: string;\n  saturation: string;\n  saveColor: string;\n  saved: string;\n  v: string;\n  value: string;\n}",
      "docstring": "",
      "path": "src/components/color-picker/assets/color-picker/t9n/index.d.ts"
    },
    "src/components/color-picker/interfaces.ts::ColorValue": {
      "declaration": "export type ColorValue = string | RGB | RGBA | HSV | HSVA | HSL | HSLA;",
      "docstring": "",
      "path": "src/components/color-picker/interfaces.ts"
    },
    "src/components/combobox/interfaces.ts::SelectionDisplay": {
      "declaration": "export type SelectionDisplay = \"all\" | \"fit\" | \"single\";",
      "docstring": "",
      "path": "src/components/combobox/interfaces.ts"
    },
    "src/components/combobox/assets/combobox/t9n/index.d.ts::ComboboxMessages": {
      "declaration": "{\n  all: string;\n  allSelected: string;\n  clear: string;\n  removeTag: string;\n  selected: string;\n}",
      "docstring": "",
      "path": "src/components/combobox/assets/combobox/t9n/index.d.ts"
    },
    "src/components/combobox/interfaces.ts::ComboboxChildElement": {
      "declaration": "export type ComboboxChildElement = HTMLCalciteComboboxItemElement | HTMLCalciteComboboxItemGroupElement;",
      "docstring": "",
      "path": "src/components/combobox/interfaces.ts"
    },
    "src/components/date-picker/assets/date-picker/t9n/index.d.ts::DatePickerMessages": {
      "declaration": "{\n  nextMonth: string;\n  prevMonth: string;\n  year: string;\n}",
      "docstring": "",
      "path": "src/components/date-picker/assets/date-picker/t9n/index.d.ts"
    },
    "src/components/date-picker/utils.ts::DateLocaleData": {
      "declaration": "export interface DateLocaleData {\n  \"default-calendar\": \"gregorian\" | \"buddhist\";\n  separator: string;\n  unitOrder: string;\n  weekStart: number;\n  placeholder: string;\n  days: {\n    abbreviated?: string[];\n    narrow?: string[];\n    short?: string[];\n    wide?: string[];\n  };\n  numerals: string;\n  months: {\n    abbreviated: string[];\n    narrow: string[];\n    wide: string[];\n  };\n  year?: {\n    suffix: string;\n  };\n}",
      "docstring": "Translation resource data structure",
      "path": "src/components/date-picker/utils.ts"
    },
    "src/utils/date.ts::HoverRange": {
      "declaration": "export interface HoverRange {\n  focused: \"end\" | \"start\";\n  start: Date;\n  end: Date;\n}",
      "docstring": "",
      "path": "src/utils/date.ts"
    },
    "src/components/dropdown-group/interfaces.ts::RequestedItem": {
      "declaration": "export interface RequestedItem {\n  requestedDropdownItem: HTMLCalciteDropdownItemElement;\n  requestedDropdownGroup: HTMLCalciteDropdownGroupElement;\n}",
      "docstring": "",
      "path": "src/components/dropdown-group/interfaces.ts"
    },
    "src/components/dropdown/interfaces.ts::ItemKeyboardEvent": {
      "declaration": "export interface ItemKeyboardEvent {\n  keyboardEvent: KeyboardEvent;\n}",
      "docstring": "",
      "path": "src/components/dropdown/interfaces.ts"
    },
    "src/components/filter/assets/filter/t9n/index.d.ts::FilterMessages": {
      "declaration": "{\n  label: string;\n  clear: string;\n}",
      "docstring": "",
      "path": "src/components/filter/assets/filter/t9n/index.d.ts"
    },
    "src/components/flow/interfaces.ts::FlowItemLikeElement": {
      "declaration": "export type FlowItemLikeElement = FlowItemLike & HTMLElement;",
      "docstring": "",
      "path": "src/components/flow/interfaces.ts"
    },
    "src/components/flow-item/assets/flow-item/t9n/index.d.ts::FlowItemMessages": {
      "declaration": "{\n  back: string;\n  close: string;\n  options: string;\n}",
      "docstring": "",
      "path": "src/components/flow-item/assets/flow-item/t9n/index.d.ts"
    },
    "src/components/graph/interfaces.ts::DataSeries": {
      "declaration": "interface Array<T> {\n    /**\n     * Gets or sets the length of the array. This is a number one higher than the highest index in the array.\n     */\n    length: number;\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n    /**\n     * Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.\n     */\n    toLocaleString(): string;\n    /**\n     * Removes the last element from an array and returns it.\n     * If the array is empty, undefined is returned and the array is not modified.\n     */\n    pop(): T | undefined;\n    /**\n     * Appends new elements to the end of an array, and returns the new length of the array.\n     * @param items New elements to add to the array.\n     */\n    push(...items: T[]): number;\n    /**\n     * Combines two or more arrays.\n     * This method returns a new array without modifying any existing arrays.\n     * @param items Additional arrays and/or items to add to the end of the array.\n     */\n    concat(...items: ConcatArray<T>[]): T[];\n    /**\n     * Combines two or more arrays.\n     * This method returns a new array without modifying any existing arrays.\n     * @param items Additional arrays and/or items to add to the end of the array.\n     */\n    concat(...items: (T | ConcatArray<T>)[]): T[];\n    /**\n     * Adds all the elements of an array into a string, separated by the specified separator string.\n     * @param separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n    /**\n     * Reverses the elements in an array in place.\n     * This method mutates the array and returns a reference to the same array.\n     */\n    reverse(): T[];\n    /**\n     * Removes the first element from an array and returns it.\n     * If the array is empty, undefined is returned and the array is not modified.\n     */\n    shift(): T | undefined;\n    /**\n     * Returns a copy of a section of an array.\n     * For both start and end, a negative index can be used to indicate an offset from the end of the array.\n     * For example, -2 refers to the second to last element of the array.\n     * @param start The beginning index of the specified portion of the array.\n     * If start is undefined, then the slice begins at index 0.\n     * @param end The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\n     * If end is undefined, then the slice extends to the end of the array.\n     */\n    slice(start?: number, end?: number): T[];\n    /**\n     * Sorts an array in place.\n     * This method mutates the array and returns a reference to the same array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: T, b: T) => number): this;\n    /**\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n     * @param start The zero-based location in the array from which to start removing elements.\n     * @param deleteCount The number of elements to remove.\n     * @returns An array containing the elements that were deleted.\n     */\n    splice(start: number, deleteCount?: number): T[];\n    /**\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n     * @param start The zero-based location in the array from which to start removing elements.\n     * @param deleteCount The number of elements to remove.\n     * @param items Elements to insert into the array in place of the deleted elements.\n     * @returns An array containing the elements that were deleted.\n     */\n    splice(start: number, deleteCount: number, ...items: T[]): T[];\n    /**\n     * Inserts new elements at the start of an array, and returns the new length of the array.\n     * @param items Elements to insert at the start of the array.\n     */\n    unshift(...items: T[]): number;\n    /**\n     * Returns the index of the first occurrence of a value in an array, or -1 if it is not present.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n     */\n    indexOf(searchElement: T, fromIndex?: number): number;\n    /**\n     * Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array.\n     */\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): this is S[];\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): S[];\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): T[];\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n\n    [n: number]: T;\n}",
      "docstring": "",
      "path": "src/components/graph/interfaces.ts"
    },
    "src/components/graph/interfaces.ts::ColorStop": {
      "declaration": "export interface ColorStop {\n  offset: number;\n  color: string;\n  opacity?: number;\n}",
      "docstring": "",
      "path": "src/components/graph/interfaces.ts"
    },
    "src/components/handle/assets/handle/t9n/index.d.ts::HandleMessages": {
      "declaration": "{\n  dragHandle: string;\n  dragHandleUntitled: string;\n  dragHandleActive: string;\n  dragHandleChange: string;\n  dragHandleCommit: string;\n  dragHandleIdle: string;\n}",
      "docstring": "",
      "path": "src/components/handle/assets/handle/t9n/index.d.ts"
    },
    "src/components/handle/interfaces.d.ts::HandleNudge": {
      "declaration": "export interface HandleNudge {\n  direction: \"up\" | \"down\";\n}",
      "docstring": "",
      "path": "src/components/handle/interfaces.d.ts"
    },
    "src/components/handle/interfaces.d.ts::HandleChange": {
      "declaration": "export interface HandleChange {\n  message: string;\n}",
      "docstring": "",
      "path": "src/components/handle/interfaces.d.ts"
    },
    "src/components/inline-editable/assets/inline-editable/t9n/index.d.ts::InlineEditableMessages": {
      "declaration": "{\n  enableEditing: string;\n  cancelEditing: string;\n  confirmChanges: string;\n}",
      "docstring": "",
      "path": "src/components/inline-editable/assets/inline-editable/t9n/index.d.ts"
    },
    "src/components/input/interfaces.ts::InputPlacement": {
      "declaration": "export type InputPlacement = \"vertical\" | \"horizontal\" | \"none\";",
      "docstring": "",
      "path": "src/components/input/interfaces.ts"
    },
    "src/components/input/assets/input/t9n/index.d.ts::InputMessages": {
      "declaration": "{\n  clear: string;\n  loading: string;\n}",
      "docstring": "",
      "path": "src/components/input/assets/input/t9n/index.d.ts"
    },
    "src/components/input-date-picker/assets/input-date-picker/t9n/index.d.ts::InputDatePickerMessages": {
      "declaration": "{\n  chooseDate: string;\n  dateFormat: string;\n}",
      "docstring": "",
      "path": "src/components/input-date-picker/assets/input-date-picker/t9n/index.d.ts"
    },
    "src/components/input-number/assets/input-number/t9n/index.d.ts::InputNumberMessages": {
      "declaration": "{\n  clear: string;\n  loading: string;\n}",
      "docstring": "",
      "path": "src/components/input-number/assets/input-number/t9n/index.d.ts"
    },
    "src/components/input-text/assets/input-text/t9n/index.d.ts::InputTextMessages": {
      "declaration": "{\n  clear: string;\n  loading: string;\n}",
      "docstring": "",
      "path": "src/components/input-text/assets/input-text/t9n/index.d.ts"
    },
    "src/components/input-time-picker/assets/input-time-picker/t9n/index.d.ts::InputTimePickerMessages": {
      "declaration": "{\n  chooseTime: string;\n}",
      "docstring": "",
      "path": "src/components/input-time-picker/assets/input-time-picker/t9n/index.d.ts"
    },
    "src/components/time-picker/assets/time-picker/t9n/index.d.ts::TimePickerMessages": {
      "declaration": "{\n  fractionalSecond: string;\n  fractionalSecondDown: string;\n  fractionalSecondUp: string;\n  hour: string;\n  hourDown: string;\n  hourUp: string;\n  meridiem: string;\n  meridiemDown: string;\n  meridiemUp: string;\n  minute: string;\n  minuteDown: string;\n  minuteUp: string;\n  second: string;\n  secondDown: string;\n  secondUp: string;\n}",
      "docstring": "",
      "path": "src/components/time-picker/assets/time-picker/t9n/index.d.ts"
    },
    "src/components/input-time-zone/assets/input-time-zone/t9n/index.d.ts::InputTimeZoneMessages": {
      "declaration": "{\n  chooseTimeZone: string;\n  timeZoneLabel: string;\n  \"Africa/Abidjan\": string;\n  \"Africa/Accra\": string;\n  \"Africa/Addis_Ababa\": string;\n  \"Africa/Algiers\": string;\n  \"Africa/Asmera\": string;\n  \"Africa/Bamako\": string;\n  \"Africa/Bangui\": string;\n  \"Africa/Banjul\": string;\n  \"Africa/Bissau\": string;\n  \"Africa/Blantyre\": string;\n  \"Africa/Brazzaville\": string;\n  \"Africa/Bujumbura\": string;\n  \"Africa/Cairo\": string;\n  \"Africa/Casablanca\": string;\n  \"Africa/Ceuta\": string;\n  \"Africa/Conakry\": string;\n  \"Africa/Dakar\": string;\n  \"Africa/Dar_es_Salaam\": string;\n  \"Africa/Djibouti\": string;\n  \"Africa/Douala\": string;\n  \"Africa/El_Aaiun\": string;\n  \"Africa/Freetown\": string;\n  \"Africa/Gaborone\": string;\n  \"Africa/Harare\": string;\n  \"Africa/Johannesburg\": string;\n  \"Africa/Juba\": string;\n  \"Africa/Kampala\": string;\n  \"Africa/Khartoum\": string;\n  \"Africa/Kigali\": string;\n  \"Africa/Kinshasa\": string;\n  \"Africa/Lagos\": string;\n  \"Africa/Libreville\": string;\n  \"Africa/Lome\": string;\n  \"Africa/Luanda\": string;\n  \"Africa/Lubumbashi\": string;\n  \"Africa/Lusaka\": string;\n  \"Africa/Malabo\": string;\n  \"Africa/Maputo\": string;\n  \"Africa/Maseru\": string;\n  \"Africa/Mbabane\": string;\n  \"Africa/Mogadishu\": string;\n  \"Africa/Monrovia\": string;\n  \"Africa/Nairobi\": string;\n  \"Africa/Ndjamena\": string;\n  \"Africa/Niamey\": string;\n  \"Africa/Nouakchott\": string;\n  \"Africa/Ouagadougou\": string;\n  \"Africa/Porto-Novo\": string;\n  \"Africa/Sao_Tome\": string;\n  \"Africa/Tripoli\": string;\n  \"Africa/Tunis\": string;\n  \"Africa/Windhoek\": string;\n  \"America/Adak\": string;\n  \"America/Anchorage\": string;\n  \"America/Anguilla\": string;\n  \"America/Antigua\": string;\n  \"America/Araguaina\": string;\n  \"America/Argentina/La_Rioja\": string;\n  \"America/Argentina/Rio_Gallegos\": string;\n  \"America/Argentina/Salta\": string;\n  \"America/Argentina/San_Juan\": string;\n  \"America/Argentina/San_Luis\": string;\n  \"America/Argentina/Tucuman\": string;\n  \"America/Argentina/Ushuaia\": string;\n  \"America/Aruba\": string;\n  \"America/Asuncion\": string;\n  \"America/Bahia\": string;\n  \"America/Bahia_Banderas\": string;\n  \"America/Barbados\": string;\n  \"America/Belem\": string;\n  \"America/Belize\": string;\n  \"America/Blanc-Sablon\": string;\n  \"America/Boa_Vista\": string;\n  \"America/Bogota\": string;\n  \"America/Boise\": string;\n  \"America/Buenos_Aires\": string;\n  \"America/Cambridge_Bay\": string;\n  \"America/Campo_Grande\": string;\n  \"America/Cancun\": string;\n  \"America/Caracas\": string;\n  \"America/Catamarca\": string;\n  \"America/Cayenne\": string;\n  \"America/Cayman\": string;\n  \"America/Chicago\": string;\n  \"America/Chihuahua\": string;\n  \"America/Ciudad_Juarez\": string;\n  \"America/Coral_Harbour\": string;\n  \"America/Cordoba\": string;\n  \"America/Costa_Rica\": string;\n  \"America/Creston\": string;\n  \"America/Cuiaba\": string;\n  \"America/Curacao\": string;\n  \"America/Danmarkshavn\": string;\n  \"America/Dawson\": string;\n  \"America/Dawson_Creek\": string;\n  \"America/Denver\": string;\n  \"America/Detroit\": string;\n  \"America/Dominica\": string;\n  \"America/Edmonton\": string;\n  \"America/Eirunepe\": string;\n  \"America/El_Salvador\": string;\n  \"America/Fort_Nelson\": string;\n  \"America/Fortaleza\": string;\n  \"America/Glace_Bay\": string;\n  \"America/Godthab\": string;\n  \"America/Goose_Bay\": string;\n  \"America/Grand_Turk\": string;\n  \"America/Grenada\": string;\n  \"America/Guadeloupe\": string;\n  \"America/Guatemala\": string;\n  \"America/Guayaquil\": string;\n  \"America/Guyana\": string;\n  \"America/Halifax\": string;\n  \"America/Havana\": string;\n  \"America/Hermosillo\": string;\n  \"America/Indiana/Knox\": string;\n  \"America/Indiana/Marengo\": string;\n  \"America/Indiana/Petersburg\": string;\n  \"America/Indiana/Tell_City\": string;\n  \"America/Indiana/Vevay\": string;\n  \"America/Indiana/Vincennes\": string;\n  \"America/Indiana/Winamac\": string;\n  \"America/Indianapolis\": string;\n  \"America/Inuvik\": string;\n  \"America/Iqaluit\": string;\n  \"America/Jamaica\": string;\n  \"America/Jujuy\": string;\n  \"America/Juneau\": string;\n  \"America/Kentucky/Monticello\": string;\n  \"America/Kralendijk\": string;\n  \"America/La_Paz\": string;\n  \"America/Lima\": string;\n  \"America/Los_Angeles\": string;\n  \"America/Louisville\": string;\n  \"America/Lower_Princes\": string;\n  \"America/Maceio\": string;\n  \"America/Managua\": string;\n  \"America/Manaus\": string;\n  \"America/Marigot\": string;\n  \"America/Martinique\": string;\n  \"America/Matamoros\": string;\n  \"America/Mazatlan\": string;\n  \"America/Mendoza\": string;\n  \"America/Menominee\": string;\n  \"America/Merida\": string;\n  \"America/Metlakatla\": string;\n  \"America/Mexico_City\": string;\n  \"America/Miquelon\": string;\n  \"America/Moncton\": string;\n  \"America/Monterrey\": string;\n  \"America/Montevideo\": string;\n  \"America/Montreal\": string;\n  \"America/Montserrat\": string;\n  \"America/Nassau\": string;\n  \"America/New_York\": string;\n  \"America/Nipigon\": string;\n  \"America/Nome\": string;\n  \"America/Noronha\": string;\n  \"America/North_Dakota/Beulah\": string;\n  \"America/North_Dakota/Center\": string;\n  \"America/North_Dakota/New_Salem\": string;\n  \"America/Ojinaga\": string;\n  \"America/Panama\": string;\n  \"America/Pangnirtung\": string;\n  \"America/Paramaribo\": string;\n  \"America/Phoenix\": string;\n  \"America/Port-au-Prince\": string;\n  \"America/Port_of_Spain\": string;\n  \"America/Porto_Velho\": string;\n  \"America/Puerto_Rico\": string;\n  \"America/Punta_Arenas\": string;\n  \"America/Rainy_River\": string;\n  \"America/Rankin_Inlet\": string;\n  \"America/Recife\": string;\n  \"America/Regina\": string;\n  \"America/Resolute\": string;\n  \"America/Rio_Branco\": string;\n  \"America/Santa_Isabel\": string;\n  \"America/Santarem\": string;\n  \"America/Santiago\": string;\n  \"America/Santo_Domingo\": string;\n  \"America/Sao_Paulo\": string;\n  \"America/Scoresbysund\": string;\n  \"America/Sitka\": string;\n  \"America/St_Barthelemy\": string;\n  \"America/St_Johns\": string;\n  \"America/St_Kitts\": string;\n  \"America/St_Lucia\": string;\n  \"America/St_Thomas\": string;\n  \"America/St_Vincent\": string;\n  \"America/Swift_Current\": string;\n  \"America/Tegucigalpa\": string;\n  \"America/Thule\": string;\n  \"America/Thunder_Bay\": string;\n  \"America/Tijuana\": string;\n  \"America/Toronto\": string;\n  \"America/Tortola\": string;\n  \"America/Vancouver\": string;\n  \"America/Whitehorse\": string;\n  \"America/Winnipeg\": string;\n  \"America/Yakutat\": string;\n  \"America/Yellowknife\": string;\n  \"Antarctica/Casey\": string;\n  \"Antarctica/Davis\": string;\n  \"Antarctica/DumontDUrville\": string;\n  \"Antarctica/Macquarie\": string;\n  \"Antarctica/Mawson\": string;\n  \"Antarctica/McMurdo\": string;\n  \"Antarctica/Palmer\": string;\n  \"Antarctica/Rothera\": string;\n  \"Antarctica/Syowa\": string;\n  \"Antarctica/Troll\": string;\n  \"Antarctica/Vostok\": string;\n  \"Arctic/Longyearbyen\": string;\n  \"Asia/Aden\": string;\n  \"Asia/Almaty\": string;\n  \"Asia/Amman\": string;\n  \"Asia/Anadyr\": string;\n  \"Asia/Aqtau\": string;\n  \"Asia/Aqtobe\": string;\n  \"Asia/Ashgabat\": string;\n  \"Asia/Atyrau\": string;\n  \"Asia/Baghdad\": string;\n  \"Asia/Bahrain\": string;\n  \"Asia/Baku\": string;\n  \"Asia/Bangkok\": string;\n  \"Asia/Barnaul\": string;\n  \"Asia/Beirut\": string;\n  \"Asia/Bishkek\": string;\n  \"Asia/Brunei\": string;\n  \"Asia/Calcutta\": string;\n  \"Asia/Chita\": string;\n  \"Asia/Choibalsan\": string;\n  \"Asia/Colombo\": string;\n  \"Asia/Damascus\": string;\n  \"Asia/Dhaka\": string;\n  \"Asia/Dili\": string;\n  \"Asia/Dubai\": string;\n  \"Asia/Dushanbe\": string;\n  \"Asia/Famagusta\": string;\n  \"Asia/Gaza\": string;\n  \"Asia/Hebron\": string;\n  \"Asia/Hong_Kong\": string;\n  \"Asia/Hovd\": string;\n  \"Asia/Irkutsk\": string;\n  \"Asia/Jakarta\": string;\n  \"Asia/Jayapura\": string;\n  \"Asia/Jerusalem\": string;\n  \"Asia/Kabul\": string;\n  \"Asia/Kamchatka\": string;\n  \"Asia/Karachi\": string;\n  \"Asia/Katmandu\": string;\n  \"Asia/Khandyga\": string;\n  \"Asia/Krasnoyarsk\": string;\n  \"Asia/Kuala_Lumpur\": string;\n  \"Asia/Kuching\": string;\n  \"Asia/Kuwait\": string;\n  \"Asia/Macau\": string;\n  \"Asia/Magadan\": string;\n  \"Asia/Makassar\": string;\n  \"Asia/Manila\": string;\n  \"Asia/Muscat\": string;\n  \"Asia/Nicosia\": string;\n  \"Asia/Novokuznetsk\": string;\n  \"Asia/Novosibirsk\": string;\n  \"Asia/Omsk\": string;\n  \"Asia/Oral\": string;\n  \"Asia/Phnom_Penh\": string;\n  \"Asia/Pontianak\": string;\n  \"Asia/Pyongyang\": string;\n  \"Asia/Qatar\": string;\n  \"Asia/Qostanay\": string;\n  \"Asia/Qyzylorda\": string;\n  \"Asia/Rangoon\": string;\n  \"Asia/Riyadh\": string;\n  \"Asia/Saigon\": string;\n  \"Asia/Sakhalin\": string;\n  \"Asia/Samarkand\": string;\n  \"Asia/Seoul\": string;\n  \"Asia/Shanghai\": string;\n  \"Asia/Singapore\": string;\n  \"Asia/Srednekolymsk\": string;\n  \"Asia/Taipei\": string;\n  \"Asia/Tashkent\": string;\n  \"Asia/Tbilisi\": string;\n  \"Asia/Tehran\": string;\n  \"Asia/Thimphu\": string;\n  \"Asia/Tokyo\": string;\n  \"Asia/Tomsk\": string;\n  \"Asia/Ulaanbaatar\": string;\n  \"Asia/Urumqi\": string;\n  \"Asia/Ust-Nera\": string;\n  \"Asia/Vientiane\": string;\n  \"Asia/Vladivostok\": string;\n  \"Asia/Yakutsk\": string;\n  \"Asia/Yekaterinburg\": string;\n  \"Asia/Yerevan\": string;\n  \"Atlantic/Azores\": string;\n  \"Atlantic/Bermuda\": string;\n  \"Atlantic/Canary\": string;\n  \"Atlantic/Cape_Verde\": string;\n  \"Atlantic/Faeroe\": string;\n  \"Atlantic/Madeira\": string;\n  \"Atlantic/Reykjavik\": string;\n  \"Atlantic/South_Georgia\": string;\n  \"Atlantic/St_Helena\": string;\n  \"Atlantic/Stanley\": string;\n  \"Australia/Adelaide\": string;\n  \"Australia/Brisbane\": string;\n  \"Australia/Broken_Hill\": string;\n  \"Australia/Currie\": string;\n  \"Australia/Darwin\": string;\n  \"Australia/Eucla\": string;\n  \"Australia/Hobart\": string;\n  \"Australia/Lindeman\": string;\n  \"Australia/Lord_Howe\": string;\n  \"Australia/Melbourne\": string;\n  \"Australia/Perth\": string;\n  \"Australia/Sydney\": string;\n  \"Europe/Amsterdam\": string;\n  \"Europe/Andorra\": string;\n  \"Europe/Astrakhan\": string;\n  \"Europe/Athens\": string;\n  \"Europe/Belgrade\": string;\n  \"Europe/Berlin\": string;\n  \"Europe/Bratislava\": string;\n  \"Europe/Brussels\": string;\n  \"Europe/Bucharest\": string;\n  \"Europe/Budapest\": string;\n  \"Europe/Busingen\": string;\n  \"Europe/Chisinau\": string;\n  \"Europe/Copenhagen\": string;\n  \"Europe/Dublin\": string;\n  \"Europe/Gibraltar\": string;\n  \"Europe/Guernsey\": string;\n  \"Europe/Helsinki\": string;\n  \"Europe/Isle_of_Man\": string;\n  \"Europe/Istanbul\": string;\n  \"Europe/Jersey\": string;\n  \"Europe/Kaliningrad\": string;\n  \"Europe/Kiev\": string;\n  \"Europe/Kirov\": string;\n  \"Europe/Lisbon\": string;\n  \"Europe/Ljubljana\": string;\n  \"Europe/London\": string;\n  \"Europe/Luxembourg\": string;\n  \"Europe/Madrid\": string;\n  \"Europe/Malta\": string;\n  \"Europe/Mariehamn\": string;\n  \"Europe/Minsk\": string;\n  \"Europe/Monaco\": string;\n  \"Europe/Moscow\": string;\n  \"Europe/Oslo\": string;\n  \"Europe/Paris\": string;\n  \"Europe/Podgorica\": string;\n  \"Europe/Prague\": string;\n  \"Europe/Riga\": string;\n  \"Europe/Rome\": string;\n  \"Europe/Samara\": string;\n  \"Europe/San_Marino\": string;\n  \"Europe/Sarajevo\": string;\n  \"Europe/Saratov\": string;\n  \"Europe/Simferopol\": string;\n  \"Europe/Skopje\": string;\n  \"Europe/Sofia\": string;\n  \"Europe/Stockholm\": string;\n  \"Europe/Tallinn\": string;\n  \"Europe/Tirane\": string;\n  \"Europe/Ulyanovsk\": string;\n  \"Europe/Uzhgorod\": string;\n  \"Europe/Vaduz\": string;\n  \"Europe/Vatican\": string;\n  \"Europe/Vienna\": string;\n  \"Europe/Vilnius\": string;\n  \"Europe/Volgograd\": string;\n  \"Europe/Warsaw\": string;\n  \"Europe/Zagreb\": string;\n  \"Europe/Zaporozhye\": string;\n  \"Europe/Zurich\": string;\n  \"Indian/Antananarivo\": string;\n  \"Indian/Chagos\": string;\n  \"Indian/Christmas\": string;\n  \"Indian/Cocos\": string;\n  \"Indian/Comoro\": string;\n  \"Indian/Kerguelen\": string;\n  \"Indian/Mahe\": string;\n  \"Indian/Maldives\": string;\n  \"Indian/Mauritius\": string;\n  \"Indian/Mayotte\": string;\n  \"Indian/Reunion\": string;\n  \"Pacific/Apia\": string;\n  \"Pacific/Auckland\": string;\n  \"Pacific/Bougainville\": string;\n  \"Pacific/Chatham\": string;\n  \"Pacific/Easter\": string;\n  \"Pacific/Efate\": string;\n  \"Pacific/Enderbury\": string;\n  \"Pacific/Fakaofo\": string;\n  \"Pacific/Fiji\": string;\n  \"Pacific/Funafuti\": string;\n  \"Pacific/Galapagos\": string;\n  \"Pacific/Gambier\": string;\n  \"Pacific/Guadalcanal\": string;\n  \"Pacific/Guam\": string;\n  \"Pacific/Honolulu\": string;\n  \"Pacific/Johnston\": string;\n  \"Pacific/Kiritimati\": string;\n  \"Pacific/Kosrae\": string;\n  \"Pacific/Kwajalein\": string;\n  \"Pacific/Majuro\": string;\n  \"Pacific/Marquesas\": string;\n  \"Pacific/Midway\": string;\n  \"Pacific/Nauru\": string;\n  \"Pacific/Niue\": string;\n  \"Pacific/Norfolk\": string;\n  \"Pacific/Noumea\": string;\n  \"Pacific/Pago_Pago\": string;\n  \"Pacific/Palau\": string;\n  \"Pacific/Pitcairn\": string;\n  \"Pacific/Ponape\": string;\n  \"Pacific/Port_Moresby\": string;\n  \"Pacific/Rarotonga\": string;\n  \"Pacific/Saipan\": string;\n  \"Pacific/Tahiti\": string;\n  \"Pacific/Tarawa\": string;\n  \"Pacific/Tongatapu\": string;\n  \"Pacific/Truk\": string;\n  \"Pacific/Wake\": string;\n  \"Pacific/Wallis\": string;\n}",
      "docstring": "",
      "path": "src/components/input-time-zone/assets/input-time-zone/t9n/index.d.ts"
    },
    "src/components/input-time-zone/interfaces.d.ts::TimeZoneMode": {
      "declaration": "export type TimeZoneMode = \"offset\" | \"name\";",
      "docstring": "",
      "path": "src/components/input-time-zone/interfaces.d.ts"
    },
    "src/components/list/interfaces.ts::ListDragDetail": {
      "declaration": "export interface ListDragDetail extends DragDetail {\n  toEl: HTMLCalciteListElement;\n  fromEl: HTMLCalciteListElement;\n  dragEl: HTMLCalciteListItemElement;\n}",
      "docstring": "",
      "path": "src/components/list/interfaces.ts"
    },
    "src/components/list-item/interfaces.d.ts::ItemData": {
      "declaration": "interface Array<T> {\n    /**\n     * Gets or sets the length of the array. This is a number one higher than the highest index in the array.\n     */\n    length: number;\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n    /**\n     * Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.\n     */\n    toLocaleString(): string;\n    /**\n     * Removes the last element from an array and returns it.\n     * If the array is empty, undefined is returned and the array is not modified.\n     */\n    pop(): T | undefined;\n    /**\n     * Appends new elements to the end of an array, and returns the new length of the array.\n     * @param items New elements to add to the array.\n     */\n    push(...items: T[]): number;\n    /**\n     * Combines two or more arrays.\n     * This method returns a new array without modifying any existing arrays.\n     * @param items Additional arrays and/or items to add to the end of the array.\n     */\n    concat(...items: ConcatArray<T>[]): T[];\n    /**\n     * Combines two or more arrays.\n     * This method returns a new array without modifying any existing arrays.\n     * @param items Additional arrays and/or items to add to the end of the array.\n     */\n    concat(...items: (T | ConcatArray<T>)[]): T[];\n    /**\n     * Adds all the elements of an array into a string, separated by the specified separator string.\n     * @param separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n    /**\n     * Reverses the elements in an array in place.\n     * This method mutates the array and returns a reference to the same array.\n     */\n    reverse(): T[];\n    /**\n     * Removes the first element from an array and returns it.\n     * If the array is empty, undefined is returned and the array is not modified.\n     */\n    shift(): T | undefined;\n    /**\n     * Returns a copy of a section of an array.\n     * For both start and end, a negative index can be used to indicate an offset from the end of the array.\n     * For example, -2 refers to the second to last element of the array.\n     * @param start The beginning index of the specified portion of the array.\n     * If start is undefined, then the slice begins at index 0.\n     * @param end The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\n     * If end is undefined, then the slice extends to the end of the array.\n     */\n    slice(start?: number, end?: number): T[];\n    /**\n     * Sorts an array in place.\n     * This method mutates the array and returns a reference to the same array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: T, b: T) => number): this;\n    /**\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n     * @param start The zero-based location in the array from which to start removing elements.\n     * @param deleteCount The number of elements to remove.\n     * @returns An array containing the elements that were deleted.\n     */\n    splice(start: number, deleteCount?: number): T[];\n    /**\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n     * @param start The zero-based location in the array from which to start removing elements.\n     * @param deleteCount The number of elements to remove.\n     * @param items Elements to insert into the array in place of the deleted elements.\n     * @returns An array containing the elements that were deleted.\n     */\n    splice(start: number, deleteCount: number, ...items: T[]): T[];\n    /**\n     * Inserts new elements at the start of an array, and returns the new length of the array.\n     * @param items Elements to insert at the start of the array.\n     */\n    unshift(...items: T[]): number;\n    /**\n     * Returns the index of the first occurrence of a value in an array, or -1 if it is not present.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n     */\n    indexOf(searchElement: T, fromIndex?: number): number;\n    /**\n     * Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array.\n     */\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): this is S[];\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): S[];\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): T[];\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n\n    [n: number]: T;\n}",
      "docstring": "",
      "path": "src/components/list-item/interfaces.d.ts"
    },
    "src/components/list/assets/list/t9n/index.d.ts::ListMessages": {
      "declaration": "{\n  filterEnabled: string;\n  total: string;\n}",
      "docstring": "",
      "path": "src/components/list/assets/list/t9n/index.d.ts"
    },
    "src/components/list/resources.ts::SelectionAppearance": {
      "declaration": "export type SelectionAppearance = \"border\" | \"icon\";",
      "docstring": "",
      "path": "src/components/list/resources.ts"
    },
    "src/components/list-item/assets/list-item/t9n/index.d.ts::ListItemMessages": {
      "declaration": "{\n  close: string;\n  expand: string;\n  collapse: string;\n}",
      "docstring": "",
      "path": "src/components/list-item/assets/list-item/t9n/index.d.ts"
    },
    "src/components/menu/assets/menu/t9n/index.d.ts::MenuMessages": {
      "declaration": "{\n  more: string;\n}",
      "docstring": "",
      "path": "src/components/menu/assets/menu/t9n/index.d.ts"
    },
    "src/components/menu-item/assets/menu-item/t9n/index.d.ts::MenuItemMessages": {
      "declaration": "{\n  submenu: string;\n  open: string;\n}",
      "docstring": "",
      "path": "src/components/menu-item/assets/menu-item/t9n/index.d.ts"
    },
    "src/components/menu-item/interfaces.ts::MenuItemCustomEvent": {
      "declaration": "export interface MenuItemCustomEvent {\n  event: KeyboardEvent;\n  children?: HTMLCalciteMenuItemElement[];\n  isSubmenuOpen?: boolean;\n}",
      "docstring": "",
      "path": "src/components/menu-item/interfaces.ts"
    },
    "src/components/meter/interfaces.ts::MeterLabelType": {
      "declaration": "export type MeterLabelType = \"percent\" | \"units\";",
      "docstring": "",
      "path": "src/components/meter/interfaces.ts"
    },
    "src/components/modal/assets/modal/t9n/index.d.ts::ModalMessages": {
      "declaration": "{\n  close: string;\n}",
      "docstring": "",
      "path": "src/components/modal/assets/modal/t9n/index.d.ts"
    },
    "src/components/notice/assets/notice/t9n/index.d.ts::NoticeMessages": {
      "declaration": "{\n  close: string;\n}",
      "docstring": "",
      "path": "src/components/notice/assets/notice/t9n/index.d.ts"
    },
    "src/components/pagination/assets/pagination/t9n/index.d.ts::PaginationMessages": {
      "declaration": "{\n  next: string;\n  previous: string;\n  first: string;\n  last: string;\n}",
      "docstring": "",
      "path": "src/components/pagination/assets/pagination/t9n/index.d.ts"
    },
    "src/components/panel/assets/panel/t9n/index.d.ts::PanelMessages": {
      "declaration": "{\n  close: string;\n  options: string;\n  collapse: string;\n  expand: string;\n}",
      "docstring": "",
      "path": "src/components/panel/assets/panel/t9n/index.d.ts"
    },
    "src/components/pick-list/resources.ts::ICON_TYPES": {
      "declaration": "export enum ICON_TYPES {\n  circle = \"circle\",\n  square = \"square\",\n  grip = \"grip\",\n}",
      "docstring": "",
      "path": "src/components/pick-list/resources.ts"
    },
    "src/components/pick-list-item/assets/pick-list-item/t9n/index.d.ts::PickListItemMessages": {
      "declaration": "{\n  remove: string;\n}",
      "docstring": "",
      "path": "src/components/pick-list-item/assets/pick-list-item/t9n/index.d.ts"
    },
    "src/components/popover/assets/popover/t9n/index.d.ts::PopoverMessages": {
      "declaration": "{\n  close: string;\n}",
      "docstring": "",
      "path": "src/components/popover/assets/popover/t9n/index.d.ts"
    },
    "src/utils/floating-ui.ts::ReferenceElement": {
      "declaration": "export type ReferenceElement = VirtualElement | Element;",
      "docstring": "",
      "path": "src/utils/floating-ui.ts"
    },
    "src/components/rating/assets/rating/t9n/index.d.ts::RatingMessages": {
      "declaration": "{\n  rating: string;\n  stars: string;\n}",
      "docstring": "",
      "path": "src/components/rating/assets/rating/t9n/index.d.ts"
    },
    "src/components/scrim/assets/scrim/t9n/index.d.ts::ScrimMessages": {
      "declaration": "{\n  loading: string;\n}",
      "docstring": "",
      "path": "src/components/scrim/assets/scrim/t9n/index.d.ts"
    },
    "src/components/sheet/interfaces.ts::DisplayMode": {
      "declaration": "export type DisplayMode = \"float\" | \"overlay\";",
      "docstring": "",
      "path": "src/components/sheet/interfaces.ts"
    },
    "src/components/shell-panel/interfaces.d.ts::DisplayMode": {
      "declaration": "export type DisplayMode = \"dock\" | \"float\" | \"overlay\";",
      "docstring": "",
      "path": "src/components/shell-panel/interfaces.d.ts"
    },
    "src/components/shell-panel/assets/shell-panel/t9n/index.d.ts::ShellPanelMessages": {
      "declaration": "{\n  resize: string;\n}",
      "docstring": "",
      "path": "src/components/shell-panel/assets/shell-panel/t9n/index.d.ts"
    },
    "src/components/button/interfaces.ts::DropdownIconType": {
      "declaration": "export type DropdownIconType = \"chevron\" | \"caret\" | \"ellipsis\" | \"overflow\";",
      "docstring": "",
      "path": "src/components/button/interfaces.ts"
    },
    "src/components/stepper/interfaces.ts::StepperLayout": {
      "declaration": "export type StepperLayout = \"horizontal\" | \"vertical\" | \"horizontal-single\";",
      "docstring": "",
      "path": "src/components/stepper/interfaces.ts"
    },
    "src/components/stepper/assets/stepper/t9n/index.d.ts::StepperMessages": {
      "declaration": "{\n  label: string;\n  previousStep: string;\n  nextStep: string;\n}",
      "docstring": "",
      "path": "src/components/stepper/assets/stepper/t9n/index.d.ts"
    },
    "src/components/stepper/interfaces.ts::StepperItemChangeEventDetail": {
      "declaration": "export interface StepperItemChangeEventDetail {\n  position: number;\n}",
      "docstring": "",
      "path": "src/components/stepper/interfaces.ts"
    },
    "src/components/stepper-item/assets/stepper-item/t9n/index.d.ts::StepperItemMessages": {
      "declaration": "{\n  complete: string;\n  previousStep: string;\n  nextStep: string;\n}",
      "docstring": "",
      "path": "src/components/stepper-item/assets/stepper-item/t9n/index.d.ts"
    },
    "src/components/stepper/interfaces.ts::StepperItemKeyEventDetail": {
      "declaration": "export interface StepperItemKeyEventDetail {\n  item: KeyboardEvent;\n}",
      "docstring": "",
      "path": "src/components/stepper/interfaces.ts"
    },
    "src/components/stepper/interfaces.ts::StepperItemEventDetail": {
      "declaration": "export interface StepperItemEventDetail {\n  position: number;\n}",
      "docstring": "",
      "path": "src/components/stepper/interfaces.ts"
    },
    "src/components/tabs/interfaces.ts::TabLayout": {
      "declaration": "export type TabLayout = \"center\" | \"inline\";",
      "docstring": "",
      "path": "src/components/tabs/interfaces.ts"
    },
    "src/components/tabs/interfaces.ts::TabPosition": {
      "declaration": "export type TabPosition = \"top\" | \"bottom\";",
      "docstring": "",
      "path": "src/components/tabs/interfaces.ts"
    },
    "src/components/tab/interfaces.ts::TabChangeEventDetail": {
      "declaration": "export interface TabChangeEventDetail {\n  /**\n   * The tab ID that just became selected\n   */\n  tab: number | string;\n}",
      "docstring": "",
      "path": "src/components/tab/interfaces.ts"
    },
    "src/components/tab-title/assets/tab-title/t9n/index.d.ts::TabTitleMessages": {
      "declaration": "{\n  close: string;\n}",
      "docstring": "",
      "path": "src/components/tab-title/assets/tab-title/t9n/index.d.ts"
    },
    "src/components/tab/interfaces.ts::TabCloseEventDetail": {
      "declaration": "export interface TabCloseEventDetail {\n  /**\n   * The tab ID that just became closed\n   */\n  tab: number | string;\n}",
      "docstring": "",
      "path": "src/components/tab/interfaces.ts"
    },
    "src/components/tabs/interfaces.ts::TabID": {
      "declaration": "export type TabID = string | number;",
      "docstring": "",
      "path": "src/components/tabs/interfaces.ts"
    },
    "src/components/table/interfaces.ts::TableInteractionMode": {
      "declaration": "export type TableInteractionMode = \"interactive\" | \"static\";",
      "docstring": "",
      "path": "src/components/table/interfaces.ts"
    },
    "src/components/table/interfaces.ts::TableLayout": {
      "declaration": "export type TableLayout = \"auto\" | \"fixed\";",
      "docstring": "",
      "path": "src/components/table/interfaces.ts"
    },
    "src/components/table/assets/table/t9n/index.d.ts::TableMessages": {
      "declaration": "{\n  clear: string;\n  hiddenSelected: string;\n  page: string;\n  row: string;\n  selected: string;\n}",
      "docstring": "",
      "path": "src/components/table/assets/table/t9n/index.d.ts"
    },
    "src/components/table/interfaces.ts::TableRowFocusEvent": {
      "declaration": "export interface TableRowFocusEvent {\n  cellPosition: number;\n  rowPosition: number;\n  destination: FocusElementInGroupDestination;\n  lastCell: boolean;\n}",
      "docstring": "",
      "path": "src/components/table/interfaces.ts"
    },
    "src/components/table/interfaces.ts::RowType": {
      "declaration": "export type RowType = \"head\" | \"body\" | \"foot\";",
      "docstring": "",
      "path": "src/components/table/interfaces.ts"
    },
    "src/components/table-cell/assets/table-cell/t9n/index.d.ts::TableCellMessages": {
      "declaration": "{\n  keyboardDeselect: string;\n  keyboardSelect: string;\n  row: string;\n  selected: string;\n  unselected: string;\n}",
      "docstring": "",
      "path": "src/components/table-cell/assets/table-cell/t9n/index.d.ts"
    },
    "src/components/table-header/assets/table-header/t9n/index.d.ts::TableHeaderMessages": {
      "declaration": "{\n  all: string;\n  keyboardDeselectAll: string;\n  keyboardSelectAll: string;\n  rowNumber: string;\n  selected: string;\n  selectionColumn: string;\n}",
      "docstring": "",
      "path": "src/components/table-header/assets/table-header/t9n/index.d.ts"
    },
    "src/components/text-area/assets/text-area/t9n/index.d.ts::TextAreaMessages": {
      "declaration": "{\n  invalid: string;\n  tooLong: string;\n}",
      "docstring": "",
      "path": "src/components/text-area/assets/text-area/t9n/index.d.ts"
    },
    "src/components/tile-select/interfaces.ts::TileSelectType": {
      "declaration": "export type TileSelectType = \"radio\" | \"checkbox\";",
      "docstring": "",
      "path": "src/components/tile-select/interfaces.ts"
    },
    "src/components/tile-select-group/interfaces.ts::TileSelectGroupLayout": {
      "declaration": "export type TileSelectGroupLayout = \"vertical\" | \"horizontal\";",
      "docstring": "",
      "path": "src/components/tile-select-group/interfaces.ts"
    },
    "src/components/tip/assets/tip/t9n/index.d.ts::TipMessages": {
      "declaration": "{\n  close: string;\n}",
      "docstring": "",
      "path": "src/components/tip/assets/tip/t9n/index.d.ts"
    },
    "src/components/tip-manager/assets/tip-manager/t9n/index.d.ts::TipManagerMessages": {
      "declaration": "{\n  defaultGroupTitle: string;\n  defaultPaginationLabel: string;\n  close: string;\n  previous: string;\n  next: string;\n}",
      "docstring": "",
      "path": "src/components/tip-manager/assets/tip-manager/t9n/index.d.ts"
    },
    "src/components/tree-item/interfaces.ts::TreeItemSelectDetail": {
      "declaration": "export interface TreeItemSelectDetail {\n  /**\n   * Indicate if an item should be added to the current selection.\n   */\n  modifyCurrentSelection: boolean;\n\n  /**\n   * Indicates if an item selected & indeterminate properties should be updated.\n   * This will be set to true for user interaction changes and false for programmatic changes.\n   */\n  updateItem?: boolean;\n}",
      "docstring": "",
      "path": "src/components/tree-item/interfaces.ts"
    },
    "src/components/value-list-item/interfaces.ts::ListItemAndHandle": {
      "declaration": "export interface ListItemAndHandle {\n  item: HTMLCalciteValueListItemElement;\n  handle: HTMLSpanElement;\n}",
      "docstring": "",
      "path": "src/components/value-list-item/interfaces.ts"
    }
  }
}