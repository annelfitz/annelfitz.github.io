{"file":"t9n-9c5bc36c.js","mappings":";;;;;;;;;;AAKO,MAAM,iCAAiC,GAA2C,EAAE,CAAC;AAE5F,eAAe,gBAAgB,CAAC,IAAY,EAAE,SAAiB;IAC7D,MAAM,GAAG,GAAG,GAAG,SAAS,IAAI,IAAI,EAAE,CAAC;IAEnC,IAAI,iCAAiC,CAAC,GAAG,CAAC,EAAE;QAC1C,OAAO,iCAAiC,CAAC,GAAG,CAAC,CAAC;KAC/C;IAED,iCAAiC,CAAC,GAAG,CAAC,GAAG,KAAK,CAACA,kBAAY,CAAC,YAAY,SAAS,iBAAiB,IAAI,OAAO,CAAC,CAAC;SAC5G,IAAI,CAAC,CAAC,IAAI;QACT,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;YACZ,sBAAsB,EAAE,CAAC;SAC1B;QACD,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;KACpB,CAAC;SACD,KAAK,CAAC,MAAM,sBAAsB,EAAE,CAAC,CAAC;IAEzC,OAAO,iCAAiC,CAAC,GAAG,CAAC,CAAC;AAChD,CAAC;AAED,SAAS,sBAAsB;IAC7B,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;AAC9D,CAAC;AAED,SAAS,aAAa,CAAC,SAAuB;IAC5C,SAAS,CAAC,QAAQ,GAAG;QACnB,GAAG,SAAS,CAAC,eAAe;QAC5B,GAAG,SAAS,CAAC,gBAAgB;KAC9B,CAAC;AACJ,CAAC;AAED;;;;;AAKO,eAAe,aAAa,CAAC,SAAuB;IACzD,SAAS,CAAC,eAAe,GAAG,MAAM,aAAa,CAAC,SAAS,EAAE,SAAS,CAAC,eAAe,CAAC,CAAC;IACtF,aAAa,CAAC,SAAS,CAAC,CAAC;AAC3B,CAAC;AAED,eAAe,aAAa,CAAC,SAAuB,EAAE,IAAY;IAKhE,MAAM,EAAE,EAAE,EAAE,GAAG,SAAS,CAAC;IACzB,MAAM,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;IACrC,MAAM,aAAa,GAAG,GAAG,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;IAElD,OAAO,gBAAgB,CAACC,yBAAkB,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,aAAa,CAAC,CAAC;AAC1E,CAAC;AAED;;;;;;;;;;;AAWO,eAAe,cAAc,CAAC,SAAuB,EAAE,IAAY;IACxE,SAAS,CAAC,eAAe,GAAG,MAAM,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IACjE,aAAa,CAAC,SAAS,CAAC,CAAC;AAC3B,CAAC;AAED;;;;;;;;;SASgB,eAAe,CAAC,SAAuB;IACrD,SAAS,CAAC,gBAAgB,GAAG,uBAAuB,CAAC;AACvD,CAAC;AAED;;;;;;;SAOgB,kBAAkB,CAAC,SAAuB;IACxD,SAAS,CAAC,gBAAgB,GAAG,SAAS,CAAC;AACzC,CAAC;AA6CD,SAAS,uBAAuB;IAC9B,aAAa,CAAC,IAAI,CAAC,CAAC;AACtB;;;;;;;","names":["getAssetPath","getSupportedLocale"],"sources":["src/utils/t9n.ts"],"sourcesContent":["import { Build, getAssetPath } from \"@stencil/core\";\nimport { getSupportedLocale, LocalizedComponent } from \"./locale\";\n\nexport type MessageBundle = Record<string, string>;\n\nexport const componentLangToMessageBundleCache: Record<string, Promise<MessageBundle>> = {};\n\nasync function getMessageBundle(lang: string, component: string): Promise<MessageBundle> {\n  const key = `${component}_${lang}`;\n\n  if (componentLangToMessageBundleCache[key]) {\n    return componentLangToMessageBundleCache[key];\n  }\n\n  componentLangToMessageBundleCache[key] = fetch(getAssetPath(`./assets/${component}/t9n/messages_${lang}.json`))\n    .then((resp) => {\n      if (!resp.ok) {\n        throwMessageFetchError();\n      }\n      return resp.json();\n    })\n    .catch(() => throwMessageFetchError());\n\n  return componentLangToMessageBundleCache[key];\n}\n\nfunction throwMessageFetchError(): never {\n  throw new Error(\"could not fetch component message bundle\");\n}\n\nfunction mergeMessages(component: T9nComponent): void {\n  component.messages = {\n    ...component.defaultMessages,\n    ...component.messageOverrides,\n  };\n}\n\n/**\n * This utility sets up the messages used by the component. It should be awaited in the `componentWillLoad` lifecycle hook.\n *\n * @param component\n */\nexport async function setUpMessages(component: T9nComponent): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, component.effectiveLocale);\n  mergeMessages(component);\n}\n\nasync function fetchMessages(component: T9nComponent, lang: string): Promise<MessageBundle> {\n  if (!Build.isBrowser) {\n    return {};\n  }\n\n  const { el } = component;\n  const tag = el.tagName.toLowerCase();\n  const componentName = tag.replace(\"calcite-\", \"\");\n\n  return getMessageBundle(getSupportedLocale(lang, \"t9n\"), componentName);\n}\n\n/**\n * This utility must be set up for the component to update its default message bundle if the locale changes.\n *\n * It can be set up in **either** of the following ways:\n *\n * 1. called from `LocalizedComponent`'s `onLocaleChange` method or\n * 2. called from a watcher configured to watch `LocalizedComponent`'s `effectiveLocale` prop\n *\n * @param component\n * @param lang\n */\nexport async function updateMessages(component: T9nComponent, lang: string): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, lang);\n  mergeMessages(component);\n}\n\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback`\n *\n * **Note**: this must be called after `LocalizedComponent`'s `connectLocalized` method.\n *\n * @param component\n */\nexport function connectMessages(component: T9nComponent): void {\n  component.onMessagesChange = defaultOnMessagesChange;\n}\n\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectMessages(component: T9nComponent): void {\n  component.onMessagesChange = undefined;\n}\n\n/**\n * This interface enables components to support built-in translation strings.\n *\n * **Notes**:\n *\n * This requires `LocalizedComponent` to be implemented.\n * To avoid unnecessary lookups, composite components should set `lang` on internal t9n components.\n */\nexport interface T9nComponent extends LocalizedComponent {\n  el: HTMLElement;\n\n  /**\n   * This property holds all messages used by the component's rendering.\n   *\n   * This prop should use the `@Prop` decorator. It uses `@Prop` decorator for testing purpose only.\n   */\n  messages: MessageBundle;\n\n  /**\n   * This property holds the component's default messages.\n   */\n  defaultMessages: MessageBundle;\n\n  /**\n   * This property holds all user message overrides.\n   *\n   * This prop should use the `@Prop` decorator.\n   */\n  messageOverrides: Partial<MessageBundle>;\n\n  /**\n   * This private method ensures messages are kept in sync.\n   *\n   * This method should be empty and configured to watch for changes on  `messageOverrides` property.\n   *\n   * @Watch(\"messageOverrides\")\n   * onMessagesChange(): void {\n   *  \\/* wired up by t9n util *\\/\n   * }\n   */\n  onMessagesChange(): void;\n}\n\nfunction defaultOnMessagesChange(this: T9nComponent): void {\n  mergeMessages(this);\n}\n"],"version":3}