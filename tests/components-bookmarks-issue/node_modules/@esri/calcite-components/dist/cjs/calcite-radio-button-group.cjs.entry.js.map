{"file":"calcite-radio-button-group.entry.cjs.js","mappings":";;;;;;;;;;;;;;AAAO,MAAM,GAAG,GAAG;IACjB,WAAW,EAAE,cAAc;CAC5B;;ACFD,MAAM,mBAAmB,GAAG,8kCAA8kC;;MCiC7lC,gBAAgB;;;;QAwE3B,qBAAgB,GAAGA,wBAAc,CAAC,UAAU,EAAE,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAAC;;;;;;QAiC5E,4BAAuB,GAAG;YAChC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAAC,CAAC;YACjF,IAAI,CAAC,YAAY;gBACf,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,KAAK,WAAW,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;YACnF,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;gBAChC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,WAAW;oBACpC,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,WAAW,CAAC,QAAQ,CAAC;oBAC7D,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC;oBACpC,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;oBAC7B,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBACrC,WAAW,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;iBAChC,CAAC,CAAC;aACJ;SACF,CAAC;wBAnGkC,KAAK;sBAQC,YAAY;;wBAWlB,KAAK;4BAO8B,IAAI;qBAGnC,GAAG;sBAGD,MAAM;;;4BAuBS,EAAE;;;;;;;IAlE3D,kBAAkB;QAChB,IAAI,CAAC,uBAAuB,EAAE,CAAC;KAChC;IAYD,gBAAgB;QACd,IAAI,CAAC,uBAAuB,EAAE,CAAC;KAChC;IAMD,cAAc;QACZ,IAAI,CAAC,uBAAuB,EAAE,CAAC;KAChC;IA4BD,aAAa;QACX,IAAI,CAAC,uBAAuB,EAAE,CAAC;KAChC;;;;;;IAoBD,iBAAiB;QACf,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC/B,IAAI,CAAC,gBAAgB,EAAE,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;KAC7E;IAED,iBAAiB;QACfC,+BAAsB,CAAC,IAAI,CAAC,CAAC;KAC9B;IAED,gBAAgB;QACdC,2BAAkB,CAAC,IAAI,CAAC,CAAC;KAC1B;IAED,oBAAoB;QAClB,IAAI,CAAC,gBAAgB,EAAE,UAAU,EAAE,CAAC;KACrC;IAuBO,uBAAuB;QAC7B,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,WAAW,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC;KAC/E;;;;;;;IAqBD,MAAM,QAAQ;QACZ,MAAMC,2BAAkB,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;YACpD,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;SACrC;QACD,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;YAChC,OAAO,IAAI,CAAC,uBAAuB,EAAE,EAAE,QAAQ,EAAE,CAAC;SACnD;KACF;;;;;;IASD,wBAAwB,CAAC,KAAkB;QACzC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,MAAuC,CAAC;QAClE,IAAI,CAAC,6BAA6B,CAAC,IAAI,EAAE,CAAC;KAC3C;;;;;;IAQD,MAAM;QACJ,QACEC,QAACC,UAAI,IAAC,IAAI,EAAC,YAAY,IACrBD,iBAAK,KAAK,EAAE,GAAG,CAAC,WAAW,IACzBA,qBAAQ,CACJ,EACL,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,IAClDA,QAACE,qBAAU,IACT,IAAI,EAAE,IAAI,CAAC,cAAc,EACzB,OAAO,EAAE,IAAI,CAAC,iBAAiB,EAC/B,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,MAAM,EAAE,IAAI,CAAC,MAAM,GACnB,IACA,IAAI,CACH,EACP;KACH;;;;;;;;;;;;;","names":["createObserver","setUpLoadableComponent","setComponentLoaded","componentFocusable","h","Host","Validation"],"sources":["src/components/radio-button-group/resources.ts","src/components/radio-button-group/radio-button-group.scss?tag=calcite-radio-button-group&encapsulation=shadow","src/components/radio-button-group/radio-button-group.tsx"],"sourcesContent":["export const CSS = {\n  itemWrapper: \"item-wrapper\",\n};\n",":host {\n  @apply flex flex-col;\n}\n\n:host > .item-wrapper {\n  @apply flex;\n  max-inline-size: 100vw;\n}\n\n:host([layout=\"horizontal\"]) > .item-wrapper {\n  @apply flex-row flex-wrap;\n}\n\n:host([layout=\"horizontal\"][scale=\"s\"]) > .item-wrapper {\n  @apply gap-x-4;\n}\n\n:host([layout=\"horizontal\"][scale=\"m\"]) > .item-wrapper {\n  @apply gap-x-5;\n}\n\n:host([layout=\"horizontal\"][scale=\"l\"]) > .item-wrapper {\n  @apply gap-x-6;\n}\n\n:host([layout=\"vertical\"]) > .item-wrapper {\n  @apply flex-col;\n}\n\n:host([scale=\"s\"]) calcite-input-message {\n  --calcite-input-message-spacing-value: calc(var(--calcite-spacing-xxs) * -1);\n}\n\n:host([scale=\"m\"]) calcite-input-message {\n  --calcite-input-message-spacing-value: calc(var(--calcite-spacing-sm) * -1);\n}\n\n:host([scale=\"l\"]) calcite-input-message {\n  --calcite-input-message-spacing-value: calc(var(--calcite-spacing-md) * -1);\n}\n\n@include form-validation-message();\n@include base-component();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Layout, Scale, Status } from \"../interfaces\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { Validation } from \"../functional/Validation\";\nimport { CSS } from \"./resources\";\n\n/**\n * @slot - A slot for adding `calcite-radio-button`s.\n */\n@Component({\n  tag: \"calcite-radio-button-group\",\n  styleUrl: \"radio-button-group.scss\",\n  shadow: true,\n})\nexport class RadioButtonGroup implements LoadableComponent {\n  //--------------------------------------------------------------------------\n  //\n  //  Global attributes\n  //\n  //--------------------------------------------------------------------------\n\n  @Watch(\"hidden\")\n  handleHiddenChange(): void {\n    this.passPropsToRadioButtons();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** When `true`, interaction is prevented and the component is displayed with lower opacity. */\n  @Prop({ reflect: true }) disabled = false;\n\n  @Watch(\"disabled\")\n  onDisabledChange(): void {\n    this.passPropsToRadioButtons();\n  }\n\n  /** Defines the layout of the component. */\n  @Prop({ reflect: true }) layout: Layout = \"horizontal\";\n\n  @Watch(\"layout\")\n  onLayoutChange(): void {\n    this.passPropsToRadioButtons();\n  }\n\n  /** Specifies the name of the component on form submission. Must be unique to other component instances. */\n  @Prop({ reflect: true }) name!: string;\n\n  /** When `true`, the component must have a value in order for the form to submit. */\n  @Prop({ reflect: true }) required = false;\n\n  /**\n   * Specifies the component's selected item.\n   *\n   * @readonly\n   */\n  @Prop({ mutable: true }) selectedItem: HTMLCalciteRadioButtonElement = null;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the status of the validation message. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  /** Specifies the validation message to display under the component. */\n  @Prop() validationMessage: string;\n\n  /** Specifies the validation icon to display under the component. */\n  @Prop({ reflect: true }) validationIcon: string | boolean;\n\n  @Watch(\"scale\")\n  onScaleChange(): void {\n    this.passPropsToRadioButtons();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el!: HTMLCalciteRadioButtonGroupElement;\n\n  mutationObserver = createObserver(\"mutation\", () => this.passPropsToRadioButtons());\n\n  @State() radioButtons: HTMLCalciteRadioButtonElement[] = [];\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.passPropsToRadioButtons();\n    this.mutationObserver?.observe(this.el, { childList: true, subtree: true });\n  }\n\n  componentWillLoad(): void {\n    setUpLoadableComponent(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  disconnectedCallback(): void {\n    this.mutationObserver?.disconnect();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private passPropsToRadioButtons = (): void => {\n    this.radioButtons = Array.from(this.el.querySelectorAll(\"calcite-radio-button\"));\n    this.selectedItem =\n      Array.from(this.radioButtons).find((radioButton) => radioButton.checked) || null;\n    if (this.radioButtons.length > 0) {\n      this.radioButtons.forEach((radioButton) => {\n        radioButton.disabled = this.disabled || radioButton.disabled;\n        radioButton.hidden = this.el.hidden;\n        radioButton.name = this.name;\n        radioButton.required = this.required;\n        radioButton.scale = this.scale;\n      });\n    }\n  };\n\n  private getFocusableRadioButton(): HTMLCalciteRadioButtonElement | null {\n    return this.radioButtons.find((radiobutton) => !radiobutton.disabled) ?? null;\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Fires when the component has changed.\n   */\n  @Event({ cancelable: false }) calciteRadioButtonGroupChange: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Method\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the fist focusable `calcite-radio-button` element in the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    if (this.selectedItem && !this.selectedItem.disabled) {\n      return this.selectedItem.setFocus();\n    }\n    if (this.radioButtons.length > 0) {\n      return this.getFocusableRadioButton()?.setFocus();\n    }\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Event Listeners\n  //\n  //--------------------------------------------------------------------------\n\n  @Listen(\"calciteRadioButtonChange\")\n  radioButtonChangeHandler(event: CustomEvent): void {\n    this.selectedItem = event.target as HTMLCalciteRadioButtonElement;\n    this.calciteRadioButtonGroupChange.emit();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    return (\n      <Host role=\"radiogroup\">\n        <div class={CSS.itemWrapper}>\n          <slot />\n        </div>\n        {this.validationMessage && this.status === \"invalid\" ? (\n          <Validation\n            icon={this.validationIcon}\n            message={this.validationMessage}\n            scale={this.scale}\n            status={this.status}\n          />\n        ) : null}\n      </Host>\n    );\n  }\n}\n"],"version":3}