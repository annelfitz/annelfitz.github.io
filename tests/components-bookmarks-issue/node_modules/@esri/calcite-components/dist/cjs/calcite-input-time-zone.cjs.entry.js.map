{"file":"calcite-input-time-zone.entry.cjs.js","mappings":"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","names":["locale","getDateTimeFormat","componentFocusable","updateMessages","connectForm","connectLabel","connectLocalized","connectMessages","disconnectForm","disconnectLabel","disconnectLocalized","disconnectMessages","setUpLoadableComponent","setUpMessages","afterConnectDefaultValueSet","setComponentLoaded","updateHostInteraction","h","Host","InteractiveContainer","HiddenFormInputSlot"],"sources":["src/components/input-time-zone/utils.ts","src/components/input-time-zone/input-time-zone.scss?tag=calcite-input-time-zone&encapsulation=shadow","src/components/input-time-zone/input-time-zone.tsx"],"sourcesContent":["import { TimeZoneItem, TimeZoneMode, TimeZoneName } from \"./interfaces\";\nimport { getDateTimeFormat, SupportedLocale } from \"../../utils/locale\";\nimport { InputTimeZoneMessages } from \"./assets/input-time-zone/t9n\";\n\nconst hourToMinutes = 60;\n\nconst timeZoneNameBlockList = [\n  \"CET\",\n  \"CST6CDT\",\n  \"EET\",\n  \"EST\",\n  \"EST5EDT\",\n  \"Factory\",\n  \"HST\",\n  \"MET\",\n  \"MST\",\n  \"MST7MDT\",\n  \"PST8PDT\",\n  \"UTC\",\n  \"WET\",\n];\n\nfunction timeZoneOffsetToDecimal(shortOffsetTimeZoneName: string): string {\n  const minusSign = \"âˆ’\";\n  const hyphen = \"-\";\n\n  return (\n    shortOffsetTimeZoneName\n      .replace(\":15\", \".25\")\n      .replace(\":30\", \".5\")\n      .replace(\":45\", \".75\")\n\n      // ensures decimal string representation is parseable\n      .replace(minusSign, hyphen)\n  );\n}\n\nfunction toOffsetValue(timeZoneName: TimeZoneName, referenceDateInMs: number): number {\n  // we use \"en-US\" to allow us to reliably remove the standard time token\n  const offset = getTimeZoneShortOffset(timeZoneName, \"en-US\", referenceDateInMs).replace(\"GMT\", \"\");\n\n  if (offset === \"\") {\n    return 0;\n  }\n\n  return Number(timeZoneOffsetToDecimal(offset)) * hourToMinutes;\n}\n\nexport function getUserTimeZoneOffset(): number {\n  const localDate = new Date();\n  return localDate.getTimezoneOffset() * -1;\n}\n\nexport function getUserTimeZoneName(): string {\n  const dateFormatter = new Intl.DateTimeFormat();\n  return dateFormatter.resolvedOptions().timeZone;\n}\n\n/**\n * The lazy-loaded timezone-groups lib to be used across instances.\n */\nlet timeZoneGroups: Promise<[any, any]>;\n\nexport async function createTimeZoneItems(\n  locale: SupportedLocale,\n  messages: InputTimeZoneMessages,\n  mode: TimeZoneMode,\n  referenceDate: Date,\n): Promise<TimeZoneItem[]> {\n  const referenceDateInMs: number = referenceDate.getTime();\n  const timeZoneNames = Intl.supportedValuesOf(\"timeZone\");\n\n  if (mode === \"offset\") {\n    if (!timeZoneGroups) {\n      timeZoneGroups = Promise.all([\n        import(\"timezone-groups/dist/index.js\"),\n        import(\"timezone-groups/dist/strategy/native/index.js\"),\n      ]);\n    }\n\n    return timeZoneGroups.then(async ([{ groupTimeZones }, { DateEngine }]) => {\n      const timeZoneGroups: { labelTzIndices: number[]; tzs: TimeZoneName[] }[] = await groupTimeZones({\n        dateEngine: new DateEngine(),\n        groupDateRange: 1,\n        startDate: new Date(referenceDateInMs).toISOString(),\n      });\n\n      const listFormatter = new Intl.ListFormat(locale, { style: \"long\", type: \"conjunction\" });\n\n      // we remove blocked entries from tzs and adjust label indices accordingly\n      timeZoneGroups.forEach((group) => {\n        const indexOffsets: number[] = [];\n        let removedSoFar = 0;\n\n        group.tzs.forEach((tz, index) => {\n          if (timeZoneNameBlockList.includes(tz)) {\n            removedSoFar++;\n          }\n          indexOffsets[index] = removedSoFar;\n        });\n\n        group.tzs = group.tzs.filter((tz) => !timeZoneNameBlockList.includes(tz));\n\n        group.labelTzIndices = group.labelTzIndices\n          .map((index) => index - indexOffsets[index])\n          .filter((index) => index >= 0 && index < group.tzs.length);\n      });\n\n      return timeZoneGroups\n        .map<TimeZoneItem<number>>(({ labelTzIndices, tzs }) => {\n          const groupRepTz = tzs[0];\n          const decimalOffset = timeZoneOffsetToDecimal(getTimeZoneShortOffset(groupRepTz, locale, referenceDateInMs));\n          const value = toOffsetValue(groupRepTz, referenceDateInMs);\n          const tzLabels = labelTzIndices.map((index: number) => {\n            const timeZone = tzs[index];\n            const timeZoneLabel = messages[timeZone];\n            return (\n              timeZoneLabel ||\n              // get city token\n              timeZone.split(\"/\").pop()\n            );\n          });\n\n          const label = createTimeZoneOffsetLabel(messages, decimalOffset, listFormatter.format(tzLabels));\n\n          return {\n            label,\n            value,\n            filterValue: tzs.map((tz) => toUserFriendlyName(tz)),\n          };\n        })\n        .filter((group) => !!group)\n        .sort((groupA, groupB) => groupA.value - groupB.value);\n    });\n  }\n\n  return timeZoneNames\n    .map<TimeZoneItem<string>>((timeZone) => {\n      const label = toUserFriendlyName(timeZone);\n      const value = timeZone;\n\n      return {\n        label,\n        value,\n        filterValue: timeZone,\n      };\n    })\n    .filter((group) => !!group)\n    .sort();\n}\n\n/**\n * Exported for testing purposes only\n *\n * @internal\n */\nexport function toUserFriendlyName(timeZoneName: string): string {\n  return timeZoneName.replace(/_/g, \" \");\n}\n\nfunction createTimeZoneOffsetLabel(messages: InputTimeZoneMessages, offsetLabel: string, groupLabel: string): string {\n  return messages.timeZoneLabel.replace(\"{offset}\", offsetLabel).replace(\"{cities}\", groupLabel);\n}\n\nfunction getTimeZoneShortOffset(\n  timeZone: TimeZoneName,\n  locale: SupportedLocale,\n  referenceDateInMs: number = Date.now(),\n): string {\n  const dateTimeFormat = getDateTimeFormat(locale, { timeZone, timeZoneName: \"shortOffset\" });\n  const parts = dateTimeFormat.formatToParts(referenceDateInMs);\n  return parts.find(({ type }) => type === \"timeZoneName\").value;\n}\n",":host {\n  display: block;\n}\n\n@include base-component();\n@include disabled();\n@include hidden-form-input();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { connectLabel, disconnectLabel, LabelableComponent } from \"../../utils/label\";\nimport {\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport {\n  connectLocalized,\n  disconnectLocalized,\n  LocalizedComponent,\n  SupportedLocale,\n} from \"../../utils/locale\";\nimport { TimeZoneItem, TimeZoneMode } from \"./interfaces\";\nimport { Scale, Status } from \"../interfaces\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { InputTimeZoneMessages } from \"./assets/input-time-zone/t9n\";\nimport { createTimeZoneItems, getUserTimeZoneName, getUserTimeZoneOffset } from \"./utils\";\nimport { OverlayPositioning } from \"../../utils/floating-ui\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport {\n  afterConnectDefaultValueSet,\n  connectForm,\n  disconnectForm,\n  FormComponent,\n  HiddenFormInputSlot,\n} from \"../../utils/form\";\n\n@Component({\n  tag: \"calcite-input-time-zone\",\n  styleUrl: \"input-time-zone.scss\",\n  assetsDirs: [\"assets\"],\n  shadow: {\n    delegatesFocus: true,\n  },\n})\nexport class InputTimeZone\n  implements\n    FormComponent,\n    InteractiveComponent,\n    LabelableComponent,\n    LoadableComponent,\n    LocalizedComponent,\n    T9nComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * The `id` of the form that will be associated with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   */\n  @Prop({ reflect: true }) form: string;\n\n  /** Specifies the component's maximum number of options to display before displaying a scrollbar. */\n  @Prop({ reflect: true }) maxItems = 0;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: InputTimeZoneMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<InputTimeZoneMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /**\n   * This specifies the type of `value` and the associated options presented to the user:\n   *\n   * Using `\"offset\"` will provide options that show timezone offsets.\n   *\n   * Using `\"name\"` will provide options that show the IANA time zone names.\n   *\n   * @default \"offset\"\n   */\n  @Prop({ reflect: true }) mode: TimeZoneMode = \"offset\";\n\n  @Watch(\"messages\")\n  @Watch(\"mode\")\n  @Watch(\"referenceDate\")\n  handleTimeZoneItemPropsChange(): void {\n    this.updateTimeZoneItemsAndSelection();\n  }\n\n  /** Specifies the validation message to display under the component. */\n  @Prop() validationMessage: string;\n\n  /** Specifies the validation icon to display under the component. */\n  @Prop({ reflect: true }) validationIcon: string | boolean;\n\n  /**\n   * Specifies the name of the component.\n   *\n   * Required to pass the component's `value` on form submission.\n   */\n  @Prop({ reflect: true }) name: string;\n\n  /** When `true`, displays and positions the component. */\n  @Prop({ mutable: true, reflect: true }) open = false;\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  /**\n   * This `date` will be used as a reference to Daylight Savings Time when creating time zone item groups.\n   *\n   * It can be either a Date instance or a string in ISO format (`\"YYYY-MM-DD\"`, `\"YYYY-MM-DDTHH:MM:SS.SSSZ\"`).\n   *\n   * @see [Date.prototype.toISOString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\n   */\n  @Prop() referenceDate: Date | string;\n\n  /**\n   * When `true`, the component must have a value in order for the form to submit.\n   *\n   * @internal\n   */\n  @Prop({ reflect: true }) required = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the status of the input field, which determines message and icons. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  /**\n   * The component's value, where the value is the time zone offset or the difference, in minutes, between the selected time zone and UTC.\n   *\n   * If no value is provided, the user's time zone offset will be selected by default.\n   *\n   * @see https://www.w3.org/International/core/2005/09/timezone.html#:~:text=What%20is%20a%20%22zone%20offset,or%20%22%2D%22%20from%20UTC.\n   */\n  @Prop({ mutable: true }) value: string;\n\n  @Watch(\"value\")\n  handleValueChange(value: string, oldValue: string): void {\n    const timeZoneItem = this.findTimeZoneItem(value);\n\n    if (!timeZoneItem) {\n      this.value = oldValue;\n      return;\n    }\n\n    this.selectedTimeZoneItem = timeZoneItem;\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    await this.comboboxEl.setFocus();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Fires when the component is requested to be closed and before the closing transition begins.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneBeforeClose: EventEmitter<void>;\n\n  /**\n   * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneBeforeOpen: EventEmitter<void>;\n\n  /**\n   * Fires when the component's `value` changes.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneChange: EventEmitter<void>;\n\n  /**\n   * Fires after the component is closed and animation is complete.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneClose: EventEmitter<void>;\n\n  /**\n   * Fires after the component is opened and animation is complete.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneOpen: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteInputTimeZoneElement;\n\n  private comboboxEl: HTMLCalciteComboboxElement;\n\n  @State() defaultMessages: InputTimeZoneMessages;\n\n  defaultValue: InputTimeZone[\"value\"];\n\n  @State() effectiveLocale: SupportedLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleWatcher(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  formEl: HTMLFormElement;\n\n  labelEl: HTMLCalciteLabelElement;\n\n  private selectedTimeZoneItem: TimeZoneItem;\n\n  private timeZoneItems: TimeZoneItem[];\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  onLabelClick(): void {\n    this.setFocus();\n  }\n\n  private setComboboxRef = (el: HTMLCalciteComboboxElement): void => {\n    this.comboboxEl = el;\n  };\n\n  private onComboboxBeforeClose = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.calciteInputTimeZoneBeforeClose.emit();\n  };\n\n  private onComboboxBeforeOpen = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.calciteInputTimeZoneBeforeOpen.emit();\n  };\n\n  private onComboboxChange = (event: CustomEvent): void => {\n    event.stopPropagation();\n    const combobox = event.target as HTMLCalciteComboboxElement;\n    const selected = this.findTimeZoneItem(combobox.selectedItems[0].getAttribute(\"data-value\"));\n\n    const selectedValue = `${selected.value}`;\n    if (this.value === selectedValue) {\n      return;\n    }\n\n    this.value = selectedValue;\n    this.selectedTimeZoneItem = selected;\n    this.calciteInputTimeZoneChange.emit();\n  };\n\n  private onComboboxClose = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.open = false;\n    this.calciteInputTimeZoneClose.emit();\n  };\n\n  private onComboboxOpen = (event: CustomEvent): void => {\n    this.open = true;\n    event.stopPropagation();\n    this.calciteInputTimeZoneOpen.emit();\n  };\n\n  private findTimeZoneItem(value: number | string): TimeZoneItem {\n    const valueToMatch = value;\n\n    return this.timeZoneItems.find(\n      ({ value }) =>\n        // intentional == to match string to number\n        value == valueToMatch,\n    );\n  }\n\n  private async updateTimeZoneItemsAndSelection(): Promise<void> {\n    this.timeZoneItems = await this.createTimeZoneItems();\n\n    const fallbackValue = this.mode === \"offset\" ? getUserTimeZoneOffset() : getUserTimeZoneName();\n    const valueToMatch = this.value ?? fallbackValue;\n\n    this.selectedTimeZoneItem = this.findTimeZoneItem(valueToMatch);\n\n    if (!this.selectedTimeZoneItem) {\n      this.selectedTimeZoneItem = this.findTimeZoneItem(fallbackValue);\n    }\n  }\n\n  private async createTimeZoneItems(): Promise<TimeZoneItem[]> {\n    if (!this.effectiveLocale || !this.messages) {\n      return [];\n    }\n\n    return createTimeZoneItems(\n      this.effectiveLocale,\n      this.messages,\n      this.mode,\n      this.referenceDate instanceof Date\n        ? this.referenceDate\n        : new Date(this.referenceDate ?? Date.now()),\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectForm(this);\n    connectLabel(this);\n    connectLocalized(this);\n    connectMessages(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectForm(this);\n    disconnectLabel(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n\n    await this.updateTimeZoneItemsAndSelection();\n\n    const selectedValue = `${this.selectedTimeZoneItem.value}`;\n    afterConnectDefaultValueSet(this, selectedValue);\n    this.value = selectedValue;\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  render(): VNode {\n    return (\n      <Host>\n        <InteractiveContainer disabled={this.disabled}>\n          <calcite-combobox\n            clearDisabled={true}\n            disabled={this.disabled}\n            label={this.messages.chooseTimeZone}\n            lang={this.effectiveLocale}\n            maxItems={this.maxItems}\n            onCalciteComboboxBeforeClose={this.onComboboxBeforeClose}\n            onCalciteComboboxBeforeOpen={this.onComboboxBeforeOpen}\n            onCalciteComboboxChange={this.onComboboxChange}\n            onCalciteComboboxClose={this.onComboboxClose}\n            onCalciteComboboxOpen={this.onComboboxOpen}\n            open={this.open}\n            overlayPositioning={this.overlayPositioning}\n            scale={this.scale}\n            selectionMode=\"single-persist\"\n            status={this.status}\n            validation-icon={this.validationIcon}\n            validation-message={this.validationMessage}\n            // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n            ref={this.setComboboxRef}\n          >\n            {this.timeZoneItems.map((group) => {\n              const selected = this.selectedTimeZoneItem === group;\n              const { label, value } = group;\n\n              return (\n                <calcite-combobox-item\n                  data-value={value}\n                  key={label}\n                  selected={selected}\n                  textLabel={label}\n                  value={`${group.filterValue}`}\n                />\n              );\n            })}\n          </calcite-combobox>\n          <HiddenFormInputSlot component={this} />\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n}\n"],"version":3}