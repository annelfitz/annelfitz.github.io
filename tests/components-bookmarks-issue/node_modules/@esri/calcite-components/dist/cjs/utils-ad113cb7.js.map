{"file":"utils-ad113cb7.js","mappings":"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","names":[],"sources":["src/components/color-picker/utils.ts"],"sourcesContent":["import { ColorValue, HSLA, HSVA, RGB, RGBA } from \"./interfaces\";\nimport Color from \"color\";\n\nexport const hexChar = /^[0-9A-F]$/i;\nconst shorthandHex = /^#[0-9A-F]{3}$/i;\nconst longhandHex = /^#[0-9A-F]{6}$/i;\nconst shorthandHexWithAlpha = /^#[0-9A-F]{4}$/i;\nconst longhandHexWithAlpha = /^#[0-9A-F]{8}$/i;\n\nexport const alphaToOpacity = (alpha: number): number => Number((alpha * 100).toFixed());\n\nexport const opacityToAlpha = (opacity: number): number => Number((opacity / 100).toFixed(2));\n\nexport function isValidHex(hex: string, hasAlpha = false): boolean {\n  return isShorthandHex(hex, hasAlpha) || isLonghandHex(hex, hasAlpha);\n}\n\nexport function canConvertToHexa(hex: string): boolean {\n  const validHex = isValidHex(hex, false);\n  const validHexa = isValidHex(hex, true);\n  return !validHexa && validHex;\n}\n\nfunction evaluateHex(hex: string, length: number, pattern: RegExp): boolean {\n  if (!hex) {\n    return false;\n  }\n\n  return hex.length === length && pattern.test(hex);\n}\n\nexport function isShorthandHex(hex: string, hasAlpha = false): boolean {\n  const hexLength = hasAlpha ? 5 : 4;\n  const hexPattern = hasAlpha ? shorthandHexWithAlpha : shorthandHex;\n\n  return evaluateHex(hex, hexLength, hexPattern);\n}\n\nexport function isLonghandHex(hex: string, hasAlpha = false): boolean {\n  const hexLength = hasAlpha ? 9 : 7;\n  const hexPattern = hasAlpha ? longhandHexWithAlpha : longhandHex;\n\n  return evaluateHex(hex, hexLength, hexPattern);\n}\n\nexport function normalizeHex(hex: string, hasAlpha = false, convertFromHexToHexa = false): string {\n  hex = hex.toLowerCase();\n\n  if (!hex.startsWith(\"#\")) {\n    hex = `#${hex}`;\n  }\n\n  if (isShorthandHex(hex, hasAlpha)) {\n    return rgbToHex(hexToRGB(hex, hasAlpha));\n  }\n\n  if (hasAlpha && convertFromHexToHexa && isValidHex(hex, false /* we only care about RGB hex for conversion */)) {\n    const isShorthand = isShorthandHex(hex, false);\n    return rgbToHex(hexToRGB(`${hex}${isShorthand ? \"f\" : \"ff\"}`, true));\n  }\n\n  return hex;\n}\n\nexport function hexify(color: Color, hasAlpha = false): string {\n  return hasAlpha ? color.hexa() : color.hex();\n}\n\nexport function rgbToHex(color: RGB | RGBA): string {\n  const { r, g, b } = color;\n\n  const rChars = numToHex(r);\n  const gChars = numToHex(g);\n  const bChars = numToHex(b);\n  const alphaChars = \"a\" in color ? numToHex(color.a * 255) : \"\";\n\n  return `#${rChars}${gChars}${bChars}${alphaChars}`.toLowerCase();\n}\n\nfunction numToHex(num: number): string {\n  return num.toString(16).padStart(2, \"0\");\n}\n\nexport function normalizeAlpha<T extends RGBA | HSVA | HSLA>(colorObject: ReturnType<Color[\"object\"]>): T {\n  const normalized = { ...colorObject, a: colorObject.alpha ?? 1 /* Color() will omit alpha if 1 */ };\n  delete normalized.alpha;\n\n  return normalized as T;\n}\n\nexport function normalizeColor(alphaColorObject: RGBA | HSVA | HSLA): ReturnType<Color[\"object\"]> {\n  const normalized = { ...alphaColorObject, alpha: alphaColorObject.a ?? 1 };\n  delete normalized.a;\n\n  return normalized;\n}\n\nexport function hexToRGB(hex: string, hasAlpha = false): RGB | RGBA {\n  if (!isValidHex(hex, hasAlpha)) {\n    return null;\n  }\n\n  hex = hex.replace(\"#\", \"\");\n\n  let r: number;\n  let g: number;\n  let b: number;\n  let a: number;\n  const isShorthand = hex.length === 3 || hex.length === 4;\n\n  if (isShorthand) {\n    const [first, second, third, fourth] = hex.split(\"\");\n\n    r = parseInt(`${first}${first}`, 16);\n    g = parseInt(`${second}${second}`, 16);\n    b = parseInt(`${third}${third}`, 16);\n    a = parseInt(`${fourth}${fourth}`, 16) / 255;\n  } else {\n    r = parseInt(hex.slice(0, 2), 16);\n    g = parseInt(hex.slice(2, 4), 16);\n    b = parseInt(hex.slice(4, 6), 16);\n    a = parseInt(hex.slice(6, 8), 16) / 255;\n  }\n\n  return isNaN(a) ? { r, g, b } : { r, g, b, a };\n}\n\n// these utils allow users to pass enum values as strings without having to access the enum\n// based on the approach suggested by https://github.com/microsoft/TypeScript/issues/17690#issuecomment-321365759,\nconst enumify = <T extends { [index: string]: U }, U extends string>(x: T) => x;\ntype Enumify<T> = T[keyof T];\n\nexport const CSSColorMode = enumify({\n  HEX: \"hex\",\n  HEXA: \"hexa\",\n  RGB_CSS: \"rgb-css\",\n  RGBA_CSS: \"rgba-css\",\n  HSL_CSS: \"hsl-css\",\n  HSLA_CSS: \"hsla-css\",\n});\ntype CSSColorMode = Enumify<typeof CSSColorMode>;\n\nexport const ObjectColorMode = enumify({\n  RGB: \"rgb\",\n  RGBA: \"rgba\",\n  HSL: \"hsl\",\n  HSLA: \"hsla\",\n  HSV: \"hsv\",\n  HSVA: \"hsva\",\n});\ntype ObjectColorMode = Enumify<typeof ObjectColorMode>;\n\nexport type SupportedMode = CSSColorMode | ObjectColorMode;\n\nexport type Format = \"auto\" | SupportedMode;\n\nexport function parseMode(colorValue: ColorValue): SupportedMode | null {\n  if (typeof colorValue === \"string\") {\n    if (colorValue.startsWith(\"#\")) {\n      const { length } = colorValue;\n\n      if (length === 4 || length === 7) {\n        return CSSColorMode.HEX;\n      }\n      if (length === 5 || length === 9) {\n        return CSSColorMode.HEXA;\n      }\n    }\n\n    if (colorValue.startsWith(\"rgba(\")) {\n      return CSSColorMode.RGBA_CSS;\n    }\n\n    if (colorValue.startsWith(\"rgb(\")) {\n      return CSSColorMode.RGB_CSS;\n    }\n\n    if (colorValue.startsWith(\"hsl(\")) {\n      return CSSColorMode.HSL_CSS;\n    }\n\n    if (colorValue.startsWith(\"hsla(\")) {\n      return CSSColorMode.HSLA_CSS;\n    }\n  }\n\n  if (typeof colorValue === \"object\") {\n    if (hasChannels(colorValue, \"r\", \"g\", \"b\")) {\n      return hasChannels(colorValue, \"a\") ? ObjectColorMode.RGBA : ObjectColorMode.RGB;\n    }\n\n    if (hasChannels(colorValue, \"h\", \"s\", \"l\")) {\n      return hasChannels(colorValue, \"a\") ? ObjectColorMode.HSLA : ObjectColorMode.HSL;\n    }\n\n    if (hasChannels(colorValue, \"h\", \"s\", \"v\")) {\n      return hasChannels(colorValue, \"a\") ? ObjectColorMode.HSVA : ObjectColorMode.HSV;\n    }\n  }\n\n  return null;\n}\n\nfunction hasChannels(colorObject: Exclude<ColorValue, string> | null, ...channels: string[]): boolean {\n  return channels.every((channel) => channel && colorObject && `${channel}` in colorObject);\n}\n\nexport function colorEqual(value1: Color | null, value2: Color | null): boolean {\n  return value1?.rgb().array().toString() === value2?.rgb().array().toString();\n}\n\nexport function alphaCompatible(mode: SupportedMode): boolean {\n  return (\n    mode === CSSColorMode.HEXA ||\n    mode === CSSColorMode.RGBA_CSS ||\n    mode === CSSColorMode.HSLA_CSS ||\n    mode === ObjectColorMode.RGBA ||\n    mode === ObjectColorMode.HSLA ||\n    mode === ObjectColorMode.HSVA\n  );\n}\n\nexport function toAlphaMode(mode: SupportedMode): SupportedMode {\n  const alphaMode =\n    mode === CSSColorMode.HEX\n      ? CSSColorMode.HEXA\n      : mode === CSSColorMode.RGB_CSS\n        ? CSSColorMode.RGBA_CSS\n        : mode === CSSColorMode.HSL_CSS\n          ? CSSColorMode.HSLA_CSS\n          : mode === ObjectColorMode.RGB\n            ? ObjectColorMode.RGBA\n            : mode === ObjectColorMode.HSL\n              ? ObjectColorMode.HSLA\n              : mode === ObjectColorMode.HSV\n                ? ObjectColorMode.HSVA\n                : mode;\n\n  return alphaMode;\n}\n\nexport function toNonAlphaMode(mode: SupportedMode): SupportedMode {\n  const nonAlphaMode =\n    mode === CSSColorMode.HEXA\n      ? CSSColorMode.HEX\n      : mode === CSSColorMode.RGBA_CSS\n        ? CSSColorMode.RGB_CSS\n        : mode === CSSColorMode.HSLA_CSS\n          ? CSSColorMode.HSL_CSS\n          : mode === ObjectColorMode.RGBA\n            ? ObjectColorMode.RGB\n            : mode === ObjectColorMode.HSLA\n              ? ObjectColorMode.HSL\n              : mode === ObjectColorMode.HSVA\n                ? ObjectColorMode.HSV\n                : mode;\n\n  return nonAlphaMode;\n}\n"],"version":3}