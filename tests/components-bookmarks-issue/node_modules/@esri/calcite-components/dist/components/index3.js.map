{"file":"index3.js","mappings":"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","names":[],"sources":["../../node_modules/timezone-groups/dist/index.js"],"sourcesContent":["const supportedTimeZones = (() => {\n    const platformTimeZones = Intl.supportedValuesOf('timeZone');\n    // not all browsers include these time zones, so we add them to ensure consistent groups\n    const etcTimeZones = [\n        \"Etc/GMT+1\",\n        \"Etc/GMT+10\",\n        \"Etc/GMT+11\",\n        \"Etc/GMT+12\",\n        \"Etc/GMT+2\",\n        \"Etc/GMT+3\",\n        \"Etc/GMT+4\",\n        \"Etc/GMT+5\",\n        \"Etc/GMT+6\",\n        \"Etc/GMT+7\",\n        \"Etc/GMT+8\",\n        \"Etc/GMT+9\",\n        \"Etc/GMT-1\",\n        \"Etc/GMT-10\",\n        \"Etc/GMT-11\",\n        \"Etc/GMT-12\",\n        \"Etc/GMT-13\",\n        \"Etc/GMT-14\",\n        \"Etc/GMT-2\",\n        \"Etc/GMT-3\",\n        \"Etc/GMT-4\",\n        \"Etc/GMT-5\",\n        \"Etc/GMT-6\",\n        \"Etc/GMT-7\",\n        \"Etc/GMT-8\",\n        \"Etc/GMT-9\"\n    ];\n    return [...new Set([...platformTimeZones, ...etcTimeZones])];\n})();\n\nconst now = new Date();\nconst startDate = now.toISOString();\nconst daysInYear = 365;\nconst groupDateRange = daysInYear;\nconst defaultGroupingOptions = {\n    startDate,\n    groupDateRange,\n    debug: false,\n};\n\nconst continentAllowList = new Set([\n    'Europe',\n    'Asia',\n    'America',\n    'America/Argentina',\n    'Africa',\n    'Australia',\n    'Pacific',\n    'Atlantic',\n    'Antarctica',\n    'Arctic',\n    'Indian',\n]);\nconst _getDates = (startDate, numberDays, dateEngine) => {\n    const dateArray = [];\n    let date = dateEngine.create(startDate);\n    for (let i = 0; i <= numberDays; i++) {\n        date = dateEngine.increase(date);\n        dateArray.push(dateEngine.formatToIsoDateString(date));\n    }\n    return dateArray;\n};\nconst _extractContinent = (label) => {\n    if (label.includes('Istanbul')) {\n        return 'Europe';\n    }\n    const lastIndex = label.lastIndexOf('/');\n    return lastIndex === -1 ? label : label.slice(0, lastIndex);\n};\nconst _isRegularContinent = (continent) => continentAllowList.has(continent);\nconst generateTimeZoneMetadata = (timeZoneItems, startDate, numberDays, dateEngine, debug = false) => {\n    const processedDates = new Map();\n    if (debug) {\n        console.log(`Initializing data starting ${startDate} with ${numberDays} days in the future, comparing ${timeZoneItems.length} timezones`);\n    }\n    const theDates = _getDates(startDate, numberDays, dateEngine);\n    return timeZoneItems.map((tzItem) => {\n        const label = tzItem.label;\n        const continent = _extractContinent(label);\n        const dates = theDates.map((date) => {\n            const key = `${date}-${label}`;\n            let utc = processedDates.get(key);\n            if (utc) {\n                return utc;\n            }\n            utc = dateEngine.isoToTimeZone(date, label);\n            processedDates.set(key, utc);\n            return utc;\n        });\n        return {\n            ...tzItem,\n            continent,\n            isRegularContinent: _isRegularContinent(continent),\n            dates,\n        };\n    });\n};\nconst compareDateArrs = (array1, array2, dateEngine) => array1.length === array2.length &&\n    array1.every((value, index) => dateEngine.same(value, array2[index]));\nconst getGroupLabelTimeZoneIndices = (rawTZs, max = 5) => {\n    const shrinkedTzs = rawTZs.filter(({ label }) => _isRegularContinent(_extractContinent(label)));\n    if (shrinkedTzs.length === 0) {\n        return [0];\n    }\n    const validLabels = shrinkedTzs.map((tz) => rawTZs.indexOf(tz));\n    return equallyDistributedSampling(validLabels, max);\n};\nfunction equallyDistributedSampling(items, maxItems = 5) {\n    const totalItems = items.length;\n    if (totalItems <= maxItems) {\n        return items;\n    }\n    const numberItemsToSelect = Math.min(totalItems - 2, maxItems - 2);\n    const stepSize = (totalItems - 1) / (numberItemsToSelect + 1);\n    return [\n        items[0],\n        ...Array.from({ length: numberItemsToSelect }, (_, i) => items[Math.round((i + 1) * stepSize)]),\n        items[totalItems - 1],\n    ];\n}\n\nasync function groupTimeZones(options) {\n    const { debug, groupDateRange, hooks, startDate, dateEngine } = {\n        ...defaultGroupingOptions,\n        ...options,\n    };\n    const grouping = [];\n    if (!dateEngine) {\n        throw new Error('dateEngine is required');\n    }\n    const timeZoneItems = supportedTimeZones.map((tz) => ({ label: tz }));\n    hooks?.onBeforeTimeZoneMetadataCreate?.(timeZoneItems);\n    const timeZoneMetadata = generateTimeZoneMetadata(timeZoneItems, startDate, groupDateRange, dateEngine, debug);\n    hooks?.onTimeZoneMetadataCreate?.(timeZoneMetadata);\n    // We traverse the mappedDB and see if we find matches by comparing each set\n    // of transformed date for that specific TZ.\n    for (const tzMetadatumI of timeZoneMetadata) {\n        const { label, continent, dates } = tzMetadatumI;\n        // ignore if we visited this element already\n        if (tzMetadatumI.visited) {\n            continue;\n        }\n        // Mark element as already visited\n        tzMetadatumI.visited = true;\n        // The grouped timezone that we want as a result\n        const newGroup = {\n            labelTzIndices: undefined,\n            tzs: [{ label }],\n        };\n        hooks?.onGroupCreate?.(newGroup, tzMetadatumI);\n        for (const tzMetadatumJ of timeZoneMetadata.filter((_) => !_.visited)) {\n            const { label: labelJ, continent: continentJ, isRegularContinent: isRegularContinentJ, dates: datesJ, } = tzMetadatumJ;\n            // We define a matching TZ by:\n            // 1) if both continents match (avoid grouping Antarctica with anything else)\n            // 2) if the transformed dates match in both TZs\n            if ((continent === continentJ || !isRegularContinentJ) &&\n                compareDateArrs(dates, datesJ, dateEngine)) {\n                const tzItem = { label: labelJ };\n                newGroup.tzs.push(tzItem);\n                hooks?.onGroupTimeZoneAdd?.(newGroup, tzItem, tzMetadatumJ);\n                // Mark element as already visited\n                tzMetadatumJ.visited = true;\n            }\n        }\n        grouping.push(newGroup);\n        hooks?.onGroupAdd?.(newGroup);\n    }\n    // Now that we have a group, we want an easy way to find a fitting label for the group\n    // which is defined as the list of the most-common 7 cities, shown in alphabetical order\n    const finalGrouping = grouping\n        .map((group) => {\n        hooks?.onBeforeFinalGroupCreate?.(group);\n        group.tzs = group.tzs.sort((a, b) => a.label.localeCompare(b.label));\n        const finalGrouping = {\n            labelTzIndices: getGroupLabelTimeZoneIndices(group.tzs, 7),\n            tzs: group.tzs.map((_) => _.label),\n        };\n        hooks?.onFinalGroupCreate?.(finalGrouping, group);\n        return finalGrouping;\n    })\n        .sort((a, b) => b.tzs.length - a.tzs.length);\n    if (debug) {\n        const missingTzs = supportedTimeZones\n            .map((tz) => (finalGrouping.some((y) => y.tzs.includes(tz)) ? null : tz))\n            .filter(Boolean);\n        if (missingTzs.length > 0) {\n            throw new Error(`There are ${missingTzs.length} missing timezones: ${missingTzs.toString()}`);\n        }\n    }\n    return hooks?.onFinalGroupingCreate\n        ? hooks.onFinalGroupingCreate(finalGrouping)\n        : finalGrouping;\n}\n\nexport { groupTimeZones };\n"],"version":3}