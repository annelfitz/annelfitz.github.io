{"file":"component.js","mappings":";;;;;SAGgB,YAAY,CAAC,cAAqB;IAChD,OAAO,cAAc,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC5C,CAAC;AAED;;;;;;;AAOO,eAAe,gBAAgB,CAAC,EAAe;IACpD,OAAO,WAAW,CAAC,EAAE,CAAC;UAClB,EAAE,CAAC,gBAAgB,EAAE;UACrB,IAAI,OAAO,CAAO,CAAC,OAAO,KAAK,qBAAqB,CAAC,MAAM,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;AAC9E,CAAC;AAED,SAAS,WAAW,CAAC,EAAe;IAClC,OAAO,OAAQ,EAAyB,CAAC,gBAAgB,KAAK,UAAU,CAAC;AAC3E;;;;","names":[],"sources":["src/utils/component.ts"],"sourcesContent":["import { Scale } from \"../components/interfaces\";\nimport { HTMLStencilElement } from \"@stencil/core/internal\";\n\nexport function getIconScale(componentScale: Scale): Extract<Scale, \"s\" | \"m\"> {\n  return componentScale === \"l\" ? \"m\" : \"s\";\n}\n\n/**\n * This util helps us wait for a component to be ready for both lazy-loading (`dist` output) and non-lazy-loading (`components` output) components.\n *\n * Based on https://github.com/ionic-team/ionic-framework/blob/1a8bd6d/core/src/utils/helpers.ts#L60C1-L79C3\n *\n * @param el - the host element to wait for\n */\nexport async function componentOnReady(el: HTMLElement): Promise<void> {\n  await (isStencilEl(el)\n    ? el.componentOnReady()\n    : new Promise<void>((resolve) => requestAnimationFrame(() => resolve())));\n}\n\nfunction isStencilEl(el: HTMLElement): el is HTMLStencilElement {\n  return typeof (el as HTMLStencilElement).componentOnReady === \"function\";\n}\n"],"version":3}