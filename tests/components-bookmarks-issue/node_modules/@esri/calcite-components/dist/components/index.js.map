{"file":"index.js","mappings":";;;;;;;;AAEA;;;SAGgB,mBAAmB;IACjC,MAAM,EAAE,SAAS,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC;IACpC,MAAM,WAAW,GAAG,MAAM,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC,OAAO,CAAC;IAE9E,MAAM,OAAO,GAAG,MACd,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,WAAW,CAAC,GAAG,MAAM,GAAG,OAAO,CAAC;IAEnG,MAAM,cAAc,GAAG,CAAC,IAAY,KAClC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,mBAAmB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;IAEzG,MAAM,iBAAiB,GAAG,CAAC,OAAe;QACxC,WAAW,KAAK,OAAO,IAAI,cAAc,CAAC,OAAO,CAAC,CAAC;QACnD,WAAW,GAAG,OAAO,CAAC;KACvB,CAAC;IAEF,IAAI,WAAW,GAAG,OAAO,EAAE,CAAC;;IAG5B,cAAc,CAAC,WAAW,CAAC,CAAC;;IAG5B,MAAM;SACH,UAAU,CAAC,8BAA8B,CAAC;SAC1C,gBAAgB,CAAC,QAAQ,EAAE,CAAC,KAAK,KAAK,iBAAiB,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC;;IAG9F,IAAI,gBAAgB,CAAC,MAAM,iBAAiB,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE;QAC9E,UAAU,EAAE,IAAI;QAChB,eAAe,EAAE,CAAC,OAAO,CAAC;KAC3B,CAAC,CAAC;AACL;;ACjCA;;;;;;IAME,MAAM,SAAS,GACb,OAAO,MAAM,KAAK,WAAW;QAC7B,OAAO,QAAQ,KAAK,WAAW;QAC/B,OAAO,QAAQ,KAAK,WAAW;QAC/B,MAAM,CAAC,QAAQ,KAAK,QAAQ;QAC5B,MAAM,CAAC,QAAQ,KAAK,QAAQ,CAAC;IAE/B,IAAI,SAAS,EAAE;QACb,IAAI,QAAQ,CAAC,UAAU,KAAK,aAAa,EAAE;YACzC,mBAAmB,EAAE,CAAC;SACvB;aAAM;YACL,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,MAAM,mBAAmB,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;SAC5F;KACF;AACH;;ACrBO,MAAM,aAAa,GAAG,eAAe;;","names":[],"sources":["src/utils/mode.ts","src/utils/globalScript.ts","@stencil/core/internal/app-globals"],"sourcesContent":["import { autoMode, darkMode } from \"./resources\";\n\n/**\n * Emits when the mode is dynamically toggled between light and dark on <body> or in OS preferences.\n */\nexport function initModeChangeEvent(): void {\n  const { classList } = document.body;\n  const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n\n  const getMode = (): string =>\n    classList.contains(darkMode) || (classList.contains(autoMode) && prefersDark) ? \"dark\" : \"light\";\n\n  const emitModeChange = (mode: string) =>\n    document.body.dispatchEvent(new CustomEvent(\"calciteModeChange\", { bubbles: true, detail: { mode } }));\n\n  const modeChangeHandler = (newMode: string): void => {\n    currentMode !== newMode && emitModeChange(newMode);\n    currentMode = newMode;\n  };\n\n  let currentMode = getMode();\n\n  // emits event on page load\n  emitModeChange(currentMode);\n\n  // emits event when changing OS mode preferences\n  window\n    .matchMedia(\"(prefers-color-scheme: dark)\")\n    .addEventListener(\"change\", (event) => modeChangeHandler(event.matches ? \"dark\" : \"light\"));\n\n  // emits event when toggling between mode classes on <body>\n  new MutationObserver(() => modeChangeHandler(getMode())).observe(document.body, {\n    attributes: true,\n    attributeFilter: [\"class\"],\n  });\n}\n","import { initModeChangeEvent } from \"./mode\";\n\n/**\n * This file is imported in Stencil's `globalScript` config option.\n *\n * @see {@link https://stenciljs.com/docs/config#globalscript}\n */\nexport default function (): void {\n  const isBrowser =\n    typeof window !== \"undefined\" &&\n    typeof location !== \"undefined\" &&\n    typeof document !== \"undefined\" &&\n    window.location === location &&\n    window.document === document;\n\n  if (isBrowser) {\n    if (document.readyState === \"interactive\") {\n      initModeChangeEvent();\n    } else {\n      document.addEventListener(\"DOMContentLoaded\", () => initModeChangeEvent(), { once: true });\n    }\n  }\n}\n","import appGlobalScript from '/home/runner/work/calcite-design-system/calcite-design-system/packages/calcite-components/src/utils/globalScript.ts';\nexport const globalScripts = appGlobalScript;\n"],"version":3}