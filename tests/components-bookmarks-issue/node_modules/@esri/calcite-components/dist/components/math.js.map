{"file":"math.js","mappings":";;;;;MAAa,KAAK,GAAG,CAAC,KAAa,EAAE,GAAW,EAAE,GAAW,KAAa,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE;AAE9G,MAAM,kBAAkB,GAAG,IAAI,MAAM,CAAC,kCAAkC,CAAC,CAAC;AAE1E;;;;;;;;;MASa,aAAa,GAAG,CAAC,KAAsB;IAClD,MAAM,KAAK,GAAG,CAAC,EAAE,GAAG,KAAK,EAAE,KAAK,CAAC,kBAAkB,CAAC,CAAC;IACrD,IAAI,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;QACtC,OAAO,CAAC,CAAC;KACV;IACD,OAAO,IAAI,CAAC,GAAG,CACb,CAAC;;IAED,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC;;SAE5B,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAC7B,CAAC;AACJ,EAAE;SAEc,WAAW,CAAC,KAAa;IACvC,IAAI,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE;QACzC,OAAO,UAAU,CAAC,KAAK,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;KAC1D;IACD,OAAO,KAAK,CAAC;AACf,CAAC;SAEe,KAAK,CAAC,KAAa,EAAE,OAAe,EAAE,OAAe,EAAE,KAAa,EAAE,KAAa;IACjG,OAAO,CAAC,CAAC,KAAK,GAAG,OAAO,KAAK,KAAK,GAAG,KAAK,CAAC,KAAK,OAAO,GAAG,OAAO,CAAC,GAAG,KAAK,CAAC;AAC7E,CAAC;AAED;;;;;;;;SAQgB,gBAAgB,CAAC,KAAa,EAAE,KAAa,EAAE,SAAiB;IAC9E,OAAO,KAAK,GAAG,SAAS,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC;AACpE;;;;","names":[],"sources":["src/utils/math.ts"],"sourcesContent":["export const clamp = (value: number, min: number, max: number): number => Math.max(min, Math.min(value, max));\n\nconst decimalNumberRegex = new RegExp(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n\n/**\n * Returns the quantity of real decimal places for a number, which excludes trailing zeros.\n *\n * Adapted from {@link https://stackoverflow.com/questions/10454518/javascript-how-to-retrieve-the-number-of-decimals-of-a-string-number}.\n *\n * @param decimal - decimal value\n * @param value\n * @returns {number} the amount of decimal places in a number\n */\nexport const decimalPlaces = (value: number | string): number => {\n  const match = (\"\" + value).match(decimalNumberRegex);\n  if (!match || parseInt(match[1]) === 0) {\n    return 0;\n  }\n  return Math.max(\n    0,\n    // Number of digits right of decimal point.\n    (match[1] ? match[1].length : 0) -\n      // Adjust for scientific notation.\n      (match[2] ? +match[2] : 0),\n  );\n};\n\nexport function getDecimals(value: number): number {\n  if (decimalPlaces(value) > 0 && value > 0) {\n    return parseFloat(`0.${value.toString().split(\".\")[1]}`);\n  }\n  return value;\n}\n\nexport function remap(value: number, fromMin: number, fromMax: number, toMin: number, toMax: number): number {\n  return ((value - fromMin) * (toMax - toMin)) / (fromMax - fromMin) + toMin;\n}\n\n/**\n * Helper to determine if a value is close to the edge of a range within a threshold.\n *\n * @param value\n * @param range\n * @param threshold\n * @returns -1 if close to lower edge, 1 if close to upper edge, 0 otherwise.\n */\nexport function closeToRangeEdge(value: number, range: number, threshold: number): number {\n  return value < threshold ? -1 : value > range - threshold ? 1 : 0;\n}\n"],"version":3}