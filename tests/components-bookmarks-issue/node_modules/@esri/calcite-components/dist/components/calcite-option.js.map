{"file":"calcite-option.js","mappings":";;;;;;;;AAAA,MAAM,SAAS,GAAG,yEAAyE;;MCQ9E,MAAM;;;;;;QA4DT,qBAAgB,GAAqB,cAAc,CAAC,UAAU,EAAE;YACtE,IAAI,CAAC,+BAA+B,EAAE,CAAC;YACvC,IAAI,CAAC,2BAA2B,CAAC,IAAI,EAAE,CAAC;SACzC,CAAC,CAAC;wBAlDQ,KAAK;;;;;IA0BN,gBAAgB,CAAC,SAAc,EAAE,SAAc,EAAE,QAAgB;QACzE,IAAI,QAAQ,KAAK,OAAO,IAAI,QAAQ,KAAK,OAAO,EAAE;YAChD,IAAI,CAAC,+BAA+B,EAAE,CAAC;SACxC;QAED,IAAI,CAAC,2BAA2B,CAAC,IAAI,EAAE,CAAC;KACzC;;;;;;IAsCO,+BAA+B;QACrC,MAAM,EACJ,EAAE,EAAE,EAAE,WAAW,EAAE,EACnB,kBAAkB,EAClB,kBAAkB,EAClB,KAAK,EACL,KAAK,GACN,GAAG,IAAI,CAAC;QAET,IAAI,CAAC,KAAK,IAAI,KAAK,KAAK,kBAAkB,EAAE;YAC1C,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC;YACzB,IAAI,CAAC,kBAAkB,GAAG,WAAW,CAAC;SACvC;QAED,IACE,KAAK,IAAI,IAAI;YACb,KAAK,KAAK,kBAAkB,EAC5B;YACA,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC;YACzB,IAAI,CAAC,kBAAkB,GAAG,WAAW,CAAC;SACvC;KACF;;;;;;IAQD,iBAAiB;QACf,IAAI,CAAC,+BAA+B,EAAE,CAAC;QACvC,IAAI,CAAC,gBAAgB,EAAE,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE;YACtC,eAAe,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;YACnC,aAAa,EAAE,IAAI;YACnB,SAAS,EAAE,IAAI;YACf,OAAO,EAAE,IAAI;SACd,CAAC,CAAC;KACJ;IAED,oBAAoB;QAClB,IAAI,CAAC,gBAAgB,EAAE,UAAU,EAAE,CAAC;KACrC;;;;;;IAQD,MAAM;QACJ,OAAO,gBAAO,IAAI,CAAC,KAAK,CAAQ,CAAC;KAClC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/option/option.scss?tag=calcite-option&encapsulation=shadow","src/components/option/option.tsx"],"sourcesContent":[":host {\n  @apply block;\n}\n\n@include base-component();\n","import { Component, Element, Event, EventEmitter, h, Prop, VNode, Watch } from \"@stencil/core\";\nimport { createObserver } from \"../../utils/observers\";\n\n@Component({\n  tag: \"calcite-option\",\n  styleUrl: \"option.scss\",\n  shadow: true,\n})\nexport class Option {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({\n    reflect: true,\n  })\n  disabled = false;\n\n  /**\n   * Accessible name for the component.\n   */\n  @Prop({ mutable: true })\n  label: string;\n\n  /**\n   * When `true`, the component is selected.\n   */\n  @Prop({\n    reflect: true,\n  })\n  selected: boolean;\n\n  /**\n   * The component's value.\n   */\n  @Prop({ mutable: true })\n  value: any;\n\n  @Watch(\"disabled\")\n  @Watch(\"label\")\n  @Watch(\"selected\")\n  @Watch(\"value\")\n  protected handlePropChange(_newValue: any, _oldValue: any, propName: string): void {\n    if (propName === \"label\" || propName === \"value\") {\n      this.ensureTextContentDependentProps();\n    }\n\n    this.calciteInternalOptionChange.emit();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Variables\n  //\n  //--------------------------------------------------------------------------\n\n  @Element()\n  private el: HTMLCalciteOptionElement;\n\n  private internallySetLabel: string;\n\n  private internallySetValue: any;\n\n  private mutationObserver: MutationObserver = createObserver(\"mutation\", () => {\n    this.ensureTextContentDependentProps();\n    this.calciteInternalOptionChange.emit();\n  });\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * @internal\n   */\n  @Event({ cancelable: false })\n  private calciteInternalOptionChange: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private ensureTextContentDependentProps(): void {\n    const {\n      el: { textContent },\n      internallySetLabel,\n      internallySetValue,\n      label,\n      value,\n    } = this;\n\n    if (!label || label === internallySetLabel) {\n      this.label = textContent;\n      this.internallySetLabel = textContent;\n    }\n\n    if (\n      value == null /* intentional loose equals to handle both undefined & null */ ||\n      value === internallySetValue\n    ) {\n      this.value = textContent;\n      this.internallySetValue = textContent;\n    }\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.ensureTextContentDependentProps();\n    this.mutationObserver?.observe(this.el, {\n      attributeFilter: [\"label\", \"value\"],\n      characterData: true,\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  disconnectedCallback(): void {\n    this.mutationObserver?.disconnect();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  //--------------------------------------------------------------------------\n\n  render(): VNode {\n    return <slot>{this.label}</slot>;\n  }\n}\n"],"version":3}