{"file":"index4.js","mappings":"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","names":[],"sources":["../../node_modules/timezone-groups/dist/strategy/native/index.js"],"sourcesContent":["class NativeDateEngine {\n    constructor() {\n        this._formatterCache = new Map();\n        this._commonDateTimeFormatterOptions = {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            timeZoneName: 'shortOffset',\n        };\n    }\n    get name() {\n        return 'native';\n    }\n    create(date) {\n        return new Date(date);\n    }\n    increase(date) {\n        const oneDayInMs = 86400000;\n        return new Date(date.getTime() + oneDayInMs);\n    }\n    formatToIsoDateString(date) {\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        return `${year}-${month.toString().padStart(2, '0')}-${day\n            .toString()\n            .padStart(2, '0')}`;\n    }\n    isoToTimeZone(isoDate, tz) {\n        const date = this._toDate(isoDate);\n        const formatter = this._getFormatter(tz);\n        const parts = formatter.formatToParts(date);\n        const [offset] = parts\n            .filter(({ type }) => type === 'timeZoneName')\n            .map(({ value }) => value);\n        const tzOffset = this._getTimeZoneOffsetInMins(offset);\n        const tzOffsetMinutes = date.getMinutes() - (date.getTimezoneOffset() - tzOffset);\n        date.setMinutes(tzOffsetMinutes);\n        return date;\n    }\n    same(date1, date2) {\n        return date1.getTime() === date2.getTime();\n    }\n    _toDate(isoDate) {\n        return new Date(isoDate);\n    }\n    _getFormatter(tz) {\n        let formatter = this._formatterCache.get(tz);\n        if (!formatter) {\n            formatter = new Intl.DateTimeFormat('en-US', {\n                timeZone: tz,\n                ...this._commonDateTimeFormatterOptions,\n            });\n            this._formatterCache.set(tz, formatter);\n        }\n        return formatter;\n    }\n    _getTimeZoneOffsetInMins(gmtTimeZone) {\n        const [sign, ...hoursMinutes] = gmtTimeZone.slice(3);\n        const [hours, minutes] = hoursMinutes.join('').split(':');\n        const signMultiplier = sign === '+' ? 1 : -1;\n        return signMultiplier * (Number(hours) * 60 + Number(minutes || 0));\n    }\n}\n\nexport { NativeDateEngine as DateEngine };\n"],"version":3}