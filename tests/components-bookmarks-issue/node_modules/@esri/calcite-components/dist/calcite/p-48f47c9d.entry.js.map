{"version":3,"names":["CSS","icon","flipRtl","iconCache","requestCache","scaleToPx","s","m","l","async","fetchIcon","scale","size","name","normalizeIconName","filled","charAt","length","iconName","substring","id","fetch","getAssetPath","then","resp","json","catch","console","error","path","numberLeadingName","isNaN","Number","parts","split","kebabCased","firstNonDigitInPartPattern","map","part","partIndex","replace","replacer","match","offset","isFirstCharInName","toUpperCase","join","iconCss","Icon","connectedCallback","this","waitUntilVisible","visible","loadIconPathData","disconnectedCallback","intersectionObserver","disconnect","componentWillLoad","render","el","pathData","textLabel","dir","getElementDir","semantic","paths","concat","h","Host","toAriaBoolean","role","class","svg","fill","height","viewBox","width","xmlns","d","opacity","callback","createObserver","entries","forEach","entry","isIntersecting","rootMargin","observe"],"sources":["src/components/icon/resources.ts","src/components/icon/utils.ts","src/components/icon/icon.scss?tag=calcite-icon&encapsulation=shadow","src/components/icon/icon.tsx"],"sourcesContent":["export const CSS = {\n  icon: \"icon\",\n  flipRtl: \"flip-rtl\",\n};\n","import { CalciteIconPath } from \"@esri/calcite-ui-icons\";\nimport { getAssetPath } from \"@stencil/core\";\nimport { Scale } from \"../interfaces\";\n\nexport interface FetchIconProps {\n  icon: string;\n  scale: Scale;\n}\n\n/**\n * Icon data cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const iconCache: Record<string, CalciteIconPath> = {};\n\n/**\n * Icon request cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const requestCache: Record<string, Promise<CalciteIconPath>> = {};\n\nexport const scaleToPx: Record<Scale, number> = {\n  s: 16,\n  m: 24,\n  l: 32,\n};\n\nexport async function fetchIcon({ icon, scale }: FetchIconProps): Promise<CalciteIconPath> {\n  const size = scaleToPx[scale];\n  const name = normalizeIconName(icon);\n  const filled = name.charAt(name.length - 1) === \"F\";\n  const iconName = filled ? name.substring(0, name.length - 1) : name;\n  const id = `${iconName}${size}${filled ? \"F\" : \"\"}`;\n\n  if (iconCache[id]) {\n    return iconCache[id];\n  }\n  if (!requestCache[id]) {\n    requestCache[id] = fetch(getAssetPath(`./assets/icon/${id}.json`))\n      .then((resp) => resp.json())\n      .catch(() => {\n        console.error(`\"${id}\" is not a valid calcite-ui-icon name`);\n        return \"\";\n      });\n  }\n\n  const path = await requestCache[id];\n  iconCache[id] = path;\n\n  return path;\n}\n\n/**\n * Normalize the icon name to match the path data module exports.\n * Exported for testing purposes.\n *\n * @param name â€“ an icon name that can be either kebab or camel-cased\n * @private\n */\nexport function normalizeIconName(name: string): string {\n  const numberLeadingName = !isNaN(Number(name.charAt(0)));\n  const parts = name.split(\"-\");\n  const kebabCased = parts.length > 0;\n\n  if (kebabCased) {\n    const firstNonDigitInPartPattern = /[a-z]/i;\n\n    name = parts\n      .map((part, partIndex) => {\n        return part.replace(firstNonDigitInPartPattern, function replacer(match, offset) {\n          const isFirstCharInName = partIndex === 0 && offset === 0;\n\n          if (isFirstCharInName) {\n            return match;\n          }\n\n          return match.toUpperCase();\n        });\n      })\n      .join(\"\");\n  }\n\n  return numberLeadingName ? `i${name}` : name;\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-ui-icon-color: The component's color. Defaults to `currentColor`.\n */\n\n:host {\n  @apply text-color-icon inline-flex;\n}\n\n$icon-size-s: 16px;\n$icon-size-m: 24px;\n$icon-size-l: 32px;\n\n:host([scale=\"s\"]) {\n  inline-size: $icon-size-s;\n  block-size: $icon-size-s;\n  min-inline-size: $icon-size-s;\n  min-block-size: $icon-size-s;\n}\n\n:host([scale=\"m\"]) {\n  inline-size: $icon-size-m;\n  block-size: $icon-size-m;\n  min-inline-size: $icon-size-m;\n  min-block-size: $icon-size-m;\n}\n\n:host([scale=\"l\"]) {\n  inline-size: $icon-size-l;\n  block-size: $icon-size-l;\n  min-inline-size: $icon-size-l;\n  min-block-size: $icon-size-l;\n}\n\n.flip-rtl {\n  transform: scaleX(-1);\n}\n\n.svg {\n  @apply block;\n}\n\n@include base-component();\n","import { CalciteIconPath, CalciteMultiPathEntry } from \"@esri/calcite-ui-icons\";\nimport { Build, Component, Element, h, Host, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { getElementDir, toAriaBoolean } from \"../../utils/dom\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Scale } from \"../interfaces\";\nimport { CSS } from \"./resources\";\nimport { fetchIcon, scaleToPx } from \"./utils\";\n\n@Component({\n  tag: \"calcite-icon\",\n  styleUrl: \"icon.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Icon {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Displays a specific icon.\n   *\n   * @see [Icons](https://esri.github.io/calcite-ui-icons)\n   */\n  @Prop({\n    reflect: true,\n  })\n  icon: string = null;\n\n  /**\n   * When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).\n   */\n  @Prop({\n    reflect: true,\n  })\n  flipRtl = false;\n\n  /**\n   * Specifies the size of the component.\n   */\n  @Prop({\n    reflect: true,\n  })\n  scale: Scale = \"m\";\n\n  /**\n   * Accessible name for the component.\n   *\n   * It is recommended to set this value if your icon is semantic.\n   */\n  @Prop()\n  textLabel: string;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.waitUntilVisible(() => {\n      this.visible = true;\n      this.loadIconPathData();\n    });\n  }\n\n  disconnectedCallback(): void {\n    this.intersectionObserver?.disconnect();\n    this.intersectionObserver = null;\n  }\n\n  async componentWillLoad(): Promise<void> {\n    this.loadIconPathData();\n  }\n\n  render(): VNode {\n    const { el, flipRtl, pathData, scale, textLabel } = this;\n    const dir = getElementDir(el);\n    const size = scaleToPx[scale];\n    const semantic = !!textLabel;\n    const paths = [].concat(pathData || \"\");\n    return (\n      <Host\n        aria-hidden={toAriaBoolean(!semantic)}\n        aria-label={semantic ? textLabel : null}\n        role={semantic ? \"img\" : null}\n      >\n        <svg\n          aria-hidden=\"true\"\n          class={{\n            [CSS.flipRtl]: dir === \"rtl\" && flipRtl,\n            svg: true,\n          }}\n          fill=\"currentColor\"\n          height=\"100%\"\n          viewBox={`0 0 ${size} ${size}`}\n          width=\"100%\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          {paths.map((path: string | CalciteMultiPathEntry) =>\n            typeof path === \"string\" ? (\n              <path d={path} />\n            ) : (\n              <path d={path.d} opacity={\"opacity\" in path ? path.opacity : 1} />\n            ),\n          )}\n        </svg>\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteIconElement;\n\n  private intersectionObserver: IntersectionObserver;\n\n  @State()\n  private pathData: CalciteIconPath;\n\n  @State()\n  private visible = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  @Watch(\"icon\")\n  @Watch(\"scale\")\n  private async loadIconPathData(): Promise<void> {\n    const { icon, scale, visible } = this;\n\n    if (!Build.isBrowser || !icon || !visible) {\n      return;\n    }\n\n    const pathData = await fetchIcon({ icon, scale });\n\n    // While the fetchIcon method is awaiting response, the icon requested can change. This check is to verify the response received belongs to the current icon.\n    if (icon !== this.icon) {\n      return;\n    }\n\n    this.pathData = pathData;\n  }\n\n  private waitUntilVisible(callback: () => void): void {\n    this.intersectionObserver = createObserver(\n      \"intersection\",\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            this.intersectionObserver.disconnect();\n            this.intersectionObserver = null;\n            callback();\n          }\n        });\n      },\n      { rootMargin: \"50px\" },\n    );\n\n    if (!this.intersectionObserver) {\n      callback();\n      return;\n    }\n\n    this.intersectionObserver.observe(this.el);\n  }\n}\n"],"mappings":"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"}