{"version":3,"names":["createObserver","type","callback","options","Observer","getObserver","ExtendedMutationObserver","window","MutationObserver","constructor","super","this","observedEntry","observe","target","push","unobserve","newObservedEntries","filter","observed","takeRecords","disconnect","forEach","IntersectionObserver","ResizeObserver"],"sources":["src/utils/observers.ts"],"sourcesContent":["import { Build } from \"@stencil/core\";\n\nexport interface ExtendedMutationObserver extends MutationObserver {\n  new: () => ExtendedMutationObserver;\n  unobserve(target: Node): void;\n}\n\ndeclare const ExtendedMutationObserver: {\n  prototype: ExtendedMutationObserver;\n  new (callback: MutationCallback): ExtendedMutationObserver;\n};\n\ntype ObserverType = \"mutation\" | \"intersection\" | \"resize\";\n\ntype ObserverCallbackType<T extends ObserverType> = T extends \"mutation\"\n  ? MutationCallback\n  : T extends \"intersection\"\n    ? IntersectionObserverCallback\n    : T extends \"resize\"\n      ? ResizeObserverCallback\n      : never;\n\ntype ObserverOptions<T extends ObserverType> = T extends \"intersection\" ? IntersectionObserverInit : never;\n\ntype ObserverClassType<T extends ObserverType> = T extends \"mutation\"\n  ? typeof ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? typeof IntersectionObserver\n    : T extends \"resize\"\n      ? typeof ResizeObserver\n      : never;\n\ntype ObserverInstanceType<T extends ObserverType> = T extends \"mutation\"\n  ? ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? IntersectionObserver\n    : T extends \"resize\"\n      ? ResizeObserver\n      : never;\n\n/**\n * This utility ensures observers are created only for browser contexts.\n *\n * @param type - the type of observer to create\n * @param callback - the observer callback\n * @param options - the observer options\n */\nexport function createObserver<T extends ObserverType>(\n  type: T,\n  callback: ObserverCallbackType<T>,\n  options?: ObserverOptions<T>,\n): ObserverInstanceType<T> | undefined {\n  if (!Build.isBrowser) {\n    return undefined;\n  }\n\n  const Observer = getObserver<T>(type);\n  return new Observer(callback as any, options) as any;\n}\n\nfunction getObserver<T extends ObserverType>(type: T): ObserverClassType<T> {\n  // based on https://github.com/whatwg/dom/issues/126#issuecomment-1049814948\n  class ExtendedMutationObserver extends window.MutationObserver implements ExtendedMutationObserver {\n    private observedEntry: Array<{\n      target: Node;\n      options?: MutationObserverInit;\n    }> = [];\n\n    private readonly callback: MutationCallback;\n\n    constructor(callback: MutationCallback) {\n      super(callback);\n      this.callback = callback;\n    }\n\n    observe(target: Node, options?: MutationObserverInit): void {\n      this.observedEntry.push({ target, options });\n\n      return super.observe(target, options);\n    }\n\n    unobserve(target: Node): void {\n      const newObservedEntries = this.observedEntry.filter((observed) => observed.target !== target);\n      this.observedEntry = [];\n      this.callback(super.takeRecords(), this);\n      this.disconnect();\n      newObservedEntries.forEach((observed) => this.observe(observed.target, observed.options));\n    }\n  }\n\n  return (function () {\n    return (\n      type === \"intersection\"\n        ? window.IntersectionObserver\n        : type === \"mutation\"\n          ? ExtendedMutationObserver\n          : window.ResizeObserver\n    ) as any;\n  })();\n}\n"],"mappings":";;;;;SA+CgBA,EACdC,EACAC,EACAC,GAMA,MAAMC,EAAWC,EAAeJ,GAChC,OAAO,IAAIG,EAASF,EAAiBC,EACvC,CAEA,SAASE,EAAoCJ,GAE3C,MAAMK,UAAiCC,OAAOC,iBAQ5C,WAAAC,CAAYP,GACVQ,MAAMR,GARAS,KAAAC,cAGH,GAMHD,KAAKT,SAAWA,C,CAGlB,OAAAW,CAAQC,EAAcX,GACpBQ,KAAKC,cAAcG,KAAK,CAAED,SAAQX,YAElC,OAAOO,MAAMG,QAAQC,EAAQX,E,CAG/B,SAAAa,CAAUF,GACR,MAAMG,EAAqBN,KAAKC,cAAcM,QAAQC,GAAaA,EAASL,SAAWA,IACvFH,KAAKC,cAAgB,GACrBD,KAAKT,SAASQ,MAAMU,cAAeT,MACnCA,KAAKU,aACLJ,EAAmBK,SAASH,GAAaR,KAAKE,QAAQM,EAASL,OAAQK,EAAShB,U,EAIpF,OAAO,WACL,OACEF,IAAS,eACLM,OAAOgB,qBACPtB,IAAS,WACPK,EACAC,OAAOiB,cAEhB,CARM,EAST,Q"}