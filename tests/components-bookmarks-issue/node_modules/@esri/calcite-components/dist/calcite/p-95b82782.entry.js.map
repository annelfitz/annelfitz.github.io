{"version":3,"names":["stringToHex","str","hash","i","length","charCodeAt","hex","j","value","toString","substr","rgbToHue","rgb","r","g","b","max","Math","min","delta","hue","round","hexToHue","hexToRGB","avatarCss","Avatar","render","this","determineContent","thumbnail","thumbnailFailedToLoad","h","alt","label","class","onError","src","initials","generateInitials","backgroundColor","generateFillColor","fullName","role","style","icon","scale","userId","username","el","theme","getModeName","id","name","isValidHex","l","trim","split","map","substring","join"],"sources":["src/components/avatar/utils.ts","src/components/avatar/avatar.scss?tag=calcite-avatar&encapsulation=shadow","src/components/avatar/avatar.tsx"],"sourcesContent":["import { RGB } from \"../color-picker/interfaces\";\nimport { hexToRGB } from \"../color-picker/utils\";\n\n/**\n * Convert a string to a valid hex by hashing its contents\n * and using the hash as a seed for three distinct color values\n *\n * @param str\n */\nexport function stringToHex(str: string): string {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let hex = \"#\";\n  for (let j = 0; j < 3; j++) {\n    const value = (hash >> (j * 8)) & 0xff;\n    hex += (\"00\" + value.toString(16)).substr(-2);\n  }\n  return hex;\n}\n\n/**\n * Find the hue of a color given the separate RGB color channels\n *\n * @param rgb\n */\nexport function rgbToHue(rgb: RGB): number {\n  let { r, g, b } = rgb;\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const delta = max - min;\n\n  if (max === min) {\n    return 0;\n  }\n\n  let hue = (max + min) / 2;\n  switch (max) {\n    case r:\n      hue = (g - b) / delta + (g < b ? 6 : 0);\n      break;\n    case g:\n      hue = (b - r) / delta + 2;\n      break;\n    case b:\n      hue = (r - g) / delta + 4;\n      break;\n  }\n\n  return Math.round(hue * 60);\n}\n\n/**\n * For a hex color, find the hue\n *\n * @param hex {string} - form of \"#------\"\n */\nexport function hexToHue(hex: string): number {\n  return rgbToHue(hexToRGB(hex));\n}\n",":host {\n  @apply rounded-half inline-block overflow-hidden;\n}\n\n:host([scale=\"s\"]) {\n  @apply text-n3 h-6 w-6;\n}\n\n:host([scale=\"m\"]) {\n  @apply text-n2 h-8 w-8;\n}\n\n:host([scale=\"l\"]) {\n  @apply text-0 h-11 w-11;\n}\n\n.icon {\n  @apply flex;\n}\n\n.background {\n  @apply rounded-half flex h-full w-full items-center justify-center;\n}\n\n.initials {\n  @apply text-color-2 font-bold uppercase;\n}\n\n.thumbnail {\n  @apply rounded-half h-full w-full;\n}\n\n@include base-component();\n","import { Component, Element, h, Prop, State } from \"@stencil/core\";\nimport { getModeName } from \"../../utils/dom\";\nimport { isValidHex } from \"../color-picker/utils\";\nimport { Scale } from \"../interfaces\";\nimport { hexToHue, stringToHex } from \"./utils\";\n\n@Component({\n  tag: \"calcite-avatar\",\n  styleUrl: \"avatar.scss\",\n  shadow: true,\n})\nexport class Avatar {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the `src` to an image (remember to add a token if the user is private). */\n  @Prop({ reflect: true }) thumbnail: string;\n\n  /** Specifies the full name of the user. When `label` and `thumbnail` are not defined, specifies the accessible name for the component. */\n  @Prop({ reflect: true }) fullName: string;\n\n  /** Specifies the username of the user. */\n  @Prop({ reflect: true }) username: string;\n\n  /** Specifies the unique id of the user. */\n  @Prop({ reflect: true }) userId: string;\n\n  /** Specifies alternative text when `thumbnail` is defined, otherwise specifies an accessible label.*/\n  @Prop() label: string;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  render() {\n    return this.determineContent();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteAvatarElement;\n\n  @State() thumbnailFailedToLoad = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private determineContent() {\n    if (this.thumbnail && !this.thumbnailFailedToLoad) {\n      return (\n        <img\n          alt={this.label || \"\"}\n          class=\"thumbnail\"\n          onError={() => (this.thumbnailFailedToLoad = true)}\n          src={this.thumbnail}\n        />\n      );\n    }\n    const initials = this.generateInitials();\n    const backgroundColor = this.generateFillColor();\n    return (\n      <span\n        aria-label={this.label || this.fullName}\n        class=\"background\"\n        role=\"figure\"\n        style={{ backgroundColor }}\n      >\n        {initials ? (\n          <span aria-hidden=\"true\" class=\"initials\">\n            {initials}\n          </span>\n        ) : (\n          <calcite-icon class=\"icon\" icon=\"user\" scale={this.scale} />\n        )}\n      </span>\n    );\n  }\n\n  /**\n   * Generate a valid background color that is consistent and unique to this user\n   */\n  private generateFillColor() {\n    const { userId, username, fullName, el } = this;\n    const theme = getModeName(el);\n    const id = userId && `#${userId.substr(userId.length - 6)}`;\n    const name = username || fullName || \"\";\n    const hex = id && isValidHex(id) ? id : stringToHex(name);\n    // if there is not unique information, or an invalid hex is produced, return a default\n    if ((!userId && !name) || !isValidHex(hex)) {\n      return `var(--calcite-color-foreground-2)`;\n    }\n    const hue = hexToHue(hex);\n    const l = theme === \"dark\" ? 20 : 90;\n    return `hsl(${hue}, 60%, ${l}%)`;\n  }\n\n  /**\n   * Use fullName or username to generate initials\n   */\n  private generateInitials(): string | boolean {\n    const { fullName, username } = this;\n    if (fullName) {\n      return fullName\n        .trim()\n        .split(\" \")\n        .map((name) => name.substring(0, 1))\n        .join(\"\");\n    } else if (username) {\n      return username.substring(0, 2);\n    }\n    return false;\n  }\n}\n"],"mappings":";;;;;0LASgBA,EAAYC,GAC1B,IAAIC,EAAO,EACX,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,IAAK,CACnCD,EAAOD,EAAII,WAAWF,KAAOD,GAAQ,GAAKA,E,CAG5C,IAAII,EAAM,IACV,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMC,EAASN,GAASK,EAAI,EAAM,IAClCD,IAAQ,KAAOE,EAAMC,SAAS,KAAKC,QAAQ,E,CAE7C,OAAOJ,CACT,C,SAOgBK,EAASC,GACvB,IAAIC,EAAEA,EAACC,EAAEA,EAACC,EAAEA,GAAMH,EAClBC,GAAK,IACLC,GAAK,IACLC,GAAK,IACL,MAAMC,EAAMC,KAAKD,IAAIH,EAAGC,EAAGC,GAC3B,MAAMG,EAAMD,KAAKC,IAAIL,EAAGC,EAAGC,GAC3B,MAAMI,EAAQH,EAAME,EAEpB,GAAIF,IAAQE,EAAK,CACf,OAAO,C,CAGT,IAAIE,GAAOJ,EAAME,GAAO,EACxB,OAAQF,GACN,KAAKH,EACHO,GAAON,EAAIC,GAAKI,GAASL,EAAIC,EAAI,EAAI,GACrC,MACF,KAAKD,EACHM,GAAOL,EAAIF,GAAKM,EAAQ,EACxB,MACF,KAAKJ,EACHK,GAAOP,EAAIC,GAAKK,EAAQ,EACxB,MAGJ,OAAOF,KAAKI,MAAMD,EAAM,GAC1B,C,SAOgBE,EAAShB,GACvB,OAAOK,EAASY,EAASjB,GAC3B,CChEA,MAAMkB,EAAY,4rB,MCWLC,EAAM,M,oCAQuB,I,+IAmCP,K,CAZjC,MAAAC,GACE,OAAOC,KAAKC,kB,CAmBN,gBAAAA,GACN,GAAID,KAAKE,YAAcF,KAAKG,sBAAuB,CACjD,OACEC,EAAA,OACEC,IAAKL,KAAKM,OAAS,GACnBC,MAAM,YACNC,QAAS,IAAOR,KAAKG,sBAAwB,KAC7CM,IAAKT,KAAKE,W,CAIhB,MAAMQ,EAAWV,KAAKW,mBACtB,MAAMC,EAAkBZ,KAAKa,oBAC7B,OACET,EAAA,qBACcJ,KAAKM,OAASN,KAAKc,SAC/BP,MAAM,aACNQ,KAAK,SACLC,MAAO,CAAEJ,oBAERF,EACCN,EAAA,sBAAkB,OAAOG,MAAM,YAC5BG,GAGHN,EAAA,gBAAcG,MAAM,OAAOU,KAAK,OAAOC,MAAOlB,KAAKkB,Q,CASnD,iBAAAL,GACN,MAAMM,OAAEA,EAAMC,SAAEA,EAAQN,SAAEA,EAAQO,GAAEA,GAAOrB,KAC3C,MAAMsB,EAAQC,EAAYF,GAC1B,MAAMG,EAAKL,GAAU,IAAIA,EAAOpC,OAAOoC,EAAO1C,OAAS,KACvD,MAAMgD,EAAOL,GAAYN,GAAY,GACrC,MAAMnC,EAAM6C,GAAME,EAAWF,GAAMA,EAAKnD,EAAYoD,GAEpD,IAAMN,IAAWM,IAAUC,EAAW/C,GAAM,CAC1C,MAAO,mC,CAET,MAAMc,EAAME,EAAShB,GACrB,MAAMgD,EAAIL,IAAU,OAAS,GAAK,GAClC,MAAO,OAAO7B,WAAakC,K,CAMrB,gBAAAhB,GACN,MAAMG,SAAEA,EAAQM,SAAEA,GAAapB,KAC/B,GAAIc,EAAU,CACZ,OAAOA,EACJc,OACAC,MAAM,KACNC,KAAKL,GAASA,EAAKM,UAAU,EAAG,KAChCC,KAAK,G,MACH,GAAIZ,EAAU,CACnB,OAAOA,EAASW,UAAU,EAAG,E,CAE/B,OAAO,K"}