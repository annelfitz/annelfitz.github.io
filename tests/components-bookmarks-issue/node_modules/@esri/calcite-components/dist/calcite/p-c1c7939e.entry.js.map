{"version":3,"names":["hourToMinutes","timeZoneNameBlockList","timeZoneOffsetToDecimal","shortOffsetTimeZoneName","minusSign","hyphen","replace","toOffsetValue","timeZoneName","referenceDateInMs","offset","getTimeZoneShortOffset","Number","getUserTimeZoneOffset","localDate","Date","getTimezoneOffset","getUserTimeZoneName","dateFormatter","Intl","DateTimeFormat","resolvedOptions","timeZone","timeZoneGroups","async","createTimeZoneItems","locale","messages","mode","referenceDate","getTime","timeZoneNames","supportedValuesOf","Promise","all","import","then","groupTimeZones","DateEngine","dateEngine","groupDateRange","startDate","toISOString","listFormatter","ListFormat","style","type","forEach","group","indexOffsets","removedSoFar","tzs","tz","index","includes","filter","labelTzIndices","map","length","groupRepTz","decimalOffset","value","tzLabels","timeZoneLabel","split","pop","label","createTimeZoneOffsetLabel","format","filterValue","toUserFriendlyName","sort","groupA","groupB","offsetLabel","groupLabel","now","dateTimeFormat","getDateTimeFormat","parts","formatToParts","find","inputTimeZoneCss","InputTimeZone","this","setComboboxRef","el","comboboxEl","onComboboxBeforeClose","event","stopPropagation","calciteInputTimeZoneBeforeClose","emit","onComboboxBeforeOpen","calciteInputTimeZoneBeforeOpen","onComboboxChange","combobox","target","selected","findTimeZoneItem","selectedItems","getAttribute","selectedValue","selectedTimeZoneItem","calciteInputTimeZoneChange","onComboboxClose","open","calciteInputTimeZoneClose","onComboboxOpen","calciteInputTimeZoneOpen","onMessagesChange","handleTimeZoneItemPropsChange","updateTimeZoneItemsAndSelection","handleValueChange","oldValue","timeZoneItem","setFocus","componentFocusable","effectiveLocaleWatcher","updateMessages","effectiveLocale","onLabelClick","valueToMatch","timeZoneItems","fallbackValue","connectedCallback","connectForm","connectLabel","connectLocalized","connectMessages","disconnectedCallback","disconnectForm","disconnectLabel","disconnectLocalized","disconnectMessages","componentWillLoad","setUpLoadableComponent","setUpMessages","afterConnectDefaultValueSet","componentDidLoad","setComponentLoaded","componentDidRender","updateHostInteraction","render","h","Host","InteractiveContainer","disabled","clearDisabled","chooseTimeZone","lang","maxItems","onCalciteComboboxBeforeClose","onCalciteComboboxBeforeOpen","onCalciteComboboxChange","onCalciteComboboxClose","onCalciteComboboxOpen","overlayPositioning","scale","selectionMode","status","validationIcon","validationMessage","ref","key","textLabel","HiddenFormInputSlot","component"],"sources":["src/components/input-time-zone/utils.ts","src/components/input-time-zone/input-time-zone.scss?tag=calcite-input-time-zone&encapsulation=shadow","src/components/input-time-zone/input-time-zone.tsx"],"sourcesContent":["import { TimeZoneItem, TimeZoneMode, TimeZoneName } from \"./interfaces\";\nimport { getDateTimeFormat, SupportedLocale } from \"../../utils/locale\";\nimport { InputTimeZoneMessages } from \"./assets/input-time-zone/t9n\";\n\nconst hourToMinutes = 60;\n\nconst timeZoneNameBlockList = [\n  \"CET\",\n  \"CST6CDT\",\n  \"EET\",\n  \"EST\",\n  \"EST5EDT\",\n  \"Factory\",\n  \"HST\",\n  \"MET\",\n  \"MST\",\n  \"MST7MDT\",\n  \"PST8PDT\",\n  \"UTC\",\n  \"WET\",\n];\n\nfunction timeZoneOffsetToDecimal(shortOffsetTimeZoneName: string): string {\n  const minusSign = \"âˆ’\";\n  const hyphen = \"-\";\n\n  return (\n    shortOffsetTimeZoneName\n      .replace(\":15\", \".25\")\n      .replace(\":30\", \".5\")\n      .replace(\":45\", \".75\")\n\n      // ensures decimal string representation is parseable\n      .replace(minusSign, hyphen)\n  );\n}\n\nfunction toOffsetValue(timeZoneName: TimeZoneName, referenceDateInMs: number): number {\n  // we use \"en-US\" to allow us to reliably remove the standard time token\n  const offset = getTimeZoneShortOffset(timeZoneName, \"en-US\", referenceDateInMs).replace(\"GMT\", \"\");\n\n  if (offset === \"\") {\n    return 0;\n  }\n\n  return Number(timeZoneOffsetToDecimal(offset)) * hourToMinutes;\n}\n\nexport function getUserTimeZoneOffset(): number {\n  const localDate = new Date();\n  return localDate.getTimezoneOffset() * -1;\n}\n\nexport function getUserTimeZoneName(): string {\n  const dateFormatter = new Intl.DateTimeFormat();\n  return dateFormatter.resolvedOptions().timeZone;\n}\n\n/**\n * The lazy-loaded timezone-groups lib to be used across instances.\n */\nlet timeZoneGroups: Promise<[any, any]>;\n\nexport async function createTimeZoneItems(\n  locale: SupportedLocale,\n  messages: InputTimeZoneMessages,\n  mode: TimeZoneMode,\n  referenceDate: Date,\n): Promise<TimeZoneItem[]> {\n  const referenceDateInMs: number = referenceDate.getTime();\n  const timeZoneNames = Intl.supportedValuesOf(\"timeZone\");\n\n  if (mode === \"offset\") {\n    if (!timeZoneGroups) {\n      timeZoneGroups = Promise.all([\n        import(\"timezone-groups/dist/index.js\"),\n        import(\"timezone-groups/dist/strategy/native/index.js\"),\n      ]);\n    }\n\n    return timeZoneGroups.then(async ([{ groupTimeZones }, { DateEngine }]) => {\n      const timeZoneGroups: { labelTzIndices: number[]; tzs: TimeZoneName[] }[] = await groupTimeZones({\n        dateEngine: new DateEngine(),\n        groupDateRange: 1,\n        startDate: new Date(referenceDateInMs).toISOString(),\n      });\n\n      const listFormatter = new Intl.ListFormat(locale, { style: \"long\", type: \"conjunction\" });\n\n      // we remove blocked entries from tzs and adjust label indices accordingly\n      timeZoneGroups.forEach((group) => {\n        const indexOffsets: number[] = [];\n        let removedSoFar = 0;\n\n        group.tzs.forEach((tz, index) => {\n          if (timeZoneNameBlockList.includes(tz)) {\n            removedSoFar++;\n          }\n          indexOffsets[index] = removedSoFar;\n        });\n\n        group.tzs = group.tzs.filter((tz) => !timeZoneNameBlockList.includes(tz));\n\n        group.labelTzIndices = group.labelTzIndices\n          .map((index) => index - indexOffsets[index])\n          .filter((index) => index >= 0 && index < group.tzs.length);\n      });\n\n      return timeZoneGroups\n        .map<TimeZoneItem<number>>(({ labelTzIndices, tzs }) => {\n          const groupRepTz = tzs[0];\n          const decimalOffset = timeZoneOffsetToDecimal(getTimeZoneShortOffset(groupRepTz, locale, referenceDateInMs));\n          const value = toOffsetValue(groupRepTz, referenceDateInMs);\n          const tzLabels = labelTzIndices.map((index: number) => {\n            const timeZone = tzs[index];\n            const timeZoneLabel = messages[timeZone];\n            return (\n              timeZoneLabel ||\n              // get city token\n              timeZone.split(\"/\").pop()\n            );\n          });\n\n          const label = createTimeZoneOffsetLabel(messages, decimalOffset, listFormatter.format(tzLabels));\n\n          return {\n            label,\n            value,\n            filterValue: tzs.map((tz) => toUserFriendlyName(tz)),\n          };\n        })\n        .filter((group) => !!group)\n        .sort((groupA, groupB) => groupA.value - groupB.value);\n    });\n  }\n\n  return timeZoneNames\n    .map<TimeZoneItem<string>>((timeZone) => {\n      const label = toUserFriendlyName(timeZone);\n      const value = timeZone;\n\n      return {\n        label,\n        value,\n        filterValue: timeZone,\n      };\n    })\n    .filter((group) => !!group)\n    .sort();\n}\n\n/**\n * Exported for testing purposes only\n *\n * @internal\n */\nexport function toUserFriendlyName(timeZoneName: string): string {\n  return timeZoneName.replace(/_/g, \" \");\n}\n\nfunction createTimeZoneOffsetLabel(messages: InputTimeZoneMessages, offsetLabel: string, groupLabel: string): string {\n  return messages.timeZoneLabel.replace(\"{offset}\", offsetLabel).replace(\"{cities}\", groupLabel);\n}\n\nfunction getTimeZoneShortOffset(\n  timeZone: TimeZoneName,\n  locale: SupportedLocale,\n  referenceDateInMs: number = Date.now(),\n): string {\n  const dateTimeFormat = getDateTimeFormat(locale, { timeZone, timeZoneName: \"shortOffset\" });\n  const parts = dateTimeFormat.formatToParts(referenceDateInMs);\n  return parts.find(({ type }) => type === \"timeZoneName\").value;\n}\n",":host {\n  display: block;\n}\n\n@include base-component();\n@include disabled();\n@include hidden-form-input();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { connectLabel, disconnectLabel, LabelableComponent } from \"../../utils/label\";\nimport {\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport {\n  connectLocalized,\n  disconnectLocalized,\n  LocalizedComponent,\n  SupportedLocale,\n} from \"../../utils/locale\";\nimport { TimeZoneItem, TimeZoneMode } from \"./interfaces\";\nimport { Scale, Status } from \"../interfaces\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { InputTimeZoneMessages } from \"./assets/input-time-zone/t9n\";\nimport { createTimeZoneItems, getUserTimeZoneName, getUserTimeZoneOffset } from \"./utils\";\nimport { OverlayPositioning } from \"../../utils/floating-ui\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport {\n  afterConnectDefaultValueSet,\n  connectForm,\n  disconnectForm,\n  FormComponent,\n  HiddenFormInputSlot,\n} from \"../../utils/form\";\n\n@Component({\n  tag: \"calcite-input-time-zone\",\n  styleUrl: \"input-time-zone.scss\",\n  assetsDirs: [\"assets\"],\n  shadow: {\n    delegatesFocus: true,\n  },\n})\nexport class InputTimeZone\n  implements\n    FormComponent,\n    InteractiveComponent,\n    LabelableComponent,\n    LoadableComponent,\n    LocalizedComponent,\n    T9nComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * The `id` of the form that will be associated with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   */\n  @Prop({ reflect: true }) form: string;\n\n  /** Specifies the component's maximum number of options to display before displaying a scrollbar. */\n  @Prop({ reflect: true }) maxItems = 0;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: InputTimeZoneMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<InputTimeZoneMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /**\n   * This specifies the type of `value` and the associated options presented to the user:\n   *\n   * Using `\"offset\"` will provide options that show timezone offsets.\n   *\n   * Using `\"name\"` will provide options that show the IANA time zone names.\n   *\n   * @default \"offset\"\n   */\n  @Prop({ reflect: true }) mode: TimeZoneMode = \"offset\";\n\n  @Watch(\"messages\")\n  @Watch(\"mode\")\n  @Watch(\"referenceDate\")\n  handleTimeZoneItemPropsChange(): void {\n    this.updateTimeZoneItemsAndSelection();\n  }\n\n  /** Specifies the validation message to display under the component. */\n  @Prop() validationMessage: string;\n\n  /** Specifies the validation icon to display under the component. */\n  @Prop({ reflect: true }) validationIcon: string | boolean;\n\n  /**\n   * Specifies the name of the component.\n   *\n   * Required to pass the component's `value` on form submission.\n   */\n  @Prop({ reflect: true }) name: string;\n\n  /** When `true`, displays and positions the component. */\n  @Prop({ mutable: true, reflect: true }) open = false;\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  /**\n   * This `date` will be used as a reference to Daylight Savings Time when creating time zone item groups.\n   *\n   * It can be either a Date instance or a string in ISO format (`\"YYYY-MM-DD\"`, `\"YYYY-MM-DDTHH:MM:SS.SSSZ\"`).\n   *\n   * @see [Date.prototype.toISOString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\n   */\n  @Prop() referenceDate: Date | string;\n\n  /**\n   * When `true`, the component must have a value in order for the form to submit.\n   *\n   * @internal\n   */\n  @Prop({ reflect: true }) required = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the status of the input field, which determines message and icons. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  /**\n   * The component's value, where the value is the time zone offset or the difference, in minutes, between the selected time zone and UTC.\n   *\n   * If no value is provided, the user's time zone offset will be selected by default.\n   *\n   * @see https://www.w3.org/International/core/2005/09/timezone.html#:~:text=What%20is%20a%20%22zone%20offset,or%20%22%2D%22%20from%20UTC.\n   */\n  @Prop({ mutable: true }) value: string;\n\n  @Watch(\"value\")\n  handleValueChange(value: string, oldValue: string): void {\n    const timeZoneItem = this.findTimeZoneItem(value);\n\n    if (!timeZoneItem) {\n      this.value = oldValue;\n      return;\n    }\n\n    this.selectedTimeZoneItem = timeZoneItem;\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    await this.comboboxEl.setFocus();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Fires when the component is requested to be closed and before the closing transition begins.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneBeforeClose: EventEmitter<void>;\n\n  /**\n   * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneBeforeOpen: EventEmitter<void>;\n\n  /**\n   * Fires when the component's `value` changes.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneChange: EventEmitter<void>;\n\n  /**\n   * Fires after the component is closed and animation is complete.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneClose: EventEmitter<void>;\n\n  /**\n   * Fires after the component is opened and animation is complete.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneOpen: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteInputTimeZoneElement;\n\n  private comboboxEl: HTMLCalciteComboboxElement;\n\n  @State() defaultMessages: InputTimeZoneMessages;\n\n  defaultValue: InputTimeZone[\"value\"];\n\n  @State() effectiveLocale: SupportedLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleWatcher(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  formEl: HTMLFormElement;\n\n  labelEl: HTMLCalciteLabelElement;\n\n  private selectedTimeZoneItem: TimeZoneItem;\n\n  private timeZoneItems: TimeZoneItem[];\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  onLabelClick(): void {\n    this.setFocus();\n  }\n\n  private setComboboxRef = (el: HTMLCalciteComboboxElement): void => {\n    this.comboboxEl = el;\n  };\n\n  private onComboboxBeforeClose = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.calciteInputTimeZoneBeforeClose.emit();\n  };\n\n  private onComboboxBeforeOpen = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.calciteInputTimeZoneBeforeOpen.emit();\n  };\n\n  private onComboboxChange = (event: CustomEvent): void => {\n    event.stopPropagation();\n    const combobox = event.target as HTMLCalciteComboboxElement;\n    const selected = this.findTimeZoneItem(combobox.selectedItems[0].getAttribute(\"data-value\"));\n\n    const selectedValue = `${selected.value}`;\n    if (this.value === selectedValue) {\n      return;\n    }\n\n    this.value = selectedValue;\n    this.selectedTimeZoneItem = selected;\n    this.calciteInputTimeZoneChange.emit();\n  };\n\n  private onComboboxClose = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.open = false;\n    this.calciteInputTimeZoneClose.emit();\n  };\n\n  private onComboboxOpen = (event: CustomEvent): void => {\n    this.open = true;\n    event.stopPropagation();\n    this.calciteInputTimeZoneOpen.emit();\n  };\n\n  private findTimeZoneItem(value: number | string): TimeZoneItem {\n    const valueToMatch = value;\n\n    return this.timeZoneItems.find(\n      ({ value }) =>\n        // intentional == to match string to number\n        value == valueToMatch,\n    );\n  }\n\n  private async updateTimeZoneItemsAndSelection(): Promise<void> {\n    this.timeZoneItems = await this.createTimeZoneItems();\n\n    const fallbackValue = this.mode === \"offset\" ? getUserTimeZoneOffset() : getUserTimeZoneName();\n    const valueToMatch = this.value ?? fallbackValue;\n\n    this.selectedTimeZoneItem = this.findTimeZoneItem(valueToMatch);\n\n    if (!this.selectedTimeZoneItem) {\n      this.selectedTimeZoneItem = this.findTimeZoneItem(fallbackValue);\n    }\n  }\n\n  private async createTimeZoneItems(): Promise<TimeZoneItem[]> {\n    if (!this.effectiveLocale || !this.messages) {\n      return [];\n    }\n\n    return createTimeZoneItems(\n      this.effectiveLocale,\n      this.messages,\n      this.mode,\n      this.referenceDate instanceof Date\n        ? this.referenceDate\n        : new Date(this.referenceDate ?? Date.now()),\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectForm(this);\n    connectLabel(this);\n    connectLocalized(this);\n    connectMessages(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectForm(this);\n    disconnectLabel(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n\n    await this.updateTimeZoneItemsAndSelection();\n\n    const selectedValue = `${this.selectedTimeZoneItem.value}`;\n    afterConnectDefaultValueSet(this, selectedValue);\n    this.value = selectedValue;\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  render(): VNode {\n    return (\n      <Host>\n        <InteractiveContainer disabled={this.disabled}>\n          <calcite-combobox\n            clearDisabled={true}\n            disabled={this.disabled}\n            label={this.messages.chooseTimeZone}\n            lang={this.effectiveLocale}\n            maxItems={this.maxItems}\n            onCalciteComboboxBeforeClose={this.onComboboxBeforeClose}\n            onCalciteComboboxBeforeOpen={this.onComboboxBeforeOpen}\n            onCalciteComboboxChange={this.onComboboxChange}\n            onCalciteComboboxClose={this.onComboboxClose}\n            onCalciteComboboxOpen={this.onComboboxOpen}\n            open={this.open}\n            overlayPositioning={this.overlayPositioning}\n            scale={this.scale}\n            selectionMode=\"single-persist\"\n            status={this.status}\n            validation-icon={this.validationIcon}\n            validation-message={this.validationMessage}\n            // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n            ref={this.setComboboxRef}\n          >\n            {this.timeZoneItems.map((group) => {\n              const selected = this.selectedTimeZoneItem === group;\n              const { label, value } = group;\n\n              return (\n                <calcite-combobox-item\n                  data-value={value}\n                  key={label}\n                  selected={selected}\n                  textLabel={label}\n                  value={`${group.filterValue}`}\n                />\n              );\n            })}\n          </calcite-combobox>\n          <HiddenFormInputSlot component={this} />\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}