{"version":3,"names":["componentsWithInputEvent","getClearValidationEventName","componentTag","componentTagCamelCase","split","map","part","index","toUpperCase","slice","join","clearValidationEvent","includes","hiddenFormInputSlotName","isCheckable","component","onFormResetMap","WeakMap","formComponentSet","WeakSet","hasRegisteredFormComponentParent","form","formComponentEl","hasParentComponentWithFormIdSet","closestElementCrossShadowBoundary","parentElement","formComponentRegisterEventName","addEventListener","event","composedPath","some","element","has","stopPropagation","once","dispatchEvent","CustomEvent","bubbles","composed","clearFormValidation","status","validationIcon","validationMessage","setInvalidFormValidation","message","displayValidationMessage","hiddenInput","target","formComponent","nodeName","toLowerCase","componentTagParts","length","preventDefault","submitForm","formEl","requestSubmit","removeEventListener","requestAnimationFrame","invalidEls","querySelectorAll","el","setFocus","resetForm","reset","connectForm","value","associatedForm","findAssociatedForm","defaultValue","defaultChecked","checked","boundOnFormReset","onFormReset","bind","set","add","queryElementRoots","id","this","disconnectForm","get","delete","afterConnectDefaultValueSet","internalHiddenInputInputEvent","hiddenInputInputHandler","removeHiddenInputChangeEventListener","input","syncHiddenFormInput","name","ownerDocument","inputs","forEach","remove","values","Array","isArray","extra","seen","Set","valueMatch","find","val","defaultSyncHiddenFormInput","push","docFrag","pop","createElement","slot","createDocumentFragment","append","disabled","required","tabIndex","setAttribute","removeAttribute","HiddenFormInputSlot","h"],"sources":["src/utils/form.tsx"],"sourcesContent":["import { closestElementCrossShadowBoundary, queryElementRoots } from \"./dom\";\nimport { FunctionalComponent, h } from \"@stencil/core\";\n\n/**\n * Any form <Component> with a `calcite<Component>Input` event needs to be included in this array.\n */\nexport const componentsWithInputEvent = [\n  \"calcite-input\",\n  \"calcite-input-number\",\n  \"calcite-input-text\",\n  \"calcite-text-area\",\n];\n\n/**\n * Get the event name to listen for that, when emitted, will clear the\n * validation message that displays after form submission. Only validation\n * messages that are set by the browser will be cleared. If a user sets\n * validationMessage to a custom value, they are responsible for clearing it.\n *\n * Exported for testing purposes.\n *\n * @param componentTag the tag of the component, e.g. \"calcite-input\"\n * @returns the event name\n */\nexport function getClearValidationEventName(componentTag: string): string {\n  const componentTagCamelCase = componentTag\n    .split(\"-\")\n    .map((part: string, index: number) =>\n      index === 0 ? part : `${part[0].toUpperCase()}${part.slice(1)}`,\n    )\n    .join(\"\");\n\n  const clearValidationEvent = `${componentTagCamelCase}${\n    componentsWithInputEvent.includes(componentTag) ? \"Input\" : \"Change\"\n  }`;\n\n  return clearValidationEvent;\n}\n\n/**\n * Exported for testing purposes.\n */\nexport const hiddenFormInputSlotName = \"hidden-form-input\";\n\n/**\n * Defines interface for form owning components.\n *\n * Allows calling submit/reset methods on the form.\n */\nexport interface FormOwner {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n\n  /**\n   * The ID of the form to associate with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   *\n   * Note that this prop should use the @Prop decorator.\n   */\n  form: string;\n\n  /**\n   * The form this component is associated with.\n   *\n   * @internal\n   */\n  formEl: HTMLFormElement;\n}\n\n/**\n * Defines interface for form-associated components.\n *\n * Along with the interface, use the matching form utils to help set up the component behavior.\n */\nexport interface FormComponent<T = any> extends FormOwner {\n  /**\n   * When true, this component's value will not be submitted in the form.\n   */\n  disabled: boolean;\n\n  /**\n   * When true, form submit requests will enforce field requirement.\n   *\n   * @todo remove optional in follow-up PR\n   */\n  required?: boolean;\n\n  /**\n   * The name used to submit the value to the associated form.\n   *\n   * Note that this prop should use the @Prop decorator.\n   */\n  name: string;\n\n  /**\n   * This form component's value.\n   *\n   * Note that this prop should use the @Prop decorator.\n   */\n  value: T;\n\n  /**\n   * The initial value for this form component.\n   *\n   * When the form is reset, the value will be set to this property.\n   */\n  defaultValue: T;\n\n  /**\n   * Hook for components to provide custom form reset behavior.\n   */\n  onFormReset?(): void;\n\n  /**\n   * Hook for components to sync _extra_ props on the hidden input form element used for form-submitting.\n   *\n   * Note: The following props are set by default: disabled, hidden, name, required, value.\n   */\n  syncHiddenFormInput?(input: HTMLInputElement): void;\n}\n\n/**\n * Defines interface for checkable form-associated components.\n *\n * Along with the interface, use the matching form utils to help set up the component behavior.\n */\nexport interface CheckableFormComponent<T = any> extends FormComponent<T> {\n  /**\n   * For boolean-valued components, this property defines whether the associated value is submitted to the form or not.\n   */\n  checked: boolean;\n\n  /**\n   * The initial checked value for this form component.\n   *\n   * When the form is reset, the checked property will be set to this value.\n   */\n  defaultChecked: boolean;\n}\n\nfunction isCheckable(component: FormComponent): component is CheckableFormComponent {\n  return \"checked\" in component;\n}\n\nconst onFormResetMap = new WeakMap<HTMLElement, FormComponent[\"onFormReset\"]>();\nconst formComponentSet = new WeakSet<HTMLElement>();\n\n/**\n * This helps determine if our form component is part of a composite form-associated component.\n *\n * @param form\n * @param formComponentEl\n */\nfunction hasRegisteredFormComponentParent(\n  form: HTMLFormElement,\n  formComponentEl: HTMLElement,\n): boolean {\n  // if we have a parent component using the form ID attribute, we assume it is form-associated\n  const hasParentComponentWithFormIdSet = closestElementCrossShadowBoundary(\n    formComponentEl.parentElement,\n    \"[form]\",\n  );\n\n  if (hasParentComponentWithFormIdSet) {\n    return true;\n  }\n\n  // we use events as a way to test for nested form-associated components across shadow bounds\n  const formComponentRegisterEventName = \"calciteInternalFormComponentRegister\";\n\n  let hasRegisteredFormComponentParent = false;\n\n  form.addEventListener(\n    formComponentRegisterEventName,\n    (event) => {\n      hasRegisteredFormComponentParent = event\n        .composedPath()\n        .some((element) => formComponentSet.has(element as HTMLElement));\n      event.stopPropagation();\n    },\n    { once: true },\n  );\n\n  formComponentEl.dispatchEvent(\n    new CustomEvent(formComponentRegisterEventName, {\n      bubbles: true,\n      composed: true,\n    }),\n  );\n\n  return hasRegisteredFormComponentParent;\n}\n\nfunction clearFormValidation(component: HTMLCalciteInputElement | FormComponent): void {\n  \"status\" in component && (component.status = \"idle\");\n  \"validationIcon\" in component && (component.validationIcon = false);\n  \"validationMessage\" in component && (component.validationMessage = \"\");\n}\n\nfunction setInvalidFormValidation(\n  component: HTMLCalciteInputElement | FormComponent,\n  message: string,\n): void {\n  \"status\" in component && (component.status = \"invalid\");\n\n  \"validationIcon\" in component && !component.validationIcon && (component.validationIcon = true);\n\n  \"validationMessage\" in component &&\n    !component.validationMessage &&\n    (component.validationMessage = message);\n}\n\nfunction displayValidationMessage(event: Event) {\n  // target is the hidden input, which is slotted in the actual form component\n  const hiddenInput = event?.target as HTMLInputElement;\n\n  // not necessarily a calcite-input, but we don't have an HTMLCalciteFormElement type\n  const formComponent = hiddenInput?.parentElement as HTMLCalciteInputElement;\n\n  const componentTag = formComponent?.nodeName?.toLowerCase();\n  const componentTagParts = componentTag?.split(\"-\");\n\n  if (componentTagParts.length < 2 || componentTagParts[0] !== \"calcite\") {\n    return;\n  }\n\n  // prevent the browser from showing the native validation popover\n  event?.preventDefault();\n\n  setInvalidFormValidation(formComponent, hiddenInput?.validationMessage);\n\n  if (formComponent?.validationMessage !== hiddenInput?.validationMessage) {\n    return;\n  }\n\n  const clearValidationEvent = getClearValidationEventName(componentTag);\n  formComponent.addEventListener(clearValidationEvent, () => clearFormValidation(formComponent), {\n    once: true,\n  });\n}\n\n/**\n * Helper to submit a form.\n *\n * @param component\n * @returns true if its associated form was submitted, false otherwise.\n */\nexport function submitForm(component: FormOwner): boolean {\n  const { formEl } = component;\n\n  if (!formEl) {\n    return false;\n  }\n\n  formEl.addEventListener(\"invalid\", displayValidationMessage, true);\n  formEl.requestSubmit();\n  formEl.removeEventListener(\"invalid\", displayValidationMessage, true);\n\n  requestAnimationFrame(() => {\n    const invalidEls = formEl.querySelectorAll(\"[status=invalid]\");\n\n    // focus the first invalid element that has a validation message\n    for (const el of invalidEls) {\n      if ((el as HTMLCalciteInputElement)?.validationMessage) {\n        (el as HTMLCalciteInputElement)?.setFocus();\n        break;\n      }\n    }\n  });\n\n  return true;\n}\n\n/**\n * Helper to reset a form.\n *\n * @param component\n */\nexport function resetForm(component: FormOwner): void {\n  component.formEl?.reset();\n}\n\n/**\n * Helper to set up form interactions on connectedCallback.\n *\n * @param component\n */\nexport function connectForm<T>(component: FormComponent<T>): void {\n  const { el, value } = component;\n  const associatedForm = findAssociatedForm(component);\n\n  if (!associatedForm || hasRegisteredFormComponentParent(associatedForm, el)) {\n    return;\n  }\n\n  component.formEl = associatedForm;\n  component.defaultValue = value;\n\n  if (isCheckable(component)) {\n    component.defaultChecked = component.checked;\n  }\n\n  const boundOnFormReset = (component.onFormReset || onFormReset).bind(component);\n  associatedForm.addEventListener(\"reset\", boundOnFormReset);\n  onFormResetMap.set(component.el, boundOnFormReset);\n  formComponentSet.add(el);\n}\n\n/**\n * Utility method to find a form-component's associated form element.\n *\n * @param component\n */\nexport function findAssociatedForm(component: FormOwner): HTMLFormElement | null {\n  const { el, form } = component;\n\n  return form\n    ? queryElementRoots<HTMLFormElement>(el, { id: form })\n    : closestElementCrossShadowBoundary<HTMLFormElement>(el, \"form\");\n}\n\nfunction onFormReset<T>(this: FormComponent<T>): void {\n  clearFormValidation(this);\n  if (isCheckable(this)) {\n    this.checked = this.defaultChecked;\n    return;\n  }\n\n  this.value = this.defaultValue;\n}\n\n/**\n * Helper to tear down form interactions on disconnectedCallback.\n *\n * @param component\n */\nexport function disconnectForm<T>(component: FormComponent<T>): void {\n  const { el, formEl } = component;\n\n  if (!formEl) {\n    return;\n  }\n\n  const boundOnFormReset = onFormResetMap.get(el);\n  formEl.removeEventListener(\"reset\", boundOnFormReset);\n  onFormResetMap.delete(el);\n  component.formEl = null;\n  formComponentSet.delete(el);\n}\n\n/**\n * Helper for setting the default value on initialization after connectedCallback.\n *\n * Note that this is only needed if the default value cannot be determined on connectedCallback.\n *\n * @param component\n * @param value\n */\nexport function afterConnectDefaultValueSet<T>(component: FormComponent<T>, value: any): void {\n  component.defaultValue = value;\n}\n\nexport const internalHiddenInputInputEvent = \"calciteInternalHiddenInputInput\";\n\nconst hiddenInputInputHandler = (event: Event) => {\n  event.target.dispatchEvent(new CustomEvent(internalHiddenInputInputEvent, { bubbles: true }));\n};\n\nconst removeHiddenInputChangeEventListener = (input: HTMLInputElement) =>\n  input.removeEventListener(\"input\", hiddenInputInputHandler);\n\n/**\n * Helper for maintaining a form-associated's hidden input in sync with the component.\n *\n * Based on Ionic's approach: https://github.com/ionic-team/ionic-framework/blob/e4bf052794af9aac07f887013b9250d2a045eba3/core/src/utils/helpers.ts#L198\n *\n * @param component\n */\nfunction syncHiddenFormInput(component: FormComponent): void {\n  const { el, formEl, name, value } = component;\n  const { ownerDocument } = el;\n\n  const inputs = el.querySelectorAll<HTMLInputElement>(`input[slot=\"${hiddenFormInputSlotName}\"]`);\n\n  if (!formEl || !name) {\n    inputs.forEach((input) => {\n      removeHiddenInputChangeEventListener(input);\n      input.remove();\n    });\n    return;\n  }\n\n  const values = Array.isArray(value) ? value : [value];\n  const extra: any[] = [];\n  const seen = new Set<any>();\n\n  inputs.forEach((input) => {\n    const valueMatch = values.find(\n      (val) =>\n        /* intentional non-strict equality check */\n        val == input.value,\n    );\n\n    if (valueMatch != null) {\n      seen.add(valueMatch);\n      defaultSyncHiddenFormInput(component, input, valueMatch);\n    } else {\n      extra.push(input);\n    }\n  });\n\n  let docFrag: DocumentFragment;\n\n  values.forEach((value) => {\n    if (seen.has(value)) {\n      return;\n    }\n\n    let input = extra.pop();\n\n    if (!input) {\n      input = ownerDocument!.createElement(\"input\");\n      input.slot = hiddenFormInputSlotName;\n    }\n\n    if (!docFrag) {\n      docFrag = ownerDocument!.createDocumentFragment();\n    }\n\n    docFrag.append(input);\n\n    // emits when hidden input is autofilled\n    input.addEventListener(\"input\", hiddenInputInputHandler);\n\n    defaultSyncHiddenFormInput(component, input, value);\n  });\n\n  if (docFrag) {\n    el.append(docFrag);\n  }\n  extra.forEach((input) => {\n    removeHiddenInputChangeEventListener(input);\n    input.remove();\n  });\n}\n\nfunction defaultSyncHiddenFormInput(\n  component: FormComponent,\n  input: HTMLInputElement,\n  value: string,\n): void {\n  const { defaultValue, disabled, form, name, required } = component;\n\n  // keep in sync to prevent losing reset value\n  input.defaultValue = defaultValue;\n  input.disabled = disabled;\n  input.name = name;\n  input.required = required;\n  input.tabIndex = -1;\n\n  // we set the attr as the prop is read-only\n  if (form) {\n    input.setAttribute(\"form\", form);\n  } else {\n    input.removeAttribute(\"form\");\n  }\n\n  if (isCheckable(component)) {\n    input.checked = component.checked;\n\n    // keep in sync to prevent losing reset value\n    input.defaultChecked = component.defaultChecked;\n    // heuristic to support default/on mode from https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on\n    input.value = component.checked ? value || \"on\" : \"\";\n  } else {\n    input.value = value || \"\";\n  }\n\n  component.syncHiddenFormInput?.(input);\n}\n\ninterface HiddenFormInputSlotProps {\n  component: FormComponent;\n}\n\n/**\n * Helper to render the slot for form-associated component's hidden input.\n *\n * If the component has a default slot, this must be placed at the bottom of the component's root container to ensure it is the last child.\n *\n * render(): VNode {\n *   <Host>\n *     <div class={CSS.container}>\n *     // ...\n *     <HiddenFormInputSlot component={this} />\n *     </div>\n *   </Host>\n * }\n *\n * Note that the hidden-form-input Sass mixin must be added to the component's style to apply specific styles.\n *\n * @param root0\n * @param root0.component\n */\nexport const HiddenFormInputSlot: FunctionalComponent<HiddenFormInputSlotProps> = ({\n  component,\n}) => {\n  syncHiddenFormInput(component);\n\n  return <slot name={hiddenFormInputSlotName} />;\n};\n"],"mappings":"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"}