{"version":3,"names":["supportedTimeZones","platformTimeZones","Intl","supportedValuesOf","etcTimeZones","Set","now","Date","startDate","toISOString","daysInYear","groupDateRange","defaultGroupingOptions","debug","continentAllowList","_getDates","numberDays","dateEngine","dateArray","date","create","i","increase","push","formatToIsoDateString","_extractContinent","label","includes","lastIndex","lastIndexOf","slice","_isRegularContinent","continent","has","generateTimeZoneMetadata","timeZoneItems","processedDates","Map","console","log","length","theDates","map","tzItem","dates","key","utc","get","isoToTimeZone","set","isRegularContinent","compareDateArrs","array1","array2","every","value","index","same","getGroupLabelTimeZoneIndices","rawTZs","max","shrinkedTzs","filter","validLabels","tz","indexOf","equallyDistributedSampling","items","maxItems","totalItems","numberItemsToSelect","Math","min","stepSize","Array","from","_","round","async","groupTimeZones","options","hooks","grouping","Error","onBeforeTimeZoneMetadataCreate","timeZoneMetadata","onTimeZoneMetadataCreate","tzMetadatumI","visited","newGroup","labelTzIndices","undefined","tzs","onGroupCreate","tzMetadatumJ","labelJ","continentJ","isRegularContinentJ","datesJ","onGroupTimeZoneAdd","onGroupAdd","finalGrouping","group","onBeforeFinalGroupCreate","sort","a","b","localeCompare","onFinalGroupCreate","missingTzs","some","y","Boolean","toString","onFinalGroupingCreate"],"sources":["../../node_modules/timezone-groups/dist/index.js"],"sourcesContent":["const supportedTimeZones = (() => {\n    const platformTimeZones = Intl.supportedValuesOf('timeZone');\n    // not all browsers include these time zones, so we add them to ensure consistent groups\n    const etcTimeZones = [\n        \"Etc/GMT+1\",\n        \"Etc/GMT+10\",\n        \"Etc/GMT+11\",\n        \"Etc/GMT+12\",\n        \"Etc/GMT+2\",\n        \"Etc/GMT+3\",\n        \"Etc/GMT+4\",\n        \"Etc/GMT+5\",\n        \"Etc/GMT+6\",\n        \"Etc/GMT+7\",\n        \"Etc/GMT+8\",\n        \"Etc/GMT+9\",\n        \"Etc/GMT-1\",\n        \"Etc/GMT-10\",\n        \"Etc/GMT-11\",\n        \"Etc/GMT-12\",\n        \"Etc/GMT-13\",\n        \"Etc/GMT-14\",\n        \"Etc/GMT-2\",\n        \"Etc/GMT-3\",\n        \"Etc/GMT-4\",\n        \"Etc/GMT-5\",\n        \"Etc/GMT-6\",\n        \"Etc/GMT-7\",\n        \"Etc/GMT-8\",\n        \"Etc/GMT-9\"\n    ];\n    return [...new Set([...platformTimeZones, ...etcTimeZones])];\n})();\n\nconst now = new Date();\nconst startDate = now.toISOString();\nconst daysInYear = 365;\nconst groupDateRange = daysInYear;\nconst defaultGroupingOptions = {\n    startDate,\n    groupDateRange,\n    debug: false,\n};\n\nconst continentAllowList = new Set([\n    'Europe',\n    'Asia',\n    'America',\n    'America/Argentina',\n    'Africa',\n    'Australia',\n    'Pacific',\n    'Atlantic',\n    'Antarctica',\n    'Arctic',\n    'Indian',\n]);\nconst _getDates = (startDate, numberDays, dateEngine) => {\n    const dateArray = [];\n    let date = dateEngine.create(startDate);\n    for (let i = 0; i <= numberDays; i++) {\n        date = dateEngine.increase(date);\n        dateArray.push(dateEngine.formatToIsoDateString(date));\n    }\n    return dateArray;\n};\nconst _extractContinent = (label) => {\n    if (label.includes('Istanbul')) {\n        return 'Europe';\n    }\n    const lastIndex = label.lastIndexOf('/');\n    return lastIndex === -1 ? label : label.slice(0, lastIndex);\n};\nconst _isRegularContinent = (continent) => continentAllowList.has(continent);\nconst generateTimeZoneMetadata = (timeZoneItems, startDate, numberDays, dateEngine, debug = false) => {\n    const processedDates = new Map();\n    if (debug) {\n        console.log(`Initializing data starting ${startDate} with ${numberDays} days in the future, comparing ${timeZoneItems.length} timezones`);\n    }\n    const theDates = _getDates(startDate, numberDays, dateEngine);\n    return timeZoneItems.map((tzItem) => {\n        const label = tzItem.label;\n        const continent = _extractContinent(label);\n        const dates = theDates.map((date) => {\n            const key = `${date}-${label}`;\n            let utc = processedDates.get(key);\n            if (utc) {\n                return utc;\n            }\n            utc = dateEngine.isoToTimeZone(date, label);\n            processedDates.set(key, utc);\n            return utc;\n        });\n        return {\n            ...tzItem,\n            continent,\n            isRegularContinent: _isRegularContinent(continent),\n            dates,\n        };\n    });\n};\nconst compareDateArrs = (array1, array2, dateEngine) => array1.length === array2.length &&\n    array1.every((value, index) => dateEngine.same(value, array2[index]));\nconst getGroupLabelTimeZoneIndices = (rawTZs, max = 5) => {\n    const shrinkedTzs = rawTZs.filter(({ label }) => _isRegularContinent(_extractContinent(label)));\n    if (shrinkedTzs.length === 0) {\n        return [0];\n    }\n    const validLabels = shrinkedTzs.map((tz) => rawTZs.indexOf(tz));\n    return equallyDistributedSampling(validLabels, max);\n};\nfunction equallyDistributedSampling(items, maxItems = 5) {\n    const totalItems = items.length;\n    if (totalItems <= maxItems) {\n        return items;\n    }\n    const numberItemsToSelect = Math.min(totalItems - 2, maxItems - 2);\n    const stepSize = (totalItems - 1) / (numberItemsToSelect + 1);\n    return [\n        items[0],\n        ...Array.from({ length: numberItemsToSelect }, (_, i) => items[Math.round((i + 1) * stepSize)]),\n        items[totalItems - 1],\n    ];\n}\n\nasync function groupTimeZones(options) {\n    const { debug, groupDateRange, hooks, startDate, dateEngine } = {\n        ...defaultGroupingOptions,\n        ...options,\n    };\n    const grouping = [];\n    if (!dateEngine) {\n        throw new Error('dateEngine is required');\n    }\n    const timeZoneItems = supportedTimeZones.map((tz) => ({ label: tz }));\n    hooks?.onBeforeTimeZoneMetadataCreate?.(timeZoneItems);\n    const timeZoneMetadata = generateTimeZoneMetadata(timeZoneItems, startDate, groupDateRange, dateEngine, debug);\n    hooks?.onTimeZoneMetadataCreate?.(timeZoneMetadata);\n    // We traverse the mappedDB and see if we find matches by comparing each set\n    // of transformed date for that specific TZ.\n    for (const tzMetadatumI of timeZoneMetadata) {\n        const { label, continent, dates } = tzMetadatumI;\n        // ignore if we visited this element already\n        if (tzMetadatumI.visited) {\n            continue;\n        }\n        // Mark element as already visited\n        tzMetadatumI.visited = true;\n        // The grouped timezone that we want as a result\n        const newGroup = {\n            labelTzIndices: undefined,\n            tzs: [{ label }],\n        };\n        hooks?.onGroupCreate?.(newGroup, tzMetadatumI);\n        for (const tzMetadatumJ of timeZoneMetadata.filter((_) => !_.visited)) {\n            const { label: labelJ, continent: continentJ, isRegularContinent: isRegularContinentJ, dates: datesJ, } = tzMetadatumJ;\n            // We define a matching TZ by:\n            // 1) if both continents match (avoid grouping Antarctica with anything else)\n            // 2) if the transformed dates match in both TZs\n            if ((continent === continentJ || !isRegularContinentJ) &&\n                compareDateArrs(dates, datesJ, dateEngine)) {\n                const tzItem = { label: labelJ };\n                newGroup.tzs.push(tzItem);\n                hooks?.onGroupTimeZoneAdd?.(newGroup, tzItem, tzMetadatumJ);\n                // Mark element as already visited\n                tzMetadatumJ.visited = true;\n            }\n        }\n        grouping.push(newGroup);\n        hooks?.onGroupAdd?.(newGroup);\n    }\n    // Now that we have a group, we want an easy way to find a fitting label for the group\n    // which is defined as the list of the most-common 7 cities, shown in alphabetical order\n    const finalGrouping = grouping\n        .map((group) => {\n        hooks?.onBeforeFinalGroupCreate?.(group);\n        group.tzs = group.tzs.sort((a, b) => a.label.localeCompare(b.label));\n        const finalGrouping = {\n            labelTzIndices: getGroupLabelTimeZoneIndices(group.tzs, 7),\n            tzs: group.tzs.map((_) => _.label),\n        };\n        hooks?.onFinalGroupCreate?.(finalGrouping, group);\n        return finalGrouping;\n    })\n        .sort((a, b) => b.tzs.length - a.tzs.length);\n    if (debug) {\n        const missingTzs = supportedTimeZones\n            .map((tz) => (finalGrouping.some((y) => y.tzs.includes(tz)) ? null : tz))\n            .filter(Boolean);\n        if (missingTzs.length > 0) {\n            throw new Error(`There are ${missingTzs.length} missing timezones: ${missingTzs.toString()}`);\n        }\n    }\n    return hooks?.onFinalGroupingCreate\n        ? hooks.onFinalGroupingCreate(finalGrouping)\n        : finalGrouping;\n}\n\nexport { groupTimeZones };\n"],"mappings":"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"}