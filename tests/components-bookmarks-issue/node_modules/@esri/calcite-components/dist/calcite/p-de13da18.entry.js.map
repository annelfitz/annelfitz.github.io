{"version":3,"names":["CSS","container","fill","stepLine","label","labelHidden","labelRange","labelValue","unitLabel","stepsVisible","valueVisible","success","warning","danger","meterCss","Meter","this","labelFlipMax","labelFlipProximity","maxPercent","minPercent","resizeObserver","createObserver","resizeHandler","formatLabel","value","labelType","percentFormatting","locale","getSupportedLocale","effectiveLocale","formatter","Intl","NumberFormat","useGrouping","groupSeparator","style","format","numberStringFormatter","numberFormatOptions","numberingSystem","localize","toString","handleRangeChange","calculateValues","updateLabels","handleLabelChange","componentWillLoad","setUpLoadableComponent","afterConnectDefaultValueSet","componentDidLoad","setComponentLoaded","connectedCallback","connectLocalized","connectForm","observe","el","disconnectedCallback","disconnectLocalized","disconnectForm","disconnect","valueLabelEl","determineValueLabelPosition","rangeLabels","determineVisibleLabels","min","max","low","high","lowPercent","highPercent","currentPercent","lowActive","highActive","getMeterKindCssClass","lowest","highest","aboveLowest","belowLowest","aboveHighest","belowHighest","intersects","el1","el2","getBoundingClientRect","minLabelEl","lowLabelEl","highLabelEl","maxLabelEl","highMaxOverlap","lowHighOverlap","lowMaxOverlap","minHighOverlap","minLowOverlap","minMaxOverlap","hiddenClass","classList","add","remove","meterContainerEl","valuePosition","valueLabelWidth","width","containerWidth","labelWidthPercent","insetInlineEnd","removeProperty","insetInlineStart","renderMeterFill","fillType","kindClass","h","class","renderRangeLine","position","renderValueLabel","valueLabelType","key","ref","renderMinLabel","rangeLabelType","labelMin","renderLowLabel","styleDefault","styleFlipped","renderHighLabel","renderMaxLabel","labelMax","render","appearance","valueLabel","textPercentLabelWithPercent","textUnitLabel","valueText","undefined","Host","role"],"sources":["src/components/meter/resources.ts","src/components/meter/meter.scss?tag=calcite-meter&encapsulation=shadow","src/components/meter/meter.tsx"],"sourcesContent":["export const CSS = {\n  container: \"container\",\n  fill: \"fill\",\n  stepLine: \"step-line\",\n  label: \"label\",\n  labelHidden: \"label-hidden\",\n  labelRange: \"label-range\",\n  labelValue: \"label-value\",\n  unitLabel: \"unit-label\",\n  stepsVisible: \"steps-visible\",\n  valueVisible: \"value-visible\",\n  success: \"fill-success\",\n  warning: \"fill-warning\",\n  danger: \"fill-danger\",\n};\n","@include base-component();\n@include disabled();\n\n:host {\n  @apply flex;\n  --calcite-meter-space-internal: theme(\"spacing[0.5]\");\n  --calcite-meter-height-internal: theme(\"spacing.4\");\n  --calcite-meter-font-size-internal: var(--calcite-font-size--1);\n}\n\n:host([scale=\"s\"]) {\n  --calcite-meter-height-internal: theme(\"spacing.3\");\n  --calcite-meter-font-size-internal: var(--calcite-font-size--2);\n}\n\n:host([scale=\"l\"]) {\n  --calcite-meter-height-internal: theme(\"spacing.6\");\n  --calcite-meter-font-size-internal: var(--calcite-font-size-0);\n}\n\n.container {\n  @apply flex relative items-center w-full m-0;\n  block-size: var(--calcite-meter-height-internal);\n  background-color: var(--calcite-color-foreground-2);\n  border: 1px solid var(--calcite-color-border-3);\n  border-radius: var(--calcite-meter-height-internal);\n}\n\n.solid {\n  border: 1px solid var(--calcite-color-foreground-3);\n  background-color: var(--calcite-color-foreground-3);\n}\n\n.outline {\n  @apply bg-transparent;\n}\n\n.value-visible {\n  margin-block-start: theme(\"spacing.6\");\n}\n\n.steps-visible {\n  margin-block-end: theme(\"spacing.6\");\n}\n\n.step-line {\n  @apply block absolute inset-y-0;\n  inline-size: var(--calcite-meter-space-internal);\n  background-color: var(--calcite-color-border-3);\n}\n\n.label {\n  @apply absolute;\n  font-size: var(--calcite-meter-font-size-internal);\n}\n\n.label-hidden {\n  @apply invisible opacity-0;\n}\n\n.label-value {\n  inset-block-end: calc(100% + 0.5em);\n  font-weight: var(--calcite-font-weight-bold);\n  color: var(--calcite-color-text-1);\n}\n\n.label-range {\n  @apply text-color-3;\n  inset-block-start: calc(100% + 0.5em);\n}\n\n.unit-label {\n  @apply text-color-3 font-medium;\n}\n\n.label-value .unit-label {\n  @apply text-color-2 font-bold;\n}\n\n.fill {\n  @apply block absolute duration-150 ease-in-out bg-brand z-default;\n  inset-inline-start: var(--calcite-meter-space-internal);\n  inset-block: var(--calcite-meter-space-internal);\n  border-radius: var(--calcite-meter-height-internal);\n  max-inline-size: calc(100% - (var(--calcite-meter-space-internal) * 2));\n  min-inline-size: calc(var(--calcite-meter-height-internal) - (var(--calcite-meter-space-internal) * 2));\n  transition-property: inline-size, background-color, box-shadow;\n}\n\n.fill-danger {\n  background-color: var(--calcite-color-status-danger);\n}\n\n.fill-success {\n  background-color: var(--calcite-color-status-success);\n}\n\n.fill-warning {\n  background-color: var(--calcite-color-status-warning);\n}\n\n.solid .fill {\n  inset-block: 0;\n  inset-inline-start: 0;\n  max-inline-size: 100%;\n  min-inline-size: calc(var(--calcite-meter-height-internal));\n  box-shadow: 0 0 0 1px var(--calcite-color-brand);\n}\n\n.solid .fill-danger {\n  box-shadow: 0 0 0 1px var(--calcite-color-status-danger);\n}\n\n.solid .fill-success {\n  box-shadow: 0 0 0 1px var(--calcite-color-status-success);\n}\n\n.solid .fill-warning {\n  box-shadow: 0 0 0 1px var(--calcite-color-status-warning);\n}\n","import { Component, Element, h, Host, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { Appearance, Scale } from \"../interfaces\";\nimport { CSS } from \"./resources\";\n\nimport {\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\n\nimport {\n  afterConnectDefaultValueSet,\n  connectForm,\n  disconnectForm,\n  FormComponent,\n} from \"../../utils/form\";\n\nimport {\n  connectLocalized,\n  disconnectLocalized,\n  getSupportedLocale,\n  LocalizedComponent,\n  NumberingSystem,\n  numberStringFormatter,\n  SupportedLocale,\n} from \"../../utils/locale\";\nimport { intersects } from \"../../utils/dom\";\nimport { createObserver } from \"../../utils/observers\";\nimport { MeterLabelType } from \"./interfaces\";\n\n@Component({\n  tag: \"calcite-meter\",\n  styleUrl: \"meter.scss\",\n  shadow: true,\n})\nexport class Meter implements FormComponent, LoadableComponent, LocalizedComponent {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** Specifies the appearance style of the component. */\n  @Prop({ reflect: true }) appearance: Extract<\"outline\" | \"outline-fill\" | \"solid\", Appearance> =\n    \"outline-fill\";\n\n  /** When `true`, interaction is prevented and the component is displayed with lower opacity. */\n  @Prop({ reflect: true }) disabled = false;\n\n  /** Specifies the component's display, where `\"single\"` displays a single color and `\"range\"` displays a range of colors based on provided `low`, `high`, `min` or `max` values. */\n  @Prop({ reflect: true }) fillType: \"single\" | \"range\" = \"range\";\n\n  /**\n   * The `id` of the form that will be associated with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   */\n  @Prop({ reflect: true }) form: string;\n\n  /** When `true`, number values are displayed with a group separator corresponding to the language and country format. */\n  @Prop({ reflect: true }) groupSeparator = false;\n\n  /** Specifies a high value.  When `fillType` is `\"range\"`, displays a different color when above the specified threshold.  */\n  @Prop({ reflect: true, mutable: true }) high: number;\n\n  /**  Accessible name for the component. */\n  @Prop() label!: string;\n\n  /** Specifies a low value.  When `fillType` is `\"range\"`, displays a different color when above the specified threshold.  */\n  @Prop({ reflect: true, mutable: true }) low: number;\n\n  /** Specifies the highest allowed value of the component. */\n  @Prop({ reflect: true }) max = 100;\n\n  /** Specifies the lowest allowed value of the component. */\n  @Prop({ reflect: true }) min = 0;\n\n  @Watch(\"min\")\n  @Watch(\"max\")\n  @Watch(\"low\")\n  @Watch(\"high\")\n  @Watch(\"value\")\n  handleRangeChange(): void {\n    this.calculateValues();\n    this.updateLabels();\n  }\n\n  /**\n   * Specifies the name of the component.\n   *\n   * Required to pass the component's `value` on form submission.\n   */\n  @Prop({ reflect: true }) name: string;\n\n  /** Specifies the Unicode numeral system used by the component for localization. */\n  @Prop() numberingSystem: NumberingSystem;\n\n  /** When `true`, displays the values of `high`, `low`, `min`, and `max`. */\n  @Prop({ reflect: true }) rangeLabels = false;\n\n  /** When `rangeLabels` is `true`, specifies the format of displayed labels. */\n  @Prop({ reflect: true }) rangeLabelType: MeterLabelType = \"percent\";\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** When `rangeLabelType` is `\"units\"` and either `valueLabel` or `rangeLabels` are `true`, displays beside the `value` and/or  `min` values. */\n  @Prop() unitLabel = \"\";\n\n  /** Specifies the current value of the component. */\n  @Prop({ mutable: true }) value: number;\n\n  /** When `true`, displays the current value. */\n  @Prop({ reflect: true }) valueLabel = false;\n\n  /** When `valueLabel` is `true`, specifies the format of displayed label. */\n  @Prop({ reflect: true }) valueLabelType: MeterLabelType = \"percent\";\n\n  @Watch(\"rangeLabels\")\n  @Watch(\"rangeLabelType\")\n  @Watch(\"unitLabel\")\n  @Watch(\"valueLabel\")\n  @Watch(\"valueLabelType\")\n  handleLabelChange(): void {\n    this.updateLabels();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    this.calculateValues();\n    afterConnectDefaultValueSet(this, this.value);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n    this.updateLabels();\n  }\n\n  connectedCallback(): void {\n    connectLocalized(this);\n    connectForm(this);\n    this.resizeObserver?.observe(this.el);\n  }\n\n  disconnectedCallback(): void {\n    disconnectLocalized(this);\n    disconnectForm(this);\n    this.resizeObserver?.disconnect();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteMeterElement;\n\n  defaultValue: Meter[\"value\"];\n\n  formEl: HTMLFormElement;\n\n  labelEl: HTMLCalciteLabelElement;\n\n  private highLabelEl: HTMLDivElement;\n\n  private labelFlipMax = 0.8;\n\n  private labelFlipProximity = 0.15;\n\n  private lowLabelEl: HTMLDivElement;\n\n  private maxLabelEl: HTMLDivElement;\n\n  private maxPercent = 100;\n\n  private meterContainerEl: HTMLDivElement;\n\n  private minLabelEl: HTMLDivElement;\n\n  private minPercent = 0;\n\n  private percentFormatting: {\n    formatter: Intl.NumberFormat;\n    locale: SupportedLocale;\n  };\n\n  private resizeObserver = createObserver(\"resize\", () => this.resizeHandler());\n\n  private valueLabelEl: HTMLDivElement;\n\n  @State() currentPercent: number;\n\n  @State() effectiveLocale: string;\n\n  @State() highActive: boolean;\n\n  @State() highPercent: number;\n\n  @State() lowActive: boolean;\n\n  @State() lowPercent: number;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private resizeHandler(): void {\n    this.updateLabels();\n  }\n\n  private updateLabels(): void {\n    if (this.valueLabelEl) {\n      this.determineValueLabelPosition();\n    }\n    if (this.rangeLabels) {\n      this.determineVisibleLabels();\n    }\n  }\n\n  private calculateValues(): void {\n    const { min, max, low, high, value } = this;\n    const lowPercent = (100 * (low - min)) / (max - min);\n    const highPercent = (100 * (high - min)) / (max - min);\n    const currentPercent = (100 * (value - min)) / (max - min);\n\n    if (!low || low < min || low > high || low > max) {\n      this.low = min;\n    }\n    if (!high || high > max || high < low || high < min) {\n      this.high = max;\n    }\n    if (!value) {\n      this.value = min;\n    }\n\n    this.lowPercent = lowPercent;\n    this.highPercent = highPercent;\n    this.currentPercent = value ? currentPercent : 0;\n    this.lowActive = !!low && low > min && (!value || low > value) && (!high || low < high);\n    this.highActive =\n      !!high && min <= high && high < max && (!value || high > value) && (!low || high > low);\n  }\n\n  private formatLabel = (value: number, labelType: MeterLabelType): string => {\n    if (labelType === \"percent\") {\n      if (!this.percentFormatting) {\n        const locale = getSupportedLocale(this.effectiveLocale);\n        const formatter = new Intl.NumberFormat(locale, {\n          useGrouping: this.groupSeparator,\n          style: \"percent\",\n        });\n        this.percentFormatting = { formatter, locale };\n      }\n      return this.percentFormatting.formatter.format(value);\n    } else {\n      numberStringFormatter.numberFormatOptions = {\n        locale: this.effectiveLocale,\n        numberingSystem: this.numberingSystem,\n        useGrouping: this.groupSeparator,\n      };\n      return numberStringFormatter.localize(value.toString());\n    }\n  };\n\n  private getMeterKindCssClass(): string {\n    const { low, high, min, max, value } = this;\n    const lowest = low ? low : min;\n    const highest = high ? high : max;\n    const aboveLowest = value >= lowest;\n    const belowLowest = value < lowest;\n    const aboveHighest = value >= highest;\n    const belowHighest = value < highest;\n\n    if (!value || (!low && belowHighest) || belowLowest) {\n      return CSS.success;\n    } else if (aboveLowest && belowHighest) {\n      return CSS.warning;\n    } else if (aboveHighest) {\n      return CSS.danger;\n    } else {\n      return CSS.success;\n    }\n  }\n\n  private intersects(el1: HTMLDivElement, el2: HTMLDivElement): boolean {\n    return el1 && el2 && intersects(el1.getBoundingClientRect(), el2.getBoundingClientRect());\n  }\n\n  private determineVisibleLabels(): void {\n    const { minLabelEl, lowLabelEl, highLabelEl, maxLabelEl } = this;\n    const highMaxOverlap = this.intersects(highLabelEl, maxLabelEl);\n    const lowHighOverlap = this.intersects(lowLabelEl, highLabelEl);\n    const lowMaxOverlap = this.intersects(lowLabelEl, maxLabelEl);\n    const minHighOverlap = this.intersects(minLabelEl, highLabelEl);\n    const minLowOverlap = this.intersects(minLabelEl, lowLabelEl);\n    const minMaxOverlap = this.intersects(minLabelEl, maxLabelEl);\n    const hiddenClass = CSS.labelHidden;\n\n    if (lowLabelEl) {\n      if (minLowOverlap || lowMaxOverlap || lowHighOverlap) {\n        lowLabelEl.classList.add(hiddenClass);\n      } else {\n        lowLabelEl.classList.remove(hiddenClass);\n      }\n    }\n\n    if (highLabelEl) {\n      if (minHighOverlap || lowMaxOverlap || highMaxOverlap) {\n        highLabelEl.classList.add(hiddenClass);\n      } else {\n        highLabelEl.classList.remove(hiddenClass);\n      }\n    }\n\n    if (minLabelEl && maxLabelEl) {\n      if (minMaxOverlap) {\n        maxLabelEl.classList.add(hiddenClass);\n      } else {\n        maxLabelEl.classList.remove(hiddenClass);\n      }\n    }\n  }\n\n  private determineValueLabelPosition(): void {\n    const { valueLabelEl, meterContainerEl, currentPercent } = this;\n    const valuePosition = currentPercent > 100 ? 100 : currentPercent > 0 ? currentPercent : 0;\n    const valueLabelWidth = valueLabelEl.getBoundingClientRect().width;\n    const containerWidth = meterContainerEl.getBoundingClientRect().width;\n    const labelWidthPercent = (100 * (valueLabelWidth - 0)) / (containerWidth - 0);\n\n    if (valuePosition + labelWidthPercent >= 100) {\n      valueLabelEl.style.insetInlineEnd = \"0%\";\n      valueLabelEl.style.removeProperty(\"inset-inline-start\");\n    } else {\n      valueLabelEl.style.insetInlineStart = `${valuePosition}% `;\n      valueLabelEl.style.removeProperty(\"inset-inline-end\");\n    }\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  //--------------------------------------------------------------------------\n\n  renderMeterFill(): VNode {\n    const { currentPercent, fillType } = this;\n    const kindClass = this.getMeterKindCssClass();\n    return (\n      <div\n        class={{ [CSS.fill]: true, [kindClass]: fillType !== \"single\" }}\n        style={{ width: `${currentPercent}%` }}\n      />\n    );\n  }\n\n  renderRangeLine(position: number): VNode {\n    const style = { insetInlineStart: `${position}%` };\n    return <div class={CSS.stepLine} style={style} />;\n  }\n\n  renderValueLabel(): VNode {\n    const { currentPercent, valueLabelType, unitLabel, value } = this;\n    const label = this.formatLabel(\n      valueLabelType === \"percent\" ? currentPercent / 100 : value || 0,\n      valueLabelType,\n    );\n    return (\n      <div\n        class={{ [CSS.label]: true, [CSS.labelValue]: true }}\n        key=\"low-label-line\"\n        // eslint-disable-next-line react/jsx-sort-props\n        ref={(el) => (this.valueLabelEl = el)}\n      >\n        {label}\n        {unitLabel && valueLabelType !== \"percent\" && (\n          <span class={CSS.unitLabel}>&nbsp;{unitLabel}</span>\n        )}\n      </div>\n    );\n  }\n\n  renderMinLabel(): VNode {\n    const { rangeLabelType, min, minPercent, unitLabel } = this;\n    const style = { insetInlineStart: `${minPercent}%` };\n    const labelMin = this.formatLabel(\n      rangeLabelType === \"percent\" ? minPercent : min,\n      rangeLabelType,\n    );\n    return (\n      <div\n        class={{ [CSS.label]: true, [CSS.labelRange]: true }}\n        key=\"min-label-line\"\n        style={style}\n        // eslint-disable-next-line react/jsx-sort-props\n        ref={(el) => (this.minLabelEl = el)}\n      >\n        {labelMin}\n        {unitLabel && rangeLabelType !== \"percent\" && (\n          <span class={CSS.unitLabel}>&nbsp;{unitLabel}</span>\n        )}\n      </div>\n    );\n  }\n\n  renderLowLabel(): VNode {\n    const { rangeLabelType, low, lowPercent, highPercent, labelFlipProximity } = this;\n    const label = low\n      ? this.formatLabel(rangeLabelType === \"percent\" ? lowPercent / 100 : low, rangeLabelType)\n      : \"\";\n    const styleDefault = { insetInlineStart: `${lowPercent}%` };\n    const styleFlipped = { insetInlineEnd: `${100 - lowPercent}%` };\n    const style =\n      (highPercent - lowPercent) / 100 < labelFlipProximity ? styleFlipped : styleDefault;\n    return (\n      <div\n        class={{ [CSS.label]: true, [CSS.labelRange]: true }}\n        key=\"low-label-line\"\n        style={style}\n        // eslint-disable-next-line react/jsx-sort-props\n        ref={(el) => (this.lowLabelEl = el)}\n      >\n        {label}\n      </div>\n    );\n  }\n\n  renderHighLabel(): VNode {\n    const { rangeLabelType, high, highPercent, labelFlipMax } = this;\n    const label = high\n      ? this.formatLabel(rangeLabelType === \"percent\" ? highPercent / 100 : high, rangeLabelType)\n      : \"\";\n    const styleDefault = { insetInlineStart: `${highPercent}%` };\n    const styleFlipped = { insetInlineEnd: `${100 - highPercent}%` };\n    const style = highPercent / 100 >= labelFlipMax ? styleFlipped : styleDefault;\n    return (\n      <div\n        class={{ [CSS.label]: true, [CSS.labelRange]: true }}\n        key=\"high-label-line\"\n        style={style}\n        // eslint-disable-next-line react/jsx-sort-props\n        ref={(el) => (this.highLabelEl = el as HTMLDivElement)}\n      >\n        {label}\n      </div>\n    );\n  }\n\n  renderMaxLabel(): VNode {\n    const { rangeLabelType, max, maxPercent } = this;\n    const style = { insetInlineEnd: `${100 - maxPercent}%` };\n    const labelMax = this.formatLabel(\n      rangeLabelType === \"percent\" ? maxPercent / 100 : max,\n      rangeLabelType,\n    );\n    return (\n      <div\n        class={{ [CSS.label]: true, [CSS.labelRange]: true }}\n        key=\"max-label-line\"\n        style={style}\n        // eslint-disable-next-line react/jsx-sort-props\n        ref={(el) => (this.maxLabelEl = el as HTMLDivElement)}\n      >\n        {labelMax}\n      </div>\n    );\n  }\n\n  render(): VNode {\n    const {\n      appearance,\n      currentPercent,\n      highActive,\n      highPercent,\n      label,\n      lowActive,\n      lowPercent,\n      max,\n      maxPercent,\n      min,\n      minPercent,\n      rangeLabels,\n      rangeLabelType,\n      unitLabel,\n      value,\n      valueLabel,\n      valueLabelType,\n    } = this;\n    const textPercentLabelWithPercent = this.formatLabel(currentPercent / 100, \"percent\");\n    const textUnitLabel = `${value} ${unitLabel}`;\n    const valueText =\n      valueLabelType === \"percent\"\n        ? textPercentLabelWithPercent\n        : unitLabel\n          ? textUnitLabel\n          : undefined;\n    return (\n      <Host>\n        <div\n          aria-label={label}\n          aria-valuemax={rangeLabelType === \"percent\" ? maxPercent : max}\n          aria-valuemin={rangeLabelType === \"percent\" ? minPercent : min}\n          aria-valuenow={valueLabelType === \"percent\" ? currentPercent : value}\n          aria-valuetext={valueText}\n          class={{\n            [CSS.container]: true,\n            [CSS.stepsVisible]: rangeLabels,\n            [CSS.valueVisible]: valueLabel,\n            [appearance]: appearance !== \"outline-fill\",\n          }}\n          role=\"meter\"\n          // eslint-disable-next-line react/jsx-sort-props\n          ref={(el) => (this.meterContainerEl = el as HTMLDivElement)}\n        >\n          {this.renderMeterFill()}\n          {valueLabel && this.renderValueLabel()}\n          {lowActive && this.renderRangeLine(lowPercent)}\n          {highActive && this.renderRangeLine(highPercent)}\n          {rangeLabels && this.renderMinLabel()}\n          {rangeLabels && lowActive && this.renderLowLabel()}\n          {rangeLabels && highActive && this.renderHighLabel()}\n          {rangeLabels && this.renderMaxLabel()}\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}