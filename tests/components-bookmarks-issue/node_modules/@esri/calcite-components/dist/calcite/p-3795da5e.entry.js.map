{"version":3,"names":["chipGroupCss","ChipGroup","this","mutationObserver","createObserver","updateItems","items","event","target","slotRefEl","assignedElements","flatten","filter","el","matches","forEach","interactive","scale","selectionMode","setSelectedItems","emit","elToMatch","matchingEl","selected","selectedItems","calciteChipGroupSelect","onSelectionModeChange","connectedCallback","connectInteractive","observe","childList","subtree","componentDidRender","disconnectInteractive","updateHostInteraction","componentDidLoad","setComponentLoaded","disconnectedCallback","disconnect","componentWillLoad","setUpLoadableComponent","calciteInternalChipKeyEventListener","composedPath","includes","interactiveItems","disabled","detail","key","focusElementInGroup","calciteChipCloseListener","item","indexOf","calciteChipSelectListener","setFocus","componentFocusable","render","role","h","InteractiveContainer","toAriaBoolean","label","class","onSlotchange","ref"],"sources":["src/components/chip-group/chip-group.scss?tag=calcite-chip-group&encapsulation=shadow","src/components/chip-group/chip-group.tsx"],"sourcesContent":[":host {\n  display: flex;\n}\n\n.container {\n  display: flex;\n  inline-size: 100%;\n  flex-wrap: wrap;\n  gap: theme(\"spacing.2\");\n}\n\n::slotted(calcite-chip) {\n  flex: none;\n}\n\n:host([scale=\"s\"]) .container {\n  gap: theme(\"spacing.1\");\n}\n\n:host([scale=\"l\"]) .container {\n  gap: theme(\"spacing.3\");\n}\n\n@include disabled();\n@include base-component();\n","import {\n  Component,\n  h,\n  VNode,\n  Prop,\n  Element,\n  Listen,\n  EventEmitter,\n  Event,\n  Method,\n  Watch,\n} from \"@stencil/core\";\nimport { focusElementInGroup, toAriaBoolean } from \"../../utils/dom\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Scale, SelectionMode } from \"../interfaces\";\nimport {\n  componentFocusable,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\n/**\n * @slot - A slot for adding one or more `calcite-chip`s.\n */\n@Component({\n  tag: \"calcite-chip-group\",\n  styleUrl: \"chip-group.scss\",\n  shadow: true,\n})\nexport class ChipGroup implements InteractiveComponent {\n  //--------------------------------------------------------------------------\n  //\n  //  Public Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** When `true`, interaction is prevented and the component is displayed with lower opacity. */\n  @Prop({ reflect: true }) disabled = false;\n\n  /** Accessible name for the component. */\n  @Prop() label!: string;\n\n  /** Specifies the size of the component. Child `calcite-chip`s inherit the component's value. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /**\n   * Specifies the selection mode of the component, where:\n   *\n   * `\"multiple\"` allows any number of selections,\n   *\n   * `\"single\"` allows only one selection,\n   *\n   * `\"single-persist\"` allows one selection and prevents de-selection, and\n   *\n   * `\"none\"` does not allow any selections.\n   */\n  @Prop({ reflect: true }) selectionMode: Extract<\n    \"multiple\" | \"single\" | \"single-persist\" | \"none\",\n    SelectionMode\n  > = \"none\";\n\n  @Watch(\"selectionMode\")\n  onSelectionModeChange(): void {\n    this.updateItems();\n  }\n\n  /**\n   * Specifies the component's selected items.\n   *\n   * @readonly\n   */\n  @Prop({ mutable: true }) selectedItems: HTMLCalciteChipElement[] = [];\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteChipGroupElement;\n\n  mutationObserver = createObserver(\"mutation\", () => this.updateItems());\n\n  private items: HTMLCalciteChipElement[] = [];\n\n  private slotRefEl: HTMLSlotElement;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /** Fires when the component's selection changes. */\n  @Event({ cancelable: false }) calciteChipGroupSelect: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectInteractive(this);\n    this.mutationObserver?.observe(this.el, { childList: true, subtree: true });\n  }\n\n  componentDidRender(): void {\n    disconnectInteractive(this);\n    updateHostInteraction(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  disconnectedCallback(): void {\n    this.mutationObserver?.disconnect();\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Event Listeners\n  //\n  //--------------------------------------------------------------------------\n\n  @Listen(\"calciteInternalChipKeyEvent\")\n  calciteInternalChipKeyEventListener(event: CustomEvent): void {\n    if (event.composedPath().includes(this.el)) {\n      const interactiveItems = this.items?.filter((el) => !el.disabled);\n      switch (event.detail.key) {\n        case \"ArrowRight\":\n          focusElementInGroup(interactiveItems, event.detail.target, \"next\");\n          break;\n        case \"ArrowLeft\":\n          focusElementInGroup(interactiveItems, event.detail.target, \"previous\");\n          break;\n        case \"Home\":\n          focusElementInGroup(interactiveItems, event.detail.target, \"first\");\n          break;\n        case \"End\":\n          focusElementInGroup(interactiveItems, event.detail.target, \"last\");\n          break;\n      }\n    }\n  }\n\n  @Listen(\"calciteChipClose\")\n  calciteChipCloseListener(event: CustomEvent): void {\n    const item = event.target as HTMLCalciteChipElement;\n    if (this.items?.includes(item)) {\n      if (this.items?.indexOf(item) > 0) {\n        focusElementInGroup(this.items, item as HTMLCalciteChipElement, \"previous\");\n      } else if (this.items?.indexOf(item) === 0) {\n        focusElementInGroup(this.items, item as HTMLCalciteChipElement, \"next\");\n      } else {\n        focusElementInGroup(this.items, item as HTMLCalciteChipElement, \"first\");\n      }\n    }\n    this.items = this.items?.filter((el) => el !== item);\n  }\n\n  @Listen(\"calciteChipSelect\")\n  calciteChipSelectListener(event: CustomEvent): void {\n    if (event.composedPath().includes(this.el)) {\n      this.setSelectedItems(true, event.target as HTMLCalciteChipElement);\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Sets focus on the component's first focusable element.\n   */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    if (!this.disabled) {\n      return (this.selectedItems[0] || this.items[0])?.setFocus();\n    }\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private updateItems = (event?: Event): void => {\n    const target = event ? (event.target as HTMLSlotElement) : this.slotRefEl;\n    this.items = target\n      ?.assignedElements({ flatten: true })\n      .filter((el) => el?.matches(\"calcite-chip\")) as HTMLCalciteChipElement[];\n\n    this.items?.forEach((el) => {\n      el.interactive = true;\n      el.scale = this.scale;\n      el.selectionMode = this.selectionMode;\n    });\n\n    this.setSelectedItems(false);\n  };\n\n  private setSelectedItems = (emit: boolean, elToMatch?: HTMLCalciteChipElement): void => {\n    if (elToMatch) {\n      this.items?.forEach((el) => {\n        const matchingEl = elToMatch === el;\n        switch (this.selectionMode) {\n          case \"multiple\":\n            if (matchingEl) {\n              el.selected = !el.selected;\n            }\n            break;\n\n          case \"single\":\n            el.selected = matchingEl ? !el.selected : false;\n            break;\n\n          case \"single-persist\":\n            el.selected = !!matchingEl;\n            break;\n        }\n      });\n    }\n\n    this.selectedItems = this.items?.filter((el) => el.selected);\n\n    if (emit) {\n      this.calciteChipGroupSelect.emit();\n    }\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  //--------------------------------------------------------------------------\n\n  render(): VNode {\n    const role =\n      this.selectionMode === \"none\" || this.selectionMode === \"multiple\" ? \"group\" : \"radiogroup\";\n    const { disabled } = this;\n\n    return (\n      <InteractiveContainer disabled={disabled}>\n        <div\n          aria-disabled={toAriaBoolean(disabled)}\n          aria-label={this.label}\n          class=\"container\"\n          role={role}\n        >\n          <slot\n            onSlotchange={this.updateItems}\n            ref={(el) => (this.slotRefEl = el as HTMLSlotElement)}\n          />\n        </div>\n      </InteractiveContainer>\n    );\n  }\n}\n"],"mappings":"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"}