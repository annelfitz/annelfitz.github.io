{"version":3,"names":["CSS","container","TOOLTIP_OPEN_DELAY_MS","TOOLTIP_CLOSE_DELAY_MS","ARIA_DESCRIBED_BY","getEffectiveReferenceElement","tooltip","referenceElement","queryElementRoots","id","TooltipManager","constructor","this","registeredElements","WeakMap","registeredShadowRootCounts","hoverOpenTimeout","hoverCloseTimeout","hoveredTooltip","clickedTooltip","activeTooltip","registeredElementCount","queryTooltip","composedPath","registeredElement","find","pathEl","has","get","keyDownHandler","event","key","defaultPrevented","open","clearHoverTimeout","closeActiveTooltip","Element","contains","target","preventDefault","pointerMoveHandler","hoveringActiveTooltip","includes","isClosableClickedTooltip","openHoveredTooltip","closeHoveredTooltip","pointerDownHandler","isPrimaryPointerButton","closeOnClick","toggleTooltip","focusInHandler","queryFocusedTooltip","focusOutHandler","window","setTimeout","clearHoverCloseTimeout","registerElement","referenceEl","set","shadowRoot","getReferenceElShadowRootNode","registerShadowRoot","addListeners","unregisterElement","unregisterShadowRoot","delete","removeListeners","addShadowListeners","addEventListener","capture","removeShadowListeners","removeEventListener","clearHoverOpenTimeout","clearTimeout","toggleFocusedTooltip","newCount","getShadowRootNode","tooltipCss","manager","Tooltip","guid","hasLoaded","openTransitionProp","setTransitionEl","el","transitionEl","setUpReferenceElement","warn","removeReferences","effectiveReferenceElement","connectFloatingUI","console","tagName","addReferences","getId","setAttribute","removeAttribute","defaultOffsetDistance","offsetDistanceOffsetHandler","reposition","offsetSkiddingHandler","openHandler","onToggleOpenCloseComponent","overlayPositioningHandler","placementHandler","referenceElementHandler","connectedCallback","componentWillLoad","componentDidLoad","disconnectedCallback","disconnectFloatingUI","delayed","placement","overlayPositioning","offsetDistance","offsetSkidding","arrowEl","floatingEl","type","onBeforeOpen","calciteTooltipBeforeOpen","emit","onOpen","calciteTooltipOpen","onBeforeClose","calciteTooltipBeforeClose","onClose","calciteTooltipClose","render","label","floatingLayout","displayed","hidden","h","Host","toAriaBoolean","role","class","FloatingCSS","animation","animationActive","ref","FloatingArrow"],"sources":["src/components/tooltip/resources.ts","src/components/tooltip/utils.ts","src/components/tooltip/TooltipManager.ts","src/components/tooltip/tooltip.scss?tag=calcite-tooltip&encapsulation=shadow","src/components/tooltip/tooltip.tsx"],"sourcesContent":["export const CSS = {\n  container: \"container\",\n};\n\nexport const TOOLTIP_OPEN_DELAY_MS = 300;\nexport const TOOLTIP_CLOSE_DELAY_MS = 500;\n\nexport const ARIA_DESCRIBED_BY = \"aria-describedby\";\n","import { ReferenceElement } from \"../../utils/floating-ui\";\nimport { queryElementRoots } from \"../../utils/dom\";\n\nexport function getEffectiveReferenceElement(tooltip: HTMLCalciteTooltipElement): ReferenceElement {\n  const { referenceElement } = tooltip;\n\n  return (\n    (typeof referenceElement === \"string\" ? queryElementRoots(tooltip, { id: referenceElement }) : referenceElement) ||\n    null\n  );\n}\n","import { getShadowRootNode, isPrimaryPointerButton } from \"../../utils/dom\";\nimport { ReferenceElement } from \"../../utils/floating-ui\";\nimport { TOOLTIP_OPEN_DELAY_MS, TOOLTIP_CLOSE_DELAY_MS } from \"./resources\";\nimport { getEffectiveReferenceElement } from \"./utils\";\n\nexport default class TooltipManager {\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  private registeredElements = new WeakMap<ReferenceElement, HTMLCalciteTooltipElement>();\n\n  private registeredShadowRootCounts = new WeakMap<ShadowRoot, number>();\n\n  private hoverOpenTimeout: number = null;\n\n  private hoverCloseTimeout: number = null;\n\n  private hoveredTooltip: HTMLCalciteTooltipElement = null;\n\n  private clickedTooltip: HTMLCalciteTooltipElement = null;\n\n  private activeTooltip: HTMLCalciteTooltipElement = null;\n\n  private registeredElementCount = 0;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  registerElement(referenceEl: ReferenceElement, tooltip: HTMLCalciteTooltipElement): void {\n    this.registeredElementCount++;\n    this.registeredElements.set(referenceEl, tooltip);\n    const shadowRoot = this.getReferenceElShadowRootNode(referenceEl);\n\n    if (shadowRoot) {\n      this.registerShadowRoot(shadowRoot);\n    }\n\n    if (this.registeredElementCount === 1) {\n      this.addListeners();\n    }\n  }\n\n  unregisterElement(referenceEl: ReferenceElement): void {\n    const shadowRoot = this.getReferenceElShadowRootNode(referenceEl);\n\n    if (shadowRoot) {\n      this.unregisterShadowRoot(shadowRoot);\n    }\n\n    if (this.registeredElements.delete(referenceEl)) {\n      this.registeredElementCount--;\n    }\n\n    if (this.registeredElementCount === 0) {\n      this.removeListeners();\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  private queryTooltip = (composedPath: EventTarget[]): HTMLCalciteTooltipElement => {\n    const { registeredElements } = this;\n\n    const registeredElement = (composedPath as HTMLElement[]).find((pathEl) => registeredElements.has(pathEl));\n\n    return registeredElements.get(registeredElement);\n  };\n\n  private keyDownHandler = (event: KeyboardEvent): void => {\n    if (event.key === \"Escape\" && !event.defaultPrevented) {\n      const { activeTooltip } = this;\n\n      if (activeTooltip?.open) {\n        this.clearHoverTimeout();\n        this.closeActiveTooltip();\n\n        const referenceElement = getEffectiveReferenceElement(activeTooltip);\n\n        if (referenceElement instanceof Element && referenceElement.contains(event.target as HTMLElement)) {\n          event.preventDefault();\n        }\n      }\n    }\n  };\n\n  private pointerMoveHandler = (event: PointerEvent): void => {\n    const composedPath = event.composedPath();\n    const { activeTooltip } = this;\n    const hoveringActiveTooltip = activeTooltip?.open && composedPath.includes(activeTooltip);\n\n    if (hoveringActiveTooltip) {\n      this.clearHoverTimeout();\n      return;\n    }\n\n    const tooltip = this.queryTooltip(composedPath);\n    this.hoveredTooltip = tooltip;\n\n    if (this.isClosableClickedTooltip(tooltip)) {\n      return;\n    }\n\n    this.clickedTooltip = null;\n\n    if (tooltip) {\n      this.openHoveredTooltip(tooltip);\n    } else if (activeTooltip) {\n      this.closeHoveredTooltip();\n    }\n  };\n\n  private pointerDownHandler = (event: PointerEvent): void => {\n    if (!isPrimaryPointerButton(event)) {\n      return;\n    }\n\n    const clickedTooltip = this.queryTooltip(event.composedPath());\n\n    this.clickedTooltip = clickedTooltip;\n\n    if (clickedTooltip?.closeOnClick) {\n      this.toggleTooltip(clickedTooltip, false);\n      this.clearHoverTimeout();\n    }\n  };\n\n  private focusInHandler = (event: FocusEvent): void => {\n    this.queryFocusedTooltip(event, true);\n  };\n\n  private focusOutHandler = (event: FocusEvent): void => {\n    this.queryFocusedTooltip(event, false);\n  };\n\n  private addShadowListeners(shadowRoot: ShadowRoot): void {\n    shadowRoot.addEventListener(\"focusin\", this.focusInHandler, { capture: true });\n    shadowRoot.addEventListener(\"focusout\", this.focusOutHandler, { capture: true });\n  }\n\n  private removeShadowListeners(shadowRoot: ShadowRoot): void {\n    shadowRoot.removeEventListener(\"focusin\", this.focusInHandler, { capture: true });\n    shadowRoot.removeEventListener(\"focusout\", this.focusOutHandler, { capture: true });\n  }\n\n  private addListeners(): void {\n    window.addEventListener(\"keydown\", this.keyDownHandler, { capture: true });\n    window.addEventListener(\"pointermove\", this.pointerMoveHandler, { capture: true });\n    window.addEventListener(\"pointerdown\", this.pointerDownHandler, { capture: true });\n    window.addEventListener(\"focusin\", this.focusInHandler, { capture: true });\n    window.addEventListener(\"focusout\", this.focusOutHandler, { capture: true });\n  }\n\n  private removeListeners(): void {\n    window.removeEventListener(\"keydown\", this.keyDownHandler, { capture: true });\n    window.removeEventListener(\"pointermove\", this.pointerMoveHandler, { capture: true });\n    window.removeEventListener(\"pointerdown\", this.pointerDownHandler, { capture: true });\n    window.removeEventListener(\"focusin\", this.focusInHandler, { capture: true });\n    window.removeEventListener(\"focusout\", this.focusOutHandler, { capture: true });\n  }\n\n  private clearHoverOpenTimeout(): void {\n    window.clearTimeout(this.hoverOpenTimeout);\n    this.hoverOpenTimeout = null;\n  }\n\n  private clearHoverCloseTimeout(): void {\n    window.clearTimeout(this.hoverCloseTimeout);\n    this.hoverCloseTimeout = null;\n  }\n\n  private clearHoverTimeout(): void {\n    this.clearHoverOpenTimeout();\n    this.clearHoverCloseTimeout();\n  }\n\n  private closeActiveTooltip(): void {\n    const { activeTooltip } = this;\n\n    if (activeTooltip?.open) {\n      this.toggleTooltip(activeTooltip, false);\n    }\n  }\n\n  private toggleFocusedTooltip(tooltip: HTMLCalciteTooltipElement, open: boolean): void {\n    this.closeActiveTooltip();\n\n    if (open) {\n      this.clearHoverTimeout();\n    }\n\n    this.toggleTooltip(tooltip, open);\n  }\n\n  private toggleTooltip(tooltip: HTMLCalciteTooltipElement, open: boolean): void {\n    tooltip.open = open;\n\n    this.activeTooltip = open ? tooltip : null;\n  }\n\n  private openHoveredTooltip = (tooltip: HTMLCalciteTooltipElement): void => {\n    this.hoverOpenTimeout = window.setTimeout(\n      () => {\n        if (this.hoverOpenTimeout === null) {\n          return;\n        }\n\n        this.clearHoverCloseTimeout();\n\n        if (this.activeTooltip === this.hoveredTooltip) {\n          return;\n        }\n\n        this.closeActiveTooltip();\n\n        if (tooltip !== this.hoveredTooltip) {\n          return;\n        }\n\n        this.toggleTooltip(tooltip, true);\n      },\n      this.activeTooltip ? 0 : TOOLTIP_OPEN_DELAY_MS,\n    );\n  };\n\n  private closeHoveredTooltip = (): void => {\n    this.hoverCloseTimeout = window.setTimeout(() => {\n      if (this.hoverCloseTimeout === null) {\n        return;\n      }\n\n      this.closeActiveTooltip();\n    }, TOOLTIP_CLOSE_DELAY_MS);\n  };\n\n  private queryFocusedTooltip(event: FocusEvent, open: boolean): void {\n    const tooltip = this.queryTooltip(event.composedPath());\n\n    if (!tooltip || this.isClosableClickedTooltip(tooltip)) {\n      return;\n    }\n\n    this.toggleFocusedTooltip(tooltip, open);\n  }\n\n  private isClosableClickedTooltip(tooltip: HTMLCalciteTooltipElement): boolean {\n    return tooltip?.closeOnClick && tooltip === this.clickedTooltip;\n  }\n\n  private registerShadowRoot(shadowRoot: ShadowRoot): void {\n    const { registeredShadowRootCounts } = this;\n\n    const newCount = (registeredShadowRootCounts.get(shadowRoot) ?? 0) + 1;\n\n    if (newCount === 1) {\n      this.addShadowListeners(shadowRoot);\n    }\n\n    registeredShadowRootCounts.set(shadowRoot, newCount);\n  }\n\n  private unregisterShadowRoot(shadowRoot: ShadowRoot): void {\n    const { registeredShadowRootCounts } = this;\n\n    const newCount = registeredShadowRootCounts.get(shadowRoot) - 1;\n\n    if (newCount === 0) {\n      this.removeShadowListeners(shadowRoot);\n    }\n\n    registeredShadowRootCounts.set(shadowRoot, newCount);\n  }\n\n  private getReferenceElShadowRootNode(referenceEl: ReferenceElement): ShadowRoot | null {\n    return referenceEl instanceof Element ? getShadowRootNode(referenceEl) : null;\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-tooltip-z-index: Sets the z-index value for the component.\n */\n\n:host {\n  --calcite-floating-ui-z-index: var(--calcite-tooltip-z-index, theme(\"zIndex.tooltip\"));\n}\n\n@include floatingUIHost();\n@include floatingUIArrow();\n\n.container {\n  @apply text-color-1\n    text-n2-wrap\n    relative\n    overflow-hidden\n    rounded\n    py-3\n    px-4\n    font-medium;\n  max-inline-size: 20rem;\n  max-block-size: 20rem;\n  text-align: start;\n}\n\n.calcite-floating-ui-anim {\n  @apply bg-foreground-1\n    border-color-3\n    rounded\n    border\n    border-solid;\n}\n\n.arrow::before {\n  outline: 1px solid var(--calcite-color-border-3);\n}\n\n@include base-component();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { toAriaBoolean } from \"../../utils/dom\";\nimport {\n  connectFloatingUI,\n  defaultOffsetDistance,\n  disconnectFloatingUI,\n  FloatingCSS,\n  FloatingLayout,\n  FloatingUIComponent,\n  LogicalPlacement,\n  OverlayPositioning,\n  ReferenceElement,\n  reposition,\n} from \"../../utils/floating-ui\";\nimport { guid } from \"../../utils/guid\";\nimport { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\nimport { ARIA_DESCRIBED_BY, CSS } from \"./resources\";\n\nimport TooltipManager from \"./TooltipManager\";\nimport { getEffectiveReferenceElement } from \"./utils\";\nimport { FloatingArrow } from \"../functional/FloatingArrow\";\n\nconst manager = new TooltipManager();\n\n/**\n * @slot - A slot for adding text.\n */\n@Component({\n  tag: \"calcite-tooltip\",\n  styleUrl: \"tooltip.scss\",\n  shadow: true,\n})\nexport class Tooltip implements FloatingUIComponent, OpenCloseComponent {\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /** Closes the component when the `referenceElement` is clicked. */\n  @Prop({ reflect: true }) closeOnClick = false;\n\n  /**\n   * Accessible name for the component.\n   *\n   * @deprecated No longer necessary. Overrides the context of the component's description, which could confuse assistive technology users.\n   */\n  @Prop() label: string;\n\n  /**\n   * Offset the position of the component away from the `referenceElement`.\n   *\n   * @default 6\n   */\n  @Prop({ reflect: true }) offsetDistance = defaultOffsetDistance;\n\n  @Watch(\"offsetDistance\")\n  offsetDistanceOffsetHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * Offset the position of the component along the `referenceElement`.\n   */\n  @Prop({ reflect: true }) offsetSkidding = 0;\n\n  @Watch(\"offsetSkidding\")\n  offsetSkiddingHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * When `true`, the component is open.\n   */\n  @Prop({ reflect: true }) open = false;\n\n  @Watch(\"open\")\n  openHandler(): void {\n    onToggleOpenCloseComponent(this);\n    this.reposition(true);\n  }\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * The `\"fixed\"` value should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  @Watch(\"overlayPositioning\")\n  overlayPositioningHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * Determines where the component will be positioned relative to the `referenceElement`.\n   */\n  @Prop({ reflect: true }) placement: LogicalPlacement = \"auto\";\n\n  @Watch(\"placement\")\n  placementHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * The `referenceElement` to position the component according to its `\"placement\"` value.\n   *\n   * Setting to the `HTMLElement` is preferred so the component does not need to query the DOM for the `referenceElement`.\n   *\n   * However, a string ID of the reference element can be used.\n   */\n  @Prop() referenceElement: ReferenceElement | string;\n\n  @Watch(\"referenceElement\")\n  referenceElementHandler(): void {\n    this.setUpReferenceElement();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteTooltipElement;\n\n  @State() effectiveReferenceElement: ReferenceElement;\n\n  @State() floatingLayout: FloatingLayout = \"vertical\";\n\n  arrowEl: SVGElement;\n\n  guid = `calcite-tooltip-${guid()}`;\n\n  hasLoaded = false;\n\n  openTransitionProp = \"opacity\";\n\n  transitionEl: HTMLDivElement;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.setUpReferenceElement(this.hasLoaded);\n    if (this.open) {\n      onToggleOpenCloseComponent(this);\n    }\n    connectFloatingUI(this, this.effectiveReferenceElement, this.el);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    if (this.open) {\n      onToggleOpenCloseComponent(this);\n    }\n  }\n\n  componentDidLoad(): void {\n    if (this.referenceElement && !this.effectiveReferenceElement) {\n      this.setUpReferenceElement();\n    }\n    this.reposition(true);\n    this.hasLoaded = true;\n  }\n\n  disconnectedCallback(): void {\n    this.removeReferences();\n    disconnectFloatingUI(this, this.effectiveReferenceElement, this.el);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /** Fires when the component is requested to be closed and before the closing transition begins. */\n  @Event({ cancelable: false }) calciteTooltipBeforeClose: EventEmitter<void>;\n\n  /** Fires when the component is closed and animation is complete. */\n  @Event({ cancelable: false }) calciteTooltipClose: EventEmitter<void>;\n\n  /** Fires when the component is added to the DOM but not rendered, and before the opening transition begins. */\n  @Event({ cancelable: false }) calciteTooltipBeforeOpen: EventEmitter<void>;\n\n  /** Fires when the component is open and animation is complete. */\n  @Event({ cancelable: false }) calciteTooltipOpen: EventEmitter<void>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Updates the position of the component.\n   *\n   * @param delayed\n   */\n  @Method()\n  async reposition(delayed = false): Promise<void> {\n    const {\n      el,\n      effectiveReferenceElement,\n      placement,\n      overlayPositioning,\n      offsetDistance,\n      offsetSkidding,\n      arrowEl,\n    } = this;\n\n    return reposition(\n      this,\n      {\n        floatingEl: el,\n        referenceEl: effectiveReferenceElement,\n        overlayPositioning,\n        placement,\n        offsetDistance,\n        offsetSkidding,\n        arrowEl,\n        type: \"tooltip\",\n      },\n      delayed,\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  onBeforeOpen(): void {\n    this.calciteTooltipBeforeOpen.emit();\n  }\n\n  onOpen(): void {\n    this.calciteTooltipOpen.emit();\n  }\n\n  onBeforeClose(): void {\n    this.calciteTooltipBeforeClose.emit();\n  }\n\n  onClose(): void {\n    this.calciteTooltipClose.emit();\n  }\n\n  private setTransitionEl = (el): void => {\n    this.transitionEl = el;\n  };\n\n  setUpReferenceElement = (warn = true): void => {\n    this.removeReferences();\n    this.effectiveReferenceElement = getEffectiveReferenceElement(this.el);\n    connectFloatingUI(this, this.effectiveReferenceElement, this.el);\n\n    const { el, referenceElement, effectiveReferenceElement } = this;\n    if (warn && referenceElement && !effectiveReferenceElement) {\n      console.warn(`${el.tagName}: reference-element id \"${referenceElement}\" was not found.`, {\n        el,\n      });\n    }\n\n    this.addReferences();\n  };\n\n  getId = (): string => {\n    return this.el.id || this.guid;\n  };\n\n  addReferences = (): void => {\n    const { effectiveReferenceElement } = this;\n\n    if (!effectiveReferenceElement) {\n      return;\n    }\n\n    const id = this.getId();\n\n    if (\"setAttribute\" in effectiveReferenceElement) {\n      effectiveReferenceElement.setAttribute(ARIA_DESCRIBED_BY, id);\n    }\n\n    manager.registerElement(effectiveReferenceElement, this.el);\n  };\n\n  removeReferences = (): void => {\n    const { effectiveReferenceElement } = this;\n\n    if (!effectiveReferenceElement) {\n      return;\n    }\n\n    if (\"removeAttribute\" in effectiveReferenceElement) {\n      effectiveReferenceElement.removeAttribute(ARIA_DESCRIBED_BY);\n    }\n\n    manager.unregisterElement(effectiveReferenceElement);\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    const { effectiveReferenceElement, label, open, floatingLayout } = this;\n    const displayed = effectiveReferenceElement && open;\n    const hidden = !displayed;\n\n    return (\n      <Host\n        aria-hidden={toAriaBoolean(hidden)}\n        aria-label={label}\n        aria-live=\"polite\"\n        calcite-hydrated-hidden={hidden}\n        id={this.getId()}\n        role=\"tooltip\"\n      >\n        <div\n          class={{\n            [FloatingCSS.animation]: true,\n            [FloatingCSS.animationActive]: displayed,\n          }}\n          // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n          ref={this.setTransitionEl}\n        >\n          <FloatingArrow\n            floatingLayout={floatingLayout}\n            // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n            ref={(arrowEl: SVGElement) => (this.arrowEl = arrowEl)}\n          />\n          <div class={CSS.container}>\n            <slot />\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}