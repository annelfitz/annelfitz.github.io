{"file":"calcite-icon.entry.js","mappings":"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","names":[],"sources":["src/components/icon/resources.ts","src/components/icon/utils.ts","src/components/icon/icon.scss?tag=calcite-icon&encapsulation=shadow","src/components/icon/icon.tsx"],"sourcesContent":["export const CSS = {\n  icon: \"icon\",\n  flipRtl: \"flip-rtl\",\n};\n","import { CalciteIconPath } from \"@esri/calcite-ui-icons\";\nimport { getAssetPath } from \"@stencil/core\";\nimport { Scale } from \"../interfaces\";\n\nexport interface FetchIconProps {\n  icon: string;\n  scale: Scale;\n}\n\n/**\n * Icon data cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const iconCache: Record<string, CalciteIconPath> = {};\n\n/**\n * Icon request cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const requestCache: Record<string, Promise<CalciteIconPath>> = {};\n\nexport const scaleToPx: Record<Scale, number> = {\n  s: 16,\n  m: 24,\n  l: 32,\n};\n\nexport async function fetchIcon({ icon, scale }: FetchIconProps): Promise<CalciteIconPath> {\n  const size = scaleToPx[scale];\n  const name = normalizeIconName(icon);\n  const filled = name.charAt(name.length - 1) === \"F\";\n  const iconName = filled ? name.substring(0, name.length - 1) : name;\n  const id = `${iconName}${size}${filled ? \"F\" : \"\"}`;\n\n  if (iconCache[id]) {\n    return iconCache[id];\n  }\n  if (!requestCache[id]) {\n    requestCache[id] = fetch(getAssetPath(`./assets/icon/${id}.json`))\n      .then((resp) => resp.json())\n      .catch(() => {\n        console.error(`\"${id}\" is not a valid calcite-ui-icon name`);\n        return \"\";\n      });\n  }\n\n  const path = await requestCache[id];\n  iconCache[id] = path;\n\n  return path;\n}\n\n/**\n * Normalize the icon name to match the path data module exports.\n * Exported for testing purposes.\n *\n * @param name â€“ an icon name that can be either kebab or camel-cased\n * @private\n */\nexport function normalizeIconName(name: string): string {\n  const numberLeadingName = !isNaN(Number(name.charAt(0)));\n  const parts = name.split(\"-\");\n  const kebabCased = parts.length > 0;\n\n  if (kebabCased) {\n    const firstNonDigitInPartPattern = /[a-z]/i;\n\n    name = parts\n      .map((part, partIndex) => {\n        return part.replace(firstNonDigitInPartPattern, function replacer(match, offset) {\n          const isFirstCharInName = partIndex === 0 && offset === 0;\n\n          if (isFirstCharInName) {\n            return match;\n          }\n\n          return match.toUpperCase();\n        });\n      })\n      .join(\"\");\n  }\n\n  return numberLeadingName ? `i${name}` : name;\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-ui-icon-color: The component's color. Defaults to `currentColor`.\n */\n\n:host {\n  @apply text-color-icon inline-flex;\n}\n\n$icon-size-s: 16px;\n$icon-size-m: 24px;\n$icon-size-l: 32px;\n\n:host([scale=\"s\"]) {\n  inline-size: $icon-size-s;\n  block-size: $icon-size-s;\n  min-inline-size: $icon-size-s;\n  min-block-size: $icon-size-s;\n}\n\n:host([scale=\"m\"]) {\n  inline-size: $icon-size-m;\n  block-size: $icon-size-m;\n  min-inline-size: $icon-size-m;\n  min-block-size: $icon-size-m;\n}\n\n:host([scale=\"l\"]) {\n  inline-size: $icon-size-l;\n  block-size: $icon-size-l;\n  min-inline-size: $icon-size-l;\n  min-block-size: $icon-size-l;\n}\n\n.flip-rtl {\n  transform: scaleX(-1);\n}\n\n.svg {\n  @apply block;\n}\n\n@include base-component();\n","import { CalciteIconPath, CalciteMultiPathEntry } from \"@esri/calcite-ui-icons\";\nimport { Build, Component, Element, h, Host, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { getElementDir, toAriaBoolean } from \"../../utils/dom\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Scale } from \"../interfaces\";\nimport { CSS } from \"./resources\";\nimport { fetchIcon, scaleToPx } from \"./utils\";\n\n@Component({\n  tag: \"calcite-icon\",\n  styleUrl: \"icon.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Icon {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Displays a specific icon.\n   *\n   * @see [Icons](https://esri.github.io/calcite-ui-icons)\n   */\n  @Prop({\n    reflect: true,\n  })\n  icon: string = null;\n\n  /**\n   * When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).\n   */\n  @Prop({\n    reflect: true,\n  })\n  flipRtl = false;\n\n  /**\n   * Specifies the size of the component.\n   */\n  @Prop({\n    reflect: true,\n  })\n  scale: Scale = \"m\";\n\n  /**\n   * Accessible name for the component.\n   *\n   * It is recommended to set this value if your icon is semantic.\n   */\n  @Prop()\n  textLabel: string;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.waitUntilVisible(() => {\n      this.visible = true;\n      this.loadIconPathData();\n    });\n  }\n\n  disconnectedCallback(): void {\n    this.intersectionObserver?.disconnect();\n    this.intersectionObserver = null;\n  }\n\n  async componentWillLoad(): Promise<void> {\n    this.loadIconPathData();\n  }\n\n  render(): VNode {\n    const { el, flipRtl, pathData, scale, textLabel } = this;\n    const dir = getElementDir(el);\n    const size = scaleToPx[scale];\n    const semantic = !!textLabel;\n    const paths = [].concat(pathData || \"\");\n    return (\n      <Host\n        aria-hidden={toAriaBoolean(!semantic)}\n        aria-label={semantic ? textLabel : null}\n        role={semantic ? \"img\" : null}\n      >\n        <svg\n          aria-hidden=\"true\"\n          class={{\n            [CSS.flipRtl]: dir === \"rtl\" && flipRtl,\n            svg: true,\n          }}\n          fill=\"currentColor\"\n          height=\"100%\"\n          viewBox={`0 0 ${size} ${size}`}\n          width=\"100%\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          {paths.map((path: string | CalciteMultiPathEntry) =>\n            typeof path === \"string\" ? (\n              <path d={path} />\n            ) : (\n              <path d={path.d} opacity={\"opacity\" in path ? path.opacity : 1} />\n            ),\n          )}\n        </svg>\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteIconElement;\n\n  private intersectionObserver: IntersectionObserver;\n\n  @State()\n  private pathData: CalciteIconPath;\n\n  @State()\n  private visible = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  @Watch(\"icon\")\n  @Watch(\"scale\")\n  private async loadIconPathData(): Promise<void> {\n    const { icon, scale, visible } = this;\n\n    if (!Build.isBrowser || !icon || !visible) {\n      return;\n    }\n\n    const pathData = await fetchIcon({ icon, scale });\n\n    // While the fetchIcon method is awaiting response, the icon requested can change. This check is to verify the response received belongs to the current icon.\n    if (icon !== this.icon) {\n      return;\n    }\n\n    this.pathData = pathData;\n  }\n\n  private waitUntilVisible(callback: () => void): void {\n    this.intersectionObserver = createObserver(\n      \"intersection\",\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            this.intersectionObserver.disconnect();\n            this.intersectionObserver = null;\n            callback();\n          }\n        });\n      },\n      { rootMargin: \"50px\" },\n    );\n\n    if (!this.intersectionObserver) {\n      callback();\n      return;\n    }\n\n    this.intersectionObserver.observe(this.el);\n  }\n}\n"],"version":3}