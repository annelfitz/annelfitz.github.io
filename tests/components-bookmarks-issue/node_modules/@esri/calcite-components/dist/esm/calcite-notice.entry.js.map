{"file":"calcite-notice.entry.js","mappings":"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","names":[],"sources":["src/components/notice/resources.ts","src/components/notice/notice.scss?tag=calcite-notice&encapsulation=shadow","src/components/notice/notice.tsx"],"sourcesContent":["export const SLOTS = {\n  title: \"title\",\n  message: \"message\",\n  link: \"link\",\n  actionsEnd: \"actions-end\",\n};\n\nexport const CSS = {\n  actionsEnd: \"actions-end\",\n  close: \"notice-close\",\n  container: \"container\",\n  content: \"notice-content\",\n  icon: \"notice-icon\",\n};\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-notice-width: The width of the component.\n */\n\n// scale variables\n:host([scale=\"s\"]) {\n  --calcite-notice-spacing-token-small: theme(\"spacing.2\");\n  --calcite-notice-spacing-token-large: theme(\"spacing.3\");\n  @include slotted(\"title\", \"*\", \".container\") {\n    @apply text-n1-wrap my-0.5;\n  }\n  @include slotted(\"message\", \"*\", \".container\") {\n    @apply text-n2-wrap my-0.5;\n  }\n  ::slotted(calcite-link) {\n    @apply text-n2-wrap my-0.5;\n  }\n  .notice-close {\n    // specific padding for close button to align with calcite-action small-scale spacing\n    @apply p-2;\n  }\n}\n\n:host([scale=\"m\"]) {\n  --calcite-notice-spacing-token-small: theme(\"spacing.3\");\n  --calcite-notice-spacing-token-large: theme(\"spacing.4\");\n  @include slotted(\"title\", \"*\", \".container\") {\n    @apply text-0-wrap my-0.5;\n  }\n  @include slotted(\"message\", \"*\", \".container\") {\n    @apply text-n1-wrap my-0.5;\n  }\n  ::slotted(calcite-link) {\n    @apply text-n1-wrap my-0.5;\n  }\n}\n\n:host([scale=\"l\"]) {\n  --calcite-notice-spacing-token-small: theme(\"spacing.4\");\n  --calcite-notice-spacing-token-large: theme(\"spacing.5\");\n  @include slotted(\"title\", \"*\", \".container\") {\n    @apply text-1-wrap my-0.5;\n  }\n  @include slotted(\"message\", \"*\", \".container\") {\n    @apply text-0-wrap my-0.5;\n  }\n  ::slotted(calcite-link) {\n    @apply text-0-wrap my-0.5;\n  }\n}\n\n:host([width=\"auto\"]) {\n  --calcite-notice-width: theme(\"width.auto\");\n}\n\n:host([width=\"half\"]) {\n  --calcite-notice-width: theme(\"width[1/2]\");\n}\n\n:host([width=\"full\"]) {\n  --calcite-notice-width: theme(\"width.full\");\n}\n\n:host {\n  @apply mx-auto hidden max-w-full items-center;\n  inline-size: var(--calcite-notice-width);\n}\n\n.container {\n  @apply bg-foreground-1\n    pointer-events-none\n    my-0\n    box-border\n    hidden\n    w-full\n    opacity-0\n    transition-default;\n  max-block-size: 0;\n  text-align: start;\n  border-inline-start: 0px solid;\n  box-shadow: 0 0 0 0 transparent;\n}\n\n// focus styles\n.notice-close {\n  @apply focus-base;\n  &:focus {\n    @apply focus-inset;\n  }\n}\n\n:host {\n  @apply flex;\n}\n\n:host([open]) .container {\n  @apply shadow-1\n    pointer-events-auto\n    flex\n    max-h-full\n    items-center\n    border-2\n    opacity-100;\n}\n\n@include slotted(\"title\", \"*\", \".container\") {\n  @apply text-color-1 m-0 font-medium;\n}\n\n@include slotted(\"message\", \"*\", \".container\") {\n  @apply text-color-2 m-0 inline font-normal;\n  margin-inline-end: var(--calcite-notice-spacing-token-small);\n}\n\n@mixin notice-element-base() {\n  @apply transition-default box-border;\n  padding-block: var(--calcite-notice-spacing-token-small);\n  padding-inline: var(--calcite-notice-spacing-token-large);\n  flex: 0 0 auto;\n}\n\n.notice-content {\n  @include notice-element-base;\n  @apply flex min-w-0 flex-col break-words;\n  flex: 1 1 0;\n  padding-block: var(--calcite-notice-spacing-token-small);\n  padding-inline: 0 var(--calcite-notice-spacing-token-small);\n\n  &:first-of-type:not(:only-child) {\n    padding-inline-start: var(--calcite-notice-spacing-token-large);\n  }\n  &:only-of-type {\n    padding-block: var(--calcite-notice-spacing-token-small);\n    padding-inline: var(--calcite-notice-spacing-token-large);\n  }\n}\n\n.notice-icon {\n  @apply flex items-center;\n  @include notice-element-base;\n}\n\n.notice-close {\n  @apply text-color-3 flex cursor-pointer items-center self-stretch border-none bg-transparent outline-none;\n  @include notice-element-base;\n  -webkit-appearance: none;\n\n  &:hover,\n  &:focus {\n    @apply bg-foreground-2 text-color-1;\n  }\n\n  &:active {\n    @apply bg-foreground-3;\n  }\n}\n\n.actions-end {\n  @apply flex self-stretch;\n}\n\n$noticeKinds:\n  \"brand\" var(--calcite-color-brand),\n  \"info\" var(--calcite-color-status-info),\n  \"danger\" var(--calcite-color-status-danger),\n  \"success\" var(--calcite-color-status-success),\n  \"warning\" var(--calcite-color-status-warning);\n\n@each $noticeKind in $noticeKinds {\n  $name: nth($noticeKind, 1);\n  $kind: nth($noticeKind, 2);\n\n  :host([kind=\"#{$name}\"]) .container {\n    border-color: $kind;\n    & .notice-icon {\n      color: $kind;\n    }\n  }\n}\n\n@include base-component();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport {\n  ConditionalSlotComponent,\n  connectConditionalSlotComponent,\n  disconnectConditionalSlotComponent,\n} from \"../../utils/conditionalSlot\";\nimport { getSlotted, setRequestedIcon } from \"../../utils/dom\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { Kind, Scale, Width } from \"../interfaces\";\nimport { KindIcons } from \"../resources\";\nimport { NoticeMessages } from \"./assets/notice/t9n\";\nimport { CSS, SLOTS } from \"./resources\";\nimport { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\nimport { getIconScale } from \"../../utils/component\";\n\n/**\n * Notices are intended to be used to present users with important-but-not-crucial contextual tips or copy. Because\n * notices are displayed inline, a common use case is displaying them on page-load to present users with short hints or contextual copy.\n * They are optionally closable - useful for keeping track of whether or not a user has closed the notice. You can also choose not\n * to display a notice on page load and set the \"active\" attribute as needed to contextually provide inline messaging to users.\n */\n\n/**\n * @slot title - A slot for adding the title.\n * @slot message - A slot for adding the message.\n * @slot link - A slot for adding a `calcite-action` to take, such as: \"undo\", \"try again\", \"link to page\", etc.\n * @slot actions-end - A slot for adding `calcite-action`s to the end of the component. It is recommended to use two or less actions.\n */\n\n@Component({\n  tag: \"calcite-notice\",\n  styleUrl: \"notice.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Notice\n  implements\n    ConditionalSlotComponent,\n    LoadableComponent,\n    T9nComponent,\n    LocalizedComponent,\n    OpenCloseComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //---------------------------------------------------------------------------\n\n  /** When `true`, the component is visible. */\n  @Prop({ reflect: true, mutable: true }) open = false;\n\n  @Watch(\"open\")\n  openHandler(): void {\n    onToggleOpenCloseComponent(this);\n  }\n\n  /** Specifies the kind of the component, which will apply to top border and icon. */\n  @Prop({ reflect: true }) kind: Extract<\n    \"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\",\n    Kind\n  > = \"brand\";\n\n  /** When `true`, a close button is added to the component. */\n  @Prop({ reflect: true }) closable = false;\n\n  /**\n   * When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.\n   */\n  @Prop({ reflect: true }) icon: string | boolean;\n\n  /** When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the width of the component. */\n  @Prop({ reflect: true }) width: Width = \"auto\";\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: NoticeMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<NoticeMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  @Watch(\"icon\")\n  @Watch(\"kind\")\n  updateRequestedIcon(): void {\n    this.requestedIcon = setRequestedIcon(KindIcons, this.icon, this.kind);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectConditionalSlotComponent(this);\n    connectLocalized(this);\n    connectMessages(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectConditionalSlotComponent(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    this.requestedIcon = setRequestedIcon(KindIcons, this.icon, this.kind);\n    await setUpMessages(this);\n    if (this.open) {\n      onToggleOpenCloseComponent(this);\n    }\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  render(): VNode {\n    const { el } = this;\n    const closeButton = (\n      <button\n        aria-label={this.messages.close}\n        class={CSS.close}\n        onClick={this.close}\n        // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n        ref={(el) => (this.closeButton = el)}\n      >\n        <calcite-icon icon=\"x\" scale={getIconScale(this.scale)} />\n      </button>\n    );\n\n    const hasActionEnd = getSlotted(el, SLOTS.actionsEnd);\n\n    return (\n      <div\n        class={CSS.container}\n        // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n        ref={this.setTransitionEl}\n      >\n        {this.requestedIcon ? (\n          <div class={CSS.icon}>\n            <calcite-icon\n              flipRtl={this.iconFlipRtl}\n              icon={this.requestedIcon}\n              scale={getIconScale(this.scale)}\n            />\n          </div>\n        ) : null}\n        <div class={CSS.content}>\n          <slot name={SLOTS.title} />\n          <slot name={SLOTS.message} />\n          <slot name={SLOTS.link} />\n        </div>\n        {hasActionEnd ? (\n          <div class={CSS.actionsEnd}>\n            <slot name={SLOTS.actionsEnd} />\n          </div>\n        ) : null}\n        {this.closable ? closeButton : null}\n      </div>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /** Fires when the component is requested to be closed and before the closing transition begins. */\n  @Event({ cancelable: false }) calciteNoticeBeforeClose: EventEmitter<void>;\n\n  /** Fires when the component is added to the DOM but not rendered, and before the opening transition begins. */\n  @Event({ cancelable: false }) calciteNoticeBeforeOpen: EventEmitter<void>;\n\n  /** Fires when the component is closed and animation is complete. */\n  @Event({ cancelable: false }) calciteNoticeClose: EventEmitter<void>;\n\n  /** Fires when the component is open and animation is complete. */\n  @Event({ cancelable: false }) calciteNoticeOpen: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component's first focusable element. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    const noticeLinkEl = this.el.querySelector(\"calcite-link\");\n\n    if (!this.closeButton && !noticeLinkEl) {\n      return;\n    }\n    if (noticeLinkEl) {\n      return noticeLinkEl.setFocus();\n    } else if (this.closeButton) {\n      this.closeButton.focus();\n    }\n  }\n\n  onBeforeClose(): void {\n    this.calciteNoticeBeforeClose.emit();\n  }\n\n  onBeforeOpen(): void {\n    this.calciteNoticeBeforeOpen.emit();\n  }\n\n  onClose(): void {\n    this.calciteNoticeClose.emit();\n  }\n\n  onOpen(): void {\n    this.calciteNoticeOpen.emit();\n  }\n\n  private setTransitionEl = (el: HTMLElement): void => {\n    this.transitionEl = el;\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n  private close = (): void => {\n    this.open = false;\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteNoticeElement;\n\n  /** The close button element. */\n  private closeButton?: HTMLButtonElement;\n\n  /** The computed icon to render. */\n  private requestedIcon?: string;\n\n  @State() effectiveLocale: string;\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() defaultMessages: NoticeMessages;\n\n  openTransitionProp = \"opacity\";\n\n  transitionEl: HTMLElement;\n}\n"],"version":3}