{"file":"calcite-scrim.entry.js","mappings":";;;;;;;;;;;;;;AAAO,MAAM,GAAG,GAAG;IACjB,KAAK,EAAE,OAAO;IACd,OAAO,EAAE,SAAS;CACnB,CAAC;AAEK,MAAM,WAAW,GAAG;IACzB,CAAC,EAAE,EAAE;;IAEL,CAAC,EAAE,GAAG;CACP;;ACTD,MAAM,QAAQ,GAAG,wsBAAwsB;;MCwB5sB,KAAK;;;QAuChB,mBAAc,GAAG,cAAc,CAAC,QAAQ,EAAE,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;;;;;;QAuE7D,4BAAuB,GAAG,CAAC,KAAY;YAC7C,IAAI,CAAC,UAAU,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;SAC/C,CAAC;QAEM,kBAAa,GAAG,CAAC,EAA4B;YACnD,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;YACnB,IAAI,CAAC,YAAY,EAAE,CAAC;SACrB,CAAC;uBA3GiC,KAAK;;;;;+BAqCb,EAAE;0BAOP,KAAK;;IA3B3B,gBAAgB;;KAEf;IAqBD,qBAAqB;QACnB,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;KAC5C;;;;;;IAUD,iBAAiB;QACf,gBAAgB,CAAC,IAAI,CAAC,CAAC;QACvB,eAAe,CAAC,IAAI,CAAC,CAAC;QACtB,IAAI,CAAC,cAAc,EAAE,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KACvC;IAED,MAAM,iBAAiB;QACrB,MAAM,aAAa,CAAC,IAAI,CAAC,CAAC;KAC3B;IAED,oBAAoB;QAClB,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAC1B,kBAAkB,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,cAAc,EAAE,UAAU,EAAE,CAAC;KACnC;;;;;;IAQD,MAAM;QACJ,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;QAE/C,QACE,WAAK,KAAK,EAAE,GAAG,CAAC,KAAK,IAClB,OAAO,IACN,sBACE,KAAK,EAAE,QAAQ,CAAC,OAAO,EACvB,KAAK,EAAE,IAAI,CAAC,WAAW;;YAEvB,GAAG,EAAE,IAAI,CAAC,aAAa,GACvB,IACA,IAAI,EACR,WAAK,KAAK,EAAE,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,CAAC,UAAU,IAC1C,YAAM,YAAY,EAAE,IAAI,CAAC,uBAAuB,GAAI,CAChD,CACF,EACN;KACH;IAiBO,QAAQ,CAAC,IAAY;QAC3B,IAAI,IAAI,GAAG,WAAW,CAAC,CAAC,EAAE;YACxB,OAAO,GAAG,CAAC;SACZ;aAAM,IAAI,IAAI,IAAI,WAAW,CAAC,CAAC,EAAE;YAChC,OAAO,GAAG,CAAC;SACZ;aAAM;YACL,OAAO,GAAG,CAAC;SACZ;KACF;IAEO,YAAY;QAClB,MAAM,EAAE,QAAQ,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;QAE9B,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO;SACR;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,YAAY,EAAE,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;KAClF;;;;;;;;;;;;","names":[],"sources":["src/components/scrim/resources.ts","src/components/scrim/scrim.scss?tag=calcite-scrim&encapsulation=shadow","src/components/scrim/scrim.tsx"],"sourcesContent":["export const CSS = {\n  scrim: \"scrim\",\n  content: \"content\",\n};\n\nexport const BREAKPOINTS = {\n  s: 72, // Less than 72px.\n  // medium is assumed default.\n  l: 480, // Greater than or equal to 480px.\n};\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-scrim-background: Specifies the background color of the scrim.\n */\n:host {\n  --calcite-scrim-background: var(--calcite-color-transparent-scrim);\n}\n\n:host {\n  @apply absolute\n  inset-0\n  z-overlay\n  flex\n  h-full\n  w-full\n  flex-col\n  items-stretch;\n}\n\n@keyframes calcite-scrim-fade-in {\n  0% {\n    @apply bg-opacity-0;\n  }\n  100% {\n    @apply text-opacity-100;\n  }\n}\n\n.scrim {\n  @apply absolute\n  inset-0\n  flex\n  flex-col\n  content-center\n  items-center\n  justify-center\n  overflow-hidden;\n  animation: calcite-scrim-fade-in var(--calcite-internal-animation-timing-medium) ease-in-out;\n  background-color: var(--calcite-scrim-background, var(--calcite-color-transparent-scrim));\n}\n\n.content {\n  @apply p-4;\n}\n\n@include base-component();\n","import { Component, Element, h, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { ScrimMessages } from \"./assets/scrim/t9n\";\nimport { CSS, BREAKPOINTS } from \"./resources\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Scale } from \"../interfaces\";\nimport { slotChangeHasContent } from \"../../utils/dom\";\n\n/**\n * @slot - A slot for adding custom content, primarily loading information.\n */\n@Component({\n  tag: \"calcite-scrim\",\n  styleUrl: \"scrim.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Scrim implements LocalizedComponent, T9nComponent {\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When `true`, a busy indicator is displayed.\n   */\n  @Prop({ reflect: true }) loading = false;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: ScrimMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<ScrimMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteScrimElement;\n\n  resizeObserver = createObserver(\"resize\", () => this.handleResize());\n\n  loaderEl: HTMLCalciteLoaderElement;\n\n  @State() loaderScale: Scale;\n\n  @State() defaultMessages: ScrimMessages;\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() hasContent = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectLocalized(this);\n    connectMessages(this);\n    this.resizeObserver?.observe(this.el);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    await setUpMessages(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    this.resizeObserver?.disconnect();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Method\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    const { hasContent, loading, messages } = this;\n\n    return (\n      <div class={CSS.scrim}>\n        {loading ? (\n          <calcite-loader\n            label={messages.loading}\n            scale={this.loaderScale}\n            // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n            ref={this.storeLoaderEl}\n          />\n        ) : null}\n        <div class={CSS.content} hidden={!hasContent}>\n          <slot onSlotchange={this.handleDefaultSlotChange} />\n        </div>\n      </div>\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  private handleDefaultSlotChange = (event: Event): void => {\n    this.hasContent = slotChangeHasContent(event);\n  };\n\n  private storeLoaderEl = (el: HTMLCalciteLoaderElement): void => {\n    this.loaderEl = el;\n    this.handleResize();\n  };\n\n  private getScale(size: number): Scale {\n    if (size < BREAKPOINTS.s) {\n      return \"s\";\n    } else if (size >= BREAKPOINTS.l) {\n      return \"l\";\n    } else {\n      return \"m\";\n    }\n  }\n\n  private handleResize(): void {\n    const { loaderEl, el } = this;\n\n    if (!loaderEl) {\n      return;\n    }\n\n    this.loaderScale = this.getScale(Math.min(el.clientHeight, el.clientWidth) ?? 0);\n  }\n}\n"],"version":3}