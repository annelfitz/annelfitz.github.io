{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/components/tree/utils.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,UAAU,CAAC,OAAgB;IACzC,OAAO,OAAO,EAAE,OAAO,KAAK,mBAAmB,CAAC;AAClD,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,IAA4B;IAC9D,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAA6B,mCAAmC,CAAC,CAAC,CAAC,MAAM,CAC9G,CAAC,IAAI,EAAW,EAAE;QAChB,IAAI,WAAW,GAAgB,IAAI,CAAC;QAEpC,OAAO,WAAW,KAAK,IAAI,IAAI,WAAW,KAAK,SAAS,EAAE;YACxD,MAAM,MAAM,GAAG,WAAW,CAAC,aAAa,CAAC;YACzC,MAAM,WAAW,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,IAAI,MAAM,CAAC,QAAQ,CAAC;YAElF,IAAI,CAAC,WAAW,EAAE;gBAChB,OAAO,KAAK,CAAC;aACd;YAED,WAAW,GAAG,WAAW,CAAC,aAAa,CAAC;SACzC;QAED,OAAO,IAAI,CAAC;IACd,CAAC,CACF,CAAC;AACJ,CAAC","sourcesContent":["export function isTreeItem(element: Element): element is HTMLCalciteTreeItemElement {\n  return element?.tagName === \"CALCITE-TREE-ITEM\";\n}\n\nexport function getTraversableItems(root: HTMLCalciteTreeElement): HTMLCalciteTreeItemElement[] {\n  return Array.from(root.querySelectorAll<HTMLCalciteTreeItemElement>(\"calcite-tree-item:not([disabled])\")).filter(\n    (item): boolean => {\n      let currentItem: HTMLElement = item;\n\n      while (currentItem !== root && currentItem !== undefined) {\n        const parent = currentItem.parentElement;\n        const traversable = !isTreeItem(parent) || !parent.hasChildren || parent.expanded;\n\n        if (!traversable) {\n          return false;\n        }\n\n        currentItem = currentItem.parentElement;\n      }\n\n      return true;\n    },\n  );\n}\n"]}