{"version":3,"file":"utils.spec.js","sourceRoot":"","sources":["../../../../src/components/date-picker/utils.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { getLocaleData, requestCache } from \"./utils\";\n\nfunction fetchFakeData(data: any): () => Promise<any> {\n  return () =>\n    new Promise((resolve) => {\n      resolve({\n        json: () => Promise.resolve({ data }),\n      });\n    });\n}\n\ndescribe(\"utils\", () => {\n  describe(\"getLocaleData\", () => {\n    beforeEach(() => {\n      const fakeData = { fake: \"fake data not meant to be checked\" };\n      global.fetch = jest.fn().mockImplementation(fetchFakeData(fakeData));\n    });\n\n    afterEach(() => {\n      jest.fn().mockClear();\n      Object.keys(requestCache).forEach((key) => delete requestCache[key]);\n    });\n\n    it(\"defaults to en locale if lang code is invalid\", async () => {\n      const locale = \"invalid-locale\";\n\n      await getLocaleData(locale);\n      expect(requestCache).toHaveProperty(\"en\");\n    });\n\n    it(\"falls to lang code locale if regional code is not found\", async () => {\n      const locale = \"pt-UnsupportedRegion\";\n\n      await getLocaleData(locale);\n      expect(requestCache).toHaveProperty(\"pt\");\n    });\n\n    it(\"fetches locale with conventional-cased lang code\", async () => {\n      const locale = \"es\";\n\n      await getLocaleData(locale);\n      expect(requestCache).toHaveProperty(\"es\");\n    });\n\n    it(\"fetches locale with uppercased lang code\", async () => {\n      const locale = \"AR\";\n\n      await getLocaleData(locale);\n      expect(requestCache).toHaveProperty(\"ar\");\n    });\n\n    it(\"fetches locale with lowercased region code\", async () => {\n      const locale = \"zh-cn\";\n\n      await getLocaleData(locale);\n      expect(requestCache).toHaveProperty(\"zh-CN\");\n    });\n\n    it(\"fetches locale with uppercased region code\", async () => {\n      const locale = \"ES-MX\";\n\n      await getLocaleData(locale);\n      expect(requestCache).toHaveProperty(\"es-MX\");\n    });\n\n    it(\"fetches locale with conventional-cased lang and region code\", async () => {\n      const locale = \"pt-PT\";\n\n      await getLocaleData(locale);\n      expect(requestCache).toHaveProperty(\"pt-PT\");\n    });\n  });\n});\n"]}