/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.6.0
 */
import { h, } from "@stencil/core";
import { createObserver } from "../../utils/observers";
/**
 * @slot - A slot for adding `calcite-accordion-item`s. `calcite-accordion` cannot be nested, however `calcite-accordion-item`s can.
 */
export class Accordion {
    constructor() {
        this.mutationObserver = createObserver("mutation", () => this.updateAccordionItems());
        this.appearance = "solid";
        this.iconPosition = "end";
        this.iconType = "chevron";
        this.scale = "m";
        this.selectionMode = "multiple";
    }
    handlePropsChange() {
        this.updateAccordionItems();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    connectedCallback() {
        this.mutationObserver?.observe(this.el, { childList: true });
        this.updateAccordionItems();
    }
    disconnectedCallback() {
        this.mutationObserver?.disconnect();
    }
    render() {
        const transparent = this.appearance === "transparent";
        return (h("div", { class: {
                "accordion--transparent": transparent,
                accordion: !transparent,
            } }, h("slot", null)));
    }
    //--------------------------------------------------------------------------
    //
    //  Event Listeners
    //
    //--------------------------------------------------------------------------
    updateActiveItemOnChange(event) {
        this.calciteInternalAccordionChange.emit({
            requestedAccordionItem: event.detail.requestedAccordionItem,
        });
        event.stopPropagation();
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    updateAccordionItems() {
        this.el.querySelectorAll("calcite-accordion-item").forEach((item) => {
            item.iconPosition = this.iconPosition;
            item.iconType = this.iconType;
            item.scale = this.scale;
        });
        // sync props on items across shadow DOM
        document.dispatchEvent(new CustomEvent("calciteInternalAccordionItemsSync"));
    }
    static get is() { return "calcite-accordion"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["accordion.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["accordion.css"]
        };
    }
    static get properties() {
        return {
            "appearance": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Extract<\"solid\" | \"transparent\", Appearance>",
                    "resolved": "\"solid\" | \"transparent\"",
                    "references": {
                        "Extract": {
                            "location": "global",
                            "id": "global::Extract"
                        },
                        "Appearance": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Appearance"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the appearance of the component."
                },
                "attribute": "appearance",
                "reflect": true,
                "defaultValue": "\"solid\""
            },
            "iconPosition": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Position",
                    "resolved": "\"end\" | \"start\"",
                    "references": {
                        "Position": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Position"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the placement of the icon in the header."
                },
                "attribute": "icon-position",
                "reflect": true,
                "defaultValue": "\"end\""
            },
            "iconType": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "\"chevron\" | \"caret\" | \"plus-minus\"",
                    "resolved": "\"caret\" | \"chevron\" | \"plus-minus\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the type of the icon in the header."
                },
                "attribute": "icon-type",
                "reflect": true,
                "defaultValue": "\"chevron\""
            },
            "scale": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Scale",
                    "resolved": "\"l\" | \"m\" | \"s\"",
                    "references": {
                        "Scale": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Scale"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the size of the component."
                },
                "attribute": "scale",
                "reflect": true,
                "defaultValue": "\"m\""
            },
            "selectionMode": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Extract<\n    \"single\" | \"single-persist\" | \"multiple\",\n    SelectionMode\n  >",
                    "resolved": "\"multiple\" | \"single\" | \"single-persist\"",
                    "references": {
                        "Extract": {
                            "location": "global",
                            "id": "global::Extract"
                        },
                        "SelectionMode": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::SelectionMode"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the selection mode of the component, where:\n\n`\"multiple\"` allows any number of selections,\n\n`\"single\"` allows only one selection, and\n\n`\"single-persist\"` allows one selection and prevents de-selection."
                },
                "attribute": "selection-mode",
                "reflect": true,
                "defaultValue": "\"multiple\""
            }
        };
    }
    static get events() {
        return [{
                "method": "calciteInternalAccordionChange",
                "name": "calciteInternalAccordionChange",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": ""
                },
                "complexType": {
                    "original": "RequestedItem",
                    "resolved": "RequestedItem",
                    "references": {
                        "RequestedItem": {
                            "location": "import",
                            "path": "./interfaces",
                            "id": "src/components/accordion/interfaces.ts::RequestedItem"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "iconPosition",
                "methodName": "handlePropsChange"
            }, {
                "propName": "iconType",
                "methodName": "handlePropsChange"
            }, {
                "propName": "scale",
                "methodName": "handlePropsChange"
            }, {
                "propName": "selectionMode",
                "methodName": "handlePropsChange"
            }];
    }
    static get listeners() {
        return [{
                "name": "calciteInternalAccordionItemSelect",
                "method": "updateActiveItemOnChange",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=accordion.js.map
