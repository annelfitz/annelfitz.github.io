/**
 * Do not edit directly
 * Generated on Tue, 27 Feb 2024 18:51:11 GMT
 */
/**
 * Do not edit directly
 * Generated on Tue, 27 Feb 2024 18:51:11 GMT
 */
/**
 * Do not edit directly
 * Generated on Tue, 27 Feb 2024 18:51:11 GMT
 */
/**
 * Do not edit directly
 * Generated on Tue, 27 Feb 2024 18:51:11 GMT
 */
/**
 * Do not edit directly
 * Generated on Tue, 27 Feb 2024 18:51:09 GMT
 */
/* mixins & extensions */
/* helper to properly scale internal durations */
/**
* Currently only used in Checkbox.
*/
:host([disabled]) {
  cursor: default;
  -webkit-user-select: none;
          user-select: none;
  opacity: var(--calcite-opacity-disabled);
}

:host([disabled]) *,
:host([disabled]) ::slotted(*) {
  pointer-events: none;
}

/**
* CSS Custom Properties
*
* These properties can be overridden using the component's tag as selector.
*
* @prop --calcite-card-background-color: Specifies the background color of the component.
* @prop --calcite-card-border-color: Specifies the border color of the component.
* @prop --calcite-card-shadow: Specifies the shadow of the component.
* @prop --calcite-card-corner-radius: Specifies the corner radius of the component.
* @prop --calcite-card-accent-color-selected: Specifies the accent color of the component when `selected`.
* @prop --calcite-card-selection-background-color: Specifies the background color of the component's selection element.
* @prop --calcite-card-selection-background-color-hover: Specifies the background color of the component's selection element when hovered.
* @prop --calcite-card-selection-background-color-active: Specifies the background color of the component's selection element when active.
* @prop --calcite-card-selection-background-color-selected: Specifies the icon color of the component's selection element when `selected`.
* @prop --calcite-card-selection-icon-color: Specifies the icon color of the component's selection element.
* @prop --calcite-card-selection-icon-color-hover: Specifies the icon color of the component's selection element when hovered.
* @prop --calcite-card-selection-icon-color-selected: Specifies the icon color of the component's selection element when `selected`.
*
*/
:host {
  display: block;
  max-inline-size: 100%;
  --calcite-card-corner-radius: var(--calcite-corner-radius-sharp);
  --calcite-card-background-color: var(--calcite-color-foreground-1);
  --calcite-card-border-color: var(--calcite-color-border-3);
  --calcite-card-shadow: var(--calcite-shadow-none);
  --calcite-card-accent-color-selected: var(--calcite-color-brand);
  --calcite-card-selection-background-color: transparent;
  --calcite-card-selection-background-color-hover: var(--calcite-color-transparent-hover);
  --calcite-card-selection-background-color-active: var(--calcite-color-transparent-press);
  --calcite-card-selection-background-color-selected: transparent;
  --calcite-card-selection-icon-color: var(--calcite-color-text-3);
  --calcite-card-selection-icon-color-hover: var(--calcite-color-text-2);
  --calcite-card-selection-icon-color-selected: var(--calcite-color-brand);
}

.content-wrapper {
  position: relative;
  display: flex;
  block-size: 100%;
  flex-direction: column;
  justify-content: space-between;
  overflow: hidden;
  border: var(--calcite-border-width-sm) solid var(--calcite-card-border-color);
  border-radius: var(--calcite-card-corner-radius);
  background-color: var(--calcite-card-background-color);
  box-shadow: var(--calcite-card-shadow);
  pointer-events: none;
}

::slotted(*) {
  pointer-events: auto;
}

:host(:not([selectable])) .content-wrapper:not(.non-interactive) {
  outline-color: transparent;
}
:host(:not([selectable])) .content-wrapper:not(.non-interactive):focus {
  outline: 2px solid var(--calcite-ui-focus-color, var(--calcite-color-brand-hover, var(--calcite-color-brand)));
  outline-offset: calc(
            2px *
            calc(
              1 -
              2 * clamp(
                0,
                var(--calcite-offset-invert-focus),
                1
              )
            )
          );
}

.container {
  position: relative;
  display: flex;
  flex: 1 1 auto;
  flex-direction: column;
}

:host([loading]) .content-wrapper *:not(calcite-loader):not(.calcite-card-loader-container) {
  pointer-events: none;
  opacity: 0;
}

:host([loading]) .calcite-card-loader-container {
  position: absolute;
  inset: 0px;
  display: flex;
  align-items: center;
}

.header {
  display: flex;
  flex-direction: row;
  align-items: flex-start;
}

.footer {
  margin-block-start: auto;
  display: flex;
  flex-direction: row;
  align-content: space-between;
  justify-content: space-between;
  padding-inline: var(--calcite-spacing-md);
  padding-block-start: var(--calcite-spacing-xxs);
  padding-block-end: var(--calcite-spacing-md);
}

.header-text-container {
  display: flex;
  inline-size: 100%;
  flex-direction: column;
  justify-content: center;
  padding-inline: 0.75rem;
  padding-block: 0.5rem;
}
.header-text-container:not(:only-child) {
  padding-inline-end: 0.125rem;
}

.footer {
  margin-block-start: auto;
  flex-direction: row;
  align-content: space-between;
  justify-content: space-between;
  padding-inline: 0.75rem;
  padding-block: 0.25rem 0.75rem;
}

.card-content {
  block-size: auto;
  font-size: var(--calcite-font-size--2);
  line-height: 1.375;
}

.has-slotted-content {
  padding: 0.75rem;
}

:host([selected]) .content-wrapper {
  box-shadow: inset 0 -4px 0 0 var(--calcite-card-accent-color-selected);
}

:host([selectable]) .header {
  padding-inline-end: var(--calcite-spacing-xxxl);
}

slot[name=title]::slotted(*),
*::slotted([slot=title]) {
  margin: 0px;
  font-size: var(--calcite-font-size--1);
  line-height: 1.375;
  font-weight: var(--calcite-font-weight-medium);
  color: var(--calcite-color-text-1);
}

slot[name=subtitle]::slotted(*),
*::slotted([slot=subtitle]) {
  margin: 0px;
  margin-block-start: 0.125rem;
  font-size: var(--calcite-font-size--2);
  line-height: 1.375;
  font-weight: var(--calcite-font-weight-normal);
  color: var(--calcite-color-text-2);
}

slot[name=heading]::slotted(*),
*::slotted([slot=heading]) {
  margin: 0px;
  font-size: var(--calcite-font-size--1);
  line-height: 1.375;
  font-weight: var(--calcite-font-weight-medium);
  color: var(--calcite-color-text-1);
}

slot[name=description]::slotted(*),
*::slotted([slot=description]) {
  margin: 0px;
  margin-block-start: 0.125rem;
  font-size: var(--calcite-font-size--2);
  line-height: 1.375;
  font-weight: var(--calcite-font-weight-normal);
  color: var(--calcite-color-text-2);
}

slot[name=thumbnail]::slotted(img),
img::slotted([slot=thumbnail]) {
  min-inline-size: 100%;
  max-inline-size: 100%;
}

slot[name=footer-start]::slotted(*),
*::slotted([slot=footer-start]) {
  align-self: center;
  font-size: var(--calcite-font-size--2);
  line-height: 1.375;
  margin-inline-end: auto;
  color: var(--calcite-color-text-3);
}

slot[name=footer-end]::slotted(*),
*::slotted([slot=footer-end]) {
  align-self: center;
  font-size: var(--calcite-font-size--2);
  line-height: 1.375;
  color: var(--calcite-color-text-3);
}

.checkbox-wrapper-deprecated {
  pointer-events: auto;
  position: absolute;
  inset-block-start: var(--calcite-spacing-sm);
  inset-inline-end: var(--calcite-spacing-sm);
  margin: 0;
  padding: 0;
}

.checkbox-wrapper {
  pointer-events: auto;
  margin: 0.5rem;
  cursor: pointer;
  padding: 0.5rem;
  outline-color: transparent;
  background-color: var(--calcite-card-selection-background-color);
  display: flex;
  align-items: center;
  justify-items: center;
  --calcite-ui-icon-color: var(--calcite-card-selection-icon-color);
}
.checkbox-wrapper:hover {
  background-color: var(--calcite-card-selection-background-color-hover);
  --calcite-ui-icon-color: var(--calcite-card-selection-icon-color-hover);
}
.checkbox-wrapper:active {
  background-color: var(--calcite-card-selection-background-color-active);
}
.checkbox-wrapper calcite-icon {
  pointer-events: none;
}

:host([selected]) .checkbox-wrapper {
  --calcite-ui-icon-color: var(--calcite-card-selection-icon-color-selected);
  background-color: var(--calcite-card-selection-background-color-selected);
}
:host([selected]) .checkbox-wrapper:hover {
  background-color: var(--calcite-card-selection-background-color-hover);
}
:host([selected]) .checkbox-wrapper:active {
  background-color: var(--calcite-card-selection-background-color-active);
}

:host(:not([selectable])) .content-wrapper:not(.non-interactive):focus .checkbox-wrapper {
  background-color: var(--calcite-card-selection-background-color-hover);
  --calcite-ui-icon-color: var(--calcite-card-selection-icon-color-hover);
}

:host([selected]:not([selectable])) .content-wrapper:not(.non-interactive):focus .checkbox-wrapper {
  background-color: var(--calcite-card-selection-background-color-active);
  --calcite-ui-icon-color: var(--calcite-card-selection-icon-color-selected);
}

.thumbnail-wrapper {
  display: flex;
}

.content-wrapper.inline {
  flex-direction: row;
}
.content-wrapper.inline > .container {
  inline-size: 60%;
}
.content-wrapper.inline > .thumbnail-wrapper {
  inline-size: 40%;
  align-items: flex-start;
}
.content-wrapper.inline slot[name=thumbnail]::slotted(img),
.content-wrapper.inline img::slotted([slot=thumbnail]) {
  inline-size: 100%;
}

slot[name=footer-start]::slotted(*),
slot[name=footer-end]::slotted(*) {
  display: flex;
  gap: 0.25rem;
}

:host([hidden]) {
  display: none;
}

[hidden] {
  display: none;
}

:host([disabled]) ::slotted([calcite-hydrated][disabled]),
:host([disabled]) [calcite-hydrated][disabled] {
  /* prevent opacity stacking */
  opacity: 1;
}

.interaction-container {
  display: contents;
}