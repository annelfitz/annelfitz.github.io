{"version":3,"file":"stack.js","sourceRoot":"","sources":["../../../../src/components/stack/stack.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAS,MAAM,eAAe,CAAC;AACvE,OAAO,EAAE,4BAA4B,EAAE,MAAM,iBAAiB,CAAC;AAC/D,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,aAAa,CAAC;AAEzC;;;;;;GAMG;AAMH,MAAM,OAAO,KAAK;;QAwFhB,6EAA6E;QAC7E,EAAE;QACF,mBAAmB;QACnB,EAAE;QACF,6EAA6E;QAE7E,iCAA4B,GAAG,CAAC,KAAY,EAAQ,EAAE;YACpD,IAAI,CAAC,eAAe,GAAG,4BAA4B,CAAC,KAAK,CAAC,CAAC;QAC7D,CAAC,CAAC;QAEF,+BAA0B,GAAG,CAAC,KAAY,EAAQ,EAAE;YAClD,IAAI,CAAC,aAAa,GAAG,4BAA4B,CAAC,KAAK,CAAC,CAAC;QAC3D,CAAC,CAAC;QAEF,iCAA4B,GAAG,CAAC,KAAY,EAAQ,EAAE;YACpD,IAAI,CAAC,eAAe,GAAG,4BAA4B,CAAC,KAAK,CAAC,CAAC;QAC7D,CAAC,CAAC;QAEF,+BAA0B,GAAG,CAAC,KAAY,EAAQ,EAAE;YAClD,IAAI,CAAC,aAAa,GAAG,4BAA4B,CAAC,KAAK,CAAC,CAAC;QAC3D,CAAC,CAAC;wBApGkC,KAAK;+BAQd,KAAK;6BAEP,KAAK;+BAEH,KAAK;6BAEP,KAAK;;IAE9B,6EAA6E;IAC7E,EAAE;IACF,kBAAkB;IAClB,EAAE;IACF,6EAA6E;IAE7E,kBAAkB;QAChB,MAAM,EAAE,eAAe,EAAE,GAAG,IAAI,CAAC;QACjC,OAAO,CACL,WAAK,KAAK,EAAE,GAAG,CAAC,YAAY,EAAE,MAAM,EAAE,CAAC,eAAe,EAAE,GAAG,EAAC,yBAAyB;YACnF,YAAM,IAAI,EAAE,KAAK,CAAC,YAAY,EAAE,YAAY,EAAE,IAAI,CAAC,4BAA4B,GAAI,CAC/E,CACP,CAAC;IACJ,CAAC;IAED,gBAAgB;QACd,MAAM,EAAE,aAAa,EAAE,GAAG,IAAI,CAAC;QAC/B,OAAO,CACL,WAAK,KAAK,EAAE,GAAG,CAAC,UAAU,EAAE,MAAM,EAAE,CAAC,aAAa,EAAE,GAAG,EAAC,uBAAuB;YAC7E,YAAM,IAAI,EAAE,KAAK,CAAC,UAAU,EAAE,YAAY,EAAE,IAAI,CAAC,0BAA0B,GAAI,CAC3E,CACP,CAAC;IACJ,CAAC;IAED,kBAAkB;QAChB,MAAM,EAAE,eAAe,EAAE,GAAG,IAAI,CAAC;QACjC,OAAO,CACL,WAAK,KAAK,EAAE,GAAG,CAAC,YAAY,EAAE,MAAM,EAAE,CAAC,eAAe;YACpD,YAAM,IAAI,EAAE,KAAK,CAAC,YAAY,EAAE,YAAY,EAAE,IAAI,CAAC,4BAA4B,GAAI,CAC/E,CACP,CAAC;IACJ,CAAC;IAED,oBAAoB;QAClB,OAAO,CACL,WAAK,KAAK,EAAE,GAAG,CAAC,OAAO;YACrB,eAAQ,CACJ,CACP,CAAC;IACJ,CAAC;IAED,gBAAgB;QACd,MAAM,EAAE,aAAa,EAAE,GAAG,IAAI,CAAC;QAC/B,OAAO,CACL,WAAK,KAAK,EAAE,GAAG,CAAC,UAAU,EAAE,MAAM,EAAE,CAAC,aAAa;YAChD,YAAM,IAAI,EAAE,KAAK,CAAC,UAAU,EAAE,YAAY,EAAE,IAAI,CAAC,0BAA0B,GAAI,CAC3E,CACP,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,OAAO,CACL,EAAC,IAAI;YACH,WAAK,KAAK,EAAE,GAAG,CAAC,SAAS;gBACtB,IAAI,CAAC,kBAAkB,EAAE;gBACzB,IAAI,CAAC,kBAAkB,EAAE;gBACzB,IAAI,CAAC,oBAAoB,EAAE;gBAC3B,IAAI,CAAC,gBAAgB,EAAE;gBACvB,IAAI,CAAC,gBAAgB,EAAE,CACpB,CACD,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuBF","sourcesContent":["import { Component, h, Host, Prop, State, VNode } from \"@stencil/core\";\nimport { slotChangeHasAssignedElement } from \"../../utils/dom\";\nimport { CSS, SLOTS } from \"./resources\";\n\n/**\n * @slot - A slot for adding content.\n * @slot actions-start - A slot for adding actionable `calcite-action` elements before the content of the component.\n * @slot content-start - A slot for adding non-actionable elements before content of the component.\n * @slot content-end - A slot for adding non-actionable elements after content of the component.\n * @slot actions-end - A slot for adding actionable `calcite-action` elements after the content of the component.\n */\n@Component({\n  tag: \"calcite-stack\",\n  styleUrl: \"stack.scss\",\n  shadow: true,\n})\nexport class Stack {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**  When `true`, content interaction is prevented and displayed with lower opacity. */\n  @Prop({ reflect: true }) disabled = false;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @State() hasActionsStart = false;\n\n  @State() hasActionsEnd = false;\n\n  @State() hasContentStart = false;\n\n  @State() hasContentEnd = false;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  renderActionsStart(): VNode {\n    const { hasActionsStart } = this;\n    return (\n      <div class={CSS.actionsStart} hidden={!hasActionsStart} key=\"actions-start-container\">\n        <slot name={SLOTS.actionsStart} onSlotchange={this.handleActionsStartSlotChange} />\n      </div>\n    );\n  }\n\n  renderActionsEnd(): VNode {\n    const { hasActionsEnd } = this;\n    return (\n      <div class={CSS.actionsEnd} hidden={!hasActionsEnd} key=\"actions-end-container\">\n        <slot name={SLOTS.actionsEnd} onSlotchange={this.handleActionsEndSlotChange} />\n      </div>\n    );\n  }\n\n  renderContentStart(): VNode {\n    const { hasContentStart } = this;\n    return (\n      <div class={CSS.contentStart} hidden={!hasContentStart}>\n        <slot name={SLOTS.contentStart} onSlotchange={this.handleContentStartSlotChange} />\n      </div>\n    );\n  }\n\n  renderDefaultContent(): VNode {\n    return (\n      <div class={CSS.content}>\n        <slot />\n      </div>\n    );\n  }\n\n  renderContentEnd(): VNode {\n    const { hasContentEnd } = this;\n    return (\n      <div class={CSS.contentEnd} hidden={!hasContentEnd}>\n        <slot name={SLOTS.contentEnd} onSlotchange={this.handleContentEndSlotChange} />\n      </div>\n    );\n  }\n\n  render(): VNode {\n    return (\n      <Host>\n        <div class={CSS.container}>\n          {this.renderActionsStart()}\n          {this.renderContentStart()}\n          {this.renderDefaultContent()}\n          {this.renderContentEnd()}\n          {this.renderActionsEnd()}\n        </div>\n      </Host>\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  handleActionsStartSlotChange = (event: Event): void => {\n    this.hasActionsStart = slotChangeHasAssignedElement(event);\n  };\n\n  handleActionsEndSlotChange = (event: Event): void => {\n    this.hasActionsEnd = slotChangeHasAssignedElement(event);\n  };\n\n  handleContentStartSlotChange = (event: Event): void => {\n    this.hasContentStart = slotChangeHasAssignedElement(event);\n  };\n\n  handleContentEndSlotChange = (event: Event): void => {\n    this.hasContentEnd = slotChangeHasAssignedElement(event);\n  };\n}\n"]}