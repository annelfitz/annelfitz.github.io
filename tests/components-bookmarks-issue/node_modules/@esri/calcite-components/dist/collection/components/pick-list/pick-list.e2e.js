/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.6.0
 */
import { newE2EPage } from "@stencil/core/testing";
import { html } from "../../../support/formatting";
import { accessible, defaults, hidden, renders } from "../../tests/commonTests";
import { CSS as PICK_LIST_GROUP_CSS } from "../pick-list-group/resources";
import { ICON_TYPES } from "./resources";
import { disabling, filterBehavior, focusing, itemRemoval, keyboardNavigation, selectionAndDeselection, } from "./shared-list-tests";
describe("calcite-pick-list", () => {
    describe("defaults", () => {
        defaults("calcite-pick-list", [
            {
                propertyName: "headingLevel",
                defaultValue: undefined,
            },
        ]);
    });
    describe("renders", () => {
        renders("calcite-pick-list", { display: "flex" });
    });
    describe("honors hidden attribute", () => {
        hidden("calcite-pick-list");
    });
    // eslint-disable-next-line jest/no-disabled-tests
    describe.skip("accessible", () => {
        accessible(html `
      <calcite-pick-list>
        <calcite-pick-list-item label="Sample" value="one"></calcite-pick-list-item>
      </calcite-pick-list>
    `);
    });
    describe("disabling", () => {
        disabling("pick");
    });
    describe("Selection and Deselection", () => {
        selectionAndDeselection("pick");
    });
    describe("Keyboard navigation", () => {
        keyboardNavigation("pick");
    });
    describe("icon logic", () => {
        it("should be 'circle' when multi-select is disabled", async () => {
            const page = await newE2EPage();
            await page.setContent(`<calcite-pick-list>
        <calcite-pick-list-item value="one"></calcite-pick-list-item>
      </calcite-pick-list>`);
            const item = await page.find("calcite-pick-list-item");
            const icon = await item.getProperty("icon");
            expect(icon).toBe(ICON_TYPES.circle);
        });
        it("should be 'square' when multi-select is enabled", async () => {
            const page = await newE2EPage();
            await page.setContent(`<calcite-pick-list multiple>
        <calcite-pick-list-item value="one"></calcite-pick-list-item>
      </calcite-pick-list>`);
            const item = await page.find("calcite-pick-list-item");
            const icon = await item.getProperty("icon");
            expect(icon).toBe(ICON_TYPES.square);
        });
    });
    describe("filter behavior (hide/show items)", () => {
        filterBehavior("pick");
        let page = null;
        let groupOrParentItem;
        let item1;
        let item2;
        async function assertGroupIsVisibleWhenChildMatches(page, groupOrParentItem, item1, item2) {
            const item1ValueLowercased = (await item1.getProperty("label")).toLowerCase();
            await page.evaluate((filterText) => {
                const filterInput = window.filterInput;
                filterInput.value = filterText;
                filterInput.dispatchEvent(new CustomEvent("calciteInputInput"));
            }, [item1ValueLowercased]);
            await item2.waitForNotVisible();
            const parentVisible = await groupOrParentItem.isVisible();
            expect(parentVisible).toBe(true);
        }
        describe("filtering with groups", () => {
            beforeEach(async () => {
                page = await newE2EPage({
                    html: `<calcite-pick-list filter-enabled>
          <calcite-pick-list-group group-title="Numbers">
            <calcite-pick-list-item value="1" label="One" description="uno"></calcite-pick-list-item>
            <calcite-pick-list-item value="2" label="Two" description="dos"></calcite-pick-list-item>
          </calcite-pick-list-group>
        </calcite-pick-list>`,
                });
                groupOrParentItem = await page.find(`calcite-pick-list-group`);
                item1 = await page.find(`calcite-pick-list-item[value="1"]`);
                item2 = await page.find(`calcite-pick-list-item[value="2"]`);
                item1.setProperty("metadata", { category: "first" });
                item2.setProperty("metadata", { category: "second" });
                await page.waitForChanges();
                await page.evaluate(() => {
                    window.filter = document
                        .querySelector(`calcite-pick-list`)
                        .shadowRoot.querySelector("calcite-filter");
                    const filter = window.filter;
                    window.filterInput = filter.shadowRoot.querySelector("calcite-input");
                });
            });
            it("should show the group parent if a match is found in a child", async () => await assertGroupIsVisibleWhenChildMatches(page, groupOrParentItem, item1, item2));
        });
        describe("filtering with groups (nested)", () => {
            beforeEach(async () => {
                page = await newE2EPage({
                    html: `<calcite-pick-list filter-enabled>
          <calcite-pick-list-group>
            <calcite-pick-list-item slot="parent-item" value="numbers" label="Numbers"></calcite-pick-list-item>
            <calcite-pick-list-item value="1" label="One" description="uno"></calcite-pick-list-item>
            <calcite-pick-list-item value="2" label="Two" description="dos"></calcite-pick-list-item>
          </calcite-pick-list-group>
        </calcite-pick-list>`,
                });
                groupOrParentItem = await page.find(`calcite-pick-list-item[slot="parent-item"]`);
                item1 = await page.find(`calcite-pick-list-item[value="1"]`);
                item2 = await page.find(`calcite-pick-list-item[value="2"]`);
                item1.setProperty("metadata", { category: "first" });
                item2.setProperty("metadata", { category: "second" });
                await page.waitForChanges();
                await page.evaluate(() => {
                    window.filter = document
                        .querySelector(`calcite-pick-list`)
                        .shadowRoot.querySelector("calcite-filter");
                    const filter = window.filter;
                    window.filterInput = filter.shadowRoot.querySelector("calcite-input");
                });
            });
            it("should show the group parent if a match is found in a child", async () => await assertGroupIsVisibleWhenChildMatches(page, groupOrParentItem, item1, item2));
            it("should show the children of a group if the parent matches", async () => {
                await page.evaluate(() => {
                    const filterInput = window.filterInput;
                    filterInput.value = "numbers";
                    filterInput.dispatchEvent(new CustomEvent("calciteInputInput"));
                });
                await page.waitForTimeout(500);
                const item1Visible = await item1.isVisible();
                const item2Visible = await item2.isVisible();
                expect(item1Visible).toBe(true);
                expect(item2Visible).toBe(true);
            });
        });
    });
    describe("item removal", () => {
        itemRemoval("pick");
    });
    describe("setFocus", () => {
        focusing("pick");
    });
    it("should set headingLevel of tip", async () => {
        const page = await newE2EPage({
            html: `<calcite-pick-list heading-level="1">
      <calcite-pick-list-group group-title="test">
        <calcite-pick-list-item value="1" label="One" description="uno"></calcite-pick-list-item>
        <calcite-pick-list-item value="2" label="Two" description="dos"></calcite-pick-list-item>
      </calcite-pick-list-group>
    </calcite-pick-list>`,
        });
        await page.waitForChanges();
        const pickList = await page.find("calcite-pick-list");
        expect(await pickList.getProperty("headingLevel")).toEqual(1);
        const heading = await page.find(`calcite-pick-list-group >>> .${PICK_LIST_GROUP_CSS.heading}`);
        expect(heading.tagName).toEqual("H2");
    });
});
//# sourceMappingURL=pick-list.e2e.js.map
