/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.6.0
 */
import { h, Host, } from "@stencil/core";
import { ensureId, focusFirstTabbable, getElementDir } from "../../utils/dom";
import { activateFocusTrap, connectFocusTrap, deactivateFocusTrap, updateFocusTrapElements, } from "../../utils/focusTrapComponent";
import { componentFocusable, setComponentLoaded, setUpLoadableComponent, } from "../../utils/loadable";
import { createObserver } from "../../utils/observers";
import { onToggleOpenCloseComponent } from "../../utils/openCloseComponent";
import { CSS } from "./resources";
import { CSS_UTILITY } from "../../utils/resources";
export class Sheet {
    constructor() {
        //--------------------------------------------------------------------------
        //
        //  Private Properties/ State
        //
        //--------------------------------------------------------------------------
        this.openTransitionProp = "opacity";
        this.ignoreOpenChange = false;
        this.mutationObserver = createObserver("mutation", () => this.handleMutationObserver());
        this.setTransitionEl = (el) => {
            this.transitionEl = el;
            this.contentId = ensureId(el);
        };
        this.openEnd = () => {
            this.setFocus();
            this.el.removeEventListener("calciteSheetOpen", this.openEnd);
        };
        this.handleOutsideClose = () => {
            if (this.outsideCloseDisabled) {
                return;
            }
            this.open = false;
        };
        this.closeSheet = async () => {
            if (this.beforeClose) {
                try {
                    await this.beforeClose(this.el);
                }
                catch (_error) {
                    // close prevented
                    requestAnimationFrame(() => {
                        this.ignoreOpenChange = true;
                        this.open = true;
                        this.ignoreOpenChange = false;
                    });
                    return;
                }
            }
            this.opened = false;
            this.removeOverflowHiddenClass();
        };
        this.beforeClose = undefined;
        this.displayMode = "overlay";
        this.escapeDisabled = false;
        this.heightScale = "m";
        this.focusTrapDisabled = false;
        this.label = undefined;
        this.open = false;
        this.opened = false;
        this.outsideCloseDisabled = false;
        this.position = "inline-start";
        this.slottedInShell = undefined;
        this.widthScale = "m";
    }
    handleFocusTrapDisabled(focusTrapDisabled) {
        if (!this.open) {
            return;
        }
        focusTrapDisabled ? deactivateFocusTrap(this) : activateFocusTrap(this);
    }
    toggleSheet(value) {
        if (this.ignoreOpenChange) {
            return;
        }
        if (value) {
            this.openSheet();
        }
        else {
            this.closeSheet();
        }
    }
    handleOpenedChange() {
        onToggleOpenCloseComponent(this);
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        setUpLoadableComponent(this);
        // when sheet initially renders, if active was set we need to open as watcher doesn't fire
        if (this.open) {
            requestAnimationFrame(() => this.openSheet());
        }
    }
    componentDidLoad() {
        setComponentLoaded(this);
    }
    connectedCallback() {
        this.mutationObserver?.observe(this.el, { childList: true, subtree: true });
        connectFocusTrap(this);
    }
    disconnectedCallback() {
        this.removeOverflowHiddenClass();
        this.mutationObserver?.disconnect();
        deactivateFocusTrap(this);
        this.slottedInShell = false;
    }
    render() {
        const dir = getElementDir(this.el);
        return (h(Host, { "aria-describedby": this.contentId, "aria-label": this.label, "aria-modal": "true", role: "dialog" }, h("div", { class: {
                [CSS.container]: true,
                [CSS.containerOpen]: this.opened,
                [CSS.containerSlottedInShell]: this.slottedInShell,
                [CSS_UTILITY.rtl]: dir === "rtl",
            } }, h("calcite-scrim", { class: CSS.scrim, onClick: this.handleOutsideClose }), h("div", { class: {
                [CSS.content]: true,
            },
            // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
            ref: this.setTransitionEl }, h("slot", null)))));
    }
    //--------------------------------------------------------------------------
    //
    //  Event Listeners
    //
    //--------------------------------------------------------------------------
    handleEscape(event) {
        if (this.open && !this.escapeDisabled && event.key === "Escape" && !event.defaultPrevented) {
            this.open = false;
            event.preventDefault();
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /**
     * Sets focus on the component's "close" button - the first focusable item.
     *
     */
    async setFocus() {
        await componentFocusable(this);
        focusFirstTabbable(this.el);
    }
    /**
     * Updates the element(s) that are used within the focus-trap of the component.
     */
    async updateFocusTrapElements() {
        updateFocusTrapElements(this);
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    onBeforeOpen() {
        this.calciteSheetBeforeOpen.emit();
    }
    onOpen() {
        this.calciteSheetOpen.emit();
        activateFocusTrap(this);
    }
    onBeforeClose() {
        this.calciteSheetBeforeClose.emit();
    }
    onClose() {
        this.calciteSheetClose.emit();
        deactivateFocusTrap(this);
    }
    openSheet() {
        this.el.addEventListener("calciteSheetOpen", this.openEnd);
        this.opened = true;
        if (!this.slottedInShell) {
            this.initialOverflowCSS = document.documentElement.style.overflow;
            // use an inline style instead of a utility class to avoid global class declarations.
            document.documentElement.style.setProperty("overflow", "hidden");
        }
    }
    removeOverflowHiddenClass() {
        document.documentElement.style.setProperty("overflow", this.initialOverflowCSS);
    }
    handleMutationObserver() {
        this.updateFocusTrapElements();
    }
    static get is() { return "calcite-sheet"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["sheet.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["sheet.css"]
        };
    }
    static get properties() {
        return {
            "beforeClose": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "(el: HTMLCalciteSheetElement) => Promise<void>",
                    "resolved": "(el: HTMLCalciteSheetElement) => Promise<void>",
                    "references": {
                        "HTMLCalciteSheetElement": {
                            "location": "global",
                            "id": "global::HTMLCalciteSheetElement"
                        },
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "returns",
                            "text": undefined
                        }],
                    "text": "Passes a function to run before the component closes."
                }
            },
            "displayMode": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "DisplayMode",
                    "resolved": "\"float\" | \"overlay\"",
                    "references": {
                        "DisplayMode": {
                            "location": "import",
                            "path": "./interfaces",
                            "id": "src/components/sheet/interfaces.ts::DisplayMode"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the display mode - `\"float\"` (content is separated detached),\nor `\"overlay\"` (displays on top of center content)."
                },
                "attribute": "display-mode",
                "reflect": true,
                "defaultValue": "\"overlay\""
            },
            "escapeDisabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, disables the default close on escape behavior."
                },
                "attribute": "escape-disabled",
                "reflect": true,
                "defaultValue": "false"
            },
            "heightScale": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Scale",
                    "resolved": "\"l\" | \"m\" | \"s\"",
                    "references": {
                        "Scale": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Scale"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `position` is `\"block-start\"` or `\"block-end\"`, specifies the height of the component."
                },
                "attribute": "height-scale",
                "reflect": true,
                "defaultValue": "\"m\""
            },
            "focusTrapDisabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, prevents focus trapping."
                },
                "attribute": "focus-trap-disabled",
                "reflect": true,
                "defaultValue": "false"
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the label of the component."
                },
                "attribute": "label",
                "reflect": false
            },
            "open": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, displays and positions the component."
                },
                "attribute": "open",
                "reflect": true,
                "defaultValue": "false"
            },
            "opened": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": "."
                        }],
                    "text": "We use an internal property to handle styles for when a modal is actually opened, not just when the open attribute is applied. This is a property because we need to apply styles to the host element and to keep the styles present while beforeClose is ."
                },
                "attribute": "opened",
                "reflect": true,
                "defaultValue": "false"
            },
            "outsideCloseDisabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, disables the closing of the component when clicked outside."
                },
                "attribute": "outside-close-disabled",
                "reflect": true,
                "defaultValue": "false"
            },
            "position": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "LogicalFlowPosition",
                    "resolved": "\"block-end\" | \"block-start\" | \"inline-end\" | \"inline-start\"",
                    "references": {
                        "LogicalFlowPosition": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::LogicalFlowPosition"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Determines where the component will be positioned."
                },
                "attribute": "position",
                "reflect": true,
                "defaultValue": "\"inline-start\""
            },
            "slottedInShell": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "This internal property, managed by a containing calcite-shell, is used\nto inform the component if special configuration or styles are needed"
                },
                "attribute": "slotted-in-shell",
                "reflect": false
            },
            "widthScale": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Scale",
                    "resolved": "\"l\" | \"m\" | \"s\"",
                    "references": {
                        "Scale": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Scale"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `position` is `\"inline-start\"` or `\"inline-end\"`, specifies the width of the component."
                },
                "attribute": "width-scale",
                "reflect": true,
                "defaultValue": "\"m\""
            }
        };
    }
    static get events() {
        return [{
                "method": "calciteSheetBeforeClose",
                "name": "calciteSheetBeforeClose",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Fires when the component is requested to be closed and before the closing transition begins."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "calciteSheetClose",
                "name": "calciteSheetClose",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Fires when the component is closed and animation is complete."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "calciteSheetBeforeOpen",
                "name": "calciteSheetBeforeOpen",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "calciteSheetOpen",
                "name": "calciteSheetOpen",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Fires when the component is open and animation is complete."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "setFocus": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Sets focus on the component's \"close\" button - the first focusable item.",
                    "tags": []
                }
            },
            "updateFocusTrapElements": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Updates the element(s) that are used within the focus-trap of the component.",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "focusTrapDisabled",
                "methodName": "handleFocusTrapDisabled"
            }, {
                "propName": "open",
                "methodName": "toggleSheet"
            }, {
                "propName": "opened",
                "methodName": "handleOpenedChange"
            }];
    }
    static get listeners() {
        return [{
                "name": "keydown",
                "method": "handleEscape",
                "target": "window",
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=sheet.js.map
