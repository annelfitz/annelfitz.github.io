{"version":3,"file":"tests.js","sourceRoot":"","sources":["../../../../../src/components/input/common/tests.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable jest/no-conditional-expect -- Using conditional logic in a confined test helper to handle specific scenarios, reducing duplication, balancing test readability and maintainability. **/\n\nimport { newE2EPage } from \"@stencil/core/testing\";\nimport { isElementFocused } from \"../../../tests/utils\";\nimport { hiddenFormInputSlotName } from \"../../../utils/form\";\nimport { html } from \"../../../../support/formatting\";\nimport { JSX } from \"../../../components\";\n\nexport function testPostValidationFocusing(\n  inputTag: Extract<keyof JSX.IntrinsicElements, \"calcite-input\" | \"calcite-input-text\" | \"calcite-input-number\">,\n): void {\n  it(\"restores focus on invalid input if user continues typing\", async () => {\n    const page = await newE2EPage();\n    const inputName = \"test\";\n\n    await page.setContent(html`\n        <form>\n          <${inputTag} required name=\"${inputName}\"></${inputTag}>\n        </form>\n        <script>\n          const form = document.querySelector(\"form\");\n          form.addEventListener(\"submit\", (event) => {\n            event.preventDefault();\n          });\n        </script>\n      `);\n\n    const input = await page.find(inputTag);\n\n    await input.callMethod(\"setFocus\");\n    await input.press(\"Enter\");\n    await page.waitForChanges();\n\n    const hiddenInputSelector = `input[slot=${hiddenFormInputSlotName}]`;\n    const inputSelector = `${inputTag}[name=${inputName}]`;\n\n    expect(await isElementFocused(page, hiddenInputSelector)).toBe(false);\n    expect(await isElementFocused(page, inputSelector)).toBe(true);\n    expect(await input.getProperty(\"value\")).toBe(\"\");\n\n    const expectedValue = \"12345\"; // number works for both text and number types\n\n    await page.keyboard.type(expectedValue);\n    await page.waitForChanges();\n\n    expect(await isElementFocused(page, hiddenInputSelector)).toBe(false);\n    expect(await isElementFocused(page, inputSelector)).toBe(true);\n    expect(await input.getProperty(\"value\")).toBe(expectedValue);\n  });\n}\n\nexport function testHiddenInputSyncing(\n  inputTag: Extract<\n    keyof JSX.IntrinsicElements,\n    \"calcite-input\" | \"calcite-input-text\" | \"calcite-input-number\" | \"calcite-text-area\"\n  >,\n): void {\n  it(\"syncs hidden input with the input component\", async () => {\n    const page = await newE2EPage();\n    await page.setContent(html`\n      <form>\n          <${inputTag} name=\"form-name\"></${inputTag}>\n      </form>\n      `);\n    const input = await page.find(inputTag);\n    const hiddenInput = await page.find(`input[slot=${hiddenFormInputSlotName}]`);\n\n    // intentionally setting all props regardless of type for testing purposes\n    input.setProperty(\"min\", 0);\n    input.setProperty(\"max\", 10);\n    input.setProperty(\"step\", 1);\n    input.setProperty(\"pattern\", \"test\");\n    input.setProperty(\"minLength\", 0);\n    input.setProperty(\"maxLength\", 10);\n    await page.waitForChanges();\n\n    async function assertTextProps(): Promise<void> {\n      expect(await hiddenInput.getProperty(\"type\")).toBe(\"text\");\n      expect(await hiddenInput.getProperty(\"min\")).toBe(\"\");\n      expect(await hiddenInput.getProperty(\"max\")).toBe(\"\");\n      expect(await hiddenInput.getProperty(\"pattern\")).toBe(\"test\");\n      expect(await hiddenInput.getProperty(\"minLength\")).toBe(0);\n      expect(await hiddenInput.getProperty(\"maxLength\")).toBe(10);\n    }\n\n    async function assertNumericProps(): Promise<void> {\n      expect(await hiddenInput.getProperty(\"type\")).toBe(\"number\");\n      expect(await hiddenInput.getProperty(\"min\")).toBe(\"0\");\n      expect(await hiddenInput.getProperty(\"max\")).toBe(\"10\");\n      expect(await hiddenInput.getProperty(\"pattern\")).toBe(\"\");\n      expect(await hiddenInput.getProperty(\"minLength\")).toBe(-1);\n      expect(await hiddenInput.getProperty(\"maxLength\")).toBe(-1);\n    }\n\n    if (inputTag === \"calcite-input\") {\n      // testing subset of types\n\n      await input.setProperty(\"type\", \"text\");\n      await page.waitForChanges();\n\n      await assertTextProps();\n\n      await input.setProperty(\"type\", \"number\");\n      await page.waitForChanges();\n\n      await assertNumericProps();\n      return;\n    }\n\n    if (inputTag === \"calcite-input-text\" || inputTag === \"calcite-text-area\") {\n      await assertTextProps();\n      return;\n    }\n\n    await assertNumericProps();\n  });\n}\n"]}