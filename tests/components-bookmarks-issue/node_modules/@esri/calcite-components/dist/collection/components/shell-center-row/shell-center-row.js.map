{"version":3,"file":"shell-center-row.js","sourceRoot":"","sources":["../../../../src/components/shell-center-row/shell-center-row.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAS,MAAM,eAAe,CAAC;AAC7E,OAAO,EAEL,+BAA+B,EAC/B,kCAAkC,GACnC,MAAM,6BAA6B,CAAC;AACrC,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,aAAa,CAAC;AAEzC;;;GAGG;AAMH,MAAM,OAAO,cAAc;;wBAUW,KAAK;2BAKK,GAAG;wBAKH,KAAK;;IAUnD,6EAA6E;IAC7E,EAAE;IACF,aAAa;IACb,EAAE;IACF,6EAA6E;IAE7E,iBAAiB;QACf,+BAA+B,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAED,oBAAoB;QAClB,kCAAkC,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;IAED,6EAA6E;IAC7E,EAAE;IACF,kBAAkB;IAClB,EAAE;IACF,6EAA6E;IAE7E,MAAM;QACJ,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;QAEpB,MAAM,WAAW,GAAG,CAClB,WAAK,KAAK,EAAE,GAAG,CAAC,OAAO;YACrB,eAAQ,CACJ,CACP,CAAC;QAEF,MAAM,SAAS,GAAG,UAAU,CAA8B,EAAE,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;QAE/E,MAAM,aAAa,GAAG,SAAS,CAAC,CAAC,CAAC,CAChC,WAAK,KAAK,EAAE,GAAG,CAAC,kBAAkB,EAAE,GAAG,EAAC,YAAY;YAClD,YAAM,IAAI,EAAE,KAAK,CAAC,SAAS,GAAI,CAC3B,CACP,CAAC,CAAC,CAAC,IAAI,CAAC;QAET,MAAM,QAAQ,GAAY,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;QAEvD,IAAI,SAAS,EAAE,QAAQ,KAAK,KAAK,EAAE;YACjC,QAAQ,CAAC,OAAO,EAAE,CAAC;SACpB;QAED,OAAO,EAAC,QAAQ,QAAE,QAAQ,CAAY,CAAC;IACzC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Element, Fragment, h, Prop, VNode } from \"@stencil/core\";\nimport {\n  ConditionalSlotComponent,\n  connectConditionalSlotComponent,\n  disconnectConditionalSlotComponent,\n} from \"../../utils/conditionalSlot\";\nimport { getSlotted } from \"../../utils/dom\";\nimport { Position, Scale } from \"../interfaces\";\nimport { CSS, SLOTS } from \"./resources\";\n\n/**\n * @slot - A slot for adding content to the `calcite-shell-panel`.\n * @slot action-bar - A slot for adding a `calcite-action-bar` to the `calcite-shell-panel`.\n */\n@Component({\n  tag: \"calcite-shell-center-row\",\n  styleUrl: \"shell-center-row.scss\",\n  shadow: true,\n})\nexport class ShellCenterRow implements ConditionalSlotComponent {\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When `true`, the content area displays like a floating panel.\n   */\n  @Prop({ reflect: true }) detached = false;\n\n  /**\n   * Specifies the maximum height of the component.\n   */\n  @Prop({ reflect: true }) heightScale: Scale = \"s\";\n\n  /**\n   * Specifies the component's position. Will be flipped when the element direction is right-to-left (`\"rtl\"`).\n   */\n  @Prop({ reflect: true }) position: Position = \"end\";\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteShellCenterRowElement;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectConditionalSlotComponent(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectConditionalSlotComponent(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    const { el } = this;\n\n    const contentNode = (\n      <div class={CSS.content}>\n        <slot />\n      </div>\n    );\n\n    const actionBar = getSlotted<HTMLCalciteActionBarElement>(el, SLOTS.actionBar);\n\n    const actionBarNode = actionBar ? (\n      <div class={CSS.actionBarContainer} key=\"action-bar\">\n        <slot name={SLOTS.actionBar} />\n      </div>\n    ) : null;\n\n    const children: VNode[] = [actionBarNode, contentNode];\n\n    if (actionBar?.position === \"end\") {\n      children.reverse();\n    }\n\n    return <Fragment>{children}</Fragment>;\n  }\n}\n"]}