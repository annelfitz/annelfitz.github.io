{"version":3,"file":"accordion.js","sourceRoot":"","sources":["../../../../src/components/accordion/accordion.tsx"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,OAAO,EACP,KAAK,EAEL,CAAC,EACD,MAAM,EACN,IAAI,EAEJ,KAAK,GACN,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAC;AAEvD;;GAEG;AAMH,MAAM,OAAO,SAAS;;QAuGpB,qBAAgB,GAAG,cAAc,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;0BA/FG,OAAO;4BAGzC,KAAK;wBAGiB,SAAS;qBAGzC,GAAG;6BAcvC,UAAU;;IAMd,iBAAiB;QACf,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAaD,4EAA4E;IAC5E,EAAE;IACF,aAAa;IACb,EAAE;IACF,4EAA4E;IAE5E,iBAAiB;QACf,IAAI,CAAC,gBAAgB,EAAE,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAC7D,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,gBAAgB,EAAE,UAAU,EAAE,CAAC;IACtC,CAAC;IAED,MAAM;QACJ,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,KAAK,aAAa,CAAC;QACtD,OAAO,CACL,WACE,KAAK,EAAE;gBACL,wBAAwB,EAAE,WAAW;gBACrC,SAAS,EAAE,CAAC,WAAW;aACxB;YAED,eAAQ,CACJ,CACP,CAAC;IACJ,CAAC;IAED,4EAA4E;IAC5E,EAAE;IACF,mBAAmB;IACnB,EAAE;IACF,4EAA4E;IAG5E,wBAAwB,CAAC,KAAkB;QACzC,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC;YACvC,sBAAsB,EAAE,KAAK,CAAC,MAAM,CAAC,sBAAsB;SAC5D,CAAC,CAAC;QACH,KAAK,CAAC,eAAe,EAAE,CAAC;IAC1B,CAAC;IAYD,4EAA4E;IAC5E,EAAE;IACF,mBAAmB;IACnB,EAAE;IACF,4EAA4E;IAEpE,oBAAoB;QAC1B,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,wBAAwB,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YAClE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;YACtC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC9B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAC1B,CAAC,CAAC,CAAC;QAEH,wCAAwC;QACxC,QAAQ,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,mCAAmC,CAAC,CAAC,CAAC;IAC/E,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Listen,\n  Prop,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { Appearance, Position, Scale, SelectionMode } from \"../interfaces\";\nimport { createObserver } from \"../../utils/observers\";\nimport { RequestedItem } from \"./interfaces\";\n/**\n * @slot - A slot for adding `calcite-accordion-item`s. `calcite-accordion` cannot be nested, however `calcite-accordion-item`s can.\n */\n@Component({\n  tag: \"calcite-accordion\",\n  styleUrl: \"accordion.scss\",\n  shadow: true,\n})\nexport class Accordion {\n  //--------------------------------------------------------------------------\n  //\n  //  Public Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** Specifies the appearance of the component. */\n  @Prop({ reflect: true }) appearance: Extract<\"solid\" | \"transparent\", Appearance> = \"solid\";\n\n  /** Specifies the placement of the icon in the header. */\n  @Prop({ reflect: true }) iconPosition: Position = \"end\";\n\n  /** Specifies the type of the icon in the header. */\n  @Prop({ reflect: true }) iconType: \"chevron\" | \"caret\" | \"plus-minus\" = \"chevron\";\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /**\n   * Specifies the selection mode of the component, where:\n   *\n   * `\"multiple\"` allows any number of selections,\n   *\n   * `\"single\"` allows only one selection, and\n   *\n   * `\"single-persist\"` allows one selection and prevents de-selection.\n   */\n  @Prop({ reflect: true }) selectionMode: Extract<\n    \"single\" | \"single-persist\" | \"multiple\",\n    SelectionMode\n  > = \"multiple\";\n\n  @Watch(\"iconPosition\")\n  @Watch(\"iconType\")\n  @Watch(\"scale\")\n  @Watch(\"selectionMode\")\n  handlePropsChange(): void {\n    this.updateAccordionItems();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * @internal\n   */\n  @Event({ cancelable: false }) private calciteInternalAccordionChange: EventEmitter<RequestedItem>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.mutationObserver?.observe(this.el, { childList: true });\n    this.updateAccordionItems();\n  }\n\n  disconnectedCallback(): void {\n    this.mutationObserver?.disconnect();\n  }\n\n  render(): VNode {\n    const transparent = this.appearance === \"transparent\";\n    return (\n      <div\n        class={{\n          \"accordion--transparent\": transparent,\n          accordion: !transparent,\n        }}\n      >\n        <slot />\n      </div>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Event Listeners\n  //\n  //--------------------------------------------------------------------------\n\n  @Listen(\"calciteInternalAccordionItemSelect\")\n  updateActiveItemOnChange(event: CustomEvent): void {\n    this.calciteInternalAccordionChange.emit({\n      requestedAccordionItem: event.detail.requestedAccordionItem,\n    });\n    event.stopPropagation();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteAccordionElement;\n\n  mutationObserver = createObserver(\"mutation\", () => this.updateAccordionItems());\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private updateAccordionItems(): void {\n    this.el.querySelectorAll(\"calcite-accordion-item\").forEach((item) => {\n      item.iconPosition = this.iconPosition;\n      item.iconType = this.iconType;\n      item.scale = this.scale;\n    });\n\n    // sync props on items across shadow DOM\n    document.dispatchEvent(new CustomEvent(\"calciteInternalAccordionItemsSync\"));\n  }\n}\n"]}