{"version":3,"file":"loader.js","sourceRoot":"","sources":["../../../../src/components/loader/loader.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, h, Host, Prop, VNode } from \"@stencil/core\";\nimport { guid } from \"../../utils/guid\";\nimport { Scale } from \"../interfaces\";\n\n@Component({\n  tag: \"calcite-loader\",\n  styleUrl: \"loader.scss\",\n  shadow: true,\n})\nexport class Loader {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** When `true`, displays smaller and appears to the left of the text. */\n  @Prop({ reflect: true }) inline = false;\n\n  /** Accessible name for the component. */\n  @Prop() label!: string;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /**\n   * Specifies the component type.\n   *\n   * Use `\"indeterminate\"` if finding actual progress value is impossible.\n   *\n   */\n  @Prop({ reflect: true }) type: \"indeterminate\" | \"determinate\";\n\n  /** The component's value. Valid only for `\"determinate\"` indicators. Percent complete of 100. */\n  @Prop() value = 0;\n\n  /** Text that displays under the component's indicator. */\n  @Prop() text = \"\";\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  render(): VNode {\n    const { el, inline, label, scale, text, type, value } = this;\n\n    const id = el.id || guid();\n    const radiusRatio = 0.45;\n    const size = inline ? this.getInlineSize(scale) : this.getSize(scale);\n    const radius = size * radiusRatio;\n    const viewbox = `0 0 ${size} ${size}`;\n    const isDeterminate = type === \"determinate\";\n    const circumference = 2 * radius * Math.PI;\n    const progress = (value / 100) * circumference;\n    const remaining = circumference - progress;\n    const valueNow = Math.floor(value);\n    const hostAttributes = {\n      \"aria-valuenow\": valueNow,\n      \"aria-valuemin\": 0,\n      \"aria-valuemax\": 100,\n      complete: valueNow === 100,\n    };\n    const svgAttributes = { r: radius, cx: size / 2, cy: size / 2 };\n    const determinateStyle = { \"stroke-dasharray\": `${progress} ${remaining}` };\n    return (\n      <Host\n        aria-label={label}\n        id={id}\n        role=\"progressbar\"\n        {...(isDeterminate ? hostAttributes : {})}\n      >\n        <div class=\"loader__svgs\">\n          <svg aria-hidden=\"true\" class=\"loader__svg loader__svg--1\" viewBox={viewbox}>\n            <circle {...svgAttributes} />\n          </svg>\n          <svg aria-hidden=\"true\" class=\"loader__svg loader__svg--2\" viewBox={viewbox}>\n            <circle {...svgAttributes} />\n          </svg>\n          <svg\n            aria-hidden=\"true\"\n            class=\"loader__svg loader__svg--3\"\n            viewBox={viewbox}\n            {...(isDeterminate ? { style: determinateStyle } : {})}\n          >\n            <circle {...svgAttributes} />\n          </svg>\n        </div>\n        {text && <div class=\"loader__text\">{text}</div>}\n        {isDeterminate && <div class=\"loader__percentage\">{value}</div>}\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteLoaderElement;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Return the proper sizes based on the scale property\n   *\n   * @param scale\n   */\n  private getSize(scale: string) {\n    return {\n      s: 32,\n      m: 56,\n      l: 80,\n    }[scale];\n  }\n\n  private getInlineSize(scale: string) {\n    return {\n      s: 12,\n      m: 16,\n      l: 20,\n    }[scale];\n  }\n}\n"]}