{"version":3,"file":"progress.js","sourceRoot":"","sources":["../../../../src/components/progress/progress.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAS,MAAM,eAAe,CAAC;AACnE,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AAMpD,MAAM,OAAO,QAAQ;;oBAS8C,aAAa;qBAG9D,CAAC;;;wBASmB,KAAK;;IAEzC,MAAM;QACJ,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,KAAK,aAAa,CAAC;QAClD,MAAM,SAAS,GAAG,aAAa,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QACzE,MAAM,GAAG,GAAG,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACnC,OAAO,CACL,yBACc,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,mBACpB,CAAC,mBACD,CAAC,mBACD,IAAI,CAAC,KAAK,EACzB,IAAI,EAAC,aAAa;YAElB,WAAK,KAAK,EAAC,OAAO;gBAChB,WACE,KAAK,EAAE;wBACL,GAAG,EAAE,IAAI;wBACT,aAAa,EAAE,IAAI,CAAC,IAAI,KAAK,eAAe;wBAC5C,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,GAAG,KAAK,KAAK;wBAChC,QAAQ,EAAE,IAAI,CAAC,QAAQ;qBACxB,EACD,KAAK,EAAE,SAAS,GAChB,CACE;YACL,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,WAAK,KAAK,EAAC,MAAM,IAAE,IAAI,CAAC,IAAI,CAAO,CAAC,CAAC,CAAC,IAAI,CACnD,CACP,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Element, h, Prop, VNode } from \"@stencil/core\";\nimport { getElementDir } from \"../../utils/dom\";\nimport { CSS_UTILITY } from \"../../utils/resources\";\n@Component({\n  tag: \"calcite-progress\",\n  styleUrl: \"progress.scss\",\n  shadow: true,\n})\nexport class Progress {\n  @Element() el: HTMLCalciteProgressElement;\n\n  /**\n   * Specifies the component type.\n   *\n   * Use `\"indeterminate\"` if finding actual progress value is impossible.\n   *\n   */\n  @Prop({ reflect: true }) type: \"indeterminate\" | \"determinate\" = \"determinate\";\n\n  /** When `type` is `\"determinate\"`, the component's progress value with a range of 0.0 - 1.0. */\n  @Prop() value = 0;\n\n  /** Accessible name for the component. */\n  @Prop() label: string;\n\n  /** Text that displays under the component's indicator. */\n  @Prop() text: string;\n\n  /** When `true` and for `\"indeterminate\"` progress bars, reverses the animation direction. */\n  @Prop({ reflect: true }) reversed = false;\n\n  render(): VNode {\n    const isDeterminate = this.type === \"determinate\";\n    const barStyles = isDeterminate ? { width: `${this.value * 100}%` } : {};\n    const dir = getElementDir(this.el);\n    return (\n      <div\n        aria-label={this.label || this.text}\n        aria-valuemax={1}\n        aria-valuemin={0}\n        aria-valuenow={this.value}\n        role=\"progressbar\"\n      >\n        <div class=\"track\">\n          <div\n            class={{\n              bar: true,\n              indeterminate: this.type === \"indeterminate\",\n              [CSS_UTILITY.rtl]: dir === \"rtl\",\n              reversed: this.reversed,\n            }}\n            style={barStyles}\n          />\n        </div>\n        {this.text ? <div class=\"text\">{this.text}</div> : null}\n      </div>\n    );\n  }\n}\n"]}