{"version":3,"file":"label.js","sourceRoot":"","sources":["../../../../src/components/label/label.tsx"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,OAAO,EACP,KAAK,EAEL,CAAC,EACD,IAAI,EACJ,IAAI,EAEJ,KAAK,GACN,MAAM,eAAe,CAAC;AACvB,OAAO,EACL,0CAA0C,EAC1C,mBAAmB,EACnB,sBAAsB,GACvB,MAAM,mBAAmB,CAAC;AAE3B,OAAO,EAAE,GAAG,EAAE,MAAM,aAAa,CAAC;AAElC;;GAEG;AAMH,MAAM,OAAO,KAAK;;QA6ChB,4EAA4E;QAC5E,EAAE;QACF,mBAAmB;QACnB,EAAE;QACF,4EAA4E;QAE5E,sBAAiB,GAAG,CAAC,KAAiB,EAAQ,EAAE;YAC9C,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC;gBAClC,WAAW,EAAE,KAAK;aACnB,CAAC,CAAC;QACL,CAAC,CAAC;yBA/C8C,OAAO;;qBAWf,GAAG;sBAGsC,SAAS;;IAR1F,eAAe;QACb,0CAA0C,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACtD,CAAC;IAyCD,4EAA4E;IAC5E,EAAE;IACF,aAAa;IACb,EAAE;IACF,4EAA4E;IAE5E,iBAAiB;QACf,QAAQ,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,mBAAmB,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED,oBAAoB;QAClB,QAAQ,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,sBAAsB,CAAC,CAAC,CAAC;IAClE,CAAC;IAED,MAAM;QACJ,OAAO,CACL,EAAC,IAAI,IAAC,OAAO,EAAE,IAAI,CAAC,iBAAiB;YACnC,WAAK,KAAK,EAAE,GAAG,CAAC,SAAS;gBACvB,eAAQ,CACJ,CACD,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Prop,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport {\n  associateExplicitLabelToUnlabeledComponent,\n  labelConnectedEvent,\n  labelDisconnectedEvent,\n} from \"../../utils/label\";\nimport { Alignment, Scale } from \"../interfaces\";\nimport { CSS } from \"./resources\";\n\n/**\n * @slot - A slot for adding text and a component that can be labeled.\n */\n@Component({\n  tag: \"calcite-label\",\n  styleUrl: \"label.scss\",\n  shadow: true,\n})\nexport class Label {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** Specifies the text alignment of the component. */\n  @Prop({ reflect: true }) alignment: Alignment = \"start\";\n\n  /** Specifies the `id` of the component the label is bound to. Use when the component the label is bound to does not reside within the component. */\n  @Prop({ reflect: true }) for: string;\n\n  @Watch(\"for\")\n  handleForChange(): void {\n    associateExplicitLabelToUnlabeledComponent(this.el);\n  }\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Defines the layout of the label in relation to the component. Use `\"inline\"` positions to wrap the label and component on the same line. */\n  @Prop({ reflect: true }) layout: \"inline\" | \"inline-space-between\" | \"default\" = \"default\";\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * @internal\n   */\n  @Event({ bubbles: false, cancelable: false }) calciteInternalLabelClick: EventEmitter<{\n    sourceEvent: MouseEvent;\n  }>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteLabelElement;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  labelClickHandler = (event: MouseEvent): void => {\n    this.calciteInternalLabelClick.emit({\n      sourceEvent: event,\n    });\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    document.dispatchEvent(new CustomEvent(labelConnectedEvent));\n  }\n\n  disconnectedCallback(): void {\n    document.dispatchEvent(new CustomEvent(labelDisconnectedEvent));\n  }\n\n  render(): VNode {\n    return (\n      <Host onClick={this.labelClickHandler}>\n        <div class={CSS.container}>\n          <slot />\n        </div>\n      </Host>\n    );\n  }\n}\n"]}