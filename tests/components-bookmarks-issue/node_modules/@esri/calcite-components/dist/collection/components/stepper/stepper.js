/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.6.0
 */
import { h, Host, readTask, } from "@stencil/core";
import { focusElementInGroup, slotChangeGetAssignedElements } from "../../utils/dom";
import { createObserver } from "../../utils/observers";
import { StepBar } from "./functional/step-bar";
import { CSS } from "./resources";
import { guid } from "../../utils/guid";
import { connectLocalized, disconnectLocalized, } from "../../utils/locale";
import { connectMessages, disconnectMessages, setUpMessages, updateMessages, } from "../../utils/t9n";
/**
 * @slot - A slot for adding `calcite-stepper-item` elements.
 */
export class Stepper {
    constructor() {
        this.enabledItems = [];
        this.itemMap = new Map();
        this.items = [];
        this.mutationObserver = createObserver("mutation", () => this.updateItems());
        /** Specifies if the user is viewing one `stepper-item` at a time when the page width is less than sum of min-width of each item. */
        this.multipleViewMode = false;
        this.guid = `calcite-stepper-action-${guid()}`;
        //--------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //--------------------------------------------------------------------------
        this.resizeObserver = createObserver("resize", (entries) => (this.elWidth = entries[0].contentRect.width));
        this.handleActionClick = (event) => {
            const currentActivePosition = this.currentActivePosition;
            const target = event.target;
            if (target.getAttribute("data-position") === "start") {
                this.prevStep();
            }
            else {
                this.nextStep();
            }
            if (typeof this.currentActivePosition === "number" &&
                currentActivePosition !== this.currentActivePosition &&
                !this.items[this.currentActivePosition].disabled) {
                this.calciteStepperItemChange.emit();
            }
        };
        this.setContainerEl = (el) => {
            this.containerEl = el;
        };
        this.handleDefaultSlotChange = (event) => {
            const items = slotChangeGetAssignedElements(event).filter((el) => el?.tagName === "CALCITE-STEPPER-ITEM");
            this.items = items;
            const spacing = Array(items.length).fill("1fr").join(" ");
            this.containerEl.style.gridTemplateAreas = spacing;
            this.containerEl.style.gridTemplateColumns = spacing;
            this.setStepperItemNumberingSystem();
        };
        this.icon = false;
        this.layout = "horizontal";
        this.numbered = false;
        this.scale = "m";
        this.messages = undefined;
        this.numberingSystem = undefined;
        this.selectedItem = null;
        this.messageOverrides = undefined;
        this.defaultMessages = undefined;
        this.effectiveLocale = "";
        this.currentActivePosition = undefined;
        this.elWidth = undefined;
    }
    handleItemPropChange() {
        this.updateItems();
    }
    numberingSystemChange() {
        this.setStepperItemNumberingSystem();
    }
    onMessagesChange() {
        /* wired up by t9n util */
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    connectedCallback() {
        this.mutationObserver?.observe(this.el, { childList: true });
        this.updateItems();
        connectMessages(this);
        connectLocalized(this);
    }
    async componentWillLoad() {
        await setUpMessages(this);
    }
    componentDidLoad() {
        this.resizeObserver?.observe(this.containerEl);
        // if no stepper items are set as active, default to the first one
        if (typeof this.currentActivePosition !== "number") {
            const enabledStepIndex = this.getFirstEnabledStepperPosition();
            if (enabledStepIndex === 0) {
                this.currentActivePosition = enabledStepIndex;
            }
            this.calciteInternalStepperItemChange.emit({
                position: enabledStepIndex,
            });
        }
    }
    disconnectedCallback() {
        this.resizeObserver?.disconnect();
        disconnectMessages(this);
        disconnectLocalized(this);
        this.mutationObserver?.disconnect();
    }
    render() {
        return (h(Host, { "aria-label": this.messages.label, role: "region" }, h("div", { class: { container: true, [CSS.singleView]: this.layout === "horizontal-single" }, ref: this.setContainerEl }, this.layout === "horizontal-single" && (h("div", { class: { [CSS.stepBarContainer]: true } }, this.items.map((item, index) => (h(StepBar, { active: index === this.currentActivePosition, complete: item.complete && index !== this.currentActivePosition && !item.error, disabled: item.disabled && index !== this.currentActivePosition, error: item.error && index !== this.currentActivePosition, key: index }))))), this.layout === "horizontal-single" && (h("div", { class: { [CSS.actionContainer]: true } }, this.renderAction("start"), this.renderAction("end"))), h("slot", { onSlotchange: this.handleDefaultSlotChange }))));
    }
    //--------------------------------------------------------------------------
    //
    //  Event Listeners
    //
    //--------------------------------------------------------------------------
    calciteInternalStepperItemKeyEvent(event) {
        const item = event.detail.item;
        const itemToFocus = event.target;
        switch (item.key) {
            case "ArrowDown":
            case "ArrowRight":
                focusElementInGroup(this.enabledItems, itemToFocus, "next");
                break;
            case "ArrowUp":
            case "ArrowLeft":
                focusElementInGroup(this.enabledItems, itemToFocus, "previous");
                break;
            case "Home":
                focusElementInGroup(this.enabledItems, itemToFocus, "first");
                break;
            case "End":
                focusElementInGroup(this.enabledItems, itemToFocus, "last");
                break;
        }
        event.stopPropagation();
    }
    registerItem(event) {
        const item = event.target;
        const { content, position } = event.detail;
        this.itemMap.set(item, { position, content });
        this.enabledItems = this.filterItems();
        event.stopPropagation();
    }
    updateItem(event) {
        const { position } = event.detail;
        if (typeof position === "number") {
            this.currentActivePosition = position;
            this.selectedItem = event.target;
        }
        this.calciteInternalStepperItemChange.emit({
            position,
        });
    }
    handleUserRequestedStepperItemSelect() {
        this.calciteStepperItemChange.emit();
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /** Set the next `calcite-stepper-item` as active. */
    async nextStep() {
        const enabledStepIndex = this.getEnabledStepIndex(this.currentActivePosition + 1, "next");
        if (typeof enabledStepIndex !== "number") {
            return;
        }
        this.updateStep(enabledStepIndex);
    }
    /** Set the previous `calcite-stepper-item` as active. */
    async prevStep() {
        const enabledStepIndex = this.getEnabledStepIndex(this.currentActivePosition - 1, "previous");
        if (typeof enabledStepIndex !== "number") {
            return;
        }
        this.updateStep(enabledStepIndex);
    }
    /**
     * Set a specified `calcite-stepper-item` as active.
     *
     * @param step
     */
    async goToStep(step) {
        const position = step - 1;
        if (this.currentActivePosition !== position) {
            this.updateStep(position);
        }
    }
    /** Set the first `calcite-stepper-item` as active. */
    async startStep() {
        const enabledStepIndex = this.getEnabledStepIndex(0, "next");
        if (typeof enabledStepIndex !== "number") {
            return;
        }
        this.updateStep(enabledStepIndex);
    }
    /** Set the last `calcite-stepper-item` as active. */
    async endStep() {
        const enabledStepIndex = this.getEnabledStepIndex(this.items.length - 1, "previous");
        if (typeof enabledStepIndex !== "number") {
            return;
        }
        this.updateStep(enabledStepIndex);
    }
    effectiveLocaleChange() {
        updateMessages(this, this.effectiveLocale);
    }
    handlePositionChange() {
        readTask(() => {
            this.determineActiveStepper();
        });
    }
    handleElWidthChange() {
        readTask(() => {
            this.determineActiveStepper();
        });
    }
    updateItems() {
        this.el.querySelectorAll("calcite-stepper-item").forEach((item) => {
            item.icon = this.icon;
            item.numbered = this.numbered;
            item.layout = this.layout;
            item.scale = this.scale;
        });
    }
    determineActiveStepper() {
        const totalItems = this.items.length;
        if (!this.elWidth || !totalItems || this.layout !== "horizontal-single" || totalItems === 1) {
            return;
        }
        const activePosition = this.currentActivePosition || 0;
        if (this.layout === "horizontal-single") {
            this.multipleViewMode = false;
            this.items.forEach((item, index) => {
                item.hidden = index !== activePosition;
            });
        }
    }
    getEnabledStepIndex(startIndex, direction = "next") {
        const { items, currentActivePosition } = this;
        let newIndex = startIndex;
        while (items[newIndex]?.disabled && this.layout !== "horizontal-single") {
            newIndex = newIndex + (direction === "previous" ? -1 : 1);
        }
        return newIndex !== currentActivePosition && newIndex < items.length && newIndex >= 0
            ? newIndex
            : null;
    }
    updateStep(position) {
        this.currentActivePosition = position;
        this.calciteInternalStepperItemChange.emit({
            position,
        });
    }
    filterItems() {
        return this.items.filter((item) => !item.disabled);
    }
    setStepperItemNumberingSystem() {
        this.items.forEach((item) => {
            item.numberingSystem = this.numberingSystem;
        });
    }
    renderAction(position) {
        const isPositionStart = position === "start";
        const path = isPositionStart ? "chevron-left" : "chevron-right";
        const { currentActivePosition, multipleViewMode, layout } = this;
        const totalItems = this.items.length;
        const id = `${this.guid}-${isPositionStart ? "start" : "end"}`;
        return layout === "horizontal-single" && !multipleViewMode ? (h("calcite-action", { alignment: "center", appearance: "transparent", class: {
                [CSS.actionIcon]: true,
            }, compact: true, "data-position": position, disabled: (currentActivePosition === 0 && isPositionStart) ||
                (currentActivePosition === totalItems - 1 && !isPositionStart), icon: path, iconFlipRtl: true, id: id, onClick: this.handleActionClick, scale: this.scale, text: isPositionStart ? this.messages.previousStep : this.messages.nextStep })) : null;
    }
    getFirstEnabledStepperPosition() {
        const enabledStepIndex = this.items.findIndex((item) => !item.disabled);
        if (enabledStepIndex > -1) {
            return enabledStepIndex;
        }
        return 0;
    }
    static get is() { return "calcite-stepper"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["stepper.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["stepper.css"]
        };
    }
    static get assetsDirs() { return ["assets"]; }
    static get properties() {
        return {
            "icon": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, displays a status icon in the `calcite-stepper-item` heading."
                },
                "attribute": "icon",
                "reflect": true,
                "defaultValue": "false"
            },
            "layout": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "StepperLayout",
                    "resolved": "\"horizontal\" | \"horizontal-single\" | \"vertical\"",
                    "references": {
                        "StepperLayout": {
                            "location": "import",
                            "path": "./interfaces",
                            "id": "src/components/stepper/interfaces.ts::StepperLayout"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Defines the layout of the component."
                },
                "attribute": "layout",
                "reflect": true,
                "defaultValue": "\"horizontal\""
            },
            "numbered": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, displays the step number in the `calcite-stepper-item` heading."
                },
                "attribute": "numbered",
                "reflect": true,
                "defaultValue": "false"
            },
            "scale": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Scale",
                    "resolved": "\"l\" | \"m\" | \"s\"",
                    "references": {
                        "Scale": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Scale"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the size of the component."
                },
                "attribute": "scale",
                "reflect": true,
                "defaultValue": "\"m\""
            },
            "messages": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "StepperMessages",
                    "resolved": "{ label: string; previousStep: string; nextStep: string; }",
                    "references": {
                        "StepperMessages": {
                            "location": "import",
                            "path": "./assets/stepper/t9n",
                            "id": "src/components/stepper/assets/stepper/t9n/index.d.ts::StepperMessages"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "Made into a prop for testing purposes only"
                }
            },
            "numberingSystem": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "NumberingSystem",
                    "resolved": "\"arab\" | \"arabext\" | \"latn\"",
                    "references": {
                        "NumberingSystem": {
                            "location": "import",
                            "path": "../../utils/locale",
                            "id": "src/utils/locale.ts::NumberingSystem"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Specifies the Unicode numeral system used by the component for localization."
                },
                "attribute": "numbering-system",
                "reflect": true
            },
            "selectedItem": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "HTMLCalciteStepperItemElement",
                    "resolved": "HTMLCalciteStepperItemElement",
                    "references": {
                        "HTMLCalciteStepperItemElement": {
                            "location": "global",
                            "id": "global::HTMLCalciteStepperItemElement"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "readonly",
                            "text": undefined
                        }],
                    "text": "Specifies the component's selected item."
                },
                "defaultValue": "null"
            },
            "messageOverrides": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "Partial<StepperMessages>",
                    "resolved": "{ label?: string; previousStep?: string; nextStep?: string; }",
                    "references": {
                        "Partial": {
                            "location": "global",
                            "id": "global::Partial"
                        },
                        "StepperMessages": {
                            "location": "import",
                            "path": "./assets/stepper/t9n",
                            "id": "src/components/stepper/assets/stepper/t9n/index.d.ts::StepperMessages"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Use this property to override individual strings used by the component."
                }
            }
        };
    }
    static get states() {
        return {
            "defaultMessages": {},
            "effectiveLocale": {},
            "currentActivePosition": {},
            "elWidth": {}
        };
    }
    static get events() {
        return [{
                "method": "calciteStepperItemChange",
                "name": "calciteStepperItemChange",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Fires when the active `calcite-stepper-item` changes."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "calciteInternalStepperItemChange",
                "name": "calciteInternalStepperItemChange",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "Fires when the active `calcite-stepper-item` changes."
                },
                "complexType": {
                    "original": "StepperItemChangeEventDetail",
                    "resolved": "StepperItemChangeEventDetail",
                    "references": {
                        "StepperItemChangeEventDetail": {
                            "location": "import",
                            "path": "./interfaces",
                            "id": "src/components/stepper/interfaces.ts::StepperItemChangeEventDetail"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "nextStep": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Set the next `calcite-stepper-item` as active.",
                    "tags": []
                }
            },
            "prevStep": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Set the previous `calcite-stepper-item` as active.",
                    "tags": []
                }
            },
            "goToStep": {
                "complexType": {
                    "signature": "(step: number) => Promise<void>",
                    "parameters": [{
                            "name": "step",
                            "type": "number",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Set a specified `calcite-stepper-item` as active.",
                    "tags": [{
                            "name": "param",
                            "text": "step"
                        }]
                }
            },
            "startStep": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Set the first `calcite-stepper-item` as active.",
                    "tags": []
                }
            },
            "endStep": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Set the last `calcite-stepper-item` as active.",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "icon",
                "methodName": "handleItemPropChange"
            }, {
                "propName": "layout",
                "methodName": "handleItemPropChange"
            }, {
                "propName": "numbered",
                "methodName": "handleItemPropChange"
            }, {
                "propName": "scale",
                "methodName": "handleItemPropChange"
            }, {
                "propName": "numberingSystem",
                "methodName": "numberingSystemChange"
            }, {
                "propName": "messageOverrides",
                "methodName": "onMessagesChange"
            }, {
                "propName": "effectiveLocale",
                "methodName": "effectiveLocaleChange"
            }, {
                "propName": "currentActivePosition",
                "methodName": "handlePositionChange"
            }, {
                "propName": "elWidth",
                "methodName": "handleElWidthChange"
            }];
    }
    static get listeners() {
        return [{
                "name": "calciteInternalStepperItemKeyEvent",
                "method": "calciteInternalStepperItemKeyEvent",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "calciteInternalStepperItemRegister",
                "method": "registerItem",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "calciteInternalStepperItemSelect",
                "method": "updateItem",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "calciteInternalUserRequestedStepperItemSelect",
                "method": "handleUserRequestedStepperItemSelect",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=stepper.js.map
