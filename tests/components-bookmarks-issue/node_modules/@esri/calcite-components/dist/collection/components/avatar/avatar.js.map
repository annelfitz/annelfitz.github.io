{"version":3,"file":"avatar.js","sourceRoot":"","sources":["../../../../src/components/avatar/avatar.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, h, Prop, State } from \"@stencil/core\";\nimport { getModeName } from \"../../utils/dom\";\nimport { isValidHex } from \"../color-picker/utils\";\nimport { Scale } from \"../interfaces\";\nimport { hexToHue, stringToHex } from \"./utils\";\n\n@Component({\n  tag: \"calcite-avatar\",\n  styleUrl: \"avatar.scss\",\n  shadow: true,\n})\nexport class Avatar {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the `src` to an image (remember to add a token if the user is private). */\n  @Prop({ reflect: true }) thumbnail: string;\n\n  /** Specifies the full name of the user. When `label` and `thumbnail` are not defined, specifies the accessible name for the component. */\n  @Prop({ reflect: true }) fullName: string;\n\n  /** Specifies the username of the user. */\n  @Prop({ reflect: true }) username: string;\n\n  /** Specifies the unique id of the user. */\n  @Prop({ reflect: true }) userId: string;\n\n  /** Specifies alternative text when `thumbnail` is defined, otherwise specifies an accessible label.*/\n  @Prop() label: string;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  render() {\n    return this.determineContent();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteAvatarElement;\n\n  @State() thumbnailFailedToLoad = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private determineContent() {\n    if (this.thumbnail && !this.thumbnailFailedToLoad) {\n      return (\n        <img\n          alt={this.label || \"\"}\n          class=\"thumbnail\"\n          onError={() => (this.thumbnailFailedToLoad = true)}\n          src={this.thumbnail}\n        />\n      );\n    }\n    const initials = this.generateInitials();\n    const backgroundColor = this.generateFillColor();\n    return (\n      <span\n        aria-label={this.label || this.fullName}\n        class=\"background\"\n        role=\"figure\"\n        style={{ backgroundColor }}\n      >\n        {initials ? (\n          <span aria-hidden=\"true\" class=\"initials\">\n            {initials}\n          </span>\n        ) : (\n          <calcite-icon class=\"icon\" icon=\"user\" scale={this.scale} />\n        )}\n      </span>\n    );\n  }\n\n  /**\n   * Generate a valid background color that is consistent and unique to this user\n   */\n  private generateFillColor() {\n    const { userId, username, fullName, el } = this;\n    const theme = getModeName(el);\n    const id = userId && `#${userId.substr(userId.length - 6)}`;\n    const name = username || fullName || \"\";\n    const hex = id && isValidHex(id) ? id : stringToHex(name);\n    // if there is not unique information, or an invalid hex is produced, return a default\n    if ((!userId && !name) || !isValidHex(hex)) {\n      return `var(--calcite-color-foreground-2)`;\n    }\n    const hue = hexToHue(hex);\n    const l = theme === \"dark\" ? 20 : 90;\n    return `hsl(${hue}, 60%, ${l}%)`;\n  }\n\n  /**\n   * Use fullName or username to generate initials\n   */\n  private generateInitials(): string | boolean {\n    const { fullName, username } = this;\n    if (fullName) {\n      return fullName\n        .trim()\n        .split(\" \")\n        .map((name) => name.substring(0, 1))\n        .join(\"\");\n    } else if (username) {\n      return username.substring(0, 2);\n    }\n    return false;\n  }\n}\n"]}