{"version":3,"file":"utils.spec.js","sourceRoot":"","sources":["../../../../src/components/color-picker/utils.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  colorEqual,\n  hexToRGB,\n  isLonghandHex,\n  isShorthandHex,\n  isValidHex,\n  normalizeHex,\n  parseMode,\n  rgbToHex,\n} from \"./utils\";\nimport Color from \"color\";\n\ndescribe(\"utils\", () => {\n  it(\"can parse supported color modes\", () => {\n    expect(parseMode(\"#abc\")).toBe(\"hex\");\n    expect(parseMode(\"#aabbcc\")).toBe(\"hex\");\n    expect(parseMode(\"#caca\")).toBe(\"hexa\");\n    expect(parseMode(\"#cacacaca\")).toBe(\"hexa\");\n    expect(parseMode(\"rgb(214, 122, 127)\")).toBe(\"rgb-css\");\n    expect(parseMode(\"rgba(34, 12, 64, 0.6)\")).toBe(\"rgba-css\");\n    expect(parseMode(\"hsl(30, 100%, 50%)\")).toBe(\"hsl-css\");\n    expect(parseMode(\"hsla(30, 100%, 50%, .3)\")).toBe(\"hsla-css\");\n    expect(parseMode(\"unknown\")).toBeNull();\n    expect(parseMode({ r: 255, g: 255, b: 255 })).toBe(\"rgb\");\n    expect(parseMode({ r: 255, g: 255, b: 255, a: 0.5 })).toBe(\"rgba\");\n    expect(parseMode({ h: 255, s: 255, l: 255 })).toBe(\"hsl\");\n    expect(parseMode({ h: 255, s: 255, l: 255, a: 0.5 })).toBe(\"hsla\");\n    expect(parseMode({ h: 255, s: 255, v: 255 })).toBe(\"hsv\");\n    expect(parseMode({ h: 255, s: 255, v: 255, a: 0.5 })).toBe(\"hsva\");\n\n    const nonMatchingObject = {} as any;\n    expect(parseMode(nonMatchingObject)).toBeNull();\n  });\n\n  it(\"helps compare Color instances\", () => {\n    expect(colorEqual(Color(\"#f0f\"), Color({ r: 255, g: 0, b: 255 }))).toBe(true);\n    expect(colorEqual(Color(\"rgb(255, 0, 255)\"), Color({ h: 300, s: 100, v: 100 }))).toBe(true);\n  });\n\n  it(\"can convert hex to RGB\", () => {\n    expect(hexToRGB(\"#0f0\")).toMatchObject({ r: 0, g: 255, b: 0 });\n    expect(hexToRGB(\"#00ff00\")).toMatchObject({ r: 0, g: 255, b: 0 });\n    expect(hexToRGB(\"0f0\")).toBeNull();\n    expect(hexToRGB(\"00ff00\")).toBeNull();\n\n    expect(hexToRGB(\"#0f0f\", true)).toMatchObject({ r: 0, g: 255, b: 0, a: 1 });\n    expect(hexToRGB(\"#00ff00ff\", true)).toMatchObject({ r: 0, g: 255, b: 0, a: 1 });\n  });\n\n  it(\"can convert RGB to hex\", () => {\n    expect(\n      rgbToHex({\n        r: 0,\n        g: 255,\n        b: 0,\n      }),\n    ).toBe(\"#00ff00\");\n\n    expect(\n      rgbToHex({\n        r: 0,\n        g: 255,\n        b: 0,\n        a: 1,\n      }),\n    ).toBe(\"#00ff00ff\");\n  });\n\n  it(\"can determine shorthand hex\", () => {\n    expect(isShorthandHex(\"#0f0\")).toBe(true);\n    expect(isShorthandHex(\"\")).toBe(false);\n    expect(isShorthandHex(\"#\")).toBe(false);\n    expect(isShorthandHex(\"#0\")).toBe(false);\n    expect(isShorthandHex(\"#0f\")).toBe(false);\n    expect(isShorthandHex(\"#0f00\")).toBe(false);\n    expect(isShorthandHex(\"#00ff00\")).toBe(false);\n\n    expect(isShorthandHex(\"#0f0f\", true)).toBe(true);\n    expect(isShorthandHex(\"\", true)).toBe(false);\n    expect(isShorthandHex(\"#\", true)).toBe(false);\n    expect(isShorthandHex(\"#0\", true)).toBe(false);\n    expect(isShorthandHex(\"#0f\", true)).toBe(false);\n    expect(isShorthandHex(\"#0f0\", true)).toBe(false);\n    expect(isShorthandHex(\"#0f0f0\", true)).toBe(false);\n    expect(isShorthandHex(\"#00ff00\", true)).toBe(false);\n  });\n\n  it(\"can normalize hex\", () => {\n    expect(normalizeHex(\"#f00\")).toBe(\"#ff0000\");\n    expect(normalizeHex(\"f00\")).toBe(\"#ff0000\");\n    expect(normalizeHex(\"#ff0000\")).toBe(\"#ff0000\");\n    expect(normalizeHex(\"ff0000\")).toBe(\"#ff0000\");\n\n    expect(normalizeHex(\"#f00f\", true)).toBe(\"#ff0000ff\");\n    expect(normalizeHex(\"f00f\", true)).toBe(\"#ff0000ff\");\n    expect(normalizeHex(\"#ff0000ff\", true)).toBe(\"#ff0000ff\");\n    expect(normalizeHex(\"ff0000ff\", true)).toBe(\"#ff0000ff\");\n\n    expect(normalizeHex(\"#f00\", true, true)).toBe(\"#ff0000ff\");\n    expect(normalizeHex(\"f00\", true, true)).toBe(\"#ff0000ff\");\n    expect(normalizeHex(\"#ff0000\", true, true)).toBe(\"#ff0000ff\");\n    expect(normalizeHex(\"ff0000\", true, true)).toBe(\"#ff0000ff\");\n  });\n\n  it(\"can validate hex\", () => {\n    expect(isValidHex(\"#ff0\")).toBe(true);\n    expect(isValidHex(\"#ffff00\")).toBe(true);\n    expect(isValidHex(\"\")).toBe(false);\n    expect(isValidHex(\"#\")).toBe(false);\n    expect(isValidHex(\"#f\")).toBe(false);\n    expect(isValidHex(\"#f0\")).toBe(false);\n    expect(isValidHex(\"#ff00\")).toBe(false);\n    expect(isValidHex(\"#ffff0\")).toBe(false);\n    expect(isValidHex(\"#ffff000\")).toBe(false);\n    expect(isValidHex(\"ff0\")).toBe(false);\n    expect(isValidHex(\"ffff00\")).toBe(false);\n\n    expect(isValidHex(\"#ff00\", true)).toBe(true);\n    expect(isValidHex(\"#ffff0000\", true)).toBe(true);\n    expect(isValidHex(\"\")).toBe(false);\n    expect(isValidHex(\"#\")).toBe(false);\n    expect(isValidHex(\"#f\")).toBe(false);\n    expect(isValidHex(\"#f0\", true)).toBe(false);\n    expect(isValidHex(\"#ff0\", true)).toBe(false);\n    expect(isValidHex(\"#ffff0\", true)).toBe(false);\n    expect(isValidHex(\"#ffff000\", true)).toBe(false);\n    expect(isValidHex(\"ff00\", true)).toBe(false);\n    expect(isValidHex(\"ffff0000\", true)).toBe(false);\n  });\n\n  it(\"can determine longhand hex\", () => {\n    expect(isLonghandHex(\"#00ff00\")).toBe(true);\n    expect(isLonghandHex(\"\")).toBe(false);\n    expect(isLonghandHex(\"#\")).toBe(false);\n    expect(isLonghandHex(\"#0f\")).toBe(false);\n    expect(isLonghandHex(\"#0f0\")).toBe(false);\n    expect(isLonghandHex(\"#00ff\")).toBe(false);\n    expect(isLonghandHex(\"#00ff0\")).toBe(false);\n    expect(isLonghandHex(\"#00ff000\")).toBe(false);\n\n    expect(isLonghandHex(\"#00ff00ff\", true)).toBe(true);\n    expect(isLonghandHex(\"\", true)).toBe(false);\n    expect(isLonghandHex(\"#\", true)).toBe(false);\n    expect(isLonghandHex(\"#0\", true)).toBe(false);\n    expect(isLonghandHex(\"#0f\", true)).toBe(false);\n    expect(isLonghandHex(\"#0f0\", true)).toBe(false);\n    expect(isLonghandHex(\"#0f0f\", true)).toBe(false);\n    expect(isLonghandHex(\"#00ff00\", true)).toBe(false);\n    expect(isLonghandHex(\"#00ff00f\", true)).toBe(false);\n    expect(isLonghandHex(\"#00ff00ff0\", true)).toBe(false);\n  });\n});\n"]}