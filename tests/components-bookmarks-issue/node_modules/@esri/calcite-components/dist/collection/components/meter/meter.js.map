{"version":3,"file":"meter.js","sourceRoot":"","sources":["../../../../src/components/meter/meter.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, h, Host, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { Appearance, Scale } from \"../interfaces\";\nimport { CSS } from \"./resources\";\n\nimport {\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\n\nimport {\n  afterConnectDefaultValueSet,\n  connectForm,\n  disconnectForm,\n  FormComponent,\n} from \"../../utils/form\";\n\nimport {\n  connectLocalized,\n  disconnectLocalized,\n  getSupportedLocale,\n  LocalizedComponent,\n  NumberingSystem,\n  numberStringFormatter,\n  SupportedLocale,\n} from \"../../utils/locale\";\nimport { intersects } from \"../../utils/dom\";\nimport { createObserver } from \"../../utils/observers\";\nimport { MeterLabelType } from \"./interfaces\";\n\n@Component({\n  tag: \"calcite-meter\",\n  styleUrl: \"meter.scss\",\n  shadow: true,\n})\nexport class Meter implements FormComponent, LoadableComponent, LocalizedComponent {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** Specifies the appearance style of the component. */\n  @Prop({ reflect: true }) appearance: Extract<\"outline\" | \"outline-fill\" | \"solid\", Appearance> =\n    \"outline-fill\";\n\n  /** When `true`, interaction is prevented and the component is displayed with lower opacity. */\n  @Prop({ reflect: true }) disabled = false;\n\n  /** Specifies the component's display, where `\"single\"` displays a single color and `\"range\"` displays a range of colors based on provided `low`, `high`, `min` or `max` values. */\n  @Prop({ reflect: true }) fillType: \"single\" | \"range\" = \"range\";\n\n  /**\n   * The `id` of the form that will be associated with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   */\n  @Prop({ reflect: true }) form: string;\n\n  /** When `true`, number values are displayed with a group separator corresponding to the language and country format. */\n  @Prop({ reflect: true }) groupSeparator = false;\n\n  /** Specifies a high value.  When `fillType` is `\"range\"`, displays a different color when above the specified threshold.  */\n  @Prop({ reflect: true, mutable: true }) high: number;\n\n  /**  Accessible name for the component. */\n  @Prop() label!: string;\n\n  /** Specifies a low value.  When `fillType` is `\"range\"`, displays a different color when above the specified threshold.  */\n  @Prop({ reflect: true, mutable: true }) low: number;\n\n  /** Specifies the highest allowed value of the component. */\n  @Prop({ reflect: true }) max = 100;\n\n  /** Specifies the lowest allowed value of the component. */\n  @Prop({ reflect: true }) min = 0;\n\n  @Watch(\"min\")\n  @Watch(\"max\")\n  @Watch(\"low\")\n  @Watch(\"high\")\n  @Watch(\"value\")\n  handleRangeChange(): void {\n    this.calculateValues();\n    this.updateLabels();\n  }\n\n  /**\n   * Specifies the name of the component.\n   *\n   * Required to pass the component's `value` on form submission.\n   */\n  @Prop({ reflect: true }) name: string;\n\n  /** Specifies the Unicode numeral system used by the component for localization. */\n  @Prop() numberingSystem: NumberingSystem;\n\n  /** When `true`, displays the values of `high`, `low`, `min`, and `max`. */\n  @Prop({ reflect: true }) rangeLabels = false;\n\n  /** When `rangeLabels` is `true`, specifies the format of displayed labels. */\n  @Prop({ reflect: true }) rangeLabelType: MeterLabelType = \"percent\";\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** When `rangeLabelType` is `\"units\"` and either `valueLabel` or `rangeLabels` are `true`, displays beside the `value` and/or  `min` values. */\n  @Prop() unitLabel = \"\";\n\n  /** Specifies the current value of the component. */\n  @Prop({ mutable: true }) value: number;\n\n  /** When `true`, displays the current value. */\n  @Prop({ reflect: true }) valueLabel = false;\n\n  /** When `valueLabel` is `true`, specifies the format of displayed label. */\n  @Prop({ reflect: true }) valueLabelType: MeterLabelType = \"percent\";\n\n  @Watch(\"rangeLabels\")\n  @Watch(\"rangeLabelType\")\n  @Watch(\"unitLabel\")\n  @Watch(\"valueLabel\")\n  @Watch(\"valueLabelType\")\n  handleLabelChange(): void {\n    this.updateLabels();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    this.calculateValues();\n    afterConnectDefaultValueSet(this, this.value);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n    this.updateLabels();\n  }\n\n  connectedCallback(): void {\n    connectLocalized(this);\n    connectForm(this);\n    this.resizeObserver?.observe(this.el);\n  }\n\n  disconnectedCallback(): void {\n    disconnectLocalized(this);\n    disconnectForm(this);\n    this.resizeObserver?.disconnect();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteMeterElement;\n\n  defaultValue: Meter[\"value\"];\n\n  formEl: HTMLFormElement;\n\n  labelEl: HTMLCalciteLabelElement;\n\n  private highLabelEl: HTMLDivElement;\n\n  private labelFlipMax = 0.8;\n\n  private labelFlipProximity = 0.15;\n\n  private lowLabelEl: HTMLDivElement;\n\n  private maxLabelEl: HTMLDivElement;\n\n  private maxPercent = 100;\n\n  private meterContainerEl: HTMLDivElement;\n\n  private minLabelEl: HTMLDivElement;\n\n  private minPercent = 0;\n\n  private percentFormatting: {\n    formatter: Intl.NumberFormat;\n    locale: SupportedLocale;\n  };\n\n  private resizeObserver = createObserver(\"resize\", () => this.resizeHandler());\n\n  private valueLabelEl: HTMLDivElement;\n\n  @State() currentPercent: number;\n\n  @State() effectiveLocale: string;\n\n  @State() highActive: boolean;\n\n  @State() highPercent: number;\n\n  @State() lowActive: boolean;\n\n  @State() lowPercent: number;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private resizeHandler(): void {\n    this.updateLabels();\n  }\n\n  private updateLabels(): void {\n    if (this.valueLabelEl) {\n      this.determineValueLabelPosition();\n    }\n    if (this.rangeLabels) {\n      this.determineVisibleLabels();\n    }\n  }\n\n  private calculateValues(): void {\n    const { min, max, low, high, value } = this;\n    const lowPercent = (100 * (low - min)) / (max - min);\n    const highPercent = (100 * (high - min)) / (max - min);\n    const currentPercent = (100 * (value - min)) / (max - min);\n\n    if (!low || low < min || low > high || low > max) {\n      this.low = min;\n    }\n    if (!high || high > max || high < low || high < min) {\n      this.high = max;\n    }\n    if (!value) {\n      this.value = min;\n    }\n\n    this.lowPercent = lowPercent;\n    this.highPercent = highPercent;\n    this.currentPercent = value ? currentPercent : 0;\n    this.lowActive = !!low && low > min && (!value || low > value) && (!high || low < high);\n    this.highActive =\n      !!high && min <= high && high < max && (!value || high > value) && (!low || high > low);\n  }\n\n  private formatLabel = (value: number, labelType: MeterLabelType): string => {\n    if (labelType === \"percent\") {\n      if (!this.percentFormatting) {\n        const locale = getSupportedLocale(this.effectiveLocale);\n        const formatter = new Intl.NumberFormat(locale, {\n          useGrouping: this.groupSeparator,\n          style: \"percent\",\n        });\n        this.percentFormatting = { formatter, locale };\n      }\n      return this.percentFormatting.formatter.format(value);\n    } else {\n      numberStringFormatter.numberFormatOptions = {\n        locale: this.effectiveLocale,\n        numberingSystem: this.numberingSystem,\n        useGrouping: this.groupSeparator,\n      };\n      return numberStringFormatter.localize(value.toString());\n    }\n  };\n\n  private getMeterKindCssClass(): string {\n    const { low, high, min, max, value } = this;\n    const lowest = low ? low : min;\n    const highest = high ? high : max;\n    const aboveLowest = value >= lowest;\n    const belowLowest = value < lowest;\n    const aboveHighest = value >= highest;\n    const belowHighest = value < highest;\n\n    if (!value || (!low && belowHighest) || belowLowest) {\n      return CSS.success;\n    } else if (aboveLowest && belowHighest) {\n      return CSS.warning;\n    } else if (aboveHighest) {\n      return CSS.danger;\n    } else {\n      return CSS.success;\n    }\n  }\n\n  private intersects(el1: HTMLDivElement, el2: HTMLDivElement): boolean {\n    return el1 && el2 && intersects(el1.getBoundingClientRect(), el2.getBoundingClientRect());\n  }\n\n  private determineVisibleLabels(): void {\n    const { minLabelEl, lowLabelEl, highLabelEl, maxLabelEl } = this;\n    const highMaxOverlap = this.intersects(highLabelEl, maxLabelEl);\n    const lowHighOverlap = this.intersects(lowLabelEl, highLabelEl);\n    const lowMaxOverlap = this.intersects(lowLabelEl, maxLabelEl);\n    const minHighOverlap = this.intersects(minLabelEl, highLabelEl);\n    const minLowOverlap = this.intersects(minLabelEl, lowLabelEl);\n    const minMaxOverlap = this.intersects(minLabelEl, maxLabelEl);\n    const hiddenClass = CSS.labelHidden;\n\n    if (lowLabelEl) {\n      if (minLowOverlap || lowMaxOverlap || lowHighOverlap) {\n        lowLabelEl.classList.add(hiddenClass);\n      } else {\n        lowLabelEl.classList.remove(hiddenClass);\n      }\n    }\n\n    if (highLabelEl) {\n      if (minHighOverlap || lowMaxOverlap || highMaxOverlap) {\n        highLabelEl.classList.add(hiddenClass);\n      } else {\n        highLabelEl.classList.remove(hiddenClass);\n      }\n    }\n\n    if (minLabelEl && maxLabelEl) {\n      if (minMaxOverlap) {\n        maxLabelEl.classList.add(hiddenClass);\n      } else {\n        maxLabelEl.classList.remove(hiddenClass);\n      }\n    }\n  }\n\n  private determineValueLabelPosition(): void {\n    const { valueLabelEl, meterContainerEl, currentPercent } = this;\n    const valuePosition = currentPercent > 100 ? 100 : currentPercent > 0 ? currentPercent : 0;\n    const valueLabelWidth = valueLabelEl.getBoundingClientRect().width;\n    const containerWidth = meterContainerEl.getBoundingClientRect().width;\n    const labelWidthPercent = (100 * (valueLabelWidth - 0)) / (containerWidth - 0);\n\n    if (valuePosition + labelWidthPercent >= 100) {\n      valueLabelEl.style.insetInlineEnd = \"0%\";\n      valueLabelEl.style.removeProperty(\"inset-inline-start\");\n    } else {\n      valueLabelEl.style.insetInlineStart = `${valuePosition}% `;\n      valueLabelEl.style.removeProperty(\"inset-inline-end\");\n    }\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  //--------------------------------------------------------------------------\n\n  renderMeterFill(): VNode {\n    const { currentPercent, fillType } = this;\n    const kindClass = this.getMeterKindCssClass();\n    return (\n      <div\n        class={{ [CSS.fill]: true, [kindClass]: fillType !== \"single\" }}\n        style={{ width: `${currentPercent}%` }}\n      />\n    );\n  }\n\n  renderRangeLine(position: number): VNode {\n    const style = { insetInlineStart: `${position}%` };\n    return <div class={CSS.stepLine} style={style} />;\n  }\n\n  renderValueLabel(): VNode {\n    const { currentPercent, valueLabelType, unitLabel, value } = this;\n    const label = this.formatLabel(\n      valueLabelType === \"percent\" ? currentPercent / 100 : value || 0,\n      valueLabelType,\n    );\n    return (\n      <div\n        class={{ [CSS.label]: true, [CSS.labelValue]: true }}\n        key=\"low-label-line\"\n        // eslint-disable-next-line react/jsx-sort-props\n        ref={(el) => (this.valueLabelEl = el)}\n      >\n        {label}\n        {unitLabel && valueLabelType !== \"percent\" && (\n          <span class={CSS.unitLabel}>&nbsp;{unitLabel}</span>\n        )}\n      </div>\n    );\n  }\n\n  renderMinLabel(): VNode {\n    const { rangeLabelType, min, minPercent, unitLabel } = this;\n    const style = { insetInlineStart: `${minPercent}%` };\n    const labelMin = this.formatLabel(\n      rangeLabelType === \"percent\" ? minPercent : min,\n      rangeLabelType,\n    );\n    return (\n      <div\n        class={{ [CSS.label]: true, [CSS.labelRange]: true }}\n        key=\"min-label-line\"\n        style={style}\n        // eslint-disable-next-line react/jsx-sort-props\n        ref={(el) => (this.minLabelEl = el)}\n      >\n        {labelMin}\n        {unitLabel && rangeLabelType !== \"percent\" && (\n          <span class={CSS.unitLabel}>&nbsp;{unitLabel}</span>\n        )}\n      </div>\n    );\n  }\n\n  renderLowLabel(): VNode {\n    const { rangeLabelType, low, lowPercent, highPercent, labelFlipProximity } = this;\n    const label = low\n      ? this.formatLabel(rangeLabelType === \"percent\" ? lowPercent / 100 : low, rangeLabelType)\n      : \"\";\n    const styleDefault = { insetInlineStart: `${lowPercent}%` };\n    const styleFlipped = { insetInlineEnd: `${100 - lowPercent}%` };\n    const style =\n      (highPercent - lowPercent) / 100 < labelFlipProximity ? styleFlipped : styleDefault;\n    return (\n      <div\n        class={{ [CSS.label]: true, [CSS.labelRange]: true }}\n        key=\"low-label-line\"\n        style={style}\n        // eslint-disable-next-line react/jsx-sort-props\n        ref={(el) => (this.lowLabelEl = el)}\n      >\n        {label}\n      </div>\n    );\n  }\n\n  renderHighLabel(): VNode {\n    const { rangeLabelType, high, highPercent, labelFlipMax } = this;\n    const label = high\n      ? this.formatLabel(rangeLabelType === \"percent\" ? highPercent / 100 : high, rangeLabelType)\n      : \"\";\n    const styleDefault = { insetInlineStart: `${highPercent}%` };\n    const styleFlipped = { insetInlineEnd: `${100 - highPercent}%` };\n    const style = highPercent / 100 >= labelFlipMax ? styleFlipped : styleDefault;\n    return (\n      <div\n        class={{ [CSS.label]: true, [CSS.labelRange]: true }}\n        key=\"high-label-line\"\n        style={style}\n        // eslint-disable-next-line react/jsx-sort-props\n        ref={(el) => (this.highLabelEl = el as HTMLDivElement)}\n      >\n        {label}\n      </div>\n    );\n  }\n\n  renderMaxLabel(): VNode {\n    const { rangeLabelType, max, maxPercent } = this;\n    const style = { insetInlineEnd: `${100 - maxPercent}%` };\n    const labelMax = this.formatLabel(\n      rangeLabelType === \"percent\" ? maxPercent / 100 : max,\n      rangeLabelType,\n    );\n    return (\n      <div\n        class={{ [CSS.label]: true, [CSS.labelRange]: true }}\n        key=\"max-label-line\"\n        style={style}\n        // eslint-disable-next-line react/jsx-sort-props\n        ref={(el) => (this.maxLabelEl = el as HTMLDivElement)}\n      >\n        {labelMax}\n      </div>\n    );\n  }\n\n  render(): VNode {\n    const {\n      appearance,\n      currentPercent,\n      highActive,\n      highPercent,\n      label,\n      lowActive,\n      lowPercent,\n      max,\n      maxPercent,\n      min,\n      minPercent,\n      rangeLabels,\n      rangeLabelType,\n      unitLabel,\n      value,\n      valueLabel,\n      valueLabelType,\n    } = this;\n    const textPercentLabelWithPercent = this.formatLabel(currentPercent / 100, \"percent\");\n    const textUnitLabel = `${value} ${unitLabel}`;\n    const valueText =\n      valueLabelType === \"percent\"\n        ? textPercentLabelWithPercent\n        : unitLabel\n          ? textUnitLabel\n          : undefined;\n    return (\n      <Host>\n        <div\n          aria-label={label}\n          aria-valuemax={rangeLabelType === \"percent\" ? maxPercent : max}\n          aria-valuemin={rangeLabelType === \"percent\" ? minPercent : min}\n          aria-valuenow={valueLabelType === \"percent\" ? currentPercent : value}\n          aria-valuetext={valueText}\n          class={{\n            [CSS.container]: true,\n            [CSS.stepsVisible]: rangeLabels,\n            [CSS.valueVisible]: valueLabel,\n            [appearance]: appearance !== \"outline-fill\",\n          }}\n          role=\"meter\"\n          // eslint-disable-next-line react/jsx-sort-props\n          ref={(el) => (this.meterContainerEl = el as HTMLDivElement)}\n        >\n          {this.renderMeterFill()}\n          {valueLabel && this.renderValueLabel()}\n          {lowActive && this.renderRangeLine(lowPercent)}\n          {highActive && this.renderRangeLine(highPercent)}\n          {rangeLabels && this.renderMinLabel()}\n          {rangeLabels && lowActive && this.renderLowLabel()}\n          {rangeLabels && highActive && this.renderHighLabel()}\n          {rangeLabels && this.renderMaxLabel()}\n        </div>\n      </Host>\n    );\n  }\n}\n"]}