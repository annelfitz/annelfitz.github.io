{"version":3,"file":"mode.js","sourceRoot":"","sources":["../../../src/utils/mode.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AAEjD;;GAEG;AACH,MAAM,UAAU,mBAAmB;IACjC,MAAM,EAAE,SAAS,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC;IACpC,MAAM,WAAW,GAAG,MAAM,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC,OAAO,CAAC;IAE9E,MAAM,OAAO,GAAG,GAAW,EAAE,CAC3B,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;IAEnG,MAAM,cAAc,GAAG,CAAC,IAAY,EAAE,EAAE,CACtC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,mBAAmB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;IAEzG,MAAM,iBAAiB,GAAG,CAAC,OAAe,EAAQ,EAAE;QAClD,WAAW,KAAK,OAAO,IAAI,cAAc,CAAC,OAAO,CAAC,CAAC;QACnD,WAAW,GAAG,OAAO,CAAC;IACxB,CAAC,CAAC;IAEF,IAAI,WAAW,GAAG,OAAO,EAAE,CAAC;IAE5B,2BAA2B;IAC3B,cAAc,CAAC,WAAW,CAAC,CAAC;IAE5B,gDAAgD;IAChD,MAAM;SACH,UAAU,CAAC,8BAA8B,CAAC;SAC1C,gBAAgB,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IAE9F,2DAA2D;IAC3D,IAAI,gBAAgB,CAAC,GAAG,EAAE,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE;QAC9E,UAAU,EAAE,IAAI;QAChB,eAAe,EAAE,CAAC,OAAO,CAAC;KAC3B,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { autoMode, darkMode } from \"./resources\";\n\n/**\n * Emits when the mode is dynamically toggled between light and dark on <body> or in OS preferences.\n */\nexport function initModeChangeEvent(): void {\n  const { classList } = document.body;\n  const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n\n  const getMode = (): string =>\n    classList.contains(darkMode) || (classList.contains(autoMode) && prefersDark) ? \"dark\" : \"light\";\n\n  const emitModeChange = (mode: string) =>\n    document.body.dispatchEvent(new CustomEvent(\"calciteModeChange\", { bubbles: true, detail: { mode } }));\n\n  const modeChangeHandler = (newMode: string): void => {\n    currentMode !== newMode && emitModeChange(newMode);\n    currentMode = newMode;\n  };\n\n  let currentMode = getMode();\n\n  // emits event on page load\n  emitModeChange(currentMode);\n\n  // emits event when changing OS mode preferences\n  window\n    .matchMedia(\"(prefers-color-scheme: dark)\")\n    .addEventListener(\"change\", (event) => modeChangeHandler(event.matches ? \"dark\" : \"light\"));\n\n  // emits event when toggling between mode classes on <body>\n  new MutationObserver(() => modeChangeHandler(getMode())).observe(document.body, {\n    attributes: true,\n    attributeFilter: [\"class\"],\n  });\n}\n"]}