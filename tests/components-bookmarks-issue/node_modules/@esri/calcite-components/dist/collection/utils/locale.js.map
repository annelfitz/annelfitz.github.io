{"version":3,"file":"locale.js","sourceRoot":"","sources":["../../../src/utils/locale.ts"],"names":[],"mappings":"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","sourcesContent":["import { closestElementCrossShadowBoundary, containsCrossShadowBoundary } from \"./dom\";\nimport { BigDecimal, isValidNumber, sanitizeExponentialNumberString } from \"./number\";\nimport { createObserver } from \"./observers\";\n\nexport const defaultLocale = \"en\";\n\nexport const t9nLocales = [\n  \"ar\",\n  \"bg\",\n  \"bs\",\n  \"ca\",\n  \"cs\",\n  \"da\",\n  \"de\",\n  \"el\",\n  defaultLocale,\n  \"es\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"he\",\n  \"hr\",\n  \"hu\",\n  \"id\",\n  \"it\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"lv\",\n  \"no\",\n  \"nl\",\n  \"pl\",\n  \"pt-BR\",\n  \"pt-PT\",\n  \"ro\",\n  \"ru\",\n  \"sk\",\n  \"sl\",\n  \"sr\",\n  \"sv\",\n  \"th\",\n  \"tr\",\n  \"uk\",\n  \"vi\",\n  \"zh-CN\",\n  \"zh-HK\",\n  \"zh-TW\",\n];\n\nexport const locales = [\n  \"ar\",\n  \"bg\",\n  \"bs\",\n  \"ca\",\n  \"cs\",\n  \"da\",\n  \"de\",\n  \"de-AT\",\n  \"de-CH\",\n  \"el\",\n  defaultLocale,\n  \"en-AU\",\n  \"en-CA\",\n  \"en-GB\",\n  \"es\",\n  \"es-MX\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"fr-CH\",\n  \"he\",\n  \"hi\",\n  \"hr\",\n  \"hu\",\n  \"id\",\n  \"it\",\n  \"it-CH\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"lv\",\n  \"mk\",\n  \"no\",\n  \"nl\",\n  \"pl\",\n  \"pt\",\n  \"pt-PT\",\n  \"ro\",\n  \"ru\",\n  \"sk\",\n  \"sl\",\n  \"sr\",\n  \"sv\",\n  \"th\",\n  \"tr\",\n  \"uk\",\n  \"vi\",\n  \"zh-CN\",\n  \"zh-HK\",\n  \"zh-TW\",\n];\n\nexport const numberingSystems = [\"arab\", \"arabext\", \"latn\"] as const;\n\nexport const supportedLocales = [...new Set([...t9nLocales, ...locales])] as const;\n\nexport type NumberingSystem = (typeof numberingSystems)[number];\n\nexport type SupportedLocale = (typeof supportedLocales)[number];\n\nconst isNumberingSystemSupported = (numberingSystem: string): numberingSystem is NumberingSystem =>\n  numberingSystems.includes(numberingSystem as NumberingSystem);\n\nconst browserNumberingSystem = new Intl.NumberFormat().resolvedOptions().numberingSystem;\n\n// for consistent browser behavior, we normalize numberingSystem to prevent the browser-inferred value\n// see https://github.com/Esri/calcite-design-system/issues/3079#issuecomment-1168964195 for more info\nexport const defaultNumberingSystem =\n  browserNumberingSystem === \"arab\" || !isNumberingSystemSupported(browserNumberingSystem)\n    ? \"latn\"\n    : browserNumberingSystem;\n\nexport const getSupportedNumberingSystem = (numberingSystem: string): NumberingSystem =>\n  isNumberingSystemSupported(numberingSystem) ? numberingSystem : defaultNumberingSystem;\n\n/**\n * Gets the locale that best matches the context.\n *\n * @param locale – the BCP 47 locale code\n * @param context - specifies whether the locale code should match in the context of CLDR or T9N (translation)\n */\nexport function getSupportedLocale(locale: string, context: \"cldr\" | \"t9n\" = \"cldr\"): SupportedLocale {\n  const contextualLocales = context === \"cldr\" ? locales : t9nLocales;\n\n  if (!locale) {\n    return defaultLocale;\n  }\n\n  if (contextualLocales.includes(locale)) {\n    return locale;\n  }\n\n  locale = locale.toLowerCase();\n\n  // we support both 'nb' and 'no' (BCP 47) for Norwegian but only `no` has corresponding bundle\n  if (locale === \"nb\") {\n    return \"no\";\n  }\n\n  // we use `pt-BR` as it will have the same translations as `pt`, which has no corresponding bundle\n  if (context === \"t9n\" && locale === \"pt\") {\n    return \"pt-BR\";\n  }\n\n  if (locale.includes(\"-\")) {\n    locale = locale.replace(/(\\w+)-(\\w+)/, (_match, language, region) => `${language}-${region.toUpperCase()}`);\n\n    if (!contextualLocales.includes(locale)) {\n      locale = locale.split(\"-\")[0];\n    }\n  }\n\n  // we can `zh-CN` as base translation for chinese locales which has no corresponding bundle.\n  if (locale === \"zh\") {\n    return \"zh-CN\";\n  }\n\n  if (!contextualLocales.includes(locale)) {\n    console.warn(\n      `Translations for the \"${locale}\" locale are not available and will fall back to the default, English (en).`,\n    );\n    return defaultLocale;\n  }\n\n  return locale;\n}\n\n/**\n * This interface is for components that need to determine locale from the lang attribute.\n */\nexport interface LocalizedComponent {\n  el: HTMLElement;\n\n  /**\n   * Used to store the effective locale to avoid multiple lookups.\n   *\n   * This is an internal property and should:\n   *\n   * - use the `@State` decorator\n   * - be initialized to \"\"\n   *\n   * Components should watch this prop to ensure messages are updated.\n   *\n   * @Watch(\"effectiveLocale\")\n   * effectiveLocaleChange(): void {\n   *   updateMessages(this, this.effectiveLocale);\n   * }\n   */\n  effectiveLocale: string;\n}\n\nconst connectedComponents = new Set<LocalizedComponent>();\n\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback` before any logic that depends on locale\n *\n * @param component\n */\nexport function connectLocalized(component: LocalizedComponent): void {\n  updateEffectiveLocale(component);\n\n  if (connectedComponents.size === 0) {\n    mutationObserver?.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"lang\"],\n      subtree: true,\n    });\n  }\n\n  connectedComponents.add(component);\n}\n\n/**\n * This is only exported for components that implemented the now deprecated `locale` prop.\n *\n * Do not use this utils for new components.\n *\n * @param component\n */\nexport function updateEffectiveLocale(component: LocalizedComponent): void {\n  component.effectiveLocale = getLocale(component);\n}\n\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectLocalized(component: LocalizedComponent): void {\n  connectedComponents.delete(component);\n\n  if (connectedComponents.size === 0) {\n    mutationObserver.disconnect();\n  }\n}\n\nconst mutationObserver = createObserver(\"mutation\", (records) => {\n  records.forEach((record) => {\n    const el = record.target as HTMLElement;\n\n    connectedComponents.forEach((component) => {\n      const inUnrelatedSubtree = !containsCrossShadowBoundary(el, component.el);\n\n      if (inUnrelatedSubtree) {\n        return;\n      }\n\n      const closestLangEl = closestElementCrossShadowBoundary<HTMLElement>(component.el, \"[lang]\");\n\n      if (!closestLangEl) {\n        component.effectiveLocale = defaultLocale;\n        return;\n      }\n\n      const closestLang = closestLangEl.lang;\n\n      component.effectiveLocale =\n        // user set lang=\"\" means unknown language, so we use default\n        closestLangEl.hasAttribute(\"lang\") && closestLang === \"\" ? defaultLocale : closestLang;\n    });\n  });\n});\n\n/**\n * This util helps resolve a component's locale.\n * It will also fall back on the deprecated `locale` if a component implemented this previously.\n *\n * @param component\n */\nfunction getLocale(component: LocalizedComponent): string {\n  return (\n    component.el.lang ||\n    closestElementCrossShadowBoundary<HTMLElement>(component.el, \"[lang]\")?.lang ||\n    document.documentElement.lang ||\n    defaultLocale\n  );\n}\n\nexport interface NumberStringFormatOptions extends Intl.NumberFormatOptions {\n  numberingSystem: NumberingSystem;\n  locale: string;\n}\n\n/**\n * This util formats and parses numbers for localization\n */\nexport class NumberStringFormat {\n  /**\n   * The actual group separator for the specified locale.\n   * White-space group separators are changed to the non-breaking space (nbsp) unicode character.\n   * so we replace them with a normal <SPACE>.\n   */\n  private _actualGroup: string;\n\n  /** the corrected group separator */\n  private _group: string;\n\n  get group(): string {\n    return this._group;\n  }\n\n  private _decimal: string;\n\n  get decimal(): string {\n    return this._decimal;\n  }\n\n  private _minusSign: string;\n\n  get minusSign(): string {\n    return this._minusSign;\n  }\n\n  private _digits: Array<string>;\n\n  get digits(): Array<string> {\n    return this._digits;\n  }\n\n  private _getDigitIndex;\n\n  private _numberFormatter: Intl.NumberFormat;\n\n  get numberFormatter(): Intl.NumberFormat {\n    return this._numberFormatter;\n  }\n\n  private _numberFormatOptions: NumberStringFormatOptions;\n\n  get numberFormatOptions(): NumberStringFormatOptions {\n    return this._numberFormatOptions;\n  }\n\n  /**\n   * numberFormatOptions needs to be set before localize/delocalize is called to ensure the options are up to date\n   */\n  set numberFormatOptions(options: NumberStringFormatOptions) {\n    options.locale = getSupportedLocale(options?.locale);\n    options.numberingSystem = getSupportedNumberingSystem(options?.numberingSystem);\n\n    if (\n      // No need to create the formatter if `locale` and `numberingSystem`\n      // are the default values and `numberFormatOptions` has not been set\n      (!this._numberFormatOptions &&\n        options.locale === defaultLocale &&\n        options.numberingSystem === defaultNumberingSystem &&\n        // don't skip initialization if any options besides locale/numberingSystem are set\n        Object.keys(options).length === 2) ||\n      // cache formatter by only recreating when options change\n      JSON.stringify(this._numberFormatOptions) === JSON.stringify(options)\n    ) {\n      return;\n    }\n\n    this._numberFormatOptions = options;\n\n    this._numberFormatter = new Intl.NumberFormat(\n      this._numberFormatOptions.locale,\n      this._numberFormatOptions as Intl.NumberFormatOptions,\n    );\n\n    this._digits = [\n      ...new Intl.NumberFormat(this._numberFormatOptions.locale, {\n        useGrouping: false,\n        numberingSystem: this._numberFormatOptions.numberingSystem,\n      } as Intl.NumberFormatOptions).format(9876543210),\n    ].reverse();\n\n    const index = new Map(this._digits.map((d, i) => [d, i]));\n\n    // numberingSystem is parsed to return consistent decimal separator across browsers.\n    const parts = new Intl.NumberFormat(this._numberFormatOptions.locale, {\n      numberingSystem: this._numberFormatOptions.numberingSystem,\n    } as Intl.NumberFormatOptions).formatToParts(-12345678.9);\n\n    this._actualGroup = parts.find((d) => d.type === \"group\").value;\n    // change whitespace group separators to the unicode non-breaking space (nbsp)\n    this._group = this._actualGroup.trim().length === 0 || this._actualGroup == \" \" ? \"\\u00A0\" : this._actualGroup;\n    this._decimal = parts.find((d) => d.type === \"decimal\").value;\n    this._minusSign = parts.find((d) => d.type === \"minusSign\").value;\n    this._getDigitIndex = (d: string) => index.get(d);\n  }\n\n  delocalize = (numberString: string): string =>\n    // For performance, (de)localization is skipped if the formatter isn't initialized.\n    // In order to localize/delocalize, e.g. when lang/numberingSystem props are not default values,\n    // `numberFormatOptions` must be set in a component to create and cache the formatter.\n    this._numberFormatOptions\n      ? sanitizeExponentialNumberString(numberString, (nonExpoNumString: string): string =>\n          nonExpoNumString\n            .replace(new RegExp(`[${this._minusSign}]`, \"g\"), \"-\")\n            .replace(new RegExp(`[${this._group}]`, \"g\"), \"\")\n            .replace(new RegExp(`[${this._decimal}]`, \"g\"), \".\")\n            .replace(new RegExp(`[${this._digits.join(\"\")}]`, \"g\"), this._getDigitIndex),\n        )\n      : numberString;\n\n  localize = (numberString: string): string =>\n    this._numberFormatOptions\n      ? sanitizeExponentialNumberString(numberString, (nonExpoNumString: string): string =>\n          isValidNumber(nonExpoNumString.trim())\n            ? new BigDecimal(nonExpoNumString.trim())\n                .format(this)\n                .replace(new RegExp(`[${this._actualGroup}]`, \"g\"), this._group)\n            : nonExpoNumString,\n        )\n      : numberString;\n}\n\nexport const numberStringFormatter = new NumberStringFormat();\n\nexport type LocaleDateTimeOptionKey = string;\n\n/**\n * Exported for testing purposes only.\n *\n * @internal\n */\nexport let dateTimeFormatCache: Map<LocaleDateTimeOptionKey, Intl.DateTimeFormat>;\n\n/**\n * Used to ensure all cached formats are for the same locale.\n *\n * @internal\n */\nlet previousLocaleUsedForCaching: string;\n\n/**\n * Generates a cache key for date time format lookups.\n *\n * @internal\n */\nfunction buildDateTimeFormatCacheKey(options: Intl.DateTimeFormatOptions = {}): string {\n  return Object.entries(options)\n    .sort(([key1], [key2]) => key1.localeCompare(key2))\n    .map((keyValue) => `${keyValue[0]}-${keyValue[1]}`)\n    .flat()\n    .join(\":\");\n}\n\n/**\n * Returns an instance of Intl.DateTimeFormat and reuses it if requested with the same locale and options.\n *\n * **Note**: the cache will be cleared if a different locale is provided\n *\n * @internal\n */\nexport function getDateTimeFormat(locale: string, options?: Intl.DateTimeFormatOptions): Intl.DateTimeFormat {\n  locale = getSupportedLocale(locale);\n\n  if (!dateTimeFormatCache) {\n    dateTimeFormatCache = new Map();\n  }\n\n  if (previousLocaleUsedForCaching !== locale) {\n    dateTimeFormatCache.clear();\n    previousLocaleUsedForCaching = locale;\n  }\n\n  const key = buildDateTimeFormatCacheKey(options);\n  const cached = dateTimeFormatCache.get(key);\n\n  if (cached) {\n    return cached;\n  }\n\n  const format = new Intl.DateTimeFormat(locale, options);\n  dateTimeFormatCache.set(key, format);\n\n  return format;\n}\n"]}