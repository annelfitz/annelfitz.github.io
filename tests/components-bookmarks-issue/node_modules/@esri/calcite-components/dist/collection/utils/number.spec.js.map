{"version":3,"file":"number.spec.js","sourceRoot":"","sources":["../../../src/utils/number.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { locales, numberStringFormatter } from \"./locale\";\nimport {\n  BigDecimal,\n  addLocalizedTrailingDecimalZeros,\n  expandExponentialNumberString,\n  isValidNumber,\n  parseNumberString,\n  sanitizeNumberString,\n} from \"./number\";\n\ndescribe(\"isValidNumber\", () => {\n  it(\"returns false for string values that can't compute to a number\", () => {\n    expect(isValidNumber(\"undefined\")).toBe(false);\n    expect(isValidNumber(\";lkj2323\")).toBe(false);\n    expect(isValidNumber(\"\")).toBe(false);\n    expect(isValidNumber(undefined)).toBe(false);\n    expect(isValidNumber(null)).toBe(false);\n    expect(isValidNumber(\"null\")).toBe(false);\n    expect(isValidNumber(\"not a number\")).toBe(false);\n    expect(isValidNumber(\"1 2345,67\")).toBe(false);\n  });\n\n  it(\"returns true for string values that compute to a valid number\", () => {\n    expect(isValidNumber(\"123345345\")).toBe(true);\n    expect(isValidNumber(\"123123.234234\")).toBe(true);\n  });\n});\n\ndescribe(\"parseNumberString\", () => {\n  it(\"returns empty string for string values that can't compute to a number\", () => {\n    expect(parseNumberString()).toBe(\"\");\n    expect(parseNumberString(null)).toBe(\"\");\n    expect(parseNumberString(undefined)).toBe(\"\");\n    expect(parseNumberString(\"\")).toBe(\"\");\n    expect(parseNumberString(\"only numbers\")).toBe(\"\");\n\n    // eslint-disable-next-line @cspell/spellchecker\n    const lettersAndSymbols = \"kjas;lkjwo;aij(*&,asd;flkj-\";\n    // eslint-disable-next-line @cspell/spellchecker\n    const lettersAndSymbolsWithLeadingNegativeSign = \"-ASDF(*^LKJihsdf*&^\";\n\n    expect(parseNumberString(lettersAndSymbols)).toBe(\"\");\n    expect(parseNumberString(lettersAndSymbolsWithLeadingNegativeSign)).toBe(\"\");\n    expect(parseNumberString(\"123test\")).toBe(\"123e\");\n  });\n\n  it(\"returns valid number string for string values that compute to a valid number\", () => {\n    const stringWithLettersAndDigits = \"lkj2323lkj\";\n    const frenchNumber = \"1 2345,67\";\n    const positiveInteger = \"123345345\";\n    // eslint-disable-next-line @cspell/spellchecker\n    const stringWithLettersDigitsAndSymbols = \"123sdfa34345klndfsi8*&(^asdf5345\";\n    const decimal = \"123123.234234\";\n    // eslint-disable-next-line @cspell/spellchecker\n    const stringWithLettersAndDecimal = \"12asdfas$%@$3123.23asdf2a4234\";\n    // eslint-disable-next-line @cspell/spellchecker\n    const stringWithLettersDecimalAndNonLeadingNegativeSign = \"12a-sdfas$%@$3123.23asdf2a4234\";\n    // eslint-disable-next-line @cspell/spellchecker\n    const stringWithLettersDecimalAndLeadingNegativeSign = \"-12a-sdfas$%@$3123.23asdf2a4234\";\n\n    expect(parseNumberString(stringWithLettersAndDigits)).toBe(\"2323\");\n    expect(parseNumberString(frenchNumber)).toBe(\"1234567\");\n    expect(parseNumberString(positiveInteger)).toBe(positiveInteger);\n    expect(parseNumberString(stringWithLettersDigitsAndSymbols)).toBe(\"1233434585345\");\n    expect(parseNumberString(decimal)).toBe(decimal);\n    expect(parseNumberString(stringWithLettersAndDecimal)).toBe(\"123123.2324234\");\n    expect(parseNumberString(stringWithLettersDecimalAndNonLeadingNegativeSign)).toBe(\"123123.2324234\");\n    expect(parseNumberString(stringWithLettersDecimalAndLeadingNegativeSign)).toBe(\"-123123.2324234\");\n  });\n});\n\ndescribe(\"sanitizeNumberString\", () => {\n  it(\"sanitizes exponential numbers, leading zeros, multiple dashes, and trailing decimals\", () => {\n    const stringWithMultipleDashes = \"1--2-34----\";\n    const negativeStringWithMultipleDashes = \"---1--23--4---\";\n    const stringWithOnlyZeros = \"0000000\";\n    const stringWithLeadingZeros = \"00000001\";\n    const negativeStringWithLeadingZeros = \"-00001\";\n    const negativeDecimalStringWithLeadingZeros = \"-00001.0001\";\n    const stringWithoutLeadingZeros = \"10000000\";\n    const stringWithTrailingDecimal = \"123.\";\n    const stringWithDecimal = \"123.45\";\n    const exponentialString = \"2.5e123\";\n    const negativeExponentialString = \"-2.5e-1--2--3\";\n    const multipleEString = \"2e4ee2421e\";\n    const singleEString = \"E\";\n    const leadingEString = \"E5\";\n    const trailingEString = \"12E\";\n    const leadingZeroExponentialString = \"000005e00006\";\n    const nonLeadingZeroExponentialString = \"500000e00600\";\n    const multiDecimalExponentialString = \"1.2e2.1\";\n    const crazyExponentialString = \"-2-.-1ee.5-3e.1..e--09\";\n    const trailingDecimalZeros = \"0.110000\";\n\n    expect(sanitizeNumberString(stringWithMultipleDashes)).toBe(\"1234\");\n    expect(sanitizeNumberString(negativeStringWithMultipleDashes)).toBe(\"-1234\");\n    expect(sanitizeNumberString(stringWithOnlyZeros)).toBe(\"0\");\n    expect(sanitizeNumberString(stringWithLeadingZeros)).toBe(\"1\");\n    expect(sanitizeNumberString(negativeStringWithLeadingZeros)).toBe(\"-1\");\n    expect(sanitizeNumberString(negativeDecimalStringWithLeadingZeros)).toBe(\"-1.0001\");\n    expect(sanitizeNumberString(stringWithoutLeadingZeros)).toBe(\"10000000\");\n    expect(sanitizeNumberString(stringWithTrailingDecimal)).toBe(\"123\");\n    expect(sanitizeNumberString(stringWithDecimal)).toBe(\"123.45\");\n    expect(sanitizeNumberString(exponentialString)).toBe(\"2.5e123\");\n    expect(sanitizeNumberString(negativeExponentialString)).toBe(\"-2.5e-123\");\n    expect(sanitizeNumberString(multipleEString)).toBe(\"2e42421\");\n    expect(sanitizeNumberString(singleEString)).toBe(\"\");\n    expect(sanitizeNumberString(leadingEString)).toBe(\"1e5\");\n    expect(sanitizeNumberString(trailingEString)).toBe(\"12\");\n    expect(sanitizeNumberString(leadingZeroExponentialString)).toBe(\"5e6\");\n    expect(sanitizeNumberString(nonLeadingZeroExponentialString)).toBe(\"500000e600\");\n    expect(sanitizeNumberString(multiDecimalExponentialString)).toBe(\"1.2e21\");\n    expect(sanitizeNumberString(crazyExponentialString)).toBe(\"-2.1e53109\");\n    expect(sanitizeNumberString(trailingDecimalZeros)).toBe(\"0.110000\");\n  });\n});\n\ndescribe(\"BigDecimal\", () => {\n  it(\"handles precise/large numbers and arbitrary-precision arithmetic\", () => {\n    const subtract = new BigDecimal(\"0.3\").subtract(\"0.1\").toString();\n    expect(subtract).toBe(\"0.2\");\n\n    const add = new BigDecimal(Number.MAX_SAFE_INTEGER.toString()).add(\"1\").toString();\n    expect(Number(add)).toBeGreaterThan(Number.MAX_SAFE_INTEGER);\n\n    const negativeZero = new BigDecimal(\"-0\").toString();\n    expect(negativeZero).toBe(\"-0\");\n  });\n\n  it(\"correctly formats long decimal numbers\", () => {\n    numberStringFormatter.numberFormatOptions = {\n      locale: \"en\",\n      numberingSystem: \"latn\",\n      useGrouping: true,\n    };\n    expect(new BigDecimal(\"123.0123456789\").format(numberStringFormatter)).toBe(\"123.0123456789\");\n  });\n\n  locales.forEach((locale) => {\n    it(`correctly localizes number parts - ${locale}`, () => {\n      numberStringFormatter.numberFormatOptions = {\n        locale,\n        // the group separator is different in arabic depending on the numberingSystem\n        numberingSystem: locale === \"ar\" ? \"arab\" : \"latn\",\n        useGrouping: true,\n      };\n\n      const parts = new BigDecimal(\"-12345678.9\").formatToParts(numberStringFormatter);\n      const groupPart = parts.find((part) => part.type === \"group\").value;\n      expect(groupPart.trim().length === 0 || groupPart === \" \" ? \"\\u00A0\" : groupPart).toBe(\n        numberStringFormatter.group,\n      );\n      expect(parts.find((part) => part.type === \"decimal\").value).toBe(numberStringFormatter.decimal);\n      expect(parts.find((part) => part.type === \"minusSign\").value).toBe(numberStringFormatter.minusSign);\n    });\n  });\n});\n\ndescribe(\"expandExponentialNumberString\", () => {\n  it(\"integer based exponential numbers\", () => {\n    expect(expandExponentialNumberString(\"123e4\")).toBe(\"1230000\");\n    expect(expandExponentialNumberString(\"1e50\")).toBe(\"100000000000000000000000000000000000000000000000000\");\n  });\n  it(\"decimal based exponential number strings\", () => {\n    expect(expandExponentialNumberString(\".987e0\")).toBe(\"0.987\");\n    expect(expandExponentialNumberString(\".00000000000000000000000000000000000000000000000001e50\")).toBe(\"1\");\n    expect(expandExponentialNumberString(\"1.2345678987654321000000000000000000000000000000000000000000e16\")).toBe(\n      \"12345678987654321\",\n    );\n  });\n  it(\"exponential number strings with negative magnitude\", () => {\n    expect(expandExponentialNumberString(\"1.23e-60\")).toBe(\n      \"0.00000000000000000000000000000000000000000000000000000000000123\",\n    );\n    expect(expandExponentialNumberString(\"100000000000000000000000000000000000000000000000000e-50\")).toBe(\"1\");\n  });\n  it(\"handles non-exponential numbers\", () => {\n    expect(expandExponentialNumberString(\"1100000000000000000000000000000000000000000000000000\")).toBe(\n      \"1100000000000000000000000000000000000000000000000000\",\n    );\n    expect(expandExponentialNumberString(\"\")).toBe(\"\");\n  });\n});\n\ndescribe(\"addLocalizedTrailingDecimalZeros\", () => {\n  function getLocalizedDecimalValue(value: string, trailingZeros: number): string {\n    const localizedValue = numberStringFormatter.localize(value);\n    const localizedZeroValue = numberStringFormatter.localize(\"0\");\n    return `${localizedValue}`.padEnd(localizedValue.length + trailingZeros, localizedZeroValue);\n  }\n\n  locales.forEach((locale) => {\n    it(`add back sanitized trailing decimal zero values - ${locale}`, () => {\n      numberStringFormatter.numberFormatOptions = {\n        locale,\n        // the group separator is different in arabic depending on the numberingSystem\n        numberingSystem: locale === \"ar\" ? \"arab\" : \"latn\",\n        useGrouping: true,\n      };\n\n      const stringWithTrailingZeros = \"123456.1000\";\n      const bigDecimalWithTrailingZeros =\n        \"1230000000000000000000000000000.00000000000000000000045000000000000000000000000\";\n      const negativeExponentialString = \"-10.021e10000\";\n\n      expect(\n        addLocalizedTrailingDecimalZeros(\n          numberStringFormatter.localize(stringWithTrailingZeros),\n          stringWithTrailingZeros,\n          numberStringFormatter,\n        ),\n      ).toBe(getLocalizedDecimalValue(stringWithTrailingZeros, 3));\n      expect(\n        addLocalizedTrailingDecimalZeros(\n          numberStringFormatter.localize(bigDecimalWithTrailingZeros),\n          bigDecimalWithTrailingZeros,\n          numberStringFormatter,\n        ),\n      ).toBe(getLocalizedDecimalValue(bigDecimalWithTrailingZeros, 24));\n      expect(\n        addLocalizedTrailingDecimalZeros(\n          numberStringFormatter.localize(negativeExponentialString),\n          negativeExponentialString,\n          numberStringFormatter,\n        ),\n      ).toBe(numberStringFormatter.localize(negativeExponentialString));\n    });\n\n    it(`returns same value if no trailing decimal zero value is removed - ${locale}`, () => {\n      numberStringFormatter.numberFormatOptions = {\n        locale,\n        // the group separator is different in arabic depending on the numberingSystem\n        numberingSystem: locale === \"ar\" ? \"arab\" : \"latn\",\n        useGrouping: true,\n      };\n      const localizedValue = numberStringFormatter.localize(\"0.001\");\n      expect(addLocalizedTrailingDecimalZeros(localizedValue, \"0.001\", numberStringFormatter)).toBe(localizedValue);\n    });\n  });\n});\n"]}