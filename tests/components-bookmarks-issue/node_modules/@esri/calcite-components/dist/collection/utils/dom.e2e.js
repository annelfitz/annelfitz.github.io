/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.6.0
 */
import { newE2EPage } from "@stencil/core/testing";
import { getHost, getRootNode, queryElementRoots } from "./dom";
const myButtonId = "my.id";
const myButtonClass = "my-class";
const insideHost = "Inside Host";
const outsideHost = "Outside Host";
const insideShadow = "Inside Shadow";
const componentTag = "test-component";
const insideHostHTML = `<button class="${myButtonClass}">${insideHost}</button>`;
const insideShadowHTML = `<div><button id="${myButtonId}">${insideShadow}</button></div>`;
const outsideHostHTML = `<span>Test</span><button id="${myButtonId}">${outsideHost}</button>`;
describe("queries", () => {
    let page;
    beforeEach(async () => {
        page = await newE2EPage({
            html: outsideHostHTML,
        });
        function setUpTestComponent({ insideHostHTML, componentTag, insideShadowHTML }) {
            class TestComponent extends HTMLElement {
                constructor() {
                    super();
                    const shadow = this.attachShadow({ mode: "open" });
                    shadow.innerHTML = insideShadowHTML;
                }
            }
            customElements.define(componentTag, TestComponent);
            const testComponent = document.createElement(componentTag);
            testComponent.innerHTML = insideHostHTML;
            document.body.appendChild(testComponent);
        }
        await page.addScriptTag({
            content: `
      ${getRootNode}
      ${getHost}
      ${queryElementRoots}
      ${setUpTestComponent}
      `,
        });
        await page.waitForFunction(() => window.queryElementRoots);
    });
    it("queryElementRoots: should query from inside host element", async () => {
        const text = await page.evaluate(({ insideHostHTML, componentTag, insideShadowHTML, myButtonClass, myButtonId, }) => {
            window.setUpTestComponent({
                insideHostHTML,
                componentTag,
                insideShadowHTML,
                myButtonClass,
                myButtonId,
            });
            const testComponent = document.querySelector("test-component");
            const queryEl = testComponent.shadowRoot.querySelector("div");
            const resultEl = window.queryElementRoots(queryEl, {
                selector: `button.${myButtonClass}`,
            });
            return resultEl?.textContent;
        }, { insideHostHTML, componentTag, insideShadowHTML, myButtonClass, myButtonId });
        expect(text).toBe(insideHost);
    });
    it("queryElementRoots: should query id from inside shadow element", async () => {
        const text = await page.evaluate(({ insideHostHTML, componentTag, insideShadowHTML, myButtonClass, myButtonId, }) => {
            window.setUpTestComponent({
                insideHostHTML,
                componentTag,
                insideShadowHTML,
                myButtonClass,
                myButtonId,
            });
            const testComponent = document.querySelector("test-component");
            const queryEl = testComponent.shadowRoot.querySelector("div");
            const resultEl = window.queryElementRoots(queryEl, {
                id: myButtonId,
            });
            return resultEl?.textContent;
        }, { insideHostHTML, componentTag, insideShadowHTML, myButtonClass, myButtonId });
        expect(text).toBe(insideShadow);
    });
    it("queryElementRoots: should query from outside host element", async () => {
        const text = await page.evaluate(({ insideHostHTML, componentTag, insideShadowHTML, myButtonClass, myButtonId, }) => {
            window.setUpTestComponent({
                insideHostHTML,
                componentTag,
                insideShadowHTML,
                myButtonClass,
                myButtonId,
            });
            const queryEl = document.body.querySelector("span");
            const resultEl = window.queryElementRoots(queryEl, { selector: "button" });
            return resultEl?.textContent;
        }, { insideHostHTML, componentTag, insideShadowHTML, myButtonClass, myButtonId });
        expect(text).toBe(outsideHost);
    });
    it("queryElementRoots: should query id from outside host element", async () => {
        const text = await page.evaluate(({ insideHostHTML, componentTag, insideShadowHTML, myButtonClass, myButtonId, }) => {
            window.setUpTestComponent({
                insideHostHTML,
                componentTag,
                insideShadowHTML,
                myButtonClass,
                myButtonId,
            });
            const queryEl = document.body.querySelector("span");
            const resultEl = window.queryElementRoots(queryEl, { id: myButtonId });
            return resultEl?.textContent;
        }, { insideHostHTML, componentTag, insideShadowHTML, myButtonClass, myButtonId });
        expect(text).toBe(outsideHost);
    });
});
//# sourceMappingURL=dom.e2e.js.map
