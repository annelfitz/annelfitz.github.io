{"version":3,"file":"time.spec.js","sourceRoot":"","sources":["../../../src/utils/time.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { formatTimePart, isValidTime, localizeTimeStringToParts, parseTimeString, toISOTimeString } from \"./time\";\n\ndescribe(\"formatTimePart\", () => {\n  it(\"returns decimals less than 1 with leading and trailing zeros to match the provided length\", () => {\n    expect(formatTimePart(0.3)).toEqual(\"3\");\n    expect(formatTimePart(0.3, 1)).toEqual(\"3\");\n    expect(formatTimePart(0.3, 2)).toEqual(\"30\");\n    expect(formatTimePart(0.3, 3)).toEqual(\"300\");\n    expect(formatTimePart(0.03)).toEqual(\"03\");\n    expect(formatTimePart(0.03, 2)).toEqual(\"03\");\n    expect(formatTimePart(0.03, 3)).toEqual(\"030\");\n    expect(formatTimePart(0.003)).toEqual(\"003\");\n    expect(formatTimePart(0.003, 3)).toEqual(\"003\");\n  });\n  it(\"returns hour, minute and second values between 0 and 10 with leading zeros\", () => {\n    expect(formatTimePart(0)).toEqual(\"00\");\n    expect(formatTimePart(1)).toEqual(\"01\");\n    expect(formatTimePart(2)).toEqual(\"02\");\n    expect(formatTimePart(3)).toEqual(\"03\");\n    expect(formatTimePart(4)).toEqual(\"04\");\n    expect(formatTimePart(5)).toEqual(\"05\");\n    expect(formatTimePart(6)).toEqual(\"06\");\n    expect(formatTimePart(7)).toEqual(\"07\");\n    expect(formatTimePart(8)).toEqual(\"08\");\n    expect(formatTimePart(9)).toEqual(\"09\");\n  });\n});\n\ndescribe(\"isValidTime\", () => {\n  it(\"returns true when time string contains fractional seconds\", () => {\n    expect(isValidTime(\"12:30:45.0\")).toBe(true);\n    expect(isValidTime(\"12:30:45.01\")).toBe(true);\n    expect(isValidTime(\"12:30:45.001\")).toBe(true);\n    expect(isValidTime(\"12:30:45.1\")).toBe(true);\n    expect(isValidTime(\"12:30:45.12\")).toBe(true);\n    expect(isValidTime(\"12:30:45.123\")).toBe(true);\n    expect(isValidTime(\"12:30:45.1234\")).toBe(true);\n    expect(isValidTime(\"12:30:45.12345\")).toBe(true);\n    expect(isValidTime(\"12:30:45.123456\")).toBe(true);\n    expect(isValidTime(\"12:30:45.1234567\")).toBe(true);\n    expect(isValidTime(\"12:30:45.12345678\")).toBe(true);\n    expect(isValidTime(\"12:30:45.123456789\")).toBe(true);\n  });\n});\n\ndescribe(\"localizeTimeStringToParts\", () => {\n  it(\"returns localized decimal separator and fractional second value\", () => {\n    expect(localizeTimeStringToParts({ value: \"06:45:30.12123\", locale: \"fr\" })).toEqual({\n      localizedHour: \"06\",\n      localizedHourSuffix: \":\",\n      localizedMinute: \"45\",\n      localizedMinuteSuffix: \":\",\n      localizedSecond: \"30\",\n      localizedDecimalSeparator: \",\",\n      localizedFractionalSecond: \"12123\",\n      localizedSecondSuffix: null,\n      localizedMeridiem: null,\n    });\n\n    expect(localizeTimeStringToParts({ value: \"06:45:30\", locale: \"fr\" })).toEqual({\n      localizedHour: \"06\",\n      localizedHourSuffix: \":\",\n      localizedMinute: \"45\",\n      localizedMinuteSuffix: \":\",\n      localizedSecond: \"30\",\n      localizedDecimalSeparator: \",\",\n      localizedFractionalSecond: null,\n      localizedSecondSuffix: null,\n      localizedMeridiem: null,\n    });\n\n    expect(localizeTimeStringToParts({ value: \"06:45:30.12123\", locale: \"da\" })).toEqual({\n      localizedHour: \"06\",\n      localizedHourSuffix: \".\",\n      localizedMinute: \"45\",\n      localizedMinuteSuffix: \".\",\n      localizedSecond: \"30\",\n      localizedDecimalSeparator: \",\",\n      localizedFractionalSecond: \"12123\",\n      localizedSecondSuffix: null,\n      localizedMeridiem: null,\n    });\n  });\n\n  it(\"returns fractional second value with padded zeros when necessary\", () => {\n    expect(localizeTimeStringToParts({ value: \"06:45:30.04\", locale: \"en\" })).toEqual({\n      localizedHour: \"06\",\n      localizedHourSuffix: \":\",\n      localizedMinute: \"45\",\n      localizedMinuteSuffix: \":\",\n      localizedSecond: \"30\",\n      localizedDecimalSeparator: \".\",\n      localizedFractionalSecond: \"04\",\n      localizedSecondSuffix: null,\n      localizedMeridiem: \"AM\",\n    });\n    expect(localizeTimeStringToParts({ value: \"06:45:30.003\", locale: \"en\" })).toEqual({\n      localizedHour: \"06\",\n      localizedHourSuffix: \":\",\n      localizedMinute: \"45\",\n      localizedMinuteSuffix: \":\",\n      localizedSecond: \"30\",\n      localizedDecimalSeparator: \".\",\n      localizedFractionalSecond: \"003\",\n      localizedSecondSuffix: null,\n      localizedMeridiem: \"AM\",\n    });\n    expect(localizeTimeStringToParts({ value: \"06:45:30.007\", locale: \"ar\", numberingSystem: \"arab\" })).toEqual({\n      localizedHour: \"٠٦\",\n      localizedHourSuffix: \":\",\n      localizedMinute: \"٤٥\",\n      localizedMinuteSuffix: \":\",\n      localizedSecond: \"٣٠\",\n      localizedDecimalSeparator: \"٫\",\n      localizedFractionalSecond: \"٠٠٧\",\n      localizedSecondSuffix: null,\n      localizedMeridiem: \"ص\",\n    });\n  });\n});\n\ndescribe(\"parseTimeString\", () => {\n  it(\"returns literal hour, minute, second and fractional second values from given string\", () => {\n    expect(parseTimeString(\"12:30:45.0\")).toEqual({\n      hour: \"12\",\n      minute: \"30\",\n      second: \"45\",\n      fractionalSecond: \"0\",\n    });\n    expect(parseTimeString(\"12:30:45.01\")).toEqual({\n      hour: \"12\",\n      minute: \"30\",\n      second: \"45\",\n      fractionalSecond: \"01\",\n    });\n    expect(parseTimeString(\"12:30:45.001\")).toEqual({\n      hour: \"12\",\n      minute: \"30\",\n      second: \"45\",\n      fractionalSecond: \"001\",\n    });\n    expect(parseTimeString(\"12:30:45.0001\")).toEqual({\n      hour: \"12\",\n      minute: \"30\",\n      second: \"45\",\n      fractionalSecond: \"0001\",\n    });\n    expect(parseTimeString(\"12:30:45.0049\")).toEqual({\n      hour: \"12\",\n      minute: \"30\",\n      second: \"45\",\n      fractionalSecond: \"0049\",\n    });\n    expect(parseTimeString(\"12:30:45.1\")).toEqual({\n      hour: \"12\",\n      minute: \"30\",\n      second: \"45\",\n      fractionalSecond: \"1\",\n    });\n    expect(parseTimeString(\"12:30:45.12\")).toEqual({\n      hour: \"12\",\n      minute: \"30\",\n      second: \"45\",\n      fractionalSecond: \"12\",\n    });\n    expect(parseTimeString(\"12:30:45.123\")).toEqual({\n      hour: \"12\",\n      minute: \"30\",\n      second: \"45\",\n      fractionalSecond: \"123\",\n    });\n    expect(parseTimeString(\"12:30:45.1234\")).toEqual({\n      hour: \"12\",\n      minute: \"30\",\n      second: \"45\",\n      fractionalSecond: \"1234\",\n    });\n    expect(parseTimeString(\"12:30:45.12345\")).toEqual({\n      hour: \"12\",\n      minute: \"30\",\n      second: \"45\",\n      fractionalSecond: \"12345\",\n    });\n    expect(parseTimeString(\"12:30:45.12345.34\")).toEqual({\n      hour: null,\n      minute: null,\n      second: null,\n      fractionalSecond: null,\n    });\n  });\n\n  it(\"returns null fractionalSecond when second is a whole number\", () => {\n    expect(parseTimeString(\"12:30:45\")).toEqual({ fractionalSecond: null, hour: \"12\", minute: \"30\", second: \"45\" });\n  });\n});\n\ndescribe(\"toISOTimeString\", () => {\n  it(\"returns hh:mm value when includeSeconds is false\", () => {\n    const fullTime = toISOTimeString(\"1:2:3\", false);\n    const partialTime = toISOTimeString(\"4:5\", false);\n\n    expect(fullTime).toBe(\"01:02\");\n    expect(partialTime).toBe(\"04:05\");\n  });\n\n  it(\"returns hh:mm:ss value when includeSeconds is true\", () => {\n    const fullTime = toISOTimeString(\"1:2:3\", true);\n    const partialTime = toISOTimeString(\"3:4\", true);\n\n    expect(fullTime).toBe(\"01:02:03\");\n    expect(partialTime).toBe(\"03:04:00\");\n  });\n\n  it(\"returns empty value with invalid time\", () => {\n    const result = toISOTimeString(\"25:34\");\n    expect(result).toBe(\"\");\n  });\n});\n"]}