{"version":3,"file":"number.js","sourceRoot":"","sources":["../../../src/utils/number.ts"],"names":[],"mappings":"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","sourcesContent":["import { numberKeys } from \"./key\";\nimport { NumberStringFormat } from \"./locale\";\n\nconst unnecessaryDecimal = new RegExp(`\\\\${\".\"}(0+)?$`);\nconst trailingZeros = new RegExp(\"0+$\");\n\n// adopted from https://stackoverflow.com/a/66939244\nexport class BigDecimal {\n  value: bigint;\n\n  // BigInt(\"-0\").toString() === \"0\" which removes the minus sign when typing numbers like -0.1\n  isNegative: boolean;\n\n  // Configuration: constants\n  static DECIMALS = 100; // number of decimals on all instances\n\n  static ROUNDED = true; // numbers are truncated (false) or rounded (true)\n\n  static SHIFT = BigInt(\"1\" + \"0\".repeat(BigDecimal.DECIMALS)); // derived constant\n\n  constructor(input: string | BigDecimal) {\n    if (input instanceof BigDecimal) {\n      return input;\n    }\n    const [integers, decimals] = expandExponentialNumberString(input).split(\".\").concat(\"\");\n    this.value =\n      BigInt(integers + decimals.padEnd(BigDecimal.DECIMALS, \"0\").slice(0, BigDecimal.DECIMALS)) +\n      BigInt(BigDecimal.ROUNDED && decimals[BigDecimal.DECIMALS] >= \"5\");\n\n    this.isNegative = input.charAt(0) === \"-\";\n  }\n\n  static _divRound = (dividend: bigint, divisor: bigint): BigDecimal =>\n    BigDecimal.fromBigInt(\n      dividend / divisor + (BigDecimal.ROUNDED ? ((dividend * BigInt(2)) / divisor) % BigInt(2) : BigInt(0)),\n    );\n\n  static fromBigInt = (bigint: bigint): BigDecimal =>\n    Object.assign(Object.create(BigDecimal.prototype), { value: bigint, isNegative: bigint < BigInt(0) });\n\n  getIntegersAndDecimals(): { integers: string; decimals: string } {\n    const s = this.value\n      .toString()\n      .replace(\"-\", \"\")\n      .padStart(BigDecimal.DECIMALS + 1, \"0\");\n    const integers = s.slice(0, -BigDecimal.DECIMALS);\n    const decimals = s.slice(-BigDecimal.DECIMALS).replace(trailingZeros, \"\");\n    return { integers, decimals };\n  }\n\n  toString(): string {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    return `${this.isNegative ? \"-\" : \"\"}${integers}${decimals.length ? \".\" + decimals : \"\"}`;\n  }\n\n  formatToParts(formatter: NumberStringFormat): Intl.NumberFormatPart[] {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    const parts = formatter.numberFormatter.formatToParts(BigInt(integers));\n    this.isNegative && parts.unshift({ type: \"minusSign\", value: formatter.minusSign });\n\n    if (decimals.length) {\n      parts.push({ type: \"decimal\", value: formatter.decimal });\n      decimals.split(\"\").forEach((char: string) => parts.push({ type: \"fraction\", value: char }));\n    }\n\n    return parts;\n  }\n\n  format(formatter: NumberStringFormat): string {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    const integersFormatted = `${this.isNegative ? formatter.minusSign : \"\"}${formatter.numberFormatter.format(\n      BigInt(integers),\n    )}`;\n    const decimalsFormatted = decimals.length\n      ? `${formatter.decimal}${decimals\n          .split(\"\")\n          .map((char: string) => formatter.numberFormatter.format(Number(char)))\n          .join(\"\")}`\n      : \"\";\n    return `${integersFormatted}${decimalsFormatted}`;\n  }\n\n  add(n: string): BigDecimal {\n    return BigDecimal.fromBigInt(this.value + new BigDecimal(n).value);\n  }\n\n  subtract(n: string): BigDecimal {\n    return BigDecimal.fromBigInt(this.value - new BigDecimal(n).value);\n  }\n\n  multiply(n: string): BigDecimal {\n    return BigDecimal._divRound(this.value * new BigDecimal(n).value, BigDecimal.SHIFT);\n  }\n\n  divide(n: string): BigDecimal {\n    return BigDecimal._divRound(this.value * BigDecimal.SHIFT, new BigDecimal(n).value);\n  }\n}\n\nexport function isValidNumber(numberString: string): boolean {\n  return !(!numberString || isNaN(Number(numberString)));\n}\n\nexport function parseNumberString(numberString?: string): string {\n  if (!numberString || !stringContainsNumbers(numberString)) {\n    return \"\";\n  }\n\n  return sanitizeExponentialNumberString(numberString, (nonExpoNumString: string): string => {\n    let containsDecimal = false;\n    const result = nonExpoNumString\n      .split(\"\")\n      .filter((value, i) => {\n        if (value.match(/\\./g) && !containsDecimal) {\n          containsDecimal = true;\n          return true;\n        }\n        if (value.match(/\\-/g) && i === 0) {\n          return true;\n        }\n        return numberKeys.includes(value);\n      })\n      .join(\"\");\n    return isValidNumber(result) ? new BigDecimal(result).toString() : \"\";\n  });\n}\n\n// regex for number sanitization\nconst allLeadingZerosOptionallyNegative = /^([-0])0+(?=\\d)/;\nconst decimalOnlyAtEndOfString = /(?!^\\.)\\.$/;\nconst allHyphensExceptTheStart = /(?!^-)-/g;\nconst isNegativeDecimalOnlyZeros = /^-\\b0\\b\\.?0*$/;\nconst hasTrailingDecimalZeros = /0*$/;\n\nexport const sanitizeNumberString = (numberString: string): string =>\n  sanitizeExponentialNumberString(numberString, (nonExpoNumString) => {\n    const sanitizedValue = nonExpoNumString\n      .replace(allHyphensExceptTheStart, \"\")\n      .replace(decimalOnlyAtEndOfString, \"\")\n      .replace(allLeadingZerosOptionallyNegative, \"$1\");\n    return isValidNumber(sanitizedValue)\n      ? isNegativeDecimalOnlyZeros.test(sanitizedValue)\n        ? sanitizedValue\n        : getBigDecimalAsString(sanitizedValue)\n      : nonExpoNumString;\n  });\n\nexport function getBigDecimalAsString(sanitizedValue: string): string {\n  const sanitizedValueDecimals = sanitizedValue.split(\".\")[1];\n  const value = new BigDecimal(sanitizedValue).toString();\n  const [bigDecimalValueInteger, bigDecimalValueDecimals] = value.split(\".\");\n\n  return sanitizedValueDecimals && bigDecimalValueDecimals !== sanitizedValueDecimals\n    ? `${bigDecimalValueInteger}.${sanitizedValueDecimals}`\n    : value;\n}\n\nexport function sanitizeExponentialNumberString(numberString: string, func: (s: string) => string): string {\n  if (!numberString) {\n    return numberString;\n  }\n\n  const firstE = numberString.toLowerCase().indexOf(\"e\") + 1;\n\n  if (!firstE) {\n    return func(numberString);\n  }\n\n  return numberString\n    .replace(/[eE]*$/g, \"\")\n    .substring(0, firstE)\n    .concat(numberString.slice(firstE).replace(/[eE]/g, \"\"))\n    .split(/[eE]/)\n    .map((section, i) => (i === 1 ? func(section.replace(/\\./g, \"\")) : func(section)))\n    .join(\"e\")\n    .replace(/^e/, \"1e\");\n}\n\n/**\n * Converts an exponential notation numberString into decimal notation.\n * BigInt doesn't support exponential notation, so this is required to maintain precision\n *\n * @param {string} numberString - pre-validated exponential or decimal number\n * @returns {string} numberString in decimal notation\n */\nexport function expandExponentialNumberString(numberString: string): string {\n  const exponentialParts = numberString.split(/[eE]/);\n  if (exponentialParts.length === 1) {\n    return numberString;\n  }\n\n  const number = +numberString;\n  if (Number.isSafeInteger(number)) {\n    return `${number}`;\n  }\n\n  const isNegative = numberString.charAt(0) === \"-\";\n  const magnitude = +exponentialParts[1];\n  const decimalParts = exponentialParts[0].split(\".\");\n  const integers = (isNegative ? decimalParts[0].substring(1) : decimalParts[0]) || \"\";\n  const decimals = decimalParts[1] || \"\";\n\n  const shiftDecimalLeft = (integers: string, magnitude: number): string => {\n    const magnitudeDelta = Math.abs(magnitude) - integers.length;\n    const leftPaddedZeros = magnitudeDelta > 0 ? `${\"0\".repeat(magnitudeDelta)}${integers}` : integers;\n    const shiftedDecimal = `${leftPaddedZeros.slice(0, magnitude)}${\".\"}${leftPaddedZeros.slice(magnitude)}`;\n    return shiftedDecimal;\n  };\n\n  const shiftDecimalRight = (decimals: string, magnitude: number): string => {\n    const rightPaddedZeros =\n      magnitude > decimals.length ? `${decimals}${\"0\".repeat(magnitude - decimals.length)}` : decimals;\n    const shiftedDecimal = `${rightPaddedZeros.slice(0, magnitude)}${\".\"}${rightPaddedZeros.slice(magnitude)}`;\n    return shiftedDecimal;\n  };\n\n  const expandedNumberString =\n    magnitude > 0\n      ? `${integers}${shiftDecimalRight(decimals, magnitude)}`\n      : `${shiftDecimalLeft(integers, magnitude)}${decimals}`;\n\n  return `${isNegative ? \"-\" : \"\"}${expandedNumberString.charAt(0) === \".\" ? \"0\" : \"\"}${expandedNumberString\n    .replace(unnecessaryDecimal, \"\")\n    .replace(allLeadingZerosOptionallyNegative, \"\")}`;\n}\n\nfunction stringContainsNumbers(string: string): boolean {\n  return numberKeys.some((number) => string.includes(number));\n}\n\n/**\n * Adds localized trailing decimals zero values to the number string.\n * BigInt conversion to string removes the trailing decimal zero values (Ex: 1.000 is returned as 1). This method helps adding them back.\n *\n * @param {string} localizedValue - localized number string value\n * @param {string} value - current value in the input field\n * @param {NumberStringFormat} formatter - numberStringFormatter instance to localize the number value\n * @returns {string} localized number string value\n */\nexport function addLocalizedTrailingDecimalZeros(\n  localizedValue: string,\n  value: string,\n  formatter: NumberStringFormat,\n): string {\n  const decimals = value.split(\".\")[1];\n  if (decimals) {\n    const trailingDecimalZeros = decimals.match(hasTrailingDecimalZeros)[0];\n    if (\n      trailingDecimalZeros &&\n      formatter.delocalize(localizedValue).length !== value.length &&\n      decimals.indexOf(\"e\") === -1\n    ) {\n      const decimalSeparator = formatter.decimal;\n      localizedValue = !localizedValue.includes(decimalSeparator)\n        ? `${localizedValue}${decimalSeparator}`\n        : localizedValue;\n      return localizedValue.padEnd(localizedValue.length + trailingDecimalZeros.length, formatter.localize(\"0\"));\n    }\n  }\n  return localizedValue;\n}\n"]}