{"version":3,"file":"component.spec.js","sourceRoot":"","sources":["../../../src/utils/component.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,YAAY,EAAE,MAAM,aAAa,CAAC;AAC7D,OAAO,EAAE,IAAI,EAAE,MAAM,0BAA0B,CAAC;AAGhD,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC7C,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,IAAI,wBAA0C,CAAC;IAC/C,IAAI,aAA0B,CAAC;IAE/B,UAAU,CAAC,GAAG,EAAE;QACd,QAAQ,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAA,qCAAqC,CAAC;QACpE,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAc,gBAAgB,CAAC,CAAC;QAEtE,MAAM,WAAW,GAAG,UAAU,CAAC,qBAAqB,CAAC;QACrD,wBAAwB,GAAG,IAAI;aAC5B,KAAK,CAAC,UAAU,EAAE,uBAAuB,CAAC;aAC1C,kBAAkB,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE,CAAC,wBAAwB,CAAC,WAAW,EAAE,CAAC,CAAC;IAExD,EAAE,CAAC,wEAAwE,EAAE,KAAK,IAAI,EAAE;QACtF,MAAM,oBAAoB,GAAG,CAAE,aAAoC,CAAC,gBAAgB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;QAElG,MAAM,OAAO,GAAG,gBAAgB,CAAC,aAAa,CAAC,CAAC;QAChD,MAAM,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAExC,MAAM,OAAO,CAAC;QACd,MAAM,CAAC,oBAAoB,CAAC,CAAC,gBAAgB,EAAE,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gFAAgF,EAAE,KAAK,IAAI,EAAE;QAC9F,MAAM,CAAC,wBAAwB,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAExD,MAAM,OAAO,GAAG,gBAAgB,CAAC,aAAa,CAAC,CAAC;QAChD,MAAM,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAExC,MAAM,OAAO,CAAC;QACd,MAAM,CAAC,wBAAwB,CAAC,CAAC,gBAAgB,EAAE,CAAC;IACtD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { componentOnReady, getIconScale } from \"./component\";\nimport { html } from \"../../support/formatting\";\nimport { HTMLStencilElement } from \"@stencil/core/internal\";\n\ndescribe(\"getIconScale\", () => {\n  it('should return \"m\" when input is \"l\"', () => {\n    expect(getIconScale(\"l\")).toBe(\"m\");\n  });\n\n  it('should return \"s\" when input is not \"l\"', () => {\n    expect(getIconScale(\"m\")).toBe(\"s\");\n    expect(getIconScale(\"s\")).toBe(\"s\");\n  });\n});\n\ndescribe(\"componentOnReady\", () => {\n  let requestAnimationFrameSpy: jest.SpyInstance;\n  let fakeComponent: HTMLElement;\n\n  beforeEach(() => {\n    document.body.innerHTML = html` <fake-component></fake-component> `;\n    fakeComponent = document.querySelector<HTMLElement>(\"fake-component\");\n\n    const originalRaf = globalThis.requestAnimationFrame;\n    requestAnimationFrameSpy = jest\n      .spyOn(globalThis, \"requestAnimationFrame\")\n      .mockImplementation((callback) => originalRaf(callback));\n  });\n\n  afterEach(() => requestAnimationFrameSpy.mockRestore());\n\n  it(\"should call componentOnReady if it exists on the element (lazy-loaded)\", async () => {\n    const componentOnReadyStub = ((fakeComponent as HTMLStencilElement).componentOnReady = jest.fn());\n\n    const promise = componentOnReady(fakeComponent);\n    expect(promise).toBeInstanceOf(Promise);\n\n    await promise;\n    expect(componentOnReadyStub).toHaveBeenCalled();\n  });\n\n  it(\"waits for an animation frame if componentOnReady does not exist on the element\", async () => {\n    expect(requestAnimationFrameSpy).not.toHaveBeenCalled();\n\n    const promise = componentOnReady(fakeComponent);\n    expect(promise).toBeInstanceOf(Promise);\n\n    await promise;\n    expect(requestAnimationFrameSpy).toHaveBeenCalled();\n  });\n});\n"]}