/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.6.0
 */
import { activateFocusTrap, connectFocusTrap, deactivateFocusTrap, updateFocusTrapElements, } from "./focusTrapComponent";
import { JSDOM } from "jsdom";
describe("focusTrapComponent", () => {
    it("focusTrapComponent lifecycle", () => {
        const fakeComponent = {};
        fakeComponent.el = document.createElement("div");
        connectFocusTrap(fakeComponent);
        expect(fakeComponent.el).toBeDefined();
        expect(fakeComponent.focusTrap.active).toBe(false);
        const activateSpy = jest.fn();
        fakeComponent.focusTrap.activate = activateSpy;
        const deactivateSpy = jest.fn();
        fakeComponent.focusTrap.deactivate = deactivateSpy;
        const updateSpy = jest.fn();
        fakeComponent.focusTrap.updateContainerElements = updateSpy;
        activateFocusTrap(fakeComponent);
        expect(activateSpy).toHaveBeenCalledTimes(1);
        updateFocusTrapElements(fakeComponent);
        expect(updateSpy).toHaveBeenCalledTimes(1);
        deactivateFocusTrap(fakeComponent);
        expect(deactivateSpy).toHaveBeenCalledTimes(1);
    });
    it("supports passing options", () => {
        const fakeComponent = {};
        fakeComponent.el = document.createElement("div");
        connectFocusTrap(fakeComponent);
        const activateSpy = jest.fn();
        fakeComponent.focusTrap.activate = activateSpy;
        const deactivateSpy = jest.fn();
        fakeComponent.focusTrap.deactivate = deactivateSpy;
        const fakeActivateOptions = {};
        activateFocusTrap(fakeComponent, fakeActivateOptions);
        expect(activateSpy).toHaveBeenCalledWith(fakeActivateOptions);
        const fakeDeactivateOptions = {};
        deactivateFocusTrap(fakeComponent, fakeDeactivateOptions);
        expect(deactivateSpy).toHaveBeenCalledWith(fakeDeactivateOptions);
    });
    describe("configuration", () => {
        beforeEach(() => jest.resetModules());
        it("supports custom global trap stack", async () => {
            const customFocusTrapStack = [];
            // we clobber Stencil's custom Mock document implementation
            const { window: win } = new JSDOM();
            // make window references use JSDOM (which is a subset, hence the type cast)
            window = win;
            globalThis.MutationObserver = window.MutationObserver; // needed for focus-trap
            globalThis.calciteConfig = {
                focusTrapStack: customFocusTrapStack,
            };
            const focusTrap = await import("focus-trap");
            const createFocusTrapSpy = jest.spyOn(focusTrap, "createFocusTrap");
            const focusTrapComponent = await import("./focusTrapComponent");
            const fakeComponent = {};
            fakeComponent.el = win.document.createElement("div");
            focusTrapComponent.connectFocusTrap(fakeComponent);
            expect(createFocusTrapSpy).toHaveBeenLastCalledWith(expect.anything(), expect.objectContaining({
                trapStack: customFocusTrapStack,
            }));
            expect(customFocusTrapStack).toHaveLength(0);
            focusTrapComponent.activateFocusTrap(fakeComponent);
            expect(customFocusTrapStack).toHaveLength(1);
            focusTrapComponent.deactivateFocusTrap(fakeComponent);
            expect(customFocusTrapStack).toHaveLength(0);
            focusTrapComponent.activateFocusTrap(fakeComponent);
            expect(customFocusTrapStack).toHaveLength(1);
        });
    });
});
//# sourceMappingURL=focusTrapComponent.spec.js.map
