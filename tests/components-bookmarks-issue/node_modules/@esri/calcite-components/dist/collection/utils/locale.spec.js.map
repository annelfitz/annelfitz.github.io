{"version":3,"file":"locale.spec.js","sourceRoot":"","sources":["../../../src/utils/locale.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  dateTimeFormatCache,\n  defaultLocale,\n  defaultNumberingSystem,\n  getDateTimeFormat,\n  getSupportedLocale,\n  locales,\n  numberingSystems,\n  NumberStringFormatOptions,\n  numberStringFormatter,\n} from \"./locale\";\n\ndescribe(\"NumberStringFormat\", () => {\n  it(\"NumberFormat formatter is not initialized until necessary\", () => {\n    const num = \"123.456\";\n\n    // should still work with options set\n    expect(numberStringFormatter.numberFormatOptions).toBeUndefined();\n    expect(numberStringFormatter.delocalize(numberStringFormatter.localize(num))).toBe(num);\n\n    // adding the default locale/numberingSystem should\n    // not create the formatter\n    numberStringFormatter.numberFormatOptions = {\n      locale: defaultLocale,\n      numberingSystem: defaultNumberingSystem,\n    };\n    expect(numberStringFormatter.numberFormatter).toBeUndefined();\n    expect(numberStringFormatter.numberFormatOptions).toBeUndefined();\n\n    // setting a non-locale/numberingSystem option creates the formatter\n    // with the default locale/numberingSystem values\n    numberStringFormatter.numberFormatOptions = {\n      useGrouping: true,\n    } as NumberStringFormatOptions;\n\n    expect(numberStringFormatter.numberFormatter).toBeDefined();\n    expect(numberStringFormatter.numberFormatOptions.numberingSystem).toBe(defaultNumberingSystem);\n    expect(numberStringFormatter.numberFormatOptions.locale).toBe(defaultLocale);\n  });\n\n  describe(\"locales\", () => {\n    locales.forEach((locale) => {\n      it(`integers localize and delocalize in \"${locale}\"`, () => {\n        const numberString = \"555\";\n        numberStringFormatter.numberFormatOptions = {\n          locale,\n          numberingSystem: \"latn\",\n          useGrouping: false,\n        };\n        const localizedNumberString = numberStringFormatter.localize(numberString);\n        const delocalizedNumberString = numberStringFormatter.delocalize(localizedNumberString);\n        expect(delocalizedNumberString).toBe(numberString);\n      });\n\n      it(`negative numbers localize and delocalize in \"${locale}\"`, () => {\n        const numberString = \"-123\";\n        numberStringFormatter.numberFormatOptions = {\n          locale,\n          numberingSystem: \"latn\",\n          useGrouping: false,\n        };\n        const localizedNumberString = numberStringFormatter.localize(numberString);\n        const delocalizedNumberString = numberStringFormatter.delocalize(localizedNumberString);\n        expect(delocalizedNumberString).toBe(numberString);\n      });\n\n      it(`locale: floating point numbers localize and delocalize in \"${locale}\"`, () => {\n        const numberString = \"4.321\";\n        numberStringFormatter.numberFormatOptions = {\n          locale,\n          numberingSystem: \"latn\",\n          useGrouping: false,\n        };\n        const localizedNumberString = numberStringFormatter.localize(numberString);\n        const delocalizedNumberString = numberStringFormatter.delocalize(localizedNumberString);\n        expect(delocalizedNumberString).toBe(numberString);\n      });\n\n      it(`exponential numbers localize and delocalize in \"${locale}\"`, () => {\n        const numberString = \"2.5e-3\";\n        numberStringFormatter.numberFormatOptions = {\n          locale,\n          numberingSystem: \"latn\",\n          useGrouping: false,\n        };\n        const localizedNumberString = numberStringFormatter.localize(numberString);\n        const delocalizedNumberString = numberStringFormatter.delocalize(localizedNumberString);\n        expect(delocalizedNumberString).toBe(numberString);\n      });\n\n      it(`numbers with group separators localize and delocalize in \"${locale}\"`, () => {\n        const numberString = \"1234567890\";\n        numberStringFormatter.numberFormatOptions = {\n          locale,\n          // the group separator is different in arabic depending on the numberingSystem\n          numberingSystem: locale === \"ar\" ? \"arab\" : \"latn\",\n          useGrouping: true,\n        };\n        const localizedNumberString = numberStringFormatter.localize(numberString);\n        const delocalizedNumberString = numberStringFormatter.delocalize(localizedNumberString);\n        expect(delocalizedNumberString).toBe(numberString);\n      });\n\n      it(`floating point numbers with group separators localize and delocalize in \"${locale}\"`, () => {\n        const numberString = \"12345678.0123456789\";\n        numberStringFormatter.numberFormatOptions = {\n          locale,\n          // the group separator is different in arabic depending on the numberingSystem\n          numberingSystem: locale === \"ar\" ? \"arab\" : \"latn\",\n          useGrouping: true,\n        };\n        const localizedNumberString = numberStringFormatter.localize(numberString);\n        const delocalizedNumberString = numberStringFormatter.delocalize(localizedNumberString);\n        expect(delocalizedNumberString).toBe(numberString);\n      });\n    });\n  });\n\n  describe(\"numberingSystems\", () => {\n    numberingSystems.forEach((numberingSystem) => {\n      const numberString = \"0.0123456789\";\n      it(`floating point numbers with group separators localize and delocalize in \"${numberingSystem}\"`, () => {\n        numberStringFormatter.numberFormatOptions = {\n          locale: numberingSystem === \"arab\" ? \"ar\" : \"en\",\n          numberingSystem,\n          useGrouping: true,\n        };\n        const localizedNumberString = numberStringFormatter.localize(numberString);\n        const delocalizedNumberString = numberStringFormatter.delocalize(localizedNumberString);\n        expect(delocalizedNumberString).toBe(numberString);\n      });\n    });\n  });\n});\n\ndescribe(\"getDateTimeFormat()\", () => {\n  beforeEach(() => dateTimeFormatCache?.clear());\n\n  it(\"generates an instance of DateTimeFormat by locale\", () => {\n    const enDateTimeFormat = getDateTimeFormat(\"en\");\n    expect(enDateTimeFormat).toBeInstanceOf(Intl.DateTimeFormat);\n    expect(enDateTimeFormat.resolvedOptions().locale).toBe(\"en\");\n\n    const esDateTimeFormat = getDateTimeFormat(\"es\");\n    expect(esDateTimeFormat).toBeInstanceOf(Intl.DateTimeFormat);\n    expect(esDateTimeFormat.resolvedOptions().locale).toBe(\"es\");\n  });\n\n  it(\"supports passing options\", () => {\n    const options: Intl.DateTimeFormatOptions = { dateStyle: \"full\", numberingSystem: \"latn\" }; // using a subset and assuming other props will work the same\n    const enDateTimeFormat = getDateTimeFormat(\"en\", options);\n\n    for (const [key, value] of Object.entries(options)) {\n      expect(enDateTimeFormat.resolvedOptions()[key]).toBe(value);\n    }\n  });\n\n  it(\"returns the same instance when given the same parameters\", () => {\n    const simpleEnDateTimeFormat = getDateTimeFormat(\"en\");\n\n    expect(simpleEnDateTimeFormat).toBe(getDateTimeFormat(\"en\"));\n    expect(dateTimeFormatCache.size).toBe(1);\n\n    const options: Intl.DateTimeFormatOptions = { dateStyle: \"full\" };\n    const customizedEnDateTimeFormat = getDateTimeFormat(\"en\", options);\n\n    expect(customizedEnDateTimeFormat).toBe(getDateTimeFormat(\"en\", options));\n    expect(simpleEnDateTimeFormat).not.toBe(customizedEnDateTimeFormat);\n    expect(dateTimeFormatCache.size).toBe(2);\n\n    const simpleEsDateTimeFormat = getDateTimeFormat(\"es\");\n\n    expect(simpleEsDateTimeFormat).toBe(getDateTimeFormat(\"es\"));\n    expect(simpleEsDateTimeFormat).not.toBe(simpleEnDateTimeFormat);\n    expect(dateTimeFormatCache.size).toBe(1);\n\n    const customizedEsDateTimeFormat = getDateTimeFormat(\"es\", options);\n\n    expect(customizedEsDateTimeFormat).toBe(getDateTimeFormat(\"es\", options));\n    expect(simpleEsDateTimeFormat).not.toBe(customizedEsDateTimeFormat);\n    expect(dateTimeFormatCache.size).toBe(2);\n  });\n});\n\ndescribe(\"getSupportedLocale\", () => {\n  function assertAllContexts(locale: string, expectedLocale: string): void {\n    expect(getSupportedLocale(locale, \"cldr\")).toBe(expectedLocale);\n    expect(getSupportedLocale(locale, \"t9n\")).toBe(expectedLocale);\n  }\n\n  it(\"returns `en` if there is no locale\", () => {\n    assertAllContexts(null, \"en\");\n  });\n\n  it(\"falls back to `en` if the language tag or language + region tag isn't supported\", () => {\n    assertAllContexts(\"zz\", \"en\");\n    assertAllContexts(\"zz-ZZ\", \"en\");\n  });\n\n  it(\"falls back to the language tag if the language + region tag isn't supported\", () => {\n    assertAllContexts(\"es-AR\", \"es\");\n    assertAllContexts(\"es-AR\", \"es\");\n  });\n\n  it(\"matches locale with subregion if supported\", () => {\n    // using pt-PT since it is supported in both cldr and t9n locale lists\n    assertAllContexts(\"pt-PT\", \"pt-PT\");\n  });\n\n  it(\"matches regardless of casing\", () => {\n    assertAllContexts(\"pt-pt\", \"pt-PT\");\n    assertAllContexts(\"PT-PT\", \"pt-PT\");\n\n    assertAllContexts(\"es-ar\", \"es\");\n    assertAllContexts(\"ES-AR\", \"es\");\n  });\n\n  describe(\"locale mappings\", () => {\n    it(\"maps `nb` to `no`\", () => {\n      assertAllContexts(\"nb\", \"no\");\n    });\n\n    it(\"maps `zh` to `zh-CN`\", () => {\n      assertAllContexts(\"zh\", \"zh-CN\");\n    });\n\n    it(\"maps `pt` to `pt-BR` with t9n context\", () => {\n      expect(getSupportedLocale(\"pt\", \"t9n\")).toBe(\"pt-BR\");\n      expect(getSupportedLocale(\"pt\", \"cldr\")).toBe(\"pt\");\n    });\n  });\n});\n"]}