{"version":3,"file":"filter.js","sourceRoot":"","sources":["../../../src/utils/filter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE,MAAM,WAAW,CAAC;AAEhD,MAAM,CAAC,MAAM,MAAM,GAAG,CAAC,IAAmB,EAAE,KAAa,EAAc,EAAE;IACvE,MAAM,YAAY,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;IACzC,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;IAE5C,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,OAAO,CAAC,IAAI,CAAC;oDACmC,CAAC,CAAC;KACnD;IAED,MAAM,IAAI,GAAG,CAAC,KAAa,EAAE,EAAU,EAAE,EAAE;QACzC,IAAK,KAAa,EAAE,QAAQ,IAAK,KAAa,EAAE,cAAc,EAAE;YAC9D,OAAO,IAAI,CAAC;SACb;QACD,IAAI,KAAK,GAAG,KAAK,CAAC;QAElB,KAAK,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE;YACnB,IAAI,OAAO,GAAG,KAAK,UAAU,IAAI,GAAG,IAAI,IAAI,CAAC,uCAAuC,EAAE;gBACpF,OAAO;aACR;YACD,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,KAAK,IAAI,CAAC,EAAE;gBACnE,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE;oBACjB,KAAK,GAAG,IAAI,CAAC;iBACd;aACF;iBAAM,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;gBACvB,KAAK,GAAG,IAAI,CAAC;aACd;QACH,CAAC,CAAC,CAAC;QACH,OAAO,KAAK,CAAC;IACf,CAAC,CAAC;IAEF,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE;QAClC,OAAO,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import { escapeRegExp, forIn } from \"lodash-es\";\n\nexport const filter = (data: Array<object>, value: string): Array<any> => {\n  const escapedValue = escapeRegExp(value);\n  const regex = new RegExp(escapedValue, \"i\");\n\n  if (data.length === 0) {\n    console.warn(`No data was passed to the filter function.\n    The data argument should be an array of objects`);\n  }\n\n  const find = (input: object, RE: RegExp) => {\n    if ((input as any)?.constant || (input as any)?.filterDisabled) {\n      return true;\n    }\n    let found = false;\n\n    forIn(input, (val) => {\n      if (typeof val === \"function\" || val == null /* intentional == to catch undefined */) {\n        return;\n      }\n      if (Array.isArray(val) || (typeof val === \"object\" && val !== null)) {\n        if (find(val, RE)) {\n          found = true;\n        }\n      } else if (RE.test(val)) {\n        found = true;\n      }\n    });\n    return found;\n  };\n\n  const result = data.filter((item) => {\n    return find(item, regex);\n  });\n\n  return result;\n};\n"]}