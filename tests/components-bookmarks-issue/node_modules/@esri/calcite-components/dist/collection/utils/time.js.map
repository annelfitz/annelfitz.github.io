{"version":3,"file":"time.js","sourceRoot":"","sources":["../../../src/utils/time.ts"],"names":[],"mappings":"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","sourcesContent":["import { getDateTimeFormat, getSupportedNumberingSystem, NumberingSystem, numberStringFormatter } from \"./locale\";\nimport { decimalPlaces } from \"./math\";\nimport { isValidNumber } from \"./number\";\n\nexport type FractionalSecondDigits = 1 | 2 | 3;\n\nexport type HourCycle = \"12\" | \"24\";\n\nexport interface LocalizedTime {\n  localizedHour: string;\n  localizedHourSuffix: string;\n  localizedMinute: string;\n  localizedMinuteSuffix: string;\n  localizedSecond: string;\n  localizedDecimalSeparator: string;\n  localizedFractionalSecond: string;\n  localizedSecondSuffix: string;\n  localizedMeridiem: string;\n}\n\nexport type Meridiem = \"AM\" | \"PM\";\n\nexport type MinuteOrSecond = \"minute\" | \"second\";\n\nexport interface Time {\n  fractionalSecond: string;\n  hour: string;\n  minute: string;\n  second: string;\n}\n\nexport type TimePart =\n  | \"hour\"\n  | \"hourSuffix\"\n  | \"minute\"\n  | \"minuteSuffix\"\n  | \"second\"\n  | \"decimalSeparator\"\n  | \"fractionalSecond\"\n  | \"secondSuffix\"\n  | \"meridiem\";\n\nexport const maxTenthForMinuteAndSecond = 5;\n\nfunction createLocaleDateTimeFormatter(\n  locale: string,\n  numberingSystem: NumberingSystem,\n  includeSeconds = true,\n  fractionalSecondDigits?: FractionalSecondDigits,\n): Intl.DateTimeFormat {\n  const options: Intl.DateTimeFormatOptions = {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    timeZone: \"UTC\",\n    numberingSystem: getSupportedNumberingSystem(numberingSystem),\n  };\n  if (includeSeconds) {\n    options.second = \"2-digit\";\n    if (fractionalSecondDigits) {\n      options.fractionalSecondDigits = fractionalSecondDigits;\n    }\n  }\n\n  return getDateTimeFormat(locale, options);\n}\n\nexport function formatTimePart(number: number, minLength?: number): string {\n  if (number === null || number === undefined) {\n    return;\n  }\n  const numberAsString = number.toString();\n  const numberDecimalPlaces = decimalPlaces(number);\n  if (number < 1 && numberDecimalPlaces > 0 && numberDecimalPlaces < 4) {\n    const fractionalDigits = numberAsString.replace(\"0.\", \"\");\n    if (!minLength || fractionalDigits.length === minLength) {\n      return fractionalDigits;\n    }\n    if (fractionalDigits.length < minLength) {\n      return fractionalDigits.padEnd(minLength, \"0\");\n    }\n    return fractionalDigits;\n  }\n  if (number >= 0 && number < 10) {\n    return numberAsString.padStart(2, \"0\");\n  }\n  if (number >= 10) {\n    return numberAsString;\n  }\n}\n\nexport function formatTimeString(value: string): string {\n  if (!isValidTime(value)) {\n    return null;\n  }\n  const { hour, minute, second, fractionalSecond } = parseTimeString(value);\n  let formattedValue = `${formatTimePart(parseInt(hour))}:${formatTimePart(parseInt(minute))}`;\n  if (second) {\n    formattedValue += `:${formatTimePart(parseInt(second))}`;\n    if (fractionalSecond) {\n      formattedValue += `.${fractionalSecond}`;\n    }\n  }\n  return formattedValue;\n}\n\nfunction fractionalSecondPartToMilliseconds(fractionalSecondPart: string): number {\n  return parseInt((parseFloat(`0.${fractionalSecondPart}`) / 0.001).toFixed(3));\n}\n\nexport function getLocaleHourCycle(locale: string, numberingSystem: NumberingSystem): HourCycle {\n  const formatter = createLocaleDateTimeFormatter(locale, numberingSystem);\n  const parts = formatter.formatToParts(new Date(Date.UTC(0, 0, 0, 0, 0, 0)));\n  return getLocalizedTimePart(\"meridiem\", parts) ? \"12\" : \"24\";\n}\n\nexport function getLocalizedDecimalSeparator(locale: string, numberingSystem: NumberingSystem): string {\n  numberStringFormatter.numberFormatOptions = {\n    locale,\n    numberingSystem,\n  };\n  return numberStringFormatter.localize(\"1.1\").split(\"\")[1];\n}\n\nexport function getLocalizedTimePartSuffix(\n  part: \"hour\" | \"minute\" | \"second\",\n  locale: string,\n  numberingSystem: NumberingSystem = \"latn\",\n): string {\n  const formatter = createLocaleDateTimeFormatter(locale, numberingSystem);\n  const parts = formatter.formatToParts(new Date(Date.UTC(0, 0, 0, 0, 0, 0)));\n  return getLocalizedTimePart(`${part}Suffix` as TimePart, parts);\n}\n\nfunction getLocalizedTimePart(part: TimePart, parts: Intl.DateTimeFormatPart[]): string {\n  if (!part || !parts) {\n    return null;\n  }\n  if (part === \"hourSuffix\") {\n    const hourIndex = parts.indexOf(parts.find(({ type }): boolean => type === \"hour\"));\n    const minuteIndex = parts.indexOf(parts.find(({ type }): boolean => type === \"minute\"));\n    const hourSuffix = parts[hourIndex + 1];\n    return hourSuffix && hourSuffix.type === \"literal\" && minuteIndex - hourIndex === 2\n      ? hourSuffix.value?.trim() || null\n      : null;\n  }\n  if (part === \"minuteSuffix\") {\n    const minuteIndex = parts.indexOf(parts.find(({ type }): boolean => type === \"minute\"));\n    const secondIndex = parts.indexOf(parts.find(({ type }): boolean => type === \"second\"));\n    const minuteSuffix = parts[minuteIndex + 1];\n    return minuteSuffix && minuteSuffix.type === \"literal\" && secondIndex - minuteIndex === 2\n      ? minuteSuffix.value?.trim() || null\n      : null;\n  }\n  if (part === \"secondSuffix\") {\n    const secondIndex = parts.indexOf(parts.find(({ type }): boolean => type === \"second\"));\n    const secondSuffix = parts[secondIndex + 1];\n    return secondSuffix && secondSuffix.type === \"literal\" ? secondSuffix.value?.trim() || null : null;\n  }\n  return parts.find(({ type }) => (part == \"meridiem\" ? type === \"dayPeriod\" : type === part))?.value || null;\n}\n\nexport function getMeridiem(hour: string): Meridiem {\n  if (!isValidNumber(hour)) {\n    return null;\n  }\n  const hourAsNumber = parseInt(hour);\n  return hourAsNumber >= 0 && hourAsNumber <= 11 ? \"AM\" : \"PM\";\n}\n\nexport function isValidTime(value: string): boolean {\n  if (!value || value.startsWith(\":\") || value.endsWith(\":\")) {\n    return false;\n  }\n  const splitValue = value.split(\":\");\n  const validLength = splitValue.length > 1 && splitValue.length < 4;\n  if (!validLength) {\n    return false;\n  }\n  const [hour, minute, second] = splitValue;\n  const hourAsNumber = parseInt(splitValue[0]);\n  const minuteAsNumber = parseInt(splitValue[1]);\n  const secondAsNumber = parseInt(splitValue[2]);\n  const hourValid = isValidNumber(hour) && hourAsNumber >= 0 && hourAsNumber < 24;\n  const minuteValid = isValidNumber(minute) && minuteAsNumber >= 0 && minuteAsNumber < 60;\n  const secondValid = isValidNumber(second) && secondAsNumber >= 0 && secondAsNumber < 60;\n  if ((hourValid && minuteValid && !second) || (hourValid && minuteValid && secondValid)) {\n    return true;\n  }\n}\n\nfunction isValidTimePart(value: string, part: TimePart): boolean {\n  if (part === \"meridiem\") {\n    return value === \"AM\" || value === \"PM\";\n  }\n  if (!isValidNumber(value)) {\n    return false;\n  }\n  const valueAsNumber = Number(value);\n  return part === \"hour\" ? valueAsNumber >= 0 && valueAsNumber < 24 : valueAsNumber >= 0 && valueAsNumber < 60;\n}\n\ninterface LocalizeTimePartParameters {\n  value: string;\n  part: TimePart;\n  locale: string;\n  numberingSystem: NumberingSystem;\n}\n\nexport function localizeTimePart({ value, part, locale, numberingSystem }: LocalizeTimePartParameters): string {\n  if (part === \"fractionalSecond\") {\n    const localizedDecimalSeparator = getLocalizedDecimalSeparator(locale, numberingSystem);\n    let localizedFractionalSecond = null;\n    if (value) {\n      numberStringFormatter.numberFormatOptions = {\n        locale,\n        numberingSystem,\n      };\n      const localizedZero = numberStringFormatter.localize(\"0\");\n      if (parseInt(value) === 0) {\n        localizedFractionalSecond = \"\".padStart(value.length, localizedZero);\n      } else {\n        localizedFractionalSecond = numberStringFormatter\n          .localize(`0.${value}`)\n          .replace(`${localizedZero}${localizedDecimalSeparator}`, \"\");\n        if (localizedFractionalSecond.length < value.length) {\n          localizedFractionalSecond = localizedFractionalSecond.padEnd(value.length, localizedZero);\n        }\n      }\n    }\n    return localizedFractionalSecond;\n  }\n\n  if (!isValidTimePart(value, part)) {\n    return;\n  }\n  const valueAsNumber = parseInt(value);\n  const date = new Date(\n    Date.UTC(\n      0,\n      0,\n      0,\n      part === \"hour\" ? valueAsNumber : part === \"meridiem\" ? (value === \"AM\" ? 0 : 12) : 0,\n      part === \"minute\" ? valueAsNumber : 0,\n      part === \"second\" ? valueAsNumber : 0,\n    ),\n  );\n  if (!date) {\n    return;\n  }\n  const formatter = createLocaleDateTimeFormatter(locale, numberingSystem);\n  const parts = formatter.formatToParts(date);\n  return getLocalizedTimePart(part, parts);\n}\n\ninterface LocalizeTimeStringParameters {\n  value: string;\n  includeSeconds?: boolean;\n  fractionalSecondDigits?: FractionalSecondDigits;\n  locale: string;\n  numberingSystem: NumberingSystem;\n}\n\nexport function localizeTimeString({\n  value,\n  locale,\n  numberingSystem,\n  includeSeconds = true,\n  fractionalSecondDigits,\n}: LocalizeTimeStringParameters): string {\n  if (!isValidTime(value)) {\n    return null;\n  }\n  const { hour, minute, second = \"0\", fractionalSecond } = parseTimeString(value);\n\n  const dateFromTimeString = new Date(\n    Date.UTC(\n      0,\n      0,\n      0,\n      parseInt(hour),\n      parseInt(minute),\n      parseInt(second),\n      fractionalSecond && fractionalSecondPartToMilliseconds(fractionalSecond),\n    ),\n  );\n  const formatter = createLocaleDateTimeFormatter(locale, numberingSystem, includeSeconds, fractionalSecondDigits);\n  return formatter.format(dateFromTimeString) || null;\n}\n\ninterface LocalizeTimeStringToPartsParameters {\n  value: string;\n  locale: string;\n  numberingSystem?: NumberingSystem;\n}\n\nexport function localizeTimeStringToParts({\n  value,\n  locale,\n  numberingSystem = \"latn\",\n}: LocalizeTimeStringToPartsParameters): LocalizedTime {\n  if (!isValidTime(value)) {\n    return null;\n  }\n  const { hour, minute, second = \"0\", fractionalSecond } = parseTimeString(value);\n  const dateFromTimeString = new Date(Date.UTC(0, 0, 0, parseInt(hour), parseInt(minute), parseInt(second)));\n  if (dateFromTimeString) {\n    const formatter = createLocaleDateTimeFormatter(locale, numberingSystem);\n    const parts = formatter.formatToParts(dateFromTimeString);\n    return {\n      localizedHour: getLocalizedTimePart(\"hour\", parts),\n      localizedHourSuffix: getLocalizedTimePart(\"hourSuffix\", parts),\n      localizedMinute: getLocalizedTimePart(\"minute\", parts),\n      localizedMinuteSuffix: getLocalizedTimePart(\"minuteSuffix\", parts),\n      localizedSecond: getLocalizedTimePart(\"second\", parts),\n      localizedDecimalSeparator: getLocalizedDecimalSeparator(locale, numberingSystem),\n      localizedFractionalSecond: localizeTimePart({\n        value: fractionalSecond,\n        part: \"fractionalSecond\",\n        locale,\n        numberingSystem,\n      }),\n      localizedSecondSuffix: getLocalizedTimePart(\"secondSuffix\", parts),\n      localizedMeridiem: getLocalizedTimePart(\"meridiem\", parts),\n    };\n  }\n  return null;\n}\n\ninterface GetTimePartsParameters {\n  value: string;\n  locale: string;\n  numberingSystem: NumberingSystem;\n}\nexport function getTimeParts({ value, locale, numberingSystem }: GetTimePartsParameters): Intl.DateTimeFormatPart[] {\n  if (!isValidTime(value)) {\n    return null;\n  }\n  const { hour, minute, second = \"0\" } = parseTimeString(value);\n  const dateFromTimeString = new Date(Date.UTC(0, 0, 0, parseInt(hour), parseInt(minute), parseInt(second)));\n  if (dateFromTimeString) {\n    const formatter = createLocaleDateTimeFormatter(locale, numberingSystem);\n    const parts = formatter.formatToParts(dateFromTimeString);\n    return parts;\n  }\n  return null;\n}\n\nexport function parseTimeString(value: string): Time {\n  if (isValidTime(value)) {\n    const [hour, minute, secondDecimal] = value.split(\":\");\n    let second = secondDecimal;\n    let fractionalSecond = null;\n    if (secondDecimal?.includes(\".\")) {\n      [second, fractionalSecond] = secondDecimal.split(\".\");\n    }\n    return {\n      fractionalSecond,\n      hour,\n      minute,\n      second,\n    };\n  }\n  return {\n    fractionalSecond: null,\n    hour: null,\n    minute: null,\n    second: null,\n  };\n}\n\nexport function toISOTimeString(value: string, includeSeconds = true): string {\n  if (!isValidTime(value)) {\n    return \"\";\n  }\n  const { hour, minute, second, fractionalSecond } = parseTimeString(value);\n\n  let isoTimeString = `${formatTimePart(parseInt(hour))}:${formatTimePart(parseInt(minute))}`;\n\n  if (includeSeconds) {\n    isoTimeString += `:${formatTimePart(parseInt((includeSeconds && second) || \"0\"))}`;\n    if (fractionalSecond) {\n      isoTimeString += `.${fractionalSecond}`;\n    }\n  }\n\n  return isoTimeString;\n}\n"]}