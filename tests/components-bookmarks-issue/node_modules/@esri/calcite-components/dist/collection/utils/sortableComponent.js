/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.6.0
 */
import Sortable from "sortablejs";
const sortableComponentSet = new Set();
export const CSS = {
    ghostClass: "calcite-sortable--ghost",
    chosenClass: "calcite-sortable--chosen",
    dragClass: "calcite-sortable--drag",
    fallbackClass: "calcite-sortable--fallback",
};
/**
 * Helper to keep track of a SortableComponent. This should be called in the `connectedCallback` lifecycle method as well as any other method necessary to rebuild the sortable instance.
 *
 * @param {SortableComponent} component - The sortable component.
 */
export function connectSortableComponent(component) {
    disconnectSortableComponent(component);
    sortableComponentSet.add(component);
    const dataIdAttr = "id";
    const { group, handleSelector: handle, dragSelector: draggable } = component;
    component.sortable = Sortable.create(component.el, {
        dataIdAttr,
        ...CSS,
        ...(!!draggable && { draggable }),
        ...(!!group && {
            group: {
                name: group,
                ...(!!component.canPull && {
                    pull: (to, from, dragEl, { newIndex, oldIndex }) => component.canPull({ toEl: to.el, fromEl: from.el, dragEl, newIndex, oldIndex }),
                }),
                ...(!!component.canPut && {
                    put: (to, from, dragEl, { newIndex, oldIndex }) => component.canPut({ toEl: to.el, fromEl: from.el, dragEl, newIndex, oldIndex }),
                }),
            },
        }),
        handle,
        filter: "[drag-disabled]",
        onStart: ({ from: fromEl, item: dragEl, to: toEl, newIndex, oldIndex }) => {
            dragState.active = true;
            onGlobalDragStart();
            component.onDragStart({ fromEl, dragEl, toEl, newIndex, oldIndex });
        },
        onEnd: ({ from: fromEl, item: dragEl, to: toEl, newIndex, oldIndex }) => {
            dragState.active = false;
            onGlobalDragEnd();
            component.onDragEnd({ fromEl, dragEl, toEl, newIndex, oldIndex });
        },
        onSort: ({ from: fromEl, item: dragEl, to: toEl, newIndex, oldIndex }) => {
            component.onDragSort({ fromEl, dragEl, toEl, newIndex, oldIndex });
        },
    });
}
/**
 * Helper to remove track of a SortableComponent. This should be called in the `disconnectedCallback` lifecycle method.
 *
 * @param {SortableComponent} component - The sortable component.
 */
export function disconnectSortableComponent(component) {
    sortableComponentSet.delete(component);
    component.sortable?.destroy();
    component.sortable = null;
}
const dragState = { active: false };
/**
 * Helper to determine if dragging is currently active.
 *
 * @param component The sortable component.
 * @returns {boolean} a boolean value.
 */
export function dragActive(component) {
    return component.dragEnabled && dragState.active;
}
function onGlobalDragStart() {
    Array.from(sortableComponentSet).forEach((component) => component.onGlobalDragStart());
}
function onGlobalDragEnd() {
    Array.from(sortableComponentSet).forEach((component) => component.onGlobalDragEnd());
}
//# sourceMappingURL=sortableComponent.js.map
