{"version":3,"file":"sortableComponent.js","sourceRoot":"","sources":["../../../src/utils/sortableComponent.ts"],"names":[],"mappings":"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","sourcesContent":["import Sortable from \"sortablejs\";\nconst sortableComponentSet = new Set<SortableComponent>();\n\nexport interface DragDetail {\n  toEl: HTMLElement;\n  fromEl: HTMLElement;\n  dragEl: HTMLElement;\n  newIndex: number;\n  oldIndex: number;\n}\n\nexport const CSS = {\n  ghostClass: \"calcite-sortable--ghost\",\n  chosenClass: \"calcite-sortable--chosen\",\n  dragClass: \"calcite-sortable--drag\",\n  fallbackClass: \"calcite-sortable--fallback\",\n};\n\n/**\n * Defines interface for components with sorting functionality.\n */\nexport interface SortableComponent {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n\n  /**\n   * When `true`, dragging is enabled.\n   */\n  dragEnabled: boolean;\n\n  /**\n   * Specifies which items inside the element should be draggable.\n   */\n  dragSelector?: string;\n\n  /**\n   * The list's group identifier.\n   */\n  group?: string;\n\n  /**\n   * The selector for the handle elements.\n   */\n  handleSelector: string;\n\n  /**\n   * The Sortable instance.\n   */\n  sortable: Sortable;\n\n  /**\n   * Whether the element can move from the list.\n   */\n  canPull: (detail: DragDetail) => boolean;\n\n  /**\n   * Whether the element can be added from another list.\n   */\n  canPut: (detail: DragDetail) => boolean;\n\n  /**\n   * Called when any sortable component drag starts. For internal use only. Any public drag events should emit within `onDragStart()`.\n   */\n  onGlobalDragStart: () => void;\n\n  /**\n   * Called when any sortable component drag ends. For internal use only. Any public drag events should emit within `onDragEnd()`.\n   */\n  onGlobalDragEnd: () => void;\n\n  /**\n   * Called when a component's dragging ends.\n   */\n  onDragEnd: (detail: DragDetail) => void;\n\n  /**\n   * Called when a component's dragging starts.\n   */\n  onDragStart: (detail: DragDetail) => void;\n\n  /**\n   * Called by any change to the list (add / update / remove).\n   */\n  onDragSort: (detail: DragDetail) => void;\n}\n\nexport interface SortableComponentItem {\n  /**\n   * When `true`, the item is not draggable.\n   *\n   *\n   * Notes:\n   *\n   * This property should use the @Prop decorator and reflect.\n   * This property should be used to set the `calcite-handle` disabled property.\n   */\n  dragDisabled: boolean;\n}\n\n/**\n * Helper to keep track of a SortableComponent. This should be called in the `connectedCallback` lifecycle method as well as any other method necessary to rebuild the sortable instance.\n *\n * @param {SortableComponent} component - The sortable component.\n */\nexport function connectSortableComponent(component: SortableComponent): void {\n  disconnectSortableComponent(component);\n  sortableComponentSet.add(component);\n\n  const dataIdAttr = \"id\";\n  const { group, handleSelector: handle, dragSelector: draggable } = component;\n\n  component.sortable = Sortable.create(component.el, {\n    dataIdAttr,\n    ...CSS,\n    ...(!!draggable && { draggable }),\n    ...(!!group && {\n      group: {\n        name: group,\n        ...(!!component.canPull && {\n          pull: (to, from, dragEl, { newIndex, oldIndex }) =>\n            component.canPull({ toEl: to.el, fromEl: from.el, dragEl, newIndex, oldIndex }),\n        }),\n        ...(!!component.canPut && {\n          put: (to, from, dragEl, { newIndex, oldIndex }) =>\n            component.canPut({ toEl: to.el, fromEl: from.el, dragEl, newIndex, oldIndex }),\n        }),\n      },\n    }),\n    handle,\n    filter: \"[drag-disabled]\",\n    onStart: ({ from: fromEl, item: dragEl, to: toEl, newIndex, oldIndex }) => {\n      dragState.active = true;\n      onGlobalDragStart();\n      component.onDragStart({ fromEl, dragEl, toEl, newIndex, oldIndex });\n    },\n    onEnd: ({ from: fromEl, item: dragEl, to: toEl, newIndex, oldIndex }) => {\n      dragState.active = false;\n      onGlobalDragEnd();\n      component.onDragEnd({ fromEl, dragEl, toEl, newIndex, oldIndex });\n    },\n    onSort: ({ from: fromEl, item: dragEl, to: toEl, newIndex, oldIndex }) => {\n      component.onDragSort({ fromEl, dragEl, toEl, newIndex, oldIndex });\n    },\n  });\n}\n\n/**\n * Helper to remove track of a SortableComponent. This should be called in the `disconnectedCallback` lifecycle method.\n *\n * @param {SortableComponent} component - The sortable component.\n */\nexport function disconnectSortableComponent(component: SortableComponent): void {\n  sortableComponentSet.delete(component);\n\n  component.sortable?.destroy();\n  component.sortable = null;\n}\n\nconst dragState: { active: boolean } = { active: false };\n\n/**\n * Helper to determine if dragging is currently active.\n *\n * @param component The sortable component.\n * @returns {boolean} a boolean value.\n */\nexport function dragActive(component: SortableComponent): boolean {\n  return component.dragEnabled && dragState.active;\n}\n\nfunction onGlobalDragStart(): void {\n  Array.from(sortableComponentSet).forEach((component) => component.onGlobalDragStart());\n}\n\nfunction onGlobalDragEnd(): void {\n  Array.from(sortableComponentSet).forEach((component) => component.onGlobalDragEnd());\n}\n"]}