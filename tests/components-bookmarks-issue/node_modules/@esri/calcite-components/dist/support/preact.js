/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.6.0
 */
import { join } from "path";
export const generatePreactTypes = async (config, compilerCtx, buildCtx) => {
    const { typesDir } = config.outputTargets.find(({ type }) => type === "dist" || type === "dist-types");
    const outputPath = join(typesDir, "preact.d.ts");
    const types = buildCtx.components.map(getType).join("\n");
    await compilerCtx.fs.writeFile(outputPath, getTemplate(types));
};
function getTemplate(types) {
    return `
import { JSXInternal } from "preact/src/jsx";
import { JSX } from "./components";

declare module "preact/src/jsx" {
  namespace JSXInternal {
    interface IntrinsicElements {
      ${types};
    }
  }
}
  `;
}
function getType({ events, tagName, componentClassName }) {
    const className = `Calcite${componentClassName}`;
    if (!events?.length) {
        return `
      "${tagName}": JSX.${className} & JSXInternal.HTMLAttributes<HTML${className}Element>`;
    }
    else {
        const stencilEvents = events.map(({ name }) => `"on${capitalize(name)}"`).join(" | ");
        const preactEvents = events
            .map(({ name }) => `"on${name}"?: (event: CustomEvent<any>) => void;`)
            .join("\n        ");
        return `
      "${tagName}": Omit<JSX.${className}, ${stencilEvents}> & JSXInternal.HTMLAttributes<HTML${className}Element> & {
        ${preactEvents}
      }`;
    }
}
function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
//# sourceMappingURL=preact.js.map
