{"version":3,"file":"preact.js","sourceRoot":"","sources":["../../support/preact.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAE5B,MAAM,CAAC,MAAM,mBAAmB,GAAoC,KAAK,EACvE,MAAM,EACN,WAAW,EACX,QAAQ,EACO,EAAE;IACjB,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,KAAK,MAAM,IAAI,IAAI,KAAK,YAAY,CAE5E,CAAC;IAC1B,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IACjD,MAAM,KAAK,GAAG,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1D,MAAM,WAAW,CAAC,EAAE,CAAC,SAAS,CAAC,UAAU,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;AACjE,CAAC,CAAC;AAEF,SAAS,WAAW,CAAC,KAAa;IAChC,OAAO;;;;;;;QAOD,KAAK;;;;GAIV,CAAC;AACJ,CAAC;AAED,SAAS,OAAO,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,kBAAkB,EAAE;IACtD,MAAM,SAAS,GAAG,UAAU,kBAAkB,EAAE,CAAC;IACjD,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE;QACnB,OAAO;SACF,OAAO,UAAU,SAAS,qCAAqC,SAAS,UAAU,CAAC;KACzF;SAAM;QACL,MAAM,aAAa,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,MAAM,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACtF,MAAM,YAAY,GAAG,MAAM;aACxB,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,MAAM,IAAI,wCAAwC,CAAC;aACrE,IAAI,CAAC,YAAY,CAAC,CAAC;QACtB,OAAO;SACF,OAAO,eAAe,SAAS,KAAK,aAAa,sCAAsC,SAAS;UAC/F,YAAY;QACd,CAAC;KACN;AACH,CAAC;AAED,SAAS,UAAU,CAAC,GAAW;IAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC","sourcesContent":["import {\n  OutputTargetCustom,\n  OutputTargetDist,\n  OutputTargetDistTypes,\n} from \"@stencil/core/internal/stencil-public-compiler\";\nimport { join } from \"path\";\n\nexport const generatePreactTypes: OutputTargetCustom[\"generator\"] = async (\n  config,\n  compilerCtx,\n  buildCtx,\n): Promise<void> => {\n  const { typesDir } = config.outputTargets.find(({ type }) => type === \"dist\" || type === \"dist-types\") as\n    | OutputTargetDist\n    | OutputTargetDistTypes;\n  const outputPath = join(typesDir, \"preact.d.ts\");\n  const types = buildCtx.components.map(getType).join(\"\\n\");\n  await compilerCtx.fs.writeFile(outputPath, getTemplate(types));\n};\n\nfunction getTemplate(types: string): string {\n  return `\nimport { JSXInternal } from \"preact/src/jsx\";\nimport { JSX } from \"./components\";\n\ndeclare module \"preact/src/jsx\" {\n  namespace JSXInternal {\n    interface IntrinsicElements {\n      ${types};\n    }\n  }\n}\n  `;\n}\n\nfunction getType({ events, tagName, componentClassName }): string {\n  const className = `Calcite${componentClassName}`;\n  if (!events?.length) {\n    return `\n      \"${tagName}\": JSX.${className} & JSXInternal.HTMLAttributes<HTML${className}Element>`;\n  } else {\n    const stencilEvents = events.map(({ name }) => `\"on${capitalize(name)}\"`).join(\" | \");\n    const preactEvents = events\n      .map(({ name }) => `\"on${name}\"?: (event: CustomEvent<any>) => void;`)\n      .join(\"\\n        \");\n    return `\n      \"${tagName}\": Omit<JSX.${className}, ${stencilEvents}> & JSXInternal.HTMLAttributes<HTML${className}Element> & {\n        ${preactEvents}\n      }`;\n  }\n}\n\nfunction capitalize(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n"]}