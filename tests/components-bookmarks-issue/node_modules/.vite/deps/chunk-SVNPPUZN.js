import {
  f
} from "./chunk-7QHIE4SQ.js";
import {
  i
} from "./chunk-CPZW2LMK.js";
import {
  e as e2
} from "./chunk-QR7J3YDY.js";
import {
  s
} from "./chunk-GO2OGJDG.js";
import {
  e
} from "./chunk-VYSGSKHB.js";
import {
  o as o2
} from "./chunk-IDPLBNJX.js";
import {
  o
} from "./chunk-P4MNTMCZ.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/Laserline.glsl.js
function d(d2, i2) {
  const s2 = d2.fragment;
  s2.include(i), d2.include(f), s2.uniforms.add(new o2("globalAlpha", (o3) => o3.globalAlpha), new e("glowColor", (o3) => o3.glowColor), new o2("glowWidth", (o3, e3) => o3.glowWidth * e3.camera.pixelRatio), new o2("glowFalloff", (o3) => o3.glowFalloff), new e("innerColor", (o3) => o3.innerColor), new o2("innerWidth", (o3, e3) => o3.innerWidth * e3.camera.pixelRatio), new s("depthMap", (o3, e3) => {
    var _a;
    return (_a = e3.linearDepth) == null ? void 0 : _a.getTexture();
  }), new e2("nearFar", (o3, e3) => e3.camera.nearFar), new s("frameColor", (o3, e3) => e3.mainColor)), s2.code.add(o`vec4 blendPremultiplied(vec4 source, vec4 dest) {
float oneMinusSourceAlpha = 1.0 - source.a;
return vec4(
source.rgb + dest.rgb * oneMinusSourceAlpha,
source.a + dest.a * oneMinusSourceAlpha
);
}`), s2.code.add(o`vec4 premultipliedColor(vec3 rgb, float alpha) {
return vec4(rgb * alpha, alpha);
}`), s2.code.add(o`vec4 laserlineProfile(float dist) {
if (dist > glowWidth) {
return vec4(0.0);
}
float innerAlpha = (1.0 - smoothstep(0.0, innerWidth, dist));
float glowAlpha = pow(max(0.0, 1.0 - dist / glowWidth), glowFalloff);
return blendPremultiplied(
premultipliedColor(innerColor, innerAlpha),
premultipliedColor(glowColor, glowAlpha)
);
}`), s2.code.add(o`bool laserlineReconstructFromDepth(out vec3 pos, out vec3 normal, out float depthDiscontinuityAlpha) {
float depth = linearDepthFromTexture(depthMap, uv, nearFar);
if (-depth == nearFar[0]) {
return false;
}
pos = reconstructPosition(gl_FragCoord.xy, depth);
normal = normalize(cross(dFdx(pos), dFdy(pos)));
float ddepth = fwidth(depth);
depthDiscontinuityAlpha = 1.0 - smoothstep(0.0, 0.01, -ddepth / depth);
return true;
}`), i2.contrastControlEnabled ? (s2.uniforms.add(new o2("globalAlphaContrastBoost", (o3) => null != o3.globalAlphaContrastBoost ? o3.globalAlphaContrastBoost : 1)), s2.code.add(o`float rgbToLuminance(vec3 color) {
return dot(vec3(0.2126, 0.7152, 0.0722), color);
}
vec4 laserlineOutput(vec4 color) {
float backgroundLuminance = rgbToLuminance(texture(frameColor, uv).rgb);
float alpha = clamp(globalAlpha * max(backgroundLuminance * globalAlphaContrastBoost, 1.0), 0.0, 1.0);
return color * alpha;
}`)) : s2.code.add(o`vec4 laserlineOutput(vec4 color) {
return color * globalAlpha;
}`);
}

export {
  d
};
//# sourceMappingURL=chunk-SVNPPUZN.js.map
