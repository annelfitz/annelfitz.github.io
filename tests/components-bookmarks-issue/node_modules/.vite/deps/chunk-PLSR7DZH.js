import {
  Build,
  h
} from "./chunk-NCF6OYL5.js";

// node_modules/@esri/calcite-components/dist/components/interactive.js
function getUserAgentData() {
  return navigator.userAgentData;
}
function getUserAgentString() {
  if (!Build.isBrowser) {
    return "";
  }
  const uaData = getUserAgentData();
  return (uaData == null ? void 0 : uaData.brands) ? uaData.brands.map(({ brand, version }) => `${brand}/${version}`).join(" ") : navigator.userAgent;
}
var isFirefox = /firefox/i.test(getUserAgentString());
var disabledElementToParent = isFirefox ? /* @__PURE__ */ new WeakMap() : null;
function interceptedClick() {
  const { disabled } = this;
  if (!disabled) {
    HTMLElement.prototype.click.call(this);
  }
}
function onPointerDown(event) {
  const interactiveElement = event.target;
  if (isFirefox && !disabledElementToParent.get(interactiveElement)) {
    return;
  }
  const { disabled } = interactiveElement;
  if (disabled) {
    event.preventDefault();
  }
}
var nonBubblingWhenDisabledMouseEvents = ["mousedown", "mouseup", "click"];
function onNonBubblingWhenDisabledMouseEvent(event) {
  const interactiveElement = event.target;
  if (isFirefox && !disabledElementToParent.get(interactiveElement)) {
    return;
  }
  if (interactiveElement.disabled) {
    event.stopImmediatePropagation();
    event.preventDefault();
  }
}
var captureOnlyOptions = { capture: true };
function updateHostInteraction(component) {
  if (component.disabled) {
    component.el.setAttribute("aria-disabled", "true");
    if (component.el.contains(document.activeElement)) {
      document.activeElement.blur();
    }
    blockInteraction(component);
    return;
  }
  restoreInteraction(component);
  component.el.removeAttribute("aria-disabled");
}
function blockInteraction(component) {
  component.el.click = interceptedClick;
  if (isFirefox) {
    const currentParent = getParentElement(component);
    const trackedParent = disabledElementToParent.get(component.el);
    if (trackedParent !== currentParent) {
      removeInteractionListeners(trackedParent);
      disabledElementToParent.set(component.el, currentParent);
    }
    addInteractionListeners(disabledElementToParent.get(component.el));
    return;
  }
  addInteractionListeners(component.el);
}
function addInteractionListeners(element) {
  if (!element) {
    return;
  }
  element.addEventListener("pointerdown", onPointerDown, captureOnlyOptions);
  nonBubblingWhenDisabledMouseEvents.forEach((event) => element.addEventListener(event, onNonBubblingWhenDisabledMouseEvent, captureOnlyOptions));
}
function getParentElement(component) {
  return component.el.parentElement || component.el;
}
function restoreInteraction(component) {
  delete component.el.click;
  if (isFirefox) {
    removeInteractionListeners(disabledElementToParent.get(component.el));
    disabledElementToParent.delete(component.el);
    return;
  }
  removeInteractionListeners(component.el);
}
function removeInteractionListeners(element) {
  if (!element) {
    return;
  }
  element.removeEventListener("pointerdown", onPointerDown, captureOnlyOptions);
  nonBubblingWhenDisabledMouseEvents.forEach((event) => element.removeEventListener(event, onNonBubblingWhenDisabledMouseEvent, captureOnlyOptions));
}
function connectInteractive(component) {
  if (!component.disabled || !isFirefox) {
    return;
  }
  blockInteraction(component);
}
function disconnectInteractive(component) {
  if (!isFirefox) {
    return;
  }
  restoreInteraction(component);
}
var CSS = {
  container: "interaction-container"
};
function InteractiveContainer({ disabled }, children) {
  return h("div", { class: CSS.container, inert: disabled }, ...children);
}

export {
  getUserAgentString,
  updateHostInteraction,
  connectInteractive,
  disconnectInteractive,
  InteractiveContainer
};
/*! Bundled license information:

@esri/calcite-components/dist/components/interactive.js:
  (*!
   * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
   * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
   * v2.6.0
   *)
*/
//# sourceMappingURL=chunk-PLSR7DZH.js.map
