import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  importCoreReactiveUtils,
  newWidgetsScaleRangeSlider
} from "./chunk-YXW2SI4L.js";
import {
  addHandles,
  checkForView,
  referenceElementHelper
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-scale-range-slider.entry.js
var scaleRangeSliderCss = "arcgis-scale-range-slider{}";
var ArcgisScaleRangeSlider = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.arcgisScaleRangeSliderReady = createEvent(this, "arcgisScaleRangeSliderReady", 7);
    this._watchHandles = [];
    this.referenceElement = void 0;
    this.disabled = false;
    this.layer = void 0;
    this.maxScale = void 0;
    this.maxScaleLimit = void 0;
    this.minScale = void 0;
    this.minScaleLimit = void 0;
    this.mode = "range";
    this.region = "US";
    this.visibleElementsPreview = true;
    this.visibleElementsScaleMenusMinScaleMenu = true;
    this.visibleElementsScaleMenusMaxScaleMenu = true;
    this.position = "bottom-left";
    this.view = void 0;
    this.widget = void 0;
  }
  referenceElementWatcher(value) {
    void referenceElementHelper(this, value);
  }
  disabledWatcher(value, old) {
    if (this.widget && value !== old) {
      this.widget.disabled = value;
    }
  }
  layerWatcher(value) {
    if (this.widget) {
      this.widget.layer = value;
    }
  }
  maxScaleWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.maxScale = value;
    }
  }
  maxScaleLimitWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.maxScaleLimit = value;
    }
  }
  minScaleWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.minScale = value;
    }
  }
  minScaleLimitWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.minScaleLimit = value;
    }
  }
  modeWatcher(value) {
    if (this.widget) {
      this.widget.mode = value;
    }
  }
  regionWatcher(value) {
    if (this.widget) {
      this.widget.region = value;
    }
  }
  visibleElementsPreviewWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        preview: value
      };
    }
  }
  visibleElementsScaleMenusMinScaleMenuWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        scaleMenus: {
          ...this.widget.visibleElements.scaleMenus,
          minScaleMenu: value
        }
      };
    }
  }
  visibleElementsScaleMenusMaxScaleMenuWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        scaleMenus: {
          ...this.widget.visibleElements.scaleMenus,
          maxScaleMenu: value
        }
      };
    }
  }
  positionWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.view.ui.move(this.childElem, value);
    }
  }
  viewWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.view = value;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = this._createParams();
    const widget = await newWidgetsScaleRangeSlider(params);
    this.widget = widget;
    await this._addWatchers();
    this._addContainer();
    this.arcgisScaleRangeSliderReady.emit();
    checkForView(this);
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    return h("div", { ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  _addContainer() {
    this.widget.container = this.childElem;
  }
  async _addWatchers() {
    const { watch } = await importCoreReactiveUtils();
    addHandles(this, watch(() => {
      var _a;
      return (_a = this.widget) == null ? void 0 : _a.disabled;
    }, (value) => this.disabled = value));
  }
  _createParams() {
    const params = {};
    params.visibleElements = {
      preview: this.visibleElementsPreview,
      scaleMenus: {
        minScaleMenu: this.visibleElementsScaleMenusMinScaleMenu,
        maxScaleMenu: this.visibleElementsScaleMenusMaxScaleMenu
      }
    };
    if (this.layer) {
      params.layer = this.layer;
    }
    if (this.maxScale !== void 0) {
      params.maxScale = this.maxScale;
    }
    if (this.minScale !== void 0) {
      params.minScale = this.minScale;
    }
    if (this.maxScaleLimit !== void 0) {
      params.maxScaleLimit = this.maxScaleLimit;
    }
    if (this.minScaleLimit !== void 0) {
      params.minScaleLimit = this.minScaleLimit;
    }
    if (this.mode) {
      params.mode = this.mode;
    }
    if (this.region) {
      params.region = this.region;
    }
    if (this.view) {
      params.view = this.view;
    }
    return params;
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "referenceElement": ["referenceElementWatcher"],
      "disabled": ["disabledWatcher"],
      "layer": ["layerWatcher"],
      "maxScale": ["maxScaleWatcher"],
      "maxScaleLimit": ["maxScaleLimitWatcher"],
      "minScale": ["minScaleWatcher"],
      "minScaleLimit": ["minScaleLimitWatcher"],
      "mode": ["modeWatcher"],
      "region": ["regionWatcher"],
      "visibleElementsPreview": ["visibleElementsPreviewWatcher"],
      "visibleElementsScaleMenusMinScaleMenu": ["visibleElementsScaleMenusMinScaleMenuWatcher"],
      "visibleElementsScaleMenusMaxScaleMenu": ["visibleElementsScaleMenusMaxScaleMenuWatcher"],
      "position": ["positionWatcher"],
      "view": ["viewWatcher"]
    };
  }
};
ArcgisScaleRangeSlider.style = scaleRangeSliderCss;
export {
  ArcgisScaleRangeSlider as arcgis_scale_range_slider
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-scale-range-slider.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-scale-range-slider.entry-XRQDE3MY.js.map
