import {
  HiddenFormInputSlot,
  afterConnectDefaultValueSet,
  connectForm,
  disconnectForm
} from "./chunk-JG4DEVZN.js";
import {
  connectLabel,
  disconnectLabel
} from "./chunk-U6YOC6GW.js";
import "./chunk-HPVF3F2S.js";
import {
  InteractiveContainer,
  updateHostInteraction
} from "./chunk-66JQNCB7.js";
import "./chunk-OUKAB5XV.js";
import {
  connectMessages,
  disconnectMessages,
  setUpMessages,
  updateMessages
} from "./chunk-IF3MPWQI.js";
import {
  connectLocalized,
  disconnectLocalized,
  getDateTimeFormat
} from "./chunk-AXCPOXSP.js";
import "./chunk-CTALGNVI.js";
import "./chunk-7QCRXUYY.js";
import {
  componentFocusable,
  setComponentLoaded,
  setUpLoadableComponent
} from "./chunk-HYC423SM.js";
import "./chunk-BUS2XAMG.js";
import "./chunk-L553G5FP.js";
import "./chunk-PJLSVRBA.js";
import {
  Host,
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-FNA2PYJM.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@esri/calcite-components/dist/esm/calcite-input-time-zone.entry.js
var hourToMinutes = 60;
var timeZoneNameBlockList = [
  "CET",
  "CST6CDT",
  "EET",
  "EST",
  "EST5EDT",
  "Factory",
  "HST",
  "MET",
  "MST",
  "MST7MDT",
  "PST8PDT",
  "UTC",
  "WET"
];
function timeZoneOffsetToDecimal(shortOffsetTimeZoneName) {
  const minusSign = "âˆ’";
  const hyphen = "-";
  return shortOffsetTimeZoneName.replace(":15", ".25").replace(":30", ".5").replace(":45", ".75").replace(minusSign, hyphen);
}
function toOffsetValue(timeZoneName, referenceDateInMs) {
  const offset = getTimeZoneShortOffset(timeZoneName, "en-US", referenceDateInMs).replace("GMT", "");
  if (offset === "") {
    return 0;
  }
  return Number(timeZoneOffsetToDecimal(offset)) * hourToMinutes;
}
function getUserTimeZoneOffset() {
  const localDate = /* @__PURE__ */ new Date();
  return localDate.getTimezoneOffset() * -1;
}
function getUserTimeZoneName() {
  const dateFormatter = new Intl.DateTimeFormat();
  return dateFormatter.resolvedOptions().timeZone;
}
var timeZoneGroups;
async function createTimeZoneItems(locale, messages, mode, referenceDate) {
  const referenceDateInMs = referenceDate.getTime();
  const timeZoneNames = Intl.supportedValuesOf("timeZone");
  if (mode === "offset") {
    if (!timeZoneGroups) {
      timeZoneGroups = Promise.all([
        import("./index-ba81c72a-WKZYJ2CY.js"),
        import("./index-1e9a7cab-PJWPWAJK.js")
      ]);
    }
    return timeZoneGroups.then(async ([{ groupTimeZones }, { DateEngine }]) => {
      const timeZoneGroups2 = await groupTimeZones({
        dateEngine: new DateEngine(),
        groupDateRange: 1,
        startDate: new Date(referenceDateInMs).toISOString()
      });
      const listFormatter = new Intl.ListFormat(locale, { style: "long", type: "conjunction" });
      timeZoneGroups2.forEach((group) => {
        const indexOffsets = [];
        let removedSoFar = 0;
        group.tzs.forEach((tz, index) => {
          if (timeZoneNameBlockList.includes(tz)) {
            removedSoFar++;
          }
          indexOffsets[index] = removedSoFar;
        });
        group.tzs = group.tzs.filter((tz) => !timeZoneNameBlockList.includes(tz));
        group.labelTzIndices = group.labelTzIndices.map((index) => index - indexOffsets[index]).filter((index) => index >= 0 && index < group.tzs.length);
      });
      return timeZoneGroups2.map(({ labelTzIndices, tzs }) => {
        const groupRepTz = tzs[0];
        const decimalOffset = timeZoneOffsetToDecimal(getTimeZoneShortOffset(groupRepTz, locale, referenceDateInMs));
        const value = toOffsetValue(groupRepTz, referenceDateInMs);
        const tzLabels = labelTzIndices.map((index) => {
          const timeZone = tzs[index];
          const timeZoneLabel = messages[timeZone];
          return timeZoneLabel || // get city token
          timeZone.split("/").pop();
        });
        const label = createTimeZoneOffsetLabel(messages, decimalOffset, listFormatter.format(tzLabels));
        return {
          label,
          value,
          filterValue: tzs.map((tz) => toUserFriendlyName(tz))
        };
      }).filter((group) => !!group).sort((groupA, groupB) => groupA.value - groupB.value);
    });
  }
  return timeZoneNames.map((timeZone) => {
    const label = toUserFriendlyName(timeZone);
    const value = timeZone;
    return {
      label,
      value,
      filterValue: timeZone
    };
  }).filter((group) => !!group).sort();
}
function toUserFriendlyName(timeZoneName) {
  return timeZoneName.replace(/_/g, " ");
}
function createTimeZoneOffsetLabel(messages, offsetLabel, groupLabel) {
  return messages.timeZoneLabel.replace("{offset}", offsetLabel).replace("{cities}", groupLabel);
}
function getTimeZoneShortOffset(timeZone, locale, referenceDateInMs = Date.now()) {
  const dateTimeFormat = getDateTimeFormat(locale, { timeZone, timeZoneName: "shortOffset" });
  const parts = dateTimeFormat.formatToParts(referenceDateInMs);
  return parts.find(({ type }) => type === "timeZoneName").value;
}
var inputTimeZoneCss = ":host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{display:block}:host([hidden]){display:none}[hidden]{display:none}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}.interaction-container{display:contents}::slotted(input[slot=hidden-form-input]){margin:0 !important;opacity:0 !important;outline:none !important;padding:0 !important;position:absolute !important;inset:0 !important;transform:none !important;-webkit-appearance:none !important;z-index:-1 !important}";
var InputTimeZone = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.calciteInputTimeZoneBeforeClose = createEvent(this, "calciteInputTimeZoneBeforeClose", 6);
    this.calciteInputTimeZoneBeforeOpen = createEvent(this, "calciteInputTimeZoneBeforeOpen", 6);
    this.calciteInputTimeZoneChange = createEvent(this, "calciteInputTimeZoneChange", 6);
    this.calciteInputTimeZoneClose = createEvent(this, "calciteInputTimeZoneClose", 6);
    this.calciteInputTimeZoneOpen = createEvent(this, "calciteInputTimeZoneOpen", 6);
    this.setComboboxRef = (el) => {
      this.comboboxEl = el;
    };
    this.onComboboxBeforeClose = (event) => {
      event.stopPropagation();
      this.calciteInputTimeZoneBeforeClose.emit();
    };
    this.onComboboxBeforeOpen = (event) => {
      event.stopPropagation();
      this.calciteInputTimeZoneBeforeOpen.emit();
    };
    this.onComboboxChange = (event) => {
      event.stopPropagation();
      const combobox = event.target;
      const selected = this.findTimeZoneItem(combobox.selectedItems[0].getAttribute("data-value"));
      const selectedValue = `${selected.value}`;
      if (this.value === selectedValue) {
        return;
      }
      this.value = selectedValue;
      this.selectedTimeZoneItem = selected;
      this.calciteInputTimeZoneChange.emit();
    };
    this.onComboboxClose = (event) => {
      event.stopPropagation();
      this.open = false;
      this.calciteInputTimeZoneClose.emit();
    };
    this.onComboboxOpen = (event) => {
      this.open = true;
      event.stopPropagation();
      this.calciteInputTimeZoneOpen.emit();
    };
    this.disabled = false;
    this.form = void 0;
    this.maxItems = 0;
    this.messages = void 0;
    this.messageOverrides = void 0;
    this.mode = "offset";
    this.validationMessage = void 0;
    this.validationIcon = void 0;
    this.name = void 0;
    this.open = false;
    this.overlayPositioning = "absolute";
    this.referenceDate = void 0;
    this.required = false;
    this.scale = "m";
    this.status = "idle";
    this.value = void 0;
    this.defaultMessages = void 0;
    this.effectiveLocale = "";
  }
  onMessagesChange() {
  }
  handleTimeZoneItemPropsChange() {
    this.updateTimeZoneItemsAndSelection();
  }
  handleValueChange(value, oldValue) {
    const timeZoneItem = this.findTimeZoneItem(value);
    if (!timeZoneItem) {
      this.value = oldValue;
      return;
    }
    this.selectedTimeZoneItem = timeZoneItem;
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  async setFocus() {
    await componentFocusable(this);
    await this.comboboxEl.setFocus();
  }
  effectiveLocaleWatcher() {
    updateMessages(this, this.effectiveLocale);
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  onLabelClick() {
    this.setFocus();
  }
  findTimeZoneItem(value) {
    const valueToMatch = value;
    return this.timeZoneItems.find(({ value: value2 }) => (
      // intentional == to match string to number
      value2 == valueToMatch
    ));
  }
  async updateTimeZoneItemsAndSelection() {
    this.timeZoneItems = await this.createTimeZoneItems();
    const fallbackValue = this.mode === "offset" ? getUserTimeZoneOffset() : getUserTimeZoneName();
    const valueToMatch = this.value ?? fallbackValue;
    this.selectedTimeZoneItem = this.findTimeZoneItem(valueToMatch);
    if (!this.selectedTimeZoneItem) {
      this.selectedTimeZoneItem = this.findTimeZoneItem(fallbackValue);
    }
  }
  async createTimeZoneItems() {
    if (!this.effectiveLocale || !this.messages) {
      return [];
    }
    return createTimeZoneItems(this.effectiveLocale, this.messages, this.mode, this.referenceDate instanceof Date ? this.referenceDate : new Date(this.referenceDate ?? Date.now()));
  }
  // --------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  connectedCallback() {
    connectForm(this);
    connectLabel(this);
    connectLocalized(this);
    connectMessages(this);
  }
  disconnectedCallback() {
    disconnectForm(this);
    disconnectLabel(this);
    disconnectLocalized(this);
    disconnectMessages(this);
  }
  async componentWillLoad() {
    setUpLoadableComponent(this);
    await setUpMessages(this);
    await this.updateTimeZoneItemsAndSelection();
    const selectedValue = `${this.selectedTimeZoneItem.value}`;
    afterConnectDefaultValueSet(this, selectedValue);
    this.value = selectedValue;
  }
  componentDidLoad() {
    setComponentLoaded(this);
  }
  componentDidRender() {
    updateHostInteraction(this);
  }
  render() {
    return h(Host, null, h(InteractiveContainer, { disabled: this.disabled }, h("calcite-combobox", {
      clearDisabled: true,
      disabled: this.disabled,
      label: this.messages.chooseTimeZone,
      lang: this.effectiveLocale,
      maxItems: this.maxItems,
      onCalciteComboboxBeforeClose: this.onComboboxBeforeClose,
      onCalciteComboboxBeforeOpen: this.onComboboxBeforeOpen,
      onCalciteComboboxChange: this.onComboboxChange,
      onCalciteComboboxClose: this.onComboboxClose,
      onCalciteComboboxOpen: this.onComboboxOpen,
      open: this.open,
      overlayPositioning: this.overlayPositioning,
      scale: this.scale,
      selectionMode: "single-persist",
      status: this.status,
      "validation-icon": this.validationIcon,
      "validation-message": this.validationMessage,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.setComboboxRef
    }, this.timeZoneItems.map((group) => {
      const selected = this.selectedTimeZoneItem === group;
      const { label, value } = group;
      return h("calcite-combobox-item", { "data-value": value, key: label, selected, textLabel: label, value: `${group.filterValue}` });
    })), h(HiddenFormInputSlot, { component: this })));
  }
  static get delegatesFocus() {
    return true;
  }
  static get assetsDirs() {
    return ["assets"];
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "messageOverrides": ["onMessagesChange"],
      "messages": ["handleTimeZoneItemPropsChange"],
      "mode": ["handleTimeZoneItemPropsChange"],
      "referenceDate": ["handleTimeZoneItemPropsChange"],
      "value": ["handleValueChange"],
      "effectiveLocale": ["effectiveLocaleWatcher"]
    };
  }
};
InputTimeZone.style = inputTimeZoneCss;
export {
  InputTimeZone as calcite_input_time_zone
};
/*! Bundled license information:

@esri/calcite-components/dist/esm/calcite-input-time-zone.entry.js:
  (*!
   * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
   * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
   * v2.6.0
   *)
*/
//# sourceMappingURL=calcite-input-time-zone.entry-4M3FWUT4.js.map
