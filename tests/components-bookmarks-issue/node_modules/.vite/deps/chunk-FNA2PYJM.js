import {
  __glob
} from "./chunk-Z4ZPL3B3.js";

// import("./**/*.entry.js") in node_modules/@esri/calcite-components/dist/esm/index-2e6dbb80.js
var globImport_entry_js = __glob({
  "./calcite-accordion_2.entry.js": () => import("./calcite-accordion_2.entry-ZRYCOFSO.js"),
  "./calcite-action-bar.entry.js": () => import("./calcite-action-bar.entry-AQCDE2MO.js"),
  "./calcite-action-group.entry.js": () => import("./calcite-action-group.entry-ACYOBWFQ.js"),
  "./calcite-action-menu.entry.js": () => import("./calcite-action-menu.entry-HJD6HDYJ.js"),
  "./calcite-action-pad.entry.js": () => import("./calcite-action-pad.entry-W6V2IZY6.js"),
  "./calcite-action.entry.js": () => import("./calcite-action.entry-6VMMCPFK.js"),
  "./calcite-alert.entry.js": () => import("./calcite-alert.entry-C2ZYLYWF.js"),
  "./calcite-avatar.entry.js": () => import("./calcite-avatar.entry-B6SY2AAX.js"),
  "./calcite-block_2.entry.js": () => import("./calcite-block_2.entry-BDPOONKI.js"),
  "./calcite-button.entry.js": () => import("./calcite-button.entry-LOZDMGJ4.js"),
  "./calcite-card-group.entry.js": () => import("./calcite-card-group.entry-ZPGCCBZO.js"),
  "./calcite-card.entry.js": () => import("./calcite-card.entry-3C57M2MD.js"),
  "./calcite-checkbox.entry.js": () => import("./calcite-checkbox.entry-UVWND27Z.js"),
  "./calcite-chip-group.entry.js": () => import("./calcite-chip-group.entry-ORQL2CMJ.js"),
  "./calcite-chip.entry.js": () => import("./calcite-chip.entry-E6JANUZM.js"),
  "./calcite-color-picker_3.entry.js": () => import("./calcite-color-picker_3.entry-BSS7OOIW.js"),
  "./calcite-combobox_3.entry.js": () => import("./calcite-combobox_3.entry-5OTVGAFU.js"),
  "./calcite-date-picker_4.entry.js": () => import("./calcite-date-picker_4.entry-6EPUZOBT.js"),
  "./calcite-dropdown_3.entry.js": () => import("./calcite-dropdown_3.entry-G24ADITH.js"),
  "./calcite-fab.entry.js": () => import("./calcite-fab.entry-MXMZIU3C.js"),
  "./calcite-filter.entry.js": () => import("./calcite-filter.entry-IHENXLNC.js"),
  "./calcite-flow-item.entry.js": () => import("./calcite-flow-item.entry-V7G6BIKA.js"),
  "./calcite-flow.entry.js": () => import("./calcite-flow.entry-UE2LBH3P.js"),
  "./calcite-graph_2.entry.js": () => import("./calcite-graph_2.entry-PUINNCXO.js"),
  "./calcite-handle.entry.js": () => import("./calcite-handle.entry-DYVY7XTT.js"),
  "./calcite-icon.entry.js": () => import("./calcite-icon.entry-FX7MUWYA.js"),
  "./calcite-inline-editable.entry.js": () => import("./calcite-inline-editable.entry-57NLDRFU.js"),
  "./calcite-input-date-picker.entry.js": () => import("./calcite-input-date-picker.entry-OMBC5QBJ.js"),
  "./calcite-input-message.entry.js": () => import("./calcite-input-message.entry-7AJJU5B6.js"),
  "./calcite-input-number.entry.js": () => import("./calcite-input-number.entry-UIGIE4RU.js"),
  "./calcite-input-text.entry.js": () => import("./calcite-input-text.entry-5KVPQ6XC.js"),
  "./calcite-input-time-picker_2.entry.js": () => import("./calcite-input-time-picker_2.entry-BZQUNZBP.js"),
  "./calcite-input-time-zone.entry.js": () => import("./calcite-input-time-zone.entry-4M3FWUT4.js"),
  "./calcite-input.entry.js": () => import("./calcite-input.entry-MP6QCIIJ.js"),
  "./calcite-label.entry.js": () => import("./calcite-label.entry-HEKDU2JH.js"),
  "./calcite-link.entry.js": () => import("./calcite-link.entry-LQKBDNCI.js"),
  "./calcite-list_3.entry.js": () => import("./calcite-list_3.entry-3Y2JJUTB.js"),
  "./calcite-loader.entry.js": () => import("./calcite-loader.entry-O2AMO23U.js"),
  "./calcite-menu_2.entry.js": () => import("./calcite-menu_2.entry-QBFLZS54.js"),
  "./calcite-meter.entry.js": () => import("./calcite-meter.entry-W4TJPXFJ.js"),
  "./calcite-modal.entry.js": () => import("./calcite-modal.entry-6DJYIJV7.js"),
  "./calcite-navigation_3.entry.js": () => import("./calcite-navigation_3.entry-GYZM2SOX.js"),
  "./calcite-notice.entry.js": () => import("./calcite-notice.entry-FG2JSL6K.js"),
  "./calcite-option_3.entry.js": () => import("./calcite-option_3.entry-4XV6XCZR.js"),
  "./calcite-pagination.entry.js": () => import("./calcite-pagination.entry-PKADHIDD.js"),
  "./calcite-panel.entry.js": () => import("./calcite-panel.entry-77UYANDU.js"),
  "./calcite-pick-list_3.entry.js": () => import("./calcite-pick-list_3.entry-IICBNHK6.js"),
  "./calcite-popover.entry.js": () => import("./calcite-popover.entry-XWJJL2JA.js"),
  "./calcite-progress.entry.js": () => import("./calcite-progress.entry-X2ONVVUU.js"),
  "./calcite-radio-button-group.entry.js": () => import("./calcite-radio-button-group.entry-ZUXBG5EQ.js"),
  "./calcite-radio-button.entry.js": () => import("./calcite-radio-button.entry-HELIXB4D.js"),
  "./calcite-rating.entry.js": () => import("./calcite-rating.entry-ANI4ITEB.js"),
  "./calcite-scrim.entry.js": () => import("./calcite-scrim.entry-LY6AFS4M.js"),
  "./calcite-segmented-control_2.entry.js": () => import("./calcite-segmented-control_2.entry-NLDXSROZ.js"),
  "./calcite-sheet.entry.js": () => import("./calcite-sheet.entry-UWMCTJKI.js"),
  "./calcite-shell_3.entry.js": () => import("./calcite-shell_3.entry-S5RBCTH5.js"),
  "./calcite-sortable-list.entry.js": () => import("./calcite-sortable-list.entry-2BYS7AL3.js"),
  "./calcite-split-button.entry.js": () => import("./calcite-split-button.entry-OW3VGYEX.js"),
  "./calcite-stack.entry.js": () => import("./calcite-stack.entry-CDKYRWKX.js"),
  "./calcite-stepper_2.entry.js": () => import("./calcite-stepper_2.entry-4OSPKP5S.js"),
  "./calcite-switch.entry.js": () => import("./calcite-switch.entry-6MKUX7YX.js"),
  "./calcite-tab_4.entry.js": () => import("./calcite-tab_4.entry-R6VBOZHQ.js"),
  "./calcite-table-cell_2.entry.js": () => import("./calcite-table-cell_2.entry-5OPJ5GV2.js"),
  "./calcite-table-row.entry.js": () => import("./calcite-table-row.entry-LJT3BPLS.js"),
  "./calcite-table.entry.js": () => import("./calcite-table.entry-7SUR2PTN.js"),
  "./calcite-text-area.entry.js": () => import("./calcite-text-area.entry-I7MH4XNH.js"),
  "./calcite-tile-group.entry.js": () => import("./calcite-tile-group.entry-VLQOW64B.js"),
  "./calcite-tile-select_2.entry.js": () => import("./calcite-tile-select_2.entry-VCT5SEGG.js"),
  "./calcite-tile.entry.js": () => import("./calcite-tile.entry-HK4ZVMD7.js"),
  "./calcite-tip_3.entry.js": () => import("./calcite-tip_3.entry-VU2AHRHV.js"),
  "./calcite-tooltip.entry.js": () => import("./calcite-tooltip.entry-ARL5S3ME.js"),
  "./calcite-tree_2.entry.js": () => import("./calcite-tree_2.entry-JRJKCEN6.js"),
  "./calcite-value-list_2.entry.js": () => import("./calcite-value-list_2.entry-72P3Z5GH.js")
});

// node_modules/@esri/calcite-components/dist/esm/index-2e6dbb80.js
var NAMESPACE = "calcite";
var scopeId;
var hostTagName;
var isSvgMode = false;
var queuePending = false;
var getAssetPath = (path) => {
  const assetUrl = new URL(path, plt.$resourcesUrl$);
  return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;
};
var createTime = (fnName, tagName = "") => {
  {
    return () => {
      return;
    };
  }
};
var uniqueTime = (key, measureText) => {
  {
    return () => {
      return;
    };
  }
};
var CONTENT_REF_ID = "r";
var ORG_LOCATION_ID = "o";
var SLOT_NODE_ID = "s";
var TEXT_NODE_ID = "t";
var HYDRATE_ID = "s-id";
var HYDRATED_STYLE_ID = "sty-id";
var HYDRATE_CHILD_ID = "c-id";
var HYDRATED_CSS = "{visibility:hidden}[calcite-hydrated]{visibility:inherit}";
var SLOT_FB_CSS = "slot-fb{display:contents}slot-fb[hidden]{display:none}";
var XLINK_NS = "http://www.w3.org/1999/xlink";
var EMPTY_OBJ = {};
var SVG_NS = "http://www.w3.org/2000/svg";
var HTML_NS = "http://www.w3.org/1999/xhtml";
var isDef = (v) => v != null;
var isComplexType = (o) => {
  o = typeof o;
  return o === "object" || o === "function";
};
function queryNonceMetaTagContent(doc2) {
  var _a, _b, _c;
  return (_c = (_b = (_a = doc2.head) === null || _a === void 0 ? void 0 : _a.querySelector('meta[name="csp-nonce"]')) === null || _b === void 0 ? void 0 : _b.getAttribute("content")) !== null && _c !== void 0 ? _c : void 0;
}
var h = (nodeName, vnodeData, ...children) => {
  let child = null;
  let key = null;
  let simple = false;
  let lastSimple = false;
  const vNodeChildren = [];
  const walk = (c) => {
    for (let i = 0; i < c.length; i++) {
      child = c[i];
      if (Array.isArray(child)) {
        walk(child);
      } else if (child != null && typeof child !== "boolean") {
        if (simple = typeof nodeName !== "function" && !isComplexType(child)) {
          child = String(child);
        }
        if (simple && lastSimple) {
          vNodeChildren[vNodeChildren.length - 1].$text$ += child;
        } else {
          vNodeChildren.push(simple ? newVNode(null, child) : child);
        }
        lastSimple = simple;
      }
    }
  };
  walk(children);
  if (vnodeData) {
    if (vnodeData.key) {
      key = vnodeData.key;
    }
    {
      const classData = vnodeData.className || vnodeData.class;
      if (classData) {
        vnodeData.class = typeof classData !== "object" ? classData : Object.keys(classData).filter((k) => classData[k]).join(" ");
      }
    }
  }
  if (typeof nodeName === "function") {
    return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);
  }
  const vnode = newVNode(nodeName, null);
  vnode.$attrs$ = vnodeData;
  if (vNodeChildren.length > 0) {
    vnode.$children$ = vNodeChildren;
  }
  {
    vnode.$key$ = key;
  }
  return vnode;
};
var newVNode = (tag, text) => {
  const vnode = {
    $flags$: 0,
    $tag$: tag,
    $text$: text,
    $elm$: null,
    $children$: null
  };
  {
    vnode.$attrs$ = null;
  }
  {
    vnode.$key$ = null;
  }
  return vnode;
};
var Host = {};
var isHost = (node) => node && node.$tag$ === Host;
var vdomFnUtils = {
  forEach: (children, cb) => children.map(convertToPublic).forEach(cb),
  map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate)
};
var convertToPublic = (node) => ({
  vattrs: node.$attrs$,
  vchildren: node.$children$,
  vkey: node.$key$,
  vname: node.$name$,
  vtag: node.$tag$,
  vtext: node.$text$
});
var convertToPrivate = (node) => {
  if (typeof node.vtag === "function") {
    const vnodeData = Object.assign({}, node.vattrs);
    if (node.vkey) {
      vnodeData.key = node.vkey;
    }
    if (node.vname) {
      vnodeData.name = node.vname;
    }
    return h(node.vtag, vnodeData, ...node.vchildren || []);
  }
  const vnode = newVNode(node.vtag, node.vtext);
  vnode.$attrs$ = node.vattrs;
  vnode.$children$ = node.vchildren;
  vnode.$key$ = node.vkey;
  vnode.$name$ = node.vname;
  return vnode;
};
var initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {
  const endHydrate = createTime("hydrateClient", tagName);
  const shadowRoot = hostElm.shadowRoot;
  const childRenderNodes = [];
  const slotNodes = [];
  const shadowRootNodes = shadowRoot ? [] : null;
  const vnode = hostRef.$vnode$ = newVNode(tagName, null);
  if (!plt.$orgLocNodes$) {
    initializeDocumentHydrate(doc.body, plt.$orgLocNodes$ = /* @__PURE__ */ new Map());
  }
  hostElm[HYDRATE_ID] = hostId;
  hostElm.removeAttribute(HYDRATE_ID);
  clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);
  childRenderNodes.map((c) => {
    const orgLocationId = c.$hostId$ + "." + c.$nodeId$;
    const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);
    const node = c.$elm$;
    if (orgLocationNode && supportsShadow && orgLocationNode["s-en"] === "") {
      orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);
    }
    if (!shadowRoot) {
      node["s-hn"] = tagName;
      if (orgLocationNode) {
        node["s-ol"] = orgLocationNode;
        node["s-ol"]["s-nr"] = node;
      }
    }
    plt.$orgLocNodes$.delete(orgLocationId);
  });
  if (shadowRoot) {
    shadowRootNodes.map((shadowRootNode) => {
      if (shadowRootNode) {
        shadowRoot.appendChild(shadowRootNode);
      }
    });
  }
  endHydrate();
};
var clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) => {
  let childNodeType;
  let childIdSplt;
  let childVNode;
  let i;
  if (node.nodeType === 1) {
    childNodeType = node.getAttribute(HYDRATE_CHILD_ID);
    if (childNodeType) {
      childIdSplt = childNodeType.split(".");
      if (childIdSplt[0] === hostId || childIdSplt[0] === "0") {
        childVNode = {
          $flags$: 0,
          $hostId$: childIdSplt[0],
          $nodeId$: childIdSplt[1],
          $depth$: childIdSplt[2],
          $index$: childIdSplt[3],
          $tag$: node.tagName.toLowerCase(),
          $elm$: node,
          $attrs$: null,
          $children$: null,
          $key$: null,
          $name$: null,
          $text$: null
        };
        childRenderNodes.push(childVNode);
        node.removeAttribute(HYDRATE_CHILD_ID);
        if (!parentVNode.$children$) {
          parentVNode.$children$ = [];
        }
        parentVNode.$children$[childVNode.$index$] = childVNode;
        parentVNode = childVNode;
        if (shadowRootNodes && childVNode.$depth$ === "0") {
          shadowRootNodes[childVNode.$index$] = childVNode.$elm$;
        }
      }
    }
    for (i = node.childNodes.length - 1; i >= 0; i--) {
      clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);
    }
    if (node.shadowRoot) {
      for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {
        clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);
      }
    }
  } else if (node.nodeType === 8) {
    childIdSplt = node.nodeValue.split(".");
    if (childIdSplt[1] === hostId || childIdSplt[1] === "0") {
      childNodeType = childIdSplt[0];
      childVNode = {
        $flags$: 0,
        $hostId$: childIdSplt[1],
        $nodeId$: childIdSplt[2],
        $depth$: childIdSplt[3],
        $index$: childIdSplt[4],
        $elm$: node,
        $attrs$: null,
        $children$: null,
        $key$: null,
        $name$: null,
        $tag$: null,
        $text$: null
      };
      if (childNodeType === TEXT_NODE_ID) {
        childVNode.$elm$ = node.nextSibling;
        if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3) {
          childVNode.$text$ = childVNode.$elm$.textContent;
          childRenderNodes.push(childVNode);
          node.remove();
          if (!parentVNode.$children$) {
            parentVNode.$children$ = [];
          }
          parentVNode.$children$[childVNode.$index$] = childVNode;
          if (shadowRootNodes && childVNode.$depth$ === "0") {
            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;
          }
        }
      } else if (childVNode.$hostId$ === hostId) {
        if (childNodeType === SLOT_NODE_ID) {
          childVNode.$tag$ = "slot";
          if (childIdSplt[5]) {
            node["s-sn"] = childVNode.$name$ = childIdSplt[5];
          } else {
            node["s-sn"] = "";
          }
          node["s-sr"] = true;
          if (shadowRootNodes) {
            childVNode.$elm$ = doc.createElement(childVNode.$tag$);
            if (childVNode.$name$) {
              childVNode.$elm$.setAttribute("name", childVNode.$name$);
            }
            node.parentNode.insertBefore(childVNode.$elm$, node);
            node.remove();
            if (childVNode.$depth$ === "0") {
              shadowRootNodes[childVNode.$index$] = childVNode.$elm$;
            }
          }
          slotNodes.push(childVNode);
          if (!parentVNode.$children$) {
            parentVNode.$children$ = [];
          }
          parentVNode.$children$[childVNode.$index$] = childVNode;
        } else if (childNodeType === CONTENT_REF_ID) {
          if (shadowRootNodes) {
            node.remove();
          }
        }
      }
    }
  } else if (parentVNode && parentVNode.$tag$ === "style") {
    const vnode = newVNode(null, node.textContent);
    vnode.$elm$ = node;
    vnode.$index$ = "0";
    parentVNode.$children$ = [vnode];
  }
};
var initializeDocumentHydrate = (node, orgLocNodes) => {
  if (node.nodeType === 1) {
    let i = 0;
    for (; i < node.childNodes.length; i++) {
      initializeDocumentHydrate(node.childNodes[i], orgLocNodes);
    }
    if (node.shadowRoot) {
      for (i = 0; i < node.shadowRoot.childNodes.length; i++) {
        initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);
      }
    }
  } else if (node.nodeType === 8) {
    const childIdSplt = node.nodeValue.split(".");
    if (childIdSplt[0] === ORG_LOCATION_ID) {
      orgLocNodes.set(childIdSplt[1] + "." + childIdSplt[2], node);
      node.nodeValue = "";
      node["s-en"] = childIdSplt[3];
    }
  }
};
var parsePropertyValue = (propValue, propType) => {
  if (propValue != null && !isComplexType(propValue)) {
    if (propType & 4) {
      return propValue === "false" ? false : propValue === "" || !!propValue;
    }
    if (propType & 2) {
      return parseFloat(propValue);
    }
    if (propType & 1) {
      return String(propValue);
    }
    return propValue;
  }
  return propValue;
};
var getElement = (ref) => getHostRef(ref).$hostElement$;
var createEvent = (ref, name, flags) => {
  const elm = getElement(ref);
  return {
    emit: (detail) => {
      return emitEvent(elm, name, {
        bubbles: !!(flags & 4),
        composed: !!(flags & 2),
        cancelable: !!(flags & 1),
        detail
      });
    }
  };
};
var emitEvent = (elm, name, opts) => {
  const ev = plt.ce(name, opts);
  elm.dispatchEvent(ev);
  return ev;
};
var rootAppliedStyles = /* @__PURE__ */ new WeakMap();
var registerStyle = (scopeId2, cssText, allowCS) => {
  let style = styles.get(scopeId2);
  if (supportsConstructableStylesheets && allowCS) {
    style = style || new CSSStyleSheet();
    if (typeof style === "string") {
      style = cssText;
    } else {
      style.replaceSync(cssText);
    }
  } else {
    style = cssText;
  }
  styles.set(scopeId2, style);
};
var addStyle = (styleContainerNode, cmpMeta, mode) => {
  var _a;
  const scopeId2 = getScopeId(cmpMeta);
  const style = styles.get(scopeId2);
  styleContainerNode = styleContainerNode.nodeType === 11 ? styleContainerNode : doc;
  if (style) {
    if (typeof style === "string") {
      styleContainerNode = styleContainerNode.head || styleContainerNode;
      let appliedStyles = rootAppliedStyles.get(styleContainerNode);
      let styleElm;
      if (!appliedStyles) {
        rootAppliedStyles.set(styleContainerNode, appliedStyles = /* @__PURE__ */ new Set());
      }
      if (!appliedStyles.has(scopeId2)) {
        if (styleContainerNode.host && (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}="${scopeId2}"]`))) {
          styleElm.innerHTML = style;
        } else {
          styleElm = doc.createElement("style");
          styleElm.innerHTML = style;
          const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);
          if (nonce != null) {
            styleElm.setAttribute("nonce", nonce);
          }
          styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector("link"));
        }
        if (cmpMeta.$flags$ & 4) {
          styleElm.innerHTML += SLOT_FB_CSS;
        }
        if (appliedStyles) {
          appliedStyles.add(scopeId2);
        }
      }
    } else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {
      styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];
    }
  }
  return scopeId2;
};
var attachStyles = (hostRef) => {
  const cmpMeta = hostRef.$cmpMeta$;
  const elm = hostRef.$hostElement$;
  const flags = cmpMeta.$flags$;
  const endAttachStyles = createTime("attachStyles", cmpMeta.$tagName$);
  const scopeId2 = addStyle(elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta);
  if (flags & 10) {
    elm["s-sc"] = scopeId2;
    elm.classList.add(scopeId2 + "-h");
  }
  endAttachStyles();
};
var getScopeId = (cmp, mode) => "sc-" + cmp.$tagName$;
var convertScopedToShadow = (css) => css.replace(/\/\*!@([^\/]+)\*\/[^\{]+\{/g, "$1{");
var setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {
  if (oldValue !== newValue) {
    let isProp = isMemberInElement(elm, memberName);
    let ln = memberName.toLowerCase();
    if (memberName === "class") {
      const classList = elm.classList;
      const oldClasses = parseClassList(oldValue);
      const newClasses = parseClassList(newValue);
      classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));
      classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));
    } else if (memberName === "style") {
      {
        for (const prop in oldValue) {
          if (!newValue || newValue[prop] == null) {
            if (prop.includes("-")) {
              elm.style.removeProperty(prop);
            } else {
              elm.style[prop] = "";
            }
          }
        }
      }
      for (const prop in newValue) {
        if (!oldValue || newValue[prop] !== oldValue[prop]) {
          if (prop.includes("-")) {
            elm.style.setProperty(prop, newValue[prop]);
          } else {
            elm.style[prop] = newValue[prop];
          }
        }
      }
    } else if (memberName === "key")
      ;
    else if (memberName === "ref") {
      if (newValue) {
        newValue(elm);
      }
    } else if (!isProp && memberName[0] === "o" && memberName[1] === "n") {
      if (memberName[2] === "-") {
        memberName = memberName.slice(3);
      } else if (isMemberInElement(win, ln)) {
        memberName = ln.slice(2);
      } else {
        memberName = ln[2] + memberName.slice(3);
      }
      if (oldValue || newValue) {
        const capture = memberName.endsWith(CAPTURE_EVENT_SUFFIX);
        memberName = memberName.replace(CAPTURE_EVENT_REGEX, "");
        if (oldValue) {
          plt.rel(elm, memberName, oldValue, capture);
        }
        if (newValue) {
          plt.ael(elm, memberName, newValue, capture);
        }
      }
    } else {
      const isComplex = isComplexType(newValue);
      if ((isProp || isComplex && newValue !== null) && !isSvg) {
        try {
          if (!elm.tagName.includes("-")) {
            const n = newValue == null ? "" : newValue;
            if (memberName === "list") {
              isProp = false;
            } else if (oldValue == null || elm[memberName] != n) {
              elm[memberName] = n;
            }
          } else {
            elm[memberName] = newValue;
          }
        } catch (e) {
        }
      }
      let xlink = false;
      {
        if (ln !== (ln = ln.replace(/^xlink\:?/, ""))) {
          memberName = ln;
          xlink = true;
        }
      }
      if (newValue == null || newValue === false) {
        if (newValue !== false || elm.getAttribute(memberName) === "") {
          if (xlink) {
            elm.removeAttributeNS(XLINK_NS, memberName);
          } else {
            elm.removeAttribute(memberName);
          }
        }
      } else if ((!isProp || flags & 4 || isSvg) && !isComplex) {
        newValue = newValue === true ? "" : newValue;
        if (xlink) {
          elm.setAttributeNS(XLINK_NS, memberName, newValue);
        } else {
          elm.setAttribute(memberName, newValue);
        }
      }
    }
  }
};
var parseClassListRegex = /\s/;
var parseClassList = (value) => !value ? [] : value.split(parseClassListRegex);
var CAPTURE_EVENT_SUFFIX = "Capture";
var CAPTURE_EVENT_REGEX = new RegExp(CAPTURE_EVENT_SUFFIX + "$");
var updateElement = (oldVnode, newVnode, isSvgMode2, memberName) => {
  const elm = newVnode.$elm$.nodeType === 11 && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;
  const oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || EMPTY_OBJ;
  const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;
  {
    for (memberName in oldVnodeAttrs) {
      if (!(memberName in newVnodeAttrs)) {
        setAccessor(elm, memberName, oldVnodeAttrs[memberName], void 0, isSvgMode2, newVnode.$flags$);
      }
    }
  }
  for (memberName in newVnodeAttrs) {
    setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode2, newVnode.$flags$);
  }
};
var createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {
  const newVNode2 = newParentVNode.$children$[childIndex];
  let i = 0;
  let elm;
  let childNode;
  if (newVNode2.$text$ !== null) {
    elm = newVNode2.$elm$ = doc.createTextNode(newVNode2.$text$);
  } else {
    if (!isSvgMode) {
      isSvgMode = newVNode2.$tag$ === "svg";
    }
    elm = newVNode2.$elm$ = doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, newVNode2.$tag$);
    if (isSvgMode && newVNode2.$tag$ === "foreignObject") {
      isSvgMode = false;
    }
    {
      updateElement(null, newVNode2, isSvgMode);
    }
    if (isDef(scopeId) && elm["s-si"] !== scopeId) {
      elm.classList.add(elm["s-si"] = scopeId);
    }
    if (newVNode2.$children$) {
      for (i = 0; i < newVNode2.$children$.length; ++i) {
        childNode = createElm(oldParentVNode, newVNode2, i);
        if (childNode) {
          elm.appendChild(childNode);
        }
      }
    }
    {
      if (newVNode2.$tag$ === "svg") {
        isSvgMode = false;
      } else if (elm.tagName === "foreignObject") {
        isSvgMode = true;
      }
    }
  }
  elm["s-hn"] = hostTagName;
  return elm;
};
var addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {
  let containerElm = parentElm;
  let childNode;
  if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {
    containerElm = containerElm.shadowRoot;
  }
  for (; startIdx <= endIdx; ++startIdx) {
    if (vnodes[startIdx]) {
      childNode = createElm(null, parentVNode, startIdx);
      if (childNode) {
        vnodes[startIdx].$elm$ = childNode;
        containerElm.insertBefore(childNode, before);
      }
    }
  }
};
var removeVnodes = (vnodes, startIdx, endIdx) => {
  for (let index = startIdx; index <= endIdx; ++index) {
    const vnode = vnodes[index];
    if (vnode) {
      const elm = vnode.$elm$;
      nullifyVNodeRefs(vnode);
      if (elm) {
        elm.remove();
      }
    }
  }
};
var updateChildren = (parentElm, oldCh, newVNode2, newCh, isInitialRender = false) => {
  let oldStartIdx = 0;
  let newStartIdx = 0;
  let idxInOld = 0;
  let i = 0;
  let oldEndIdx = oldCh.length - 1;
  let oldStartVnode = oldCh[0];
  let oldEndVnode = oldCh[oldEndIdx];
  let newEndIdx = newCh.length - 1;
  let newStartVnode = newCh[0];
  let newEndVnode = newCh[newEndIdx];
  let node;
  let elmToMove;
  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
    if (oldStartVnode == null) {
      oldStartVnode = oldCh[++oldStartIdx];
    } else if (oldEndVnode == null) {
      oldEndVnode = oldCh[--oldEndIdx];
    } else if (newStartVnode == null) {
      newStartVnode = newCh[++newStartIdx];
    } else if (newEndVnode == null) {
      newEndVnode = newCh[--newEndIdx];
    } else if (isSameVnode(oldStartVnode, newStartVnode, isInitialRender)) {
      patch(oldStartVnode, newStartVnode, isInitialRender);
      oldStartVnode = oldCh[++oldStartIdx];
      newStartVnode = newCh[++newStartIdx];
    } else if (isSameVnode(oldEndVnode, newEndVnode, isInitialRender)) {
      patch(oldEndVnode, newEndVnode, isInitialRender);
      oldEndVnode = oldCh[--oldEndIdx];
      newEndVnode = newCh[--newEndIdx];
    } else if (isSameVnode(oldStartVnode, newEndVnode, isInitialRender)) {
      patch(oldStartVnode, newEndVnode, isInitialRender);
      parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);
      oldStartVnode = oldCh[++oldStartIdx];
      newEndVnode = newCh[--newEndIdx];
    } else if (isSameVnode(oldEndVnode, newStartVnode, isInitialRender)) {
      patch(oldEndVnode, newStartVnode, isInitialRender);
      parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);
      oldEndVnode = oldCh[--oldEndIdx];
      newStartVnode = newCh[++newStartIdx];
    } else {
      idxInOld = -1;
      {
        for (i = oldStartIdx; i <= oldEndIdx; ++i) {
          if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {
            idxInOld = i;
            break;
          }
        }
      }
      if (idxInOld >= 0) {
        elmToMove = oldCh[idxInOld];
        if (elmToMove.$tag$ !== newStartVnode.$tag$) {
          node = createElm(oldCh && oldCh[newStartIdx], newVNode2, idxInOld);
        } else {
          patch(elmToMove, newStartVnode, isInitialRender);
          oldCh[idxInOld] = void 0;
          node = elmToMove.$elm$;
        }
        newStartVnode = newCh[++newStartIdx];
      } else {
        node = createElm(oldCh && oldCh[newStartIdx], newVNode2, newStartIdx);
        newStartVnode = newCh[++newStartIdx];
      }
      if (node) {
        {
          oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);
        }
      }
    }
  }
  if (oldStartIdx > oldEndIdx) {
    addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode2, newCh, newStartIdx, newEndIdx);
  } else if (newStartIdx > newEndIdx) {
    removeVnodes(oldCh, oldStartIdx, oldEndIdx);
  }
};
var isSameVnode = (leftVNode, rightVNode, isInitialRender = false) => {
  if (leftVNode.$tag$ === rightVNode.$tag$) {
    if (!isInitialRender) {
      return leftVNode.$key$ === rightVNode.$key$;
    }
    return true;
  }
  return false;
};
var patch = (oldVNode, newVNode2, isInitialRender = false) => {
  const elm = newVNode2.$elm$ = oldVNode.$elm$;
  const oldChildren = oldVNode.$children$;
  const newChildren = newVNode2.$children$;
  const tag = newVNode2.$tag$;
  const text = newVNode2.$text$;
  if (text === null) {
    {
      isSvgMode = tag === "svg" ? true : tag === "foreignObject" ? false : isSvgMode;
    }
    {
      if (tag === "slot")
        ;
      else {
        updateElement(oldVNode, newVNode2, isSvgMode);
      }
    }
    if (oldChildren !== null && newChildren !== null) {
      updateChildren(elm, oldChildren, newVNode2, newChildren, isInitialRender);
    } else if (newChildren !== null) {
      if (oldVNode.$text$ !== null) {
        elm.textContent = "";
      }
      addVnodes(elm, null, newVNode2, newChildren, 0, newChildren.length - 1);
    } else if (oldChildren !== null) {
      removeVnodes(oldChildren, 0, oldChildren.length - 1);
    }
    if (isSvgMode && tag === "svg") {
      isSvgMode = false;
    }
  } else if (oldVNode.$text$ !== text) {
    elm.data = text;
  }
};
var nullifyVNodeRefs = (vNode) => {
  {
    vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);
    vNode.$children$ && vNode.$children$.map(nullifyVNodeRefs);
  }
};
var renderVdom = (hostRef, renderFnResults, isInitialLoad = false) => {
  const hostElm = hostRef.$hostElement$;
  const cmpMeta = hostRef.$cmpMeta$;
  const oldVNode = hostRef.$vnode$ || newVNode(null, null);
  const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);
  hostTagName = hostElm.tagName;
  if (cmpMeta.$attrsToReflect$) {
    rootVnode.$attrs$ = rootVnode.$attrs$ || {};
    cmpMeta.$attrsToReflect$.map(([propName, attribute]) => rootVnode.$attrs$[attribute] = hostElm[propName]);
  }
  if (isInitialLoad && rootVnode.$attrs$) {
    for (const key of Object.keys(rootVnode.$attrs$)) {
      if (hostElm.hasAttribute(key) && !["key", "ref", "style", "class"].includes(key)) {
        rootVnode.$attrs$[key] = hostElm[key];
      }
    }
  }
  rootVnode.$tag$ = null;
  rootVnode.$flags$ |= 4;
  hostRef.$vnode$ = rootVnode;
  rootVnode.$elm$ = oldVNode.$elm$ = hostElm.shadowRoot || hostElm;
  {
    scopeId = hostElm["s-sc"];
  }
  patch(oldVNode, rootVnode, isInitialLoad);
};
var attachToAncestor = (hostRef, ancestorComponent) => {
  if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent["s-p"]) {
    ancestorComponent["s-p"].push(new Promise((r) => hostRef.$onRenderResolve$ = r));
  }
};
var scheduleUpdate = (hostRef, isInitialLoad) => {
  {
    hostRef.$flags$ |= 16;
  }
  if (hostRef.$flags$ & 4) {
    hostRef.$flags$ |= 512;
    return;
  }
  attachToAncestor(hostRef, hostRef.$ancestorComponent$);
  const dispatch = () => dispatchHooks(hostRef, isInitialLoad);
  return writeTask(dispatch);
};
var dispatchHooks = (hostRef, isInitialLoad) => {
  const endSchedule = createTime("scheduleUpdate", hostRef.$cmpMeta$.$tagName$);
  const instance = hostRef.$lazyInstance$;
  let maybePromise;
  if (isInitialLoad) {
    {
      hostRef.$flags$ |= 256;
      if (hostRef.$queuedListeners$) {
        hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));
        hostRef.$queuedListeners$ = void 0;
      }
    }
    {
      maybePromise = safeCall(instance, "componentWillLoad");
    }
  }
  {
    maybePromise = enqueue(maybePromise, () => safeCall(instance, "componentWillRender"));
  }
  endSchedule();
  return enqueue(maybePromise, () => updateComponent(hostRef, instance, isInitialLoad));
};
var enqueue = (maybePromise, fn) => isPromisey(maybePromise) ? maybePromise.then(fn) : fn();
var isPromisey = (maybePromise) => maybePromise instanceof Promise || maybePromise && maybePromise.then && typeof maybePromise.then === "function";
var updateComponent = async (hostRef, instance, isInitialLoad) => {
  var _a;
  const elm = hostRef.$hostElement$;
  const endUpdate = createTime("update", hostRef.$cmpMeta$.$tagName$);
  const rc = elm["s-rc"];
  if (isInitialLoad) {
    attachStyles(hostRef);
  }
  const endRender = createTime("render", hostRef.$cmpMeta$.$tagName$);
  {
    callRender(hostRef, instance, elm, isInitialLoad);
  }
  if (rc) {
    rc.map((cb) => cb());
    elm["s-rc"] = void 0;
  }
  endRender();
  endUpdate();
  {
    const childrenPromises = (_a = elm["s-p"]) !== null && _a !== void 0 ? _a : [];
    const postUpdate = () => postUpdateComponent(hostRef);
    if (childrenPromises.length === 0) {
      postUpdate();
    } else {
      Promise.all(childrenPromises).then(postUpdate);
      hostRef.$flags$ |= 4;
      childrenPromises.length = 0;
    }
  }
};
var callRender = (hostRef, instance, elm, isInitialLoad) => {
  try {
    instance = instance.render();
    {
      hostRef.$flags$ &= ~16;
    }
    {
      hostRef.$flags$ |= 2;
    }
    {
      {
        {
          renderVdom(hostRef, instance, isInitialLoad);
        }
      }
    }
  } catch (e) {
    consoleError(e, hostRef.$hostElement$);
  }
  return null;
};
var postUpdateComponent = (hostRef) => {
  const tagName = hostRef.$cmpMeta$.$tagName$;
  const elm = hostRef.$hostElement$;
  const endPostUpdate = createTime("postUpdate", tagName);
  const instance = hostRef.$lazyInstance$;
  const ancestorComponent = hostRef.$ancestorComponent$;
  {
    safeCall(instance, "componentDidRender");
  }
  if (!(hostRef.$flags$ & 64)) {
    hostRef.$flags$ |= 64;
    {
      addHydratedFlag(elm);
    }
    {
      safeCall(instance, "componentDidLoad");
    }
    endPostUpdate();
    {
      hostRef.$onReadyResolve$(elm);
      if (!ancestorComponent) {
        appDidLoad();
      }
    }
  } else {
    {
      safeCall(instance, "componentDidUpdate");
    }
    endPostUpdate();
  }
  {
    hostRef.$onInstanceResolve$(elm);
  }
  {
    if (hostRef.$onRenderResolve$) {
      hostRef.$onRenderResolve$();
      hostRef.$onRenderResolve$ = void 0;
    }
    if (hostRef.$flags$ & 512) {
      nextTick(() => scheduleUpdate(hostRef, false));
    }
    hostRef.$flags$ &= ~(4 | 512);
  }
};
var forceUpdate = (ref) => {
  {
    const hostRef = getHostRef(ref);
    const isConnected = hostRef.$hostElement$.isConnected;
    if (isConnected && (hostRef.$flags$ & (2 | 16)) === 2) {
      scheduleUpdate(hostRef, false);
    }
    return isConnected;
  }
};
var appDidLoad = (who) => {
  {
    addHydratedFlag(doc.documentElement);
  }
  nextTick(() => emitEvent(win, "appload", { detail: { namespace: NAMESPACE } }));
};
var safeCall = (instance, method, arg) => {
  if (instance && instance[method]) {
    try {
      return instance[method](arg);
    } catch (e) {
      consoleError(e);
    }
  }
  return void 0;
};
var addHydratedFlag = (elm) => elm.setAttribute("calcite-hydrated", "");
var getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);
var setValue = (ref, propName, newVal, cmpMeta) => {
  const hostRef = getHostRef(ref);
  const elm = hostRef.$hostElement$;
  const oldVal = hostRef.$instanceValues$.get(propName);
  const flags = hostRef.$flags$;
  const instance = hostRef.$lazyInstance$;
  newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);
  const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);
  const didValueChange = newVal !== oldVal && !areBothNaN;
  if ((!(flags & 8) || oldVal === void 0) && didValueChange) {
    hostRef.$instanceValues$.set(propName, newVal);
    if (instance) {
      if (cmpMeta.$watchers$ && flags & 128) {
        const watchMethods = cmpMeta.$watchers$[propName];
        if (watchMethods) {
          watchMethods.map((watchMethodName) => {
            try {
              instance[watchMethodName](newVal, oldVal, propName);
            } catch (e) {
              consoleError(e, elm);
            }
          });
        }
      }
      if ((flags & (2 | 16)) === 2) {
        if (instance.componentShouldUpdate) {
          if (instance.componentShouldUpdate(newVal, oldVal, propName) === false) {
            return;
          }
        }
        scheduleUpdate(hostRef, false);
      }
    }
  }
};
var proxyComponent = (Cstr, cmpMeta, flags) => {
  var _a;
  const prototype = Cstr.prototype;
  if (cmpMeta.$members$) {
    if (Cstr.watchers) {
      cmpMeta.$watchers$ = Cstr.watchers;
    }
    const members = Object.entries(cmpMeta.$members$);
    members.map(([memberName, [memberFlags]]) => {
      if (memberFlags & 31 || flags & 2 && memberFlags & 32) {
        Object.defineProperty(prototype, memberName, {
          get() {
            return getValue(this, memberName);
          },
          set(newValue) {
            setValue(this, memberName, newValue, cmpMeta);
          },
          configurable: true,
          enumerable: true
        });
      } else if (flags & 1 && memberFlags & 64) {
        Object.defineProperty(prototype, memberName, {
          value(...args) {
            var _a2;
            const ref = getHostRef(this);
            return (_a2 = ref === null || ref === void 0 ? void 0 : ref.$onInstancePromise$) === null || _a2 === void 0 ? void 0 : _a2.then(() => {
              var _a3;
              return (_a3 = ref.$lazyInstance$) === null || _a3 === void 0 ? void 0 : _a3[memberName](...args);
            });
          }
        });
      }
    });
    if (flags & 1) {
      const attrNameToPropName = /* @__PURE__ */ new Map();
      prototype.attributeChangedCallback = function(attrName, oldValue, newValue) {
        plt.jmp(() => {
          var _a2;
          const propName = attrNameToPropName.get(attrName);
          if (this.hasOwnProperty(propName)) {
            newValue = this[propName];
            delete this[propName];
          } else if (prototype.hasOwnProperty(propName) && typeof this[propName] === "number" && this[propName] == newValue) {
            return;
          } else if (propName == null) {
            const hostRef = getHostRef(this);
            const flags2 = hostRef === null || hostRef === void 0 ? void 0 : hostRef.$flags$;
            if (flags2 && !(flags2 & 8) && flags2 & 128 && newValue !== oldValue) {
              const instance = hostRef.$lazyInstance$;
              const entry = (_a2 = cmpMeta.$watchers$) === null || _a2 === void 0 ? void 0 : _a2[attrName];
              entry === null || entry === void 0 ? void 0 : entry.forEach((callbackName) => {
                if (instance[callbackName] != null) {
                  instance[callbackName].call(instance, newValue, oldValue, attrName);
                }
              });
            }
            return;
          }
          this[propName] = newValue === null && typeof this[propName] === "boolean" ? false : newValue;
        });
      };
      Cstr.observedAttributes = Array.from(/* @__PURE__ */ new Set([
        ...Object.keys((_a = cmpMeta.$watchers$) !== null && _a !== void 0 ? _a : {}),
        ...members.filter(
          ([_, m]) => m[0] & 15
          /* MEMBER_FLAGS.HasAttribute */
        ).map(([propName, m]) => {
          var _a2;
          const attrName = m[1] || propName;
          attrNameToPropName.set(attrName, propName);
          if (m[0] & 512) {
            (_a2 = cmpMeta.$attrsToReflect$) === null || _a2 === void 0 ? void 0 : _a2.push([propName, attrName]);
          }
          return attrName;
        })
      ]));
    }
  }
  return Cstr;
};
var initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId) => {
  let Cstr;
  if ((hostRef.$flags$ & 32) === 0) {
    hostRef.$flags$ |= 32;
    {
      Cstr = loadModule(cmpMeta);
      if (Cstr.then) {
        const endLoad = uniqueTime();
        Cstr = await Cstr;
        endLoad();
      }
      if (!Cstr.isProxied) {
        {
          cmpMeta.$watchers$ = Cstr.watchers;
        }
        proxyComponent(
          Cstr,
          cmpMeta,
          2
          /* PROXY_FLAGS.proxyState */
        );
        Cstr.isProxied = true;
      }
      const endNewInstance = createTime("createInstance", cmpMeta.$tagName$);
      {
        hostRef.$flags$ |= 8;
      }
      try {
        new Cstr(hostRef);
      } catch (e) {
        consoleError(e);
      }
      {
        hostRef.$flags$ &= ~8;
      }
      {
        hostRef.$flags$ |= 128;
      }
      endNewInstance();
      fireConnectedCallback(hostRef.$lazyInstance$);
    }
    if (Cstr.style) {
      let style = Cstr.style;
      const scopeId2 = getScopeId(cmpMeta);
      if (!styles.has(scopeId2)) {
        const endRegisterStyles = createTime("registerStyles", cmpMeta.$tagName$);
        registerStyle(scopeId2, style, !!(cmpMeta.$flags$ & 1));
        endRegisterStyles();
      }
    }
  }
  const ancestorComponent = hostRef.$ancestorComponent$;
  const schedule = () => scheduleUpdate(hostRef, true);
  if (ancestorComponent && ancestorComponent["s-rc"]) {
    ancestorComponent["s-rc"].push(schedule);
  } else {
    schedule();
  }
};
var fireConnectedCallback = (instance) => {
  {
    safeCall(instance, "connectedCallback");
  }
};
var connectedCallback = (elm) => {
  if ((plt.$flags$ & 1) === 0) {
    const hostRef = getHostRef(elm);
    const cmpMeta = hostRef.$cmpMeta$;
    const endConnected = createTime("connectedCallback", cmpMeta.$tagName$);
    if (!(hostRef.$flags$ & 1)) {
      hostRef.$flags$ |= 1;
      let hostId;
      {
        hostId = elm.getAttribute(HYDRATE_ID);
        if (hostId) {
          if (cmpMeta.$flags$ & 1) {
            const scopeId2 = addStyle(elm.shadowRoot, cmpMeta);
            elm.classList.remove(scopeId2 + "-h", scopeId2 + "-s");
          }
          initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);
        }
      }
      {
        let ancestorComponent = elm;
        while (ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host) {
          if (ancestorComponent.nodeType === 1 && ancestorComponent.hasAttribute("s-id") && ancestorComponent["s-p"] || ancestorComponent["s-p"]) {
            attachToAncestor(hostRef, hostRef.$ancestorComponent$ = ancestorComponent);
            break;
          }
        }
      }
      if (cmpMeta.$members$) {
        Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {
          if (memberFlags & 31 && elm.hasOwnProperty(memberName)) {
            const value = elm[memberName];
            delete elm[memberName];
            elm[memberName] = value;
          }
        });
      }
      {
        initializeComponent(elm, hostRef, cmpMeta);
      }
    } else {
      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$);
      if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$lazyInstance$) {
        fireConnectedCallback(hostRef.$lazyInstance$);
      } else if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$onReadyPromise$) {
        hostRef.$onReadyPromise$.then(() => fireConnectedCallback(hostRef.$lazyInstance$));
      }
    }
    endConnected();
  }
};
var disconnectInstance = (instance) => {
  {
    safeCall(instance, "disconnectedCallback");
  }
};
var disconnectedCallback = async (elm) => {
  if ((plt.$flags$ & 1) === 0) {
    const hostRef = getHostRef(elm);
    {
      if (hostRef.$rmListeners$) {
        hostRef.$rmListeners$.map((rmListener) => rmListener());
        hostRef.$rmListeners$ = void 0;
      }
    }
    if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$lazyInstance$) {
      disconnectInstance(hostRef.$lazyInstance$);
    } else if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$onReadyPromise$) {
      hostRef.$onReadyPromise$.then(() => disconnectInstance(hostRef.$lazyInstance$));
    }
  }
};
var bootstrapLazy = (lazyBundles, options = {}) => {
  var _a;
  const endBootstrap = createTime();
  const cmpTags = [];
  const exclude = options.exclude || [];
  const customElements = win.customElements;
  const head = doc.head;
  const metaCharset = head.querySelector("meta[charset]");
  const dataStyles = doc.createElement("style");
  const deferredConnectedCallbacks = [];
  const styles2 = doc.querySelectorAll(`[${HYDRATED_STYLE_ID}]`);
  let appLoadFallback;
  let isBootstrapping = true;
  let i = 0;
  Object.assign(plt, options);
  plt.$resourcesUrl$ = new URL(options.resourcesUrl || "./", doc.baseURI).href;
  {
    plt.$flags$ |= 2;
  }
  {
    for (; i < styles2.length; i++) {
      registerStyle(styles2[i].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles2[i].innerHTML), true);
    }
  }
  let hasSlotRelocation = false;
  lazyBundles.map((lazyBundle) => {
    lazyBundle[1].map((compactMeta) => {
      var _a2;
      const cmpMeta = {
        $flags$: compactMeta[0],
        $tagName$: compactMeta[1],
        $members$: compactMeta[2],
        $listeners$: compactMeta[3]
      };
      if (cmpMeta.$flags$ & 4) {
        hasSlotRelocation = true;
      }
      {
        cmpMeta.$members$ = compactMeta[2];
      }
      {
        cmpMeta.$listeners$ = compactMeta[3];
      }
      {
        cmpMeta.$attrsToReflect$ = [];
      }
      {
        cmpMeta.$watchers$ = (_a2 = compactMeta[4]) !== null && _a2 !== void 0 ? _a2 : {};
      }
      const tagName = cmpMeta.$tagName$;
      const HostElement = class extends HTMLElement {
        // StencilLazyHost
        constructor(self) {
          super(self);
          self = this;
          registerHost(self, cmpMeta);
          if (cmpMeta.$flags$ & 1) {
            {
              {
                self.attachShadow({
                  mode: "open",
                  delegatesFocus: !!(cmpMeta.$flags$ & 16)
                });
              }
            }
          }
        }
        connectedCallback() {
          if (appLoadFallback) {
            clearTimeout(appLoadFallback);
            appLoadFallback = null;
          }
          if (isBootstrapping) {
            deferredConnectedCallbacks.push(this);
          } else {
            plt.jmp(() => connectedCallback(this));
          }
        }
        disconnectedCallback() {
          plt.jmp(() => disconnectedCallback(this));
        }
        componentOnReady() {
          return getHostRef(this).$onReadyPromise$;
        }
      };
      cmpMeta.$lazyBundleId$ = lazyBundle[0];
      if (!exclude.includes(tagName) && !customElements.get(tagName)) {
        cmpTags.push(tagName);
        customElements.define(tagName, proxyComponent(
          HostElement,
          cmpMeta,
          1
          /* PROXY_FLAGS.isElementConstructor */
        ));
      }
    });
  });
  if (hasSlotRelocation) {
    dataStyles.innerHTML += SLOT_FB_CSS;
  }
  {
    dataStyles.innerHTML += cmpTags + HYDRATED_CSS;
  }
  if (dataStyles.innerHTML.length) {
    dataStyles.setAttribute("data-styles", "");
    const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);
    if (nonce != null) {
      dataStyles.setAttribute("nonce", nonce);
    }
    head.insertBefore(dataStyles, metaCharset ? metaCharset.nextSibling : head.firstChild);
  }
  isBootstrapping = false;
  if (deferredConnectedCallbacks.length) {
    deferredConnectedCallbacks.map((host) => host.connectedCallback());
  } else {
    {
      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30));
    }
  }
  endBootstrap();
};
var Fragment = (_, children) => children;
var addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {
  if (listeners) {
    listeners.map(([flags, name, method]) => {
      const target = getHostListenerTarget(elm, flags);
      const handler = hostListenerProxy(hostRef, method);
      const opts = hostListenerOpts(flags);
      plt.ael(target, name, handler, opts);
      (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));
    });
  }
};
var hostListenerProxy = (hostRef, methodName) => (ev) => {
  try {
    {
      if (hostRef.$flags$ & 256) {
        hostRef.$lazyInstance$[methodName](ev);
      } else {
        (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);
      }
    }
  } catch (e) {
    consoleError(e);
  }
};
var getHostListenerTarget = (elm, flags) => {
  if (flags & 4)
    return doc;
  if (flags & 8)
    return win;
  if (flags & 16)
    return doc.body;
  return elm;
};
var hostListenerOpts = (flags) => (flags & 2) !== 0;
var setNonce = (nonce) => plt.$nonce$ = nonce;
var hostRefs = /* @__PURE__ */ new WeakMap();
var getHostRef = (ref) => hostRefs.get(ref);
var registerInstance = (lazyInstance, hostRef) => hostRefs.set(hostRef.$lazyInstance$ = lazyInstance, hostRef);
var registerHost = (hostElement, cmpMeta) => {
  const hostRef = {
    $flags$: 0,
    $hostElement$: hostElement,
    $cmpMeta$: cmpMeta,
    $instanceValues$: /* @__PURE__ */ new Map()
  };
  {
    hostRef.$onInstancePromise$ = new Promise((r) => hostRef.$onInstanceResolve$ = r);
  }
  {
    hostRef.$onReadyPromise$ = new Promise((r) => hostRef.$onReadyResolve$ = r);
    hostElement["s-p"] = [];
    hostElement["s-rc"] = [];
  }
  addHostEventListeners(hostElement, hostRef, cmpMeta.$listeners$);
  return hostRefs.set(hostElement, hostRef);
};
var isMemberInElement = (elm, memberName) => memberName in elm;
var consoleError = (e, el) => (0, console.error)(e, el);
var cmpModules = /* @__PURE__ */ new Map();
var loadModule = (cmpMeta, hostRef, hmrVersionId) => {
  const exportName = cmpMeta.$tagName$.replace(/-/g, "_");
  const bundleId = cmpMeta.$lazyBundleId$;
  const module = cmpModules.get(bundleId);
  if (module) {
    return module[exportName];
  }
  if (!hmrVersionId || !BUILD.hotModuleReplacement) {
    const processMod = (importedModule) => {
      cmpModules.set(bundleId, importedModule);
      return importedModule[exportName];
    };
    switch (bundleId) {
      case "calcite-action":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-action.entry-6VMMCPFK.js"
        ).then(processMod, consoleError);
      case "calcite-action-bar":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-action-bar.entry-AQCDE2MO.js"
        ).then(processMod, consoleError);
      case "calcite-action-menu":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-action-menu.entry-HJD6HDYJ.js"
        ).then(processMod, consoleError);
      case "calcite-action-pad":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-action-pad.entry-W6V2IZY6.js"
        ).then(processMod, consoleError);
      case "calcite-alert":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-alert.entry-C2ZYLYWF.js"
        ).then(processMod, consoleError);
      case "calcite-avatar":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-avatar.entry-B6SY2AAX.js"
        ).then(processMod, consoleError);
      case "calcite-button":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-button.entry-LOZDMGJ4.js"
        ).then(processMod, consoleError);
      case "calcite-card":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-card.entry-3C57M2MD.js"
        ).then(processMod, consoleError);
      case "calcite-card-group":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-card-group.entry-ZPGCCBZO.js"
        ).then(processMod, consoleError);
      case "calcite-checkbox":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-checkbox.entry-UVWND27Z.js"
        ).then(processMod, consoleError);
      case "calcite-chip":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-chip.entry-E6JANUZM.js"
        ).then(processMod, consoleError);
      case "calcite-chip-group":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-chip-group.entry-ORQL2CMJ.js"
        ).then(processMod, consoleError);
      case "calcite-fab":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-fab.entry-MXMZIU3C.js"
        ).then(processMod, consoleError);
      case "calcite-flow":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-flow.entry-UE2LBH3P.js"
        ).then(processMod, consoleError);
      case "calcite-icon":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-icon.entry-FX7MUWYA.js"
        ).then(processMod, consoleError);
      case "calcite-inline-editable":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-inline-editable.entry-57NLDRFU.js"
        ).then(processMod, consoleError);
      case "calcite-input":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-input.entry-MP6QCIIJ.js"
        ).then(processMod, consoleError);
      case "calcite-input-date-picker":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-input-date-picker.entry-OMBC5QBJ.js"
        ).then(processMod, consoleError);
      case "calcite-input-message":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-input-message.entry-7AJJU5B6.js"
        ).then(processMod, consoleError);
      case "calcite-input-number":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-input-number.entry-UIGIE4RU.js"
        ).then(processMod, consoleError);
      case "calcite-input-time-zone":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-input-time-zone.entry-4M3FWUT4.js"
        ).then(processMod, consoleError);
      case "calcite-label":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-label.entry-HEKDU2JH.js"
        ).then(processMod, consoleError);
      case "calcite-link":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-link.entry-LQKBDNCI.js"
        ).then(processMod, consoleError);
      case "calcite-loader":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-loader.entry-O2AMO23U.js"
        ).then(processMod, consoleError);
      case "calcite-meter":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-meter.entry-W4TJPXFJ.js"
        ).then(processMod, consoleError);
      case "calcite-modal":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-modal.entry-6DJYIJV7.js"
        ).then(processMod, consoleError);
      case "calcite-notice":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-notice.entry-FG2JSL6K.js"
        ).then(processMod, consoleError);
      case "calcite-pagination":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-pagination.entry-PKADHIDD.js"
        ).then(processMod, consoleError);
      case "calcite-panel":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-panel.entry-77UYANDU.js"
        ).then(processMod, consoleError);
      case "calcite-popover":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-popover.entry-XWJJL2JA.js"
        ).then(processMod, consoleError);
      case "calcite-progress":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-progress.entry-X2ONVVUU.js"
        ).then(processMod, consoleError);
      case "calcite-radio-button":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-radio-button.entry-HELIXB4D.js"
        ).then(processMod, consoleError);
      case "calcite-radio-button-group":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-radio-button-group.entry-ZUXBG5EQ.js"
        ).then(processMod, consoleError);
      case "calcite-rating":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-rating.entry-ANI4ITEB.js"
        ).then(processMod, consoleError);
      case "calcite-scrim":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-scrim.entry-LY6AFS4M.js"
        ).then(processMod, consoleError);
      case "calcite-sheet":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-sheet.entry-UWMCTJKI.js"
        ).then(processMod, consoleError);
      case "calcite-sortable-list":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-sortable-list.entry-2BYS7AL3.js"
        ).then(processMod, consoleError);
      case "calcite-split-button":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-split-button.entry-OW3VGYEX.js"
        ).then(processMod, consoleError);
      case "calcite-stack":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-stack.entry-CDKYRWKX.js"
        ).then(processMod, consoleError);
      case "calcite-switch":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-switch.entry-6MKUX7YX.js"
        ).then(processMod, consoleError);
      case "calcite-text-area":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-text-area.entry-I7MH4XNH.js"
        ).then(processMod, consoleError);
      case "calcite-tile":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-tile.entry-HK4ZVMD7.js"
        ).then(processMod, consoleError);
      case "calcite-tile-group":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-tile-group.entry-VLQOW64B.js"
        ).then(processMod, consoleError);
      case "calcite-tooltip":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-tooltip.entry-ARL5S3ME.js"
        ).then(processMod, consoleError);
      case "calcite-accordion_2":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-accordion_2.entry-ZRYCOFSO.js"
        ).then(processMod, consoleError);
      case "calcite-block_2":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-block_2.entry-BDPOONKI.js"
        ).then(processMod, consoleError);
      case "calcite-menu_2":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-menu_2.entry-QBFLZS54.js"
        ).then(processMod, consoleError);
      case "calcite-segmented-control_2":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-segmented-control_2.entry-NLDXSROZ.js"
        ).then(processMod, consoleError);
      case "calcite-graph_2":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-graph_2.entry-PUINNCXO.js"
        ).then(processMod, consoleError);
      case "calcite-stepper_2":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-stepper_2.entry-4OSPKP5S.js"
        ).then(processMod, consoleError);
      case "calcite-tile-select_2":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-tile-select_2.entry-VCT5SEGG.js"
        ).then(processMod, consoleError);
      case "calcite-tree_2":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-tree_2.entry-JRJKCEN6.js"
        ).then(processMod, consoleError);
      case "calcite-value-list_2":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-value-list_2.entry-72P3Z5GH.js"
        ).then(processMod, consoleError);
      case "calcite-color-picker_3":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-color-picker_3.entry-BSS7OOIW.js"
        ).then(processMod, consoleError);
      case "calcite-combobox_3":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-combobox_3.entry-5OTVGAFU.js"
        ).then(processMod, consoleError);
      case "calcite-dropdown_3":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-dropdown_3.entry-G24ADITH.js"
        ).then(processMod, consoleError);
      case "calcite-list_3":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-list_3.entry-3Y2JJUTB.js"
        ).then(processMod, consoleError);
      case "calcite-navigation_3":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-navigation_3.entry-GYZM2SOX.js"
        ).then(processMod, consoleError);
      case "calcite-pick-list_3":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-pick-list_3.entry-IICBNHK6.js"
        ).then(processMod, consoleError);
      case "calcite-option_3":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-option_3.entry-4XV6XCZR.js"
        ).then(processMod, consoleError);
      case "calcite-shell_3":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-shell_3.entry-S5RBCTH5.js"
        ).then(processMod, consoleError);
      case "calcite-tip_3":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-tip_3.entry-VU2AHRHV.js"
        ).then(processMod, consoleError);
      case "calcite-date-picker_4":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-date-picker_4.entry-6EPUZOBT.js"
        ).then(processMod, consoleError);
      case "calcite-tab_4":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-tab_4.entry-R6VBOZHQ.js"
        ).then(processMod, consoleError);
      case "calcite-flow-item":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-flow-item.entry-V7G6BIKA.js"
        ).then(processMod, consoleError);
      case "calcite-table":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-table.entry-7SUR2PTN.js"
        ).then(processMod, consoleError);
      case "calcite-table-row":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-table-row.entry-LJT3BPLS.js"
        ).then(processMod, consoleError);
      case "calcite-table-cell_2":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-table-cell_2.entry-5OPJ5GV2.js"
        ).then(processMod, consoleError);
      case "calcite-action-group":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-action-group.entry-ACYOBWFQ.js"
        ).then(processMod, consoleError);
      case "calcite-handle":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-handle.entry-DYVY7XTT.js"
        ).then(processMod, consoleError);
      case "calcite-filter":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-filter.entry-IHENXLNC.js"
        ).then(processMod, consoleError);
      case "calcite-input-text":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-input-text.entry-5KVPQ6XC.js"
        ).then(processMod, consoleError);
      case "calcite-input-time-picker_2":
        return import(
          /* webpackMode: "lazy" */
          "./calcite-input-time-picker_2.entry-BZQUNZBP.js"
        ).then(processMod, consoleError);
    }
  }
  return /* @vite-ignore */ /* webpackInclude: /\.entry\.js$/ */ /* webpackExclude: /\.system\.entry\.js$/ */ /* webpackMode: "lazy" */ globImport_entry_js(`./${bundleId}.entry.js${""}`).then((importedModule) => {
    {
      cmpModules.set(bundleId, importedModule);
    }
    return importedModule[exportName];
  }, consoleError);
};
var styles = /* @__PURE__ */ new Map();
var win = typeof window !== "undefined" ? window : {};
var doc = win.document || { head: {} };
var plt = {
  $flags$: 0,
  $resourcesUrl$: "",
  jmp: (h2) => h2(),
  raf: (h2) => requestAnimationFrame(h2),
  ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),
  rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),
  ce: (eventName, opts) => new CustomEvent(eventName, opts)
};
var supportsShadow = (
  // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field
  true
);
var promiseResolve = (v) => Promise.resolve(v);
var supportsConstructableStylesheets = (() => {
  try {
    new CSSStyleSheet();
    return typeof new CSSStyleSheet().replaceSync === "function";
  } catch (e) {
  }
  return false;
})();
var queueDomReads = [];
var queueDomWrites = [];
var queueTask = (queue, write) => (cb) => {
  queue.push(cb);
  if (!queuePending) {
    queuePending = true;
    if (write && plt.$flags$ & 4) {
      nextTick(flush);
    } else {
      plt.raf(flush);
    }
  }
};
var consume = (queue) => {
  for (let i = 0; i < queue.length; i++) {
    try {
      queue[i](performance.now());
    } catch (e) {
      consoleError(e);
    }
  }
  queue.length = 0;
};
var flush = () => {
  consume(queueDomReads);
  {
    consume(queueDomWrites);
    if (queuePending = queueDomReads.length > 0) {
      plt.raf(flush);
    }
  }
};
var nextTick = (cb) => promiseResolve().then(cb);
var readTask = queueTask(queueDomReads, false);
var writeTask = queueTask(queueDomWrites, true);

export {
  getAssetPath,
  h,
  Host,
  getElement,
  createEvent,
  forceUpdate,
  bootstrapLazy,
  Fragment,
  setNonce,
  registerInstance,
  readTask
};
/*! Bundled license information:

@esri/calcite-components/dist/esm/index-2e6dbb80.js:
  (*!
   * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
   * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
   * v2.6.0
   *)
*/
//# sourceMappingURL=chunk-FNA2PYJM.js.map
