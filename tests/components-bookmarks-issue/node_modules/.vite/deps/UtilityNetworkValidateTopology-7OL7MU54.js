import {
  t
} from "./chunk-ICMKKNJO.js";
import {
  h as h2
} from "./chunk-I4SHZ6P5.js";
import {
  r as r2
} from "./chunk-HLDUDRTD.js";
import {
  Q
} from "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import {
  D,
  e2,
  r
} from "./chunk-RGCWZ2KZ.js";
import {
  n as n2
} from "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import "./chunk-2SDMYJDE.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import {
  h
} from "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import {
  f
} from "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  P,
  d,
  v
} from "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n,
  s
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/widgets/UtilityNetworkValidateTopology/UtilityNetworkValidateTopologyViewModel.js
var w = { noDirtyAreasInExtent: -2147208940, noUtilityNetworkExtension: -2147208474, cannotAcquireVersionLock_v10: -2147217146, cannotAcquireVersionLock_v11: -2147220947 };
var v2 = class extends S {
  constructor(t2) {
    super(t2), this._activeOperationDidSucceed = false, this._initialValidationsFinished = false, this._dirtyAreasLayer = null, this._serverVersion = null, this._updatingHandles = new h2(), this._validConstructProperties = false, this.executionError = "", this.extentToValidate = "current", this.loadErrors = new V();
  }
  initialize() {
    const t2 = async () => {
      this.messages || (this.messages = await h("esri/widgets/UtilityNetworkValidateTopology/t9n/UtilityNetworkValidateTopology"));
    };
    t2().then(() => {
      this.view || (this.view = null), this.utilityNetwork || (this.utilityNetwork = null), this.addHandles([d(() => [this.view, this.utilityNetwork], async () => {
        var _a, _b;
        const { loadErrors: t3, messages: { info: { noUtilityNetwork: i, noView: e3 } } } = this;
        this._initialValidationsFinished = false, t3.removeAll(), this._validConstructProperties = true, this._dirtyAreasLayer = null, this._serverVersion = null, "utility" !== ((_a = this.utilityNetwork) == null ? void 0 : _a.type) && (this.loadErrors.push(i), n.getLogger(this).error(new s("utilityNetworkValidateTopology:missing-property", i)), this._validConstructProperties = false), "2d" !== ((_b = this.view) == null ? void 0 : _b.type) && (this.loadErrors.push(e3), n.getLogger(this).error(new s("utilityNetworkValidateTopology:missing-property", e3)), this._validConstructProperties = false), this._validConstructProperties && (this.utilityNetwork.loaded || await this.utilityNetwork.load().catch((t4) => {
          n.getLogger(this).error(t4), this._validConstructProperties = false;
        }), await this._setDirtyAreasLayer()), this._validConstructProperties && await this._validateNetworkExtension();
      }, P), v(() => {
        var _a, _b;
        return (_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.layers;
      }, "change", async () => {
        const { loadErrors: t3, messages: { info: { noUtilityNetwork: i } } } = this, e3 = t3.find((t4) => t4 === i);
        this._initialValidationsFinished = false, e3 || (t3.removeAll(), await this._validateNetworkExtension(), await this._setDirtyAreasLayer()), this._initialValidationsFinished = true;
      }), f(t2)]);
    });
  }
  destroy() {
    this._updatingHandles.destroy();
  }
  get state() {
    return this.loadErrors.length || !this._validConstructProperties ? "disabled" : this.executionError ? "failed" : this._updatingHandles.updating ? "executing" : this._activeOperationDidSucceed ? "success" : this._initialValidationsFinished ? "ready" : "loading";
  }
  set utilityNetwork(t2) {
    this._get("utilityNetwork") !== t2 && this._set("utilityNetwork", t2);
  }
  set view(t2) {
    this._get("view") !== t2 && this._set("view", t2);
  }
  async validateTopology() {
    const { messages: { info: { cannotAcquireVersionLock: t2, noDirtyAreasInExtent: i } }, utilityNetwork: e3, view: s2 } = this;
    this.loadErrors.length || (this._activeOperationDidSucceed = false, this._set("executionError", ""), this._updatingHandles.addPromise(e3 == null ? void 0 : e3.validateTopology({ validateArea: "current" === this.extentToValidate ? s2.extent.clone() : e3.fullExtent.clone() }).then(() => {
      this._activeOperationDidSucceed = true;
    }, (e4) => {
      var _a;
      let s3 = "Error: " + e4;
      if (e4 instanceof s && ((_a = e4.details) == null ? void 0 : _a.raw))
        switch (e4.details.raw.extendedCode) {
          case w.noDirtyAreasInExtent:
            s3 = i;
            break;
          case w.cannotAcquireVersionLock_v10:
          case w.cannotAcquireVersionLock_v11:
            s3 = t2;
            break;
          default:
            s3 = e4.details.message;
        }
      this._set("executionError", s3);
    })));
  }
  async _setDirtyAreasLayer() {
    var _a;
    const { messages: { info: { noDirtyAreasLayer: t2 } } } = this, i = (_a = this.view) == null ? void 0 : _a.map.allLayers.items.filter((t3) => r2(t3)).find((t3) => {
      var _a2, _b;
      return ((_a2 = t3.parsedUrl) == null ? void 0 : _a2.path) === ((_b = this.utilityNetwork) == null ? void 0 : _b.networkSystemLayers.dirtyAreasLayerUrl);
    });
    i ? (this._dirtyAreasLayer = i, await this._dirtyAreasLayer.load(), this._serverVersion = this._dirtyAreasLayer.version ?? 0, this._validConstructProperties = true) : (this.loadErrors.push(t2), n.getLogger(this).error(new s("utilityNetworkValidateTopology:missing-layer", t2)), this._validConstructProperties = false);
  }
  async _validateNetworkExtension() {
    var _a;
    const { messages: { info: { noAdvancedEditingUserTypeExtension: t2, noUtilityNetworkServiceUserTypeExtension: i } } } = this, e3 = await new Q({ url: new URL(this.utilityNetwork.layerUrl).origin + "/portal" }).load(), o = (_a = e3 == null ? void 0 : e3.user) == null ? void 0 : _a.username;
    if (!o) {
      const t3 = "No portal user found.";
      return this.loadErrors.push(t3), n.getLogger(this).error(new s("utilityNetworkValidateTopology:no-user", t3)), this._validConstructProperties = false, void (this._initialValidationsFinished = true);
    }
    const a3 = Number(this._serverVersion) <= 11.1 ? "utilityNetwork" : "advediting";
    t(e3, o, a3).then((e4) => {
      if (!e4) {
        const e5 = Number(this._serverVersion) <= 11.1 ? i : t2;
        this.loadErrors.push(e5), n.getLogger(this).error(new s("utilityNetworkValidateTopology:no-user-type-extension", e5)), this._validConstructProperties = false;
      }
    }).catch((e4) => {
      this.loadErrors.push(Number(this._serverVersion) <= 11.1 ? i : t2), n.getLogger(this).error(e4), this._validConstructProperties = false;
    }).finally(() => {
      this._initialValidationsFinished = true;
    });
  }
};
e([y()], v2.prototype, "_initialValidationsFinished", void 0), e([y()], v2.prototype, "_dirtyAreasLayer", void 0), e([y()], v2.prototype, "_validConstructProperties", void 0), e([y({ readOnly: true })], v2.prototype, "executionError", void 0), e([y()], v2.prototype, "extentToValidate", void 0), e([y()], v2.prototype, "loadErrors", void 0), e([y()], v2.prototype, "messages", void 0), e([y({ readOnly: true })], v2.prototype, "state", null), e([y()], v2.prototype, "utilityNetwork", null), e([y()], v2.prototype, "view", null), v2 = e([a("esri.widgets.UtilityNetworkValidateTopology.UtilityNetworkValidateTopologyViewModel")], v2);
var _ = v2;

// node_modules/@arcgis/core/widgets/UtilityNetworkValidateTopology.js
var a2 = "esri-un-validate-topology";
var l = { container: `${a2}__container`, content: `${a2}__content`, controlsContainer: `${a2}__controls-container`, statusIconError: `${a2}__status-icon-error`, statusIconSuccess: `${a2}__status-icon-success`, statusIconContainer: `${a2}__status-icon-container` };
var d2 = class extends D {
  constructor(t2, e3) {
    super(t2, e3), this.messages = null, this.viewModel = new _();
  }
  loadDependencies() {
    return r({ action: () => import("./calcite-action-P2CTRNG2.js"), block: () => import("./calcite-block-GV6ZWM4U.js"), icon: () => import("./calcite-icon-25XWA6H7.js"), notice: () => import("./calcite-notice-Q2MN4Y4I.js"), option: () => import("./calcite-option-TCD47JBL.js"), select: () => import("./calcite-select-DL7WB63T.js"), tooltip: () => import("./calcite-tooltip-TDDUGVK4.js") });
  }
  get extentToValidate() {
    return this.viewModel.extentToValidate;
  }
  set extentToValidate(t2) {
    this.viewModel.extentToValidate = t2;
  }
  get icon() {
    return "check-circle";
  }
  set icon(t2) {
    this._overrideIfSome("icon", t2);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.label) ?? "";
  }
  set label(t2) {
    this._overrideIfSome("label", t2);
  }
  get utilityNetwork() {
    return this.viewModel.utilityNetwork;
  }
  set utilityNetwork(t2) {
    this.viewModel.utilityNetwork = t2;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(t2) {
    this.viewModel.view = t2;
  }
  render() {
    const { viewModel: t2 } = this;
    return "disabled" === t2.state ? n2("div", { class: l.container }, n2("calcite-block", { class: l.content, collapsible: false, heading: this.label, open: true }, this._renderLoadErrorStatusIcon(), this._renderLoadErrorsNotices())) : n2("div", { class: l.container }, n2("calcite-block", { class: l.content, collapsible: true, heading: this.label, open: false }, this._renderStatusIcon(), this._renderValidateTopologyAction(), this._renderControls()));
  }
  _extentOptionSelectChange(t2) {
    this.extentToValidate = t2.target.value;
  }
  _getLoadErrorMessagesAsNotices(t2, e3) {
    return n2("calcite-notice", { closable: false, key: "error-notice-" + e3, kind: "warning", open: true, scale: "s" }, n2("div", { slot: "message" }, t2));
  }
  _handleValidateTopologyAction() {
    this.viewModel.validateTopology().catch(() => {
    });
  }
  _renderControls() {
    const { viewModel: t2 } = this;
    return "failed" === t2.state ? n2("div", { class: l.controlsContainer }, this._renderExtentOptionSelect(), this._renderStatusNotice()) : this._renderExtentOptionSelect();
  }
  _renderExtentOptionSelect() {
    const { messages: t2, viewModel: e3 } = this;
    return n2("div", { key: "selectExtentDiv" }, n2("calcite-select", { bind: this, disabled: "loading" === e3.state || "executing" === e3.state, label: t2.input.extentToValidate, onCalciteSelectChange: this._extentOptionSelectChange }, n2("calcite-option", { value: "current" }, t2.input.currentExtent), n2("calcite-option", { value: "entire" }, t2.input.entireExtent)));
  }
  _renderLoadErrorsNotices() {
    const { viewModel: t2 } = this;
    return n2("div", { class: l.controlsContainer, key: "loadErrorsDiv" }, t2.loadErrors.items.map(this._getLoadErrorMessagesAsNotices));
  }
  _renderLoadErrorStatusIcon() {
    return n2("div", { class: l.statusIconContainer, key: "statusDiv", slot: "control" }, n2("calcite-icon", { class: l.statusIconError, icon: "exclamation-mark-triangle", scale: "s" }));
  }
  _renderStatusIcon() {
    const { messages: t2, viewModel: e3 } = this, o = `${this.id}-validation-status-action`, i = `${this.id}-error-status-icon`, s2 = `${this.id}-success-status-icon`, n3 = (t3) => {
      setTimeout(() => {
        t3.innerHTML = "";
      }, 3500);
    };
    return "executing" === e3.state ? n2("div", { key: "statusDivExecuting", slot: "control" }, n2("calcite-action", { id: o, loading: true, text: t2.status.executing }), n2("calcite-tooltip", { referenceElement: o }, n2("span", null, t2.status.executing))) : "success" === e3.state ? n2("div", { afterCreate: n3, class: l.statusIconContainer, key: "statusDivSuccess", slot: "control" }, n2("calcite-icon", { class: l.statusIconSuccess, icon: "check-circle", id: s2, scale: "s" }), n2("calcite-tooltip", { referenceElement: s2 }, n2("span", null, t2.status.success))) : "failed" === e3.state ? n2("div", { class: l.statusIconContainer, key: "statusDivFailed", slot: "control" }, n2("calcite-icon", { class: l.statusIconError, icon: "exclamation-mark-triangle", id: i, scale: "s" }), n2("calcite-tooltip", { referenceElement: i }, n2("span", null, e3.executionError))) : n2("div", { class: l.statusIconContainer, key: "statusDiv", slot: "control" });
  }
  _renderStatusNotice() {
    const { viewModel: t2 } = this;
    return n2("div", { key: "executionErrorDiv" }, n2("calcite-notice", { closable: true, kind: "warning", open: true, scale: "s" }, n2("div", { slot: "message" }, t2.executionError)));
  }
  _renderValidateTopologyAction() {
    const { messages: t2, viewModel: e3 } = this, o = `${this.id}-validation-action`;
    return n2("div", { key: "actionDiv", slot: "control" }, n2("calcite-action", { bind: this, disabled: "executing" === e3.state, icon: "play-f", id: o, loading: "loading" === e3.state, onclick: this._handleValidateTopologyAction, text: t2.input.validateTopology }), n2("calcite-tooltip", { referenceElement: o }, n2("span", null, "loading" === e3.state ? t2.status.loading : t2.input.validateTopology)));
  }
};
e([y()], d2.prototype, "extentToValidate", null), e([y()], d2.prototype, "icon", null), e([y()], d2.prototype, "label", null), e([y(), e2("esri/widgets/UtilityNetworkValidateTopology/t9n/UtilityNetworkValidateTopology")], d2.prototype, "messages", void 0), e([y()], d2.prototype, "utilityNetwork", null), e([y()], d2.prototype, "view", null), e([y({ type: _ })], d2.prototype, "viewModel", void 0), d2 = e([a("esri.widgets.UtilityNetworkValidateTopology")], d2);
var p = d2;
export {
  p as default
};
//# sourceMappingURL=UtilityNetworkValidateTopology-7OL7MU54.js.map
