import {
  a as a2
} from "./chunk-BFREIQNB.js";
import {
  G,
  T,
  p as p2,
  t as t4
} from "./chunk-GRZEAINR.js";
import "./chunk-YCSHXPL7.js";
import {
  z
} from "./chunk-KQFC3S3U.js";
import {
  m as m3
} from "./chunk-PGOAFABD.js";
import "./chunk-63NZBHDP.js";
import {
  $
} from "./chunk-BNDDKY53.js";
import "./chunk-BECEVYQR.js";
import "./chunk-S243OWEZ.js";
import "./chunk-QYDOVVH7.js";
import "./chunk-YSXT2SWC.js";
import "./chunk-DGRFM5OL.js";
import "./chunk-AOAT6HYL.js";
import "./chunk-YH3SFFF7.js";
import "./chunk-JBU54P54.js";
import "./chunk-UQEUYEWU.js";
import "./chunk-5LIYYE75.js";
import {
  l,
  o as o2
} from "./chunk-ZECONJNT.js";
import "./chunk-UWZ4CRJK.js";
import {
  ot
} from "./chunk-TLTAGTBA.js";
import "./chunk-2QPP5AGU.js";
import {
  t
} from "./chunk-2C26DRKK.js";
import {
  e as e3
} from "./chunk-M4RFJU4F.js";
import "./chunk-WVKWBQ7C.js";
import "./chunk-RK2U53CD.js";
import "./chunk-YPY24RRU.js";
import "./chunk-O7RKI2QW.js";
import "./chunk-BMB27ANS.js";
import "./chunk-3FOBZIUS.js";
import "./chunk-JKLFCJPR.js";
import {
  c
} from "./chunk-LQR76D5M.js";
import "./chunk-2CWW7O7M.js";
import "./chunk-FLBJ53KN.js";
import "./chunk-YH2IYJYF.js";
import {
  E
} from "./chunk-GGHKH3LP.js";
import "./chunk-VS6AHHIY.js";
import {
  s as s3
} from "./chunk-IHQNQQJC.js";
import "./chunk-DXMBDX2I.js";
import {
  m as m2,
  t as t3
} from "./chunk-TUVEYM7U.js";
import "./chunk-5S637BGW.js";
import "./chunk-BFOJPIF7.js";
import {
  p
} from "./chunk-OHYLFFUW.js";
import "./chunk-Y7RXGLGH.js";
import "./chunk-3JC3OUNW.js";
import "./chunk-RO3CTAP7.js";
import "./chunk-GKMVTGGM.js";
import "./chunk-XGTCDM4C.js";
import "./chunk-QNG4TY7L.js";
import "./chunk-RW5QMWE6.js";
import "./chunk-LGMX4E7L.js";
import "./chunk-2NPNEA6N.js";
import "./chunk-U34ZXOJT.js";
import "./chunk-OKRW5W44.js";
import "./chunk-RGAA5Z76.js";
import "./chunk-Q6RZBEZ6.js";
import "./chunk-PC66NY33.js";
import "./chunk-YY2VB3AE.js";
import "./chunk-VEYMN5N3.js";
import "./chunk-H6NTWZSO.js";
import "./chunk-BMT3OVAP.js";
import {
  b as b2
} from "./chunk-W5ALAOW2.js";
import "./chunk-FHDHOWK5.js";
import "./chunk-Y546C2O5.js";
import "./chunk-IYKBAIQE.js";
import "./chunk-BDRVHR2K.js";
import "./chunk-DVIGFJWY.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-AKQ765JR.js";
import "./chunk-ERD6I7QP.js";
import {
  d
} from "./chunk-F3BQGS35.js";
import {
  y as y3
} from "./chunk-Z3NX5DTX.js";
import "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import "./chunk-LMO6NZJA.js";
import "./chunk-A5QTLE4Y.js";
import "./chunk-SCHTG6ZQ.js";
import "./chunk-G7YFDDME.js";
import "./chunk-PCKG3UTS.js";
import "./chunk-3VMVD66K.js";
import "./chunk-QYC3GV65.js";
import {
  P
} from "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-I2X6UR6L.js";
import "./chunk-HV2SFSJW.js";
import "./chunk-SBARCIDP.js";
import {
  f
} from "./chunk-EMYOYGGK.js";
import {
  n as n3
} from "./chunk-6PMFOUWZ.js";
import "./chunk-3KPZ3BQR.js";
import "./chunk-5JYVZQZR.js";
import {
  t as t2
} from "./chunk-UUG4W2PI.js";
import {
  y as y4
} from "./chunk-RKVEKQ5O.js";
import "./chunk-P7J4JFEH.js";
import {
  b
} from "./chunk-G7FOE26O.js";
import "./chunk-USOPZ2Q6.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-JW7VBMHD.js";
import "./chunk-GLLRUDMY.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import {
  p as p3
} from "./chunk-X7VSXJWW.js";
import {
  e as e2
} from "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import {
  o
} from "./chunk-PJNK3TLV.js";
import {
  y as y2
} from "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-AKLOTDO2.js";
import "./chunk-6AQIVLDN.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-SLQA5YBV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import {
  B,
  H
} from "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import {
  j,
  m2 as m
} from "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-PWPXYWXV.js";
import "./chunk-545NO6M2.js";
import "./chunk-5LSHHVQ5.js";
import {
  w
} from "./chunk-IZKCZQUY.js";
import {
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import {
  g2 as g
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import {
  n as n2
} from "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a,
  r2 as r
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  s as s2
} from "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n,
  s
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/layers/knowledgeGraph/SessionMemoryStorage.js
var i = "ESRI__DESTINATION_ID";
var s4 = "ESRI__ORIGIN_ID";
var o3 = class _o {
  constructor() {
    this._featureLookup = /* @__PURE__ */ new Map();
  }
  static getInstance() {
    return _o.instance || (_o.instance = new _o()), _o.instance;
  }
  static resetInstance() {
    _o.instance && (_o.instance = null);
  }
  deleteFromStore(e6) {
    e6.forEach((e7) => {
      this._featureLookup.delete(e7);
    });
  }
  readFromStoreByList(e6) {
    const t7 = [];
    return e6.forEach((e7) => {
      const r5 = this.readFromStoreById(e7);
      r5 && t7.push(r5);
    }), t7;
  }
  readFromStoreById(e6) {
    return this._featureLookup.get(e6) ?? null;
  }
  writeToStore(o5, n5, p7) {
    const a3 = [];
    return o5.forEach((o6) => {
      if (!(o6 == null ? void 0 : o6.id))
        return;
      o6.properties || (o6.properties = []);
      let u3, c4 = null;
      if (p7 && o6.properties[p7] && (c4 = ot(o6.properties[p7])), "originId" in o6 && "destinationId" in o6 && (o6.properties[s4] = o6.originId, o6.properties[i] = o6.destinationId), o6.properties[n5] = o6.id, o6.id && this._featureLookup.has(o6.id) && this._featureLookup.get(o6.id).attributes) {
        const e6 = this._featureLookup.get(o6.id), i4 = JSON.parse(JSON.stringify(Object.assign(e6.attributes, o6.properties)));
        p7 && o6.properties[p7] && (i4[p7] = y2(o6.properties[p7])), u3 = new t(c4 ? JSON.parse(JSON.stringify(c4)) : (e6 == null ? void 0 : e6.geometry) ? JSON.parse(JSON.stringify(e6.geometry)) : null, i4, null, o6.properties[n5]);
      } else
        u3 = new t(c4 ? JSON.parse(JSON.stringify(c4)) : null, o6.properties, null, o6.properties[n5]);
      this._featureLookup.set(o6.id, u3), a3.push(u3);
    }), a3;
  }
};

// node_modules/@arcgis/core/rest/knowledgeGraph/ProtoFeatureCollection.js
var T2;
!function(s7) {
  s7.ELEMENTUID = "ELEMENTUID", s7.TYPENAME = "TYPENAME";
}(T2 || (T2 = {}));
var m4 = [T2.ELEMENTUID, T2.TYPENAME];
var d2;
var p4;
!function(s7) {
  s7[s7.ELEMENTUID = 0] = "ELEMENTUID", s7[s7.TYPENAME = 1] = "TYPENAME";
}(d2 || (d2 = {})), function(s7) {
  s7[s7.ELEMENTUID = 0] = "ELEMENTUID", s7[s7.TYPENAME = 1] = "TYPENAME", s7[s7.FROMUID = 2] = "FROMUID", s7[s7.TOUID = 3] = "TOUID";
}(p4 || (p4 = {}));

// node_modules/@arcgis/core/rest/knowledgeGraph/wasmInterface/WasmSerializedLayerData.js
var e4;
var l2;
var s5;
var T3;
!function(e6) {
  e6[e6.featureResult = 0] = "featureResult", e6[e6.countResult = 1] = "countResult", e6[e6.idsResult = 2] = "idsResult";
}(e4 || (e4 = {})), function(e6) {
  e6[e6.upperLeft = 0] = "upperLeft", e6[e6.lowerLeft = 1] = "lowerLeft";
}(l2 || (l2 = {})), function(e6) {
  e6[e6.sqlTypeBigInt = 0] = "sqlTypeBigInt", e6[e6.sqlTypeBinary = 1] = "sqlTypeBinary", e6[e6.sqlTypeBit = 2] = "sqlTypeBit", e6[e6.sqlTypeChar = 3] = "sqlTypeChar", e6[e6.sqlTypeDate = 4] = "sqlTypeDate", e6[e6.sqlTypeDecimal = 5] = "sqlTypeDecimal", e6[e6.sqlTypeDouble = 6] = "sqlTypeDouble", e6[e6.sqlTypeFloat = 7] = "sqlTypeFloat", e6[e6.sqlTypeGeometry = 8] = "sqlTypeGeometry", e6[e6.sqlTypeGUID = 9] = "sqlTypeGUID", e6[e6.sqlTypeInteger = 10] = "sqlTypeInteger", e6[e6.sqlTypeLongNVarchar = 11] = "sqlTypeLongNVarchar", e6[e6.sqlTypeLongVarbinary = 12] = "sqlTypeLongVarbinary", e6[e6.sqlTypeLongVarchar = 13] = "sqlTypeLongVarchar", e6[e6.sqlTypeNChar = 14] = "sqlTypeNChar", e6[e6.sqlTypeNVarChar = 15] = "sqlTypeNVarChar", e6[e6.sqlTypeOther = 16] = "sqlTypeOther", e6[e6.sqlTypeReal = 17] = "sqlTypeReal", e6[e6.sqlTypeSmallInt = 18] = "sqlTypeSmallInt", e6[e6.sqlTypeSqlXml = 19] = "sqlTypeSqlXml", e6[e6.sqlTypeTime = 20] = "sqlTypeTime", e6[e6.sqlTypeTimestamp = 21] = "sqlTypeTimestamp", e6[e6.sqlTypeTimestamp2 = 22] = "sqlTypeTimestamp2", e6[e6.sqlTypeTinyInt = 23] = "sqlTypeTinyInt", e6[e6.sqlTypeVarbinary = 24] = "sqlTypeVarbinary", e6[e6.sqlTypeVarchar = 25] = "sqlTypeVarchar";
}(s5 || (s5 = {})), function(e6) {
  e6[e6.OID_ARRAY = 0] = "OID_ARRAY", e6[e6.GLOBALID_ARRAY = 1] = "GLOBALID_ARRAY", e6[e6.STRING_ARRAY = 2] = "STRING_ARRAY", e6[e6.IDENTIFIER_ARRAY = 3] = "IDENTIFIER_ARRAY";
}(T3 || (T3 = {}));

// node_modules/@arcgis/core/layers/knowledgeGraph/supportUtils.js
function u(e6) {
  if (!e6.spatialReference.isWGS84)
    throw new s("knowledge-graph:layer-support-utils", "The extentToInBoundsRings function only supports WGS84 spatial references.");
  let r5;
  return r5 = e6.xmax > 180 && e6.xmin < 180 ? [[[e6.xmin, e6.ymin], [e6.xmin, e6.ymax], [180, e6.ymax], [180, e6.ymin], [e6.xmin, e6.ymin]], [[-180, e6.ymin], [-180, e6.ymax], [e6.xmax - 360, e6.ymax], [e6.xmax - 360, e6.ymin], [-180, e6.ymin]]] : e6.xmax > 180 && e6.xmin > 180 ? [[[e6.xmin - 360, e6.ymin], [e6.xmin - 360, e6.ymax], [e6.xmax - 360, e6.ymax], [e6.xmax - 360, e6.ymin], [e6.xmin - 360, e6.ymin]]] : e6.xmax > -180 && e6.xmin < -180 ? [[[e6.xmin + 360, e6.ymin], [e6.xmin + 360, e6.ymax], [180, e6.ymax], [180, e6.ymin], [e6.xmin + 360, e6.ymin]], [[-180, e6.ymin], [-180, e6.ymax], [e6.xmax, e6.ymax], [e6.xmax, e6.ymin], [-180, e6.ymin]]] : e6.xmax < -180 && e6.xmin < -180 ? [[[e6.xmin + 360, e6.ymin], [e6.xmin + 360, e6.ymax], [e6.xmax + 360, e6.ymax], [e6.xmax + 360, e6.ymin], [e6.xmin + 360, e6.ymin]]] : [[[e6.xmin, e6.ymin], [e6.xmin, e6.ymax], [e6.xmax, e6.ymax], [e6.xmax, e6.ymin], [e6.xmin, e6.ymin]]], r5;
}
async function w2(e6, t7) {
  var _a, _b;
  const r5 = [], n5 = /* @__PURE__ */ new Map(), s7 = [];
  if ((_a = t7.dataModel) == null ? void 0 : _a.relationshipTypes)
    for (const i4 of t7.dataModel.relationshipTypes)
      i4.name && n5.set(i4.name, []);
  for (const i4 of e6)
    n5.has(i4.typeName) && ((_b = n5.get(i4.typeName)) == null ? void 0 : _b.push(i4.id));
  for (const [o5, l5] of n5) {
    if (l5.length < 1)
      continue;
    const e7 = new a2({ openCypherQuery: `MATCH (n)-[r:${o5}]->(m) WHERE id(r) in $ids RETURN id(n), labels(n)[0], id(m), labels(m)[0]`, bindParameters: { ids: l5 } });
    s7.push(G(t7, e7).then(async (e8) => {
      const t8 = e8.resultRowsStream.getReader();
      for (; ; ) {
        const { done: e9, value: n6 } = await t8.read();
        if (e9)
          break;
        for (const t9 of n6)
          r5.push({ id: t9[0], typeName: t9[1] }), r5.push({ id: t9[2], typeName: t9[3] });
      }
    }));
  }
  return await Promise.all(s7), r5;
}

// node_modules/@arcgis/core/layers/knowledgeGraph/KnowledgeGraphLayerDataManager.js
var w3 = "ESRI__ID";
var T4 = "ESRI__ORIGIN_ID";
var D = "ESRI__DESTINATION_ID";
var I = "ESRI__LAYOUT_GEOMETRY";
var M = "ESRI__AGGREGATION_COUNT";
var k = 12;
var E3 = class extends S {
  constructor(e6) {
    var _a, _b, _c;
    super(e6), this._processingCacheUpdatesLookup = /* @__PURE__ */ new Map(), this.knowledgeGraph = null, this.inclusionModeDefinition = { generateAllSublayers: true, namedTypeDefinitions: /* @__PURE__ */ new Map() }, this.entityTypeNames = /* @__PURE__ */ new Set(), this.relationshipTypeNames = /* @__PURE__ */ new Set(), this.geographicLookup = /* @__PURE__ */ new Map(), this.sublayerCaches = /* @__PURE__ */ new Map(), this.nodeConnectionsLookup = /* @__PURE__ */ new Map(), this.relationshipConnectionsLookup = /* @__PURE__ */ new Map(), this.memberIdTypeLookup = /* @__PURE__ */ new Map();
    const t7 = /* @__PURE__ */ new Map();
    (_a = e6.knowledgeGraph.dataModel.entityTypes) == null ? void 0 : _a.forEach((i4) => {
      var _a2, _b2;
      i4.name && (t7.set(i4.name, "entity"), this._processingCacheUpdatesLookup.set(i4.name, []), e6.inclusionModeDefinition && !((_a2 = e6.inclusionModeDefinition) == null ? void 0 : _a2.generateAllSublayers) || this.entityTypeNames.add(i4.name), (_b2 = i4.properties) == null ? void 0 : _b2.forEach((e7) => {
        e7.geometryType && "esriGeometryNull" !== e7.geometryType && this.geographicLookup.set(i4.name, { name: e7.name ?? "", geometryType: e7.geometryType });
      }));
    }), (_b = e6.knowledgeGraph.dataModel.relationshipTypes) == null ? void 0 : _b.forEach((i4) => {
      var _a2, _b2;
      i4.name && (t7.set(i4.name, "relationship"), this._processingCacheUpdatesLookup.set(i4.name, []), e6.inclusionModeDefinition && !((_a2 = e6.inclusionModeDefinition) == null ? void 0 : _a2.generateAllSublayers) || this.relationshipTypeNames.add(i4.name), (_b2 = i4.properties) == null ? void 0 : _b2.forEach((e7) => {
        e7.geometryType && "esriGeometryNull" !== e7.geometryType && this.geographicLookup.set(i4.name, { name: e7.name ?? "", geometryType: e7.geometryType });
      }));
    }), (_c = e6.inclusionModeDefinition) == null ? void 0 : _c.namedTypeDefinitions.forEach((i4, s7) => {
      var _a2, _b2;
      if ("entity" === t7.get(s7))
        this.entityTypeNames.add(s7);
      else {
        if ("relationship" !== t7.get(s7))
          return n.getLogger(this).warn(`A named type, ${s7}, was in the inclusion list that wasn't in the data model and will be removed`), void ((_a2 = e6.inclusionModeDefinition) == null ? void 0 : _a2.namedTypeDefinitions.delete(s7));
        this.relationshipTypeNames.add(s7);
      }
      const a3 = /* @__PURE__ */ new Map();
      (_b2 = i4.members) == null ? void 0 : _b2.forEach((e7) => {
        r(this.memberIdTypeLookup, e7.id, () => /* @__PURE__ */ new Set()).add(s7);
        const t8 = this.getById(e7.id);
        t8 && a3.set(e7.id, t8);
      }), this.sublayerCaches.set(s7, a3);
    });
  }
  addToLayer(e6) {
    e6.forEach(({ typeName: e7, id: t7 }) => {
      if (!this.inclusionModeDefinition)
        throw new s("knowledge-graph:layer-data-manager", "You cannot add to a layer's exclusion list if it was not created with an exclusion list originally");
      if (this.inclusionModeDefinition.namedTypeDefinitions.has(e7)) {
        if (this.inclusionModeDefinition.namedTypeDefinitions.has(e7)) {
          const i4 = this.inclusionModeDefinition.namedTypeDefinitions.get(e7);
          i4.members || (i4.members = /* @__PURE__ */ new Map()), i4.members.set(t7, { id: t7 }), r(this.memberIdTypeLookup, t7, () => /* @__PURE__ */ new Set()).add(e7);
        }
      } else {
        const i4 = /* @__PURE__ */ new Map();
        i4.set(t7, { id: t7 }), this.inclusionModeDefinition.namedTypeDefinitions.set(e7, { useAllData: false, members: i4 }), r(this.memberIdTypeLookup, t7, () => /* @__PURE__ */ new Set()).add(e7);
      }
    });
  }
  getById(e6) {
    return o3.getInstance().readFromStoreById(e6);
  }
  async getData(e6, t7, i4) {
    var _a, _b;
    if (t7.objectType.name && ((_a = this.inclusionModeDefinition) == null ? void 0 : _a.namedTypeDefinitions) && this.inclusionModeDefinition.namedTypeDefinitions.size > 0 && !this.inclusionModeDefinition.namedTypeDefinitions.has(t7.objectType.name))
      return [];
    let n5;
    if (n5 = e6 || new b2({ where: "1=1", outFields: ["*"] }), "link-chart" === t7.parentCompositeLayer.type) {
      const e7 = t7.parentCompositeLayer, i5 = this._processingCacheUpdatesLookup.get(t7.objectType.name ?? ""), o5 = n5.outFields, s7 = n5.geometry;
      let a3 = "", r5 = "";
      s7 && s7.extent && (a3 = z(s7.extent.ymin, s7.extent.xmin, k), r5 = z(s7.extent.ymax, s7.extent.xmax, k)), o5 && 1 === o5.length && o5[0] === w3 && "1=1" === n5.where || await Promise.all(i5 ?? []);
      const d5 = this.sublayerCaches.has(t7.objectType.name ?? "") ? Array.from((_b = this.sublayerCaches.get(t7.objectType.name)) == null ? void 0 : _b.values()) : [], m5 = [];
      return d5.forEach((i6) => {
        if (this.relationshipTypeNames.has(t7.objectType.name) ? i6.geometry = e7.relationshipLinkChartDiagramLookup.get(i6.attributes[t7.objectIdField]) : i6.geometry = e7.entityLinkChartDiagramLookup.get(i6.attributes[t7.objectIdField]), i6.attributes[I] = i6.geometry, a3 && r5) {
          const n6 = e7.linkChartGeohashLookup.get(i6.attributes[t7.objectIdField]);
          n6 ? n6 >= a3 && n6 <= r5 && m5.push(i6) : m5.push(i6);
        } else
          m5.push(i6);
      }), m5;
    }
    return this.retrieveDataFromService(n5, t7, i4);
  }
  async getConnectedRecordIds(e6, t7) {
    const i4 = [];
    let o5 = "";
    const s7 = [], a3 = /* @__PURE__ */ new Map();
    if (e6.forEach((e7) => {
      var _a;
      if (this.memberIdTypeLookup.has(e7))
        for (const t8 of this.memberIdTypeLookup.get(e7)) {
          if (!this.entityTypeNames.has(t8))
            return;
          a3.has(t8) ? (_a = a3.get(t8)) == null ? void 0 : _a.push(e7) : a3.set(t8, [e7]);
        }
    }), t7 && 0 !== (t7 == null ? void 0 : t7.length)) {
      for (const e7 of t7)
        o5 = o5 + e7 + "|";
      o5 = o5.slice(0, -1);
    }
    return a3.forEach((e7, a4) => {
      let r5;
      r5 = t7 && 0 !== (t7 == null ? void 0 : t7.length) ? `MATCH (n:${a4})-[r:${o5}]-(m) WHERE id(n) IN $ids RETURN id(r), type(r), id(m), labels(m)[0]` : `MATCH (n:${a4})-[r]-(m) WHERE id(n) IN $ids RETURN id(r), type(r), id(m), labels(m)[0]`;
      const p7 = new Promise((t8) => {
        (async () => {
          const t9 = (await G(this.knowledgeGraph, new a2({ openCypherQuery: r5, bindParameters: { ids: e7 } }))).resultRowsStream.getReader();
          try {
            for (; ; ) {
              const { done: e8, value: n5 } = await t9.read();
              if (e8)
                break;
              for (let t10 = 0; t10 < n5.length; t10++) {
                const e9 = n5[t10];
                i4.push({ id: e9[0], typeName: e9[1] }), i4.push({ id: e9[2], typeName: e9[3] });
              }
            }
          } catch (o6) {
            if ("AbortError" !== o6.name)
              throw o6;
            n.getLogger(this).info("Request aborted as expected");
          }
        })().then(() => {
          t8();
        });
      });
      s7.push(p7);
    }), this.refreshCacheContent(), await Promise.all(s7), i4;
  }
  async refreshCacheContent(e6, t7, n5, s7 = true) {
    var _a, _b, _c, _d, _e, _f, _g;
    const a3 = o3.getInstance(), r5 = [], p7 = /* @__PURE__ */ new Map(), d5 = /* @__PURE__ */ new Map();
    (_a = this.knowledgeGraph.dataModel.entityTypes) == null ? void 0 : _a.forEach((e7) => {
      e7.name && d5.set(e7.name, e7);
    }), (_b = this.knowledgeGraph.dataModel.relationshipTypes) == null ? void 0 : _b.forEach((e7) => {
      e7.name && d5.set(e7.name, e7);
    }), e6 || this.inclusionModeDefinition ? e6 ? e6.forEach((e7) => {
      var _a2;
      if (this.memberIdTypeLookup.has(e7))
        for (const t8 of this.memberIdTypeLookup.get(e7))
          p7.has(t8) ? (_a2 = p7.get(t8)) == null ? void 0 : _a2.push(e7) : p7.set(t8, [e7]);
    }) : (_d = (_c = this.inclusionModeDefinition) == null ? void 0 : _c.namedTypeDefinitions) == null ? void 0 : _d.forEach((e7, t8) => {
      e7.useAllData ? p7.set(t8, null) : e7.members && e7.members.forEach((e8) => {
        var _a2;
        p7.has(t8) && null !== p7.get(t8) ? (_a2 = p7.get(t8)) == null ? void 0 : _a2.push(e8.id) : p7.set(t8, [e8.id]);
      });
    }) : ((_e = this.knowledgeGraph.dataModel.entityTypes) == null ? void 0 : _e.forEach((e7) => {
      e7.name && p7.set(e7.name, null);
    }), (_f = this.knowledgeGraph.dataModel.entityTypes) == null ? void 0 : _f.forEach((e7) => {
      e7.name && p7.set(e7.name, null);
    }));
    for (const [m5, l5] of p7) {
      const e7 = new Promise((e8) => {
        const r6 = async () => {
          var _a2, _b2, _c2, _d2, _e2, _f2, _g2;
          const e9 = /* @__PURE__ */ new Set(), r7 = [];
          let p8, h2 = "", c4 = false;
          if (t7 || ((_b2 = (_a2 = d5.get(m5)) == null ? void 0 : _a2.properties) == null ? void 0 : _b2.forEach((t8) => {
            t8.name && e9.add(t8.name);
          })), n5 && this.geographicLookup.has(m5)) {
            const t8 = (_c2 = this.geographicLookup.get(m5)) == null ? void 0 : _c2.name;
            t8 && e9.add(t8);
          }
          if (this.entityTypeNames.has(m5))
            h2 = `MATCH (n:${m5}) ${l5 ? "WHERE id(n) IN $ids " : ""}return ID(n)`, e9.forEach((e10) => {
              h2 += `, n.${e10}`, r7.push(e10);
            });
          else {
            if (!this.relationshipTypeNames.has(m5))
              throw new s("knowledge-graph:layer-data-manager", `The graph type of ${m5} could not be determined. Was this type set in the KG data model and inclusion definition?`);
            c4 = true, h2 = `MATCH ()-[n:${m5}]->() ${l5 ? "WHERE id(n) IN $ids " : ""}return ID(n), id(startNode(n)), id(endNode(n))`, e9.forEach((e10) => {
              h2 += `, n.${e10}`, r7.push(e10);
            });
          }
          p8 = new a2(l5 ? { openCypherQuery: h2, bindParameters: { ids: l5 } } : { openCypherQuery: h2 });
          const y6 = (await G(this.knowledgeGraph, p8)).resultRowsStream.getReader();
          for (; ; ) {
            const { done: e10, value: t8 } = await y6.read();
            if (e10)
              break;
            const i4 = [];
            for (let s8 = 0; s8 < t8.length; s8++) {
              const e11 = t8[s8];
              let n7 = 0, a4 = 0;
              const p10 = { properties: {} };
              for (p10.id = e11[n7], n7++, a4++, c4 && (p10.originId = e11[n7], n7++, a4++, p10.destinationId = e11[n7], n7++, a4++, r(this.nodeConnectionsLookup, p10.originId, () => /* @__PURE__ */ new Set()).add(p10.id), r(this.nodeConnectionsLookup, p10.destinationId, () => /* @__PURE__ */ new Set()).add(p10.id), r(this.relationshipConnectionsLookup, p10.id, () => [p10.originId, p10.destinationId])); n7 < e11.length; n7++)
                p10.properties[r7[n7 - a4]] = e11[n7];
              i4.push(p10);
            }
            const n6 = a3.writeToStore(i4, w3, (_d2 = this.geographicLookup.get(m5)) == null ? void 0 : _d2.name);
            this.sublayerCaches.has(m5) || this.sublayerCaches.set(m5, /* @__PURE__ */ new Map()), s7 && !((_e2 = this.inclusionModeDefinition) == null ? void 0 : _e2.namedTypeDefinitions.has(m5)) && ((_f2 = this.inclusionModeDefinition) == null ? void 0 : _f2.namedTypeDefinitions.set(m5, { useAllData: false, members: /* @__PURE__ */ new Map() })), s7 && !((_g2 = this.inclusionModeDefinition) == null ? void 0 : _g2.namedTypeDefinitions.get(m5).members) && (this.inclusionModeDefinition.namedTypeDefinitions.get(m5).members = /* @__PURE__ */ new Map());
            const p9 = this.sublayerCaches.get(m5);
            n6.forEach((e11) => {
              var _a3, _b3;
              p9 == null ? void 0 : p9.set(e11.attributes[w3], e11), s7 && !((_a3 = this.inclusionModeDefinition) == null ? void 0 : _a3.namedTypeDefinitions.get(m5).members.has(e11.attributes[w3])) && ((_b3 = this.inclusionModeDefinition) == null ? void 0 : _b3.namedTypeDefinitions.get(m5).members.set(e11.attributes[w3], { id: e11.attributes[w3] }), r(this.memberIdTypeLookup, e11.attributes[w3], () => /* @__PURE__ */ new Set()).add(m5));
            });
          }
        };
        r6().then(() => {
          e8(null);
        });
      });
      r5.push(e7), (_g = this._processingCacheUpdatesLookup.get(m5)) == null ? void 0 : _g.push(e7);
    }
    await Promise.all(r5);
  }
  removeFromLayer(e6) {
    var _a, _b, _c;
    const t7 = /* @__PURE__ */ new Set(), i4 = new Set(e6.map((e7) => e7.id));
    for (const n5 of e6)
      t7.add(n5.typeName), 1 === ((_a = this.memberIdTypeLookup.get(n5.id)) == null ? void 0 : _a.size) ? this.memberIdTypeLookup.delete(n5.id) : (_b = this.memberIdTypeLookup.get(n5.id)) == null ? void 0 : _b.delete(n5.typeName), (_c = this.inclusionModeDefinition) == null ? void 0 : _c.namedTypeDefinitions.forEach((e7, t8) => {
        var _a2;
        t8 === n5.typeName && ((_a2 = e7.members) == null ? void 0 : _a2.has(n5.id)) && e7.members.delete(n5.id);
      });
    t7.forEach((e7) => {
      var _a2;
      (_a2 = this.sublayerCaches.get(e7)) == null ? void 0 : _a2.forEach((t8, n5) => {
        var _a3;
        i4.has(n5) && ((_a3 = this.sublayerCaches.get(e7)) == null ? void 0 : _a3.delete(n5));
      });
    });
  }
  async retrieveDataFromService(e6, t7, n5) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q;
    const o5 = o3.getInstance(), a3 = /* @__PURE__ */ new Set(), r5 = [];
    let p7, g2 = "", T5 = [];
    const D2 = "relationship" === t7.graphType, I3 = (_c = (_b = (_a = this.inclusionModeDefinition) == null ? void 0 : _a.namedTypeDefinitions) == null ? void 0 : _b.get(t7.objectType.name)) == null ? void 0 : _c.useAllData, M2 = t7.parentCompositeLayer.sublayerIdsCache.get(t7.objectType.name);
    let k2 = !I3 && M2 ? Array.from(M2).sort() : null;
    if ((_f = (_e = (_d = this.inclusionModeDefinition) == null ? void 0 : _d.namedTypeDefinitions) == null ? void 0 : _e.get(t7.objectType.name)) == null ? void 0 : _f.useAllData)
      ((_i = (_h = (_g = this.inclusionModeDefinition) == null ? void 0 : _g.namedTypeDefinitions) == null ? void 0 : _h.get(t7.objectType.name)) == null ? void 0 : _i.useAllData) && null != e6.objectIds && (k2 = e6.objectIds);
    else if (null != e6.objectIds && k2 && k2.length > 0) {
      const t8 = e6.objectIds;
      e6.objectIds = k2.filter((e7) => t8.includes(e7));
    } else if (null != e6.objectIds)
      k2 = e6.objectIds;
    else {
      if (((_j = this.inclusionModeDefinition) == null ? void 0 : _j.namedTypeDefinitions.has(t7.objectType.name)) && (!((_k = this.inclusionModeDefinition.namedTypeDefinitions.get(t7.objectType.name)) == null ? void 0 : _k.members) || ((_m = (_l = this.inclusionModeDefinition.namedTypeDefinitions.get(t7.objectType.name)) == null ? void 0 : _l.members) == null ? void 0 : _m.size) < 1))
        return e6.objectIds = [], [];
      e6.objectIds = k2;
    }
    if (null != e6.outFields) {
      const i4 = e6.outFields;
      i4.includes("*") ? t7.fields.forEach((e7) => {
        a3.add(e7.name);
      }) : i4.forEach((e7) => {
        e7 !== w3 && e7 !== t7.geometryFieldName && a3.add(e7);
      });
    }
    if (null != e6.geometry) {
      const n6 = e6.geometry;
      let o6;
      const c4 = t7.parentCompositeLayer.dataManager.knowledgeGraph.serviceDefinition, u3 = c4 == null ? void 0 : c4.spatialReference, w4 = (_n = c4 == null ? void 0 : c4.serviceCapabilities) == null ? void 0 : _n.geometryCapabilities;
      let T6 = w4 == null ? void 0 : w4.geometryMaxBoundingRectangleSizeX, I4 = w4 == null ? void 0 : w4.geometryMaxBoundingRectangleSizeY;
      if (((_o = n6 == null ? void 0 : n6.extent) == null ? void 0 : _o.spatialReference) && !((_p = n6.spatialReference) == null ? void 0 : _p.isWGS84) ? (await H(n6.extent.spatialReference, g), o6 = B(n6.extent, g)) : o6 = n6.extent, T6 && I4 && u3) {
        if (4326 !== u3.wkid) {
          const e7 = new w({ spatialReference: u3, xmax: T6, ymax: I4 }), t8 = B(e7, g);
          T6 = t8.xmax, I4 = t8.ymax;
        }
        if (o6.xmax - o6.xmin > T6)
          throw new s("knowledge-graph:layer-data-manager", `Extent x bounds should be within ${T6}° latitude, limit exceeded`);
        if (o6.ymax - o6.ymin > I4)
          throw new s("knowledge-graph:layer-data-manager", `Extent y bounds should be within ${I4}° longitude, limit exceeded`);
      }
      if (null != e6.where && "1=1" !== e6.where) {
        const i4 = await e2(e6.where.toUpperCase(), t7.fieldsIndex);
        t7.fields.forEach((e7) => {
          i4.fieldNames.includes(e7.name) && a3.add(e7.name);
        });
      }
      g2 = D2 ? `Match ()-[n:${t7.objectType.name}]->() WHERE esri.graph.ST_Intersects($param_filter_geom, n.${t7.geometryFieldName}) return ID(n), id(startNode(r)), id(endNode(r))` : `Match (n:${t7.objectType.name}) WHERE esri.graph.ST_Intersects($param_filter_geom, n.${t7.geometryFieldName}) return ID(n)`, t7.geometryFieldName && a3.add(t7.geometryFieldName), a3.forEach((e7) => {
        g2 += `, n.${e7}`, r5.push(e7);
      }), p7 = new a2({ openCypherQuery: g2, bindParameters: { param_filter_geom: new j({ rings: u(o6) }) } });
    } else {
      let i4 = "";
      if (null != e6.where && "1=1" !== e6.where) {
        const n7 = await e2(e6.where, t7.fieldsIndex);
        t7.fields.forEach((e7) => {
          n7.fieldNames.includes(e7.name) && a3.add(e7.name);
        });
        const o7 = /* @__PURE__ */ new Set(["column-reference", "string", "number", "binary-expression"]), r6 = /* @__PURE__ */ new Set(["=", "<", "<=", "<>", ">", ">=", "AND", "OR", "LIKE"]);
        let p8 = false;
        const d5 = (e7) => {
          if ("column-reference" === e7.type)
            return `n.${e7.column}`;
          if ("string" === e7.type)
            return `'${e7.value}'`;
          if ("number" === e7.type)
            return `${e7.value}`;
          if ("binary-expression" === e7.type && o7.has(e7.left.type) && o7.has(e7.right.type) && r6.has(e7.operator))
            return `${d5(e7.left)} ${e7.operator} ${d5(e7.right)}`;
          if ("binary-expression" === e7.type && "LIKE" === e7.operator) {
            let t8 = "";
            if ("function" === e7.left.type && "column-reference" === e7.left.args.value[0].type)
              t8 += `lower(n.${e7.left.args.value[0].column})`;
            else {
              if ("column-reference" !== e7.left.type)
                return p8 = true, "";
              t8 += `lower(n.${e7.left.column})`;
            }
            if (t8 += " CONTAINS (", "string" !== e7.right.type)
              return p8 = true, "";
            {
              let i5 = e7.right.value;
              "%" === i5.charAt(0) && (i5 = i5.slice(1)), "%" === i5.charAt(i5.length - 1) && (i5 = i5.slice(0, -1)), t8 += `'${i5.toLowerCase()}')`;
            }
            return t8;
          }
          return p8 = true, "";
        };
        i4 = d5(n7.parseTree), p8 && (i4 = "");
      }
      let n6 = "";
      n6 = D2 ? `Match ()-[n:${t7.objectType.name}]->()` : `Match (n:${t7.objectType.name})`;
      let o6 = false;
      k2 && (o6 = true, n6 += " WHERE ID(n) IN $ids"), i4 && (n6 += o6 ? " AND" : " WHERE", n6 += ` ${i4}`), n6 += " return ID(n)", D2 && (n6 += ", id(startNode(n)), id(endNode(n))"), e6.returnGeometry && t7.geometryFieldName && a3.add(t7.geometryFieldName), a3.forEach((e7) => {
        n6 += `, n.${e7}`, r5.push(e7);
      }), p7 = new a2(k2 ? { openCypherQuery: n6, bindParameters: { ids: k2 } } : { openCypherQuery: n6 });
    }
    const E5 = (await G(t7.parentCompositeLayer.dataManager.knowledgeGraph, p7, n5)).resultRowsStream.getReader();
    for (; ; ) {
      const { done: e7, value: i4 } = await E5.read();
      if (e7)
        break;
      const n6 = [];
      for (let t8 = 0; t8 < i4.length; t8++) {
        const e8 = i4[t8];
        let o6 = 0, s7 = 0;
        const a4 = { properties: {} };
        for (a4.id = e8[o6], o6++, s7++, D2 && (a4.originId = e8[o6], o6++, s7++, a4.destinationId = e8[o6], o6++, s7++); o6 < e8.length; o6++)
          a4.properties[r5[o6 - s7]] = e8[o6];
        n6.push(a4);
      }
      T5 = T5.concat(o5.writeToStore(n6, w3, (_q = t7.parentCompositeLayer.dataManager.geographicLookup.get(t7.objectType.name)) == null ? void 0 : _q.name));
    }
    return T5;
  }
};
e([y()], E3.prototype, "knowledgeGraph", void 0), e([y()], E3.prototype, "inclusionModeDefinition", void 0), e([y()], E3.prototype, "entityTypeNames", void 0), e([y()], E3.prototype, "relationshipTypeNames", void 0), e([y()], E3.prototype, "geographicLookup", void 0), e([y()], E3.prototype, "sublayerCaches", void 0), e([y()], E3.prototype, "nodeConnectionsLookup", void 0), e([y()], E3.prototype, "relationshipConnectionsLookup", void 0), e([y()], E3.prototype, "memberIdTypeLookup", void 0), E3 = e([a("esri.layers.knowledgeGraph.KnowledgeGraphLayerDataManager")], E3);

// node_modules/@arcgis/core/layers/knowledgeGraph/KnowledgeGraphSublayerBase.js
var t6 = s3();
var p5 = (s7) => {
  let p7 = class extends s7 {
    constructor() {
      super(...arguments), this.fields = [], this.fieldsIndex = null;
    }
  };
  return e([y(t6.fields)], p7.prototype, "fields", void 0), e([y(t6.fieldsIndex)], p7.prototype, "fieldsIndex", void 0), p7 = e([a("esri.layers.knowledgeGraph.KnowledgeGraphSublayerBase")], p7), p7;
};

// node_modules/@arcgis/core/layers/knowledgeGraph/KnowledgeGraphSublayer.js
var I2 = class extends c(p5(n3(t2(f(b))))) {
  constructor(e6) {
    var _a, _b, _c, _d, _e;
    if (super(e6), this.capabilities = l(false, false), this.definitionExpression = "", this.displayField = "", this.elevationInfo = null, this.geometryType = null, this.geometryFieldName = null, this.graphType = null, this.hasM = false, this.hasZ = false, this.labelsVisible = null, this.labelingInfo = null, this.objectIdField = w3, this.objectType = null, this.parentCompositeLayer = null, this.popupEnabled = true, this.popupTemplate = null, this.source = { openPorts: () => this.load().then(() => {
      const e7 = new MessageChannel();
      return new E(e7.port1, { channel: e7, client: { queryFeatures: (e8, t7 = {}) => {
        const r5 = b2.fromJSON(e8);
        return this.queryFeaturesJSON(r5, t7);
      } } }), [e7.port2];
    }) }, this.type = "knowledge-graph-sublayer", "link-chart" === e6.parentCompositeLayer.type)
      "relationship" === e6.graphType ? this.geometryType = "polyline" : this.geometryType = "point", this.geometryFieldName = I;
    else if (((_a = e6.parentCompositeLayer.dataManager.geographicLookup.get(e6.objectType.name)) == null ? void 0 : _a.geometryType) && "esriGeometryNull" !== ((_b = e6.parentCompositeLayer.dataManager.geographicLookup.get(e6.objectType.name)) == null ? void 0 : _b.geometryType)) {
      const t7 = e6.parentCompositeLayer.dataManager.geographicLookup.get(e6.objectType.name);
      this.geometryFieldName = (t7 == null ? void 0 : t7.name) ?? null, this.geometryType = (t7 == null ? void 0 : t7.geometryType) ? o.fromJSON(t7.geometryType) : null;
      const r5 = t7 == null ? void 0 : t7.name, o5 = r5 ? (_c = e6.objectType.properties) == null ? void 0 : _c[r5] : null;
      o5 ? (this.hasM = o5.hasM ?? false, this.hasZ = o5.hasZ ?? false) : (this.hasM = false, this.hasZ = false);
    } else
      this.geometryType = null;
    (_d = e6.objectType.properties) == null ? void 0 : _d.forEach((e7) => {
      let t7 = null, r5 = e7.fieldType;
      "esriFieldTypeOID" === r5 && (r5 = "esriFieldTypeInteger"), this.fields.push(y3.fromJSON({ name: e7.name, type: r5, alias: e7.alias, defaultValue: t7, editable: e7.editable, nullable: e7.nullable }));
    }), this.fields.push(y3.fromJSON({ name: this.objectIdField, type: "esriFieldTypeString", alias: this.objectIdField, editable: false })), this.fields.push(y3.fromJSON({ name: M, type: "esriFieldTypeInteger", alias: M, editable: false })), this._set("fields", [...this.fields]), ((_e = e6.parentCompositeLayer.dataManager.knowledgeGraph.dataModel) == null ? void 0 : _e.spatialReference) && (this.spatialReference = e6.parentCompositeLayer.dataManager.knowledgeGraph.dataModel.spatialReference), "link-chart" === e6.parentCompositeLayer.type ? "relationship" === e6.graphType ? this.renderer = t3(o2(o.toJSON("polyline")).renderer) : this.renderer = t3(o2(o.toJSON("point")).renderer) : this.renderer = t3(o2(o.toJSON(this.geometryType)).renderer);
  }
  get defaultPopupTemplate() {
    return this.createPopupTemplate();
  }
  set renderer(e6) {
    p3(e6, this.fieldsIndex), this._set("renderer", e6);
  }
  createPopupTemplate(e6) {
    return p(this, e6);
  }
  createQuery() {
    return new b2({ where: "1=1", outFields: ["*"] });
  }
  getField(e6) {
    for (let t7 = 0; t7 < this.fields.length; t7++)
      if (this.fields[t7].name === e6)
        return this.fields[t7];
    return null;
  }
  getFieldDomain(e6, t7) {
    return null;
  }
  async queryFeatures(e6, t7) {
    const { resolvedQuery: r5, queryEngine: o5 } = await this._setupQueryObjects(e6), s7 = d.fromJSON(await o5.executeQuery(r5.toJSON(), t7 == null ? void 0 : t7.signal));
    return s7.features.forEach((e7) => {
      e7.sourceLayer = this;
    }), s7;
  }
  async queryFeaturesJSON(e6, t7) {
    const { resolvedQuery: r5, queryEngine: o5 } = await this._setupQueryObjects(e6);
    return await o5.executeQuery(r5.toJSON(), t7 == null ? void 0 : t7.signal);
  }
  async queryFeatureCount(e6, t7) {
    const { resolvedQuery: r5, queryEngine: o5 } = await this._setupQueryObjects(e6);
    return o5.executeQueryForCount(r5.toJSON(), t7 == null ? void 0 : t7.signal);
  }
  async queryExtent(e6 = {}, t7) {
    var _a, _b, _c, _d;
    const r5 = { ...e6, returnGeometry: true }, { resolvedQuery: o5, queryEngine: s7 } = await this._setupQueryObjects(r5), i4 = await s7.executeQueryForExtent(o5.toJSON(), t7 == null ? void 0 : t7.signal);
    let a3;
    return a3 = null != ((_a = i4.extent) == null ? void 0 : _a.xmin) && null != ((_b = i4.extent) == null ? void 0 : _b.xmax) && null != ((_c = i4.extent) == null ? void 0 : _c.ymin) && null != ((_d = i4.extent) == null ? void 0 : _d.ymax) ? new w(i4.extent) : new w(), { count: i4.count, extent: a3 };
  }
  async queryObjectIds(e6, t7) {
    const r5 = b2.from(e6);
    let o5;
    if ("link-chart" === this.parentCompositeLayer.type && this._cachedQueryEngine)
      o5 = this._cachedQueryEngine;
    else {
      const e7 = await this.parentCompositeLayer.dataManager.getData(r5, this, t7);
      o5 = this.loadQueryEngine(e7);
    }
    return o5.executeQueryForIds(r5.toJSON(), t7 == null ? void 0 : t7.signal);
  }
  loadQueryEngine(e6) {
    const t7 = new m3({ geometryType: o.toJSON(this.geometryType), hasM: this.hasM, hasZ: this.hasZ }), r5 = new $({ fieldsIndex: this.fieldsIndex.toJSON(), geometryType: o.toJSON(this.geometryType), hasM: this.hasM, hasZ: this.hasZ, objectIdField: this.objectIdField, spatialReference: this.spatialReference.toJSON(), timeInfo: null, featureStore: t7 });
    return r5.featureStore.addMany(e6), r5;
  }
  async refreshCachedQueryEngine() {
    const e6 = await this.parentCompositeLayer.dataManager.getData(new b2({ where: "1=1", outFields: [w3] }), this);
    this._cachedQueryEngine = this.loadQueryEngine(e6);
  }
  async _setupQueryObjects(e6, t7) {
    var _a;
    const r5 = b2.from(e6), o5 = r5.geometry;
    let s7;
    if (o5 && !((_a = o5.spatialReference) == null ? void 0 : _a.isWGS84) && (await H(o5.spatialReference, g), r5.geometry = B(o5 instanceof j || o5 instanceof m ? o5 : o5.extent, g)), "link-chart" === this.parentCompositeLayer.type && this._cachedQueryEngine)
      s7 = this._cachedQueryEngine;
    else {
      const e7 = await this.parentCompositeLayer.dataManager.getData(r5, this, t7);
      s7 = this.loadQueryEngine(e7);
    }
    return { resolvedQuery: r5, queryEngine: s7 };
  }
};
e([y()], I2.prototype, "capabilities", void 0), e([y({ readOnly: true })], I2.prototype, "defaultPopupTemplate", null), e([y()], I2.prototype, "definitionExpression", void 0), e([y()], I2.prototype, "displayField", void 0), e([y()], I2.prototype, "elevationInfo", void 0), e([y()], I2.prototype, "geometryType", void 0), e([y()], I2.prototype, "geometryFieldName", void 0), e([y()], I2.prototype, "graphType", void 0), e([y()], I2.prototype, "hasM", void 0), e([y()], I2.prototype, "hasZ", void 0), e([y()], I2.prototype, "labelsVisible", void 0), e([y()], I2.prototype, "labelingInfo", void 0), e([y()], I2.prototype, "objectIdField", void 0), e([y()], I2.prototype, "objectType", void 0), e([y()], I2.prototype, "parentCompositeLayer", void 0), e([y(y4)], I2.prototype, "popupEnabled", void 0), e([y({ type: P, json: { name: "popupInfo", write: true } })], I2.prototype, "popupTemplate", void 0), e([y({ types: m2, json: { write: { target: "layerDefinition.drawingInfo.renderer" } } })], I2.prototype, "renderer", null), e([y()], I2.prototype, "source", void 0), e([y({ json: { read: false } })], I2.prototype, "type", void 0), I2 = e([a("esri.layers.knowledgeGraph.KnowledgeGraphSublayer")], I2);
var R = I2;

// node_modules/@arcgis/core/libs/linkchartlayout/LinkChartLayout.js
var e5;
var r4 = null;
function n4() {
  return e5 || (e5 = import("./lclayout-5J7FFVAC.js").then((t7) => t7.l).then(({ default: e6 }) => e6({ locateFile: (e7) => n2(`esri/libs/linkchartlayout/${e7}`) })).then((t7) => {
    s6(t7);
  }), e5);
}
function s6(t7) {
  r4 = t7;
}
var u2;
var o4;
function y5(t7, e6, a3, n5, s7, u3) {
  const o5 = a3.length, y6 = s7.length, i4 = Float64Array.BYTES_PER_ELEMENT, l5 = Uint32Array.BYTES_PER_ELEMENT, c4 = Uint8Array.BYTES_PER_ELEMENT, E5 = 16, p7 = E5 - 1 + o5 * (c4 + 2 * i4) + y6 * (2 * l5), f4 = r4._malloc(p7);
  try {
    const c5 = f4 + E5 - f4 % E5, p8 = c5 + o5 * i4, A2 = p8 + o5 * i4, b4 = A2 + y6 * l5, P3 = b4 + y6 * l5, L2 = () => [r4.HEAPF64.subarray(c5 >> 3, (c5 >> 3) + o5), r4.HEAPF64.subarray(p8 >> 3, (p8 >> 3) + o5), r4.HEAPU32.subarray(A2 >> 2, (A2 >> 2) + y6), r4.HEAPU32.subarray(b4 >> 2, (b4 >> 2) + y6), r4.HEAPU8.subarray(P3, P3 + o5)], [d5, C, H2, _, g2] = L2();
    d5.set(a3), C.set(n5), H2.set(s7), _.set(u3), g2.set(e6);
    let F = t7(o5, P3, c5, p8, y6, A2, b4), R2 = null;
    if (F) {
      const t8 = r4.getLayoutLinksTypes(), e7 = r4.getLayoutLinksVerticesEndIndices(), a4 = r4.getLayoutLinksVertices(), n6 = r4.countLayoutLinksVertices();
      !y6 || t8 && e7 ? n6 && !a4 ? F = false : R2 = { types: new Uint8Array(r4.HEAPU8.subarray(t8, t8 + y6)), vertexEndIndex: new Uint32Array(r4.HEAPU32.subarray(e7 >> 2, (e7 >> 2) + y6)), vertices: new Float64Array(r4.HEAPF64.subarray(a4 >> 3, (a4 >> 3) + 2 * n6)) } : F = false;
    }
    const [h2, U2, m5, B2, T5] = L2();
    return a3.set(h2), n5.set(U2), s7.set(m5), u3.set(B2), e6.set(T5), { success: F, links: R2 };
  } finally {
    r4._free(f4), r4.cleanupLayout();
  }
}
!function(t7) {
  t7[t7.None = 0] = "None", t7[t7.IsMovable = 1] = "IsMovable", t7[t7.IsGeographic = 2] = "IsGeographic", t7[t7.IsRoot = 4] = "IsRoot";
}(u2 || (u2 = {})), function(t7) {
  t7[t7.Regular = 0] = "Regular", t7[t7.Orthogonal = 1] = "Orthogonal", t7[t7.Curved = 2] = "Curved", t7[t7.Recursive = 3] = "Recursive";
}(o4 || (o4 = {}));
var i3 = 2;
var l4 = 1;
var c3 = -1;
var E4;
var p6;
var f3;
var A;
var b3;
var P2;
var L;
var d4;
!function(t7) {
  function e6() {
    return r4.getMinIdealEdgeLength();
  }
  function a3(t8, e7, a4, n5, s7, u3 = i3, o5 = l4, E5 = c3) {
    return y5((t9, e8, a5, n6, s8, y6, i4) => r4.applyForceDirectedLayout(t9, e8, a5, n6, s8, y6, i4, u3, o5, E5), t8, e7, a4, n5, s7);
  }
  t7.getMinIdealEdgeLength = e6, t7.apply = a3;
}(E4 || (E4 = {})), function(t7) {
  function e6(t8, e7, a3, n5, s7, u3 = i3, o5 = l4, E5 = c3) {
    return y5((t9, e8, a4, n6, s8, y6, i4) => r4.applyCommunityLayout(t9, e8, a4, n6, s8, y6, i4, u3, o5, E5), t8, e7, a3, n5, s7);
  }
  t7.apply = e6;
}(p6 || (p6 = {})), function(t7) {
  function e6(t8, e7, a3, n5, s7) {
    return y5(r4.applySimpleLayout, t8, e7, a3, n5, s7);
  }
  t7.apply = e6;
}(f3 || (f3 = {})), function(t7) {
  function e6(t8, e7, a3, n5, s7) {
    return y5(r4.applyHierarchicalLayout, t8, e7, a3, n5, s7);
  }
  t7.apply = e6;
}(A || (A = {})), function(t7) {
  function e6(t8, e7, a3, n5, s7) {
    return y5(r4.applyRadialTreeLayout, t8, e7, a3, n5, s7);
  }
  t7.apply = e6;
}(b3 || (b3 = {})), function(t7) {
  function e6(t8, e7, a3, n5, s7) {
    return y5(r4.applySmartTreeLayout, t8, e7, a3, n5, s7);
  }
  t7.apply = e6;
}(P2 || (P2 = {})), function(t7) {
  t7[t7.Undirected = 0] = "Undirected", t7[t7.Directed = 1] = "Directed", t7[t7.Reversed = 2] = "Reversed";
}(L || (L = {})), function(t7) {
  t7[t7.ByCC_Raw = 0] = "ByCC_Raw", t7[t7.ByCC_NormalizeGlobally = 1] = "ByCC_NormalizeGlobally", t7[t7.ByCC_NormalizeByCC = 2] = "ByCC_NormalizeByCC";
}(d4 || (d4 = {}));

// node_modules/@arcgis/core/layers/LinkChartLayer.js
var S2 = (e6, t7, a3) => (e6.has(t7) || e6.set(t7, a3()), e6.get(t7));
var z2 = class extends n3(t2(b)) {
  constructor(e6) {
    if (super(e6), this.dataPreloadedInLocalCache = false, this.defaultLinkChartConfig = null, this._currentLinkChartConfig = { layoutMode: "RADIAL_TREE" }, this._graphTypeLookup = /* @__PURE__ */ new Map(), this.dataManager = null, this.knowledgeGraph = null, this.layers = new V(), this.entityLinkChartDiagramLookup = /* @__PURE__ */ new Map(), this.relationshipLinkChartDiagramLookup = /* @__PURE__ */ new Map(), this.linkChartExtent = new w({ xmin: -1e-7, ymin: -1e-7, xmax: 1e-7, ymax: 1e-7 }), this.linkChartGeohashLookup = /* @__PURE__ */ new Map(), this.memberEntityTypes = null, this.memberRelationshipTypes = null, this.sublayerIdsCache = /* @__PURE__ */ new Map(), this.tables = new V(), this.type = "link-chart", this._originalInclusionList = e6.inclusionModeDefinition, e6.dataPreloadedInLocalCache && !e6.inclusionModeDefinition)
      throw new s("knowledge-graph:linkchart-layer-constructor", "If creating a link chart composite layer and configured that data is already loaded in the cache, you must specify an inclusion list so the Composite Layer knows what records belong to it");
  }
  normalizeCtorArgs(e6) {
    return { url: e6.url, title: e6.title, dataPreloadedInLocalCache: e6.dataPreloadedInLocalCache, defaultLinkChartConfig: e6.defaultLinkChartConfig };
  }
  _initializeLayerProperties(e6) {
    var _a, _b, _c, _d, _e, _f;
    if (!this.title && this.url) {
      const e7 = this.url.split("/");
      this.title = e7[e7.length - 2];
    }
    const t7 = /* @__PURE__ */ new Set();
    let n5 = [], s7 = [];
    if (e6.inclusionModeDefinition && (!e6.inclusionModeDefinition.namedTypeDefinitions || e6.inclusionModeDefinition.namedTypeDefinitions.size < 1))
      throw new s("knowledge-graph:composite-layer-constructor", "If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined");
    (_a = e6.knowledgeGraph.dataModel.entityTypes) == null ? void 0 : _a.forEach((e7) => {
      e7.name && this._graphTypeLookup.set(e7.name, e7);
    }), (_b = e6.knowledgeGraph.dataModel.relationshipTypes) == null ? void 0 : _b.forEach((e7) => {
      e7.name && this._graphTypeLookup.set(e7.name, e7);
    }), ((_c = e6.inclusionModeDefinition) == null ? void 0 : _c.generateAllSublayers) ? (n5 = e6.knowledgeGraph.dataModel.entityTypes ?? [], s7 = e6.knowledgeGraph.dataModel.relationshipTypes ?? []) : ((_d = e6.inclusionModeDefinition) == null ? void 0 : _d.namedTypeDefinitions) && ((_e = e6.inclusionModeDefinition) == null ? void 0 : _e.namedTypeDefinitions.size) > 0 ? (_f = e6.inclusionModeDefinition) == null ? void 0 : _f.namedTypeDefinitions.forEach((a3, o6) => {
      var _a2, _b2;
      if (!this._graphTypeLookup.get(o6))
        return n.getLogger(this).warn(`A named type, ${o6}, was in the inclusion list that wasn't in the data model and will be removed`), void ((_a2 = e6.inclusionModeDefinition) == null ? void 0 : _a2.namedTypeDefinitions.delete(o6));
      this._graphTypeLookup.get(o6) instanceof p2 || "strictOrigin" in this._graphTypeLookup.get(o6) ? t7.has(o6) || (t7.add(o6), s7.push(this._graphTypeLookup.get(o6))) : this._graphTypeLookup.get(o6) instanceof t4 || "properties" in this._graphTypeLookup.get(o6) ? t7.has(o6) || (t7.add(o6), n5.push(this._graphTypeLookup.get(o6))) : (n.getLogger(this).warn(`A named type, ${o6}, was in the inclusion list that wasn't properly modeled and will be removed`), (_b2 = e6.inclusionModeDefinition) == null ? void 0 : _b2.namedTypeDefinitions.delete(o6));
    }) : (n5 = e6.knowledgeGraph.dataModel.entityTypes ?? [], s7 = e6.knowledgeGraph.dataModel.relationshipTypes ?? []);
    const o5 = new E3({ knowledgeGraph: e6.knowledgeGraph, inclusionModeDefinition: e6.inclusionModeDefinition });
    this.knowledgeGraph = e6.knowledgeGraph, this.memberEntityTypes = n5, this.memberRelationshipTypes = s7, this.dataManager = o5;
  }
  load(e6) {
    return this.addResolvingPromise(new Promise((t7) => {
      T(this.url).then((a3) => {
        var _a, _b, _c, _d, _e, _f;
        if (this._initializeLayerProperties({ knowledgeGraph: a3, inclusionModeDefinition: this._originalInclusionList }), ((_b = (_a = this.dataManager.inclusionModeDefinition) == null ? void 0 : _a.namedTypeDefinitions) == null ? void 0 : _b.size) || (this.dataManager.inclusionModeDefinition = { generateAllSublayers: false, namedTypeDefinitions: /* @__PURE__ */ new Map() }, (_c = this.dataManager.knowledgeGraph.dataModel.entityTypes) == null ? void 0 : _c.forEach((e7) => {
          var _a2;
          e7.name && ((_a2 = this.dataManager.inclusionModeDefinition) == null ? void 0 : _a2.namedTypeDefinitions.set(e7.name, { useAllData: true }));
        }), (_d = this.dataManager.knowledgeGraph.dataModel.relationshipTypes) == null ? void 0 : _d.forEach((e7) => {
          var _a2;
          e7.name && ((_a2 = this.dataManager.inclusionModeDefinition) == null ? void 0 : _a2.namedTypeDefinitions.set(e7.name, { useAllData: true }));
        })), this.dataPreloadedInLocalCache)
          this.loadLayerAssumingLocalCache(), this.dataManager.inclusionModeDefinition && (this.dataManager.inclusionModeDefinition.generateAllSublayers = false), (_e = this.dataManager.inclusionModeDefinition) == null ? void 0 : _e.namedTypeDefinitions.forEach((e7) => {
            var _a2;
            e7.useAllData = false, (_a2 = e7.members) == null ? void 0 : _a2.forEach((e8) => {
              let t8;
              t8 = e8.linkChartLocation instanceof e3 ? e8.linkChartLocation : e8.linkChartLocation ? ot(e8.linkChartLocation) : null, t8 && 2 === t8.coords.length && 0 === t8.lengths.length ? (this.linkChartGeohashLookup.set(e8.id, z(t8.coords[1], t8.coords[0], k)), this.entityLinkChartDiagramLookup.set(e8.id, t8)) : (this.linkChartGeohashLookup.set(e8.id, ""), this.relationshipLinkChartDiagramLookup.set(e8.id, t8));
            }), this.addResolvingPromise(this._initializeDiagram().then(async () => {
              this.layers.forEach(async (e8) => {
                await e8.refreshCachedQueryEngine();
              }), this.tables.forEach(async (e8) => {
                await e8.refreshCachedQueryEngine();
              });
            }));
          });
        else {
          const t8 = "GEOGRAPHIC" === ((_f = this.defaultLinkChartConfig) == null ? void 0 : _f.layoutMode);
          this.addResolvingPromise(this.dataManager.refreshCacheContent(void 0, false, t8, true).then(async () => {
            s2(e6);
            const t9 = [], a4 = [];
            this.loadLayerAssumingLocalCache(), this.dataManager.inclusionModeDefinition && (this.dataManager.inclusionModeDefinition.generateAllSublayers = false, this.dataManager.inclusionModeDefinition.namedTypeDefinitions.forEach((e7) => {
              e7.useAllData = false;
            })), await this._initializeDiagram(), this.layers.forEach((e7) => {
              a4.push(e7.refreshCachedQueryEngine()), t9.push(new Promise((t10) => {
                e7.on("layerview-create", () => {
                  t10(null);
                });
              }));
            }), this.tables.forEach((e7) => {
              a4.push(e7.refreshCachedQueryEngine());
            }), await Promise.all(a4);
          }));
        }
        t7(null);
      });
    })), Promise.resolve(this);
  }
  async addRecords(e6, t7) {
    let a3 = [];
    (t7 == null ? void 0 : t7.cascadeAddRelationshipEndNodes) && this.dataManager.knowledgeGraph.dataModel && (a3 = await w2(e6, this.dataManager.knowledgeGraph));
    const i4 = e6.concat(a3).filter((e7) => {
      var _a;
      return !((_a = this.sublayerIdsCache.get(e7.typeName)) == null ? void 0 : _a.has(e7.id));
    });
    await this._handleNewRecords(i4);
  }
  async removeRecords(e6, { cascadeRemoveRelationships: t7 = true, recalculateLayout: a3 = false } = { cascadeRemoveRelationships: true, recalculateLayout: false }) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    let i4 = [];
    for (const s7 of e6)
      false === ((_c = (_b = (_a = this.dataManager.inclusionModeDefinition) == null ? void 0 : _a.namedTypeDefinitions) == null ? void 0 : _b.get(s7.typeName)) == null ? void 0 : _c.useAllData) && ((_g = (_f = (_e = (_d = this.dataManager.inclusionModeDefinition) == null ? void 0 : _d.namedTypeDefinitions) == null ? void 0 : _e.get(s7.typeName)) == null ? void 0 : _f.members) == null ? void 0 : _g.has(s7.id)) && i4.push(s7);
    if (t7) {
      const e7 = /* @__PURE__ */ new Set(), t8 = [];
      for (const a4 of i4)
        if (this.dataManager.nodeConnectionsLookup.has(a4.id))
          for (const t9 of this.dataManager.nodeConnectionsLookup.get(a4.id))
            e7.add(t9);
      for (const a4 of e7)
        if (this.dataManager.memberIdTypeLookup.has(a4))
          for (const e8 of this.dataManager.memberIdTypeLookup.get(a4))
            this.dataManager.relationshipTypeNames.has(e8) && t8.push({ id: a4, typeName: e8 });
      i4 = i4.concat(t8);
    }
    this.dataManager.removeFromLayer(i4);
    for (const s7 of i4)
      (_h = this.sublayerIdsCache.get(s7.typeName)) == null ? void 0 : _h.delete(s7.id), this.dataManager.relationshipTypeNames.has(s7.typeName) ? this.relationshipLinkChartDiagramLookup.delete(s7.id) : this.entityLinkChartDiagramLookup.delete(s7.id);
    a3 && await this.calculateLinkChartLayout(this._currentLinkChartConfig.layoutMode, {});
    const n5 = [];
    return this.layers.forEach((e7) => {
      n5.push(e7.refreshCachedQueryEngine());
    }), await Promise.all(n5), this._refreshNamedTypes(), i4;
  }
  async expand(e6, t7) {
    const a3 = await this.dataManager.getConnectedRecordIds(e6, t7), i4 = a3.filter((e7) => {
      var _a;
      return !((_a = this.sublayerIdsCache.get(e7.typeName)) == null ? void 0 : _a.has(e7.id));
    });
    return await this._handleNewRecords(a3), { records: i4 };
  }
  loadLayerAssumingLocalCache() {
    var _a, _b;
    this.memberRelationshipTypes.forEach((e6) => {
      const t7 = new R({ objectType: e6, parentCompositeLayer: this, graphType: "relationship", title: e6.name });
      t7.geometryType ? this.layers.push(t7) : this.tables.push(t7), this.dataManager.sublayerCaches.has(e6.name) || this.dataManager.sublayerCaches.set(e6.name, /* @__PURE__ */ new Map());
    }), this.memberEntityTypes.forEach((e6) => {
      const t7 = new R({ objectType: e6, parentCompositeLayer: this, graphType: "entity", title: e6.name });
      t7.geometryType ? this.layers.push(t7) : this.tables.push(t7), this.dataManager.sublayerCaches.has(e6.name) || this.dataManager.sublayerCaches.set(e6.name, /* @__PURE__ */ new Map());
    }), ((_a = this.dataManager.inclusionModeDefinition) == null ? void 0 : _a.namedTypeDefinitions) && ((_b = this.dataManager.inclusionModeDefinition) == null ? void 0 : _b.namedTypeDefinitions.forEach((e6, t7) => {
      var _a2;
      const a3 = S2(this.sublayerIdsCache, t7, () => /* @__PURE__ */ new Set());
      (_a2 = e6.members) == null ? void 0 : _a2.forEach((e7) => {
        if (a3.add(e7.id), e7.linkChartLocation)
          if (e7.linkChartLocation instanceof e3)
            this.dataManager.relationshipTypeNames.has(t7) ? this.relationshipLinkChartDiagramLookup.set(e7.id, e7.linkChartLocation) : this.entityLinkChartDiagramLookup.set(e7.id, e7.linkChartLocation), 2 === e7.linkChartLocation.coords.length && 0 === e7.linkChartLocation.lengths.length ? this.linkChartGeohashLookup.set(e7.id, z(e7.linkChartLocation.coords[1], e7.linkChartLocation.coords[0], k)) : this.linkChartGeohashLookup.set(e7.id, "");
          else {
            const a4 = ot(e7.linkChartLocation);
            this.dataManager.relationshipTypeNames.has(t7) ? this.relationshipLinkChartDiagramLookup.set(e7.id, e7.linkChartLocation ? a4 : null) : this.entityLinkChartDiagramLookup.set(e7.id, e7.linkChartLocation ? a4 : null), "x" in e7.linkChartLocation && "y" in e7.linkChartLocation ? this.linkChartGeohashLookup.set(e7.id, z(e7.linkChartLocation.x, e7.linkChartLocation.y, k)) : this.linkChartGeohashLookup.set(e7.id, "");
          }
      });
    }));
  }
  async calculateLinkChartLayout(e6 = "RADIAL_TREE", t7) {
    var _a, _b, _c;
    const n5 = [], s7 = [], o5 = [];
    this.dataManager.sublayerCaches.forEach((e7, t8) => {
      this.dataManager.entityTypeNames.has(t8) ? e7.forEach((e8) => {
        n5.push({ typeName: t8, feature: e8 });
      }) : this.dataManager.relationshipTypeNames.has(t8) && e7.forEach((e8) => {
        s7.push({ typeName: t8, feature: e8 });
      });
    }), this.entityLinkChartDiagramLookup = /* @__PURE__ */ new Map(), this.relationshipLinkChartDiagramLookup = /* @__PURE__ */ new Map();
    const h2 = /* @__PURE__ */ new Map(), p7 = /* @__PURE__ */ new Map(), d5 = /* @__PURE__ */ new Map(), k2 = /* @__PURE__ */ new Map(), L2 = new Uint8Array(n5.length), C = new Float64Array(n5.length), M2 = new Float64Array(n5.length), I3 = new Uint32Array(s7.length), v = new Uint32Array(s7.length), A2 = [], S3 = "FORCE_DIRECTED", z3 = new w({ xmin: -1e-7, ymin: -1e-7, xmax: 1e-7, ymax: 1e-7 });
    let O2, U2 = "FORCE_DIRECTED", Q = 0, F = 0;
    switch (U2 = "GEOGRAPHIC" === e6 ? S3 : e6, U2) {
      case "FORCE_DIRECTED":
        O2 = E4.apply;
        break;
      case "COMMUNITY":
        O2 = p6.apply;
        break;
      case "HIERARCHICAL":
        O2 = A.apply;
        break;
      case "RADIAL_TREE":
        O2 = b3.apply;
        break;
      case "SMART_TREE":
        O2 = P2.apply;
        break;
      default:
        O2 = f3.apply;
    }
    n5.forEach(({ typeName: a3, feature: i4 }) => {
      var _a2, _b2, _c2;
      if ((_a2 = t7 == null ? void 0 : t7.lockedNodeLocations) == null ? void 0 : _a2.has(i4.attributes[w3])) {
        "GEOGRAPHIC" === e6 && this.dataManager.geographicLookup.has(a3) ? L2[Q] = u2.IsGeographic : L2[Q] = u2.None;
        const n6 = t7.lockedNodeLocations.get(i4.attributes[w3]);
        C[Q] = n6.x, M2[Q] = n6.y;
      } else if ("GEOGRAPHIC" === e6 && this.dataManager.geographicLookup.has(a3)) {
        L2[Q] = u2.IsGeographic;
        let e7 = null;
        const t8 = i4.attributes[this.dataManager.geographicLookup.get(a3).name], n6 = (_b2 = this.dataManager.geographicLookup.get(a3)) == null ? void 0 : _b2.geometryType;
        switch (n6) {
          case "esriGeometryPoint":
            C[Q] = t8 == null ? void 0 : t8.x, M2[Q] = t8 == null ? void 0 : t8.y;
            break;
          case "esriGeometryPolygon":
            e7 = t8 == null ? void 0 : t8.centroid, null != (e7 == null ? void 0 : e7.x) && null != (e7 == null ? void 0 : e7.y) ? (C[Q] = e7.x, M2[Q] = e7.y) : L2[Q] = u2.IsMovable;
            break;
          case "esriGeometryPolyline":
          case "esriGeometryMultipoint":
            e7 = (_c2 = t8 == null ? void 0 : t8.extent) == null ? void 0 : _c2.center, null != (e7 == null ? void 0 : e7.x) && null != (e7 == null ? void 0 : e7.y) ? (C[Q] = e7.x, M2[Q] = e7.y) : L2[Q] = u2.IsMovable;
            break;
          default:
            L2[Q] = u2.IsMovable;
        }
        (null == C[Q] || null == M2[Q] || Number.isNaN(C[Q]) || Number.isNaN(M2[Q])) && (L2[Q] = u2.IsMovable, C[Q] = 0, M2[Q] = 0);
      } else
        L2[Q] = u2.IsMovable, C[Q] = 0, M2[Q] = 0;
      k2.set(i4.attributes[w3], Q), A2[Q] = { feature: i4, typeName: a3 }, Q++;
    });
    let H2 = false;
    const K = /* @__PURE__ */ new Map();
    s7.forEach((e7) => {
      const t8 = e7.feature.attributes[T4], a3 = e7.feature.attributes[D], i4 = k2.get(t8), n6 = k2.get(a3);
      if (void 0 !== i4 && void 0 !== n6) {
        const s8 = t8 + "-" + a3, r5 = K.get(s8), h3 = r5 == null ? void 0 : r5.has(e7.typeName);
        h3 || (I3[F] = i4, v[F] = n6, void 0 === r5 ? K.set(s8, /* @__PURE__ */ new Map([[e7.typeName, F]])) : r5.set(e7.typeName, F), F++), o5.push(e7);
      } else
        H2 = true, this.relationshipLinkChartDiagramLookup.set(t8, null), this.linkChartGeohashLookup.set(t8, null);
    }), H2 && n.getLogger(this).warn("A relationship is a member of this layer that has either origin or destination entity nodes that are not members. The diagram geometry will be set to null"), await n4();
    const { success: $2, links: B2 } = O2(L2, C, M2, I3.subarray(0, F), v.subarray(0, F));
    if (!$2)
      throw new s("knowledge-graph:layout-failed", "Attempting to arrange the records in the specified layout failed");
    for (let a3 = 0; a3 < A2.length; a3++) {
      if (M2[a3] > 84.9999 ? M2[a3] = 84.9999 : M2[a3] < -84.9999 && (M2[a3] = -84.9999), C[a3] > 179.9999 ? C[a3] = 179.9999 : C[a3] < -179.9999 && (C[a3] = -179.9999), A2[a3].feature.attributes[I] = new x(C[a3], M2[a3]), h2.has(A2[a3].typeName)) {
        const e8 = h2.get(A2[a3].typeName);
        e8 == null ? void 0 : e8.set(A2[a3].feature.attributes[w3], A2[a3].feature);
      } else {
        const e8 = /* @__PURE__ */ new Map();
        e8.set(A2[a3].feature.attributes[w3], A2[a3].feature), h2.set(A2[a3].typeName, e8);
      }
      d5.set(A2[a3].feature.attributes[w3], A2[a3].feature);
      const e7 = ot(A2[a3].feature.attributes[I]);
      this.entityLinkChartDiagramLookup.set(A2[a3].feature.attributes[w3], A2[a3].feature.attributes[I] ? e7 : null), this.linkChartGeohashLookup.set(A2[a3].feature.attributes[w3], z(A2[a3].feature.attributes[I].y, A2[a3].feature.attributes[I].x, k)), A2[a3].feature.attributes[I].x < z3.xmin && (z3.xmin = A2[a3].feature.attributes[I].x), A2[a3].feature.attributes[I].x > z3.xmax && (z3.xmax = A2[a3].feature.attributes[I].x), A2[a3].feature.attributes[I].y < z3.ymin && (z3.ymin = A2[a3].feature.attributes[I].y), A2[a3].feature.attributes[I].y > z3.ymax && (z3.ymax = A2[a3].feature.attributes[I].y);
    }
    if (this.linkChartExtent.xmin = z3.xmin, this.linkChartExtent.xmax = z3.xmax, this.linkChartExtent.ymin = z3.ymin, this.linkChartExtent.ymax = z3.ymax, !B2)
      throw new s("knowledge-graph:layout-failed", "Attempting to retrieve link geometry from diagram engine failed");
    const W = /* @__PURE__ */ new Map(), Y = /* @__PURE__ */ new Map(), q = /* @__PURE__ */ new Map(), J = /* @__PURE__ */ new Set();
    for (let a3 = 0; a3 < o5.length; a3++) {
      const e7 = [], t8 = o5[a3], n6 = t8.feature.attributes[T4], s8 = t8.feature.attributes[D], r5 = n6 + "-" + s8, h3 = K.get(r5).get(t8.typeName), g2 = 0 === h3 ? 0 : B2 == null ? void 0 : B2.vertexEndIndex[h3 - 1];
      if (!J.has(h3)) {
        if (J.add(h3), B2.types[h3] === o4.Recursive) {
          const t10 = [B2.vertices[2 * g2], B2.vertices[2 * g2 + 1]], a5 = [B2.vertices[2 * (g2 + 1)], B2.vertices[2 * (g2 + 1) + 1]], i4 = [0.5 * (t10[0] + a5[0]), 0.5 * (t10[1] + a5[1])], n7 = [i4[0] - t10[0], i4[1] - t10[1]], s9 = [i4[0] + n7[1], i4[1] - n7[0]], o6 = [i4[0] - n7[1], i4[1] + n7[0]];
          e7.push(t10), e7.push(s9), e7.push(a5), e7.push(o6), e7.push(t10);
        } else {
          if (B2.types[h3] !== o4.Regular) {
            n.getLogger(this).warn("A relationship generated an unsupported link geometry type.  It will not be rendered");
            continue;
          }
          for (let t10 = g2; t10 < B2.vertexEndIndex[h3]; t10++)
            e7.push([B2.vertices[2 * t10], B2.vertices[2 * t10 + 1]]);
        }
        const t9 = (_a = A2[k2.get(n6)]) == null ? void 0 : _a.feature.attributes[I], a4 = (_b = A2[k2.get(s8)]) == null ? void 0 : _b.feature.attributes[I];
        e7[0][0] === t9.x && e7[0][1] === t9.y || (e7[0] = [t9.x, t9.y]), e7[e7.length - 1][0] === a4.x && e7[e7.length - 1][1] === a4.y || (e7[e7.length - 1] = [a4.x, a4.y]);
        for (let i4 = 1; i4 < e7.length - 1; i4++)
          e7[i4][1] > 85.5 ? e7[i4][1] = 85.5 : e7[i4][1] < -85.5 && (e7[i4][1] = -85.5), e7[i4][0] > 179.9999 ? e7[i4][0] = 179.9999 : e7[i4][0] < -179.9999 && (e7[i4][0] = -179.9999);
        W.has(r5) ? W.get(r5).push(e7) : W.set(r5, [e7]);
      }
      const f4 = W.get(r5);
      Y.has(r5) || (Y.set(r5, /* @__PURE__ */ new Map()), q.set(r5, /* @__PURE__ */ new Map()));
      const L3 = Y.get(r5), C2 = q.get(r5);
      L3.has(t8.typeName) || (L3.set(t8.typeName, f4.shift()), C2.set(t8.typeName, 0));
      const M3 = L3.get(t8.typeName);
      C2.set(t8.typeName, C2.get(t8.typeName) + 1);
      const w4 = new m({ paths: M3 });
      if (t8.feature.attributes[I] = w4, p7.has(t8.typeName)) {
        const e8 = p7.get(t8.typeName);
        e8 == null ? void 0 : e8.set(t8.feature.attributes[w3], t8.feature);
      } else {
        const e8 = /* @__PURE__ */ new Map();
        e8.set(t8.feature.attributes[w3], t8.feature), p7.set(t8.typeName, e8);
      }
      d5.set(t8.feature.attributes[w3], t8.feature);
      const b4 = ot(t8.feature.attributes[I]);
      this.relationshipLinkChartDiagramLookup.set(t8.feature.attributes[w3], t8.feature.attributes[I] ? b4 : null), this.linkChartGeohashLookup.set(t8.feature.attributes[w3], "");
    }
    for (const a3 of o5)
      a3.feature.attributes[M] = ((_c = q.get(a3.feature.attributes[T4] + "-" + a3.feature.attributes[D])) == null ? void 0 : _c.get(a3.typeName)) ?? null;
    return this._currentLinkChartConfig = { layoutMode: e6 }, { nodes: h2, links: p7, idMap: d5 };
  }
  async applyNewLinkChartLayout(e6 = "RADIAL_TREE", t7) {
    const a3 = [];
    await this.calculateLinkChartLayout(e6, t7), this.layers.forEach((e7) => {
      a3.push(e7.refreshCachedQueryEngine());
    }), await Promise.all(a3), this._refreshNamedTypes();
  }
  getCurrentNodeLocations() {
    var _a, _b;
    const e6 = /* @__PURE__ */ new Map();
    return (_b = (_a = this.dataManager.inclusionModeDefinition) == null ? void 0 : _a.namedTypeDefinitions) == null ? void 0 : _b.forEach((t7) => {
      var _a2;
      (_a2 = t7 == null ? void 0 : t7.members) == null ? void 0 : _a2.forEach((t8) => {
        const a3 = t8.linkChartLocation;
        let i4;
        const n5 = t8.id;
        a3 && (i4 = "x" in a3 ? { x: a3.x, y: a3.y } : { x: a3.coords[0], y: a3.coords[1] }, e6.set(n5, new x({ x: i4.x, y: i4.y })));
      });
    }), e6;
  }
  async synchronizeInclusionListWithCache() {
    return new Promise((e6) => {
      var _a;
      (_a = this.dataManager.inclusionModeDefinition) == null ? void 0 : _a.namedTypeDefinitions.forEach((e7, t7) => {
        if (e7.useAllData = false, e7.members && e7.members.size > 0) {
          if (!this.dataManager.sublayerCaches.get(t7))
            return;
          const a3 = new Set(Array.from(this.dataManager.sublayerCaches.get(t7).keys()));
          Array.from(e7.members.keys()).filter((e8) => !a3.has(e8)).forEach((t8) => {
            var _a2;
            (_a2 = e7.members) == null ? void 0 : _a2.delete(t8);
          });
        }
      }), e6();
    });
  }
  async refreshLinkChartCache(e6) {
    await this.dataManager.refreshCacheContent(e6);
    const t7 = [];
    this.layers.forEach((e7) => {
      t7.push(e7.refreshCachedQueryEngine());
    }), await Promise.all(t7), this._refreshNamedTypes();
  }
  async _handleNewRecords(e6) {
    const t7 = [];
    this.dataManager.addToLayer(e6);
    for (const a3 of e6)
      this.sublayerIdsCache.has(a3.typeName) || (this.sublayerIdsCache.set(a3.typeName, /* @__PURE__ */ new Set()), t7.push(a3.typeName)), this.sublayerIdsCache.get(a3.typeName).add(a3.id);
    for (const a3 of t7)
      if (this._graphTypeLookup.has(a3)) {
        const e7 = this._graphTypeLookup.get(a3), t8 = "endPoints" in e7 ? "relationship" : "entity", i4 = new R({ objectType: e7, parentCompositeLayer: this, graphType: t8, title: a3 });
        "entity" === t8 ? this.dataManager.entityTypeNames.add(a3) : this.dataManager.relationshipTypeNames.add(a3), i4.geometryType ? this.layers.push(i4) : this.tables.push(i4), this.dataManager.sublayerCaches.set(a3, /* @__PURE__ */ new Map());
      }
    await this.dataManager.refreshCacheContent(e6.map((e7) => e7.id)), await this.applyNewLinkChartLayout(this._currentLinkChartConfig.layoutMode);
  }
  async _initializeDiagram() {
    var _a, _b;
    this.defaultLinkChartConfig ? this.defaultLinkChartConfig.doNotRecalculateLayout ? ((_b = (_a = this.dataManager.inclusionModeDefinition) == null ? void 0 : _a.namedTypeDefinitions) == null ? void 0 : _b.forEach((e6, t7) => {
      var _a2;
      (_a2 = e6 == null ? void 0 : e6.members) == null ? void 0 : _a2.forEach((e7) => {
        const a3 = e7.linkChartLocation;
        let i4;
        const n5 = e7.id;
        if (!a3)
          return;
        i4 = "x" in a3 ? { x: a3.x, y: a3.y } : { x: a3.coords[0], y: a3.coords[1] };
        const s7 = ot(i4);
        this.dataManager.relationshipTypeNames.has(t7) ? this.relationshipLinkChartDiagramLookup.set(n5, s7) : this.entityLinkChartDiagramLookup.set(n5, s7), this.linkChartGeohashLookup.set(n5, z(i4.x, i4.y, k)), this.linkChartExtent.xmin > i4.x && (this.linkChartExtent.xmin = i4.x), this.linkChartExtent.xmax < i4.x && (this.linkChartExtent.xmax = i4.x), this.linkChartExtent.ymin > i4.y && (this.linkChartExtent.ymin = i4.y), this.linkChartExtent.ymax < i4.y && (this.linkChartExtent.ymax = i4.y);
      });
    }), this.memberRelationshipTypes.forEach((e6) => {
      var _a2;
      e6.name && ((_a2 = this.dataManager.sublayerCaches.get(e6.name)) == null ? void 0 : _a2.forEach((e7) => {
        const t7 = this.relationshipLinkChartDiagramLookup.get(e7.attributes[T4]), a3 = this.relationshipLinkChartDiagramLookup.get(e7.attributes[D]);
        if (t7 && a3) {
          const i4 = ot(new m({ paths: [[t7.coords[0], t7.coords[1]], [a3.coords[0], a3.coords[1]]] }));
          this.relationshipLinkChartDiagramLookup.set(e7.attributes[w3], i4);
        } else
          this.relationshipLinkChartDiagramLookup.set(e7.attributes[w3], null);
        this.linkChartGeohashLookup.set(e7.attributes[w3], "");
      }));
    })) : await this.calculateLinkChartLayout(this.defaultLinkChartConfig.layoutMode, { lockedNodeLocations: this.getCurrentNodeLocations() }) : await this.calculateLinkChartLayout("RADIAL_TREE", { lockedNodeLocations: this.getCurrentNodeLocations() });
  }
  _refreshNamedTypes() {
    for (const e6 of this.layers)
      e6.emit("refresh", { dataChanged: true });
    for (const e6 of this.tables)
      e6.emit("refresh", { dataChanged: true });
  }
};
e([y()], z2.prototype, "dataPreloadedInLocalCache", void 0), e([y()], z2.prototype, "defaultLinkChartConfig", void 0), e([y()], z2.prototype, "dataManager", void 0), e([y()], z2.prototype, "knowledgeGraph", void 0), e([y()], z2.prototype, "layers", void 0), e([y()], z2.prototype, "entityLinkChartDiagramLookup", void 0), e([y()], z2.prototype, "relationshipLinkChartDiagramLookup", void 0), e([y()], z2.prototype, "linkChartExtent", void 0), e([y()], z2.prototype, "linkChartGeohashLookup", void 0), e([y()], z2.prototype, "memberEntityTypes", void 0), e([y()], z2.prototype, "memberRelationshipTypes", void 0), e([y()], z2.prototype, "sublayerIdsCache", void 0), e([y()], z2.prototype, "tables", void 0), e([y({ json: { read: false } })], z2.prototype, "type", void 0), z2 = e([a("esri.layers.LinkChartLayer")], z2);
var O = z2;
export {
  O as default
};
//# sourceMappingURL=LinkChartLayer-A5RO2J6V.js.map
