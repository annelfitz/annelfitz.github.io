{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/components/src/components/radio-button-group/resources.ts", "../../@esri/calcite-components/dist/components/src/components/radio-button-group/radio-button-group.scss?tag=calcite-radio-button-group&encapsulation=shadow", "../../@esri/calcite-components/dist/components/src/components/radio-button-group/radio-button-group.tsx"],
  "sourcesContent": ["export const CSS = {\n  itemWrapper: \"item-wrapper\",\n};\n", ":host {\n  @apply flex flex-col;\n}\n\n:host > .item-wrapper {\n  @apply flex;\n  max-inline-size: 100vw;\n}\n\n:host([layout=\"horizontal\"]) > .item-wrapper {\n  @apply flex-row flex-wrap;\n}\n\n:host([layout=\"horizontal\"][scale=\"s\"]) > .item-wrapper {\n  @apply gap-x-4;\n}\n\n:host([layout=\"horizontal\"][scale=\"m\"]) > .item-wrapper {\n  @apply gap-x-5;\n}\n\n:host([layout=\"horizontal\"][scale=\"l\"]) > .item-wrapper {\n  @apply gap-x-6;\n}\n\n:host([layout=\"vertical\"]) > .item-wrapper {\n  @apply flex-col;\n}\n\n:host([scale=\"s\"]) calcite-input-message {\n  --calcite-input-message-spacing-value: calc(var(--calcite-spacing-xxs) * -1);\n}\n\n:host([scale=\"m\"]) calcite-input-message {\n  --calcite-input-message-spacing-value: calc(var(--calcite-spacing-sm) * -1);\n}\n\n:host([scale=\"l\"]) calcite-input-message {\n  --calcite-input-message-spacing-value: calc(var(--calcite-spacing-md) * -1);\n}\n\n@include form-validation-message();\n@include base-component();\n", "import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Layout, Scale, Status } from \"../interfaces\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { Validation } from \"../functional/Validation\";\nimport { CSS } from \"./resources\";\n\n/**\n * @slot - A slot for adding `calcite-radio-button`s.\n */\n@Component({\n  tag: \"calcite-radio-button-group\",\n  styleUrl: \"radio-button-group.scss\",\n  shadow: true,\n})\nexport class RadioButtonGroup implements LoadableComponent {\n  //--------------------------------------------------------------------------\n  //\n  //  Global attributes\n  //\n  //--------------------------------------------------------------------------\n\n  @Watch(\"hidden\")\n  handleHiddenChange(): void {\n    this.passPropsToRadioButtons();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** When `true`, interaction is prevented and the component is displayed with lower opacity. */\n  @Prop({ reflect: true }) disabled = false;\n\n  @Watch(\"disabled\")\n  onDisabledChange(): void {\n    this.passPropsToRadioButtons();\n  }\n\n  /** Defines the layout of the component. */\n  @Prop({ reflect: true }) layout: Layout = \"horizontal\";\n\n  @Watch(\"layout\")\n  onLayoutChange(): void {\n    this.passPropsToRadioButtons();\n  }\n\n  /** Specifies the name of the component on form submission. Must be unique to other component instances. */\n  @Prop({ reflect: true }) name!: string;\n\n  /** When `true`, the component must have a value in order for the form to submit. */\n  @Prop({ reflect: true }) required = false;\n\n  /**\n   * Specifies the component's selected item.\n   *\n   * @readonly\n   */\n  @Prop({ mutable: true }) selectedItem: HTMLCalciteRadioButtonElement = null;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the status of the validation message. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  /** Specifies the validation message to display under the component. */\n  @Prop() validationMessage: string;\n\n  /** Specifies the validation icon to display under the component. */\n  @Prop({ reflect: true }) validationIcon: string | boolean;\n\n  @Watch(\"scale\")\n  onScaleChange(): void {\n    this.passPropsToRadioButtons();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el!: HTMLCalciteRadioButtonGroupElement;\n\n  mutationObserver = createObserver(\"mutation\", () => this.passPropsToRadioButtons());\n\n  @State() radioButtons: HTMLCalciteRadioButtonElement[] = [];\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.passPropsToRadioButtons();\n    this.mutationObserver?.observe(this.el, { childList: true, subtree: true });\n  }\n\n  componentWillLoad(): void {\n    setUpLoadableComponent(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  disconnectedCallback(): void {\n    this.mutationObserver?.disconnect();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private passPropsToRadioButtons = (): void => {\n    this.radioButtons = Array.from(this.el.querySelectorAll(\"calcite-radio-button\"));\n    this.selectedItem =\n      Array.from(this.radioButtons).find((radioButton) => radioButton.checked) || null;\n    if (this.radioButtons.length > 0) {\n      this.radioButtons.forEach((radioButton) => {\n        radioButton.disabled = this.disabled || radioButton.disabled;\n        radioButton.hidden = this.el.hidden;\n        radioButton.name = this.name;\n        radioButton.required = this.required;\n        radioButton.scale = this.scale;\n      });\n    }\n  };\n\n  private getFocusableRadioButton(): HTMLCalciteRadioButtonElement | null {\n    return this.radioButtons.find((radiobutton) => !radiobutton.disabled) ?? null;\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Fires when the component has changed.\n   */\n  @Event({ cancelable: false }) calciteRadioButtonGroupChange: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Method\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the fist focusable `calcite-radio-button` element in the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    if (this.selectedItem && !this.selectedItem.disabled) {\n      return this.selectedItem.setFocus();\n    }\n    if (this.radioButtons.length > 0) {\n      return this.getFocusableRadioButton()?.setFocus();\n    }\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Event Listeners\n  //\n  //--------------------------------------------------------------------------\n\n  @Listen(\"calciteRadioButtonChange\")\n  radioButtonChangeHandler(event: CustomEvent): void {\n    this.selectedItem = event.target as HTMLCalciteRadioButtonElement;\n    this.calciteRadioButtonGroupChange.emit();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    return (\n      <Host role=\"radiogroup\">\n        <div class={CSS.itemWrapper}>\n          <slot />\n        </div>\n        {this.validationMessage && this.status === \"invalid\" ? (\n          <Validation\n            icon={this.validationIcon}\n            message={this.validationMessage}\n            scale={this.scale}\n            status={this.status}\n          />\n        ) : null}\n      </Host>\n    );\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,IAAM,MAAM;EACjB,aAAa;;ACDf,IAAM,sBAAsB;ICiCf,mBAAgB,mBAAA,MAAAA,0BAAA,EAAA;;;;;;AAwE3B,SAAA,mBAAmB,eAAe,YAAY,MAAM,KAAK,wBAAuB,CAAE;AAiC1E,SAAA,0BAA0B,MAAA;AAChC,WAAK,eAAe,MAAM,KAAK,KAAK,GAAG,iBAAiB,sBAAsB,CAAC;AAC/E,WAAK,eACH,MAAM,KAAK,KAAK,YAAY,EAAE,KAAK,CAAC,gBAAgB,YAAY,OAAO,KAAK;AAC9E,UAAI,KAAK,aAAa,SAAS,GAAG;AAChC,aAAK,aAAa,QAAQ,CAAC,gBAAW;AACpC,sBAAY,WAAW,KAAK,YAAY,YAAY;AACpD,sBAAY,SAAS,KAAK,GAAG;AAC7B,sBAAY,OAAO,KAAK;AACxB,sBAAY,WAAW,KAAK;AAC5B,sBAAY,QAAQ,KAAK;SAC1B;;;oBAjG+B;kBAQM;;oBAWN;wBAOmC;iBAG/B;kBAGE;;;wBAuBe,CAAA;;;;;;;EAlEzD,qBAAkB;AAChB,SAAK,wBAAuB;;EAa9B,mBAAgB;AACd,SAAK,wBAAuB;;EAO9B,iBAAc;AACZ,SAAK,wBAAuB;;EA6B9B,gBAAa;AACX,SAAK,wBAAuB;;;;;;;EAqB9B,oBAAiB;;AACf,SAAK,wBAAuB;AAC5B,eAAK,qBAAL,mBAAuB,QAAQ,KAAK,IAAI,EAAE,WAAW,MAAM,SAAS,KAAI;;EAG1E,oBAAiB;AACf,2BAAuB,IAAI;;EAG7B,mBAAgB;AACd,uBAAmB,IAAI;;EAGzB,uBAAoB;;AAClB,eAAK,qBAAL,mBAAuB;;EAwBjB,0BAAuB;AAC7B,WAAO,KAAK,aAAa,KAAK,CAAC,gBAAgB,CAAC,YAAY,QAAQ,KAAK;;;;;;;;EAsB3E,MAAM,WAAQ;;AACZ,UAAM,mBAAmB,IAAI;AAC7B,QAAI,KAAK,gBAAgB,CAAC,KAAK,aAAa,UAAU;AACpD,aAAO,KAAK,aAAa,SAAQ;;AAEnC,QAAI,KAAK,aAAa,SAAS,GAAG;AAChC,cAAO,UAAK,wBAAuB,MAA5B,mBAAgC;;;;;;;;EAW3C,yBAAyB,OAAkB;AACzC,SAAK,eAAe,MAAM;AAC1B,SAAK,8BAA8B,KAAI;;;;;;;EASzC,SAAM;AACJ,WACE,EAAC,MAAI,EAAC,MAAK,aAAY,GACrB,EAAA,OAAA,EAAK,OAAO,IAAI,YAAW,GACzB,EAAA,QAAA,IAAA,CAAQ,GAET,KAAK,qBAAqB,KAAK,WAAW,YACzC,EAAC,YAAU,EACT,MAAM,KAAK,gBACX,SAAS,KAAK,mBACd,OAAO,KAAK,OACZ,QAAQ,KAAK,OAAM,CAAA,IAEnB,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "names": ["RadioButtonGroup"]
}
