import {
  E
} from "./chunk-ECTYMEUP.js";
import {
  e as e3
} from "./chunk-RW5QMWE6.js";
import {
  t
} from "./chunk-7JNXJYRU.js";
import {
  U as U2,
  v
} from "./chunk-SAYWXQVM.js";
import {
  P,
  d
} from "./chunk-Z4Y53NDM.js";
import {
  S,
  y,
  y2
} from "./chunk-NDIXNREV.js";
import {
  a3 as a2
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import {
  l
} from "./chunk-C26KUZ46.js";
import {
  b,
  c2 as c,
  e as e2,
  m,
  u2 as u
} from "./chunk-JGDJR5EV.js";
import {
  a,
  s
} from "./chunk-7RBRCL6S.js";
import {
  A2 as A,
  M,
  U
} from "./chunk-J2EGIWT6.js";

// node_modules/@arcgis/core/geometry/support/UintArray.js
function n(n3, e4 = false) {
  return n3 <= U ? e4 ? new Array(n3).fill(0) : new Array(n3) : new Uint32Array(n3);
}

// node_modules/@arcgis/core/layers/support/Tilemap.js
var r = class _r {
  constructor(t2) {
    h(t2);
    const { location: i, data: e4 } = t2;
    this.location = Object.freeze(a(i));
    const r2 = this.location.width, n3 = this.location.height;
    let s3 = true, c2 = true;
    const m2 = Math.ceil(r2 * n3 / 32), f = n(m2);
    let d2 = 0;
    for (let a3 = 0; a3 < e4.length; a3++) {
      const t3 = a3 % 32;
      e4[a3] ? (c2 = false, f[d2] |= 1 << t3) : s3 = false, 31 === t3 && ++d2;
    }
    c2 ? (this._availability = "unavailable", this.byteSize = 40) : s3 ? (this._availability = "available", this.byteSize = 40) : (this._availability = f, this.byteSize = 40 + A(f));
  }
  getAvailability(t2, i) {
    if ("unavailable" === this._availability || "available" === this._availability)
      return this._availability;
    const e4 = (t2 - this.location.top) * this.location.width + (i - this.location.left), a3 = e4 % 32, o = e4 >> 5, l2 = this._availability;
    return o < 0 || o > l2.length ? "unknown" : l2[o] & 1 << a3 ? "available" : "unavailable";
  }
  static fromDefinition(a3, o) {
    const l2 = a3.service.request || U2, { row: n3, col: h2, width: c2, height: m2 } = a3, f = { query: { f: "json" } };
    return o = o ? { ...f, ...o } : f, l2(s2(a3), o).then((t2) => t2.data).catch((t2) => {
      if (t2 && t2.details && 422 === t2.details.httpStatus)
        return { location: { top: n3, left: h2, width: c2, height: m2 }, valid: true, data: M(c2 * m2, 0) };
      throw t2;
    }).then((t2) => {
      if (t2.location && (t2.location.top !== n3 || t2.location.left !== h2 || t2.location.width !== c2 || t2.location.height !== m2))
        throw new s("tilemap:location-mismatch", "Tilemap response for different location than requested", { response: t2, definition: { top: n3, left: h2, width: c2, height: m2 } });
      return _r.fromJSON(t2);
    });
  }
  static fromJSON(t2) {
    return Object.freeze(new _r(t2));
  }
};
function n2(t2) {
  return `${t2.level}/${t2.row}/${t2.col}/${t2.width}/${t2.height}`;
}
function s2(t2) {
  var _a;
  let i;
  if ((_a = t2.service.tileServers) == null ? void 0 : _a.length) {
    const e5 = t2.service.tileServers;
    i = `${e5 && e5.length ? e5[t2.row % e5.length] : t2.service.url}/tilemap/${t2.level}/${t2.row}/${t2.col}/${t2.width}/${t2.height}`;
  } else
    i = `${t2.service.url}/tilemap/${t2.level}/${t2.row}/${t2.col}/${t2.width}/${t2.height}`;
  const e4 = t2.service.query;
  return e4 && (i = `${i}?${e4}`), i;
}
function h(t2) {
  if (!(t2 == null ? void 0 : t2.location))
    throw new s("tilemap:missing-location", "Location missing from tilemap response");
  if (false === t2.valid)
    throw new s("tilemap:invalid", "Tilemap response was marked as invalid");
  if (!t2.data)
    throw new s("tilemap:missing-data", "Data missing from tilemap response");
  if (!Array.isArray(t2.data))
    throw new s("tilemap:data-mismatch", "Data must be an array of numbers");
  if (t2.data.length !== t2.location.width * t2.location.height)
    throw new s("tilemap:data-mismatch", "Number of data items does not match width/height of tilemap");
}

// node_modules/@arcgis/core/layers/support/TilemapCache.js
var w;
var T = w = class extends S {
  constructor(e4) {
    super(e4), this._pendingTilemapRequests = {}, this.request = U2, this.size = 32, this._prefetchingEnabled = true;
  }
  initialize() {
    this._tilemapCache = new e3(2 * E.MEGABYTES), this.addHandles(d(() => {
      const { layer: e4 } = this;
      return [e4 == null ? void 0 : e4.parsedUrl, e4 == null ? void 0 : e4.tileServers, e4 == null ? void 0 : e4.apiKey, e4 == null ? void 0 : e4.customParameters];
    }, () => this._initializeTilemapDefinition(), P));
  }
  get effectiveMinLOD() {
    return this.minLOD ?? this.layer.tileInfo.lods[0].level;
  }
  get effectiveMaxLOD() {
    return this.maxLOD ?? this.layer.tileInfo.lods[this.layer.tileInfo.lods.length - 1].level;
  }
  fetchTilemap(e4, t2, i, r2) {
    if (!this.layer.tileInfo.lodAt(e4) || e4 < this.effectiveMinLOD || e4 > this.effectiveMaxLOD)
      return Promise.reject(new s("tilemap-cache:level-unavailable", `Level ${e4} is unavailable in the service`));
    const l2 = this._tmpTilemapDefinition, o = this._tilemapFromCache(e4, t2, i, l2);
    if (o)
      return Promise.resolve(o);
    const a3 = r2 == null ? void 0 : r2.signal;
    return r2 = { ...r2, signal: null }, new Promise((e5, t3) => {
      m(a3, () => t3(u()));
      const i2 = n2(l2);
      let s3 = this._pendingTilemapRequests[i2];
      if (!s3) {
        s3 = r.fromDefinition(l2, r2).then((e7) => (this._tilemapCache.put(i2, e7, e7.byteSize), e7));
        const e6 = () => {
          delete this._pendingTilemapRequests[i2];
        };
        this._pendingTilemapRequests[i2] = s3, s3.then(e6, e6);
      }
      s3.then(e5, t3);
    });
  }
  getAvailability(e4, t2, i) {
    if (!this.layer.tileInfo.lodAt(e4) || e4 < this.effectiveMinLOD || e4 > this.effectiveMaxLOD)
      return "unavailable";
    const r2 = this._tilemapFromCache(e4, t2, i, this._tmpTilemapDefinition);
    return r2 ? r2.getAvailability(t2, i) : "unknown";
  }
  fetchAvailability(e4, t2, i, r2) {
    return !this.layer.tileInfo.lodAt(e4) || e4 < this.effectiveMinLOD || e4 > this.effectiveMaxLOD ? Promise.reject(new s("tile-map:tile-unavailable", "Tile is not available", { level: e4, row: t2, col: i })) : this.fetchTilemap(e4, t2, i, r2).catch((e5) => e5).then((r3) => {
      if (r3 instanceof r) {
        const l2 = r3.getAvailability(t2, i);
        if ("unavailable" === l2)
          throw new s("tile-map:tile-unavailable", "Tile is not available", { level: e4, row: t2, col: i });
        return l2;
      }
      if (b(r3))
        throw r3;
      return "unknown";
    });
  }
  fetchAvailabilityUpsample(e4, t2, i, r2, s3) {
    r2.level = e4, r2.row = t2, r2.col = i;
    const l2 = this.layer.tileInfo;
    l2.updateTileInfo(r2);
    const o = this.fetchAvailability(e4, t2, i, s3).catch((e5) => {
      if (b(e5))
        throw e5;
      if (l2.upsampleTile(r2))
        return this.fetchAvailabilityUpsample(r2.level, r2.row, r2.col, r2, s3);
      throw e5;
    });
    return this._fetchAvailabilityUpsamplePrefetch(r2.id, e4, t2, i, s3, o), o;
  }
  async _fetchAvailabilityUpsamplePrefetch(e4, t2, i, r2, s3, o) {
    if (!this._prefetchingEnabled || null == e4)
      return;
    const a3 = `prefetch-${e4}`;
    if (this.hasHandles(a3))
      return;
    const n3 = new AbortController();
    o.then(() => n3.abort(), () => n3.abort());
    let c2 = false;
    const h2 = e2(() => {
      c2 || (c2 = true, n3.abort());
    });
    if (this.addHandles(h2, a3), await y(10, n3.signal).catch(() => {
    }), c2 || (c2 = true, this.removeHandles(a3)), c(n3))
      return;
    const m2 = new t(e4, t2, i, r2), f = { ...s3, signal: n3.signal }, v2 = this.layer.tileInfo;
    for (let l2 = 0; w._prefetches.length < w._maxPrefetch && v2.upsampleTile(m2); ++l2) {
      const e5 = this.fetchAvailability(m2.level, m2.row, m2.col, f);
      w._prefetches.push(e5);
      const t3 = () => {
        w._prefetches.removeUnordered(e5);
      };
      e5.then(t3, t3);
    }
  }
  _initializeTilemapDefinition() {
    var _a;
    if (!this.layer.parsedUrl)
      return;
    const { parsedUrl: e4, apiKey: t2, customParameters: i } = this.layer;
    this._tilemapCache.clear(), this._tmpTilemapDefinition = { service: { url: e4.path, query: v({ ...e4.query, ...i, token: t2 ?? ((_a = e4.query) == null ? void 0 : _a.token) }), tileServers: this.layer.tileServers, request: this.request }, width: this.size, height: this.size, level: 0, row: 0, col: 0 };
  }
  _tilemapFromCache(e4, t2, i, r2) {
    r2.level = e4, r2.row = t2 - t2 % this.size, r2.col = i - i % this.size;
    const s3 = n2(r2);
    return this._tilemapCache.get(s3);
  }
  get test() {
    const e4 = this;
    return { get prefetchingEnabled() {
      return e4._prefetchingEnabled;
    }, set prefetchingEnabled(t2) {
      e4._prefetchingEnabled = t2;
    }, hasTilemap: (t2, i, r2) => !!e4._tilemapFromCache(t2, i, r2, e4._tmpTilemapDefinition) };
  }
};
T._maxPrefetch = 4, T._prefetches = new l({ initialSize: w._maxPrefetch }), e([y2({ constructOnly: true })], T.prototype, "layer", void 0), e([y2({ constructOnly: true })], T.prototype, "minLOD", void 0), e([y2({ constructOnly: true })], T.prototype, "maxLOD", void 0), e([y2({ constructOnly: true })], T.prototype, "request", void 0), e([y2({ constructOnly: true })], T.prototype, "size", void 0), T = w = e([a2("esri.layers.support.TilemapCache")], T);

export {
  T
};
//# sourceMappingURL=chunk-G3TGE2VT.js.map
