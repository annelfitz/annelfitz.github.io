import {
  importCoreReactiveUtils,
  newWidgetsVersionManagementVersionManagementViewModel
} from "./chunk-YXW2SI4L.js";
import {
  Host,
  getAssetPath,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-version-management.entry.js
function S(e, t) {
  let n = e;
  for (; n; ) {
    if (n === t)
      return true;
    if (!n.parentNode)
      return false;
    n.parentNode instanceof ShadowRoot ? n = n.parentNode.host : n = n.parentNode;
  }
  return false;
}
function x(e, t, n = () => {
}) {
  if (!t || t.length <= 0)
    return;
  let r = new MutationObserver((o) => {
    for (let s of o)
      S(e, s.target) && n();
  });
  return r.observe(document.documentElement, { attributes: true, attributeFilter: t, subtree: true }), r;
}
function T(e, t) {
  let n = e;
  for (; n; ) {
    let r = n.closest(t);
    if (r)
      return r;
    let o = n.getRootNode();
    if (o === document)
      return null;
    n = o.host;
  }
  return null;
}
function f(e, t, n) {
  var _a;
  return ((_a = T(e, `[${t}]`)) == null ? void 0 : _a.getAttribute(t)) ?? n;
}
var E = /* @__PURE__ */ new Set(["ar", "bg", "bs", "ca", "cs", "da", "de", "el", "en", "es", "et", "fi", "fr", "he", "hr", "hu", "id", "it", "ja", "ko", "lt", "lv", "nl", "nb", "pl", "pt-BR", "pt-PT", "ro", "ru", "sk", "sl", "sr", "sv", "th", "tr", "uk", "vi", "zh-CN", "zh-HK", "zh-TW"]);
var a = /* @__PURE__ */ new Map();
async function v(e, t, n = "") {
  let r = `${t}/${n}${e}.json`;
  if (a.has(r))
    return a.get(r);
  try {
    let o = await fetch(r);
    if (o.ok) {
      let i = await o.json();
      return a.set(r, i), i;
    }
    if (e === "en") {
      a.set(r, void 0);
      return;
    }
    let s = await v("en", t, n);
    return a.set(r, s), s;
  } catch {
    a.set(r, void 0);
    return;
  }
}
function _(e) {
  let t = f(e, "lang", navigator.language || "en");
  if (E.has(t))
    return { lang: t, t9nLocale: t };
  let n = t.slice(0, 2);
  return { lang: t, t9nLocale: E.has(n) ? n : "en" };
}
var p = /* @__PURE__ */ new WeakMap();
var m = /* @__PURE__ */ new WeakMap();
var C = /* @__PURE__ */ new WeakMap();
async function B(e, t, n) {
  m.set(e, t), p.set(e, x(e._hostElement, ["lang"], () => {
    b(e, n).catch(console.error);
  })), await b(e, n);
}
function q(e) {
  var _a;
  (_a = p.get(e)) == null ? void 0 : _a.disconnect(), p.delete(e), m.delete(e);
}
async function b(e, t) {
  let { lang: n, t9nLocale: r } = _(e._hostElement);
  if (n === e._lang && r === e._t9nLocale || (n !== e._lang && (e._lang = n), r === e._t9nLocale))
    return;
  let o = C.get(e);
  if (!o) {
    let s = m.get(e) ?? "", i = e._hostElement.tagName.toLowerCase().replace("arcgis-", ""), l = `${s}/${i}/t9n`, u = `${i}.t9n.`;
    o = await v(r, l, u);
  }
  r !== e._t9nLocale && (e._t9nLocale = r, e._t9nStrings = o, await (t == null ? void 0 : t.call(e)));
}
var versionManagementCss = ".div-content{background-color:var(--calcite-ui-foreground-1);padding:0.75rem}.flow-main{width:330px}.notice{width:-webkit-fill-available}.panel-services{max-height:400px}.panel-versions{max-height:400px}";
var ArcgisVersionManagement = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this._watchHandles = [];
    this.label = void 0;
    this.position = "top-right";
    this.view = void 0;
    this._lang = "";
    this._t9nLocale = "";
    this._t9nStrings = void 0;
    this.state = void 0;
  }
  positionWatcher(newValue) {
    if (newValue !== void 0 && this.viewModel) {
      this.view.ui.move(this._hostElement, newValue);
    }
  }
  async componentDidLoad() {
    const { watch } = await importCoreReactiveUtils();
    this._watchHandles.push(watch(() => this.viewModel.state, (state) => {
      this.state = state;
    }));
  }
  async componentWillLoad() {
    await B(this, getAssetPath("./assets"));
    await this._checkForView();
    this.viewModel = await newWidgetsVersionManagementVersionManagementViewModel({
      view: this.view
    });
    this.label = this.label ? this.label : this._t9nStrings.label;
  }
  disconnectedCallback() {
    q(this);
    this._watchHandles.forEach((handle) => {
      handle.remove();
    });
    this._watchHandles = [];
  }
  render() {
    const { _t9nStrings, label, viewModel, viewModel: { state, loadError } } = this;
    const arrayServiceNames = Array.from(this.viewModel.serviceNameLookup, ([url, name]) => ({ url, name }));
    return h(Host, null, h("calcite-flow", { ref: (node) => {
      this.flowElement = node;
    }, class: "flow-main" }, h("calcite-flow-item", { heading: label }, h("calcite-panel", { class: "panel-services", loading: state === "loading" }, arrayServiceNames.map((service) => h("arcgis-version-management-service-item", { flowElement: this.flowElement, heading: label, serviceUrl: service.url, strings: _t9nStrings, viewModel, onVersionItemActionClickedEventWithServiceUrl: (e) => {
      if (this.flowElement) {
        this._handleVersionItemActionClick(e, this.flowElement);
      }
    }, onVersionListActionClickedEvent: (e) => {
      if (this.flowElement) {
        this._handleVersionListActionClick(e, this.flowElement);
      }
    } })), state === "disabled" ? h("calcite-notice", { class: "notice", closable: false, kind: "warning", open: true, scale: "s", slot: "footer" }, h("div", { slot: "message" }, this._getLoadError(loadError))) : void 0))));
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  async _checkForView() {
    const viewRef = this._hostElement.closest("arcgis-map");
    if (viewRef == null ? void 0 : viewRef.view) {
      await viewRef.view.map.load();
      this.view = viewRef.view;
      this.view.ui.add(this._hostElement, this.position);
    }
  }
  _createVersionPropertiesFlow(serviceUrl, versionInfo) {
    const { flowElement, viewModel } = this;
    if (!flowElement) {
      return null;
    }
    const versionPropertiesFlow = document.createElement("arcgis-version-management-version-properties");
    versionPropertiesFlow.flowElement = flowElement;
    versionPropertiesFlow.serviceUrl = serviceUrl;
    versionPropertiesFlow.strings = this._t9nStrings;
    versionPropertiesFlow.versionInfo = versionInfo;
    versionPropertiesFlow.viewModel = viewModel;
    versionPropertiesFlow.addEventListener("versionPropertiesSaveClickedEvent", async (e) => {
      const { serviceUrl: serviceUrl2, versionInfo: versionInfo2 } = e.detail;
      const fullVersionName = versionInfo2.versionIdentifier.name;
      const versionName = fullVersionName.split(".").length > 1 ? fullVersionName.split(".")[1] : fullVersionName;
      const ownerName = fullVersionName.split(".").length > 1 ? fullVersionName.split(".")[0] : viewModel.userLookup.get(serviceUrl2);
      if (versionInfo2.versionIdentifier.guid === "") {
        await viewModel.createVersion({
          access: versionInfo2.access,
          description: versionInfo2.description,
          featureServerUrl: serviceUrl2,
          ownerName,
          versionName
        });
      } else {
        await viewModel.alterVersion({
          access: versionInfo2.access,
          description: versionInfo2.description,
          featureServerUrl: serviceUrl2,
          ownerName,
          versionIdentifier: {
            name: "",
            guid: versionInfo2.versionIdentifier.guid
          },
          versionName
        });
      }
      if (viewModel.state === "ready") {
        const versionList = flowElement.getElementsByTagName("arcgis-version-management-version-list")[0];
        versionList.versionInfos = [];
        const versionInfos = await viewModel.getVersionInfos(serviceUrl2, true);
        versionList.versionInfos = versionInfos;
        await flowElement.back();
      }
    });
    return versionPropertiesFlow;
  }
  _getLoadError(loadError) {
    const { _t9nStrings } = this;
    switch (loadError) {
      case "no-feature-services":
        return _t9nStrings.loadErrors.noFeatureServices;
      case "no-layers-property":
        return _t9nStrings.loadErrors.noLayersProperty;
      default:
        return loadError;
    }
  }
  async _handleVersionItemActionClick(e, flowElement) {
    const { actionType, serviceUrl, versionInfo } = e.detail;
    switch (actionType) {
      case "changeVersion":
        await this._switchToVersion(serviceUrl, versionInfo.versionIdentifier.name, versionInfo.versionIdentifier.guid);
        break;
      case "editVersion": {
        const versionPropertiesFlow = this._createVersionPropertiesFlow(serviceUrl, versionInfo);
        if (versionPropertiesFlow) {
          flowElement.append(versionPropertiesFlow);
        }
        break;
      }
    }
  }
  async _handleVersionListActionClick(e, flowElement) {
    const { actionType, serviceUrl } = e.detail;
    switch (actionType) {
      case "newVersion": {
        const versionPropertiesFlow = this._createVersionPropertiesFlow(serviceUrl, void 0);
        if (versionPropertiesFlow) {
          flowElement.append(versionPropertiesFlow);
        }
        break;
      }
      case "refreshVersions": {
        if (this.flowElement) {
          const versionList = this.flowElement.getElementsByTagName("arcgis-version-management-version-list")[0];
          versionList.versionInfos = [];
          const versionInfos = await this.viewModel.getVersionInfos(serviceUrl, true);
          versionList.versionInfos = versionInfos;
        }
        break;
      }
    }
  }
  async _switchToVersion(featureServerUrl, toVersionName, toVersionGuid) {
    await this.viewModel.changeVersion(featureServerUrl, toVersionName, toVersionGuid);
  }
  static get assetsDirs() {
    return ["assets"];
  }
  get _hostElement() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "position": ["positionWatcher"]
    };
  }
};
ArcgisVersionManagement.style = versionManagementCss;
export {
  ArcgisVersionManagement as arcgis_version_management
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-version-management.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-version-management.entry-2OHPY4U6.js.map
