{
  "version": 3,
  "sources": ["../../@arcgis/core/views/2d/engine/webgl/VertexStream.js", "../../@arcgis/core/views/2d/engine/webgl/brushes/BrushBitmap.js", "../../@arcgis/core/views/2d/engine/webgl/shaders/sources/shaderRepository.js", "../../@arcgis/core/views/2d/engine/webgl/shaders/sources/resolver.js", "../../@arcgis/core/views/2d/engine/webgl/shaders/BackgroundPrograms.js", "../../@arcgis/core/views/2d/engine/webgl/cpuMapped/FreeList.js", "../../@arcgis/core/views/2d/engine/webgl/PooledUint32Array.js", "../../@arcgis/core/views/2d/engine/webgl/shaders/TileInfoPrograms.js", "../../@arcgis/core/views/2d/engine/webgl/AFeatureTile.js", "../../@arcgis/core/views/2d/engine/webgl/FeatureDisplayList.js", "../../@arcgis/core/views/2d/engine/webgl/ReshufflePlan.js", "../../@arcgis/core/views/2d/engine/webgl/cpuMapped/Buffer.js", "../../@arcgis/core/views/2d/engine/webgl/cpuMapped/MappedMesh.js", "../../@arcgis/core/views/2d/engine/webgl/util/Reader.js", "../../@arcgis/core/views/2d/engine/webgl/mesh/meshDebugUtils.js", "../../@arcgis/core/views/2d/engine/webgl/FeatureTile.js", "../../@arcgis/core/views/2d/engine/webgl/brushes/BrushClip.js", "../../@arcgis/core/views/2d/engine/webgl/brushes/BrushOverlay.js", "../../@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushStencil.js", "../../@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushTileDebugInfo.js", "../../@arcgis/core/views/2d/engine/brushes.js", "../../@arcgis/core/views/2d/engine/webgl/Mesh2D.js", "../../@arcgis/core/views/2d/engine/webgl/ClippingInfo.js", "../../@arcgis/core/views/2d/engine/webgl/WGLContainer.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{vertexLayoutHash as t}from\"./shaderGraph/techniques/mesh/utils.js\";import{BufferObject as e}from\"../../../webgl/BufferObject.js\";import{DataType as r,Usage as s,PrimitiveType as i}from\"../../../webgl/enums.js\";import{VertexArrayObject as o}from\"../../../webgl/VertexArrayObject.js\";import{VertexElementDescriptor as a}from\"../../../webgl/VertexElementDescriptor.js\";class h{constructor(i,h){this._rctx=i,this._attributes=[{name:\"position\",offset:0,type:r.SHORT,count:2}],this.layout={hash:t(this._attributes),attributes:this._attributes,stride:4},this._vertexBuffer=e.createVertex(i,s.STATIC_DRAW,new Uint16Array(h)),this._vao=new o(i,new Map([[\"a_position\",0]]),{geometry:[new a(\"a_position\",2,r.SHORT,0,4)]},{geometry:this._vertexBuffer}),this._count=h.length/2}bind(){this._rctx.bindVAO(this._vao)}unbind(){this._rctx.bindVAO(null)}dispose(){this._vao.dispose()}draw(){this._rctx.bindVAO(this._vao),this._rctx.drawArrays(i.TRIANGLE_STRIP,0,this._count)}}export{h as default};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{textureBindingBitmap as e}from\"../definitions.js\";import t from\"../VertexStream.js\";import i from\"./WGLBrush.js\";import{TextureSamplingMode as s,BlendFactor as n,CompareFunction as a}from\"../../../../webgl/enums.js\";const r={nearest:{defines:[],samplingMode:s.NEAREST,mips:!1},bilinear:{defines:[],samplingMode:s.LINEAR,mips:!1},bicubic:{defines:[\"bicubic\"],samplingMode:s.LINEAR,mips:!1},trilinear:{defines:[],samplingMode:s.LINEAR_MIPMAP_LINEAR,mips:!0}},o=(e,t,i)=>{if(\"dynamic\"===i.samplingMode){const{state:i}=e,s=t.resolution/t.pixelRatio/i.resolution,n=Math.round(e.pixelRatio)!==e.pixelRatio,a=s>1.05||s<.95;return i.rotation||a||n||t.isSourceScaled||t.rotation?r.bilinear:r.nearest}return r[i.samplingMode]};class d extends i{constructor(){super(...arguments),this._desc={vsPath:\"raster/bitmap\",fsPath:\"raster/bitmap\",attributes:new Map([[\"a_pos\",0]])}}dispose(){this._quad&&this._quad.dispose()}prepareState({context:e}){e.setBlendingEnabled(!0),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0)}draw(i,s){const{context:r,renderingOptions:d,painter:l,requestRender:c,allowDelayedRender:m}=i;if(!s.source||!s.isReady)return;const p=o(i,s,d),u=l.materialManager.getProgram(this._desc,p.defines);if(m&&null!=c&&!u.compiled)return void c();i.timeline.begin(this.name),\"additive\"===s.blendFunction?r.setBlendFunctionSeparate(n.ONE,n.ONE,n.ONE,n.ONE):r.setBlendFunctionSeparate(n.ONE,n.ONE_MINUS_SRC_ALPHA,n.ONE,n.ONE_MINUS_SRC_ALPHA),r.setStencilFunction(a.EQUAL,s.stencilRef,255),this._quad||(this._quad=new t(r,[0,0,1,0,0,1,1,1]));const{coordScale:f,computedOpacity:_,transforms:M}=s;s.setSamplingProfile(p),s.bind(i.context,e),r.useProgram(u),u.setUniformMatrix3fv(\"u_dvsMat3\",M.displayViewScreenMat3),u.setUniform1i(\"u_texture\",e),u.setUniform2fv(\"u_coordScale\",f),u.setUniform1f(\"u_opacity\",_),this._quad.draw(),i.timeline.end(this.name)}}export{d as default};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nconst e={background:{\"background.frag\":\"uniform lowp vec4 u_color;\\nvoid main() {\\ngl_FragColor = u_color;\\n}\",\"background.vert\":\"attribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump vec2 u_coord_range;\\nuniform mediump float u_depth;\\nvoid main() {\\nvec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\\n}\"},bitBlit:{\"bitBlit.frag\":\"uniform lowp sampler2D u_tex;\\nuniform lowp float u_opacity;\\nvarying mediump vec2 v_uv;\\nvoid main() {\\nlowp vec4 color = texture2D(u_tex, v_uv);\\ngl_FragColor = color * u_opacity;\\n}\",\"bitBlit.vert\":\"attribute vec2 a_pos;\\nattribute vec2 a_tex;\\nvarying mediump vec2 v_uv;\\nvoid main(void) {\\ngl_Position = vec4(a_pos , 0.0, 1.0);\\nv_uv = a_tex;\\n}\"},blend:{\"blend.frag\":\"precision mediump float;\\nuniform sampler2D u_layerTexture;\\nuniform lowp float u_opacity;\\nuniform lowp float u_inFadeOpacity;\\n#ifndef NORMAL\\nuniform sampler2D u_backbufferTexture;\\n#endif\\nvarying mediump vec2 v_uv;\\nfloat rgb2v(in vec3 c) {\\nreturn max(c.x, max(c.y, c.z));\\n}\\nvec3 rgb2hsv(in vec3 c) {\\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\\nfloat d = q.x - min(q.w, q.y);\\nfloat e = 1.0e-10;\\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\\n}\\nvec3 hsv2rgb(in vec3 c) {\\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\nvec3 tint(in vec3 Cb, in vec3 Cs) {\\nfloat vIn = rgb2v(Cb);\\nvec3 hsvTint = rgb2hsv(Cs);\\nvec3 hsvOut = vec3(hsvTint.x, hsvTint.y, vIn * hsvTint.z);\\nreturn hsv2rgb(hsvOut);\\n}\\nfloat overlay(in float Cb, in float Cs) {\\nreturn (1.0 - step(0.5, Cs)) * (1.0 - 2.0 * (1.0 - Cs ) * (1.0 - Cb)) + step(0.5, Cs) * (2.0 * Cs * Cb);\\n}\\nfloat colorDodge(in float Cb, in float Cs) {\\nreturn (Cb == 0.0) ? 0.0 : (Cs == 1.0) ? 1.0 : min(1.0, Cb / (1.0 - Cs));\\n}\\nfloat colorBurn(in float Cb, in float Cs) {\\nreturn (Cb == 1.0) ? 1.0 : (Cs == 0.0) ? 0.0 : 1.0 - min(1.0, (1.0 - Cb) / Cs);\\n}\\nfloat hardLight(in float Cb, in float Cs) {\\nreturn (1.0 - step(0.5, Cs)) * (2.0 * Cs * Cb) + step(0.5, Cs) * (1.0 - 2.0 * (1.0 - Cs) * (1.0 - Cb));\\n}\\nfloat reflectBlend(in float Cb, in float Cs) {\\nreturn (Cs == 1.0) ? Cs : min(Cb * Cb / (1.0 - Cs), 1.0);\\n}\\nfloat softLight(in float Cb, in float Cs) {\\nif (Cs <= 0.5) {\\nreturn Cb - (1.0 - 2.0 * Cs) * Cb * (1.0 - Cb);\\n}\\nif (Cb <= 0.25) {\\nreturn Cb + (2.0 * Cs - 1.0) * Cb * ((16.0 * Cb - 12.0) * Cb + 3.0);\\n}\\nreturn Cb + (2.0 * Cs - 1.0) * (sqrt(Cb) - Cb);\\n}\\nfloat vividLight(in float Cb, in float Cs) {\\nreturn (1.0 - step(0.5, Cs)) * colorBurn(Cb, 2.0 * Cs) + step(0.5, Cs) * colorDodge(Cb, (2.0 * (Cs - 0.5)));\\n}\\nfloat minv3(in vec3 c) {\\nreturn min(min(c.r, c.g), c.b);\\n}\\nfloat maxv3(in vec3 c) {\\nreturn max(max(c.r, c.g), c.b);\\n}\\nfloat lumv3(in vec3 c) {\\nreturn dot(c, vec3(0.3, 0.59, 0.11));\\n}\\nfloat satv3(vec3 c) {\\nreturn maxv3(c) - minv3(c);\\n}\\nvec3 clipColor(vec3 color) {\\nfloat lum = lumv3(color);\\nfloat mincol = minv3(color);\\nfloat maxcol = maxv3(color);\\nif (mincol < 0.0) {\\ncolor = lum + ((color - lum) * lum) / (lum - mincol);\\n}\\nif (maxcol > 1.0) {\\ncolor = lum + ((color - lum) * (1.0 - lum)) / (maxcol - lum);\\n}\\nreturn color;\\n}\\nvec3 setLum(vec3 cbase, vec3 clum) {\\nfloat lbase = lumv3(cbase);\\nfloat llum = lumv3(clum);\\nfloat ldiff = llum - lbase;\\nvec3 color = cbase + vec3(ldiff);\\nreturn clipColor(color);\\n}\\nvec3 setLumSat(vec3 cbase, vec3 csat, vec3 clum)\\n{\\nfloat minbase = minv3(cbase);\\nfloat sbase = satv3(cbase);\\nfloat ssat = satv3(csat);\\nvec3 color;\\nif (sbase > 0.0) {\\ncolor = (cbase - minbase) * ssat / sbase;\\n} else {\\ncolor = vec3(0.0);\\n}\\nreturn setLum(color, clum);\\n}\\nvoid main() {\\nvec4 src = texture2D(u_layerTexture, v_uv);\\n#ifdef NORMAL\\ngl_FragColor = src *  u_opacity;\\n#else\\nvec4 dst = texture2D(u_backbufferTexture, v_uv);\\nvec3 Cs = src.a == 0.0 ? src.rgb : vec3(src.rgb / src.a);\\nvec3 Cb = dst.a == 0.0 ? dst.rgb : vec3(dst.rgb / dst.a);\\nfloat as = u_opacity * src.a;\\nfloat ab = dst.a;\\n#ifdef DESTINATION_OVER\\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb, as + ab - as * ab);\\n#endif\\n#ifdef SOURCE_IN\\nvec4 color = vec4(as * Cs * ab, as * ab);\\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\\ngl_FragColor = color + fadeColor;\\n#endif\\n#ifdef DESTINATION_IN\\nvec4 color = vec4(ab * Cb * as, ab * as);\\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\\ngl_FragColor = color + fadeColor;\\n#endif\\n#ifdef SOURCE_OUT\\ngl_FragColor = vec4(as * Cs * (1.0 - ab), as * (1.0 - ab));\\n#endif\\n#ifdef DESTINATION_OUT\\ngl_FragColor = vec4(ab * Cb * (1.0 - as), ab * (1.0 - as));\\n#endif\\n#ifdef SOURCE_ATOP\\ngl_FragColor = vec4(as * Cs * ab + ab * Cb * (1.0 - as), ab);\\n#endif\\n#ifdef DESTINATION_ATOP\\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * as, as);\\n#endif\\n#ifdef XOR\\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * (1.0 - as),\\nas * (1.0 - ab) + ab * (1.0 - as));\\n#endif\\n#ifdef MULTIPLY\\ngl_FragColor = vec4(as * Cs * ab * Cb + (1.0 - ab) * as * Cs + (1.0 - as) * ab * Cb,\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef SCREEN\\ngl_FragColor = vec4((Cs + Cb - Cs * Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef OVERLAY\\nvec3 f = vec3(overlay(Cb.r, Cs.r), overlay(Cb.g, Cs.g), overlay(Cb.b, Cs.b));\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef DARKEN\\ngl_FragColor = vec4(min(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef LIGHTER\\ngl_FragColor = vec4(as * Cs + ab * Cb, as + ab);\\n#endif\\n#ifdef LIGHTEN\\ngl_FragColor = vec4(max(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef COLOR_DODGE\\nvec3 f = clamp(vec3(colorDodge(Cb.r, Cs.r), colorDodge(Cb.g, Cs.g), colorDodge(Cb.b, Cs.b)), vec3(0.0), vec3(1.0));\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef COLOR_BURN\\nvec3 f = vec3(colorBurn(Cb.r, Cs.r), colorBurn(Cb.g, Cs.g), colorBurn(Cb.b, Cs.b));\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef HARD_LIGHT\\nvec3 f = vec3(hardLight(Cb.r, Cs.r), hardLight(Cb.g, Cs.g), hardLight(Cb.b, Cs.b));\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef SOFT_LIGHT\\nvec3 f = vec3(softLight(Cb.r, Cs.r), softLight(Cb.g, Cs.g), softLight(Cb.b, Cs.b));\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef DIFFERENCE\\ngl_FragColor = vec4(abs(Cb - Cs) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef EXCLUSION\\nvec3 f = Cs + Cb - 2.0 * Cs * Cb;\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef INVERT\\ngl_FragColor = vec4((1.0 - Cb) * as * ab + Cb * ab * (1.0 - as), ab);\\n#endif\\n#ifdef VIVID_LIGHT\\nvec3 f = vec3(clamp(vividLight(Cb.r, Cs.r), 0.0, 1.0),\\nclamp(vividLight(Cb.g, Cs.g), 0.0, 1.0),\\nclamp(vividLight(Cb.b, Cs.b), 0.0, 1.0));\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef HUE\\nvec3 f = setLumSat(Cs,Cb,Cb);\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef SATURATION\\nvec3 f = setLumSat(Cb,Cs,Cb);\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef COLOR\\nvec3 f = setLum(Cs,Cb);\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef LUMINOSITY\\nvec3 f = setLum(Cb,Cs);\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef PLUS\\ngl_FragColor = clamp(vec4(src.r + Cb.r, src.g + Cb.g, src.b + Cb.b, as + ab), 0.0, 1.0);\\n#endif\\n#ifdef MINUS\\ngl_FragColor = vec4(clamp(vec3(Cb.r - src.r, Cb.g - src.g, Cb.b - src.b), 0.0, 1.0), ab * as);\\n#endif\\n#ifdef AVERAGE\\nvec3 f = (Cb + Cs) / 2.0;\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef REFLECT\\nvec3 f = clamp(vec3(reflectBlend(Cb.r, Cs.r),\\nreflectBlend(Cb.g, Cs.g),\\nreflectBlend(Cb.b, Cs.b)), vec3(0.0), vec3(1.0));\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#endif\\n}\",\"blend.vert\":\"attribute vec2 a_position;\\nvarying mediump vec2 v_uv;\\nvoid main(void) {\\ngl_Position = vec4(a_position , 0.0, 1.0);\\nv_uv = (a_position + 1.0) / 2.0;\\n}\"},debug:{overlay:{\"overlay.frag\":\"precision mediump float;\\nvarying vec4 v_color;\\nvoid main(void) {\\ngl_FragColor = v_color;\\n}\",\"overlay.vert\":\"attribute vec3 a_PositionAndFlags;\\nuniform mat3 u_dvsMat3;\\nuniform vec4 u_colors[4];\\nuniform float u_opacities[4];\\nvarying vec4 v_color;\\nvoid main(void) {\\nvec2 position = a_PositionAndFlags.xy;\\nfloat flags = a_PositionAndFlags.z;\\nint colorIndex = int(mod(flags, 4.0));\\nvec4 color;\\nfor (int i = 0; i < 4; i++) {\\ncolor = u_colors[i];\\nif (i == colorIndex) {\\nbreak;\\n}\\n}\\nint opacityIndex = int(mod(floor(flags / 4.0), 4.0));\\nfloat opacity;\\nfor (int i = 0; i < 4; i++) {\\nopacity = u_opacities[i];\\nif (i == opacityIndex) {\\nbreak;\\n}\\n}\\nv_color = color * opacity;\\ngl_Position = vec4((u_dvsMat3 * vec3(position, 1.0)).xy, 0.0, 1.0);\\n}\"}},dot:{dot:{\"dot.frag\":\"precision mediump float;\\nvarying vec4 v_color;\\nvarying float v_dotRatio;\\nvarying float v_invEdgeRatio;\\nuniform highp float u_tileZoomFactor;\\nvoid main()\\n{\\nfloat dist = length(gl_PointCoord - vec2(.5, .5)) * 2.;\\nfloat alpha = smoothstep(0., 1., v_invEdgeRatio * (dist - v_dotRatio) + 1.);\\ngl_FragColor = v_color * alpha;\\n}\",\"dot.vert\":\"precision highp float;\\nattribute vec2 a_pos;\\nuniform sampler2D u_texture;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp float u_tileZoomFactor;\\nuniform highp float u_dotSize;\\nuniform highp float u_pixelRatio;\\nvarying vec2 v_pos;\\nvarying vec4 v_color;\\nvarying float v_dotRatio;\\nvarying float v_invEdgeRatio;\\nconst float EPSILON = 0.000001;\\nvoid main()\\n{\\nmat3 tileToTileTexture = mat3(  1., 0., 0.,\\n0., -1., 0.,\\n0., 1., 1.  );\\nvec3 texCoords = tileToTileTexture * vec3(a_pos.xy / 512., 1.);\\nv_color = texture2D(u_texture, texCoords.xy);\\nfloat smoothEdgeWidth = max(u_dotSize / 2., 1.) ;\\nfloat z = 0.;\\nz += 2.0 * step(v_color.a, EPSILON);\\ngl_PointSize = (smoothEdgeWidth + u_dotSize);\\ngl_Position = vec4((u_dvsMat3 * vec3(a_pos + .5, 1.)).xy, z, 1.);\\nv_dotRatio = u_dotSize / gl_PointSize;\\nv_invEdgeRatio = -1. / ( smoothEdgeWidth / gl_PointSize );\\ngl_PointSize  *= (u_pixelRatio * u_tileZoomFactor);\\n}\"}},filtering:{\"bicubic.glsl\":\"vec4 computeWeights(float v) {\\nfloat b = 1.0 / 6.0;\\nfloat v2 = v * v;\\nfloat v3 = v2 * v;\\nfloat w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\\nfloat w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\\nfloat w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\\nfloat w3 = b * v3;\\nreturn vec4(w0, w1, w2, w3);\\n}\\nvec4 bicubicOffsetsAndWeights(float v) {\\nvec4 w = computeWeights(v);\\nfloat g0 = w.x + w.y;\\nfloat g1 = w.z + w.w;\\nfloat h0 = 1.0 - (w.y / g0) + v;\\nfloat h1 = 1.0 + (w.w / g1) - v;\\nreturn vec4(h0, h1, g0, g1);\\n}\\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\\nvec2 eX = vec2(1.0 / texSize.x, 0.0);\\nvec2 eY = vec2(0.0, 1.0 / texSize.y);\\nvec2 texel = coords * texSize - 0.5;\\nvec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\\nvec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\\nvec2 coords10 = coords + hgX.x * eX;\\nvec2 coords00 = coords - hgX.y * eX;\\nvec2 coords11 = coords10 + hgY.x * eY;\\nvec2 coords01 = coords00 + hgY.x * eY;\\ncoords10 = coords10 - hgY.y * eY;\\ncoords00 = coords00 - hgY.y * eY;\\nvec4 color00 = texture2D(sampler, coords00);\\nvec4 color10 = texture2D(sampler, coords10);\\nvec4 color01 = texture2D(sampler, coords01);\\nvec4 color11 = texture2D(sampler, coords11);\\ncolor00 = mix(color00, color01, hgY.z);\\ncolor10 = mix(color10, color11, hgY.z);\\ncolor00 = mix(color00, color10, hgX.z);\\nreturn color00;\\n}\",\"bilinear.glsl\":\"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\\nvec2 texelStart = floor(coords * texSize);\\nvec2 coord0 = texelStart / texSize;\\nvec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\\nvec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\\nvec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\\nvec4 color0 = texture2D(sampler, coord0);\\nvec4 color1 = texture2D(sampler, coord1);\\nvec4 color2 = texture2D(sampler, coord2);\\nvec4 color3 = texture2D(sampler, coord3);\\nvec2 blend = fract(coords * texSize);\\nvec4 color01 = mix(color0, color1, blend.x);\\nvec4 color23 = mix(color2, color3, blend.x);\\nvec4 color = mix(color01, color23, blend.y);\\n#ifdef NNEDGE\\nfloat alpha = floor(color0.a * color1.a * color2.a * color3.a + 0.5);\\ncolor = color * alpha + (1.0 - alpha) * texture2D(sampler, coords);\\n#endif\\nreturn color;\\n}\",\"epx.glsl\":\"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\\nvec2 invSize = 1.0 / texSize;\\nvec2 texel = coords * texSize;\\nvec2 texel_i = floor(texel);\\nvec2 texel_frac = fract(texel);\\nvec4 colorP = texture2D(sampler, texel_i * invSize);\\nvec4 colorP1 = vec4(colorP);\\nvec4 colorP2 = vec4(colorP);\\nvec4 colorP3 = vec4(colorP);\\nvec4 colorP4 = vec4(colorP);\\nvec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\\nvec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\\nvec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\\nvec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\\nif (colorC == colorA && colorC != colorD && colorA != colorB) {\\ncolorP1 = colorA;\\n}\\nif (colorA == colorB && colorA != colorC && colorB != colorD) {\\ncolorP2 = colorB;\\n}\\nif (colorD == colorC && colorD != colorB && colorC != colorA) {\\ncolorP3 = colorC;\\n}\\nif (colorB == colorD && colorB != colorA && colorD != colorC) {\\ncolorP4 = colorD;\\n}\\nvec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\\nvec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\\nreturn mix(colorP12, colorP34, texel_frac.y);\\n}\"},fx:{integrate:{\"integrate.frag\":\"precision mediump float;\\nuniform lowp sampler2D u_sourceTexture;\\nuniform lowp sampler2D u_maskTexture;\\nuniform mediump float u_zoomLevel;\\nuniform highp float u_timeDelta;\\nuniform highp float u_animationTime;\\nvarying highp vec2 v_texcoord;\\n#include <materials/utils.glsl>\\nvoid main()\\n{\\n#ifdef DELTA\\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\\nvec4 data0 = texture2D(u_maskTexture, v_texcoord);\\nfloat flags = data0.r * 255.0;\\nfloat groupMinZoom = data0.g * 255.0;\\nfloat epsilon = 5.;\\nfloat wouldClip = float(groupMinZoom < epsilon);\\nfloat direction = wouldClip * 1.0 + (1.0 - wouldClip) * -1.0;\\nfloat dt = u_timeDelta / max(u_animationTime, 0.0001);\\nvec4 nextState = vec4(texel + direction * dt);\\ngl_FragColor =  vec4(nextState);\\n#elif defined(UPDATE)\\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\\ngl_FragColor = texel;\\n#endif\\n}\",\"integrate.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_pos;\\ngl_Position = vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\\n}\"}},heatmap:{heatmapResolve:{\"heatmapResolve.frag\":\"precision highp float;\\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\\n#define COMPRESSION_FACTOR 4.0\\n#else\\n#define COMPRESSION_FACTOR 1.0\\n#endif\\nuniform sampler2D u_texture;\\nuniform sampler2D u_gradient;\\nuniform vec2 u_densityMinAndInvRange;\\nuniform float u_densityNormalization;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 data = texture2D(u_texture, v_uv);\\nfloat density = data.r * COMPRESSION_FACTOR;\\ndensity *= u_densityNormalization;\\ndensity = (density - u_densityMinAndInvRange.x) * u_densityMinAndInvRange.y;\\nvec4 color = texture2D(u_gradient, vec2(density, 0.5));\\ngl_FragColor = vec4(color.rgb * color.a, color.a);\\n}\",\"heatmapResolve.vert\":\"precision highp float;\\nattribute vec2 a_pos;\\nvarying vec2 v_uv;\\nvoid main() {\\nv_uv = a_pos;\\ngl_Position = vec4(a_pos * 2.0 - 1.0, 1., 1.);\\n}\"}},highlight:{\"blur.frag\":\"varying mediump vec2 v_texcoord;\\nuniform mediump vec4 u_direction;\\nuniform mediump mat4 u_channelSelector;\\nuniform mediump float u_sigma;\\nuniform sampler2D u_texture;\\nmediump float gauss1(mediump vec2 dir) {\\nreturn exp(-dot(dir, dir) / (2.0 * u_sigma * u_sigma));\\n}\\nmediump vec4 selectChannel(mediump vec4 sample) {\\nreturn u_channelSelector * sample;\\n}\\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\\nmediump float w = gauss1(i * u_direction.xy);\\ntot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\\nweight += w;\\n}\\nvoid main(void) {\\nmediump float tot = 0.0;\\nmediump float weight = 0.0;\\naccumGauss1(-5.0, tot, weight);\\naccumGauss1(-4.0, tot, weight);\\naccumGauss1(-3.0, tot, weight);\\naccumGauss1(-2.0, tot, weight);\\naccumGauss1(-1.0, tot, weight);\\naccumGauss1(0.0, tot, weight);\\naccumGauss1(1.0, tot, weight);\\naccumGauss1(2.0, tot, weight);\\naccumGauss1(3.0, tot, weight);\\naccumGauss1(4.0, tot, weight);\\naccumGauss1(5.0, tot, weight);\\ngl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\\n}\",\"highlight.frag\":\"varying mediump vec2 v_texcoord;\\nuniform sampler2D u_texture;\\nuniform mediump float u_sigma;\\nuniform sampler2D u_shade;\\nuniform mediump vec2 u_minMaxDistance;\\nmediump float estimateDistance() {\\nmediump float y = texture2D(u_texture, v_texcoord)[3];\\nconst mediump float y0 = 0.5;\\nmediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * u_sigma);\\nmediump float d = (y - y0) / m0;\\nreturn d;\\n}\\nmediump vec4 shade(mediump float d) {\\nmediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\\nmappedDistance = clamp(mappedDistance, 0.0, 1.0);\\nreturn texture2D(u_shade, vec2(mappedDistance, 0.5));\\n}\\nvoid main(void) {\\nmediump float d = estimateDistance();\\ngl_FragColor = shade(d);\\n}\",\"textured.vert\":\"attribute mediump vec2 a_position;\\nattribute mediump vec2 a_texcoord;\\nvarying mediump vec2 v_texcoord;\\nvoid main(void) {\\ngl_Position = vec4(a_position, 0.0, 1.0);\\nv_texcoord = a_texcoord;\\n}\"},magnifier:{\"magnifier.frag\":\"uniform lowp vec4 u_background;\\nuniform mediump sampler2D u_readbackTexture;\\nuniform mediump sampler2D u_maskTexture;\\nuniform mediump sampler2D u_overlayTexture;\\nuniform bool u_maskEnabled;\\nuniform bool u_overlayEnabled;\\nvarying mediump vec2 v_texCoord;\\nconst lowp float barrelFactor = 1.1;\\nlowp vec2 barrel(lowp vec2 uv) {\\nlowp vec2 uvn = uv * 2.0 - 1.0;\\nif (uvn.x == 0.0 && uvn.y == 0.0) {\\nreturn vec2(0.5, 0.5);\\n}\\nlowp float theta = atan(uvn.y, uvn.x);\\nlowp float r = pow(length(uvn), barrelFactor);\\nreturn r * vec2(cos(theta), sin(theta)) * 0.5 + 0.5;\\n}\\nvoid main(void)\\n{\\nlowp vec4 color = texture2D(u_readbackTexture, barrel(v_texCoord));\\ncolor = (color + (1.0 - color.a) * u_background);\\nlowp float mask = u_maskEnabled ? texture2D(u_maskTexture, v_texCoord).a : 1.0;\\ncolor *= mask;\\nlowp vec4 overlayColor = u_overlayEnabled ? texture2D(u_overlayTexture, v_texCoord) : vec4(0);\\ngl_FragColor = overlayColor + (1.0 - overlayColor.a) * color;\\n}\",\"magnifier.vert\":\"precision mediump float;\\nattribute mediump vec2 a_pos;\\nuniform mediump vec4 u_drawPos;\\nvarying mediump vec2 v_texCoord;\\nvoid main(void)\\n{\\nv_texCoord = a_pos;\\ngl_Position = vec4(u_drawPos.xy + vec2(a_pos - 0.5) * u_drawPos.zw, 0.0, 1.0);\\n}\"},materials:{\"attributeData.glsl\":\"uniform highp sampler2D filterFlags;\\nuniform highp sampler2D animation;\\nuniform highp sampler2D gpgpu;\\nuniform highp sampler2D visualVariableData;\\nuniform highp sampler2D dataDriven0;\\nuniform highp sampler2D dataDriven1;\\nuniform highp sampler2D dataDriven2;\\nuniform float size;\\nhighp vec2 getAttributeDataCoords(in highp vec3 id) {\\nhighp vec3  texel = unpackDisplayIdTexel(id);\\nhighp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256);\\nhighp float col = mod(u32, size);\\nhighp float row = (u32 - col) / size;\\nhighp float u = col / size;\\nhighp float v = row / size;\\nreturn vec2(u, v);\\n}\\nhighp vec2 getAttributeDataTextureCoords(in highp vec3 id) {\\nreturn (getAttributeDataCoords(id) * 2.0) - 1.0 + (.5 / vec2(size));\\n}\\nhighp vec4 getFilterData(in highp vec3 id) {\\nvec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(filterFlags, coords);\\n}\\nhighp vec4 getAnimation(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(animation, coords);\\n}\\nhighp vec4 getVisualVariableData(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(visualVariableData, coords);\\n}\\nhighp vec4 getDataDriven0(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(dataDriven0, coords);\\n}\\nhighp vec4 getDataDriven1(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(dataDriven1, coords);\\n}\\nhighp vec4 getGPGPU(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(gpgpu, coords);\\n}\\nhighp vec4 getDataDriven2(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(dataDriven2, coords);\\n}\\nfloat u88VVToFloat(in vec2 v) {\\nbool isMagic = v.x == 255.0 && v.y == 255.0;\\nif (isMagic) {\\nreturn NAN_MAGIC_NUMBER;\\n}\\nreturn (v.x + v.y * float(0x100)) - 32768.0;\\n}\",\"barycentric.glsl\":\"float inTriangle(vec3 bary) {\\nvec3 absBary = abs(bary);\\nreturn step((absBary.x + absBary.y + absBary.z), 1.05);\\n}\\nvec3 xyToBarycentric(in vec2 pos, in vec2 v0,  in vec2 v1, in vec2 v2) {\\nmat3 xyToBarycentricMat3 = mat3(\\nv1.x * v2.y - v2.x * v1.y, v2.x * v0.y - v0.x * v2.y, v0.x * v1.y - v1.x * v0.y,\\nv1.y - v2.y, v2.y - v0.y, v0.y - v1.y,\\nv2.x - v1.x, v0.x - v2.x, v1.x - v0.x\\n);\\nfloat A2 = v0.x * (v1.y - v2.y) + v1.x * (v2.y - v0.y) + v2.x * (v0.y - v1.y);\\nreturn (1. / A2) * xyToBarycentricMat3 * vec3(1., pos);\\n}\",\"constants.glsl\":\"const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\\nconst float C_RAD_TO_DEG = 180.0 / 3.141592654;\\nconst float POSITION_PRECISION = 1.0 / 8.0;\\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\\nconst float SOFT_EDGE_RATIO = 1.0;\\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\\nconst float THIN_LINE_HALF_WIDTH = 1.0;\\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\\nconst float OFFSET_PRECISION = 1.0 / 8.0;\\nconst float OUTLINE_SCALE = 1.0 / 5.0;\\nconst float SDF_FONT_SIZE = 24.0;\\nconst float MAX_SDF_DISTANCE = 8.0;\\nconst float PLACEMENT_PADDING = 8.0;\\nconst float EPSILON = 0.00001;\\nconst float EPSILON_HITTEST = 0.05;\\nconst int MAX_FILTER_COUNT = 2;\\nconst int ATTR_VV_SIZE = 0;\\nconst int ATTR_VV_COLOR = 1;\\nconst int ATTR_VV_OPACITY = 2;\\nconst int ATTR_VV_ROTATION = 3;\\nconst highp float NAN_MAGIC_NUMBER = 1e-30;\\nconst int BITSET_GENERIC_LOCK_COLOR = 1;\\nconst int BITSET_GENERIC_CONSIDER_ALPHA_ONLY = 4;\\nconst int BITSET_MARKER_ALIGNMENT_MAP = 0;\\nconst int BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE = 2;\\nconst int BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY = 3;\\nconst int BITSET_TYPE_FILL_OUTLINE = 0;\\nconst int BITSET_FILL_RANDOM_PATTERN_OFFSET = 2;\\nconst int BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR = 3;\\nconst int BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR = 5;\\nconst int BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR = 6;\\nconst int BITSET_LINE_SCALE_DASH = 2;\",fill:{\"common.glsl\":\"#include <materials/symbologyTypeUtils.glsl>\\n#ifdef PATTERN\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_sampleAlphaOnly;\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nuniform lowp vec4 u_isActive[ 2 ];\\nuniform highp float u_dotValue;\\nuniform highp float u_tileDotsOverArea;\\nuniform highp float u_dotTextureDotCount;\\nuniform mediump float u_tileZoomFactor;\\n#endif\\nvarying highp vec3 v_id;\\nvarying lowp vec4 v_color;\\nvarying lowp float v_opacity;\\nvarying mediump vec4 v_aux1;\\n#ifdef PATTERN\\nvarying mediump vec2 v_tileTextureCoord;\\n#endif\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nvarying lowp float v_isOutline;\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nvarying highp vec2 v_dotTextureCoords;\\nvarying highp vec4 v_dotThresholds[ 2 ];\\n#endif\",\"fill.frag\":\"precision highp float;\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/fill/common.glsl>\\n#ifdef PATTERN\\nuniform lowp sampler2D u_texture;\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nuniform mediump mat4 u_dotColors[ 2 ];\\nuniform sampler2D u_dotTextures[ 2 ];\\nuniform vec4 u_dotBackgroundColor;\\n#endif\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.frag>\\nlowp vec4 drawLine() {\\nfloat v_lineWidth = v_aux1.x;\\nvec2  v_normal    = v_aux1.yz;\\nLineData inputs = LineData(\\nv_color,\\nv_normal,\\nv_lineWidth,\\nv_opacity,\\nv_id\\n);\\nreturn shadeLine(inputs);\\n}\\n#endif\\nlowp vec4 drawFill() {\\nlowp vec4 out_color = vec4(0.);\\n#ifdef HITTEST\\nout_color = v_color;\\n#elif defined(PATTERN)\\nmediump vec4 v_tlbr = v_aux1;\\nmediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\\nmediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\\nlowp vec4 color = texture2D(u_texture, samplePos);\\nif (v_sampleAlphaOnly > 0.5) {\\ncolor.rgb = vec3(color.a);\\n}\\nout_color = v_opacity * v_color * color;\\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY && !defined(HIGHLIGHT)\\nvec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\\nvec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\\nvec4 difference0 = v_dotThresholds[0] - textureThresholds0;\\nvec4 difference1 = v_dotThresholds[1] - textureThresholds1;\\n#ifdef DD_DOT_BLENDING\\nvec4 isPositive0 = step(0.0, difference0);\\nvec4 isPositive1 = step(0.0, difference1);\\nfloat weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\\nfloat lessThanEqZero = step(weightSum, 0.0);\\nfloat greaterThanZero = 1.0 - lessThanEqZero ;\\nfloat divisor = (weightSum + lessThanEqZero);\\nvec4 weights0 = difference0 * isPositive0 / divisor;\\nvec4 weights1 = difference1 * isPositive1 / divisor;\\nvec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\\nvec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\\n#else\\nfloat diffMax = max(max4(difference0), max4(difference1));\\nfloat lessThanZero = step(diffMax, 0.0);\\nfloat greaterOrEqZero = 1.0 - lessThanZero;\\nvec4 isMax0 = step(diffMax, difference0);\\nvec4 isMax1 = step(diffMax, difference1);\\nvec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\\nvec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\\n#endif\\nout_color = preEffectColor;\\n#else\\nout_color = v_opacity * v_color;\\n#endif\\n#ifdef HIGHLIGHT\\nout_color.a = 1.0;\\n#endif\\nreturn out_color;\\n}\\nvoid main() {\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nif (v_isOutline > 0.5) {\\ngl_FragColor = drawLine();\\n} else {\\ngl_FragColor = drawFill();\\n}\\n#else\\ngl_FragColor = drawFill();\\n#endif\\n}\",\"fill.vert\":\"#include <materials/symbologyTypeUtils.glsl>\\n#define PACKED_LINE\\nprecision highp float;\\nattribute float a_bitset;\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nattribute float a_inverseArea;\\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\\nvec2 a_zoomRange = vec2(0.0, 10000.0);\\n#else\\nattribute vec4 a_color;\\nattribute vec4 a_aux2;\\nattribute vec4 a_aux3;\\n#ifndef SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\\nattribute vec4 a_aux1;\\nattribute vec2 a_zoomRange;\\n#else\\nvec2 a_zoomRange = vec2(0.0, 10000.0);\\n#endif\\n#endif\\nuniform vec2 u_tileOffset;\\nuniform vec2 u_maxIntNumOfCrossing;\\n#include <util/encoding.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/fill/common.glsl>\\n#include <materials/fill/hittest.glsl>\\nconst float INV_SCALE_COMPRESSION_FACTOR = 1.0 / 128.0;\\nconst float MAX_REPRESENTABLE_INT = 16777216.0;\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\\nreturn featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\\n}\\n#endif\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.vert>\\nvoid drawLine(out lowp vec4 out_color, out highp vec3 out_pos) {\\nLineData outputs = buildLine(\\nout_pos,\\na_id,\\na_pos,\\na_color,\\n(a_aux3.xy - 128.) / 16.,\\n(a_aux3.zw - 128.) / 16.,\\n0.,\\na_aux2.z / 16.,\\na_bitset,\\nvec4(0.),\\nvec2(0.),\\na_aux2.w / 16.\\n);\\nv_id      = outputs.id;\\nv_opacity = outputs.opacity;\\nv_aux1    = vec4(outputs.lineHalfWidth, outputs.normal, 0.);\\nout_color = outputs.color;\\n}\\n#endif\\nvoid drawFill(out lowp vec4 out_color, out highp vec3 out_pos) {\\nfloat a_bitSet = a_bitset;\\nout_color = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\\nv_opacity = getOpacity();\\nv_id      = norm(a_id);\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nmat3 tileToTileNormalized = mat3(  2. / 512.,  0.,  0.,\\n0., -2. / 512.,  0.,\\n-1.,  1.,  1.  );\\nout_pos   = tileToTileNormalized * vec3((a_pos * FILL_POSITION_PRECISION), 1.);\\n#else\\nout_pos   = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\\n#endif\\n#ifdef PATTERN\\nvec4  a_tlbr   = a_aux1;\\nfloat a_width  = a_aux2.x;\\nfloat a_height = a_aux2.y;\\nvec2  a_offset = a_aux2.zw;\\nvec2  a_scale  = a_aux3.xy;\\nfloat a_angle  = a_aux3.z;\\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR) > 0.5) {\\na_width *= INV_SCALE_COMPRESSION_FACTOR;\\n}\\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR) > 0.5) {\\na_height *= INV_SCALE_COMPRESSION_FACTOR;\\n}\\nvec2 scale = INV_SCALE_COMPRESSION_FACTOR * a_scale;\\nfloat width = u_zoomFactor * a_width * scale.x;\\nfloat height = u_zoomFactor * a_height * scale.y;\\nfloat angle = C_256_TO_RAD * a_angle;\\nfloat sinA = sin(angle);\\nfloat cosA = cos(angle);\\nfloat dx = 0.0;\\nfloat dy = 0.0;\\nif (getBit(a_bitset, BITSET_FILL_RANDOM_PATTERN_OFFSET) > 0.5) {\\nfloat id = rgba2float(vec4(a_id, 0.0));\\ndx = rand(vec2(id, 0.0));\\ndy = rand(vec2(0.0, id));\\n}\\nmat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\\n-sinA / width, cosA / height, 0,\\ndx,            dy,           1);\\nvec2 patternSize = vec2(a_width, a_height);\\nvec2 numPatternsPerMaxInt = vec2(MAX_REPRESENTABLE_INT) / patternSize;\\nvec2 maxIntCrossingOffsetCorrection = patternSize * fract(u_maxIntNumOfCrossing * numPatternsPerMaxInt);\\nvec2 tileOffset = u_tileOffset + maxIntCrossingOffsetCorrection - 0.5 * patternSize;\\ntileOffset = vec2(tileOffset.x * cosA - tileOffset.y * sinA, tileOffset.x * sinA + tileOffset.y * cosA);\\ntileOffset = mod(tileOffset, patternSize);\\nvec2 symbolOffset = u_zoomFactor * scale * vec2(a_offset - tileOffset) / vec2(width, height);\\nv_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\\nv_aux1 = a_tlbr / u_mosaicSize.xyxy;\\nv_sampleAlphaOnly = getBit(a_bitset, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\\nif (getBit(a_bitSet, BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR) > 0.5) {\\n#ifdef VV_COLOR\\nv_sampleAlphaOnly *= (1.0 - float(isNan(VV_ADATA[ATTR_VV_COLOR]))) * (1.0 - getBit(a_bitSet, BITSET_GENERIC_LOCK_COLOR));\\n#else\\nv_sampleAlphaOnly = 0.0;\\n#endif\\n}\\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nvec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\\nvec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\\nfloat size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\\nv_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\\nv_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\\nv_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\\n#endif\\n}\\n#ifdef HITTEST\\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nif (getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE) > 0.5) {\\nout_pos = vec3(0., 0., 2.);\\nreturn;\\n}\\n#endif\\nhittestFill(out_color, out_pos);\\ngl_PointSize = 1.0;\\n}\\n#elif defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\\nv_isOutline = getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE);\\nif (v_isOutline > 0.5) {\\ndrawLine(out_color, out_pos);\\n} else {\\ndrawFill(out_color, out_pos);\\n}\\n}\\n#else\\n#define draw drawFill\\n#endif\\nvoid main()\\n{\\nINIT;\\nhighp vec3 pos  = vec3(0.);\\nhighp vec4 color  = vec4(0.);\\ndraw(color, pos);\\nv_color = color;\\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\\n}\",\"hittest.glsl\":\"#ifdef HITTEST\\n#include <materials/hittest/common.glsl>\\nattribute vec2 a_pos1;\\nattribute vec2 a_pos2;\\nvoid hittestFill(\\nout lowp vec4 out_color,\\nout highp vec3 out_pos\\n) {\\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * FILL_POSITION_PRECISION, 1.);\\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * FILL_POSITION_PRECISION, 1.);\\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * FILL_POSITION_PRECISION, 1.);\\nfloat hittestDist = u_hittestDist;\\nfloat dist = distPointTriangle(u_hittestPos, pos.xy, pos1.xy, pos2.xy);\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nif (dist < 0. || dist >= hittestDist) {\\nout_pos.z += 2.0;\\n}\\nout_color = vec4(1. / 255., 0, 0, dist == 0. ? (1. / 255.) : 0.);\\n}\\n#endif\"},hittest:{\"common.glsl\":\"#ifdef HITTEST\\nuniform float hittestDist;\\nuniform highp vec2 hittestPos;\\nfloat projectScalar(vec2 a, vec2 b) {\\nreturn dot(a, normalize(b));\\n}\\nfloat distPointSegment(vec2 p0, vec2 p1, vec2 p2) {\\nvec2 L = p2 - p1;\\nvec2 A = p0 - p1;\\nfloat projAL = projectScalar(A, L);\\nfloat t = clamp(projAL / length(L), 0., 1.);\\nreturn distance(p0, p1 + t * (p2 - p1));\\n}\\nvoid hittestMarker(out lowp vec4 out_color, out highp vec3 out_pos, in highp vec3 pos, float size) {\\nfloat dist = distance(pos, vec3(hittestPos, 1.));\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nif ((dist - size) > hittestDist) {\\nout_pos.z += 2.0;\\n}\\nout_color = vec4(1. / 255., 0, 0, (dist - size) < 0. ? (1. / 255.) : 0.);\\n}\\nfloat intersectPointTriangleBary(vec2 p, vec2 a, vec2 b, vec2 c) {\\nreturn inTriangle(xyToBarycentric(p, a, b, c));\\n}\\nfloat distPointTriangle(vec2 p, vec2 a, vec2 b, vec2 c) {\\nvec2 ba = b - a;\\nvec2 ca = c - a;\\nfloat crossProduct = ba.x * ca.y - ca.x * ba.y;\\nbool isParallel = crossProduct < EPSILON_HITTEST && crossProduct > -EPSILON_HITTEST;\\nif (isParallel) {\\nreturn -1.;\\n}\\nif (intersectPointTriangleBary(p.xy, a, b, c) == 1.) {\\nreturn 0.;\\n}\\nfloat distAB = distPointSegment(p, a, b);\\nfloat distBC = distPointSegment(p, b, c);\\nfloat distCA = distPointSegment(p, c, a);\\nreturn min(min(distAB, distBC), distCA);\\n}\\n#endif\"},icon:{\"common.glsl\":\"#include <util/encoding.glsl>\\nuniform lowp vec2 u_mosaicSize;\\nvarying lowp vec4 v_color;\\nvarying highp vec3 v_id;\\nvarying highp vec4 v_sizeTex;\\nvarying mediump vec3 v_pos;\\nvarying lowp float v_opacity;\\nuniform lowp sampler2D u_texture;\\n#ifdef SDF\\nvarying lowp vec4 v_outlineColor;\\nvarying mediump float v_outlineWidth;\\nvarying mediump float v_distRatio;\\nvarying mediump float v_overridingOutlineColor;\\nvarying mediump float v_isThin;\\n#endif\\n#ifdef SDF\\nvec4 getColor(vec2 v_size, vec2 v_tex) {\\n#ifdef HITTEST\\nlowp vec4 fillPixelColor = vec4(1.0);\\n#else\\nlowp vec4 fillPixelColor = v_color;\\n#endif\\nfloat d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\\nfloat size = max(v_size.x, v_size.y);\\nfloat dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\\nfillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\\nfloat outlineWidth = v_outlineWidth;\\n#ifdef HIGHLIGHT\\noutlineWidth = max(outlineWidth, 4.0 * v_isThin);\\n#endif\\nif (outlineWidth > 0.25) {\\nlowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\\nfloat clampedOutlineSize = min(outlineWidth, size);\\noutlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\\nreturn v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\\n}\\nreturn v_opacity * fillPixelColor;\\n}\\n#else\\nvec4 getColor(vec2 _v_size, vec2 v_tex) {\\nlowp vec4 texColor = texture2D(u_texture, v_tex);\\nreturn v_opacity * texColor * v_color;\\n}\\n#endif\",heatmapAccumulate:{\"common.glsl\":\"varying lowp vec4 v_hittestResult;\\nvarying mediump vec2 v_offsetFromCenter;\\nvarying highp float v_fieldValue;\",\"heatmapAccumulate.frag\":\"precision mediump float;\\n#include <materials/icon/heatmapAccumulate/common.glsl>\\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\\n#define COMPRESSION_FACTOR 0.25\\n#else\\n#define COMPRESSION_FACTOR 1.0\\n#endif\\nuniform lowp sampler2D u_texture;\\nvoid main() {\\n#ifdef HITTEST\\ngl_FragColor = v_hittestResult;\\n#else\\nfloat radius = length(v_offsetFromCenter);\\nfloat shapeWeight = step(radius, 1.0);\\nfloat oneMinusRadiusSquared = 1.0 - radius * radius;\\nfloat kernelWeight = oneMinusRadiusSquared * oneMinusRadiusSquared;\\ngl_FragColor = vec4(shapeWeight * kernelWeight * v_fieldValue * COMPRESSION_FACTOR);\\n#endif\\n}\",\"heatmapAccumulate.vert\":\"precision highp float;\\nattribute vec2 a_vertexOffset;\\nvec4 a_color = vec4(0.0);\\nvec2 a_zoomRange = vec2(0.0, 10000.0);\\nuniform float u_radius;\\nuniform float u_isFieldActive;\\n#include <materials/vcommon.glsl>\\n#include <materials/hittest/common.glsl>\\n#include <materials/icon/heatmapAccumulate/common.glsl>\\nvoid main() {\\nfloat filterFlags = getFilterFlags();\\n#ifdef HITTEST\\nhighp vec4 out_hittestResult = vec4(0.);\\nhighp vec3 out_pos = vec3(0.);\\nvec3 pos = u_viewMat3 * u_tileMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\\nhittestMarker(out_hittestResult, out_pos, pos, u_radius);\\nv_hittestResult = out_hittestResult;\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(a_color, out_pos, filterFlags, a_zoomRange), 1.0);\\n#else\\nv_offsetFromCenter = sign(a_vertexOffset);\\nv_fieldValue = getAttributeData2(a_id).x * u_isFieldActive + 1.0 - u_isFieldActive;\\nvec3 centerPos = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\\nvec3 vertexPos = centerPos + u_displayViewMat3 * vec3(v_offsetFromCenter, 0.0) * u_radius;\\ngl_Position = vec4(clip(a_color, vertexPos, filterFlags, a_zoomRange), 1.0);\\n#endif\\n}\"},\"hittest.glsl\":\"#ifdef HITTEST\\n#include <materials/hittest/common.glsl>\\nattribute vec2 a_vertexOffset1;\\nattribute vec2 a_vertexOffset2;\\nattribute vec2 a_texCoords1;\\nattribute vec2 a_texCoords2;\\nvec2 getTextureCoords(in vec3 bary, in vec2 texCoords0, in vec2 texCoords1, in vec2 texCoords2) {\\nreturn texCoords0 * bary.x + texCoords1 * bary.y + texCoords2 * bary.z;\\n}\\nvoid hittestIcon(\\ninout lowp vec4 out_color,\\nout highp vec3 out_pos,\\nin vec3 pos,\\nin vec3 offset,\\nin vec2 size,\\nin float scaleFactor,\\nin float isMapAligned\\n) {\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nvec3 posBase = u_viewMat3 * u_tileMat3  * pos;\\nvec3 offset1 = scaleFactor * vec3(a_vertexOffset1 / 16.0, 0.);\\nvec3 offset2 = scaleFactor * vec3(a_vertexOffset2 / 16.0, 0.);\\nvec2 pos0    = (posBase + getMatrixNoDisplay(isMapAligned) * offset).xy;\\nvec2 pos1    = (posBase + getMatrixNoDisplay(isMapAligned) * offset1).xy;\\nvec2 pos2    = (posBase + getMatrixNoDisplay(isMapAligned) * offset2).xy;\\nvec3 bary0 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\\nvec3 bary1 = xyToBarycentric(u_hittestPos + vec2(0., -u_hittestDist), pos0, pos1, pos2);\\nvec3 bary2 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\\nvec3 bary3 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, 0.), pos0, pos1, pos2);\\nvec3 bary4 = xyToBarycentric(u_hittestPos, pos0, pos1, pos2);\\nvec3 bary5 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, 0.), pos0, pos1, pos2);\\nvec3 bary6 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, u_hittestDist), pos0, pos1, pos2);\\nvec3 bary7 = xyToBarycentric(u_hittestPos + vec2(0., u_hittestDist), pos0, pos1, pos2);\\nvec3 bary8 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, u_hittestDist), pos0, pos1, pos2);\\nvec2 tex0 = a_texCoords  / u_mosaicSize;\\nvec2 tex1 = a_texCoords1 / u_mosaicSize;\\nvec2 tex2 = a_texCoords2 / u_mosaicSize;\\nfloat alphaSum = 0.;\\nalphaSum += inTriangle(bary0) * getColor(size, getTextureCoords(bary0, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary1) * getColor(size, getTextureCoords(bary1, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary2) * getColor(size, getTextureCoords(bary2, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary3) * getColor(size, getTextureCoords(bary3, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary4) * getColor(size, getTextureCoords(bary4, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary5) * getColor(size, getTextureCoords(bary5, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary6) * getColor(size, getTextureCoords(bary6, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary7) * getColor(size, getTextureCoords(bary7, tex0, tex1, tex2)).a;\\nout_pos.z += step(alphaSum, .05) * 2.0;\\nout_color = vec4(1. / 255., 0., 0., alphaSum / 255.);\\n}\\n#endif\",\"icon.frag\":\"precision mediump float;\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/icon/common.glsl>\\nvoid main()\\n{\\n#ifdef HITTEST\\nvec4 color = v_color;\\n#else\\nvec4 color = getColor(v_sizeTex.xy, v_sizeTex.zw);\\n#endif\\n#ifdef HIGHLIGHT\\ncolor.a = step(1.0 / 255.0, color.a);\\n#endif\\ngl_FragColor = color;\\n}\",\"icon.vert\":\"precision highp float;\\nattribute vec4 a_color;\\nattribute vec4 a_outlineColor;\\nattribute vec4 a_sizeAndOutlineWidth;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nattribute vec2 a_bitSetAndDistRatio;\\nattribute vec2 a_zoomRange;\\n#include <materials/vcommon.glsl>\\n#include <materials/icon/common.glsl>\\n#include <materials/icon/hittest.glsl>\\nfloat getMarkerScaleFactor(inout vec2 size, in float referenceSize) {\\n#ifdef VV_SIZE\\nfloat f = getSize(size.y) / size.y;\\nfloat sizeFactor = size.y / referenceSize;\\nreturn getSize(referenceSize) / referenceSize;\\n#else\\nreturn 1.;\\n#endif\\n}\\nvoid main()\\n{\\nINIT;\\nfloat a_bitSet = a_bitSetAndDistRatio.x;\\nvec3  pos           = vec3(a_pos * POSITION_PRECISION, 1.0);\\nvec2  size          = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\\nvec3  offset        = vec3(a_vertexOffset / 16.0, 0.);\\nfloat outlineSize   = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\\nfloat isMapAligned  = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\\nfloat referenceSize = a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0;\\nfloat scaleSymbolProportionally = getBit(a_bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\\nfloat scaleFactor               = getMarkerScaleFactor(size, referenceSize);\\nsize.xy     *= scaleFactor;\\noffset.xy   *= scaleFactor;\\noutlineSize *= scaleSymbolProportionally * (scaleFactor - 1.0) + 1.0;\\nvec2 v_tex   = a_texCoords / u_mosaicSize;\\nfloat filterFlags = getFilterFlags();\\nv_color    = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\\nv_opacity  = getOpacity();\\nv_id       = norm(a_id);\\nv_pos      = u_dvsMat3 * pos + getMatrix(isMapAligned) * getRotation()  * offset;\\nv_sizeTex  = vec4(size.xy, v_tex.xy);\\n#ifdef SDF\\nv_isThin   = getBit(a_bitSet, BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE);\\n#ifdef VV_COLOR\\nv_overridingOutlineColor = v_isThin;\\n#else\\nv_overridingOutlineColor = 0.0;\\n#endif\\nv_outlineWidth = min(outlineSize, max(max(size.x, size.y) - 0.99, 0.0));\\nv_outlineColor = a_outlineColor;\\nv_distRatio = a_bitSetAndDistRatio.y / 128.0;\\n#endif\\n#ifdef HITTEST\\nhighp vec4 out_color = vec4(0.);\\nhighp vec3 out_pos   = vec3(0.);\\nhittestIcon(out_color, out_pos, pos, offset, size, scaleFactor, isMapAligned);\\nv_color = out_color;\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\\n#else\\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\\n#endif\\n}\"},label:{\"common.glsl\":\"uniform mediump float u_zoomLevel;\\nuniform mediump float u_mapRotation;\\nuniform mediump float u_mapAligned;\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_antialiasingWidth;\\nvarying mediump float v_edgeDistanceOffset;\\nvarying mediump vec2 v_tex;\\nvarying mediump vec4 v_color;\\nvarying lowp vec4 v_animation;\",\"label.frag\":\"#include <materials/text/text.frag>\",\"label.vert\":\"precision highp float;\\n#include <materials/vcommon.glsl>\\n#include <materials/text/common.glsl>\\nattribute vec4 a_color;\\nattribute vec4 a_haloColor;\\nattribute vec4 a_texAndSize;\\nattribute vec4 a_refSymbolAndPlacementOffset;\\nattribute vec4 a_glyphData;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nuniform float u_isHaloPass;\\nuniform float u_isBackgroundPass;\\nuniform float u_mapRotation;\\nuniform float u_mapAligned;\\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\\nfloat glyphAngle = angle * 360.0 / 254.0;\\nfloat mapAngle = u_mapRotation * 360.0 / 254.0;\\nfloat diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\\nfloat z = 0.0;\\nz += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_currentZoom)));\\nz += u_mapAligned * 2.0 * step(90.0, diffAngle);\\nz += 2.0 * (1.0 - step(u_currentZoom, maxZoom));\\nreturn z;\\n}\\nvoid main()\\n{\\nINIT;\\nfloat groupMinZoom    = getMinZoom();\\nfloat glyphMinZoom    = a_glyphData.x;\\nfloat glyphMaxZoom    = a_glyphData.y;\\nfloat glyphAngle      = a_glyphData.z;\\nfloat a_isBackground  = a_glyphData.w;\\nfloat a_minZoom          = max(groupMinZoom, glyphMinZoom);\\nfloat a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\\nvec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\\nfloat a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\\nfloat fontSize           = a_texAndSize.z;\\nfloat haloSize           = a_texAndSize.w * OUTLINE_SCALE;\\nvec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\\nvec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\\nfloat z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\\nfloat fontScale    = fontSize / SDF_FONT_SIZE;\\nfloat halfSize     = getSize(a_refSymbolSize) / 2.0;\\nfloat animation    = pow(getAnimationState(), vec4(2.0)).r;\\nfloat isText = 1.0 - a_isBackground;\\nfloat isBackground = u_isBackgroundPass * a_isBackground;\\nvec4  nonHaloColor = (isBackground + isText) * a_color;\\nv_color     = animation * ((1.0 - u_isHaloPass) * nonHaloColor + (u_isHaloPass * a_haloColor));\\nv_opacity   = 1.0;\\nv_tex       = a_texCoords / u_mosaicSize;\\nv_edgeDistanceOffset = u_isHaloPass * haloSize / fontScale / MAX_SDF_DISTANCE;\\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\\nvec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\\nvec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\\nvec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\\nfloat isHidden = u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\\nv_pos.z += 2.0 * isHidden;\\ngl_Position = vec4(v_pos, 1.0);\\n#ifdef DEBUG\\nv_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\\n#endif\\n}\"},line:{\"common.glsl\":\"varying lowp vec4 v_color;\\nvarying highp vec3 v_id;\\nvarying mediump vec2 v_normal;\\nvarying mediump float v_lineHalfWidth;\\nvarying lowp float v_opacity;\\n#ifdef PATTERN\\nvarying mediump vec4 v_tlbr;\\nvarying mediump vec2 v_patternSize;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nvarying highp float v_accumulatedDistance;\\n#endif\\n#ifdef SDF\\nvarying mediump float v_lineWidthRatio;\\n#endif\",\"hittest.glsl\":\"#include <materials/hittest/common.glsl>\\n#ifdef HITTEST\\nattribute vec2 a_pos1;\\nattribute vec2 a_pos2;\\nvoid hittestLine(out lowp vec4 out_color, out highp vec3 out_pos, float halfWidth) {\\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * POSITION_PRECISION, 1.);\\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * POSITION_PRECISION, 1.);\\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * POSITION_PRECISION, 1.);\\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nfloat dist = min(distPointSegment(u_hittestPos, pos.xy, pos1.xy),\\ndistPointSegment(u_hittestPos, pos.xy, pos2.xy)) - halfWidth;\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nif (dist >= u_hittestDist) {\\nout_pos.z += 2.0;\\n}\\nout_color = vec4(1. / 255., 0, 0, dist <= 0. ? (1. / 255.) : 0.);\\n}\\n#endif\",\"line.frag\":\"precision lowp float;\\n#include <util/encoding.glsl>\\n#include <materials/constants.glsl>\\n#include <materials/symbologyTypeUtils.glsl>\\n#include <materials/line/common.glsl>\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.frag>\\n#ifdef HITTEST\\nvoid main() {\\ngl_FragColor = v_color;\\n}\\n#else\\nvoid main() {\\nLineData inputs = LineData(\\nv_color,\\nv_normal,\\nv_lineHalfWidth,\\nv_opacity,\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nv_tlbr,\\nv_patternSize,\\n#endif\\n#ifdef SDF\\nv_lineWidthRatio,\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nv_accumulatedDistance,\\n#endif\\n#endif\\nv_id\\n);\\ngl_FragColor = shadeLine(inputs);\\n}\\n#endif\",\"line.vert\":\"precision highp float;\\nattribute vec4 a_color;\\nattribute vec4 a_offsetAndNormal;\\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\\nattribute vec4 a_tlbr;\\nattribute vec4 a_segmentDirection;\\nattribute vec2 a_aux;\\nattribute vec2 a_zoomRange;\\n#include <materials/vcommon.glsl>\\n#include <materials/symbologyTypeUtils.glsl>\\n#include <materials/line/common.glsl>\\n#include <materials/line/hittest.glsl>\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.vert>\\n#ifdef HITTEST\\nvoid draw() {\\nfloat aa        = 0.5 * u_antialiasing;\\nfloat a_halfWidth = a_accumulatedDistanceAndHalfWidth.y / 16.;\\nfloat a_cimHalfWidth = a_aux.x / 16. ;\\nvec2  a_offset = a_offsetAndNormal.xy / 16.;\\nfloat baseWidth = getBaseLineHalfWidth(a_halfWidth, a_cimHalfWidth);\\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\\nhighp vec3 pos  = vec3(0.);\\nv_color = vec4(0.);\\nhittestLine(v_color, pos, halfWidth);\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\\n}\\n#else\\nvoid draw()\\n{\\nhighp vec3 pos = vec3(0.);\\nLineData outputs = buildLine(\\npos,\\na_id,\\na_pos,\\na_color,\\na_offsetAndNormal.xy / 16.,\\na_offsetAndNormal.zw / 16.,\\na_accumulatedDistanceAndHalfWidth.x,\\na_accumulatedDistanceAndHalfWidth.y / 16.,\\na_segmentDirection.w,\\na_tlbr,\\na_segmentDirection.xy / 16.,\\na_aux.x / 16.\\n);\\nv_id              = outputs.id;\\nv_color           = outputs.color;\\nv_normal          = outputs.normal;\\nv_lineHalfWidth   = outputs.lineHalfWidth;\\nv_opacity         = outputs.opacity;\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nv_tlbr          = outputs.tlbr;\\nv_patternSize   = outputs.patternSize;\\n#endif\\n#ifdef SDF\\nv_lineWidthRatio = outputs.lineWidthRatio;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nv_accumulatedDistance = outputs.accumulatedDistance;\\n#endif\\n#endif\\ngl_Position = vec4(clip(outputs.color, pos, getFilterFlags(), a_zoomRange), 1.0);\\n}\\n#endif\\nvoid main() {\\nINIT;\\ndraw();\\n}\"},pie:{\"pie.common.glsl\":\"uniform float outlineWidth;\\nuniform mediump float sectorThreshold;\\nvarying vec3  v_id;\\nvarying vec3  v_pos;\\nvarying vec2  v_offset;\\nvarying vec4  v_color;\\nvarying float v_size;\\nvarying float v_numOfEntries;\\nvarying float v_maxSectorAngle;\\nvarying vec2  v_filteredSectorToColorId[numberOfFields];\\nvarying vec2  v_texCoords;\\nvarying float v_outlineWidth;\\nvarying float v_opacity;\\nstruct FilteredChartInfo {\\nfloat endSectorAngle;\\nint colorId;\\n};\",\"pie.frag\":\"precision highp float;\\n#include <util/atan2.glsl>\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/pie/pie.common.glsl>\\nuniform lowp vec4 colors[numberOfFields];\\nuniform lowp vec4 defaultColor;\\nuniform lowp vec4 othersColor;\\nuniform lowp vec4 outlineColor;\\nuniform float donutRatio;\\nlowp vec4 getSectorColor(in int index, in vec2 filteredSectorToColorId[numberOfFields]) {\\nmediump int colorIndex = int(filteredSectorToColorId[index].y);\\nreturn colors[colorIndex];\\n}\\nconst int OTHER_SECTOR_ID = 255;\\n#ifdef HITTEST\\nvec4 getColor() {\\nfloat distanceSize = length(v_offset) * v_size;\\nfloat donutSize = donutRatio * v_size;\\nfloat alpha = step(donutSize, distanceSize) * (1.0 - step(v_size, distanceSize));\\nreturn v_color;\\n}\\n#else\\nvec4 getColor() {\\nfloat angle = 90.0 - C_RAD_TO_DEG * atan2(v_offset.y, v_offset.x);\\nif (angle < 0.0) {\\nangle += 360.0;\\n} else if (angle > 360.0) {\\nangle = mod(angle, 360.0);\\n}\\nint numOfEntries = int(v_numOfEntries);\\nfloat maxSectorAngle = v_maxSectorAngle;\\nlowp vec4 fillColor = (maxSectorAngle > 0.0 || sectorThreshold > 0.0) ? othersColor : defaultColor;\\nlowp vec4 prevColor = vec4(0.0);\\nlowp vec4 nextColor = vec4(0.0);\\nfloat startSectorAngle = 0.0;\\nfloat endSectorAngle = 0.0;\\nif (angle < maxSectorAngle) {\\nfor (int index = 0; index < numberOfFields; ++index) {\\nstartSectorAngle = endSectorAngle;\\nendSectorAngle = v_filteredSectorToColorId[index].x;\\nif (endSectorAngle > angle) {\\nfillColor = getSectorColor(index, v_filteredSectorToColorId);\\nprevColor = sectorThreshold != 0.0 && index == 0 && abs(360.0 - maxSectorAngle) < EPSILON ? othersColor :\\ngetSectorColor(index > 0 ? index - 1 : numOfEntries - 1, v_filteredSectorToColorId);\\nnextColor = sectorThreshold != 0.0 && abs(endSectorAngle - maxSectorAngle) < EPSILON ? othersColor :\\ngetSectorColor(index < numOfEntries - 1 ? index + 1 : 0, v_filteredSectorToColorId);\\nbreak;\\n}\\nif (index == numOfEntries - 1) {\\nbreak;\\n}\\n}\\n} else {\\nprevColor = getSectorColor(numOfEntries - 1, v_filteredSectorToColorId);\\nnextColor = getSectorColor(0, v_filteredSectorToColorId);\\nstartSectorAngle = maxSectorAngle;\\nendSectorAngle = 360.0;\\n}\\nlowp vec4 outlineColor = outlineColor;\\nfloat offset = length(v_offset);\\nfloat distanceSize = offset * v_size;\\nif (startSectorAngle != 0.0 || endSectorAngle != 360.0) {\\nfloat distanceToStartSector = (angle - startSectorAngle);\\nfloat distanceToEndSector = (endSectorAngle - angle);\\nfloat sectorThreshold = 0.6;\\nfloat beginSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToStartSector * offset);\\nfloat endSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToEndSector * offset);\\nif (endSectorAlpha > 0.0) {\\nfillColor = mix(nextColor, fillColor, endSectorAlpha);\\n} else if (beginSectorAlpha > 0.0) {\\nfillColor = mix(prevColor, fillColor, beginSectorAlpha);\\n}\\n}\\nfloat donutSize = donutRatio * (v_size - v_outlineWidth);\\nfloat endOfDonut = donutSize - v_outlineWidth;\\nfloat aaThreshold = 0.75;\\nfloat innerCircleAlpha = endOfDonut - aaThreshold > 0.0 ? smoothstep(endOfDonut - aaThreshold, endOfDonut + aaThreshold, distanceSize) : 1.0;\\nfloat outerCircleAlpha = 1.0 - smoothstep(v_size - aaThreshold, v_size + aaThreshold , distanceSize);\\nfloat circleAlpha = innerCircleAlpha * outerCircleAlpha;\\nfloat startOfOutline = v_size - v_outlineWidth;\\nif (startOfOutline > 0.0 && v_outlineWidth > 0.25) {\\nfloat outlineFactor = smoothstep(startOfOutline - aaThreshold, startOfOutline + aaThreshold, distanceSize);\\nfloat innerLineFactor = donutSize - aaThreshold > 0.0 ? 1.0 - smoothstep(donutSize - aaThreshold, donutSize + aaThreshold , distanceSize) : 0.0;\\nfillColor = mix(fillColor, outlineColor, innerLineFactor + outlineFactor);\\n}\\nreturn v_opacity * circleAlpha * fillColor;\\n}\\n#endif\\nvoid main()\\n{\\nvec4 color = getColor();\\n#ifdef highlight\\ncolor.a = step(1.0 / 255.0, color.a);\\n#endif\\ngl_FragColor = color;\\n}\",\"pie.vert\":\"#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/barycentric.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/vv.glsl>\\n#include <materials/attributeData.glsl>\\n#include <materials/pie/pie.common.glsl>\\n#include <materials/hittest/common.glsl>\\nattribute float a_bitSet;\\nattribute vec2  a_offset;\\nattribute vec2  a_texCoords;\\nattribute vec2  a_size;\\nattribute float a_referenceSize;\\nattribute vec2  a_zoomRange;\\nint filterValue(in float sectorAngle,\\nin int currentIndex,\\ninout FilteredChartInfo filteredInfo,\\ninout vec2 filteredSectorToColorId[numberOfFields]) {\\nif (sectorAngle > sectorThreshold * 360.0) {\\nfilteredInfo.endSectorAngle += sectorAngle;\\nfilteredSectorToColorId[filteredInfo.colorId] = vec2(filteredInfo.endSectorAngle, currentIndex);\\n++filteredInfo.colorId;\\n}\\nreturn 0;\\n}\\nint filterValues(inout vec2 filteredSectorToColorId[numberOfFields],\\ninout FilteredChartInfo filteredInfo,\\nin float sectorAngles[numberOfFields]) {\\nfor (int index = 0; index < numberOfFields; ++index) {\\nfloat sectorValue = sectorAngles[index];\\nfilterValue(sectorValue, index, filteredInfo, filteredSectorToColorId);\\n}\\nreturn filteredInfo.colorId;\\n}\\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float a_referenceSize, in float bitSet) {\\nvec2 outSize = baseSize;\\n#ifdef VV_SIZE\\nfloat r = getSize(a_referenceSize, currentScale) / a_referenceSize;\\noutSize.xy *= r;\\noffset.xy *= r;\\nfloat scaleSymbolProportionally = getBit(bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\\noutlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\\n#endif\\nreturn outSize;\\n}\\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\\nfloat isMapAligned = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\\nvec3  offset       = vec3(in_offset, 0.0);\\nreturn getMatrix(isMapAligned) * offset;\\n}\\nfloat filterNaNValues(in float value) {\\nreturn value != NAN_MAGIC_NUMBER && value > 0.0 ? value : 0.0;\\n}\\nvoid main()\\n{\\nINIT;\\nvec2  a_size   = a_size;\\nvec2  a_offset = a_offset / 16.0;\\nfloat outlineSize = outlineWidth;\\nfloat a_bitSet = a_bitSet;\\nfloat a_referenceSize = a_referenceSize;\\nvec2 a_texCoords = a_texCoords / 4.0;\\nvec2 markerSize = getMarkerSize(a_offset, a_size, outlineSize, a_referenceSize, a_bitSet);\\nfloat filterFlags = getFilterFlags();\\nvec3  pos         = vec3(a_pos / 10.0, 1.0);\\nv_opacity      = getOpacity();\\nv_id           = norm(a_id);\\nv_pos          = displayViewScreenMat3 * pos + getOffset(a_offset, a_bitSet);\\nv_offset       = sign(a_texCoords - 0.5);\\nv_size         = max(markerSize.x, markerSize.y);\\nv_outlineWidth = outlineSize;\\nfloat attributeData[10];\\nvec4 attributeData3 = getDataDriven0(a_id);\\nattributeData[0] = filterNaNValues(attributeData3.x);\\nattributeData[1] = filterNaNValues(attributeData3.y);\\nattributeData[2] = filterNaNValues(attributeData3.z);\\nattributeData[3] = filterNaNValues(attributeData3.w);\\n#if (numberOfFields > 4)\\nvec4 attributeData4 = getDataDriven1(a_id);\\nattributeData[4] = filterNaNValues(attributeData4.x);\\nattributeData[5] = filterNaNValues(attributeData4.y);\\nattributeData[6] = filterNaNValues(attributeData4.z);\\nattributeData[7] = filterNaNValues(attributeData4.w);\\n#endif\\n#if (numberOfFields > 8)\\nvec4 attributeData5 = getDataDriven2(a_id);\\nattributeData[8] = filterNaNValues(attributeData5.x);\\nattributeData[9] = filterNaNValues(attributeData5.y);\\n#endif\\nfloat sum = 0.0;\\nfor (int i = 0; i < numberOfFields; ++i) {\\nsum += attributeData[i];\\n}\\nfloat sectorAngles[numberOfFields];\\nfor (int i = 0; i < numberOfFields; ++i) {\\nsectorAngles[i] = 360.0 * attributeData[i] / sum;\\n}\\nvec2 filteredSectorToColorId[numberOfFields];\\nFilteredChartInfo filteredInfo = FilteredChartInfo(0.0, 0);\\nint numOfEntries = filterValues(filteredSectorToColorId, filteredInfo, sectorAngles);\\nv_numOfEntries = float(numOfEntries);\\nv_maxSectorAngle = filteredInfo.endSectorAngle;\\nv_filteredSectorToColorId = filteredSectorToColorId;\\n#ifdef HITTEST\\nhighp vec3 out_pos = vec3(0.0);\\nv_color            = vec4(0.0);\\nhittestMarker(v_color, out_pos, viewMat3 * tileMat3 *  pos, v_size);\\ngl_PointSize = 1.0;\\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\\n#else\\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\\n#endif\\n}\"},shared:{line:{\"common.glsl\":\"#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_sampleAlphaOnly;\\n#endif\\nstruct LineData {\\nlowp vec4 color;\\nmediump vec2 normal;\\nmediump float lineHalfWidth;\\nlowp float opacity;\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nmediump vec4 tlbr;\\nmediump vec2 patternSize;\\n#endif\\n#ifdef SDF\\nmediump float lineWidthRatio;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nhighp float accumulatedDistance;\\n#endif\\n#endif\\nhighp vec3 id;\\n};\",\"line.frag\":\"uniform lowp float u_blur;\\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && !defined(HIGHLIGHT)\\n#if defined(PATTERN) || defined(SDF)\\nuniform sampler2D u_texture;\\nuniform highp float u_pixelRatio;\\n#endif\\n#endif\\n#if defined(SDF) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\\nlowp vec4 getLineColor(LineData line) {\\nmediump float adjustedPatternWidth = line.patternSize.x * 2.0 * line.lineWidthRatio;\\nmediump float relativeTexX = fract(line.accumulatedDistance / adjustedPatternWidth);\\nmediump float relativeTexY = 0.5 + 0.25 * line.normal.y;\\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\\nmediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\\nfloat dist = d * line.lineHalfWidth;\\nreturn line.opacity * clamp(0.5 - dist, 0.0, 1.0) * line.color;\\n}\\n#elif defined(PATTERN) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\\nlowp vec4 getLineColor(LineData line) {\\nmediump float lineHalfWidth = line.lineHalfWidth;\\nmediump float adjustedPatternHeight = line.patternSize.y * 2.0 * lineHalfWidth / line.patternSize.x;\\nmediump float relativeTexY = fract(line.accumulatedDistance / adjustedPatternHeight);\\nmediump float relativeTexX = 0.5 + 0.5 * line.normal.y;\\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\\nlowp vec4 color = texture2D(u_texture, texCoord);\\n#ifdef VV_COLOR\\nif (v_sampleAlphaOnly > 0.5) {\\ncolor.rgb = vec3(color.a);\\n}\\n#endif\\nreturn line.opacity * line.color * color;\\n}\\n#else\\nlowp vec4 getLineColor(LineData line) {\\nreturn line.opacity * line.color;\\n}\\n#endif\\nvec4 shadeLine(LineData line)\\n{\\nmediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(line.lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\\nmediump float fragDist = length(line.normal) * line.lineHalfWidth;\\nlowp float alpha = clamp(thinLineFactor * (line.lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\\nlowp vec4 out_color = getLineColor(line) * alpha;\\n#ifdef HIGHLIGHT\\nout_color.a = step(1.0 / 255.0, out_color.a);\\n#endif\\n#ifdef ID\\nif (out_color.a < 1.0 / 255.0) {\\ndiscard;\\n}\\nout_color = vec4(line.id, 0.0);\\n#endif\\nreturn out_color;\\n}\",\"line.vert\":\"float getBaseLineHalfWidth(in float lineHalfWidth, in float referenceHalfWidth) {\\n#ifdef VV_SIZE\\nfloat refLineWidth = 2.0 * referenceHalfWidth;\\nreturn 0.5 * (lineHalfWidth / max(referenceHalfWidth, EPSILON)) * getSize(refLineWidth);\\n#else\\nreturn lineHalfWidth;\\n#endif\\n}\\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\\nfloat halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\\n#ifdef HIGHLIGHT\\nhalfWidth = max(halfWidth, 2.0);\\n#endif\\nreturn halfWidth;\\n}\\nvec2 getDist(in vec2 offset, in float halfWidth) {\\nfloat thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\\nreturn thinLineFactor * halfWidth * offset;\\n}\\nLineData buildLine(\\nout vec3 out_pos,\\nin vec3 in_id,\\nin vec2 in_pos,\\nin vec4 in_color,\\nin vec2 in_offset,\\nin vec2 in_normal,\\nin float in_accumulatedDist,\\nin float in_lineHalfWidth,\\nin float in_bitSet,\\nin vec4 in_tlbr,\\nin vec2 in_segmentDirection,\\nin float in_referenceHalfWidth\\n)\\n{\\nfloat aa        = 0.5 * u_antialiasing;\\nfloat baseWidth = getBaseLineHalfWidth(in_lineHalfWidth, in_referenceHalfWidth);\\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\\nfloat z         = 2.0 * step(baseWidth, 0.0);\\nvec2  dist      = getDist(in_offset, halfWidth);\\nvec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\\nvec3  pos       = u_dvsMat3 * vec3(in_pos * POSITION_PRECISION, 1.0) + offset;\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nvec4  color     = in_color;\\nfloat opacity   = 1.0;\\n#else\\nvec4  color     = getColor(in_color, in_bitSet, BITSET_GENERIC_LOCK_COLOR);\\nfloat opacity   = getOpacity();\\n#ifdef SDF\\nconst float SDF_PATTERN_HALF_WIDTH = 15.5;\\nfloat scaleDash = getBit(in_bitSet, BITSET_LINE_SCALE_DASH);\\nfloat lineWidthRatio = (scaleDash * max(halfWidth - 0.55 * u_antialiasing, 0.25) + (1.0 - scaleDash)) / SDF_PATTERN_HALF_WIDTH;\\n#endif\\n#endif\\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\\nv_sampleAlphaOnly = getBit(in_bitSet, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\\n#endif\\nout_pos = vec3(pos.xy, z);\\nreturn LineData(\\ncolor,\\nin_normal,\\nhalfWidth,\\nopacity,\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nin_tlbr / u_mosaicSize.xyxy,\\nvec2(in_tlbr.z - in_tlbr.x, in_tlbr.w - in_tlbr.y),\\n#endif\\n#ifdef SDF\\nlineWidthRatio,\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nin_accumulatedDist * u_zoomFactor + dot(in_segmentDirection, dist),\\n#endif\\n#endif\\nnorm(in_id)\\n);\\n}\"}},\"symbologyTypeUtils.glsl\":\"#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\\n#define SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_SIMPLE || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\\n#define SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\\n#endif\",text:{\"common.glsl\":\"uniform highp vec2 u_mosaicSize;\\nvarying highp vec3 v_id;\\nvarying mediump vec3 v_pos;\\nvarying lowp float v_opacity;\\nvarying lowp vec4 v_color;\\nvarying highp vec2 v_tex;\\nvarying mediump float v_antialiasingWidth;\\nvarying mediump float v_edgeDistanceOffset;\\nvarying lowp float v_transparency;\",\"hittest.glsl\":\"#include <materials/hittest/common.glsl>\",\"text.frag\":\"precision mediump float;\\n#include <materials/text/common.glsl>\\nuniform lowp sampler2D u_texture;\\n#ifdef HITTEST\\nvec4 getColor() {\\nreturn v_color;\\n}\\n#else\\nvec4 getColor()\\n{\\nfloat SDF_CUTOFF = (2.0 / 8.0);\\nfloat SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\\nlowp float dist = texture2D(u_texture, v_tex).a;\\nmediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\\n#ifdef HIGHLIGHT\\nedge /= 2.0;\\n#endif\\nlowp float aa = v_antialiasingWidth;\\nlowp float alpha = smoothstep(edge - aa, edge + aa, dist);\\nreturn alpha * v_color * v_opacity;\\n}\\n#endif\\nvoid main()\\n{\\ngl_FragColor = getColor();\\n}\",\"text.vert\":\"precision highp float;\\n#include <materials/utils.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/text/common.glsl>\\n#include <materials/text/hittest.glsl>\\nattribute vec4 a_color;\\nattribute vec4 a_haloColor;\\nattribute vec4 a_texFontSize;\\nattribute vec4 a_aux;\\nattribute vec2 a_zoomRange;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nuniform float u_isHaloPass;\\nuniform float u_isBackgroundPass;\\nfloat getTextSize(inout vec2 offset, inout float baseSize, in float referenceSize) {\\n#ifdef VV_SIZE\\nfloat r = getSize(referenceSize) / referenceSize;\\nbaseSize *= r;\\noffset.xy *= r;\\nreturn baseSize;\\n#endif\\nreturn baseSize;\\n}\\nvoid main()\\n{\\nINIT;\\nfloat a_isBackground  = a_aux.y;\\nfloat a_referenceSize = a_aux.z * a_aux.z / 256.0;\\nfloat a_bitSet        = a_aux.w;\\nfloat a_fontSize      = a_texFontSize.z;\\nvec2  a_offset        = a_vertexOffset * OFFSET_PRECISION;\\nvec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\\nfloat fontSize      = getTextSize(a_offset, a_fontSize, a_referenceSize);\\nfloat fontScale     = fontSize / SDF_FONT_SIZE;\\nvec3  offset        = getRotation() * vec3(a_offset, 0.0);\\nmat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\\nfloat isText = 1.0 - a_isBackground;\\nfloat isBackground = u_isBackgroundPass * a_isBackground;\\nvec4  nonHaloColor  = (isBackground * a_color) + (isText * getColor(a_color, a_bitSet, 1));\\nv_color   = u_isHaloPass * a_haloColor + (1.0 - u_isHaloPass) * nonHaloColor;\\nv_opacity = getOpacity();\\nv_id      = norm(a_id);\\nv_tex     = a_texCoords / u_mosaicSize;\\nv_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\\nfloat isHidden = u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\\nv_pos.z += 2.0 * isHidden;\\nv_edgeDistanceOffset = u_isHaloPass * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\\n#ifdef HITTEST\\nhighp vec3 out_pos  = vec3(0.);\\nv_color = vec4(0.);\\nhittestMarker(v_color, out_pos, u_viewMat3 * u_tileMat3 *  vec3(a_pos * POSITION_PRECISION, 1.0)\\n+ u_tileMat3 * offset, fontSize / 2.);\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(v_color, out_pos, getFilterFlags(), a_zoomRange), 1.0);\\n#else\\ngl_Position =  vec4(clip(v_color, v_pos, getFilterFlags(), a_zoomRange), 1.0);\\n#endif\\n}\"},\"utils.glsl\":\"float rshift(in float u32, in int amount) {\\nreturn floor(u32 / pow(2.0, float(amount)));\\n}\\nfloat getBit(in float bitset, in int bitIndex) {\\nfloat offset = pow(2.0, float(bitIndex));\\nreturn mod(floor(bitset / offset), 2.0);\\n}\\nconst int highlightReasonsLength = 3;\\nfloat getFilterBit(in float bitset, in int bitIndex) {\\nreturn getBit(bitset, bitIndex + highlightReasonsLength);\\n}\\nfloat getHighlightBit(in float bitset, in int bitIndex) {\\nreturn getBit(bitset, bitIndex);\\n}\\nhighp vec3 unpackDisplayIdTexel(in highp vec3 bitset) {\\nfloat isAggregate = getBit(bitset.b, 7);\\nreturn (1.0 - isAggregate) * bitset + isAggregate * (vec3(bitset.rgb) - vec3(0.0, 0.0, float(0x80)));\\n}\\nvec4 unpack(in float u32) {\\nfloat r = mod(rshift(u32, 0), 255.0);\\nfloat g = mod(rshift(u32, 8), 255.0);\\nfloat b = mod(rshift(u32, 16), 255.0);\\nfloat a = mod(rshift(u32, 24), 255.0);\\nreturn vec4(r, g, b, a);\\n}\\nvec3 norm(in vec3 v) {\\nreturn v /= 255.0;\\n}\\nvec4 norm(in vec4 v) {\\nreturn v /= 255.0;\\n}\\nfloat max4(vec4 target) {\\nreturn max(max(max(target.x, target.y), target.z), target.w);\\n}\\nvec2 unpack_u8_nf32(vec2 bytes) {\\nreturn (bytes - 127.0) / 127.0;\\n}\\nhighp float rand(in vec2 co) {\\nhighp float a = 12.9898;\\nhighp float b = 78.233;\\nhighp float c = 43758.5453;\\nhighp float dt = dot(co, vec2(a,b));\\nhighp float sn = mod(dt, 3.14);\\nreturn fract(sin(sn) * c);\\n}\",\"vcommon.glsl\":\"#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/attributeData.glsl>\\n#include <materials/vv.glsl>\\n#include <materials/barycentric.glsl>\\nattribute vec2 a_pos;\\nattribute highp vec3 a_id;\\nuniform highp mat3 displayViewScreenMat3;\\nuniform highp mat3 displayViewMat3;\\nuniform highp mat3 displayMat3;\\nuniform highp mat3 tileMat3;\\nuniform highp mat3 viewMat3;\\nuniform highp float pixelRatio;\\nuniform mediump float zoomFactor;\\nuniform mediump float antialiasing;\\nuniform mediump float currentScale;\\nuniform mediump float currentZoom;\\nuniform mediump float metersPerSRUnit;\\nvec4 VV_ADATA = vec4(0.0);\\nvoid loadVisualVariableData(inout vec4 target) {\\ntarget.rgba = getVisualVariableData(a_id);\\n}\\n#ifdef VV\\n#define INIT loadVisualVariableData(VV_ADATA)\\n#else\\n#define INIT\\n#endif\\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\\n#ifdef VV_COLOR\\nfloat isColorLocked   = getBit(a_bitSet, index);\\nreturn getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\\n#else\\nreturn a_color;\\n#endif\\n}\\nfloat getOpacity() {\\n#ifdef VV_OPACITY\\nreturn getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\\n#else\\nreturn 1.0;\\n#endif\\n}\\nfloat getSize(in float in_size, in float currentScale) {\\n#ifdef VV_SIZE\\nreturn getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE], currentScale);\\n#else\\nreturn in_size;\\n#endif\\n}\\nmat3 getRotation() {\\n#ifdef VV_ROTATION\\nreturn getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\\n#else\\nreturn mat3(1.0);\\n#endif\\n}\\nfloat getFilterFlags() {\\n#ifdef IGNORES_SAMPLER_PRECISION\\nreturn ceil(getFilterData(a_id).x * 255.0);\\n#else\\nreturn getFilterData(a_id).x * 255.0;\\n#endif\\n}\\nvec4 getAnimationState() {\\nreturn getAnimation(a_id);\\n}\\nfloat getMinZoom() {\\nvec4 data0 = getFilterData(a_id) * 255.0;\\nreturn data0.g;\\n}\\nmat3 getMatrixNoDisplay(float isMapAligned) {\\nreturn isMapAligned * viewMat3 * tileMat3 + (1.0 - isMapAligned) * tileMat3;\\n}\\nmat3 getMatrix(float isMapAligned) {\\nreturn isMapAligned * displayViewMat3 + (1.0 - isMapAligned) * displayMat3;\\n}\\nfloat checkHighlightBit(float filterFlags, int index) {\\nreturn getHighlightBit(filterFlags, index);\\n}\\nfloat checkHighlight(float filterFlags) {\\nfloat result = checkHighlightBit(filterFlags, 0);\\nfor (int i = 1; i < highlightReasonsLength; i++) {\\nresult = result + checkHighlightBit(filterFlags, i);\\n}\\nreturn step(0.1, result);\\n}\\nvec3 clip(inout vec4 color, inout vec3 pos, in float filterFlags, in vec2 minMaxZoom) {\\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\\n#ifdef inside\\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\\n#elif defined(outside)\\npos.z += 2.0 * getFilterBit(filterFlags, 1);\\n#elif defined(highlight)\\n#if !defined(highlight_all)\\npos.z += 2.0 * (1.0 - checkHighlight(filterFlags));\\n#endif\\n#endif\\npos.z += 2.0 * (step(minMaxZoom.y, currentZoom) + (1.0 - step(minMaxZoom.x, currentZoom)));\\nreturn pos;\\n}\",\"vv.glsl\":\"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\\n#define VV_SIZE\\n#endif\\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\\n#define VV\\n#endif\\n#ifdef VV_COLOR\\nuniform highp float colorValues[8];\\nuniform vec4 colors[8];\\n#endif\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nuniform highp vec4 minMaxValueAndSize;\\n#endif\\n#ifdef VV_SIZE_SCALE_STOPS\\nuniform highp float values[8];\\nuniform float sizes[8];\\n#endif\\n#ifdef VV_SIZE_FIELD_STOPS\\nuniform highp float values[8];\\nuniform float sizes[8];\\n#endif\\n#ifdef VV_SIZE_UNIT_VALUE\\nuniform highp float unitMeterRatio;\\n#endif\\n#ifdef VV_OPACITY\\nuniform highp float opacityValues[8];\\nuniform float opacities[8];\\n#endif\\n#ifdef VV_ROTATION\\nuniform lowp float rotationType;\\n#endif\\nbool isNan(float val) {\\nreturn (val == NAN_MAGIC_NUMBER);\\n}\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\\nif (isNan(sizeValue)) {\\nreturn fallback;\\n}\\nfloat interpolationRatio = (sizeValue  - minMaxValueAndSize.x) / (minMaxValueAndSize.y - minMaxValueAndSize.x);\\ninterpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\\nreturn minMaxValueAndSize.z + interpolationRatio * (minMaxValueAndSize.w - minMaxValueAndSize.z);\\n}\\n#endif\\n#ifdef VV_SIZE_SCALE_STOPS\\nfloat getVVScaleStopsSize(float currentScale) {\\nfloat outSize;\\nif (currentScale <= values[0]) {\\noutSize = sizes[0];\\n} else {\\nif (currentScale >= values[7]) {\\noutSize = sizes[7];\\n} else {\\nint index;\\nindex = -1;\\nfor (int i = 0; i < 8; i++) {\\nif (values[i] > currentScale) {\\nindex = i;\\nbreak;\\n}\\n}\\nint prevIndex = index - 1;\\nfloat a = currentScale - values[prevIndex];\\nfloat b = values[index] - values[prevIndex];\\noutSize = mix(sizes[prevIndex], sizes[index], a / b);\\n}\\n}\\nreturn outSize;\\n}\\n#endif\\n#ifdef VV_SIZE_FIELD_STOPS\\nconst int VV_SIZE_N = 8;\\nfloat getVVStopsSize(float sizeValue, float fallback) {\\nif (isNan(sizeValue)) {\\nreturn fallback;\\n}\\nif (sizeValue <= values[0]) {\\nreturn sizes[0];\\n}\\nfor (int i = 1; i < VV_SIZE_N; ++i) {\\nif (values[i] >= sizeValue) {\\nfloat f = (sizeValue - values[i-1]) / (values[i] - values[i-1]);\\nreturn mix(sizes[i-1], sizes[i], f);\\n}\\n}\\nreturn sizes[VV_SIZE_N - 1];\\n}\\n#endif\\n#ifdef VV_SIZE_UNIT_VALUE\\nfloat getVVUnitValue(float sizeValue, float fallback) {\\nif (isNan(sizeValue)) {\\nreturn fallback;\\n}\\nreturn sizeValue * (metersPerSRUnit / unitMeterRatio);\\n}\\n#endif\\n#ifdef VV_OPACITY\\nconst int VV_OPACITY_N = 8;\\nfloat getVVOpacity(float opacityValue) {\\nif (isNan(opacityValue)) {\\nreturn 1.0;\\n}\\nif (opacityValue <= opacityValues[0]) {\\nreturn opacities[0];\\n}\\nfor (int i = 1; i < VV_OPACITY_N; ++i) {\\nif (opacityValues[i] >= opacityValue) {\\nfloat f = (opacityValue - opacityValues[i-1]) / (opacityValues[i] - opacityValues[i-1]);\\nreturn mix(opacities[i-1], opacities[i], f);\\n}\\n}\\nreturn opacities[VV_OPACITY_N - 1];\\n}\\n#endif\\n#ifdef VV_ROTATION\\nmat4 getVVRotation(float rotationValue) {\\nif (isNan(rotationValue)) {\\nreturn mat4(1, 0, 0, 0,\\n0, 1, 0, 0,\\n0, 0, 1, 0,\\n0, 0, 0, 1);\\n}\\nfloat rotation = rotationValue;\\nif (rotationType == 1.0) {\\nrotation = 90.0 - rotation;\\n}\\nfloat angle = C_DEG_TO_RAD * rotation;\\nfloat sinA = sin(angle);\\nfloat cosA = cos(angle);\\nreturn mat4(cosA, sinA, 0, 0,\\n-sinA,  cosA, 0, 0,\\n0,     0, 1, 0,\\n0,     0, 0, 1);\\n}\\nmat3 getVVRotationMat3(float rotationValue) {\\nif (isNan(rotationValue)) {\\nreturn mat3(1, 0, 0,\\n0, 1, 0,\\n0, 0, 1);\\n}\\nfloat rotation = rotationValue;\\nif (rotationType == 1.0) {\\nrotation = 90.0 - rotation;\\n}\\nfloat angle = C_DEG_TO_RAD * -rotation;\\nfloat sinA = sin(angle);\\nfloat cosA = cos(angle);\\nreturn mat3(cosA, -sinA, 0,\\nsinA, cosA, 0,\\n0,    0,    1);\\n}\\n#endif\\n#ifdef VV_COLOR\\nconst int VV_COLOR_N = 8;\\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\\nif (isNan(colorValue) || isColorLocked == 1.0) {\\nreturn fallback;\\n}\\nif (colorValue <= colorValues[0]) {\\nreturn colors[0];\\n}\\nfor (int i = 1; i < VV_COLOR_N; ++i) {\\nif (colorValues[i] >= colorValue) {\\nfloat f = (colorValue - colorValues[i-1]) / (colorValues[i] - colorValues[i-1]);\\nreturn mix(colors[i-1], colors[i], f);\\n}\\n}\\nreturn colors[VV_COLOR_N - 1];\\n}\\n#endif\\nfloat getVVSize(in float size, in float vvSize, in float currentScale)  {\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nreturn getVVMinMaxSize(vvSize, size);\\n#elif defined(VV_SIZE_SCALE_STOPS)\\nfloat outSize = getVVScaleStopsSize(currentScale);\\nreturn isNan(outSize) ? size : outSize;\\n#elif defined(VV_SIZE_FIELD_STOPS)\\nfloat outSize = getVVStopsSize(vvSize, size);\\nreturn isNan(outSize) ? size : outSize;\\n#elif defined(VV_SIZE_UNIT_VALUE)\\nreturn getVVUnitValue(vvSize, size);\\n#else\\nreturn size;\\n#endif\\n}\"},overlay:{overlay:{\"overlay.frag\":\"precision lowp float;\\nuniform lowp sampler2D u_texture;\\nuniform lowp float u_opacity;\\nvarying mediump vec2 v_uv;\\nvoid main() {\\nvec4 color = texture2D(u_texture, v_uv);\\ngl_FragColor = color *  u_opacity;\\n}\",\"overlay.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nattribute vec2 a_uv;\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump vec2 u_perspective;\\nvarying mediump vec2 v_uv;\\nvoid main(void) {\\nv_uv = a_uv;\\nfloat w = 1.0 + dot(a_uv, u_perspective);\\nvec3 pos = u_dvsMat3 * vec3(a_pos, 1.0);\\ngl_Position = vec4(w * pos.xy, 0.0, w);\\n}\"}},\"post-processing\":{blit:{\"blit.frag\":\"precision mediump float;\\nuniform sampler2D u_texture;\\nvarying vec2 v_uv;\\nvoid main() {\\ngl_FragColor = texture2D(u_texture, v_uv);\\n}\"},bloom:{composite:{\"composite.frag\":\"precision mediump float;\\nvarying vec2 v_uv;\\nuniform sampler2D u_blurTexture1;\\nuniform sampler2D u_blurTexture2;\\nuniform sampler2D u_blurTexture3;\\nuniform sampler2D u_blurTexture4;\\nuniform sampler2D u_blurTexture5;\\nuniform float u_bloomStrength;\\nuniform float u_bloomRadius;\\nuniform float u_bloomFactors[NUMMIPS];\\nuniform vec3 u_bloomTintColors[NUMMIPS];\\nfloat lerpBloomFactor(const in float factor) {\\nfloat mirrorFactor = 1.2 - factor;\\nreturn mix(factor, mirrorFactor, u_bloomRadius);\\n}\\nvoid main() {\\nvec4 color = u_bloomStrength * (\\nlerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\\nlerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\\nlerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\\nlerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\\nlerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\\n);\\ngl_FragColor = clamp(color, 0.0, 1.0);\\n}\"},gaussianBlur:{\"gaussianBlur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nuniform vec2 u_direction;\\nvarying vec2 v_uv;\\n#define KERNEL_RADIUS RADIUS\\n#define SIGMA RADIUS\\nfloat gaussianPdf(in float x, in float sigma) {\\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\\n}\\nvoid main() {\\nvec2 invSize = 1.0 / u_texSize;\\nfloat fSigma = float(SIGMA);\\nfloat weightSum = gaussianPdf(0.0, fSigma);\\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\\nfloat x = float(i);\\nfloat w = gaussianPdf(x, fSigma);\\nvec2 uvOffset = u_direction * invSize * x;\\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\\npixelColorSum += (sample1 + sample2) * w;\\nweightSum += 2.0 * w;\\n}\\ngl_FragColor = pixelColorSum /weightSum;\\n}\"},luminosityHighPass:{\"luminosityHighPass.frag\":\"precision mediump float;\\nuniform sampler2D u_texture;\\nuniform vec3 u_defaultColor;\\nuniform float u_defaultOpacity;\\nuniform float u_luminosityThreshold;\\nuniform float u_smoothWidth;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 texel = texture2D(u_texture, v_uv);\\nvec3 luma = vec3(0.299, 0.587, 0.114);\\nfloat v = dot(texel.xyz, luma);\\nvec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\\nfloat alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\\ngl_FragColor = mix(outputColor, texel, alpha);\\n}\"}},blur:{gaussianBlur:{\"gaussianBlur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nuniform vec2 u_direction;\\nuniform float u_sigma;\\nvarying vec2 v_uv;\\n#define KERNEL_RADIUS RADIUS\\nfloat gaussianPdf(in float x, in float sigma) {\\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\\n}\\nvoid main() {\\nvec2 invSize = 1.0 / u_texSize;\\nfloat fSigma = u_sigma;\\nfloat weightSum = gaussianPdf(0.0, fSigma);\\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\\nfloat x = float(i);\\nfloat w = gaussianPdf(x, fSigma);\\nvec2 uvOffset = u_direction * invSize * x;\\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\\npixelColorSum += (sample1 + sample2) * w;\\nweightSum += 2.0 * w;\\n}\\ngl_FragColor = pixelColorSum /weightSum;\\n}\"},\"radial-blur\":{\"radial-blur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nconst float sampleDist = 1.0;\\nconst float sampleStrength = 2.2;\\nvoid main(void) {\\nfloat samples[10];\\nsamples[0] = -0.08;\\nsamples[1] = -0.05;\\nsamples[2] = -0.03;\\nsamples[3] = -0.02;\\nsamples[4] = -0.01;\\nsamples[5] =  0.01;\\nsamples[6] =  0.02;\\nsamples[7] =  0.03;\\nsamples[8] =  0.05;\\nsamples[9] =  0.08;\\nvec2 dir = 0.5 - v_uv;\\nfloat dist = sqrt(dir.x * dir.x + dir.y * dir.y);\\ndir = dir / dist;\\nvec4 color = texture2D(u_colorTexture,v_uv);\\nvec4 sum = color;\\nfor (int i = 0; i < 10; i++) {\\nsum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\\n}\\nsum *= 1.0 / 11.0;\\nfloat t = dist * sampleStrength;\\nt = clamp(t, 0.0, 1.0);\\ngl_FragColor = mix(color, sum, t);\\n}\"}},dra:{\"dra.frag\":\"precision mediump float;\\nuniform sampler2D u_minColor;\\nuniform sampler2D u_maxColor;\\nuniform sampler2D u_texture;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 minColor = texture2D(u_minColor, vec2(0.5));\\nvec4 maxColor = texture2D(u_maxColor, vec2(0.5));\\nvec4 color = texture2D(u_texture, v_uv);\\nvec3 minColorUnpremultiply = minColor.rgb / minColor.a;\\nvec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\\nvec3 colorUnpremultiply = color.rgb / color.a;\\nvec3 range = maxColorUnpremultiply - minColorUnpremultiply;\\ngl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\\n}\",\"min-max\":{\"min-max.frag\":\"#extension GL_EXT_draw_buffers : require\\nprecision mediump float;\\n#define CELL_SIZE 2\\nuniform sampler2D u_minTexture;\\nuniform sampler2D u_maxTexture;\\nuniform vec2 u_srcResolution;\\nuniform vec2 u_dstResolution;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\\nvec2 onePixel = vec2(1.0) / u_srcResolution;\\nvec2 uv = (srcPixel + 0.5) / u_srcResolution;\\nvec4 minColor = vec4(1.0);\\nvec4 maxColor = vec4(0.0);\\nfor (int y = 0; y < CELL_SIZE; ++y) {\\nfor (int x = 0; x < CELL_SIZE; ++x) {\\nvec2 offset = uv + vec2(x, y) * onePixel;\\nminColor = min(minColor, texture2D(u_minTexture, offset));\\nmaxColor = max(maxColor, texture2D(u_maxTexture, offset));\\n}\\n}\\ngl_FragData[0] = minColor;\\ngl_FragData[1] = maxColor;\\n}\"}},\"drop-shadow\":{composite:{\"composite.frag\":\"precision mediump float;\\nuniform sampler2D u_layerFBOTexture;\\nuniform sampler2D u_blurTexture;\\nuniform vec4 u_shadowColor;\\nuniform vec2 u_shadowOffset;\\nuniform highp mat3 u_displayViewMat3;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec3 offset = u_displayViewMat3 * vec3(u_shadowOffset, 0.0);\\nvec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\\nvec4 blurColor = texture2D(u_blurTexture, v_uv - offset.xy / 2.0);\\ngl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\\n}\"}},\"edge-detect\":{\"frei-chen\":{\"frei-chen.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nvarying vec2 v_uv;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[9];\\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\\nvoid main() {\\nG[0] = g0,\\nG[1] = g1,\\nG[2] = g2,\\nG[3] = g3,\\nG[4] = g4,\\nG[5] = g5,\\nG[6] = g6,\\nG[7] = g7,\\nG[8] = g8;\\nmat3 I;\\nfloat cnv[9];\\nvec3 sample;\\nfor (float i = 0.0; i < 3.0; i++) {\\nfor (float j = 0.0; j < 3.0; j++) {\\nsample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\\nI[int(i)][int(j)] = length(sample);\\n}\\n}\\nfor (int i = 0; i < 9; i++) {\\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\ncnv[i] = dp3 * dp3;\\n}\\nfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\\nfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\\ngl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\\n}\"},sobel:{\"sobel.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nuniform vec2 u_texSize;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[2];\\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\\nvoid main() {\\nmat3 I;\\nfloat cnv[2];\\nvec3 sample;\\nG[0] = g0;\\nG[1] = g1;\\nfor (float i = 0.0; i < 3.0; i++) {\\nfor (float j = 0.0; j < 3.0; j++) {\\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\\nI[int(i)][int(j)] = length(sample);\\n}\\n}\\nfor (int i = 0; i < 2; i++) {\\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\ncnv[i] = dp3 * dp3;\\n}\\ngl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\\n}\"}},\"edge-enhance\":{\"edge-enhance.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nuniform vec2 u_texSize;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[2];\\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\\nvoid main() {\\nmat3 I;\\nfloat cnv[2];\\nvec3 sample;\\nG[0] = g0;\\nG[1] = g1;\\nfor (float i = 0.0; i < 3.0; i++) {\\nfor (float j = 0.0; j < 3.0; j++) {\\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\\nI[int(i)][int(j)] = length(sample);\\n}\\n}\\nfor (int i = 0; i < 2; i++) {\\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\ncnv[i] = dp3 * dp3;\\n}\\nvec4 color = texture2D(u_colorTexture, v_uv);\\ngl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\\n}\"},filterEffect:{\"filterEffect.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform mat4 u_coefficients;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 color = texture2D(u_colorTexture, v_uv);\\nvec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\\nfloat a = color.a;\\ngl_FragColor = vec4(a * rgbw.rgb, a);\\n}\"},pp:{\"pp.vert\":\"precision mediump float;\\nattribute vec2 a_position;\\nvarying vec2 v_uv;\\nvoid main() {\\ngl_Position = vec4(a_position, 0.0, 1.0);\\nv_uv = (a_position + 1.0) / 2.0;\\n}\"}},raster:{bitmap:{\"bitmap.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\nuniform sampler2D u_texture;\\nuniform highp vec2 u_coordScale;\\nuniform lowp float u_opacity;\\n#include <filtering/bicubic.glsl>\\nvoid main() {\\n#ifdef BICUBIC\\nvec4 color = sampleBicubicBSpline(u_texture, v_texcoord, u_coordScale);\\n#else\\nvec4 color = texture2D(u_texture, v_texcoord);\\n#endif\\ngl_FragColor = vec4(color.rgb * u_opacity, color.a * u_opacity);\\n}\",\"bitmap.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_pos;\\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\"},common:{\"common.glsl\":\"uniform sampler2D u_image;\\nuniform int u_bandCount;\\nuniform bool u_flipY;\\nuniform float u_opacity;\\nuniform int u_resampling;\\nuniform vec2 u_srcImageSize;\\n#ifdef APPLY_PROJECTION\\n#include <raster/common/projection.glsl>\\n#endif\\n#ifdef BICUBIC\\n#include <filtering/bicubic.glsl>\\n#endif\\n#ifdef BILINEAR\\n#include <filtering/bilinear.glsl>\\n#endif\\nvec2 getPixelLocation(vec2 coords) {\\nvec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\\n#ifdef APPLY_PROJECTION\\ntargetLocation = projectPixelLocation(targetLocation);\\n#endif\\nreturn targetLocation;\\n}\\nbool isOutside(vec2 coords){\\nif (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\\nreturn true;\\n} else {\\nreturn false;\\n}\\n}\\nvec4 getPixel(vec2 pixelLocation) {\\n#ifdef BICUBIC\\nvec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\\n#elif defined(BILINEAR)\\nvec4 color = sampleBilinear(u_image, pixelLocation, u_srcImageSize);\\n#else\\nvec4 color = texture2D(u_image, pixelLocation);\\n#endif\\nreturn color;\\n}\",\"common.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform highp float u_scale;\\nuniform highp vec2 u_offset;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_pos * u_scale + u_offset;\\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\",\"contrastBrightness.glsl\":\"uniform float u_contrastOffset;\\nuniform float u_brightnessOffset;\\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\\nvec4 pixelValue = isFloat ? currentPixel * 255.0 : currentPixel;\\nfloat maxI = 255.0;\\nfloat mid = 128.0;\\nfloat c = u_contrastOffset;\\nfloat b = u_brightnessOffset;\\nvec4 v;\\nif (c > 0.0 && c < 100.0) {\\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\\n} else if (c <= 0.0 && c > -100.0) {\\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\\n} else if (c == 100.0) {\\nv = (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\\nv = (sign(v) + 1.0) / 2.0;\\n} else if (c == -100.0) {\\nv = vec4(mid, mid, mid, currentPixel.a);\\n}\\nvec3 rgb = clamp(v.rgb / 255.0, 0.0, 1.0);\\nreturn vec4(rgb, currentPixel.a);\\n}\",\"getSurfaceValues.glsl\":\"#include <raster/common/mirror.glsl>\\nvoid getSurfaceValues(sampler2D imageTexture, vec2 texCoord, vec2 srcImageSize, inout float values[10]) {\\nvec2 onePixel = 1.0 / srcImageSize;\\nvec4 va = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, -1.0)));\\nvec4 vb = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(0.0, -1.0)));\\nvec4 vc = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, -1.0)));\\nvec4 vd = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, 0.0)));\\nvec4 ve = texture2D(imageTexture, mirror(texCoord));\\nvec4 vf = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, 0.0)));\\nvec4 vg = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, 1.0)));\\nvec4 vh = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(0.0, 1.0)));\\nvec4 vi = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, 1.0)));\\nfloat alpha = va.a * vb.a * vc.a * vd.a * ve.a * vf.a * vg.a * vh.a * vi.a;\\nvalues[0] = va.r;\\nvalues[1] = vb.r;\\nvalues[2] = vc.r;\\nvalues[3] = vd.r;\\nvalues[4] = ve.r;\\nvalues[5] = vf.r;\\nvalues[6] = vg.r;\\nvalues[7] = vh.r;\\nvalues[8] = vi.r;\\nvalues[9] = alpha;\\n}\",\"inverse.glsl\":\"float invertValue(float value) {\\nfloat s = sign(value);\\nreturn (s * s) / (value + abs(s) - 1.0);\\n}\",\"mirror.glsl\":\"vec2 mirror(vec2 pos) {\\nvec2 pos1 = abs(pos);\\nreturn step(pos1, vec2(1.0, 1.0)) * pos1 + step(1.0, pos1) * (2.0 - pos1);\\n}\",\"projection.glsl\":\"uniform sampler2D u_transformGrid;\\nuniform vec2 u_transformSpacing;\\nuniform vec2 u_transformGridSize;\\nuniform vec2 u_targetImageSize;\\nvec2 projectPixelLocation(vec2 coords) {\\n#ifdef LOOKUP_PROJECTION\\nvec4 pv = texture2D(u_transformGrid, coords);\\nreturn vec2(pv.r, pv.g);\\n#endif\\nvec2 index_image = floor(coords * u_targetImageSize);\\nvec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\\nvec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\\nvec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\\nvec2 srcLocation;\\nvec2 transform_location = index_transform + oneTransformPixel * 0.5;\\nif (pos.s <= pos.t) {\\nvec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\\nvec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\\nsrcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\\nsrcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\\n} else {\\nvec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\\nvec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\\nsrcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\\nsrcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\\n}\\nreturn srcLocation;\\n}\"},flow:{\"getFadeOpacity.glsl\":\"uniform float u_decayRate;\\nuniform float u_fadeToZero;\\nfloat getFadeOpacity(float x) {\\nfloat cutOff = mix(0.0, exp(-u_decayRate), u_fadeToZero);\\nreturn (exp(-u_decayRate * x) - cutOff) / (1.0 - cutOff);\\n}\",\"getFragmentColor.glsl\":\"vec4 getFragmentColor(vec4 color, float dist, float size, float featheringSize) {\\nfloat featheringStart = clamp(0.5 - featheringSize / size, 0.0, 0.5);\\nif (dist > featheringStart) {\\ncolor *= 1.0 - (dist - featheringStart) / (0.5 - featheringStart);\\n}\\nreturn color;\\n}\",imagery:{\"imagery.frag\":\"precision highp float;\\nvarying vec2 v_texcoord;\\nuniform sampler2D u_texture;\\nuniform float u_Min;\\nuniform float u_Max;\\nuniform float u_featheringSize;\\n#include <raster/flow/vv.glsl>\\nfloat getIntensity(float v) {\\nreturn u_Min + v * (u_Max - u_Min);\\n}\\nvoid main(void) {\\nvec4 sampled = texture2D(u_texture, v_texcoord);\\nfloat intensity = getIntensity(sampled.r);\\ngl_FragColor = getColor(intensity);\\ngl_FragColor.a *= getOpacity(sampled.r);\\ngl_FragColor.a *= sampled.a;\\ngl_FragColor.rgb *= gl_FragColor.a;\\n}\",\"imagery.vert\":\"attribute vec2 a_position;\\nattribute vec2 a_texcoord;\\nuniform mat3 u_dvsMat3;\\nvarying vec2 v_texcoord;\\nvoid main(void) {\\nvec2 xy = (u_dvsMat3 * vec3(a_position, 1.0)).xy;\\ngl_Position = vec4(xy, 0.0, 1.0);\\nv_texcoord = a_texcoord;\\n}\"},particles:{\"particles.frag\":\"precision highp float;\\nvarying vec4 v_color;\\nvarying vec2 v_texcoord;\\nvarying float v_size;\\nuniform float u_featheringSize;\\n#include <raster/flow/getFragmentColor.glsl>\\nvoid main(void) {\\ngl_FragColor = getFragmentColor(v_color, length(v_texcoord - 0.5), v_size, u_featheringSize);\\n}\",\"particles.vert\":\"attribute vec4 a_xyts0;\\nattribute vec4 a_xyts1;\\nattribute vec4 a_typeIdDurationSeed;\\nattribute vec4 a_extrudeInfo;\\nuniform mat3 u_dvsMat3;\\nuniform mat3 u_displayViewMat3;\\nuniform float u_time;\\nuniform float u_trailLength;\\nuniform float u_flowSpeed;\\nvarying vec4 v_color;\\nvarying vec2 v_texcoord;\\nvarying float v_size;\\nuniform float u_featheringSize;\\nuniform float u_introFade;\\n#include <raster/flow/vv.glsl>\\n#include <raster/flow/getFadeOpacity.glsl>\\nvoid main(void) {\\nvec2 position0 = a_xyts0.xy;\\nfloat t0 = a_xyts0.z;\\nfloat speed0 = a_xyts0.w;\\nvec2 position1 = a_xyts1.xy;\\nfloat t1 = a_xyts1.z;\\nfloat speed1 = a_xyts1.w;\\nfloat type = a_typeIdDurationSeed.x;\\nfloat id = a_typeIdDurationSeed.y;\\nfloat duration = a_typeIdDurationSeed.z;\\nfloat seed = a_typeIdDurationSeed.w;\\nvec2 e0 = a_extrudeInfo.xy;\\nvec2 e1 = a_extrudeInfo.zw;\\nfloat animationPeriod = duration + u_trailLength;\\nfloat scaledTime = u_time * u_flowSpeed;\\nfloat randomizedTime = scaledTime + seed * animationPeriod;\\nfloat t = mod(randomizedTime, animationPeriod);\\nfloat fUnclamped = (t - t0) / (t1 - t0);\\nfloat f = clamp(fUnclamped, 0.0, 1.0);\\nfloat clampedTime = mix(t0, t1, f);\\nfloat speed = mix(speed0, speed1, f);\\nvec2 extrude;\\nvec2 position;\\nfloat fadeOpacity;\\nfloat introOpacity;\\nif (type == 2.0) {\\nif (fUnclamped < 0.0 || (fUnclamped > 1.0 && t1 != duration)) {\\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\\nreturn;\\n}\\nvec2 ortho = mix(e0, e1, f);\\nvec2 parallel;\\nparallel = normalize(position1 - position0) * 0.5;\\nif (id == 1.0) {\\nextrude = ortho;\\nv_texcoord = vec2(0.5, 0.0);\\n} else if (id == 2.0) {\\nextrude = -ortho;\\nv_texcoord = vec2(0.5, 1.0);\\n} else if (id == 3.0) {\\nextrude = ortho + parallel;\\nv_texcoord = vec2(1.0, 0.0);\\n} else if (id == 4.0) {\\nextrude = -ortho + parallel;\\nv_texcoord = vec2(1.0, 1.0);\\n}\\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\\nintroOpacity = 1.0 - exp(-clampedTime);\\nv_size = getSize(speed);\\nv_color = getColor(speed);\\nv_color.a *= getOpacity(speed);\\nposition = mix(position0, position1, f);\\n} else {\\nif (fUnclamped < 0.0) {\\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\\nreturn;\\n}\\nif (id == 1.0) {\\nextrude = e0;\\nv_texcoord = vec2(0.5, 0.0);\\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\\nintroOpacity = 1.0 - exp(-t0);\\nv_size = getSize(speed0);\\nv_color = getColor(speed0);\\nv_color.a *= getOpacity(speed0);\\nposition = position0;\\n} else if (id == 2.0) {\\nextrude = -e0;\\nv_texcoord = vec2(0.5, 1.0);\\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\\nintroOpacity = 1.0 - exp(-t0);\\nv_size = getSize(speed0);\\nv_color = getColor(speed0);\\nv_color.a *= getOpacity(speed0);\\nposition = position0;\\n} else if (id == 3.0) {\\nextrude = mix(e0, e1, f);\\nv_texcoord = vec2(0.5, 0.0);\\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\\nintroOpacity = 1.0 - exp(-clampedTime);\\nv_size = getSize(speed);\\nv_color = getColor(speed);\\nv_color.a *= getOpacity(speed);\\nposition = mix(position0, position1, f);\\n} else if (id == 4.0) {\\nextrude = -mix(e0, e1, f);\\nv_texcoord = vec2(0.5, 1.0);\\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\\nintroOpacity = 1.0 - exp(-clampedTime);\\nv_size = getSize(speed);\\nv_color = getColor(speed);\\nv_color.a *= getOpacity(speed);\\nposition = mix(position0, position1, f);\\n}\\n}\\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(extrude * v_size, 0.0)).xy;\\ngl_Position = vec4(xy, 0.0, 1.0);\\nv_color.a *= fadeOpacity;\\nv_color.a *= mix(1.0, introOpacity, u_introFade);\\nv_color.rgb *= v_color.a;\\n}\"},streamlines:{\"streamlines.frag\":\"precision highp float;\\nvarying float v_side;\\nvarying float v_time;\\nvarying float v_totalTime;\\nvarying float v_timeSeed;\\nvarying vec4 v_color;\\nvarying float v_size;\\nuniform float u_time;\\nuniform float u_trailLength;\\nuniform float u_flowSpeed;\\nuniform float u_featheringSize;\\nuniform float u_introFade;\\n#include <raster/flow/getFragmentColor.glsl>\\n#include <raster/flow/getFadeOpacity.glsl>\\nvoid main(void) {\\nfloat t = mod(v_timeSeed * (v_totalTime + u_trailLength) + u_time * u_flowSpeed, v_totalTime + u_trailLength) - v_time;\\nvec4 color = v_color * step(0.0, t) * getFadeOpacity(t / u_trailLength);\\ncolor *= mix(1.0, 1.0 - exp(-v_time), u_introFade);\\ngl_FragColor = getFragmentColor(color, length((v_side + 1.0) / 2.0 - 0.5), v_size, u_featheringSize);\\n}\",\"streamlines.vert\":\"attribute vec3 a_positionAndSide;\\nattribute vec3 a_timeInfo;\\nattribute vec2 a_extrude;\\nattribute float a_speed;\\nuniform mat3 u_dvsMat3;\\nuniform mat3 u_displayViewMat3;\\nvarying float v_time;\\nvarying float v_totalTime;\\nvarying float v_timeSeed;\\nvarying vec4 v_color;\\nvarying float v_side;\\nvarying float v_size;\\nuniform float u_featheringSize;\\n#include <raster/flow/vv.glsl>\\nvoid main(void) {\\nvec4 lineColor = getColor(a_speed);\\nfloat lineOpacity = getOpacity(a_speed);\\nfloat lineSize = getSize(a_speed);\\nvec2 position = a_positionAndSide.xy;\\nv_side = a_positionAndSide.z;\\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(a_extrude * lineSize, 0.0)).xy;\\ngl_Position = vec4(xy, 0.0, 1.0);\\nv_time = a_timeInfo.x;\\nv_totalTime = a_timeInfo.y;\\nv_timeSeed = a_timeInfo.z;\\nv_color = lineColor;\\nv_color.a *= lineOpacity;\\nv_color.rgb *= v_color.a;\\nv_size = lineSize;\\n}\"},\"vv.glsl\":\"#define MAX_STOPS 8\\n#ifdef VV_COLOR\\nuniform float u_color_stops[MAX_STOPS];\\nuniform vec4 u_color_values[MAX_STOPS];\\nuniform int u_color_count;\\n#else\\nuniform vec4 u_color;\\n#endif\\n#ifdef VV_OPACITY\\nuniform float u_opacity_stops[MAX_STOPS];\\nuniform float u_opacity_values[MAX_STOPS];\\nuniform int u_opacity_count;\\n#else\\nuniform float u_opacity;\\n#endif\\n#ifdef VV_SIZE\\nuniform float u_size_stops[MAX_STOPS];\\nuniform float u_size_values[MAX_STOPS];\\nuniform int u_size_count;\\n#else\\nuniform float u_size;\\n#endif\\nuniform float u_featheringOffset;\\nvec4 getColor(float x) {\\n#ifdef VV_COLOR\\nvec4 color = u_color_values[0];\\n{\\nfor (int i = 1; i < MAX_STOPS; i++) {\\nif (i >= u_color_count) {\\nbreak;\\n}\\nfloat x1 = u_color_stops[i - 1];\\nif (x < x1) {\\nbreak;\\n}\\nfloat x2 = u_color_stops[i];\\nvec4 y2 = u_color_values[i];\\nif (x < x2) {\\nvec4 y1 = u_color_values[i - 1];\\ncolor = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\\n} else {\\ncolor = y2;\\n}\\n}\\n}\\n#else\\nvec4 color = u_color;\\n#endif\\nreturn color;\\n}\\nfloat getOpacity(float x) {\\n#ifdef VV_OPACITY\\nfloat opacity = u_opacity_values[0];\\n{\\nfor (int i = 1; i < MAX_STOPS; i++) {\\nif (i >= u_opacity_count) {\\nbreak;\\n}\\nfloat x1 = u_opacity_stops[i - 1];\\nif (x < x1) {\\nbreak;\\n}\\nfloat x2 = u_opacity_stops[i];\\nfloat y2 = u_opacity_values[i];\\nif (x < x2) {\\nfloat y1 = u_opacity_values[i - 1];\\nopacity = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\\n} else {\\nopacity = y2;\\n}\\n}\\n}\\n#else\\nfloat opacity = u_opacity;\\n#endif\\nreturn opacity;\\n}\\nfloat getSize(float x) {\\n#ifdef VV_SIZE\\nfloat size = u_size_values[0];\\n{\\nfor (int i = 1; i < MAX_STOPS; i++) {\\nif (i >= u_size_count) {\\nbreak;\\n}\\nfloat x1 = u_size_stops[i - 1];\\nif (x < x1) {\\nbreak;\\n}\\nfloat x2 = u_size_stops[i];\\nfloat y2 = u_size_values[i];\\nif (x < x2) {\\nfloat y1 = u_size_values[i - 1];\\nsize = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\\n} else {\\nsize = y2;\\n}\\n}\\n}\\n#else\\nfloat size = u_size;\\n#endif\\nreturn size + 2.0 * u_featheringSize * u_featheringOffset;\\n}\"},hillshade:{\"hillshade.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nuniform int u_hillshadeType;\\nuniform float u_sinZcosAs[6];\\nuniform float u_sinZsinAs[6];\\nuniform float u_cosZs[6];\\nuniform float u_weights[6];\\nuniform vec2 u_factor;\\nuniform float u_minValue;\\nuniform float u_maxValue;\\n#include <raster/lut/colorize.glsl>\\n#include <raster/common/getSurfaceValues.glsl>\\nvec3 rgb2hsv(vec3 c) {\\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\\nfloat d = q.x - min(q.w, q.y);\\nfloat e = 1.0e-10;\\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\\n}\\nvec3 hsv2rgb(vec3 c) {\\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\\nval = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\\nvec4 rgb = colorize(vec4(val, val, val, 1.0), 255.0);\\nvec3 hsv = rgb2hsv(rgb.xyz);\\nhsv.z = hillshade;\\nreturn vec4(hsv2rgb(hsv), 1.0) * rgb.a;\\n}\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\nif (currentPixel.a == 0.0) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nfloat pv[10];\\ngetSurfaceValues(u_image, pixelLocation, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) * u_factor.s;\\nfloat dzy = (pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) * u_factor.t;\\nfloat dzd = sqrt(1.0 + dzx * dzx + dzy * dzy);\\nfloat hillshade = 0.0;\\nif (u_hillshadeType == 0){\\nfloat cosDelta = u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\\nfloat z = (u_cosZs[0] + cosDelta) / dzd;\\nif (z < 0.0)  z = 0.0;\\nhillshade = z;\\n} else {\\nfor (int k = 0; k < 6; k++) {\\nfloat cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\\nfloat z = (u_cosZs[k] + cosDelta) / dzd;\\nif (z < 0.0) z = 0.0;\\nhillshade = hillshade + z * u_weights[k];\\nif (k == 5) break;\\n}\\n}\\n#ifdef APPLY_COLORMAP\\ngl_FragColor = overlay(pv[4], u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\\n#else\\ngl_FragColor = vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\\n#endif\\n}\"},lut:{\"colorize.glsl\":\"uniform sampler2D u_colormap;\\nuniform float u_colormapOffset;\\nuniform float u_colormapMaxIndex;\\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\\nfloat clrIndex = clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\\nvec2 clrPosition = vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\\nvec4 color = texture2D(u_colormap, clrPosition);\\nvec4 result = vec4(color.rgb, color.a * currentPixel.a);\\nreturn result;\\n}\",\"lut.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\n#include <raster/lut/colorize.glsl>\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\nvec4 result = colorize(currentPixel, 1.0);\\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * u_opacity;\\n}\"},magdir:{\"magdir.frag\":\"precision mediump float;\\nvarying vec4 v_color;\\nuniform lowp float u_opacity;\\nvoid main() {\\ngl_FragColor = v_color * u_opacity;\\n}\",\"magdir.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nattribute vec2 a_offset;\\nattribute vec2 a_vv;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform vec2 u_symbolSize;\\nuniform vec2 u_symbolPercentRange;\\nuniform vec2 u_dataRange;\\nuniform float u_rotation;\\nuniform vec4 u_colors[12];\\nvarying vec4 v_color;\\nvoid main()\\n{\\nfloat angle = a_offset.y + u_rotation;\\n#ifndef ROTATION_GEOGRAPHIC\\nangle = 3.14159265359 * 2.0 - angle - 3.14159265359 / 2.0;\\n#endif\\nvec2 offset = vec2(cos(angle), sin(angle)) * a_offset.x;\\n#ifdef DATA_RANGE\\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\\n#else\\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\\n#endif\\nvec2 pos = a_pos + offset * sizePercentage * u_symbolSize;\\nv_color = u_colors[int(a_vv.x)];\\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\\n}\"},reproject:{\"reproject.frag\":\"precision mediump float;\\nvarying vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\\n}\",\"reproject.vert\":\"precision mediump float;\\nattribute vec2 a_position;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_position;\\ngl_Position = vec4(2.0 * (a_position - 0.5), 0.0, 1.0);\\n}\"},rfx:{aspect:{\"aspect.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_cellSize;\\nuniform vec2 u_srcImageSize;\\n#include <raster/common/getSurfaceValues.glsl>\\nconst float pi = 3.14159265359;\\nvoid main() {\\nfloat pv[10];\\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) / (8.0 * u_cellSize[0]);\\nfloat dzy = -(pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) / (8.0 * u_cellSize[1]);\\nalpha *= sign(abs(dzx) + abs(dzy));\\nfloat aspect_rad = (dzx == 0.0) ? (step(0.0, dzy) * 0.5 * pi + step(dzy, 0.0) * 1.5 * pi) : mod((2.5 * pi + atan(dzy, -dzx)), 2.0 * pi);\\nfloat aspect = aspect_rad * 180.0 / pi;\\ngl_FragColor = vec4(aspect, aspect, aspect, 1.0) * alpha;\\n}\"},bandarithmetic:{\"bandarithmetic.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform mediump mat3 u_bandIndexMat3;\\nuniform float u_adjustments[3];\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\\nfloat nir = pv2.r;\\nfloat red = pv2.g;\\nfloat index;\\n#ifdef NDXI\\nindex = (nir - red) * invertValue(nir + red);\\n#elif defined(SR)\\nindex = nir * invertValue(red);\\n#elif defined(CI)\\nindex = nir * invertValue(red) - 1.0;\\n#elif defined(SAVI)\\nindex = (nir - red) * invertValue(nir + red + u_adjustments[0]) * (1.0 + u_adjustments[0]);\\n#elif defined(TSAVI)\\nfloat s = u_adjustments[0];\\nfloat a = u_adjustments[1];\\nfloat x = u_adjustments[2];\\nfloat y = -a * s + x * (1.0 + s * s);\\nindex = (s * (nir - s * red - a)) * invertValue(a * nir + red + y);\\n#elif defined(MSAVI)\\nfloat nir2 = 2.0 * nir + 1.0;\\nindex = 0.5 * (nir2 - sqrt(nir2 * nir2 - 8.0 * (nir - red)));\\n#elif defined(GEMI)\\nfloat eta = (2.0 * (nir * nir - red * red) + 1.5 * nir + 0.5 * red) * invertValue(nir + red + 0.5);\\nindex = eta * (1.0 - 0.25 * eta) - (red - 0.125) * invertValue(1.0 - red);\\n#elif defined(PVI)\\nfloat a = u_adjustments[0];\\nfloat b = u_adjustments[1];\\nfloat y = sqrt(1.0 + a * a);\\nindex = (nir - a * red - b) * invertValue(y);\\n#elif defined(VARI)\\nindex = (pv2.g - pv2.r) * invertValue(pv2.g + pv2.r - pv2.b);\\n#elif defined(MTVI)\\nfloat green = pv2.b;\\nfloat v = sqrt(pow((2.0 * nir + 1.0), 2.0) - (6.0 * nir - 5.0 * sqrt(red)) - 0.5);\\nindex = 1.5 * (1.2 * (nir - green) - 2.5 * (red - green)) * invertValue(v);\\n#elif defined(RTVICORE)\\nfloat green = pv2.b;\\nindex = 100.0 * (nir - red) - 10.0 * (nir - green);\\n#elif defined(EVI)\\nfloat blue = pv2.b;\\nfloat denom = nir + 6.0 * red - 7.5 * blue + 1.0;\\nindex =  (2.5 * (nir - red)) * invertValue(denom);\\n#elif defined(WNDWI)\\nfloat g = pv2.r;\\nfloat n = pv2.g;\\nfloat s = pv2.s;\\nfloat a = u_adjustments[0];\\nfloat denom = g + a * n + (1.0 - a) * s;\\nindex = (g - a * n - (1 - a) * s) * invertValue(denom);\\n#elif defined(BAI)\\nindex = invertValue(pow((0.1 - red), 2.0) + pow((0.06 - nir), 2.0));\\n#else\\ngl_FragColor = pv;\\nreturn;\\n#endif\\ngl_FragColor = vec4(index, index, index, pv.a);\\n}\"},compositeband:{\"compositeband.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nuniform sampler2D u_image1;\\nuniform sampler2D u_image2;\\n#ifdef ONE_CONSTANT\\nuniform float u_image1Const;\\n#ifdef TWO_CONSTANT\\nuniform float u_image2Const;\\n#endif\\nuniform mat3 u_imageSwap;\\n#endif\\nvarying vec2 v_texcoord;\\nvoid main() {\\nvec4 pv0 = texture2D(u_image, v_texcoord);\\nfloat a = pv0.r;\\nfloat alpha = pv0.a;\\n#ifdef TWO_CONSTANT\\nfloat b = u_image1Const;\\nfloat c = u_image2Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\n#elif defined(ONE_CONSTANT)\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\nalpha *= pv1.a;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nvec4 pv2 = texture2D(u_image2, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = pv2.r;\\nalpha = alpha * pv1.a * pv2.a;\\n#endif\\ngl_FragColor = vec4(a, b, c, alpha);\\n}\"},contrast:{\"contrast.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\n#include <raster/common/contrastBrightness.glsl>\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec4 result = adjustContrastBrightness(pv, false) ;\\ngl_FragColor = vec4(result.rgb * 255.0, result.a);\\n}\"},convolution:{\"convolution.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_srcImageSize;\\n#define KERNEL_SIZE_ROWS ROWS\\n#define KERNEL_SIZE_COLS COLS\\nuniform vec2 u_clampRange;\\nuniform float u_kernel[25];\\n#include <raster/common/mirror.glsl>\\nvoid main() {\\nvec3 rgb = vec3(0.0, 0.0, 0.0);\\nvec2 resolution = 1.0 / u_srcImageSize;\\nfloat rowOffset = -float(floor(float(KERNEL_SIZE_ROWS) / 2.0));\\nfloat colOffset = -float(floor(float(KERNEL_SIZE_COLS) / 2.0));\\nfloat alpha = 1.0;\\nfor (int row = 0; row < KERNEL_SIZE_ROWS; row++) {\\nfloat pos_row = rowOffset + float(row);\\nfor (int col = 0; col < KERNEL_SIZE_COLS; col++) {\\nvec2 pos = v_texcoord + vec2(colOffset + float(col), pos_row) * resolution;\\nvec4 pv = texture2D(u_image, mirror(pos));\\nrgb += pv.rgb * u_kernel[row * KERNEL_SIZE_COLS + col];\\nalpha *= pv.a;\\n}\\n}\\nrgb = clamp(rgb, u_clampRange.s, u_clampRange.t);\\ngl_FragColor = vec4(rgb * alpha, alpha);\\n}\"},curvature:{\"curvature.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform float u_zlFactor;\\nuniform vec2 u_srcImageSize;\\n#include <raster/common/getSurfaceValues.glsl>\\nvoid main() {\\nfloat pv[10];\\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat d = ((pv[3] + pv[5]) * 0.5 - pv[4]);\\nfloat e = ((pv[1] + pv[7]) * 0.5 - pv[4]);\\nfloat curvature = 0.0;\\n#ifdef STANDARD\\ncurvature = -u_zlFactor * (d + e);\\ngl_FragColor = vec4(curvature, curvature, curvature, alpha);\\n#else\\nfloat f = (-pv[0] + pv[2] + pv[6] - pv[8]) / 4.0;\\nfloat g = (-pv[3] + pv[5]) / 2.0;\\nfloat h = (pv[1] - pv[7]) / 2.0;\\nfloat g2 = g * g;\\nfloat h2 = h * h;\\n#ifdef PROFILE\\ncurvature = (u_zlFactor * (d * g2 + e * h2 + f * g * h)) / (g2 + h2);\\n#else\\ncurvature = (-u_zlFactor * (d * h2 + e * g2 - f * g * h)) / (g2 + h2);\\n#endif\\n#endif\\ngl_FragColor = vec4(curvature, curvature, curvature, alpha);\\n}\"},extractband:{\"extractband.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform mediump mat3 u_bandIndexMat3;\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\\ngl_FragColor = vec4(pv2, pv.a);\\n}\"},focalstatistics:{\"focalstatistics.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_srcImageSize;\\n#define KERNEL_SIZE_ROWS ROWS\\n#define KERNEL_SIZE_COLS COLS\\nuniform vec2 u_clampRange;\\n#include <raster/common/mirror.glsl>\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec2 resolution = 1.0 / u_srcImageSize;\\nfloat rowOffset = -float(floor(float(KERNEL_SIZE_ROWS) / 2.0));\\nfloat colOffset = -float(floor(float(KERNEL_SIZE_COLS) / 2.0));\\nfloat count = 0.0;\\n#ifdef STDDEV\\nvec3 sum = vec3(0.0, 0.0, 0.0);\\nvec3 sum2 = vec3(0.0, 0.0, 0.0);\\n#endif\\nvec4 currentPixel = texture2D(u_image, v_texcoord);\\nvec3 rgb = currentPixel.rgb;\\nfor (int row = 0; row < KERNEL_SIZE_ROWS; row++) {\\nfloat pos_row = rowOffset + float(row);\\nfor (int col = 0; col < KERNEL_SIZE_COLS; col++) {\\nvec2 pos = v_texcoord + vec2(colOffset + float(col), pos_row) * resolution;\\nvec4 pv = texture2D(u_image, mirror(pos));\\ncount += pv.a;\\n#ifdef MIN\\nrgb = min(rgb, pv.rgb);\\n#elif defined(MAX)\\nrgb = max(rgb, pv.rgb);\\n#elif defined(MEAN)\\nrgb += pv.rgb;\\n#elif defined(STDDEV)\\nsum += pv.rgb;\\nsum2 += (pv.rgb * pv.rgb);\\n#endif\\n}\\n}\\n#ifdef MEAN\\nrgb *= invertValue(count);\\n#elif defined(STDDEV)\\nrgb = sqrt((sum2 - sum * sum * invertValue(count)) * invertValue(count));\\n#endif\\nfloat alpha = step(0.9999, count);\\nrgb = clamp(rgb, u_clampRange.s, u_clampRange.t);\\n#ifdef FILL\\nrgb = (1.0 - currentPixel.a) * rgb + currentPixel.a * currentPixel.rgb;\\n#endif\\ngl_FragColor = vec4(rgb * alpha, alpha);\\n}\"},grayscale:{\"grayscale.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec3 u_weights;\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nfloat value = dot(u_weights, pv.rgb);\\ngl_FragColor = vec4(value, value, value, pv.a);\\n}\"},local:{\"local.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nuniform sampler2D u_image1;\\n#ifdef ONE_CONSTANT\\nuniform float u_image1Const;\\n#ifdef TWO_CONSTANT\\nuniform float u_image2Const;\\n#endif\\nuniform mat3 u_imageSwap;\\n#endif\\nvarying vec2 v_texcoord;\\nuniform vec2 u_domainRange;\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv0 = texture2D(u_image, v_texcoord);\\nfloat a = pv0.r;\\n#ifdef TWO_IMAGES\\n#ifdef ONE_CONSTANT\\nfloat b = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, 0);\\na = abc.s;\\nb = abc.t;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\n#endif\\n#elif defined(CONDITIONAL)\\n#ifdef TWO_CONSTANT\\nfloat b = u_image1Const;\\nfloat c = u_image2Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\n#elif defined(ONE_CONSTANT)\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nvec4 pv2 = texture2D(u_image2, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = pv2.r;\\n#endif\\n#endif\\nfloat result = a;\\nfloat alpha = pv0.a;\\n#ifdef PLUS\\nresult = a + b;\\n#elif defined(MINUS)\\nresult = a - b;\\n#elif defined(TIMES)\\nresult = a * b;\\n#elif defined(DIVIDE)\\nresult = a * invertValue(b);\\nalpha *= float(abs(sign(b)));\\n#elif defined(FLOATDIVIDE)\\nresult = a * invertValue(b);\\nalpha *= float(abs(sign(b)));\\n#elif defined(FLOORDIVIDE)\\nresult = floor(a * invertValue(b));\\nalpha *= float(abs(sign(b)));\\n#elif defined(SQUARE)\\nresult = a * a;\\n#elif defined(SQRT)\\nresult = sqrt(a);\\n#elif defined(POWER)\\nresult = pow(a, b);\\n#elif defined(LN)\\nresult = a <= 0.0 ? 0.0: log(a);\\nalpha *= float(a > 0.0);\\n#elif defined(LOG_1_0)\\nresult = a <= 0.0 ? 0.0: log2(a) * invertValue(log2(10.0));\\nalpha *= float(a > 0.0);\\n#elif defined(LOG_2)\\nresult = a <= 0.0 ? 0.0: log2(a);\\nalpha *= float(a > 0.0);\\n#elif defined(EXP)\\nresult = exp(a);\\n#elif defined(EXP_1_0)\\nresult = pow(10.0, a);\\n#elif defined(EXP_2)\\nresult = pow(2.0, a);\\n#elif defined(ROUNDDOWN)\\nresult = floor(a);\\n#elif defined(ROUNDUP)\\nresult = ceil(a);\\n#elif defined(INT)\\nresult = float(sign(a)) * floor(abs(a));\\n#elif defined(MOD)\\nresult = mod(a, b);\\n#elif defined(NEGATE)\\nresult = -a;\\n#elif defined(ABS)\\nresult = abs(a);\\n#elif defined(ACOS)\\nresult = abs(a) > 1.0 ? 0.0: acos(a);\\nalpha *= step(abs(a), 1.00001);\\n#elif defined(ACOSH)\\nresult = acosh(a);\\n#elif defined(ASIN)\\nresult = abs(a) > 1.0 ? 0.0: asin(a);\\nalpha *= step(abs(a), 1.00001);\\n#elif defined(ASINH)\\nresult = asinh(a);\\n#elif defined(ATAN)\\nresult = atan(a);\\n#elif defined(ATANH)\\nresult = abs(a) > 1.0 ? 0.0: atanh(a);\\nalpha *= step(abs(a), 1.0);\\n#elif defined(ATAN_2)\\nresult = atan(a, b);\\n#elif defined(COS)\\nresult = cos(a);\\n#elif defined(COSH)\\nresult = cosh(a);\\n#elif defined(SIN)\\nresult = sin(a);\\n#elif defined(SINH)\\nresult = sinh(a);\\n#elif defined(TAN)\\nresult = tan(a);\\n#elif defined(TANH)\\nresult = tanh(a);\\n#elif defined(BITWISEAND)\\nresult = a & b;\\n#elif defined(BITWISEOR)\\nresult = a | b;\\n#elif defined(BITWISELEFTSHIFT)\\nresult = a << b;\\n#elif defined(BITWISERIGHTSHIFT)\\nresult = a >> b;\\n#elif defined(BITWISENOT)\\nresult = ~a;\\n#elif defined(BITWISEXOR)\\nresult = a ^ b;\\n#elif defined(BOOLEANAND)\\nresult = float((a != 0.0) && (b != 0.0));\\n#elif defined(BOOLEANNOT)\\nresult = float(a == 0.0);\\n#elif defined(BOOLEANOR)\\nresult = float((a != 0.0) || (b != 0.0));\\n#elif defined(BOOLEANXOR)\\nresult = float((a != 0.0) ^^ (b != 0.0));\\n#elif defined(GREATERTHAN)\\nresult = float(a > b);\\n#elif defined(GREATERTHANEQUAL)\\nresult = float(a >= b);\\n#elif defined(LESSTHAN)\\nresult = float(a < b);\\n#elif defined(LESSTHANEQUAL)\\nresult = float(a <= b);\\n#elif defined(EQUALTO)\\nresult = float(a == b);\\n#elif defined(NOTEQUAL)\\nresult = float(a != b);\\n#elif defined(ISNULL)\\nresult = float(alpha == 0.0);\\nalpha = 1.0;\\n#elif defined(SETNULL)\\nfloat maskValue = float(a == 0.0);\\nresult = maskValue * b;\\nalpha *= maskValue;\\n#elif defined(CONDITIONAL)\\nfloat weight = float(abs(sign(a)));\\nresult = weight * b + (1.0 - weight) * c;\\n#endif\\nbool isInvalid = result < u_domainRange.s || result > u_domainRange.t;\\nresult = isInvalid ? 0.0 : result;\\nalpha *= float(!isInvalid);\\n#ifdef ROUND_OUTPUT\\nresult = floor(result + 0.5);\\n#endif\\ngl_FragColor = vec4(result, result, result, alpha);\\n}\"},mask:{\"mask.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\n#define LEN_INCLUDED_RANGES 6\\n#define LEN_NODATA_VALUES 6\\nuniform highp float u_includedRanges[6];\\nuniform highp float u_noDataValues[6];\\nfloat maskFactor(float bandValue, float fromValue, float to) {\\nfloat factor = 1.0;\\nfor (int i = 0; i < LEN_NODATA_VALUES; i++) {\\nfactor *= float(u_noDataValues[i] != bandValue);\\n}\\nfactor *= step(fromValue, bandValue) * step(bandValue, to);\\nreturn factor;\\n}\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nfloat redFactor = maskFactor(pv.r, u_includedRanges[0], u_includedRanges[1]);\\n#ifdef MULTI_BAND\\nfloat greenFactor = maskFactor(pv.g, u_includedRanges[2], u_includedRanges[3]);\\nfloat blueFactor = maskFactor(pv.b, u_includedRanges[4], u_includedRanges[5]);\\nfloat maskFactor = redFactor * greenFactor * blueFactor;\\ngl_FragColor = pv * maskFactor;\\n#else\\ngl_FragColor = pv * redFactor;\\n#endif\\n}\"},ndvi:{\"ndvi.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform mediump mat3 u_bandIndexMat3;\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\\nfloat nir = pv2.r;\\nfloat red = pv2.g;\\nfloat index = (nir - red) * invertValue(nir + red);\\n#ifdef SCALED\\nindex = floor((index + 1.0) * 100.0 + 0.5);\\n#endif\\ngl_FragColor = vec4(index, index, index, pv.a);\\n}\"},remap:{\"remap.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\n#define LEN_REMAP_RANGES 18\\n#define LEN_NODATA_RANGES 12\\nuniform highp float u_rangeMaps[18];\\nuniform highp float u_noDataRanges[12];\\nuniform highp float u_unmatchMask;\\nuniform vec2 u_clampRange;\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nfloat factor = 1.0;\\nfloat bandValue = pv.r;\\nfor (int i = 0; i < LEN_NODATA_RANGES; i+=2) {\\nfloat inside = 1.0 - step(u_noDataRanges[i], bandValue) * step(bandValue, u_noDataRanges[i+1]);\\nfactor *= inside;\\n}\\nfloat mapValue = 0.0;\\nfloat includeMask = 0.0;\\nfor (int i = 0; i < LEN_REMAP_RANGES; i+=3) {\\nfloat stepMask = step(u_rangeMaps[i], bandValue) * step(bandValue, u_rangeMaps[i+1]);\\nincludeMask = (1.0 - stepMask) * includeMask + stepMask;\\nmapValue = (1.0 - stepMask) * mapValue + stepMask * u_rangeMaps[i+2];\\n}\\nbandValue = factor * (mapValue + (1.0 - includeMask) * u_unmatchMask * pv.r);\\nfloat bandMask = factor * max(u_unmatchMask, includeMask);\\nbandValue = clamp(bandValue, u_clampRange.s, u_clampRange.t);\\ngl_FragColor = vec4(bandValue, bandValue, bandValue, bandMask * pv.a);\\n}\"},slope:{\"slope.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_cellSize;\\nuniform float u_zFactor;\\nuniform vec2 u_srcImageSize;\\nuniform float u_pixelSizePower;\\nuniform float u_pixelSizeFactor;\\n#include <raster/common/getSurfaceValues.glsl>\\nvoid main() {\\nfloat pv[10];\\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat xf = (u_zFactor + pow(u_cellSize[0], u_pixelSizePower) * u_pixelSizeFactor) / (8.0 * u_cellSize[0]);\\nfloat yf = (u_zFactor + pow(u_cellSize[1], u_pixelSizePower) * u_pixelSizeFactor) / (8.0 * u_cellSize[1]);\\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) * xf;\\nfloat dzy = -(pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) * yf;\\nfloat rise2run = sqrt(dzx * dzx + dzy * dzy);\\n#ifdef PERCENT_RISE\\nfloat percentRise = rise2run * 100.0;\\ngl_FragColor = vec4(percentRise, percentRise, percentRise, alpha);\\n#else\\nfloat degree = atan(rise2run) * 57.2957795;\\ngl_FragColor = vec4(degree, degree, degree, alpha);\\n#endif\\n}\"},stretch:{\"stretch.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying highp vec2 v_texcoord;\\nuniform float u_minCutOff[3];\\nuniform float u_maxCutOff[3];\\nuniform float u_minOutput;\\nuniform float u_maxOutput;\\nuniform float u_factor[3];\\nuniform float u_gamma[3];\\nuniform float u_gammaCorrection[3];\\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, float gamma, float gammaCorrection) {\\nval = clamp(val, minCutOff, maxCutOff);\\nfloat stretchedVal;\\n#ifdef USE_GAMMA\\nfloat tempf = 1.0;\\nfloat outRange = maxOutput - minOutput;\\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\\ntempf -= step(1.0, gamma) * sign(gamma - 1.0) * pow(1.0 / outRange, relativeVal * gammaCorrection);\\nstretchedVal = tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput;\\nstretchedVal = clamp(stretchedVal, minOutput, maxOutput);\\n#else\\nstretchedVal = minOutput + (val - minCutOff) * factor;\\n#endif\\n#ifdef ROUND_OUTPUT\\nstretchedVal = floor(stretchedVal + 0.5);\\n#endif\\nreturn stretchedVal;\\n}\\nvoid main() {\\nvec4 currentPixel = texture2D(u_image, v_texcoord);\\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_gamma[0], u_gammaCorrection[0]);\\n#ifdef MULTI_BAND\\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_gamma[1], u_gammaCorrection[1]);\\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_gamma[2], u_gammaCorrection[2]);\\ngl_FragColor = vec4(redVal, greenVal, blueVal, currentPixel.a);\\n#else\\ngl_FragColor = vec4(redVal, redVal, redVal, currentPixel.a);\\n#endif\\n}\"},vs:{\"vs.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_pos;\\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\"}},scalar:{\"scalar.frag\":\"precision mediump float;\\nuniform lowp float u_opacity;\\nvarying vec2 v_pos;\\nconst vec4 outlineColor = vec4(0.2, 0.2, 0.2, 1.0);\\nconst float outlineSize = 0.02;\\nconst float innerRadius = 0.25;\\nconst float outerRadius = 0.42;\\nconst float innerSquareLength = 0.15;\\nvoid main() {\\nmediump float dist = length(v_pos);\\nmediump float fillalpha1 = smoothstep(outerRadius, outerRadius + outlineSize, dist);\\nfillalpha1 *= (1.0-smoothstep(outerRadius + outlineSize, outerRadius + 0.1 + outlineSize, dist));\\n#ifdef INNER_CIRCLE\\nmediump float fillalpha2 = smoothstep(innerRadius, innerRadius + outlineSize, dist);\\nfillalpha2 *= (1.0-smoothstep(innerRadius + outlineSize, innerRadius + 0.1 + outlineSize, dist));\\n#else\\nmediump float fillalpha2 = (abs(v_pos.x) < innerSquareLength ? 1.0 : 0.0) * (abs(v_pos.y) < innerSquareLength ? 1.0 : 0.0);\\n#endif\\ngl_FragColor = (fillalpha2 + fillalpha1) * outlineColor * u_opacity;\\n}\",\"scalar.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nattribute vec2 a_offset;\\nattribute vec2 a_vv;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform vec2 u_symbolSize;\\nuniform vec2 u_symbolPercentRange;\\nuniform vec2 u_dataRange;\\nvarying vec2 v_pos;\\nvoid main()\\n{\\n#ifdef DATA_RANGE\\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\\n#else\\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\\n#endif\\nvec2 size = u_symbolSize * sizePercentage;\\nvec2 pos = a_pos + a_offset * size;\\nv_pos = a_offset;\\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\\n}\"},stretch:{\"stretch.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nuniform float u_minCutOff[3];\\nuniform float u_maxCutOff[3];\\nuniform float u_minOutput;\\nuniform float u_maxOutput;\\nuniform float u_factor[3];\\nuniform bool u_useGamma;\\nuniform float u_gamma[3];\\nuniform float u_gammaCorrection[3];\\n#include <raster/lut/colorize.glsl>\\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\\nif (val >= maxCutOff) {\\nreturn maxOutput;\\n} else if (val <= minCutOff) {\\nreturn minOutput;\\n}\\nfloat stretchedVal;\\nif (useGamma) {\\nfloat tempf = 1.0;\\nfloat outRange = maxOutput - minOutput;\\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\\nif (gamma > 1.0) {\\ntempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);\\n}\\nstretchedVal = (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\\n} else {\\nstretchedVal = minOutput + (val - minCutOff) * factor;\\n}\\nreturn stretchedVal;\\n}\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\n#ifdef NOOP\\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\\nreturn;\\n#endif\\nif (u_bandCount == 1) {\\nfloat grayVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\\n#ifdef APPLY_COLORMAP\\nvec4 result = colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\\n#else\\ngl_FragColor = vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\\n#endif\\n} else {\\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\\ngl_FragColor = vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\\n}\\n}\"}},stencil:{\"stencil.frag\":\"void main() {\\ngl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\\n}\",\"stencil.vert\":\"attribute vec2 a_pos;\\nuniform mat3 u_worldExtent;\\nvoid main() {\\ngl_Position = vec4(u_worldExtent * vec3(a_pos, 1.0), 1.0);\\n}\"},test:{\"TestShader.common.glsl\":\"#ifndef RETURN_RED\\nvarying    vec4      v_color;\\n#endif\\nvarying    vec2      v_offset;\",\"TestShader.frag\":\"precision highp float;\\n#include <test/TestShader.common.glsl>\\nvoid main() {\\nif (v_offset.x > -.5 && v_offset.y > -.5 && v_offset.x < .5 && v_offset.y < .5) {\\ndiscard;\\n}\\n#ifdef RETURN_RED\\ngl_FragColor = vec4(1., 0., 0., 1.);\\n#else\\ngl_FragColor = v_color;\\n#endif\\n}\",\"TestShader.vert\":\"const float POS_PRECISION_FACTOR = 10.;\\nconst float OFFSET_PRECISION_FACTOR = 10.;\\nconst float SIZE_PRECISION_FACTOR = 10.;\\nattribute  vec2      a_pos_packed;\\nattribute  vec2      a_offset_packed;\\nattribute  float     a_size_packed;\\n#ifdef DATA_DRIVEN_COLOR\\nconst float u_dataDrivenColor_validValues[4] = float[4](0., 0., 1., 0.);\\nuniform    vec4      u_dataDrivenColor_colorFallback;\\nuniform    vec4      u_dataDrivenColor_color;\\n#endif\\nuniform    float     u_view_zoomLevel;\\n#include <test/TestShader.common.glsl>\\n#ifdef DATA_DRIVEN_COLOR\\nvec4 getColor(float value) {\\nint index = -1;\\nfor (int i = 0; i < 4; i++) {\\nif (u_dataDrivenColor_validValues[i] == value) {\\nindex = i;\\nbreak;\\n}\\n}\\nif (index == -1) {\\nreturn u_dataDrivenColor_colorFallback;\\n}\\nreturn u_dataDrivenColor_color;\\n}\\n#endif\\nvoid main() {\\nvec2  a_pos = a_pos_packed / POS_PRECISION_FACTOR;\\nvec2  a_offset = a_offset_packed / OFFSET_PRECISION_FACTOR;\\nfloat a_size = a_size_packed / SIZE_PRECISION_FACTOR;\\nvec4 color = vec4(1., 0., 0., 1.);\\n#ifdef DATA_DRIVEN_COLOR\\ncolor = getColor(1.);\\n#endif\\nvec2 offsetScaled = a_offset * a_size;\\nvec4 pos = vec4(a_pos.xy + offsetScaled, 0., 1.);\\ngl_Position = pos;\\n#ifndef RETURN_RED\\nv_color = color;\\n#endif\\nv_offset = a_offset;\\n}\"},tileInfo:{\"tileInfo.frag\":\"uniform mediump sampler2D u_texture;\\nvarying mediump vec2 v_tex;\\nvoid main(void) {\\nlowp vec4 color = texture2D(u_texture, v_tex);\\ncolor.rgb *= color.a;\\ngl_FragColor = color;\\n}\",\"tileInfo.vert\":\"attribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump float u_depth;\\nuniform mediump vec2 u_coord_ratio;\\nuniform mediump vec2 u_delta;\\nuniform mediump vec2 u_dimensions;\\nvarying mediump vec2 v_tex;\\nvoid main() {\\nmediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\\nvec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\\nv_tex = a_pos;\\n}\"},util:{\"atan2.glsl\":\"float atan2(in float y, in float x) {\\nfloat t0, t1, t2, t3, t4;\\nt3 = abs(x);\\nt1 = abs(y);\\nt0 = max(t3, t1);\\nt1 = min(t3, t1);\\nt3 = 1.0 / t0;\\nt3 = t1 * t3;\\nt4 = t3 * t3;\\nt0 =         - 0.013480470;\\nt0 = t0 * t4 + 0.057477314;\\nt0 = t0 * t4 - 0.121239071;\\nt0 = t0 * t4 + 0.195635925;\\nt0 = t0 * t4 - 0.332994597;\\nt0 = t0 * t4 + 0.999995630;\\nt3 = t0 * t3;\\nt3 = (abs(y) > abs(x)) ? 1.570796327 - t3 : t3;\\nt3 = x < 0.0 ?  3.141592654 - t3 : t3;\\nt3 = y < 0.0 ? -t3 : t3;\\nreturn t3;\\n}\",\"encoding.glsl\":\"const vec4 rgba2float_factors = vec4(\\n255.0 / (256.0),\\n255.0 / (256.0 * 256.0),\\n255.0 / (256.0 * 256.0 * 256.0),\\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\\n);\\nfloat rgba2float(vec4 rgba) {\\nreturn dot(rgba, rgba2float_factors);\\n}\"}};export{e as default};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport r from\"./shaderRepository.js\";import{ShaderCompiler as e}from\"../../../../../webgl/ShaderCompiler.js\";function o(r){return function(e){let o=r;return e.split(\"/\").forEach((r=>{o&&(o=o[r])})),o}}const t=new e(o(r));function n(r){return t.resolveIncludes(r)}export{n as resolveIncludes};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{resolveIncludes as r}from\"./sources/resolver.js\";const e={shaders:{vertexShader:r(\"background/background.vert\"),fragmentShader:r(\"background/background.frag\")},attributes:new Map([[\"a_pos\",0]])};export{e as background};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nclass t{constructor(a){if(this.next=null,!Array.isArray(a))return void(this.data=a);this.data=a[0];let e=this;for(let n=1;n<a.length;n++)e.next=new t([a[n]]),e=e.next}*values(){let t=this;for(;t;)yield t.data,t=t.next}forEach(t){let a=this;for(;a;)t(a.data),a=a.next}find(t){return t(this.data)?this:this.next?.find(t)}max(t,a=this){const e=t(this.data)>t(a.data)?this:a;return this.next?this.next.max(t,e):e}remove(t,a=null){return this===t?a?(a.next=this.next,a):this.next:this.next?.remove(t,this)??null}get last(){return this.next?this.next.last:this}}class a{constructor(a){this._head=null,null!=a&&(this._head=new t(a))}get head(){return this._head}maxAvailableSpace(){if(null==this._head)return 0;const t=this._head.max((t=>t.end-t.start));return t.data.end-t.data.start}firstFit(t){if(null==this._head)return null;let a=null,e=this._head;for(;e;){const n=e.data.end-e.data.start;if(n===t)return a?a.next=e.next:this._head=e.next,e.data.start;if(n>t){const a=e.data.start;return e.data.start+=t,a}a=e,e=e.next}return null}free(a,e){const n=a+e;if(null==this._head){const e=new t({start:a,end:n});return void(this._head=e)}if(n<=this._head.data.start){if(n===this._head.data.start)return void(this._head.data.start-=e);const r=new t({start:a,end:n});return r.next=this._head,void(this._head=r)}let r=this._head,s=r.next;for(;s;){if(s.data.start>=n){if(r.data.end===a){if(r.data.end+=e,r.data.end===s.data.start){const t=s.data.end-s.data.start;return r.data.end+=t,void(r.next=s.next)}return}if(s.data.start===n)return void(s.data.start-=e);const d=new t({start:a,end:n});return d.next=r.next,void(r.next=d)}r=s,s=s.next}if(a===r.data.end)return void(r.data.end+=e);const d=new t({start:a,end:n});r.next=d}clear(){this._head=null}}export{a as FreeList,t as List};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport has from\"../../../../core/has.js\";import{assertIsSome as t}from\"../../../../core/maybe.js\";import{FreeList as e}from\"./cpuMapped/FreeList.js\";const r=has(\"esri-2d-log-allocations\");class s{static create(t,e){const r=e.acquireUint32Array(t);return new s(r,e)}constructor(t,e){this._array=t,this._pool=e}get array(){return this._array}get length(){return this._array.length}getUint32View(t,e){return new Uint32Array(this._array.buffer,t+this._array.byteOffset,e)}expand(t){if(t<=this._array.byteLength)return;const e=this._pool.acquireUint32Array(t);e.set(this._array),this._pool.releaseUint32Array(this._array),this._array=e}destroy(){this._pool.releaseUint32Array(this._array)}}class a{constructor(){this._data=new ArrayBuffer(a.BYTE_LENGTH),this._freeList=new e({start:0,end:this._data.byteLength})}static get BYTE_LENGTH(){return 16e6}get buffer(){return this._data}acquireUint32Array(t){const e=this._freeList.firstFit(t);return null==e?null:new Uint32Array(this._data,e,t/Uint32Array.BYTES_PER_ELEMENT)}releaseUint32Array(t){this._freeList.free(t.byteOffset,t.byteLength)}}class i{constructor(){this._pages=[],this._pagesByBuffer=new Map,this._bytesAllocated=0}destroy(){this._pages=[],this._pagesByBuffer=null}get _bytesTotal(){return this._pages.length*a.BYTE_LENGTH}acquireUint32Array(e){if(this._bytesAllocated+=e,r&&console.log(`Allocating ${e}, (${this._bytesAllocated} / ${this._bytesTotal})`),e>=a.BYTE_LENGTH)return new Uint32Array(e/Uint32Array.BYTES_PER_ELEMENT);for(const t of this._pages){const r=t.acquireUint32Array(e);if(null!=r)return r}const s=this._addPage().acquireUint32Array(e);return t(s,\"Expected to allocate page\"),s}releaseUint32Array(t){this._bytesAllocated-=t.byteLength,r&&console.log(`Freeing ${t.byteLength}, (${this._bytesAllocated} / ${this._bytesTotal})`);const e=this._pagesByBuffer.get(t.buffer);e&&e.releaseUint32Array(t)}_addPage(){const t=new a;return this._pages.push(t),this._pagesByBuffer.set(t.buffer,t),t}}export{i as ArrayBufferPool,s as PooledUint32Array};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{resolveIncludes as e}from\"./sources/resolver.js\";const r={shaders:{vertexShader:e(\"tileInfo/tileInfo.vert\"),fragmentShader:e(\"tileInfo/tileInfo.frag\")},attributes:new Map([[\"a_pos\",0]])};export{r as tileInfo};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{set as t,multiply as s}from\"../../../../core/libs/gl-matrix-2/math/mat2d.js\";import{create as i}from\"../../../../core/libs/gl-matrix-2/factories/mat2df32.js\";import{set as r,multiply as e}from\"../../../../core/libs/gl-matrix-2/math/mat3.js\";import{create as a}from\"../../../../core/libs/gl-matrix-2/factories/mat3f32.js\";import{tileSize as o}from\"./definitions.js\";import{TiledDisplayObject as m}from\"./TiledDisplayObject.js\";class l extends m{constructor(t,s,i,r){super(t,s,i,r,o,o)}destroy(){super.destroy()}setTransform(a){const o=this.resolution/a.resolution,m=this.transforms.tileMat3,[l,n]=a.toScreenNoRotation([0,0],[this.x,this.y]),c=this.width/this.rangeX*o,d=this.height/this.rangeY*o;r(m,c,0,0,0,d,0,l,n,1),e(this.transforms.displayViewScreenMat3,a.displayViewMat3,m);const f=this.transforms.labelMat2d,h=window.devicePixelRatio,p=t(i(),c*h,0,0,d*h,l*h,n*h);s(f,a.viewMat2d,p)}_createTransforms(){return{labelMat2d:i(),tileMat3:a(),displayViewScreenMat3:a()}}}export{l as AFeatureTile};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport\"../../../../core/has.js\";import{FeatureBatchingStrategy as t,FeatureSymbologyDrawOrder as e}from\"./enums.js\";import{List as n}from\"./cpuMapped/FreeList.js\";function a(t,e){return t<<16|255&e}function i(t){return 255&t}class s{constructor(t,e,n,a,i){this.instance=t,this.materialKey=e,this.target=n,this.start=a,this.count=i}get textureKey(){return i(this.materialKey)}get indexEnd(){return this.start+this.count}extend(t){this.count+=t}render(t){this.instance.techniqueRef.render(t,this)}}class r{constructor(){this._length=0,this._minOrderedLength=0,this._materialKeys=new Set}static fromDisplayEntities(t,e,n,i){const s=new r;for(const r of t.values())for(const t of r.records){const r=n.getInstance(t.instanceId),d=a(r.instanceId,t.textureKey);s.addRecord(r,d,t.indexStart,t.indexCount,t.vertexStart,t.vertexCount,e,i)}return s}get length(){return this._length}get minOrderedLength(){return this._minOrderedLength}get minUnorderedLength(){return this._materialKeys.size}render(t){const{drawPhase:e}=t;for(const n of this.infos())n.instance.techniqueRef.drawPhase&e&&n.render(t)}addRecord(a,i,r,d,h,l,o,c){let u=r,_=d;if(_||(u=h,_=l),!_)return;if(null==this._head){const t=new s(a,i,o,u,_);return this._head=new n(t),this._tail=this._head,this._length++,void this._minOrderedLength++}if(c===t.STRICT_ORDER)return this._insert(a,i,o,u,_,this._tail,null);let f=null,g=this._head;const m=a.instanceId,y=a.techniqueRef.symbologyPlane;if(c===t.STRICT_MARKERS_AND_TEXT&&(y===e.MARKER||y===e.TEXT))return this._insert(a,i,o,u,_,this._tail,null);for(;g;){const t=g.data.instance,e=t.instanceId,n=t.techniqueRef.symbologyPlane,s=f?.data.instance.instanceId;if(y<n||m===s&&m!==e)return this._insert(a,i,o,u,_,f,g);f=g,g=g.next}this._insert(a,i,o,u,_,f,null)}*infos(){if(null!=this._head)for(const t of this._head.values())yield t}_insert(t,e,a,i,r,d,h){if(null==d&&null==h){const d=new s(t,e,a,i,r);return this._head=new n(d),this._tail=this._head,this._length++,void this._minOrderedLength++}return e!==this._tail.data.materialKey&&this._minOrderedLength++,this._materialKeys.add(e),null==d&&null!=h?this._insertAtHead(t,e,a,i,r,h):null!=d&&null==h?this._insertAtEnd(t,e,a,i,r,d):null!=d&&null!=h?this._insertAtMiddle(t,e,a,i,r,d,h):void 0}_insertAtHead(t,e,a,i,r,d){const h=i+r;if(e===d.data.materialKey&&a===d.data.target&&h===d.data.start)d.data.start=i,d.data.count+=r;else{const h=new s(t,e,a,i,r);this._head=new n(h),this._head.next=d,this._length++}}_insertAtEnd(t,e,a,i,r,d){if(d.data.materialKey===e&&d.data.indexEnd===i)d.data.count+=r;else{const h=new s(t,e,a,i,r);this._tail=new n(h),d.next=this._tail,this._length++}}_insertAtMiddle(t,e,a,i,r,d,h){const l=i+r;if(d.data.materialKey===e&&d.data.target===a&&d.data.indexEnd===i)d.data.count+=r,d.data.materialKey===h.data.materialKey&&d.data.target===h.data.target&&d.data.indexEnd===h.data.start&&(d.data.count+=h.data.count,d.next=h.next,this._length--);else if(e===h.data.materialKey&&a===h.data.target&&l===h.data.start)h.data.start=i,h.data.count+=r;else{const l=new s(t,e,a,i,r),o=new n(l);d.next=o,o.next=h,this._length++}}}export{r as DisplayList,s as DisplayListInfo};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nclass t{constructor(t){this._indexOnly=t,this.vertex={count:0,operations:[]},this.index={count:0,operations:[]}}copyRecord(t){let e=0;this._indexOnly||(e=this.vertex.count-t.vertexStart,this.vertex.operations.push({srcFrom:t.vertexStart,dstFrom:this.vertex.count,count:t.vertexCount,mutate:0}),t.vertexStart=this.vertex.count,this.vertex.count+=t.vertexCount);let n=!1;if(this._indexOnly&&this.index.operations.length>=1){const e=this.index.operations[this.index.operations.length-1];e.srcFrom+e.count===t.indexStart&&(e.count+=t.indexCount,n=!0)}n||this.index.operations.push({srcFrom:t.indexStart,dstFrom:this.index.count,count:t.indexCount,mutate:e}),t.indexStart=this.index.count,this.index.count+=t.indexCount}}export{t as ReshufflePlan};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport\"../../../../../core/has.js\";import{assertIsSome as t}from\"../../../../../core/maybe.js\";import{PooledUint32Array as i}from\"../PooledUint32Array.js\";import{FreeList as e}from\"./FreeList.js\";import{BufferObject as r}from\"../../../../webgl/BufferObject.js\";import{Usage as s}from\"../../../../webgl/enums.js\";const n=1.25,h=32767,a=h<<16|h;class d{constructor(t,e,r,s){this._pool=s;const n=i.create(e*r*Uint32Array.BYTES_PER_ELEMENT,this._pool);this.size=e,this.strideInt=r,this.bufferType=t,this.dirty={start:1/0,end:0},this.memoryStats={bytesUsed:0,bytesReserved:e*r*Uint32Array.BYTES_PER_ELEMENT},this._gpu=null,this._cpu=n,this.clear()}get elementSize(){return this._cpu.length/this.strideInt}get intSize(){return this.fillPointer*this.strideInt}get byteSize(){return this.intSize*Uint32Array.BYTES_PER_ELEMENT}get invalidated(){return this.bufferSize>0&&!this._gpu}get invalidatedComputeBuffer(){return this.bufferSize>0&&!this._gpuComputeTriangles}invalidate(){this._invalidateTriangleBuffer(),this._gpu?.dispose(),this._gpu=null}_invalidateTriangleBuffer(){this._gpuComputeTriangles?.dispose(),this._gpuComputeTriangles=null}destroy(){this._gpu?.dispose(),this._gpuComputeTriangles?.dispose(),this._cpu?.destroy()}clear(){this.dirty.start=1/0,this.dirty.end=0,this.freeList=new e({start:0,end:this._cpu.length/this.strideInt}),this.fillPointer=0}ensure(t){if(this.maxAvailableSpace()>=t)return;if(t*this.strideInt>this._cpu.length-this.fillPointer){this.invalidate();const i=this._cpu.length/this.strideInt,e=Math.round((i+t)*n),r=e*this.strideInt;this._cpu.expand(r*Uint32Array.BYTES_PER_ELEMENT),this.freeList.free(i,e-i),this.memoryStats.bytesReserved+=(e-i)*this.strideInt*Uint32Array.BYTES_PER_ELEMENT}}set(t,i){this._cpu.array[t]!==i&&(this._cpu.array[t]=i,this.dirty.start=Math.min(t,this.dirty.start),this.dirty.end=Math.max(t+1,this.dirty.end))}getGPUBuffer(t,i=!1){if(!this.bufferSize)return null;if(i){if(\"index\"!==this.bufferType)throw new Error(\"Tired to get triangle buffer, but target is not an index buffer\");return null==this._gpuComputeTriangles&&(this._gpuComputeTriangles=this._createComputeBuffer(t)),this._gpuComputeTriangles}return null==this._gpu&&(this._gpu=this._createBuffer(t)),this._gpu}getView(t,i){return this._cpu.getUint32View(t,i/Uint32Array.BYTES_PER_ELEMENT)}get bufferSize(){return this._cpu.length/this.strideInt}maxAvailableSpace(){return this.freeList.maxAvailableSpace()}insert(i,e,r,s){const n=r*this.strideInt;if(!n)return 0;const h=e*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,a=new Uint32Array(i,h,n),d=this.freeList.firstFit(r);t(d,\"First fit region must be defined\");const u=d*this.strideInt,o=n;if(this._cpu.array.set(a,u),0!==s)for(let t=0;t<a.length;t++)this._cpu.array[t+u]+=s;return this.dirty.start=Math.min(this.dirty.start,u),this.dirty.end=Math.max(this.dirty.end,u+o),this.fillPointer=Math.max(this.fillPointer,u+o),this.memoryStats.bytesUsed+=r*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,d}copyFrom(i,e,r,s,n){const h=r*this.strideInt;if(!h)return 0;const a=e*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,d=i._cpu.getUint32View(a,h),u=this.freeList.firstFit(r);t(u,\"First fit region must be defined\");const o=u*this.strideInt,f=h;if(this._cpu.array.set(d,o),0!==s)for(let t=0;t<h;t++)this._cpu.array[o+t*this.strideInt+n]+=s;return this.dirty.start=Math.min(this.dirty.start,o),this.dirty.end=Math.max(this.dirty.end,o+f),this.fillPointer=Math.max(this.fillPointer,o+f),this.memoryStats.bytesUsed+=r*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,u}free(t,i,e){const r=t*this.strideInt,s=(t+i)*this.strideInt;if(!0===e)for(let n=t;n!==t+i;n++)this._cpu.array[n*this.strideInt]=a;this.dirty.start=Math.min(this.dirty.start,r),this.dirty.end=Math.max(this.dirty.end,s),this.freeList.free(t,i),this.memoryStats.bytesUsed-=i*this.strideInt*Uint32Array.BYTES_PER_ELEMENT}upload(){if(this.dirty.end){if(this._invalidateTriangleBuffer(),null==this._gpu)return this.dirty.start=1/0,void(this.dirty.end=0);this._gpu.setSubData(this._cpu.array,this.dirty.start,this.dirty.start,this.dirty.end),this.dirty.start=1/0,this.dirty.end=0}}reshuffle(t,e){if(0===e.length)return;const r=this.byteSize,s=t*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,n=r>s,h=this._cpu,a=i.create(s,this._pool);n||a.array.set(this._cpu.getUint32View(0,this.intSize));for(const i of e)if(n||i.srcFrom!==i.dstFrom||0!==i.mutate){this.dirty.start=Math.min(this.dirty.start,i.dstFrom*this.strideInt),this.dirty.end=Math.max(this.dirty.end,(i.dstFrom+i.count)*this.strideInt);for(let t=0;t<i.count;t++){const e=(i.dstFrom+t)*this.strideInt,r=(i.srcFrom+t)*this.strideInt;for(let t=0;t<this.strideInt;t++)a.array[e+t]=h.array[r+t]+i.mutate}}this._cpu.destroy(),this._cpu=a,n&&this.invalidate(),this.freeList.clear(),this.memoryStats.bytesUsed=this.memoryStats.bytesReserved=s}_createBuffer(t){const i=s.DYNAMIC_DRAW;return\"index\"===this.bufferType?r.createIndex(t,i,this._cpu.array):r.createVertex(t,i,this._cpu.array)}_createComputeBuffer(t){const i=s.DYNAMIC_DRAW,e=new Uint32Array(this.fillPointer/3);for(let r=0;r<this.fillPointer;r+=3)e[r/3]=this._cpu.array[r];return r.createIndex(t,i,e)}}export{d as MappedBuffer};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{destroyMaybe as e}from\"../../../../../core/maybe.js\";import{i1616to32 as t}from\"../number.js\";import{MappedBuffer as r}from\"./Buffer.js\";import{unpackDataView as i}from\"../shaderGraph/techniques/mesh/dataViewUtils.js\";import{vertexLayoutHash as s}from\"../shaderGraph/techniques/mesh/utils.js\";import{PrimitiveType as o}from\"../../../../webgl/enums.js\";import{VertexArrayObject as f}from\"../../../../webgl/VertexArrayObject.js\";const n=0,u=1,a=1e3;class h{constructor(e){this._bufferPool=e,this._computeLayouts=new Map,this._vaos=new Map,this._invalidated=!1}destroy(){for(const[e,t]of this._vaos)t?.disposeVAOOnly();this._indexBuffer=e(this._indexBuffer),this._vertexBuffer=e(this._vertexBuffer)}_getVertexAttributeLayout(e){if(!e)return null;const t=[];for(const r of e.attributes)t.push({name:r.name,type:r.type,count:r.count,divisor:0,normalized:r.normalized??!1,offset:r.offset,stride:e.stride});return{geometry:t}}getLayout(e){if(!this._layout)return null;const{locationInfo:t,useComputeBuffer:r,computeAttributeMap:i}=e,o=this._layout.attributes.filter((e=>t.locations.has(e.name)));if(!r)return{attributes:o,hash:this._layout.hash,stride:this._layout.stride};const f=Object.values(i).flat().join(\"-\");if(this._computeLayouts.has(f))return this._computeLayouts.get(f);const n=this._layout.stride;for(const{name:s,count:a,type:h,normalized:c,offset:d,packPrecisionFactor:l}of this._layout.attributes){const e=i[s];null!=e&&2===e.length&&(o.push({name:e[0],count:a,type:h,normalized:c,offset:d+n,packPrecisionFactor:l}),o.push({name:e[1],count:a,type:h,normalized:c,offset:d+2*n,packPrecisionFactor:l}))}const u={attributes:o,stride:n,hash:s(o)};return this._computeLayouts.set(f,u),u}getDrawArgs(e,t,r,i){return i?{primitive:o.POINTS,count:t/3,offset:r/3}:{primitive:e,count:t,offset:r}}getDebugVertexInfo(e){if(!this._vertexBuffer)return null;const t=this.getLayout(e);if(null==t)return null;const r=t.stride,s=this._vertexBuffer.getView(0,this._vertexBuffer.byteSize),o=new DataView(s.slice().buffer);let f=s.byteLength/r;e.useComputeBuffer&&(f=this._indexBuffer.fillPointer/3);const n=this._indexBuffer.getView(0,this._indexBuffer.byteSize);let u=0;const a=[];for(let h=0;h<f;h++){if(e.useComputeBuffer){u=n[3*h]*r}const s={};for(const e of t.attributes){let t=`${e.offset} ${e.name}`,r=i(o,e,u);if(e.packPrecisionFactor)if(t+=` (precision: ${e.packPrecisionFactor})`,\"number\"==typeof r)r/=e.packPrecisionFactor;else for(let i=0;i<r.length;i++)r[i]/=e.packPrecisionFactor;s[t]=r}u+=r,a.push(s)}return{vertices:a,layout:t}}_ensure(e,t,i){if(this._vertexBuffer&&this._indexBuffer){if(this._layout?.hash!==e.hash)throw new Error(\"InternalError: Expected vertex layouts to match\");this._indexBuffer.ensure(Math.max(t,1e3)),this._vertexBuffer.ensure(Math.max(i,1e3))}else{const s=e.stride/Uint32Array.BYTES_PER_ELEMENT;if(this._layout=e,this._position=e.attributes.find((e=>\"pos\"===e.name||\"position\"===e.name)),!this._position)throw new Error(\"InternalError: Unable to find position attribute\");this._indexBuffer=new r(\"index\",Math.max(t,a),1,this._bufferPool),this._vertexBuffer=new r(\"vertex\",Math.max(i,a),s,this._bufferPool)}}append(e){const t=e.layout.stride,r=e.indices.byteLength/Uint32Array.BYTES_PER_ELEMENT,i=e.vertices.byteLength/t;this._ensure(e.layout,r,i);const{vertices:s,indices:o}=e,f=this._vertexBuffer.insert(s,0,s.byteLength/t,0);return{vertexFrom:f,indexFrom:this._indexBuffer.insert(o,0,o.byteLength/4,f)}}copyRecordFrom(e,r,i,s){const{indexStart:o,indexCount:f,vertexStart:n,vertexCount:u}=r;this._ensure(e._layout,f,u);const a=e._position,h=i*(a.packPrecisionFactor??1),c=s*(a.packPrecisionFactor??1),d=a.offset,l=t(h,c),_=this._vertexBuffer.copyFrom(e._vertexBuffer,n,u,l,d),m=this._indexBuffer.copyFrom(e._indexBuffer,o,f,_-n,0),x=r.clone();return x.vertexStart=_,x.indexStart=m,x.overlaps=0,x}remove(e,t,r,i){this._indexBuffer.free(e,t),this._vertexBuffer.free(r,i)}upload(){this._invalidated=!0}getVAO(e,t,r){if(!this._vertexBuffer||!this._indexBuffer||!this._vertexBuffer.bufferSize)return null;const i=r?.useComputeBuffer?u:n;let s=this._vaos.get(i);if(this._invalidated||r?.useComputeBuffer){(this._vertexBuffer.invalidated||this._indexBuffer.invalidated||r?.useComputeBuffer&&this._indexBuffer.invalidatedComputeBuffer)&&(this._vertexBuffer.invalidate(),this._indexBuffer.invalidate(),s?.disposeVAOOnly(),s=null),this._vertexBuffer.upload(),this._indexBuffer.upload();const o=this._indexBuffer.getGPUBuffer(e,1===i),n=this._vertexBuffer.getGPUBuffer(e);s||(s=new f(e,t.locations,this._getVertexAttributeLayout(this.getLayout(r)),{geometry:n},o),this._vaos.set(i,s)),this._invalidated=!1}return s}get memoryStats(){return{bytesUsed:this._vertexBuffer.memoryStats.bytesUsed+this._indexBuffer.memoryStats.bytesUsed,bytesReserved:this._vertexBuffer.memoryStats.bytesReserved+this._indexBuffer.memoryStats.bytesReserved,vertex:this._vertexBuffer.memoryStats,index:this._indexBuffer.memoryStats}}reshuffle(e){this._vertexBuffer&&this._vertexBuffer.reshuffle(e.vertex.count,e.vertex.operations),this._indexBuffer&&this._indexBuffer.reshuffle(e.index.count,e.index.operations)}}export{h as MappedMesh};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nclass t{constructor(t){this._pos=0,this._buffer=t,this._i32View=new Int32Array(this._buffer),this._f32View=new Float32Array(this._buffer)}readInt32(){return this._i32View[this._pos++]}readF32(){return this._f32View[this._pos++]}}export{t as default};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport t from\"../DisplayEntity.js\";import{unpackDataView as e}from\"../shaderGraph/techniques/mesh/dataViewUtils.js\";import i from\"../util/Reader.js\";import{deserializeList as r}from\"../util/serializationUtils.js\";function o(e){if(!e)return null;return{entities:r(new i(e.entities),t),vertexData:e.data.map(a)}}function a(t){const i=t.layout.stride,r=new DataView(t.vertices),o=[],a=t.vertices.byteLength/i;let s=0;for(let n=0;n<a;n++){const a={};for(const i of t.layout.attributes){let t=`${i.offset} ${i.name}`,o=e(r,i,s);if(i.packPrecisionFactor)if(t+=` (precision: ${i.packPrecisionFactor})`,\"number\"==typeof o)o/=i.packPrecisionFactor;else for(let e=0;e<o.length;e++)o[e]/=i.packPrecisionFactor;a[t]=o}s+=i,o.push(a)}return{vertices:o,layout:t.layout}}export{o as debugMeshDataInfo};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport has from\"../../../../core/has.js\";import e from\"../../../../core/Logger.js\";import{create as t}from\"../../../../core/libs/gl-matrix-2/factories/mat2df32.js\";import{AFeatureTile as s}from\"./AFeatureTile.js\";import{RESHUFFLING_EXEMPT_MEMORY_BYTES as i,RESHUFFLING_TARGET_MEMORY_EFFICIENCY as r,RESHUFFLING_EXEMPT_DRAW_CALLS as o,RESHUFFLING_TARGET_DRAW_EFFICIENCY as d,tileSize as n}from\"./definitions.js\";import h from\"./DisplayEntity.js\";import{FeatureBatchingStrategy as a}from\"./enums.js\";import{DisplayList as f}from\"./FeatureDisplayList.js\";import{ReshufflePlan as l}from\"./ReshufflePlan.js\";import{LabelMetric as u}from\"./collisions/LabelMetric.js\";import{MappedMesh as m}from\"./cpuMapped/MappedMesh.js\";import{debugMeshDataInfo as p}from\"./mesh/meshDebugUtils.js\";import _ from\"./util/Reader.js\";import{deserializeList as c}from\"./util/serializationUtils.js\";const y=()=>e.getLogger(\"esri.views.2d.engine.webgl.FeatureTile\");let g=0;class b extends s{constructor(e,s,i,r,o=!1){super(e,s,i,r),this._meshes=new Map,this._entities=[],this._invalidated=!1,this._nextUploadAllowed=!1,this.tileAge=g++,this._metrics=[],this._entityIds=new Set,this._entityIdsFromBuffer=new Set,this._attributeEpoch=0,this._encounteredEnd=!1,this.visible=!0,this.transforms.labelMat2d=t(),this.enableDeferredUploads=o}destroy(){super.destroy(),this.clear()}clear(){for(const e of this._meshes.values())e.destroy();this._meshes.clear(),this._entities=[],this._metrics=[],this._displayList=null,this._invalidated=!0,this._entityIds.clear(),this._nextUploadAllowed=!0}beforeRender(e){super.beforeRender(e),this._needsReshuffle&&e.reshuffleManager.schedule(this)}tryReady(e){const t=this._invalidated&&!this._uploadAllowed;return!(this._isReady||t||!this._encounteredEnd||!(e>=this._attributeEpoch))&&(has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.ready [epoch=${e}]`),this.ready(),this.requestRender(),!0)}get labelMetrics(){return this._metrics}get hasData(){return!!this._meshes.size}get needsUpload(){return this._invalidated}get _uploadAllowed(){return!this.enableDeferredUploads||this._nextUploadAllowed}upload(){this._nextUploadAllowed=!0}getDisplayList(e,t,s=a.BATCHING){if(this._uploadAllowed&&this._invalidated){this._entities.sort(((e,t)=>{const s=t.sortKey,i=e.sortKey;return i===s?e.id-t.id:i-s})),s===a.BATCHING&&this.reshuffle(!0),this._displayList=f.fromDisplayEntities(this._entities,this,t,s);for(const e of this._meshes.values())e.upload();this.debugInfo.display.length=this._displayList.length,this.debugInfo.display.minOrderedLength=this._displayList.minOrderedLength,this.debugInfo.display.minUnorderedLength=this._displayList.minUnorderedLength,this.requestRender(),this._invalidated=!1,this._nextUploadAllowed=!1}return this._displayList}getMesh(e){if(!this._meshes.has(e))throw new Error(`InternalError: Unable to find VAO for instance: ${e}`);return this._meshes.get(e)}getSortKeys(e){const t=new Map;for(const{id:s,sortKey:i}of this._entities)if(e.has(s)&&t.set(s,i),t.size===e.size)break;return t}onMessage(e){switch(e.type){case\"append\":this._onAppendMessage(e);break;case\"update\":this._onUpdateMessage(e)}if(this._aggregateMemoryStats(),this.requestRender(),e.end){if(has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.end [epoch=${e.attributeEpoch}]`),!e.attributeEpoch)throw new Error(\"InternalError: Attribute epoch not defined.\");this._attributeEpoch=e.attributeEpoch,this._encounteredEnd=!0}}_onAppendMessage(e){if(has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.append`,{append:p(e?.append)}),e.clear&&this.clear(),!e.append)return;const t=c(new _(e.append.entities),h);this._insert(t,e.append.data,!1)}_onUpdateMessage(e){has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.update`,{isPixelBuffer:e.isPixelBuffer,modify:p(e.modify),remove:e.remove});const t=c(new _(e.modify.entities),h),s=t.map((e=>e.id)),i=e.isPixelBuffer??!1,r=[...e.remove,...s];i?this._removeByIdsFromBuffer(r):this._removeByIds(r),this._insert(t,e.modify.data,i)}reshuffle(e=!1){if(this.destroyed)return;const t=new Map;for(const s of this._entities)for(const i of s.records){const s=this._meshes.get(i.instanceId);let r=t.get(s);r||(r=new l(e),t.set(s,r)),r.copyRecord(i)}for(const[s,i]of t)s.reshuffle(i);this._invalidated=!0,this._aggregateMemoryStats(),has(\"esri-2d-update-debug\")&&y().info(`Tile ${this.key.id} was reshuffled.`)}copyPixelBufferedEntitesFrom(e,t,s,i){const r=s*n,o=i*n;for(const d of e._entities){let s=null;for(const i of d.records)if(i.overlaps&t){const t=this._ensureMesh(i.instanceId),n=e.getMesh(i.instanceId),a=t.copyRecordFrom(n,i,r,o);s||(s=new h(d.id,d.sortKey),this._entityIdsFromBuffer.add(d.id),this._entities.push(s)),s.records.push(a)}}this._invalidated=!0}_ensureMesh(e){return this._meshes.has(e)||this._meshes.set(e,new m(this._stage.bufferPool)),this._meshes.get(e)}_insert(e,t,s){if(!e.length)return;this._removeDuplicatedBufferedEntites(e);const i=this._insertVertexData(t);for(const r of e){for(const e of r.records)e.updateBaseOffsets(i.get(e.instanceId));s?this._tryInsertBufferedEntity(r):this._insertEntity(r)}this._invalidated=!0}_insertVertexData(e){const t=new Map;for(const s of e){const{instanceId:e}=s,i=this._ensureMesh(e).append(s);if(s.metrics){const e=c(new _(s.metrics),u)??[];this._metrics.push(...e)}t.set(e,i)}return t}_insertEntity(e){has(\"esri-2d-update-debug\")&&this._entityIds.has(e.id)&&console.error(`Tile ${this.key.id} insertEnitty: Already have entityId ${e.id}`),this._entityIds.add(e.id),this._entities.push(e)}_tryInsertBufferedEntity(e){this._entityIds.has(e.id)?this._removeRecordsFromMesh(e.records):(this._entityIdsFromBuffer.add(e.id),this._entities.push(e))}_removeDuplicatedBufferedEntites(e){if(!this._entityIdsFromBuffer.size)return;const t=[];for(const s of e)this._entityIdsFromBuffer.has(s.id)&&t.push(s.id);this._removeByIds(t)}_removeByIdsFromBuffer(e){this._removeByIds(e.filter((e=>this._entityIdsFromBuffer.has(e))))}_removeByIds(e){if(0===e.length)return;const t=new Set(e),s=[];for(const i of this._entities)t.has(i.id)?this._remove(i):s.push(i);this._entities=s,this._invalidated=!0}_remove(e){this._removeRecordsFromMesh(e.records),this._entityIds.delete(e.id),this._entityIdsFromBuffer.delete(e.id)}_removeRecordsFromMesh(e){for(const t of e){const{instanceId:e,indexStart:s,indexCount:i,vertexStart:r,vertexCount:o}=t;this._meshes.get(e)?.remove(s,i,r,o)}}_aggregateMemoryStats(){this.debugInfo.memory.bytesUsed=0,this.debugInfo.memory.bytesReserved=0;for(const[e,t]of this._meshes)this.debugInfo.memory.bytesUsed+=t.memoryStats.bytesUsed,this.debugInfo.memory.bytesReserved+=t.memoryStats.bytesReserved}get _needsReshuffle(){if(this.destroyed)return!1;const{bytesUsed:e,bytesReserved:t}=this.debugInfo.memory,s=e/t,{minOrderedLength:n,length:h}=this.debugInfo.display;return t>i&&s<r||h>o&&n/h<d}}export{b as FeatureTile};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{fromValues as r}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{createProgramDescriptor as e}from\"../Utils.js\";import t from\"./WGLBrush.js\";import{background as s}from\"../shaders/BackgroundPrograms.js\";import{StencilOperation as o,CompareFunction as i,PrimitiveType as a,DataType as n}from\"../../../../webgl/enums.js\";import{createProgram as l}from\"../../../../webgl/ProgramTemplate.js\";const m=()=>e(\"clip\",{geometry:[{location:0,name:\"a_pos\",count:2,type:n.SHORT}]});class p extends t{constructor(){super(...arguments),this._color=r(0,1,0,1)}dispose(){this._program&&this._program.dispose()}prepareState({context:r}){r.setStencilTestEnabled(!0),r.setBlendingEnabled(!1),r.setFaceCullingEnabled(!1),r.setColorMask(!1,!1,!1,!1),r.setStencilOp(o.KEEP,o.KEEP,o.REPLACE),r.setStencilWriteMask(255),r.setStencilFunction(i.ALWAYS,0,255)}draw(r,e){const{context:t,state:o,requestRender:i,allowDelayedRender:p}=r,c=m(),d=e.getVAO(t,o,c.attributes,c.bufferLayouts);null!=d.indexBuffer&&(this._program||(this._program=l(t,s)),!p||null==i||this._program.compiled?(t.useProgram(this._program),this._program.setUniform2fv(\"u_coord_range\",[1,1]),this._program.setUniform4fv(\"u_color\",this._color),this._program.setUniformMatrix3fv(\"u_dvsMat3\",o.displayMat3),t.bindVAO(d),t.drawElements(a.TRIANGLES,d.indexBuffer.size,n.UNSIGNED_INT,0),t.bindVAO()):i())}}export{p as default};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{textureBindingBitmap as e}from\"../definitions.js\";import{createProgramDescriptor as t}from\"../Utils.js\";import r from\"./WGLBrush.js\";import{BlendFactor as s,CompareFunction as n,PrimitiveType as o,DataType as a}from\"../../../../webgl/enums.js\";const i=()=>t(\"overlay\",{geometry:[{location:0,name:\"a_pos\",count:2,type:a.FLOAT}],tex:[{location:1,name:\"a_uv\",count:2,type:a.UNSIGNED_SHORT}]});class u extends r{constructor(){super(...arguments),this._desc={vsPath:\"overlay/overlay\",fsPath:\"overlay/overlay\",attributes:new Map([[\"a_pos\",0],[\"a_uv\",1]])}}dispose(){}prepareState({context:e}){e.setBlendingEnabled(!0),e.setColorMask(!0,!0,!0,!0),e.setBlendFunctionSeparate(s.ONE,s.ONE_MINUS_SRC_ALPHA,s.ONE,s.ONE_MINUS_SRC_ALPHA),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(n.GREATER,255,255)}draw(t,r){const{context:s,painter:n,requestRender:a,allowDelayedRender:u}=t;if(!r.isReady)return;const{computedOpacity:c,dvsMat3:l,isWrapAround:d,perspectiveTransform:m,texture:p}=r;t.timeline.begin(this.name);const f=n.materialManager.getProgram(this._desc);if(u&&null!=a&&!f.compiled)return void a();const _=i(),v=r.getVAO(s,_.bufferLayouts,_.attributes);if(!v)return;s.bindVAO(v),s.useProgram(f),s.bindTexture(p,e),f.setUniformMatrix3fv(\"u_dvsMat3\",l),f.setUniform1i(\"u_texture\",e),f.setUniform1f(\"u_opacity\",c),f.setUniform2fv(\"u_perspective\",m);const y=d?10:4;s.drawArrays(o.TRIANGLE_STRIP,0,y),s.bindVAO(),t.timeline.end(this.name)}}export{u as default};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{fromValues as e}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{Pos2b as r}from\"../DefaultVertexAttributeLayouts.js\";import t from\"./WGLBrush.js\";import{background as i}from\"../shaders/BackgroundPrograms.js\";import{BufferObject as s}from\"../../../../webgl/BufferObject.js\";import{StencilOperation as o,Face as a,CompareFunction as l,PrimitiveType as n,Usage as d}from\"../../../../webgl/enums.js\";import{createProgram as m}from\"../../../../webgl/ProgramTemplate.js\";import{VertexArrayObject as c}from\"../../../../webgl/VertexArrayObject.js\";class _ extends t{constructor(){super(...arguments),this._color=e(1,0,0,1),this._initialized=!1}dispose(){this._solidProgram&&(this._solidProgram.dispose(),this._solidProgram=null),this._solidVertexArrayObject&&(this._solidVertexArrayObject.dispose(),this._solidVertexArrayObject=null)}prepareState({context:e}){e.setDepthWriteEnabled(!1),e.setDepthTestEnabled(!1),e.setStencilTestEnabled(!0),e.setBlendingEnabled(!1),e.setColorMask(!1,!1,!1,!1),e.setStencilOp(o.KEEP,o.KEEP,o.REPLACE),e.setStencilWriteMask(255)}draw(e,r){const{context:t,requestRender:i,allowDelayedRender:s}=e;this._initialized||this._initialize(t),!s||null==i||this._solidProgram.compiled?(t.setStencilFunctionSeparate(a.FRONT_AND_BACK,l.GREATER,r.stencilRef,255),t.bindVAO(this._solidVertexArrayObject),t.useProgram(this._solidProgram),this._solidProgram.setUniformMatrix3fv(\"u_dvsMat3\",r.transforms.displayViewScreenMat3),this._solidProgram.setUniform2fv(\"u_coord_range\",[r.rangeX,r.rangeY]),this._solidProgram.setUniform1f(\"u_depth\",0),this._solidProgram.setUniform4fv(\"u_color\",this._color),t.drawArrays(n.TRIANGLE_STRIP,0,4),t.bindVAO()):i()}_initialize(e){if(this._initialized)return!0;const t=m(e,i);if(!t)return!1;const o=new Int8Array([0,0,1,0,0,1,1,1]),a=s.createVertex(e,d.STATIC_DRAW,o),l=new c(e,i.attributes,r,{geometry:a});return this._solidProgram=t,this._solidVertexArrayObject=l,this._initialized=!0,!0}}export{_ as default};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{fromValues as e}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{Pos2b as t}from\"../DefaultVertexAttributeLayouts.js\";import{FeatureTile as r}from\"../FeatureTile.js\";import o from\"./WGLBrush.js\";import{background as i}from\"../shaders/BackgroundPrograms.js\";import{tileInfo as s}from\"../shaders/TileInfoPrograms.js\";import{BufferObject as n}from\"../../../../webgl/BufferObject.js\";import{BlendFactor as l,PrimitiveType as a,Usage as f,TextureWrapMode as m,TextureSamplingMode as u}from\"../../../../webgl/enums.js\";import{createProgram as c}from\"../../../../webgl/ProgramTemplate.js\";import{Texture as d}from\"../../../../webgl/Texture.js\";import{TextureDescriptor as h}from\"../../../../webgl/TextureDescriptor.js\";import{VertexArrayObject as g}from\"../../../../webgl/VertexArrayObject.js\";const _=512,x=512,b=16,p=8,T=(x-2*p)/5;class y extends o{constructor(){super(...arguments),this._color=e(1,0,0,1)}dispose(){this._outlineProgram?.dispose(),this._outlineProgram=null,this._tileInfoProgram?.dispose(),this._tileInfoProgram=null,this._outlineVertexArrayObject?.dispose(),this._outlineVertexArrayObject=null,this._tileInfoVertexArrayObject?.dispose(),this._tileInfoVertexArrayObject=null,this._ctx=null}prepareState({context:e}){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(l.ONE,l.ONE_MINUS_SRC_ALPHA,l.ONE,l.ONE_MINUS_SRC_ALPHA),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!1)}draw(e,t){const{context:o,requestRender:i,allowDelayedRender:s}=e;if(!t.isReady&&t instanceof r&&t.hasData)return;if(this._loadWGLResources(o),s&&null!=i&&(!this._outlineProgram.compiled||!this._tileInfoProgram.compiled))return void i();o.bindVAO(this._outlineVertexArrayObject),o.useProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.displayViewScreenMat3),this._outlineProgram.setUniform2f(\"u_coord_range\",t.rangeX,t.rangeY),this._outlineProgram.setUniform1f(\"u_depth\",0),this._outlineProgram.setUniform4fv(\"u_color\",this._color),o.drawArrays(a.LINE_STRIP,0,4);const n=this._getTexture(o,t);n?(o.bindVAO(this._tileInfoVertexArrayObject),o.useProgram(this._tileInfoProgram),o.bindTexture(n,0),this._tileInfoProgram.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.displayViewScreenMat3),this._tileInfoProgram.setUniform1f(\"u_depth\",0),this._tileInfoProgram.setUniform2f(\"u_coord_ratio\",t.rangeX/t.width,t.rangeY/t.height),this._tileInfoProgram.setUniform2f(\"u_delta\",0,0),this._tileInfoProgram.setUniform2f(\"u_dimensions\",n.descriptor.width,n.descriptor.height),o.drawArrays(a.TRIANGLE_STRIP,0,4),o.bindVAO()):o.bindVAO()}_loadWGLResources(e){if(this._outlineProgram&&this._tileInfoProgram)return;const r=c(e,i),o=c(e,s),l=new Int8Array([0,0,1,0,1,1,0,1]),a=n.createVertex(e,f.STATIC_DRAW,l),m=new g(e,i.attributes,t,{geometry:a}),u=new Int8Array([0,0,1,0,0,1,1,1]),d=n.createVertex(e,f.STATIC_DRAW,u),h=new g(e,s.attributes,t,{geometry:d});this._outlineProgram=r,this._tileInfoProgram=o,this._outlineVertexArrayObject=m,this._tileInfoVertexArrayObject=h}_getTexture(e,t){if(!this._ctx){const e=document.createElement(\"canvas\");e.width=_,e.height=x,this._ctx=e.getContext(\"2d\")}if(!t.tileDebugInfoTexture){const r=new h;r.wrapMode=m.CLAMP_TO_EDGE,r.samplingMode=u.LINEAR,r.isImmutable=!0,r.width=_,r.height=x,t.tileDebugInfoTexture=new d(e,r)}const r=this._ctx;r.clearRect(0,0,r.canvas.width,r.canvas.height),r.textAlign=\"left\",r.textBaseline=\"top\",r.font=b-2+\"px sans-serif\",r.lineWidth=2,r.fillStyle=\"white\",r.strokeStyle=\"black\";const{debugSlot:o}=t;let i=p+T*o;const s=`${o}) ${t.key.id} (${t.constructor.name})`;r.strokeText(s,p,i),r.fillText(s,p,i),i+=b;const{debugInfo:n}=t;if(n){const{length:e,minOrderedLength:t,minUnorderedLength:o,triangleCount:s}=n.display;if(e>0){const t=`Length: ${e}`;r.strokeText(t,p,i),r.fillText(t,p,i),i+=b}if(t){const e=`Min ordered length: ${t}`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}if(o){const e=`Min unordered length: ${o}`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}if(s>0){s>1e5&&(r.fillStyle=\"red\",r.strokeStyle=\"white\");const e=`Triangle count: ${s}`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}const{bytesUsed:l,bytesReserved:a}=n.memory;if(r.fillStyle=\"white\",r.strokeStyle=\"black\",l>0||a>0){const e=`Memory usage: ${l} of ${a} bytes`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}}return t.tileDebugInfoTexture.setData(r.canvas),t.tileDebugInfoTexture}}export{y as default};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport r from\"./webgl/brushes/BrushBitmap.js\";import s from\"./webgl/brushes/BrushClip.js\";import e from\"./webgl/brushes/BrushOverlay.js\";import l from\"./webgl/brushes/WGLBrushStencil.js\";import o from\"./webgl/brushes/WGLBrushTileDebugInfo.js\";import{WGLBrushVTLBackground as b}from\"./webgl/brushes/WGLBrushVTLBackground.js\";import{WGLBrushVTLCircle as i}from\"./webgl/brushes/WGLBrushVTLCircle.js\";import{WGLBrushVTLFill as m}from\"./webgl/brushes/WGLBrushVTLFill.js\";import{WGLBrushVTLLine as u}from\"./webgl/brushes/WGLBrushVTLLine.js\";import{WGLBrushVTLSymbol as t}from\"./webgl/brushes/WGLBrushVTLSymbol.js\";const h={clip:s,stencil:l,bitmap:r,overlay:e,tileDebugInfo:o,vtlBackground:b,vtlFill:m,vtlLine:u,vtlCircle:i,vtlSymbol:t};export{h as brushes};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport e from\"../../../../core/Error.js\";import r from\"../../../../core/Logger.js\";import{e as t}from\"../../../../chunks/earcut.js\";import{set as n}from\"../../../../core/libs/gl-matrix-2/math/vec2.js\";import{create as o}from\"../../../../core/libs/gl-matrix-2/factories/vec2f64.js\";import{convertFromNestedArray as s,convertFromPolygon as i}from\"../../../../layers/graphics/featureConversionUtils.js\";import c from\"../../../../layers/graphics/OptimizedGeometry.js\";import{i1616to32 as a}from\"./number.js\";import{BufferObject as f}from\"../../../webgl/BufferObject.js\";import{PrimitiveType as m,Usage as h,DataType as u}from\"../../../webgl/enums.js\";const l=r=>{switch(r.BYTES_PER_ELEMENT){case 1:return u.UNSIGNED_BYTE;case 2:return u.UNSIGNED_SHORT;case 4:return u.UNSIGNED_INT;default:throw new e(\"Cannot get DataType of array\")}},y=(e,r,t,n)=>{let o=0;for(let s=1;s<t;s++){const t=e[2*(r+s-1)],n=e[2*(r+s-1)+1];o+=(e[2*(r+s)]-t)*(e[2*(r+s)+1]+n)}return n?o>0:o<0},x=({coords:e,lengths:r},n)=>{const o=[];for(let s=0,i=0;s<r.length;i+=r[s],s+=1){const c=i,a=[];for(;s<r.length-1&&y(e,i+r[s],r[s+1],n);s+=1,i+=r[s])a.push(i+r[s]-c);const f=e.slice(2*c,2*(i+r[s])),m=t(f,a,2);for(const e of m)o.push(e+c)}return o};class g{constructor(e,r,t,n=!1){this._cache={},this.vertices=e,this.indices=r,this.primitiveType=t,this.isMapSpace=n}static fromPath(e){const r=s(new c,e.path,!1,!1),t=r.coords,n=new Uint32Array(x(r,!0)),o=new Uint32Array(t.length/2);for(let s=0;s<o.length;s++)o[s]=a(Math.floor(t[2*s]),Math.floor(t[2*s+1]));return new g({geometry:o},n,m.TRIANGLES)}static fromGeometry(t,n){const o=n.geometry?.type;switch(o){case\"polygon\":return g.fromPolygon(t,n.geometry);case\"extent\":return g.fromMapExtent(t,n.geometry);default:return r.getLogger(\"esri.views.2d.engine.webgl.Mesh2D\").error(new e(\"mapview-bad-type\",`Unable to create a mesh from type ${o}`,n)),g.fromScreenExtent({xmin:0,ymin:0,xmax:1,ymax:1})}}static fromPolygon(e,r){const t=i(new c,r,!1,!1),s=t.coords,f=new Uint32Array(x(t,!1)),h=new Uint32Array(s.length/2),u=o(),l=o();for(let o=0;o<h.length;o++)n(u,s[2*o],s[2*o+1]),e.toScreen(l,u),h[o]=a(Math.floor(l[0]),Math.floor(l[1]));return new g({geometry:h},f,m.TRIANGLES,!0)}static fromScreenExtent({xmin:e,xmax:r,ymin:t,ymax:n}){const o={geometry:new Uint32Array([a(e,t),a(r,t),a(e,n),a(e,n),a(r,t),a(r,n)])},s=new Uint32Array([0,1,2,3,4,5]);return new g(o,s,m.TRIANGLES)}static fromMapExtent(e,r){const[t,n]=e.toScreen([0,0],[r.xmin,r.ymin]),[o,s]=e.toScreen([0,0],[r.xmax,r.ymax]),i={geometry:new Uint32Array([a(t,n),a(o,n),a(t,s),a(t,s),a(o,n),a(o,s)])},c=new Uint32Array([0,1,2,3,4,5]);return new g(i,c,m.TRIANGLES)}destroy(){null!=this._cache.indexBuffer&&this._cache.indexBuffer.dispose();for(const e in this._cache.vertexBuffers)null!=this._cache.vertexBuffers[e]&&this._cache.vertexBuffers[e].dispose()}get elementType(){return l(this.indices)}getIndexBuffer(e,r=h.STATIC_DRAW){return this._cache.indexBuffer||(this._cache.indexBuffer=f.createIndex(e,r,this.indices)),this._cache.indexBuffer}getVertexBuffers(e,r=h.STATIC_DRAW){return this._cache.vertexBuffers||(this._cache.vertexBuffers=Object.keys(this.vertices).reduce(((t,n)=>({...t,[n]:f.createVertex(e,r,this.vertices[n])})),{})),this._cache.vertexBuffers}}export{g as default};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport e from\"../../../../core/Error.js\";import t from\"../../../../core/Logger.js\";import{watch as r}from\"../../../../core/reactiveUtils.js\";import{create as s}from\"../../../../core/libs/gl-matrix-2/factories/mat3f32.js\";import{DisplayObject as i}from\"../DisplayObject.js\";import a from\"./Mesh2D.js\";import{createScreenExtent as o}from\"../../support/clippingUtils.js\";import{VertexArrayObject as h}from\"../../../webgl/VertexArrayObject.js\";class c extends i{constructor(e,t){super(),this._clip=t,this._cache={},this.stage=e,this._handle=r((()=>t.version),(()=>this._invalidate())),this.ready()}static fromClipArea(e,t){return new c(e,t)}_destroyGL(){null!=this._cache.mesh&&(this._cache.mesh.destroy(),this._cache.mesh=null),null!=this._cache.vao&&(this._cache.vao.dispose(),this._cache.vao=null)}destroy(){this._destroyGL(),this._handle.remove()}getVAO(e,t,r,s){const[i,a]=t.size;if(\"geometry\"!==this._clip.type&&this._lastWidth===i&&this._lastHeight===a||(this._lastWidth=i,this._lastHeight=a,this._destroyGL()),null==this._cache.vao){const i=this._createMesh(t,this._clip),a=i.getIndexBuffer(e),o=i.getVertexBuffers(e);this._cache.mesh=i,this._cache.vao=new h(e,r,s,o,a)}return this._cache.vao}_createTransforms(){return{displayViewScreenMat3:s()}}_invalidate(){this._destroyGL(),this.requestRender()}_createMesh(r,s){switch(s.type){case\"rect\":return a.fromScreenExtent(o(s,r.size[0],r.size[1]));case\"path\":return a.fromPath(s);case\"geometry\":return a.fromGeometry(r,s);default:return t.getLogger(\"esri.views.2d.engine.webgl.ClippingInfo\").error(new e(\"mapview-bad-type\",\"Unable to create ClippingInfo mesh from clip of type: ${clip.type}\")),a.fromScreenExtent({xmin:0,ymin:0,xmax:1,ymax:1})}}}export{c as default};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport\"../../../../core/has.js\";import{brushes as s}from\"../brushes.js\";import{Container as e}from\"../Container.js\";import r from\"./ClippingInfo.js\";import{WGLDrawPhase as i}from\"./enums.js\";class n extends e{set clips(s){super.clips=s,this._updateClippingInfo(s)}renderChildren(s){s.painter.setPipelineState(null),null==this._renderPasses&&(this._renderPasses=this.prepareRenderPasses(s.painter));for(const r of this._renderPasses)try{r.render(s)}catch(e){}}prepareRenderPasses(e){return[e.registerRenderPass({name:\"clip\",brushes:[s.clip],target:()=>this._clippingInfos,drawPhase:i.MAP|i.LABEL|i.LABEL_ALPHA|i.DEBUG|i.HIGHLIGHT})]}_updateClippingInfo(s){null!=this._clippingInfos&&(this._clippingInfos.forEach((s=>s.destroy())),this._clippingInfos=null),null!=s&&s.length&&(this._clippingInfos=s.items.map((s=>r.fromClipArea(this.stage,s)))),this.requestRender()}}export{n as default};\n"],
  "mappings": "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",
  "names": ["h", "i", "t", "o", "r", "o", "e", "t", "i", "s", "n", "a", "d", "l", "c", "m", "p", "u", "h", "f", "_", "e", "o", "r", "e", "t", "n", "e", "n", "t", "a", "e", "n", "r", "s", "d", "r", "s", "t", "e", "a", "i", "n", "r", "n", "r", "t", "s", "i", "a", "o", "m", "l", "n", "c", "d", "f", "h", "p", "e", "a", "t", "e", "i", "s", "n", "r", "d", "h", "l", "o", "c", "u", "_", "N", "f", "g", "m", "y", "t", "e", "n", "n", "h", "a", "d", "t", "e", "r", "s", "i", "u", "o", "f", "n", "u", "a", "h", "e", "t", "r", "i", "o", "f", "s", "c", "d", "l", "_", "m", "x", "t", "o", "e", "n", "t", "s", "a", "i", "r", "b", "e", "s", "i", "r", "o", "n", "t", "N", "d", "a", "h", "m", "t", "r", "e", "o", "i", "p", "c", "d", "i", "u", "t", "e", "r", "s", "n", "a", "c", "l", "d", "m", "p", "f", "_", "y", "t", "r", "e", "i", "s", "o", "a", "l", "_", "b", "p", "y", "t", "r", "e", "o", "i", "s", "n", "l", "a", "m", "u", "d", "h", "h", "d", "u", "y", "s", "n", "l", "r", "y", "e", "t", "n", "o", "s", "x", "i", "c", "a", "f", "m", "g", "h", "u", "s", "e", "t", "r", "i", "a", "o", "g", "n", "n", "h", "s", "r", "e", "E"]
}
