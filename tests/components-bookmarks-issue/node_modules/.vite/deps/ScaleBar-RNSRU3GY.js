import {
  e as e4
} from "./chunk-EPOP3OQ6.js";
import "./chunk-HWBFFWYY.js";
import {
  v,
  w
} from "./chunk-3FTSPLRV.js";
import {
  e as e3
} from "./chunk-EAAEPSBY.js";
import {
  M
} from "./chunk-G7YFDDME.js";
import "./chunk-PCKG3UTS.js";
import "./chunk-3VMVD66K.js";
import "./chunk-I2X6UR6L.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import {
  c
} from "./chunk-BOAEEYBE.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-WNNYD62G.js";
import {
  m2 as m
} from "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import {
  D,
  e2
} from "./chunk-RGCWZ2KZ.js";
import {
  n as n2
} from "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import "./chunk-2SDMYJDE.js";
import "./chunk-TPLOIZC7.js";
import {
  u
} from "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import {
  R,
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import {
  f
} from "./chunk-MBGZKT2Z.js";
import {
  $,
  N,
  j,
  s2 as s
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  d
} from "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S,
  o,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/widgets/ScaleBar/css.js
var e5 = "esri-scale-bar";
var n3 = { base: e5, labelContainer: `${e5}__label-container`, rulerLabelContainer: `${e5}__label-container--ruler`, lineLabelContainer: `${e5}__label-container--line`, topLabelContainer: `${e5}__label-container--top`, bottomLabelContainer: `${e5}__label-container--bottom`, label: `${e5}__label`, line: `${e5}__line`, topLine: `${e5}__line--top`, bottomLine: `${e5}__line--bottom`, ruler: `${e5}__ruler`, rulerBlock: `${e5}__ruler-block`, barContainer: `${e5}__bar-container`, rulerBarContainer: `${e5}__bar-container--ruler`, lineBarContainer: `${e5}__bar-container--line` };

// node_modules/@arcgis/core/widgets/ScaleBar/ScaleBarViewModel.js
function g(e6) {
  return e6 > 0.5 ? { min: 0.5, max: 1 } : e6 > 0.2 ? { min: 0.2, max: 0.5 } : { min: 0.1, max: 0.2 };
}
function w2(e6, t) {
  switch (t) {
    case "metric":
      return e6 > 1e3 ? { distance: j(e6, "meters", "kilometers"), unit: "kilometer" } : e6 > 1 ? { distance: e6, unit: "meter" } : e6 > 0.01 ? { distance: j(e6, "meters", "centimeters"), unit: "centimeter" } : { distance: j(e6, "meters", "millimeters"), unit: "millimeter" };
    case "imperial":
    case "non-metric":
      return e6 > 1609.344 ? { distance: j(e6, "meters", "miles"), unit: "mile" } : e6 > 0.3048 ? { distance: j(e6, "meters", "feet"), unit: "foot" } : { distance: j(e6, "meters", "inches"), unit: "inch" };
  }
}
function y2(e6) {
  var _a;
  const { isWebMercator: t, wkt: r, wkt2: s2 } = e6;
  return t || (((_a = s2 || r) == null ? void 0 : _a.includes("WGS_1984_Web_Mercator")) ?? false);
}
function j2({ state: { paddedViewState: e6 }, spatialReference: t, width: r }) {
  return t.isWrappable && e6.worldScreenWidth < r;
}
function S2(e6, t) {
  const { x: r, y: s2 } = e6 ? R(t, true) : t;
  return [r, s2];
}
var v2 = class extends S {
  constructor(e6) {
    super(e6), this.scaleComputedFrom = c(), this.view = null;
  }
  get state() {
    var _a, _b;
    return ((_a = this.view) == null ? void 0 : _a.ready) && "2d" === ((_b = this.view) == null ? void 0 : _b.type) ? "ready" : "disabled";
  }
  getScaleBarProperties(e6, t) {
    if ("disabled" === this.state || isNaN(e6) || !t || !this.view)
      return null;
    const r = this._getDistanceInMeters();
    return null == r ? null : this._getScaleBarProps(e6, r, t);
  }
  _getDistanceInMeters() {
    const { state: e6, spatialReference: t } = this.view;
    if (!N(t))
      return null;
    const { isGeographic: r } = t, i = y2(t);
    if (!r && !i) {
      return e6.extent.width * ($(t) ?? 1);
    }
    const [o2, n4] = this._getScaleMeasuringPoints(), p = i || r && !w(t) ? f.WGS84 : t, u2 = new m({ paths: [[S2(i, o2), S2(i, n4)]], spatialReference: p }), h = M(u2, 10);
    let g2;
    try {
      [g2] = v([h], "meters");
    } catch {
      return null;
    }
    return g2;
  }
  _getScaleMeasuringPoints() {
    const e6 = this.view, { width: t, height: s2, position: i, spatialReference: o2 } = e6;
    if (j2(e6)) {
      const e7 = s(o2), { valid: t2 } = e7;
      return [new x(t2[0], 0, o2), new x(t2[1], 0, o2)];
    }
    let n4 = this.scaleComputedFrom.y - i[1];
    n4 > s2 ? n4 = s2 : n4 < 0 && (n4 = 0);
    const a2 = c(0, n4), c2 = c(t, n4);
    return [e6.toMap(a2), e6.toMap(c2)];
  }
  _getScaleBarProps(e6, t, r) {
    const s2 = this.view, i = e6 * t / (j2(s2) ? s2.state.paddedViewState.worldScreenWidth : s2.width);
    if (i < 1e-3)
      return null;
    const o2 = w2(i, r), { distance: n4, unit: a2 } = o2;
    let c2 = n4, m2 = 0;
    for (; c2 >= 1; )
      c2 /= 10, m2++;
    const { min: l, max: p } = g(c2), u2 = p / c2 >= c2 / l ? l : p;
    return { length: e6 * (u2 / c2), value: 10 ** m2 * u2, unit: a2 };
  }
};
e([y()], v2.prototype, "scaleComputedFrom", void 0), e([y({ readOnly: true })], v2.prototype, "state", null), e([y()], v2.prototype, "view", void 0), v2 = e([a("esri.widgets.ScaleBar.ScaleBarViewModel")], v2);
var M2 = v2;

// node_modules/@arcgis/core/widgets/ScaleBar.js
function v3(e6, t) {
  return u(e6, { style: "unit", unit: t, unitDisplay: "short" });
}
var f2 = class extends D {
  constructor(e6, t) {
    super(e6, t), this.messages = null, this.style = "line", this.viewModel = new M2();
  }
  initialize() {
    this.addHandles(d(() => {
      const { view: e6 } = this;
      return [e6 == null ? void 0 : e6.stationary, e6 == null ? void 0 : e6.center, e6 == null ? void 0 : e6.scale, e6 == null ? void 0 : e6.zoom];
    }, ([e6]) => {
      e6 && this.scheduleRender();
    }));
  }
  get icon() {
    return "actual-size";
  }
  set icon(e6) {
    this._overrideIfSome("icon", e6);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e6) {
    this._overrideIfSome("label", e6);
  }
  get unit() {
    return this._defaultUnit;
  }
  set unit(e6) {
    "non-metric" === e6 && o(n.getLogger(this), "unit", { replacement: "Please use 'imperial' instead of 'non-metric'.", see: "https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ScaleBar.html#unit", version: "4.27", warnOnce: true }), this._overrideIfSome("unit", e6);
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e6) {
    this.viewModel.view = e6;
  }
  render() {
    const e6 = "disabled" === this.viewModel.state, t = { [e3.disabled]: e6 };
    let r, s2;
    if (!e6) {
      const { unit: e7, style: t2 } = this, i = "metric" === e7 || "dual" === e7, o2 = 100, l = "dual" === e7 ? "line" : t2;
      if ("imperial" === e7 || "non-metric" === e7 || "dual" === e7) {
        const e8 = this.viewModel.getScaleBarProperties(o2, "imperial");
        e8 && (s2 = "ruler" === l ? this._renderRuler(e8) : this._renderLine(e8, "bottom"));
      }
      if (i) {
        const e8 = this.viewModel.getScaleBarProperties(o2, "metric");
        e8 && (r = "ruler" === l ? this._renderRuler(e8) : this._renderLine(e8, "top"));
      }
    }
    return n2("div", { afterCreate: this._handleRootCreateOrUpdate, afterUpdate: this._handleRootCreateOrUpdate, bind: this, class: this.classes(n3.base, e3.widget, t) }, r, s2);
  }
  _renderRuler(e6) {
    const { length: t, unit: r, value: s2 } = e6, i = Math.round(t), o2 = v3(s2, r);
    return n2("div", { class: this.classes(n3.barContainer, n3.rulerBarContainer), key: n3.rulerBarContainer }, n2("div", { class: n3.ruler, styles: { width: `${i}px` } }, n2("div", { class: n3.rulerBlock }), n2("div", { class: n3.rulerBlock }), n2("div", { class: n3.rulerBlock }), n2("div", { class: n3.rulerBlock })), n2("div", { class: this.classes(n3.labelContainer, n3.rulerLabelContainer) }, n2("div", { class: n3.label }, "0"), n2("div", { class: n3.label }, o2)));
  }
  _renderLine(e6, t) {
    const { length: r, unit: s2, value: i } = e6, o2 = Math.round(r), l = v3(i, s2), a2 = { [n3.topLabelContainer]: "top" === t, [n3.bottomLabelContainer]: "bottom" === t }, n4 = n2("div", { class: this.classes(n3.labelContainer, n3.lineLabelContainer, a2), key: n3.labelContainer }, n2("div", { class: n3.label }, l)), c2 = { [n3.topLine]: "top" === t, [n3.bottomLine]: "bottom" === t }, p = n2("div", { class: this.classes(n3.line, c2), key: n3.line, styles: { width: `${o2}px` } });
    return n2("div", { class: this.classes(n3.barContainer, n3.lineBarContainer), key: n3.lineBarContainer }, [p, n4]);
  }
  _handleRootCreateOrUpdate(e6) {
    if (!this.viewModel)
      return;
    const { scaleComputedFrom: t } = this.viewModel, r = e6.getBoundingClientRect(), s2 = r.left + window.pageXOffset, o2 = r.top + window.pageYOffset, l = c(s2, o2);
    (l.x !== t.x || l.y !== t.y) && (this.viewModel.scaleComputedFrom = l);
  }
};
e([y(e4)], f2.prototype, "_defaultUnit", void 0), e([y()], f2.prototype, "icon", null), e([y()], f2.prototype, "label", null), e([y(), e2("esri/widgets/ScaleBar/t9n/ScaleBar")], f2.prototype, "messages", void 0), e([y({ type: ["ruler", "line"] })], f2.prototype, "style", void 0), e([y({ type: ["metric", "imperial", "dual", "non-metric"] })], f2.prototype, "unit", null), e([y()], f2.prototype, "view", null), e([y()], f2.prototype, "viewModel", void 0), f2 = e([a("esri.widgets.ScaleBar")], f2);
var w3 = f2;
export {
  w3 as default
};
//# sourceMappingURL=ScaleBar-RNSRU3GY.js.map
