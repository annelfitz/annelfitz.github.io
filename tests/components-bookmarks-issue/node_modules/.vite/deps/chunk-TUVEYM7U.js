import {
  l
} from "./chunk-5S637BGW.js";
import {
  f as f2
} from "./chunk-BFOJPIF7.js";
import {
  w
} from "./chunk-Y7RXGLGH.js";
import {
  q,
  v as v3
} from "./chunk-GKMVTGGM.js";
import {
  Z
} from "./chunk-QNG4TY7L.js";
import {
  e as e2
} from "./chunk-RW5QMWE6.js";
import {
  m
} from "./chunk-OKRW5W44.js";
import {
  A,
  j,
  p,
  v as v2
} from "./chunk-Q6RZBEZ6.js";
import {
  a as a3,
  c,
  e as e3
} from "./chunk-IYKBAIQE.js";
import {
  r as r2
} from "./chunk-DVIGFJWY.js";
import {
  d
} from "./chunk-ZIJHDTB7.js";
import {
  i
} from "./chunk-R4CJB3GP.js";
import {
  h2 as h,
  w2
} from "./chunk-X7VSXJWW.js";
import {
  i as i2,
  u as u4
} from "./chunk-AG6JXA4M.js";
import {
  S
} from "./chunk-G5EVVNIJ.js";
import {
  y as y2
} from "./chunk-HU5IGOTI.js";
import {
  d as d2
} from "./chunk-C24MEKSO.js";
import {
  u as u3
} from "./chunk-WDPG5BMO.js";
import {
  o as o2
} from "./chunk-TGXFDJCS.js";
import {
  o as o3
} from "./chunk-BOAEEYBE.js";
import {
  r
} from "./chunk-VIN55KNF.js";
import {
  s as s3
} from "./chunk-IOB3DJMR.js";
import {
  U
} from "./chunk-SAYWXQVM.js";
import {
  f
} from "./chunk-SBL4URUW.js";
import {
  o,
  v,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a2,
  s3 as s2,
  t,
  u2 as u,
  u3 as u2
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import {
  b
} from "./chunk-JGDJR5EV.js";
import {
  a,
  n2 as n,
  s
} from "./chunk-7RBRCL6S.js";
import {
  k
} from "./chunk-J2EGIWT6.js";

// node_modules/@arcgis/core/renderers/support/DictionaryLoader.js
var p2 = "esri.renderers.support.DictionaryLoader";
var d3 = { type: "CIMSimpleLineCallout", lineSymbol: { type: "CIMLineSymbol", symbolLayers: [{ type: "CIMSolidStroke", width: 0.5, color: [0, 0, 0, 255] }] } };
var g = class {
  constructor(e5, t3, i5) {
    this.config = null, this.fieldMap = null, this.url = null, this._ongoingRequests = /* @__PURE__ */ new Map(), this._symbolCache = new e2(100), this._dictionaryVersion = null, this._fieldIndex = null, this._dictionaryPromise = null, this.url = e5, this.config = t3, this.fieldMap = i5;
  }
  getSymbolFields() {
    return this._symbolFields;
  }
  async getSymbolAsync(t3, i5) {
    let s5;
    this._dictionaryPromise || (this._dictionaryPromise = this.fetchResources(i5));
    try {
      s5 = await this._dictionaryPromise;
    } catch (f5) {
      if (b(f5))
        return this._dictionaryPromise = null, null;
    }
    const r3 = this._dictionaryVersion && this._dictionaryVersion.since(4, 0), o5 = {};
    if (this.fieldMap)
      for (const e5 of this._symbolFields) {
        const i6 = v3(this.fieldMap[e5], this._fieldIndex);
        if (i6) {
          const s6 = t3.attributes[i6];
          o5[e5] = r3 ? s6 : null != s6 ? "" + t3.attributes[i6] : "";
        } else
          o5[e5] = "";
      }
    let l2 = null;
    try {
      l2 = s5 == null ? void 0 : s5(o5, i5);
    } catch (y4) {
      return null;
    }
    if (!l2 || "string" != typeof l2 || "invalid" === l2)
      return null;
    const a4 = l2.split(";"), c5 = [], m4 = [];
    for (const n3 of a4)
      if (n3)
        if (n3.includes("po:")) {
          const t4 = n3.substr(3).split("|");
          if (3 === t4.length) {
            const i6 = t4[0], s6 = t4[1];
            let r4 = t4[2];
            if ("DashTemplate" === s6)
              r4 = r4.split(" ").map((e5) => Number(e5));
            else if ("Color" === s6) {
              const t5 = new u3(r4).toRgba();
              r4 = [t5[0], t5[1], t5[2], 255 * t5[3]];
            } else
              r4 = Number(r4);
            m4.push({ primitiveName: i6, propertyName: s6, value: r4, defaultValue: null });
          }
        } else if (n3.includes("|")) {
          for (const e5 of n3.split("|"))
            if (this._itemNames.has(e5)) {
              c5.push(e5);
              break;
            }
        } else
          this._itemNames.has(n3) && c5.push(n3);
    const u8 = null == t3.geometry || !t3.geometry.hasZ && "point" === t3.geometry.type;
    return this._cimPartsToCIMSymbol(t3, c5, m4, u8, i5);
  }
  async fetchResources(e5) {
    if (this._dictionaryPromise)
      return this._dictionaryPromise;
    if (!this.url)
      return void n.getLogger(p2).error("no valid URL!");
    const s5 = U(this.url + "/resources/styles/dictionary-info.json", { responseType: "json", query: { f: "json" }, signal: null != e5 ? e5.signal : null }), [{ data: o5 }] = await Promise.all([s5, i2()]);
    if (!o5)
      throw this._dictionaryPromise = null, new s("esri.renderers.DictionaryRenderer", "Bad dictionary data!");
    const { authoringInfo: n3, dictionary_version: u8, expression: f5, itemsNames: h3 } = o5, y4 = f5;
    let d5 = false;
    u8 && (this._dictionaryVersion = r2.parse(u8), d5 = this._dictionaryVersion.since(4, 0)), this._refSymbolUrlTemplate = this.url + "/" + o5.cimRefTemplateUrl, this._itemNames = new Set(h3), this._symbolFields = n3.symbol;
    const g2 = {};
    if (this.config) {
      const e6 = this.config;
      for (const t3 in e6)
        g2[t3] = e6[t3];
    }
    if (n3.configuration)
      for (const t3 of n3.configuration)
        g2.hasOwnProperty(t3.name) || (g2[t3.name] = t3.value);
    const _2 = [];
    if ((e5 == null ? void 0 : e5.fields) && this.fieldMap)
      for (const t3 in this.fieldMap) {
        const i5 = this.fieldMap[t3], s6 = e5.fields.filter((e6) => e6.name.toLowerCase() === (i5 == null ? void 0 : i5.toLowerCase()));
        s6.length > 0 && _2.push({ ...s6[0], type: d5 ? s6[0].type : "esriFieldTypeString" });
      }
    _2.length > 0 && (this._fieldIndex = new Z(_2));
    const b2 = u4(y4, null != e5 ? e5.spatialReference : null, _2, g2).then((e6) => {
      const t3 = { scale: 0 };
      return (i5, s6) => {
        if (null == e6)
          return null;
        const r3 = e6.repurposeFeature({ geometry: null, attributes: i5 });
        return t3.scale = null != s6 ? s6.scale ?? void 0 : void 0, e6.evaluate({ $feature: r3, $view: t3 }, e6.services);
      };
    }).catch((e6) => (n.getLogger(p2).error("Creating dictionary expression failed:", e6), null));
    return this._dictionaryPromise = b2, b2;
  }
  async _cimPartsToCIMSymbol(e5, t3, i5, r3, o5) {
    const n3 = new Array(t3.length);
    for (let s5 = 0; s5 < t3.length; s5++)
      n3[s5] = this._getSymbolPart(t3[s5], o5);
    let l2 = await Promise.all(n3);
    const a4 = this.fieldMap;
    if (a4) {
      l2 = a(l2);
      for (const t4 of l2)
        f2.applyDictionaryTextOverrides(t4, e5, a4, this._fieldIndex, q(t4));
    }
    return new d({ data: _(l2, i5, r3) });
  }
  async _getSymbolPart(e5, i5) {
    const s5 = this._symbolCache.get(e5);
    if (s5)
      return s5;
    if (this._ongoingRequests.has(e5))
      return this._ongoingRequests.get(e5).then((e6) => e6.data);
    const r3 = this._refSymbolUrlTemplate.replaceAll(/\{itemName\}/gi, e5), o5 = U(r3, { responseType: "json", query: { f: "json" }, ...i5 });
    this._ongoingRequests.set(e5, o5), o5.finally(() => this._ongoingRequests.delete(e5));
    try {
      const t3 = await o5;
      return this._symbolCache.put(e5, t3.data), t3.data;
    } catch (n3) {
      throw n3;
    }
  }
};
function _(e5, t3, i5) {
  if (!e5 || 0 === e5.length)
    return null;
  const s5 = { ...e5[0] };
  if (e5.length > 1) {
    s5.symbolLayers = [];
    for (const t4 of e5) {
      const e6 = t4;
      s5.symbolLayers.unshift(...e6.symbolLayers);
    }
  }
  return i5 && (s5.callout = d3), { type: "CIMSymbolReference", symbol: s5, primitiveOverrides: t3 };
}

// node_modules/@arcgis/core/renderers/DictionaryRenderer.js
var p3;
var c2 = p3 = class extends v2(p) {
  constructor(e5) {
    super(e5), this.config = null, this.fieldMap = null, this.scaleExpression = null, this.scaleExpressionTitle = null, this.url = null, this.type = "dictionary";
  }
  get _loader() {
    return new g(this.url, this.config, this.fieldMap);
  }
  writeData(e5, r3) {
    e5 && (r3.scalingExpressionInfo = { expression: e5, returnType: "number" });
  }
  writeVisualVariables(e5, r3, s5, i5) {
    (i5 == null ? void 0 : i5.origin) || super.writeVisualVariables(e5, r3, s5, i5);
  }
  clone() {
    return new p3({ config: a(this.config), scaleExpression: this.scaleExpression, scaleExpressionTitle: this.scaleExpressionTitle, fieldMap: a(this.fieldMap), url: a(this.url), visualVariables: a(this.visualVariables) });
  }
  async getSymbolAsync(e5, r3) {
    return this._loader.getSymbolAsync(e5, r3);
  }
  async collectRequiredFields(e5, r3) {
    await this.collectVVRequiredFields(e5, r3), this.scaleExpression && await h(e5, r3, this.scaleExpression);
    for (const s5 in this.fieldMap) {
      const i5 = this.fieldMap[s5];
      r3.has(i5) && e5.add(i5);
    }
  }
  get arcadeRequired() {
    return true;
  }
  getSymbol() {
    return null;
  }
  getSymbols() {
    return [];
  }
  getAttributeHash() {
    return this.visualVariables && this.visualVariables.reduce((e5, r3) => e5 + r3.getAttributeHash(), "");
  }
  getMeshHash() {
    return `${this.url}-${JSON.stringify(this.fieldMap)}`;
  }
  getSymbolFields() {
    return this._loader.getSymbolFields();
  }
};
e([y({ type: g })], c2.prototype, "_loader", null), e([y({ type: Object, json: { read: { source: "configuration" }, write: { target: "configuration" } } })], c2.prototype, "config", void 0), e([y({ type: Object, json: { write: true } })], c2.prototype, "fieldMap", void 0), e([y({ type: String, json: { read: { source: "scalingExpressionInfo.expression" }, write: true } })], c2.prototype, "scaleExpression", void 0), e([r("scaleExpression")], c2.prototype, "writeData", null), e([y({ type: String, json: { read: { source: "scalingExpressionInfo.title" }, write: { target: "scalingExpressionInfo.title", overridePolicy(e5) {
  return { enabled: !!e5 && !!this.scaleExpression };
} } } })], c2.prototype, "scaleExpressionTitle", void 0), e([y({ type: String, json: { write: true } })], c2.prototype, "url", void 0), e([r("visualVariables")], c2.prototype, "writeVisualVariables", null), c2 = p3 = e([a2("esri.renderers.DictionaryRenderer")], c2);
var u5 = c2;

// node_modules/@arcgis/core/renderers/support/AttributeColorInfo.js
var n2;
var u6 = n2 = class extends f {
  constructor(e5) {
    super(e5), this.color = null, this.field = null, this.label = null, this.valueExpression = null, this.valueExpressionTitle = null;
  }
  castField(e5) {
    return null == e5 ? e5 : "function" == typeof e5 ? (n.getLogger(this).error(".field: field must be a string value"), null) : u(e5);
  }
  getAttributeHash() {
    return `${this.field}-${this.valueExpression}`;
  }
  clone() {
    var _a;
    return new n2({ color: (_a = this.color) == null ? void 0 : _a.clone(), field: this.field, label: this.label, valueExpression: this.valueExpression, valueExpressionTitle: this.valueExpressionTitle });
  }
};
e([y({ type: u3, json: { type: [Number], write: true } })], u6.prototype, "color", void 0), e([y({ type: String, json: { write: true } })], u6.prototype, "field", void 0), e([s3("field")], u6.prototype, "castField", null), e([y({ type: String, json: { write: true } })], u6.prototype, "label", void 0), e([y({ type: String, json: { write: true } })], u6.prototype, "valueExpression", void 0), e([y({ type: String, json: { write: true } })], u6.prototype, "valueExpressionTitle", void 0), u6 = n2 = e([a2("esri.renderers.support.AttributeColorInfo")], u6);
var c3 = u6;

// node_modules/@arcgis/core/renderers/support/DotDensityLegendOptions.js
var e4;
var p4 = e4 = class extends f {
  constructor() {
    super(...arguments), this.unit = null;
  }
  clone() {
    return new e4({ unit: this.unit });
  }
};
e([y({ type: String, json: { write: true } })], p4.prototype, "unit", void 0), p4 = e4 = e([a2("esri.renderers.support.DotDensityLegendOptions")], p4);
var i3 = p4;

// node_modules/@arcgis/core/renderers/DotDensityRenderer.js
var h2;
var m2 = h2 = class extends v2(p) {
  constructor(t3) {
    super(t3), this.attributes = null, this.backgroundColor = new u3([0, 0, 0, 0]), this.dotBlendingEnabled = true, this.dotShape = "square", this.dotSize = 1, this.legendOptions = null, this.outline = new d2(), this.dotValue = null, this.referenceScale = null, this.seed = 1, this.type = "dot-density";
  }
  calculateDotValue(t3) {
    if (null == this.referenceScale)
      return this.dotValue;
    const e5 = t3 / this.referenceScale * this.dotValue;
    return e5 < 1 ? 1 : e5;
  }
  getSymbol() {
    return new S({ outline: this.outline });
  }
  async getSymbolAsync() {
    return this.getSymbol();
  }
  getSymbols() {
    return [this.getSymbol()];
  }
  getAttributeHash() {
    var _a;
    return ((_a = this.attributes) == null ? void 0 : _a.reduce((t3, e5) => t3 + e5.getAttributeHash(), "")) ?? "";
  }
  getMeshHash() {
    return JSON.stringify(this.outline);
  }
  clone() {
    return new h2({ attributes: a(this.attributes), backgroundColor: a(this.backgroundColor), dotBlendingEnabled: a(this.dotBlendingEnabled), dotShape: a(this.dotShape), dotSize: a(this.dotSize), dotValue: a(this.dotValue), legendOptions: a(this.legendOptions), outline: a(this.outline), referenceScale: a(this.referenceScale), seed: a(this.seed), visualVariables: a(this.visualVariables), authoringInfo: this.authoringInfo && this.authoringInfo.clone() });
  }
  getControllerHash() {
    var _a;
    const t3 = (_a = this.attributes) == null ? void 0 : _a.map((t4) => t4.field || t4.valueExpression || "");
    return `${t3}-${this.outline && JSON.stringify(this.outline.toJSON()) || ""}`;
  }
  async collectRequiredFields(t3, e5) {
    await this.collectVVRequiredFields(t3, e5);
    for (const o5 of this.attributes ?? [])
      o5.valueExpression && await h(t3, e5, o5.valueExpression), o5.field && t3.add(o5.field);
  }
};
e([y({ type: [c3], json: { write: true } })], m2.prototype, "attributes", void 0), e([y({ type: u3, json: { write: true } })], m2.prototype, "backgroundColor", void 0), e([y({ type: Boolean, json: { write: true } })], m2.prototype, "dotBlendingEnabled", void 0), e([y({ type: String, json: { write: false } })], m2.prototype, "dotShape", void 0), e([y({ type: Number, json: { write: true } })], m2.prototype, "dotSize", void 0), e([y({ type: i3, json: { write: true } })], m2.prototype, "legendOptions", void 0), e([y({ type: d2, json: { default: null, write: true } })], m2.prototype, "outline", void 0), e([y({ type: Number, json: { write: true } })], m2.prototype, "dotValue", void 0), e([y({ type: Number, json: { write: true } })], m2.prototype, "referenceScale", void 0), e([y({ type: Number, json: { write: true } })], m2.prototype, "seed", void 0), e([o2({ dotDensity: "dot-density" })], m2.prototype, "type", void 0), m2 = h2 = e([a2("esri.renderers.DotDensityRenderer")], m2);
var y3 = m2;

// node_modules/@arcgis/core/renderers/support/HeatmapLegendOptions.js
var p5 = class extends i(f) {
  constructor() {
    super(...arguments), this.minLabel = null, this.maxLabel = null, this.title = null;
  }
};
e([y({ type: String, json: { write: true } })], p5.prototype, "minLabel", void 0), e([y({ type: String, json: { write: true } })], p5.prototype, "maxLabel", void 0), e([y({ type: String, json: { write: true } })], p5.prototype, "title", void 0), p5 = e([a2("esri.renderers.support.HeatmapLegendOptions")], p5);

// node_modules/@arcgis/core/renderers/HeatmapRenderer.js
var j2;
function D(t3) {
  if (null != t3) {
    const { maxDensity: e5, minDensity: i5, radius: s5 } = t3;
    if (null != e5 || null != i5 || null != s5) {
      const { blurRadius: e6, maxPixelIntensity: i6, minPixelIntensity: s6, ...r3 } = t3;
      return r3;
    }
  }
  return t3;
}
var I = j2 = class extends p {
  constructor(t3) {
    super(t3), this.authoringInfo = null, this.colorStops = [new l({ ratio: 0, color: new u3("rgba(255, 140, 0, 0)") }), new l({ ratio: 0.75, color: new u3("rgba(255, 140, 0, 1)") }), new l({ ratio: 0.9, color: new u3("rgba(255, 0,   0, 1)") })], this.field = null, this.legendOptions = null, this.maxDensity = 0.04, this.minDensity = 0, this.radius = 18, this.referenceScale = 0, this.type = "heatmap", this.valueExpression = null, this.valueExpressionTitle = null, this._warnedProps = { blurRadius: false, maxPixelIntensity: false, minPixelIntensity: false };
  }
  normalizeCtorArgs(t3) {
    return D(t3);
  }
  get blurRadius() {
    return a3(this.radius);
  }
  set blurRadius(t3) {
    const e5 = this.maxPixelIntensity, i5 = this.minPixelIntensity;
    this._set("radius", e3(t3)), this._warnAboutDeprecatedGaussianBlurProp("blurRadius", "radius"), this._set("maxDensity", e5 * this._pixelIntensityToDensity), this._set("minDensity", i5 * this._pixelIntensityToDensity);
  }
  get maxPixelIntensity() {
    return this.maxDensity / this._pixelIntensityToDensity;
  }
  set maxPixelIntensity(t3) {
    this._set("maxDensity", t3 * this._pixelIntensityToDensity), this._warnAboutDeprecatedGaussianBlurProp("maxPixelIntensity", "maxDensity");
  }
  get minPixelIntensity() {
    return this.minDensity / this._pixelIntensityToDensity;
  }
  set minPixelIntensity(t3) {
    this._set("minDensity", t3 * this._pixelIntensityToDensity), this._warnAboutDeprecatedGaussianBlurProp("minPixelIntensity", "minDensity");
  }
  get _pixelIntensityToDensity() {
    return 24 / (c ** 2 * this.blurRadius ** 4);
  }
  _warnAboutDeprecatedGaussianBlurProp(t3, e5) {
    if (this._warnedProps[t3])
      return;
    "user" === t(this).getDefaultOrigin() && (this._warnedProps[t3] = true, v(() => {
      o(n.getLogger(this), t3, { replacement: `${String(e5)} (suggested value: ${this._get(e5)})`, version: "4.24" });
    }));
  }
  read(t3, e5) {
    t3 = D(t3), super.read(t3, e5);
  }
  getSymbol() {
    return new y2();
  }
  async getSymbolAsync() {
    return this.getSymbol();
  }
  getSymbols() {
    return [this.getSymbol()];
  }
  async collectRequiredFields(t3, e5) {
    const i5 = this.field, s5 = this.valueExpression;
    i5 && "string" == typeof i5 && w2(t3, e5, i5), s5 && "string" == typeof s5 && await h(t3, e5, s5);
  }
  getAttributeHash() {
    return null;
  }
  getMeshHash() {
    return `${JSON.stringify(this.colorStops)}.${this.blurRadius}.${this.field}`;
  }
  clone() {
    return new j2({ authoringInfo: this.authoringInfo && this.authoringInfo.clone(), colorStops: a(this.colorStops), field: this.field, legendOptions: a(this.legendOptions), maxDensity: this.maxDensity, minDensity: this.minDensity, radius: this.radius, referenceScale: this.referenceScale, valueExpression: this.valueExpression, valueExpressionTitle: this.valueExpressionTitle });
  }
};
e([y({ type: j, json: { write: true, origins: { "web-scene": { write: false, read: false } } } })], I.prototype, "authoringInfo", void 0), e([y({ type: Number, json: { origins: { "portal-item": { write: true }, "web-map": { write: true } } } })], I.prototype, "blurRadius", null), e([y({ type: [l], json: { write: true } })], I.prototype, "colorStops", void 0), e([y({ type: String, json: { write: true } })], I.prototype, "field", void 0), e([y({ type: p5, json: { write: true } })], I.prototype, "legendOptions", void 0), e([y({ type: Number, json: { write: true } })], I.prototype, "maxDensity", void 0), e([y({ type: Number, json: { origins: { "portal-item": { write: true }, "web-map": { write: true } } } })], I.prototype, "maxPixelIntensity", null), e([y({ type: Number, json: { write: true } })], I.prototype, "minDensity", void 0), e([y({ type: Number, json: { origins: { "portal-item": { write: true }, "web-map": { write: true } } } })], I.prototype, "minPixelIntensity", null), e([y({ type: Number, cast: o3, json: { write: true } })], I.prototype, "radius", void 0), e([y({ type: Number, range: { min: 0 }, json: { default: 0, write: true } })], I.prototype, "referenceScale", void 0), e([o2({ heatmap: "heatmap" })], I.prototype, "type", void 0), e([y({ type: String, json: { write: true, origins: { "web-document": { write: false }, "portal-item": { write: false } } } })], I.prototype, "valueExpression", void 0), e([y({ type: String })], I.prototype, "valueExpressionTitle", void 0), e([y({ readOnly: true })], I.prototype, "_pixelIntensityToDensity", null), I = j2 = e([a2("esri.renderers.HeatmapRenderer")], I);
var S2 = I;

// node_modules/@arcgis/core/renderers/support/OthersCategory.js
var i4 = class extends i(f) {
  constructor() {
    super(...arguments), this.color = new u3([0, 0, 0, 0]), this.label = null, this.threshold = 0;
  }
};
e([y({ type: u3, json: { write: true } })], i4.prototype, "color", void 0), e([y({ type: String, json: { write: true } })], i4.prototype, "label", void 0), e([y({ type: Number, range: { min: 0, max: 1 }, json: { write: true } })], i4.prototype, "threshold", void 0), i4 = e([a2("esri.renderers.support.OthersCategory")], i4);

// node_modules/@arcgis/core/renderers/support/PieChartLegendOptions.js
var p6 = class extends i(f) {
  constructor() {
    super(...arguments), this.title = null;
  }
};
e([y({ type: String, json: { write: true } })], p6.prototype, "title", void 0), p6 = e([a2("esri.renderers.support.PieChartLegendOptions")], p6);

// node_modules/@arcgis/core/renderers/PieChartRenderer.js
var f3 = class extends v2(i(p)) {
  constructor(t3) {
    super(t3), this.attributes = null, this.backgroundFillSymbol = null, this.defaultColor = new u3([0, 0, 0, 0]), this.defaultLabel = null, this.holePercentage = 0, this.othersCategory = new i4(), this.legendOptions = null, this.outline = null, this.size = 12, this.type = "pie-chart";
  }
  getSymbol() {
    var _a;
    return new y2({ size: this.size ? this.size / 2 + (((_a = this.outline) == null ? void 0 : _a.width) || 0) : 0 });
  }
  async getSymbolAsync() {
    return this.getSymbol();
  }
  getSymbols() {
    return [this.getSymbol(), this.backgroundFillSymbol].filter(k);
  }
  getAttributeHash() {
    return this.visualVariables && this.visualVariables.reduce((t3, e5) => t3 + e5.getAttributeHash(), "");
  }
  getMeshHash() {
    return this.getSymbols().reduce((t3, e5) => t3 + JSON.stringify(e5), "");
  }
  async collectRequiredFields(t3, e5) {
    await this.collectVVRequiredFields(t3, e5);
    for (const o5 of this.attributes)
      o5.valueExpression && await h(t3, e5, o5.valueExpression), o5.field && t3.add(o5.field);
  }
};
e([y({ type: [c3], json: { write: true } })], f3.prototype, "attributes", void 0), e([y({ type: S, json: { default: null, write: true } })], f3.prototype, "backgroundFillSymbol", void 0), e([y({ type: u3, json: { write: true } })], f3.prototype, "defaultColor", void 0), e([y({ type: String, json: { write: true } })], f3.prototype, "defaultLabel", void 0), e([y({ type: Number, range: { min: 0, max: 1 }, json: { write: true } })], f3.prototype, "holePercentage", void 0), e([y({ type: i4, json: { write: true } })], f3.prototype, "othersCategory", void 0), e([y({ type: p6, json: { write: true } })], f3.prototype, "legendOptions", void 0), e([y({ type: d2, json: { default: null, write: true } })], f3.prototype, "outline", void 0), e([y({ type: Number, cast: o3, json: { write: true } })], f3.prototype, "size", void 0), e([o2({ pieChart: "pie-chart" })], f3.prototype, "type", void 0), f3 = e([a2("esri.renderers.PieChartRenderer")], f3);
var j3 = f3;

// node_modules/@arcgis/core/renderers/support/types.js
var m3 = { key: "type", base: p, typeMap: { heatmap: S2, simple: m, "unique-value": A, "class-breaks": w, "dot-density": y3, dictionary: u5, "pie-chart": j3 }, errorContext: "renderer" };
var u7 = { key: "type", base: p, typeMap: { simple: m, "unique-value": A, "class-breaks": w, heatmap: S2 }, errorContext: "renderer", validate: p7 };
function p7(e5) {
  switch (e5.type) {
    case "simple":
      return c4(e5);
    case "unique-value":
      return f4(e5);
    case "class-breaks":
      return d4(e5);
    case "heatmap":
      return e5;
  }
}
function c4(r3) {
  if (r3.symbol)
    return r3;
  n.getLogger("esri.renderers.support.types").error("Removed invalid 'simple' renderer without a symbol from web scene.");
}
function f4(r3) {
  const s5 = r3.uniqueValueInfos, t3 = s5 == null ? void 0 : s5.filter(({ symbol: r4, label: s6 }, t4) => (r4 || n.getLogger("esri.renderers.support.types").error(`Removed invalid unique value info ([${t4}] ${s6}) without a symbol from web scene.`), !!r4));
  return (t3 == null ? void 0 : t3.length) !== (s5 == null ? void 0 : s5.length) && (r3.uniqueValueInfos = t3), r3;
}
function d4(r3) {
  const s5 = r3.classBreakInfos, t3 = s5 == null ? void 0 : s5.filter(({ symbol: r4, label: s6 }, t4) => (r4 || n.getLogger("esri.renderers.support.types").error(`Removed invalid class break info ([${t4}] ${s6}) without a symbol from web scene.`), !!r4));
  return (t3 == null ? void 0 : t3.length) !== (s5 == null ? void 0 : s5.length) && (r3.classBreakInfos = t3), r3;
}

// node_modules/@arcgis/core/renderers/support/jsonUtils.js
function t2(e5, r3) {
  return o4(e5, null, r3);
}
var s4 = u2({ types: m3 });
function o4(r3, n3, t3) {
  return r3 ? r3 && (r3.styleName || r3.styleUrl) && "uniqueValue" !== r3.type ? ((t3 == null ? void 0 : t3.messages) && t3.messages.push(new s2("renderer:unsupported", "Only UniqueValueRenderer can be referenced from a web style, but found '" + r3.type + "'", { definition: r3, context: t3 })), null) : s4(r3, n3, t3) : null;
}

export {
  m3 as m,
  u7 as u,
  t2 as t,
  o4 as o
};
//# sourceMappingURL=chunk-TUVEYM7U.js.map
