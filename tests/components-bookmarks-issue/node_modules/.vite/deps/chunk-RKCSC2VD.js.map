{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/components/src/utils/conditionalSlot.ts"],
  "sourcesContent": ["import { forceUpdate } from \"@stencil/core\";\nimport { createObserver } from \"./observers\";\n\nconst observed = new Set<HTMLElement>();\n\n/**\n * Defines interface for components with a dynamically changing slot.\n *\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport interface ConditionalSlotComponent {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n}\n\nlet mutationObserver: MutationObserver;\nconst observerOptions: Pick<Parameters<MutationObserver[\"observe\"]>[1], \"childList\"> = { childList: true };\n\n/**\n * Helper to set up a conditional slot component on connectedCallback.\n *\n * @param component\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport function connectConditionalSlotComponent(component: ConditionalSlotComponent): void {\n  if (!mutationObserver) {\n    mutationObserver = createObserver(\"mutation\", processMutations);\n  }\n\n  mutationObserver.observe(component.el, observerOptions);\n}\n\n/**\n * Helper to tear down a conditional slot component on disconnectedCallback.\n *\n * @param component\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport function disconnectConditionalSlotComponent(component: ConditionalSlotComponent): void {\n  observed.delete(component.el);\n\n  // we explicitly process queued mutations and disconnect and reconnect\n  // the observer until MutationObserver gets an `unobserve` method\n  // see https://github.com/whatwg/dom/issues/126\n  processMutations(mutationObserver.takeRecords());\n  mutationObserver.disconnect();\n  for (const [element] of observed.entries()) {\n    mutationObserver.observe(element, observerOptions);\n  }\n}\n\nfunction processMutations(mutations: MutationRecord[]): void {\n  mutations.forEach(({ target }) => {\n    forceUpdate(target);\n  });\n}\n"],
  "mappings": ";;;;;;;;AAGA,IAAM,WAAW,oBAAI,IAAG;AAkBxB,IAAI;AACJ,IAAM,kBAAiF,EAAE,WAAW,KAAI;SAYxF,gCAAgC,WAAmC;AACjF,MAAI,CAAC,kBAAkB;AACrB,uBAAmB,eAAe,YAAY,gBAAgB;;AAGhE,mBAAiB,QAAQ,UAAU,IAAI,eAAe;AACxD;SAYgB,mCAAmC,WAAmC;AACpF,WAAS,OAAO,UAAU,EAAE;AAK5B,mBAAiB,iBAAiB,YAAW,CAAE;AAC/C,mBAAiB,WAAU;AAC3B,aAAW,CAAC,OAAO,KAAK,SAAS,QAAO,GAAI;AAC1C,qBAAiB,QAAQ,SAAS,eAAe;;AAErD;AAEA,SAAS,iBAAiB,WAA2B;AACnD,YAAU,QAAQ,CAAC,EAAE,OAAM,MAAE;AAC3B,gBAAY,MAAM;GACnB;AACH;",
  "names": []
}
