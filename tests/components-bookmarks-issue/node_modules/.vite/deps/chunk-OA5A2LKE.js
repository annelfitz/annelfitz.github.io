import {
  p
} from "./chunk-J6T3FJLS.js";
import {
  b
} from "./chunk-W5ALAOW2.js";
import {
  j
} from "./chunk-RKVEKQ5O.js";
import {
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import {
  s as s2
} from "./chunk-JGDJR5EV.js";
import {
  s
} from "./chunk-7RBRCL6S.js";

// node_modules/@arcgis/core/views/layers/ImageryLayerView.js
var u = (u2) => {
  let m = class extends u2 {
    constructor() {
      super(...arguments), this.view = null;
    }
    async fetchPopupFeaturesAtLocation(e2, o) {
      const { layer: s3 } = this;
      if (!e2)
        throw new s("imagerylayerview:fetchPopupFeatures", "Nothing to fetch without area", { layer: s3 });
      const { popupEnabled: i } = s3, u3 = p(s3, o);
      if (!i || null == u3)
        throw new s("imagerylayerview:fetchPopupFeatures", "Missing required popupTemplate or popupEnabled", { popupEnabled: i, popupTemplate: u3 });
      const m2 = await u3.getRequiredFields();
      s2(o);
      const c = new b();
      c.timeExtent = this.timeExtent, c.geometry = e2, c.outFields = m2, c.outSpatialReference = e2.spatialReference;
      const { resolution: l, spatialReference: y2 } = this.view, d = "2d" === this.view.type ? new x(l, l, y2) : new x(0.5 * l, 0.5 * l, y2), { returnTopmostRaster: h, showNoDataRecords: w } = u3.layerOptions || { returnTopmostRaster: true, showNoDataRecords: false }, f = { returnDomainValues: true, returnTopmostRaster: h, pixelSize: d, showNoDataRecords: w, signal: o == null ? void 0 : o.signal };
      return s3.queryVisibleRasters(c, f).then((e3) => e3);
    }
    canResume() {
      var _a;
      return !!super.canResume() && !((_a = this.timeExtent) == null ? void 0 : _a.isEmpty);
    }
  };
  return e([y()], m.prototype, "layer", void 0), e([y()], m.prototype, "suspended", void 0), e([y(j)], m.prototype, "timeExtent", void 0), e([y()], m.prototype, "view", void 0), m = e([a("esri.views.layers.ImageryLayerView")], m), m;
};

export {
  u
};
//# sourceMappingURL=chunk-OA5A2LKE.js.map
