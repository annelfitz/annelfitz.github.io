{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/esm/src/components/sortable-list/resources.ts", "../../@esri/calcite-components/dist/esm/src/components/sortable-list/sortable-list.scss?tag=calcite-sortable-list&encapsulation=shadow", "../../@esri/calcite-components/dist/esm/src/components/sortable-list/sortable-list.tsx"],
  "sourcesContent": ["export const CSS = {\n  sortItem: \"sort-item\",\n  container: \"container\",\n  containerHorizontal: \"container--horizontal\",\n  containerVertical: \"container--vertical\",\n};\n", ":host {\n  @apply flex;\n}\n\n@include disabled();\n\n.container {\n  @apply flex flex-auto;\n}\n\n.container--vertical {\n  @apply flex-col;\n}\n\n.container--horizontal {\n  @apply flex-row;\n}\n\n@include base-component();\n", "import { Component, Element, Event, EventEmitter, h, Listen, Prop, VNode } from \"@stencil/core\";\nimport Sortable from \"sortablejs\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { createObserver } from \"../../utils/observers\";\nimport { HandleNudge } from \"../handle/interfaces\";\nimport { Layout } from \"../interfaces\";\nimport { CSS } from \"./resources\";\nimport {\n  DragDetail,\n  connectSortableComponent,\n  disconnectSortableComponent,\n  SortableComponent,\n  dragActive,\n} from \"../../utils/sortableComponent\";\nimport { focusElement } from \"../../utils/dom\";\n\n/**\n * @slot - A slot for adding sortable items.\n */\n@Component({\n  tag: \"calcite-sortable-list\",\n  styleUrl: \"sortable-list.scss\",\n  shadow: true,\n})\nexport class SortableList implements InteractiveComponent, SortableComponent {\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When provided, the method will be called to determine whether the element can  move from the list.\n   */\n  @Prop() canPull: (detail: DragDetail) => boolean;\n\n  /**\n   * When provided, the method will be called to determine whether the element can be added from another list.\n   */\n  @Prop() canPut: (detail: DragDetail) => boolean;\n\n  /**\n   * Specifies which items inside the element should be draggable.\n   */\n  @Prop({ reflect: true }) dragSelector?: string;\n\n  /**\n   * The list's group identifier.\n   *\n   * To drag elements from one list into another, both lists must have the same group value.\n   */\n  @Prop({ reflect: true }) group?: string;\n\n  /**\n   * The selector for the handle elements.\n   */\n  @Prop({ reflect: true }) handleSelector = \"calcite-handle\";\n\n  /**\n   * Indicates the horizontal or vertical orientation of the component.\n   */\n  @Prop({ reflect: true }) layout: Layout = \"vertical\";\n\n  /**\n   * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * When true, content is waiting to be loaded. This state shows a busy indicator.\n   */\n  @Prop({ reflect: true }) loading = false;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteSortableListElement;\n\n  items: Element[] = [];\n\n  mutationObserver = createObserver(\"mutation\", () => {\n    this.setUpSorting();\n  });\n\n  sortable: Sortable;\n\n  dragEnabled = true;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    if (dragActive(this)) {\n      return;\n    }\n\n    this.setUpSorting();\n    this.beginObserving();\n    connectInteractive(this);\n  }\n\n  disconnectedCallback(): void {\n    if (dragActive(this)) {\n      return;\n    }\n\n    disconnectInteractive(this);\n    disconnectSortableComponent(this);\n    this.endObserving();\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Emitted when the order of the list has changed.\n   */\n  @Event({ cancelable: false }) calciteListOrderChange: EventEmitter<void>;\n\n  @Listen(\"calciteHandleNudge\")\n  calciteHandleNudgeNextHandler(event: CustomEvent<HandleNudge>): void {\n    this.handleNudgeEvent(event);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  onGlobalDragStart(): void {\n    this.endObserving();\n  }\n\n  onGlobalDragEnd(): void {\n    this.beginObserving();\n  }\n\n  onDragEnd(): void {}\n\n  onDragStart(): void {}\n\n  onDragSort(): void {\n    this.items = Array.from(this.el.children);\n    this.calciteListOrderChange.emit();\n  }\n\n  handleNudgeEvent(event: CustomEvent<HandleNudge>): void {\n    const { direction } = event.detail;\n\n    const handle = event\n      .composedPath()\n      .find((el: HTMLElement) => el.matches(this.handleSelector)) as HTMLElement;\n\n    const sortItem = this.items.find((item) => {\n      return item.contains(handle) || event.composedPath().includes(item);\n    });\n\n    const lastIndex = this.items.length - 1;\n    const startingIndex = this.items.indexOf(sortItem);\n    let appendInstead = false;\n    let buddyIndex: number;\n\n    if (direction === \"up\") {\n      if (startingIndex === 0) {\n        appendInstead = true;\n      } else {\n        buddyIndex = startingIndex - 1;\n      }\n    } else {\n      if (startingIndex === lastIndex) {\n        buddyIndex = 0;\n      } else if (startingIndex === lastIndex - 1) {\n        appendInstead = true;\n      } else {\n        buddyIndex = startingIndex + 2;\n      }\n    }\n\n    this.endObserving();\n\n    if (appendInstead) {\n      sortItem.parentElement.appendChild(sortItem);\n    } else {\n      sortItem.parentElement.insertBefore(sortItem, this.items[buddyIndex]);\n    }\n\n    this.items = Array.from(this.el.children);\n\n    this.beginObserving();\n    requestAnimationFrame(() => focusElement(handle));\n\n    if (\"selected\" in handle) {\n      handle.selected = true;\n    }\n  }\n\n  setUpSorting(): void {\n    this.items = Array.from(this.el.children);\n    connectSortableComponent(this);\n  }\n\n  beginObserving(): void {\n    this.mutationObserver?.observe(this.el, { childList: true, subtree: true });\n  }\n\n  endObserving(): void {\n    this.mutationObserver?.disconnect();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    const { disabled, layout } = this;\n    const horizontal = layout === \"horizontal\" || false;\n\n    return (\n      <InteractiveContainer disabled={disabled}>\n        <div\n          class={{\n            [CSS.container]: true,\n            [CSS.containerVertical]: !horizontal,\n            [CSS.containerHorizontal]: horizontal,\n          }}\n        >\n          <slot />\n        </div>\n      </InteractiveContainer>\n    );\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,IAAM,MAAM;EACjB,UAAU;EACV,WAAW;EACX,qBAAqB;EACrB,mBAAmB;;ACJrB,IAAM,kBAAkB;IC8BX,eAAY,MAAA;;;;AAyDvB,SAAA,QAAmB,CAAA;AAEnB,SAAA,mBAAmB,eAAe,YAAY,MAAA;AAC5C,WAAK,aAAY;KAClB;AAID,SAAA,cAAc;;;;;0BAjC4B;kBAKA;oBAKN;mBAKD;;;;;;;EA0BnC,oBAAiB;AACf,QAAI,WAAW,IAAI,GAAG;AACpB;;AAGF,SAAK,aAAY;AACjB,SAAK,eAAc;AACnB,uBAAmB,IAAI;;EAGzB,uBAAoB;AAClB,QAAI,WAAW,IAAI,GAAG;AACpB;;AAGF,0BAAsB,IAAI;AAC1B,gCAA4B,IAAI;AAChC,SAAK,aAAY;;EAGnB,qBAAkB;AAChB,0BAAsB,IAAI;;EAe5B,8BAA8B,OAA+B;AAC3D,SAAK,iBAAiB,KAAK;;;;;;;EAS7B,oBAAiB;AACf,SAAK,aAAY;;EAGnB,kBAAe;AACb,SAAK,eAAc;;EAGrB,YAAS;EAAA;EAET,cAAW;EAAA;EAEX,aAAU;AACR,SAAK,QAAQ,MAAM,KAAK,KAAK,GAAG,QAAQ;AACxC,SAAK,uBAAuB,KAAI;;EAGlC,iBAAiB,OAA+B;AAC9C,UAAM,EAAE,UAAS,IAAK,MAAM;AAE5B,UAAM,SAAS,MACZ,aAAY,EACZ,KAAK,CAAC,OAAoB,GAAG,QAAQ,KAAK,cAAc,CAAC;AAE5D,UAAM,WAAW,KAAK,MAAM,KAAK,CAAC,SAAI;AACpC,aAAO,KAAK,SAAS,MAAM,KAAK,MAAM,aAAY,EAAG,SAAS,IAAI;KACnE;AAED,UAAM,YAAY,KAAK,MAAM,SAAS;AACtC,UAAM,gBAAgB,KAAK,MAAM,QAAQ,QAAQ;AACjD,QAAI,gBAAgB;AACpB,QAAI;AAEJ,QAAI,cAAc,MAAM;AACtB,UAAI,kBAAkB,GAAG;AACvB,wBAAgB;aACX;AACL,qBAAa,gBAAgB;;WAE1B;AACL,UAAI,kBAAkB,WAAW;AAC/B,qBAAa;iBACJ,kBAAkB,YAAY,GAAG;AAC1C,wBAAgB;aACX;AACL,qBAAa,gBAAgB;;;AAIjC,SAAK,aAAY;AAEjB,QAAI,eAAe;AACjB,eAAS,cAAc,YAAY,QAAQ;WACtC;AACL,eAAS,cAAc,aAAa,UAAU,KAAK,MAAM,UAAU,CAAC;;AAGtE,SAAK,QAAQ,MAAM,KAAK,KAAK,GAAG,QAAQ;AAExC,SAAK,eAAc;AACnB,0BAAsB,MAAM,aAAa,MAAM,CAAC;AAEhD,QAAI,cAAc,QAAQ;AACxB,aAAO,WAAW;;;EAItB,eAAY;AACV,SAAK,QAAQ,MAAM,KAAK,KAAK,GAAG,QAAQ;AACxC,6BAAyB,IAAI;;EAG/B,iBAAc;;AACZ,eAAK,qBAAL,mBAAuB,QAAQ,KAAK,IAAI,EAAE,WAAW,MAAM,SAAS,KAAI;;EAG1E,eAAY;;AACV,eAAK,qBAAL,mBAAuB;;;;;;;EASzB,SAAM;AACJ,UAAM,EAAE,UAAU,OAAM,IAAK;AAC7B,UAAM,aAAa,WAAW,gBAAgB;AAE9C,WACE,EAAC,sBAAoB,EAAC,SAAkB,GACtC,EAAA,OAAA,EACE,OAAO;MACL,CAAC,IAAI,SAAS,GAAG;MACjB,CAAC,IAAI,iBAAiB,GAAG,CAAC;MAC1B,CAAC,IAAI,mBAAmB,GAAG;MAC5B,GAED,EAAA,QAAA,IAAA,CAAQ,CACJ;;;;;;;",
  "names": []
}
