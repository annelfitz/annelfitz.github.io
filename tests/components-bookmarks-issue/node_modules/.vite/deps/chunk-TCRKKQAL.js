import {
  a,
  c as c2
} from "./chunk-77YSHEUQ.js";
import {
  b as b2,
  c as c3,
  d,
  p,
  w
} from "./chunk-JW7VBMHD.js";
import {
  b
} from "./chunk-GLLRUDMY.js";
import {
  c,
  i2 as i,
  x
} from "./chunk-ZIJHDTB7.js";
import {
  Q
} from "./chunk-UMXV3EBO.js";
import {
  u
} from "./chunk-CZSTCON2.js";
import {
  I,
  Rt
} from "./chunk-SAYWXQVM.js";
import {
  s
} from "./chunk-7RBRCL6S.js";

// node_modules/@arcgis/core/symbols/support/webStyleSymbolUtils.js
function g(t, e, r, o) {
  const n = t.name;
  return null == n ? Promise.reject(new s("symbolstyleutils:style-symbol-reference-name-missing", "Missing name in style symbol reference")) : t.styleName && "Esri2DPointSymbolsStyle" === t.styleName ? d2(n, e, o) : c3(t, e, o).then((t2) => h(t2, n, e, r, d, o));
}
function j(t, e) {
  return e.items.find((e2) => e2.name === t);
}
function h(u2, y, c4, g2, h2, d3) {
  var _a, _b;
  const U = null != (c4 == null ? void 0 : c4.portal) ? c4.portal : Q.getDefault(), N = { portal: U, url: I(u2.baseUrl), origin: "portal-item" }, w2 = j(y, u2.data);
  if (!w2) {
    const t = `The symbol name '${y}' could not be found`;
    return Promise.reject(new s("symbolstyleutils:symbol-name-not-found", t, { symbolName: y }));
  }
  let S = u(h2(w2, g2), N), D = ((_a = w2.thumbnail) == null ? void 0 : _a.href) ?? null;
  const O = (_b = w2.thumbnail) == null ? void 0 : _b.imageData;
  c2() && (S = a(S) ?? "", D = a(D));
  const P = { portal: U, url: I(Rt(S)), origin: "portal-item" };
  return b2(S, d3).then((e) => {
    const r = "cimRef" === g2 ? p(e.data) : e.data, l = b(r, P);
    if (l && x(l)) {
      if (D) {
        const t = u(D, N);
        l.thumbnail = new c({ url: t });
      } else
        O && (l.thumbnail = new c({ url: `data:image/png;base64,${O}` }));
      u2.styleUrl ? l.styleOrigin = new i({ portal: c4.portal, styleUrl: u2.styleUrl, name: y }) : u2.styleName && (l.styleOrigin = new i({ portal: c4.portal, styleName: u2.styleName, name: y }));
    }
    return l;
  });
}
function d2(t, e, r) {
  const l = w.replaceAll(/\{SymbolName\}/gi, t), m = null != e.portal ? e.portal : Q.getDefault();
  return b2(l, r).then((t2) => {
    const e2 = p(t2.data);
    return b(e2, { portal: m, url: I(Rt(l)), origin: "portal-item" });
  });
}

export {
  g,
  j,
  h
};
//# sourceMappingURL=chunk-TCRKKQAL.js.map
