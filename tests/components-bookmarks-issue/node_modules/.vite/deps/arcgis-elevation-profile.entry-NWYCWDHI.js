import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  importCoreReactiveUtils,
  newWidgetsElevationProfile
} from "./chunk-YXW2SI4L.js";
import {
  addHandles,
  checkForView,
  referenceElementHelper
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-elevation-profile.entry.js
var elevationProfileCss = "";
var ArcgisElevationProfile = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.arcgisElevationProfileReady = createEvent(this, "arcgisElevationProfileReady", 7);
    this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
    this._watchHandles = [];
    this.referenceElement = void 0;
    this.effectiveUnits = void 0;
    this.highlightEnabled = true;
    this.hoveredChartPosition = void 0;
    this.icon = void 0;
    this.input = void 0;
    this.profiles = void 0;
    this.progress = void 0;
    this.state = "disabled";
    this.unit = void 0;
    this.uniformChartScaling = void 0;
    this.unitOptions = void 0;
    this.visibleElementsLegend = true;
    this.visibleElementsChart = true;
    this.visibleElementsClearButton = true;
    this.visibleElementsSettingsButton = true;
    this.visibleElementsSketchButton = true;
    this.visibleElementsSelectButton = true;
    this.visibleElementsUnitSelector = true;
    this.visibleElementsUniformChartScalingToggle = true;
    this.position = "bottom-left";
    this.view = void 0;
    this.widget = void 0;
  }
  referenceElementWatcher(value) {
    void referenceElementHelper(this, value);
  }
  highlightEnabledWatcher(value) {
    if (this.widget) {
      this.widget.viewModel.highlightEnabled = value;
    }
  }
  iconWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.icon = value;
    }
  }
  inputWatcher(value) {
    if (value && this.widget) {
      this.widget.input = value;
    }
  }
  profilesWatcher(value) {
    if (value && this.widget) {
      this.widget.profiles = value;
    }
  }
  unitWatcher(value) {
    if (value && this.widget) {
      this.widget.unit = value;
    }
  }
  uniformChartScalingWatcher(value) {
    if (this.widget) {
      this.widget.viewModel.uniformChartScaling = value;
    }
  }
  unitOptionsWatcher(value) {
    if (value && this.widget) {
      this.widget.unitOptions = value;
    }
  }
  visibleElementsLegendWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        legend: value
      };
    }
  }
  visibleElementsChartWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        chart: value
      };
    }
  }
  visibleElementsClearButtonWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        clearButton: value
      };
    }
  }
  visibleElementsSettingsButtonWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        settingsButton: value
      };
    }
  }
  visibleElementsSketchButtonWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        sketchButton: value
      };
    }
  }
  visibleElementsSelectButtonWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        selectButton: value
      };
    }
  }
  visibleElementsUnitSelectorWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        unitSelector: value
      };
    }
  }
  visibleElementsUniformChartScalingToggleWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        uniformChartScalingToggle: value
      };
    }
  }
  positionWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.view.ui.move(this.childElem, value);
    }
  }
  viewWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.view = value;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Methods
  //
  //--------------------------------------------------------------------------
  async start() {
    this.widget.viewModel.start();
  }
  async stop() {
    this.widget.viewModel.stop();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = this._createParams();
    const widget = await newWidgetsElevationProfile(params);
    this.widget = widget;
    this._setViewModelParams();
    await this._addWatchers();
    this._addContainer();
    this.arcgisElevationProfileReady.emit();
    checkForView(this);
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    return h("div", { ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  _addContainer() {
    this.widget.container = this.childElem;
  }
  async _addWatchers() {
    const { watch, whenOnce } = await importCoreReactiveUtils();
    addHandles(this, [
      watch(() => this.widget.input, () => {
        this.input = this.widget.input;
        this.arcgisPropertyChange.emit({ name: "input" });
      }, {
        initial: true
      }),
      watch(() => this.widget.viewModel.effectiveUnits, () => this.effectiveUnits = this.widget.viewModel.effectiveUnits, {
        initial: true
      }),
      watch(() => this.widget.viewModel.hoveredChartPosition, () => this.hoveredChartPosition = this.widget.viewModel.hoveredChartPosition, {
        initial: true
      }),
      watch(() => this.widget.viewModel.progress, () => this.progress = this.widget.viewModel.progress, {
        initial: true
      }),
      watch(() => this.widget.viewModel.state, () => this.state = this.widget.viewModel.state, {
        initial: true
      })
    ]);
    await whenOnce(() => this.widget.unitOptions);
    this.unitOptions = this.widget.unitOptions;
  }
  _createParams() {
    const params = {};
    params.visibleElements = {
      legend: this.visibleElementsLegend,
      chart: this.visibleElementsChart,
      clearButton: this.visibleElementsClearButton,
      settingsButton: this.visibleElementsSettingsButton,
      sketchButton: this.visibleElementsSketchButton,
      selectButton: this.visibleElementsSelectButton,
      unitSelector: this.visibleElementsUnitSelector,
      uniformChartScalingToggle: this.visibleElementsUniformChartScalingToggle
    };
    if (this.view) {
      params.view = this.view;
    }
    if (this.icon) {
      params.icon = this.icon;
    }
    if (this.input) {
      params.input = this.input;
    }
    if (this.profiles) {
      params.profiles = this.profiles;
    }
    if (this.unit) {
      params.unit = this.unit;
    }
    if (this.unitOptions) {
      params.unitOptions = this.unitOptions;
    }
    return params;
  }
  _setViewModelParams() {
    const params = {};
    if (this.highlightEnabled !== void 0) {
      params.highlightEnabled = this.highlightEnabled;
    }
    if (this.uniformChartScaling !== void 0) {
      params.uniformChartScaling = this.uniformChartScaling;
    }
    this.widget.viewModel.set(params);
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "referenceElement": ["referenceElementWatcher"],
      "highlightEnabled": ["highlightEnabledWatcher"],
      "icon": ["iconWatcher"],
      "input": ["inputWatcher"],
      "profiles": ["profilesWatcher"],
      "unit": ["unitWatcher"],
      "uniformChartScaling": ["uniformChartScalingWatcher"],
      "unitOptions": ["unitOptionsWatcher"],
      "visibleElementsLegend": ["visibleElementsLegendWatcher"],
      "visibleElementsChart": ["visibleElementsChartWatcher"],
      "visibleElementsClearButton": ["visibleElementsClearButtonWatcher"],
      "visibleElementsSettingsButton": ["visibleElementsSettingsButtonWatcher"],
      "visibleElementsSketchButton": ["visibleElementsSketchButtonWatcher"],
      "visibleElementsSelectButton": ["visibleElementsSelectButtonWatcher"],
      "visibleElementsUnitSelector": ["visibleElementsUnitSelectorWatcher"],
      "visibleElementsUniformChartScalingToggle": ["visibleElementsUniformChartScalingToggleWatcher"],
      "position": ["positionWatcher"],
      "view": ["viewWatcher"]
    };
  }
};
ArcgisElevationProfile.style = elevationProfileCss;
export {
  ArcgisElevationProfile as arcgis_elevation_profile
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-elevation-profile.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-elevation-profile.entry-NWYCWDHI.js.map
