import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  importCoreReactiveUtils,
  newWidgetsBookmarks
} from "./chunk-YXW2SI4L.js";
import {
  addHandles,
  checkForView,
  referenceElementHelper
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-bookmarks.entry.js
var bookmarksCss = "";
var ArcgisBookmarks = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.arcgisBookmarksReady = createEvent(this, "arcgisBookmarksReady", 7);
    this.bookmarkEdit = createEvent(this, "bookmarkEdit", 7);
    this.bookmarkSelect = createEvent(this, "bookmarkSelect", 7);
    this._watchHandles = [];
    this.referenceElement = void 0;
    this.bookmarks = void 0;
    this.defaultCreateOptions = void 0;
    this.defaultEditOptions = void 0;
    this.disabled = false;
    this.dragEnabled = false;
    this.filterPlaceholder = void 0;
    this.filterText = void 0;
    this.icon = void 0;
    this.visibleElementsAddBookmarkButton = false;
    this.visibleElementsCloseButton = false;
    this.visibleElementsCollapseButton = false;
    this.visibleElementsEditBookmarkButton = false;
    this.visibleElementsFilter = false;
    this.visibleElementsFlow = true;
    this.visibleElementsHeading = false;
    this.visibleElementsThumbnail = true;
    this.visibleElementsTime = true;
    this.position = "bottom-left";
    this.view = void 0;
    this.widget = void 0;
  }
  referenceElementWatcher(value) {
    void referenceElementHelper(this, value);
  }
  bookmarksWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.bookmarks = value;
    }
  }
  defaultCreateOptionsWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.defaultCreateOptions = value;
    }
  }
  defaultEditOptionsWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.defaultEditOptions = value;
    }
  }
  disabledWatcher(value, old) {
    if (this.widget && value !== old) {
      this.widget.disabled = value;
    }
  }
  dragEnabledWatcher(value) {
    if (this.widget) {
      this.widget.dragEnabled = value;
    }
  }
  filterPlaceholderWatcher(value) {
    if (this.widget) {
      this.widget.filterPlaceholder = value;
    }
  }
  filterTextWatcher(value) {
    if (this.widget) {
      this.widget.filterText = value;
    }
  }
  iconWatcher(value) {
    if (this.widget) {
      this.widget.icon = value;
    }
  }
  visibleElementsAddBookmarkButtonWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = { ...this.widget.visibleElements, addBookmarkButton: value };
    }
  }
  visibleElementsCloseButtonWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = { ...this.widget.visibleElements, closeButton: value };
    }
  }
  visibleElementsCollapseButtonWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = { ...this.widget.visibleElements, collapseButton: value };
    }
  }
  visibleElementsEditBookmarkButtonWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = { ...this.widget.visibleElements, editBookmarkButton: value };
    }
  }
  visibleElementsFilterWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = { ...this.widget.visibleElements, filter: value };
    }
  }
  visibleElementsFlowWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = { ...this.widget.visibleElements, flow: value };
    }
  }
  visibleElementsHeadingWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = { ...this.widget.visibleElements, heading: value };
    }
  }
  visibleElementsThumbnailWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = { ...this.widget.visibleElements, thumbnail: value };
    }
  }
  visibleElementsTimeWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = { ...this.widget.visibleElements, time: value };
    }
  }
  positionWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.view.ui.move(this.childElem, value);
    }
  }
  viewWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.view = value;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = this._createParams();
    const widget = await newWidgetsBookmarks(params);
    this.widget = widget;
    await this._addWatchers();
    this._proxyEvents();
    this._addContainer();
    this.arcgisBookmarksReady.emit();
    checkForView(this);
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    return h("div", { ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  _addContainer() {
    this.widget.container = this.childElem;
  }
  async _addWatchers() {
    const { watch } = await importCoreReactiveUtils();
    addHandles(this, [
      watch(() => this.widget.disabled, (value) => this.disabled = value)
    ]);
  }
  _createParams() {
    const params = {};
    params.visibleElements = {
      addBookmarkButton: this.visibleElementsAddBookmarkButton,
      closeButton: this.visibleElementsCloseButton,
      collapseButton: this.visibleElementsCollapseButton,
      editBookmarkButton: this.visibleElementsEditBookmarkButton,
      filter: this.visibleElementsFilter,
      flow: this.visibleElementsFlow,
      heading: this.visibleElementsHeading,
      thumbnail: this.visibleElementsThumbnail,
      time: this.visibleElementsTime
    };
    if (this.view) {
      params.view = this.view;
    }
    if (this.bookmarks) {
      params.bookmarks = this.bookmarks;
    }
    if (this.defaultCreateOptions) {
      params.defaultCreateOptions = this.defaultCreateOptions;
    }
    if (this.defaultEditOptions) {
      params.defaultEditOptions = this.defaultEditOptions;
    }
    if (this.dragEnabled !== void 0) {
      params.dragEnabled = this.dragEnabled;
    }
    if (this.filterPlaceholder) {
      params.filterPlaceholder = this.filterPlaceholder;
    }
    if (this.filterText) {
      params.filterText = this.filterText;
    }
    if (this.icon) {
      params.icon = this.icon;
    }
    return params;
  }
  _proxyEvents() {
    this.widget.on("bookmark-edit", (e) => this.bookmarkEdit.emit(e));
    this.widget.on("bookmark-select", (e) => this.bookmarkSelect.emit(e));
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "referenceElement": ["referenceElementWatcher"],
      "bookmarks": ["bookmarksWatcher"],
      "defaultCreateOptions": ["defaultCreateOptionsWatcher"],
      "defaultEditOptions": ["defaultEditOptionsWatcher"],
      "disabled": ["disabledWatcher"],
      "dragEnabled": ["dragEnabledWatcher"],
      "filterPlaceholder": ["filterPlaceholderWatcher"],
      "filterText": ["filterTextWatcher"],
      "icon": ["iconWatcher"],
      "visibleElementsAddBookmarkButton": ["visibleElementsAddBookmarkButtonWatcher"],
      "visibleElementsCloseButton": ["visibleElementsCloseButtonWatcher"],
      "visibleElementsCollapseButton": ["visibleElementsCollapseButtonWatcher"],
      "visibleElementsEditBookmarkButton": ["visibleElementsEditBookmarkButtonWatcher"],
      "visibleElementsFilter": ["visibleElementsFilterWatcher"],
      "visibleElementsFlow": ["visibleElementsFlowWatcher"],
      "visibleElementsHeading": ["visibleElementsHeadingWatcher"],
      "visibleElementsThumbnail": ["visibleElementsThumbnailWatcher"],
      "visibleElementsTime": ["visibleElementsTimeWatcher"],
      "position": ["positionWatcher"],
      "view": ["viewWatcher"]
    };
  }
};
ArcgisBookmarks.style = bookmarksCss;
export {
  ArcgisBookmarks as arcgis_bookmarks
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-bookmarks.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-bookmarks.entry-LNAU7WFG.js.map
