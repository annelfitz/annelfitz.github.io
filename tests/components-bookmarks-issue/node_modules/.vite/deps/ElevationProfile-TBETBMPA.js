import {
  n as n7
} from "./chunk-YA4N4OVA.js";
import {
  pe
} from "./chunk-H2X5RBRV.js";
import {
  e as e10
} from "./chunk-VXOUWUPE.js";
import {
  a as a4,
  d as d7,
  r as r2,
  s as s5,
  t as t4
} from "./chunk-O2O2F3IL.js";
import "./chunk-5HWGOVOV.js";
import "./chunk-CGJEHQM2.js";
import {
  n as n6
} from "./chunk-PE5CJM6H.js";
import {
  t as t3
} from "./chunk-LWKMC2O4.js";
import "./chunk-MYIS6GAM.js";
import {
  e as e9
} from "./chunk-EPOP3OQ6.js";
import "./chunk-CRYY7ZCN.js";
import "./chunk-YBFQVZX5.js";
import "./chunk-ZIKY3AX6.js";
import "./chunk-VGQTAP4F.js";
import {
  R
} from "./chunk-3U6VZTOQ.js";
import {
  m as m4
} from "./chunk-OZCCH2YL.js";
import "./chunk-YSRCOU2A.js";
import "./chunk-EZMIPVQL.js";
import "./chunk-7IFMSG3H.js";
import "./chunk-CA3XJ2RX.js";
import "./chunk-JASPUPTW.js";
import "./chunk-HWBFFWYY.js";
import "./chunk-TKMRXVLK.js";
import "./chunk-LEFES6LS.js";
import "./chunk-ARNGZTAW.js";
import "./chunk-AEAYH74I.js";
import "./chunk-6BCJJDKK.js";
import {
  t as t2
} from "./chunk-UANQJYHL.js";
import "./chunk-DNFHDQRJ.js";
import "./chunk-TO6UIATU.js";
import "./chunk-WCBCYPOZ.js";
import {
  b as b3,
  j as j2,
  v as v3,
  w as w2
} from "./chunk-3FTSPLRV.js";
import "./chunk-OMRW2J7M.js";
import "./chunk-UXQH3C5A.js";
import "./chunk-5SYJEI74.js";
import "./chunk-V7IF2KNH.js";
import "./chunk-VUHMQQ6M.js";
import "./chunk-6GQQIJM7.js";
import "./chunk-PAH4PVZY.js";
import "./chunk-V7NVRGBC.js";
import "./chunk-KCZGCTYM.js";
import "./chunk-3YZBQBZ5.js";
import {
  T,
  e as e8
} from "./chunk-46T3D2EU.js";
import "./chunk-RYF27IO3.js";
import "./chunk-2GT6KC2O.js";
import "./chunk-637XZX4A.js";
import {
  b as b2
} from "./chunk-7PVGO24P.js";
import "./chunk-PTIWH4S7.js";
import "./chunk-67GTVIII.js";
import "./chunk-7E37N35O.js";
import "./chunk-BEXFYHUM.js";
import {
  _ as _3
} from "./chunk-K3DEHPDR.js";
import "./chunk-I6RS7YIS.js";
import {
  e as e6
} from "./chunk-7RP2CUPD.js";
import {
  U,
  g
} from "./chunk-G4YIJOSP.js";
import "./chunk-PMQ5HDZI.js";
import {
  e as e7
} from "./chunk-EAAEPSBY.js";
import "./chunk-I7LDU4W6.js";
import {
  h as h3
} from "./chunk-NAWP2ZCR.js";
import "./chunk-M5DWZKDJ.js";
import "./chunk-KWLN46JY.js";
import "./chunk-7KNPDPFB.js";
import "./chunk-M6P775BS.js";
import "./chunk-J5F4VILS.js";
import "./chunk-KSBIR2KG.js";
import "./chunk-7A5N7G2Z.js";
import "./chunk-FD7NY4JS.js";
import "./chunk-ZPC74XHC.js";
import "./chunk-IVGJRGD2.js";
import "./chunk-MTLWPXQD.js";
import "./chunk-ZEMG7GKC.js";
import "./chunk-XIWETS2Q.js";
import "./chunk-QFKFOAJ6.js";
import "./chunk-LOPMLCHC.js";
import "./chunk-JIR2YP6A.js";
import "./chunk-LANUNBDP.js";
import "./chunk-JBF6CULO.js";
import "./chunk-DRCNNCTI.js";
import "./chunk-MKOOEINB.js";
import "./chunk-JKOHBDRD.js";
import "./chunk-MDSRD3WV.js";
import "./chunk-3DFMDDMO.js";
import "./chunk-4BCSYJOQ.js";
import "./chunk-GMUCR2DJ.js";
import "./chunk-HBRJJENW.js";
import "./chunk-VHY5K2VE.js";
import "./chunk-6ENXMQPD.js";
import "./chunk-FV43HSGW.js";
import "./chunk-ZR7OV2EH.js";
import "./chunk-U76EZJUZ.js";
import "./chunk-MEEG7XMI.js";
import "./chunk-LJULTBAY.js";
import "./chunk-LO5UMUY4.js";
import "./chunk-YKIGDW5O.js";
import {
  w
} from "./chunk-XEPIVWBY.js";
import "./chunk-42NBQMXF.js";
import "./chunk-6MGK5WBT.js";
import "./chunk-CPZW2LMK.js";
import "./chunk-QR7J3YDY.js";
import "./chunk-GO2OGJDG.js";
import "./chunk-UYMREM3D.js";
import "./chunk-5YY6NZNY.js";
import {
  _ as _2
} from "./chunk-DCBZOZ54.js";
import "./chunk-5IT6RVBX.js";
import "./chunk-YJFPDMSR.js";
import {
  E
} from "./chunk-ECTYMEUP.js";
import "./chunk-I4SHZ6P5.js";
import {
  I
} from "./chunk-QYDOVVH7.js";
import "./chunk-YSXT2SWC.js";
import "./chunk-YH3SFFF7.js";
import "./chunk-JBU54P54.js";
import "./chunk-H7T5AB2S.js";
import "./chunk-WKVHVZW2.js";
import "./chunk-33LWZO2E.js";
import "./chunk-YT66FIGM.js";
import "./chunk-3IDXRFXE.js";
import "./chunk-RLZYC2LS.js";
import "./chunk-TXLJQAAN.js";
import "./chunk-IRL6OOVK.js";
import {
  _,
  m as m3
} from "./chunk-3AIILHI5.js";
import {
  a as a3,
  c as c2,
  v as v2
} from "./chunk-SA77Z3WI.js";
import "./chunk-D56W4LPT.js";
import "./chunk-BKOYOJBG.js";
import "./chunk-B4E4X2TN.js";
import "./chunk-HS6YI5DU.js";
import "./chunk-CDBOQCLE.js";
import "./chunk-RSRUEM5U.js";
import "./chunk-HFJMEXIX.js";
import "./chunk-VYSGSKHB.js";
import "./chunk-UAFQMHYI.js";
import "./chunk-IDPLBNJX.js";
import "./chunk-ZHAZR5C3.js";
import "./chunk-P4MNTMCZ.js";
import "./chunk-BSPKLAHD.js";
import "./chunk-VS6AHHIY.js";
import "./chunk-GPWQGIYV.js";
import "./chunk-WZJNHZ6H.js";
import "./chunk-XMYPMIYH.js";
import {
  d as d6,
  l
} from "./chunk-FQLGRQKL.js";
import "./chunk-DRC4XSYG.js";
import "./chunk-RO3CTAP7.js";
import "./chunk-XGTCDM4C.js";
import {
  e as e5
} from "./chunk-RW5QMWE6.js";
import "./chunk-LGMX4E7L.js";
import "./chunk-W5ALAOW2.js";
import "./chunk-FHDHOWK5.js";
import "./chunk-Y546C2O5.js";
import "./chunk-LQBHIBXV.js";
import "./chunk-42DUJ2CX.js";
import "./chunk-B35SNV2V.js";
import "./chunk-Z2F5OKVA.js";
import "./chunk-UQA6M3KF.js";
import "./chunk-GLF3KRAL.js";
import "./chunk-ZLQTPFTL.js";
import "./chunk-WIVZ7SMV.js";
import "./chunk-O76UVYOO.js";
import "./chunk-QCMUK3QA.js";
import "./chunk-HZSGATFT.js";
import "./chunk-KNMQQRV7.js";
import "./chunk-N5GQOIDP.js";
import "./chunk-NFB6O77E.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-ERD6I7QP.js";
import "./chunk-Z3NX5DTX.js";
import "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import "./chunk-SCHTG6ZQ.js";
import {
  f as f4
} from "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-SBARCIDP.js";
import "./chunk-7JNXJYRU.js";
import "./chunk-6PMFOUWZ.js";
import "./chunk-3KPZ3BQR.js";
import "./chunk-5JYVZQZR.js";
import "./chunk-UUG4W2PI.js";
import "./chunk-G7FOE26O.js";
import "./chunk-USOPZ2Q6.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import {
  d as d4
} from "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import {
  n as n5
} from "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import {
  d as d5
} from "./chunk-C24MEKSO.js";
import {
  u as u5
} from "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-WMUEII2O.js";
import "./chunk-6QNF7OHN.js";
import "./chunk-6AQIVLDN.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import {
  B,
  H
} from "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import {
  m2,
  u as u4
} from "./chunk-HV6S3GY2.js";
import {
  z
} from "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import {
  f as f3,
  x as x2
} from "./chunk-OCF7OAES.js";
import {
  A as A4,
  o as o4
} from "./chunk-JZBR4X6W.js";
import {
  n as n4
} from "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import {
  D,
  e2 as e4,
  r
} from "./chunk-RGCWZ2KZ.js";
import {
  i,
  n as n3
} from "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import {
  h as h2
} from "./chunk-2SDMYJDE.js";
import {
  n as n2
} from "./chunk-TPLOIZC7.js";
import {
  s as s2
} from "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import {
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import {
  f as f2
} from "./chunk-MBGZKT2Z.js";
import {
  L,
  M,
  N2 as N,
  O3 as O,
  W2 as W,
  j,
  s2 as s3,
  s3 as s4
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  A as A3,
  C,
  P,
  d as d3,
  p,
  v
} from "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import {
  o as o3
} from "./chunk-TXBMNSNF.js";
import {
  d as d2
} from "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S,
  o,
  t4 as t,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a2
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  A as A2,
  a,
  b,
  d,
  e as e3,
  f2 as f,
  h,
  o as o2,
  s,
  u2 as u3
} from "./chunk-JGDJR5EV.js";
import {
  e as e2,
  u as u2
} from "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n
} from "./chunk-7RBRCL6S.js";
import {
  A,
  c,
  k,
  m,
  u
} from "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/widgets/ElevationProfile/css.js
var e11 = "esri-elevation-profile";
var t5 = { base: `${e11}`, portrait: `${e11}--portrait`, refined: `${e11}--refined`, mainContainer: `${e11}__main-container`, promptContainer: `${e11}__prompt-container`, header: `${e11}__header`, zoomOutButton: `${e11}__zoom-out-button`, clearButton: `${e11}__clear-button`, actionButton: `${e11}__action-button`, sketchButton: `${e11}__sketch-button`, sketchCancelButton: `${e11}__sketch-cancel-button`, sketchDoneButton: `${e11}__sketch-done-button`, selectButton: `${e11}__select-button`, selectCancelButton: `${e11}__select-cancel-button`, chartContainer: `${e11}__chart-container`, chartSpinner: `${e11}__chart-spinner`, chartSpinnerVisible: `${e11}__chart-spinner--visible`, chartSpinnerSmall: `${e11}__chart-spinner--small`, footer: `${e11}__footer` };
var n8 = { base: "esri-elevation-profile-legend" };
var o5 = "esri-elevation-profile-legend-item";
var a5 = { base: o5, disabled: `${o5}--disabled`, expanded: `${o5}--expanded`, colorIndicator: `${o5}__color-indicator`, header: `${o5}__header`, content: `${o5}__content`, collapseToggle: `${o5}__collapse-toggle`, label: `${o5}__label`, checkbox: `${o5}__checkbox` };
var i2 = "esri-elevation-profile-statistics";
var _4 = { base: i2, statistic: `${i2}__statistic`, statisticLabel: `${i2}__statistic__label`, statisticValue: `${i2}__statistic__value`, slopeValue: `${i2}__slope-value` };
var c3 = "esri-elevation-profile-settings";
var r3 = { base: `${c3}`, popoverContent: `${c3}__popover-content`, uniformChartScalingLabel: `${c3}__uniform-scaling-label`, uniformChartScalingCheckbox: `${c3}__uniform-scaling-checkbox` };

// node_modules/@arcgis/core/widgets/ElevationProfile/support/ProfileGenerationError.js
var e12 = "ProfileGenerationError";
var o6;
!function(e14) {
  e14.TooComplex = "too-complex", e14.InvalidGeometry = "invalid-geometry", e14.InvalidElevationInfo = "invalid-elevation-info", e14.ElevationQueryError = "elevation-query-error";
}(o6 || (o6 = {}));
var r4 = class extends Error {
  constructor(o10) {
    super("profile could not be generated", { cause: o10 }), this.type = e12;
  }
};
function n9(o10) {
  return o10.type === e12;
}

// node_modules/@arcgis/core/widgets/ElevationProfile/support/geometryUtils.js
async function y2(e14, t6, s8, o10, a7, i7, h5) {
  let p7, m7, d8;
  const y5 = e14.spatialReference, v7 = y5.isGeographic || y5.isWebMercator;
  let P6 = 0;
  if (!v7) {
    const { planarLength: t7 } = await import("./geometryEngineAsync-BHSUW6A2.js");
    s(h5), P6 = await t7(e14, "meters"), s(h5);
  }
  const Z3 = 1 / W(o10), x6 = a7.geodesicDistanceThreshold ?? 1 / 0;
  if (v7 || P6 >= x6) {
    await H([{ source: y5, dest: o10 }, { source: y5, dest: f2.WGS84 }], h5);
    const n11 = C2(e14);
    p7 = v3([n11], "meters")[0];
    const r6 = R2(p7, a7);
    if (L2(e14, p7, r6) > i7)
      throw new r4(o6.TooComplex);
    const v8 = j3(n11, t6, s8);
    ({ densifiedPath: m7, distances: d8 } = U2(v8, r6, Z3)), m7 = B(m7, o10);
  } else {
    await H([{ source: y5, dest: o10 }], h5), p7 = P6;
    const r6 = R2(p7, a7);
    if (L2(e14, p7, r6) > i7)
      throw new r4(o6.TooComplex);
    const l4 = j3(e14, t6, s8);
    ({ densifiedPath: m7, distances: d8 } = b4(l4, r6, Z3)), s(h5), m7 = B(m7, o10);
  }
  return { densifiedPath: m7, pathLength: p7 * Z3, distances: d8 };
}
function R2(e14, t6) {
  const n11 = e14 / t6.densificationMaxSamples;
  return Math.max(t6.samplingDistance, n11);
}
function j3(e14, t6, n11) {
  if (null == t6)
    return Z(e14);
  const r6 = e14.spatialReference, s8 = t6.mode, o10 = v2(t6, r6);
  let a7 = null;
  switch (n11.type) {
    case "2d":
      a7 = v4(e14, s8, o10);
      break;
    case "3d":
      a7 = P2(e14, s8, o10, n11);
  }
  return null == a7 ? Z(e14) : new m2({ hasZ: true, hasM: false, spatialReference: r6, paths: x3(e14.paths, a7) });
}
function v4({ hasZ: e14 }, t6, n11) {
  return "absolute-height" === t6 ? e14 ? ([e15, t7, r6]) => [e15, t7, r6 + n11] : ([e15, t7]) => [e15, t7, n11] : null;
}
function P2({ spatialReference: e14, hasZ: t6 }, n11, r6, { elevationProvider: s8 }) {
  const o10 = (t7, n12, r7, o11) => (s8 == null ? void 0 : s8.getElevation(t7, n12, r7, e14, o11)) ?? 0;
  switch (n11) {
    case "on-the-ground":
      return ([e15, t7]) => [e15, t7, o10(e15, t7, 0, "ground")];
    case "absolute-height":
      return t6 ? ([e15, t7, n12]) => [e15, t7, n12 + r6] : ([e15, t7]) => [e15, t7, r6];
    case "relative-to-ground":
      return t6 ? ([e15, t7, n12]) => [e15, t7, n12 + o10(e15, t7, n12, "ground") + r6] : ([e15, t7]) => [e15, t7, o10(e15, t7, 0, "ground") + r6];
    case "relative-to-scene":
      return t6 ? ([e15, t7, n12]) => [e15, t7, n12 + o10(e15, t7, n12, "scene") + r6] : ([e15, t7]) => [e15, t7, o10(e15, t7, 0, "scene") + r6];
    default:
      return null;
  }
}
function Z(e14) {
  return e14.hasZ ? new m2({ hasZ: false, hasM: false, spatialReference: e14.spatialReference, paths: x3(e14.paths, ([e15, t6]) => [e15, t6]) }) : e14;
}
function x3(e14, t6) {
  const n11 = e14.length, r6 = new Array(n11);
  for (let s8 = 0; s8 < n11; ++s8) {
    const n12 = e14[s8], o10 = n12.length, a7 = new Array(n12.length);
    r6[s8] = a7;
    for (let e15 = 0; e15 < o10; ++e15)
      a7[e15] = t6(n12[e15]);
  }
  return r6;
}
function M2(e14) {
  return A5(e14) && e14.paths.length > 0 && e14.paths.every((e15) => e15.length >= 2);
}
function A5(e14) {
  return null != e14 && "polyline" === e14.type;
}
function S2(t6, n11, s8, o10, a7) {
  const { spatialReference: c6, hasZ: u10 } = t6, l4 = { from: null, to: null, distance: 0, azimuth: 0, reverseAzimuth: 0, spatialReference: c6, metersPerSR: W(c6) }, f7 = [], h5 = [];
  let p7 = 0;
  for (let r6 = 0; r6 < t6.paths.length; ++r6) {
    const i7 = t6.paths[r6], c7 = new Array(), u11 = new Array();
    let m7 = 0;
    for (let t7 = 1; t7 < i7.length; ++t7) {
      const r7 = i7[t7 - 1], f8 = i7[t7], h6 = o10(l4, r7, f8);
      let d8;
      for (d8 = m7; d8 < h6.distance && !x2(d8, h6.distance); d8 += n11)
        c7.push(a7(h6, d8)), u11.push((p7 + d8) * s8);
      m7 = d8 - h6.distance, p7 += h6.distance, c7.push(f8), u11.push(p7 * s8);
    }
    f7[r6] = c7, h5[r6] = u11;
  }
  return { densifiedPath: new m2({ spatialReference: c6, hasZ: u10, paths: f7 }), distances: h5 };
}
function b4(e14, t6, n11) {
  const { hasZ: r6 } = e14;
  return S2(e14, t6, n11, G, r6 ? k2 : W2);
}
function U2(e14, t6, n11) {
  const { hasZ: r6 } = e14;
  return S2(e14, t6, n11, z2, r6 ? T2 : E2);
}
function z2(e14, t6, n11) {
  return e14.distance = 0, j2(e14, t6, n11, e14.spatialReference), e14.from = t6, e14.to = n11, e14;
}
function G(e14, t6, n11) {
  return e14.from = t6, e14.to = n11, e14.distance = m3(n11, t6) * e14.metersPerSR, e14;
}
function E2({ from: e14, azimuth: t6, spatialReference: n11 }, r6) {
  return b3([0, 0], e14, t6, r6, n11);
}
function T2({ from: e14, to: n11, azimuth: r6, distance: s8, spatialReference: o10 }, a7) {
  const i7 = a7 / s8, c6 = [0, 0, f3(e14[2], n11[2], i7)];
  return b3(c6, e14, r6, a7, o10), c6;
}
function W2({ from: e14, to: t6, distance: n11 }, r6) {
  return _([0, 0], e14, t6, r6 / n11);
}
function k2({ from: e14, to: t6, distance: n11 }, r6) {
  return A4([0, 0, 0], e14, t6, r6 / n11);
}
function C2(e14) {
  return w2(e14.spatialReference) ? e14 : B(e14, f2.WGS84);
}
function D2(e14) {
  return e14.paths.reduce((e15, t6) => e15 + t6.length, 0);
}
function L2(e14, t6, n11) {
  return D2(e14) + Math.floor(t6 / n11) + Math.max(0, e14.paths.reduce((e15) => 1 + e15, 0) - 1);
}

// node_modules/@arcgis/core/widgets/ElevationProfile/support/statisticsUtils.js
function i3(t6, i7) {
  const o10 = t6.length;
  if (0 === o10)
    return null;
  const s8 = t6[0], m7 = s8.sampledZ;
  let c6 = m7, p7 = m7, h5 = 0, E5 = 0, f7 = null, g2 = null, x6 = null != m7 ? m7 : 0, _5 = 0, S5 = 0, d8 = null != m7 ? 1 : 0, C3 = 0, D3 = 0;
  const N2 = W(i7), P6 = L(i7), H2 = r2().minSlopeSampleDistance / N2, Z3 = 2 * H2, j7 = new v5(), y5 = new v5(), M5 = () => {
    G2(), j7.copy(y5), y5.reset();
  }, w3 = (t7, n11) => {
    M5(), t7 > 0 && t7 - j7.start <= Z3 && (t7 = j7.start + H2), y5.restart(t7, n11);
  }, G2 = () => {
    if (j7.isHole || y5.isHole)
      return;
    const t7 = y5.avgElevation - j7.avgElevation, n11 = y5.start - j7.start, e14 = t7 * P6, a7 = n11 * N2, i8 = j(Math.atan2(e14, a7), "radians", "degrees");
    i8 > 0 ? (_5 += i8, f7 = u6(f7, i8), C3++) : i8 < 0 && (S5 -= i8, g2 = u6(g2, -i8), D3++);
  };
  null != s8.sampledZ && w3(s8.distance, s8.sampledZ);
  for (let n11 = 1; n11 < o10; ++n11) {
    const e14 = t6[n11 - 1], l4 = t6[n11], a7 = l4.sampledZ;
    if (null == a7) {
      y5.isHole || M5();
      continue;
    }
    d8++, x6 += a7, c6 = r5(c6, a7), p7 = u6(p7, a7), y5.isHole || l4.distance - y5.start >= H2 ? w3(l4.distance, a7) : y5.insert(a7);
    const i8 = e14.sampledZ;
    if (null != i8) {
      const t7 = a7 - i8;
      t7 > 0 ? h5 += t7 : t7 < 0 && (E5 -= t7);
    }
  }
  return M5(), 0 === d8 ? null : { maxDistance: t6[o10 - 1].distance, minElevation: c6, maxElevation: p7, avgElevation: 0 === d8 ? null : x6 / d8, elevationGain: h5, elevationLoss: E5, maxPositiveSlope: f7, maxNegativeSlope: g2, avgPositiveSlope: 0 === C3 ? null : _5 / C3, avgNegativeSlope: 0 === D3 ? null : S5 / D3 };
}
function o7(n11) {
  const e14 = n11.filter(k), l4 = e14.length;
  if (0 === l4)
    return null;
  const a7 = e14[0];
  if (1 === l4)
    return a7;
  let i7 = a7.maxDistance, o10 = a7.minElevation, s8 = a7.maxElevation, m7 = a7.maxPositiveSlope, v7 = a7.maxNegativeSlope;
  for (let t6 = 1; t6 < e14.length; ++t6) {
    const n12 = e14[t6];
    i7 = u6(i7, n12.maxDistance), o10 = r5(o10, n12.minElevation), s8 = u6(s8, n12.maxElevation), m7 = u6(m7, n12.maxPositiveSlope), v7 = u6(v7, n12.maxNegativeSlope);
  }
  return { maxDistance: i7, minElevation: o10, maxElevation: s8, avgElevation: null, elevationGain: null, elevationLoss: null, maxPositiveSlope: m7, maxNegativeSlope: v7, avgPositiveSlope: null, avgNegativeSlope: null };
}
function s6(t6) {
  let l4 = null, a7 = null, i7 = null;
  for (const o10 of t6) {
    if (null == o10)
      continue;
    const { statistics: t7, spatialReference: s8 } = o10;
    if (null == t7)
      continue;
    const v7 = W(s8);
    l4 = u6(l4, m5(t7.maxDistance, v7));
    const c6 = L(s8);
    i7 = r5(i7, m5(t7.minElevation, c6)), a7 = u6(a7, m5(t7.maxElevation, c6));
  }
  return { minDistance: 0, maxDistance: l4 ?? 0, minElevation: i7 ?? 0, maxElevation: a7 ?? 0 };
}
function r5(t6, n11) {
  return null == n11 ? t6 : null != t6 ? Math.min(t6, n11) : n11;
}
function u6(t6, n11) {
  return null == n11 ? t6 : null != t6 ? Math.max(t6, n11) : n11;
}
function m5(t6, n11) {
  return null != t6 && null != n11 ? t6 * n11 : null;
}
var v5 = class {
  constructor() {
    this._start = 0, this._totalElevation = 0, this._sampleCount = 0;
  }
  get avgElevation() {
    return this._totalElevation / this._sampleCount;
  }
  get isHole() {
    return 0 === this._sampleCount;
  }
  get start() {
    return this._start;
  }
  copy(t6) {
    this._start = t6._start, this._sampleCount = t6._sampleCount, this._totalElevation = t6._totalElevation;
  }
  reset() {
    this._start = 0, this._sampleCount = 0, this._totalElevation = 0;
  }
  restart(t6, n11) {
    this._start = t6, this._sampleCount = 1, this._totalElevation = n11;
  }
  insert(t6) {
    ++this._sampleCount, this._totalElevation += t6;
  }
};

// node_modules/@arcgis/core/widgets/ElevationProfile/support/profileUtils.js
async function* P3(e14, t6) {
  const { view: s8, geometry: n11, elevationInfo: i7, providers: l4, options: a7 } = e14, c6 = s8.spatialReference;
  if (!c6 || null == n11 || !M2(n11))
    throw new r4(o6.InvalidGeometry);
  const p7 = l4.length;
  if (0 === p7)
    return null;
  const m7 = Math.round(a7.maxTotalSamples / p7);
  if (D2(n11) > m7)
    throw new r4(o6.TooComplex);
  const g2 = await y2(n11, i7, s8, c6, a7, m7, t6);
  let v7 = 0;
  const P6 = new Array(p7), R6 = new Array(p7);
  for (let r6 = 0; r6 < p7; r6++) {
    const o10 = U3(g2);
    P6[r6] = o10, v7 += o10.samples.length;
    const s9 = { ...e14, provider: l4[r6], result: o10, densificationResult: g2 };
    R6[r6] = j4(s9, t6)[Symbol.iterator]();
  }
  if (v7 > a7.maxTotalSamples)
    throw new r4(o6.TooComplex);
  const Z3 = await Promise.all(R6.map((e15) => {
    const t7 = e15.next();
    return true === t7.done ? Promise.resolve(null) : t7.value;
  }));
  s(t6);
  for (let r6 = 0; r6 < p7; r6++)
    P6[r6] = Z3[r6];
  yield P6, await A2(e14.delayAfterPreview ?? r2().delayAfterPreviewMillis, null, t6.signal);
  const x6 = [];
  try {
    let e15;
    do {
      e15 = false;
      for (let t7 = 0; t7 < p7; t7++) {
        const r6 = R6[t7].next();
        false === r6.done && (x6.push({ resultPromise: r6.value, index: t7 }), e15 = true);
      }
    } while (e15);
  } finally {
    R6.forEach((e15) => {
      var _a;
      return (_a = e15.return) == null ? void 0 : _a.call(e15);
    });
  }
  for (const { resultPromise: o10, index: u10 } of x6)
    P6[u10] = await o10, s(t6), yield P6;
  for (const r6 of P6)
    null != r6 && (r6.progress = 1);
  yield P6;
}
function* j4(t6, r6) {
  const { densificationResult: o10 } = t6, s8 = { ...t6, abortOptions: r6, densificationResult: o10 }, n11 = n7(0, s8.result.samples.length), i7 = n11.slice(0, s8.provider.numSamplesForPreview);
  yield R3(s8, i7, true);
  const l4 = m(n11, s8.provider.numSamplesPerChunk);
  for (const e14 of l4)
    yield R3(s8, e14, false);
}
async function R3({ densificationResult: e14, result: t6, provider: r6, queue: o10, abortOptions: n11, cache: l4 }, a7, c6) {
  const { densifiedPath: p7, pathLength: f7 } = e14, d8 = t6.spatialReference, { samples: h5 } = t6, y5 = [];
  for (let s8 = 0; s8 < a7.length; s8++) {
    const e15 = h5[a7[s8]];
    y5[s8] = e15.coordinate;
  }
  try {
    return await o10.push({ geometry: new u4({ spatialReference: d8, points: y5, hasZ: p7.hasZ }), provider: r6, indices: a7, preview: c6, result: t6, queryOptions: { ...r2().defaultQueryOptions(), minDemResolution: c6 ? Math.round(f7 / r6.numSamplesForPreview) : Math.round(f7 / h5.length), cache: l4 } }, n11), { ...t6 };
  } catch (w3) {
    return b(w3) ? null : d7;
  }
}
function Z2(e14) {
  return new _2({ priority: I.ELEVATION_PROFILE, concurrency: 1, scheduler: e14, process: async (e15) => {
    s(e15.queryOptions);
    try {
      await x4(e15);
    } catch (t6) {
      f(t6);
    }
  } });
}
async function x4({ geometry: e14, provider: t6, indices: r6, preview: o10, result: s8, queryOptions: n11 }) {
  if (0 === r6.length)
    return;
  const i7 = (await M3(t6, e14, n11)).geometry, { hasZ: l4, points: a7 } = i7, c6 = n11.noDataValue, { samples: p7 } = s8;
  for (let u10 = 0; u10 < r6.length; u10++) {
    const e15 = p7[r6[u10]];
    if (e15.isHole)
      continue;
    const t7 = l4 ? a7[u10][2] : null;
    null === t7 || t7 === c6 ? e15.sampledZ = null : (s8.hasZ = true, e15.sampledZ = t7), e15.sampled = true;
  }
  E3(p7), s8.progress = o10 ? 0 : s8.progress + r6.length / p7.length, s8.statistics = i3(s8.samples, s8.spatialReference);
}
function E3(e14) {
  const t6 = e14.length - 1;
  let r6 = 0;
  for (let o10 = 1; o10 <= t6; o10++) {
    (e14[o10].sampled || o10 === t6) && (O2(e14, r6, o10), r6 = o10);
  }
}
function O2(e14, r6, o10) {
  if (o10 - r6 == 1)
    return;
  const s8 = e14[r6], n11 = s8.sampledZ, i7 = e14[o10], l4 = i7.sampledZ;
  if (null == n11 || null == l4) {
    for (let t6 = r6 + 1; t6 < o10; t6++)
      e14[t6].sampledZ = null;
    return;
  }
  const a7 = s8.distance, c6 = i7.distance - a7;
  for (let p7 = r6 + 1; p7 < o10; p7++) {
    const r7 = e14[p7], o11 = (r7.distance - a7) / c6;
    r7.sampledZ = f3(n11, l4, o11);
  }
}
function U3({ densifiedPath: e14, distances: t6 }) {
  const r6 = e14.spatialReference, o10 = s3(r6), s8 = e14.paths, n11 = s8.length, i7 = [];
  let c6 = null, p7 = 0;
  for (let a7 = 0; a7 < n11; a7++) {
    const e15 = s8[a7], r7 = e15.length, n12 = t6[a7];
    for (let t7 = 0; t7 < r7; t7++) {
      const r8 = e15[t7], s9 = n12[t7];
      o10 && (r8[0] = z(r8[0], o10.valid[0], o10.valid[1])), c6 && 0 === t7 && S3(i7, c6, r8, p7, s9), i7.push(q(r8, s9)), c6 = r8, p7 = s9;
    }
  }
  return { progress: 0, samples: i7, hasZ: false, statistics: null, spatialReference: r6 };
}
function S3(e14, t6, r6, o10, s8) {
  e14.push(A6(t6, o10)), e14.push(A6(r6, s8));
}
function q(e14, t6) {
  return { coordinate: e14, distance: t6, sampledZ: null, sampled: false, isHole: false };
}
function A6(e14, t6) {
  return { coordinate: e14, distance: t6, sampledZ: null, sampled: true, isHole: true };
}
async function M3(e14, t6, r6) {
  try {
    return await e14.queryElevation(t6, r6);
  } catch (o10) {
    throw new r4(o6.ElevationQueryError);
  }
}

// node_modules/@arcgis/core/widgets/ElevationProfile/ElevationProfileController.js
var M4 = "line-change";
var y3 = class extends S {
  constructor(e14) {
    super(e14), this._updateTask = null, this._paramsPerProfile = /* @__PURE__ */ new Map(), this._getUpdateParametersMemoized = t2((e15, t6, o10) => ({ stationary: e15, visibleProfiles: t6, generationParameters: o10 })), this._getGenerationParametersMemoized = t2((e15, t6, o10, s8, r6, i7, a7) => A5(t6) && M2(t6) && null != s8 ? { view: e15, geometry: t6, elevationInfo: o10, options: i7, queue: s8, cache: r6, slicePlane: a7 } : null), this._getElevationInfoMemoized = t2((e15, t6) => ({ mode: e15, offset: t6 })), this._getOptionsMemoized = t2((e15, t6, o10) => {
      const { densificationMaxSamples: s8, maxTotalSamples: r6 } = r2();
      return { geodesicDistanceThreshold: e15, samplingDistance: t6, densificationMaxSamples: Math.round(s8 / o10), maxTotalSamples: r6 };
    }), this._updateThrottled = e6((e15) => d(this._update(e15)), r2().updateThrottleMillis);
  }
  initialize() {
    const e14 = this.viewModel;
    this.addHandles([d3(() => e14.profiles.toArray(), (e15) => {
      this._abortUpdate(), this._paramsPerProfile.clear(), this.removeHandles(M4), this.addHandles(e15.map((e16) => o2([e16.attach(this.viewModel), e16.on("change", () => {
        this._invalidateProfile(e16);
      })])), M4);
    }, A3), this._updateThrottled, d3(() => this._updateParameters, this._updateThrottled, A3)]);
  }
  destroy() {
    this._paramsPerProfile.clear();
  }
  get _updateParameters() {
    const { viewModel: e14 } = this, t6 = e14.view;
    return this._getUpdateParametersMemoized(null == t6 || t6.stationary, this.viewModel.visibleProfiles, this._generationParameters);
  }
  get _generationParameters() {
    const { view: e14, input: t6, queue: o10, tileCache: s8 } = this.viewModel;
    return null != e14 && e14.ready ? this._getGenerationParametersMemoized(e14, t6 == null ? void 0 : t6.geometry, this._elevationInfo, o10, s8, this._options, "3d" === e14.type ? e14.slicePlane : null) : null;
  }
  get _elevationInfo() {
    const e14 = this.viewModel.input, t6 = e14 ? c2(e14) ? null : a3(e14) : null;
    return null != t6 ? this._getElevationInfoMemoized(t6.mode, t6.offset) : null;
  }
  get _options() {
    const e14 = this.viewModel, t6 = e14.visibleProfiles.length;
    let o10 = e14.minDemResolution ?? r2().defaultDemResolution;
    return o10 = parseFloat(o10.toFixed(2)), this._getOptionsMemoized(e14.geodesicDistanceThreshold, o10, t6);
  }
  async _update({ stationary: e14, visibleProfiles: t6, generationParameters: s8 }) {
    this._abortUpdate(), e14 && (null != s8 ? this._updateTask = d2(async (e15) => {
      this.viewModel.error = null;
      const o10 = t6.filter((e16) => !this._isProfileValid(e16, s8)), r6 = P3({ ...s8, providers: o10 }, { signal: e15 });
      try {
        for await (const t7 of r6) {
          s(e15), this._clearInvalidResults(s8);
          for (let e16 = 0; e16 < o10.length; e16++)
            o10[e16].result = t7[e16];
        }
        for (const e16 of o10)
          this._paramsPerProfile.set(e16, s8);
      } catch (i7) {
        a(i7), this._abortUpdate(), this.viewModel.error = i7, o10.forEach((e16) => {
          e16.result = null;
        });
      }
    }) : this._clearResults());
  }
  _abortUpdate() {
    this._updateTask = e2(this._updateTask);
  }
  _isProfileValid(e14, t6) {
    return this._paramsPerProfile.has(e14) && this._paramsPerProfile.get(e14) === t6;
  }
  _invalidateProfile(e14) {
    this._paramsPerProfile.delete(e14), this._updateThrottled(this._updateParameters);
  }
  _clearInvalidResults(e14) {
    for (const t6 of this.viewModel.profiles.items)
      this._isProfileValid(t6, e14) || (t6.result = null, this._paramsPerProfile.delete(t6));
  }
  _clearResults() {
    for (const e14 of this.viewModel.profiles.items)
      e14.result = null, this._paramsPerProfile.delete(e14);
  }
};
e([y({ nonNullable: true })], y3.prototype, "viewModel", void 0), e([y()], y3.prototype, "_updateParameters", null), e([y()], y3.prototype, "_generationParameters", null), e([y()], y3.prototype, "_elevationInfo", null), e([y()], y3.prototype, "_options", null), y3 = e([a2("esri.widgets.ElevationProfile.ElevationProfileController")], y3);

// node_modules/@arcgis/core/widgets/ElevationProfile/support/unitUtils.js
function l2(t6, l4) {
  if (null == t6 || null == l4)
    return null;
  const { samples: i7, spatialReference: s8 } = t6, { distance: v7, elevation: r6 } = l4, u10 = W(s8), c6 = L(s8), m7 = i7.length, p7 = new Array(m7);
  for (let e14 = 0; e14 < m7; ++e14) {
    const n11 = i7[e14], t7 = n11.sampledZ, l5 = n11.coordinate;
    p7[e14] = { x: l5[0], y: l5[1], z: t7, distance: a6(n11.distance, u10, v7), elevation: o8(t7, c6, r6) };
  }
  return p7;
}
function i4(t6, l4) {
  if (null == t6 || null == l4 || null == t6.statistics || null == t6.spatialReference)
    return null;
  const { distance: i7, elevation: s8 } = l4, { statistics: v7, spatialReference: r6 } = t6, u10 = W(r6), c6 = L(r6);
  return { maxDistance: a6(v7.maxDistance, u10, i7), minElevation: o8(v7.minElevation, c6, s8), maxElevation: o8(v7.maxElevation, c6, s8), avgElevation: o8(v7.avgElevation, c6, s8), elevationGain: o8(v7.elevationGain, c6, s8), elevationLoss: o8(v7.elevationLoss, c6, s8), maxPositiveSlope: v7.maxPositiveSlope, maxNegativeSlope: v7.maxNegativeSlope, avgPositiveSlope: v7.avgPositiveSlope, avgNegativeSlope: v7.avgNegativeSlope };
}
function a6(e14, n11, l4) {
  return null == e14 ? null : j(e14 * n11, "meters", l4);
}
function o8(e14, n11, l4) {
  return null == e14 ? null : j(e14 * n11, "meters", l4);
}

// node_modules/@arcgis/core/widgets/ElevationProfile/ElevationProfileLine.js
var f5 = class extends o3.EventedAccessor {
  constructor(t6) {
    super(t6), this.type = null, this.id = n2(), this.title = null, this.color = new u5("#000000"), this.visible = true, this._getSamplesMemoized = t2((t7, e14) => l2(t7, e14)), this._getStatisticsMemoized = t2((t7, e14) => i4(t7, e14)), this.viewVisualizationEnabled = true, this.result = null, this.effectiveUnits = null, this.numSamplesForPreview = 30, this.numSamplesPerChunk = 200, this.chartFillEnabled = true, this.chartStrokeWidth = 1.5, this.chartStrokeOffsetY = 0, this._viewModel = null;
  }
  get progress() {
    return null != this.result && this.visible ? this.result.progress : 0;
  }
  get samples() {
    return this._getSamplesMemoized(this.result, this.effectiveUnits);
  }
  get statistics() {
    return this._getStatisticsMemoized(this.result, this.effectiveUnits);
  }
  get hoveredPoint() {
    var _a;
    const t6 = (_a = this._viewModel) == null ? void 0 : _a.hoveredChartPosition;
    return null != t6 ? this._getPoint(t6) : null;
  }
  get available() {
    return true;
  }
  get hasZ() {
    const t6 = this.result;
    return null != t6 && t6.hasZ;
  }
  get minDemResolution() {
    return r2().defaultDemResolution;
  }
  queryElevation() {
    throw new Error("not implemented");
  }
  attach(t6) {
    return this._viewModel = t6, o2([d3(() => t6.effectiveUnits, (t7) => {
      this.effectiveUnits = t7;
    }, A3), d3(() => [t6.input], () => this._onChange(), C)]);
  }
  toggleVisibility(t6) {
    this.visible = void 0 === t6 ? !this.visible : t6;
  }
  _onChange() {
    this.emit("change");
  }
  _getPoint(t6) {
    const { samples: e14, result: i7 } = this;
    if (null == e14 || null == i7)
      return null;
    const r6 = e14.length;
    if (0 === r6)
      return null;
    const s8 = e14[r6 - 1].distance, l4 = A(e14, t6 * s8, (t7) => t7.distance);
    if (null == l4)
      return null;
    const { x: n11, y: p7, z: a7 } = l4;
    return null == a7 ? null : new x({ x: n11, y: p7, z: a7, spatialReference: i7.spatialReference });
  }
};
e([y({ nonNullable: true })], f5.prototype, "id", void 0), e([y({ nonNullable: true })], f5.prototype, "title", void 0), e([y({ type: u5, nonNullable: true })], f5.prototype, "color", void 0), e([y({ nonNullable: true })], f5.prototype, "visible", void 0), e([y({ readOnly: true })], f5.prototype, "progress", null), e([y({ readOnly: true })], f5.prototype, "samples", null), e([y({ readOnly: true })], f5.prototype, "statistics", null), e([y()], f5.prototype, "hoveredPoint", null), e([y()], f5.prototype, "viewVisualizationEnabled", void 0), e([y()], f5.prototype, "available", null), e([y()], f5.prototype, "result", void 0), e([y()], f5.prototype, "effectiveUnits", void 0), e([y()], f5.prototype, "numSamplesForPreview", void 0), e([y()], f5.prototype, "numSamplesPerChunk", void 0), e([y()], f5.prototype, "chartFillEnabled", void 0), e([y()], f5.prototype, "chartStrokeWidth", void 0), e([y()], f5.prototype, "chartStrokeOffsetY", void 0), e([y({ readOnly: true })], f5.prototype, "hasZ", null), e([y({ readOnly: true })], f5.prototype, "minDemResolution", null), e([y()], f5.prototype, "_viewModel", void 0), f5 = e([a2("esri.widgets.ElevationProfile.ElevationProfileLine")], f5);
var y4 = f5;

// node_modules/@arcgis/core/widgets/ElevationProfile/support/elevationQuerySourceUtils.js
function o9(l4) {
  if (null == l4)
    return null;
  if (l4 instanceof b2)
    return e13(l4);
  const t6 = l4.tileInfo;
  if (null == t6)
    return null;
  const o10 = u(t6.lods);
  return null == o10 ? null : o10.resolution * W(t6.spatialReference);
}
function e13(n11) {
  if (null == n11)
    return null;
  const r6 = n11.layers.items.map(i5).filter(k);
  return c(r6) ?? null;
}
function i5(n11) {
  return n11 && "tileInfo" in n11 ? o9(n11) : null;
}

// node_modules/@arcgis/core/widgets/ElevationProfile/ElevationProfileLineGround.js
var p2 = class extends y4 {
  constructor(e14) {
    super(e14), this.type = "ground", this.color = new u5("#ff7f00"), this.viewVisualizationEnabled = true, this.numSamplesForPreview = 50, this.numSamplesPerChunk = 1e3, this._getQueryElevationDependencies = t2((e15, o10) => ({ ground: e15, groundLayers: o10 }));
  }
  get available() {
    const e14 = this._ground;
    return null != e14 && e14.layers.some((e15) => e15.visible);
  }
  get minDemResolution() {
    return e13(this._ground);
  }
  get _queryElevationDependencies() {
    return this._getQueryElevationDependencies(this._ground, this._groundLayers);
  }
  get _ground() {
    var _a, _b, _c;
    return (_c = (_b = (_a = this._viewModel) == null ? void 0 : _a.view) == null ? void 0 : _b.map) == null ? void 0 : _c.ground;
  }
  get _groundLayers() {
    var _a, _b;
    return ((_b = (_a = this._ground) == null ? void 0 : _a.layers) == null ? void 0 : _b.toArray()) ?? [];
  }
  async queryElevation(e14, o10) {
    const r6 = this._queryElevationDependencies;
    if (null == r6)
      throw new Error("ElevationProfileLineGround: no dependencies");
    const { ground: t6 } = r6;
    if (null == t6)
      throw new Error("No ground configured in the view");
    const n11 = await t6.queryElevation(e14, o10), s8 = L(e14.spatialReference), l4 = L(t6.layers.at(0).spatialReference);
    if (s8 !== l4) {
      const e15 = n11.geometry;
      e15.points = e15.points.map(([e16, r7, t7]) => [e16, r7, t7 === o10.noDataValue ? t7 : t7 * l4 / s8]);
    }
    return n11;
  }
  attach(e14) {
    return o2([super.attach(e14), d3(() => this._queryElevationDependencies, () => this._onChange())]);
  }
};
e([y({ type: u5, nonNullable: true })], p2.prototype, "color", void 0), e([y()], p2.prototype, "viewVisualizationEnabled", void 0), e([y()], p2.prototype, "available", null), e([y({ readOnly: true })], p2.prototype, "minDemResolution", null), e([y()], p2.prototype, "_queryElevationDependencies", null), e([y()], p2.prototype, "_ground", null), e([y()], p2.prototype, "_groundLayers", null), p2 = e([a2("esri.widgets.ElevationProfile.ElevationProfileLineGround")], p2);
var c4 = p2;

// node_modules/@arcgis/core/widgets/ElevationProfile/ElevationProfileLineInput.js
var u7 = class extends y4 {
  constructor(e14) {
    super(e14), this.type = "input", this.color = new u5("#00c8c8"), this.viewVisualizationEnabled = false, this.numSamplesForPreview = 50, this.numSamplesPerChunk = 500, this.chartFillEnabled = false, this.chartStrokeOffsetY = -1, this._getQueryElevationDependencies = t2((e15, t6, o10, r6, i7) => e15 ? { elevationInfo: e15, visibleLayers: t6, view: o10, stationary: r6, spatialReference: i7 } : null);
  }
  get queryElevationDependencies() {
    var _a;
    const e14 = (_a = this._viewModel) == null ? void 0 : _a.view;
    return null == e14 ? null : this._getQueryElevationDependencies(this._elevationInfo, this._visibleLayers, e14, e14.stationary, e14.spatialReference);
  }
  get available() {
    var _a;
    return !((_a = this._viewModel) == null ? void 0 : _a.inputIsSketched);
  }
  get _elevationInfo() {
    var _a;
    const e14 = (_a = this._viewModel) == null ? void 0 : _a.input;
    return e14 ? a3(e14) : null;
  }
  get _visibleLayers() {
    var _a, _b, _c, _d;
    return ((_d = (_c = (_b = (_a = this._viewModel) == null ? void 0 : _a.view) == null ? void 0 : _b.map) == null ? void 0 : _c.allLayers) == null ? void 0 : _d.filter((e14) => e14.visible).toArray()) ?? [];
  }
  async queryElevation(e14, { noDataValue: t6, signal: o10 }) {
    const r6 = this.queryElevationDependencies;
    if (null == r6)
      throw new Error("ElevationProfileLineInput: no dependencies");
    const { view: i7, elevationInfo: n11, spatialReference: s8 } = r6;
    if ("on-the-ground" === n11.mode && "3d" === i7.type && s8) {
      const r7 = await w.fromGeometry(e14).project(s8, o10);
      if (!r7)
        return { geometry: e14, noDataValue: t6 };
      const n12 = i7.elevationProvider;
      return r7.coordinates.forEach((e15) => {
        e15.z = n12.getElevation(e15.x, e15.y, 0, s8, "ground") ?? 0;
      }), { geometry: r7.export(), noDataValue: t6 };
    }
    return { geometry: e14, noDataValue: t6 };
  }
  attach(e14) {
    const t6 = () => this._onChange();
    return o2([super.attach(e14), d3(() => this.queryElevationDependencies, t6), v(() => e14.elevationProvider, "elevation-change", t6, { onListenerAdd: t6, onListenerRemove: t6 })]);
  }
};
e([y({ type: u5, nonNullable: true })], u7.prototype, "color", void 0), e([y()], u7.prototype, "viewVisualizationEnabled", void 0), e([y()], u7.prototype, "queryElevationDependencies", null), e([y()], u7.prototype, "available", null), e([y()], u7.prototype, "_elevationInfo", null), e([y()], u7.prototype, "_visibleLayers", null), u7 = e([a2("esri.widgets.ElevationProfile.ElevationProfileLineInput")], u7);
var v6 = u7;

// node_modules/@arcgis/core/widgets/ElevationProfile/ElevationProfileLineQuery.js
var u8 = class extends y4 {
  constructor(e14) {
    super(e14), this.type = "query", this.color = new u5("#db334a"), this.viewVisualizationEnabled = true, this.source = null, this.numSamplesForPreview = 50, this.numSamplesPerChunk = 500;
  }
  get minDemResolution() {
    return o9(this.source);
  }
  get available() {
    const e14 = this.source;
    return !!e14 && (null == e14.visible || e14.visible) && (null == e14.layers || e14.layers.some((e15) => e15.visible));
  }
  queryElevation(e14, o10) {
    if (!this.source)
      throw new Error("No source configured for the elevation profile line");
    return this.source.queryElevation(e14, o10);
  }
  attach(e14) {
    return o2([super.attach(e14), d3(() => this.source, () => this._onChange(), C)]);
  }
};
e([y({ type: u5, nonNullable: true })], u8.prototype, "color", void 0), e([y()], u8.prototype, "viewVisualizationEnabled", void 0), e([y()], u8.prototype, "source", void 0), e([y({ readOnly: true })], u8.prototype, "minDemResolution", null), e([y()], u8.prototype, "available", null), u8 = e([a2("esri.widgets.ElevationProfile.ElevationProfileLineQuery")], u8);
var p3 = u8;

// node_modules/@arcgis/core/widgets/ElevationProfile/ElevationProfileLineView.js
var j5 = 2e5;
var I2 = class extends y4 {
  constructor(e14) {
    super(e14), this.type = "view", this.color = new u5("#cf4ccf"), this.viewVisualizationEnabled = true, this.include = null, this.exclude = null, this.numSamplesForPreview = 50, this.numSamplesPerChunk = 25, this._getQueryElevationDependencies = t2((e15, t6, r6, i7, o10, n11, s8) => ({ inputGraphicUid: null != e15 ? x5(e15) : null, visibleLayers: t6, maxIntersectionDistance: r6, intersectOptions: i7, view: o10, stationary: n11, spatialReference: s8 })), this._vecA = n4(), this._vecB = n4(), this._ray = d6();
  }
  get minDemResolution() {
    var _a, _b, _c;
    const e14 = (_a = this._viewModel) == null ? void 0 : _a.view;
    if (null == e14 || "3d" !== e14.type)
      return null;
    const t6 = (_c = (_b = e14.pointsOfInterest) == null ? void 0 : _b.focus) == null ? void 0 : _c.worldUnitsPerContentPixel;
    return null == t6 ? null : t6 * L(e14.spatialReference);
  }
  get queryElevationDependencies() {
    var _a;
    const e14 = this._view;
    return e14 ? this._getQueryElevationDependencies((_a = this._viewModel) == null ? void 0 : _a.input, this._visibleLayers, this._maxIntersectionDistance, this._intersectOptions, e14, e14.stationary, e14.spatialReference) : null;
  }
  get _visibleLayers() {
    var _a, _b, _c;
    return ((_c = (_b = (_a = this._view) == null ? void 0 : _a.map) == null ? void 0 : _b.allLayers) == null ? void 0 : _c.filter((e14) => e14.visible).toArray()) ?? [];
  }
  get _intersectOptions() {
    const e14 = this._view;
    if (null == e14 || e14.destroyed)
      return {};
    const t6 = R(e14, { include: this.include, exclude: this.exclude }), r6 = R(e14, { exclude: this._pointCloudLayers });
    return t6.exclude = t(t6.exclude, r6.exclude), t6;
  }
  get _pointCloudLayers() {
    const e14 = this._view;
    return null == e14 ? [] : e14.allLayerViews.toArray().filter((e15) => {
      var _a;
      return "point-cloud" === ((_a = e15.layer) == null ? void 0 : _a.type);
    }).map((e15) => e15.layer);
  }
  get _view() {
    var _a;
    const e14 = (_a = this._viewModel) == null ? void 0 : _a.view;
    return null != e14 && "3d" === e14.type ? e14 : null;
  }
  get _maxIntersectionDistance() {
    const e14 = this._view;
    return (e14 == null ? void 0 : e14.renderCoordsHelper) ? s4(e14.spatialReference).radius / e14.renderCoordsHelper.unitInMeters : Number.POSITIVE_INFINITY;
  }
  get _intersector() {
    const e14 = this._view;
    if (null == e14)
      return null;
    const t6 = T(e14.state.viewingMode), r6 = t6.options;
    return r6.hud = false, r6.invisibleTerrain = false, r6.backfacesTerrain = false, r6.selectionMode = false, r6.store = e8.ALL, t6;
  }
  async queryElevation(e14, { noDataValue: t6, signal: r6 }) {
    const i7 = this.queryElevationDependencies;
    if (null == i7)
      throw new Error("ElevationProfileLineInput: no dependencies");
    const o10 = this._intersector;
    if (null == o10)
      throw new Error("ElevationProfileLineInput: no view");
    const { intersectOptions: n11, view: s8, spatialReference: l4 } = i7, c6 = s8.renderCoordsHelper, a7 = s8.sceneIntersectionHelper, p7 = this._vecA, d8 = this._vecA, m7 = this._vecB, f7 = this._ray;
    if (!l4)
      return { geometry: e14, noDataValue: t6 };
    const h5 = await w.fromGeometry(e14).project(l4, r6);
    if (!h5)
      return { geometry: e14, noDataValue: t6 };
    const w3 = h5.coordinates, _5 = w3.length;
    for (let y5 = 0; y5 < _5; ++y5) {
      const e15 = w3[y5];
      o4(m7, e15.x, e15.y, e15.z ?? 0), c6.toRenderCoords(m7, l4, m7), c6.setAltitude(p7, j5, m7);
      const r7 = l(p7, m7, f7);
      a7.computeIntersection(r7, o10, n11, true);
      const s9 = b5(i7, o10.results.all);
      s9 ? (s9.getIntersectionPoint(d8), c6.fromRenderCoords(d8, d8, l4), e15.z = d8[2]) : e15.z = t6;
    }
    return { geometry: h5.export(), noDataValue: t6 };
  }
  attach(e14) {
    const t6 = () => this._onChange();
    return o2([super.attach(e14), d3(() => this.queryElevationDependencies, t6), v(() => e14.elevationProvider, "elevation-change", t6, { onListenerAdd: t6, onListenerRemove: t6 })]);
  }
};
function b5({ view: e14, inputGraphicUid: t6, maxIntersectionDistance: r6 }, i7) {
  for (const o10 of i7) {
    if (null != o10.distanceInRenderSpace && o10.distanceInRenderSpace > r6)
      continue;
    const i8 = m4(o10, e14);
    if (null == i8 || x5(i8) !== t6)
      return o10;
  }
  return null;
}
function x5(e14) {
  if (e14.layer && "objectIdField" in e14.layer) {
    const t6 = e14.attributes[e14.layer.objectIdField];
    if (t6)
      return `o-${e14.layer.id}-${t6}`;
  }
  return `u-${e14.uid}`;
}
e([y({ type: u5, nonNullable: true })], I2.prototype, "color", void 0), e([y()], I2.prototype, "viewVisualizationEnabled", void 0), e([y()], I2.prototype, "include", void 0), e([y()], I2.prototype, "exclude", void 0), e([y({ readOnly: true })], I2.prototype, "minDemResolution", null), e([y()], I2.prototype, "queryElevationDependencies", null), e([y()], I2.prototype, "_visibleLayers", null), e([y()], I2.prototype, "_intersectOptions", null), e([y()], I2.prototype, "_pointCloudLayers", null), e([y()], I2.prototype, "_view", null), e([y()], I2.prototype, "_maxIntersectionDistance", null), e([y()], I2.prototype, "_intersector", null), I2 = e([a2("esri.widgets.ElevationProfile.ElevationProfileLineView")], I2);
var L3 = I2;

// node_modules/@arcgis/core/widgets/ElevationProfile/elevationProfileLineTypes.js
var l3 = { base: y4, key: "type", typeMap: { ground: c4, input: v6, query: p3, view: L3 }, errorContext: "elevation-profile-line" };
var p4 = V.ofType(l3);

// node_modules/@arcgis/core/widgets/ElevationProfile/ElevationProfileInteraction.js
var S4;
var f6;
function b6(t6) {
  return "2d" === t6 ? new d4({ data: { type: "CIMSymbolReference", symbol: { type: "CIMLineSymbol", symbolLayers: [{ type: "CIMSolidStroke", effects: [{ type: "CIMGeometricEffectDashes", dashTemplate: [5, 4], lineDashEnding: "FullGap", controlPointEnding: "NoConstraint" }], enable: true, capStyle: "Butt", joinStyle: "Round", width: 1.5, color: [0, 0, 0, 255] }, { type: "CIMSolidStroke", enable: true, capStyle: "Butt", joinStyle: "Round", width: 1.5, color: [255, 255, 255, 255] }] } } }) : new d5({ color: [0, 0, 0, 0] });
}
!function(t6) {
  t6.Ready = "ready", t6.Creating = "creating", t6.Reshaping = "reshaping", t6.ReshapingDisabled = "reshaping-disabled", t6.Selecting = "selecting", t6.Selected = "selected";
}(S4 || (S4 = {})), function(t6) {
  t6.View = "view", t6.Main = "main", t6.Interaction = "interaction";
}(f6 || (f6 = {}));
var k3 = class extends S {
  constructor(t6) {
    super(t6), this.state = S4.Ready, this._pendingStartOptions = null, this._previousInputInfo = null, this._shouldRemoveLastPoint = false, this._sketchedGraphics = /* @__PURE__ */ new WeakSet(), this._creationToolPromise = null, this._updateToolPromise = null, this._updateDisabled = false;
  }
  initialize() {
    this.addHandles(d3(() => ({ view: this.tool.viewModel.view, visible: this.tool.visible }), ({ view: t6, visible: e14 }) => {
      null != t6 && e14 ? this._attach(t6) : this._detach();
    }, A3), f6.View);
  }
  destroy() {
    this._detach();
  }
  get canStopCreating() {
    const t6 = this._geometry, e14 = this._shouldRemoveLastPoint ? 3 : 2;
    return A5(t6) && t6.paths.length > 0 && t6.paths[0].length >= e14;
  }
  get _input() {
    return this.tool.viewModel.input;
  }
  set _input(t6) {
    this.tool.viewModel.input = t6;
  }
  get _geometry() {
    var _a;
    return (_a = this._input) == null ? void 0 : _a.geometry;
  }
  get _visibleAndEditable() {
    return this.tool.visible && this.tool.editable;
  }
  get _view() {
    return this.tool.viewModel.view;
  }
  get test() {
    return { sketchVM: this._sketchVM, toolPromise: Promise.all([this._creationToolPromise ?? Promise.resolve(), this._updateToolPromise ?? Promise.resolve()]) };
  }
  start(t6 = { mode: "sketch" }) {
    if (!this.tool.editable)
      return;
    const e14 = this._view;
    if (null != e14 && e14.ready)
      switch (this._pendingStartOptions = null, this._stopInteraction(), null == this._previousInputInfo && this._storePreviousInput(this._input), this._setSketchedGraphic(null), t6.mode) {
        case "sketch":
          this._set("state", S4.Creating), this._startCreationInteraction();
          break;
        case "select":
          this._set("state", S4.Selecting), this._startSelectionInteraction();
      }
    else
      this._pendingStartOptions = t6;
  }
  stop() {
    this._pendingStartOptions = null, this._stopInteractionAndUpdate(), this._clearPreviousInput();
  }
  cancel() {
    this._pendingStartOptions = null, this._stopInteractionAndUpdate(), this._restorePreviousInput();
  }
  clear() {
    this._stopInteractionAndUpdate(), this._set("state", S4.Ready), this._clearPreviousInput(), this._input = null, this._pendingStartOptions = null;
  }
  isSketchedGraphic(t6) {
    return null != t6 && this._sketchedGraphics.has(t6);
  }
  _attach(t6) {
    this._detach();
    const e14 = { mode: "3d" === t6.type ? "relative-to-ground" : "on-the-ground", offset: null };
    this._graphicsLayer = new h3({ listMode: "hide", internal: true, elevationInfo: e14 });
    const i7 = b6(t6.type);
    this._sketchVM = new pe({ layer: this._graphicsLayer, view: t6, defaultCreateOptions: { mode: "click", hasZ: false }, updateOnGraphicClick: false, defaultUpdateOptions: { reshapeOptions: { shapeOperation: "none" }, enableRotation: false, enableScaling: false, enableMoveAllGraphics: false, enableZ: false, multipleSelectionEnabled: false, toggleToolOnClick: false, tool: "reshape" }, polylineSymbol: i7, activeLineSymbol: i7 }), this.addHandles([p(() => t6.ready, () => {
      const t7 = this._pendingStartOptions;
      t7 && this.start(t7);
    }, A3), d3(() => [this._input, this._visibleAndEditable], () => this._update(), A3), d3(() => ({ map: t6.map, graphicsLayer: this._graphicsLayer }), ({ map: t7, graphicsLayer: e15 }) => {
      null != t7 && null != e15 && t7.add(e15), this._update();
    }, A3)], f6.Main);
  }
  _detach() {
    var _a;
    this.removeHandles(f6.Main), this._sketchVM = u2(this._sketchVM), this._creationToolPromise = null, this._updateToolPromise = null;
    const t6 = (_a = this._view) == null ? void 0 : _a.map, e14 = this._graphicsLayer;
    null != t6 && null != e14 && t6.remove(e14), this._graphicsLayer = u2(this._graphicsLayer), this._shouldRemoveLastPoint = false, this._set("state", S4.Ready);
  }
  _startCreationInteraction() {
    this._stopInteractionAndUpdate();
    const t6 = this._view, i7 = this._sketchVM;
    if (null == t6 || null == i7)
      return;
    this._shouldRemoveLastPoint = false;
    const s8 = i7.on("create", (t7) => {
      var _a;
      const e14 = t7.graphic;
      switch (t7.state) {
        case "complete":
          this._shouldRemoveLastPoint = false, this._setSketchedGraphic(e14), this._stopInteractionAndUpdate(), this._clearPreviousInput();
          break;
        case "cancel":
          this.cancel();
          break;
        case "active":
          this._setSketchedGraphic(e14), "cursor-update" === ((_a = t7.toolEventInfo) == null ? void 0 : _a.type) && (this._shouldRemoveLastPoint = true);
          break;
        case "start":
          this._setSketchedGraphic(e14);
      }
    }), n11 = () => {
      var _a;
      s8.remove();
      const t7 = this.canStopCreating, o10 = (_a = this._geometry) == null ? void 0 : _a.clone();
      i7.cancel(), this._creationToolPromise = null, null != o10 && t7 ? this._shouldRemoveLastPoint && this._setSketchedGraphic(new f4({ geometry: P4(o10) })) : this._input = null;
    };
    this.removeHandles(f6.Interaction), this.addHandles(e3(n11), f6.Interaction), this._creationToolPromise = d(i7.create("polyline"));
  }
  _startReshapeInteraction() {
    this._stopInteraction();
    const t6 = this._view, e14 = this._sketchVM;
    if (null == t6 || null == e14)
      return;
    const i7 = e14.on("update", (t7) => {
      const e15 = t7.graphics[0];
      switch (t7.state) {
        case "complete":
          this._setSketchedGraphic(e15), this._stopInteractionAndUpdate(), this._clearPreviousInput();
          break;
        case "active":
        case "start":
          this._setSketchedGraphic(e15);
      }
    }), s8 = () => {
      i7.remove(), e14.cancel(), this._updateToolPromise = null;
    };
    this.removeHandles(f6.Interaction), this.addHandles(e3(s8), f6.Interaction);
    const n11 = this._input;
    n11 && (n11.visible = true, this._updateToolPromise = d(e14.update(n11, { tool: "reshape" })));
  }
  _startSelectionInteraction() {
    this._stopInteraction();
    const t6 = this._view;
    if (null == t6)
      return;
    const e14 = t6.cursor, i7 = e3(() => t6.cursor = e14);
    t6.cursor = "crosshair", t6.closePopup();
    let n11 = null;
    const r6 = e3(() => e2(n11)), h5 = t6.on("immediate-click", (e15) => {
      e15.async(async () => {
        e2(n11), n11 = d2(async (i8) => {
          const { results: s8 } = await t6.hitTest(e15);
          s(i8);
          const o10 = s8.filter((t7) => "graphic" === t7.type && null != t7.graphic).map((t7) => t7.graphic).find((t7) => null != t7.geometry && "polyline" === t7.geometry.type);
          o10 && (e15.preventDefault(), e15.stopPropagation(), this._input = o10, this._clearPreviousInput(), this._stopInteractionAndUpdate());
        }), await n11.promise;
      });
    }, _3.TOOL), c6 = t6.on("key-down", (t7) => {
      "Escape" === t7.key && this.cancel();
    });
    this.removeHandles(f6.Interaction), this.addHandles([h5, c6, r6, i7], f6.Interaction), t6.ready && t6.focus();
  }
  _stopInteraction() {
    this.removeHandles(f6.Interaction);
  }
  _stopInteractionAndUpdate() {
    this.hasHandles(f6.Interaction) && (this._updateDisabled = true, this._stopInteraction(), this._updateDisabled = false, this._triggerUpdate());
  }
  _triggerUpdate() {
    this._set("state", S4.Ready), this._update();
  }
  _update() {
    if (this._updateDisabled)
      return;
    const t6 = this.state;
    if (t6 !== S4.Selecting) {
      if (this._visibleAndEditable) {
        if (t6 === S4.Creating || t6 === S4.Reshaping && this.isSketchedGraphic(this._input))
          return;
      } else
        this.cancel();
      this._set("state", this._getNextState()), this._updateVisuals();
    } else
      this.stop();
  }
  _getNextState() {
    return null == this._input ? S4.Ready : this.isSketchedGraphic(this._input) ? this.state === S4.Creating ? S4.Creating : this._visibleAndEditable ? S4.Reshaping : S4.ReshapingDisabled : S4.Selected;
  }
  _updateVisuals() {
    switch (this.state) {
      case S4.Creating:
        break;
      case S4.Reshaping:
        this._startReshapeInteraction();
        break;
      case S4.ReshapingDisabled: {
        this._stopInteractionAndUpdate();
        const t6 = this._input;
        null != t6 && this.isSketchedGraphic(t6) && (t6.visible = false);
        break;
      }
      case S4.Ready:
      case S4.Selected:
        this._stopInteractionAndUpdate();
      case S4.Selecting:
    }
    this._updateSketchedGraphic();
  }
  _storePreviousInput(t6) {
    this._previousInputInfo = { graphic: t6 };
  }
  _restorePreviousInput() {
    const t6 = this._previousInputInfo;
    null != t6 && (this._clearPreviousInput(), this._input = t6.graphic, this._triggerUpdate());
  }
  _clearPreviousInput() {
    this._previousInputInfo = null;
  }
  _updateSketchedGraphic() {
    const t6 = this._graphicsLayer;
    if (null == t6)
      return;
    const e14 = t6.graphics, i7 = this._input;
    if (null == i7 || !this.isSketchedGraphic(i7))
      return void e14.removeAll();
    if (-1 === e14.indexOf(i7))
      e14.removeAll(), e14.add(i7);
    else if (1 !== e14.length) {
      const t7 = e14.filter((t8) => t8 !== i7);
      e14.removeMany(t7);
    }
  }
  _setSketchedGraphic(t6) {
    null != t6 && this._sketchedGraphics.add(t6), this._input = t6, this._updateSketchedGraphic();
  }
};
function P4(t6) {
  if (A5(t6)) {
    const e14 = t6.clone();
    return e14.paths = [e14.paths[0].slice(0, -1)], e14;
  }
  return t6;
}
e([y({ nonNullable: true })], k3.prototype, "state", void 0), e([y({ nonNullable: true })], k3.prototype, "tool", void 0), e([y()], k3.prototype, "canStopCreating", null), e([y()], k3.prototype, "_graphicsLayer", void 0), e([y()], k3.prototype, "_sketchVM", void 0), e([y()], k3.prototype, "_input", null), e([y()], k3.prototype, "_geometry", null), e([y()], k3.prototype, "_visibleAndEditable", null), e([y()], k3.prototype, "_view", null), e([y()], k3.prototype, "_shouldRemoveLastPoint", void 0), k3 = e([a2("esri.widgets.ElevationProfile.ElevationProfileInteraction")], k3);

// node_modules/@arcgis/core/widgets/ElevationProfile/support/ElevationProfileView.js
var p5 = class extends S {
  constructor(i7) {
    super(i7), this._implementation = null, this._loadingTask = null;
  }
  initialize() {
    this.addHandles(d3(() => {
      var _a;
      return { tool: this.tool, view: this.tool.viewModel.view, visible: this.tool.visible && !!((_a = this.tool.viewModel.view) == null ? void 0 : _a.ready) };
    }, ({ tool: i7, view: o10, visible: t6 }) => {
      null != o10 && t6 ? this._show(o10, i7) : this._hide();
    }, A3));
  }
  destroy() {
    this._hide();
  }
  _show(i7, o10) {
    this._loadingTask = e2(this._loadingTask), this._loadingTask = d2(async (t6) => {
      if ("2d" === i7.type) {
        const e14 = import("./ElevationProfileView2D-E7ZOKNNY.js"), s8 = (await h(e14, t6)).ElevationProfileView2D;
        this._implementation = new s8(i7, o10);
      } else if ("3d" === i7.type) {
        const e14 = import("./ElevationProfileView3D-NF6SEJIO.js"), s8 = (await h(e14, t6)).ElevationProfileView3D;
        this._implementation = new s8(i7, o10);
      }
    });
  }
  _hide() {
    this._loadingTask = e2(this._loadingTask), this._implementation = u2(this._implementation);
  }
};
e([y()], p5.prototype, "tool", void 0), p5 = e([a2("esri.widgets.ElevationProfile.support.ElevationProfileView")], p5);

// node_modules/@arcgis/core/widgets/ElevationProfile/ElevationProfileTool.js
var c5 = class extends S {
  constructor(e14) {
    super(e14), this.editable = true, this.visible = true, this.highlightEnabled = true;
  }
  initialize() {
    this.view = new p5({ tool: this }), this.interaction = new k3({ tool: this });
  }
  destroy() {
    this.interaction.destroy(), this.view.destroy();
  }
  get state() {
    var _a;
    const e14 = (_a = this.interaction) == null ? void 0 : _a.state;
    switch (e14) {
      case S4.Ready:
        return t4.Ready;
      case S4.Creating:
        return t4.Creating;
      case S4.Selecting:
        return t4.Selecting;
      case S4.Selected:
        return t4.Selected;
      case S4.Reshaping:
      case S4.ReshapingDisabled:
        return t4.Created;
    }
  }
};
e([y({ nonNullable: true })], c5.prototype, "viewModel", void 0), e([y()], c5.prototype, "view", void 0), e([y()], c5.prototype, "interaction", void 0), e([y()], c5.prototype, "editable", void 0), e([y()], c5.prototype, "visible", void 0), e([y()], c5.prototype, "highlightEnabled", void 0), c5 = e([a2("esri.widgets.ElevationProfile.ElevationProfileTool")], c5);

// node_modules/@arcgis/core/widgets/ElevationProfile/ElevationProfileViewModel.js
var R4 = class extends S {
  constructor(t6) {
    super(t6), this.view = null, this.input = null, this._getEffectiveUnitsMemoized = t2((t7, e14) => ({ distance: t7, elevation: e14 })), this.hoveredChartPosition = null, this.uniformChartScaling = false, this.defaultUnit = null, this.queue = null, this._currentTileCache = null, this.error = null, this._defaultProfileLineGround = new c4(), this._userUnitOptions = null, this._userUnit = null, (t6 == null ? void 0 : t6.profiles) || (this.profiles = new V([this._defaultProfileLineGround]));
  }
  initialize() {
    this.addHandles(d3(() => this.view, (t6) => {
      var _a;
      if (null == t6)
        return void n.getLogger(this).warnOnce("no view. Widget will be disabled until a view is provided.");
      this.removeHandles(q2);
      const e14 = "3d" === t6.type ? t6.resourceController : void 0;
      (_a = this.queue) == null ? void 0 : _a.destroy(), this.queue = Z2(e14 == null ? void 0 : e14.scheduler);
      const i7 = e14 == null ? void 0 : e14.addUpdatingObject(this);
      i7 && this.addHandles(i7, q2);
    }, A3)), this.tool = new c5({ viewModel: this }), this._controller = new y3({ viewModel: this });
  }
  destroy() {
    this._defaultProfileLineGround = u2(this._defaultProfileLineGround), this._controller = u2(this._controller), this._currentTileCache = u2(this._currentTileCache), this.tool = u2(this.tool), this.queue = u2(this.queue);
  }
  get profiles() {
    return this._get("profiles");
  }
  set profiles(t6) {
    const e14 = this._get("profiles"), i7 = t6 ?? new V();
    this._set("profiles", n5(i7, e14));
  }
  get state() {
    const t6 = this.view;
    return null != t6 && t6.ready ? this.tool.state : t4.Disabled;
  }
  get progress() {
    let t6 = 0, e14 = 0;
    for (const i7 of this.visibleProfiles)
      t6++, e14 += i7.progress;
    return t6 > 0 ? e14 / t6 : 0;
  }
  set unitOptions(t6) {
    this._userUnitOptions = t6, this._set("unitOptions", this._filteredOrAllUnits(this._userUnitOptions));
  }
  get unitOptions() {
    return this._filteredOrAllUnits(this._userUnitOptions);
  }
  set unit(t6) {
    this._userUnit = t6 ? this._findSelectableUnit(t6, this._userUnit) : null, this.notifyChange("unit");
  }
  get unit() {
    return this._userUnit ? (this._userUnit = this._findSelectableUnit(this._userUnit, this.defaultUnit), this._userUnit) : this._findSelectableUnit(this.defaultUnit);
  }
  get effectiveUnits() {
    const t6 = s6(this.visibleProfiles.map((t7) => t7.result)), e14 = N(t6.maxDistance, "meters", this.unit), i7 = O(t6.maxElevation, "meters", this.unit);
    return this._getEffectiveUnitsMemoized(e14, i7);
  }
  get geodesicDistanceThreshold() {
    return this._get("geodesicDistanceThreshold");
  }
  set geodesicDistanceThreshold(t6) {
    o(n.getLogger(this), "geodesicDistanceThreshold", { version: "4.29", warnOnce: true }), this._set("geodesicDistanceThreshold", t6);
  }
  get highlightEnabled() {
    return this.tool.highlightEnabled;
  }
  set highlightEnabled(t6) {
    this.tool.highlightEnabled = t6;
  }
  get hasVertices() {
    var _a;
    const t6 = (_a = this.input) == null ? void 0 : _a.geometry;
    return A5(t6) && t6.paths.reduce((t7, e14) => t7 + e14.length, 0) > 0;
  }
  get hoveredPoints() {
    return null != this.input && this.visible && this.tool.editable ? this.visibleProfiles.map((t6) => {
      const e14 = t6.hoveredPoint;
      return null != e14 ? { hoveredPoint: e14, color: t6.color } : null;
    }).filter(k) : [];
  }
  get statistics() {
    return o7(this.visibleProfiles.map((t6) => t6.statistics));
  }
  get chartData() {
    if (null == this.input)
      return null;
    const { effectiveUnits: t6, progress: e14, statistics: i7, visibleProfiles: o10, uniformChartScaling: r6 } = this, s8 = o10.filter((t7) => t7.hasZ).map((t7) => ({ id: t7.id, type: t7.type, title: t7.title, color: t7.color, samples: t7.samples, progress: t7.progress, chartFillEnabled: t7.chartFillEnabled, chartStrokeWidth: t7.chartStrokeWidth, chartStrokeOffsetY: t7.chartStrokeOffsetY, viewVisualizationEnabled: t7.viewVisualizationEnabled }));
    return 0 === s8.length ? null : { lines: s8, effectiveUnits: t6, statistics: i7, refined: 1 === e14, dynamicElevationRange: o10.some((t7) => "view" === t7.type), uniformScaling: r6 };
  }
  get visibleProfiles() {
    return this.profiles.toArray().filter((t6) => t6.available && t6.visible);
  }
  get minDemResolutions() {
    const t6 = [];
    for (const { minDemResolution: e14 } of this.visibleProfiles)
      null != e14 && t6.push(e14);
    return t6;
  }
  get minDemResolution() {
    return c(this.minDemResolutions);
  }
  get errorState() {
    var _a;
    const t6 = (_a = this.input) == null ? void 0 : _a.geometry;
    if (!M2(t6))
      return a4.NoValidInput;
    if (null != this.error) {
      if (n9(this.error))
        switch (this.error.cause) {
          case o6.TooComplex:
            return a4.TooComplex;
          case o6.InvalidGeometry:
            return a4.InvalidGeometry;
          case o6.InvalidElevationInfo:
            return a4.InvalidElevationInfo;
          case o6.ElevationQueryError:
            return a4.NoValidInput;
        }
      return a4.UnknownError;
    }
    return 0 === this.visibleProfiles.length ? a4.NoVisibleProfiles : null == this.chartData && 1 === this.progress ? a4.RefinedButNoChartData : a4.None;
  }
  get tileCache() {
    var _a;
    this._currentTileCache = u2(this._currentTileCache);
    const t6 = this.view;
    if (null != t6 && "3d" === (t6 == null ? void 0 : t6.type)) {
      const e14 = (_a = t6.basemapTerrain) == null ? void 0 : _a.elevationQueryCache;
      if (null != e14)
        return e14;
    }
    return null == this._currentTileCache && (this._currentTileCache = new t3(new e5(20 * E.MEGABYTES))), this._currentTileCache;
  }
  get visible() {
    return this.tool.visible;
  }
  set visible(t6) {
    this.tool.visible = t6;
  }
  get inputIsSketched() {
    return this.tool.interaction.isSketchedGraphic(this.input);
  }
  get elevationProvider() {
    const t6 = this.view;
    return null != t6 && "3d" === t6.type ? t6.elevationProvider : null;
  }
  get updating() {
    var _a;
    const { progress: t6 } = this, e14 = !!((_a = this.queue) == null ? void 0 : _a.updating);
    return t6 > 0 && t6 < 1 || e14;
  }
  start(t6) {
    this.tool.interaction.start(t6);
  }
  stop() {
    this.tool.interaction.stop();
  }
  cancel() {
    this.tool.interaction.cancel();
  }
  clear() {
    this.tool.interaction.clear();
  }
  _findSelectableUnit(t6, e14) {
    const i7 = this.unitOptions;
    return null != t6 && i7.includes(t6) ? t6 : e14 ? this._findSelectableUnit(e14) : i7[0];
  }
  _filteredOrAllUnits(t6) {
    const e14 = (null != t6 ? t6 : []).filter((t7) => M.includes(t7));
    return 0 === e14.length ? M.slice() : e14;
  }
};
e([y()], R4.prototype, "view", void 0), e([y({ type: f4 })], R4.prototype, "input", void 0), e([y({ type: p4, nonNullable: true })], R4.prototype, "profiles", null), e([y({ readOnly: true })], R4.prototype, "state", null), e([y({ readOnly: true })], R4.prototype, "progress", null), e([y()], R4.prototype, "unitOptions", null), e([y()], R4.prototype, "unit", null), e([y({ readOnly: true })], R4.prototype, "effectiveUnits", null), e([y()], R4.prototype, "geodesicDistanceThreshold", null), e([y()], R4.prototype, "hoveredChartPosition", void 0), e([y()], R4.prototype, "uniformChartScaling", void 0), e([y()], R4.prototype, "highlightEnabled", null), e([y({ readOnly: true })], R4.prototype, "hoveredPoints", null), e([y({ readOnly: true })], R4.prototype, "statistics", null), e([y()], R4.prototype, "chartData", null), e([y()], R4.prototype, "visibleProfiles", null), e([y()], R4.prototype, "minDemResolutions", null), e([y({ readOnly: true })], R4.prototype, "minDemResolution", null), e([y({ readOnly: true })], R4.prototype, "errorState", null), e([y(e9)], R4.prototype, "defaultUnit", void 0), e([y()], R4.prototype, "queue", void 0), e([y()], R4.prototype, "tileCache", null), e([y()], R4.prototype, "tool", void 0), e([y()], R4.prototype, "visible", null), e([y()], R4.prototype, "error", void 0), e([y()], R4.prototype, "inputIsSketched", null), e([y()], R4.prototype, "elevationProvider", null), e([y()], R4.prototype, "updating", null), e([y()], R4.prototype, "_defaultProfileLineGround", void 0), e([y()], R4.prototype, "_userUnitOptions", void 0), e([y()], R4.prototype, "_controller", void 0), e([y()], R4.prototype, "_userUnit", void 0), R4 = e([a2("esri.widgets.ElevationProfile.ElevationProfileViewModel")], R4);
var q2 = Symbol("updating-object");
var z3 = R4;

// node_modules/@arcgis/core/widgets/ElevationProfile/ElevationProfileVisibleElements.js
var s7 = class extends S {
  constructor() {
    super(...arguments), this.legend = true, this.chart = true, this.clearButton = true, this.settingsButton = true, this.sketchButton = true, this.selectButton = true, this.unitSelector = true, this.uniformChartScalingToggle = true;
  }
};
e([y()], s7.prototype, "legend", void 0), e([y()], s7.prototype, "chart", void 0), e([y()], s7.prototype, "clearButton", void 0), e([y()], s7.prototype, "settingsButton", void 0), e([y()], s7.prototype, "sketchButton", void 0), e([y()], s7.prototype, "selectButton", void 0), e([y()], s7.prototype, "unitSelector", void 0), e([y()], s7.prototype, "uniformChartScalingToggle", void 0), s7 = e([a2("esri.widgets.ElevationProfile.ElevationProfileVisibleElements")], s7);
var i6 = s7;

// node_modules/@arcgis/core/widgets/ElevationProfile/components/Statistics.js
var h4 = 100;
var u9 = class extends D {
  constructor(t6, s8) {
    super(t6, s8), this._updateLayout = (t7) => {
      const e14 = t7.parentElement, s9 = t7.style.display;
      e14 == null ? void 0 : e14.removeChild(t7), document.body.appendChild(t7), t7.style.display = "block";
      let i7 = 80;
      for (const o10 of t7.childNodes)
        o10 instanceof HTMLElement && (i7 = Math.max(i7, o10.offsetWidth));
      document.body.removeChild(t7), e14 == null ? void 0 : e14.appendChild(t7), t7.style.display = s9, t7.style.setProperty("--max-width", `${i7}px`);
    }, this._updateLayoutThrottled = e6(this._updateLayout, h4);
  }
  loadDependencies() {
    return r({ icon: () => import("./calcite-icon-25XWA6H7.js") });
  }
  initialize() {
    this.addHandles(this._updateLayoutThrottled);
  }
  render() {
    return n3("div", { afterCreate: this._updateLayout, afterUpdate: this._updateLayoutThrottled, bind: this, class: _4.base }, this._renderStatistics());
  }
  _renderStatistics() {
    var _a;
    const t6 = (_a = this._messages) == null ? void 0 : _a.statistics;
    return t6 ? [this._renderDistanceStatistic("maxDistance", t6.maxDistance), this._renderElevationStatistic("elevationGain", t6.gain), this._renderElevationStatistic("elevationLoss", t6.loss), this._renderElevationStatistic("minElevation", t6.minElevation), this._renderElevationStatistic("maxElevation", t6.maxElevation), this._renderElevationStatistic("avgElevation", t6.avgElevation), this._renderSlopeStatistic("maxPositiveSlope", "maxNegativeSlope", t6.maxSlope), this._renderSlopeStatistic("avgPositiveSlope", "avgNegativeSlope", t6.avgSlope)] : [];
  }
  _renderDistanceStatistic(t6, e14) {
    const i7 = r2().formatPrecision, o10 = this._renderValue(t6, (t7) => {
      const e15 = this.effectiveUnits.distance;
      return g(this._messagesUnits, t7, e15, i7);
    });
    return this._renderStatistic(e14, o10);
  }
  _renderElevationStatistic(t6, e14) {
    const i7 = r2().formatPrecision, o10 = this._renderValue(t6, (t7) => {
      const e15 = this.effectiveUnits.elevation;
      return g(this._messagesUnits, t7, e15, i7);
    });
    return this._renderStatistic(e14, o10);
  }
  _renderSlopeStatistic(t6, e14, s8) {
    const o10 = r2().formatPrecision, r6 = n3("div", { class: _4.slopeValue, key: "slope-up" }, n3("calcite-icon", { icon: "arrow-up", scale: "s" }), this._renderValue(t6, (t7) => U(t7, "degrees", "geographic", "geographic", o10)), n3("calcite-icon", { icon: "arrow-down", scale: "s" }), this._renderValue(e14, (t7) => U(t7, "degrees", "geographic", "geographic", o10)));
    return this._renderStatistic(s8, r6);
  }
  _renderStatistic(t6, e14) {
    return n3("div", { class: _4.statistic }, n3("label", { class: _4.statisticLabel }, t6), n3("div", { class: _4.statisticValue }, e14));
  }
  _renderValue(t6, e14) {
    const s8 = this.line, i7 = 1 === s8.progress ? s8.statistics : null, o10 = i7 == null ? void 0 : i7[t6];
    return null != o10 ? e14(o10) : s5;
  }
};
e([y()], u9.prototype, "effectiveUnits", void 0), e([y()], u9.prototype, "line", void 0), e([y(), e4("esri/widgets/ElevationProfile/t9n/ElevationProfile")], u9.prototype, "_messages", void 0), e([y(), e4("esri/core/t9n/Units")], u9.prototype, "_messagesUnits", void 0), u9 = e([a2("esri.widgets.ElevationProfile.components.Statistics")], u9);

// node_modules/@arcgis/core/widgets/ElevationProfile/components/LegendItem.js
var m6 = class extends D {
  constructor(e14, t6) {
    super(e14, t6), this.checkboxVisible = true, this.expanded = false;
  }
  loadDependencies() {
    return r({ action: () => import("./calcite-action-P2CTRNG2.js"), checkbox: () => import("./calcite-checkbox-AHETVK7Y.js"), label: () => import("./calcite-label-W4VTHQAF.js"), tooltip: () => import("./calcite-tooltip-TDDUGVK4.js") });
  }
  initialize() {
    this._statistics = new u9(this._statisticsProps), this.addHandles(d3(() => this._statisticsProps, (e14) => this._statistics.set(e14)));
  }
  destroy() {
    this._statistics = u2(this._statistics);
  }
  render() {
    const e14 = this.expanded;
    return n3("div", { class: this.classes(a5.base, { [a5.disabled]: this.disabled, [a5.expanded]: e14 }), key: this }, this._renderColorIndicator(), n3("div", { class: a5.header, key: "header" }, this._renderLabelWithCheckbox(), this._renderCollapseToggleButton()), e14 ? n3("div", { class: a5.content, key: "content" }, this._statistics.render()) : null);
  }
  get disabled() {
    return !this.line.available;
  }
  get _statisticsProps() {
    return { line: this.line, effectiveUnits: this.effectiveUnits };
  }
  _renderColorIndicator() {
    return n3("div", { class: a5.colorIndicator, key: "color-indicator", styles: { backgroundColor: this.line.color.toCss() } });
  }
  _renderCollapseToggleButton() {
    const { expanded: e14, messages: t6 } = this, s8 = e14 ? t6.hideDetails : t6.showDetails;
    return n3("calcite-action", { appearance: "transparent", bind: this, class: a5.collapseToggle, "data-testid": "legend-toggle", icon: e14 ? "chevron-up" : "chevron-down", key: "collapse-toggle", onclick: this._onCollapseToggleClick, scale: "s", text: s8, title: s8 });
  }
  _onCollapseToggleClick() {
    this.onExpandedToggle();
  }
  _renderLabelWithCheckbox() {
    const { line: e14, checkboxVisible: t6, disabled: s8, messages: o10 } = this, i7 = `label-${e14.id}`;
    return n3("calcite-label", { class: a5.label, disabled: s8, key: i7, layout: "inline" }, t6 ? this._renderCheckbox(e14.id) : null, e10(e14, o10));
  }
  _renderCheckbox(e14) {
    const { disabled: t6, line: s8, messages: o10 } = this, i7 = s8.visible, r6 = `${e14}-checkbox`, l4 = i7 ? o10.hideProfile : o10.showProfile, a7 = s2(l4, { name: e10(s8, o10) });
    return n3(i, null, n3("calcite-checkbox", { checked: i7, class: a5.checkbox, disabled: t6, id: r6, key: "checkbox", onCalciteCheckboxChange: () => s8.toggleVisibility() }), n3("calcite-tooltip", { overlayPositioning: "fixed", placement: "top", referenceElement: r6 }, a7));
  }
};
e([y()], m6.prototype, "checkboxVisible", void 0), e([y()], m6.prototype, "disabled", null), e([y({ nonNullable: true })], m6.prototype, "effectiveUnits", void 0), e([y()], m6.prototype, "expanded", void 0), e([y({ nonNullable: true })], m6.prototype, "line", void 0), e([y()], m6.prototype, "messages", void 0), e([y()], m6.prototype, "onExpandedToggle", void 0), e([y()], m6.prototype, "_statistics", void 0), m6 = e([a2("esri.widgets.ElevationProfile.components.LegendItem")], m6);

// node_modules/@arcgis/core/widgets/ElevationProfile/components/Legend.js
var n10 = class extends D {
  constructor() {
    super(...arguments), this._expandedLine = null;
  }
  render() {
    const { profiles: e14, messages: o10, effectiveUnits: s8, _expandedLine: t6 } = this;
    return n3("div", { class: n8.base }, e14.map((r6) => n3(m6, { checkboxVisible: e14.length > 1, effectiveUnits: s8, expanded: r6 === t6, line: r6, messages: o10, onExpandedToggle: () => this._onExpandedToggle(r6) })));
  }
  _onExpandedToggle(e14) {
    this._expandedLine = e14 === this._expandedLine ? null : e14;
  }
};
e([y()], n10.prototype, "effectiveUnits", void 0), e([y()], n10.prototype, "messages", void 0), e([y()], n10.prototype, "profiles", void 0), e([y()], n10.prototype, "_expandedLine", void 0), n10 = e([a2("esri.widgets.ElevationProfile.components.Legend")], n10);

// node_modules/@arcgis/core/widgets/ElevationProfile/components/SettingsButton.js
var p6 = class extends D {
  constructor() {
    super(...arguments), this.messages = null, this._popover = null, this._popoverIsOpen = false, this._onPopoverAfterCreate = (e14) => {
      this._popover = e14;
    }, this._onUniformChartScalingChange = (e14) => {
      this.onUniformChartScalingChange(e14.target.checked);
    };
  }
  loadDependencies() {
    return r({ action: () => import("./calcite-action-P2CTRNG2.js"), checkbox: () => import("./calcite-checkbox-AHETVK7Y.js"), label: () => import("./calcite-label-W4VTHQAF.js"), popover: () => import("./calcite-popover-4LQ4GPZW.js"), tooltip: () => import("./calcite-tooltip-TDDUGVK4.js") });
  }
  initialize() {
    const e14 = () => this._popover;
    this.addHandles([v(e14, "calcitePopoverOpen", () => this._popoverIsOpen = true), v(e14, "calcitePopoverClose", () => this._popoverIsOpen = false)]);
  }
  render() {
    const { id: e14, messages: t6, visibleElements: o10 } = this, { unitSelector: i7, uniformChartScalingToggle: r6 } = o10;
    if (!t6 || !i7 && !r6)
      return n3("div", { key: `${e14}-empty` });
    const s8 = `${e14}__action`, c6 = this._popoverIsOpen ? t6.hideSettings : t6.showSettings;
    return n3("div", { class: r3.base, key: this }, n3("calcite-popover", { afterCreate: this._onPopoverAfterCreate, autoClose: true, label: c6, overlayPositioning: "fixed", placement: "bottom-end", referenceElement: s8 }, this._renderPopoverContent()), n3("calcite-action", { appearance: "transparent", "data-testid": "settings-button", icon: "gear", id: s8, scale: "s", text: c6, title: c6 }));
  }
  _renderPopoverContent() {
    const { unitSelector: e14, uniformChartScalingToggle: t6 } = this.visibleElements;
    return n3("div", { class: r3.popoverContent }, e14 ? this._renderUnitSelector() : null, t6 ? this._renderUniformChartScalingToggle() : null);
  }
  _renderUnitSelector() {
    const { messages: e14 } = this;
    return n3(n6, { key: "unit-selector-label", options: this.unitOptions, selectLabel: (e14 == null ? void 0 : e14.unitSelectLabel) ?? "", value: this.unit, onChange: this.onUnitChange });
  }
  _renderUniformChartScalingToggle() {
    const { messages: e14 } = this, t6 = this.uniformChartScaling, o10 = `${this.id}__uniform-chart-scaling-toggle`, i7 = (e14 == null ? void 0 : e14[t6 ? "uniformChartScalingDisable" : "uniformChartScalingEnable"]) ?? "";
    return n3("calcite-label", { class: r3.uniformChartScalingLabel, key: "uniform-chart-scaling-label", layout: "inline" }, n3("calcite-checkbox", { checked: t6, class: r3.uniformChartScalingCheckbox, id: o10, onCalciteCheckboxChange: this._onUniformChartScalingChange }), n3("calcite-tooltip", { overlayPositioning: "fixed", referenceElement: o10 }, i7), e14 == null ? void 0 : e14.uniformChartScalingLabel);
  }
};
e([y()], p6.prototype, "messages", void 0), e([y()], p6.prototype, "onUniformChartScalingChange", void 0), e([y()], p6.prototype, "onUnitChange", void 0), e([y()], p6.prototype, "uniformChartScaling", void 0), e([y()], p6.prototype, "unit", void 0), e([y()], p6.prototype, "unitOptions", void 0), e([y()], p6.prototype, "visibleElements", void 0), e([y()], p6.prototype, "_popover", void 0), e([y()], p6.prototype, "_popoverIsOpen", void 0), p6 = e([a2("esri.widgets.ElevationProfile.components.SettingsButton")], p6);

// node_modules/@arcgis/core/widgets/ElevationProfile.js
var B2;
!function(t6) {
  t6.Sketch = "sketch", t6.SketchCancel = "sketch-cancel", t6.SketchDone = "sketch-done", t6.Select = "select", t6.SelectCancel = "select-cancel";
}(B2 || (B2 = {}));
var P5 = [{ type: B2.Select }, { type: B2.Sketch }];
var E4 = { [a4.None]: null, [a4.NoValidInput]: "noProfile", [a4.NoVisibleProfiles]: "noProfile", [a4.RefinedButNoChartData]: "noProfile", [a4.TooComplex]: "tooComplex", [a4.UnknownError]: "unknown", [a4.InvalidGeometry]: "invalidGeometry", [a4.InvalidElevationInfo]: "invalidElevationInfo" };
var j6 = Symbol("resize-observer-handle");
var R5 = class extends D {
  constructor(t6, e14) {
    super(t6, e14), this.viewModel = null, this.visibleElements = new i6(), this.messages = null, this.messagesCommon = null, this.messagesUnits = null, this._chartContainer = null, this._chart = null, this._chartInitTask = null, this._chartIsRefined = false, this._width = 0, this._zoomOutButtonVisible = false, this._getChartUpdateParamsMemoized = t2((t7, e15, i7, s8) => ({ chart: t7, data: e15, stationary: i7, messages: s8 })), this._onZoomOutButtonClick = () => {
      var _a;
      (_a = this._chart) == null ? void 0 : _a.zoomOut();
    }, this._onClearButtonClick = () => {
      this.viewModel.clear();
    }, (t6 == null ? void 0 : t6.viewModel) || (this._defaultViewModel = new z3({ view: t6 == null ? void 0 : t6.view }), this.viewModel = this._defaultViewModel);
  }
  loadDependencies() {
    return r({ action: () => import("./calcite-action-P2CTRNG2.js"), button: () => import("./calcite-button-V4T5NPWY.js"), loader: () => import("./calcite-loader-64JUXTQT.js") });
  }
  postInitialize() {
    this.addHandles([d3(() => ({ container: this._chartContainer, width: this._width }), ({ container: t6, width: e14 }) => {
      this._destroyChart(), null != t6 && e14 > 0 && this._initializeChart(t6);
    }, P), d3(() => this._chartUpdateParams, () => this._updateChart(this._chartUpdateParams), P)]);
  }
  destroy() {
    this._destroyChart(), null != this._defaultViewModel && this.viewModel !== this._defaultViewModel && this._defaultViewModel.destroy();
  }
  get view() {
    return this.viewModel.view;
  }
  set view(t6) {
    this.viewModel.view = t6;
  }
  get input() {
    return this.viewModel.input;
  }
  set input(t6) {
    this.viewModel.input = t6;
  }
  get profiles() {
    return this.viewModel.profiles;
  }
  set profiles(t6) {
    this.viewModel.profiles = t6;
  }
  get unitOptions() {
    return this.viewModel.unitOptions;
  }
  set unitOptions(t6) {
    this.viewModel.unitOptions = t6;
  }
  get unit() {
    return this.viewModel.unit;
  }
  set unit(t6) {
    this.viewModel.unit = t6;
  }
  get geodesicDistanceThreshold() {
    return this.viewModel.geodesicDistanceThreshold;
  }
  set geodesicDistanceThreshold(t6) {
    this.viewModel.geodesicDistanceThreshold = t6;
  }
  get icon() {
    return "altitude";
  }
  set icon(t6) {
    this._overrideIfSome("icon", t6);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(t6) {
    this._overrideIfSome("label", t6);
  }
  get visible() {
    return this.viewModel.visible;
  }
  set visible(t6) {
    this.viewModel.visible = t6;
  }
  get _portrait() {
    return this._width < r2().portraitModePixelBreakpoint;
  }
  get _chartUpdateParams() {
    const t6 = this.view;
    return this._getChartUpdateParamsMemoized(this._chart, this.viewModel.chartData, null == t6 || t6.stationary, this._chartMessages);
  }
  get _chartMessages() {
    return { ...this.messagesUnits, ...this.messages };
  }
  get _profilesArray() {
    return this.profiles.toArray();
  }
  render() {
    const { viewModel: t6, visible: e14 } = this;
    return n3("div", { "aria-label": this.messages.widgetLabel, class: this.classes({ [t5.base]: e14, [e7.widget]: e14, [e7.panel]: e14, [e7.widgetDisabled]: e14 && "disabled" === t6.state, [t5.portrait]: this._portrait, [t5.refined]: 1 === t6.progress }), key: this }, n3("div", { afterCreate: this._onContentWrapperAfterCreate, afterRemoved: this._onContentWrapperRemoved, bind: this, key: "content-wrapper" }, e14 ? this._renderContentForState() : null));
  }
  _renderContentForState() {
    switch (this.viewModel.state) {
      case t4.Ready:
        return this._renderContentForReadyState();
      case t4.Selecting:
        return this._renderContentForSelectingState();
      case t4.Creating:
        return this._renderContentForCreatingState();
      case t4.Selected:
        return this._renderContentForSelectedState();
      case t4.Created:
        return this._renderContentForCreatedState();
      case t4.Disabled:
        return this._renderContentForReadyState();
    }
  }
  _renderContentForReadyState() {
    var _a;
    const { sketchButton: t6, selectButton: e14 } = this.visibleElements, i7 = this.messages;
    let s8;
    return s8 = t6 && e14 ? i7.readyPrompt : t6 ? i7.readyPromptCreateOnly : e14 ? i7.readyPromptSelectOnly : (_a = i7.errors) == null ? void 0 : _a.noProfile, this._renderContent({ prompt: s8, chart: false, actions: P5 });
  }
  _renderContentForSelectingState() {
    const t6 = this.view;
    if (null == t6)
      return null;
    const e14 = this.messages[`selectingPrompt-${t6.type}`];
    return this._renderContent({ prompt: e14, chart: false, actions: [{ type: B2.SelectCancel }] });
  }
  _renderContentForCreatingState() {
    const { view: t6, viewModel: e14 } = this;
    if (null == t6)
      return null;
    const i7 = e14.hasVertices ? [{ type: B2.SketchCancel }, { type: B2.SketchDone, disabled: !e14.tool.interaction.canStopCreating }] : [{ type: B2.Select }, { type: B2.Sketch, disabled: true }];
    if (e14.errorState === a4.NoValidInput) {
      const e15 = this.messages[`creatingPrompt-${t6.type}`];
      return this._renderContent({ chart: false, actions: i7, prompt: e15 });
    }
    const s8 = this._getErrorMessage();
    return s8 ? this._renderContent({ chart: false, actions: i7, prompt: s8 }) : this._renderContent({ chart: true, actions: i7 });
  }
  _renderContentForSelectedState() {
    const t6 = this._getErrorMessage();
    return t6 ? this._renderContent({ chart: false, actions: P5, prompt: t6 }) : this._renderContent({ chart: true, actions: P5 });
  }
  _renderContentForCreatedState() {
    const t6 = this._getErrorMessage();
    return t6 ? this._renderContent({ chart: false, actions: P5, prompt: t6 }) : this._renderContent({ chart: true, actions: P5 });
  }
  _getErrorMessage() {
    var _a, _b;
    const t6 = E4[this.viewModel.errorState];
    return t6 ? (_b = (_a = this.messages) == null ? void 0 : _a.errors) == null ? void 0 : _b[t6] : null;
  }
  _renderContent(t6) {
    const e14 = null != t6.prompt ? this._renderPrompt(t6.prompt) : t6.chart && this._renderChart(), { viewModel: i7 } = this, s8 = null != i7.input;
    return n3(i, null, n3("header", { class: t5.header, key: "header" }, this._zoomOutButtonVisible ? this._renderZoomOutButton() : null, this.visibleElements.clearButton && s8 ? this._renderClearButton() : null, this.visibleElements.settingsButton ? n3(p6, { messages: this.messages, uniformChartScaling: i7.uniformChartScaling, unit: i7.unit, unitOptions: i7.unitOptions, visibleElements: this.visibleElements, onUniformChartScalingChange: (t7) => i7.uniformChartScaling = t7, onUnitChange: (t7) => i7.unit = t7 }) : null), n3("div", { class: t5.mainContainer, key: "main-container" }, e14), this.visibleElements.legend ? n3(n10, { effectiveUnits: i7.effectiveUnits, messages: this.messages, profiles: this._profilesArray }) : null, this._renderActions(t6));
  }
  _renderZoomOutButton() {
    const t6 = this.messages.zoomOut;
    return n3("calcite-action", { appearance: "transparent", class: t5.zoomOutButton, "data-testid": "zoom-out-button", icon: "magnifying-glass-minus", key: "zoom-out", onclick: this._onZoomOutButtonClick, scale: "s", text: t6, title: t6 });
  }
  _renderClearButton() {
    const t6 = this.messages.clearProfile;
    return n3("calcite-action", { appearance: "transparent", class: t5.clearButton, "data-testid": "clear-button", icon: "trash", key: "clear-profile", onclick: this._onClearButtonClick, scale: "s", text: t6, title: t6 });
  }
  _renderPrompt(t6) {
    return [n3("div", { bind: this, class: t5.promptContainer, key: "prompt-container" }, n3("p", null, t6))];
  }
  _renderChart() {
    if (!this.visibleElements.chart)
      return n3("div", { class: t5.chartContainer, key: "empty-chart-container" });
    const { chartData: t6, progress: e14 } = this.viewModel, i7 = this._chartIsRefined || this._canRenderChart(), s8 = null != t6 && e14 < 1;
    return i7 ? n3(i, null, this._renderSpinner({ size: i7 ? "small" : "large", visible: s8 }), n3("div", { afterCreate: this._onChartContainerAfterCreate, afterRemoved: this._onChartContainerRemoved, bind: this, class: t5.chartContainer, key: "chart-container" })) : n3(i, null, this._renderSpinner({ size: "large", visible: s8 }), n3("div", { class: t5.chartContainer, key: "chart-container-empty" }));
  }
  _renderSpinner(t6) {
    const e14 = "small" === t6.size, i7 = t6.visible ?? true;
    return n3("calcite-loader", { class: this.classes(t5.chartSpinner, e14 && t5.chartSpinnerSmall, i7 && t5.chartSpinnerVisible), inline: e14, key: "spinner", label: "", scale: "s" });
  }
  _canRenderChart() {
    const t6 = this.viewModel.chartData;
    if (null == t6)
      return false;
    if (!this.viewModel.inputIsSketched)
      return t6.refined;
    let e14 = 0;
    for (const { samples: i7 } of t6.lines)
      e14 += null != i7 ? i7.length : 0;
    return t6.refined || e14 <= r2().largeChartSamples;
  }
  _renderActions({ actions: t6 }) {
    const e14 = t6.map((t7) => {
      switch (t7.type) {
        case B2.Sketch:
          return this.visibleElements.sketchButton && this._renderAction({ action: t7, className: t5.sketchButton, label: this.messages.sketchButtonLabel, onClick: this._onSketchButtonClick, primary: true });
        case B2.SketchCancel:
          return this.visibleElements.sketchButton && this._renderAction({ action: t7, onClick: this._onCancelButtonClick, className: t5.sketchCancelButton, label: this.messagesCommon.cancel, primary: false });
        case B2.SketchDone:
          return this.visibleElements.sketchButton && this._renderAction({ action: t7, onClick: this._onDoneButtonClick, className: t5.sketchDoneButton, label: this.messagesCommon.done, primary: true });
        case B2.Select:
          return this.visibleElements.selectButton && this._renderAction({ action: t7, onClick: this._onSelectButtonClick, className: t5.selectButton, label: this.messages.selectButtonLabel, primary: false });
        case B2.SelectCancel:
          return this.visibleElements.selectButton && this._renderAction({ action: t7, onClick: this._onCancelButtonClick, className: t5.selectCancelButton, label: this.messagesCommon.cancel, primary: false });
      }
    }).filter(Boolean);
    return e14.length ? n3("footer", { class: t5.footer, key: "footer" }, e14) : null;
  }
  _renderAction({ action: t6, className: e14, label: i7, onClick: s8, primary: r6 }) {
    return n3("calcite-button", { appearance: r6 ? "solid" : "outline-fill", bind: this, class: this.classes(t5.actionButton, e14), disabled: t6.disabled, key: `action-${t6.type}`, onclick: s8 }, i7);
  }
  _onSketchButtonClick() {
    this.viewModel.start({ mode: "sketch" });
  }
  _onSelectButtonClick() {
    this.viewModel.start({ mode: "select" });
  }
  _onCancelButtonClick() {
    this.viewModel.cancel();
  }
  _onDoneButtonClick() {
    this.viewModel.stop();
  }
  _onContentWrapperAfterCreate(t6) {
    const e14 = h2(t6, (t7) => {
      this._width = t7.contentRect.width;
    });
    this.addHandles(e14, j6);
  }
  _onContentWrapperRemoved() {
    this.removeHandles(j6);
  }
  _updateChart(t6) {
    const { data: e14, chart: i7, messages: s8, stationary: r6 } = t6;
    null != i7 && null != s8 && r6 && this._canRenderChart() && (i7.update(t6), this._chartIsRefined = null != e14 && e14.refined);
  }
  _onChartContainerAfterCreate(t6) {
    this._chartContainer = t6;
  }
  _onChartContainerRemoved() {
    this._chartContainer = null;
  }
  _initializeChart(t6) {
    e2(this._chartInitTask), this._chartInitTask = d2(async (e14) => {
      const { createChart: i7 } = await import("./chartUtils-7B4VIJ4T.js");
      s(e14);
      const r6 = await i7({ container: t6, abortOptions: { signal: e14 }, onRangeChange: (t7, e15) => {
        this._zoomOutButtonVisible = 1 !== t7 || 1 !== e15;
      }, onCursorPositionChange: (t7) => {
        this.viewModel.hoveredChartPosition = t7;
      } });
      if (e14.aborted)
        throw u2(r6), u3();
      this._chart = r6, this._updateChart(this._chartUpdateParams);
    });
  }
  _destroyChart() {
    this._chartInitTask = e2(this._chartInitTask), this._chart = u2(this._chart), this._chartIsRefined = false;
  }
};
e([y({ type: z3 })], R5.prototype, "viewModel", void 0), e([y()], R5.prototype, "view", null), e([y()], R5.prototype, "input", null), e([y()], R5.prototype, "profiles", null), e([y()], R5.prototype, "unitOptions", null), e([y()], R5.prototype, "unit", null), e([y()], R5.prototype, "geodesicDistanceThreshold", null), e([y({ type: i6, nonNullable: true })], R5.prototype, "visibleElements", void 0), e([y()], R5.prototype, "icon", null), e([y()], R5.prototype, "label", null), e([y()], R5.prototype, "visible", null), e([y(), e4("esri/widgets/ElevationProfile/t9n/ElevationProfile")], R5.prototype, "messages", void 0), e([y(), e4("esri/t9n/common")], R5.prototype, "messagesCommon", void 0), e([y(), e4("esri/core/t9n/Units")], R5.prototype, "messagesUnits", void 0), e([y()], R5.prototype, "_chartContainer", void 0), e([y()], R5.prototype, "_chart", void 0), e([y()], R5.prototype, "_chartInitTask", void 0), e([y()], R5.prototype, "_chartIsRefined", void 0), e([y()], R5.prototype, "_width", void 0), e([y()], R5.prototype, "_portrait", null), e([y()], R5.prototype, "_zoomOutButtonVisible", void 0), e([y()], R5.prototype, "_chartUpdateParams", null), e([y()], R5.prototype, "_chartMessages", null), e([y()], R5.prototype, "_profilesArray", null), R5 = e([a2("esri.widgets.ElevationProfile")], R5);
var U4 = R5;
export {
  U4 as default
};
//# sourceMappingURL=ElevationProfile-TBETBMPA.js.map
