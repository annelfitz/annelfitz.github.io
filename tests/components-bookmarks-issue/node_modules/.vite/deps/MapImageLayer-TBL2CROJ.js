import {
  m as m2
} from "./chunk-BKF27M52.js";
import "./chunk-I7LDU4W6.js";
import {
  i as i2
} from "./chunk-SCRCLNT5.js";
import {
  Y,
  f as f3,
  m
} from "./chunk-ZUGLZCI5.js";
import {
  e as e5
} from "./chunk-7VV4JAZJ.js";
import "./chunk-3IAZNUQL.js";
import "./chunk-5P57RIA4.js";
import "./chunk-AC67ONZX.js";
import "./chunk-ZOUC7PLM.js";
import "./chunk-F2EHRKUX.js";
import "./chunk-2636VFVY.js";
import "./chunk-252ISA6Z.js";
import "./chunk-TLTAGTBA.js";
import "./chunk-2QPP5AGU.js";
import "./chunk-2C26DRKK.js";
import "./chunk-M4RFJU4F.js";
import "./chunk-ONKWNPIN.js";
import "./chunk-BUEJAM23.js";
import "./chunk-Q5NCQLSM.js";
import "./chunk-HFYOMP47.js";
import "./chunk-TOKUWZQG.js";
import "./chunk-JNGJWHJD.js";
import {
  i
} from "./chunk-QMPD4WXY.js";
import {
  e as e4
} from "./chunk-OF4YIONV.js";
import {
  l
} from "./chunk-AHEDDTVZ.js";
import "./chunk-4IKPTZ53.js";
import "./chunk-DXMBDX2I.js";
import "./chunk-TUVEYM7U.js";
import "./chunk-5S637BGW.js";
import "./chunk-BFOJPIF7.js";
import {
  f as f2
} from "./chunk-7UUNSIMA.js";
import "./chunk-GMRQGGML.js";
import "./chunk-BYK4ZOU2.js";
import "./chunk-OHYLFFUW.js";
import {
  e as e3
} from "./chunk-XW3FDKYP.js";
import "./chunk-Y7RXGLGH.js";
import "./chunk-3JC3OUNW.js";
import "./chunk-RO3CTAP7.js";
import "./chunk-GKMVTGGM.js";
import "./chunk-XGTCDM4C.js";
import "./chunk-QNG4TY7L.js";
import "./chunk-RW5QMWE6.js";
import "./chunk-LGMX4E7L.js";
import "./chunk-OKRW5W44.js";
import "./chunk-RGAA5Z76.js";
import "./chunk-Q6RZBEZ6.js";
import "./chunk-PC66NY33.js";
import "./chunk-YY2VB3AE.js";
import "./chunk-VEYMN5N3.js";
import "./chunk-H6NTWZSO.js";
import "./chunk-BMT3OVAP.js";
import "./chunk-W5ALAOW2.js";
import "./chunk-FHDHOWK5.js";
import "./chunk-Y546C2O5.js";
import "./chunk-IYKBAIQE.js";
import "./chunk-BDRVHR2K.js";
import "./chunk-DVIGFJWY.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-ERD6I7QP.js";
import "./chunk-EZL4LTMD.js";
import "./chunk-F3BQGS35.js";
import "./chunk-Z3NX5DTX.js";
import "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import "./chunk-LMO6NZJA.js";
import "./chunk-A5QTLE4Y.js";
import "./chunk-SCHTG6ZQ.js";
import "./chunk-YUUTEPX2.js";
import "./chunk-G7YFDDME.js";
import "./chunk-PCKG3UTS.js";
import "./chunk-3VMVD66K.js";
import "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-I2X6UR6L.js";
import "./chunk-CYVKDANA.js";
import {
  j
} from "./chunk-4ZLXDMI5.js";
import {
  t
} from "./chunk-SBARCIDP.js";
import {
  t as t3
} from "./chunk-QG73ZMDG.js";
import {
  f
} from "./chunk-EMYOYGGK.js";
import {
  n as n2
} from "./chunk-6PMFOUWZ.js";
import "./chunk-3KPZ3BQR.js";
import "./chunk-5JYVZQZR.js";
import {
  t as t2
} from "./chunk-UUG4W2PI.js";
import {
  u
} from "./chunk-WW22JHXA.js";
import {
  S
} from "./chunk-ZAM62XN5.js";
import {
  d as d2
} from "./chunk-RKVEKQ5O.js";
import "./chunk-P7J4JFEH.js";
import {
  b as b2
} from "./chunk-G7FOE26O.js";
import "./chunk-USOPZ2Q6.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-JW7VBMHD.js";
import "./chunk-GLLRUDMY.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-AKLOTDO2.js";
import "./chunk-6AQIVLDN.js";
import {
  c as c2
} from "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-LBXFRGMS.js";
import "./chunk-VTH4DAHQ.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-SLQA5YBV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import {
  c
} from "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-5LSHHVQ5.js";
import {
  w
} from "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import {
  d2 as d
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import {
  o
} from "./chunk-YOPMY6TS.js";
import {
  r
} from "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import {
  U
} from "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  e as e2,
  n2 as n,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  T,
  a3 as a2
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  a,
  b
} from "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  s
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/layers/MapImageLayer.js
var J = class extends n2(f2(t2(m(f3(l(u(j(S(f(i(e3(b2)))))))))))) {
  constructor(...e6) {
    super(...e6), this.dateFieldsTimeZone = null, this.datesInUnknownTimezone = false, this.dpi = 96, this.gdbVersion = null, this.imageFormat = "png24", this.imageMaxHeight = 2048, this.imageMaxWidth = 2048, this.imageTransparency = true, this.isReference = null, this.labelsVisible = false, this.operationalLayerType = "ArcGISMapServiceLayer", this.preferredTimeZone = null, this.sourceJSON = null, this.sublayers = null, this.type = "map-image", this.url = null;
  }
  normalizeCtorArgs(e6, r2) {
    return "string" == typeof e6 ? { url: e6, ...r2 } : e6;
  }
  load(e6) {
    const r2 = null != e6 ? e6.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Map Service"] }, e6).catch(a).then(() => this._fetchService(r2))), Promise.resolve(this);
  }
  readImageFormat(e6, r2) {
    const t4 = r2.supportedImageFormatTypes;
    return t4 && t4.includes("PNG32") ? "png32" : "png24";
  }
  writeSublayers(e6, r2, t4, o2) {
    var _a, _b, _c;
    if (!this.loaded || !e6)
      return;
    const i3 = e6.slice().reverse().flatten(({ sublayers: e7 }) => e7 && e7.toArray().reverse()).toArray();
    let s2 = false;
    if (((_a = this.capabilities) == null ? void 0 : _a.operations.supportsExportMap) && ((_c = (_b = this.capabilities) == null ? void 0 : _b.exportMap) == null ? void 0 : _c.supportsDynamicLayers)) {
      const e7 = n(o2.origin);
      if (e7 === e2.PORTAL_ITEM) {
        const e8 = this.createSublayersForOrigin("service").sublayers;
        s2 = e5(i3, e8, e2.SERVICE);
      } else if (e7 > e2.PORTAL_ITEM) {
        const e8 = this.createSublayersForOrigin("portal-item");
        s2 = e5(i3, e8.sublayers, n(e8.origin));
      }
    }
    const a3 = [], p = { writeSublayerStructure: s2, ...o2 };
    let n3 = s2;
    i3.forEach((e7) => {
      const r3 = e7.write({}, p);
      a3.push(r3), n3 = n3 || "user" === e7.originOf("visible");
    });
    a3.some((e7) => Object.keys(e7).length > 1) && (r2.layers = a3), n3 && (r2.visibleLayers = i3.filter((e7) => e7.visible).map((e7) => e7.id));
  }
  createExportImageParameters(e6, r2, t4, o2) {
    const i3 = (o2 == null ? void 0 : o2.pixelRatio) || 1;
    e6 && this.version >= 10 && (e6 = e6.clone().shiftCentralMeridian());
    const s2 = new m2({ layer: this, floors: o2 == null ? void 0 : o2.floors, scale: i2({ extent: e6, width: r2 }) * i3 }), a3 = s2.toJSON();
    s2.destroy();
    const p = !(o2 == null ? void 0 : o2.rotation) || this.version < 10.3 ? {} : { rotation: -o2.rotation }, n3 = e6 == null ? void 0 : e6.spatialReference, m3 = d(n3);
    a3.dpi *= i3;
    const l2 = {};
    if (o2 == null ? void 0 : o2.timeExtent) {
      const { start: e7, end: r3 } = o2.timeExtent.toJSON();
      l2.time = e7 && r3 && e7 === r3 ? "" + e7 : `${e7 ?? "null"},${r3 ?? "null"}`;
    } else
      this.timeInfo && !this.timeInfo.hasLiveData && (l2.time = "null,null");
    return { bbox: e6 && e6.xmin + "," + e6.ymin + "," + e6.xmax + "," + e6.ymax, bboxSR: m3, imageSR: m3, size: r2 + "," + t4, ...a3, ...p, ...l2 };
  }
  async fetchImage(e6, r2, t4, o2) {
    const { data: i3 } = await this._fetchImage("image", e6, r2, t4, o2);
    return i3;
  }
  async fetchImageBitmap(e6, r2, t4, o2) {
    const { data: i3, url: s2 } = await this._fetchImage("blob", e6, r2, t4, o2);
    return t3(i3, s2, o2 == null ? void 0 : o2.signal);
  }
  async fetchRecomputedExtents(e6 = {}) {
    const o2 = { ...e6, query: { returnUpdates: true, f: "json", ...this.customParameters, token: this.apiKey } }, { data: i3 } = await U(this.url, o2), { extent: s2, fullExtent: a3, timeExtent: p } = i3, n3 = s2 || a3;
    return { fullExtent: n3 && w.fromJSON(n3), timeExtent: p && c2.fromJSON({ start: p[0], end: p[1] }) };
  }
  loadAll() {
    return t(this, (e6) => {
      e6(this.allSublayers);
    });
  }
  serviceSupportsSpatialReference(e6) {
    return e4(this, e6);
  }
  async _fetchImage(e6, t4, i3, s2, a3) {
    var _a, _b, _c;
    const n3 = { responseType: e6, signal: (a3 == null ? void 0 : a3.signal) ?? null, query: { ...this.parsedUrl.query, ...this.createExportImageParameters(t4, i3, s2, a3), f: "image", ...this.refreshParameters, ...this.customParameters, token: this.apiKey } }, m3 = this.parsedUrl.path + "/export";
    if (null != ((_a = n3.query) == null ? void 0 : _a.dynamicLayers) && !((_c = (_b = this.capabilities) == null ? void 0 : _b.exportMap) == null ? void 0 : _c.supportsDynamicLayers))
      throw new s("mapimagelayer:dynamiclayer-not-supported", `service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`, { query: n3.query });
    try {
      const { data: e7 } = await U(m3, n3);
      return { data: e7, url: m3 };
    } catch (l2) {
      if (b(l2))
        throw l2;
      throw new s("mapimagelayer:image-fetch-error", `Unable to load image: ${m3}`, { error: l2 });
    }
  }
  async _fetchService(e6) {
    if (this.sourceJSON)
      return void this.read(this.sourceJSON, { origin: "service", url: this.parsedUrl });
    const { data: t4, ssl: o2 } = await U(this.parsedUrl.path, { query: { f: "json", ...this.parsedUrl.query, ...this.customParameters, token: this.apiKey }, signal: e6 });
    o2 && (this.url = this.url.replace(/^http:/i, "https:")), this.sourceJSON = t4, this.read(t4, { origin: "service", url: this.parsedUrl });
  }
};
e([y(c("dateFieldsTimeReference"))], J.prototype, "dateFieldsTimeZone", void 0), e([y({ type: Boolean })], J.prototype, "datesInUnknownTimezone", void 0), e([y()], J.prototype, "dpi", void 0), e([y()], J.prototype, "gdbVersion", void 0), e([y()], J.prototype, "imageFormat", void 0), e([o("imageFormat", ["supportedImageFormatTypes"])], J.prototype, "readImageFormat", null), e([y({ json: { origins: { service: { read: { source: "maxImageHeight" } } } } })], J.prototype, "imageMaxHeight", void 0), e([y({ json: { origins: { service: { read: { source: "maxImageWidth" } } } } })], J.prototype, "imageMaxWidth", void 0), e([y()], J.prototype, "imageTransparency", void 0), e([y({ type: Boolean, json: { read: false, write: { enabled: true, overridePolicy: () => ({ enabled: false }) } } })], J.prototype, "isReference", void 0), e([y({ json: { read: false, write: false } })], J.prototype, "labelsVisible", void 0), e([y({ type: ["ArcGISMapServiceLayer"] })], J.prototype, "operationalLayerType", void 0), e([y({ json: { read: false, write: false } })], J.prototype, "popupEnabled", void 0), e([y(c("preferredTimeReference"))], J.prototype, "preferredTimeZone", void 0), e([y()], J.prototype, "sourceJSON", void 0), e([y({ json: { write: { ignoreOrigin: true } } })], J.prototype, "sublayers", void 0), e([r("sublayers", { layers: { type: [Y] }, visibleLayers: { type: [T] } })], J.prototype, "writeSublayers", null), e([y({ type: ["show", "hide", "hide-children"] })], J.prototype, "listMode", void 0), e([y({ json: { read: false }, readOnly: true, value: "map-image" })], J.prototype, "type", void 0), e([y(d2)], J.prototype, "url", void 0), J = e([a2("esri.layers.MapImageLayer")], J);
var _ = J;
export {
  _ as default
};
//# sourceMappingURL=MapImageLayer-TBL2CROJ.js.map
