import {
  s as s3
} from "./chunk-HRNE2ZXF.js";
import {
  a as a2,
  u as u2
} from "./chunk-CJHAZE3N.js";
import {
  T,
  n as n3,
  s as s2
} from "./chunk-6N3VNDLJ.js";
import "./chunk-FDNEUO76.js";
import "./chunk-NUS62V7H.js";
import "./chunk-P6IY7ZIQ.js";
import "./chunk-6EZXOD6N.js";
import "./chunk-T522M7RE.js";
import "./chunk-M7V6LN55.js";
import {
  e as e4
} from "./chunk-D5LHX57G.js";
import {
  e as e3
} from "./chunk-EAAEPSBY.js";
import {
  t as t2
} from "./chunk-ICMKKNJO.js";
import {
  h as h2
} from "./chunk-NAWP2ZCR.js";
import "./chunk-M5DWZKDJ.js";
import {
  E,
  I,
  R,
  b,
  i as i2,
  j,
  k as k2
} from "./chunk-LO5UMUY4.js";
import {
  We
} from "./chunk-EWD7I5UU.js";
import "./chunk-4UEJR4VO.js";
import "./chunk-BUEJAM23.js";
import "./chunk-LQR76D5M.js";
import "./chunk-2CWW7O7M.js";
import "./chunk-Q5NCQLSM.js";
import "./chunk-FLBJ53KN.js";
import "./chunk-YH2IYJYF.js";
import "./chunk-GGHKH3LP.js";
import "./chunk-VS6AHHIY.js";
import "./chunk-DIT542IP.js";
import "./chunk-HFYOMP47.js";
import "./chunk-TOKUWZQG.js";
import "./chunk-JNGJWHJD.js";
import "./chunk-QMPD4WXY.js";
import "./chunk-OF4YIONV.js";
import "./chunk-YBPOKK6D.js";
import "./chunk-AHEDDTVZ.js";
import "./chunk-Z4ALW6LX.js";
import "./chunk-H4O73SDK.js";
import "./chunk-UVXSAP7V.js";
import "./chunk-IZ3VJLQ6.js";
import "./chunk-DRC4XSYG.js";
import "./chunk-IHQNQQJC.js";
import "./chunk-4IKPTZ53.js";
import "./chunk-DXMBDX2I.js";
import "./chunk-TUVEYM7U.js";
import "./chunk-5S637BGW.js";
import "./chunk-BFOJPIF7.js";
import "./chunk-7UUNSIMA.js";
import "./chunk-GMRQGGML.js";
import "./chunk-BYK4ZOU2.js";
import "./chunk-OHYLFFUW.js";
import "./chunk-XW3FDKYP.js";
import "./chunk-Y7RXGLGH.js";
import "./chunk-3JC3OUNW.js";
import "./chunk-RO3CTAP7.js";
import "./chunk-GKMVTGGM.js";
import "./chunk-XGTCDM4C.js";
import "./chunk-QNG4TY7L.js";
import "./chunk-RW5QMWE6.js";
import "./chunk-LGMX4E7L.js";
import "./chunk-2QCWKZIQ.js";
import "./chunk-2NPNEA6N.js";
import "./chunk-U34ZXOJT.js";
import "./chunk-OKRW5W44.js";
import "./chunk-RGAA5Z76.js";
import "./chunk-Q6RZBEZ6.js";
import "./chunk-PC66NY33.js";
import "./chunk-YY2VB3AE.js";
import "./chunk-VEYMN5N3.js";
import "./chunk-H6NTWZSO.js";
import "./chunk-BMT3OVAP.js";
import "./chunk-W5ALAOW2.js";
import "./chunk-FHDHOWK5.js";
import "./chunk-Y546C2O5.js";
import "./chunk-IYKBAIQE.js";
import "./chunk-BDRVHR2K.js";
import "./chunk-DVIGFJWY.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-AKQ765JR.js";
import "./chunk-ERD6I7QP.js";
import "./chunk-QIT4M76C.js";
import "./chunk-EZL4LTMD.js";
import "./chunk-F3BQGS35.js";
import "./chunk-Z3NX5DTX.js";
import {
  i2 as i
} from "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import "./chunk-LMO6NZJA.js";
import "./chunk-A5QTLE4Y.js";
import "./chunk-SCHTG6ZQ.js";
import "./chunk-OHE3HDFF.js";
import {
  f as f2
} from "./chunk-QYC3GV65.js";
import {
  m2
} from "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-I2X6UR6L.js";
import "./chunk-7EQJLP2H.js";
import "./chunk-4ZLXDMI5.js";
import "./chunk-EMYOYGGK.js";
import "./chunk-6PMFOUWZ.js";
import "./chunk-3KPZ3BQR.js";
import "./chunk-5JYVZQZR.js";
import "./chunk-UUG4W2PI.js";
import "./chunk-WW22JHXA.js";
import "./chunk-ZAM62XN5.js";
import "./chunk-RKVEKQ5O.js";
import "./chunk-P7J4JFEH.js";
import "./chunk-G7FOE26O.js";
import "./chunk-USOPZ2Q6.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-JW7VBMHD.js";
import "./chunk-GLLRUDMY.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import {
  l,
  u
} from "./chunk-J7AMTUNG.js";
import {
  S
} from "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-WMUEII2O.js";
import "./chunk-6QNF7OHN.js";
import "./chunk-AKLOTDO2.js";
import "./chunk-6AQIVLDN.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-DVI5RM3W.js";
import "./chunk-LBXFRGMS.js";
import "./chunk-VTH4DAHQ.js";
import {
  r as r2
} from "./chunk-HLDUDRTD.js";
import "./chunk-SLQA5YBV.js";
import {
  Q
} from "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import {
  B,
  k
} from "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import {
  m2 as m
} from "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import {
  D,
  e2,
  r
} from "./chunk-RGCWZ2KZ.js";
import {
  n as n2
} from "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import {
  L
} from "./chunk-2SDMYJDE.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import {
  h
} from "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-5LSHHVQ5.js";
import "./chunk-IZKCZQUY.js";
import {
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import {
  f
} from "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import {
  t3 as t
} from "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  d,
  p
} from "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import {
  o
} from "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n,
  s
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/widgets/UtilityNetworkTrace/support/GeometryHandler.js
function f3(e7) {
  return "polygon" === e7.type || "polyline" === e7.type;
}
function u3(e7) {
  return e7.hasOwnProperty("points");
}
function y2(e7) {
  return u3(e7) && 2 === e7.points.length;
}
var g = class {
  createBuffer(r4, n5, o2, i6) {
    if (Array.isArray(r4)) {
      if (r4.length > 0) {
        const s5 = f.fromJSON(r4[0].spatialReference);
        return s5.isWGS84 || s5.isWebMercator ? E(r4, n5, o2) : j(r4, n5, o2, i6);
      }
      return;
    }
    const s4 = f.fromJSON(r4.spatialReference);
    return s4.isWGS84 || s4.isWebMercator ? E(r4, n5[0], o2) : j(r4, n5[0], o2);
  }
  createConvexHull(e7) {
    if (Array.isArray(e7)) {
      if (1 === e7.length && y2(e7[0])) {
        const t6 = R(e7[0]);
        if (f3(t6))
          return t6;
      }
      return R(e7, true).filter(f3);
    }
    const t5 = R(e7);
    if (f3(t5))
      return t5;
  }
  calculateArea(e7, t5) {
    const r4 = new f({ wkid: e7.spatialReference.wkid });
    return r4.isWGS84 || r4.isWebMercator ? parseFloat(k2(e7, t5).toFixed(2)) : parseFloat(I(e7, t5).toFixed(2));
  }
  mergeAggregatedToGeometries(e7) {
    const t5 = [], { line: r4, multipoint: n5, polygon: o2 } = e7;
    return r4 && t5.push(r4), n5 && t5.push(n5), o2 && t5.push(o2), t5;
  }
  getPercentageAlong(e7, t5, r4) {
    let n5 = e7;
    const o2 = this._createPolyline(e7.paths, r4.wkid);
    if ("point" === t5.type) {
      const e8 = t5.x - 5, a5 = t5.x + 5, l4 = [[e8, t5.y - 5], [a5, t5.y + 5]];
      n5 = this._createPolyline(l4, t5.spatialReference.wkid);
      n5 = B(n5, r4);
      const p2 = i2(o2, n5);
      if (p2.length > 0) {
        const e9 = b(o2, "feet");
        let t6;
        t6 = p2[0].paths[0][0][0] === o2.paths[0][0][0] ? b(p2[0], "feet") : b(p2[1], "feet");
        return [t6 / e9];
      }
      return [0.5];
    }
    n5 = B(t5, r4);
    const a4 = i2(o2, n5);
    if (a4.length > 0) {
      const e8 = b(o2, "feet");
      return [b(a4[0], "feet") / e8];
    }
    return [0.5];
  }
  async projectGeometry(e7, t5) {
    return await k(), B(e7, t5);
  }
  _createPolyline(e7, t5) {
    return new m({ hasZ: false, hasM: true, paths: e7, spatialReference: { wkid: t5 } });
  }
};

// node_modules/@arcgis/core/widgets/UtilityNetworkTrace/support/GraphicHandler.js
var i3 = [227, 27, 21, 0.6];
var t3 = [21, 244, 21, 0.6];
var l2 = 12;
var e5 = [{ color: [255, 0, 0, 0.6], haloOpacity: 0.9, fillOpacity: 0.2, hex: "#ff0000" }, { color: [255, 0, 255, 0.6], haloOpacity: 0.9, fillOpacity: 0.2, hex: "#ff00ff" }, { color: [217, 188, 255, 0.6], haloOpacity: 0.9, fillOpacity: 0.2, hex: "#D9BCFF" }, { color: [0, 255, 0, 0.6], haloOpacity: 0.9, fillOpacity: 0.2, hex: "#00ff00" }, { color: [255, 255, 0, 0.6], haloOpacity: 0.9, fillOpacity: 0.2, hex: "#ffff00" }, { color: [0, 0, 255, 0.6], haloOpacity: 0.9, fillOpacity: 0.2, hex: "#0000ff" }, { color: [255, 165, 0, 0.5], haloOpacity: 0.9, fillOpacity: 0.2, hex: "#ffa500" }, { color: [0, 0, 0, 0.5], haloOpacity: 0.9, fillOpacity: 0.2, hex: "#000000" }];
var r3 = class {
  constructor() {
    this.highlightColor = [...e5];
  }
  addCustomColor(o2) {
    this.highlightColor = [...e5];
    this.highlightColor.some((i6) => i6.hex.toLowerCase() === o2.hex.toLowerCase()) || this.highlightColor.push(o2);
  }
  getFlagGraphic(o2, l4, e7, r4) {
    const a4 = "starting-point" === l4 ? t3 : i3;
    if ("polygon" === o2.type) {
      const i6 = o2;
      i6.centroid && (o2 = i6.centroid);
    }
    if (r4) {
      return this.makeGraphic(o2, a4, e7 == null ? void 0 : e7.attributes, null, r4);
    }
    return this.makeGraphic(o2, a4, e7 == null ? void 0 : e7.attributes);
  }
  makeGraphic(i6, t5, e7, r4, a4) {
    let c, h3 = i6;
    switch (i6.type) {
      case "multipoint":
        c = { type: "simple-marker", color: t5, size: l2, outline: { color: t5, width: 0 } }, r4 && (h3 = i6);
        break;
      case "point":
        c = a4 || { type: "simple-marker", color: t5, size: l2, outline: { color: t5, width: 0 } }, r4 && (h3 = i6);
        break;
      case "polyline":
        c = { type: "simple-line", color: t5, width: l2 }, r4 && (h3 = i6);
        break;
      case "polygon":
        c = { type: "simple-fill", color: t5, outline: { color: t5, width: l2 } }, r4 && (h3 = i6);
    }
    return new f2({ geometry: h3, symbol: c, attributes: e7 ?? null });
  }
};

// node_modules/@arcgis/core/widgets/UtilityNetworkTrace/support/ResultAreaHandler.js
var i4 = `utility-network-trace-result-area-${Date.now()}`;
function n4(e7) {
  return "graphics" === e7.type;
}
var l3 = class {
  constructor() {
    this.traceInformation = {}, this._geometryHandler = new g();
  }
  addResultAreaToMap(e7, r4) {
    const t5 = this.createGraphicLayer(r4);
    t5 && n4(t5) && t5.add(e7);
  }
  changeResultAreaColor(e7, r4, t5) {
    const a4 = new S({ color: r4.color, style: "solid", outline: { color: r4.color, width: 1 } }), i6 = this._findGraphicsByTraceId(e7, t5);
    return i6 && i6.forEach((e8) => {
      e8.symbol = a4;
    }), a4;
  }
  createBuffer(e7, r4, t5, o2) {
    return this._geometryHandler.createBuffer(e7, r4, t5, o2);
  }
  createConvexHull(e7, r4, t5) {
    const o2 = this._geometryHandler.createConvexHull(e7);
    return r4 > 0 && o2 ? this.createBuffer(o2, [r4], t5, false) : o2;
  }
  createResultAreaGraphic(r4, a4, i6, n5, l4, s4) {
    var _a;
    const c = new S({ color: s4.color, style: "solid", outline: { color: s4.color, width: 1 } }), u4 = [];
    for (const e7 in a4)
      u4.push(new m2({ fieldName: e7, label: "areaStatistic" === e7 ? n5.attributeStrings[e7] + " (" + ((_a = l4.units[i6]) == null ? void 0 : _a.abbr) + ")" : n5.attributeStrings[e7] }));
    return new f2({ geometry: r4, symbol: c, attributes: a4, popupTemplate: { title: a4.traceName, content: [{ type: "fields", fieldInfos: u4 }] } });
  }
  removeResultArea(e7, r4) {
    const t5 = r4.findLayerById(i4);
    if (t5 && n4(t5)) {
      const o2 = this._findGraphicsByTraceId(e7, r4);
      return o2 && t5.removeMany(o2), o2;
    }
    return null;
  }
  removeAllResultAreaGraphics(e7) {
    if (e7) {
      const r4 = e7.findLayerById(i4);
      r4 && n4(r4) && r4.removeAll();
    }
  }
  createGraphicLayer(e7, t5) {
    const o2 = e7.findLayerById(i4);
    if (o2 && n4(o2))
      return o2;
    const a4 = new h2({ title: t5 ?? i4, listMode: "hide", id: i4 });
    return e7.add(a4), a4;
  }
  _findGraphicsByTraceId(e7, r4) {
    const t5 = r4.findLayerById(i4);
    if (t5 && n4(t5)) {
      const r5 = t5.graphics.filter((r6) => r6.attributes.traceId === e7);
      return r5.length > 0 ? r5.toArray() : null;
    }
    return null;
  }
};

// node_modules/@arcgis/core/widgets/UtilityNetworkTrace/support/UtilityHelper.js
function e6(r4) {
  return "feature" === r4.type;
}
function t4(r4, e7) {
  return r4.url.includes(e7);
}
function a3(r4, e7) {
  var _a;
  return (((_a = r4.dataElement) == null ? void 0 : _a.domainNetworks) || []).some((r5) => r5.subnetworkLayerId === e7.layerId);
}
var i5 = class {
  getValidUtilityNetworkLayers(i6, l4) {
    const s4 = [];
    return i6 == null ? void 0 : i6.allLayers.forEach((i7) => {
      "group" === i7.type ? s4.push(...i7.layers.filter(r2).filter((r4) => e6(r4) && l4.isUtilityLayer(r4) && !a3(l4, r4)).filter((r4) => t4(r4, l4.featureServiceUrl)).toArray()) : "subtype-group" === i7.type ? s4.push(...i7.sublayers.filter((r4) => t4(r4, l4.featureServiceUrl)).toArray()) : r2(i7) && e6(i7) && l4.isUtilityLayer(i7) && !a3(l4, i7) && t4(i7, l4.featureServiceUrl) && s4.push(i7);
    }), s4;
  }
};

// node_modules/@arcgis/core/widgets/UtilityNetworkTrace/UtilityNetworkTraceViewModel.js
var S2 = () => h("esri/widgets/UtilityNetworkTrace/t9n/UtilityNetworkTrace");
var L2 = () => h("esri/core/t9n/Units");
var H = `utility-network-trace-flags-${Date.now()}`;
var P = `utility-network-trace-results-${Date.now()}`;
function N(e7) {
  return e7 instanceof i;
}
function U(e7) {
  return "feature" === e7.layer.type || "subtype-group" === e7.layer.type;
}
function C(e7) {
  return "layer" in e7;
}
function E2(e7) {
  return void 0 !== e7.layerViews;
}
function B2(e7) {
  return "graphics" === e7.type;
}
async function j2(e7) {
  var _a;
  const t5 = new We({ url: e7.networkSystemLayers.dirtyAreasLayerUrl });
  await t5.load();
  const r4 = t5.version;
  if (Number(r4) <= 11.1) {
    const t6 = new Q({ url: new URL(e7.layerUrl).origin + "/portal" });
    await t6.load();
    const r5 = (_a = t6 == null ? void 0 : t6.user) == null ? void 0 : _a.username;
    return !!r5 && t2(t6, r5, "utilityNetwork");
  }
  return true;
}
var D2 = class extends o.EventedAccessor {
  constructor(e7) {
    super(e7), this._activeProgress = false, this._clickHandler = null, this._flags = [], this._flagId = 0, this._geometryHandler = null, this._highlightHandler = [], this._resultAreaHandler = null, this._utilityHelper = new i5(), this._watchHandler = null, this._validUNLayers = [], this._traceTimeout = 6e5, this.traces = [], this.graphicHandler = null, this.defaultGraphicColor = { color: [255, 255, 0, 0.6], haloOpacity: 0.9, fillOpacity: 0.2, hex: "#FFFF00" }, this.enableResultArea = false, this.flags = [], this.gdbVersion = "sde.DEFAULT", this.messages = null, this.messagesUnits = null, this.defaultResultAreaProperties = { type: "convexhull", distance: 10, unit: "meters", areaUnit: "square-meters", color: { color: [255, 165, 0, 0.5], haloOpacity: 0.9, fillOpacity: 0.2, hex: "#ffa500" }, show: false }, this.selectedTraces = [], this.selectOnComplete = true, this.showGraphicsOnComplete = true, this.showSelectionAttributes = true, this.traceResults = [], this.utilityNetwork = null;
  }
  initialize() {
    this._geometryHandler = new g(), this.graphicHandler = new r3(), this._resultAreaHandler = new l3();
    (async () => {
      const [e7, t5] = await Promise.all([S2(), L2()]);
      this.set({ messages: e7, messagesUnits: t5 });
    })();
  }
  destroy() {
    this.view = null;
  }
  get resultAreaProperties() {
    return this.defaultResultAreaProperties;
  }
  set resultAreaProperties(e7) {
    this._set("resultAreaProperties", { ...this.defaultResultAreaProperties, ...e7 }), this.graphicHandler.addCustomColor(this.resultAreaProperties.color), this.traceResults.forEach((t5) => {
      var _a;
      const r4 = (_a = t5.resultArea) == null ? void 0 : _a.show;
      t5.resultArea = { ...this.defaultResultAreaProperties, ...e7 }, this.removeResultAreaFromMap(t5), this.enableResultArea && this.createResultAreaGraphic(t5).then((s4) => {
        if (s4) {
          t5.resultAreaGraphic = s4;
          const i6 = (e7 == null ? void 0 : e7.show) ?? r4;
          t5.resultArea && (t5.resultArea.show = i6), i6 && this.addResultAreaToMap(t5, s4);
        }
      });
    });
  }
  get state() {
    var _a;
    return ((_a = this.view) == null ? void 0 : _a.ready) ? "ready" : "loading";
  }
  get view() {
    return this._get("view");
  }
  set view(e7) {
    e7 && "2d" !== e7.type && n.getLogger(this).error(new s("view:invalid-view", "SceneView is not supported", { view: e7 })), this._set("view", e7), this.utilityNetwork && this.reset(), this.utilityNetwork = null, this.loadUtilityNetwork().then((e8) => {
      e8 && this.selectTracesOnLoad();
    });
  }
  addFlagByHit(e7, t5) {
    const r4 = (e8) => {
      var _a;
      ((_a = this.view) == null ? void 0 : _a.popup) && (this.view.popupEnabled = e8);
    };
    return new Promise((s4, i6) => {
      var _a, _b;
      r4(false), (_a = this._clickHandler) == null ? void 0 : _a.remove(), this.emit("add-flag", { type: e7 }), this._clickHandler = (_b = this.view) == null ? void 0 : _b.on("click", (a4) => {
        this.queryFlagByHitTest(a4, e7, t5).then((i7) => {
          var _a2;
          r4(true), (_a2 = this._clickHandler) == null ? void 0 : _a2.remove(), this.emit("add-flag-complete", { type: e7, symbol: t5 }), s4(i7);
        }).catch((s5) => {
          var _a2;
          r4(true), (_a2 = this._clickHandler) == null ? void 0 : _a2.remove(), this.emit("add-flag-error", { type: e7, symbol: t5 }), i6(s5);
        });
      });
    });
  }
  async addFlagsOnLoad() {
    return new Promise((e7) => {
      const t5 = [];
      this._watchHandler = p(() => null != this.view && !this.view.updating, async () => {
        if (this._flags.length > 0)
          e7(t5);
        else {
          const r4 = this.flags.map(async (e8) => {
            if (e8.mapPoint) {
              const r5 = new x({ x: e8.mapPoint.x, y: e8.mapPoint.y, spatialReference: e8.mapPoint.spatialReference.wkid }), s4 = { screenPoint: this.view.toScreen(r5), mapPoint: r5 };
              await this.queryFlagByHitTest(s4, e8.type) || ("barrier" === e8.type ? t5.push("barrier") : t5.push("starting-point"));
            }
          });
          await Promise.all(r4), e7(t5);
        }
      }, { initial: true });
    });
  }
  async addResultAreaToMap(e7, t5) {
    var _a, _b;
    if (this.view) {
      if (e7.resultArea.show = true, t5)
        (_a = this._resultAreaHandler) == null ? void 0 : _a.addResultAreaToMap(t5, this.view.map), this.emit("add-result-area", { graphic: t5 });
      else if (e7.results) {
        const t6 = await this.createResultAreaGraphic(e7);
        t6 && (e7.resultAreaGraphic = t6, (_b = this._resultAreaHandler) == null ? void 0 : _b.addResultAreaToMap(t6, this.view.map), this.emit("add-result-area", { graphic: t6 }));
      }
    }
  }
  async addResultGraphicToView(e7, t5) {
    var _a;
    const { view: r4 } = this, { results: s4 } = e7;
    if (r4 && s4 && this.utilityNetwork) {
      for (const i6 in s4.aggregatedGeometry)
        if ("line,multipoint,polygon".includes(i6)) {
          const a4 = i6, l4 = s4.aggregatedGeometry[a4];
          if (null != l4) {
            l4.spatialReference = this.utilityNetwork.spatialReference, e7.graphicEnabled = true;
            const s5 = await this._geometryHandler.projectGeometry(l4, r4.spatialReference), i7 = { globalid: e7.trace.globalId };
            if (null !== s5) {
              const e8 = this.graphicHandler.makeGraphic(s5, t5.color, i7, r4.spatialReference);
              (_a = this._getGraphicLayer(P)) == null ? void 0 : _a.add(e8);
            }
          }
        }
    }
  }
  addTerminal(e7, t5) {
    const r4 = [...this._flags];
    r4.forEach((r5) => {
      var _a, _b;
      r5.globalId === t5.globalId && (((_a = t5.selectedTerminals) == null ? void 0 : _a.includes(parseInt(e7, 10))) || ((_b = r5.selectedTerminals) == null ? void 0 : _b.push(parseInt(e7, 10))));
    }), this._flags = r4;
  }
  async callTrace() {
    const e7 = this.traces.filter((e8) => e8.selected);
    return e7.length > 0 && (this.traceResults.length > 0 && this.traceResults.forEach((e8) => {
      this.removeResultGraphicFromView(e8);
    }), this.traceResults = [], this.removeSelection(), await Promise.all(e7.map(async (e8, t5) => {
      var _a;
      const r4 = e8, s4 = new u2({ gdbVersion: this.gdbVersion, moment: null, traceType: r4.traceType, traceLocations: this._flags, namedTraceConfigurationGlobalId: r4.globalId, traceConfiguration: null, outSpatialReference: null, resultTypes: null });
      await this.executeTrace(r4, (_a = this.utilityNetwork) == null ? void 0 : _a.networkServiceUrl, s4).then((e9) => {
        if (e9.hasOwnProperty("results")) {
          const r5 = { ...e9 };
          if (null !== r5.results) {
            r5.resultArea = { ...this.resultAreaProperties };
            const e10 = [...r5.results.elements];
            r5.results.elements.length = 0;
            const s5 = /* @__PURE__ */ new Map();
            for (const t6 of e10)
              s5.has(t6.globalId) || (s5.set(t6.globalId, true), r5.results.elements.push(t6));
            const i6 = [...this.traceResults];
            i6.splice(t5, 0, r5), this.traceResults = i6, null !== r5.results && (this.selectOnComplete && this.mergeSelection(true, r5.trace), this.showGraphicsOnComplete && this.addResultGraphicToView(r5, r5.graphicColor), this.enableResultArea && this.createResultAreaGraphic(r5).then((e11) => {
              var _a2;
              e11 && (r5.resultAreaGraphic = e11, ((_a2 = r5.resultArea) == null ? void 0 : _a2.show) && this.addResultAreaToMap(r5, r5.resultAreaGraphic));
            }));
          } else {
            const r6 = [...this.traceResults];
            r6.splice(t5, 0, e9), this.traceResults = r6;
          }
          this._activeProgress = false;
        } else {
          this._activeProgress = false;
          const r5 = [...this.traceResults];
          r5.splice(t5, 0, e9), this.traceResults = r5;
        }
      }).catch((e9) => {
        throw this._activeProgress = false, e9;
      });
    })), true);
  }
  changeResultAreaColor(e7, t5) {
    var _a;
    if (!e7.resultArea)
      return;
    e7.resultArea.color = t5;
    const r4 = (_a = this._resultAreaHandler) == null ? void 0 : _a.changeResultAreaColor(e7.trace.globalId, t5, this.view.map);
    e7.resultAreaGraphic && (e7.resultAreaGraphic.symbol = r4);
  }
  changeResultGraphicColor(e7, t5) {
    const r4 = [...this.traceResults];
    r4.length > 0 && r4.forEach((r5) => {
      r5.trace.globalId === t5.trace.globalId && (r5.graphicColor = e7, r5.graphicEnabled = true);
    }), this.traceResults = r4, this.removeResultGraphicFromView(t5), this.addResultGraphicToView(t5, e7);
  }
  changeFlagSymbol(e7, t5) {
    this._flags.length > 0 && this._flags.forEach((r4) => {
      r4.type === e7 && t5 && r4.mapGraphic && (r4.mapGraphic.symbol = t5);
    });
  }
  checkCanTrace() {
    const e7 = { status: true, issues: [] };
    let t5 = false;
    const r4 = this._flags.some((e8) => "starting-point" === e8.type), s4 = this._flags.filter((e8) => null !== e8.allTerminals);
    s4.length > 0 && (t5 = s4.some((e8) => e8.selectedTerminals.length <= 0));
    let i6 = [];
    return r4 ? (i6 = this.traces.filter((e8) => e8.selected), i6.length <= 0 ? (e7.status = false, e7.issues = ["noTrace"], t5 && (e7.status = false, e7.issues = ["noTrace", "noTerminalSelected"])) : t5 && (e7.status = false, e7.issues = ["noTerminalSelected"])) : (i6 = this.traces.filter((e8) => true === e8.selected), i6.length > 0 ? (e7.status = false, e7.issues = ["noStart"], t5 && (e7.status = false, e7.issues = ["noStart", "noTerminalSelected"])) : (e7.status = false, e7.issues = ["noStart", "noTrace"], t5 && (e7.status = false, e7.issues = ["noStart", "noTrace", "noTerminalSelected"]))), e7;
  }
  checkSelectionExist() {
    return this._highlightHandler.some((e7) => e7);
  }
  clearResult(e7) {
    if (!this.view)
      return;
    let t5 = this.traceResults;
    if (t5.length > 0) {
      const r4 = t5.filter((t6) => t6.trace.globalId === e7.globalId);
      r4.length > 0 && (this.removeResultGraphicFromView(r4[0]), this.removeResultAreaFromMap(r4[0])), t5 = t5.filter((t6) => t6.trace.globalId !== e7.globalId);
    }
    this.traceResults = t5, 0 === t5.length ? (this.removeAllResultAreaGraphics(), this.removeSelection(), this.emit("clear-selection", { resultSet: [] })) : this.mergeSelection(false, e7);
  }
  createResultAreaGeometries(e7, t5, r4) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
    if (!this.view || !this.resultAreaProperties)
      return;
    let s4;
    if (s4 = "convexhull" === ((_a = this.resultAreaProperties) == null ? void 0 : _a.type) ? 1 === t5.length && (u(t5[0]) || l(t5[0]) && 1 === t5[0].points.length) ? (_c = this._resultAreaHandler) == null ? void 0 : _c.createBuffer(t5, r4, (_b = e7.resultArea) == null ? void 0 : _b.unit, true) : (_f = this._resultAreaHandler) == null ? void 0 : _f.createConvexHull(t5, (_d = e7.resultArea) == null ? void 0 : _d.distance, (_e = e7.resultArea) == null ? void 0 : _e.unit) : (_h = this._resultAreaHandler) == null ? void 0 : _h.createBuffer(t5, r4, (_g = e7.resultArea) == null ? void 0 : _g.unit, true), !s4)
      return;
    if (Array.isArray(s4)) {
      for (const t6 of s4) {
        const r5 = this.getResultAreaAttributes(e7, t6), s5 = (_k = this._resultAreaHandler) == null ? void 0 : _k.createResultAreaGraphic(t6, r5, (_i = e7.resultArea) == null ? void 0 : _i.areaUnit, this.messages, this.messagesUnits, (_j = e7.resultArea) == null ? void 0 : _j.color);
        if (s5)
          return s5;
      }
      return;
    }
    const i6 = this.getResultAreaAttributes(e7, s4);
    return (_n = this._resultAreaHandler) == null ? void 0 : _n.createResultAreaGraphic(s4, i6, (_l = e7.resultArea) == null ? void 0 : _l.areaUnit, this.messages, this.messagesUnits, (_m = e7.resultArea) == null ? void 0 : _m.color);
  }
  async createResultAreaGraphic(e7) {
    var _a;
    if (e7.results) {
      const t5 = await this._createResultAreaInputGeometry(e7.results);
      if (t5.length > 0) {
        const r4 = Array(t5.length).fill((_a = e7.resultArea) == null ? void 0 : _a.distance), s4 = this.createResultAreaGeometries(e7, t5, r4);
        return this.emit("create-result-area", { graphic: s4 }), s4;
      }
    }
  }
  executeTrace(e7, t5, r4) {
    const s4 = this._processFlags(r4.traceLocations);
    return r4.traceLocations = s4, s3(t5, r4, { timeout: this._traceTimeout }).then((t6) => ({ trace: e7, results: t6, selectionEnabled: false, graphicEnabled: false, graphicColor: this.defaultGraphicColor, status: "success", date: /* @__PURE__ */ new Date() })).catch((t6) => ({ trace: e7, results: null, selectionEnabled: false, graphicEnabled: false, graphicColor: this.defaultGraphicColor, status: t6.message, date: /* @__PURE__ */ new Date() }));
  }
  getResultAreaAttributes(e7, r4) {
    var _a, _b, _c;
    const { messages: s4 } = this, i6 = [], a4 = [];
    this._flags.forEach((e8) => {
      var _a2, _b2, _c2, _d;
      const t5 = ((_a2 = e8.displayValue) == null ? void 0 : _a2.field) + ":" + ((_b2 = e8.displayValue) == null ? void 0 : _b2.value) + ";" + s4.attributeStrings.globalid + ":" + e8.globalId + ";" + s4.attributeStrings.terminalid + ":" + e8.terminalId + ";" + s4.attributeStrings.x + ":" + ((_c2 = e8.mapPoint) == null ? void 0 : _c2.x) + ";" + s4.attributeStrings.y + ":" + ((_d = e8.mapPoint) == null ? void 0 : _d.y);
      "starting-point" === e8.type ? i6.push(t5) : a4.push(t5);
    });
    return { traceId: e7.trace.globalId, traceName: e7.trace.title, traceDescription: e7.trace.description ?? "", startingPoints: i6.toString(), barriers: a4.toString(), version: this.gdbVersion, username: t.credentials[0].userId, date: e7.date, elementCount: (_a = e7.results) == null ? void 0 : _a.elements.length, functionResult: JSON.stringify((_b = e7.results) == null ? void 0 : _b.globalFunctionResults), areaStatistic: r4 ? this._geometryHandler.calculateArea(r4, (_c = e7.resultArea) == null ? void 0 : _c.areaUnit) : 0 };
  }
  getValidSources() {
    var _a, _b;
    let e7 = [];
    const t5 = ((_b = (_a = this.utilityNetwork) == null ? void 0 : _a.dataElement) == null ? void 0 : _b.domainNetworks) ?? [];
    for (const r4 of t5)
      e7 = e7.concat(r4.junctionSources), e7 = e7.concat(r4.edgeSources);
    return e7;
  }
  groupResultsByNetworkSource(e7) {
    return 0 === e7.length ? [] : this._groupBy(e7, "networkSourceId");
  }
  async loadUtilityNetwork() {
    var _a;
    const { view: e7 } = this;
    if (!e7)
      return null;
    if (await e7.when(), this.utilityNetwork) {
      if (this.utilityNetwork.loaded || await this.utilityNetwork.load(), this.utilityNetwork instanceof T) {
        try {
          const t6 = e7.map;
          await t6.loadAll(), this._loadUNSupportItems();
        } catch (i6) {
          this._loadUNSupportItems();
        }
        return this.utilityNetwork;
      }
      return null;
    }
    const t5 = e7.map, r4 = (_a = t5.utilityNetworks) == null ? void 0 : _a.at(0);
    if (r4) {
      if (await r4.load(), this.utilityNetwork = r4, !await j2(r4))
        throw new s("utility-network:no-user-type-extension", "User type extension not found");
      try {
        await t5.loadAll(), this._loadUNSupportItems();
      } catch (i6) {
      } finally {
        this._loadUNSupportItems();
      }
      return r4;
    }
    return null;
  }
  manageFilterBarrier(e7, t5) {
    const r4 = [...this._flags];
    r4.forEach((r5) => {
      r5.globalId === t5.globalId && "barrier" === t5.type && r5.id === t5.id && (r5.isFilterBarrier = e7);
    }), this._flags = r4;
  }
  mergeSelection(e7, t5) {
    let r4 = [];
    const s4 = [...this.traceResults], i6 = t5.globalId;
    s4.forEach((t6) => {
      var _a, _b;
      i6 === t6.trace.globalId && (t6.selectionEnabled = e7), t6.selectionEnabled && null !== ((_a = t6.results) == null ? void 0 : _a.elements) && (r4 = [...r4, ...((_b = t6.results) == null ? void 0 : _b.elements) ?? []]);
    }), this.selectResults([...new Set(r4)]);
  }
  async queryFeaturesById(e7) {
    var _a;
    const { view: t5 } = this;
    if (!t5 || !this.utilityNetwork)
      return null;
    const s4 = n3(this.utilityNetwork, e7), i6 = { layerUrl: s4[0].layerUrl, objectIds: s4[0].objectIds, outFields: ["*"] }, a4 = ((_a = t5.map) == null ? void 0 : _a.allTables.toArray().filter((e8) => {
      var _a2;
      return ((_a2 = e8 == null ? void 0 : e8.parsedUrl) == null ? void 0 : _a2.path) === s4[0].layerUrl;
    }).filter(r2)) ?? [];
    this._getUniqueMapLayerViews(t5).filter(({ layer: e8 }) => {
      var _a2;
      return ((_a2 = e8 == null ? void 0 : e8.parsedUrl) == null ? void 0 : _a2.path) === s4[0].layerUrl;
    }).forEach(({ layer: e8 }) => {
      "feature" !== e8.type && "subtype-group" !== e8.type || a4.push(e8);
    });
    const l4 = (await Promise.all(a4.map(async (e8) => {
      const s5 = { layers: new V([e8]), layerInfos: [i6], returnGeometry: true, outSpatialReference: t5.spatialReference }, [a5] = await s2(s5, false);
      return a5;
    }))).filter(({ featureSet: e8 }) => e8.features.length > 0);
    return l4.length > 0 ? l4 : null;
  }
  queryFlagByHitTest(e7, t5, r4) {
    return this._lookupFlagByHit(e7).then((e8) => {
      const { view: s4 } = this;
      if (!s4)
        return false;
      if (e8.length > 0) {
        const s5 = [...this._flags], i6 = r4;
        return e8.forEach((e9) => {
          var _a, _b;
          const r5 = e9.graphic, a4 = r5.attributes.hasOwnProperty("GLOBALID") ? r5.attributes.GLOBALID : r5.attributes.globalid;
          if (s5.filter((e10) => e10.globalId === a4).length <= 0) {
            const e10 = this.graphicHandler.getFlagGraphic(r5.mapPoint, t5, r5, i6);
            (_a = this._getGraphicLayer(H)) == null ? void 0 : _a.add(e10), s5.push({ ...r5, type: t5, globalId: r5.attributes.globalid || r5.attributes.GLOBALID, details: r5, mapGraphic: e10, id: this._uniqueFlagId });
          } else if (null !== r5.percentAlong) {
            const e10 = this.graphicHandler.getFlagGraphic(r5.mapPoint, t5, r5, i6);
            (_b = this._getGraphicLayer(H)) == null ? void 0 : _b.add(e10), s5.push({ ...r5, type: t5, globalId: r5.attributes.globalid || r5.attributes.GLOBALID, details: r5, mapGraphic: e10, id: this._uniqueFlagId });
          }
        }), this._flags = s5, true;
      }
      return false;
    });
  }
  removeResultGraphicFromView(e7) {
    var _a;
    const { view: t5 } = this;
    if (!t5)
      return;
    const r4 = (_a = this._getGraphicLayer(P)) == null ? void 0 : _a.graphics;
    e7.graphicEnabled = false;
    const s4 = r4 == null ? void 0 : r4.filter((t6) => t6.attributes[t6.attributes.hasOwnProperty("GLOBALID") ? "GLOBALID" : "globalid"] === e7.trace.globalId);
    s4 == null ? void 0 : s4.forEach((e8) => {
      var _a2;
      (_a2 = this._getGraphicLayer(P)) == null ? void 0 : _a2.remove(e8);
    });
  }
  removeFlag(e7) {
    const t5 = this._flags.filter((t6) => {
      if (t6.id !== e7.id)
        return t6;
    });
    this._removeGraphic(e7), this._flags = t5;
  }
  removeAllResultAreaGraphics() {
    var _a;
    (_a = this._resultAreaHandler) == null ? void 0 : _a.removeAllResultAreaGraphics(this.view.map);
  }
  removeResultAreaFromMap(e7) {
    var _a, _b;
    if (e7.resultArea) {
      e7.resultArea.show = false;
      const t5 = (_b = this._resultAreaHandler) == null ? void 0 : _b.removeResultArea(e7.trace.globalId, (_a = this.view) == null ? void 0 : _a.map);
      t5 && this.emit("remove-result-area", { graphic: t5 });
    }
  }
  removeSelection() {
    this._highlightHandler.forEach((e7) => {
      e7 && e7.remove();
    }), this._highlightHandler = [];
  }
  removeTerminal(e7, t5) {
    const r4 = [...this._flags];
    r4.forEach((r5) => {
      var _a, _b;
      if (r5.globalId === t5.globalId && ((_a = t5.selectedTerminals) == null ? void 0 : _a.includes(parseInt(e7, 10)))) {
        const s4 = t5.selectedTerminals.indexOf(parseInt(e7, 10));
        (_b = r5.selectedTerminals) == null ? void 0 : _b.splice(s4, 1);
      }
    }), this._flags = r4;
  }
  removeFlagsOnLoadWatcher() {
    this._watchHandler && null !== this._watchHandler && this._watchHandler.remove();
  }
  reset() {
    var _a, _b;
    this._flags = [], this.traceResults = [];
    const e7 = [...this.traces];
    e7.forEach((e8) => {
      e8.selected = false;
    }), this.traces = e7, this.view && ((_a = this._getGraphicLayer(P)) == null ? void 0 : _a.removeAll(), (_b = this._getGraphicLayer(H)) == null ? void 0 : _b.removeAll(), this.removeAllResultAreaGraphics(), this.removeSelection(), this.emit("clear-selection", { resultSet: [] }));
  }
  selectFeaturesById(e7) {
    const { view: t5 } = this;
    if (!t5 || !this.utilityNetwork)
      return;
    const r4 = n3(this.utilityNetwork, e7);
    this._getUniqueMapLayerViews(t5).forEach((e8) => {
      var _a, _b;
      C(e8) && ((_b = (_a = e8.layer) == null ? void 0 : _a.parsedUrl) == null ? void 0 : _b.path) === r4[0].layerUrl && U(e8) && this._highlightHandler.push(e8.highlight(r4[0].objectIds));
    });
  }
  selectResults(e7) {
    if (e7.length > 0) {
      this.removeSelection();
      const t5 = this.groupResultsByNetworkSource(e7), r4 = [];
      for (const e8 in t5)
        this.selectFeaturesById(t5[e8]), r4.push(this.queryFeaturesById(t5[e8]));
      Promise.all(r4).then((e8) => {
        this.emit("select-features", { resultSet: e8 });
      });
    } else
      this.removeSelection(), this.emit("clear-selection", { resultSet: [] });
  }
  selectTraces(e7, t5) {
    const r4 = [...this.traces];
    r4.forEach((r5) => {
      t5 === r5.globalId && (r5.selected = e7);
    }), this.traces = r4;
  }
  selectTracesOnLoad() {
    var _a;
    ((_a = this.utilityNetwork) == null ? void 0 : _a.hasOwnProperty("sharedNamedTraceConfigurations")) && (this.traces = [...this.utilityNetwork.sharedNamedTraceConfigurations], this.traces.forEach((e7) => {
      e7.selected = false, this.selectedTraces.includes(e7.globalId) && (e7.selected = true);
    }));
  }
  zoomToAsset(e7) {
    var _a;
    (_a = this.view) == null ? void 0 : _a.goTo(e7).catch((e8) => console.error(e8));
  }
  async _createResultAreaInputGeometry(e7) {
    if (null != e7.aggregatedGeometry)
      return this._geometryHandler.mergeAggregatedToGeometries(e7.aggregatedGeometry);
    const t5 = this.groupResultsByNetworkSource(e7.elements), r4 = [];
    for (const s4 in t5)
      r4.push(this.queryFeaturesById(t5[s4]));
    try {
      const e8 = await Promise.all(r4), t6 = [];
      for (const r5 of e8)
        if (r5)
          for (const e9 of r5)
            for (const r6 of e9.featureSet.features)
              t6.push(r6.geometry);
      return t6;
    } catch {
      return [];
    }
  }
  _loadUNSupportItems() {
    var _a;
    if (!this.utilityNetwork)
      return;
    const { map: e7 } = this.view, { messages: t5 } = this;
    this._populateOutfields(), this._createGraphicLayer(H), this._createGraphicLayer(P), (_a = this._resultAreaHandler) == null ? void 0 : _a.createGraphicLayer(e7, t5 == null ? void 0 : t5.alertsStrings.genericResultHeader), this._validUNLayers = this._utilityHelper.getValidUtilityNetworkLayers(e7, this.utilityNetwork);
  }
  _getUniqueMapLayerViews(e7) {
    const t5 = [];
    return e7.layerViews.filter(({ layer: { type: e8 } }) => "feature" === e8 || "group" === e8 || "subtype-group" === e8).toArray().forEach((e8) => {
      switch (e8.layer.type) {
        case "group":
          if (E2(e8))
            for (const r4 of e8.layerViews)
              t5.push(r4);
          break;
        case "subtype-group":
          t5.push(e8);
          break;
        default:
          t5.some((t6) => t6.layer.id === e8.layer.id) || t5.push(e8);
      }
    }), t5;
  }
  _processFlags(e7) {
    const t5 = [];
    return e7.forEach((e8) => {
      if (null !== e8.selectedTerminals && e8.selectedTerminals.length > 0)
        e8.selectedTerminals.forEach((r4) => {
          const s4 = new a2({ globalId: e8.globalId, percentAlong: e8.percentAlong, terminalId: r4, type: e8.type, isFilterBarrier: e8.isFilterBarrier });
          t5.push(s4);
        });
      else {
        const r4 = new a2({ globalId: e8.globalId, percentAlong: e8.percentAlong, terminalId: null, type: e8.type, isFilterBarrier: e8.isFilterBarrier });
        t5.push(r4);
      }
    }), t5;
  }
  _getDisplayField(e7) {
    var _a;
    return "subtype-sublayer" === ((_a = e7 == null ? void 0 : e7.layer) == null ? void 0 : _a.type) ? this._getDisplayFieldBySublayer(e7) : this._getDisplayFieldByFeatureLayer(e7);
  }
  _getDisplayFieldBySublayer(e7) {
    let t5 = "", r4 = "";
    const s4 = e7.layer;
    t5 = this._checkParentForData(s4, "displayField");
    for (const i6 in e7.attributes) {
      const a4 = i6.toLowerCase();
      a4 === (t5 == null ? void 0 : t5.toLowerCase()) ? (r4 = e7.attributes[i6], "assetgroup" === a4 || "assettype" === a4 ? r4 = this._checkSubtype(s4, s4.subtypeCode) : (r4 = this._checkDomain(s4.fields, i6, r4), "string" == typeof r4 && (r4 = this._defaultDisplayField(r4, s4)))) : (r4 = this._checkDomain(s4.fields, i6, r4), "string" == typeof r4 && (r4 = this._defaultDisplayField(r4, s4)));
    }
    return { field: t5, value: r4.toString() };
  }
  _getDisplayFieldByFeatureLayer(e7) {
    var _a, _b;
    const t5 = e7.layer;
    let r4 = t5.displayField, s4 = "";
    for (const i6 in e7.attributes) {
      const a4 = i6.toLowerCase();
      if (a4 === (r4 == null ? void 0 : r4.toLowerCase()))
        if (s4 = e7.attributes[i6], "assetgroup" === a4 || "assettype" === a4) {
          let a5 = e7.attributes[t5.typeIdField.toUpperCase()];
          a5 || (a5 = e7.attributes[t5.typeIdField.toLowerCase()]), r4 = t5.typeIdField, s4 = this._checkSubtype(t5, a5), "" === r4 && (t5.templates && t5.templates.length > 0 ? (r4 = (_a = t5.templates[0]) == null ? void 0 : _a.name, s4 = (_b = t5.templates[0]) == null ? void 0 : _b.name) : (r4 = t5.displayField, s4 = e7.attributes[i6]));
        } else
          s4 = this._checkDomain(t5.fields, i6, s4), "string" == typeof s4 && (s4 = this._defaultDisplayField(s4, t5));
      else
        s4 = this._checkDomain(t5.fields, i6, s4), "string" == typeof s4 && (s4 = this._defaultDisplayField(s4, t5));
    }
    return { field: r4, value: s4 ? s4.toString() : "" };
  }
  _checkSubtype(e7, t5) {
    let r4 = t5;
    if ("subtype-sublayer" === e7.type) {
      const s4 = this._checkParentForData(e7, "subtypes");
      (s4 == null ? void 0 : s4.length) > 0 && s4.forEach((e8) => {
        e8.code === t5 && (r4 = e8.name);
      });
    } else if (null != e7.types && e7.types.length > 0) {
      const s4 = e7.types.filter((e8) => e8.id === t5);
      s4.length > 0 && (r4 = s4[0].name);
    }
    return r4;
  }
  _checkDomain(e7, t5, r4) {
    var _a;
    let s4 = r4;
    const i6 = e7.filter((e8) => e8.name.toLowerCase() === t5.toLowerCase());
    if (i6.length > 0 && N(i6[0].domain) && ((_a = i6[0].domain) == null ? void 0 : _a.codedValues)) {
      const e8 = i6[0].domain.codedValues.filter(({ code: e9 }) => e9 === r4);
      e8.length > 0 && (s4 = e8[0].name);
    }
    return s4;
  }
  _checkParentForData(e7, t5) {
    var _a;
    return ((_a = e7.parent) == null ? void 0 : _a[t5]) ?? null;
  }
  _defaultDisplayField(e7, t5) {
    var _a;
    return e7.trim() ? e7 : t5.templates && ((_a = t5.templates) == null ? void 0 : _a.length) > 0 ? t5.templates[0].name : t5.title;
  }
  get _uniqueFlagId() {
    return this._flagId++;
  }
  _groupBy(e7, t5) {
    return e7.reduce((e8, r4) => ((e8[r4[t5]] = e8[r4[t5]] || []).push(r4), e8), {});
  }
  async _lookupFlagByHit(e7) {
    var _a, _b;
    if (null == e7.mapPoint)
      return [];
    const t5 = await this.view.hitTest(e7.screenPoint, { include: this._validUNLayers }), r4 = [];
    if (t5.results.length > 0) {
      const s4 = t5.results.find((e8) => null !== e8.layer);
      if (null != ((_a = s4.graphic) == null ? void 0 : _a.geometry)) {
        if ("polyline" === s4.graphic.geometry.type) {
          const t6 = this._geometryHandler.getPercentageAlong(s4.graphic.geometry, e7.mapPoint, s4.graphic.geometry.spatialReference), i6 = this._getDisplayField(s4.graphic);
          s4.graphic.terminalId = null, s4.graphic.isFilterBarrier = false, s4.graphic.allTerminals = null, s4.graphic.selectedTerminals = null, s4.graphic.percentAlong = t6, s4.graphic.displayValue = i6, s4.graphic.mapPoint = s4.mapPoint, r4.push(s4);
        } else if (("point" === s4.graphic.geometry.type || "polygon" === s4.graphic.geometry.type) && null !== this.utilityNetwork) {
          const e8 = (_b = this.utilityNetwork) == null ? void 0 : _b.getTerminalConfiguration(s4.graphic), t6 = this._getDisplayField(s4.graphic);
          s4.graphic.terminalId = e8 ? e8.terminals[0].id || null : 1, s4.graphic.isFilterBarrier = false, s4.graphic.allTerminals = e8 ?? null, s4.graphic.selectedTerminals = [e8 ? e8.terminals[0].id || null : 1], s4.graphic.percentAlong = null, s4.graphic.displayValue = t6, s4.graphic.mapPoint = s4.mapPoint, r4.push(s4);
        }
      }
    }
    return r4;
  }
  async _populateOutfields() {
    var _a;
    const e7 = (_a = this.view) == null ? void 0 : _a.map, t5 = this.getValidSources();
    e7 == null ? void 0 : e7.layers.forEach((e8) => {
      "group" === e8.type ? e8.layers.forEach((e9) => {
        t5.some((t6) => t6.layerId === e9.layerId) && e9.fields.some((e10) => "assetgroup" === e10.name.toLowerCase()) && (e9.outFields = ["assetgroup", "assettype", "globalid", "objectid"]);
      }) : t5.some((t6) => t6.layerId === e8.layerId) && e8.fields.some((e9) => "assetgroup" === e9.name.toLowerCase()) && (e8.outFields = ["assetgroup", "assettype", "globalid", "objectid"]);
    });
  }
  _removeGraphic(e7) {
    var _a;
    (_a = this._getGraphicLayer(H)) == null ? void 0 : _a.remove(e7.mapGraphic);
  }
  _createGraphicLayer(e7) {
    const { map: t5 } = this.view;
    if (!t5.findLayerById(e7)) {
      const r4 = new h2({ title: e7, listMode: "hide", id: e7 });
      t5.add(r4);
    }
  }
  _getGraphicLayer(e7) {
    const { map: t5 } = this.view;
    if (t5) {
      const r4 = t5.findLayerById(e7);
      if (r4 && B2(r4))
        return r4;
    }
    return null;
  }
};
e([y()], D2.prototype, "_activeProgress", void 0), e([y()], D2.prototype, "_flags", void 0), e([y()], D2.prototype, "traces", void 0), e([y()], D2.prototype, "defaultGraphicColor", void 0), e([y()], D2.prototype, "enableResultArea", void 0), e([y()], D2.prototype, "flags", void 0), e([y()], D2.prototype, "gdbVersion", void 0), e([y()], D2.prototype, "messages", void 0), e([y()], D2.prototype, "messagesUnits", void 0), e([y()], D2.prototype, "resultAreaProperties", null), e([y()], D2.prototype, "selectedTraces", void 0), e([y()], D2.prototype, "selectOnComplete", void 0), e([y()], D2.prototype, "showGraphicsOnComplete", void 0), e([y()], D2.prototype, "showSelectionAttributes", void 0), e([y({ readOnly: true })], D2.prototype, "state", null), e([y()], D2.prototype, "traceResults", void 0), e([y()], D2.prototype, "utilityNetwork", void 0), e([y({ value: null })], D2.prototype, "view", null), D2 = e([a("esri.widgets.UtilityNetworkTrace.UtilityNetworkTraceViewModel")], D2);
var V2 = D2;

// node_modules/@arcgis/core/widgets/UtilityNetworkTrace.js
var m3 = "esri-utility-trace-network";
var _ = { base: m3, loaderContainer: `${m3}__loader-container`, loader: `${m3}__loader`, fadeIn: `${m3}--fade-in`, addButtonContainer: `${m3}__add-button-container`, noticeContainer: `${m3}__notice-container`, listContainer: `${m3}__list-container`, resultsContainer: `${m3}__results-container`, flow: `${m3}__flow`, numberInput: `${m3}__number-input`, clearPrompt: `${m3}__reset-prompt`, promptDivider: `${m3}__divider`, paddingTop: `${m3}__padTop` };
function w(e7) {
  return { height: e7 + "px" };
}
function v(e7) {
  return { width: e7 + "px" };
}
function b2() {
  return { width: "75%" };
}
function y3() {
  return { textAlign: "center", padding: "1rem" };
}
function f4(e7) {
  return { width: "100%", height: window.getComputedStyle(e7).getPropertyValue("max-height") };
}
function T2() {
  return { height: "100%" };
}
function S3(e7) {
  return { display: "flex", flexDirection: e7 };
}
function R2(e7) {
  return e7 instanceof i;
}
var C2 = { noExtension: -2147208474 };
var A = class extends D {
  constructor(e7, t5) {
    super(e7, t5), this._selectToolActive = false, this._activeTrace = null, this._activeSwatch = "", this._traceHeaderForFlow = "", this._assetGroupHeader = "", this._assetTypeHeader = "", this._traceResultsFunctions = [], this._traceResultsAssetGroup = [], this._traceResultsAssetType = [], this._traceResultsIndividual = [], this._showTraceResultFunctions = false, this._showTraceResultAssetGroup = false, this._showTraceResultAssetType = false, this._showIndividualRecords = false, this._activeTab = "input", this._flagViewType = "starting-point", this._alertRemoveModal = false, this._warningNoFlag = false, this._warningNoTraceSelected = false, this._warningNoStartAssetFound = false, this._warningNoBarrierAssetFound = false, this._warningNoTerminal = false, this._confirmReset = false, this._showResultOptions = false, this._resultObjectIdField = "objectid", this._resultDisplayField = "objectid", this._resultSortField = "objectid", this._resultSortOrder = "desc", this._swatchNode = null, this._individualResultNode = null, this._symbolStartFlag = null, this._symbolBarrier = null, this._watchHandler = null, this._loadUNError = true, this._errorMessage = "", this.disabled = true, this.inputSettings = [], this.messages = null, this.messagesCommon = null, this.messagesUnits = null, this.viewModel = new V2(), this._afterComponentCreate = this._afterComponentCreate.bind(this);
  }
  initialize() {
    this._utilityNetworkTraceInitialized(), this.addHandles(d(() => {
      var _a;
      return (_a = this.viewModel) == null ? void 0 : _a.resultAreaProperties;
    }, () => this.scheduleRender()));
  }
  get defaultGraphicColor() {
    return this.viewModel.defaultGraphicColor;
  }
  set defaultGraphicColor(e7) {
    this.viewModel.defaultGraphicColor = e7;
  }
  get flags() {
    return this.viewModel.flags;
  }
  set flags(e7) {
    this.viewModel.flags = e7;
  }
  get gdbVersion() {
    return this.viewModel.gdbVersion;
  }
  set gdbVersion(e7) {
    this.viewModel.gdbVersion = e7;
  }
  get icon() {
    return "utility-network-trace";
  }
  set icon(e7) {
    this._overrideIfSome("icon", e7);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e7) {
    this._overrideIfSome("label", e7);
  }
  get resultAreaProperties() {
    return this.viewModel.resultAreaProperties;
  }
  set resultAreaProperties(e7) {
    this.viewModel.resultAreaProperties = e7;
  }
  get selectedTraces() {
    return this.viewModel.selectedTraces;
  }
  set selectedTraces(e7) {
    this.viewModel.selectedTraces = e7;
  }
  get selectOnComplete() {
    return this.viewModel.selectOnComplete;
  }
  set selectOnComplete(e7) {
    this.viewModel.selectOnComplete = e7;
  }
  get showGraphicsOnComplete() {
    return this.viewModel.showGraphicsOnComplete;
  }
  set showGraphicsOnComplete(e7) {
    this.viewModel.showGraphicsOnComplete = e7;
  }
  get enableResultArea() {
    return this.viewModel.enableResultArea;
  }
  set enableResultArea(e7) {
    this.viewModel.enableResultArea = e7;
  }
  get showSelectionAttributes() {
    return this.viewModel.showSelectionAttributes;
  }
  set showSelectionAttributes(e7) {
    this.viewModel.showSelectionAttributes = e7;
  }
  get utilityNetwork() {
    return this.viewModel.utilityNetwork;
  }
  set utilityNetwork(e7) {
    this.viewModel.utilityNetwork = e7;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e7) {
    this.viewModel.view = e7;
  }
  async checkCanTrace() {
    this._confirmReset = false;
    const e7 = this.viewModel.checkCanTrace();
    e7.status ? (this._warningNoFlag = false, this._warningNoTraceSelected = false, this._warningNoTraceSelected = false, this._warningNoTerminal = false, this._showTraceResultFunctions = false, this._showTraceResultAssetGroup = false, this._showTraceResultAssetType = false, this._showIndividualRecords = false, this.switchTab("result"), this.viewModel._activeProgress = true, this.viewModel.removeAllResultAreaGraphics(), await this.viewModel.callTrace(), this.viewModel._activeProgress = false) : e7.issues.forEach((e8) => {
      switch (e8) {
        case "noStart":
          this._warningNoFlag = true;
          break;
        case "noTerminalSelected":
          this._warningNoTerminal = true;
          break;
        default:
          this._warningNoTraceSelected = true;
      }
    });
  }
  confirmReset() {
    this._confirmReset = true;
  }
  render() {
    const { state: e7 } = this.viewModel;
    this._mixCustomStrings(), this._overrideFlagSymbol();
    const t5 = "loading" === e7 ? this._renderWarningMessage("noTraceConfig", false) : this._renderUtilityNetworkTrace();
    return n2("div", { class: this.classes(_.base, e3.widget, e3.panel, { [e3.widgetDisabled]: this.disabled }), styles: T2() }, t5);
  }
  loadDependencies() {
    return r({ action: () => import("./calcite-action-P2CTRNG2.js"), "action-group": () => import("./calcite-action-group-COKFT2E7.js"), "action-pad": () => import("./calcite-action-pad-YMYR7VKW.js"), block: () => import("./calcite-block-GV6ZWM4U.js"), "block-section": () => import("./calcite-block-section-7OPBFZGI.js"), button: () => import("./calcite-button-V4T5NPWY.js"), checkbox: () => import("./calcite-checkbox-AHETVK7Y.js"), "color-picker-swatch": () => import("./calcite-color-picker-swatch-JZ4XRNYT.js"), combobox: () => import("./calcite-combobox-2DABLAR5.js"), "combobox-item": () => import("./calcite-combobox-item-CJU6ESRT.js"), flow: () => import("./calcite-flow-S3IMKQD6.js"), "flow-item": () => import("./calcite-flow-item-BUZXXDGT.js"), icon: () => import("./calcite-icon-25XWA6H7.js"), "input-number": () => import("./calcite-input-number-IGQXKZWP.js"), label: () => import("./calcite-label-W4VTHQAF.js"), list: () => import("./calcite-list-CC3BA3BY.js"), "list-item": () => import("./calcite-list-item-K4SMX7ZK.js"), loader: () => import("./calcite-loader-64JUXTQT.js"), notice: () => import("./calcite-notice-Q2MN4Y4I.js"), option: () => import("./calcite-option-TCD47JBL.js"), panel: () => import("./calcite-panel-MK7QTGYZ.js"), popover: () => import("./calcite-popover-4LQ4GPZW.js"), scrim: () => import("./calcite-scrim-Z45AYPZE.js"), select: () => import("./calcite-select-DL7WB63T.js"), tab: () => import("./calcite-tab-X3QI6G7F.js"), "tab-nav": () => import("./calcite-tab-nav-AEQ3R2IT.js"), "tab-title": () => import("./calcite-tab-title-JQKDYCZZ.js"), tabs: () => import("./calcite-tabs-QKTBR6ZF.js"), tooltip: () => import("./calcite-tooltip-TDDUGVK4.js") });
  }
  switchTab(e7) {
    this._activeTab = e7;
  }
  switchToFunctions(e7, t5) {
    this._traceResultsFunctions = e7, this._showTraceResultFunctions = t5;
  }
  switchToAssetGroup(e7, t5, s4) {
    this._traceHeaderForFlow = t5, this._traceResultsAssetGroup = e7, this._showTraceResultAssetGroup = s4;
  }
  switchToAssetType(e7, t5, s4) {
    this._assetGroupHeader = t5, this._traceResultsAssetType = e7, this._showTraceResultAssetType = s4;
  }
  switchToIndividualRecords(e7, t5, s4) {
    this._assetTypeHeader = t5, this._traceResultsIndividual = e7, this._showIndividualRecords = s4;
  }
  _renderUtilityNetworkTrace() {
    const { messages: e7, messagesCommon: t5 } = this;
    let s4 = n2("calcite-tabs", { layout: "center", position: "top", styles: f4(this.container) }, n2("calcite-tab-nav", { slot: "title-group" }, n2("calcite-tab-title", { onclick: () => {
      this.switchTab("input");
    }, selected: "input" === this._activeTab }, e7.inputsStrings.headerTabInputs), n2("calcite-tab-title", { onclick: () => {
      this.switchTab("result");
    }, selected: "result" === this._activeTab }, e7.resultsStrings.headerTabResults)), n2("calcite-tab", { selected: "input" === this._activeTab }, this._renderInputPanel()), n2("calcite-tab", { selected: "result" === this._activeTab }, this.viewModel._activeProgress ? n2("calcite-loader", { label: e7.alertsStrings.traceExecuting, text: e7.alertsStrings.traceExecuting, type: "indeterminate" }) : this.viewModel.traceResults.length > 0 ? this._renderResultPanel() : this._renderWarningMessage("noTraceExecuted", false), this._confirmReset ? n2("calcite-scrim", { key: "prompt" }, n2("div", { class: _.clearPrompt }, n2("h3", { slot: "header" }, e7.resultsStrings.startOverButton), n2("div", { slot: "content" }, e7.resultsStrings.startOverValidation), n2("div", { class: _.promptDivider }), n2("div", { styles: S3("row") }, n2("calcite-button", { appearance: "outline", onclick: () => {
      this._confirmReset = false;
    }, slot: "secondary", width: "full" }, t5.cancel), n2("calcite-button", { onclick: () => {
      this._confirmReset = false, this.viewModel.reset(), this.switchTab("input");
    }, slot: "primary", width: "full" }, t5.form.ok)))) : null));
    return 0 === this.viewModel.traces.length && (s4 = n2("calcite-panel", null, this._renderWarningMessage("noTraceConfig", false))), this._loadUNError || (s4 = n2("calcite-panel", null, this._renderWarningMessage("loadUNError", false, this._errorMessage))), s4;
  }
  _renderInputPanel() {
    const { messages: e7 } = this;
    return n2("calcite-flow", { class: _.flow }, n2("calcite-flow-item", null, this._warningNoFlag ? this._renderWarningMessage("flag", true) : null, this._warningNoTerminal ? this._renderWarningMessage("noTerminal", true) : null, this._warningNoTraceSelected ? this._renderWarningMessage("trace", true) : null, this._renderTraceSelectorContainer(), this._renderStartFlagsContainer(), this._renderBarriersFlagsContainer(), this._warningNoFlag && this._warningNoTraceSelected ? n2("div", { styles: w(10) }) : null, n2("calcite-button", { kind: "brand", onclick: () => {
      this.checkCanTrace();
    }, slot: "footer", width: "full" }, e7.tracingStrings.runTrace)), this._selectToolActive ? this._renderActiveTool() : null);
  }
  _renderResultPanel() {
    return n2("calcite-flow", { styles: T2() }, this._renderTraceResults(), this._showTraceResultFunctions ? this._renderTraceResultFunctions() : null, this._showTraceResultAssetGroup ? this._renderTraceResultByAssetGroup() : null, this._showTraceResultAssetType ? this._renderTraceResultByAssetType() : null, this._showIndividualRecords ? this._renderTraceResultIndividual() : null, this._showIndividualRecords ? this._renderTraceResultIndividualPopover() : null);
  }
  _renderStartFlagsContainer() {
    const { messages: e7 } = this, t5 = [];
    let s4 = [];
    s4 = this.viewModel._flags.filter((e8) => "starting-point" === e8.type), s4.forEach((e8) => {
      e8.displayValue && t5.push(this._renderFlagRow(e8, "start"));
    });
    let i6 = null;
    return this._symbolStartFlag && (i6 = this._getSymbolIcon(this._symbolStartFlag)), n2("calcite-block", { collapsible: true, heading: e7.inputsStrings.headerStartingPoint + " (" + s4.length + ")", open: true, overlayPositioning: "fixed" }, n2("div", { slot: "icon" }, i6 || n2("calcite-icon", { icon: "pin", scale: "s" })), n2("div", null, e7.inputsStrings.startingPointHint), n2("div", { class: _.listContainer }, t5), this._warningNoStartAssetFound ? this._renderWarningMessage("noStartAsset", true) : null, n2("div", { class: _.addButtonContainer }, n2("calcite-button", { alignment: "center", appearance: "outline", href: "", iconStart: "plus", label: e7.inputsStrings.addPointOption, onclick: () => {
      this._changeCursor("crosshair"), this._flagViewType = "starting-point", this._selectToolActive = true, this._warningNoStartAssetFound = false, this.viewModel.addFlagByHit("starting-point", this._symbolStartFlag).then((e8) => {
        this._changeCursor("default"), e8 ? this._warningNoFlag = false : this._warningNoStartAssetFound = true, this._selectToolActive = false;
      });
    }, round: true })));
  }
  _renderBarriersFlagsContainer() {
    const { messages: e7 } = this, t5 = [];
    let s4 = [];
    s4 = this.viewModel._flags.filter((e8) => "barrier" === e8.type), s4.forEach((e8) => {
      e8.displayValue && t5.push(this._renderFlagRow(e8, "barrier"));
    });
    let i6 = null;
    return this._symbolBarrier && (i6 = this._getSymbolIcon(this._symbolBarrier)), n2("calcite-block", { collapsible: true, heading: e7.inputsStrings.headerBarrier + " (" + s4.length + ")", open: false, overlayPositioning: "fixed" }, n2("div", { slot: "icon" }, i6 || n2("calcite-icon", { icon: "x-circle-f", scale: "s" })), n2("div", null, e7.inputsStrings.barrierPointHint), n2("div", { class: _.listContainer }, t5), this._warningNoBarrierAssetFound ? this._renderWarningMessage("noBarrierAsset", true) : null, n2("div", { class: _.addButtonContainer }, n2("calcite-button", { alignment: "center", appearance: "outline", href: "", iconStart: "plus", kind: "brand", label: e7.inputsStrings.addPointOption, onclick: () => {
      this._changeCursor("crosshair"), this._flagViewType = "barrier", this._selectToolActive = true, this._warningNoBarrierAssetFound = false, this.viewModel.addFlagByHit("barrier", this._symbolBarrier).then((e8) => {
        this._changeCursor("default"), e8 || (this._warningNoBarrierAssetFound = true), this._selectToolActive = false;
      });
    }, round: true })));
  }
  _renderFlagRow(e7, t5) {
    var _a;
    const { messages: s4, messagesCommon: i6 } = this, r4 = [];
    let o2 = false;
    return null != e7.allTerminals && e7.allTerminals.terminals.length > 0 && (o2 = true, e7.allTerminals.terminals.forEach((t6) => {
      var _a2;
      let s5 = false;
      ((_a2 = e7 == null ? void 0 : e7.selectedTerminals) == null ? void 0 : _a2.includes(t6.id)) && (s5 = true), r4.push(n2("calcite-combobox-item", { key: t6.name, selected: s5, textLabel: t6.name, value: t6.id }));
    })), n2("calcite-block", { collapsible: null !== e7.allTerminals || "barrier" === e7.type, heading: ((_a = e7.displayValue) == null ? void 0 : _a.value) ?? "", key: "pop" + e7.globalId + e7.type + e7.id + t5, overlayPositioning: "fixed" }, n2("calcite-action", { icon: "trash", label: i6.remove, onclick: () => {
      this.viewModel.removeFlag(e7);
    }, scale: "s", slot: "header-menu-actions", text: i6.remove, textEnabled: true }), n2("calcite-action", { icon: "zoom-to-object", label: s4.globalStrings.zoomToFeature, onclick: () => {
      this.viewModel.zoomToAsset(e7.details.geometry);
    }, scale: "s", slot: "header-menu-actions", text: s4.globalStrings.zoomToFeature, textEnabled: true }), "barrier" === e7.type ? n2("calcite-label", { layout: "inline", scale: "s" }, n2("calcite-checkbox", { checked: e7.isFilterBarrier, onclick: () => {
      this.viewModel.manageFilterBarrier(!e7.isFilterBarrier, e7);
    }, scale: "s" }), s4.inputsStrings.barrierFilter) : null, o2 ? n2("calcite-combobox", { label: s4.globalStrings.selectTerminalPlaceholder, maxItems: 0, placeholder: s4.globalStrings.selectTerminalPlaceholder, scale: "s", selectionMode: "multiple", onCalciteComboboxChange: (t6) => {
      t6.target.selectedItems.length > 0 ? (e7.selectedTerminals = [], t6.target.selectedItems.forEach((t7) => {
        this.viewModel.addTerminal(t7.value, e7);
      })) : e7.selectedTerminals = [];
    }, onCalciteComboboxChipClose: (t6) => {
      t6.preventDefault(), this.viewModel.removeTerminal(t6.target.value, e7);
    } }, r4) : null);
  }
  _renderActiveTool() {
    const { messages: e7 } = this;
    let t5 = null;
    return "starting-point" === this._flagViewType ? this._symbolStartFlag && (t5 = this._getSymbolIcon(this._symbolStartFlag)) : this._symbolBarrier && (t5 = this._getSymbolIcon(this._symbolBarrier)), n2("calcite-flow-item", { heading: e7.inputsStrings.addPointOption, onCalciteFlowItemBack: () => {
      var _a;
      this.viewModel._clickHandler && (this.viewModel._clickHandler.remove(), ((_a = this.view) == null ? void 0 : _a.popup) && (this.view.popupEnabled = true)), this._selectToolActive = false;
    } }, n2("calcite-block", { collapsible: false, heading: "", open: true, overlayPositioning: "fixed" }, n2("div", { styles: y3() }, t5 || n2("calcite-icon", { icon: "starting-point" === this._flagViewType ? "pin-plus" : "x-circle-f" })), n2("div", { styles: y3() }, e7.inputsStrings.addPointHint)));
  }
  _renderTraceSelectorContainer() {
    const { messages: e7 } = this, t5 = [];
    let s4 = e7.tracingStrings.traceOperation, i6 = 0;
    return this.viewModel.traces.length > 0 && this.viewModel.traces.forEach((e8) => {
      t5.push(n2("calcite-combobox-item", { key: e8.globalId, selected: e8.selected, textLabel: e8.title, value: e8.globalId, onCalciteComboboxItemChange: (e9) => {
        const t6 = e9.target;
        this.viewModel.selectTraces(t6.selected, t6.value), this.viewModel.traces.length > 0 && (this._warningNoTraceSelected = false);
      } })), e8.selected && i6++;
    }), s4 += ` (${i6})`, n2("calcite-block", { collapsible: true, heading: s4, open: true, overlayPositioning: "fixed" }, n2("calcite-icon", { icon: "utility-network-trace", scale: "s", slot: "icon" }), n2("calcite-combobox", { label: e7.inputsStrings.selectTraces, maxItems: 0, overlayPositioning: "fixed", placeholder: e7.inputsStrings.selectTraces, scale: "s", selectionMode: "multiple" }, t5));
  }
  _renderStartOverContainer() {
    const { messages: e7 } = this;
    return n2("calcite-button", { kind: "brand", onclick: () => {
      this.confirmReset();
    }, slot: "footer", width: "full" }, e7.resultsStrings.startOverButton);
  }
  _renderWarningMessage(e7, t5, s4) {
    const { messages: i6 } = this;
    let r4 = i6.alertsStrings.NoRunAlertHeader, o2 = i6.alertsStrings.noResultsInfo;
    switch (e7) {
      case "flag":
        r4 = i6.alertsStrings.startingPointAlertHeader, o2 = i6.alertsStrings.startingPointAlert;
        break;
      case "noTerminal":
        r4 = i6.alertsStrings.noTerminalDefinedHeader, o2 = i6.alertsStrings.noTerminalDefined;
        break;
      case "trace":
        r4 = i6.alertsStrings.selectTraceAlertHeader, o2 = i6.alertsStrings.selectTraceAlert;
        break;
      case "noTraceExecuted":
        r4 = i6.alertsStrings.NoRunAlertHeader, o2 = i6.alertsStrings.noResultsInfo;
        break;
      case "noBarrierAsset":
      case "noStartAsset":
        r4 = i6.alertsStrings.noAssetsFoundHeader, o2 = i6.alertsStrings.noAssetFound;
        break;
      case "noTraceConfig":
        r4 = "", o2 = i6.alertsStrings.noTraceSupported;
        break;
      default:
        r4 = i6.alertsStrings.genericErrorHeader, o2 = s4 || "";
    }
    return n2("div", { class: _.noticeContainer, key: e7 }, n2("calcite-notice", { closable: t5, icon: true, key: e7, kind: "danger", open: true, scale: "s", width: "auto", onCalciteNoticeClose: () => {
      switch (e7) {
        case "flag":
          this._warningNoFlag = false;
          break;
        case "noTerminal":
          this._warningNoTerminal = false;
          break;
        case "trace":
          this._warningNoTraceSelected = false;
          break;
        case "noStartAsset":
          this._warningNoStartAssetFound = false;
          break;
        case "noBarrierAsset":
          this._warningNoBarrierAssetFound = false;
      }
    } }, n2("div", { slot: "title" }, r4), n2("div", { slot: "message" }, o2)));
  }
  _renderRemoveTraceContainer(e7) {
    const { messages: t5 } = this;
    return n2("calcite-action", { icon: "trash", label: t5.globalStrings.clearResults, onclick: () => {
      this._alertRemoveModal = true, this._activeTrace = e7.trace;
    }, scale: "s", slot: "header-menu-actions", text: t5.globalStrings.clearResults, textEnabled: true });
  }
  _renderHighlightColorPicker(e7, t5, s4) {
    const { messages: i6 } = this, { graphicHandler: r4 } = this.viewModel, o2 = [], l4 = new RegExp(`^${e7.hex}$`, "i"), a4 = r4.highlightColor.length > e5.length ? 5 : 4;
    for (const n5 of r4.highlightColor)
      o2.push(n2("calcite-action", { active: l4.test(n5.hex), key: n5.hex, label: i6.resultsStrings.graphicColor, onclick: () => {
        "aggregate" === s4 ? this.viewModel.changeResultGraphicColor(n5, t5) : this.viewModel.changeResultAreaColor(t5, n5);
      }, scale: "s", text: i6.resultsStrings.graphicColor }, n2("calcite-color-picker-swatch", { active: l4.test(n5.hex), color: n5.hex, scale: "s" })));
    return n2("calcite-action-pad", { expandDisabled: true, layout: "grid", position: "start" }, n2("calcite-action-group", { columns: a4, layout: "grid" }, o2));
  }
  _renderTraceResults() {
    const { messages: e7, messagesCommon: t5 } = this, { selectFeatures: s4 } = e7.resultsStrings, i6 = this.viewModel.traceResults, r4 = [];
    return i6.forEach((t6, i7) => {
      var _a, _b, _c, _d, _e, _f;
      let o2 = [], l4 = [], a4 = false, n5 = false, c = false, d2 = "";
      null !== t6.results && t6.results.hasOwnProperty("elements") ? (null !== t6.results.aggregatedGeometry && (n5 = true), null !== t6.results.globalFunctionResults && t6.results.globalFunctionResults.length > 0 && (l4 = t6.results.globalFunctionResults, l4.length > 0 && (c = true)), t6.results.elements && t6.results.elements.length > 0 && (o2 = t6.results.elements, o2.length > 0 && (a4 = true)), (n5 || a4) && (d2 = (_b = this.messagesUnits.units[(_a = t6.resultArea) == null ? void 0 : _a.unit]) == null ? void 0 : _b.abbr), r4.push(n2("calcite-block", { collapsible: true, description: t6.trace.description ?? "", heading: t6.trace.title, key: `${t6.trace.title}${i7}`, open: true, overlayPositioning: "fixed" }, this._renderRemoveTraceContainer(t6), n2("calcite-list", null, c ? n2("calcite-list-item", { label: e7.resultsStrings.functionHeader + " (" + l4.length + ")", onCalciteListItemSelect: () => {
        this.switchToFunctions(l4, true);
      } }, n2("calcite-icon", { icon: "chevron-right", scale: "s", slot: "content-end" })) : null, a4 && this.viewModel.showSelectionAttributes ? n2("calcite-list-item", { key: this.id, label: e7.resultsStrings.viewFeatures + " (" + o2.length + ")", onCalciteListItemSelect: () => {
        this.switchToAssetGroup(this._groupResultsByAssetGroup(t6), t6.trace.title + " (" + o2.length + ")", true);
      } }, n2("calcite-icon", { icon: "chevron-right", scale: "s", slot: "content-end" })) : this.viewModel.showSelectionAttributes ? n2("calcite-label", { layout: "inline", scale: "s" }, e7.resultsStrings.noSelectionResults) : null), a4 ? n2("div", { class: _.paddingTop }, n2("calcite-label", { layout: "inline", onclick: (e8) => {
        e8.preventDefault(), e8.stopPropagation(), this.viewModel.mergeSelection(!t6.selectionEnabled, t6.trace);
      }, scale: "s" }, n2("calcite-checkbox", { checked: t6.selectionEnabled, onclick: (e8) => {
        e8.preventDefault(), e8.stopPropagation(), this.viewModel.mergeSelection(!t6.selectionEnabled, t6.trace);
      } }), this.viewModel.showSelectionAttributes ? s4 : `${s4} (${o2.length})`)) : null, n5 ? n2("calcite-block-section", { key: `aggregate-${t6.trace.title}-${i7}`, open: t6.graphicEnabled, text: e7.resultsStrings.highlightTrace, toggleDisplay: "switch", onCalciteBlockSectionToggle: (e8) => {
        e8.target.open ? this.viewModel.changeResultGraphicColor(t6.graphicColor, t6) : this.viewModel.removeResultGraphicFromView(t6);
      } }, n2("calcite-list", { selectionMode: "none" }, n2("calcite-list-item", { label: e7.resultsStrings.graphicColor, onclick: (e8) => {
        const t7 = e8.target;
        this._swatchNode = t7, this._activeSwatch = "aggGeom_" + i7;
      } }, n2("calcite-color-picker-swatch", { color: t6.graphicColor.hex, scale: "s", slot: "actions-end" })))) : null, this.enableResultArea && (n5 || a4) ? n2("calcite-block-section", { key: `area-${t6.trace.title}-${i7}`, open: (_c = t6.resultArea) == null ? void 0 : _c.show, text: e7.resultsStrings.resultAreaHeader, toggleDisplay: "switch", onCalciteBlockSectionToggle: (e8) => {
        e8.target.open ? t6.resultAreaGraphic ? this.viewModel.addResultAreaToMap(t6, t6.resultAreaGraphic) : this.viewModel.addResultAreaToMap(t6) : this.viewModel.removeResultAreaFromMap(t6);
      } }, n2("calcite-list", { selectionMode: "none" }, n2("calcite-list-item", { label: e7.resultsStrings.graphicColor, onclick: (e8) => {
        const t7 = e8.target;
        this._swatchNode = t7, this._activeSwatch = "resultArea_" + i7;
      } }, n2("calcite-color-picker-swatch", { color: (_d = t6.resultArea) == null ? void 0 : _d.color.hex, scale: "s", slot: "actions-end" }))), n2("calcite-list", { selectionMode: "none" }, n2("calcite-list-item", { label: e7.resultsStrings.resultAreaBuffer }, n2("calcite-input-number", { afterCreate: this._afterComponentCreate, class: _.numberInput, max: 999999, maxLength: 999999, min: 0, scale: "s", slot: "actions-end", suffixText: d2, value: (_e = t6.resultArea) == null ? void 0 : _e.distance.toString(), onCalciteInputNumberChange: (e8) => {
        var _a2;
        if (!((_a2 = this.view) == null ? void 0 : _a2.popup))
          return;
        this.view.popup.visible && this.view.closePopup();
        const s5 = e8.target;
        t6.resultArea.distance >= 0 ? (t6.resultArea.distance = parseInt(s5.value, 10), this.viewModel.removeResultAreaFromMap(t6), this.viewModel.addResultAreaToMap(t6)) : (t6.resultArea.distance = 0, this.viewModel.removeResultAreaFromMap(t6), this.viewModel.addResultAreaToMap(t6));
      } })))) : null, n2("calcite-popover", { autoClose: true, closable: true, label: e7.resultsStrings.graphicColor, offsetDistance: 0, offsetSkidding: 0, open: this._activeSwatch === "aggGeom_" + i7 || this._activeSwatch === "resultArea_" + i7, placement: "auto-start", referenceElement: this._swatchNode, scale: "s", onCalcitePopoverClose: () => {
        this._swatchNode = null, this._activeSwatch = null;
      } }, this._renderHighlightColorPicker(this._activeSwatch === "resultArea_" + i7 ? (_f = t6.resultArea) == null ? void 0 : _f.color : t6.graphicColor, t6, this._activeSwatch === "resultArea_" + i7 ? "resultArea" : "aggregate"))))) : r4.push(n2("calcite-block", { collapsible: false, heading: t6.trace.title, key: "error-" + i7, open: true, overlayPositioning: "fixed" }, this._renderRemoveTraceContainer(t6), this._renderWarningMessage("noController", false, t6.status)));
    }), n2("calcite-flow-item", { key: "traceResults", styles: T2() }, r4, this._renderStartOverContainer(), this._alertRemoveModal ? n2("calcite-scrim", { key: "prompt" }, n2("div", { class: _.clearPrompt }, n2("h3", { slot: "header" }, e7.globalStrings.clearResults), n2("div", { slot: "content" }, e7.alertsStrings.clearResultsAlert), n2("div", { class: _.promptDivider }), n2("div", { styles: S3("row") }, n2("calcite-button", { appearance: "outline", onclick: () => {
      this._alertRemoveModal = false;
    }, slot: "secondary", width: "full" }, t5.cancel), n2("calcite-button", { onclick: () => {
      this._activeTrace && this.viewModel.clearResult(this._activeTrace), this._alertRemoveModal = false, 0 === this.viewModel.traceResults.length ? this.switchTab("input") : (this._activeTrace = this.viewModel.traceResults[0].trace, this._showTraceResultFunctions = false, this._showTraceResultAssetGroup = false, this._showTraceResultAssetType = false, this._showIndividualRecords = false);
    }, slot: "primary", width: "full" }, t5.form.ok)))) : null);
  }
  _renderTraceResultFunctions() {
    const { messages: e7 } = this, t5 = this._traceResultsFunctions, s4 = [];
    return t5.forEach((e8) => {
      s4.push(this._renderResultRowFunctions(e8));
    }), n2("calcite-flow-item", { heading: e7.resultsStrings.functionHeader, key: "functionResultMultiple", onCalciteFlowItemBack: () => {
      this.switchToFunctions([], false);
    } }, s4, this._renderStartOverContainer());
  }
  _renderTraceResultByAssetGroup() {
    const e7 = this._traceResultsAssetGroup, t5 = [];
    for (const s4 in e7) {
      const i6 = e7[s4];
      for (const e8 in i6)
        t5.push(this._renderResultRowAssetGroup(i6[e8]));
    }
    return n2("calcite-flow-item", { heading: this._traceHeaderForFlow, key: "assetGroupResultMultiple", onCalciteFlowItemBack: () => {
      this.switchToAssetGroup([], "", false);
    } }, n2("calcite-list", null, t5), this._renderStartOverContainer());
  }
  _renderTraceResultByAssetType() {
    const e7 = this._traceResultsAssetType, t5 = [];
    for (const s4 in e7)
      e7[s4].length > 0 && t5.push(this._renderResultRowAssetType(e7[s4]));
    return n2("calcite-flow-item", { heading: this._assetGroupHeader, key: "assetTypeResult", onCalciteFlowItemBack: () => {
      this.switchToAssetType([], "", false);
    } }, n2("calcite-list", { selectionMode: "none" }, t5), this._renderStartOverContainer());
  }
  _renderTraceResultIndividual() {
    var _a;
    const { messages: e7 } = this, t5 = this._traceResultsIndividual;
    t5.sort(this._compare(this._resultSortField, this._resultSortOrder));
    const s4 = [];
    if (t5.length > 0) {
      (((_a = t5[0].details) == null ? void 0 : _a.fields.some(({ name: e8 }) => e8.toLowerCase() === this._resultDisplayField.toLocaleLowerCase())) ?? false) || (this._resultDisplayField = this._resultObjectIdField, this._resultSortField = this._resultObjectIdField), t5.forEach((e8) => {
        (e8 == null ? void 0 : e8.details) && s4.push(this._renderResultRowIndividual(e8));
      }), 0 === s4.length && s4.push(n2("calcite-list-item", { label: e7.resultsStrings.noFeaturesInMap }));
    }
    return n2("calcite-flow-item", { heading: this._assetTypeHeader, key: "individualResult", onCalciteFlowItemBack: () => {
      this._showResultOptions = false, this.switchToIndividualRecords([], "", false);
    } }, n2("calcite-action", { afterCreate: L, bind: this, "data-node-ref": "_individualResultNode", icon: "gear", id: "field_options" + this.id, label: e7.resultsStrings.displayAttribute, onclick: () => {
      this._showResultOptions = true;
    }, slot: "header-actions-end", text: e7.resultsStrings.displayAttribute }), n2("calcite-list", { selectionMode: "none" }, s4), this._renderStartOverContainer());
  }
  _renderTraceResultIndividualPopover() {
    const { messages: e7 } = this, t5 = this._traceResultsIndividual, s4 = [], i6 = [];
    return t5.length > 0 && (t5[0].details ? t5[0].details.fields.forEach(({ name: e8, alias: t6 }) => {
      s4.push(n2("calcite-option", { key: `display-${e8}`, label: t6 ?? e8, selected: e8 === this._resultDisplayField, value: e8 })), i6.push(n2("calcite-option", { key: `sort-${e8}`, label: t6 ?? e8, selected: e8 === this._resultSortField, value: e8 }));
    }) : (s4.push(n2("calcite-option", { key: `display-${this._resultDisplayField}`, label: this._resultDisplayField, value: this._resultDisplayField })), i6.push(n2("calcite-option", { key: `sort-${this._resultDisplayField}`, label: this._resultDisplayField, value: this._resultDisplayField })))), n2("calcite-popover", { autoClose: true, label: e7.resultsStrings.displayAttribute, offsetDistance: 0, offsetSkidding: 0, open: this._showResultOptions, overlayPositioning: "fixed", placement: "left-start", referenceElement: this._individualResultNode, styles: null !== this.domNode ? v(0.75 * this.domNode.clientWidth) : b2() }, n2("calcite-block", { heading: "", open: true, overlayPositioning: "fixed" }, n2("calcite-label", { scale: "s" }, e7.resultsStrings.displayAttribute, n2("calcite-select", { label: e7.resultsStrings.displayAttribute, scale: "s", onCalciteSelectChange: (e8) => {
      const t6 = e8.target;
      this._resultDisplayField = t6.selectedOption.value, this._showResultOptions = false;
    } }, s4)), n2("calcite-label", { scale: "s" }, e7.resultsStrings.sortBy, n2("calcite-select", { label: e7.resultsStrings.sortBy, scale: "s", onCalciteSelectChange: (e8) => {
      const s5 = e8.target;
      this._resultSortField = s5.selectedOption.value, t5.sort(this._compare(this._resultSortField, this._resultSortOrder)), this._traceResultsIndividual = t5, this._showResultOptions = false;
    } }, i6))));
  }
  _renderResultRowFunctions(e7) {
    return n2("calcite-block", { collapsible: false, heading: e7.networkAttributeName + " " + e7.functionType + " = " + e7.result, overlayPositioning: "fixed" });
  }
  _renderResultRowAssetGroup(e7) {
    const t5 = this._getAssetGroupName(e7[0]);
    return n2("calcite-list-item", { label: t5 + " (" + e7.length + ")", onCalciteListItemSelect: () => {
      this.switchToAssetType(this._groupResultsByAssetType(e7), t5 + " (" + e7.length + ")", true);
    } }, n2("calcite-icon", { icon: "chevron-right", scale: "s", slot: "content-end" }));
  }
  _renderResultRowAssetType(e7) {
    const t5 = this._getAssetTypeName(e7[0]);
    return n2("calcite-list-item", { label: t5 + " (" + e7.length + ")", onCalciteListItemSelect: () => {
      this.viewModel.queryFeaturesById(e7).then((s4) => {
        if (s4 == null ? void 0 : s4.length) {
          this._resultObjectIdField = s4[0].layer.objectIdField, "objectid" === this._resultDisplayField && (this._resultDisplayField = s4[0].layer.objectIdField), "objectid" === this._resultSortField && (this._resultSortField = s4[0].layer.objectIdField);
          const i6 = this._appendAttributes(e7, s4, "objectId");
          this.switchToIndividualRecords(i6, t5 + " (" + e7.length + ")", true);
        } else
          this.switchToIndividualRecords(e7, t5 + " (" + e7.length + ")", true);
      });
    } }, n2("calcite-icon", { icon: "chevron-right", scale: "s", slot: "content-end" }));
  }
  _renderResultRowIndividual(e7) {
    var _a, _b, _c;
    const { messages: t5 } = this, s4 = `display-${e7.objectId}-nso`, { nonSpatialObject: i6, zoomToFeature: r4 } = t5.globalStrings;
    let o2 = "", l4 = null;
    if (l4 = (_a = e7 == null ? void 0 : e7.details) == null ? void 0 : _a.fields.find(({ name: e8 }) => e8 === this._resultDisplayField), "date" === (l4 == null ? void 0 : l4.type)) {
      o2 = new Date(e7.details.attributes[this._resultDisplayField]).toDateString();
    } else if ("assetgroup" === this._resultDisplayField.toLowerCase())
      o2 = this._getAssetGroupName(e7);
    else if ("assettype" === this._resultDisplayField.toLowerCase())
      o2 = this._getAssetTypeName(e7);
    else if ((l4 == null ? void 0 : l4.domain) && R2(l4.domain)) {
      const t6 = l4.domain.codedValues.find(({ code: t7 }) => t7 === e7.details.attributes[this._resultDisplayField]);
      o2 = t6 == null ? void 0 : t6.name;
    } else
      o2 = ((_b = e7.details) == null ? void 0 : _b.attributes[this._resultDisplayField]) ?? e7.objectId;
    return o2 && "" !== o2 && null !== o2 ? "string" == typeof o2 && (o2.trim() || (o2 = t5.resultsStrings.noValue)) : o2 = t5.resultsStrings.noValue, null !== ((_c = e7 == null ? void 0 : e7.details) == null ? void 0 : _c.geometry) ? n2("calcite-list-item", { label: o2, onCalciteListItemSelect: () => {
      this.viewModel.zoomToAsset(e7.details.geometry);
    } }, n2("calcite-icon", { icon: "zoom-to-object", scale: "s", slot: "content-end", textLabel: r4 })) : n2("calcite-list-item", { label: o2 }, n2("calcite-icon", { icon: "table", id: s4, scale: "s", slot: "content-end", textLabel: i6 }), n2("calcite-tooltip", { label: i6, referenceElement: s4 }, n2("span", null, i6)));
  }
  _afterComponentCreate(e7) {
    "value" in e7 && null != e7.value && "setNumberValue" in e7 && e7.setNumberValue({ committing: false, value: e7.value, origin: "direct" });
  }
  _mixCustomStrings() {
    const { messages: e7 } = this;
    this.inputSettings.length > 0 && this.inputSettings.forEach((t5) => {
      "starting-point" === t5.type && (e7.inputsStrings.headerStartingPoint = t5.label, e7.inputsStrings.startingPointHint = t5.description), "barrier" === t5.type && (e7.inputsStrings.headerBarrier = t5.label, e7.inputsStrings.barrierPointHint = t5.description);
    });
  }
  _overrideFlagSymbol() {
    this.inputSettings.length > 0 && this.inputSettings.forEach((e7) => {
      "starting-point" === e7.type ? this._symbolStartFlag = e7.symbol : this._symbolBarrier = e7.symbol, this.viewModel.changeFlagSymbol(e7.type, e7.symbol);
    });
  }
  _utilityNetworkTraceInitialized() {
    return this.viewModel.loadUtilityNetwork().then((e7) => {
      var _a;
      if (e7)
        return this.viewModel.selectTracesOnLoad(), this._registerWatchers(), this.viewModel.flags.length > 0 && this._processFlagOnLoad(), (_a = this.view) == null ? void 0 : _a.when().then(() => {
          this._watchViewState();
        });
      this.disabled = false;
    }).catch((e7) => {
      const { messages: t5 } = this;
      this._loadUNError = false, "utility-network:no-user-type-extension" === e7.name || e7.details.raw.extendedCode === C2.noExtension ? this._errorMessage = t5.alertsStrings.noUserExtension : this._errorMessage = e7.message, this.disabled = false;
    });
  }
  _processFlagOnLoad() {
    var _a;
    return (_a = this.view) == null ? void 0 : _a.when().then(() => {
      this._watchHandler = p(() => {
        var _a2;
        return !((_a2 = this.view) == null ? void 0 : _a2.updating);
      }, async () => {
        this._warningNoFlag = false, this._warningNoBarrierAssetFound = false, this._warningNoStartAssetFound = false;
        const e7 = await this.viewModel.addFlagsOnLoad();
        this.viewModel.removeFlagsOnLoadWatcher(), e7.includes("barrier") && (this._warningNoBarrierAssetFound = true), e7.includes("starting-point") && (this._warningNoStartAssetFound = true), this.disabled = false, null !== this._watchHandler && this._watchHandler.remove();
      });
    });
  }
  _registerWatchers() {
    this.addHandles([d(() => this.selectedTraces, () => {
      this.viewModel.selectTracesOnLoad(), this.scheduleRender();
    }), d(() => this.defaultGraphicColor, () => {
      this.viewModel.traceResults.length > 0 && this.viewModel.traceResults.forEach((e7) => {
        this.viewModel.changeResultGraphicColor(this.viewModel.defaultGraphicColor, e7);
      }), this.scheduleRender();
    })]);
  }
  _groupResultsByAssetGroup(e7) {
    var _a;
    const t5 = [], s4 = (_a = e7.results) == null ? void 0 : _a.elements, i6 = this._groupBy(s4 ?? [], "networkSourceId");
    for (const r4 in i6)
      t5.push(this._groupBy(i6[r4], "assetGroupCode"));
    return t5;
  }
  _groupResultsByAssetType(e7) {
    return this._groupBy(e7, "assetTypeCode");
  }
  _appendAttributes(e7, t5, s4) {
    const i6 = [];
    return e7.forEach((e8) => {
      t5.forEach((t6) => {
        t6.featureSet.features.forEach((r4) => {
          e8[s4] === r4.attributes[this._resultObjectIdField] && (e8.details = r4, e8.details.fields = t6.featureSet.fields, i6.push(e8));
        });
      });
    }), i6;
  }
  _getAssetGroupName(e7) {
    let t5 = e7.assetGroupCode.toString();
    const s4 = e7.assetGroupCode, i6 = this.viewModel.getValidSources().find((t6) => t6.sourceId === e7.networkSourceId);
    if (i6) {
      const e8 = i6.assetGroups.find((e9) => e9.assetGroupCode === s4);
      e8 && (t5 = e8.assetGroupName);
    }
    return t5;
  }
  _getAssetTypeName(e7) {
    let t5 = e7.assetTypeCode.toString();
    const s4 = e7.assetGroupCode, i6 = this.viewModel.getValidSources().find((t6) => t6.sourceId === e7.networkSourceId);
    if (i6) {
      const r4 = i6.assetGroups.find((e8) => e8.assetGroupCode === s4);
      if (r4) {
        const s5 = r4.assetTypes.find((t6) => t6.assetTypeCode === e7.assetTypeCode);
        s5 && (t5 = s5.assetTypeName);
      }
    }
    return t5;
  }
  _compare(e7, t5) {
    return (s4, i6) => {
      var _a, _b;
      let r4 = 0, o2 = ((_a = s4.details) == null ? void 0 : _a.attributes[e7]) ?? s4.objectId, l4 = ((_b = i6.details) == null ? void 0 : _b.attributes[e7]) ?? i6.objectId;
      return isNaN(o2) && (o2 = o2.toLowerCase()), isNaN(l4) && (l4 = l4.toLowerCase()), "desc" === t5 ? o2 > l4 ? r4 = 1 : o2 < l4 && (r4 = -1) : o2 < l4 ? r4 = 1 : o2 > l4 && (r4 = -1), r4;
    };
  }
  _groupBy(e7, t5) {
    return e7.reduce((e8, s4) => ((e8[s4[t5]] = e8[s4[t5]] || []).push(s4), e8), {});
  }
  _getSymbolIcon(e7) {
    return "picture-marker" === e7.type ? n2("img", { height: e7.height, src: e7.url ?? void 0, width: e7.width }) : null;
  }
  _watchViewState() {
    this._watchHandler = p(() => {
      var _a;
      return !((_a = this.view) == null ? void 0 : _a.updating);
    }, () => {
      this.disabled = false, null !== this._watchHandler && this._watchHandler.remove();
    }, { initial: true });
  }
  _changeCursor(e7 = "default") {
    var _a, _b;
    const t5 = (_b = (_a = this.view) == null ? void 0 : _a.container) == null ? void 0 : _b.style;
    t5 && (t5.cursor = e7);
  }
};
e([y()], A.prototype, "_selectToolActive", void 0), e([y()], A.prototype, "_activeTrace", void 0), e([y()], A.prototype, "_activeSwatch", void 0), e([y()], A.prototype, "_traceHeaderForFlow", void 0), e([y()], A.prototype, "_assetGroupHeader", void 0), e([y()], A.prototype, "_assetTypeHeader", void 0), e([y()], A.prototype, "_traceResultsFunctions", void 0), e([y()], A.prototype, "_traceResultsAssetGroup", void 0), e([y()], A.prototype, "_traceResultsAssetType", void 0), e([y()], A.prototype, "_traceResultsIndividual", void 0), e([y()], A.prototype, "_showTraceResultFunctions", void 0), e([y()], A.prototype, "_showTraceResultAssetGroup", void 0), e([y()], A.prototype, "_showTraceResultAssetType", void 0), e([y()], A.prototype, "_showIndividualRecords", void 0), e([y()], A.prototype, "_activeTab", void 0), e([y()], A.prototype, "_alertRemoveModal", void 0), e([y()], A.prototype, "_warningNoFlag", void 0), e([y()], A.prototype, "_warningNoTraceSelected", void 0), e([y()], A.prototype, "_confirmReset", void 0), e([y()], A.prototype, "_swatchNode", void 0), e([y()], A.prototype, "_errorMessage", void 0), e([y()], A.prototype, "defaultGraphicColor", null), e([y()], A.prototype, "disabled", void 0), e([y()], A.prototype, "flags", null), e([y()], A.prototype, "gdbVersion", null), e([y()], A.prototype, "icon", null), e([y()], A.prototype, "inputSettings", void 0), e([y()], A.prototype, "label", null), e([y(), e2("esri/widgets/UtilityNetworkTrace/t9n/UtilityNetworkTrace")], A.prototype, "messages", void 0), e([y(), e2("esri/t9n/common")], A.prototype, "messagesCommon", void 0), e([y(), e2("esri/core/t9n/Units")], A.prototype, "messagesUnits", void 0), e([y()], A.prototype, "resultAreaProperties", null), e([y()], A.prototype, "selectedTraces", null), e([y()], A.prototype, "selectOnComplete", null), e([y()], A.prototype, "showGraphicsOnComplete", null), e([y()], A.prototype, "enableResultArea", null), e([y()], A.prototype, "showSelectionAttributes", null), e([y()], A.prototype, "utilityNetwork", null), e([y()], A.prototype, "view", null), e([e4(["add-flag", "add-flag-complete", "add-flag-error", "select-features", "clear-selection", "add-result-area", "remove-result-area", "create-result-area"]), y({ type: V2 })], A.prototype, "viewModel", void 0), A = e([a("esri.widgets.UtilityNetworkTrace")], A);
var F = A;
export {
  F as default
};
//# sourceMappingURL=UtilityNetworkTrace-R5QRC4UA.js.map
