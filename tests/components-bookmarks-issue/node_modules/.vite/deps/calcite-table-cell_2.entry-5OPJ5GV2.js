import {
  getIconScale
} from "./chunk-HPVF3F2S.js";
import {
  InteractiveContainer,
  connectInteractive,
  disconnectInteractive,
  updateHostInteraction
} from "./chunk-66JQNCB7.js";
import "./chunk-OUKAB5XV.js";
import {
  connectMessages,
  disconnectMessages,
  setUpMessages,
  updateMessages
} from "./chunk-IF3MPWQI.js";
import {
  connectLocalized,
  disconnectLocalized
} from "./chunk-AXCPOXSP.js";
import "./chunk-CTALGNVI.js";
import "./chunk-7QCRXUYY.js";
import {
  componentFocusable,
  setComponentLoaded,
  setUpLoadableComponent
} from "./chunk-HYC423SM.js";
import {
  getElementDir
} from "./chunk-BUS2XAMG.js";
import "./chunk-L553G5FP.js";
import {
  CSS_UTILITY
} from "./chunk-PJLSVRBA.js";
import {
  Fragment,
  Host,
  getElement,
  h,
  registerInstance
} from "./chunk-FNA2PYJM.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@esri/calcite-components/dist/esm/calcite-table-cell_2.entry.js
var CSS$1 = {
  numberCell: "number-cell",
  footerCell: "footer-cell",
  selectionCell: "selection-cell",
  selectedCell: "selected-cell",
  assistiveText: "assistive-text",
  lastCell: "last-cell",
  staticCell: "static-cell"
};
var tableCellCss = ":host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{--calcite-internal-table-cell-background:var(--calcite-table-cell-background, transparent);display:contents}:host([alignment=center]) td{text-align:center}:host([alignment=end]) td{text-align:end}.assistive-text{position:absolute;inline-size:1px;block-size:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}td{white-space:normal;text-align:start;vertical-align:middle;color:var(--calcite-color-text-1);background:var(--calcite-internal-table-cell-background);font-size:var(--calcite-internal-table-cell-font-size);border-inline-end:1px solid var(--calcite-color-border-3);padding:var(--calcite-internal-table-cell-padding)}td:not(.static-cell){outline-color:transparent}td:not(.static-cell):focus{outline:2px solid var(--calcite-ui-focus-color, var(--calcite-color-brand-hover, var(--calcite-color-brand)));outline-offset:calc(\n            -2px *\n            calc(\n              1 -\n              2 * clamp(\n                0,\n                var(--calcite-offset-invert-focus),\n                1\n              )\n            )\n          )}td.last-cell{border-inline-end:0}.number-cell{background-color:var(--calcite-color-foreground-2)}.footer-cell{background-color:var(--calcite-color-background);font-weight:var(--calcite-font-weight-medium);color:var(--calcite-color-text-1);border-block-start:1px solid var(--calcite-color-border-3)}.number-cell,.selection-cell{border-inline-end:1px solid var(--calcite-color-border-3);inline-size:2rem;min-inline-size:2rem}.selection-cell{color:var(--calcite-color-text-3);inset-inline-start:2rem}.selection-cell:not(.footer-cell){cursor:pointer}.selected-cell:not(.number-cell):not(.footer-cell){--calcite-internal-table-cell-background:var(--calcite-color-foreground-current)}.selection-cell.selected-cell{box-shadow:inset 0.25rem 0 0 0 var(--calcite-color-brand);color:var(--calcite-color-brand)}.selection-cell.selected-cell calcite-icon{color:var(--calcite-color-brand)}.calcite--rtl.selection-cell.selected-cell{box-shadow:inset -0.25rem 0 0 0 var(--calcite-color-brand)}.selection-cell{vertical-align:middle}.selection-cell ::slotted(calcite-icon){pointer-events:none;margin-block-start:0.25rem}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}.interaction-container{display:contents}";
var TableCell = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.updateScreenReaderContentsText = () => {
      this.contentsText = this.el.textContent;
    };
    this.onContainerBlur = () => {
      this.focused = false;
    };
    this.onContainerFocus = () => {
      this.focused = true;
    };
    this.alignment = "start";
    this.colSpan = void 0;
    this.rowSpan = void 0;
    this.disabled = void 0;
    this.interactionMode = "interactive";
    this.lastCell = void 0;
    this.numberCell = void 0;
    this.parentRowIsSelected = void 0;
    this.parentRowPositionLocalized = void 0;
    this.parentRowType = void 0;
    this.positionInRow = void 0;
    this.readCellContentsToAT = void 0;
    this.scale = "m";
    this.selectionCell = void 0;
    this.messages = void 0;
    this.messageOverrides = void 0;
    this.contentsText = "";
    this.defaultMessages = void 0;
    this.focused = false;
    this.selectionText = "";
    this.effectiveLocale = "";
  }
  onSelectedChange() {
    this.updateScreenReaderSelectionText();
  }
  onMessagesChange() {
  }
  effectiveLocaleChange() {
    updateMessages(this, this.effectiveLocale);
  }
  // --------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  // --------------------------------------------------------------------------
  async componentWillLoad() {
    setUpLoadableComponent(this);
    await setUpMessages(this);
    this.updateScreenReaderContentsText();
    this.updateScreenReaderSelectionText();
  }
  componentDidLoad() {
    setComponentLoaded(this);
  }
  connectedCallback() {
    connectLocalized(this);
    connectMessages(this);
    connectInteractive(this);
  }
  componentDidRender() {
    updateHostInteraction(this);
  }
  disconnectedCallback() {
    disconnectLocalized(this);
    disconnectMessages(this);
    disconnectInteractive(this);
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  // --------------------------------------------------------------------------
  /** Sets focus on the component. */
  async setFocus() {
    await componentFocusable(this);
    this.containerEl.focus();
  }
  // --------------------------------------------------------------------------
  //
  //  Private Methods
  //
  // --------------------------------------------------------------------------
  updateScreenReaderSelectionText() {
    var _a, _b, _c, _d, _e, _f;
    const selectedText = `${(_a = this.messages) == null ? void 0 : _a.row} ${this.parentRowPositionLocalized} ${(_b = this.messages) == null ? void 0 : _b.selected} ${(_c = this.messages) == null ? void 0 : _c.keyboardDeselect}`;
    const unselectedText = `${(_d = this.messages) == null ? void 0 : _d.row} ${this.parentRowPositionLocalized} ${(_e = this.messages) == null ? void 0 : _e.unselected} ${(_f = this.messages) == null ? void 0 : _f.keyboardSelect}`;
    this.selectionText = this.parentRowIsSelected ? selectedText : unselectedText;
  }
  //--------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const dir = getElementDir(this.el);
    const staticCell = this.disabled || this.interactionMode === "static" && (!this.selectionCell || this.selectionCell && this.parentRowType === "foot");
    return h(Host, null, h(InteractiveContainer, { disabled: this.disabled }, h("td", {
      "aria-disabled": this.disabled,
      class: {
        [CSS$1.footerCell]: this.parentRowType === "foot",
        [CSS$1.numberCell]: this.numberCell,
        [CSS$1.selectionCell]: this.selectionCell,
        [CSS$1.selectedCell]: this.parentRowIsSelected,
        [CSS$1.lastCell]: this.lastCell && (!this.rowSpan || this.colSpan && !!this.rowSpan),
        [CSS_UTILITY.rtl]: dir === "rtl",
        [CSS$1.staticCell]: staticCell
      },
      colSpan: this.colSpan,
      onBlur: this.onContainerBlur,
      onFocus: this.onContainerFocus,
      role: this.interactionMode === "interactive" ? "gridcell" : "cell",
      rowSpan: this.rowSpan,
      tabIndex: staticCell ? -1 : 0,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: (el) => this.containerEl = el
    }, h("span", { "aria-hidden": true, "aria-live": this.focused ? "polite" : "off", class: CSS$1.assistiveText }, (this.selectionCell || this.readCellContentsToAT) && h(Fragment, null, this.selectionCell && this.selectionText, this.readCellContentsToAT && !this.selectionCell && this.contentsText)), h("slot", { onSlotchange: this.updateScreenReaderContentsText }))));
  }
  static get assetsDirs() {
    return ["assets"];
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "parentRowIsSelected": ["onSelectedChange"],
      "messageOverrides": ["onMessagesChange"],
      "effectiveLocale": ["effectiveLocaleChange"]
    };
  }
};
TableCell.style = tableCellCss;
var CSS = {
  numberCell: "number-cell",
  selectionCell: "selection-cell",
  bodyRow: "body-row",
  footerRow: "footer-row",
  heading: "heading",
  description: "description",
  multipleSelectionCell: "cell--multiple-selection",
  assistiveText: "assistive-text",
  active: "active",
  selectedCell: "selected-cell",
  lastCell: "last-cell",
  staticCell: "static-cell"
};
var tableHeaderCss = ":host{--calcite-internal-table-header-background:var(--calcite-table-header-background, var(--calcite-color-foreground-2));--calcite-internal-table-header-border-color:var(--calcite-table-border-color, var(--calcite-color-border-3));display:contents}:host([alignment=center]) th{text-align:center}:host([alignment=end]) th{text-align:end}.assistive-text{position:absolute;inline-size:1px;block-size:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}th{white-space:normal;text-align:start;vertical-align:top;font-weight:var(--calcite-font-weight-medium);color:var(--calcite-color-text-1);font-size:var(--calcite-internal-table-cell-font-size);border-inline-end:1px solid var(--calcite-internal-table-header-border-color);border-block-end:1px solid var(--calcite-internal-table-header-border-color);padding-block:calc(var(--calcite-internal-table-cell-padding) * 1.5);padding-inline:var(--calcite-internal-table-cell-padding);background-color:var(--calcite-internal-table-header-background)}th:not(.static-cell){outline-color:transparent}th:not(.static-cell):not(.static-cell):focus-within{outline:2px solid var(--calcite-ui-focus-color, var(--calcite-color-brand-hover, var(--calcite-color-brand)));outline-offset:calc(\n            -2px *\n            calc(\n              1 -\n              2 * clamp(\n                0,\n                var(--calcite-offset-invert-focus),\n                1\n              )\n            )\n          )}th.last-cell{border-inline-end:0}th.body-row,th.footer-row{vertical-align:middle;border-block-end:0}th.footer-row{border-block-start:1px solid var(--calcite-internal-table-header-border-color)}.cell--multiple-selection{cursor:pointer;vertical-align:middle;color:var(--calcite-color-text-3)}.selected-cell:not(.number-cell):not(.footer-cell){--calcite-internal-table-header-background:var(--calcite-color-foreground-current)}.number-cell,.selection-cell{color:var(--calcite-color-text-2);inline-size:2rem;min-inline-size:2rem}.selection-cell calcite-icon.active{color:var(--calcite-color-brand)}.number-cell calcite-icon,.selection-cell calcite-icon{margin-inline-start:auto;margin-inline-end:auto;vertical-align:middle}.heading{color:var(--calcite-color-text-1)}.description{color:var(--calcite-color-text-3);font-size:var(--calcite-internal-table-cell-font-size-secondary)}";
var TableHeader = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.onContainerBlur = () => {
      this.focused = false;
    };
    this.onContainerFocus = () => {
      this.focused = true;
    };
    this.alignment = "start";
    this.colSpan = void 0;
    this.description = void 0;
    this.heading = void 0;
    this.rowSpan = void 0;
    this.interactionMode = "interactive";
    this.lastCell = void 0;
    this.numberCell = false;
    this.parentRowIsSelected = void 0;
    this.parentRowType = void 0;
    this.positionInRow = void 0;
    this.scale = void 0;
    this.selectedRowCount = void 0;
    this.selectedRowCountLocalized = void 0;
    this.selectionCell = false;
    this.selectionMode = void 0;
    this.bodyRowCount = void 0;
    this.messages = void 0;
    this.messageOverrides = void 0;
    this.defaultMessages = void 0;
    this.focused = false;
    this.screenReaderText = "";
    this.effectiveLocale = "";
  }
  onSelectedChange() {
    this.updateScreenReaderText();
  }
  onMessagesChange() {
  }
  // --------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  // --------------------------------------------------------------------------
  async componentWillLoad() {
    setUpLoadableComponent(this);
    await setUpMessages(this);
    this.updateScreenReaderText();
  }
  componentDidLoad() {
    setComponentLoaded(this);
  }
  connectedCallback() {
    connectLocalized(this);
    connectMessages(this);
  }
  disconnectedCallback() {
    disconnectLocalized(this);
    disconnectMessages(this);
  }
  effectiveLocaleChange() {
    updateMessages(this, this.effectiveLocale);
  }
  // --------------------------------------------------------------------------
  //
  //  Public Methods
  //
  // --------------------------------------------------------------------------
  /** Sets focus on the component. */
  async setFocus() {
    await componentFocusable(this);
    this.containerEl.focus();
  }
  // --------------------------------------------------------------------------
  //
  //  Private Methods
  //
  // --------------------------------------------------------------------------
  updateScreenReaderText() {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    let text = "";
    const sharedText = `${this.selectedRowCountLocalized} ${(_a = this.messages) == null ? void 0 : _a.selected}`;
    if (this.numberCell) {
      text = (_b = this.messages) == null ? void 0 : _b.rowNumber;
    } else if (this.selectionMode === "single") {
      text = `${(_c = this.messages) == null ? void 0 : _c.selectionColumn}. ${sharedText}`;
    } else if (this.bodyRowCount === this.selectedRowCount) {
      text = `${(_d = this.messages) == null ? void 0 : _d.selectionColumn}. ${(_e = this.messages) == null ? void 0 : _e.all} ${sharedText} ${(_f = this.messages) == null ? void 0 : _f.keyboardDeselectAll}`;
    } else {
      text = `${(_g = this.messages) == null ? void 0 : _g.selectionColumn}. ${sharedText} ${(_h = this.messages) == null ? void 0 : _h.keyboardSelectAll}`;
    }
    this.screenReaderText = text;
  }
  //--------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const scope = this.rowSpan ? "rowgroup" : this.colSpan ? "colgroup" : this.parentRowType === "body" ? "row" : "col";
    const allSelected = this.selectedRowCount === this.bodyRowCount;
    const selectionIcon = allSelected ? "check-square-f" : "check-square";
    const staticCell = this.interactionMode === "static" && !this.selectionCell;
    return h(Host, null, h("th", {
      "aria-colindex": this.parentRowType === "head" ? this.positionInRow : void 0,
      class: {
        [CSS.bodyRow]: this.parentRowType === "body",
        [CSS.footerRow]: this.parentRowType === "foot",
        [CSS.numberCell]: this.numberCell,
        [CSS.selectionCell]: this.selectionCell,
        [CSS.selectedCell]: this.parentRowIsSelected,
        [CSS.multipleSelectionCell]: this.selectionMode === "multiple",
        [CSS.staticCell]: staticCell,
        [CSS.lastCell]: this.lastCell && (!this.rowSpan || this.colSpan && !!this.rowSpan)
      },
      colSpan: this.colSpan,
      onBlur: this.onContainerBlur,
      onFocus: this.onContainerFocus,
      role: this.parentRowType === "head" ? "columnheader" : "rowheader",
      rowSpan: this.rowSpan,
      scope,
      tabIndex: this.selectionCell ? 0 : staticCell ? -1 : 0,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: (el) => this.containerEl = el
    }, this.heading && h("div", { class: CSS.heading }, this.heading), this.description && h("div", { class: CSS.description }, this.description), this.selectionCell && this.selectionMode === "multiple" && h("calcite-icon", { class: { [CSS.active]: allSelected }, icon: selectionIcon, scale: getIconScale(this.scale) }), h("span", { "aria-hidden": true, "aria-live": this.focused ? "polite" : "off", class: CSS.assistiveText }, (this.selectionCell || this.numberCell) && this.screenReaderText)));
  }
  static get assetsDirs() {
    return ["assets"];
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "selectedRowCount": ["onSelectedChange"],
      "selectedRowCountLocalized": ["onSelectedChange"],
      "messageOverrides": ["onMessagesChange"],
      "effectiveLocale": ["effectiveLocaleChange"]
    };
  }
};
TableHeader.style = tableHeaderCss;
export {
  TableCell as calcite_table_cell,
  TableHeader as calcite_table_header
};
/*! Bundled license information:

@esri/calcite-components/dist/esm/calcite-table-cell_2.entry.js:
  (*!
   * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
   * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
   * v2.6.0
   *)
*/
//# sourceMappingURL=calcite-table-cell_2.entry-5OPJ5GV2.js.map
