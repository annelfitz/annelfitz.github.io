import {
  s as s5
} from "./chunk-RXFNUTNO.js";
import {
  t as t4
} from "./chunk-PLT24NZO.js";
import {
  e as e8
} from "./chunk-4SMSAJZT.js";
import {
  V as V2,
  b as b4,
  g,
  h as h2,
  i as i4,
  u as u7,
  v as v3
} from "./chunk-UN4X7MBS.js";
import {
  h as h4
} from "./chunk-4UOHLZKX.js";
import {
  L,
  b as b2,
  b2 as b3,
  h as h3
} from "./chunk-S65YMVH4.js";
import {
  r as r3
} from "./chunk-2IUCAJMQ.js";
import {
  e as e7,
  n as n4
} from "./chunk-HLKM6YBE.js";
import {
  t as t2
} from "./chunk-CDYT7KXF.js";
import "./chunk-KZN32FM2.js";
import {
  C,
  l as l2
} from "./chunk-WFTDPAWN.js";
import {
  t as t3
} from "./chunk-BVUFFGBR.js";
import {
  e as e6
} from "./chunk-EAAEPSBY.js";
import {
  a as a4,
  i as i3,
  r as r2,
  u as u6
} from "./chunk-6H6AEMQY.js";
import {
  a as a3,
  c,
  f as f2,
  l2 as l,
  p as p2,
  s as s4,
  u2 as u5,
  w as w2
} from "./chunk-DTQH7ECI.js";
import {
  m as m2
} from "./chunk-BKF27M52.js";
import "./chunk-I7LDU4W6.js";
import "./chunk-SCRCLNT5.js";
import "./chunk-7VV4JAZJ.js";
import {
  I as I2,
  y2 as y3
} from "./chunk-54XXLVAD.js";
import {
  I
} from "./chunk-KO7QNSNZ.js";
import "./chunk-QREUCRQ4.js";
import "./chunk-YK3UMVCY.js";
import {
  s as s3
} from "./chunk-XKG6TWCH.js";
import "./chunk-RK2U53CD.js";
import "./chunk-YPY24RRU.js";
import "./chunk-O7RKI2QW.js";
import {
  t
} from "./chunk-TUVEYM7U.js";
import "./chunk-5S637BGW.js";
import "./chunk-BFOJPIF7.js";
import "./chunk-Y7RXGLGH.js";
import "./chunk-GKMVTGGM.js";
import "./chunk-XGTCDM4C.js";
import "./chunk-QNG4TY7L.js";
import "./chunk-RW5QMWE6.js";
import "./chunk-LGMX4E7L.js";
import "./chunk-OKRW5W44.js";
import "./chunk-Q6RZBEZ6.js";
import {
  a as a2,
  b
} from "./chunk-PC66NY33.js";
import "./chunk-YY2VB3AE.js";
import "./chunk-VEYMN5N3.js";
import "./chunk-H6NTWZSO.js";
import "./chunk-BMT3OVAP.js";
import "./chunk-IYKBAIQE.js";
import "./chunk-BDRVHR2K.js";
import "./chunk-DVIGFJWY.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-LMO6NZJA.js";
import "./chunk-A5QTLE4Y.js";
import "./chunk-SCHTG6ZQ.js";
import "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-HV2SFSJW.js";
import "./chunk-SBARCIDP.js";
import {
  i as i2
} from "./chunk-3KPZ3BQR.js";
import "./chunk-5JYVZQZR.js";
import "./chunk-RKVEKQ5O.js";
import "./chunk-P7J4JFEH.js";
import "./chunk-USOPZ2Q6.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-TCRKKQAL.js";
import "./chunk-77YSHEUQ.js";
import "./chunk-JW7VBMHD.js";
import "./chunk-GLLRUDMY.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import {
  e as e4
} from "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import {
  S as S2
} from "./chunk-G5EVVNIJ.js";
import {
  y as y2
} from "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import {
  u as u4
} from "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import {
  e as e5,
  u as u3
} from "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-AKLOTDO2.js";
import "./chunk-6AQIVLDN.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import {
  r
} from "./chunk-HLDUDRTD.js";
import "./chunk-SLQA5YBV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-CXNX736Z.js";
import {
  D,
  e2 as e3
} from "./chunk-RGCWZ2KZ.js";
import {
  n as n3
} from "./chunk-5VMSFOCB.js";
import {
  i
} from "./chunk-LGQXPGTM.js";
import {
  v as v2
} from "./chunk-2SDMYJDE.js";
import "./chunk-TPLOIZC7.js";
import {
  s as s2,
  u as u2
} from "./chunk-C62RZQQX.js";
import {
  h
} from "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-5LSHHVQ5.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import {
  s
} from "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import {
  f
} from "./chunk-7MT4ACA4.js";
import {
  n as n2
} from "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import {
  Et,
  U,
  m
} from "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  P,
  d,
  p,
  v,
  w
} from "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S,
  e as e2,
  o3 as o,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  k as k2
} from "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n,
  u
} from "./chunk-7RBRCL6S.js";
import {
  k
} from "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/widgets/Legend/support/clusterUtils.js
function l3(l6, i6, s7) {
  const a9 = l6.effectiveClusterRenderer;
  if (!a9 || !("visualVariables" in a9) || !a9.visualVariables)
    return null;
  const n6 = a9.visualVariables.find((e11) => "size" === e11.type);
  if (!("stops" in n6) || !n6.stops)
    return null;
  const t5 = n6.stops.find((e11) => e11.useMinValue), u12 = n6.stops.find((e11) => e11.useMaxValue);
  if (null == t5 || null == u12)
    return null;
  const r7 = s7.featuresTilingScheme.getClosestInfoForScale(s7.scale).level, f5 = n6.field, o3 = i6.getDisplayStatistics(r7, f5);
  return o3 ? new b({ field: n6.field, minSize: l6.clusterMinSize, minDataValue: o3.minValue, maxSize: l6.clusterMaxSize, maxDataValue: o3.maxValue }) : null;
}

// node_modules/@arcgis/core/widgets/Legend/support/ActiveLayerInfo.js
var oe = 16;
var ue = "https://utility.arcgis.com/sharing/tools/legend";
var ce = "esri.layers.ImageryLayer";
var de = "esri.layers.ImageryTileLayer";
var ye = "esri.layers.WCSLayer";
var he = /^\s*(return\s+)?\$view\.scale\s*(;)?\s*$/i;
var me = new n2({ esriGeometryPoint: "point", esriGeometryMultipoint: "multipoint", esriGeometryPolyline: "polyline", esriGeometryPolygon: "polygon", esriGeometryMultiPatch: "multipatch" });
var fe = new y2({ size: 6, outline: { color: [128, 128, 128, 0.5], width: 0.5 } });
var pe = new S2({ style: "solid" });
function ge(e11) {
  return "flow" === e11.type;
}
function be(e11) {
  return "vector-field" === e11.type;
}
function Se(e11) {
  return "raster-colormap" === e11.type;
}
function _e(e11) {
  return "raster-stretch" === e11.type;
}
function ve(e11) {
  return "raster-shaded-relief" === e11.type;
}
function we(e11) {
  return "esri.renderers.SimpleRenderer" === e11.declaredClass;
}
function Le(e11) {
  return "esri.renderers.ClassBreaksRenderer" === e11.declaredClass;
}
function Ee(e11) {
  return "esri.renderers.UniqueValueRenderer" === e11.declaredClass;
}
function Ce(e11) {
  return "esri.renderers.HeatmapRenderer" === e11.declaredClass;
}
function Ie(e11) {
  return Fe(e11) || Ve(e11) || xe(e11) || Re(e11);
}
function Re(e11) {
  return "esri.renderers.PointCloudRGBRenderer" === e11.declaredClass;
}
function Fe(e11) {
  return "esri.renderers.PointCloudClassBreaksRenderer" === e11.declaredClass;
}
function Ve(e11) {
  return "esri.renderers.PointCloudStretchRenderer" === e11.declaredClass;
}
function xe(e11) {
  return "esri.renderers.PointCloudUniqueValueRenderer" === e11.declaredClass;
}
function ze(e11) {
  return "esri.renderers.DotDensityRenderer" === e11.declaredClass;
}
function Te(e11) {
  return "esri.renderers.PieChartRenderer" === e11.declaredClass;
}
function De(e11, t5) {
  return we(e11) || Le(e11) || Ee(e11) || Ce(e11) || ze(e11) || Te(e11) ? "2d" === t5.type || t4(e11) : _e(e11) || Se(e11) || ve(e11) || Fe(e11) || Ve(e11) || xe(e11) || be(e11) || ge(e11);
}
function je(e11) {
  return "esri.layers.BuildingSceneLayer" === e11.declaredClass;
}
function Oe(e11) {
  return "esri.layers.SubtypeGroupLayer" === e11.declaredClass;
}
function Pe(e11) {
  return "esri.layers.VoxelLayer" === e11.declaredClass;
}
function Ae(e11) {
  return "esri.layers.WMSLayer" === e11.declaredClass;
}
function Me(e11) {
  return "esri.layers.WMTSLayer" === e11.declaredClass;
}
function ke(e11) {
  return "esri.layers.MapImageLayer" === e11.declaredClass;
}
function Ue(e11) {
  return "esri.layers.TileLayer" === e11.declaredClass;
}
function Be(e11) {
  return e11.declaredClass === ce;
}
function qe(e11) {
  return e11.declaredClass === de;
}
function Ne(e11) {
  return e11.declaredClass === ye;
}
function He(e11) {
  return "stretch-ramp" === e11.type;
}
function $e(e11) {
  const t5 = "authoringInfo" in e11 ? e11 == null ? void 0 : e11.authoringInfo : null;
  return "univariate-color-size" === (t5 == null ? void 0 : t5.type);
}
function We(e11) {
  const t5 = "authoringInfo" in e11 ? e11 == null ? void 0 : e11.authoringInfo : null;
  return "univariate-color-size" === (t5 == null ? void 0 : t5.type) && "above-and-below" === (t5 == null ? void 0 : t5.univariateTheme);
}
function Ge(e11) {
  return "sublayers" in e11;
}
async function Je(e11, t5) {
  const s7 = await h("esri/widgets/Legend/t9n/Legend");
  return "previewTemplateAriaLabel" !== e11 || t5 || (e11 = "previewAriaLabel"), s2(s7[e11], { label: t5 });
}
var Qe = new y2({ style: "path", path: "M10,5 L5,0 0,5 M5,0 L5,15", size: 15, outline: { width: 1, color: [85, 85, 85, 1] } });
var Ze = {};
var Ke = class extends S {
  constructor(e11) {
    super(e11), this._hasColorRamp = false, this._hasOpacityRamp = false, this._hasSizeRamp = false, this._webStyleSymbolCache = /* @__PURE__ */ new Map(), this._dotDensityUrlCache = /* @__PURE__ */ new Map(), this._scaleDrivenSizeVariable = null, this._hasClusterSizeVariable = false, this._layerDefinitionExpressionClause = null, this.children = new V(), this.layerView = null, this.layer = null, this.legendElements = [], this.parent = null, this.hideLayersNotInCurrentView = false, this.keepCacheOnDestroy = false, this.respectLayerDefinitionExpression = false, this.respectLayerVisibility = true, this.sublayerIds = [], this.title = null, this.view = null;
  }
  initialize() {
    const e11 = () => this.notifyChange("ready");
    this.addHandles([v(() => this.children, "change", (t5) => {
      const { added: s7, removed: i6 } = t5;
      s7.forEach((t6) => {
        const s8 = `activeLayerInfo-ready-watcher-${t6.layer.uid}`;
        this.addHandles(d(() => t6.ready, e11, P), s8);
      }), i6.forEach((e12) => this.removeHandles(e12.layer.uid)), e11();
    })]), this.keepCacheOnDestroy || (Ze = {});
  }
  destroy() {
    this._webStyleSymbolCache = null, this._dotDensityUrlCache = null, this._scaleDrivenSizeVariable = null, this.keepCacheOnDestroy || (Ze = null), this._layerDefinitionExpressionClause = null;
  }
  get effectList() {
    const e11 = this.layer;
    let t5 = null;
    return "effect" in e11 && e11.effect && (t5 = new h4(), t5.effect = e11.effect, t5.endTransitions(), t5.scale = this.scale), t5;
  }
  get opacity() {
    var _a;
    const e11 = this.layer.opacity, t5 = (_a = this.parent) == null ? void 0 : _a.opacity, s7 = this.layer.parent, i6 = s7 && "uid" in s7 ? this._getParentLayerOpacity(s7) : null;
    return null != t5 ? t5 * e11 : null != i6 ? i6 * e11 : e11;
  }
  get ready() {
    return null === this.layer || (this.children.length > 0 ? this._isGroupActive() : this.legendElements.length > 0);
  }
  get scale() {
    var _a;
    return ((_a = this.view) == null ? void 0 : _a.scale) ?? 0;
  }
  get isScaleDriven() {
    const e11 = this.layer;
    if (null === e11)
      return false;
    if ("effect" in e11 && e11.effect && Array.isArray(e11.effect))
      return true;
    if ("featureReduction" in e11 && e11.featureReduction) {
      if ("cluster" === e11.featureReduction.type)
        return true;
      if ("binning" === e11.featureReduction.type && "renderer" in e11.featureReduction && e11.featureReduction.renderer)
        return this._isRendererScaleDriven(e11.featureReduction.renderer);
    }
    return "renderer" in e11 && e11.renderer ? this._isRendererScaleDriven(e11.renderer) : this._isLayerScaleDriven(this.layer);
  }
  get version() {
    return this._get("version") + 1;
  }
  async buildLegendElementsForFeatureCollections(e11) {
    if (!(!this.hideLayersNotInCurrentView || await this._isLayerInCurrentView()))
      return this.legendElements = [], void this.notifyChange("ready");
    const t5 = Array.from(e11, (e12) => {
      var _a;
      if (r(e12))
        return this._getRendererLegendElements(e12.renderer, { title: e12.title });
      if ((_a = e12.featureSet) == null ? void 0 : _a.features.length) {
        const t6 = e12.layerDefinition, s7 = t6 == null ? void 0 : t6.drawingInfo, i6 = s7 && t(s7.renderer), l6 = me.read(t6.geometryType);
        return i6 ? this._getRendererLegendElements(i6, { title: e12.name, geometryType: l6 }) : (n.getLogger(this).warn("drawingInfo not available!"), null);
      }
      return null;
    });
    try {
      const e12 = [], s7 = await Promise.allSettled(t5);
      for (const t6 of s7)
        if ("fulfilled" === t6.status)
          for (const s8 of t6.value ?? [])
            e12.push(s8);
      this.legendElements = e12, this.notifyChange("ready");
    } catch (s7) {
      n.getLogger(this).warn("error while building legend for layer!", s7);
    }
  }
  async buildLegendElementsForRenderer(e11) {
    try {
      const t5 = !this.hideLayersNotInCurrentView || await this._isLayerInCurrentView();
      this.legendElements = t5 ? await this._getRendererLegendElements(e11) : [], this.notifyChange("ready");
    } catch (t5) {
      n.getLogger(this).warn("error while building legend for layer!", t5);
    }
  }
  async buildLegendElementsForFeatureReduction(e11) {
    try {
      const t5 = !this.hideLayersNotInCurrentView || await this._isLayerInCurrentView();
      this.legendElements = t5 ? await this._getLegendElementsForFeatureReduction(e11) : [], this.notifyChange("ready");
    } catch (t5) {
      n.getLogger(this).warn("error while building legend for layer!", t5);
    }
  }
  async buildLegendElementsForTools() {
    var _a, _b;
    const e11 = this.layer;
    if (Pe(e11))
      this._constructLegendElementsForVoxelLayer();
    else if (Me(e11))
      this._constructLegendElementsForWMTSlayer();
    else if (Ae(e11))
      await this._constructLegendElementsForWMSSublayers();
    else if (je(e11))
      await this._constructLegendElementsForBuildingSceneLayer();
    else if (ke(e11) || Ue(e11) || Oe(e11))
      await this._constructLegendElementsForSublayers();
    else {
      this.removeHandles("imageryLayers-watcher");
      let t5 = "default";
      if (Be(e11)) {
        const s7 = e11;
        t5 = (((_a = s7 == null ? void 0 : s7.rasterFunction) == null ? void 0 : _a.functionName) || "default") + "_" + (((_b = e11.bandIds) == null ? void 0 : _b.length) ? e11.bandIds.join("") : "###");
      }
      if (qe(e11))
        return;
      await this._getLegendLayers(`${e11.uid}-${t5}`).then(async (t6) => {
        this.legendElements = [], this.notifyChange("ready");
        const s7 = t6.map(async (t7) => {
          if (Be(e11)) {
            const t8 = d(() => ["renderingRule" in e11 && e11.rasterFunction, e11.bandIds], () => k2(async () => {
              Ze.default = null, e11.renderer ? await this.buildLegendElementsForRenderer(e11.renderer) : await this.buildLegendElementsForTools();
            })());
            this.addHandles(t8, "imageryLayers-watcher");
          }
          const s8 = this._generateSymbolTableElementForLegendLayer(t7);
          s8 && s8.infos.length && (Be(e11) && (s8.title = e11.title), this.legendElements.push(s8)), this.notifyChange("ready");
        });
        await Promise.allSettled(s7);
      }).catch((e12) => {
        n.getLogger(this).warn("Request to server for legend has failed!", e12);
      });
    }
  }
  async _isLayerInCurrentView() {
    const e11 = this.layer, t5 = this.layerView, s7 = t5 && "createQuery" in t5 && "queryFeatureCount" in t5;
    if (!s7 && !(t5 && "createQuery" in e11 && "queryFeatureCount" in e11))
      return true;
    await w(() => !t5.updating);
    const i6 = s7 ? "createQuery" in t5 && t5.createQuery() : "createQuery" in e11 && e11.createQuery();
    if (!i6)
      return true;
    i6.geometry = this.view.extent;
    return 0 !== (s7 ? "queryFeatureCount" in t5 && await t5.queryFeatureCount(i6) : "queryFeatureCount" in e11 && await e11.queryFeatureCount(i6));
  }
  _getParentLayerOpacity(e11) {
    let t5 = 1;
    const s7 = e11.parent;
    return s7 && "uid" in s7 && (t5 = this._getParentLayerOpacity(s7)), e11.opacity * t5;
  }
  _isGroupActive() {
    return this.children.some((e11) => e11.ready);
  }
  _isRendererScaleDriven(e11) {
    if ("dot-density" === e11.type)
      return true;
    const t5 = "valueExpression" in e11 ? e11.valueExpression : null;
    if (he.test(t5))
      return true;
    const s7 = "visualVariables" in e11 ? e11.visualVariables : null;
    return !!(s7 == null ? void 0 : s7.some((e12) => this._isScaleDrivenSizeVariable(e12))) || this._hasScaleDrivenSymbols(e11);
  }
  _hasScaleDrivenSymbols(e11) {
    var _a;
    switch (e11.type) {
      case "simple":
        return this._isScaleDrivenSymbol(e11.symbol);
      case "class-breaks":
        return this._isScaleDrivenSymbol(e11.defaultSymbol) || e11.classBreakInfos.some((e12) => this._isScaleDrivenSymbol(e12.symbol));
      case "unique-value":
        return this._isScaleDrivenSymbol(e11.defaultSymbol) || !!((_a = e11.uniqueValueInfos) == null ? void 0 : _a.some((e12) => this._isScaleDrivenSymbol(e12.symbol)));
    }
    return false;
  }
  _isScaleDrivenSymbol(e11) {
    if ("cim" === (e11 == null ? void 0 : e11.type)) {
      const { primitiveOverrides: t5, minScale: s7, maxScale: i6 } = e11.data, l6 = (t5 == null ? void 0 : t5.some((e12) => {
        var _a;
        return /\$view\.scale/.test(((_a = e12.valueExpressionInfo) == null ? void 0 : _a.expression) || "");
      })) ?? false;
      return null != s7 || null != i6 || l6;
    }
    return false;
  }
  _isScaleDrivenSizeVariable(e11) {
    if (e11 && "size" !== e11.type)
      return false;
    const t5 = e11, s7 = t5.minSize, i6 = t5.maxSize;
    return !("object" != typeof s7 || !s7 || !this._isScaleDrivenSizeVariable(s7)) || (!("object" != typeof i6 || !i6 || !this._isScaleDrivenSizeVariable(i6)) || he.test(t5.valueExpression));
  }
  _isLayerScaleDriven(e11) {
    if ("minScale" in e11 && e11.minScale > 0 || "maxScale" in e11 && e11.maxScale > 0)
      return true;
    if ("sublayers" in e11 && e11.sublayers)
      return e11.sublayers.some((e12) => this._isLayerScaleDriven(e12));
    const t5 = e11.parent;
    if (false === e11.loaded && t5 && ke(t5) && "source" in e11 && e11.source && "map-layer" === e11.source.type) {
      for (const s7 of t5.sourceJSON.layers ?? [])
        if (s7.id === e11.source.mapLayerId && (s7.minScale > 0 || s7.maxScale > 0))
          return true;
    }
    return false;
  }
  async _constructLegendElementsForVoxelLayer() {
    var _a;
    this.legendElements = [], this.removeHandles("voxel-style-watcher"), this.removeHandles("voxel-current-variable");
    const e11 = this.layer;
    this.addHandles(d(() => e11.currentVariableId, () => this._constructLegendElementsForVoxelLayer()), "voxel-current-variable"), this.addHandles(d(() => e11.getVariableStyles(), () => this._constructLegendElementsForVoxelLayer()), "voxel-style-watcher");
    const t5 = e11.getVariableStyle(null), s7 = [];
    if (t5) {
      if ((_a = t5.uniqueValues) == null ? void 0 : _a.length) {
        const e12 = [];
        t5.uniqueValues.forEach((t6) => {
          t6.enabled && e12.push({ label: t6.label || `${t6.value}`, value: t6.value, symbol: new S2({ color: t6.color, outline: null }) });
        }), e12.length && s7.push({ type: "symbol-table", title: t5.label, infos: e12 });
      } else if (t5.transferFunction) {
        const { colorStops: e12, stretchRange: i7 } = t5.transferFunction, l7 = e12.toArray().reverse(), r7 = i7.map((e13, t6) => `${0 === t6 ? a3 : l} ${s5(e13)}`).reverse(), n6 = l7.map((e13) => ({ color: e13.color, value: null, label: null }));
        n6[0].label = r7[0], n6[n6.length - 1].label = r7[1], s7.push({ type: "color-ramp", title: t5.label, infos: n6, preview: v3(l7.map((e13) => e13.color), { ariaLabel: await Je("previewColorRampAriaLabel") }) });
      }
    }
    const i6 = e11.opacity, l6 = s7.reduce((e12, t6) => [...e12, ...this._getAllInfos(t6)], []).filter((e12) => !!(e12 == null ? void 0 : e12.symbol)).map((e12) => this._getSymbolPreview(e12, i6));
    await Promise.allSettled(l6), this.legendElements = s7, this.notifyChange("ready");
  }
  _constructLegendElementsForWMTSlayer() {
    var _a, _b;
    this.legendElements = [], this.removeHandles("wmts-activeLayer-watcher");
    const e11 = this.layer.activeLayer;
    this.addHandles(d(() => {
      const { layer: e12 } = this;
      return e12 && "activeLayer" in e12 && e12.activeLayer;
    }, () => this._constructLegendElementsForWMTSlayer()), "wmts-activeLayer-watcher");
    const t5 = e11.styleId ? (_b = (_a = e11.styles) == null ? void 0 : _a.find(({ id: t6 }) => t6 === e11.styleId)) == null ? void 0 : _b.legendUrl : void 0;
    t5 && (this.legendElements = [{ type: "symbol-table", title: e11.title, infos: [{ src: t5, opacity: this.opacity }] }]), this.notifyChange("ready");
  }
  async _constructLegendElementsForWMSSublayers() {
    this.legendElements = [], this.removeHandles("wms-sublayers-watcher");
    const e11 = this.layer;
    let t5 = null;
    (e11.customParameters || e11.customLayerParameters) && (t5 = { ...e11.customParameters, ...e11.customLayerParameters }), this.addHandles(d(() => {
      const { layer: e12 } = this;
      return e12 && "sublayers" in e12 && e12.sublayers;
    }, () => this._constructLegendElementsForWMSSublayers()), "wms-sublayers-watcher"), this.legendElements = await this._generateLegendElementsForWMSSublayers(e11.sublayers, t5), this.notifyChange("ready");
  }
  async _generateLegendElementsForWMSSublayers(e11, t5) {
    var _a, _b;
    const s7 = this.layer, i6 = [];
    this.addHandles(e11.on("change", () => this._constructLegendElementsForWMSSublayers()), "wms-sublayers-watcher");
    const l6 = ((_b = (_a = this.sublayerIds) == null ? void 0 : _a.map((e12) => s7.findSublayerById(e12))) == null ? void 0 : _b.filter(k)) ?? [], n6 = l6.length ? l6 : e11.toArray();
    for (const r7 of n6) {
      const e12 = d(() => [r7.title, r7.visible, r7.legendEnabled], () => this._constructLegendElementsForWMSSublayers());
      if (this.addHandles(e12, "wms-sublayers-watcher"), !this.respectLayerVisibility || r7.visible && r7.legendEnabled) {
        const e13 = await this._generateSymbolTableElementForWMSSublayer(r7, t5);
        (e13 == null ? void 0 : e13.infos.length) && i6.unshift(e13);
      }
    }
    return i6;
  }
  async _generateSymbolTableElementForWMSSublayer(e11, t5) {
    if (!e11.legendUrl && e11.sublayers) {
      const s7 = (await this._generateLegendElementsForWMSSublayers(e11.sublayers, t5)).filter((e12) => e12);
      return { type: "symbol-table", title: e11.title, infos: s7 };
    }
    return this._generateSymbolTableElementForLegendUrl(e11, t5);
  }
  async _generateSymbolTableElementForLegendUrl(e11, t5) {
    var _a;
    let s7 = e11.legendUrl;
    if (!s7)
      return;
    const l6 = { type: "symbol-table", title: e11.title || e11.name || String(e11.id ?? ""), infos: [] };
    t5 && (s7 = Et(s7, t5));
    let r7 = null;
    const n6 = (_a = e11.layer) == null ? void 0 : _a.opacity;
    try {
      r7 = (await U(s7, { responseType: "image" })).data, r7 && (r7.style.opacity = n6);
    } catch {
    }
    return l6.infos.push({ src: s7, preview: r7, opacity: n6 }), l6;
  }
  _getLegendLayers(e11, t5) {
    const s7 = Ze && Ze[e11];
    return s7 ? Promise.resolve(s7) : this._legendRequest(t5).then((t6) => {
      const s8 = t6.layers;
      return Ze[e11] = s8, s8;
    });
  }
  _legendRequest(e11) {
    var _a;
    const t5 = this.layer;
    let s7 = { f: "json", dynamicLayers: e11 };
    if (Be(t5)) {
      const e12 = t5.exportImageServiceParameters.rasterFunction;
      if (e12 && (s7.renderingRule = JSON.stringify(((_a = e12.functionDefinition) == null ? void 0 : _a.toJSON()) || e12.toJSON())), t5.bandIds && (s7.bandIds = t5.bandIds.join()), t5.raster || t5.viewId || t5.customParameters) {
        const { raster: e13, viewId: i6, customParameters: l7 } = t5;
        s7 = { raster: e13, viewId: i6, ...s7, ...l7 };
      }
    }
    let l6 = t5.url.replace(/(\/)+$/, "");
    if ("version" in t5 && +t5.version >= 10.01) {
      const e12 = l6.indexOf("?");
      e12 > -1 ? l6 = l6.substring(0, e12) + "/legend" + l6.substring(e12) : l6 += "/legend";
    } else {
      const e12 = l6.toLowerCase().indexOf("/rest/"), t6 = l6.substring(0, e12) + l6.substring(e12 + 5, l6.length);
      l6 = ue + "?soapUrl=" + encodeURI(t6) + "&returnbytes=true";
    }
    return U(l6, { query: s7 }).then((e12) => e12.data);
  }
  async _constructLegendElementsForBuildingSceneLayer() {
    this.legendElements = [], this.removeHandles("sublayers-watcher");
    const e11 = this.layer;
    this.addHandles(d(() => e11.sublayers, () => this._constructLegendElementsForBuildingSceneLayer()), "sublayers-watcher");
    try {
      this.legendElements = await this._generateLegendElementsForBuildingSublayers(e11.sublayers, this.opacity), this.notifyChange("ready");
    } catch (t5) {
      n.getLogger(this).warn("Request to server for legend has failed!", t5);
    }
  }
  async _generateLegendElementsForBuildingSublayers(e11, t5) {
    let s7 = [];
    this.addHandles(e11.on("change", () => this._constructLegendElementsForBuildingSceneLayer()), "sublayers-watcher");
    const i6 = e11.toArray();
    for (const l6 of i6) {
      const e12 = d(() => ["renderer" in l6 && l6.renderer, l6.opacity, l6.title, l6.visible], () => this._constructLegendElementsForBuildingSceneLayer());
      if (this.addHandles(e12, "sublayers-watcher"), !this.respectLayerVisibility || l6.visible) {
        const e13 = null != (l6 == null ? void 0 : l6.opacity) ? l6.opacity : null, i7 = null != e13 ? e13 * t5 : t5;
        if ("building-group" === l6.type) {
          const e14 = { type: "symbol-table", title: l6.title, infos: [] }, t6 = await this._generateLegendElementsForBuildingSublayers(l6.sublayers, i7);
          e14.infos.push(...t6), s7 = [e14, ...s7];
        } else if (l6.renderer) {
          s7 = [...await this._getRendererLegendElements(l6.renderer, { title: l6.title, opacity: i7, sublayer: l6 }), ...s7];
        }
      }
    }
    return s7.filter((e12) => !!e12 && (!("infos" in e12) || !e12.infos || e12.infos.length > 0));
  }
  async _constructLegendElementsForSublayers() {
    this.legendElements = [], this.removeHandles("sublayers-watcher");
    const e11 = this.layer;
    if (ke(e11) || Ue(e11) || Oe(e11)) {
      this.addHandles(d(() => e11.sublayers, () => this._constructLegendElementsForSublayers), "sublayers-watcher");
      try {
        this.legendElements = await this._generateLegendElementsForSublayers(e11.sublayers, this.opacity), this.notifyChange("ready");
      } catch (t5) {
        n.getLogger(this).warn("Request to server for legend has failed!", t5);
      }
    }
  }
  async _generateLegendElementsForSublayers(e11, t5, s7) {
    const i6 = this.layer;
    let l6 = [];
    this.addHandles(e11.on("change", () => this._constructLegendElementsForSublayers()), "sublayers-watcher");
    let n6 = e11.toArray();
    !s7 && this.sublayerIds && this.sublayerIds.length && (n6 = Oe(i6) ? this.sublayerIds.map((e12) => i6.findSublayerForSubtypeCode(e12)).filter(k) : this.sublayerIds.map((e12) => i6.findSublayerById(e12)).filter(k));
    for (const r7 of n6) {
      const e12 = d(() => [r7.renderer, r7.opacity, r7.title, r7.visible, r7.legendEnabled], () => this._constructLegendElementsForSublayers());
      if (this.addHandles(e12, "sublayers-watcher"), !this.respectLayerVisibility || r7.visible && r7.legendEnabled && this._isSublayerInScale(r7)) {
        const e13 = null != (r7 == null ? void 0 : r7.opacity) ? r7.opacity : null, i7 = null != e13 ? e13 * t5 : t5, n7 = !Ge(r7) || r7.originIdOf("renderer") > e2.SERVICE && !r7.sublayers;
        if (r7.renderer && n7) {
          await r7.load();
          l6 = [...await this._getRendererLegendElements(r7.renderer, { title: r7.title, opacity: i7, sublayer: r7 }), ...l6];
        } else if (Ge(r7)) {
          const e14 = await this._generateSymbolTableElementForSublayer(r7, i7, s7);
          e14 && l6.unshift(e14);
        }
      }
    }
    return l6.filter((e12) => !!e12 && (!("infos" in e12) || !e12.infos || e12.infos.length > 0));
  }
  async _generateSymbolTableElementForSublayer(e11, t5, s7) {
    if (!s7) {
      s7 = /* @__PURE__ */ new Map();
      const t6 = this.layer, i7 = e11.source;
      let l6 = null;
      if (!(!i7 || "map-layer" === i7.type && i7.mapLayerId === e11.id && (!i7.gdbVersion || i7.gdbVersion === ("gdbVersion" in t6 && t6.gdbVersion))) || e11.originIdOf("renderer") > e2.SERVICE || e11.originIdOf("labelingInfo") > e2.SERVICE || e11.originIdOf("labelsVisible") > e2.SERVICE) {
        const e12 = new m2({ layer: this.layer });
        l6 = e12.hasDynamicLayers ? e12.dynamicLayers : null, e12.destroy();
      }
      const r7 = l6 || `${t6.uid}-default`;
      (await this._getLegendLayers(r7, l6)).forEach((e12) => s7.set(e12.layerId, e12));
    }
    const i6 = s7.get(e11.id);
    if ((!i6 || (i6 == null ? void 0 : i6.subLayerIds) && i6.defaultVisibility) && e11.sublayers) {
      const i7 = await this._generateLegendElementsForSublayers(e11.sublayers, t5, s7);
      return { type: "symbol-table", title: e11.title, infos: i7 };
    }
    return this._generateSymbolTableElementForLegendLayer(i6, e11, t5);
  }
  _generateSymbolTableElementForLegendLayer(e11, t5, s7) {
    if (!(e11 == null ? void 0 : e11.legend) || this.respectLayerVisibility && !this._isLegendLayerInScale(e11, t5))
      return null;
    const i6 = t5 == null ? void 0 : t5.renderer;
    let l6 = (t5 == null ? void 0 : t5.title) || e11.layerName;
    if (i6 && (!t5 || (t5 == null ? void 0 : t5.originIdOf("renderer")) > e2.SERVICE)) {
      const e12 = (t5 == null ? void 0 : t5.title) || this._getRendererTitle(i6, t5);
      e12 && (l6 && "string" != typeof e12 && "title" in e12 && (e12.title = l6), l6 = e12);
    }
    const r7 = { type: "symbol-table", title: l6, legendType: e11.legendType || null, infos: [] }, n6 = t5 ? this._sanitizeLegendForSublayer(e11.legend.slice(), t5) : e11.legend;
    return e11.legendGroups && e11.legendGroups.length > 0 ? e11.legendGroups.forEach((t6) => {
      var _a;
      const i7 = { type: "symbol-table", title: t6.heading, legendType: e11.legendType || null, infos: this._generateSymbolTableElementInfosForLegendLayer(n6.filter((e12) => e12.groupId === t6.id), e11.layerId, s7) };
      ((_a = i7.infos) == null ? void 0 : _a.length) > 0 && r7.infos.push(i7);
    }) : r7.infos = this._generateSymbolTableElementInfosForLegendLayer(n6, e11.layerId, s7), r7.infos.length > 0 ? r7 : null;
  }
  _generateSymbolTableElementInfosForLegendLayer(e11, t5, i6) {
    return e11.map((e12) => {
      let l6 = e12.url;
      if (e12.imageData && e12.imageData.length > 0)
        l6 = `data:image/png;base64,${e12.imageData}`;
      else {
        if (0 === l6.indexOf("http"))
          return null;
        l6 = m(`${this.layer.url}/${t5}/images/${l6}`);
      }
      return { label: e12.label, src: l6, opacity: i6 ?? this.opacity, width: e12.width, height: e12.height };
    }).filter(k);
  }
  _isSublayerInScale(e11) {
    const t5 = e11.minScale || 0, s7 = e11.maxScale || 0;
    return !(t5 > 0 && t5 < this.scale || s7 > this.scale);
  }
  _isLegendLayerInScale(e11, t5) {
    const s7 = t5 || this.layer;
    let i6 = null, l6 = null, r7 = true;
    return !s7.minScale && 0 !== s7.minScale || !s7.maxScale && 0 !== s7.maxScale ? (0 === e11.minScale && s7.tileInfo && (i6 = s7.tileInfo.lods[0].scale), 0 === e11.maxScale && s7.tileInfo && (l6 = s7.tileInfo.lods[s7.tileInfo.lods.length - 1].scale)) : (i6 = Math.min(s7.minScale, e11.minScale) || s7.minScale || e11.minScale, l6 = Math.max(s7.maxScale, e11.maxScale)), (i6 > 0 && i6 < this.scale || l6 > this.scale) && (r7 = false), r7;
  }
  _sanitizeLegendForSublayer(e11, t5) {
    if ("version" in this.layer && +this.layer.version < 10.1 || 0 === e11.length)
      return e11;
    const s7 = t5.renderer, i6 = e11.some((e12) => e12.values);
    let l6 = 0, r7 = null;
    return i6 && e11.some((e12, t6) => (e12.values || (l6 = t6, r7 = e12, r7.label || (r7.label = "others")), null != r7)), s7 ? "unique-value" === s7.type ? r7 && (e11.splice(l6, 1), e11.push(r7)) : "class-breaks" === s7.type && (r7 && e11.splice(l6, 1), e11.reverse(), r7 && e11.push(r7)) : r7 && (e11.splice(l6, 1), e11.push(r7)), e11;
  }
  async _getRendererLegendElements(e11, t5 = {}) {
    if (!De(e11, this.view))
      return n.getLogger(this).warn(`Renderer of type '${e11.type}' not supported!`), [];
    if (Ie(e11))
      return this._constructPointCloudRendererLegendElements(e11, t5);
    if (ze(e11))
      return this._constructDotDensityRendererLegendElements(e11);
    const s7 = await this._loadRenderer(e11);
    return Te(s7) ? this._constructPieChartRendererLegendElements(s7) : this._constructRendererLegendElements(s7, t5);
  }
  async _getLegendElementsForFeatureReduction(e11) {
    let t5 = null;
    return "binning" === e11.type ? t5 = e11.renderer : "cluster" === e11.type && (t5 = this._getClusterRenderer(e11)), t5 ? this._getRendererLegendElements(t5) : [];
  }
  _getPointCloudRendererTitle(e11) {
    var _a;
    return (((_a = e11.legendOptions) == null ? void 0 : _a.title) || e11.field) ?? "";
  }
  async _constructPointCloudRendererLegendElements(e11, t5 = {}) {
    var _a;
    const s7 = t5.title, i6 = [];
    let l6 = null, r7 = null;
    if (Fe(e11))
      l6 = { type: "symbol-table", title: s7 || this._getPointCloudRendererTitle(e11), infos: [] }, e11.colorClassBreakInfos.forEach((e12) => {
        l6.infos.unshift({ label: e12.label || e12.minValue + " - " + e12.maxValue, value: [e12.minValue, e12.maxValue], symbol: this._getAppliedCloneSymbol(fe, e12.color) });
      });
    else if (Ve(e11)) {
      const t6 = e11.stops;
      let i7 = null;
      if ((t6 == null ? void 0 : t6.length) && (1 === t6.length && (i7 = t6[0].color), !i7)) {
        const e12 = t6[0].value, s8 = t6[t6.length - 1].value;
        if (null != e12 && null != s8) {
          i7 = u6(e12 + (s8 - e12) / 2, t6);
        }
      }
      l6 = { type: "symbol-table", title: null, infos: [{ label: null, value: null, symbol: this._getAppliedCloneSymbol(fe, i7 || fe.color) }] };
      const n7 = a4(e11.stops ?? []) ?? [];
      r7 = { type: "color-ramp", title: s7 || this._getPointCloudRendererTitle(e11), infos: n7, preview: v3(n7.map((e12) => e12.color), { ariaLabel: await Je("previewColorRampAriaLabel") }) };
    } else
      xe(e11) && (l6 = { type: "symbol-table", title: s7 || this._getPointCloudRendererTitle(e11), infos: [] }, (_a = e11.colorUniqueValueInfos) == null ? void 0 : _a.forEach((e12) => {
        l6.infos.push({ label: e12.label || e12.values.join(", "), value: e12.values.join(", "), symbol: this._getAppliedCloneSymbol(fe, e12.color) });
      }));
    l6 && l6.infos.length && i6.push(l6), r7 && r7.infos.length && i6.push(r7);
    const n6 = i6.reduce((e12, t6) => [...e12, ...t6.infos ?? []], []).filter((e12) => !!e12.symbol).map((t6) => this._getSymbolPreview(t6, this.opacity, { symbolConfig: { applyColorModulation: !!e11.colorModulation } }));
    return await Promise.allSettled(n6), i6;
  }
  async _getElementInfoForDotDensity(e11, t5) {
    const { color: s7, label: i6, valueExpressionTitle: l6 } = t5, { backgroundColor: r7, outline: n6, dotSize: a9 } = e11, o3 = this.effectList, u12 = o3 == null ? void 0 : o3.effects.map((e12) => e12.toJSON()), c4 = i2(u12), d3 = await Je("previewTemplateAriaLabel", i6 || l6), y5 = a9 + "-" + s7 + "-" + r7 + "-" + (n6 && JSON.stringify(n6.toJSON())) + "-" + c4, h6 = this._dotDensityUrlCache, m4 = h6.has(y5) ? h6.get(y5) : b4(e11, s7, { ariaLabel: d3 });
    h6.set(y5, m4);
    const f5 = { shape: { type: "image", x: 0, y: 0, width: m4.width, height: m4.height, src: m4.src }, fill: null, stroke: null, offset: [0, 0] }, p5 = l2([[f5]], [m4.width, m4.height], { effectView: this.effectList, ariaLabel: d3 });
    return { opacity: 1, src: m4.src, preview: p5, width: m4.width, height: m4.height };
  }
  async _constructDotDensityRendererLegendElements(e11) {
    var _a;
    const t5 = e11.calculateDotValue(this.view.scale), s7 = (_a = e11.legendOptions) == null ? void 0 : _a.unit, i6 = { type: "symbol-table", title: { value: t5 && Math.round(t5), unit: s7 || "" }, infos: [] };
    for (const l6 of e11.attributes) {
      const t6 = await this._getElementInfoForDotDensity(e11, l6);
      t6.label = l6.label || l6.valueExpressionTitle || l6.field, i6.infos.push(t6);
    }
    return [i6];
  }
  async _constructPieChartRendererLegendElements(e11) {
    var _a, _b, _c, _d;
    const t5 = this.layer.opacity, s7 = [];
    let i6 = null;
    const l6 = e11.outline;
    e11.attributes.forEach((e12) => {
      const t6 = new y2({ color: e12.color, outline: l6 }), i7 = e12.label || e12.valueExpressionTitle || e12.field;
      s7.push({ label: i7, symbol: t6 });
    });
    const r7 = s7.length ? [...s7] : [];
    if (((_a = e11.othersCategory) == null ? void 0 : _a.color) && 0 !== ((_b = e11.othersCategory) == null ? void 0 : _b.threshold)) {
      const t6 = new y2({ color: e11.othersCategory.color, outline: l6 });
      i6 = e11.othersCategory.label || "Other", s7.push({ label: i6, symbol: t6 });
    }
    if ((_c = e11.defaultColor) == null ? void 0 : _c.a) {
      const t6 = new y2({ color: e11.defaultColor, outline: l6 });
      s7.push({ label: e11.defaultLabel, symbol: t6 });
    }
    const n6 = await this._getVisualVariableLegendElements(e11, this.layer) || [];
    if (s7.length) {
      n6.unshift({ type: "symbol-table", title: null, infos: s7 });
      const t6 = r7.filter((e12) => e12.label !== i6).map((e12) => e12.symbol.color).filter(Boolean), a10 = g(t6, { holePercentage: e11.holePercentage, backgroundColor: (_d = e11.backgroundFillSymbol) == null ? void 0 : _d.color, effectList: this.effectList, outline: l6, ariaLabel: await Je("previewPieChartAriaLabel") });
      n6.unshift({ type: "pie-chart-ramp", title: this._getRendererTitle(e11, this.layer), infos: s7, preview: a10 });
    }
    const a9 = n6.reduce((e12, t6) => [...e12, ...this._getAllInfos(t6)], []).filter((e12) => !!(e12 == null ? void 0 : e12.symbol) && !(e12 == null ? void 0 : e12.preview)).map((e12) => this._getSymbolPreview(e12, t5, { effectList: this.effectList }));
    return await Promise.allSettled(a9), n6;
  }
  async _constructRendererLegendElements(e11, t5 = {}) {
    var _a, _b, _c, _d, _e2;
    const { title: s7, sublayer: i6 } = t5, l6 = i6 || this.layer, r7 = w2(e11);
    "definitionExpression" in l6 && l6.definitionExpression && !this._layerDefinitionExpressionClause && this.respectLayerDefinitionExpression && (this._layerDefinitionExpressionClause = await e4(l6.definitionExpression, l6.fieldsIndex)), this._hasColorRamp = false, this._hasOpacityRamp = false, this._hasSizeRamp = false, this._scaleDrivenSizeVariable = null;
    const n6 = await this._getVisualVariableLegendElements(e11, l6) || [], a9 = { type: "symbol-table", title: s7 || this._getRendererTitle(e11, l6), infos: [] };
    let o3 = null, u12 = false;
    const c4 = /* @__PURE__ */ new Set();
    if (ge(e11) && !this._hasSizeRamp) {
      const t6 = await p2(e11);
      a9.infos.push({ label: null, symbol: t6 });
    } else if ($e(e11)) {
      let t6 = s7;
      const i7 = We(e11) ? "univariate-above-and-below-ramp" : "univariate-color-size-ramp", l7 = n6.findIndex((e12) => "color-ramp" === e12.type), r8 = -1 !== l7 ? n6.splice(l7, 1)[0] : null, a10 = n6.findIndex((e12) => "size-ramp" === e12.type), o4 = -1 !== a10 ? n6.splice(a10, 1)[0] : null, u13 = [];
      r8 && (t6 = r8.title, u13.push(r8)), o4 && (t6 = o4.title, u13.push(o4)), u13.length > 0 && n6.push({ type: i7, title: t6, infos: u13 });
    } else if (Ce(e11)) {
      const t6 = r3(e11);
      n6.push({ type: "heatmap-ramp", title: s7 || this._getRendererTitle(e11, l6), infos: t6, preview: v3(t6.map((e12) => e12.color), { effectList: this.effectList, ariaLabel: await Je("previewColorRampAriaLabel") }) });
    } else if (Ee(e11)) {
      const t6 = e11 && e11.authoringInfo;
      if (t6 && "relationship" === t6.type) {
        const { numClasses: s8, field1: i7, field2: r8 } = t6, o4 = t6.focus;
        if (s8 && i7 && r8) {
          const t7 = [i7, r8];
          let u13 = u7(o4) || 0;
          for (const e12 of t7) {
            const { field: t8, normalizationField: s9, label: i8 } = e12, r9 = i8 || { field: this._getFieldAlias(t8, l6), normField: s9 && this._getFieldAlias(s9, l6) }, n7 = Qe.clone();
            n7.angle = u13, a9.infos.push({ label: r9, symbol: n7 }), c4.add(n7), u13 += 90;
          }
          const d4 = i4({ focus: o4, numClasses: s8, infos: e11.uniqueValueInfos ?? [] });
          n6.unshift(d4);
        }
      } else if (Be(this.layer) || qe(this.layer)) {
        const { field: t7, field2: s8 } = e11;
        (_a = e11.uniqueValueInfos) == null ? void 0 : _a.forEach((e12) => {
          e12.symbol && (this._checkDefinitionExpression(t7, e12.value) || s8) && a9.infos.push({ label: e12.label || e12.value, value: e12.value, symbol: e12.symbol });
        });
      } else {
        const { field: t7, field2: i7, field3: n7, fieldDelimiter: o4, valueExpression: c5, defaultSymbol: d4 } = e11, y6 = !(!t7 && !c5 || !i7 && !n7), h7 = [];
        if ((_b = e11.uniqueValueGroups) == null ? void 0 : _b.forEach((e12) => {
          var _a2;
          const s8 = { type: "symbol-table", title: e12.heading, infos: [] };
          (_a2 = e12.classes) == null ? void 0 : _a2.forEach((e13) => {
            const { symbol: a10, values: u13 } = e13;
            if (a10) {
              const d5 = [], h8 = [];
              for (const e14 of u13 ?? []) {
                const { value: s9, value2: r8, value3: a11 } = e14, u14 = [], m6 = [];
                (t7 || c5) && (u14.push(s9), m6.push(this._getDomainName(t7, s9, l6))), i7 && (u14.push(r8), m6.push(this._getDomainName(i7, r8, l6))), n7 && (u14.push(a11), m6.push(this._getDomainName(n7, a11, l6))), d5.push(y6 ? u14.join(o4 || "") : u14[0]), h8.push(m6.join(" - "));
              }
              const m5 = d5.join(", ");
              let f5 = e13.label;
              if (!f5) {
                const e14 = h8.filter(Boolean);
                f5 = e14.length ? e14.join(", ") : m5;
              }
              const p6 = a10.clone();
              "cim" === p6.type && r7 && b2(p6, { innerDotSize: 0.5 * oe, outerRingSize: oe }), (this._checkDefinitionExpression(t7, m5) || i7) && s8.infos.push({ label: f5, value: m5, symbol: p6 });
            }
          }), s8.infos.length && h7.push(s8);
        }), h7.length) {
          const t8 = h7[0];
          1 === h7.length && "title" in t8 && !t8.title ? a9.infos.push(...t8.infos ?? []) : (d4 && (h7.push({ type: "symbol-table", infos: [{ label: e11.defaultLabel || "others", symbol: d4 }] }), u12 = true), a9.infos.push(...h7)), s7 || ((_c = e11.legendOptions) == null ? void 0 : _c.title) || e11.valueExpressionTitle || (a9.title = null);
        }
      }
      e11.defaultSymbol && !u12 && (a9.infos.push({ label: e11.defaultLabel || "others", symbol: e11.defaultSymbol }), u12 = true);
    } else if (Le(e11)) {
      if (!r7) {
        o3 = this._isUnclassedRenderer(e11);
        if (!o3 || !this._hasSizeRamp) {
          const t6 = e11.classBreakInfos.filter(({ symbol: e12 }) => e12);
          for (const { label: e12, minValue: s8, maxValue: i7, symbol: l7 } of t6)
            a9.infos.unshift({ label: e12 || (o3 ? null : `${s8} - ${i7}`), value: [s8, i7], symbol: l7 });
          o3 && (a9.title = null), this._updateInfosForClassedSizeRenderer(e11, a9.infos);
        }
        e11.defaultSymbol && !o3 && (a9.infos.push({ label: e11.defaultLabel || "others", symbol: e11.defaultSymbol }), u12 = true);
      }
    } else if (_e(e11))
      if (qe(this.layer) || Ne(this.layer)) {
        const t6 = await this._constructTileImageryStretchRendererElements(e11);
        He(t6) ? n6.push(t6) : a9.infos = t6;
      } else {
        const t6 = this.layer;
        let s8, i7;
        if ((_d = e11.statistics) == null ? void 0 : _d.length) {
          const t7 = e11.statistics[0];
          f2(t7) ? (s8 = t7.min, i7 = t7.max) : [s8, i7] = t7;
        }
        let l7 = [], r8 = t6.serviceRasterInfo;
        if (t6.rasterFunction)
          try {
            r8 = await t6.generateRasterInfo(t6.rasterFunction);
          } catch {
          }
        const o4 = s3(r8.pixelType);
        if (1 === r8.bandCount) {
          const l8 = ((_e2 = t6.bandIds) == null ? void 0 : _e2[0]) || 0;
          s8 = null != s8 ? s8 : r8.statistics ? r8.statistics[l8].min : o4[0], i7 = null != i7 ? i7 : r8.statistics ? r8.statistics[l8].max : o4[1], s8 || i7 ? n6.push(await this._getStretchLegendElements(e11, { min: s8, max: i7 })) : this._getServerSideLegend();
        } else if (t6.bandIds && 1 === t6.bandIds.length)
          s8 = null != s8 ? s8 : r8.statistics ? r8.statistics[t6.bandIds[0]].min : o4[0], i7 = null != i7 ? i7 : r8.statistics ? r8.statistics[t6.bandIds[0]].max : o4[1], s8 || i7 ? n6.push(await this._getStretchLegendElements(e11, { min: s8, max: i7 })) : this._getServerSideLegend();
        else if (r8.bandCount >= 3) {
          const { bandInfos: e12 } = r8, { bandIds: s9 } = t6;
          e12.length >= r8.bandCount ? 3 === (s9 == null ? void 0 : s9.length) ? (l7 = s9.map((t7) => e12[t7].name), a9.infos = this._createSymbolTableElementMultiBand(l7)) : "lerc" === t6.format ? (l7 = [0, 1, 2].map((t7) => e12[t7].name), a9.infos = this._createSymbolTableElementMultiBand(l7)) : this._getServerSideLegend() : "lerc" === t6.format ? (l7 = ["band1", "band2", "band3"], a9.infos = this._createSymbolTableElementMultiBand(l7)) : this._getServerSideLegend();
        } else
          this._getServerSideLegend();
      }
    else if (Se(e11))
      e11.colormapInfos.forEach((e12) => {
        a9.infos.push({ label: e12.label, value: e12.value, symbol: this._getAppliedCloneSymbol(pe, e12.color) });
      });
    else if (we(e11)) {
      let s8 = e11.symbol;
      switch (t5.geometryType) {
        case "point":
          s8 = "pointSymbol" in l6 ? l6.pointSymbol : null;
          break;
        case "polyline":
          s8 = "lineSymbol" in l6 ? l6.lineSymbol : null;
          break;
        case "polygon":
          s8 = "polygonSymbol" in l6 ? l6.polygonSymbol : null;
      }
      const i7 = this._hasClusterSizeVariable && this._getClusterSymbol() || !this._hasSizeRamp;
      e11.symbol && i7 && a9.infos.push({ label: e11.label, symbol: s8 });
    } else if (be(e11)) {
      e11.outputUnit && (this.title = "(" + e11.toJSON().outputUnit + ")"), a9.title = e11.attributeField;
      const t6 = e11.getClassBreakInfos();
      (t6 == null ? void 0 : t6.length) ? t6.forEach((e12) => {
        a9.infos.push({ label: e12.minValue + " - " + e12.maxValue, symbol: e12.symbol });
      }) : a9.infos.push({ label: e11.attributeField, symbol: e11.getDefaultSymbol() });
    } else
      ve(e11) && n6.push(await this._getStretchLegendElements(e11, { min: 0, max: 255 }));
    const d3 = e11.defaultSymbol;
    !d3 || u12 || we(e11) || o3 && !this._hasColorRamp && !this._hasSizeRamp && !this._hasOpacityRamp || n6.push({ type: "symbol-table", infos: [{ label: e11.defaultLabel || "others", symbol: d3 }] }), a9.infos.length && n6.unshift(a9);
    const y5 = null == t5.opacity ? this.opacity : t5.opacity, h6 = this._isTallSymbol("visualVariables" in e11 ? e11.visualVariables : null), m4 = Be(this.layer) || qe(this.layer), p5 = n6.reduce((e12, t6) => [...e12, ...this._getAllInfos(t6)], []).filter((e12) => !!(e12 == null ? void 0 : e12.symbol)).filter((e12) => {
      if ("cim" === e12.symbol.type) {
        const { minScale: t6, maxScale: s8 } = e12.symbol.data;
        if (t6 && t6 < this.scale || s8 && s8 > this.scale)
          return false;
      }
      return true;
    }).map((e12) => this._getSymbolPreview(e12, y5, { isDefault: e12.symbol === d3, applyScaleDrivenSize: !c4.has(e12.symbol), symbolConfig: { isTall: h6, isSquareFill: m4 }, effectList: c4.has(e12.symbol) ? null : this.effectList }));
    return e11 = null, await Promise.allSettled(p5), n6;
  }
  _checkDefinitionExpression(e11, t5) {
    return !e11 || "string" != typeof e11 || !this._layerDefinitionExpressionClause || this._layerDefinitionExpressionClause.testFeature({ [e11]: t5 });
  }
  _getServerSideLegend() {
    setTimeout(() => this.buildLegendElementsForTools(), 0);
  }
  _getAllInfos(e11) {
    const t5 = e11 == null ? void 0 : e11.infos;
    return t5 ? t5.reduce((e12, t6) => e12.concat(this._getAllInfos(t6)), []) : [e11];
  }
  async _constructTileImageryStretchRendererElements(e11) {
    var _a, _b, _c;
    const t5 = this.layer, s7 = t5.symbolizer.rasterInfo ?? t5.raster.rasterInfo;
    let i6, l6;
    const r7 = ((_a = e11 == null ? void 0 : e11.statistics) == null ? void 0 : _a.length) ? e11.statistics : s7 == null ? void 0 : s7.statistics;
    if (r7) {
      const e12 = r7[0];
      f2(e12) ? (i6 = e12.min, l6 = e12.max) : [i6, l6] = e12;
    } else {
      const e12 = s3(s7.pixelType);
      i6 = e12[0], l6 = e12[1];
    }
    if (t5.hasStandardTime() && (i6 = t5.getStandardTimeValue(i6), l6 = t5.getStandardTimeValue(l6)), 1 === s7.bandCount || 1 === ((_b = t5.bandIds) == null ? void 0 : _b.length))
      return this._getStretchLegendElements(e11, { min: i6, max: l6 });
    const n6 = (((_c = t5 == null ? void 0 : t5.bandIds) == null ? void 0 : _c.length) ? t5.bandIds : Array.from(Array(Math.min(s7.bandCount, 3)).keys())).map((e12) => s7.bandInfos[e12].name);
    return n6.length < 3 ? n6.push(n6[1]) : n6.length > 3 && n6.splice(3), this._createSymbolTableElementMultiBand(n6);
  }
  async _getStretchLegendElements(e11, t5) {
    const s7 = e11.colorRamp, i6 = i3(s7, t5);
    return { type: "stretch-ramp", title: "", infos: i6, preview: v3(i6.map((e12) => e12.color), { ariaLabel: await Je("previewColorRampAriaLabel") }) };
  }
  _getClusterSymbol() {
    var _a;
    const e11 = this.layer, t5 = "featureReduction" in e11 && e11.featureReduction, s7 = t5 && "symbol" in t5 && t5.renderer;
    return s7 && true !== ((_a = s7 == null ? void 0 : s7.authoringInfo) == null ? void 0 : _a.isAutoGenerated) ? null : t5 && "symbol" in t5 ? t5.symbol : null;
  }
  async _getSizeLegendElement(e11, t5, s7, i6) {
    return { type: "size-ramp", title: this._hasClusterSizeVariable ? this._getClusterTitle(t5) : e11, infos: await L(s7, t5, await u5(s7), this.scale, this.view, i6, this._hasClusterSizeVariable ? this._getClusterSymbol() : null) };
  }
  _createSymbolTableElementMultiBand(e11) {
    const t5 = [], s7 = ["red", "green", "blue"];
    return e11.forEach((e12, i6) => {
      t5.push({ label: { colorName: s7[i6], bandName: e12 }, src: s4[i6], opacity: this.opacity ?? 1 });
    }), t5;
  }
  _updateInfosForClassedSizeRenderer(e11, t5) {
    const s7 = e11.authoringInfo && "class-breaks-size" === e11.authoringInfo.type, i6 = e11.classBreakInfos.some((e12) => y3(e12.symbol));
    if (s7 && i6) {
      const s8 = b3, i7 = h3, l6 = e11.classBreakInfos.length, r7 = (s8 - i7) / (l6 > 1 ? l6 - 1 : l6);
      t5.forEach((e12, t6) => {
        e12.size = s8 - r7 * t6;
      });
    }
  }
  _isTallSymbol(e11) {
    let t5 = false, s7 = false;
    if (e11)
      for (let i6 = 0; i6 < e11.length && (!t5 || !s7); i6++) {
        const l6 = e11[i6];
        "size" === l6.type && ("height" === l6.axis && (t5 = true), "width-and-depth" === l6.axis && (s7 = true));
      }
    return t5 && s7;
  }
  async _getSymbolPreview(e11, t5, s7) {
    var _a, _b, _c;
    let i6 = !(s7 == null ? void 0 : s7.isDefault) && null == e11.size && this._hasSizeRamp ? e5(t3.size) : e11.size;
    if (this._scaleDrivenSizeVariable && (s7 == null ? void 0 : s7.applyScaleDrivenSize)) {
      const { getSize: t6 } = await import("./visualVariableUtils-OMMRO36I.js");
      i6 = t6(this._scaleDrivenSizeVariable, null, { view: this.view.type, scale: this.scale, shape: "simple-marker" === e11.symbol.type ? e11.symbol.style : null });
    }
    const l6 = !(s7 == null ? void 0 : s7.isDefault) && this._hasSizeRamp || !(!this._scaleDrivenSizeVariable || !(s7 == null ? void 0 : s7.applyScaleDrivenSize));
    return V2(e11.symbol, { size: i6, opacity: t5, scale: false, symbolConfig: s7 == null ? void 0 : s7.symbolConfig, effectView: s7 == null ? void 0 : s7.effectList, style: "legend", cimOptions: { allowScalingUp: l6, viewParams: this.isScaleDriven ? { viewingMode: "2d" === ((_a = this.view) == null ? void 0 : _a.type) ? "map" : (_b = this.view) == null ? void 0 : _b.viewingMode, scale: (_c = this.view) == null ? void 0 : _c.scale } : null }, ariaLabel: e11.label && "string" != typeof e11.label ? null : await Je("previewTemplateAriaLabel", e11.label) }).then((t6) => (e11.preview = t6, e11)).catch(() => (e11.preview = null, e11));
  }
  _getClusterRenderer(e11) {
    var _a, _b;
    this._hasClusterSizeVariable = false;
    const t5 = "renderer" in this.layer ? this.layer.renderer : null, s7 = ((_a = e11.renderer) == null ? void 0 : _a.clone()) || (t5 == null ? void 0 : t5.clone()), i6 = l3(e11, this.layerView, this.view);
    if (i6 && null != s7 && "visualVariables" in s7) {
      const t6 = (_b = s7.visualVariables) == null ? void 0 : _b.some((e12) => "size" === e12.type && "outline" !== e12.target && !he.test(e12.valueExpression));
      if (!t6) {
        if ("clusterMinSize" in e11 && "clusterMaxSize" in e11) {
          const { clusterMinSize: t8, clusterMaxSize: s8 } = e11;
          i6.legendOptions = new a2({ showLegend: t8 !== s8 });
        }
        const t7 = s7.visualVariables || [];
        s7.visualVariables = t7.concat([i6]), this._hasClusterSizeVariable = true;
      }
    }
    return s7;
  }
  async _loadRenderer(e11) {
    const t5 = [], s7 = e11.clone(), i6 = await u5(s7);
    if (Le(s7) || Ee(s7)) {
      const e12 = (s7.classBreakInfos || s7.uniqueValueInfos).map((e13) => this._fetchSymbol(e13.symbol, i6).then((t6) => {
        e13.symbol = t6;
      }).catch(() => {
        e13.symbol = null;
      }));
      Array.prototype.push.apply(t5, e12);
    }
    return t5.push(this._fetchSymbol(s7.symbol || s7.defaultSymbol, s7.defaultSymbol ? null : i6).then((e12) => {
      this._applySymbolToRenderer(s7, e12, we(s7));
    }).catch(() => {
      this._applySymbolToRenderer(s7, null, we(s7));
    })), await Promise.allSettled(t5), s7;
  }
  _applySymbolToRenderer(e11, t5, s7) {
    s7 ? e11.symbol = t5 : e11.defaultSymbol = t5;
  }
  async _fetchSymbol(e11, t5) {
    if (!e11)
      throw new Error();
    if ("web-style" === e11.type) {
      const s7 = this._webStyleSymbolCache;
      try {
        const i6 = await ("2d" === this.view.type ? e11.fetchCIMSymbol({ cache: s7 }) : e11.fetchSymbol({ cache: s7 }));
        return this._getAppliedCloneSymbol(i6, t5);
      } catch {
        throw n.getLogger(this).warn("Fetching web-style failed!"), new Error();
      }
    }
    return this._getAppliedCloneSymbol(e11, t5);
  }
  _getAppliedCloneSymbol(e11, s7) {
    if (!e11 || !s7)
      return e11;
    const i6 = e11.clone(), l6 = s7 && s7.toRgba();
    return i6.type.includes("3d") ? this._applyColorTo3dSymbol(i6, l6) : "cim" === i6.type ? I(i6, s7) : i6.color && (i6.color = new u4(l6 || i6.color)), i6;
  }
  _applyColorTo3dSymbol(e11, s7) {
    s7 && e11.symbolLayers.forEach((e12) => {
      e12 && (e12.material || (e12.material = {}), e12.material.color = new u4(s7));
    });
  }
  async _getVisualVariableLegendElements(e11, t5) {
    var _a, _b;
    if (!("visualVariables" in e11) || "vector-field" === e11.type)
      return null;
    const s7 = e11.visualVariables ?? [], i6 = [], l6 = [], n6 = [], a9 = w2(e11);
    if (2 === ((_a = a9 == null ? void 0 : a9.sizeStops) == null ? void 0 : _a.length) && (Le(e11) || Ee(e11))) {
      const [t6, s8] = a9.sizeStops;
      l6.push(new b({ field: e11.field, normalizationField: "normalizationField" in e11 ? e11.normalizationField : null, minSize: t6.size, maxSize: s8.size, minDataValue: t6.value, maxDataValue: s8.value }));
    }
    for (const r7 of s7)
      "color" === r7.type ? i6.push(r7) : "size" === r7.type ? l6.push(r7) : "opacity" === r7.type && n6.push(r7);
    const o3 = [...i6, ...l6, ...n6];
    let u12, c4;
    if (0 === i6.length && Le(e11) && e11.classBreakInfos && 1 === e11.classBreakInfos.length) {
      const t6 = e11.classBreakInfos[0];
      u12 = t6 && t6.symbol;
    }
    if (0 === i6.length && we(e11) && (u12 = e11.symbol), u12)
      if (u12.type.includes("3d")) {
        const e12 = u12.symbolLayers.at(0);
        "water" === e12.type ? null != e12.color && (c4 = e12.color) : null != ((_b = e12.material) == null ? void 0 : _b.color) && (c4 = e12.material.color);
      } else
        u12.url || (c4 = u12.color);
    const d3 = this.effectList;
    return (await Promise.all(o3.map(async (s8) => {
      if (!s8.legendOptions || false !== s8.legendOptions.showLegend) {
        const i7 = ge(e11) ? s8.field : this._getRampTitle(s8, t5);
        let l7 = null;
        const r7 = c(t5, s8, this.view.timeZone);
        if ("color" === s8.type) {
          const e12 = await r2(s8, null, r7) ?? [];
          l7 = { type: "color-ramp", title: i7, infos: e12, preview: v3(e12.map((e13) => e13.color), { effectList: d3, ariaLabel: await Je("previewColorRampAriaLabel") }) }, this._hasColorRamp || (this._hasColorRamp = e12.length > 0);
        } else if ("size" === s8.type && "outline" !== s8.target)
          he.test(s8.valueExpression) ? this._hasClusterSizeVariable || (this._scaleDrivenSizeVariable = s8) : (l7 = await this._getSizeLegendElement(i7, s8, e11, r7), this._hasSizeRamp || (this._hasSizeRamp = !(null == l7.infos || !l7.infos.length)));
        else if ("opacity" === s8.type) {
          const e12 = await r2(s8, c4, r7) ?? [];
          l7 = { type: "opacity-ramp", title: i7, infos: e12, preview: v3(e12.map((e13) => e13.color), { effectList: d3, ariaLabel: await Je("previewColorRampAriaLabel") }) }, this._hasOpacityRamp || (this._hasOpacityRamp = e12.length > 0);
        }
        return l7 && l7.infos ? l7 : null;
      }
    }))).filter(k);
  }
  _getDomainName(e11, t5, s7) {
    var _a;
    if (e11 && "function" != typeof e11) {
      const i6 = "getField" in s7 && ((_a = s7.getField) == null ? void 0 : _a.call(s7, e11)), l6 = i6 && "getFieldDomain" in s7 && s7.getFieldDomain ? s7.getFieldDomain(i6.name) : null;
      return "coded-value" === (l6 == null ? void 0 : l6.type) ? l6.getName(t5) : null;
    }
    return null;
  }
  _getClusterTitle(e11) {
    const t5 = this.layer, s7 = e11.field;
    if ("featureReduction" in t5 && t5.featureReduction && "cluster" === t5.featureReduction.type) {
      const e12 = t5.featureReduction, i6 = "popupTemplate" in e12 && e12.popupTemplate, l6 = i6 && i6.fieldInfos;
      if (l6) {
        for (const t6 of l6)
          if (t6.fieldName === s7)
            return "cluster_count" === s7 ? t6.label || { showCount: true } : t6.label;
      }
    }
    return { showCount: true };
  }
  _getRampTitle(e11, t5) {
    var _a, _b;
    let s7 = e11.field, i6 = e11.normalizationField, l6 = false, r7 = false, n6 = false, a9 = null;
    s7 = "function" == typeof s7 ? null : s7, i6 = "function" == typeof i6 ? null : i6;
    const o3 = (_a = e11.legendOptions) == null ? void 0 : _a.title;
    if (null != o3)
      a9 = o3;
    else if (e11.valueExpressionTitle)
      a9 = e11.valueExpressionTitle;
    else {
      if ("renderer" in t5 && t5.renderer && "authoringInfo" in t5.renderer && ((_b = t5.renderer.authoringInfo) == null ? void 0 : _b.visualVariables)) {
        const e12 = t5.renderer.authoringInfo.visualVariables;
        for (let t6 = 0; t6 < e12.length; t6++) {
          const s8 = e12[t6];
          if ("color" === s8.type) {
            if ("ratio" === s8.style) {
              l6 = true;
              break;
            }
            if ("percent" === s8.style) {
              r7 = true;
              break;
            }
            if ("percent-of-total" === s8.style) {
              n6 = true;
              break;
            }
          }
        }
      }
      a9 = { field: s7 && this._getFieldAlias(s7, t5), normField: i6 && this._getFieldAlias(i6, t5), ratio: l6, ratioPercent: r7, ratioPercentTotal: n6 };
    }
    return a9;
  }
  _getRendererTitle(e11, t5) {
    var _a;
    const s7 = e11;
    if ((_a = s7.legendOptions) == null ? void 0 : _a.title)
      return s7.legendOptions.title;
    if (s7.valueExpressionTitle)
      return s7.valueExpressionTitle;
    let i6 = s7.field, l6 = null, r7 = null;
    if (Le(s7) && (l6 = s7.normalizationField, r7 = "percent-of-total" === s7.normalizationType), i6 = "function" == typeof i6 ? null : i6, l6 = "function" == typeof l6 ? null : l6, Ee(s7)) {
      const { field2: e12, field3: l7, fieldDelimiter: r8 } = s7;
      let n7 = i6 && this._getFieldAlias(i6, t5);
      return e12 && (n7 = `<${n7}>${r8}<${this._getFieldAlias(e12, t5)}>`, l7 && (n7 = `${n7}${r8}<${this._getFieldAlias(l7, t5)}>`)), n7;
    }
    let n6 = null;
    return (i6 || l6) && (n6 = { field: i6 && this._getFieldAlias(i6, t5), normField: l6 && this._getFieldAlias(l6, t5), normByPct: r7 }), n6;
  }
  _getFieldAlias(e11, t5) {
    var _a, _b;
    const s7 = "popupTemplate" in t5 ? t5.popupTemplate : null, i6 = s7 == null ? void 0 : s7.fieldInfos;
    let l6 = i6 == null ? void 0 : i6.find((t6) => e11 === t6.fieldName), r7 = null;
    "getField" in t5 && t5.getField ? r7 = t5.getField(e11) : "fieldsIndex" in t5 && t5.fieldsIndex && (r7 = t5.fieldsIndex.get(e11));
    let n6 = null;
    const a9 = "featureReduction" in t5 && t5.featureReduction;
    a9 && (l6 ?? (l6 = "popupTemplate" in a9 ? (_b = (_a = a9.popupTemplate) == null ? void 0 : _a.fieldInfos) == null ? void 0 : _b.find((t6) => {
      var _a2;
      return (e11 == null ? void 0 : e11.toLowerCase()) === ((_a2 = t6.fieldName) == null ? void 0 : _a2.toLowerCase());
    }) : void 0), "fields" in a9 && a9.fields && (n6 = a9.fields.find((t6) => {
      var _a2;
      return ((_a2 = t6.name) == null ? void 0 : _a2.toLowerCase()) === (e11 == null ? void 0 : e11.toLowerCase());
    })));
    const o3 = l6 || r7 || n6;
    let u12 = null;
    return o3 && (u12 = (l6 == null ? void 0 : l6.label) || (r7 == null ? void 0 : r7.alias) || (n6 == null ? void 0 : n6.alias) || "name" in o3 && o3.name || "fieldName" in o3 && o3.fieldName || null), u12;
  }
  _isUnclassedRenderer(e11) {
    const t5 = e11.visualVariables;
    let s7 = false;
    return Le(e11) && e11.classBreakInfos && 1 === e11.classBreakInfos.length && t5 && (s7 = e11.field ? t5.some((t6) => !(!t6 || e11.field !== t6.field || (e11.normalizationField || t6.normalizationField) && e11.normalizationField !== t6.normalizationField)) : !!t5.length), s7;
  }
};
e([y()], Ke.prototype, "children", void 0), e([y({ readOnly: true })], Ke.prototype, "effectList", null), e([y()], Ke.prototype, "layerView", void 0), e([y()], Ke.prototype, "layer", void 0), e([y()], Ke.prototype, "legendElements", void 0), e([y({ readOnly: true })], Ke.prototype, "opacity", null), e([y()], Ke.prototype, "parent", void 0), e([y({ readOnly: true, dependsOn: [] })], Ke.prototype, "ready", null), e([y()], Ke.prototype, "hideLayersNotInCurrentView", void 0), e([y()], Ke.prototype, "keepCacheOnDestroy", void 0), e([y()], Ke.prototype, "respectLayerDefinitionExpression", void 0), e([y()], Ke.prototype, "respectLayerVisibility", void 0), e([y({ readOnly: true })], Ke.prototype, "scale", null), e([y()], Ke.prototype, "sublayerIds", void 0), e([y({ readOnly: true })], Ke.prototype, "isScaleDriven", null), e([y()], Ke.prototype, "title", void 0), e([y({ readOnly: true, dependsOn: ["ready"], value: 0 })], Ke.prototype, "version", null), e([y()], Ke.prototype, "view", void 0), Ke = e([a("esri.widgets.Legend.support.ActiveLayerInfo")], Ke);
var Xe = Ke;

// node_modules/@arcgis/core/widgets/Legend/LegendViewModel.js
var c2 = { state: "state", view: "view", allLayerViews: "all-layer-views", legendProperties: "legend-properties" };
var L2 = V.ofType(Xe);
var u8 = /* @__PURE__ */ new Set(["esri.layers.BuildingSceneLayer", "esri.layers.CSVLayer", "esri.layers.FeatureLayer", "esri.layers.GeoJSONLayer", "esri.layers.GeoRSSLayer", "esri.layers.GroupLayer", "esri.layers.HeatmapLayer", "esri.layers.ImageryLayer", "esri.layers.ImageryTileLayer", "esri.layers.MapImageLayer", "esri.layers.OGCFeatureLayer", "esri.layers.OrientedImageryLayer", "esri.layers.PointCloudLayer", "esri.layers.StreamLayer", "esri.layers.SceneLayer", "esri.layers.SubtypeGroupLayer", "esri.layers.TileLayer", "esri.layers.VoxelLayer", "esri.layers.WFSLayer", "esri.layers.WMSLayer", "esri.layers.WMTSLayer", "esri.layers.WCSLayer", "esri.layers.LinkChartLayer", "esri.layers.knowledgeGraph.KnowledgeGraphSublayer"]);
var p3 = "view.basemapView.baseLayerViews";
var f3 = "view.groundView.layerViews";
var v4 = "view.basemapView.referenceLayerViews";
var _ = [p3, f3, "view.layerViews", v4];
var w3 = class extends S {
  constructor(e11) {
    super(e11), this._layerViewByLayerId = {}, this._layerInfosByLayerViewId = {}, this._activeLayerInfosByLayerViewId = {}, this._activeLayerInfosWithNoParent = new V(), this.activeLayerInfos = new L2(), this.basemapLegendVisible = false, this.groundLegendVisible = false, this.hideLayersNotInCurrentView = false, this.keepCacheOnDestroy = false, this.respectLayerDefinitionExpression = false, this.respectLayerVisibility = true, this.layerInfos = [], this.view = null;
  }
  initialize() {
    this.addHandles(d(() => this.view, () => this._viewHandles(), P), c2.view), this.addHandles(f(() => this._refresh()));
  }
  destroy() {
    this._destroyViewActiveLayerInfos(), this.view = null;
  }
  get state() {
    var _a;
    return ((_a = this.view) == null ? void 0 : _a.ready) ? "ready" : "disabled";
  }
  _viewHandles() {
    this.removeHandles(c2.state), this.view && this.addHandles(d(() => this.state, () => this._stateHandles(), P), c2.state);
  }
  _stateHandles() {
    this._resetAll(), "ready" === this.state && this._watchPropertiesAndAllLayerViews();
  }
  _resetAll() {
    this.removeHandles([c2.allLayerViews, c2.legendProperties]), this._destroyViewActiveLayerInfos(), this.activeLayerInfos.removeAll();
  }
  _destroyViewActiveLayerInfos() {
    Object.keys(this._activeLayerInfosByLayerViewId).forEach(this._destroyViewActiveLayerInfo, this);
  }
  _destroyViewActiveLayerInfo(e11) {
    this.removeHandles(e11);
    const i6 = this._activeLayerInfosByLayerViewId[e11];
    delete this._activeLayerInfosByLayerViewId[e11], (i6 == null ? void 0 : i6.parent) && i6.parent.children.remove(i6);
  }
  _watchPropertiesAndAllLayerViews() {
    const { view: e11 } = this;
    if (!e11)
      return;
    const { allLayerViews: i6 } = e11;
    i6.length && this._refresh(), this.addHandles(i6.on("change", (e12) => this._propertiesChangeHandle()), c2.allLayerViews), this.addHandles(d(() => [this.layerInfos, this.basemapLegendVisible, this.groundLegendVisible], () => this._propertiesChangeHandle()), c2.legendProperties);
  }
  _propertiesChangeHandle() {
    this._destroyViewActiveLayerInfos(), this._refresh();
  }
  _refresh() {
    this._layerInfosByLayerViewId = {}, this.activeLayerInfos.removeAll(), this._generateLayerViews().filter(this._filterLayerViewsByLayerInfos, this).filter(this._isLayerViewSupported, this).forEach(this._generateActiveLayerInfo, this), this._sortActiveLayerInfos(this.activeLayerInfos);
  }
  _sortActiveLayerInfos(e11) {
    const i6 = this.view;
    if (e11.length < 2 || !i6)
      return;
    const r7 = [];
    e11.forEach((i7) => {
      if (!i7.parent) {
        const t6 = i7.layer.parent, s7 = t6 && "uid" in t6 && this._layerViewByLayerId[t6.uid], a9 = s7 && this._activeLayerInfosByLayerViewId[s7.uid];
        a9 && e11.includes(a9) && (r7.push(i7), i7.parent = a9, a9.children.add(i7), this._sortActiveLayerInfos(a9.children));
      }
    }), e11.removeMany(r7);
    const t5 = {};
    i6.allLayerViews.forEach((e12, i7) => t5[e12.layer.uid] = i7), e11.sort((e12, i7) => {
      const r8 = t5[e12.layer.uid] || 0;
      return (t5[i7.layer.uid] || 0) - r8;
    });
  }
  _generateLayerViews() {
    const e11 = [];
    return _.filter(this._filterLayerViews, this).map((e12) => o(this, e12)).filter((e12) => null != e12).forEach(this._collectLayerViews("layerViews", e11)), e11;
  }
  _filterLayerViews(e11) {
    const i6 = !this.basemapLegendVisible && (e11 === p3 || e11 === v4), r7 = !this.groundLegendVisible && e11 === f3;
    return !i6 && !r7;
  }
  _collectLayerViews(e11, i6) {
    const r7 = (t5) => (t5 && t5.forEach((t6) => {
      i6.push(t6), r7(t6[e11]);
    }), i6);
    return r7;
  }
  _filterLayerViewsByLayerInfos(e11) {
    const i6 = this.layerInfos;
    return !i6 || !i6.length || i6.some((i7) => this._hasLayerInfo(i7, e11));
  }
  _hasLayerInfo(e11, i6) {
    const r7 = this._isLayerUIDMatching(e11.layer, i6.layer.uid);
    return r7 && (this._layerInfosByLayerViewId[i6.uid] = e11), r7;
  }
  _isLayerUIDMatching(e11, i6) {
    return e11 && (e11.uid === i6 || this._hasLayerUID(e11.layers, i6));
  }
  _hasLayerUID(e11, i6) {
    return e11 && e11.some((e12) => this._isLayerUIDMatching(e12, i6));
  }
  _isLayerViewSupported(e11) {
    return !!u8.has(e11.layer.declaredClass) && (this._layerViewByLayerId[e11.layer.uid] = e11, true);
  }
  _generateActiveLayerInfo(e11) {
    this._isLayerActive(e11) ? this._buildActiveLayerInfo(e11) : (this.removeHandles(e11.uid), this.addHandles(d(() => {
      var _a;
      return [e11.legendEnabled, (_a = e11.layer) == null ? void 0 : _a.legendEnabled];
    }, () => this._layerActiveHandle(e11)), e11.uid));
  }
  _layerActiveHandle(e11) {
    this._isLayerActive(e11) && (this.removeHandles(e11.uid), this._buildActiveLayerInfo(e11));
  }
  _isLayerActive(e11) {
    var _a;
    return !this.respectLayerVisibility || e11.legendEnabled && ((_a = e11.layer) == null ? void 0 : _a.legendEnabled);
  }
  _buildActiveLayerInfo(e11) {
    var _a;
    const i6 = e11.layer, r7 = e11.uid, n6 = this._layerInfosByLayerViewId[r7];
    let o3 = this._activeLayerInfosByLayerViewId[r7];
    if (!o3) {
      const t5 = void 0 !== (n6 == null ? void 0 : n6.title) && n6.layer.uid === i6.uid;
      o3 = new Xe({ layer: i6, layerView: e11, title: t5 ? n6.title : i6.title, view: this.view, respectLayerDefinitionExpression: this.respectLayerDefinitionExpression, respectLayerVisibility: this.respectLayerVisibility, hideLayersNotInCurrentView: this.hideLayersNotInCurrentView, keepCacheOnDestroy: this.keepCacheOnDestroy, sublayerIds: (n6 == null ? void 0 : n6.sublayerIds) || [] }), this._activeLayerInfosByLayerViewId[r7] = o3;
    }
    const l6 = i6.parent && "uid" in i6.parent ? this._layerViewByLayerId[(_a = i6.parent) == null ? void 0 : _a.uid] : null;
    if (o3.parent = this._activeLayerInfosByLayerViewId[l6 == null ? void 0 : l6.uid], !this.hasHandles(r7)) {
      const n7 = [d(() => i6.title, (e12) => this._titleHandle(e12, o3)), d(() => [i6.opacity, "renderer" in i6 && i6.renderer, "pointSymbol" in i6 && i6.pointSymbol, "lineSymbol" in i6 && i6.lineSymbol, "polygonSymbol" in i6 && i6.polygonSymbol], () => this._constructLegendElements(o3)), p(() => {
        var _a2;
        return true === ((_a2 = this.view) == null ? void 0 : _a2.stationary);
      }, () => this._scaleHandle(o3), P), d(() => e11.layer ? e8(e11.layer, e11.view) : null, () => this._constructLegendElements(o3)), d(() => e11.updating, () => {
        if (null == e11.layer)
          return;
        null != e8(e11.layer, e11.view) && this._constructLegendElements(o3);
      }), d(() => "effect" in i6 && i6.effect, () => this._constructLegendElements(o3)), p(() => {
        var _a2;
        return (_a2 = this.view) == null ? void 0 : _a2.timeZone;
      }, () => this._constructLegendElements(o3), P)];
      if (this.respectLayerVisibility) {
        const r8 = d(() => e11.legendEnabled, (e12) => this._legendEnabledHandle(e12, o3)), s7 = d(() => i6.legendEnabled, (e12) => this._legendEnabledHandle(e12, o3));
        n7.push(r8, s7);
      }
      this.addHandles(n7, r7);
    }
    o3.isScaleDriven || this._constructLegendElements(o3), this._addActiveLayerInfo(o3);
  }
  _titleHandle(e11, i6) {
    i6.title = e11, this._constructLegendElements(i6);
  }
  _legendEnabledHandle(e11, i6) {
    e11 ? this._addActiveLayerInfo(i6) : this._removeActiveLayerInfo(i6);
  }
  _scaleHandle(e11) {
    (e11.isScaleDriven || e11.hideLayersNotInCurrentView) && this._constructLegendElements(e11);
  }
  _addActiveLayerInfo(e11) {
    var _a;
    const { layerView: i6, layer: r7 } = e11;
    if (this._isLayerActive(i6) && !this.activeLayerInfos.includes(e11)) {
      const i7 = e11.parent;
      if (i7)
        i7.children.includes(e11) || i7.children.push(e11), this._sortActiveLayerInfos(i7.children);
      else {
        const i8 = (_a = this.layerInfos) == null ? void 0 : _a.some((e12) => e12.layer.uid === r7.uid);
        r7.parent && "uid" in r7.parent && !i8 ? this._activeLayerInfosWithNoParent.add(e11) : (this.activeLayerInfos.add(e11), this._sortActiveLayerInfos(this.activeLayerInfos));
      }
      if (this._activeLayerInfosWithNoParent.length) {
        const e12 = [];
        this._activeLayerInfosWithNoParent.forEach((i8) => {
          const r8 = i8.layer.parent, t5 = r8 && "uid" in r8 ? this._layerViewByLayerId[r8 == null ? void 0 : r8.uid] : null, s7 = this._activeLayerInfosByLayerViewId[t5 == null ? void 0 : t5.uid];
          s7 && (e12.push(i8), i8.parent = s7);
        }), e12.length && (this._activeLayerInfosWithNoParent.removeMany(e12), e12.forEach((e13) => this._addActiveLayerInfo(e13)));
      }
    }
  }
  _removeActiveLayerInfo(e11) {
    const i6 = e11.parent;
    i6 ? i6.children.remove(e11) : this.activeLayerInfos.remove(e11);
  }
  _constructLegendElements(e11) {
    const i6 = e11.layer;
    "featureCollections" in i6 && i6.featureCollections ? e11.buildLegendElementsForFeatureCollections(i6.featureCollections) : "featureReduction" in i6 && i6.featureReduction && "renderer" in i6.featureReduction && ("binning" === i6.featureReduction.type || "cluster" === i6.featureReduction.type) && (!this.view || i6.featureReduction.maxScale <= this.view.scale) ? e11.buildLegendElementsForFeatureReduction(i6.featureReduction) : "renderer" in i6 && i6.renderer && !("sublayers" in i6) ? e11.buildLegendElementsForRenderer(i6.renderer) : "url" in i6 && i6.url ? e11.buildLegendElementsForTools() : e11.children.forEach((e12) => this._constructLegendElements(e12));
  }
};
e([y({ type: L2 })], w3.prototype, "activeLayerInfos", void 0), e([y()], w3.prototype, "basemapLegendVisible", void 0), e([y()], w3.prototype, "groundLegendVisible", void 0), e([y()], w3.prototype, "hideLayersNotInCurrentView", void 0), e([y()], w3.prototype, "keepCacheOnDestroy", void 0), e([y()], w3.prototype, "respectLayerDefinitionExpression", void 0), e([y()], w3.prototype, "respectLayerVisibility", void 0), e([y()], w3.prototype, "layerInfos", void 0), e([y({ readOnly: true })], w3.prototype, "state", null), e([y()], w3.prototype, "view", void 0), w3 = e([a("esri.widgets.Legend.LegendViewModel")], w3);
var I3 = w3;

// node_modules/@arcgis/core/widgets/Legend/styles/CardCSS.js
var e9 = "esri-legend--card";
var a5 = "esri-legend";
var r4 = { activated: `${e9}__carousel-indicator--activated`, base: e9, stacked: `${a5}--stacked`, carouselTitle: `${e9}__carousel-title`, indicator: `${e9}__carousel-indicator`, intervalSeparator: `${e9}__interval-separator`, imageryLayerStretchedImage: `${e9}__imagery-layer-image--stretched`, imageLabel: `${e9}__image-label`, layerCaption: `${e9}__layer-caption`, labelElement: `${e9}__label-element`, layerRow: `${e9}__layer-row`, labelCell: `${e9}__label-cell`, message: `${e9}__message`, rampLabel: `${e9}__ramp-label`, section: `${e9}__section`, relationshipSection: `${e9}__relationship-section`, serviceCaptionText: `${e9}__service-caption-text`, serviceContent: `${e9}__service-content`, service: `${e9}__service`, groupLayer: `${e9}__group-layer`, groupLayerChild: `${e9}__group-layer-child`, symbol: `${e9}__symbol`, sizeRampRow: `${e9}__size-ramp-row`, symbolRow: `${e9}__symbol-row`, symbolCell: `${e9}__symbol-cell`, indicatorContainer: `${e9}__carousel-indicator-container`, intervalSeparatorsContainer: `${e9}__interval-separators-container`, relationshipLabelContainer: `${e9}__relationship-label-container`, labelContainer: `${e9}__label-container`, serviceCaptionContainer: `${e9}__service-caption-container`, symbolContainer: `${e9}__symbol-container`, sizeRampContainer: `${e9}__size-ramp-container`, sizeRampPreview: `${e9}__size-ramp-preview`, pieChartRampPreview: `${e9}__pie-chart-ramp-preview`, rampContainer: `${a5}__ramps`, sizeRampHorizontal: `${a5}__size-ramp--horizontal`, rampLabelsContainer: `${a5}__ramp-labels`, layerInfo: `${a5}__layer-cell ${a5}__layer-cell--info`, univariateAboveAndBelowColorRamp: "esri-univariate-above-and-below-ramp__color--card" };

// node_modules/@arcgis/core/widgets/Legend/styles/support/univariateUtils.js
var l4 = i();
var n5 = 10;
var r5 = 20;
var s6 = 10;
var a6 = 20;
var c3 = { univariateAboveAndBelowSymbol: "esri-univariate-above-and-below-ramp__symbol", colorRamp: "esri-legend__color-ramp" };
function f4(e11 = "vertical") {
  const t5 = "stroke:rgb(200, 200, 200);stroke-width:1";
  return "vertical" === e11 ? n3("svg", { height: "4", width: "10" }, n3("line", { style: t5, x1: "0", x2: "10", y1: "2", y2: "2" })) : n3("svg", { height: "10", width: "10" }, n3("line", { style: t5, x1: "5", x2: "5", y1: "0", y2: "10" }));
}
function p4(e11, t5 = "vertical") {
  const o3 = document.createElement("div");
  return o3.style.height = `${r5}px`, o3.className = c3.univariateAboveAndBelowSymbol, null != e11 && (o3.style.opacity = e11.toString()), l4.append(o3, f4.bind(null, t5)), o3;
}
function m3(t5, o3, i6 = "vertical", l6) {
  t5.infos.forEach((t6, n6) => {
    if (l6 && 2 === n6)
      t6.preview = p4(o3, i6);
    else {
      const o4 = u3(t6.size) + ("horizontal" === i6 ? a6 : s6), l7 = t6.preview, n7 = "div" === (l7 == null ? void 0 : l7.tagName.toLowerCase()), r7 = n7 ? l7 : document.createElement("div");
      r7.className = c3.univariateAboveAndBelowSymbol, "horizontal" === i6 ? r7.style.width = `${o4}px` : r7.style.height = `${o4}px`, !n7 && l7 && r7.appendChild(l7), t6.preview = r7;
    }
  });
}
function u9(t5, o3 = "classic") {
  const i6 = t5.infos;
  return "classic" === o3 ? (u3(i6[0].size) + s6) / 2 : (u3(i6[0].size) - u3(i6[i6.length - 1].size)) / 2;
}
function h5(e11, t5) {
  if (!e11)
    return null;
  const i6 = e11.infos.map((e12) => e12.color), l6 = v3("full" === t5.type ? i6 : "above" === t5.type ? i6.slice(0, 3) : i6.slice(2, 5), { width: t5.width, height: t5.height, align: t5.rampAlignment, effectList: t5.effectList, ariaLabel: t5.ariaLabel });
  return l6.className = c3.colorRamp, null != t5.opacity && (l6.style.opacity = t5.opacity.toString()), l6;
}
function v5(t5, o3, i6, l6 = "vertical") {
  let c4 = 0;
  const f5 = t5.infos, p5 = Math.floor(f5.length / 2), m4 = "full" === o3 || "above" === o3 ? 0 : p5, u12 = "full" === o3 || "below" === o3 ? f5.length - 1 : p5;
  for (let h6 = m4; h6 <= u12; h6++)
    if (i6 && h6 === p5)
      c4 += "horizontal" === l6 ? n5 : r5;
    else {
      c4 += u3(f5[h6].size) + ("horizontal" === l6 ? a6 : s6);
    }
  return Math.round(c4);
}
function y4(t5, o3, i6, l6 = "vertical") {
  const c4 = v5(t5, o3, i6, l6), f5 = t5.infos, p5 = Math.floor(f5.length / 2), m4 = "full" === o3 || "above" === o3 ? 0 : p5, u12 = "full" === o3 || "below" === o3 ? f5.length - 1 : p5, h6 = "full" === o3 ? f5[m4].size + f5[u12].size : "above" === o3 ? f5[m4].size : f5[u12].size, y5 = i6 ? "vertical" === l6 ? r5 : n5 : 0, d3 = "vertical" === l6 ? s6 * ("full" === o3 ? 2 : 1) : a6 * ("full" === o3 ? 2 : 1);
  return Math.round(c4 - (u3(h6) / 2 + y5 / 2 + d3 / 2));
}
function d2(e11, t5, o3 = "vertical") {
  const i6 = e11.infos;
  let l6 = i6.find(({ type: e12 }) => "size-ramp" === e12), n6 = i6.find(({ type: e12 }) => "color-ramp" === e12);
  return l6 && (l6 = { ...l6 }, l6.infos = [...l6.infos], m3(l6, t5, o3, true)), n6 && (n6 = { ...n6 }, n6.infos = [...n6.infos]), "horizontal" === o3 && (l6 == null ? void 0 : l6.infos.reverse(), n6 == null ? void 0 : n6.infos.reverse()), { sizeRampElement: l6, colorRampElement: n6 };
}
function b5(e11, t5 = "vertical") {
  const o3 = e11.infos;
  let i6 = o3.find(({ type: e12 }) => "size-ramp" === e12), l6 = o3.find(({ type: e12 }) => "color-ramp" === e12);
  return i6 && (i6 = { ...i6 }, i6.infos = [...i6.infos], m3(i6, null, t5, false)), l6 && (l6 = { ...l6 }, l6.infos = [...l6.infos]), "horizontal" === t5 && (i6 == null ? void 0 : i6.infos.reverse(), l6 == null ? void 0 : l6.infos.reverse()), { sizeRampElement: i6, colorRampElement: l6 };
}

// node_modules/@arcgis/core/widgets/Legend/support/styleUtils.js
function r6(e11, t5) {
  return t5;
}
function i5(e11) {
  const t5 = this;
  e11.appendChild(t5);
}
function o2(n6, i6, o3) {
  if (!i6)
    return;
  if ("number" == typeof i6)
    return i6;
  if ("string" == typeof i6)
    return u(i6);
  if ("value" in i6 || "unit" in i6)
    return s2(n6.dotValue, i6);
  if ("colorName" in i6 && "bandName" in i6)
    return n6[i6.colorName] + ": " + (n6[i6.bandName] || i6.bandName);
  if ("showCount" in i6)
    return i6.showCount ? n6.clusterCountTitle : void 0;
  let u12 = null;
  return r6(i6, o3) ? u12 = i6.ratioPercentTotal ? "showRatioPercentTotal" : i6.ratioPercent ? "showRatioPercent" : i6.ratio ? "showRatio" : i6.normField ? "showNormField" : i6.field ? "showField" : null : l5(i6, o3) && (u12 = i6.normField ? "showNormField" : i6.normByPct ? "showNormPct" : i6.field ? "showField" : null), u12 ? s2("showField" === u12 ? "{field}" : n6[u12], { field: i6.field, normField: i6.normField }) : void 0;
}
function l5(e11, t5) {
  return !t5;
}
function u10(e11, t5) {
  return !!(t5 && "Stretched" === t5 && e11.version >= 10.3 && "esri.layers.ImageryLayer" === e11.declaredClass);
}
function a7(e11, t5) {
  var _a;
  return e11.label ? t5[e11.label] + ": " + ("string" == typeof e11.value ? e11.value : u2(e11.value ?? 0, { style: "decimal", notation: ((_a = e11.value) == null ? void 0 : _a.toString().toLowerCase().includes("e")) ? "scientific" : "standard" })) : "";
}

// node_modules/@arcgis/core/widgets/Legend/styles/Card.js
var $ = 25;
var k3 = 25;
var z = 768;
var I4 = 100;
var N;
!function(e11) {
  e11.Auto = "auto", e11.Stack = "stack", e11.SideBySide = "side-by-side";
}(N || (N = {}));
var A = "#ddd";
var j = window.devicePixelRatio;
function E(e11) {
  var _a, _b;
  if (e11) {
    if (e11.type.includes("3d")) {
      const t5 = (_a = e11.symbolLayers) == null ? void 0 : _a.length;
      if (!t5)
        return;
      const s7 = e11.symbolLayers.at(t5 - 1), i6 = (_b = s7.resource) == null ? void 0 : _b.primitive;
      return "circle" === i6 || "cross" === i6 || "kite" === i6 || "sphere" === i6 || "cube" === i6 || "diamond" === i6;
    }
    {
      const t5 = e11.style;
      return "circle" === t5 || "diamond" === t5 || "cross" === t5;
    }
  }
}
function F(e11) {
  var _a;
  if (e11) {
    if (e11.type.includes("3d")) {
      const t5 = (_a = e11.symbolLayers) == null ? void 0 : _a.length;
      if (!t5)
        return;
      const s7 = e11.symbolLayers.at(t5 - 1).get("resource.primitive");
      return "triangle" === s7 || "cone" === s7 || "tetrahedron" === s7;
    }
    return "triangle" === e11.style;
  }
}
var T = class extends D {
  constructor(e11, t5) {
    super(e11, t5), this._hasIndicators = false, this._selectedSectionName = null, this._sectionNames = [], this._sectionMap = /* @__PURE__ */ new Map(), this.activeLayerInfos = null, this.headingLevel = 3, this.layout = N.Stack, this.messages = null, this.messagesCommon = null, this.type = "card", this.view = null;
  }
  initialize() {
    this.addHandles(d(() => this.activeLayerInfos, (e11) => {
      this.removeAllHandles(), this._watchForSectionChanges(e11);
    }));
  }
  render() {
    const { view: e11 } = this;
    this._hasIndicators = this.layout === N.Auto && e11 && e11.container.clientWidth <= z || this.layout === N.Stack;
    const t5 = this.activeLayerInfos, s7 = t5 && t5.toArray().map((e12) => this._renderLegendForLayer(e12)).filter((e12) => !!e12);
    this._hasIndicators ? this._selectedSectionName && this._sectionNames.includes(this._selectedSectionName) || (this._selectedSectionName = this._sectionNames && this._sectionNames[0]) : this._selectedSectionName = null;
    const i6 = this._sectionNames.length, a9 = this._sectionNames.map((e12, t6) => {
      const s8 = s2(this.messagesCommon.pagination.pageText, { index: t6 + 1, total: i6 });
      return n3("div", { "aria-controls": `${e12}-panel`, "aria-label": s8, "aria-selected": (this._selectedSectionName === e12).toString(), bind: this, class: this.classes(r4.indicator, { [r4.activated]: this._selectedSectionName === e12 }), "data-section-name": e12, id: e12, key: e12, onclick: this._selectSection, onkeydown: this._focusSection, role: "tab", tabIndex: this._selectedSectionName === e12 ? 0 : -1, title: s8 });
    }), r7 = this._hasIndicators && i6 > 1 ? n3("div", { class: r4.indicatorContainer, key: "carousel-navigation", role: "tablist" }, a9) : null, o3 = this._hasIndicators ? this._sectionMap.get(this._selectedSectionName) : s7 && s7.length ? s7 : null, l6 = { [r4.stacked]: this._hasIndicators };
    return n3("div", { class: this.classes(r4.base, l6) }, o3 || n3("div", { class: r4.message }, this.messages.noLegend), r7);
  }
  _selectSection(e11) {
    const t5 = e11.target.getAttribute("data-section-name");
    t5 && (this._selectedSectionName = t5);
  }
  _focusSection(e11) {
    switch (e11.key) {
      case "ArrowLeft":
      case "ArrowRight":
        this._switchSectionOnArrowPress(e11);
        break;
      case "Enter":
      case " ":
        this._selectSection(e11);
    }
  }
  _switchSectionOnArrowPress(e11) {
    const t5 = e11.key, s7 = "ArrowLeft" === t5 ? -1 : 1, i6 = e11.target.getAttribute("data-section-name"), a9 = this._sectionNames.indexOf(i6), r7 = this._sectionNames;
    let o3 = null;
    -1 !== a9 && (r7[a9 + s7] ? o3 = document.getElementById(r7[a9 + s7]) : "ArrowLeft" === t5 ? o3 = document.getElementById(r7[r7.length - 1]) : "ArrowRight" === t5 && (o3 = document.getElementById(r7[0])), o3 == null ? void 0 : o3.focus());
  }
  _watchForSectionChanges(e11) {
    if (this._generateSectionNames(), e11) {
      e11.forEach((e12) => {
        const s8 = `activeLayerInfo-${e12.layer.uid}-version-change`;
        this.removeHandles(s8), this._watchForSectionChanges(e12.children), this.addHandles(d(() => e12.version, () => this._generateSectionNames()), s8);
      });
      const s7 = "activeLayerInfos-collection-change";
      this.removeHandles(s7), this.addHandles(e11.on("change", () => this._watchForSectionChanges(e11)), s7);
    }
  }
  _generateSectionNames() {
    this._sectionNames.length = 0, this._selectedSectionName = null, this.activeLayerInfos && this.activeLayerInfos.forEach(this._generateSectionNamesForActiveLayerInfo, this);
  }
  _getSectionName(e11, t5, s7) {
    return `${this.id}${e11.uid}-type-${t5.type}-${s7}`;
  }
  _generateSectionNamesForActiveLayerInfo(e11) {
    e11.children.forEach(this._generateSectionNamesForActiveLayerInfo, this), e11.legendElements && e11.legendElements.forEach((t5, s7) => {
      this._sectionNames.push(this._getSectionName(e11.layer, t5, s7));
    });
  }
  _renderLegendForLayer(e11) {
    if (!e11.ready)
      return null;
    if (e11.children.length) {
      const t5 = e11.children.map((e12) => this._renderLegendForLayer(e12)).toArray();
      return n3("div", { class: this.classes(r4.service, r4.groupLayer), key: e11.layer.uid }, n3("div", { class: r4.serviceCaptionContainer }, e11.title), t5);
    }
    {
      const t5 = e11.legendElements;
      if (t5 && !t5.length)
        return null;
      const s7 = t5.some((e12) => "relationship-ramp" === e12.type), i6 = t5.map((t6, i7) => this._renderLegendForElement(t6, e11, i7, s7)).filter((e12) => !!e12);
      if (!i6.length)
        return null;
      const a9 = { [r4.groupLayerChild]: !!e11.parent };
      return n3("div", { class: this.classes(r4.service, a9), key: e11.layer.uid }, n3("div", { class: r4.serviceCaptionContainer }, n3("div", { class: r4.serviceCaptionText }, e11.title)), n3("div", { class: r4.serviceContent }, i6));
    }
  }
  _renderLegendForElement(e11, t5, s7, i6 = false, a9 = false) {
    var _a;
    const r7 = "color-ramp" === e11.type, o3 = "opacity-ramp" === e11.type, l6 = t5.layer;
    let p5 = null;
    if ("string" == typeof e11.title)
      p5 = e11.title;
    else if (e11.title) {
      const t6 = e11.title, s8 = o2(this.messages, t6, r7 || o3);
      p5 = t6.title ? `${t6.title} (${s8})` : s8;
    }
    const d3 = this._getSectionName(l6, e11, s7), m4 = this._hasIndicators && !a9 ? n3("div", null, n3(e7, { class: r4.carouselTitle, level: this.headingLevel }, t5.title), n3(e7, { class: r4.layerCaption, level: n4(this.headingLevel) }, p5)) : p5 ? n3(e7, { class: r4.layerCaption, level: this.headingLevel }, p5) : null, h6 = t5.effectList;
    let y5 = null;
    switch (e11.type) {
      case "symbol-table": {
        const s8 = e11.infos.map((s9, i7) => this._renderLegendForElementInfo(s9, t5, e11.legendType, i7)).filter((e12) => !!e12);
        if (s8.length) {
          const e12 = (_a = s8[0].properties.classes) == null ? void 0 : _a[r4.symbolRow], t6 = { [r4.labelContainer]: !e12 && !i6, [r4.relationshipLabelContainer]: i6 };
          y5 = n3("div", { class: this.classes(t6) }, s8);
        }
        break;
      }
      case "color-ramp":
      case "opacity-ramp":
      case "heatmap-ramp":
      case "stretch-ramp":
        y5 = this._renderLegendForRamp(e11, l6.opacity, h6);
        break;
      case "size-ramp":
        y5 = this._renderSizeRamp(e11, l6.opacity);
        break;
      case "pie-chart-ramp":
        y5 = this._renderPieChartRamp(e11);
        break;
      case "relationship-ramp":
        y5 = h2(e11, this.id, { opacity: l6.opacity, effectList: h6, ariaLabel: this.messages.previewRelationshipRampAriaLabel });
        break;
      case "univariate-above-and-below-ramp":
        y5 = this._renderUnivariateAboveAndBelowRamp(e11, l6.opacity, h6);
        break;
      case "univariate-color-size-ramp":
        y5 = this._renderUnivariateColorSizeRamp(e11, l6.opacity, h6);
    }
    if (!y5)
      return null;
    const g3 = n3("div", { "aria-labelledby": d3, class: r4.section, id: `${d3}-panel`, key: d3, role: "tabpanel", tabIndex: 0 }, [m4, y5]);
    return a9 || this._sectionMap.set(d3, g3), g3;
  }
  _renderPieChartRamp(e11) {
    return n3("div", { afterCreate: i5, bind: e11.preview, class: r4.pieChartRampPreview });
  }
  _renderUnivariateAboveAndBelowRamp(e11, t5, s7) {
    var _a;
    const { sizeRampElement: i6, colorRampElement: a9 } = d2(e11, t5, "horizontal");
    if (!i6)
      return null;
    const r7 = v5(i6, "full", true, "horizontal"), o3 = y4(i6, "above", true, "horizontal"), l6 = y4(i6, "below", true, "horizontal"), c4 = 12, g3 = (_a = this.messages) == null ? void 0 : _a.previewColorRampAriaLabel, v7 = h5(a9, { width: o3, height: c4, rampAlignment: "horizontal", opacity: t5, type: "above", effectList: s7, ariaLabel: g3 }), u12 = h5(a9, { width: l6, height: c4, rampAlignment: "horizontal", opacity: t5, type: "below", effectList: s7, ariaLabel: g3 }), b6 = u9(i6, "card"), _3 = i6.infos.map((e12) => e12.label), w5 = _3.length - 1, L3 = _3.map((e12, t6) => 0 === t6 || t6 === w5 ? n3("div", { key: t6 }, e12) : null), S3 = { display: "flex", flexDirection: "column" }, R2 = { display: "flex", flexDirection: "row" }, $3 = { marginTop: "3px", display: "flex" };
    v2(this.container) ? $3.marginRight = `${b6}px` : $3.marginLeft = `${b6}px`;
    const k4 = { width: `${r7}px`, display: "flex", flexDirection: "row", justifyContent: "space-between" };
    return n3("div", { class: r4.layerRow, key: "size-ramp-preview", styles: S3 }, n3("div", { class: this.classes(r4.symbolContainer, r4.sizeRampHorizontal), styles: R2 }, i6.infos.map((e12, t6) => n3("div", { afterCreate: i5, bind: e12.preview, class: r4.symbol, key: t6 }))), v7 ? n3("div", { class: r4.univariateAboveAndBelowColorRamp, key: "color-ramp-preview", styles: $3 }, n3("div", { afterCreate: i5, bind: v7 }), n3("div", { afterCreate: i5, bind: u12 })) : null, n3("div", { class: r4.layerInfo }, n3("div", { class: r4.rampLabelsContainer, styles: k4 }, L3)));
  }
  _renderUnivariateColorSizeRamp(e11, t5, s7) {
    var _a;
    const { sizeRampElement: i6, colorRampElement: a9 } = b5(e11, "horizontal");
    if (!i6)
      return null;
    const r7 = v5(i6, "full", false, "horizontal"), o3 = y4(i6, "full", false, "horizontal"), l6 = h5(a9, { width: o3, height: 12, rampAlignment: "horizontal", opacity: t5, type: "full", effectList: s7, ariaLabel: (_a = this.messages) == null ? void 0 : _a.previewColorRampAriaLabel }), c4 = u9(i6, "card"), p5 = i6.infos.length - 1, v7 = i6.infos.map((e12, t6) => 0 === t6 || t6 === p5 ? n3("div", { key: t6 }, e12.label) : null), u12 = { display: "flex", flexDirection: "column" }, b6 = { display: "flex", flexDirection: "row" }, _3 = { marginTop: "3px", display: "flex" };
    v2(this.container) ? _3.marginRight = `${c4}px` : _3.marginLeft = `${c4}px`;
    const w5 = { width: `${r7}px`, display: "flex", flexDirection: "row", justifyContent: "space-between" };
    return n3("div", { class: r4.layerRow, key: "size-ramp-preview", styles: u12 }, n3("div", { class: this.classes(r4.symbolContainer, r4.sizeRampHorizontal), styles: b6 }, i6.infos.map((e12, t6) => n3("div", { afterCreate: i5, bind: e12.preview, class: r4.symbol, key: t6 }))), n3("div", { class: r4.univariateAboveAndBelowColorRamp, key: "color-ramp-preview", styles: _3 }, n3("div", { afterCreate: i5, bind: l6 })), n3("div", { class: r4.layerInfo }, n3("div", { class: r4.rampLabelsContainer, styles: w5 }, v7)));
  }
  _renderLegendForElementInfo(e11, t5, s7, i6) {
    var _a, _b, _c, _d, _e2;
    const a9 = t5.layer;
    if (e11.type)
      return this._renderLegendForElement(e11, t5, i6, false, true);
    const r7 = u10(a9, s7), l6 = o2(this.messages, e11.label, false) ?? "";
    if (e11.preview) {
      if (!((_a = e11.symbol) == null ? void 0 : _a.type.includes("simple-fill"))) {
        if (!e11.label)
          return n3("div", { afterCreate: i5, bind: e11.preview, key: i6 });
        const t6 = { [r4.symbolCell]: this._hasIndicators };
        return n3("div", { class: this.classes(r4.layerRow, { [r4.symbolRow]: this._hasIndicators }), key: i6 }, n3("div", { afterCreate: i5, bind: e11.preview, class: this.classes(t6) }), n3("div", { class: this.classes(r4.imageLabel, { [r4.labelCell]: this._hasIndicators }) }, l6));
      }
      let s8 = 255, r8 = 255, c4 = 255, p5 = 0, d3 = 255, m4 = 255, h6 = 255, y5 = 0;
      const g3 = (_b = e11.symbol.color) == null ? void 0 : _b.a, v7 = (_d = (_c = e11.symbol.outline) == null ? void 0 : _c.color) == null ? void 0 : _d.a;
      g3 && (s8 = e11.symbol.color.r, r8 = e11.symbol.color.g, c4 = e11.symbol.color.b, p5 = e11.symbol.color.a * a9.opacity), v7 && (d3 = e11.symbol.outline.color.r, m4 = e11.symbol.outline.color.g, h6 = e11.symbol.outline.color.b, y5 = e11.symbol.outline.color.a * a9.opacity);
      const u12 = ((_e2 = e11.symbol.color) == null ? void 0 : _e2.isBright) ?? true, b6 = u12 ? "rgba(255, 255, 255, .6)" : "rgba(0, 0, 0, .6)", _3 = { background: g3 ? `rgba(${s8}, ${r8}, ${c4}, ${p5})` : "none", color: u12 ? "black" : "white", textShadow: `-1px -1px 0 ${b6},
                                              1px -1px 0 ${b6},
                                              -1px 1px 0 ${b6},
                                              1px 1px 0 ${b6}`, border: v7 ? `1px solid rgba(${d3}, ${m4}, ${h6}, ${y5})` : "none", filter: I2(t5.effectList) ?? void 0 };
      return n3("div", { class: r4.layerRow, key: i6 }, n3("div", { class: r4.labelElement, styles: _3 }, l6));
    }
    if (e11.src) {
      const t6 = this._renderImage(e11, a9, r7);
      return n3("div", { class: r4.layerRow, key: i6 }, t6, n3("div", { class: r4.imageLabel }, l6));
    }
  }
  _renderImage(e11, t5, s7) {
    const { label: i6, src: a9, opacity: r7 } = e11, o3 = { [r4.imageryLayerStretchedImage]: s7, [r4.symbol]: !s7 }, l6 = { opacity: `${null != r7 ? r7 : t5.opacity}` };
    return n3("img", { alt: o2(this.messages, i6, false), "aria-label": o2(this.messages, i6, false), border: 0, class: this.classes(o3), height: e11.height, src: a9, styles: l6, width: e11.width });
  }
  _renderSizeRampLines(e11) {
    const t5 = e11.infos, i6 = t5[0], a9 = t5[t5.length - 1], r7 = i6.symbol, o3 = this._hasIndicators, l6 = u3(i6.size + i6.outlineSize) * j, n6 = u3(a9.size + a9.outlineSize) * j, c4 = o3 ? l6 : l6 + 50 * j, p5 = o3 ? l6 / 2 + 50 * j : l6, d3 = F(r7), m4 = E(r7), h6 = document.createElement("canvas");
    h6.width = c4, h6.height = p5, h6.style.width = h6.width / j + "px", h6.style.height = h6.height / j + "px";
    const y5 = h6.getContext("2d");
    if (o3) {
      y5.beginPath();
      const e12 = 0, t6 = 0, s7 = c4 / 2 - n6 / 2, i7 = p5;
      y5.moveTo(e12, t6), y5.lineTo(s7, i7);
      const a10 = c4, r8 = 0, o4 = c4 / 2 + n6 / 2, l7 = p5;
      y5.moveTo(a10, r8), y5.lineTo(o4, l7);
    } else {
      y5.beginPath();
      const e12 = 0, t6 = p5 / 2 - n6 / 2, s7 = c4, i7 = 0;
      y5.moveTo(e12, t6), y5.lineTo(s7, i7);
      const a10 = 0, r8 = p5 / 2 + n6 / 2, o4 = c4, l7 = p5;
      y5.moveTo(a10, r8), y5.lineTo(o4, l7);
    }
    return y5.strokeStyle = A, y5.stroke(), n3("div", { afterCreate: i5, bind: h6, styles: o3 ? { display: "flex", marginTop: `-${d3 ? 0 : m4 ? l6 / 2 : 0}px`, marginBottom: `-${d3 ? n6 : m4 ? n6 / 2 : 0}px` } : { display: "flex", marginRight: `-${d3 ? 0 : m4 ? l6 / 2 : 0}px`, marginLeft: `-${d3 ? 0 : m4 ? n6 / 2 : 0}px` } });
  }
  _renderSizeRamp(e11, t5) {
    const s7 = e11.infos, i6 = s7[0].label, a9 = s7[s7.length - 1].label;
    let r7 = s7[0].preview, o3 = s7[s7.length - 1].preview;
    const l6 = this._hasIndicators, c4 = { "flex-direction": l6 ? "column" : "row-reverse" };
    r7 && (r7 = r7.cloneNode(true), r7.style.display = "flex"), o3 && (o3 = o3.cloneNode(true), o3.style.display = "flex");
    const p5 = { opacity: null != t5 ? `${t5}` : "" };
    return n3("div", { class: this.classes(r4.layerRow, { [r4.sizeRampRow]: l6 }) }, n3("div", { class: r4.rampLabel }, l6 ? i6 : a9), n3("div", { class: r4.sizeRampContainer, styles: c4 }, n3("div", { afterCreate: i5, bind: r7, class: r4.sizeRampPreview, styles: p5 }), this._renderSizeRampLines(e11), n3("div", { afterCreate: i5, bind: o3, class: r4.sizeRampContainer, styles: p5 })), n3("div", { class: r4.rampLabel }, l6 ? a9 : i6));
  }
  _getRampStopLabel(e11, t5) {
    switch (t5) {
      case "heatmap-ramp":
        return this.messages[e11.label];
      case "stretch-ramp":
        return a7(e11, this.messages);
      default:
        return e11.label;
    }
  }
  _renderLegendForRamp(e11, t5, s7) {
    const i6 = e11.infos, a9 = e11.type, l6 = "heatmap-ramp" === a9, c4 = i6.length - 1, p5 = k3, d3 = c4 > 2 && !l6 ? $ * c4 : I4, m4 = d3 + 20, h6 = 10, y5 = i6.slice(0).reverse(), g3 = y5.length - 1, v7 = y5.length % 2 != 0 ? y5[y5.length / 2 | 0] : null, f5 = v7 && n3("div", { class: r4.intervalSeparatorsContainer }, n3("div", { class: r4.intervalSeparator }, "|"), n3("div", { class: r4.rampLabel }, this._getRampStopLabel(v7, a9))), u12 = [[{ shape: { type: "path", path: `M0 ${p5 / 2} L${h6} 0 L${h6} ${p5} Z` }, fill: y5[0].color, stroke: { width: 0 } }, { shape: { type: "rect", x: h6, y: 0, width: d3, height: p5 }, fill: { type: "linear", x1: h6, y1: 0, x2: d3 + h6, y2: 0, colors: y5.map((e12, t6) => ({ color: e12.color, offset: l6 && "ratio" in e12 ? e12.ratio : t6 / c4 })) }, stroke: { width: 0 } }, { shape: { type: "path", path: `M${d3 + h6} 0 L${m4} ${p5 / 2} L${d3 + h6} ${p5} Z` }, fill: y5[g3].color, stroke: { width: 0 } }]], b6 = C(u12, m4, p5), _3 = { filter: I2(s7) ?? void 0, opacity: null == t5 ? void 0 : `${t5}` }, w5 = { justifyContent: "center" };
    return n3("div", { class: r4.layerRow, styles: w5 }, n3("div", { class: r4.rampLabel }, this._getRampStopLabel(y5[0], a9)), n3("div", { class: r4.symbolContainer }, n3("div", { styles: _3 }, b6), f5), n3("div", { class: r4.rampLabel }, this._getRampStopLabel(y5[g3], a9)));
  }
};
e([y()], T.prototype, "activeLayerInfos", void 0), e([y()], T.prototype, "headingLevel", void 0), e([y()], T.prototype, "layout", void 0), e([y(), e3("esri/widgets/Legend/t9n/Legend")], T.prototype, "messages", void 0), e([y(), e3("esri/t9n/common")], T.prototype, "messagesCommon", void 0), e([y({ readOnly: true })], T.prototype, "type", void 0), e([y()], T.prototype, "view", void 0), e([t2()], T.prototype, "_selectSection", null), T = e([a("esri.widgets.Legend.styles.Card")], T);
var B = T;

// node_modules/@arcgis/core/widgets/Legend/styles/ClassicCSS.js
var e10 = "esri-legend";
var a8 = { service: `${e10}__service`, label: `${e10}__service-label`, layer: `${e10}__layer`, groupLayer: `${e10}__group-layer`, groupLayerChild: `${e10}__group-layer-child`, layerTable: `${e10}__layer-table`, layerTableSizeRamp: `${e10}__layer-table--size-ramp`, layerChildTable: `${e10}__layer-child-table`, layerCaption: `${e10}__layer-caption`, layerBody: `${e10}__layer-body`, layerRow: `${e10}__layer-row`, layerCell: `${e10}__layer-cell`, layerInfo: `${e10}__layer-cell ${e10}__layer-cell--info`, imageryLayerStretchedImage: `${e10}__imagery-layer-image--stretched`, imageryLayerCellStretched: `${e10}__imagery-layer-cell--stretched`, imageryLayerInfoStretched: `${e10}__imagery-layer-info--stretched`, symbolContainer: `${e10}__layer-cell ${e10}__layer-cell--symbols`, symbol: `${e10}__symbol`, rampContainer: `${e10}__ramps`, sizeRamp: `${e10}__size-ramp`, colorRamp: `${e10}__color-ramp`, opacityRamp: `${e10}__opacity-ramp`, borderlessRamp: `${e10}__borderless-ramp`, rampTick: `${e10}__ramp-tick`, rampFirstTick: `${e10}__ramp-tick-first`, rampLastTick: `${e10}__ramp-tick-last`, rampLabelsContainer: `${e10}__ramp-labels`, rampLabel: `${e10}__ramp-label`, message: `${e10}__message`, univariateAboveAndBelowLabel: "esri-univariate-above-and-below-ramp__label" };

// node_modules/@arcgis/core/widgets/Legend/styles/Classic.js
var w4 = `${e10}__`;
var C2 = 24;
var R = { display: "flex", alignItems: "flex-start" };
var A2 = { marginLeft: "3px" };
var _2 = { display: "table-cell", verticalAlign: "middle" };
var j2 = class extends D {
  constructor(e11, s7) {
    super(e11, s7), this.activeLayerInfos = null, this.headingLevel = 3, this.messages = null, this.type = "classic";
  }
  render() {
    const e11 = this.activeLayerInfos, s7 = e11 && e11.toArray().map((e12) => this._renderLegendForLayer(e12)).filter((e12) => !!e12);
    return n3("div", null, s7 && s7.length ? s7 : n3("div", { class: a8.message }, this.messages.noLegend));
  }
  _renderLegendForLayer(e11) {
    if (!e11.ready)
      return null;
    const s7 = !!e11.children.length, t5 = `${w4}${e11.layer.uid}-version-${e11.version}`, a9 = e11.title ? e7({ level: this.headingLevel, class: this.classes(e6.heading, a8.label) }, e11.title) : null;
    if (s7) {
      const s8 = e11.children.map((e12) => this._renderLegendForLayer(e12)).toArray();
      return n3("div", { class: this.classes(a8.service, a8.groupLayer), key: t5 }, a9, s8);
    }
    {
      const s8 = e11.legendElements;
      if (s8 && !s8.length)
        return null;
      const i6 = s8.map((s9) => this._renderLegendForElement(s9, e11.layer, e11.effectList)).filter((e12) => !!e12);
      if (!i6.length)
        return null;
      const l6 = { [a8.groupLayerChild]: !!e11.parent };
      return n3("div", { class: this.classes(a8.service, l6), key: t5 }, a9, n3("div", { class: a8.layer }, i6));
    }
  }
  _renderLegendForElement(e11, s7, t5, a9) {
    const i6 = "color-ramp" === e11.type, o3 = "opacity-ramp" === e11.type, n6 = "size-ramp" === e11.type;
    let p5 = null;
    if ("symbol-table" === e11.type || n6) {
      const a10 = e11.infos.map((a11) => this._renderLegendForElementInfo(a11, s7, t5, n6, e11.legendType)).filter((e12) => !!e12);
      a10.length && (p5 = n3("div", { class: a8.layerBody }, a10));
    } else
      "color-ramp" === e11.type || "opacity-ramp" === e11.type || "heatmap-ramp" === e11.type || "stretch-ramp" === e11.type ? p5 = this._renderLegendForRamp(e11, s7.opacity) : "relationship-ramp" === e11.type ? p5 = h2(e11, this.id, { opacity: s7.opacity, effectList: t5, ariaLabel: this.messages.previewRelationshipRampAriaLabel }) : "pie-chart-ramp" === e11.type ? p5 = this._renderPieChartRamp(e11) : "univariate-above-and-below-ramp" === e11.type ? p5 = this._renderUnivariateAboveAndBelowRamp(e11, s7.opacity, t5) : "univariate-color-size-ramp" === e11.type && (p5 = this._renderUnivariateColorSizeRamp(e11, s7.opacity, t5));
    if (!p5)
      return null;
    const d3 = e11.title;
    let m4 = null;
    if ("string" == typeof d3)
      m4 = d3;
    else if (d3) {
      const e12 = o2(this.messages, d3, i6 || o3);
      m4 = l5(d3, i6 || o3) && d3.title ? `${d3.title} (${e12})` : e12;
    }
    const v7 = a9 ? a8.layerChildTable : a8.layerTable, h6 = m4 ? n3("div", { class: a8.layerCaption }, m4) : null, g3 = { [a8.layerTableSizeRamp]: n6 || !a9 };
    return n3("div", { class: this.classes(v7, g3) }, h6, p5);
  }
  _renderPieChartRamp(e11) {
    return n3("div", { afterCreate: i5, bind: e11.preview });
  }
  _renderUnivariateAboveAndBelowRamp(e11, s7, t5) {
    var _a;
    const { sizeRampElement: a9, colorRampElement: i6 } = d2(e11, s7);
    if (!a9)
      return null;
    const l6 = (_a = this.messages) == null ? void 0 : _a.previewColorRampAriaLabel, m4 = y4(a9, "above", true), c4 = y4(a9, "below", true), y5 = 12, h6 = h5(i6, { width: y5, height: m4, rampAlignment: "vertical", opacity: s7, type: "above", effectList: t5, ariaLabel: l6 }), g3 = h5(i6, { width: y5, height: c4, rampAlignment: "vertical", opacity: s7, type: "below", effectList: t5, ariaLabel: l6 }), u12 = u9(a9), b6 = a9.infos.map((e12) => e12.label), f5 = b6.map((e12, s8) => {
      const t6 = 2 === s8;
      return 0 === s8 ? n3("div", { class: e12 ? h6 ? a8.univariateAboveAndBelowLabel : a8.rampLabel : void 0, key: s8 }, e12) : t6 ? n3("div", null) : null;
    }), w5 = b6.length - 1, C3 = Math.floor(b6.length / 2), j3 = b6.map((e12, s8) => s8 === C3 || s8 === w5 ? n3("div", { class: e12 ? h6 ? a8.univariateAboveAndBelowLabel : a8.rampLabel : void 0, key: s8 }, e12) : null), $3 = { display: "table-cell", verticalAlign: "middle" }, I5 = { marginTop: `${u12}px` }, x = { height: `${m4}px` }, F2 = { height: `${c4}px` };
    return n3("div", { key: "univariate-above-and-below-ramp-preview", styles: R }, n3("div", { class: a8.layerBody }, a9.infos.map((e12, s8) => n3("div", { class: this.classes(a8.layerRow, a8.sizeRamp) }, n3("div", { afterCreate: i5, bind: e12.preview, class: a8.symbol, styles: $3 }), h6 || s8 % 2 != 0 ? null : n3("div", { class: a8.layerInfo }, b6[s8])))), h6 ? n3("div", { key: "color-ramp-preview", styles: I5 }, n3("div", { styles: A2 }, n3("div", { styles: _2 }, n3("div", { afterCreate: i5, bind: h6, class: a8.rampContainer })), n3("div", { styles: _2 }, n3("div", { class: a8.rampLabelsContainer, styles: x }, f5))), n3("div", { styles: A2 }, n3("div", { styles: _2 }, n3("div", { afterCreate: i5, bind: g3, class: a8.rampContainer })), n3("div", { styles: _2 }, n3("div", { class: a8.rampLabelsContainer, styles: F2 }, j3)))) : null);
  }
  _renderUnivariateColorSizeRamp(e11, s7, t5) {
    var _a;
    const { sizeRampElement: a9, colorRampElement: i6 } = b5(e11);
    if (!a9)
      return null;
    const l6 = u9(a9), o3 = 12, c4 = y4(a9, "full", false), y5 = h5(i6, { width: o3, height: c4, rampAlignment: "vertical", opacity: s7, type: "full", effectList: t5, ariaLabel: (_a = this.messages) == null ? void 0 : _a.previewColorRampAriaLabel }), h6 = a9.infos.length - 1, g3 = a9.infos.map((e12, s8) => 0 === s8 || s8 === h6 ? n3("div", { class: e12.label ? i6 ? a8.univariateAboveAndBelowLabel : a8.rampLabel : void 0, key: s8 }, e12.label) : null), u12 = { display: "table-cell", verticalAlign: "middle" }, b6 = { marginTop: `${l6}px` }, f5 = { height: `${c4}px` };
    return n3("div", { key: "univariate-above-and-below-ramp-preview", styles: R }, n3("div", { class: a8.layerBody }, a9.infos.map((e12) => n3("div", { class: this.classes(a8.layerRow, a8.sizeRamp) }, n3("div", { afterCreate: i5, bind: e12.preview, class: a8.symbol, styles: u12 })))), n3("div", { key: "color-ramp-preview", styles: b6 }, n3("div", { styles: A2 }, n3("div", { styles: _2 }, n3("div", { afterCreate: i5, bind: y5, class: a8.rampContainer })), n3("div", { styles: _2 }, n3("div", { class: a8.rampLabelsContainer, styles: f5 }, g3)))));
  }
  _renderLegendForRamp(e11, s7) {
    const t5 = e11.infos, a9 = "opacity-ramp" === e11.type, i6 = "heatmap-ramp" === e11.type, l6 = "stretch-ramp" === e11.type, o3 = e11.preview, n6 = a9 ? a8.opacityRamp : "";
    o3.className = `${a8.colorRamp} ${n6}`, null != s7 && (o3.style.opacity = s7.toString());
    const p5 = t5.map((e12) => n3("div", { class: e12.label ? a8.rampLabel : void 0 }, i6 ? this.messages[e12.label] || e12.label : l6 ? a7(e12, this.messages) : e12.label)), d3 = { width: `${C2}px` }, m4 = { height: o3.style.height };
    return n3("div", { class: a8.layerRow }, n3("div", { class: a8.symbolContainer, styles: d3 }, n3("div", { afterCreate: i5, bind: o3, class: a8.rampContainer })), n3("div", { class: a8.layerInfo }, n3("div", { class: a8.rampLabelsContainer, styles: m4 }, p5)));
  }
  _renderLegendForElementInfo(e11, s7, t5, a9, i6) {
    if (e11.type)
      return this._renderLegendForElement(e11, s7, t5, true);
    let l6 = null;
    const o3 = u10(s7, i6);
    if (e11.preview ? l6 = n3("div", { afterCreate: i5, bind: e11.preview, class: a8.symbol }) : e11.src && (l6 = this._renderImage(e11, s7, o3)), !l6)
      return null;
    const n6 = { [a8.imageryLayerInfoStretched]: o3 }, p5 = { [a8.imageryLayerInfoStretched]: o3, [a8.sizeRamp]: !o3 && a9 };
    return n3("div", { class: a8.layerRow }, n3("div", { class: this.classes(a8.symbolContainer, p5) }, l6), n3("div", { class: this.classes(a8.layerInfo, n6) }, o2(this.messages, e11.label, false) || ""));
  }
  _renderImage(e11, s7, t5) {
    const { label: a9, src: i6, opacity: l6 } = e11, o3 = { [a8.imageryLayerStretchedImage]: t5, [a8.symbol]: !t5 }, n6 = { opacity: `${null != l6 ? l6 : s7.opacity}` };
    return n3("img", { alt: o2(this.messages, a9, false), "aria-label": o2(this.messages, a9, false), border: 0, class: this.classes(o3), height: e11.height, src: i6, styles: n6, width: e11.width });
  }
};
e([y()], j2.prototype, "activeLayerInfos", void 0), e([y()], j2.prototype, "headingLevel", void 0), e([y(), e3("esri/widgets/Legend/t9n/Legend")], j2.prototype, "messages", void 0), e([y({ readOnly: true })], j2.prototype, "type", void 0), j2 = e([a("esri.widgets.Legend.styles.Classic")], j2);
var $2 = j2;

// node_modules/@arcgis/core/widgets/Legend.js
var v6 = { base: "esri-legend" };
var g2 = class extends D {
  constructor(e11, t5) {
    super(e11, t5), this.headingLevel = 3, this.messages = null, this.style = new $2(), this.viewModel = new I3();
  }
  initialize() {
    this.addHandles([v(() => this.view, "resize", () => this.scheduleRender()), v(() => this.activeLayerInfos, "change", () => this._refreshActiveLayerInfos(this.activeLayerInfos)), d(() => this.headingLevel, (e11) => {
      const { style: t5 } = this;
      t5 && (t5.headingLevel = e11);
    }), d(() => this.style, (e11, t5) => {
      t5 && e11 !== t5 && t5.destroy(), e11 && (e11.activeLayerInfos = this.activeLayerInfos, "card" === e11.type && (e11.view = this.view), e11.headingLevel = this.headingLevel);
    }, P)]);
  }
  get activeLayerInfos() {
    return this.viewModel.activeLayerInfos;
  }
  set activeLayerInfos(e11) {
    this.viewModel.activeLayerInfos = e11;
  }
  get basemapLegendVisible() {
    return this.viewModel.basemapLegendVisible;
  }
  set basemapLegendVisible(e11) {
    this.viewModel.basemapLegendVisible = e11;
  }
  get groundLegendVisible() {
    return this.viewModel.groundLegendVisible;
  }
  set groundLegendVisible(e11) {
    this.viewModel.groundLegendVisible = e11;
  }
  get hideLayersNotInCurrentView() {
    return this.viewModel.hideLayersNotInCurrentView;
  }
  set hideLayersNotInCurrentView(e11) {
    this.viewModel.hideLayersNotInCurrentView = e11;
  }
  get keepCacheOnDestroy() {
    return this.viewModel.keepCacheOnDestroy;
  }
  set keepCacheOnDestroy(e11) {
    this.viewModel.keepCacheOnDestroy = e11;
  }
  get respectLayerDefinitionExpression() {
    return this.viewModel.respectLayerDefinitionExpression;
  }
  set respectLayerDefinitionExpression(e11) {
    this.viewModel.respectLayerDefinitionExpression = e11;
  }
  get respectLayerVisibility() {
    return this.viewModel.respectLayerVisibility;
  }
  set respectLayerVisibility(e11) {
    this.viewModel.respectLayerVisibility = e11;
  }
  get icon() {
    return "legend";
  }
  set icon(e11) {
    this._overrideIfSome("icon", e11);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e11) {
    this._overrideIfSome("label", e11);
  }
  get layerInfos() {
    return this.viewModel.layerInfos;
  }
  set layerInfos(e11) {
    this.viewModel.layerInfos = e11;
  }
  castStyle(e11) {
    if (e11 instanceof B || e11 instanceof $2)
      return e11;
    if ("string" == typeof e11)
      return "card" === e11 ? new B() : new $2();
    if (e11 && "string" == typeof e11.type) {
      const t5 = { ...e11 };
      delete t5.type;
      return new ("card" === e11.type ? B : $2)(t5);
    }
    return new $2();
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e11) {
    this.viewModel.view = e11;
  }
  render() {
    return n3("div", { class: this.classes(v6.base, e6.widget, this.style instanceof $2 ? e6.panel : null) }, this.style.render());
  }
  _refreshActiveLayerInfos(e11) {
    e11.forEach((e12) => {
      this.removeHandles(`version_${e12.layer.uid}`), this._renderOnActiveLayerInfoChange(e12);
    }), this.scheduleRender();
  }
  _renderOnActiveLayerInfoChange(e11) {
    const r7 = d(() => e11.version, () => this.scheduleRender());
    this.addHandles(r7, `version_${e11.layer.uid}`);
    const o3 = v(() => e11.children, "change", () => e11.children.forEach((e12) => this._renderOnActiveLayerInfoChange(e12)), P);
    this.addHandles(o3, `version_${e11.layer.uid}`), e11.children.forEach((e12) => this._renderOnActiveLayerInfoChange(e12));
  }
};
e([y()], g2.prototype, "activeLayerInfos", null), e([y()], g2.prototype, "basemapLegendVisible", null), e([y()], g2.prototype, "groundLegendVisible", null), e([y()], g2.prototype, "headingLevel", void 0), e([y()], g2.prototype, "hideLayersNotInCurrentView", null), e([y()], g2.prototype, "keepCacheOnDestroy", null), e([y()], g2.prototype, "respectLayerDefinitionExpression", null), e([y()], g2.prototype, "respectLayerVisibility", null), e([y()], g2.prototype, "icon", null), e([y()], g2.prototype, "label", null), e([y()], g2.prototype, "layerInfos", null), e([y(), e3("esri/widgets/Legend/t9n/Legend")], g2.prototype, "messages", void 0), e([y()], g2.prototype, "style", void 0), e([s("style")], g2.prototype, "castStyle", null), e([y()], g2.prototype, "view", null), e([y()], g2.prototype, "viewModel", void 0), g2 = e([a("esri.widgets.Legend")], g2);
var u11 = g2;
export {
  u11 as default
};
//# sourceMappingURL=Legend-SFY6OVS5.js.map
