import {
  d as d2,
  h as h2
} from "./chunk-OMRW2J7M.js";
import {
  te
} from "./chunk-YYI7TRI3.js";
import "./chunk-RQW2N53A.js";
import "./chunk-LHVWC4RW.js";
import "./chunk-GN2OLKIL.js";
import "./chunk-5WKN6K5Z.js";
import "./chunk-WCBHO6BH.js";
import "./chunk-3YZBQBZ5.js";
import "./chunk-RFBA77K3.js";
import "./chunk-46T3D2EU.js";
import "./chunk-RYF27IO3.js";
import "./chunk-5MKTGTC4.js";
import "./chunk-7UDCRD5C.js";
import "./chunk-B3GKRGWX.js";
import "./chunk-FN7LLNVA.js";
import "./chunk-BR3PF5YD.js";
import {
  T
} from "./chunk-KVZT4PEH.js";
import "./chunk-VIRGWB3Z.js";
import {
  E,
  I as I2,
  m as m2
} from "./chunk-QCUK7T7Y.js";
import {
  e as e6
} from "./chunk-2NDIVJST.js";
import "./chunk-637XZX4A.js";
import {
  C
} from "./chunk-PMFQ2A2V.js";
import "./chunk-5IITWVGY.js";
import "./chunk-HHAESKQ6.js";
import "./chunk-5INQRMFY.js";
import "./chunk-XP3ABGGF.js";
import "./chunk-TACIE3AK.js";
import "./chunk-KYKKN5I4.js";
import "./chunk-4MJOJUFR.js";
import {
  n
} from "./chunk-SPU25K6A.js";
import "./chunk-P257AUOX.js";
import {
  u as u3
} from "./chunk-NGAYW4TW.js";
import {
  u as u2
} from "./chunk-BEXFYHUM.js";
import {
  _
} from "./chunk-K3DEHPDR.js";
import "./chunk-I6RS7YIS.js";
import "./chunk-BHOYA5LV.js";
import {
  m
} from "./chunk-PYZXYYZX.js";
import {
  j
} from "./chunk-ALYZBARC.js";
import "./chunk-PGADGS3I.js";
import "./chunk-KWLN46JY.js";
import "./chunk-7KNPDPFB.js";
import "./chunk-M6P775BS.js";
import "./chunk-J5F4VILS.js";
import "./chunk-KSBIR2KG.js";
import {
  N
} from "./chunk-XVQGALI7.js";
import "./chunk-XFQIXBHG.js";
import "./chunk-MVSN2HAN.js";
import "./chunk-7A5N7G2Z.js";
import "./chunk-J54I3TB7.js";
import "./chunk-OE52KVBM.js";
import "./chunk-L577YNYZ.js";
import "./chunk-GL5TSVQL.js";
import "./chunk-TYYN3C37.js";
import "./chunk-OBABKQ6S.js";
import "./chunk-4GGEQMYI.js";
import "./chunk-A47N2JLN.js";
import "./chunk-ZPC74XHC.js";
import "./chunk-IVGJRGD2.js";
import "./chunk-JA2AO4PC.js";
import "./chunk-MTLWPXQD.js";
import "./chunk-ZEMG7GKC.js";
import "./chunk-ECIXBYOQ.js";
import "./chunk-5MQ4HAUX.js";
import "./chunk-2DATALUO.js";
import "./chunk-QFKFOAJ6.js";
import "./chunk-LOPMLCHC.js";
import "./chunk-JIR2YP6A.js";
import "./chunk-LANUNBDP.js";
import "./chunk-JBF6CULO.js";
import "./chunk-DRCNNCTI.js";
import "./chunk-MKOOEINB.js";
import "./chunk-JKOHBDRD.js";
import "./chunk-MDSRD3WV.js";
import "./chunk-3DFMDDMO.js";
import "./chunk-4BCSYJOQ.js";
import "./chunk-GMUCR2DJ.js";
import "./chunk-HBRJJENW.js";
import "./chunk-VHY5K2VE.js";
import "./chunk-6ENXMQPD.js";
import "./chunk-FV43HSGW.js";
import "./chunk-ZR7OV2EH.js";
import "./chunk-U76EZJUZ.js";
import "./chunk-MEEG7XMI.js";
import "./chunk-LJULTBAY.js";
import "./chunk-FD4DXBZA.js";
import "./chunk-6MGK5WBT.js";
import "./chunk-HSOVRETF.js";
import "./chunk-CPZW2LMK.js";
import "./chunk-QR7J3YDY.js";
import "./chunk-GO2OGJDG.js";
import "./chunk-UYMREM3D.js";
import "./chunk-4YGBWYMD.js";
import "./chunk-JTUYA5FE.js";
import "./chunk-UNTQATE2.js";
import "./chunk-5YY6NZNY.js";
import "./chunk-7MYYCSEB.js";
import "./chunk-ESK2YRQM.js";
import "./chunk-QIEXJLRX.js";
import "./chunk-YJFPDMSR.js";
import "./chunk-FFG7BDAP.js";
import {
  h
} from "./chunk-I4SHZ6P5.js";
import "./chunk-QYDOVVH7.js";
import "./chunk-YSXT2SWC.js";
import "./chunk-YH3SFFF7.js";
import "./chunk-JBU54P54.js";
import "./chunk-H7T5AB2S.js";
import {
  D
} from "./chunk-WKVHVZW2.js";
import {
  I
} from "./chunk-KSZESDGM.js";
import "./chunk-CHJMCUAV.js";
import "./chunk-5P74D2TG.js";
import "./chunk-33LWZO2E.js";
import "./chunk-YT66FIGM.js";
import "./chunk-3IDXRFXE.js";
import "./chunk-RLZYC2LS.js";
import "./chunk-WEER6QME.js";
import "./chunk-TXLJQAAN.js";
import "./chunk-YF5E2R37.js";
import "./chunk-IRL6OOVK.js";
import "./chunk-3AIILHI5.js";
import "./chunk-6MBDB46F.js";
import "./chunk-7JR6S3WL.js";
import "./chunk-CJNDQ2LH.js";
import "./chunk-B4E4X2TN.js";
import "./chunk-HS6YI5DU.js";
import "./chunk-CDBOQCLE.js";
import "./chunk-RSRUEM5U.js";
import "./chunk-HFJMEXIX.js";
import "./chunk-VYSGSKHB.js";
import "./chunk-DGJJJ2DD.js";
import "./chunk-UAFQMHYI.js";
import "./chunk-IDPLBNJX.js";
import "./chunk-ZHAZR5C3.js";
import "./chunk-P4MNTMCZ.js";
import "./chunk-BSPKLAHD.js";
import "./chunk-VS6AHHIY.js";
import "./chunk-GPWQGIYV.js";
import "./chunk-WZJNHZ6H.js";
import "./chunk-XMYPMIYH.js";
import "./chunk-FQLGRQKL.js";
import "./chunk-YBPOKK6D.js";
import "./chunk-LGMX4E7L.js";
import {
  t
} from "./chunk-42DUJ2CX.js";
import "./chunk-B35SNV2V.js";
import "./chunk-Z2F5OKVA.js";
import "./chunk-UQA6M3KF.js";
import {
  e as e5
} from "./chunk-GLF3KRAL.js";
import "./chunk-ZLQTPFTL.js";
import "./chunk-WIVZ7SMV.js";
import "./chunk-O76UVYOO.js";
import "./chunk-QCMUK3QA.js";
import "./chunk-HZSGATFT.js";
import "./chunk-KNMQQRV7.js";
import "./chunk-N5GQOIDP.js";
import {
  e as e4
} from "./chunk-NFB6O77E.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-SCHTG6ZQ.js";
import "./chunk-3VMVD66K.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-326OSIM5.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VTH4DAHQ.js";
import "./chunk-CZSTCON2.js";
import "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import {
  c
} from "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import {
  W2 as W
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  A,
  P,
  d,
  v
} from "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S as S2,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  S,
  e as e3,
  k,
  l,
  o
} from "./chunk-JGDJR5EV.js";
import {
  e as e2,
  u
} from "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  s
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/views/3d/layers/support/MediaLayerInteraction.js
var u4 = Symbol();
var y2 = Symbol();
var g = 1;
var f = 10;
var v2 = class extends S2 {
  get updating() {
    return this._updatingHandles.updating;
  }
  get _preferredInteractionTool() {
    var _a;
    return ((_a = this.options) == null ? void 0 : _a.tool) ?? "transform";
  }
  get _toolType() {
    switch (this._preferredInteractionTool) {
      case "transform":
        return "transform-3d";
      case "reshape":
        return "reshape-3d";
    }
  }
  get _validatedSelectedElement() {
    const e8 = this.selectedElement;
    if (!e8)
      return null;
    const { layer: { source: t2 } } = this;
    return t2 ? "hasElement" in t2 ? t2.hasElement(e8) ? e8 : null : t2 === e8 ? e8 : null : null;
  }
  constructor(e8) {
    super(e8), this.enabled = false, this._updatingHandles = new h(), this._isOpacityToggled = false, this._factor = g, this._tool = null, this._object = null, this._createToolAbortController = null, this._onPointerMove = k(async (e9) => {
      const t2 = await this._updatingHandles.addPromise(this._findElementAtScreenPoint(e9));
      this.destroyed || (this.removeHandles(y2), t2 && t2 !== this.selectedElement && (this.view.cursor = "pointer", this.addHandles(e3(() => this.view.cursor = null), y2)));
    });
  }
  destroy() {
    this._createToolAbortController = e2(this._createToolAbortController);
  }
  initialize() {
    this.addHandles([l(this._updatingHandles), this._updatingHandles.add(() => this.enabled, (e8) => this._enableDisable(e8), P), this._updatingHandles.add(() => this._preferredInteractionTool, (e8) => this._preferredInteractionToolChanged(e8))]);
  }
  _enableDisable(e8) {
    if (!e8)
      return void this.removeHandles(u4);
    this._dynamicImports();
    const { view: t2 } = this, o2 = new h2();
    o2.add(d2.undo, () => {
      var _a, _b, _c;
      (_b = (_a = this._object) == null ? void 0 : _a.operations) == null ? void 0 : _b.undo(), (_c = this._object) == null ? void 0 : _c.emit("modified-externally");
    }), o2.add(d2.redo, () => {
      var _a, _b, _c;
      (_b = (_a = this._object) == null ? void 0 : _a.operations) == null ? void 0 : _b.redo(), (_c = this._object) == null ? void 0 : _c.emit("modified-externally");
    }), o2.addToggle(d2.preserveAspectRatio, (e9) => {
      var _a;
      "transform-3d" === ((_a = this._tool) == null ? void 0 : _a.type) && (this._tool.preserveAspectRatio = "key-down" === e9.type);
    }), o2.addToggle(d2.rotateIncrements, (e9) => {
      var _a;
      "transform-3d" === ((_a = this._tool) == null ? void 0 : _a.type) && (this._tool.snapRotation = "key-down" === e9.type);
    }), o2.add(d2.toggleOpacity, () => {
      var _a;
      const e9 = (_a = this._object) == null ? void 0 : _a.element;
      e9 && (e9.opacity *= this._isOpacityToggled ? 2 : 0.5, this._isOpacityToggled = !this._isOpacityToggled);
    }), o2.add(d2.moveUp, () => this._move(0, this._factor)), o2.add(d2.moveDown, () => this._move(0, -this._factor)), o2.add(d2.moveRight, () => this._move(this._factor, 0)), o2.add(d2.moveLeft, () => this._move(-this._factor, 0)), o2.addToggle(d2.factorModifier, (e9) => this._factor = "key-down" === e9.type ? f : g), this._isOpacityToggled = false, this.addHandles([o2.register(t2, _.TOOL), e3(() => {
      this._isOpacityToggled && this.selectedElement && (this.selectedElement.opacity *= 2, this._isOpacityToggled = false);
    }), t2.on("immediate-click", (e9) => this._onClick(e9), _.TOOL), t2.on("pointer-move", (e9) => this._onPointerMove(e9).catch(() => {
    }), _.TOOL), this._updatingHandles.add(() => this._validatedSelectedElement, (e9, t3) => {
      t3 && e9 !== t3 && this._isOpacityToggled && (t3.opacity *= 2, this._isOpacityToggled = false), this._selectedElementChanged(e9);
    }, P), e3(() => {
      t2.cursor = null, this._removeTool();
    })], u4);
  }
  async _onClick(e8) {
    await this._updatingHandles.addPromise(e8.async(async () => {
      const t2 = await this._findElementAtScreenPoint(e8);
      this.destroyed || (t2 && e8.stopPropagation(), this.selectedElement = t2, this.selectedElement && (this.view.cursor = null));
    }));
  }
  async _selectedElementChanged(e8) {
    var _a;
    (e8 == null ? void 0 : e8.georeference) ? ((_a = this._object) == null ? void 0 : _a.element) !== e8 && await this._updatingHandles.addPromise(this._recreateTool()) : this._removeTool();
  }
  async _recreateTool() {
    this._createToolAbortController = e2(this._createToolAbortController), this._removeTool();
    const e8 = this._validatedSelectedElement;
    if (!e8)
      return;
    const t2 = new AbortController();
    this._createToolAbortController = t2;
    const { ManipulatedObject3DMediaElement: o2, ExtentTransformTool: n2, ReshapeTool3D: a2 } = await this._dynamicImports();
    if (t2.signal.aborted)
      return;
    const { view: l2, layer: d3, _toolType: c2 } = this;
    switch (this._object = new o2({ view: l2, layer: d3, element: e8, tool: this._preferredInteractionTool }), c2) {
      case "transform-3d":
        {
          this._tool = new n2({ view: l2, object: this._object });
          const e9 = l2.inputManager;
          e9.isModifierKeyDown(d2.rotateIncrements.key) && (this._tool.snapRotation = true), e9.isModifierKeyDown(d2.preserveAspectRatio.key) && (this._tool.preserveAspectRatio = true);
        }
        break;
      case "reshape-3d":
        this._tool = new a2({ view: l2, object: this._object, enableMidpoints: false, enableZShape: false });
    }
    this.addHandles([e3(() => {
      this._object = u(this._object), this._tool && (l2.tools.remove(this._tool), this._tool = null);
    })], this._tool), l2.addAndActivateTool(this._tool);
  }
  _preferredInteractionToolChanged(e8) {
    const { _tool: t2 } = this;
    if (!t2)
      return;
    if (this._toolType !== t2.type)
      return void this._updatingHandles.addPromise(this._recreateTool());
    const { _object: o2 } = this;
    o2 && (o2.tool = e8);
  }
  async _dynamicImports() {
    const [{ ManipulatedObject3DMediaElement: e8 }, { ExtentTransformTool: t2, ReshapeTool3D: o2 }] = await Promise.all([import("./ManipulatedObject3DMediaElement-YRLSSC3V.js"), import("./editingTools-QRJGL4QH.js")]);
    return { ManipulatedObject3DMediaElement: e8, ExtentTransformTool: t2, ReshapeTool3D: o2 };
  }
  async _findElementAtScreenPoint(e8) {
    const t2 = (await this.view.hitTest(e8, { include: [this.layer] })).results[0];
    return "media" === (t2 == null ? void 0 : t2.type) ? t2.element : null;
  }
  _removeTool() {
    this._tool && this.removeHandles(this._tool);
  }
  _move(e8, t2) {
    const { view: o2, _object: i } = this, s3 = i == null ? void 0 : i.operations;
    if (!s3)
      return;
    const r = o2.overlayPixelSizeInMapUnits(o2.pointsOfInterest.focus.location) * W(o2.spatialReference) / W(s3.data.spatialReference);
    s3.move(r * e8, r * t2, 0), i.emit("modified-externally");
  }
};
e([y({ constructOnly: true })], v2.prototype, "view", void 0), e([y({ constructOnly: true })], v2.prototype, "layer", void 0), e([y()], v2.prototype, "selectedElement", void 0), e([y()], v2.prototype, "enabled", void 0), e([y()], v2.prototype, "options", void 0), e([y()], v2.prototype, "updating", null), e([y()], v2.prototype, "_preferredInteractionTool", null), e([y()], v2.prototype, "_validatedSelectedElement", null), v2 = e([a("esri.views.3d.layers.support.MediaLayerInteraction")], v2);

// node_modules/@arcgis/core/views/3d/layers/support/MediaLayerInteractionOptions.js
var e7 = class extends S2 {
  constructor() {
    super(...arguments), this.tool = "transform";
  }
};
e([y()], e7.prototype, "tool", void 0), e7 = e([a("esri.views.3d.layers.support.MediaLayerInteractionOptions")], e7);

// node_modules/@arcgis/core/views/layers/MediaLayerView.js
var s2 = (s3) => {
  let i = class extends s3 {
    constructor(...e8) {
      super(...e8), this.layer = null, this.interactive = false, this.interactionOptions = new e7(), this.selectedElement = null;
    }
  };
  return e([y()], i.prototype, "layer", void 0), e([y()], i.prototype, "interactive", void 0), e([y()], i.prototype, "interactionOptions", void 0), e([y()], i.prototype, "selectedElement", void 0), i = e([a("esri.views.layers.MediaLayerView")], i), i;
};

// node_modules/@arcgis/core/views/3d/layers/MediaLayerView3D.js
var I3 = class extends n(s2(u3)) {
  get interactive() {
    return this._interaction.enabled;
  }
  set interactive(e8) {
    this._interaction && (this._interaction.enabled = e8);
  }
  get selectedElement() {
    return this._interaction.selectedElement;
  }
  set selectedElement(e8) {
    this._interaction && (this._interaction.selectedElement = e8);
  }
  constructor(e8) {
    super(e8), this.type = "media-3d", this.drapeSourceType = e6.RasterImage, this.updatePolicy = C.ASYNC, this._uidToElement = /* @__PURE__ */ new Map(), this._renderedElements = /* @__PURE__ */ new Map(), this._lastDrapingExtent = null, this._update = k(async (e9, t3, r2) => {
      const i = await this._collectMediaElements(e9, t3, r2);
      this._synchronizeRenderElements(i);
    }, 0);
    const { view: t2, layer: r } = e8;
    this._interaction = new v2({ view: t2, layer: r }), this.addHandles(d(() => this.interactionOptions, (e9) => this._interaction.options = e9, A));
  }
  initialize() {
    const { view: e8, layer: t2 } = this;
    this._renderer = e8.basemapTerrain.overlayManager.registerGeometryDrapeSource(this);
    const i = () => this._updateWithLastDrapingExtent();
    this.addHandles([e3(() => e8.basemapTerrain.overlayManager.unregisterDrapeSource(this)), v(() => t2.effectiveSource, "change", i), v(() => t2.effectiveSource, "refresh", i)]), this._updatingHandles.add(() => this.suspended, i);
  }
  setDrapingExtent(e8, t2) {
    this._lastDrapingExtent = { overlays: e8, spatialReference: t2 }, this._updateWithLastDrapingExtent();
  }
  getHit(e8) {
    const t2 = this._uidToElement.get(e8);
    return t2 ? { type: "media", element: t2, layer: this.layer } : null;
  }
  canResume() {
    if (!super.canResume())
      return false;
    const { minScale: e8, maxScale: t2 } = this.layer.effectiveScaleRange;
    if (u2(e8, t2)) {
      const r = this.view.scale;
      if (r < t2 || e8 > 0 && r > e8)
        return false;
    }
    return true;
  }
  isUpdating() {
    return super.isUpdating() || this._interaction.updating;
  }
  _updateWithLastDrapingExtent() {
    if (null == this._lastDrapingExtent || this.suspended)
      return void (this._renderer && this._synchronizeRenderElements(/* @__PURE__ */ new Set()));
    const { overlays: e8, spatialReference: t2 } = this._lastDrapingExtent;
    this._updatingHandles.addPromise(this._update(e8, t2).catch(() => {
    }));
  }
  async _collectMediaElements(e8, t2, r) {
    const i = this.layer.effectiveSource;
    return null == i ? /* @__PURE__ */ new Set() : new Set((await Promise.all(e8.map((e9) => i.queryElements(c(e9.extent, t2), { signal: r })))).flat());
  }
  _synchronizeRenderElements(e8) {
    this._synchronizeRenderElementsRemove(e8), this._synchronizeRenderElementsAdd(e8);
  }
  _synchronizeRenderElementsRemove(e8) {
    const t2 = [];
    this._renderedElements.forEach((r, i) => {
      e8.has(i) || (null != r.renderData && t2.push(r.renderData.renderGeometry), this._removeElement(i, r), this.emit("element-render-changed", { element: i }));
    });
  }
  _synchronizeRenderElementsAdd(e8) {
    for (const t2 of e8)
      this._renderedElements.has(t2) || this._createRenderElement(t2);
  }
  _removeElement(e8, { renderData: t2, handle: r }) {
    this._destroyRenderData(e8, t2), this._renderedElements.delete(e8), this._uidToElement.delete(e8.uid), r.remove();
  }
  async _createRenderElement(e8) {
    const t2 = new m({ spatialReference: this.view.spatialReference, element: e8 }), r = { renderData: null, handle: o([this._updatingHandles.add(() => e8.opacity, (e9) => {
      null != r.renderData && r.renderData.material.setParameters({ opacity: e9 });
    }), this._updatingHandles.add(() => t2.coords, () => {
      null != r.renderData ? this._updateGeometry(t2, r, r.renderData) : this._initializeRenderData(t2, r);
    }), this._updatingHandles.add(() => e8.content, () => this._initializeRenderData(t2, r)), l(t2)]) };
    this._renderedElements.set(e8, r), this._uidToElement.set(e8.uid, e8), this._updatingHandles.addPromise(e8.load().catch(() => {
    })), this._initializeRenderData(t2, r);
  }
  _initializeRenderData(e8, t2) {
    const { coords: r, element: i } = e8, { contentWidth: n2, contentHeight: s3 } = i;
    if (null == r || null == i.content)
      return void (t2.renderData = this._destroyRenderData(i, t2.renderData));
    if (null != t2.renderData)
      return;
    const a2 = this._createTexture(i.content), d3 = a2.load(this.view._stage.renderView.renderingContext);
    this.view._stage.add(a2), S(d3) && this._updatingHandles.addPromise(d3);
    const l2 = new T({ initTextureTransparent: true, textureId: a2.id, opacity: i.opacity, transparent: true, perspectiveInterpolation: true }), m3 = this._getPositionAttributeArray(r), c2 = [0, 0, 1, 0, 1, 1, 0, 1], p = this._getPerspectiveDivideAttributeArray(m3, n2, s3), h3 = [0, 1, 2, 0, 2, 3], u5 = new I(l2, [[e5.POSITION, new t(m3, h3, 3, true)], [e5.UV0, new t(c2, h3, 2, true)], [e5.PERSPECTIVEDIVIDE, new t(p, h3, 1, true)]]), y3 = new m2(u5, { layerUid: this.layer.uid, graphicUid: i.uid });
    this._renderer.addGeometries([y3], E.ADD), t2.renderData = { renderGeometry: y3, texture: a2, material: l2 }, this.emit("element-render-changed", { element: i });
  }
  _updateGeometry(e8, t2, r) {
    const { coords: i, element: n2 } = e8;
    if (null == i || null == n2.content)
      return void (t2.renderData = this._destroyRenderData(n2, t2.renderData));
    const s3 = this._getPositionAttributeArray(i);
    r.renderGeometry.geometry.setAttributeData(e5.POSITION, s3);
    const a2 = this._getPerspectiveDivideAttributeArray(s3, n2.contentWidth, n2.contentHeight);
    r.renderGeometry.geometry.setAttributeData(e5.PERSPECTIVEDIVIDE, a2), r.renderGeometry.geometry.invalidateBoundingInfo(), this._renderer.modifyGeometries([r.renderGeometry], I2.GEOMETRY), this.emit("element-render-changed", { element: n2 });
  }
  _getPositionAttributeArray(e8) {
    const [t2, r, i, n2] = e8.rings[0];
    return [t2[0], t2[1], te, n2[0], n2[1], te, i[0], i[1], te, r[0], r[1], te];
  }
  _getPerspectiveDivideAttributeArray(e8, t2, r) {
    j(H, [0, 0, t2, 0, t2, r, 0, r], [e8[0], e8[1], e8[3], e8[4], e8[6], e8[7], e8[9], e8[10]]);
    const i = H[6] / H[8] * t2, n2 = H[7] / H[8] * r;
    return [1, 1 + i, 1 + i + n2, 1 + n2];
  }
  _destroyRenderData(e8, t2) {
    if (null == t2)
      return null;
    const r = t2.texture;
    return r.unload(), this.view._stage.remove(r), this._renderer.removeGeometries([t2.renderGeometry], E.REMOVE), this.emit("element-render-changed", { element: e8 }), null;
  }
  _createTexture(e8) {
    const r = e8 instanceof HTMLImageElement ? e8.naturalWidth : e8.width, i = e8 instanceof HTMLImageElement ? e8.naturalHeight : e8.height;
    if ("getFrame" in e8)
      throw new s("media-layer-view-3d", "animation is not supported");
    return new N(e8, { wrap: { s: D.CLAMP_TO_EDGE, t: D.CLAMP_TO_EDGE }, preMultiplyAlpha: true, width: r, height: i, mipmap: true, updateCallback: () => this.view.basemapTerrain.overlayManager.setDrawTexturesDirty() });
  }
  get test() {
    const e8 = this;
    return { get numberOfElements() {
      return e8._renderedElements.size;
    } };
  }
};
e([y({ readOnly: true })], I3.prototype, "type", void 0), e([y()], I3.prototype, "layer", void 0), e([y()], I3.prototype, "interactive", null), e([y()], I3.prototype, "selectedElement", null), I3 = e([a("esri.views.3d.layers.MediaLayerView3D")], I3);
var H = e4();
var L = I3;
export {
  L as default
};
//# sourceMappingURL=MediaLayerView3D-4JDCD4R2.js.map
