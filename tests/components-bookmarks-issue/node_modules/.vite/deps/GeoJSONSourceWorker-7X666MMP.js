import {
  E,
  I,
  N
} from "./chunk-NGNPSQZK.js";
import {
  d as d2,
  f,
  j as j2,
  p as p2,
  y
} from "./chunk-C6M5UQQR.js";
import "./chunk-E5PVY3UF.js";
import {
  m
} from "./chunk-PGOAFABD.js";
import "./chunk-63NZBHDP.js";
import {
  $
} from "./chunk-BNDDKY53.js";
import "./chunk-BECEVYQR.js";
import "./chunk-S243OWEZ.js";
import "./chunk-QYDOVVH7.js";
import "./chunk-YSXT2SWC.js";
import {
  j,
  x
} from "./chunk-DGRFM5OL.js";
import "./chunk-AOAT6HYL.js";
import "./chunk-YH3SFFF7.js";
import "./chunk-JBU54P54.js";
import "./chunk-UQEUYEWU.js";
import "./chunk-5LIYYE75.js";
import {
  a,
  i as i3,
  o
} from "./chunk-ZECONJNT.js";
import "./chunk-UWZ4CRJK.js";
import {
  et,
  nt,
  ot,
  rt,
  tt
} from "./chunk-TLTAGTBA.js";
import "./chunk-2QPP5AGU.js";
import "./chunk-2C26DRKK.js";
import "./chunk-M4RFJU4F.js";
import "./chunk-WVKWBQ7C.js";
import "./chunk-RK2U53CD.js";
import "./chunk-YPY24RRU.js";
import "./chunk-O7RKI2QW.js";
import "./chunk-BMB27ANS.js";
import "./chunk-3FOBZIUS.js";
import "./chunk-JKLFCJPR.js";
import {
  Z
} from "./chunk-QNG4TY7L.js";
import "./chunk-RW5QMWE6.js";
import "./chunk-LGMX4E7L.js";
import "./chunk-Y546C2O5.js";
import "./chunk-IYKBAIQE.js";
import "./chunk-BDRVHR2K.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import {
  i as i2
} from "./chunk-6NLHKXEW.js";
import "./chunk-G7YFDDME.js";
import "./chunk-PCKG3UTS.js";
import "./chunk-3VMVD66K.js";
import "./chunk-I2X6UR6L.js";
import "./chunk-HV2SFSJW.js";
import "./chunk-SBARCIDP.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-326OSIM5.js";
import "./chunk-HTKSTTSR.js";
import {
  H,
  K
} from "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import {
  p
} from "./chunk-J7AMTUNG.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-SLQA5YBV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import {
  i
} from "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-PWPXYWXV.js";
import "./chunk-545NO6M2.js";
import "./chunk-5LSHHVQ5.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import {
  G,
  g2 as g
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import {
  U
} from "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import {
  d
} from "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import "./chunk-NDIXNREV.js";
import "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  b
} from "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n,
  s
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/layers/graphics/sources/geojson/GeoJSONSourceWorker.js
var D = { hasAttachments: false, capabilities: "query, editing, create, delete, update", useStandardizedQueries: true, supportsCoordinatesQuantization: true, supportsReturningQueryGeometry: true, advancedQueryCapabilities: { supportsQueryAttachments: false, supportsStatistics: true, supportsPercentileStatistics: true, supportsReturningGeometryCentroid: true, supportsQueryWithDistance: true, supportsDistinct: true, supportsReturningQueryExtent: true, supportsReturningGeometryProperties: false, supportsHavingClause: true, supportsOrderBy: true, supportsPagination: true, supportsQueryWithResultType: false, supportsSqlExpression: true, supportsDisjointSpatialRel: true } };
var Q = class {
  constructor() {
    this._queryEngine = null, this._snapshotFeatures = async (e) => {
      const t = await this._fetch(e);
      return this._createFeatures(t);
    };
  }
  destroy() {
    var _a;
    (_a = this._queryEngine) == null ? void 0 : _a.destroy(), this._queryEngine = this._createDefaultAttributes = null;
  }
  async load(e, t = {}) {
    this._loadOptions = { url: e.url, customParameters: e.customParameters };
    const i4 = [], [r] = await Promise.all([e.url ? this._fetch(t == null ? void 0 : t.signal) : null, this._checkProjection(e.spatialReference)]), n2 = I(r, { geometryType: e.geometryType }), o2 = e.fields || n2.fields || [], l = null != e.hasZ ? e.hasZ : n2.hasZ, u = n2.geometryType;
    let d3 = e.objectIdField || n2.objectIdFieldName || "__OBJECTID";
    const p3 = e.spatialReference || g;
    let c = e.timeInfo;
    o2 === n2.fields && n2.unknownFields.length > 0 && i4.push({ name: "geojson-layer:unknown-field-types", message: "Some fields types couldn't be inferred from the features and were dropped", details: { unknownFields: n2.unknownFields } });
    const y2 = new Z(o2);
    let h = y2.get(d3);
    h ? ("esriFieldTypeString" !== h.type && (h.type = "esriFieldTypeOID"), h.editable = false, h.nullable = false, d3 = h.name) : (h = { alias: d3, name: d3, type: "string" === n2.objectIdFieldType ? "esriFieldTypeString" : "esriFieldTypeOID", editable: false, nullable: false }, o2.unshift(h));
    const _ = {};
    for (const a2 of o2) {
      if (null == a2.name && (a2.name = a2.alias), null == a2.alias && (a2.alias = a2.name), !a2.name)
        throw new s("geojson-layer:invalid-field-name", "field name is missing", { field: a2 });
      if (!i2.jsonValues.includes(a2.type))
        throw new s("geojson-layer:invalid-field-type", `invalid type for field "${a2.name}"`, { field: a2 });
      if (a2.name !== h.name) {
        const e2 = H(a2);
        void 0 !== e2 && (_[a2.name] = e2);
      }
      null == a2.length && (a2.length = K(a2));
    }
    if (c) {
      if (c.startTimeField) {
        const e2 = y2.get(c.startTimeField);
        e2 ? (c.startTimeField = e2.name, e2.type = "esriFieldTypeDate") : c.startTimeField = null;
      }
      if (c.endTimeField) {
        const e2 = y2.get(c.endTimeField);
        e2 ? (c.endTimeField = e2.name, e2.type = "esriFieldTypeDate") : c.endTimeField = null;
      }
      if (c.trackIdField) {
        const e2 = y2.get(c.trackIdField);
        e2 ? c.trackIdField = e2.name : (c.trackIdField = null, i4.push({ name: "geojson-layer:invalid-timeInfo-trackIdField", message: "trackIdField is missing", details: { timeInfo: c } }));
      }
      c.startTimeField || c.endTimeField || (i4.push({ name: "geojson-layer:invalid-timeInfo", message: "startTimeField and endTimeField are missing", details: { timeInfo: c } }), c = null);
    }
    const F = u ? o(u) : void 0, b2 = y2.dateFields.length ? { timeZoneIANA: i } : null, T = { warnings: i4, featureErrors: [], layerDefinition: { ...D, drawingInfo: F ?? void 0, templates: a(_), extent: void 0, geometryType: u, objectIdField: d3, fields: o2, hasZ: !!l, timeInfo: c, dateFieldsTimeReference: b2 } };
    this._queryEngine = new $({ fieldsIndex: Z.fromLayerJSON({ fields: o2, timeInfo: c, dateFieldsTimeReference: b2 }), geometryType: u, hasM: false, hasZ: l, objectIdField: d3, spatialReference: p3, timeInfo: c, featureStore: new m({ geometryType: u, hasM: false, hasZ: l }), cacheSpatialQueries: true });
    const w = this._queryEngine.fieldsIndex.requiredFields.indexOf(h);
    w > -1 && this._queryEngine.fieldsIndex.requiredFields.splice(w, 1), this._createDefaultAttributes = i3(_, d3);
    const q = await this._createFeatures(r);
    this._objectIdGenerator = this._createObjectIdGenerator(this._queryEngine, q);
    const x2 = this._normalizeFeatures(q, T.featureErrors);
    this._queryEngine.featureStore.addMany(x2);
    const { fullExtent: Q2, timeExtent: v } = await this._queryEngine.fetchRecomputedExtents();
    if (T.layerDefinition.extent = Q2, v) {
      const { start: e2, end: t2 } = v;
      T.layerDefinition.timeInfo.timeExtent = [e2, t2];
    }
    return T;
  }
  async applyEdits(e) {
    const { spatialReference: t, geometryType: s2 } = this._queryEngine;
    return await Promise.all([j2(t, s2), x(e.adds, t), x(e.updates, t)]), await this._waitSnapshotComplete(), this._applyEdits(e);
  }
  async queryFeatures(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQuery(e, t.signal);
  }
  async queryFeatureCount(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForCount(e, t.signal);
  }
  async queryObjectIds(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForIds(e, t.signal);
  }
  async queryExtent(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForExtent(e, t.signal);
  }
  async querySnapping(e, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForSnapping(e, t.signal);
  }
  async refresh(e) {
    var _a;
    this._loadOptions.customParameters = e, (_a = this._snapshotTask) == null ? void 0 : _a.abort(), this._snapshotTask = d(this._snapshotFeatures), this._snapshotTask.promise.then((e2) => {
      this._queryEngine.featureStore.clear(), this._objectIdGenerator = this._createObjectIdGenerator(this._queryEngine, e2);
      const t = this._normalizeFeatures(e2);
      t && this._queryEngine.featureStore.addMany(t);
    }, (e2) => {
      this._queryEngine.featureStore.clear(), b(e2) || n.getLogger("esri.layers.GeoJSONLayer").error(new s("geojson-layer:refresh", "An error occurred during refresh", { error: e2 }));
    }), await this._waitSnapshotComplete();
    const { fullExtent: n2, timeExtent: a2 } = await this._queryEngine.fetchRecomputedExtents();
    return { extent: n2, timeExtent: a2 };
  }
  async _createFeatures(e) {
    if (null == e)
      return [];
    const { geometryType: t, hasZ: s2, objectIdField: i4 } = this._queryEngine, r = N(e, { geometryType: t, hasZ: s2, objectIdField: i4 });
    if (!G(this._queryEngine.spatialReference, g))
      for (const n2 of r)
        null != n2.geometry && (n2.geometry = ot(j(rt(n2.geometry, this._queryEngine.geometryType, this._queryEngine.hasZ, false), g, this._queryEngine.spatialReference)));
    return r;
  }
  async _waitSnapshotComplete() {
    if (this._snapshotTask && !this._snapshotTask.finished) {
      try {
        await this._snapshotTask.promise;
      } catch {
      }
      return this._waitSnapshotComplete();
    }
  }
  async _fetch(t) {
    const { url: s2, customParameters: i4 } = this._loadOptions, r = (await U(s2, { responseType: "json", query: { ...i4 }, signal: t })).data;
    return E(r), r;
  }
  _normalizeFeatures(e, t) {
    const { objectIdField: s2, fieldsIndex: i4 } = this._queryEngine, r = [];
    for (const n2 of e) {
      const e2 = this._createDefaultAttributes(), a2 = p2(i4, e2, n2.attributes, true);
      a2 ? t == null ? void 0 : t.push(a2) : (this._assignObjectId(e2, n2.attributes, true), n2.attributes = e2, n2.objectId = e2[s2], r.push(n2));
    }
    return r;
  }
  async _applyEdits(e) {
    const { adds: t, updates: s2, deletes: i4 } = e, r = { addResults: [], deleteResults: [], updateResults: [], uidToObjectId: {} };
    if ((t == null ? void 0 : t.length) && this._applyAddEdits(r, t), (s2 == null ? void 0 : s2.length) && this._applyUpdateEdits(r, s2), i4 == null ? void 0 : i4.length) {
      for (const e2 of i4)
        r.deleteResults.push(d2(e2));
      this._queryEngine.featureStore.removeManyById(i4);
    }
    const { fullExtent: n2, timeExtent: a2 } = await this._queryEngine.fetchRecomputedExtents();
    return { extent: n2, timeExtent: a2, featureEditResults: r };
  }
  _applyAddEdits(e, t) {
    const { addResults: s2 } = e, { geometryType: i4, hasM: r, hasZ: a2, objectIdField: o2, spatialReference: l, featureStore: u, fieldsIndex: p3 } = this._queryEngine, c = [];
    for (const d3 of t) {
      if (d3.geometry && i4 !== p(d3.geometry)) {
        s2.push(f("Incorrect geometry type."));
        continue;
      }
      const t2 = this._createDefaultAttributes(), r2 = p2(p3, t2, d3.attributes);
      if (r2)
        s2.push(r2);
      else {
        if (this._assignObjectId(t2, d3.attributes), d3.attributes = t2, null != d3.uid) {
          const t3 = d3.attributes[o2];
          e.uidToObjectId[d3.uid] = t3;
        }
        if (null != d3.geometry) {
          const e2 = d3.geometry.spatialReference ?? l;
          d3.geometry = j(y(d3.geometry, e2), e2, l);
        }
        c.push(d3), s2.push(d2(d3.attributes[o2]));
      }
    }
    u.addMany(et([], c, i4, a2, r, o2));
  }
  _applyUpdateEdits({ updateResults: e }, t) {
    const { geometryType: s2, hasM: i4, hasZ: r, objectIdField: a2, spatialReference: o2, featureStore: l, fieldsIndex: u } = this._queryEngine;
    for (const d3 of t) {
      const { attributes: t2, geometry: m2 } = d3, y2 = t2 == null ? void 0 : t2[a2];
      if (null == y2) {
        e.push(f(`Identifier field ${a2} missing`));
        continue;
      }
      if (!l.has(y2)) {
        e.push(f(`Feature with object id ${y2} missing`));
        continue;
      }
      const f2 = nt(l.getFeature(y2), s2, r, i4);
      if (null != m2) {
        if (s2 !== p(m2)) {
          e.push(f("Incorrect geometry type."));
          continue;
        }
        const t3 = m2.spatialReference ?? o2;
        f2.geometry = j(y(m2, t3), t3, o2);
      }
      if (t2) {
        const s3 = p2(u, f2.attributes, t2);
        if (s3) {
          e.push(s3);
          continue;
        }
      }
      l.add(tt(f2, s2, r, i4, a2)), e.push(d2(y2));
    }
  }
  _createObjectIdGenerator(e, t) {
    const s2 = e.fieldsIndex.get(e.objectIdField);
    if ("esriFieldTypeString" === s2.type)
      return () => s2.name + "-" + Date.now().toString(16);
    let i4 = Number.NEGATIVE_INFINITY;
    for (const r of t)
      r.objectId && (i4 = Math.max(i4, r.objectId));
    return i4 = Math.max(0, i4) + 1, () => i4++;
  }
  _assignObjectId(e, t, s2 = false) {
    const i4 = this._queryEngine.objectIdField;
    e[i4] = s2 && i4 in t ? t[i4] : this._objectIdGenerator();
  }
  async _checkProjection(e) {
    try {
      await x(g, e);
    } catch {
      throw new s("geojson-layer", "Projection not supported");
    }
  }
};
export {
  Q as default
};
//# sourceMappingURL=GeoJSONSourceWorker-7X666MMP.js.map
