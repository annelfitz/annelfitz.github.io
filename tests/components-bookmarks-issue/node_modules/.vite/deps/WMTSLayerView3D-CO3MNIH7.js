import {
  c
} from "./chunk-BIO7MOBF.js";
import "./chunk-B5IJN7OM.js";
import "./chunk-F7X3QPMY.js";
import "./chunk-BMTOVJNA.js";
import "./chunk-CMLG62TA.js";
import {
  n as n2
} from "./chunk-SPU25K6A.js";
import "./chunk-P257AUOX.js";
import {
  i
} from "./chunk-SWNHB34O.js";
import {
  u
} from "./chunk-NGAYW4TW.js";
import "./chunk-I4SHZ6P5.js";
import "./chunk-QYDOVVH7.js";
import "./chunk-YSXT2SWC.js";
import "./chunk-YH3SFFF7.js";
import "./chunk-JBU54P54.js";
import "./chunk-RLZYC2LS.js";
import "./chunk-WZJNHZ6H.js";
import "./chunk-YBPOKK6D.js";
import "./chunk-ZLQTPFTL.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-2SYXH2R7.js";
import "./chunk-7JNXJYRU.js";
import "./chunk-QX66UTIR.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-VTH4DAHQ.js";
import {
  M
} from "./chunk-HLDUDRTD.js";
import "./chunk-CZSTCON2.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  w
} from "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/views/3d/layers/WMTSLayerView3D.js
var m = class extends i(c(n2(u))) {
  constructor() {
    super(...arguments), this.type = "wmts-3d";
  }
  initialize() {
    this._getCompatibleTileInfoMatrixSet((e3) => this._getTileInfoSupportError(e3.tileInfo, e3.fullExtent));
    const e2 = w(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.basemapTerrain) == null ? void 0 : _b.tilingSchemeLocked;
    }).then(() => {
      const e3 = this._getCompatibleTileInfoMatrixSet((e4) => this._getTileInfoError(e4.tileInfo, e4.fullExtent));
      null != e3 && (null !== e3.id && this.layer.activeLayer.tileMatrixSetId !== e3.id && (this.layer.activeLayer.tileMatrixSetId = e3.id), e3.tileInfo && (this.tileInfo = e3.tileInfo), this.layer.fullExtent = e3.fullExtent);
    });
    this.addResolvingPromise(e2), this.when(() => this._postInitialize());
  }
  get hasMixedImageFormats() {
    return true;
  }
  refresh() {
    this.emit("data-changed");
  }
  canResume() {
    if (!super.canResume())
      return false;
    const e2 = this.layer.activeLayer.tileMatrixSet;
    return null != e2 && !this._getTileInfoError(e2.tileInfo, e2.fullExtent);
  }
  async doRefresh() {
    this.suspended || this.emit("data-changed");
  }
  _postInitialize() {
    this._updatingHandles.add(() => {
      var _a, _b;
      return (_b = (_a = this.layer) == null ? void 0 : _a.activeLayer) == null ? void 0 : _b.styleId;
    }, () => this.refresh()), this._updatingHandles.add(() => {
      var _a;
      return (_a = this.layer) == null ? void 0 : _a.activeLayer;
    }, (e2) => {
      const t = this._getCompatibleTileInfoMatrixSet((e3) => this._getTileInfoError(e3.tileInfo, e3.fullExtent), true);
      t && null != t.id && e2.tileMatrixSetId !== t.id && (this.layer.activeLayer.tileMatrixSetId = t.id), this.notifyChange("suspended"), this.canResume() && this.refresh();
    });
  }
  _getCompatibleTileInfoMatrixSet(e2, r = false) {
    const s = M(this.layer);
    if (null != s) {
      if (V.isCollection(s)) {
        const t = s.find((t2) => {
          const s2 = e2(t2);
          return null != s2 && (r ? n.getLogger(this).error("The selected tile matrix set is not compatible with the view", s2) : this.addResolvingPromise(Promise.reject(s2))), null == s2;
        });
        return t;
      }
      const o = e2(s);
      return null != o && (r ? n.getLogger(this).error("The selected tile matrix set is not compatible with the view", o) : this.addResolvingPromise(Promise.reject(o))), s;
    }
    return null;
  }
  _getTileInfoError(e2, t) {
    return this._getTileInfoSupportError(e2, t) || this._getTileInfoCompatibilityError(e2, this.view.basemapTerrain.tilingScheme);
  }
};
e([y({ readOnly: true })], m.prototype, "hasMixedImageFormats", null), e([y()], m.prototype, "layer", void 0), e([y()], m.prototype, "suspended", void 0), e([y()], m.prototype, "tileInfo", void 0), m = e([a("esri.views.3d.layers.WMTSLayerView3D")], m);
var p = m;
export {
  p as default
};
//# sourceMappingURL=WMTSLayerView3D-CO3MNIH7.js.map
