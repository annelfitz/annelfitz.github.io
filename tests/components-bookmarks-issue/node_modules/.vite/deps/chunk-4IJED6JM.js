import {
  t as t5
} from "./chunk-LGIO6OCK.js";
import {
  T,
  e as e6,
  r as r2,
  r2 as r4,
  t2 as t4,
  w as w2
} from "./chunk-C5EJV3NW.js";
import {
  l as l3
} from "./chunk-XXIDOBRO.js";
import {
  r as r3
} from "./chunk-O556EBAK.js";
import {
  $ as $2,
  A,
  O as O2,
  a as a5,
  a2 as a7,
  c as c2,
  g as g2,
  i2 as i5,
  s as s4,
  s2 as s6
} from "./chunk-ZPU7GNG4.js";
import {
  i as i6
} from "./chunk-TNR6E67I.js";
import {
  n as n3
} from "./chunk-QREUCRQ4.js";
import {
  M,
  a as a6,
  i as i4,
  s as s5
} from "./chunk-YK3UMVCY.js";
import {
  s as s3
} from "./chunk-5IT6RVBX.js";
import {
  a as a4,
  c as c3,
  i
} from "./chunk-N4HNOQVJ.js";
import {
  e as e4,
  i as i2,
  l as l2
} from "./chunk-CXCB57TE.js";
import {
  U as U2,
  e as e5,
  i as i3,
  n as n2,
  w
} from "./chunk-IWO6JXL2.js";
import {
  $,
  S as S3,
  U,
  a as a3,
  ct,
  g,
  l,
  r
} from "./chunk-AVR3LWTZ.js";
import {
  h
} from "./chunk-I4SHZ6P5.js";
import {
  e as e3
} from "./chunk-M4RFJU4F.js";
import {
  C
} from "./chunk-WKVHVZW2.js";
import {
  s as s2
} from "./chunk-RLZYC2LS.js";
import {
  S as S2
} from "./chunk-3AIILHI5.js";
import {
  a as a2
} from "./chunk-BSPKLAHD.js";
import {
  O
} from "./chunk-GKMVTGGM.js";
import {
  u as u2
} from "./chunk-WDPG5BMO.js";
import {
  u
} from "./chunk-BOAEEYBE.js";
import {
  t as t3
} from "./chunk-HV6S3GY2.js";
import {
  e as e2
} from "./chunk-OCF7OAES.js";
import {
  d
} from "./chunk-Z4Y53NDM.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a,
  o3 as o
} from "./chunk-I2RC5KWA.js";
import {
  e,
  t
} from "./chunk-2F6FFF5T.js";
import {
  c2 as c,
  n2 as n,
  s,
  t as t2
} from "./chunk-7RBRCL6S.js";
import {
  has
} from "./chunk-J2EGIWT6.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/mesh/instanceIdUtils.js
function n4(n19) {
  return n19;
}
function r5(n19) {
  return n19;
}

// node_modules/@arcgis/core/views/2d/layers/support/UpdateTracking2D.js
var d2 = class extends S {
  constructor(t14) {
    super(t14), this.debugName = "", this._updatingHandles = new h(), this._idToUpdatingState = new s3();
  }
  get updating() {
    const t14 = this._updatingHandles.updating || Array.from(this._idToUpdatingState.values()).some((t15) => t15);
    if (has("esri-2d-log-updating")) {
      const r14 = Array.from(this._idToUpdatingState.entries()).map(([t15, r15]) => `-> ${t15}: ${r15}`).join("\n");
      console.log(`${this.debugName}: Updating: ${t14}
-> Handles: ${this._updatingHandles.updating}
${r14}`);
    }
    return t14;
  }
  addUpdateTracking(t14, r14) {
    const s21 = d(() => r14.updating, (r15) => this._idToUpdatingState.set(t14, r15), { sync: true });
    this.addHandles(s21);
  }
  addPromise(t14) {
    return this._updatingHandles.addPromise(t14);
  }
};
e([y({ constructOnly: true })], d2.prototype, "debugName", void 0), e([y({ readOnly: true })], d2.prototype, "updating", null), d2 = e([a("esri.views.2d.layers.support.UpdateTracking2D")], d2);

// node_modules/@arcgis/core/symbols/cim/effects/CIMEffectHelper.js
var n5 = 96 / 72;
var l4 = class {
  static executeEffects(t14, e15, l15, c12) {
    const f14 = n5, m11 = $2(t14);
    let p13 = new s4(e15);
    for (const o14 of t14) {
      const t15 = A(o14);
      t15 && (p13 = t15.execute(p13, o14, f14, l15, c12, m11));
    }
    return p13;
  }
  static applyEffects(n19, l15, c12) {
    if (!n19)
      return l15;
    const f14 = $2(n19);
    let m11, p13 = new s4(a5.fromJSONCIM(l15));
    for (const t14 of n19) {
      const e15 = A(t14);
      e15 && (p13 = e15.execute(p13, t14, 1, null, c12, f14));
    }
    const u12 = [];
    let i19 = null;
    for (; m11 = p13.next(); )
      u12.push(...t3(m11)), i19 = m11.geometryType;
    return 0 === u12.length || null === i19 ? null : "esriGeometryPolygon" === i19 ? { rings: u12 } : { paths: u12 };
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/constants.js
var i7;
!function(i19) {
  i19[i19.Geographic = 0] = "Geographic", i19[i19.Arithmatic = 1] = "Arithmatic";
}(i7 || (i7 = {}));
var t6 = 3.14159265359 / 180;
var c4 = 3.14159265359 / 128;
var r6 = 180 / 3.141592654;
var a8 = 1 / 8;
var o2 = 1;
var h2 = 1.1;
var n6 = 1;
var p = 1 / 4;
var g3 = 1 / 8;
var A2 = 24;
var G = 8;
var s7 = 1e-5;
var u3 = 0.05;
var k = 1e-30;
var q = 4;
var B = 0;
var C2 = 2;
var D = 5;
var E = 6;
var F = 2;
var H = 3;
var I = 0;
var J = 3;
var K = 16777216;

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/ShaderBuilder2D.js
var s8 = () => n.getLogger("esri.views.3d.webgl-engine.core.shaderModules.shaderBuilder");
var i8 = class {
  constructor() {
    this._includedModules = /* @__PURE__ */ new Map();
  }
  include(e15, r14) {
    if (this._includedModules.has(e15)) {
      const t14 = this._includedModules.get(e15);
      if (t14 !== r14) {
        s8().error("Trying to include shader module multiple times with different sets of options.");
        const r15 = /* @__PURE__ */ new Set();
        for (const n19 of Object.keys(t14))
          t14[n19] !== e15[n19] && r15.add(n19);
        for (const n19 of Object.keys(e15))
          t14[n19] !== e15[n19] && r15.add(n19);
        r15.forEach((r16) => console.error(`  ${r16}: current ${t14[r16]} new ${e15[r16]}`));
      }
    } else
      this._includedModules.set(e15, r14), e15(this.builder, r14);
  }
};
var o3 = class extends i8 {
  constructor() {
    super(...arguments), this.vertex = new u4(), this.fragment = new u4(), this.attributes = new m(), this.varyings = new h3(), this.extensions = new l5(), this.constants = new d3();
  }
  get fragmentUniforms() {
    return this.fragment.uniforms.entries;
  }
  get builder() {
    return this;
  }
  generate(e15, r14 = true) {
    const t14 = this.extensions.generateSource(e15), n19 = this.attributes.generateSource(e15), s21 = this.varyings.generateSource(e15), i19 = "vertex" === e15 ? this.vertex : this.fragment, o14 = i19.uniforms.generateSource(), a19 = i19.code.generateSource(), c12 = "vertex" === e15 ? f : _(r14), u12 = this.constants.generateSource().concat(i19.constants.generateSource());
    return `${r14 ? "#version 300 es" : ""}
${t14.join("\n")}
${c12}
${u12.join("\n")}
${o14.join("\n")}
${n19.join("\n")}
${s21.join("\n")}
${a19.join("\n")}`;
  }
  generateBindPass(e15) {
    const r14 = /* @__PURE__ */ new Map();
    this.vertex.uniforms.entries.forEach((e16) => {
      const n20 = e16.bind[a2.Pass];
      n20 && r14.set(e16.name, n20);
    }), this.fragment.uniforms.entries.forEach((e16) => {
      const n20 = e16.bind[a2.Pass];
      n20 && r14.set(e16.name, n20);
    });
    const n19 = Array.from(r14.values()), s21 = n19.length;
    return (r15, t14) => {
      for (let i19 = 0; i19 < s21; ++i19)
        n19[i19](e15, r15, t14);
    };
  }
  generateBindDraw(e15) {
    const r14 = /* @__PURE__ */ new Map();
    this.vertex.uniforms.entries.forEach((e16) => {
      const n20 = e16.bind[a2.Draw];
      n20 && r14.set(e16.name, n20);
    }), this.fragment.uniforms.entries.forEach((e16) => {
      const n20 = e16.bind[a2.Draw];
      n20 && r14.set(e16.name, n20);
    });
    const n19 = Array.from(r14.values()), s21 = n19.length;
    return (r15, t14, i19) => {
      for (let o14 = 0; o14 < s21; ++o14)
        n19[o14](e15, r15, t14, i19);
    };
  }
};
var a9 = class {
  constructor() {
    this._entries = /* @__PURE__ */ new Map();
  }
  add(...e15) {
    for (const r14 of e15)
      this._add(r14);
  }
  get(e15) {
    return this._entries.get(e15);
  }
  _add(r14) {
    if (null != r14) {
      if (this._entries.has(r14.name) && !this._entries.get(r14.name).equals(r14))
        throw new s(`Duplicate uniform name ${r14.name} for different uniform type`);
      this._entries.set(r14.name, r14);
    } else
      s8().error(`Trying to add null Uniform from ${new Error().stack}.`);
  }
  generateSource() {
    return Array.from(this._entries.values()).map((e15) => null != e15.arraySize ? `uniform ${e15.type} ${e15.name}[${e15.arraySize}];` : `uniform ${e15.type} ${e15.name};`);
  }
  get entries() {
    return Array.from(this._entries.values());
  }
};
var c5 = class {
  constructor() {
    this._entries = new Array();
  }
  add(e15) {
    this._entries.push(e15);
  }
  generateSource() {
    return this._entries;
  }
};
var u4 = class extends i8 {
  constructor() {
    super(...arguments), this.uniforms = new a9(), this.code = new c5(), this.constants = new d3();
  }
  get builder() {
    return this;
  }
};
var m = class {
  constructor() {
    this._entries = new Array();
  }
  add(e15, r14) {
    this._entries.push([e15, r14]);
  }
  generateSource(e15) {
    return "fragment" === e15 ? [] : this._entries.map((e16) => `in ${e16[1]} ${e16[0]};`);
  }
};
var h3 = class {
  constructor() {
    this._entries = /* @__PURE__ */ new Map();
  }
  add(e15, r14) {
    this._entries.has(e15) && s2(this._entries.get(e15) === r14), this._entries.set(e15, r14);
  }
  generateSource(e15) {
    const r14 = new Array();
    return this._entries.forEach((t14, n19) => r14.push("vertex" === e15 ? `out ${t14} ${n19};` : `in ${t14} ${n19};`)), r14;
  }
};
var l5 = class _l {
  constructor() {
    this._entries = /* @__PURE__ */ new Set();
  }
  add(e15) {
    this._entries.add(e15);
  }
  generateSource(e15) {
    const r14 = "vertex" === e15 ? _l.ALLOWLIST_VERTEX : _l.ALLOWLIST_FRAGMENT;
    return Array.from(this._entries).filter((e16) => r14.includes(e16)).map((e16) => `#extension ${e16} : enable`);
  }
};
l5.ALLOWLIST_FRAGMENT = ["GL_EXT_shader_texture_lod", "GL_OES_standard_derivatives"], l5.ALLOWLIST_VERTEX = [];
var d3 = class _d {
  constructor() {
    this._entries = /* @__PURE__ */ new Set();
  }
  add(e15, r14, t14) {
    let n19 = "ERROR_CONSTRUCTOR_STRING";
    switch (r14) {
      case "float":
        n19 = _d._numberToFloatStr(t14);
        break;
      case "int":
        n19 = _d._numberToIntStr(t14);
        break;
      case "bool":
        n19 = t14.toString();
        break;
      case "vec2":
        n19 = `vec2(${_d._numberToFloatStr(t14[0])},                            ${_d._numberToFloatStr(t14[1])})`;
        break;
      case "vec3":
        n19 = `vec3(${_d._numberToFloatStr(t14[0])},                            ${_d._numberToFloatStr(t14[1])},                            ${_d._numberToFloatStr(t14[2])})`;
        break;
      case "vec4":
        n19 = `vec4(${_d._numberToFloatStr(t14[0])},                            ${_d._numberToFloatStr(t14[1])},                            ${_d._numberToFloatStr(t14[2])},                            ${_d._numberToFloatStr(t14[3])})`;
        break;
      case "ivec2":
        n19 = `ivec2(${_d._numberToIntStr(t14[0])},                             ${_d._numberToIntStr(t14[1])})`;
        break;
      case "ivec3":
        n19 = `ivec3(${_d._numberToIntStr(t14[0])},                             ${_d._numberToIntStr(t14[1])},                             ${_d._numberToIntStr(t14[2])})`;
        break;
      case "ivec4":
        n19 = `ivec4(${_d._numberToIntStr(t14[0])},                             ${_d._numberToIntStr(t14[1])},                             ${_d._numberToIntStr(t14[2])},                             ${_d._numberToIntStr(t14[3])})`;
        break;
      case "mat2":
      case "mat3":
      case "mat4":
        n19 = `${r14}(${Array.prototype.map.call(t14, (e16) => _d._numberToFloatStr(e16)).join(", ")})`;
    }
    return this._entries.add(`const ${r14} ${e15} = ${n19};`), this;
  }
  static _numberToIntStr(e15) {
    return e15.toFixed(0);
  }
  static _numberToFloatStr(e15) {
    return Number.isInteger(e15) ? e15.toFixed(1) : e15.toString();
  }
  generateSource() {
    return Array.from(this._entries);
  }
};
function _(e15 = true) {
  return `#ifdef GL_FRAGMENT_PRECISION_HIGH
  precision highp float;
  precision highp sampler2D;
#else
  precision mediump float;
  precision mediump sampler2D;
#endif
${e15 ? "out vec4 fragColor;" : ""}
`;
}
var f = "precision highp float;\nprecision highp sampler2D;";

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/graph/ShaderGraphNode.js
function t7(t14) {
  return t14.split(" ").map((t15, e15) => e15 > 0 ? t15.charAt(0).toUpperCase() + t15.slice(1) : t15).join("");
}
function e7(t14, e15) {
  const s21 = [];
  for (s21.push(e15); s21.length; ) {
    const e16 = s21.pop();
    if ("object" == typeof e16 && !t14.has(e16.uid)) {
      t14.add(e16.uid);
      for (const t15 of e16.children)
        s21.push(t15);
    }
  }
}
var s9 = class _s {
  constructor() {
    this.uid = _s.NodeCount++, this._debugName = null, this._isMutable = false, this.isImplicit = false;
  }
  get isMutable() {
    return this._isMutable;
  }
  setMutable() {
    return this._isMutable = true, this;
  }
  setDebugName(e15) {
    return e15 = t7(e15), this._debugName = e15, this.isImplicit && this.children[0] instanceof _s && this.children[0].setDebugName(e15), this;
  }
  get debugInfo() {
    return { name: this._debugName ?? "" };
  }
  cloneInto(t14) {
    t14._debugName = this._debugName, t14._isMutable = this._isMutable, t14.isImplicit = this.isImplicit, t14.uid = this.uid;
  }
};
function i9(t14) {
  return "object" == typeof t14 ? t14.clone() : t14;
}
s9.NodeCount = 0;
var r7 = class extends s9 {
  constructor() {
    super(...arguments), this.shaderType = "primitive-node";
  }
};
var n7 = class _n extends s9 {
  constructor(t14) {
    super(), this.child = t14, this.shaderType = "scope-node";
  }
  get children() {
    return [this.child];
  }
  clone() {
    const t14 = new _n(i9(this.child));
    return this.cloneInto(t14), t14;
  }
};
var o4 = class _o extends s9 {
  constructor(t14, e15, s21) {
    super(), this.property = t14, this.target = e15, this.returnType = s21, this.shaderType = "property-access-node";
  }
  get children() {
    const t14 = [this.target];
    return "string" != typeof this.property && t14.push(this.property), t14;
  }
  clone() {
    const t14 = new _o(this.property, i9(this.target), this.returnType);
    return this.cloneInto(t14), t14;
  }
};
var c6 = class _c extends s9 {
  constructor(t14, e15, s21) {
    super(), this.condition = t14, this.ifTrue = e15, this.ifFalse = s21, this.shaderType = "condition-node";
  }
  get children() {
    return [this.condition, this.ifTrue, this.ifFalse];
  }
  clone() {
    const t14 = i9(this.ifTrue), e15 = this.ifFalse ? i9(this.ifFalse) : null, s21 = new _c(this.condition, t14, e15);
    return this.cloneInto(s21), s21;
  }
};
var u5 = class _u extends s9 {
  constructor(t14, e15, s21, i19) {
    super(), this.captureList = t14, this.returnType = e15, this.generator = i19, this.shaderType = "block-node", s21 && (this.subgraph = new n7(s21));
  }
  get children() {
    return Object.keys(this.captureList).map((t14) => this.captureList[t14]).concat(this.subgraph ?? []);
  }
  clone() {
    const t14 = {};
    for (const s21 in this.captureList)
      t14[s21] = i9(this.captureList[s21]);
    const e15 = new _u(t14, this.returnType, this.subgraph ? i9(this.subgraph.child) : this.subgraph, this.generator);
    return this.cloneInto(e15), e15;
  }
};
var p2 = class _p extends s9 {
  constructor(t14, e15, s21, i19, r14, n19 = false) {
    super(), this.token = t14, this._children = e15, this.isInfix = s21, this.isPropertyAccess = i19, this.returnType = r14, this.isTernary = n19, this.shaderType = "function-node";
  }
  get children() {
    return this._children;
  }
  clone() {
    const t14 = new _p(this.token, this._children.map(i9), this.isInfix, this.isPropertyAccess, this.returnType, this.isTernary);
    return this.cloneInto(t14), t14;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/graph/glsl.js
var s10;
var l6;
var h4;
var f2;
var a10;
var p3;
var d4;
var w3;
var y2;
var m2;
var v;
var b;
var I2;
var x;
function z(t14) {
  const n19 = [["float", "vec2", "vec3", "vec4"], ["int", "ivec2", "ivec3", "ivec4"], ["uint", "uvec2", "uvec3", "uvec4"], ["bool", "bvec2", "bvec3", "bvec4"]];
  for (const e15 of n19)
    if (e15.includes(t14))
      return e15.map((t15) => et[t15]);
  throw new Error("Unable to find type family");
}
function D2(t14) {
  return new Proxy(t14, { get(n19, e15) {
    if ("constructor" === e15)
      return new Proxy(n19.constructor, { construct: (t15, n20, e16) => D2(new t15(...n20)) });
    if (e15 in n19)
      return n19[e15];
    if ("string" == typeof e15) {
      const n20 = z(t14.type);
      return ft(t14, e15, n20[e15.length - 1]);
    }
  } });
}
function N(t14) {
  return new Proxy(t14, { construct: (t15, n19, e15) => D2(new t15(...n19)) });
}
function P(t14) {
  return new Proxy(t14, { get(n19, e15) {
    if (e15 in n19)
      return n19[e15];
    if ("string" == typeof e15) {
      const n20 = parseInt(e15, 10);
      if (!isNaN(n20))
        return ft(t14, `[${n20}]`, t14.elementType.constructor);
    }
  } });
}
function q2(t14) {
  return new Proxy(t14, { construct: (t15, n19, e15) => P(new t15(...n19)) });
}
var B2 = class extends Error {
};
var U3 = s10 = class extends r7 {
  constructor(t14, n19) {
    super(), this.elementType = t14, this.size = n19, this.children = [], this.type = "array";
  }
  clone() {
    const t14 = new s10(this.elementType, this.size);
    return super.cloneInto(t14), t14;
  }
  get(t14) {
    if ("number" == typeof t14) {
      const n19 = new O3(t14);
      return n19.isImplicit = true, ft(this, n19, this.elementType.constructor);
    }
    return ft(this, t14, this.elementType.constructor);
  }
  last() {
    return this.get(this.size - 1);
  }
  first() {
    return this.get(0);
  }
  findIndex(t14, n19, e15) {
    return bt(this, t14, n19, e15);
  }
  glslFindIndex(t14, n19, e15) {
    return It(this, t14, n19, e15);
  }
  static ofType(t14, n19) {
    const e15 = { construct: (e16, r14) => new s10(new t14(), n19) };
    return new Proxy(s10, e15);
  }
};
U3.type = "array", U3 = s10 = e([q2], U3);
var S4 = class _S extends r7 {
  constructor() {
    super(...arguments), this.type = "sampler2D", this.children = [];
  }
  clone() {
    const t14 = new _S();
    return t14.children = this.children.map(i9), super.cloneInto(t14), t14;
  }
};
S4.type = "sampler2D";
var j = class _j extends r7 {
  constructor(t14) {
    super(), this.type = "float", this.children = [t14];
  }
  clone() {
    const t14 = new _j(i9(this.children[0]));
    return super.cloneInto(t14), t14;
  }
  multiply(t14) {
    return Tt(this, "number" == typeof t14 ? K2(t14, _j) : t14);
  }
  divide(t14) {
    return $t(this, "number" == typeof t14 ? K2(t14, _j) : t14);
  }
  add(t14) {
    return Ft(this, "number" == typeof t14 ? K2(t14, _j) : t14);
  }
  subtract(t14) {
    return kt(this, "number" == typeof t14 ? K2(t14, _j) : t14);
  }
};
j.type = "float";
var C3 = l6 = class extends r7 {
  constructor(t14, n19) {
    super(), this.type = "vec2", this.children = [t14, n19].filter((t15) => null != t15);
  }
  clone() {
    const t14 = new l6(i9(this.children[0]), i9(this.children[1]));
    return super.cloneInto(t14), t14;
  }
  get 0() {
    return ft(this, "[0]", j);
  }
  get 1() {
    return ft(this, "[1]", j);
  }
  get 2() {
    throw new B2();
  }
  get 3() {
    throw new B2();
  }
  multiply(t14) {
    return Tt(this, "number" == typeof t14 ? K2(t14, j) : t14);
  }
  divide(t14) {
    return $t(this, "number" == typeof t14 ? K2(t14, j) : t14);
  }
  add(t14) {
    return Ft(this, "number" == typeof t14 ? K2(t14, j) : t14);
  }
  subtract(t14) {
    return kt(this, "number" == typeof t14 ? K2(t14, j) : t14);
  }
};
C3.type = "vec2", C3 = l6 = e([N], C3);
var G2 = h4 = class extends r7 {
  constructor(t14, n19, e15) {
    super(), this.type = "vec3", this.children = [t14, n19, e15].filter((t15) => null != t15);
  }
  get 0() {
    return ft(this, "[0]", j);
  }
  get 1() {
    return ft(this, "[1]", j);
  }
  get 2() {
    return ft(this, "[2]", j);
  }
  get 3() {
    throw new B2();
  }
  clone() {
    const t14 = new h4(i9(this.children[0]), i9(this.children[1]), i9(this.children[2]));
    return super.cloneInto(t14), t14;
  }
  multiply(t14) {
    return Tt(this, "number" == typeof t14 ? K2(t14, j) : t14);
  }
  divide(t14) {
    return $t(this, "number" == typeof t14 ? K2(t14, j) : t14);
  }
  add(t14) {
    return Ft(this, "number" == typeof t14 ? K2(t14, j) : t14);
  }
  subtract(t14) {
    return kt(this, "number" == typeof t14 ? K2(t14, j) : t14);
  }
};
G2.type = "vec3", G2 = h4 = e([N], G2);
var H2 = f2 = class extends r7 {
  constructor(t14, n19, e15, r14) {
    super(), this.type = "vec4", this.children = [t14, n19, e15, r14].filter((t15) => null != t15);
  }
  clone() {
    const t14 = new f2(i9(this.children[0]), i9(this.children[1]), i9(this.children[2]), i9(this.children[3]));
    return super.cloneInto(t14), t14;
  }
  get 0() {
    return ft(this, "[0]", j);
  }
  get 1() {
    return ft(this, "[1]", j);
  }
  get 2() {
    return ft(this, "[2]", j);
  }
  get 3() {
    return ft(this, "[3]", j);
  }
  multiply(t14) {
    return Tt(this, "number" == typeof t14 ? K2(t14, j) : t14);
  }
  divide(t14) {
    return $t(this, "number" == typeof t14 ? K2(t14, j) : t14);
  }
  add(t14) {
    return Ft(this, "number" == typeof t14 ? K2(t14, j) : t14);
  }
  subtract(t14) {
    return kt(this, "number" == typeof t14 ? K2(t14, j) : t14);
  }
};
H2.type = "vec4", H2 = f2 = e([N], H2);
var M2 = a10 = class extends r7 {
  constructor(t14) {
    super(), this.type = "uint", this.children = [t14];
  }
  clone() {
    const t14 = new a10(i9(this.children[0]));
    return super.cloneInto(t14), t14;
  }
};
M2.type = "uint", M2 = a10 = e([N], M2);
var R = p3 = class extends r7 {
  constructor(t14, n19) {
    super(), this.type = "uvec2", this.children = [t14, n19].filter((t15) => null != t15);
  }
  clone() {
    const t14 = new p3(i9(this.children[0]), i9(this.children[1]));
    return super.cloneInto(t14), t14;
  }
};
R.type = "uvec2", R = p3 = e([N], R);
var A3 = d4 = class extends r7 {
  constructor(t14, n19, e15) {
    super(), this.type = "uvec3", this.children = [t14, n19, e15].filter((t15) => null != t15);
  }
  clone() {
    const t14 = new d4(i9(this.children[0]), i9(this.children[1]), i9(this.children[2]));
    return super.cloneInto(t14), t14;
  }
};
A3.type = "uvec3", A3 = d4 = e([N], A3);
var X = w3 = class extends r7 {
  constructor(t14, n19, e15, r14) {
    super(), this.type = "uvec4", this.children = [t14, n19, e15, r14].filter((t15) => null != t15);
  }
  clone() {
    const t14 = new w3(i9(this.children[0]), i9(this.children[1]), i9(this.children[2]), i9(this.children[3]));
    return super.cloneInto(t14), t14;
  }
};
X.type = "uvec4", X = w3 = e([N], X);
var Y = class _Y extends r7 {
  constructor(t14) {
    super(), this.type = "bool", this.children = [t14];
  }
  and(t14) {
    return Rt(this, t14);
  }
  or(t14) {
    return Ht(this, t14);
  }
  clone() {
    const t14 = new _Y(i9(this.children[0]));
    return super.cloneInto(t14), t14;
  }
};
Y.type = "bool";
var _2 = y2 = class extends r7 {
  constructor(t14, n19) {
    super(), this.type = "bvec2", this.children = [t14, n19].filter((t15) => null != t15);
  }
  all() {
    return Jt(this);
  }
  any() {
    return Kt(this);
  }
  clone() {
    const t14 = new y2(i9(this.children[0]), i9(this.children[1]));
    return super.cloneInto(t14), t14;
  }
};
_2.type = "bvec2", _2 = y2 = e([N], _2);
var J2 = m2 = class extends r7 {
  constructor(t14, n19, e15) {
    super(), this.type = "bvec3", this.children = [t14, n19, e15].filter((t15) => null != t15);
  }
  all() {
    return Jt(this);
  }
  any() {
    return Kt(this);
  }
  clone() {
    const t14 = new m2(i9(this.children[0]), i9(this.children[1]), i9(this.children[2]));
    return super.cloneInto(t14), t14;
  }
};
function K2(t14, n19) {
  if ("number" == typeof t14) {
    return new n19(t14);
  }
  return t14;
}
J2.type = "bvec3", J2 = m2 = e([N], J2);
var L = v = class extends r7 {
  constructor(t14, n19, e15, r14) {
    super(), this.type = "bvec4", this.children = [t14, n19, e15, r14].filter((t15) => null != t15);
  }
  all() {
    return Jt(this);
  }
  any() {
    return Kt(this);
  }
  clone() {
    const t14 = new v(i9(this.children[0]), i9(this.children[1]), i9(this.children[2]), i9(this.children[3]));
    return super.cloneInto(t14), t14;
  }
};
L.type = "bvec4", L = v = e([N], L);
var O3 = class _O extends r7 {
  constructor(t14) {
    super(), this.type = "int", this.children = [t14];
  }
  multiply(t14) {
    return Tt(this, K2(t14, _O));
  }
  add(t14) {
    return Ft(this, K2(t14, _O));
  }
  subtract(t14) {
    return kt(this, K2(t14, _O));
  }
  divide(t14) {
    return $t(this, K2(t14, _O));
  }
  clone() {
    const t14 = new _O(i9(this.children[0]));
    return super.cloneInto(t14), t14;
  }
};
O3.type = "int";
var Q = b = class extends r7 {
  constructor(t14, n19) {
    super(), this.type = "ivec2", this.children = [t14, n19].filter((t15) => null != t15);
  }
  clone() {
    const t14 = new b(i9(this.children[0]), i9(this.children[1]));
    return super.cloneInto(t14), t14;
  }
};
Q.type = "ivec2", Q = b = e([N], Q);
var V = I2 = class extends r7 {
  constructor(t14, n19, e15) {
    super(), this.type = "ivec3", this.children = [t14, n19, e15].filter((t15) => null != t15);
  }
  clone() {
    const t14 = new I2(i9(this.children[0]), i9(this.children[1]), i9(this.children[2]));
    return super.cloneInto(t14), t14;
  }
};
V.type = "ivec3", V = I2 = e([N], V);
var W = x = class extends r7 {
  constructor(t14, n19, e15, r14) {
    super(), this.type = "ivec4", this.children = [t14, n19, e15, r14].filter((t15) => null != t15);
  }
  clone() {
    const t14 = new x(i9(this.children[0]), i9(this.children[1]), i9(this.children[2]), i9(this.children[3]));
    return super.cloneInto(t14), t14;
  }
};
W.type = "ivec4", W = x = e([N], W);
var Z = class _Z extends r7 {
  constructor(t14, n19, e15, r14) {
    super(), this.type = "mat2", this.children = [t14, n19, e15, r14];
  }
  clone() {
    const t14 = new _Z(i9(this.children[0]), i9(this.children[1]), i9(this.children[2]), i9(this.children[3]));
    return super.cloneInto(t14), t14;
  }
};
Z.type = "mat2";
var tt = class _tt extends r7 {
  static identity() {
    return new _tt(1, 0, 0, 0, 1, 0, 0, 0, 1);
  }
  static fromRotation(t14) {
    const n19 = Wn(t14), e15 = tn(t14);
    return new _tt(e15, n19, 0, yt(n19), e15, 0, 0, 0, 1);
  }
  constructor(t14, n19, e15, r14, c12, i19, u12, o14, s21) {
    super(), this.type = "mat3", this.children = [t14, n19, e15, r14, c12, i19, u12, o14, s21];
  }
  add(t14) {
    return Ft(this, t14);
  }
  multiply(t14) {
    return Tt(this, t14);
  }
  clone() {
    const t14 = new _tt(i9(this.children[0]), i9(this.children[1]), i9(this.children[2]), i9(this.children[3]), i9(this.children[4]), i9(this.children[5]), i9(this.children[6]), i9(this.children[7]), i9(this.children[8]));
    return super.cloneInto(t14), t14;
  }
};
tt.type = "mat3";
var nt = class _nt extends r7 {
  static identity() {
    return new _nt(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  }
  constructor(t14, n19, e15, r14, c12, i19, u12, o14, s21, l15, h16, f14, a19, p13, d12, w10) {
    super(), this.type = "mat4", this.children = [t14, n19, e15, r14, c12, i19, u12, o14, s21, l15, h16, f14, a19, p13, d12, w10];
  }
  static fromColumns(t14, n19, e15, r14) {
    return new _nt(t14.x, t14.y, t14.z, t14.w, n19.x, n19.y, n19.z, n19.w, e15.x, e15.y, e15.z, e15.w, r14.x, r14.y, r14.z, r14.w);
  }
  multiply(t14) {
    return Tt(this, t14);
  }
  clone() {
    const t14 = new _nt(i9(this.children[0]), i9(this.children[1]), i9(this.children[2]), i9(this.children[3]), i9(this.children[4]), i9(this.children[5]), i9(this.children[6]), i9(this.children[7]), i9(this.children[8]), i9(this.children[9]), i9(this.children[10]), i9(this.children[11]), i9(this.children[12]), i9(this.children[13]), i9(this.children[14]), i9(this.children[15]));
    return super.cloneInto(t14), t14;
  }
};
nt.type = "mat4";
var et = { float: j, vec2: C3, vec3: G2, vec4: H2, int: O3, ivec2: Q, ivec3: V, ivec4: W, uint: M2, uvec2: R, uvec3: A3, uvec4: X, bool: Y, bvec2: _2, bvec3: J2, bvec4: L };
var rt = (...t14) => new O3(...t14);
var ct2 = (...t14) => new j(...t14);
var it = (...t14) => new C3(...t14);
var ut = (...t14) => new G2(...t14);
var ot = (...t14) => new H2(...t14);
var lt = (...t14) => new tt(...t14);
function ft(t14, n19, e15) {
  const c12 = new e15(new o4(n19, t14, e15));
  return c12.isImplicit = true, c12;
}
function at(t14, n19, e15, r14 = null) {
  if (r14) {
    const c13 = new r14(), i19 = new r14(new p2(t14, [n19, e15], true, false, c13));
    return i19.isImplicit = true, i19;
  }
  if ("float" === n19.type || "int" === n19.type) {
    const r15 = new e15.constructor(new p2(t14, [n19, e15], true, false, e15.constructor));
    return r15.isImplicit = true, r15;
  }
  if (("mat2" === n19.type || "mat3" === n19.type || "mat4" === n19.type) && "float" !== e15.type) {
    const r15 = new e15.constructor(new p2(t14, [n19, e15], true, false, e15.constructor));
    return r15.isImplicit = true, r15;
  }
  const c12 = new n19.constructor(new p2(t14, [n19, e15], true, false, n19.constructor));
  return c12.isImplicit = true, c12;
}
function pt(t14, n19, e15 = n19.constructor) {
  const r14 = new e15(new p2(t14, [n19], false, false, e15));
  return r14.isImplicit = true, r14;
}
function dt(t14, n19, e15, r14 = n19.constructor) {
  const c12 = new r14(new p2(t14, [n19, e15], false, false, r14));
  return c12.isImplicit = true, c12;
}
function wt(t14, n19, e15, r14, c12 = n19.constructor) {
  const i19 = new c12(new p2(t14, [n19, e15, r14], false, false, c12));
  return i19.isImplicit = true, i19;
}
function yt(t14) {
  return Tt(t14, ct2(-1));
}
function mt(t14, n19, e15, r14) {
  return new n19(new u5(t14, n19, e15, r14));
}
function bt(t14, n19, e15 = 0, r14 = t14.size) {
  const c12 = new O3(e15).setMutable().setDebugName("FindIndexIterator"), i19 = n19(t14.get(c12)).setDebugName("FindIndexPredicate"), u12 = mt({ iter: c12 }, O3, i19, ({ out: t15, iter: n20, subgraph: e16 }) => `
${t15} = -1;

for (; ${n20} < ${r14}; ${n20}++) {

${e16.body}

  if (${e16.varName}) {
    ${t15} = ${n20};
    break;
  }

}
`).setDebugName("FindIndexBlock");
  return u12;
}
function It(t14, n19, e15 = 0, r14 = t14.size) {
  const c12 = mt({ array: t14 }, O3, null, ({ out: t15, array: c13 }) => `
${t15} = -1;
for (int i = ${e15}; i < ${r14}; i++) {
  bool condition;
  ${n19({ array: c13, i: "i", out: "condition" })}
  if (condition) {
    ${t15} = i;
    break;
  }
}
`).setDebugName("GlslFindIndexBlock");
  return c12;
}
function xt(t14, n19, e15) {
  const r14 = "function" == typeof n19 ? n19() : n19, c12 = "function" == typeof e15 ? e15() : e15, i19 = new r14.constructor(new c6(t14, r14, c12));
  return i19.isImplicit = true, i19;
}
function gt(...t14) {
  const n19 = t14.map(([t15, n20]) => "function" == typeof n20 ? [t15, n20()] : [t15, n20]), e15 = n19[0][1].constructor, r14 = n19.findIndex((t15) => true === t15[0]);
  if (-1 === r14)
    throw new Error("A cond must have a fallthrough case with `true`/; ");
  const c12 = n19.slice(0, r14), i19 = n19[r14][1], u12 = new e15(c12.reduceRight((t15, n20) => xt(n20[0], n20[1], t15), i19));
  return u12.isImplicit = true, u12;
}
function Tt(t14, n19) {
  return at("*", t14, n19);
}
function $t(t14, n19) {
  return at("/", t14, n19);
}
function Ft(t14, n19) {
  return at("+", t14, n19);
}
function kt(t14, n19) {
  return at("-", t14, n19);
}
function Dt(t14, n19) {
  return at(">>", t14, n19);
}
function Nt(t14, n19) {
  return at("&", t14, n19);
}
function Bt(t14, n19) {
  return at("==", t14, n19, Y);
}
function St(t14, n19) {
  return at("<", t14, n19, Y);
}
function jt(t14, n19) {
  return at("<=", t14, n19, Y);
}
function Ct(t14, n19) {
  return at(">", t14, n19, Y);
}
function Gt(t14, n19) {
  return at(">=", t14, n19, Y);
}
function Ht(...t14) {
  return t14.length <= 1 ? t14[0] : t14.slice(1).reduce((t15, n19) => Mt(t15, n19), t14[0]);
}
function Mt(t14, n19) {
  return at("||", t14, n19, Y);
}
function Rt(...t14) {
  return t14.length <= 1 ? t14[0] : t14.slice(1).reduce((t15, n19) => At(t15, n19), t14[0]);
}
function At(t14, n19) {
  return at("&&", t14, n19, Y);
}
function Xt(t14) {
  return pt("abs", t14);
}
function Jt(t14) {
  return pt("all", t14, Y);
}
function Kt(t14) {
  return pt("any", t14, Y);
}
function Wt(t14) {
  return pt("ceil", t14);
}
function Zt(t14, n19, e15) {
  return wt("clamp", t14, n19, e15, t14.constructor);
}
function tn(t14) {
  return pt("cos", t14);
}
function sn(t14, n19) {
  return dt("distance", t14, n19, j);
}
function ln(t14, n19) {
  return dt("dot", t14, n19, j);
}
function vn(t14) {
  return pt("floor", t14);
}
function bn(t14) {
  return pt("fract", t14);
}
function kn(t14) {
  return pt("length", t14, j);
}
function Bn(t14, n19) {
  return dt("max", t14, n19);
}
function Un(t14, n19) {
  return dt("min", t14, n19);
}
function Sn(t14, n19, e15) {
  return wt("mix", t14, n19, e15);
}
function jn(t14, n19) {
  return dt("mod", t14, n19);
}
function Gn(t14) {
  return pt("normalize", t14);
}
function Hn(t14) {
  return "bool" === t14.type ? pt("!", t14) : pt("not", t14);
}
function Wn(t14) {
  return pt("sin", t14);
}
function te(t14, n19, e15) {
  return wt("smoothstep", t14, n19, e15);
}
function ee(t14, n19) {
  return dt("step", t14, n19, n19.constructor);
}
function se(t14, n19) {
  return dt("texture2D", t14, n19, H2);
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/graph/GlslGraphWriter.js
var e8 = 5;
function t8(e15, t14, r14) {
  const n19 = t14.split("\n");
  for (const i19 of n19)
    if (i19.trim().length) {
      {
        let t15 = "";
        null != r14 && (t15 += `/*id:${r14 ?? "000"}*/   `), e15.body += t15.padEnd(14);
      }
      e15.body += " ".repeat(e15.indent) + i19 + "\n";
    }
}
var r8 = class {
  write(e15) {
    for (const t14 of e15.rootOutputNodes())
      e15.shouldPruneOutputNode(t14) || (t14.variableName = this._write(e15, t14.node));
    return e15;
  }
  _createVarName(e15, t14) {
    let r14 = "";
    return "boolean" != typeof t14 && "number" != typeof t14 && t14.debugInfo.name && (r14 = `${t14.debugInfo.name}_`), `${r14}v${e15.varCount++}`;
  }
  _write(e15, t14, r14 = false) {
    if ("number" == typeof t14)
      return t14.toString();
    if ("boolean" == typeof t14)
      return t14.toString();
    let n19 = e15.getEmit(t14);
    if (n19)
      return n19;
    switch (t14.shaderType) {
      case "scope-node":
        n19 = this._writeScopeNode(e15, t14);
        break;
      case "primitive-node":
        n19 = this._writePrimitiveNode(e15, t14, r14);
        break;
      case "function-node":
        n19 = this._writeFunctionNode(e15, t14);
        break;
      case "property-access-node":
        n19 = this._writePropertyAccessNode(e15, t14);
        break;
      case "text-node":
        n19 = t14.text;
        break;
      case "block-node":
        n19 = this._writeBlockNode(e15, t14);
        break;
      case "condition-node":
        n19 = this._writeConditionNode(e15, t14);
    }
    return e15.setEmit(t14, n19), n19;
  }
  _writeScopeNode(e15, r14) {
    const n19 = new r14.child.constructor();
    n19.setDebugName(r14.debugInfo.name);
    const i19 = this._write(e15, n19, true);
    t8(e15, `{ /*ScopeStart: ${r14.uid} ${r14.debugInfo.name}*/`), e15.indent += 2;
    return t8(e15, `${i19} = ${this._write(e15, r14.child)};`), e15.indent -= 2, t8(e15, `} /*ScopeEnd: ${r14.uid} ${r14.debugInfo.name}*/`), i19;
  }
  _writeConditionNode(e15, r14) {
    const n19 = new r14.ifTrue.constructor(), i19 = this._write(e15, n19, true);
    t8(e15, `if (${this._write(e15, r14.condition)}) {`), e15.indent += 2;
    const o14 = e15.createSubgraphContext(), d12 = this._write(o14, r14.ifTrue);
    if (e15.body += o14.body, d12 && t8(e15, `${i19} = ${d12};`), e15.indent -= 2, t8(e15, "}"), r14.ifFalse) {
      t8(e15, "else {"), e15.indent += 2;
      const n20 = e15.createSubgraphContext(), o15 = this._write(n20, r14.ifFalse);
      e15.body += n20.body, o15 && t8(e15, `${i19} = ${o15};`), e15.indent -= 2, t8(e15, "}");
    }
    return i19;
  }
  _writeBlockNode(e15, r14) {
    const { captureList: n19, generator: i19, returnType: o14 } = r14, d12 = {};
    for (const t14 in n19) {
      if (!n19[t14])
        continue;
      const r15 = this._write(e15, n19[t14]);
      d12[t14] = r15;
    }
    const s21 = new o14(), c12 = this._write(e15, s21, true);
    if (d12.out = c12, r14.subgraph) {
      const t14 = e15.createSubgraphContext(), n20 = this._write(t14, r14.subgraph.child), i20 = t14.body;
      d12.subgraph = { varName: n20, body: i20 };
    }
    const a19 = i19(d12);
    return t8(e15, "{\n"), e15.indent += 2, t8(e15, a19), e15.indent -= 2, t8(e15, "}\n"), c12;
  }
  _writePropertyAccessNode(e15, t14) {
    const r14 = this._write(e15, t14.target);
    if ("string" == typeof t14.property && t14.property.includes("["))
      return `${r14}${t14.property}`;
    if ("string" != typeof t14.property) {
      return `${r14}[${this._write(e15, t14.property)}]`;
    }
    return `${r14}.${t14.property}`;
  }
  _writeFunctionNode(r14, n19) {
    const i19 = n19.returnType.type;
    if (n19.isInfix) {
      const [o15, d13] = n19.children.map((e15) => this._write(r14, e15)), s21 = this._createVarName(r14, n19);
      return t8(r14, `${i19.padEnd(e8)} ${s21} = ${o15} ${n19.token} ${d13};`, n19.uid), s21;
    }
    const o14 = n19.children.map((e15) => this._write(r14, e15)).join(", "), d12 = this._createVarName(r14, n19);
    return t8(r14, `${i19.padEnd(e8)} ${d12} = ${n19.token}(${o14});`, n19.uid), d12;
  }
  _writePrimitiveNode(r14, n19, i19 = false) {
    var _a;
    const o14 = r14.getInput(n19);
    if (o14)
      return o14.isUsed = true, o14.variableName;
    const d12 = 1 === n19.children.length && ((_a = n19.children[0]) == null ? void 0 : _a.type) === n19.type;
    if (n19.isImplicit || d12)
      return this._write(r14, n19.children[0]);
    const s21 = this._createVarName(r14, n19);
    if (i19)
      return t8(r14, `${n19.type.padEnd(e8)} ${s21};`, n19.uid), s21;
    const c12 = !n19.debugInfo.name && !n19.isMutable;
    if (c12 && "float" === n19.type && "number" == typeof n19.children[0])
      return Number.isInteger(n19.children[0]) ? n19.children[0].toFixed(1) : n19.children[0].toString();
    if (c12 && "int" === n19.type && "number" == typeof n19.children[0] && Number.isInteger(n19.children[0]))
      return n19.children[0].toString();
    const a19 = n19.children.map((e15) => this._write(r14, e15)).join(", ");
    return "array" === n19.type ? (t8(r14, `${n19.type.padEnd(e8)} ${s21} = [${a19}];`, n19.uid), s21) : c12 ? `${n19.type}(${a19})` : (t8(r14, `${n19.type.padEnd(e8)} ${s21} = ${n19.type}(${a19});`, n19.uid), s21);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/graph/ShaderGraphContext.js
var t9 = class _t {
  constructor(e15, t14, n19) {
    this.variableName = e15, this.variableInputType = t14, this.node = n19, this.type = "shader-input", this.isUsed = false;
  }
  clone() {
    return new _t(this.variableName, this.variableInputType, i9(this.node));
  }
};
var n8 = class _n {
  constructor(e15, t14, n19) {
    this.outVariableName = e15, this.outVariableType = t14, this.node = n19, this.type = "shader-output";
  }
  clone() {
    const t14 = new _n(this.outVariableName, this.outVariableType, i9(this.node));
    return t14.variableName = this.variableName, t14;
  }
};
var o5 = class _o {
  static createVertex(e15, a19, d12, i19, r14, s21) {
    const u12 = [];
    for (const n19 in e15) {
      const o14 = e15[n19], a20 = d12.get(n19);
      a20 ? u12.push(new t9(a20, "builtin", o14)) : u12.push(new t9("a_" + n19, "attribute", o14));
    }
    for (const n19 of i19) {
      const e16 = n19.uniformHydrated;
      u12.push(new t9(n19.uniformName, "uniform", e16));
    }
    const p13 = [];
    for (const t14 in a19) {
      const e16 = a19[t14];
      "glPosition" === t14 ? p13.push(new n8("gl_Position", "builtin", e16)) : "glPointSize" === t14 ? p13.push(new n8("gl_PointSize", "builtin", e16)) : p13.push(new n8("v_" + t14, "varying", e16));
    }
    return new _o(u12, p13, r14, s21);
  }
  static createFragment(e15, a19, d12, i19, r14, s21) {
    const u12 = [], p13 = Array.from(r14.rootOutputNodes());
    for (const n19 in e15) {
      const o14 = e15[n19], a20 = d12.get(n19);
      if (a20) {
        u12.push(new t9(a20, "builtin", o14));
        continue;
      }
      const i20 = p13.find((e16) => e16.node === o14);
      i20 && u12.push(new t9(i20.outVariableName, i20.outVariableType, o14));
    }
    for (const n19 of i19) {
      const e16 = n19.uniformHydrated;
      u12.push(new t9(n19.uniformName, "uniform", e16));
    }
    const h16 = [];
    for (const t14 in a19) {
      const e16 = a19[t14], o14 = d12.get(t14);
      if ("discard" === t14)
        h16.push(new n8(null, "discard", e16));
      else {
        if (!o14)
          throw new Error(`Member ${t14} in shader fragment output shoule be tagged as builtin`);
        h16.push(new n8(o14, "builtin", e16));
      }
    }
    return new _o(u12, h16, s21);
  }
  constructor(e15, t14, n19, o14) {
    this.type = "shader-graph-context", this.indent = 0, this.body = "", this.varCount = 0, this._inputShaderTypesByNodeUid = /* @__PURE__ */ new Map(), this._nodeEmitMap = /* @__PURE__ */ new Map();
    for (const a19 of e15)
      this._inputShaderTypesByNodeUid.set(a19.node.uid, a19);
    this._outputShaderTypes = t14, this._transformFeedbackBindings = n19, this._transformFeedbackNames = new Set(n19.map((e16) => "v_" + e16.propertyKey)), this._usedInFragmentShader = o14;
  }
  shouldPruneOutputNode(e15) {
    return !!this._usedInFragmentShader && ("builtin" !== e15.outVariableType && (!this._transformFeedbackNames.has(e15.outVariableName) && !this._usedInFragmentShader.has(e15.node.uid)));
  }
  setEmit(e15, t14) {
    this._nodeEmitMap.set(e15.uid, t14);
  }
  getEmit(e15) {
    return this._nodeEmitMap.get(e15.uid);
  }
  inputs() {
    return this._inputShaderTypesByNodeUid.values();
  }
  getInput(e15) {
    return this._inputShaderTypesByNodeUid.get(e15.uid);
  }
  *rootOutputNodes() {
    for (const e15 of this._outputShaderTypes)
      yield e15;
  }
  *nodes() {
    const e15 = [];
    for (const t14 of this._outputShaderTypes.values())
      e15.push(t14.node);
    for (; e15.length; ) {
      const t14 = e15.pop();
      "number" != typeof t14 && "boolean" != typeof t14 && e15.push(...t14.children.filter(Boolean)), yield t14;
    }
  }
  *nodesOfTypeOrFunction() {
    for (const e15 of this.nodes())
      "number" != typeof e15 && "boolean" != typeof e15 && (yield e15);
  }
  createSubgraphContext() {
    const e15 = this.clone();
    return e15.body = "", e15.indent = this.indent + 2, e15._nodeEmitMap = new Map(this._nodeEmitMap), e15;
  }
  clone() {
    const e15 = new _o([], this._outputShaderTypes, this._transformFeedbackBindings, this._usedInFragmentShader);
    return e15._inputShaderTypesByNodeUid = this._inputShaderTypesByNodeUid, e15.indent = this.indent, e15.body = this.body, e15.varCount = this.varCount, e15._nodeEmitMap = this._nodeEmitMap, e15;
  }
  insertVertexShader(e15) {
    e15.vertex.code.add(""), this._insertInputs(e15, "vertex"), e15.vertex.code.add(""), e15.vertex.code.add("// OUTPUTS: "), e15.vertex.code.add("// --------------------------------------------------------- ");
    for (const t14 of this.rootOutputNodes()) {
      const n19 = "builtin" === t14.outVariableType;
      this.shouldPruneOutputNode(t14) || (n19 ? e15.vertex.code.add(`// ${t14.outVariableType.padEnd(7)} ${t14.node.type.padEnd(9)} ${t14.outVariableName};`) : e15.vertex.code.add(`${t14.outVariableType.padEnd(10)} ${t14.node.type.padEnd(9)} ${t14.outVariableName};`));
    }
    e15.vertex.code.add(""), e15.vertex.code.add("void main() {"), e15.vertex.code.add("  " + this.body.split("\n").join("\n  "));
    for (const t14 of this.rootOutputNodes())
      this.shouldPruneOutputNode(t14) || e15.vertex.code.add(`  ${t14.outVariableName} = ${t14.variableName};`);
    e15.vertex.code.add("}");
  }
  insertFragmentShader(e15) {
    this._insertInputs(e15, "fragment"), e15.fragment.code.add(""), e15.fragment.code.add("void main() {"), e15.fragment.code.add("  " + this.body.split("\n").join("\n  "));
    for (const t14 of this.rootOutputNodes())
      "discard" === t14.outVariableType ? (e15.fragment.code.add("  // TODO: Should ensure codegen for discard appears first in fragment shader"), e15.fragment.code.add(`  if (${t14.variableName}) {`), e15.fragment.code.add("    discard;"), e15.fragment.code.add("  }"), e15.fragment.code.add("  ")) : e15.fragment.code.add(`  ${t14.outVariableName} = ${t14.variableName};`);
    e15.fragment.code.add("}");
  }
  _insertInputs(e15, t14) {
    e15[t14].code.add("// INPUTS: "), e15[t14].code.add("// --------------------------------------------------------- ");
    for (const n19 of this.inputs())
      n19.isUsed && "builtin" !== n19.variableInputType && ("array" === n19.node.type ? e15[t14].code.add(`${n19.variableInputType.padEnd(10)} ${n19.node.elementType.type.padEnd(9)} ${n19.variableName}[${n19.node.size}];`) : e15[t14].code.add(`${n19.variableInputType.padEnd(10)} ${n19.node.type.padEnd(9)} ${n19.variableName};`));
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/typed/TypedShaderProgram.js
var s11 = () => n.getLogger("esri.views.2d.engine.webgl.shaderGraph.typed.TypedShaderProgram");
function n9(e15, t14, o14) {
  const i19 = t14.length;
  if (i19 !== o14) {
    const n19 = new s("Invalid Uniform", `Invalid length, expected ${o14} but got ${i19}`, { uniformName: e15, values: t14 });
    s11().errorOnce(n19);
  }
}
var a11 = class {
  constructor(r14, e15, t14, o14, i19, s21) {
    this._program = null, this._vao = null, this._temporaryTextures = [], this.vertexShader = r14, this.fragmentShader = e15, this._locations = t14, this._locationInfo = o14, this._uniformBindings = i19, this._transformFeedbackBindings = s21;
  }
  destroy() {
    this._program && this._program.dispose(), this.cleanupTemporaryTextures();
  }
  get locations() {
    return this._locations;
  }
  get locationInfo() {
    return this._locationInfo;
  }
  setUniforms(r14) {
    this._uniforms = r14;
  }
  cleanupTemporaryTextures() {
    for (const r14 of this._temporaryTextures)
      r14.dispose();
    this._temporaryTextures = [];
  }
  bind(r14) {
    const e15 = this._uniforms;
    if (!this._program) {
      const e16 = /* @__PURE__ */ new Map();
      for (const [r15, o14] of this._locations)
        e16.set(r15, o14);
      const t14 = [];
      for (const r15 of this._transformFeedbackBindings ?? []) {
        const { index: e17, propertyKey: o14 } = r15;
        t14[e17] = `v_${o14}`;
      }
      this._program = new r3(r14, this.vertexShader, this.fragmentShader, e16, /* @__PURE__ */ new Map(), t14);
    }
    const s21 = this._program;
    r14.useProgram(s21);
    for (const o14 of this._uniformBindings) {
      const { shaderModulePath: a19, uniformName: f14, uniformType: m11, uniformArrayLength: c12 } = o14, l15 = t2(a19, e15);
      if (null == l15) {
        if ("sampler2D" === m11)
          continue;
        throw new Error(`Failed to find uniform value for ${a19}`);
      }
      switch ("array" === m11 ? o14.uniformArrayElementType : m11) {
        case "sampler2D": {
          const { unit: e16, texture: t14 } = l15;
          if (s21.setUniform1i(f14, e16), "type" in t14)
            r14.bindTexture(t14, e16);
          else {
            const o15 = T(r14, t14.descriptor, t14.data);
            r14.bindTexture(o15, e16);
          }
          break;
        }
        case "int":
          if (!c12) {
            s21.setUniform1i(f14, l15);
            break;
          }
          n9(o14.uniformName, l15, c12), s21.setUniform1iv(f14, l15);
          break;
        case "float":
          if (!c12) {
            s21.setUniform1f(f14, l15);
            break;
          }
          n9(o14.uniformName, l15, c12), s21.setUniform1fv(f14, l15);
          break;
        case "vec2":
          if (!c12) {
            s21.setUniform2f(f14, l15[0], l15[1]);
            break;
          }
          n9(o14.uniformName, l15, c12), s21.setUniform2fv(f14, l15.flat());
          break;
        case "vec3":
          if (!c12) {
            s21.setUniform3f(f14, l15[0], l15[1], l15[2]);
            break;
          }
          n9(o14.uniformName, l15, c12), s21.setUniform3fv(f14, l15.flat());
          break;
        case "vec4":
          if (!c12) {
            s21.setUniform4f(f14, l15[0], l15[1], l15[2], l15[3]);
            break;
          }
          n9(o14.uniformName, l15, c12), s21.setUniform4fv(f14, l15.flat());
          break;
        case "mat3":
          s21.setUniformMatrix3fv(f14, l15.flat());
          break;
        case "mat4":
          s21.setUniformMatrix4fv(f14, l15.flat());
          break;
        default:
          throw new Error(`Unable to set uniform for type ${m11}`);
      }
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/GraphShaderModule.js
function y3(t14) {
  return new t14();
}
function h5(t14, e15, r14) {
  const o14 = t14.constructor[e15] ?? [];
  t14.constructor.hasOwnProperty(e15) || Object.defineProperty(t14.constructor, e15, { value: o14.slice() }), t14.constructor[e15].push(r14);
}
function f3(t14, e15) {
  return (r14, o14) => {
    h5(r14, "locations", { typeCtor: e15, propertyKey: o14, parameterIndex: null, index: t14 });
  };
}
var l7 = (t14) => (e15, r14) => {
  h5(e15, "builtins", { builtin: t14, propertyKey: r14 });
};
var m3 = (t14) => (e15, r14, o14) => {
  h5(e15, "inputs", { inputCtor: t14, propertyKey: r14, parameterIndex: o14 });
};
var g4 = (t14) => (e15, r14) => {
  h5(e15, "uniforms", { typeCtor: t14, propertyKey: r14 });
};
var _3 = (t14) => (e15, r14) => {
  h5(e15, "options", { typeCtor: t14, propertyKey: r14 });
};
var K3 = (t14, e15) => {
  h5(t14, "defines", { propertyKey: e15 });
};
var C4 = (t14, e15) => (r14, o14) => {
  r14.constructor.builtins.push({ builtin: t14, propertyKey: o14, typeCtor: e15 });
};
var I3 = class {
};
I3.builtins = [], e([C4("gl_VertexID", O3)], I3.prototype, "glVertexID", void 0);
var b2 = class {
};
var v2 = class {
};
v2.builtins = [], e([C4("gl_FragCoord", H2)], v2.prototype, "glFragCoord", void 0), e([C4("gl_PointCoord", C3)], v2.prototype, "glPointCoord", void 0);
var w4 = class {
};
e([l7("gl_FragColor")], w4.prototype, "glFragColor", void 0);
var F2 = class {
  constructor() {
    this.type = "uniform-group";
  }
  get _uniforms() {
    return this.constructor.uniforms ?? [];
  }
};
var P2 = class {
  constructor() {
    this.logShader = false, this.computeAttributes = {};
  }
  get vertexInput() {
    const t14 = this._shaderModuleClass.inputs.findLast((t15) => "vertex" === t15.propertyKey && 0 === t15.parameterIndex);
    if (!t14)
      throw new Error("Unable to find vertex input parameter");
    return t14;
  }
  get computeInput() {
    return this._shaderModuleClass.inputs.findLast((t14) => "vertex" === t14.propertyKey && 1 === t14.parameterIndex);
  }
  get fragmentInput() {
    const t14 = this._shaderModuleClass.inputs.findLast((t15) => "fragment" === t15.propertyKey);
    if (!t14)
      throw new Error("Unable to find fragment input parameter");
    return t14;
  }
  get transformFeedbackBindings() {
    return this.fragmentInput.inputCtor.transformFeedbackBindings ?? [];
  }
  get locations() {
    var _a;
    return [...this.vertexInput.inputCtor.locations, ...((_a = this.computeInput) == null ? void 0 : _a.inputCtor.locations) ?? []];
  }
  get locationsMap() {
    const t14 = /* @__PURE__ */ new Map(), r14 = /* @__PURE__ */ new Set();
    for (const o14 of this.locations)
      r14.has(o14.index) ? n.getLogger("esri.views.2d.engine.webgl.shaderGraph.GraphShaderModule").warnOnce("mapview-rendering", `Unable to assigned attribute ${o14.propertyKey} to ${o14.index}. Index already in use`, { locationsMap: t14 }) : (t14.set(o14.propertyKey, o14.index), r14.add(o14.index));
    return t14;
  }
  get locationInfo() {
    if (!this._locationInfo) {
      const t14 = this.locationsMap, e15 = Array.from(t14.entries()).map(([t15, e16]) => `${t15}.${e16}`).join("."), o14 = c(e15);
      this._locationInfo = { hash: o14, locations: t14 };
    }
    return this._locationInfo;
  }
  get renamedLocationsMap() {
    const t14 = /* @__PURE__ */ new Map();
    for (const e15 of this.locations)
      t14.set("a_" + e15.propertyKey, e15.index);
    return t14;
  }
  get optionPropertyKeys() {
    if (!this._optionPropertyKeys) {
      const t14 = /* @__PURE__ */ new Set();
      for (const e15 of this._options)
        t14.add(e15.propertyKey);
      this._optionPropertyKeys = t14;
    }
    return this._optionPropertyKeys;
  }
  get _shaderModuleClass() {
    return this.constructor;
  }
  get _defines() {
    return this._shaderModuleClass.defines ?? [];
  }
  get _options() {
    return this._shaderModuleClass.options ?? [];
  }
  get _uniforms() {
    return this._shaderModuleClass.uniforms ?? [];
  }
  getProgram(t14, e15, r14, o14) {
    try {
      const { vertex: n19, fragment: s21, uniformBindings: i19 } = this._generateShaders(t14, e15, r14, o14);
      return new a11(n19, s21, this.renamedLocationsMap, this.locationInfo, i19, this.transformFeedbackBindings);
    } catch (n19) {
      return console.error("Failed to create program", { error: n19 }), new a11("", "", this.renamedLocationsMap, this.locationInfo, [], this.transformFeedbackBindings);
    }
  }
  getDebugUniformClassInfo(t14) {
    const e15 = this._options.find((e16) => e16.propertyKey === t14);
    if (e15)
      return { type: "option", className: e15.typeCtor };
    const r14 = this._uniforms.find((e16) => e16.propertyKey === t14);
    if (!r14)
      throw new Error(`Unable to find uniform class type for property: ${t14}`);
    return { type: "required", className: r14.typeCtor };
  }
  getShaderKey(t14, e15, r14, o14) {
    const n19 = Object.keys(r14).map((t15) => `${t15}.${r14[t15]}`).join("."), s21 = Object.keys(o14).map((t15) => `${t15}.${o14[t15]}`).join("."), i19 = Object.keys(e15).filter((t15) => this.optionPropertyKeys.has(t15) && e15[t15]).join(".");
    return `${this.constructor.name}.${t14.hash}.${n19}.${s21}.${i19}`;
  }
  _generateShaders(t14, e15, r14, o14) {
    const n19 = [];
    this._setDefines(r14), this._setOptionalUniforms(n19, e15), this._setRequiredUniforms(n19);
    const s21 = this._hydrateVertexInput(o14), i19 = this._injectPackPrecisionFactor(s21, t14), p13 = this._hydrateComputeInput(), d12 = p13 && this._injectPackPrecisionFactor(p13, t14), y8 = this.vertex(i19, d12), h16 = this._hydrateFragmentInput(y8), f14 = this.fragment(h16), l15 = /* @__PURE__ */ new Set();
    for (const a19 in f14) {
      const t15 = f14[a19];
      e7(l15, t15);
    }
    const m11 = this._getVertexInputBuiltins(), g14 = o5.createVertex({ ...s21, ...p13 }, y8, m11, n19, this.transformFeedbackBindings, l15);
    new r8().write(g14);
    const _10 = this._getFragmentInputBuiltins(f14);
    _10.set("glPointCoord", "gl_PointCoord");
    const K4 = o5.createFragment(h16, f14, _10, n19, g14, this.transformFeedbackBindings);
    new r8().write(K4);
    const x9 = this._createShaderBuilder(g14, K4), C7 = x9.generate("vertex", false), I6 = x9.generate("fragment", false);
    return this.logShader && (console.log(C7), console.log(I6)), { vertex: C7, fragment: I6, uniformBindings: n19 };
  }
  _setDefines(t14) {
    for (const e15 in t14)
      this[e15] = t14[e15];
  }
  _setOptionalUniforms(t14, e15) {
    for (const r14 of this._options) {
      e15[r14.propertyKey] ? this[r14.propertyKey] = this._hydrateUniformGroup(t14, r14) : this[r14.propertyKey] = null;
    }
  }
  _setRequiredUniforms(t14) {
    for (const e15 of this._uniforms)
      this[e15.propertyKey] = this._hydrateUniformGroup(t14, e15);
  }
  _hydrateUniformGroup(t14, e15) {
    const r14 = new (0, e15.typeCtor)();
    for (const o14 of r14._uniforms ?? []) {
      const n19 = y3(o14.typeCtor), s21 = `u_${e15.propertyKey}_${o14.propertyKey}`, i19 = n19.type, p13 = [e15.propertyKey, o14.propertyKey].join(".");
      if ("type" in o14.typeCtor && "array" === o14.typeCtor.type) {
        const e16 = n19;
        t14.push({ shaderModulePath: p13, uniformName: s21, uniformType: i19, uniformArrayLength: e16.size, uniformArrayElementType: e16.elementType.type, uniformHydrated: n19 });
      } else
        t14.push({ shaderModulePath: p13, uniformName: s21, uniformType: i19, uniformHydrated: n19 });
      r14[o14.propertyKey] = n19;
    }
    return r14;
  }
  _hydrateVertexInput(t14) {
    const e15 = this.vertexInput.inputCtor, r14 = e15.locations.reduce((e16, r15) => false === t14[r15.propertyKey] ? e16 : { ...e16, [r15.propertyKey]: y3(r15.typeCtor) }, {});
    for (const { propertyKey: o14, typeCtor: n19 } of e15.builtins) {
      const t15 = y3(n19);
      r14[o14] = t15;
    }
    return r14;
  }
  _hydrateComputeInput() {
    if (null == this.computeInput)
      return null;
    return this.computeInput.inputCtor.locations.reduce((t14, e15) => ({ ...t14, [e15.propertyKey]: y3(e15.typeCtor) }), {});
  }
  _injectPackPrecisionFactor(t14, e15) {
    const r14 = {};
    for (const o14 in t14) {
      const s21 = t14[o14], i19 = e15.attributes.find((t15) => t15.name === o14);
      if (i19 == null ? void 0 : i19.packPrecisionFactor) {
        if ("float" !== s21.type && "vec2" !== s21.type && "vec3" !== s21.type && "vec4" !== s21.type)
          throw new Error(`InternalError: packPrecisionFactor requires GenType, but found ${s21.type}`);
        r14[o14] = s21.divide(new j(i19.packPrecisionFactor));
      } else
        r14[o14] = s21;
    }
    return r14;
  }
  _hydrateFragmentInput(t14) {
    const e15 = {};
    for (const r14 in t14)
      e15[r14] = t14[r14];
    for (const { propertyKey: r14, typeCtor: o14 } of v2.builtins) {
      const t15 = y3(o14);
      e15[r14] = t15;
    }
    return e15;
  }
  _getVertexInputBuiltins() {
    const t14 = this.vertexInput.inputCtor, e15 = /* @__PURE__ */ new Map();
    for (const { builtin: r14, propertyKey: o14 } of t14.builtins)
      e15.set(o14, r14);
    return e15;
  }
  _getFragmentInputBuiltins(t14) {
    const e15 = t14.constructor, r14 = /* @__PURE__ */ new Map();
    for (const o14 of e15.builtins ?? [])
      r14.set(o14.propertyKey, o14.builtin);
    return r14;
  }
  _createShaderBuilder(t14, e15) {
    const r14 = new o3();
    return this._insertDebugInfo(r14), t14.insertVertexShader(r14), e15.insertFragmentShader(r14), r14;
  }
  _insertDebugInfo(t14) {
    t14.vertex.code.add("// DEFINES: "), t14.vertex.code.add("// --------------------------------------------------------- ");
    for (const e15 of this._defines)
      this[e15.propertyKey] ? t14.vertex.code.add(`//   ${e15.propertyKey}: true`) : t14.vertex.code.add(`//   ${e15.propertyKey}: false`);
    t14.vertex.code.add(""), t14.vertex.code.add("// OPTIONS: "), t14.vertex.code.add("// --------------------------------------------------------- ");
    for (const e15 of this._options)
      this[e15.propertyKey] ? t14.vertex.code.add(`//   ${e15.propertyKey}: true`) : t14.vertex.code.add(`//   ${e15.propertyKey}: false`);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/utils.js
function g5(t14) {
  const e15 = ct2(12.9898), l15 = ct2(78.233), s21 = ct2(43758.5453), f14 = ln(t14, it(e15, l15)), m11 = jn(f14, ct2(3.14));
  return bn(Wn(m11).multiply(s21));
}
function h6(t14) {
  return Bt(t14, ct2(k));
}
function b3(t14, n19) {
  return t14.x.multiply(n19.y).subtract(n19.x.multiply(t14.y));
}
function d5(t14) {
  return t14.multiply(2).subtract(1);
}
function j2(t14, r14) {
  const u12 = ct2(2 ** r14);
  return jn(vn(t14.divide(u12)), ct2(2));
}
function z2(t14, r14) {
  return Ct(j2(t14, r14), ct2(0.5));
}
function v3(n19, r14) {
  return j2(n19, r14 + l3.length);
}
function w5(t14, n19) {
  return j2(t14, n19);
}
function R2(t14) {
  const r14 = j2(t14.z, 7), u12 = ct2(1).subtract(r14), i19 = t14.xyz.subtract(ut(0, 0, ct2(128)));
  return u12.multiply(t14).add(r14.multiply(i19));
}
function k2(t14) {
  const n19 = ot(255 / 256, 255 / 65536, 255 / 16777216, 255 / 4294967296);
  return ln(t14, n19);
}
function q3(t14) {
  return Bn(Bn(Bn(t14.x, t14.y), t14.z), t14.w);
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/EntityStorage.js
var p4 = class extends F2 {
  getVisualVariableData(t14) {
    if (!this._vvData) {
      const a19 = this.getAttributeDataCoords(t14);
      this._vvData = se(this.visualVariableData, a19).setDebugName("storage2");
    }
    return this._vvData;
  }
  getAttributeDataCoords(t14) {
    if (!this._uv) {
      const a19 = R2(t14), e15 = this.size, i19 = rt(a19.x), g14 = rt(a19.y).multiply(rt(256)), l15 = rt(a19.z).multiply(rt(256)).multiply(rt(256)), n19 = ct2(i19.add(g14).add(l15)), p13 = jn(n19, e15), d12 = n19.subtract(p13).divide(e15);
      this._uv = new C3(p13, d12).add(0.5).divide(e15);
    }
    return this._uv;
  }
  getFilterData(t14) {
    const a19 = this.getAttributeDataCoords(t14);
    return se(this.filterFlags, a19).setDebugName("storage0");
  }
  getAnimationData(t14) {
    const a19 = this.getAttributeDataCoords(t14);
    return se(this.animation, a19).setDebugName("storage1");
  }
  getVVData(t14) {
    return this.getVisualVariableData(t14);
  }
  getDataDrivenData0(t14) {
    const a19 = this.getAttributeDataCoords(t14);
    return se(this.dataDriven0, a19).setDebugName("storage30");
  }
  getDataDrivenData1(t14) {
    const a19 = this.getAttributeDataCoords(t14);
    return se(this.dataDriven1, a19).setDebugName("storage31");
  }
  getDataDrivenData2(t14) {
    const a19 = this.getAttributeDataCoords(t14);
    return se(this.dataDriven2, a19).setDebugName("storage32");
  }
  getGPGPUData(t14) {
    const a19 = this.getAttributeDataCoords(t14);
    return se(this.gpgpu, a19).setDebugName("storage4");
  }
  getFilterFlags(t14) {
    return has("webgl-ignores-sampler-precision") ? Wt(this.getFilterData(t14).x.multiply(ct2(255))) : this.getFilterData(t14).x.multiply(ct2(255));
  }
  getAnimationValue(t14) {
    return this.getAnimationData(t14).x;
  }
  getSizeValue(t14) {
    return this.getVisualVariableData(t14).x;
  }
  getColorValue(t14) {
    return this.getVisualVariableData(t14).y;
  }
  getOpacityValue(t14) {
    return this.getVisualVariableData(t14).z;
  }
  getRotationValue(t14) {
    return this.getVisualVariableData(t14).w;
  }
};
e([g4(S4)], p4.prototype, "filterFlags", void 0), e([g4(S4)], p4.prototype, "animation", void 0), e([g4(S4)], p4.prototype, "gpgpu", void 0), e([g4(S4)], p4.prototype, "visualVariableData", void 0), e([g4(S4)], p4.prototype, "dataDriven0", void 0), e([g4(S4)], p4.prototype, "dataDriven1", void 0), e([g4(S4)], p4.prototype, "dataDriven2", void 0), e([g4(j)], p4.prototype, "size", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/ShaderHighlight.js
var e9 = class extends F2 {
};
e([g4(j)], e9.prototype, "activeReasons", void 0), e([g4(j)], e9.prototype, "highlightAll", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/ShaderHittest.js
var e10 = class extends F2 {
};
e([g4(C3)], e10.prototype, "position", void 0), e([g4(j)], e10.prototype, "distance", void 0), e([g4(j)], e10.prototype, "smallSymbolDistance", void 0), e([g4(j)], e10.prototype, "smallSymbolSizeThreshold", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/ViewInfo.js
var d6 = class extends F2 {
};
e([g4(tt)], d6.prototype, "displayViewScreenMat3", void 0), e([g4(tt)], d6.prototype, "displayViewMat3", void 0), e([g4(tt)], d6.prototype, "displayMat3", void 0), e([g4(tt)], d6.prototype, "viewMat3", void 0), e([g4(tt)], d6.prototype, "tileMat3", void 0), e([g4(j)], d6.prototype, "displayZoomFactor", void 0), e([g4(j)], d6.prototype, "requiredZoomFactor", void 0), e([g4(C3)], d6.prototype, "tileOffset", void 0), e([g4(j)], d6.prototype, "currentScale", void 0), e([g4(j)], d6.prototype, "currentZoom", void 0), e([g4(j)], d6.prototype, "metersPerSRUnit", void 0), e([g4(j)], d6.prototype, "rotation", void 0), e([g4(j)], d6.prototype, "pixelRatio", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/AFeatureShader.js
var S5 = class extends I3 {
};
e([f3(0, G2)], S5.prototype, "id", void 0), e([f3(1, j)], S5.prototype, "bitset", void 0), e([f3(2, C3)], S5.prototype, "pos", void 0);
var q4 = class extends b2 {
};
e([f3(14, C3)], q4.prototype, "nextPos1", void 0), e([f3(15, C3)], q4.prototype, "nextPos2", void 0);
var F3 = class extends v2 {
};
var P3 = class extends P2 {
  clip(t14, i19) {
    let e15 = new j(0);
    const o14 = this.storage.getFilterFlags(t14);
    if (e15 = e15.add(ct2(2).multiply(ct2(1).subtract(v3(o14, 0)))), this.inside ? e15 = e15.add(ct2(2).multiply(ct2(1).subtract(v3(o14, 1)))) : this.outside ? e15 = e15.add(ct2(2).multiply(v3(o14, 1))) : this.highlight && (e15 = e15.add(ct2(2).multiply(ct2(1).subtract(this._checkHighlight(o14))))), null != i19) {
      const t15 = new j(1).subtract(ee(i19.x, this.view.currentZoom)), o15 = ee(i19.y, this.view.currentZoom);
      e15 = e15.add(new j(2).multiply(t15.add(o15)));
    }
    return e15;
  }
  getFragmentOutput(t14, i19, e15 = new j(1 / 255)) {
    const o14 = new w4();
    return o14.glFragColor = this._maybeWriteHittest(i19) ?? this._maybeHighlight(t14, e15) ?? t14, o14;
  }
  _maybeHighlight(t14, i19) {
    return this.highlight ? new H2(t14.rgb, ee(i19, t14.a)) : null;
  }
  _checkHighlight(t14) {
    let e15 = this._checkHighlightBit(t14, 0);
    for (let o14 = 1; o14 < l3.length; o14++)
      e15 = e15.add(this._checkHighlightBit(t14, o14));
    return ee(new j(0.1), e15.add(this.highlight.highlightAll));
  }
  _checkHighlightBit(t14, i19) {
    return w5(t14, i19).multiply(j2(this.highlight.activeReasons, i19));
  }
  maybeRunHittest(t14, i19, e15) {
    if (null == this.hittestRequest)
      return null;
    const o14 = this.hittest(t14, i19, e15);
    let s21 = xt(Ct(o14, this.hittestRequest.distance), new j(2), new j(0));
    const r14 = this.storage.getAttributeDataCoords(t14.id), h16 = d5(r14);
    s21 = s21.add(this.clip(t14.id, t14.zoomRange));
    const l15 = new H2(new j(1 / 255), 0, 0, 0);
    return { glPointSize: new j(1), glPosition: new H2(h16, s21, 1), color: l15 };
  }
  _maybeWriteHittest(t14) {
    return null != this.hittestRequest ? t14.color : null;
  }
};
e([K3], P3.prototype, "inside", void 0), e([K3], P3.prototype, "outside", void 0), e([_3(e9)], P3.prototype, "highlight", void 0), e([g4(p4)], P3.prototype, "storage", void 0), e([g4(d6)], P3.prototype, "view", void 0), e([_3(e10)], P3.prototype, "hittestRequest", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/hittestUtils.js
function v4(n19, r14) {
  return ln(n19, Gn(r14));
}
function j3(t14, u12, s21) {
  const l15 = s21.subtract(u12), c12 = v4(t14.subtract(u12), l15), e15 = Zt(c12.divide(kn(l15)), new j(0), new j(1));
  return sn(t14, u12.add(e15.multiply(s21.subtract(u12))));
}
function g6(t14) {
  const u12 = Xt(t14);
  return ee(u12.x.add(u12.y).add(u12.z), new j(1.05));
}
function h7(t14, u12, n19, i19) {
  const y8 = new tt(n19.x.multiply(i19.y).subtract(i19.x.multiply(n19.y)), i19.x.multiply(u12.y).subtract(u12.x.multiply(i19.y)), u12.x.multiply(n19.y).subtract(n19.x.multiply(u12.y)), n19.y.subtract(i19.y), i19.y.subtract(u12.y), u12.y.subtract(n19.y), i19.x.subtract(n19.x), u12.x.subtract(i19.x), n19.x.subtract(u12.x)), s21 = u12.x.multiply(n19.y.subtract(i19.y)), l15 = n19.x.multiply(i19.y.subtract(u12.y)), a19 = i19.x.multiply(u12.y.subtract(n19.y)), o14 = s21.add(l15).add(a19);
  return new j(1).divide(o14).multiply(y8.multiply(new G2(1, t14)));
}
function M3(t14, u12, n19, i19) {
  return Bt(g6(h7(t14, u12, n19, i19)), new j(1));
}
function P4(t14, u12, n19, i19) {
  const y8 = n19.subtract(u12), s21 = i19.subtract(u12), l15 = b3(y8, s21), c12 = Rt(St(l15, new j(u3)), Ct(l15, new j(-u3)));
  return gt([Rt(Hn(c12), M3(t14.xy, u12, n19, i19)), new j(-1)], [true, () => {
    const r14 = j3(t14, u12, n19), y9 = j3(t14, n19, i19), s22 = j3(t14, i19, u12);
    return Un(Un(r14, y9), s22);
  }]);
}
function q5(t14) {
  return t14.distance.add(1);
}
function z3(t14, u12, n19) {
  const { viewMat3: r14, tileMat3: i19 } = t14.view, y8 = r14.multiply(i19), s21 = y8.multiply(new G2(u12.pos, 1)), l15 = y8.multiply(new G2(n19.nextPos1, 1)), c12 = y8.multiply(new G2(n19.nextPos2, 1));
  return P4(t14.hittestRequest.position, s21.xy, l15.xy, c12.xy);
}
function R3(t14, u12, n19) {
  return sn(t14, n19).subtract(u12);
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/VisualVariableColor.js
var f4 = class extends F2 {
  getColor(s21, t14, o14) {
    return gt([Ht(h6(s21), o14), t14], [jt(s21, this.values.first()), this.colors.first()], [Gt(s21, this.values.last()), this.colors.last()], [true, () => {
      const t15 = this.values.findIndex((t16) => Ct(t16, s21)), o15 = this.values.get(t15), r14 = t15.subtract(1), e15 = this.values.get(r14), i19 = s21.subtract(e15).divide(o15.subtract(e15));
      return Sn(this.colors.get(r14), this.colors.get(t15), i19);
    }]);
  }
};
e([g4(U3.ofType(H2, 8))], f4.prototype, "colors", void 0), e([g4(U3.ofType(j, 8))], f4.prototype, "values", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/VisualVariableOpacity.js
var h8 = class extends F2 {
  getOpacity(t14) {
    return gt([h6(t14), new j(1)], [jt(t14, this.opacityValues.first()), this.opacities.first()], [Gt(t14, this.opacityValues.last()), this.opacities.last()], [true, () => {
      const s21 = this.opacityValues.findIndex((s22) => Ct(s22, t14)), i19 = this.opacityValues.get(s21), e15 = s21.subtract(1), o14 = this.opacityValues.get(e15), a19 = t14.subtract(o14).divide(i19.subtract(o14));
      return Sn(this.opacities.get(e15), this.opacities.get(s21), a19);
    }]);
  }
};
e([g4(U3.ofType(j, 8))], h8.prototype, "opacities", void 0), e([g4(U3.ofType(j, 8))], h8.prototype, "opacityValues", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/vvUtils.js
function l8(a19) {
  return null != a19.visualVariableSizeMinMaxValue || null != a19.visualVariableSizeScaleStops || null != a19.visualVariableSizeStops || null != a19.visualVariableSizeUnitValue;
}
function t10(a19, e15, i19) {
  var _a, _b, _c, _d;
  if (l8(a19)) {
    const l15 = a19.storage.getSizeValue(e15);
    return ((_a = a19.visualVariableSizeMinMaxValue) == null ? void 0 : _a.getSize(l15, i19)) ?? ((_b = a19.visualVariableSizeScaleStops) == null ? void 0 : _b.getSizeForViewScale(a19.view.currentScale)) ?? ((_c = a19.visualVariableSizeStops) == null ? void 0 : _c.getSize(l15, i19)) ?? ((_d = a19.visualVariableSizeUnitValue) == null ? void 0 : _d.getSize(l15, i19));
  }
  return i19;
}
function r9(e15, i19, l15, t14 = new Y(false)) {
  if (null == e15.visualVariableColor)
    return l15;
  const r14 = e15.storage.getColorValue(i19);
  return e15.visualVariableColor.getColor(r14, l15, t14);
}
function u6(a19, i19) {
  if (null == a19.visualVariableOpacity)
    return new j(1);
  const l15 = a19.storage.getOpacityValue(i19);
  return a19.visualVariableOpacity.getOpacity(l15);
}
function n10(a19, e15) {
  if (null == a19.visualVariableRotation)
    return tt.identity();
  const l15 = a19.storage.getRotationValue(e15);
  return a19.visualVariableRotation.getVVRotationMat3(l15);
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/FillShader.js
var g7 = class extends S5 {
};
e([f3(3, H2)], g7.prototype, "color", void 0), e([f3(4, C3)], g7.prototype, "zoomRange", void 0);
var x2 = class extends P3 {
  constructor() {
    super(...arguments), this.computeAttributes = { pos: ["nextPos1", "nextPos2"] };
  }
  vertex(t14, o14) {
    const r14 = u6(this, t14.id), e15 = r9(this, t14.id, t14.color).multiply(r14), i19 = this.view.displayViewScreenMat3.multiply(new G2(t14.pos.xy, 1)), p13 = this.clip(t14.id, t14.zoomRange);
    return { glPosition: new H2(i19.xy, p13, 1), color: e15, ...this.maybeRunHittest(t14, o14, null) };
  }
  fragment(t14) {
    return this.getFragmentOutput(t14.color, t14, new j(0));
  }
  hittest(t14, o14) {
    return z3(this, t14, o14);
  }
};
e([_3(f4)], x2.prototype, "visualVariableColor", void 0), e([_3(h8)], x2.prototype, "visualVariableOpacity", void 0), e([t(0, m3(g7)), t(1, m3(q4))], x2.prototype, "vertex", null), e([t(0, m3(F3))], x2.prototype, "fragment", null);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/LocalTileOffset.js
var n11 = class extends F2 {
  getPatternOffsetAtTileOrigin(t14, i19 = new j(0), l15 = new j(1)) {
    const n19 = new C3(K).divide(t14);
    let p13 = t14.multiply(bn(this.maxIntsToLocalOrigin.multiply(n19))).add(this.tileOffsetFromLocalOrigin).subtract(new j(0.5).multiply(t14));
    return p13 = new C3(p13.x.multiply(l15).subtract(p13.y.multiply(i19)), p13.x.multiply(i19).add(p13.y.multiply(l15))), jn(p13, t14);
  }
};
e([g4(C3)], n11.prototype, "tileOffsetFromLocalOrigin", void 0), e([g4(C3)], n11.prototype, "maxIntsToLocalOrigin", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/MosaicInfo.js
var p5 = class extends F2 {
};
e([g4(C3)], p5.prototype, "size", void 0), e([g4(S4)], p5.prototype, "texture", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/ComplexFillShader.js
var P5 = class extends g7 {
};
e([f3(5, H2)], P5.prototype, "tlbr", void 0), e([f3(6, j)], P5.prototype, "width", void 0), e([f3(7, j)], P5.prototype, "height", void 0), e([f3(8, C3)], P5.prototype, "offset", void 0), e([f3(9, C3)], P5.prototype, "scale", void 0), e([f3(10, j)], P5.prototype, "angle", void 0);
var Z2 = class extends F3 {
};
function _4(t14, e15, o14, i19, r14) {
  const l15 = Bt(j2(r14, C2), ct2(1)), s21 = k2(new H2(t14, 0));
  return xt(l15, lt(i19.divide(e15.x), o14.divide(e15.y), 0, yt(o14.divide(e15.x)), i19.divide(e15.y), 0, g5(it(s21, 0)), g5(it(0, s21)), 1), lt(i19.divide(e15.x), o14.divide(e15.y), 0, yt(o14.divide(e15.x)), i19.divide(e15.y), 0, 0, 0, 1));
}
function B3(t14, e15) {
  const i19 = Sn(new C3(1), new C3(1 / l), new C3(j2(e15.bitset, E), j2(e15.bitset, D))), r14 = t14.view.requiredZoomFactor, l15 = new C3(e15.width, e15.height).multiply(i19), f14 = l15.multiply(e15.scale).multiply(r14), y8 = e15.angle.multiply(c4), c12 = Wn(y8), v7 = tn(y8), x9 = _4(e15.id, f14, c12, v7, e15.bitset), h16 = t14.localTileOffset.getPatternOffsetAtTileOrigin(l15, c12, v7), g14 = r14.multiply(e15.scale).multiply(e15.offset.subtract(h16)).divide(f14), w10 = new G2(e15.pos, 1), b8 = x9.multiply(w10).xy.subtract(g14), j7 = e15.tlbr.divide(t14.mosaicInfo.size.xyxy);
  let O5 = j2(e15.bitset, q);
  return null != t14.visualVariableColor && (O5 = xt(h6(t14.storage.getColorValue(e15.id)), new j(0), O5)), { tileTextureCoord: b8, tlbr: j7, sampleAlphaOnly: O5 };
}
function D3(t14, e15) {
  const o14 = jn(e15.tileTextureCoord, new j(1)), i19 = Sn(e15.tlbr.xy, e15.tlbr.zw, o14);
  let r14 = se(t14.mosaicInfo.texture, i19);
  return r14 = xt(Ct(e15.sampleAlphaOnly, new j(0.5)), r14.aaaa, r14), e15.color.multiply(r14);
}
var E2 = class extends x2 {
  vertex(t14, e15) {
    return { ...super.vertex(t14, e15), ...B3(this, t14) };
  }
  fragment(t14) {
    const e15 = D3(this, t14);
    return this.getFragmentOutput(e15, t14, new j(0));
  }
};
e([g4(p5)], E2.prototype, "mosaicInfo", void 0), e([g4(n11)], E2.prototype, "localTileOffset", void 0), e([t(0, m3(P5)), t(1, m3(q4))], E2.prototype, "vertex", null), e([t(0, m3(Z2))], E2.prototype, "fragment", null);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/VisualVariableSizeMinMaxValue.js
var m4 = class extends F2 {
  getSize(t14, e15) {
    const r14 = this.minMaxValueAndSize.xy, o14 = this.minMaxValueAndSize.zw;
    return xt(h6(t14), e15, () => {
      const e16 = t14.subtract(r14.x).divide(r14.y.subtract(r14.x)), s21 = Zt(e16, new j(0), new j(1));
      return o14.x.add(s21.multiply(o14.y.subtract(o14.x)));
    });
  }
};
e([g4(H2)], m4.prototype, "minMaxValueAndSize", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/VisualVariableSizeScaleStops.js
var p6 = class extends F2 {
  getSizeForViewScale(s21) {
    return gt([jt(s21, this.values.first()), this.sizes.first()], [Gt(s21, this.values.last()), this.sizes.last()], [true, () => {
      const t14 = this.values.findIndex((t15) => Ct(t15, s21)), e15 = this.values.get(t14), i19 = t14.subtract(1), r14 = this.values.get(i19), o14 = s21.subtract(r14).divide(e15.subtract(r14));
      return Sn(this.sizes.get(i19), this.sizes.get(t14), o14);
    }]);
  }
};
e([g4(U3.ofType(j, 8))], p6.prototype, "sizes", void 0), e([g4(U3.ofType(j, 8))], p6.prototype, "values", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/VisualVariableSizeStops.js
var f5 = class extends F2 {
  getSize(s21, t14) {
    const e15 = gt([h6(s21), t14], [jt(s21, this.values.first()), this.sizes.first()], [Gt(s21, this.values.last()), this.sizes.last()], [true, () => {
      const t15 = this.values.findIndex((t16) => Ct(t16, s21)), e16 = this.values.get(t15), i19 = t15.subtract(1), r14 = this.values.get(i19), o14 = s21.subtract(r14).divide(e16.subtract(r14));
      return Sn(this.sizes.get(i19), this.sizes.get(t15), o14);
    }]);
    return xt(h6(e15), t14, e15);
  }
};
e([g4(U3.ofType(j, 8))], f5.prototype, "sizes", void 0), e([g4(U3.ofType(j, 8))], f5.prototype, "values", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/VisualVariableSizeUnitValue.js
var l9 = class extends F2 {
  getSize(t14, o14) {
    return xt(h6(t14), o14, t14.multiply(this.unitValueToPixelsRatio));
  }
};
e([g4(j)], l9.prototype, "unitValueToPixelsRatio", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/LineShader.js
var q6 = class extends S5 {
};
e([f3(3, H2)], q6.prototype, "color", void 0), e([f3(4, C3)], q6.prototype, "offset", void 0), e([f3(5, C3)], q6.prototype, "normal", void 0), e([f3(6, j)], q6.prototype, "halfWidth", void 0), e([f3(7, j)], q6.prototype, "referenceHalfWidth", void 0), e([f3(8, C3)], q6.prototype, "zoomRange", void 0);
var A4 = class extends F3 {
};
var F4 = class extends F2 {
};
function k3(t14) {
  return Bn(new j(h2).multiply(ee(t14, new j(n6))), new j(1));
}
function D4(t14, i19) {
  const { halfWidth: e15, normal: o14 } = t14, l15 = k3(e15), a19 = kn(o14).multiply(e15);
  return Zt(l15.multiply(e15.subtract(a19)).divide(i19.add(l15).subtract(new j(1))), new j(0), new j(1));
}
function G3(t14, i19) {
  const { id: e15, halfWidth: o14, referenceHalfWidth: l15 } = i19;
  if (l8(t14)) {
    const i20 = new j(2).multiply(l15), a19 = t10(t14, e15, i20);
    return new j(0.5).multiply(o14.divide(Bn(l15, new j(s7)))).multiply(a19);
  }
  return o14;
}
function T2(t14, i19) {
  const { id: e15, offset: o14, pos: l15, normal: a19, zoomRange: r14 } = i19, { displayViewScreenMat3: s21, displayViewMat3: n19 } = t14.view, c12 = r9(t14, e15, i19.color), f14 = u6(t14, e15), h16 = G3(t14, i19), v7 = new j(0.5).multiply(t14.antialiasingControls.antialiasing), w10 = Bn(h16.add(v7), new j(0.45)).add(new j(0.1).multiply(v7)), V2 = k3(w10).multiply(w10).multiply(o14), b8 = n19.multiply(new G2(V2, new j(0))), S12 = s21.multiply(new G2(l15, new j(1))).add(b8), x9 = new j(2).multiply(ee(h16, new j(0))).add(t14.clip(e15, r14)), g14 = new H2(S12.xy, x9, 1);
  return { color: c12, opacity: f14, halfWidth: w10, normal: a19, scaledOffset: V2, scaledHalfWidth: h16, glPosition: new H2(g14.xy, x9, 1) };
}
function _5(t14, i19) {
  const { opacity: e15, color: o14 } = t14, l15 = D4(t14, i19);
  return e15.multiply(o14).multiply(l15);
}
e([g4(j)], F4.prototype, "antialiasing", void 0), e([g4(j)], F4.prototype, "blur", void 0);
var B4 = class extends P3 {
  constructor() {
    super(...arguments), this.computeAttributes = { pos: ["nextPos1", "nextPos2"] };
  }
  vertex(t14, i19) {
    const e15 = T2(this, t14);
    return { ...e15, ...this.maybeRunHittest(t14, i19, e15.halfWidth) };
  }
  fragment(t14) {
    const i19 = _5(t14, this.antialiasingControls.blur);
    return this.getFragmentOutput(i19, t14);
  }
  hittest(t14, i19, e15) {
    const { viewMat3: o14, tileMat3: l15 } = this.view, a19 = o14.multiply(l15), r14 = a19.multiply(new G2(t14.pos, 1)), s21 = a19.multiply(new G2(i19.nextPos1, 1)), n19 = a19.multiply(new G2(i19.nextPos2, 1)), { distance: p13, smallSymbolDistance: u12, smallSymbolSizeThreshold: y8 } = this.hittestRequest, f14 = ee(e15, y8.multiply(0.5)).multiply(p13.subtract(u12)), h16 = this.hittestRequest.position;
    return Un(j3(h16, r14.xy, s21.xy), j3(h16, r14.xy, n19.xy)).subtract(e15).add(f14);
  }
};
e([g4(F4)], B4.prototype, "antialiasingControls", void 0), e([_3(f4)], B4.prototype, "visualVariableColor", void 0), e([_3(h8)], B4.prototype, "visualVariableOpacity", void 0), e([_3(m4)], B4.prototype, "visualVariableSizeMinMaxValue", void 0), e([_3(p6)], B4.prototype, "visualVariableSizeScaleStops", void 0), e([_3(f5)], B4.prototype, "visualVariableSizeStops", void 0), e([_3(l9)], B4.prototype, "visualVariableSizeUnitValue", void 0), e([t(0, m3(q6)), t(1, m3(q4))], B4.prototype, "vertex", null), e([t(0, m3(A4))], B4.prototype, "fragment", null);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/OutlineFillShader.js
var W2 = class extends S5 {
};
e([f3(3, C3)], W2.prototype, "offset", void 0), e([f3(4, H2)], W2.prototype, "color", void 0), e([f3(5, C3)], W2.prototype, "normal", void 0), e([f3(6, j)], W2.prototype, "halfWidth", void 0), e([f3(7, j)], W2.prototype, "referenceHalfWidth", void 0), e([f3(8, C3)], W2.prototype, "zoomRange", void 0);
var R4 = class extends A4 {
};
function A5(t14, o14, i19) {
  const { id: e15, bitset: r14 } = o14, s21 = j2(r14, B), u12 = Ct(s21, new j(0.5)), d12 = T2(t14, o14), c12 = xt(u12, d12.halfWidth, new j(0)), f14 = u6(t14, e15), y8 = r9(t14, e15, o14.color), V2 = xt(u12, o14.color, y8.multiply(f14)), h16 = t14.view.displayViewScreenMat3.multiply(new G2(o14.pos.xy, 1)), b8 = t14.clip(o14.id), j7 = new H2(h16.xy, b8, 1), g14 = xt(u12, d12.glPosition, j7), w10 = i19 && t14.maybeRunHittest(o14, i19, u12);
  return { isOutline: s21, color: V2, opacity: new j(1), halfWidth: c12, normal: d12.normal, glPosition: g14, ...w10 };
}
var F5 = class extends P3 {
  constructor() {
    super(...arguments), this.computeAttributes = { pos: ["nextPos1", "nextPos2"] };
  }
};
e([g4(F4)], F5.prototype, "antialiasingControls", void 0), e([_3(f4)], F5.prototype, "visualVariableColor", void 0), e([_3(h8)], F5.prototype, "visualVariableOpacity", void 0), e([_3(m4)], F5.prototype, "visualVariableSizeMinMaxValue", void 0), e([_3(p6)], F5.prototype, "visualVariableSizeScaleStops", void 0), e([_3(f5)], F5.prototype, "visualVariableSizeStops", void 0), e([_3(l9)], F5.prototype, "visualVariableSizeUnitValue", void 0);
var H3 = class extends F5 {
  vertex(t14, o14) {
    return A5(this, t14, o14);
  }
  fragment(t14) {
    const { color: o14, isOutline: i19 } = t14, e15 = Ct(i19, new j(0.5)), r14 = _5(t14, this.antialiasingControls.blur), s21 = xt(e15, r14, o14), n19 = xt(e15, new j(1 / 255), new j(0));
    return this.getFragmentOutput(s21, t14, n19);
  }
  hittest(t14, o14, i19) {
    return xt(i19, q5(this.hittestRequest), z3(this, t14, o14));
  }
};
e([t(0, m3(W2)), t(1, m3(q4))], H3.prototype, "vertex", null), e([t(0, m3(R4))], H3.prototype, "fragment", null);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/PatternFillShader.js
var h9 = class extends g7 {
};
e([f3(5, H2)], h9.prototype, "tlbr", void 0), e([f3(6, j)], h9.prototype, "inverseRasterizationScale", void 0);
var g8 = class extends F3 {
};
function j4(t14) {
  const e15 = new j(1), r14 = new j(0);
  return new tt(e15.divide(t14.x), r14.divide(t14.y), 0, yt(r14.divide(t14.x)), e15.divide(t14.y), 0, 0, 0, 1);
}
function O4(t14, e15) {
  const r14 = e15.tlbr.xy, o14 = e15.tlbr.zw, i19 = o14.x.subtract(r14.x), n19 = r14.y.subtract(o14.y), a19 = new C3(i19, n19).multiply(e15.inverseRasterizationScale), p13 = a19.multiply(t14.view.requiredZoomFactor), u12 = j4(p13), d12 = t14.localTileOffset.getPatternOffsetAtTileOrigin(a19).divide(p13), c12 = new G2(e15.pos, 1);
  return { tileTextureCoord: u12.multiply(c12).xy.subtract(d12), tlbr: e15.tlbr.divide(t14.mosaicInfo.size.xyxy) };
}
function T3(t14, e15) {
  const r14 = jn(t14.tileTextureCoord, new j(1)), o14 = Sn(t14.tlbr.xy, t14.tlbr.zw, r14), i19 = se(e15.texture, o14);
  return t14.color.multiply(i19);
}
var z4 = class extends x2 {
  vertex(t14, e15) {
    return { ...super.vertex(t14, e15), ...O4(this, t14) };
  }
  fragment(t14) {
    const e15 = T3(t14, this.mosaicInfo);
    return this.getFragmentOutput(e15, t14, new j(0));
  }
};
e([g4(p5)], z4.prototype, "mosaicInfo", void 0), e([g4(n11)], z4.prototype, "localTileOffset", void 0), e([t(0, m3(h9)), t(1, m3(q4))], z4.prototype, "vertex", null), e([t(0, m3(g8))], z4.prototype, "fragment", null);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/PatternOutlineFillShader.js
var x3 = class extends W2 {
};
e([f3(9, H2)], x3.prototype, "tlbr", void 0), e([f3(10, j)], x3.prototype, "inverseRasterizationScale", void 0);
var y4 = class extends R4 {
};
var S6 = class extends H3 {
  vertex(t14, o14) {
    return { ...A5(this, t14, o14), ...O4(this, t14) };
  }
  fragment(t14) {
    const { isOutline: o14 } = t14, r14 = Ct(o14, new j(0.5)), e15 = _5(t14, this.antialiasingControls.blur), s21 = T3(t14, this.mosaicInfo), n19 = xt(r14, e15, s21), p13 = xt(r14, new j(1 / 255), new j(0));
    return this.getFragmentOutput(n19, t14, p13);
  }
};
e([g4(p5)], S6.prototype, "mosaicInfo", void 0), e([g4(n11)], S6.prototype, "localTileOffset", void 0), e([t(0, m3(x3)), t(1, m3(q4))], S6.prototype, "vertex", null), e([t(0, m3(y4))], S6.prototype, "fragment", null);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/ComplexOutlineFillShader.js
var S7 = 16;
var b4 = 1 / S7;
var w6 = 128;
var F6 = class extends S5 {
};
e([f3(3, H2)], F6.prototype, "color", void 0), e([f3(4, H2)], F6.prototype, "tlbr", void 0), e([f3(5, j)], F6.prototype, "angle", void 0), e([f3(6, j)], F6.prototype, "aux1", void 0), e([f3(7, j)], F6.prototype, "aux2", void 0), e([f3(8, C3)], F6.prototype, "aux3", void 0), e([f3(9, C3)], F6.prototype, "aux4", void 0), e([f3(10, C3)], F6.prototype, "zoomRange", void 0);
var R5 = class extends y4 {
};
var C5 = class extends F5 {
  vertex(t14, o14) {
    const { aux1: e15, aux2: r14, aux3: i19, aux4: p13 } = t14, a19 = { ...t14, width: e15, height: r14, offset: i19, scale: p13.multiply(b4) }, m11 = { ...t14, halfWidth: e15.multiply(b4), referenceHalfWidth: r14.multiply(b4), offset: i19.multiply(b4), normal: p13.subtract(w6).multiply(b4) }, n19 = A5(this, m11), u12 = B3(this, a19), h16 = Ct(n19.isOutline, new j(0.5));
    return { ...n19, ...u12, ...this.maybeRunHittest(t14, o14, h16) };
  }
  fragment(t14) {
    const { isOutline: o14 } = t14, e15 = Ct(o14, new j(0.5)), r14 = _5(t14, this.antialiasingControls.blur), i19 = D3(this, t14), a19 = xt(e15, r14, i19), m11 = xt(e15, new j(1 / 255), new j(0));
    return this.getFragmentOutput(a19, t14, m11);
  }
  hittest(t14, o14, e15) {
    return xt(e15, q5(this.hittestRequest), z3(this, t14, o14));
  }
};
e([g4(p5)], C5.prototype, "mosaicInfo", void 0), e([g4(n11)], C5.prototype, "localTileOffset", void 0), e([t(0, m3(F6)), t(1, m3(q4))], C5.prototype, "vertex", null), e([t(0, m3(R5))], C5.prototype, "fragment", null);

// node_modules/@arcgis/core/views/2d/engine/webgl/DisplayId.js
var n12 = 8388607;
var t11 = 8388608;
var f6 = (t14) => t14 & n12;
function s12(n19, r14) {
  return ((r14 ? t11 : 0) | n19) >>> 0;
}

// node_modules/@arcgis/core/views/2d/engine/webgl/mesh/bufcut.js
function e11(e15, t14, r14, i19, u12, o14, l15) {
  D5 = 0;
  const y8 = (i19 - r14) * o14, p13 = u12 && u12.length, c12 = p13 ? (u12[0] - r14) * o14 : y8;
  let v7, s21, h16, d12, Z4, a19 = n13(t14, r14, i19, 0, c12, o14, true);
  if (a19 && a19.next !== a19.prev) {
    if (p13 && (a19 = f7(t14, r14, i19, u12, a19, o14)), y8 > 80 * o14) {
      v7 = h16 = t14[0 + r14 * o14], s21 = d12 = t14[1 + r14 * o14];
      for (let e16 = o14; e16 < c12; e16 += o14) {
        const n19 = t14[e16 + r14 * o14], x9 = t14[e16 + 1 + r14 * o14];
        v7 = Math.min(v7, n19), s21 = Math.min(s21, x9), h16 = Math.max(h16, n19), d12 = Math.max(d12, x9);
      }
      Z4 = Math.max(h16 - v7, d12 - s21), Z4 = 0 !== Z4 ? 1 / Z4 : 0;
    }
    x4(a19, e15, o14, v7, s21, Z4, l15, 0);
  }
}
function n13(e15, n19, t14, x9, r14, i19, l15) {
  let f14;
  if (l15 === Z3(e15, n19, t14, x9, r14, i19) > 0)
    for (let o14 = x9; o14 < r14; o14 += i19)
      f14 = u7(o14 + n19 * i19, e15[o14 + n19 * i19], e15[o14 + 1 + n19 * i19], f14);
  else
    for (let o14 = r14 - i19; o14 >= x9; o14 -= i19)
      f14 = u7(o14 + n19 * i19, e15[o14 + n19 * i19], e15[o14 + 1 + n19 * i19], f14);
  return f14 && M4(f14, f14.next) && (o6(f14), f14 = f14.next), f14;
}
function t12(e15, n19 = e15) {
  if (!e15)
    return e15;
  let t14, x9 = e15;
  do {
    if (t14 = false, x9.steiner || !M4(x9, x9.next) && 0 !== s13(x9.prev, x9, x9.next))
      x9 = x9.next;
    else {
      if (o6(x9), x9 = n19 = x9.prev, x9 === x9.next)
        break;
      t14 = true;
    }
  } while (t14 || x9 !== n19);
  return n19;
}
function x4(e15, n19, u12, l15, f14, y8, p13, v7) {
  if (!e15)
    return;
  !v7 && y8 && (e15 = c7(e15, l15, f14, y8));
  let s21 = e15;
  for (; e15.prev !== e15.next; ) {
    const c12 = e15.prev, h16 = e15.next;
    if (y8 ? i10(e15, l15, f14, y8) : r10(e15))
      n19.push(c12.index / u12 + p13), n19.push(e15.index / u12 + p13), n19.push(h16.index / u12 + p13), o6(e15), e15 = h16.next, s21 = h16.next;
    else if ((e15 = h16) === s21) {
      v7 ? 1 === v7 ? x4(e15 = b5(e15, n19, u12, p13), n19, u12, l15, f14, y8, p13, 2) : 2 === v7 && g9(e15, n19, u12, l15, f14, y8, p13) : x4(t12(e15), n19, u12, l15, f14, y8, p13, 1);
      break;
    }
  }
}
function r10(e15) {
  const n19 = e15.prev, t14 = e15, x9 = e15.next;
  if (s13(n19, t14, x9) >= 0)
    return false;
  let r14 = e15.next.next;
  const i19 = r14;
  let u12 = 0;
  for (; r14 !== e15.prev && (0 === u12 || r14 !== i19); ) {
    if (u12++, a12(n19.x, n19.y, t14.x, t14.y, x9.x, x9.y, r14.x, r14.y) && s13(r14.prev, r14, r14.next) >= 0)
      return false;
    r14 = r14.next;
  }
  return true;
}
function i10(e15, n19, t14, x9) {
  const r14 = e15.prev, i19 = e15, u12 = e15.next;
  if (s13(r14, i19, u12) >= 0)
    return false;
  const o14 = r14.x < i19.x ? r14.x < u12.x ? r14.x : u12.x : i19.x < u12.x ? i19.x : u12.x, l15 = r14.y < i19.y ? r14.y < u12.y ? r14.y : u12.y : i19.y < u12.y ? i19.y : u12.y, f14 = r14.x > i19.x ? r14.x > u12.x ? r14.x : u12.x : i19.x > u12.x ? i19.x : u12.x, y8 = r14.y > i19.y ? r14.y > u12.y ? r14.y : u12.y : i19.y > u12.y ? i19.y : u12.y, p13 = z5(o14, l15, n19, t14, x9), c12 = z5(f14, y8, n19, t14, x9);
  let v7 = e15.prevZ, h16 = e15.nextZ;
  for (; v7 && v7.z >= p13 && h16 && h16.z <= c12; ) {
    if (v7 !== e15.prev && v7 !== e15.next && a12(r14.x, r14.y, i19.x, i19.y, u12.x, u12.y, v7.x, v7.y) && s13(v7.prev, v7, v7.next) >= 0)
      return false;
    if (v7 = v7.prevZ, h16 !== e15.prev && h16 !== e15.next && a12(r14.x, r14.y, i19.x, i19.y, u12.x, u12.y, h16.x, h16.y) && s13(h16.prev, h16, h16.next) >= 0)
      return false;
    h16 = h16.nextZ;
  }
  for (; v7 && v7.z >= p13; ) {
    if (v7 !== e15.prev && v7 !== e15.next && a12(r14.x, r14.y, i19.x, i19.y, u12.x, u12.y, v7.x, v7.y) && s13(v7.prev, v7, v7.next) >= 0)
      return false;
    v7 = v7.prevZ;
  }
  for (; h16 && h16.z <= c12; ) {
    if (h16 !== e15.prev && h16 !== e15.next && a12(r14.x, r14.y, i19.x, i19.y, u12.x, u12.y, h16.x, h16.y) && s13(h16.prev, h16, h16.next) >= 0)
      return false;
    h16 = h16.nextZ;
  }
  return true;
}
function u7(e15, n19, t14, x9) {
  const r14 = q7.create(e15, n19, t14);
  return x9 ? (r14.next = x9.next, r14.prev = x9, x9.next.prev = r14, x9.next = r14) : (r14.prev = r14, r14.next = r14), r14;
}
function o6(e15) {
  e15.next.prev = e15.prev, e15.prev.next = e15.next, e15.prevZ && (e15.prevZ.nextZ = e15.nextZ), e15.nextZ && (e15.nextZ.prevZ = e15.prevZ);
}
function l10(e15) {
  let n19 = e15, t14 = e15;
  do {
    (n19.x < t14.x || n19.x === t14.x && n19.y < t14.y) && (t14 = n19), n19 = n19.next;
  } while (n19 !== e15);
  return t14;
}
function f7(e15, t14, x9, r14, i19, u12) {
  const o14 = new Array();
  for (let f14 = 0, y8 = r14.length; f14 < y8; f14++) {
    const i20 = n13(e15, t14, x9, r14[f14] * u12, f14 < y8 - 1 ? r14[f14 + 1] * u12 : x9 * u12, u12, false);
    i20 === i20.next && (i20.steiner = true), o14.push(l10(i20));
  }
  o14.sort(m5);
  for (const n19 of o14)
    i19 = y5(n19, i19);
  return i19;
}
function y5(e15, n19) {
  const x9 = p7(e15, n19);
  if (!x9)
    return n19;
  const r14 = j5(x9, e15);
  return t12(r14, r14.next), t12(x9, x9.next);
}
function p7(e15, n19) {
  let t14 = n19;
  const x9 = e15.x, r14 = e15.y;
  let i19, u12 = -1 / 0;
  do {
    if (r14 <= t14.y && r14 >= t14.next.y && t14.next.y !== t14.y) {
      const e16 = t14.x + (r14 - t14.y) * (t14.next.x - t14.x) / (t14.next.y - t14.y);
      if (e16 <= x9 && e16 > u12) {
        if (u12 = e16, e16 === x9) {
          if (r14 === t14.y)
            return t14;
          if (r14 === t14.next.y)
            return t14.next;
        }
        i19 = t14.x < t14.next.x ? t14 : t14.next;
      }
    }
    t14 = t14.next;
  } while (t14 !== n19);
  if (!i19)
    return null;
  if (x9 === u12)
    return i19.prev;
  const o14 = i19, l15 = i19.x, f14 = i19.y;
  let y8, p13 = 1 / 0;
  for (t14 = i19.next; t14 !== o14; )
    x9 >= t14.x && t14.x >= l15 && x9 !== t14.x && a12(r14 < f14 ? x9 : u12, r14, l15, f14, r14 < f14 ? u12 : x9, r14, t14.x, t14.y) && (y8 = Math.abs(r14 - t14.y) / (x9 - t14.x), (y8 < p13 || y8 === p13 && t14.x > i19.x) && w7(t14, e15) && (i19 = t14, p13 = y8)), t14 = t14.next;
  return i19;
}
function c7(e15, n19, t14, x9) {
  let r14;
  for (; r14 !== e15; r14 = r14.next) {
    if (r14 = r14 || e15, null === r14.z && (r14.z = z5(r14.x, r14.y, n19, t14, x9)), r14.prev.next !== r14 || r14.next.prev !== r14)
      return r14.prev.next = r14, r14.next.prev = r14, c7(e15, n19, t14, x9);
    r14.prevZ = r14.prev, r14.nextZ = r14.next;
  }
  return e15.prevZ.nextZ = null, e15.prevZ = null, v5(e15);
}
function v5(e15) {
  let n19, t14 = 1;
  for (; ; ) {
    let x9, r14 = e15;
    e15 = null, n19 = null;
    let i19 = 0;
    for (; r14; ) {
      i19++, x9 = r14;
      let u12 = 0;
      for (; u12 < t14 && x9; u12++)
        x9 = x9.nextZ;
      let o14 = t14;
      for (; u12 > 0 || o14 > 0 && x9; ) {
        let t15;
        0 === u12 ? (t15 = x9, x9 = x9.nextZ, o14--) : 0 !== o14 && x9 ? r14.z <= x9.z ? (t15 = r14, r14 = r14.nextZ, u12--) : (t15 = x9, x9 = x9.nextZ, o14--) : (t15 = r14, r14 = r14.nextZ, u12--), n19 ? n19.nextZ = t15 : e15 = t15, t15.prevZ = n19, n19 = t15;
      }
      r14 = x9;
    }
    if (n19.nextZ = null, t14 *= 2, i19 < 2)
      return e15;
  }
}
function s13(e15, n19, t14) {
  return (n19.y - e15.y) * (t14.x - n19.x) - (n19.x - e15.x) * (t14.y - n19.y);
}
function h10(e15, n19, t14, x9) {
  return !!(M4(e15, n19) && M4(t14, x9) || M4(e15, x9) && M4(t14, n19)) || s13(e15, n19, t14) > 0 != s13(e15, n19, x9) > 0 && s13(t14, x9, e15) > 0 != s13(t14, x9, n19) > 0;
}
function d7(e15, n19) {
  let t14 = e15;
  do {
    if (t14.index !== e15.index && t14.next.index !== e15.index && t14.index !== n19.index && t14.next.index !== n19.index && h10(t14, t14.next, e15, n19))
      return true;
    t14 = t14.next;
  } while (t14 !== e15);
  return false;
}
function Z3(e15, n19, t14, x9, r14, i19) {
  let u12 = 0;
  for (let o14 = x9, l15 = r14 - i19; o14 < r14; o14 += i19)
    u12 += (e15[l15 + n19 * i19] - e15[o14 + n19 * i19]) * (e15[o14 + 1 + n19 * i19] + e15[l15 + 1 + n19 * i19]), l15 = o14;
  return u12;
}
function a12(e15, n19, t14, x9, r14, i19, u12, o14) {
  return (r14 - u12) * (n19 - o14) - (e15 - u12) * (i19 - o14) >= 0 && (e15 - u12) * (x9 - o14) - (t14 - u12) * (n19 - o14) >= 0 && (t14 - u12) * (i19 - o14) - (r14 - u12) * (x9 - o14) >= 0;
}
function w7(e15, n19) {
  return s13(e15.prev, e15, e15.next) < 0 ? s13(e15, n19, e15.next) >= 0 && s13(e15, e15.prev, n19) >= 0 : s13(e15, n19, e15.prev) < 0 || s13(e15, e15.next, n19) < 0;
}
function z5(e15, n19, t14, x9, r14) {
  return (e15 = 1431655765 & ((e15 = 858993459 & ((e15 = 252645135 & ((e15 = 16711935 & ((e15 = 32767 * (e15 - t14) * r14) | e15 << 8)) | e15 << 4)) | e15 << 2)) | e15 << 1)) | (n19 = 1431655765 & ((n19 = 858993459 & ((n19 = 252645135 & ((n19 = 16711935 & ((n19 = 32767 * (n19 - x9) * r14) | n19 << 8)) | n19 << 4)) | n19 << 2)) | n19 << 1)) << 1;
}
function M4(e15, n19) {
  return e15.x === n19.x && e15.y === n19.y;
}
function m5(e15, n19) {
  return e15.x - n19.x;
}
function b5(e15, n19, t14, x9) {
  let r14 = e15;
  do {
    const i19 = r14.prev, u12 = r14.next.next;
    !M4(i19, u12) && h10(i19, r14, r14.next, u12) && w7(i19, u12) && w7(u12, i19) && (n19.push(i19.index / t14 + x9), n19.push(r14.index / t14 + x9), n19.push(u12.index / t14 + x9), o6(r14), o6(r14.next), r14 = e15 = u12), r14 = r14.next;
  } while (r14 !== e15);
  return r14;
}
function g9(e15, n19, r14, i19, u12, o14, l15) {
  let f14 = e15;
  do {
    let e16 = f14.next.next;
    for (; e16 !== f14.prev; ) {
      if (f14.index !== e16.index && k4(f14, e16)) {
        let y8 = j5(f14, e16);
        return f14 = t12(f14, f14.next), y8 = t12(y8, y8.next), x4(f14, n19, r14, i19, u12, o14, l15, 0), void x4(y8, n19, r14, i19, u12, o14, l15, 0);
      }
      e16 = e16.next;
    }
    f14 = f14.next;
  } while (f14 !== e15);
}
function k4(e15, n19) {
  return e15.next.index !== n19.index && e15.prev.index !== n19.index && !d7(e15, n19) && w7(e15, n19) && w7(n19, e15) && A6(e15, n19);
}
function A6(e15, n19) {
  let t14 = e15, x9 = false;
  const r14 = (e15.x + n19.x) / 2, i19 = (e15.y + n19.y) / 2;
  do {
    t14.y > i19 != t14.next.y > i19 && t14.next.y !== t14.y && r14 < (t14.next.x - t14.x) * (i19 - t14.y) / (t14.next.y - t14.y) + t14.x && (x9 = !x9), t14 = t14.next;
  } while (t14 !== e15);
  return x9;
}
function j5(e15, n19) {
  const t14 = q7.create(e15.index, e15.x, e15.y), x9 = q7.create(n19.index, n19.x, n19.y), r14 = e15.next, i19 = n19.prev;
  return e15.next = n19, n19.prev = e15, t14.next = r14, r14.prev = t14, x9.next = t14, t14.prev = x9, i19.next = x9, x9.prev = i19, x9;
}
var q7 = class _q {
  constructor() {
    this.index = 0, this.x = 0, this.y = 0, this.prev = null, this.next = null, this.z = null, this.prevZ = null, this.nextZ = null, this.steiner = false;
  }
  static create(e15, n19, t14) {
    const x9 = D5 < B5.length ? B5[D5++] : new _q();
    return x9.index = e15, x9.x = n19, x9.y = t14, x9.prev = null, x9.next = null, x9.z = null, x9.prevZ = null, x9.nextZ = null, x9.steiner = false, x9;
  }
};
var B5 = [];
var C6 = 8096;
var D5 = 0;
for (let E5 = 0; E5 < C6; E5++)
  B5.push(new q7());

// node_modules/@arcgis/core/views/2d/engine/webgl/mesh/templates/templateUtils.js
var i12 = 1e-5;
var f8 = new e4(0, 0, 0, 1, 0);
var c8 = new e4(0, 0, 0, 1, 0);
function u8(t14, e15, n19) {
  let o14 = 0;
  for (let r14 = 1; r14 < n19; r14++) {
    const n20 = t14[2 * (e15 + r14 - 1)], s21 = t14[2 * (e15 + r14 - 1) + 1];
    o14 += (t14[2 * (e15 + r14)] - n20) * (t14[2 * (e15 + r14) + 1] + s21);
  }
  return o14;
}
function h11(t14, e15, n19, o14, r14) {
  let s21 = 0;
  const l15 = 2;
  for (let i19 = n19; i19 < o14; i19 += 3) {
    const n20 = (t14[i19] - r14) * l15, o15 = (t14[i19 + 1] - r14) * l15, f14 = (t14[i19 + 2] - r14) * l15;
    s21 += Math.abs((e15[n20] - e15[f14]) * (e15[o15 + 1] - e15[n20 + 1]) - (e15[n20] - e15[o15]) * (e15[f14 + 1] - e15[n20 + 1]));
  }
  return s21;
}
function a13(t14, e15) {
  const { coords: n19, lengths: o14, hasIndeterminateRingOrder: r14 } = e15, s21 = 0, f14 = t14;
  if (r14)
    return false;
  let c12 = 0;
  for (let a19 = 0; a19 < o14.length; ) {
    let t15 = a19, e16 = o14[a19], r15 = u8(n19, c12, e16);
    const g14 = [];
    for (; ++t15 < o14.length; ) {
      const s22 = o14[t15], l15 = u8(n19, c12 + e16, s22);
      if (!(l15 > 0))
        break;
      r15 += l15, g14.push(c12 + e16), e16 += s22;
    }
    const p13 = f14.length;
    e11(f14, n19, c12, c12 + e16, g14, 2, s21);
    const m11 = h11(f14, n19, p13, f14.length, s21), d12 = Math.abs(r15);
    if (Math.abs((m11 - d12) / Math.max(1e-7, d12)) > i12)
      return f14.length = 0, false;
    a19 = t15, c12 += e16;
  }
  return true;
}
function p8(t14) {
  const { coords: n19, lengths: o14 } = t14, { buffer: r14 } = a4(n19, o14);
  return r14;
}
function m6(t14, e15, n19) {
  let o14 = 0;
  for (let r14 = 0; r14 < t14.lengths.length; r14++) {
    const s21 = t14.lengths[r14];
    for (let r15 = 0; r15 < s21; r15++) {
      const s22 = t14.coords[2 * (r15 + o14)], l15 = t14.coords[2 * (r15 + o14) + 1];
      if (s22 < e15 || s22 > n19 || l15 < e15 || l15 > n19)
        return true;
    }
    o14 += s21;
  }
  return false;
}
function d8(t14, e15) {
  if (null == t14)
    return null;
  if (!m6(t14, -128, a3 + 128))
    return t14;
  f8.setPixelMargin(e15), f8.reset(i2.Polygon);
  let n19 = 0;
  for (let o14 = 0; o14 < t14.lengths.length; o14++) {
    const e16 = t14.lengths[o14];
    let r14 = t14.coords[2 * (0 + n19)], s21 = t14.coords[2 * (0 + n19) + 1];
    f8.moveTo(r14, s21);
    for (let o15 = 1; o15 < e16; o15++)
      r14 = t14.coords[2 * (o15 + n19)], s21 = t14.coords[2 * (o15 + n19) + 1], f8.lineTo(r14, s21);
    f8.close(), n19 += e16;
  }
  const l15 = f8.result(false);
  if (!l15)
    return null;
  const i19 = [], c12 = [];
  for (const o14 of l15) {
    let t15 = 0;
    for (const e16 of o14)
      c12.push(e16.x), c12.push(e16.y), t15++;
    i19.push(t15);
  }
  return new e3(i19, c12);
}
function x5(t14, e15) {
  c8.setPixelMargin(e15);
  const n19 = c8, r14 = -e15, l15 = a3 + e15;
  let i19 = [], f14 = false;
  if (!t14.nextPath())
    return null;
  let u12 = true;
  for (; u12; ) {
    t14.seekPathStart();
    const e16 = [];
    if (!t14.pathSize)
      return null;
    n19.reset(i2.LineString), t14.nextPoint();
    let s21 = t14.x, c12 = t14.y;
    if (f14)
      n19.moveTo(s21, c12);
    else {
      if (s21 < r14 || s21 > l15 || c12 < r14 || c12 > l15) {
        f14 = true;
        continue;
      }
      e16.push({ x: s21, y: c12 });
    }
    let h16 = false;
    for (; t14.nextPoint(); )
      if (s21 = t14.x, c12 = t14.y, f14)
        n19.lineTo(s21, c12);
      else {
        if (s21 < r14 || s21 > l15 || c12 < r14 || c12 > l15) {
          h16 = true;
          break;
        }
        e16.push({ x: s21, y: c12 });
      }
    if (h16)
      f14 = true;
    else {
      if (f14) {
        const t15 = n19.resultWithStarts();
        if (t15)
          for (const e17 of t15)
            i19.push(e17);
      } else
        i19.push({ line: e16, start: 0 });
      u12 = t14.nextPath(), f14 = false;
    }
  }
  return i19 = i19.filter((t15) => t15.line.length > 1), 0 === i19.length ? null : i19;
}
f8.setExtent(a3), c8.setExtent(a3);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/mesh/loadGeometryEngine.js
var n14 = null;
function t13() {
  return n14;
}
async function e12() {
  n14 = await import("./geometryEngineJSON-EWTUNKPC.js");
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/mesh/AlignedVertexSpec.js
function s14(t14) {
  switch (t14) {
    case C.BYTE:
    case C.UNSIGNED_BYTE:
      return 1;
    case C.SHORT:
    case C.UNSIGNED_SHORT:
      return 2;
    case C.FLOAT:
    case C.INT:
    case C.UNSIGNED_INT:
      return 4;
  }
}
function o7(t14) {
  const e15 = [], o14 = [], n19 = [];
  for (const i19 of t14) {
    const t15 = s14(i19.type) * i19.count;
    switch (t15 % 2 || t15 % 4 || 4) {
      case 4:
        e15.push(i19);
        continue;
      case 2:
        o14.push(i19);
        continue;
      case 1:
        n19.push(i19);
        continue;
      default:
        throw new Error("Found unexpected dataType byte count");
    }
  }
  return e15.push(...o14), e15.push(...n19), e15;
}
var n15 = class _n {
  static fromVertexSpec({ attributes: t14 }, e15) {
    let i19, a19, r14;
    const c12 = [];
    for (const s21 in t14) {
      const o14 = t14[s21];
      false !== (e15 == null ? void 0 : e15[s21]) && ("position" === o14.pack ? i19 = { ...o14, name: s21, offset: 0 } : "id" === o14.pack ? a19 = { ...o14, name: s21, offset: 4 } : "bitset" === s21 ? r14 = { ...o14, name: s21, offset: 7 } : c12.push({ ...o14, name: s21 }));
    }
    const u12 = o7(c12), p13 = [];
    let h16 = 8, f14 = 1;
    for (const o14 of u12)
      p13.push({ ...o14, offset: h16 }), h16 += s14(o14.type) * o14.count, o14.packAlternating && (f14 = Math.max(o14.packAlternating.count, f14));
    const m11 = Uint32Array.BYTES_PER_ELEMENT, b8 = h16 % m11;
    return new _n(i19, a19, r14, p13, h16 + (b8 ? m11 - b8 : 0), f14);
  }
  constructor(t14, e15, s21, o14, n19, i19) {
    this.position = t14, this.id = e15, this.bitset = s21, this.standardAttributes = o14, this.stride = n19, this.packVertexCount = i19, o14.push(s21), this._attributes = [t14, e15, s21, ...o14];
  }
  get attributeLayout() {
    if (!this._attributeLayout) {
      const e15 = t4(this._attributes), s21 = this._attributes.map((t14) => ({ name: t14.name, count: t14.count, offset: t14.offset, type: t14.type, packPrecisionFactor: t14.packPrecisionFactor, normalized: t14.normalized ?? false }));
      this._attributeLayout = { attributes: s21, hash: e15, stride: this.stride };
    }
    return this._attributeLayout;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/mesh/MeshWriterVertexPack.js
var i13 = class _i {
  static fromVertexSpec(t14, s21) {
    const c12 = n15.fromVertexSpec(t14, s21);
    return new _i(c12);
  }
  constructor(t14) {
    this._spec = t14, this._packed = new Uint8Array(this._spec.stride * this._spec.packVertexCount), this._packedU32View = new Uint32Array(this._packed.buffer), this._dataView = new DataView(this._packed.buffer);
  }
  get attributeLayout() {
    return this._spec.attributeLayout;
  }
  get stride() {
    return this._spec.stride;
  }
  writeVertex(t14, e15, s21, i19, c12, a19) {
    var _a;
    for (let p13 = 0; p13 < this._spec.packVertexCount; p13++) {
      const t15 = p13 * this._spec.stride;
      this._packPosition(s21, i19, t15), this._packId(e15, t15);
      const r14 = this._spec.bitset;
      if (a19) {
        if (r14.packTessellation) {
          const e16 = r14.packTessellation(a19, c12);
          this._pack(e16, r14, t15);
        }
        for (const e16 of this._spec.standardAttributes)
          if (null != e16.packTessellation) {
            const s22 = e16.packTessellation(a19, c12);
            this._pack(s22, e16, t15);
          } else if ((_a = e16.packAlternating) == null ? void 0 : _a.packTessellation) {
            const t16 = e16.packAlternating.packTessellation(a19, c12);
            for (let s22 = 0; s22 < this._spec.packVertexCount; s22++) {
              const i20 = t16[s22];
              this._pack(i20, e16, s22 * this._spec.stride);
            }
          }
      }
    }
    t14.vertexWriteRegion(this._packedU32View);
  }
  pack(t14, e15) {
    var _a;
    for (const s21 of this._spec.standardAttributes)
      if (s21.pack && "string" != typeof s21.pack) {
        const i19 = s21.pack(t14, e15);
        for (let t15 = 0; t15 < this._spec.packVertexCount; t15++)
          this._pack(i19, s21, t15 * this._spec.stride);
      } else if ((_a = s21.packAlternating) == null ? void 0 : _a.pack) {
        const i19 = s21.packAlternating.pack(t14, e15);
        for (let t15 = 0; t15 < this._spec.packVertexCount; t15++) {
          const e16 = i19[t15];
          this._pack(e16, s21, t15 * this._spec.stride);
        }
      }
  }
  _packPosition(e15, s21, i19) {
    const { offset: c12 } = this._spec.position, a19 = this._spec.position.packPrecisionFactor ?? 1, p13 = w2(e15 * a19, s21 * a19);
    this._dataView.setUint32(i19 + c12, p13, true);
  }
  _packId(t14, e15) {
    const s21 = t14 * (this._spec.id.packPrecisionFactor ?? 1), i19 = 4278190080 & this._dataView.getUint32(e15 + this._spec.id.offset, true);
    this._dataView.setUint32(e15 + this._spec.id.offset, s21 | i19, true);
  }
  _pack(t14, e15, i19) {
    e6(this._dataView, t14, e15, i19);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/mesh/MeshWriter.js
function i14(e15) {
  if (!e15)
    return false;
  for (const t14 of e15)
    switch (t14.effect.type) {
      case "CIMGeometricEffectBuffer":
      case "CIMGeometricEffectOffset":
      case "CIMGeometricEffectDonut":
        return true;
    }
  return false;
}
var o8 = class {
  constructor(e15, t14, r14, s21) {
    this._instanceId = e15, this._evaluator = t14, this._viewParams = r14, this._optionalAttributes = s21, this._evaluator.evaluator = (e16) => this.vertexSpec.createComputedParams(e16);
  }
  get _vertexPack() {
    if (!this._cachedVertexPack) {
      const e15 = i13.fromVertexSpec(this.vertexSpec, this._optionalAttributes);
      this._evaluator.hasDynamicProperties || e15.pack(this._evaluator.evaluatedMeshParams, this._viewParams), this._cachedVertexPack = e15;
    }
    return this._cachedVertexPack;
  }
  get evaluatedMeshParams() {
    return this._evaluator.evaluatedMeshParams;
  }
  get hasEffects() {
    return !!this.evaluatedMeshParams.effects;
  }
  get instanceId() {
    return this._instanceId;
  }
  get attributeLayout() {
    return this._vertexPack.attributeLayout;
  }
  setReferences(e15) {
    this._references = e15;
  }
  getBoundsInfo() {
    return null;
  }
  getTileInfo() {
    return this._viewParams.tileInfo;
  }
  async loadDependencies() {
    var _a;
    i14((_a = this._evaluator.inputMeshParams.params.effects) == null ? void 0 : _a.effectInfos) && await e12();
  }
  enqueueRequest(e15, t14, r14) {
    this._evaluator.hasDynamicProperties && this._evaluator.enqueueRequest(e15, t14, r14);
  }
  write(r14, a19, i19, o14, c12) {
    var _a;
    this.ensurePacked(a19, i19, o14);
    const n19 = this.evaluatedMeshParams.effects;
    if (!n19 || 0 === n19.length)
      return void this._write(r14, i19, void 0, c12);
    const u12 = (_a = i19.readGeometryForDisplay()) == null ? void 0 : _a.clone();
    if (!u12)
      return;
    const h16 = a5.fromOptimizedCIM(u12, i19.geometryType), f14 = t13();
    h16.invertY();
    const m11 = r14.id || "", l15 = l4.executeEffects(n19, h16, m11, f14);
    let v7;
    for (; v7 = l15.next(); )
      v7.invertY(), this._write(r14, i19, v7, c12);
  }
  ensurePacked(e15, t14, r14) {
    if (!this._evaluator.hasDynamicProperties)
      return;
    const s21 = this._evaluator.evaluateMeshParams(e15, t14, r14);
    this._vertexPack.pack(s21, this._viewParams);
  }
  _writeVertex(e15, t14, r14, s21, a19) {
    const i19 = this.evaluatedMeshParams;
    this._vertexPack.writeVertex(e15, t14, r14, s21, i19, a19);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/fill/AFillMeshWriter.js
var o9 = 100;
var n16 = has("featurelayer-fast-triangulation-enabled");
var a14 = class extends o8 {
  async loadDependencies() {
    await Promise.all([super.loadDependencies(), i()]);
  }
  _write(e15, t14, r14) {
    const s21 = (r14 == null ? void 0 : r14.asOptimized()) ?? t14.readGeometryForDisplay(), i19 = this._clip(s21);
    i19 && (e15.recordStart(this.instanceId, this.attributeLayout), this._writeGeometry(e15, t14, i19), e15.recordEnd());
  }
  _clip(e15) {
    if (!e15)
      return null;
    const r14 = this.hasEffects;
    return d8(e15, r14 ? 256 : 8);
  }
  _writeGeometry(e15, t14, i19) {
    const a19 = i19.maxLength > o9, c12 = [], l15 = this.createTesselationParams(t14);
    if (!a19 && n16 && a13(c12, i19))
      return void (c12.length && this._writeVertices(e15, t14, i19.coords, l15, c12));
    const d12 = p8(i19);
    this._writeVertices(e15, t14, d12, l15);
  }
  _writeVertices(e15, t14, r14, s21, i19) {
    const o14 = t14.getDisplayId(), n19 = e15.vertexCount(), a19 = this.hasEffects;
    let c12 = 0;
    if (i19)
      for (const l15 of i19) {
        const t15 = r14[2 * l15], i20 = r14[2 * l15 + 1];
        a19 && e15.recordBounds(t15, i20, 0, 0), this._writeVertex(e15, o14, t15, i20, s21), c12++;
      }
    else
      for (let l15 = 0; l15 < r14.length; l15 += 2) {
        const t15 = Math.round(r14[l15]), i20 = Math.round(r14[l15 + 1]);
        a19 && e15.recordBounds(t15, i20, 0, 0), this._writeVertex(e15, o14, t15, i20, s21), c12++;
      }
    e15.indexEnsureSize(c12);
    for (let l15 = 0; l15 < c12; l15++)
      e15.indexWrite(l15 + n19);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/dotDensity/DotDensityMeshWriter.js
var r11 = { createComputedParams: (e15) => e15, attributes: { id: { type: C.UNSIGNED_BYTE, count: 3, pack: "id" }, bitset: { type: C.UNSIGNED_BYTE, count: 1 }, pos: { type: C.SHORT, count: 2, pack: "position", packPrecisionFactor: 10 }, inverseArea: { type: C.FLOAT, count: 1, packTessellation: ({ inverseArea: e15 }) => e15 } } };
var s15 = class extends a14 {
  constructor() {
    super(...arguments), this.vertexSpec = r11;
  }
  createTesselationParams(e15) {
    return { inverseArea: 1 / e15.readGeometryArea() };
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/fill/meshWriterUtils.js
var i15 = () => n.getLogger("esri.views.2d.engine.webgl.shaderGraph.techniques.meshWriterUtils");
var u9 = 0;
var a15 = 100;
function m7(r14, e15) {
  return [!!(r14 == null ? void 0 : r14.minScale) && e15.scaleToZoom(r14.minScale) || u9, !!(r14 == null ? void 0 : r14.maxScale) && e15.scaleToZoom(r14.maxScale) || a15];
}
function f9(r14) {
  return 1 << r14;
}
function l11(r14) {
  let e15 = 0;
  for (const [t14, n19] of r14)
    n19 && (e15 |= 1 << t14);
  return e15;
}
function h12(t14) {
  let n19;
  if (!t14)
    return [0, 0, 0, 0];
  if ("string" == typeof t14) {
    const o15 = u2.fromString(t14);
    if (!o15)
      return i15().errorOnce(new s("mapview:mesh-processing", "Unable to parse string into color", { color: t14 })), [0, 0, 0, 0];
    n19 = o15.toArray();
  } else
    n19 = t14;
  const [o14, c12, s21, u12] = n19;
  return [o14 * (u12 / 255), c12 * (u12 / 255), s21 * (u12 / 255), u12];
}
function g10(r14) {
  switch (r14) {
    case "butt":
    case U2.Butt:
      return e5.BUTT;
    case "round":
    case U2.Round:
      return e5.ROUND;
    case "square":
    case U2.Square:
      return e5.SQUARE;
  }
}
function p9(r14) {
  switch (r14) {
    case "bevel":
    case w.Bevel:
      return n2.BEVEL;
    case "miter":
    case w.Miter:
      return n2.MITER;
    case "round":
    case w.Round:
      return n2.ROUND;
  }
}
function d9(r14, e15) {
  return Math.round(Math.min(Math.sqrt(r14 * e15), 255));
}
function M5(r14, e15) {
  return Math.round(r14 * e15) / e15;
}
function S8(r14, e15) {
  return Math.ceil(r14 * e15) / e15;
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/fill/FillMeshWriter.js
var c9 = { createComputedParams: (t14) => t14, attributes: { id: { type: C.UNSIGNED_BYTE, count: 3, pack: "id" }, bitset: { type: C.UNSIGNED_BYTE, count: 1 }, pos: { type: C.SHORT, count: 2, pack: "position", packPrecisionFactor: 10 }, zoomRange: { type: C.SHORT, count: 2, packPrecisionFactor: ct, pack: ({ scaleInfo: t14 }, { tileInfo: o14 }) => m7(t14, o14) }, color: { type: C.UNSIGNED_BYTE, count: 4, normalized: true, pack: ({ color: t14 }) => h12(t14) } } };
var i16 = class extends a14 {
  constructor() {
    super(...arguments), this.vertexSpec = c9;
  }
  createTesselationParams(t14) {
    return null;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/fill/PatternFillMeshWriter.js
var s16 = { createComputedParams: (t14) => t14, attributes: { ...c9.attributes, tlbr: { count: 4, type: C.UNSIGNED_SHORT, pack: ({ sprite: e15 }) => {
  const { rect: r14, width: i19, height: s21 } = e15, a19 = r14.x + $, o14 = r14.y + $;
  return [a19, o14, a19 + i19, o14 + s21];
} }, inverseRasterizationScale: { count: 1, type: C.BYTE, packPrecisionFactor: 16, pack: ({ sprite: t14 }) => 1 / t14.rasterizationScale } } };
var a16 = class extends i16 {
  constructor() {
    super(...arguments), this.vertexSpec = s16;
  }
  _write(t14, e15, r14) {
    var _a2;
    const i19 = (r14 == null ? void 0 : r14.asOptimized()) ?? e15.readGeometryForDisplay(), s21 = this._clip(i19);
    if (!s21)
      return;
    const a19 = (_a2 = this.evaluatedMeshParams.sprite) == null ? void 0 : _a2.textureBinding;
    t14.recordStart(this.instanceId, this.attributeLayout, a19), this._writeGeometry(t14, e15, s21), t14.recordEnd();
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/fill/ComplexFillMeshWriter.js
function l12(e15) {
  const { sprite: o14, aspectRatio: r14, scaleProportionally: s21 } = e15, i19 = u(e15.height), n19 = i19 > 0 ? i19 : o14.height;
  let c12 = i19 * r14;
  return c12 <= 0 ? c12 = o14.width : s21 && (c12 *= o14.width / o14.height), { width: c12, height: n19 };
}
function m8(t14) {
  const { applyRandomOffset: e15, sampleAlphaOnly: r14 } = t14, { width: i19, height: n19 } = l12(t14);
  return l11([[C2, e15], [q, r14], [E, i19 < r], [D, n19 < r]]);
}
function f10(t14) {
  const { width: e15 } = l12(t14);
  return Math.round(e15 < r ? e15 * l : e15);
}
function d10(t14) {
  const { height: e15 } = l12(t14);
  return Math.round(e15 < r ? e15 * l : e15);
}
var g11 = { createComputedParams: (t14) => t14, attributes: { ...s16.attributes, bitset: { count: 1, type: C.UNSIGNED_BYTE, pack: m8 }, width: { count: 1, type: C.UNSIGNED_SHORT, pack: f10 }, height: { count: 1, type: C.UNSIGNED_SHORT, pack: d10 }, offset: { count: 2, type: C.SHORT, pack: ({ offsetX: e15, offsetY: o14 }) => [u(e15), -u(o14)] }, scale: { count: 2, type: C.UNSIGNED_BYTE, packPrecisionFactor: 16, pack: ({ scaleX: t14, scaleY: e15 }) => [t14, e15] }, angle: { count: 1, type: C.UNSIGNED_BYTE, pack: ({ angle: t14 }) => l2(t14) } } };
var y6 = class extends a16 {
  constructor() {
    super(...arguments), this.vertexSpec = g11;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/line/LineMeshWriter.js
var f11 = class {
  constructor() {
    this.extrusionOffsetX = 0, this.extrusionOffsetY = 0, this.normalX = 0, this.normalY = 0, this.directionX = 0, this.directionY = 0, this.distance = 0;
  }
};
var _6 = { createComputedParams: (t14) => t14, attributes: { id: { type: C.UNSIGNED_BYTE, count: 3, pack: "id" }, pos: { type: C.SHORT, count: 2, pack: "position", packPrecisionFactor: 10 }, bitset: { type: C.UNSIGNED_BYTE, count: 1 }, zoomRange: { type: C.SHORT, count: 2, packPrecisionFactor: ct, pack: ({ scaleInfo: t14 }, { tileInfo: e15 }) => m7(t14, e15) }, color: { type: C.UNSIGNED_BYTE, count: 4, normalized: true, pack: ({ color: t14 }) => h12(t14) }, offset: { type: C.BYTE, count: 2, packPrecisionFactor: 16, packTessellation: ({ extrusionOffsetX: t14, extrusionOffsetY: e15 }) => [M5(t14, 16), M5(e15, 16)] }, normal: { type: C.BYTE, count: 2, packPrecisionFactor: 16, packTessellation: ({ normalX: t14, normalY: e15 }) => [M5(t14, 16), M5(e15, 16)] }, halfWidth: { type: C.UNSIGNED_SHORT, count: 1, packPrecisionFactor: 16, pack: ({ width: e15 }) => S8(u(0.5 * e15), 16) }, referenceHalfWidth: { type: C.UNSIGNED_SHORT, count: 1, packPrecisionFactor: 16, pack: ({ referenceWidth: e15 }) => S8(u(0.5 * e15), 16) } } };
var x6 = class {
  constructor() {
    this.id = 0, this.bitset = 0, this.indexCount = 0, this.vertexCount = 0, this.vertexFrom = 0, this.vertexBounds = 0;
  }
};
var T4 = 65535;
var w8 = class extends o8 {
  constructor(t14, e15, s21, i19) {
    super(t14, e15, s21, i19), this.vertexSpec = _6, this._currentWrite = new x6(), this._tessellationOptions = { halfWidth: 0, pixelCoordRatio: 1, offset: 0, wrapDistance: T4, textured: false }, this._tessParams = new f11(), this._initializeTessellator();
  }
  writeLineVertices(t14, e15, s21) {
    const i19 = this._getLines(e15);
    null != i19 && this._writeVertices(t14, s21, i19);
  }
  _initializeTessellator() {
    this._lineTessellator = new c3(this._writeTesselatedVertex.bind(this), this._writeTriangle.bind(this), true);
  }
  _write(t14, s21, i19) {
    const r14 = i19 ?? a5.fromFeatureSetReaderCIM(s21);
    r14 && this._writeGeometry(t14, s21, r14);
  }
  _writeGeometry(t14, e15, s21, i19) {
    t14.recordStart(this.instanceId, this.attributeLayout, i19), this.writeLineVertices(t14, s21, e15), t14.recordEnd();
  }
  _getLines(t14) {
    return x5(t14, r2(this.evaluatedMeshParams));
  }
  _writeVertices(e15, s21, r14) {
    const { _currentWrite: o14, _tessellationOptions: n19, evaluatedMeshParams: a19 } = this, { width: c12, capType: h16, joinType: u12, miterLimit: p13, hasSizeVV: d12 } = a19, f14 = u(0.5 * c12);
    n19.halfWidth = f14, n19.capType = g10(h16), n19.joinType = p9(u12), n19.miterLimit = p13;
    const _10 = !d12;
    o14.out = e15, o14.id = s21.getDisplayId(), o14.vertexCount = 0, o14.indexCount = 0, o14.vertexFrom = e15.vertexCount(), o14.vertexBounds = _10 && f14 < S3 ? 0 : 1;
    for (const { line: t14, start: i19 } of r14)
      n19.initialDistance = i19 % T4, this._lineTessellator.tessellate(t14, n19, _10);
  }
  _writeTesselatedVertex(t14, e15, s21, i19, r14, o14, n19, a19, c12, h16, l15) {
    const { out: m11, id: u12, vertexBounds: p13 } = this._currentWrite;
    return this.hasEffects && m11.recordBounds(t14, e15, p13, p13), this._tessParams.extrusionOffsetX = n19, this._tessParams.extrusionOffsetY = a19, this._tessParams.normalX = c12, this._tessParams.normalY = h16, this._tessParams.directionX = r14, this._tessParams.directionY = o14, this._tessParams.distance = l15, this._writeVertex(m11, u12, t14, e15, this._tessParams), this._currentWrite.vertexFrom + this._currentWrite.vertexCount++;
  }
  _writeTriangle(t14, e15, s21) {
    const { out: i19 } = this._currentWrite;
    i19.indexEnsureSize(3), i19.indexWrite(t14), i19.indexWrite(e15), i19.indexWrite(s21), this._currentWrite.indexCount += 3;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/fill/OutlineFillMeshWriter.js
var l13 = { createComputedParams: (e15) => e15, attributes: { ..._6.attributes, bitset: { type: C.UNSIGNED_BYTE, count: 1, pack: (e15) => 0 }, color: { type: C.UNSIGNED_BYTE, count: 4, normalized: true, pack: ({ color: e15 }) => h12(e15) } } };
var m9 = { createComputedParams: (e15) => e15, attributes: { ..._6.attributes, bitset: { type: C.UNSIGNED_BYTE, count: 1, pack: (e15) => l11([[B, true]]) }, color: { type: C.UNSIGNED_BYTE, count: 4, normalized: true, pack: ({ outlineColor: e15 }) => h12(e15) } } };
var p10 = class extends w8 {
  constructor() {
    super(...arguments), this.vertexSpec = m9;
  }
};
var h13 = class extends i16 {
  constructor(e15, t14, r14, s21) {
    super(e15, t14, r14, s21), this.vertexSpec = l13, this._lineMeshWriter = this._createOutlineWriter(e15, t14, r14, s21);
  }
  _createOutlineWriter(e15, t14, r14, s21) {
    return new p10(e15, t14, r14, s21);
  }
  _write(t14, r14, s21) {
    const i19 = (s21 == null ? void 0 : s21.asOptimized()) ?? r14.readGeometryForDisplay(), o14 = this._clip(i19);
    o14 && (t14.recordStart(this.instanceId, this.attributeLayout), this._writeGeometry(t14, r14, o14), this._lineMeshWriter.writeLineVertices(t14, a5.fromOptimizedCIM(o14, "esriGeometryPolyline"), r14), t14.recordEnd());
  }
  _clip(e15) {
    return e15 ? d8(e15, r2(this.evaluatedMeshParams)) : null;
  }
  ensurePacked(e15, t14, r14) {
    super.ensurePacked(e15, t14, r14), this._lineMeshWriter.ensurePacked(e15, t14, r14);
  }
  enqueueRequest(e15, t14, r14) {
    super.enqueueRequest(e15, t14, r14), this._lineMeshWriter.enqueueRequest(e15, t14, r14);
  }
  async loadDependencies() {
    await Promise.all([super.loadDependencies(), this._lineMeshWriter.loadDependencies()]);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/fill/ComplexOutlineFillMeshWriter.js
var h14 = g11.attributes;
var f12 = m9.attributes;
var y7 = { createComputedParams: (e15) => e15, attributes: { id: h14.id, pos: h14.pos, zoomRange: h14.zoomRange, tlbr: h14.tlbr, angle: h14.angle, color: h14.color, bitset: { type: C.UNSIGNED_BYTE, count: 1, pack: (e15) => m8(e15) }, aux1: { count: 1, type: C.UNSIGNED_SHORT, pack: (e15) => f10(e15) }, aux2: { count: 1, type: C.UNSIGNED_SHORT, pack: (e15) => d10(e15) }, aux3: { count: 2, type: C.SHORT, pack: ({ offsetX: t14, offsetY: r14 }) => [u(t14), u(r14)] }, aux4: { count: 2, type: C.UNSIGNED_BYTE, pack: ({ scaleX: e15, scaleY: t14 }) => [e15 * S7, t14 * S7] } } };
var x7 = { createComputedParams: (e15) => e15, attributes: { id: h14.id, pos: h14.pos, zoomRange: h14.zoomRange, tlbr: h14.tlbr, angle: h14.angle, color: f12.color, bitset: { type: C.UNSIGNED_BYTE, count: 1, pack: (e15) => l11([[B, true]]) }, aux1: { count: 1, type: C.UNSIGNED_SHORT, pack: (t14) => u(0.5 * t14.width) * S7 }, aux2: { count: 1, type: C.UNSIGNED_SHORT, pack: (t14) => u(0.5 * t14.referenceWidth) * S7 }, aux3: { count: 2, type: C.SHORT, packTessellation: ({ extrusionOffsetX: e15, extrusionOffsetY: t14 }) => [e15 * S7, t14 * S7] }, aux4: { count: 2, type: C.UNSIGNED_BYTE, packTessellation: ({ normalX: e15, normalY: t14 }) => [e15 * S7 + w6, t14 * S7 + w6] } } };
var S9 = class extends p10 {
  constructor() {
    super(...arguments), this.vertexSpec = x7;
  }
};
var N2 = class extends h13 {
  constructor() {
    super(...arguments), this.vertexSpec = y7;
  }
  _createOutlineWriter(e15, t14, r14, s21) {
    return new S9(e15, t14, r14, s21);
  }
  _write(e15, r14, s21) {
    var _a;
    const o14 = (s21 == null ? void 0 : s21.asOptimized()) ?? r14.readGeometryForDisplay(), i19 = this._clip(o14);
    if (!i19)
      return;
    const a19 = (_a = this.evaluatedMeshParams.sprite) == null ? void 0 : _a.textureBinding;
    e15.recordStart(this.instanceId, this.attributeLayout, a19), this._writeGeometry(e15, r14, i19), this._lineMeshWriter.writeLineVertices(e15, a5.fromOptimizedCIM(i19, "esriGeometryPolyline"), r14), e15.recordEnd();
  }
  ensurePacked(e15, t14, r14) {
    super.ensurePacked(e15, t14, r14), this._lineMeshWriter.ensurePacked(e15, t14, r14);
  }
  enqueueRequest(e15, t14, r14) {
    super.enqueueRequest(e15, t14, r14), this._lineMeshWriter.enqueueRequest(e15, t14, r14);
  }
  async loadDependencies() {
    await Promise.all([super.loadDependencies(), this._lineMeshWriter.loadDependencies()]);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/fill/PatternOutlineFillMeshWriter.js
var n17 = { createComputedParams: (e15) => e15, attributes: { ...s16.attributes, ...l13.attributes } };
var u10 = { createComputedParams: (e15) => e15, attributes: { ...s16.attributes, ...m9.attributes } };
var o10 = class extends p10 {
  constructor() {
    super(...arguments), this.vertexSpec = u10;
  }
};
var c10 = class extends h13 {
  constructor() {
    super(...arguments), this.vertexSpec = n17;
  }
  _createOutlineWriter(e15, t14, r14, s21) {
    return new o10(e15, t14, r14, s21);
  }
  _write(t14, r14, s21) {
    var _a;
    const i19 = (s21 == null ? void 0 : s21.asOptimized()) ?? r14.readGeometryForDisplay(), a19 = this._clip(i19);
    if (!a19)
      return;
    const n19 = (_a = this.evaluatedMeshParams.sprite) == null ? void 0 : _a.textureBinding;
    t14.recordStart(this.instanceId, this.attributeLayout, n19), this._writeGeometry(t14, r14, a19), this._lineMeshWriter.writeLineVertices(t14, a5.fromOptimizedCIM(a19, "esriGeometryPolyline"), r14), t14.recordEnd();
  }
  ensurePacked(e15, t14, r14) {
    super.ensurePacked(e15, t14, r14), this._lineMeshWriter.ensurePacked(e15, t14, r14);
  }
  enqueueRequest(e15, t14, r14) {
    super.enqueueRequest(e15, t14, r14), this._lineMeshWriter.enqueueRequest(e15, t14, r14);
  }
  async loadDependencies() {
    await Promise.all([super.loadDependencies(), this._lineMeshWriter.loadDependencies()]);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/heatmap/HeatmapMeshWriter.js
var r12 = { createComputedParams: (e15) => e15, attributes: { pos: { type: C.SHORT, count: 2, pack: "position", packPrecisionFactor: 10 }, id: { type: C.UNSIGNED_BYTE, count: 3, pack: "id" }, bitset: { type: C.UNSIGNED_BYTE, count: 1 }, offset: { type: C.BYTE, count: 2, packAlternating: { count: 4, pack: () => [[-1, -1], [1, -1], [-1, 1], [1, 1]] } } } };
var i17 = class extends o8 {
  constructor() {
    super(...arguments), this.vertexSpec = r12;
  }
  _write(e15, t14) {
    e15.recordStart(this.instanceId, this.attributeLayout);
    const r14 = t14.getDisplayId();
    if ("esriGeometryPoint" === t14.geometryType) {
      const i19 = t14.readXForDisplay(), o14 = t14.readYForDisplay();
      this._writeQuad(e15, r14, i19, o14);
    } else if ("esriGeometryMultipoint" === t14.geometryType) {
      const i19 = t14.readGeometryForDisplay();
      i19 == null ? void 0 : i19.forEachVertex((t15, i20) => {
        t15 >= 0 && t15 <= 512 && i20 >= 0 && i20 <= 512 && this._writeQuad(e15, r14, t15, i20);
      });
    }
    e15.recordEnd();
  }
  _writeQuad(e15, t14, r14, i19) {
    const o14 = e15.vertexCount();
    this._writeVertex(e15, t14, r14, i19), e15.indexWrite(o14 + 0), e15.indexWrite(o14 + 1), e15.indexWrite(o14 + 2), e15.indexWrite(o14 + 1), e15.indexWrite(o14 + 3), e15.indexWrite(o14 + 2);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/mesh/templates/segmentUtils.js
function e13(t14, e15, n19) {
  return t14[0] = e15[0] - n19[0], t14[1] = e15[1] - n19[1], t14;
}
function n18(t14, e15) {
  return Math.sqrt(t14 * t14 + e15 * e15);
}
function s17(t14) {
  const e15 = n18(t14[0], t14[1]);
  t14[0] /= e15, t14[1] /= e15;
}
function i18(t14, e15) {
  return n18(t14[0] - e15[0], t14[1] - e15[1]);
}
function r13(t14, e15) {
  return t14[e15 + 1];
}
function h15(t14) {
  return t14.length - 1;
}
function a17(t14) {
  let e15 = 0;
  for (let n19 = 0; n19 < h15(t14); n19++)
    e15 += c11(t14, n19);
  return e15;
}
function c11(t14, e15, n19 = 1) {
  let [s21, i19] = r13(t14, e15);
  return [s21, i19] = [Math.round(s21), Math.round(i19)], Math.sqrt(s21 * s21 + i19 * i19) * n19;
}
var u11 = class _u {
  constructor(t14, e15, n19, s21, i19) {
    this._segments = t14, this._index = e15, this._distance = n19, this._xStart = s21, this._yStart = i19, this._done = false;
  }
  static create(t14) {
    return new _u(t14, 0, 0, t14[0][0], t14[0][1]);
  }
  clone() {
    return new _u(this._segments, this._index, this._distance, this.xStart, this.yStart);
  }
  equals(t14) {
    return this._index === t14._index || t14._index === this._index - 1 && (0 === this._distance || 1 === t14._distance) || t14._index === this._index + 1 && (1 === this._distance || 0 === t14._distance);
  }
  leq(t14) {
    return this._index < t14._index || this._index === t14._index && this._distance <= t14._distance;
  }
  geq(t14) {
    return this._index > t14._index || this._index === t14._index && this._distance >= t14._distance;
  }
  get _segment() {
    return this._segments[this._index + 1];
  }
  get angle() {
    const t14 = this.dy, e15 = (0 * t14 + -1 * -this.dx) / (1 * this.length);
    let n19 = Math.acos(e15);
    return t14 > 0 && (n19 = 2 * Math.PI - n19), n19;
  }
  get xStart() {
    return this._xStart;
  }
  get yStart() {
    return this._yStart;
  }
  get x() {
    return this.xStart + this.distance * this.dx;
  }
  get y() {
    return this.yStart + this.distance * this.dy;
  }
  get dx() {
    return this._segment[0];
  }
  get dy() {
    return this._segment[1];
  }
  get xMidpoint() {
    return this.xStart + 0.5 * this.dx;
  }
  get yMidpoint() {
    return this.yStart + 0.5 * this.dy;
  }
  get xEnd() {
    return this.xStart + this.dx;
  }
  get yEnd() {
    return this.yStart + this.dy;
  }
  get length() {
    const { dx: t14, dy: e15 } = this;
    return Math.sqrt(t14 * t14 + e15 * e15);
  }
  get remainingLength() {
    return this.length * (1 - this._distance);
  }
  get backwardLength() {
    return this.length * this._distance;
  }
  get distance() {
    return this._distance;
  }
  get done() {
    return this._done;
  }
  hasPrev() {
    return this._index - 1 >= 0;
  }
  hasNext() {
    return this._index + 1 < h15(this._segments);
  }
  next() {
    return this.hasNext() ? (this._xStart += this.dx, this._yStart += this.dy, this._distance = 0, this._index += 1, this) : null;
  }
  prev() {
    return this.hasPrev() ? (this._index -= 1, this._xStart -= this.dx, this._yStart -= this.dy, this._distance = 1, this) : (this._done = true, null);
  }
  _seekBackwards(t14, e15) {
    const n19 = this.backwardLength;
    if (t14 <= n19)
      return this._distance = (n19 - t14) / this.length, this;
    let s21 = this.backwardLength;
    for (; this.prev(); ) {
      if (s21 + this.length > t14)
        return this._seekBackwards(t14 - s21);
      s21 += this.length;
    }
    return this._distance = 0, e15 ? this : null;
  }
  seek(t14, e15 = false) {
    if (t14 < 0)
      return this._seekBackwards(Math.abs(t14), e15);
    if (t14 <= this.remainingLength)
      return this._distance = (this.backwardLength + t14) / this.length, this;
    let n19 = this.remainingLength;
    for (; this.next(); ) {
      if (n19 + this.length > t14)
        return this.seek(t14 - n19, e15);
      n19 += this.length;
    }
    return this._distance = 1, e15 ? this : null;
  }
};
function d11(e15, n19, s21, i19 = true) {
  const r14 = a17(e15), h16 = u11.create(e15), c12 = r14 / 2;
  if (!i19)
    return h16.seek(c12), void (Math.abs(h16.x) < t5 && Math.abs(h16.y) < t5 && s21(h16.clone(), 0, c12 + 0 * n19, r14));
  const d12 = Math.max((r14 - n19) / 2, 0), o14 = Math.floor(d12 / n19), _10 = c12 - o14 * n19;
  h16.seek(_10);
  for (let a19 = -o14; a19 <= o14; a19++)
    Math.abs(h16.x) < t5 && Math.abs(h16.y) < t5 && s21(h16.clone(), a19, c12 + a19 * n19, r14), h16.seek(n19);
}
function l14(t14, e15) {
  const n19 = e15;
  for (let s21 = 0; s21 < t14.length; s21++) {
    let e16 = t14[s21];
    g12(e16, n19);
    const i19 = [];
    i19.push(e16[0]);
    for (let t15 = 1; t15 < e16.length; t15++) {
      const [n20, s22] = e16[t15 - 1], [r14, h16] = e16[t15], a19 = r14 - n20, c12 = h16 - s22;
      i19.push([a19, c12]);
    }
    t14[s21] = i19, e16 = i19;
  }
  return t14;
}
function g12(t14, n19) {
  const r14 = 1e-6;
  if (n19 <= 0)
    return;
  const h16 = t14.length;
  if (h16 < 3)
    return;
  const a19 = [];
  let c12 = 0;
  a19.push(0);
  for (let e15 = 1; e15 < h16; e15++)
    c12 += i18(t14[e15], t14[e15 - 1]), a19.push(c12);
  n19 = Math.min(n19, 0.2 * c12);
  const u12 = [];
  u12.push(t14[0][0]), u12.push(t14[0][1]);
  const d12 = t14[h16 - 1][0], o14 = t14[h16 - 1][1], _10 = e13([0, 0], t14[0], t14[1]);
  s17(_10), t14[0][0] += n19 * _10[0], t14[0][1] += n19 * _10[1], e13(_10, t14[h16 - 1], t14[h16 - 2]), s17(_10), t14[h16 - 1][0] += n19 * _10[0], t14[h16 - 1][1] += n19 * _10[1];
  for (let e15 = 1; e15 < h16; e15++)
    a19[e15] += n19;
  a19[h16 - 1] += n19;
  const l15 = 0.5 * n19;
  for (let e15 = 1; e15 < h16 - 1; e15++) {
    let s21 = 0, i19 = 0, c13 = 0;
    for (let h17 = e15 - 1; h17 >= 0 && !(a19[h17 + 1] < a19[e15] - l15); h17--) {
      const u13 = l15 + a19[h17 + 1] - a19[e15], d13 = a19[h17 + 1] - a19[h17], o15 = a19[e15] - a19[h17] < l15 ? 1 : u13 / d13;
      if (Math.abs(o15) < r14)
        break;
      const _11 = o15 * o15, g14 = o15 * u13 - 0.5 * _11 * d13, x9 = o15 * d13 / n19, f14 = t14[h17 + 1], y8 = t14[h17][0] - f14[0], k7 = t14[h17][1] - f14[1];
      s21 += x9 / g14 * (f14[0] * o15 * u13 + 0.5 * _11 * (u13 * y8 - d13 * f14[0]) - _11 * o15 * d13 * y8 / 3), i19 += x9 / g14 * (f14[1] * o15 * u13 + 0.5 * _11 * (u13 * k7 - d13 * f14[1]) - _11 * o15 * d13 * k7 / 3), c13 += x9;
    }
    for (let u13 = e15 + 1; u13 < h16 && !(a19[u13 - 1] > a19[e15] + l15); u13++) {
      const h17 = l15 - a19[u13 - 1] + a19[e15], d13 = a19[u13] - a19[u13 - 1], o15 = a19[u13] - a19[e15] < l15 ? 1 : h17 / d13;
      if (Math.abs(o15) < r14)
        break;
      const _11 = o15 * o15, g14 = o15 * h17 - 0.5 * _11 * d13, x9 = o15 * d13 / n19, f14 = t14[u13 - 1], y8 = t14[u13][0] - f14[0], k7 = t14[u13][1] - f14[1];
      s21 += x9 / g14 * (f14[0] * o15 * h17 + 0.5 * _11 * (h17 * y8 - d13 * f14[0]) - _11 * o15 * d13 * y8 / 3), i19 += x9 / g14 * (f14[1] * o15 * h17 + 0.5 * _11 * (h17 * k7 - d13 * f14[1]) - _11 * o15 * d13 * k7 / 3), c13 += x9;
    }
    u12.push(s21 / c13), u12.push(i19 / c13);
  }
  u12.push(d12), u12.push(o14);
  for (let e15 = 0, s21 = 0; e15 < h16; e15++)
    t14[e15][0] = u12[s21++], t14[e15][1] = u12[s21++];
}

// node_modules/@arcgis/core/symbols/cim/placements/CIMMarkerPlacementHelper.js
var e14 = class {
  static getPlacement(e15, r14, n19, s21, c12, o14) {
    const a19 = g2(n19);
    if (!a19)
      return null;
    -1 === r14 && e15.invertY();
    return a19.execute(e15, n19, s21, c12, o14);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/text/TextParams.js
var s18 = 96;
var o11 = class {
  constructor(o14) {
    const { offsetX: f14, offsetY: i19, postAngle: e15, fontSize: n19, scaleFactor: h16, transforms: r14 } = o14;
    if (this.offsetX = f14, this.offsetY = i19, this.postAngle = e15, this.fontSize = Math.min(n19, s18), this.transforms = r14, r14 && r14.infos.length > 1) {
      const o15 = O(n19, e15, false, f14, i19, r14);
      this.fontSize = Math.min(o15.size, s18), this.postAngle = o15.rotation, this.offsetX = o15.offsetX, this.offsetY = o15.offsetY;
    }
    h16 && (this.fontSize *= h16, this.offsetX *= h16, this.offsetY *= h16);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/text/TextMeshWriter.js
var _7 = 28;
var P6 = [4, 4];
var S10 = [16, 4];
var k5 = { topLeft: S10, topRight: S10, bottomLeft: S10, bottomRight: S10 };
var T5 = [4, 2];
var b6 = [4, 6];
var B6 = { topLeft: T5, topRight: T5, bottomLeft: b6, bottomRight: b6 };
var R6 = { topLeft: T5, topRight: b6, bottomLeft: T5, bottomRight: b6 };
var w9 = { topLeft: b6, topRight: b6, bottomLeft: P6, bottomRight: P6 };
var M6 = { topLeft: P6, topRight: P6, bottomLeft: b6, bottomRight: b6 };
var z6 = { topLeft: b6, topRight: P6, bottomLeft: b6, bottomRight: P6 };
var L2 = { topLeft: P6, topRight: b6, bottomLeft: P6, bottomRight: b6 };
var I4 = { createComputedParams: (t14) => t14, attributes: { pos: { type: C.SHORT, count: 2, pack: "position", packPrecisionFactor: 10 }, id: { type: C.UNSIGNED_BYTE, count: 3, pack: "id" }, bitset: { type: C.UNSIGNED_BYTE, count: 1, packTessellation: ({ isBackground: t14, mapAligned: e15 }) => l11([[I, t14], [J, !!e15]]) }, zoomRange: { type: C.UNSIGNED_SHORT, count: 2, packPrecisionFactor: ct, packTessellation: ({ minZoom: t14, maxZoom: e15 }) => [t14 || 0, e15 || _7] }, offset: { type: C.SHORT, count: 2, packPrecisionFactor: 8, packAlternating: { count: 4, packTessellation: ({ offsets: t14 }) => {
  const { bottomLeft: e15, bottomRight: o14, topLeft: r14, topRight: i19 } = t14;
  return [r14, i19, e15, o14];
} } }, textureUV: { type: C.SHORT, count: 2, packPrecisionFactor: 4, packAlternating: { count: 4, packTessellation: ({ texcoords: t14 }) => {
  const { bottomLeft: e15, bottomRight: o14, topLeft: r14, topRight: i19 } = t14;
  return [r14, i19, e15, o14];
} } }, color: { type: C.UNSIGNED_BYTE, count: 4, normalized: true, packTessellation: ({ color: t14 }) => t14 }, fontSize: { type: C.UNSIGNED_SHORT, count: 1, packPrecisionFactor: 4, packTessellation: ({ fontSize: t14 }) => u(t14) }, referenceSize: { type: C.UNSIGNED_BYTE, count: 1, packPrecisionFactor: 4, packTessellation: ({ fontSize: t14 }, { referenceSize: o14 }) => u(o14 ?? t14) }, haloColor: { type: C.UNSIGNED_BYTE, count: 4, normalized: true, pack: ({ haloColor: t14 }) => h12(t14) }, haloFontSize: { type: C.UNSIGNED_SHORT, count: 1, packPrecisionFactor: 4, pack: ({ haloFontSize: t14 }) => u(t14) }, clipAngle: { type: C.UNSIGNED_BYTE, count: 1, packTessellation: ({ clipAngle: t14 }) => G4(t14 || 0) }, referenceSymbol: { type: C.BYTE, count: 4, packPrecisionFactor: 1, packTessellation: (t14, o14) => {
  if (!t14.referenceBounds)
    return [0, 0, 0, 0];
  const r14 = s6(o14.horizontalAlignment), n19 = i5(o14.verticalAlignment), { offsetX: a19, offsetY: c12, size: l15 } = t14.referenceBounds;
  return [u(a19), -u(c12), u(l15), r14 + 1 << 2 | n19 + 1];
} } } };
var E3 = class extends o8 {
  constructor() {
    super(...arguments), this.vertexSpec = I4, this._textMeshParamsPropsInitialized = false;
  }
  ensurePacked(t14, e15, o14) {
    super.ensurePacked(t14, e15, o14), this._textMeshParamsPropsInitialized && !this._evaluator.hasDynamicProperties || (this._textMeshTransformProps = new o11(this.evaluatedMeshParams), this._textMeshParamsPropsInitialized = true);
  }
  _write(t14, e15, o14) {
    const r14 = this._getShaping();
    if (!r14)
      return;
    const i19 = e15.getDisplayId();
    if (null != this.evaluatedMeshParams.placement)
      return this._writePlacedTextMarkers(t14, e15, r14, o14);
    if (o14 && o14.nextPath())
      return o14.nextPoint(), this._writeGlyphs(t14, i19, o14.x, o14.y, r14, 0);
    if ("esriGeometryPolygon" === e15.geometryType) {
      const o15 = e15.readCentroidForDisplay();
      if (!o15)
        return;
      const [s22, n20] = o15.coords;
      return this._writeGlyphs(t14, i19, s22, n20, r14, 0);
    }
    if ("esriGeometryMultipoint" === e15.geometryType) {
      const o15 = e15.readGeometryForDisplay();
      return void (o15 == null ? void 0 : o15.forEachVertex((e16, o16) => this._writeGlyphs(t14, i19, e16, o16, r14, 0)));
    }
    const s21 = e15.readXForDisplay(), n19 = e15.readYForDisplay();
    return this._writeGlyphs(t14, i19, s21, n19, r14, 0);
  }
  _writePlacedTextMarkers(t14, i19, s21, n19) {
    const a19 = n19 ?? a5.fromFeatureSetReaderCIM(i19);
    if (!a19)
      return;
    const c12 = -1, l15 = e14.getPlacement(a19, c12, this.evaluatedMeshParams.placement, u(1), t14.id, t13());
    if (!l15)
      return;
    const f14 = i19.getDisplayId();
    let h16 = l15.next();
    for (; null != h16; ) {
      const e15 = h16.tx, o14 = -h16.ty, r14 = -h16.getAngle();
      this._writeGlyphs(t14, f14, e15, o14, s21, r14), h16 = l15.next();
    }
  }
  _getShaping() {
    var _a;
    const o14 = this._textMeshTransformProps, r14 = this.evaluatedMeshParams;
    if (!((_a = r14.glyphs) == null ? void 0 : _a.glyphs.length))
      return null;
    const i19 = Math.round(u(o14.fontSize)), s21 = u(o14.offsetX), n19 = u(o14.offsetY), f14 = e2(u(r14.lineWidth), 32, 512), h16 = g * e2(r14.lineHeightRatio, 0.25, 4);
    return O2(r14.glyphs, { scale: i19 / U, angle: o14.postAngle, xOffset: s21, yOffset: n19, horizontalAlignment: r14.horizontalAlignment, verticalAlignment: r14.verticalAlignment, maxLineWidth: f14, lineHeight: h16, decoration: r14.decoration, borderLineSizePx: u(r14.boxBorderLineSize), hasBackground: !!r14.boxBackgroundColor, useCIMAngleBehavior: r14.useCIMAngleBehavior });
  }
  _writeGlyphs(t14, o14, r14, i19, s21, n19, a19, c12) {
    const l15 = this.evaluatedMeshParams, f14 = this._textMeshTransformProps, m11 = f14.fontSize, d12 = u(f14.offsetX), u12 = u(f14.offsetY), [g14, x9] = m7(l15.scaleInfo, this.getTileInfo());
    0 !== n19 && s21.setRotation(n19);
    const y8 = s21.bounds, _10 = r14 + y8.x + d12, P7 = i19 + y8.y - u12, S12 = 2 * (l15.minPixelBuffer ? l15.minPixelBuffer / m11 : 1), k7 = Math.max(y8.width, y8.height) * S12;
    s21.textBox && (t14.recordStart(this.instanceId, this.attributeLayout, s21.glyphs[0].textureBinding), t14.recordBounds(_10, P7, k7, k7), this._writeTextBox(t14, o14, r14, i19, s21.textBox, a19, c12), t14.recordEnd());
    for (const e15 of s21.glyphs) {
      t14.recordStart(this.instanceId, this.attributeLayout, e15.textureBinding), t14.recordBounds(_10, P7, k7, k7);
      const { texcoords: s22, offsets: n20 } = e15;
      this._writeQuad(t14, o14, r14, i19, { texcoords: s22, offsets: n20, fontSize: m11, color: h12(l15.color), isBackground: false, referenceBounds: a19, minZoom: g14, maxZoom: x9, ...c12 }), t14.recordEnd();
    }
    0 !== n19 && s21.setRotation(-n19);
  }
  _writeTextBox(t14, e15, o14, r14, i19, s21, n19) {
    const a19 = this.evaluatedMeshParams, { fontSize: c12 } = this._textMeshTransformProps, { boxBackgroundColor: l15, boxBorderLineColor: f14 } = a19, p13 = { isBackground: true, fontSize: c12, referenceBounds: s21, ...n19 };
    l15 && (this._writeQuad(t14, e15, o14, r14, { texcoords: k5, offsets: i19.main, color: h12(l15), ...p13 }), f14 || (this._writeQuad(t14, e15, o14, r14, { texcoords: w9, offsets: i19.top, color: h12(l15), ...p13 }), this._writeQuad(t14, e15, o14, r14, { texcoords: M6, offsets: i19.bot, color: h12(l15), ...p13 }), this._writeQuad(t14, e15, o14, r14, { texcoords: z6, offsets: i19.left, color: h12(l15), ...p13 }), this._writeQuad(t14, e15, o14, r14, { texcoords: L2, offsets: i19.right, color: h12(l15), ...p13 }))), f14 && (this._writeQuad(t14, e15, o14, r14, { texcoords: B6, offsets: i19.top, color: h12(f14), ...p13 }), this._writeQuad(t14, e15, o14, r14, { texcoords: B6, offsets: i19.bot, color: h12(f14), ...p13 }), this._writeQuad(t14, e15, o14, r14, { texcoords: R6, offsets: i19.left, color: h12(f14), ...p13 }), this._writeQuad(t14, e15, o14, r14, { texcoords: R6, offsets: i19.right, color: h12(f14), ...p13 }));
  }
  _writeQuad(t14, e15, o14, r14, i19) {
    const s21 = t14.vertexCount();
    this._writeVertex(t14, e15, o14, r14, i19), t14.indexWrite(s21 + 0), t14.indexWrite(s21 + 1), t14.indexWrite(s21 + 2), t14.indexWrite(s21 + 1), t14.indexWrite(s21 + 3), t14.indexWrite(s21 + 2);
  }
};
var G4 = (t14) => Math.round(t14 * (254 / 360));

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/labels/LabelMeshWriter.js
var g13 = 1;
var p11 = 0;
var f13 = 128;
var _8 = o((e15) => {
  let t14 = 0;
  if (0 === e15)
    return 1 / 0;
  for (; !(e15 % 2); )
    t14++, e15 /= 2;
  return t14;
});
var x8 = class extends E3 {
  constructor() {
    super(...arguments), this._zoomLevel = 0;
  }
  _write(e15, t14, i19, s21) {
    if (this._zoomLevel = s21 || 0, null != i19)
      throw new Error("InternalError: EffectGeometry not support for LabelMeshWriter");
    switch (t14.geometryType) {
      case "esriGeometryPoint": {
        const i20 = t14.readXForDisplay(), s22 = t14.readYForDisplay();
        return this._writePoint(e15, i20, s22, t14);
      }
      case "esriGeometryEnvelope":
      case "esriGeometryPolygon":
      case "esriGeometryMultipoint": {
        const i20 = t14.readCentroidForDisplay();
        if (!i20)
          return;
        const [s22, a19] = i20.coords;
        return this._writePoint(e15, s22, a19, t14);
      }
      case "esriGeometryPolyline": {
        const i20 = t14.readLegacyGeometryForDisplay();
        this._writeLines(e15, t14, i20);
      }
    }
  }
  _writePoint(e15, t14, i19, n19) {
    var _a, _b;
    const l15 = this._getShaping();
    if (!l15)
      return;
    let h16 = this._getPointReferenceBounds();
    h16 || (h16 = { offsetX: 0, offsetY: 0, size: 0 });
    const c12 = l15.boundsT, m11 = a7(this.evaluatedMeshParams.horizontalAlignment), d12 = c2(this.evaluatedMeshParams.verticalAlignment), u12 = ((_a = this.evaluatedMeshParams.scaleInfo) == null ? void 0 : _a.maxScale) ?? 0, g14 = ((_b = this.evaluatedMeshParams.scaleInfo) == null ? void 0 : _b.minScale) ?? 0, p13 = f6(n19.getDisplayId());
    e15.metricStart(new r4(p13, t14, i19, m11, d12, u12, g14, h16)), e15.metricBoxWrite(c12), this._writeGlyphs(e15, n19.getDisplayId(), t14, i19, l15, 0, h16), e15.metricEnd();
  }
  _getPointReferenceBounds() {
    if (!this._references)
      return null;
    for (const e15 of this._references) {
      const t14 = e15.getBoundsInfo();
      if (t14)
        return t14;
    }
    return null;
  }
  _writeLines(e15, t14, i19) {
    const { repeatLabel: s21, scaleInfo: a19 } = this.evaluatedMeshParams, o14 = this.evaluatedMeshParams.repeatLabelDistance || 128, n19 = this._getShaping();
    if (!n19)
      return;
    this._current = { out: e15, id: t14.getDisplayId(), shaping: n19, zoomRange: m7(a19, this.getTileInfo()), referenceBounds: this._getPointReferenceBounds() || { offsetX: 0, offsetY: 0, size: 0 } };
    const r14 = l14(i19.paths, n19.bounds.width), m11 = this._placeSubdivGlyphs.bind(this), d12 = (n19.bounds.width + o14) / (1 << g13);
    for (const l15 of r14)
      d11(l15, d12, m11, !!s21);
  }
  _placeSubdivGlyphs(e15, t14, i19, s21) {
    const { allowOverrun: a19, labelPosition: o14, repeatLabelDistance: n19 } = this.evaluatedMeshParams, r14 = this._current.zoomRange[0], l15 = _8(t14), h16 = this._current.shaping.bounds.width / (1 << g13), c12 = Math.sqrt(n19 || f13) / (1 << g13), m11 = Math.min(i19, s21 - i19), d12 = this._current.shaping.isMultiline ? _7 : Math.log2(m11 / (c12 + h16 / 2)), p13 = 0 === t14 ? d12 : Math.min(l15, d12), x9 = Math.max(r14, this._zoomLevel + g13 - p13), M7 = this._zoomLevel - x9, y8 = this._current.shaping.bounds.width / 2 * 2 ** M7;
    this._current.shaping.isMultiline ? 0 === t14 && this._placeStraight(e15, x9) : a19 && M7 < 0 ? this._placeStraightAlong(e15, r14) : "parallel" === o14 ? this._placeStraightAlong(e15, x9) : "curved" === o14 && this._placeCurved(e15, x9, y8);
  }
  _placeStraight(e15, t14) {
    var _a, _b;
    const { out: i19, id: s21, shaping: a19, referenceBounds: n19 } = this._current, { x: l15, y: h16 } = e15, c12 = f6(s21), m11 = ((_a = this.evaluatedMeshParams.scaleInfo) == null ? void 0 : _a.maxScale) ?? 0, d12 = ((_b = this.evaluatedMeshParams.scaleInfo) == null ? void 0 : _b.minScale) ?? 0;
    i19.metricStart(new r4(c12, e15.x, e15.y, 0, 0, m11, d12, null)), i19.metricBoxWrite(a19.boundsT);
    const u12 = e15.angle * (180 / Math.PI) % 360, g14 = (e15.angle * (180 / Math.PI) + 180) % 360;
    this._writeGlyphs(i19, s21, l15, h16, a19, 0, n19, { clipAngle: u12, mapAligned: true, isLineLabel: true, minZoom: t14 }), this._writeGlyphs(i19, s21, l15, h16, a19, 0, n19, { clipAngle: g14, mapAligned: true, isLineLabel: true, minZoom: t14 }), i19.metricEnd();
  }
  _placeCurved(e15, t14, i19) {
    var _a, _b;
    const { out: s21, id: a19 } = this._current, n19 = e15.clone(), l15 = e15.angle * (180 / Math.PI) % 360, h16 = (e15.angle * (180 / Math.PI) + 180) % 360, c12 = f6(a19), m11 = ((_a = this.evaluatedMeshParams.scaleInfo) == null ? void 0 : _a.maxScale) ?? 0, d12 = ((_b = this.evaluatedMeshParams.scaleInfo) == null ? void 0 : _b.minScale) ?? 0;
    s21.metricStart(new r4(c12, e15.x, e15.y, 0, 0, m11, d12, null)), this._placeFirst(n19, t14, 1, l15), this._placeBack(e15, n19, t14, i19, 1, l15), this._placeForward(e15, n19, t14, i19, 1, l15), this._placeFirst(n19, t14, 0, h16), this._placeBack(e15, n19, t14, i19, 0, h16), this._placeForward(e15, n19, t14, i19, 0, h16), s21.metricEnd();
  }
  _placeStraightAlong(e15, s21) {
    var _a, _b;
    const { out: a19, id: n19, shaping: l15, zoomRange: h16, referenceBounds: c12 } = this._current, { boxBorderLineColor: m11, boxBackgroundColor: d12 } = this.evaluatedMeshParams, g14 = e15.clone(), p13 = e15.angle * (180 / Math.PI) % 360, f14 = (e15.angle * (180 / Math.PI) + 180) % 360;
    if (l15.glyphs.length > 0 && (m11 || d12)) {
      const o14 = Math.max(s21, h16[0], 0), r14 = Math.min(_7, h16[1]), m12 = M(n3(), -e15.angle), [d13, g15] = l15.shapeBackground(m12), _11 = { minZoom: o14, maxZoom: r14, clipAngle: p13, mapAligned: true, isLineLabel: true };
      a19.recordStart(this.instanceId, this.attributeLayout, l15.glyphs[0].textureBinding), this._writeTextBox(a19, n19, e15.x, e15.y, g15, c12, _11), a19.recordEnd(), _11.clipAngle = f14, a19.recordStart(this.instanceId, this.attributeLayout, l15.glyphs[0].textureBinding), this._writeTextBox(a19, n19, e15.x, e15.y, g15, c12, _11), a19.recordEnd();
    }
    const _10 = f6(n19), x9 = ((_a = this.evaluatedMeshParams.scaleInfo) == null ? void 0 : _a.maxScale) ?? 0, M7 = ((_b = this.evaluatedMeshParams.scaleInfo) == null ? void 0 : _b.minScale) ?? 0;
    a19.metricStart(new r4(_10, e15.x, e15.y, 0, 0, x9, M7, null)), this._placeFirst(g14, s21, 1, p13, true), this._placeFirst(g14, s21, 0, f14, true), a19.metricEnd();
  }
  _placeBack(e15, t14, i19, s21, a19, o14) {
    const n19 = e15.clone();
    let r14 = e15.backwardLength + p11;
    for (; n19.prev() && !(r14 >= s21); )
      this._placeOnSegment(n19, t14, r14, i19, -1, a19, o14), r14 += n19.length + p11;
  }
  _placeForward(e15, t14, i19, s21, a19, o14) {
    const n19 = e15.clone();
    let r14 = e15.remainingLength + p11;
    for (; n19.next() && !(r14 >= s21); )
      this._placeOnSegment(n19, t14, r14, i19, 1, a19, o14), r14 += n19.length + p11;
  }
  _placeFirst(e15, t14, i19, s21, a19 = false) {
    const o14 = e15, { out: n19, id: r14, shaping: l15, zoomRange: h16, referenceBounds: c12 } = this._current, m11 = l15.glyphs;
    for (const d12 of m11) {
      const m12 = d12.x > l15.bounds.x ? i19 : 1 - i19, g14 = m12 * e15.remainingLength + (1 - m12) * e15.backwardLength, f14 = Math.abs(d12.x + d12.width / 2 - l15.bounds.x), _10 = Math.max(0, this._zoomLevel + Math.log2(f14 / (g14 + p11))), x9 = Math.max(t14, a19 ? 0 : _10);
      d12.maxZoom = Math.min(h16[1], _7), d12.angle = e15.angle + (1 - i19) * Math.PI, d12.minZoom = Math.max(h16[0], x9), this._writeLineGlyph(n19, r14, o14.x, o14.y, l15.bounds, d12, s21, c12, true), i19 && this._isVisible(d12.minZoom, d12.maxZoom) && n19.metricBoxWrite(d12.bounds);
    }
  }
  _placeOnSegment(e15, t14, i19, s21, a19, o14, r14) {
    const { out: l15, id: h16, shaping: c12, referenceBounds: m11 } = this._current, d12 = c12.glyphs, u12 = e15.dx / e15.length, g14 = e15.dy / e15.length, f14 = { x: e15.x + i19 * -a19 * u12, y: e15.y + i19 * -a19 * g14 };
    for (const _10 of d12) {
      const d13 = _10.x > c12.bounds.x ? o14 : 1 - o14;
      if (!(d13 && 1 === a19 || !d13 && -1 === a19))
        continue;
      const u13 = Math.abs(_10.x + _10.width / 2 - c12.bounds.x), g15 = Math.max(0, this._zoomLevel + Math.log2(u13 / i19) - 0.1), x9 = Math.max(s21, this._zoomLevel + Math.log2(u13 / (i19 + e15.length + p11)));
      if (0 !== g15 && (_10.angle = e15.angle + (1 - o14) * Math.PI, _10.minZoom = x9, _10.maxZoom = g15, this._writeLineGlyph(l15, h16, f14.x, f14.y, c12.bounds, _10, r14, m11, true), o14 && this._isVisible(_10.minZoom, _10.maxZoom))) {
        const i20 = _10.bounds, s22 = e15.x - t14.x, a20 = e15.y - t14.y, o15 = new i6(i20.center[0] + s22, i20.center[1] + a20, i20.width, i20.height);
        l15.metricBoxWrite(o15);
      }
    }
  }
  _writeLineGlyph(e15, t14, i19, s21, a19, o14, n19, r14, l15) {
    const h16 = i19 + a19.x, c12 = s21 + a19.y, d12 = 2 * (this.evaluatedMeshParams.minPixelBuffer ? this.evaluatedMeshParams.minPixelBuffer / this._textMeshTransformProps.fontSize : 1), u12 = Math.max(a19.width, a19.height) * d12;
    e15.recordStart(this.instanceId, this.attributeLayout, o14.textureBinding), e15.recordBounds(h16, c12, u12, u12);
    const { texcoords: g14, offsets: p13 } = o14, f14 = this._textMeshTransformProps.fontSize;
    this._writeQuad(e15, t14, i19, s21, { texcoords: g14, offsets: p13, fontSize: f14, color: h12(this.evaluatedMeshParams.color), isBackground: false, referenceBounds: r14, minZoom: Math.max(this._current.zoomRange[0], o14.minZoom), maxZoom: Math.min(this._current.zoomRange[1], o14.maxZoom), clipAngle: n19, mapAligned: l15, isLineLabel: true }), e15.recordEnd();
  }
  _isVisible(e15, t14) {
    const i19 = this._zoomLevel;
    return e15 <= i19 && i19 <= t14;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/line/TexturedLineMeshWriter.js
var m10 = { createComputedParams: (t14) => t14, attributes: { ..._6.attributes, bitset: { type: C.UNSIGNED_BYTE, count: 1, pack: ({ shouldSampleAlphaOnly: t14, shouldScaleDash: e15, isSDF: s21 }) => l11([[q, t14], [F, e15], [H, s21]]) }, tlbr: { type: C.UNSIGNED_SHORT, count: 4, pack: ({ sprite: t14 }) => {
  const { rect: r14, width: s21, height: i19 } = t14, o14 = r14.x + $, n19 = r14.y + $;
  return [o14, n19, o14 + s21, n19 + i19];
} }, accumulatedDistance: { type: C.UNSIGNED_SHORT, count: 1, packTessellation: ({ distance: t14 }) => t14 }, segmentDirection: { type: C.BYTE, count: 2, packPrecisionFactor: 16, packTessellation: ({ directionX: t14, directionY: e15 }) => [t14, e15] } } };
var p12 = class extends w8 {
  constructor(t14, e15, r14, s21) {
    super(t14, e15, r14, s21), this.vertexSpec = m10, this._tessellationOptions.textured = true;
  }
  _write(e15, r14, s21) {
    const i19 = s21 ?? a5.fromFeatureSetReaderCIM(r14);
    if (!i19)
      return;
    const { sprite: o14 } = this.evaluatedMeshParams;
    this._writeGeometry(e15, r14, i19, o14 == null ? void 0 : o14.textureBinding);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/markers/ComputedMarkerParams.js
var s19 = class _s {
  static from(t14) {
    return "width" in t14 ? this.fromSimpleMeshParams(t14) : this.fromComplexMeshParams(t14);
  }
  static fromSimpleMeshParams(e15) {
    const i19 = new _s(e15.sprite, e15.color, e15.outlineColor, e15.minPixelBuffer, e15.placement, e15.scaleInfo, e15.effects), { type: o14, width: h16, height: r14, angle: n19, alignment: a19, outlineSize: c12, referenceSize: l15, sprite: m11, overrideOutlineColor: f14 } = e15;
    i19.rawWidth = u(h16), i19.rawHeight = u(r14), i19.angle = n19, i19.alignment = a19, i19.outlineSize = u(c12), i19.referenceSize = u(l15), i19.overrideOutlineColor = f14, i19.offsetX = u(e15.offsetX), i19.offsetY = u(e15.offsetY), "simple" !== o14 || m11.sdf || (i19.rawWidth = m11.width, i19.rawHeight = m11.height);
    const d12 = 2;
    return i19.sizeRatio = m11.sdf ? d12 : 1, i19._computeSize(e15, false), i19;
  }
  static fromComplexMeshParams(e15) {
    const o14 = new _s(e15.sprite, e15.color, e15.outlineColor, e15.minPixelBuffer, e15.placement, e15.scaleInfo, e15.effects);
    let { alignment: h16, transforms: r14, size: n19, scaleX: a19, anchorX: c12, anchorY: l15, angle: m11, colorLocked: f14, frameHeight: d12, widthRatio: u12, offsetX: p13, offsetY: g14, outlineSize: x9, referenceSize: w10, scaleFactor: z7, sizeRatio: S12, isAbsoluteAnchorPoint: X2, rotateClockwise: Y2, scaleSymbolsProportionally: H4, sprite: M7 } = e15;
    if (r14 && r14.infos.length > 0) {
      const t14 = O(n19, m11, Y2, p13, g14, r14);
      n19 = t14.size, m11 = t14.rotation, p13 = t14.offsetX, g14 = t14.offsetY, Y2 = false;
    }
    z7 && (n19 *= z7, p13 *= z7, g14 *= z7);
    const C7 = a19 * (M7.width / M7.height);
    o14.alignment = h16, o14.rawHeight = u(n19), o14.rawWidth = o14.rawHeight * C7, o14.referenceSize = u(w10), o14.sizeRatio = S12, o14.angle = m11, o14.rotateClockwise = Y2, o14.anchorX = c12, o14.anchorY = l15, o14.offsetX = u(p13), o14.offsetY = u(g14), X2 && n19 && (M7.sdf ? o14.anchorX = c12 / (n19 * u12) : o14.anchorX = c12 / (n19 * C7), o14.anchorY = l15 / n19);
    const W3 = H4 && d12 ? n19 / d12 : 1;
    return o14.outlineSize = 0 === x9 || isNaN(x9) ? 0 : u(x9) * W3, o14.scaleSymbolsProportionally = H4, o14.colorLocked = f14, o14._computeSize(e15, true), o14;
  }
  constructor(t14, i19, o14, s21, h16, r14, n19) {
    this.sprite = t14, this.color = i19, this.outlineColor = o14, this.minPixelBuffer = s21, this.placement = h16, this.scaleInfo = r14, this.effects = n19, this.rawWidth = 0, this.rawHeight = 0, this.angle = 0, this.outlineSize = 0, this.referenceSize = 0, this.sizeRatio = 1, this.alignment = i3.SCREEN, this.scaleSymbolsProportionally = false, this.overrideOutlineColor = false, this.colorLocked = false, this.anchorX = 0, this.anchorY = 0, this.computedWidth = 0, this.computedHeight = 0, this.texXmin = 0, this.texYmin = 0, this.texXmax = 0, this.texYmax = 0, this.offsetX = 0, this.offsetY = 0, this.rotateClockwise = true;
  }
  get boundsInfo() {
    return { size: Math.max(this.computedHeight, this.computedWidth), offsetX: this.offsetX, offsetY: this.offsetY };
  }
  _computeSize(t14, e15) {
    const { sprite: i19, hasSizeVV: s21 } = t14, h16 = !!i19.sdf, { rawWidth: r14, rawHeight: n19, sizeRatio: a19, outlineSize: c12 } = this, l15 = r14 * a19, m11 = n19 * a19;
    if (h16 && !s21) {
      const t15 = e15 && r14 > n19 ? l15 : r14, i20 = n19, o14 = c12 + 2 * 1;
      this.computedWidth = Math.min(t15 + o14, l15), this.computedHeight = Math.min(i20 + o14, m11);
    } else
      this.computedWidth = l15, this.computedHeight = m11;
    const f14 = h16 ? Math.max(i19.width, i19.height) / Math.max(l15, m11) : 1, d12 = 0.5 * (l15 - this.computedWidth) * f14, u12 = 0.5 * (m11 - this.computedHeight) * f14, p13 = i19.rect.x + $ + d12, g14 = i19.rect.y + $ + u12, x9 = p13 + i19.width - 2 * d12, w10 = g14 + i19.height - 2 * u12;
    this.texXmin = Math.floor(p13), this.texYmin = Math.floor(g14), this.texXmax = Math.ceil(x9), this.texYmax = Math.ceil(w10), this.computedWidth *= (this.texXmax - this.texXmin) / (x9 - p13), this.computedHeight *= (this.texYmax - this.texYmin) / (w10 - g14), this.anchorX *= l15 / this.computedWidth, this.anchorY *= m11 / this.computedHeight;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/markers/markerConstants.js
var o12 = { bitset: { isSDF: 0, isMapAligned: 1, scaleSymbolsProportionally: 2, overrideOutlineColor: 3, colorLocked: 4 } };

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/markers/MarkerMeshWriter.js
var k6 = 3.14159265359 / 180;
var b7 = 128 / Math.PI;
function S11(e15, t14) {
  return e15 %= t14, Math.abs(e15 >= 0 ? e15 : e15 + t14);
}
function I5(e15) {
  return S11(e15 * b7, 256);
}
function _9(e15, a19, n19, c12, m11 = false) {
  const l15 = n3(), u12 = m11 ? 1 : -1;
  return e15 ? M(l15, u12 * k6 * e15) : a6(l15), (a19 || n19) && i4(l15, l15, [a19, -n19]), c12 && s5(l15, l15, u12 * k6 * -c12), l15;
}
var v6 = { createComputedParams: (e15) => s19.from(e15), attributes: { pos: { type: C.SHORT, count: 2, pack: "position", packPrecisionFactor: 10 }, id: { type: C.UNSIGNED_BYTE, count: 3, pack: "id" }, bitset: { type: C.UNSIGNED_BYTE, count: 1, pack: ({ sprite: e15, alignment: t14, scaleSymbolsProportionally: r14, overrideOutlineColor: o14, colorLocked: s21 }) => {
  let i19 = 0;
  return e15.sdf && (i19 |= f9(o12.bitset.isSDF)), t14 === i3.MAP && (i19 |= f9(o12.bitset.isMapAligned)), r14 && (i19 |= f9(o12.bitset.scaleSymbolsProportionally)), o14 && (i19 |= f9(o12.bitset.overrideOutlineColor)), s21 && (i19 |= f9(o12.bitset.colorLocked)), i19;
} }, zoomRange: { type: C.SHORT, count: 2, packPrecisionFactor: ct, pack: ({ scaleInfo: e15 }, { tileInfo: t14 }) => m7(e15, t14) }, offset: { type: C.SHORT, count: 2, packPrecisionFactor: 4, packAlternating: { count: 4, pack: ({ angle: e15, computedWidth: t14, computedHeight: r14, anchorX: o14, anchorY: s21, offsetX: i19, offsetY: n19, rotateClockwise: c12 }) => {
  const m11 = _9(0, i19, n19, -e15, c12), l15 = -(0.5 + o14) * t14, u12 = -(0.5 - s21) * r14, d12 = [l15, u12], p13 = [l15 + t14, u12], h16 = [l15, u12 + r14], f14 = [l15 + t14, u12 + r14];
  return S2(d12, d12, m11), S2(p13, p13, m11), S2(h16, h16, m11), S2(f14, f14, m11), [d12, p13, h16, f14];
} } }, textureUV: { type: C.SHORT, count: 2, packPrecisionFactor: 4, packAlternating: { count: 4, pack: ({ texXmax: e15, texXmin: t14, texYmax: r14, texYmin: o14 }) => [[t14, o14], [e15, o14], [t14, r14], [e15, r14]] } }, color: { type: C.UNSIGNED_BYTE, count: 4, normalized: true, pack: ({ color: e15 }) => h12(e15) }, outlineColor: { type: C.UNSIGNED_BYTE, count: 4, normalized: true, pack: ({ outlineColor: e15 }) => h12(e15) }, sizing: { type: C.UNSIGNED_BYTE, count: 4, pack: ({ rawWidth: e15, rawHeight: t14, outlineSize: r14, referenceSize: o14 }) => {
  const s21 = Math.max(e15, t14);
  return [d9(s21, 128), d9(r14, 128), d9(o14, 128), 0];
} }, placementAngle: { type: C.UNSIGNED_BYTE, count: 1, packTessellation: ({ placementAngle: e15 }) => I5(e15) }, sizeRatio: { type: C.UNSIGNED_SHORT, count: 1, packPrecisionFactor: 64, pack: ({ sizeRatio: e15 }) => e15 } } };
var E4 = class extends o8 {
  constructor() {
    super(...arguments), this.vertexSpec = v6;
  }
  getBoundsInfo() {
    return this.evaluatedMeshParams.boundsInfo;
  }
  _write(e15, t14, r14) {
    var _a;
    const o14 = (_a = this.evaluatedMeshParams.sprite) == null ? void 0 : _a.textureBinding, s21 = t14.getDisplayId();
    e15.recordStart(this.instanceId, this.attributeLayout, o14);
    const i19 = this.evaluatedMeshParams.minPixelBuffer, a19 = Math.max(this.evaluatedMeshParams.computedWidth, i19), n19 = Math.max(this.evaluatedMeshParams.computedHeight, i19), m11 = this.evaluatedMeshParams.offsetX, l15 = -this.evaluatedMeshParams.offsetY;
    if (null != this.evaluatedMeshParams.placement)
      this._writePlacedMarkers(e15, t14, r14, a19, n19);
    else if (r14 && r14.nextPath()) {
      r14.nextPoint();
      const t15 = r14.x, o15 = r14.y;
      e15.recordBounds(t15 + m11, o15 + l15, a19, n19), this._writeQuad(e15, s21, t15, o15);
    } else if ("esriGeometryPolygon" === t14.geometryType) {
      const r15 = t14.readCentroidForDisplay();
      if (!r15)
        return;
      const [o15, i20] = r15.coords;
      e15.recordBounds(o15 + m11, i20 + l15, a19, n19), this._writeQuad(e15, s21, o15, i20);
    } else if ("esriGeometryPoint" === t14.geometryType) {
      const r15 = t14.readXForDisplay(), o15 = t14.readYForDisplay();
      e15.recordBounds(r15 + m11, o15 + l15, a19, n19), this._writeQuad(e15, s21, r15, o15);
    } else {
      const r15 = t14.readGeometryForDisplay();
      r15 == null ? void 0 : r15.forEachVertex((t15, r16) => {
        e15.recordBounds(t15 + m11, r16 + l15, a19, n19), Math.abs(t15) > t5 || Math.abs(r16) > t5 || this._writeQuad(e15, s21, t15, r16);
      });
    }
    e15.recordEnd();
  }
  _writePlacedMarkers(t14, r14, o14, s21, i19) {
    var _a;
    const a19 = o14 ?? ((_a = a5.fromFeatureSetReaderCIM(r14)) == null ? void 0 : _a.clone());
    if (!a19)
      return;
    const m11 = -1, u12 = e14.getPlacement(a19, m11, this.evaluatedMeshParams.placement, u(1), t14.id, t13());
    if (!u12)
      return;
    const d12 = r14.getDisplayId();
    let p13 = u12.next();
    const h16 = this.evaluatedMeshParams.offsetX, f14 = -this.evaluatedMeshParams.offsetY;
    for (; null != p13; ) {
      const e15 = p13.tx, r15 = -p13.ty;
      if (Math.abs(e15) > t5 || Math.abs(r15) > t5) {
        p13 = u12.next();
        continue;
      }
      const o15 = -p13.getAngle();
      t14.recordBounds(e15 + h16, r15 + f14, s21, i19), this._writeQuad(t14, d12, e15, r15, o15), p13 = u12.next();
    }
  }
  _writeQuad(e15, t14, r14, o14, s21) {
    const i19 = e15.vertexCount(), a19 = null == s21 ? null : { placementAngle: s21 };
    this._writeVertex(e15, t14, r14, o14, a19), e15.indexWrite(i19 + 0), e15.indexWrite(i19 + 1), e15.indexWrite(i19 + 2), e15.indexWrite(i19 + 1), e15.indexWrite(i19 + 3), e15.indexWrite(i19 + 2);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/pieChart/PieChartMeshWriter.js
var o13 = { createComputedParams: (e15) => e15, attributes: { pos: { type: C.SHORT, count: 2, packPrecisionFactor: 10, pack: "position" }, id: { type: C.UNSIGNED_BYTE, count: 3, pack: "id" }, bitset: { type: C.UNSIGNED_BYTE, count: 1, pack: (e15) => 0 }, offset: { type: C.SHORT, count: 2, packPrecisionFactor: 16, packAlternating: { count: 4, pack: ({ size: t14 }) => {
  const r14 = u(t14), i19 = -r14 / 2, o14 = -r14 / 2;
  return [[i19, o14], [i19 + r14, o14], [i19, o14 + r14], [i19 + r14, o14 + r14]];
} } }, texCoords: { type: C.SHORT, count: 2, packPrecisionFactor: 4, packAlternating: { count: 4, pack: () => [[0, 1], [1, 1], [0, 0], [1, 0]] } }, size: { type: C.UNSIGNED_BYTE, count: 2, pack: ({ size: e15 }) => [e15, e15] }, referenceSize: { type: C.UNSIGNED_BYTE, count: 1, pack: ({ size: t14 }) => u(t14) }, zoomRange: { type: C.UNSIGNED_BYTE, count: 2, pack: ({ scaleInfo: e15 }, { tileInfo: r14 }) => m7(e15, r14) } } };
var s20 = class extends o8 {
  constructor() {
    super(...arguments), this.vertexSpec = o13;
  }
  _write(t14, r14) {
    const i19 = r14.getDisplayId(), o14 = this.evaluatedMeshParams.minPixelBuffer, s21 = Math.max(u(this.evaluatedMeshParams.size), o14);
    let c12, n19;
    if ("esriGeometryPoint" === r14.geometryType)
      c12 = r14.readXForDisplay(), n19 = r14.readYForDisplay();
    else {
      const e15 = r14.readCentroidForDisplay();
      if (!e15)
        return;
      c12 = e15 == null ? void 0 : e15.coords[0], n19 = e15 == null ? void 0 : e15.coords[1];
    }
    t14.recordStart(this.instanceId, this.attributeLayout), t14.recordBounds(c12, n19, s21, s21);
    const a19 = t14.vertexCount();
    this._writeVertex(t14, i19, c12, n19), t14.indexWrite(a19 + 0), t14.indexWrite(a19 + 1), t14.indexWrite(a19 + 2), t14.indexWrite(a19 + 1), t14.indexWrite(a19 + 3), t14.indexWrite(a19 + 2), t14.recordEnd();
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/mesh/MeshWriterRegistry.js
var a18 = j6({ FillMeshWriter: i16, DotDensityMeshWriter: s15, ComplexFillMeshWriter: y6, PatternFillMeshWriter: a16, OutlineFillMeshWriter: h13, PatternOutlineFillMeshWriter: c10, ComplexOutlineFillMeshWriter: N2, MarkerMeshWriter: E4, PieChartMeshWriter: s20, TextMeshWriter: E3, LineMeshWriter: w8, TexturedLineMeshWriter: p12, HeatmapMeshWriter: i17, LabelMeshWriter: x8 });
function j6(r14) {
  const e15 = {};
  for (const t14 in r14) {
    const i19 = { name: t14, constructor: r14[t14] };
    e15[t14] = i19;
  }
  return e15;
}

export {
  n4 as n,
  r5 as r,
  l4 as l,
  i7 as i,
  t6 as t,
  c4 as c,
  o2 as o,
  A2 as A,
  G,
  k,
  q,
  F,
  H,
  I,
  J,
  U3 as U,
  S4 as S,
  j,
  C3 as C,
  G2,
  H2,
  Y,
  O3 as O,
  tt,
  nt,
  yt,
  xt,
  Dt,
  Nt,
  Bt,
  St,
  Ct,
  Xt,
  Zt,
  tn,
  sn,
  ln,
  vn,
  bn,
  kn,
  Bn,
  Un,
  Sn,
  Wn,
  te,
  ee,
  se,
  a11 as a,
  f3 as f,
  m3 as m,
  g4 as g,
  _3 as _,
  K3 as K,
  I3 as I2,
  b2 as b,
  v2 as v,
  w4 as w,
  F2,
  P2 as P,
  h6 as h,
  j2,
  z2 as z,
  k2,
  q3 as q2,
  d6 as d,
  S5 as S2,
  q4 as q3,
  F3,
  P3 as P2,
  g6 as g2,
  h7 as h2,
  P4 as P3,
  q5 as q4,
  R3 as R,
  f4 as f2,
  h8 as h3,
  t10 as t2,
  r9 as r2,
  u6 as u,
  n10 as n2,
  x2 as x,
  p5 as p,
  E2 as E,
  m4 as m2,
  p6 as p2,
  f5 as f3,
  l9 as l2,
  q6 as q5,
  D4 as D,
  T2 as T,
  B4 as B,
  H3,
  z4 as z2,
  S6 as S3,
  C5 as C2,
  n12 as n3,
  f6 as f4,
  s12 as s,
  o12 as o2,
  a18 as a2,
  d2
};
//# sourceMappingURL=chunk-4IJED6JM.js.map
