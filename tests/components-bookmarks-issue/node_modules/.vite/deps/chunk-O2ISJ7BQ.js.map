{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/esm/src/utils/openCloseComponent.ts"],
  "sourcesContent": ["import { readTask } from \"@stencil/core\";\n/**\n * Defines interface for components with open/close public emitter.\n * All implementations of this interface must handle the following events: `beforeOpen`, `open`, `beforeClose`, `close`.\n */\nexport interface OpenCloseComponent {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n\n  /**\n   * When true, the component opens.\n   */\n  open?: boolean;\n\n  /**\n   * When true, the component is open.\n   */\n  opened?: boolean;\n\n  /**\n   *  Specifies the name of transitionProp.\n   */\n  transitionProp?: string;\n\n  /**\n   * Specifies property on which active transition is watched for.\n   */\n  openTransitionProp: string;\n\n  /**\n   * Specifies element that the transition is allowed to emit on.\n   */\n  transitionEl: HTMLElement;\n\n  /**\n   * Defines method for `beforeOpen` event handler.\n   */\n  onBeforeOpen: () => void;\n\n  /**\n   * Defines method for `open` event handler:\n   */\n  onOpen: () => void;\n\n  /**\n   * Defines method for `beforeClose` event handler:\n   */\n  onBeforeClose: () => void;\n\n  /**\n   * Defines method for `close` event handler:\n   */\n  onClose: () => void;\n}\n\nconst componentToTransitionListeners = new WeakMap<\n  OpenCloseComponent,\n  [HTMLElement, typeof transitionStart, typeof transitionEnd]\n>();\n\nfunction transitionStart(this: OpenCloseComponent, event: TransitionEvent): void {\n  if (event.propertyName === this.openTransitionProp && event.target === this.transitionEl) {\n    isOpen(this) ? this.onBeforeOpen() : this.onBeforeClose();\n  }\n}\nfunction transitionEnd(this: OpenCloseComponent, event: TransitionEvent): void {\n  if (event.propertyName === this.openTransitionProp && event.target === this.transitionEl) {\n    isOpen(this) ? this.onOpen() : this.onClose();\n  }\n}\n\nfunction isOpen(component: OpenCloseComponent): boolean {\n  return \"opened\" in component ? component.opened : component.open;\n}\n\nfunction emitImmediately(component: OpenCloseComponent, nonOpenCloseComponent = false): void {\n  (nonOpenCloseComponent ? component[component.transitionProp] : isOpen(component))\n    ? component.onBeforeOpen()\n    : component.onBeforeClose();\n  (nonOpenCloseComponent ? component[component.transitionProp] : isOpen(component))\n    ? component.onOpen()\n    : component.onClose();\n}\n\n/**\n * Helper to determine globally set transition duration on the given openTransitionProp, which is imported and set in the @Watch(\"open\").\n * Used to emit (before)open/close events both for when the opacity transition is present and when there is none (transition-duration is set to 0).\n *\n * @example\n * import { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\n *\n * async componentWillLoad() {\n * // When component initially renders, if `open` was set we need to trigger on load as watcher doesn't fire.\n * if (this.open) {\n *    onToggleOpenCloseComponent(this);\n * }\n * @Watch(\"open\")\n * async toggleModal(value: boolean): Promise<void> {\n *    onToggleOpenCloseComponent(this);\n * }\n *\n * @param component - OpenCloseComponent uses `open` prop to emit (before)open/close.\n * @param nonOpenCloseComponent - OpenCloseComponent uses `expanded` prop to emit (before)open/close.\n */\nexport function onToggleOpenCloseComponent(component: OpenCloseComponent, nonOpenCloseComponent = false): void {\n  readTask((): void => {\n    if (component.transitionEl) {\n      const { transitionDuration: allDurations, transitionProperty: allProps } = getComputedStyle(\n        component.transitionEl,\n      );\n      const allTransitionDurationsArray = allDurations.split(\",\");\n      const allTransitionPropsArray = allProps.split(\",\");\n      const openTransitionPropIndex = allTransitionPropsArray.indexOf(component.openTransitionProp);\n\n      const transitionDuration =\n        allTransitionDurationsArray[openTransitionPropIndex] ??\n        /* Safari will have a single transition value if multiple props share it,\n        so we fall back to it if there's no matching prop duration */\n        allTransitionDurationsArray[0];\n\n      if (transitionDuration === \"0s\") {\n        emitImmediately(component, nonOpenCloseComponent);\n        return;\n      }\n\n      const fallbackTimeoutId = setTimeout(\n        (): void => {\n          component.transitionEl.removeEventListener(\"transitionstart\", onStart);\n          component.transitionEl.removeEventListener(\"transitionend\", onEndOrCancel);\n          component.transitionEl.removeEventListener(\"transitioncancel\", onEndOrCancel);\n          emitImmediately(component, nonOpenCloseComponent);\n        },\n        parseFloat(transitionDuration) * 1000,\n      );\n\n      component.transitionEl.addEventListener(\"transitionstart\", onStart);\n      component.transitionEl.addEventListener(\"transitionend\", onEndOrCancel);\n      component.transitionEl.addEventListener(\"transitioncancel\", onEndOrCancel);\n\n      function onStart(event: TransitionEvent): void {\n        if (event.propertyName === component.openTransitionProp && event.target === component.transitionEl) {\n          clearTimeout(fallbackTimeoutId);\n          component.transitionEl.removeEventListener(\"transitionstart\", onStart);\n          (nonOpenCloseComponent ? component[component.transitionProp] : isOpen(component))\n            ? component.onBeforeOpen()\n            : component.onBeforeClose();\n        }\n      }\n\n      function onEndOrCancel(event: TransitionEvent): void {\n        if (event.propertyName === component.openTransitionProp && event.target === component.transitionEl) {\n          (nonOpenCloseComponent ? component[component.transitionProp] : isOpen(component))\n            ? component.onOpen()\n            : component.onClose();\n\n          component.transitionEl.removeEventListener(\"transitionend\", onEndOrCancel);\n          component.transitionEl.removeEventListener(\"transitioncancel\", onEndOrCancel);\n        }\n      }\n    }\n  });\n}\n\n/**\n * Helper to keep track of transition listeners on setTransitionEl and connectedCallback on OpenCloseComponent components.\n *\n * For component which do not have open prop, use `onToggleOpenCloseComponent` implementation.\n *\n * @param component\n * @deprecated Call `onToggleOpenClose` in `componentWillLoad` and `open` property watchers instead.\n */\nexport function connectOpenCloseComponent(component: OpenCloseComponent): void {\n  disconnectOpenCloseComponent(component);\n  if (component.transitionEl) {\n    const boundOnTransitionStart: (event: TransitionEvent) => void = transitionStart.bind(component);\n    const boundOnTransitionEnd: (event: TransitionEvent) => void = transitionEnd.bind(component);\n\n    componentToTransitionListeners.set(component, [\n      component.transitionEl,\n      boundOnTransitionStart,\n      boundOnTransitionEnd,\n    ]);\n\n    component.transitionEl.addEventListener(\"transitionstart\", boundOnTransitionStart);\n    component.transitionEl.addEventListener(\"transitionend\", boundOnTransitionEnd);\n  }\n}\n/**\n * Helper to tear down transition listeners on disconnectedCallback on OpenCloseComponent components.\n *\n * @param component\n * @deprecated Call `onToggleOpenClose` in `componentWillLoad` and `open` property watchers instead.\n */\nexport function disconnectOpenCloseComponent(component: OpenCloseComponent): void {\n  if (!componentToTransitionListeners.has(component)) {\n    return;\n  }\n  const [transitionEl, start, end] = componentToTransitionListeners.get(component);\n  transitionEl.removeEventListener(\"transitionstart\", start);\n  transitionEl.removeEventListener(\"transitionend\", end);\n\n  componentToTransitionListeners.delete(component);\n}\n"],
  "mappings": ";;;;;AAyEA,SAAS,OAAO,WAA6B;AAC3C,SAAO,YAAY,YAAY,UAAU,SAAS,UAAU;AAC9D;AAEA,SAAS,gBAAgB,WAA+B,wBAAwB,OAAK;AACnF,GAAC,wBAAwB,UAAU,UAAU,cAAc,IAAI,OAAO,SAAS,KAC3E,UAAU,aAAY,IACtB,UAAU,cAAa;AAC3B,GAAC,wBAAwB,UAAU,UAAU,cAAc,IAAI,OAAO,SAAS,KAC3E,UAAU,OAAM,IAChB,UAAU,QAAO;AACvB;SAsBgB,2BAA2B,WAA+B,wBAAwB,OAAK;AACrG,WAAS,MAAA;AACP,QAAI,UAAU,cAAc;AAiC1B,UAAS,UAAT,SAAiB,OAAsB;AACrC,YAAI,MAAM,iBAAiB,UAAU,sBAAsB,MAAM,WAAW,UAAU,cAAc;AAClG,uBAAa,iBAAiB;AAC9B,oBAAU,aAAa,oBAAoB,mBAAmB,OAAO;AACrE,WAAC,wBAAwB,UAAU,UAAU,cAAc,IAAI,OAAO,SAAS,KAC3E,UAAU,aAAY,IACtB,UAAU,cAAa;;SAItB,gBAAT,SAAuB,OAAsB;AAC3C,YAAI,MAAM,iBAAiB,UAAU,sBAAsB,MAAM,WAAW,UAAU,cAAc;AAClG,WAAC,wBAAwB,UAAU,UAAU,cAAc,IAAI,OAAO,SAAS,KAC3E,UAAU,OAAM,IAChB,UAAU,QAAO;AAErB,oBAAU,aAAa,oBAAoB,iBAAiB,aAAa;AACzE,oBAAU,aAAa,oBAAoB,oBAAoB,aAAa;;;AAjDhF,YAAM,EAAE,oBAAoB,cAAc,oBAAoB,SAAQ,IAAK,iBACzE,UAAU,YAAY;AAExB,YAAM,8BAA8B,aAAa,MAAM,GAAG;AAC1D,YAAM,0BAA0B,SAAS,MAAM,GAAG;AAClD,YAAM,0BAA0B,wBAAwB,QAAQ,UAAU,kBAAkB;AAE5F,YAAM,qBACJ,4BAA4B,uBAAuB;;MAGnD,4BAA4B,CAAC;AAE/B,UAAI,uBAAuB,MAAM;AAC/B,wBAAgB,WAAW,qBAAqB;AAChD;;AAGF,YAAM,oBAAoB,WACxB,MAAA;AACE,kBAAU,aAAa,oBAAoB,mBAAmB,OAAO;AACrE,kBAAU,aAAa,oBAAoB,iBAAiB,aAAa;AACzE,kBAAU,aAAa,oBAAoB,oBAAoB,aAAa;AAC5E,wBAAgB,WAAW,qBAAqB;SAElD,WAAW,kBAAkB,IAAI,GAAI;AAGvC,gBAAU,aAAa,iBAAiB,mBAAmB,OAAO;AAClE,gBAAU,aAAa,iBAAiB,iBAAiB,aAAa;AACtE,gBAAU,aAAa,iBAAiB,oBAAoB,aAAa;;GAuB5E;AACH;",
  "names": []
}
