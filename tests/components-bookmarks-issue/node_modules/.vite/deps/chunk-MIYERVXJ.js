import {
  a as a2
} from "./chunk-KHG5GOTV.js";
import {
  j
} from "./chunk-RKVEKQ5O.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import {
  s as s2
} from "./chunk-JGDJR5EV.js";
import {
  u
} from "./chunk-QHK5ZYFW.js";
import {
  s
} from "./chunk-7RBRCL6S.js";

// node_modules/@arcgis/core/views/layers/WMSLayerView.js
var m = (m2) => {
  let n = class extends m2 {
    initialize() {
      this.exportImageParameters = new a2({ layer: this.layer });
    }
    destroy() {
      this.exportImageParameters = u(this.exportImageParameters);
    }
    get exportImageVersion() {
      var _a;
      return (_a = this.exportImageParameters) == null ? void 0 : _a.commitProperty("version"), this.commitProperty("timeExtent"), (this._get("exportImageVersion") || 0) + 1;
    }
    async fetchPopupFeaturesAtLocation(e2, t) {
      const { layer: s3 } = this;
      if (!e2)
        throw new s("wmslayerview:fetchPopupFeatures", "Nothing to fetch without area", { layer: s3 });
      const { popupEnabled: a3 } = s3;
      if (!a3)
        throw new s("wmslayerview:fetchPopupFeatures", "popupEnabled should be true", { popupEnabled: a3 });
      const p = this.createFetchPopupFeaturesQuery(e2);
      if (!p)
        return [];
      const { extent: i, width: m3, height: n2, x: c, y: u2 } = p;
      if (!(i && m3 && n2))
        throw new s("wmslayerview:fetchPopupFeatures", "WMSLayer does not support fetching features.", { extent: i, width: m3, height: n2 });
      const h = await s3.fetchFeatureInfo(i, m3, n2, c, u2);
      return s2(t), h;
    }
  };
  return e([y()], n.prototype, "exportImageParameters", void 0), e([y({ readOnly: true })], n.prototype, "exportImageVersion", null), e([y()], n.prototype, "layer", void 0), e([y(j)], n.prototype, "timeExtent", void 0), n = e([a("esri.views.layers.WMSLayerView")], n), n;
};

export {
  m
};
//# sourceMappingURL=chunk-MIYERVXJ.js.map
