import {
  a as a2,
  o
} from "./chunk-WRDY34WB.js";
import "./chunk-6K5SKR4X.js";
import "./chunk-6BCJJDKK.js";
import {
  t
} from "./chunk-UANQJYHL.js";
import "./chunk-DNFHDQRJ.js";
import {
  j,
  y as y2
} from "./chunk-TO6UIATU.js";
import "./chunk-IB7OUIEK.js";
import "./chunk-WCBCYPOZ.js";
import "./chunk-3FTSPLRV.js";
import "./chunk-OMRW2J7M.js";
import "./chunk-UXQH3C5A.js";
import "./chunk-K3DEHPDR.js";
import "./chunk-I6RS7YIS.js";
import {
  i,
  n,
  r
} from "./chunk-A2COVLMU.js";
import "./chunk-JBU54P54.js";
import "./chunk-3AIILHI5.js";
import {
  x
} from "./chunk-SA77Z3WI.js";
import "./chunk-BKOYOJBG.js";
import "./chunk-VS6AHHIY.js";
import "./chunk-XMYPMIYH.js";
import "./chunk-FQLGRQKL.js";
import "./chunk-RW5QMWE6.js";
import "./chunk-LGMX4E7L.js";
import "./chunk-W5ALAOW2.js";
import "./chunk-FHDHOWK5.js";
import "./chunk-B35SNV2V.js";
import "./chunk-Z2F5OKVA.js";
import "./chunk-UQA6M3KF.js";
import "./chunk-ZLQTPFTL.js";
import "./chunk-KNMQQRV7.js";
import "./chunk-N5GQOIDP.js";
import "./chunk-NFB6O77E.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-ERD6I7QP.js";
import "./chunk-Z3NX5DTX.js";
import "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-6AQIVLDN.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-QLL2YG25.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  P,
  d,
  v
} from "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  h,
  s
} from "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/views/interactive/snapping/featureSources/FeatureCollectionSnappingSource.js
var S2 = class extends S {
  get availability() {
    return 1;
  }
  get updating() {
    return this.layerSource.updating;
  }
  get _snappingElevationAligner() {
    const { view: e2 } = this, { layer: t2 } = this.layerSource, i2 = null != e2 && "3d" === e2.type;
    if (!i2 || "subtype-group" === t2.type)
      return i();
    const o2 = async (i3, o3) => (await h(e2.whenLayerView(t2), o3)).elevationAlignPointsInFeatures(i3, o3);
    return i(i2, { elevationInfo: t2.elevationInfo, alignPointsInFeatures: o2 });
  }
  get _snappingElevationFilter() {
    const { view: e2 } = this, t2 = null != e2 && "3d" === e2.type && "subtype-group" !== this.layerSource.layer.type;
    return r(t2);
  }
  get _symbologySnappingFetcher() {
    const { view: e2 } = this, { layer: t2 } = this.layerSource;
    return null != e2 && "3d" === e2.type && "subtype-group" !== t2.type ? n(this._symbologySnappingSupported, async (i2, n2) => {
      const r2 = await e2.whenLayerView(t2);
      return s(n2), r2.queryForSymbologySnapping({ candidates: i2, spatialReference: e2.spatialReference }, n2);
    }) : n();
  }
  get _symbologySnappingSupported() {
    return null != this._layerView3D && this._layerView3D.symbologySnappingSupported;
  }
  initialize() {
    const { view: e2 } = this, { layer: t2 } = this.layerSource;
    null != e2 && "3d" === e2.type && "subtype-group" !== t2.type && (e2.whenLayerView(t2).then((e3) => this._layerView3D = e3), this.addHandles([e2.elevationProvider.on("elevation-change", ({ context: e3 }) => {
      const { elevationInfo: i2 } = t2;
      x(e3, i2) && this._snappingElevationAligner.notifyElevationSourceChange();
    }), d(() => t2.elevationInfo, () => this._snappingElevationAligner.notifyElevationSourceChange(), P), d(() => {
      var _a;
      return null != this._layerView3D ? (_a = this._layerView3D.processor) == null ? void 0 : _a.renderer : null;
    }, () => this._symbologySnappingFetcher.notifySymbologyChange(), P), v(() => {
      var _a;
      return (_a = this._layerView3D) == null ? void 0 : _a.layer;
    }, ["edits", "apply-edits", "graphic-update"], () => this._symbologySnappingFetcher.notifySymbologyChange())]));
  }
  constructor(e2) {
    super(e2), this.view = null, this._layerView3D = null, this._memoizedMakeGetGroundElevation = t(o);
  }
  refresh() {
  }
  async fetchCandidates(e2, t2) {
    var _a;
    const { layer: i2 } = this.layerSource, n2 = i2.source;
    if (!(n2 == null ? void 0 : n2.querySnapping))
      return [];
    const r2 = j(i2), a3 = y2(e2, ((_a = this.view) == null ? void 0 : _a.type) ?? "2d", r2), s2 = await n2.querySnapping(a3, { signal: t2 });
    s(t2);
    const p = e2.coordinateHelper.spatialReference, l = await this._snappingElevationAligner.alignCandidates(s2.candidates, p, t2);
    s(t2);
    const y3 = await this._symbologySnappingFetcher.fetch(l, t2);
    s(t2);
    const h2 = 0 === y3.length ? l : [...l, ...y3], m = this._snappingElevationFilter.filter(a3, h2), d2 = this._memoizedMakeGetGroundElevation(this.view, p);
    return m.map((e3) => a2(e3, d2));
  }
};
e([y({ constructOnly: true })], S2.prototype, "layerSource", void 0), e([y({ constructOnly: true })], S2.prototype, "view", void 0), e([y()], S2.prototype, "_snappingElevationAligner", null), e([y()], S2.prototype, "_snappingElevationFilter", null), e([y()], S2.prototype, "_symbologySnappingFetcher", null), e([y()], S2.prototype, "_layerView3D", void 0), e([y()], S2.prototype, "_symbologySnappingSupported", null), S2 = e([a("esri.views.interactive.snapping.featureSources.FeatureCollectionSnappingSource")], S2);
export {
  S2 as FeatureCollectionSnappingSource
};
//# sourceMappingURL=FeatureCollectionSnappingSource-OOJSMFS5.js.map
