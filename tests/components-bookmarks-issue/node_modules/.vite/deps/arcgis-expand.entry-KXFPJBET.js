import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  importCoreReactiveUtils,
  newWidgetsExpand
} from "./chunk-YXW2SI4L.js";
import {
  addHandles,
  referenceElementHelper
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-expand.entry.js
var expandCss = "arcgis-expand>.esri-expand__content--expanded{background-color:var(--calcite-color-background)}";
var ArcgisExpand = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.arcgisExpandReady = createEvent(this, "arcgisExpandReady", 7);
    this._watchHandles = [];
    this.autoCollapse = false;
    this.closeOnEsc = true;
    this.collapseIcon = void 0;
    this.collapseTooltip = void 0;
    this.expanded = false;
    this.expandIcon = void 0;
    this.expandTooltip = void 0;
    this.group = void 0;
    this.iconNumber = void 0;
    this.mode = "auto";
    this.referenceElement = void 0;
    this.position = "top-right";
    this.view = void 0;
    this.widget = void 0;
  }
  autoCollapseWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.autoCollapse = value;
    }
  }
  closeOnEscWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.closeOnEsc = value;
    }
  }
  collapseIconWatcher(value) {
    if (this.widget) {
      this.widget.collapseIcon = value;
    }
  }
  collapseTooltipWatcher(value) {
    if (this.widget) {
      this.widget.collapseTooltip = value;
    }
  }
  expandedWatcher(value) {
    if (this.widget && this.widget.expanded !== value) {
      this.widget.expanded = value;
    }
  }
  expandIconWatcher(value) {
    if (this.widget) {
      this.widget.expandIcon = value;
    }
  }
  expandTooltipWatcher(value) {
    if (this.widget) {
      this.widget.expandTooltip = value;
    }
  }
  groupWatcher(value) {
    if (this.widget) {
      this.widget.group = value;
    }
  }
  iconNumberWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.iconNumber = value;
    }
  }
  modeWatcher(value) {
    if (this.widget) {
      this.widget.mode = value;
    }
  }
  referenceElementWatcher(value) {
    void referenceElementHelper(this, value);
  }
  positionWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.view.ui.move(this.childElem, value);
    }
  }
  viewWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.view = value;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Methods
  //
  //--------------------------------------------------------------------------
  async collapse() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.collapse();
  }
  async expand() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.expand();
  }
  async toggle() {
    if (this.expanded)
      await this.collapse();
    else
      await this.expand();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = this._createParams();
    const widget = await newWidgetsExpand(params);
    this.widget = widget;
    await this._addWatchers();
    this._addContainer();
    this.arcgisExpandReady.emit();
    this._checkForView();
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    return h("div", { ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Internal Methods
  //
  //--------------------------------------------------------------------------
  _addContainer() {
    this.widget.container = this.childElem;
  }
  async _addWatchers() {
    const { watch } = await importCoreReactiveUtils();
    addHandles(this, [
      watch(() => this.widget.expanded, (value) => this.expanded = value)
    ]);
  }
  _createParams() {
    const params = {};
    if (this.autoCollapse !== void 0) {
      params.autoCollapse = this.autoCollapse;
    }
    if (this.closeOnEsc !== void 0) {
      params.closeOnEsc = this.closeOnEsc;
    }
    if (this.collapseIcon) {
      params.collapseIcon = this.collapseIcon;
    }
    if (this.collapseTooltip) {
      params.collapseTooltip = this.collapseTooltip;
    }
    if (this.expanded !== void 0) {
      params.expanded = this.expanded;
    }
    if (this.expandIcon) {
      params.expandIcon = this.expandIcon;
    }
    if (this.expandTooltip) {
      params.expandTooltip = this.expandTooltip;
    }
    if (this.group) {
      params.group = this.group;
    }
    if (this.iconNumber !== void 0) {
      params.iconNumber = this.iconNumber;
    }
    if (this.mode) {
      params.mode = this.mode;
    }
    if (this.view) {
      params.view = this.view;
    }
    return params;
  }
  _checkForView() {
    const viewRef = this.el.closest("arcgis-map") ?? this.el.closest("arcgis-scene");
    if (viewRef == null ? void 0 : viewRef.view) {
      this.view = viewRef.view;
      this.view.ui.add(this.childElem, this.position);
    } else if (viewRef) {
      const handler = () => {
        viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
        this.view = viewRef.view;
        this.view.ui.add(this.childElem, this.position);
      };
      viewRef.addEventListener("arcgisViewReadyChange", handler, false);
    }
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "autoCollapse": ["autoCollapseWatcher"],
      "closeOnEsc": ["closeOnEscWatcher"],
      "collapseIcon": ["collapseIconWatcher"],
      "collapseTooltip": ["collapseTooltipWatcher"],
      "expanded": ["expandedWatcher"],
      "expandIcon": ["expandIconWatcher"],
      "expandTooltip": ["expandTooltipWatcher"],
      "group": ["groupWatcher"],
      "iconNumber": ["iconNumberWatcher"],
      "mode": ["modeWatcher"],
      "referenceElement": ["referenceElementWatcher"],
      "position": ["positionWatcher"],
      "view": ["viewWatcher"]
    };
  }
};
ArcgisExpand.style = expandCss;
export {
  ArcgisExpand as arcgis_expand
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-expand.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-expand.entry-KXFPJBET.js.map
