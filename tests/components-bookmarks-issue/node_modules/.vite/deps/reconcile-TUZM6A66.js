import {
  r
} from "./chunk-7ZU7J3HL.js";
import {
  f as f2,
  i,
  s as s2
} from "./chunk-I2X6UR6L.js";
import {
  U
} from "./chunk-SAYWXQVM.js";
import {
  f
} from "./chunk-SBL4URUW.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  s
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/rest/versionManagement/gdbVersion/support/ReconcileResult.js
var r2 = class extends f {
  constructor(o) {
    super(o), this.hasConflicts = false, this.moment = null, this.didPost = false, this.success = false;
  }
};
e([y({ type: Boolean, json: { write: true } })], r2.prototype, "hasConflicts", void 0), e([y({ type: Date, json: { type: Number, write: { writer: (o, t) => {
  t.moment = o ? o.getTime() : null;
} } } })], r2.prototype, "moment", void 0), e([y({ type: Boolean, json: { write: true } })], r2.prototype, "didPost", void 0), e([y({ type: Boolean, json: { write: true } })], r2.prototype, "success", void 0), r2 = e([a("esri.rest.versionManagement.gdbVersion.support.ReconcileResult")], r2);
var p = r2;

// node_modules/@arcgis/core/rest/versionManagement/gdbVersion/reconcile.js
var c = /* @__PURE__ */ new Map();
async function m(m2, p2, a2, f3) {
  c.has(m2) || await r(c, m2);
  const u = c.get(m2);
  if (((u == null ? void 0 : u.serverVersion) ?? 0) <= 11.1)
    throw new s("reconcile:enterprise-version", "versioning API requires ArcGIS Enterprise version 11.2 or higher");
  if (!p2)
    throw new s("reconcile:missing-guid", "guid for version is missing");
  const h = f2(m2), l = a2.toJSON(), g = i(h.query, { query: s2({ ...l, f: "json" }), ...f3, method: "post" });
  p2.startsWith("{") && (p2 = p2.slice(1, -1));
  const v = `${h.path}/versions/${p2}/reconcile`, { data: w } = await U(v, g);
  return p.fromJSON(w);
}
export {
  m as reconcile,
  c as serverVersionCacheMap
};
//# sourceMappingURL=reconcile-TUZM6A66.js.map
