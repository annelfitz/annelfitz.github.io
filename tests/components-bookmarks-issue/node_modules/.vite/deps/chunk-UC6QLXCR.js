import {
  s as s4,
  t as t6
} from "./chunk-PLT24NZO.js";
import {
  A as A3,
  G as G2,
  L as L3,
  N as N2,
  d as d4,
  e as e8,
  e2 as e9,
  e3 as e10,
  i3 as i7,
  l as l4,
  l2 as l5,
  m as m4,
  m2 as m5,
  r as r4
} from "./chunk-WS5XOTML.js";
import {
  u as u6
} from "./chunk-YWPIIZFL.js";
import {
  e as e11
} from "./chunk-LARO5FBS.js";
import {
  i as i6
} from "./chunk-QFYJUFUK.js";
import {
  _ as _2
} from "./chunk-RQW2N53A.js";
import {
  a as a2,
  d2 as d3
} from "./chunk-4VVENLLF.js";
import {
  b as b6
} from "./chunk-VUHMQQ6M.js";
import {
  c as c3
} from "./chunk-6GQQIJM7.js";
import {
  a as a3
} from "./chunk-WCBHO6BH.js";
import {
  T,
  e as e7
} from "./chunk-46T3D2EU.js";
import {
  C as C3
} from "./chunk-PMFQ2A2V.js";
import {
  t as t5
} from "./chunk-BEXFYHUM.js";
import {
  o as o5
} from "./chunk-I6RS7YIS.js";
import {
  h as h6
} from "./chunk-I4SHZ6P5.js";
import {
  o as o3
} from "./chunk-BECEVYQR.js";
import {
  C as C2,
  F as F2,
  I,
  i as i4,
  o as o4
} from "./chunk-QYDOVVH7.js";
import {
  h as h5
} from "./chunk-UQEUYEWU.js";
import {
  I as I2,
  N,
  y as y2
} from "./chunk-IWZSAF74.js";
import {
  t as t2
} from "./chunk-2C26DRKK.js";
import {
  e as e4
} from "./chunk-M4RFJU4F.js";
import {
  S as S5
} from "./chunk-YPY24RRU.js";
import {
  t as t4
} from "./chunk-TXLJQAAN.js";
import {
  u as u4
} from "./chunk-J6T3FJLS.js";
import {
  n as n5
} from "./chunk-D56W4LPT.js";
import {
  S as S4,
  c as c2,
  u as u5
} from "./chunk-RO3CTAP7.js";
import {
  e as e5
} from "./chunk-LGMX4E7L.js";
import {
  A as A2
} from "./chunk-Q6RZBEZ6.js";
import {
  d as d2,
  m as m3
} from "./chunk-VEYMN5N3.js";
import {
  e as e6,
  i as i3
} from "./chunk-Y546C2O5.js";
import {
  E as E2
} from "./chunk-GLF3KRAL.js";
import {
  b as b3
} from "./chunk-G7FOE26O.js";
import {
  r as r3
} from "./chunk-S5I4QKJD.js";
import {
  S as S3
} from "./chunk-GLLRUDMY.js";
import {
  b as b4,
  b2 as b5,
  c2 as c,
  h as h2,
  h2 as h3,
  h3 as h4,
  i as i2,
  w2 as w3
} from "./chunk-ZIJHDTB7.js";
import {
  m3 as m2
} from "./chunk-A5Q7MMP6.js";
import {
  B,
  E,
  P as P2,
  S as S2,
  Z,
  h,
  i
} from "./chunk-326OSIM5.js";
import {
  i as i5
} from "./chunk-AG6JXA4M.js";
import {
  F,
  J,
  t as t3
} from "./chunk-2ICUS4HL.js";
import {
  n as n4
} from "./chunk-GBF2OQAY.js";
import {
  R,
  b as b2,
  e as e3,
  l as l3,
  m,
  u as u3
} from "./chunk-C7NPPGFR.js";
import {
  g,
  o as o2,
  r as r2,
  u as u2
} from "./chunk-JZBR4X6W.js";
import {
  n as n3
} from "./chunk-OIJCMME5.js";
import {
  w as w2
} from "./chunk-IZKCZQUY.js";
import {
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import {
  G,
  L as L2,
  s3
} from "./chunk-UWQ3OYA5.js";
import {
  A,
  C,
  P,
  d,
  p,
  v as v2,
  w
} from "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import {
  o
} from "./chunk-TXBMNSNF.js";
import {
  _
} from "./chunk-BVQWKK2V.js";
import {
  S,
  v,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a,
  n as n2,
  t2 as t
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import {
  l as l2
} from "./chunk-C26KUZ46.js";
import {
  L,
  b,
  e as e2,
  s as s2
} from "./chunk-JGDJR5EV.js";
import {
  l,
  r,
  u
} from "./chunk-QHK5ZYFW.js";
import {
  n2 as n,
  s
} from "./chunk-7RBRCL6S.js";
import {
  O,
  has,
  k
} from "./chunk-J2EGIWT6.js";

// node_modules/@arcgis/core/views/3d/layers/graphics/DisplayFeatureLimit.js
var e12 = class {
  constructor(e16, m6, t9) {
    this.maximumTotalNumberOfVertices = e16, this.maximumNumberOfFeatures = m6, this.averageSymbolComplexity = t9;
  }
};

// node_modules/@arcgis/core/symbols/support/defaults3D.js
var a4 = w3.fromSimpleMarkerSymbol(S4);
var c4 = b5.fromSimpleLineSymbol(u5);
var u7 = h3.fromSimpleFillSymbol(c2);
var S6 = new c({ symbolLayers: new V([new h2({ material: { color: e6 }, edges: new i2({ size: "1px", color: i3 }) })]) });
function j(o8) {
  if (null == o8)
    return null;
  switch (o8.type) {
    case "mesh":
      return S6;
    case "point":
    case "multipoint":
      return a4;
    case "polyline":
      return c4;
    case "polygon":
    case "extent":
      return u7;
  }
  return null;
}

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DFeatureStore.js
var d5 = i();
var l6 = class extends S {
  constructor(t9) {
    super(t9), this.events = new o(), this.hasZ = null, this.hasM = null, this.objectIdField = null, this.featureAdapter = { getAttribute: (t10, e16) => "graphic" in t10 ? t10.graphic.attributes[e16] : o3.getAttribute(t10, e16), getAttributes: (t10) => "graphic" in t10 ? t10.graphic.attributes : o3.getAttributes(t10), getObjectId: (t10) => "graphic" in t10 ? I2(t10.graphic, this.objectIdField) ?? void 0 : o3.getObjectId(t10), getGeometry: (t10) => "graphic" in t10 ? t10.getAsOptimizedGeometry(this.hasZ, this.hasM) : o3.getGeometry(t10), getCentroid: (t10, e16) => {
      if ("graphic" in t10) {
        let r7 = null;
        null != t10.centroid ? r7 = t10.centroid : "point" === t10.graphic.geometry.type && J(t10.graphic.geometry, u8, this.viewSpatialReference) && (r7 = u8);
        const o8 = new Array(2 + (e16.hasZ ? 1 : 0) + (e16.hasM ? 1 : 0));
        return null == r7 ? (o8[0] = 0, o8[1] = 0, o8[2] = 0, o8[3] = 0) : (o8[0] = r7.x, o8[1] = r7.y, e16.hasZ && (o8[2] = r7.hasZ ? r7.z : 0), e16.hasM && (o8[e16.hasZ ? 3 : 2] = r7.hasM ? r7.m : 0)), new e4([], o8);
      }
      return o3.getCentroid(t10, e16);
    }, cloneWithGeometry: (t10, e16) => "graphic" in t10 ? new t2(e16, this.featureAdapter.getAttributes(t10), null, this.featureAdapter.getObjectId(t10)) : o3.cloneWithGeometry(t10, e16) };
  }
  forEachInBounds(t9, e16) {
    this.getSpatialIndex().forEachInBounds(t9, e16);
  }
  forEachBounds(t9, e16) {
    const r7 = this.getSpatialIndex();
    for (const o8 of t9) {
      const t10 = this.featureAdapter.getObjectId(o8);
      null != r7.getBounds(t10, d5) && e16(d5);
    }
  }
};
e([y({ constructOnly: true })], l6.prototype, "getSpatialIndex", void 0), e([y({ constructOnly: true })], l6.prototype, "forEach", void 0), e([y({ constructOnly: true })], l6.prototype, "hasZ", void 0), e([y({ constructOnly: true })], l6.prototype, "hasM", void 0), e([y({ constructOnly: true })], l6.prototype, "objectIdField", void 0), e([y({ constructOnly: true })], l6.prototype, "viewSpatialReference", void 0), e([y({ constructOnly: true })], l6.prototype, "featureSpatialReference", void 0), l6 = e([a("esri.views.3d.layers.graphics.Graphics3DFeatureStore")], l6);
var u8 = { type: "point", x: 0, y: 0, hasZ: false, hasM: false, spatialReference: null };

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DPointSymbol.js
var s5 = class extends m5 {
  constructor(r7, o8, t9) {
    super(r7, o8, t9), this._calloutSymbolLayer = null, this.symbol.hasVisibleCallout() && (this._calloutSymbolLayer = e10(this.symbol, o8));
  }
  async doLoad(o8) {
    var _a;
    const a7 = this._calloutSymbolLayer ? _(this._calloutSymbolLayer.load()) : null;
    try {
      await super.doLoad(o8), s2(o8);
    } catch (l8) {
      throw (_a = this._calloutSymbolLayer) == null ? void 0 : _a.abortLoad(), l8;
    }
    a7 && await a7;
  }
  destroy() {
    super.destroy(), this._calloutSymbolLayer = u(this._calloutSymbolLayer);
  }
  createGraphics3DGraphic(r7, o8) {
    const t9 = super.createGraphics3DGraphic(r7, o8);
    if (null != this._calloutSymbolLayer && null != t9) {
      const o9 = this._createCalloutGraphic(r7);
      o9 && t9.setCalloutGraphic(o9);
    }
    return t9;
  }
  globalPropertyChanged(r7, o8) {
    return !!super.globalPropertyChanged(r7, o8) && (!this._calloutSymbolLayer || this._calloutSymbolLayer.globalPropertyChanged(r7, o8, (r8) => r8.calloutLayer));
  }
  updateGeometry(r7, o8) {
    const t9 = super.updateGeometry(r7, o8);
    if (t9 && this._calloutSymbolLayer) {
      const t10 = r7.calloutLayer;
      if (t10)
        return this._calloutSymbolLayer.updateGeometry(t10, o8);
    }
    return t9;
  }
  _createCalloutGraphic(r7) {
    const o8 = r7.renderingInfo;
    return r7.renderingInfo = new G2(o8.renderer, o8.symbol), this._calloutSymbolLayer.createGraphics3DGraphic(r7);
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DSymbolFactory.js
function t7(t9, i9, n6) {
  return "point-3d" === t9.type ? new s5(t9, i9, n6) : new m5(t9, i9, n6);
}

// node_modules/@arcgis/core/views/3d/layers/graphics/GraphicsCorePerformanceInfo.js
var s6 = class {
  constructor(s8, i9, t9) {
    this.visible = s8, this.missing = i9, this.pending = t9;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/GraphicStateTracking.js
var e13 = class {
  constructor(t9) {
    var _a;
    this._graphicsCore = t9, this._idToState = /* @__PURE__ */ new Map(), this._states = /* @__PURE__ */ new Set();
    const i9 = (_a = t9.owner.layer) == null ? void 0 : _a.objectIdField;
    i9 ? (this._getGraphicId = (t10) => I2(t10, i9), this._getGraphics3DGraphicById = (t10) => this._graphicsCore.getGraphics3DGraphicByObjectId(t10)) : (this._getGraphicId = (t10) => t10.uid, this._getGraphics3DGraphicById = (t10) => this._graphicsCore.getGraphics3DGraphicById(t10));
  }
  destroy() {
    this._idToState.clear(), this._states.forEach((t9, i9) => this.remove(i9));
  }
  add(t9) {
    const s8 = e2(() => this.remove(t9));
    if (this._states.has(t9))
      return s8;
    const e16 = this._getGraphicId(t9.graphic), a7 = this._getGraphics3DGraphicById(e16);
    this._states.has(t9) || this._states.add(t9);
    return this._ensureStateList(e16).push(t9), t9.displaying = null != a7 && a7.isVisible(), t9.isDraped = null != a7 && a7.isDraped, t9.tracking = true, null != a7 && t9.emit("changed"), s8;
  }
  remove(i9) {
    if (this._states.has(i9)) {
      if (this._idToState.size) {
        const s8 = this._getGraphicId(i9.graphic), e16 = this._idToState.get(s8);
        e16 && (O(e16, i9), 0 === e16.length && this._idToState.delete(s8));
      }
      this._states.delete(i9), i9.tracking = false, i9.displaying = false;
    }
  }
  addGraphic(t9) {
    this._forEachState(t9, (i9) => {
      i9.displaying = t9.isVisible(), i9.isDraped = t9.isDraped, i9.emit("changed");
    });
  }
  removeGraphic(t9) {
    this._forEachState(t9, (t10) => {
      t10.displaying = false, t10.isDraped = false;
    });
  }
  updateGraphicGeometry(t9) {
    this._forEachState(t9, (t10) => t10.emit("changed"));
  }
  updateGraphicVisibility(t9) {
    this._forEachState(t9, (i9) => i9.displaying = t9.isVisible());
  }
  allGraphicsDeleted() {
    this._states.forEach((t9) => t9.displaying = false);
  }
  _ensureStateList(t9) {
    const i9 = this._idToState.get(t9);
    if (i9)
      return i9;
    const s8 = new Array();
    return this._idToState.set(t9, s8), s8;
  }
  _forEachState(t9, i9) {
    if (0 === this._states.size || 0 === this._idToState.size)
      return;
    const s8 = this._getGraphicId(t9.graphic), e16 = this._idToState.get(s8);
    null != e16 && e16.forEach(i9);
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/SpatialIndex2D.js
var d6 = class extends S {
  constructor(t9) {
    super(t9), this._index = new h5(9, has("esri-csp-restrictions") ? (t10) => ({ minX: t10.extent[0], minY: t10.extent[1], maxX: t10.extent[2], maxY: t10.extent[3] }) : [".extent[0]", ".extent[1]", ".extent[2]", ".extent[3]"]), this._missing = /* @__PURE__ */ new Set(), this._boundsByFeature = /* @__PURE__ */ new Map(), this.spatialReference = null, this.hasZ = null, this.hasM = null, this.objectIdField = null, this.updating = false;
  }
  setup(t9) {
    this._addMany(t9);
  }
  destroy() {
    this._missing.clear(), this._index = u(this._index), this._boundsByFeature.clear(), this._boundsByFeature = null;
  }
  update() {
    this._missing.size > 0 && (this._addMany(Array.from(this._missing.values())), this.updating = false, this._missing.clear());
  }
  get updatingRemaining() {
    return this._missing.size;
  }
  queryGraphicUIDsInExtent(t9, e16, s8) {
    null != e16 && e16.equals(this.spatialReference) && (u9.minX = t9[0], u9.minY = t9[1], u9.maxX = t9[2], u9.maxY = t9[3], this.update(), this._index.search(u9, (t10) => s8(t10.graphic.uid)));
  }
  add(t9) {
    this._missing.add(t9), this.updating = true;
  }
  remove(t9) {
    if (this._missing.delete(t9))
      return void (this.updating = this._missing.size > 0);
    this._index.remove(t9);
    const e16 = I2(t9.graphic, this._get("objectIdField"));
    null != e16 && this._boundsByFeature.delete(e16);
  }
  _addMany(t9) {
    if (0 === t9.length)
      return;
    const e16 = this._get("objectIdField");
    for (const s8 of t9) {
      s8.computeExtent(this.spatialReference);
      const t10 = I2(s8.graphic, e16);
      null != t10 && this._boundsByFeature.set(t10, s8.extent);
    }
    this._index.load(t9);
  }
  clear() {
    this._index.clear(), this._missing.clear(), this._boundsByFeature.clear(), this.updating = false;
  }
  forEachInBounds(t9, e16) {
    u9.minX = t9[0], u9.minY = t9[1], u9.maxX = t9[2], u9.maxY = t9[3], this.update(), this._index.search(u9, (t10) => {
      e16(t10);
    });
  }
  getBounds(t9, e16) {
    this.update();
    const s8 = this._boundsByFeature.get(t9);
    return s8 ? Z(e16, s8) : null;
  }
};
e([y({ constructOnly: true })], d6.prototype, "spatialReference", void 0), e([y({ constructOnly: true })], d6.prototype, "hasZ", void 0), e([y({ constructOnly: true })], d6.prototype, "hasM", void 0), e([y({ constructOnly: true })], d6.prototype, "objectIdField", void 0), e([y()], d6.prototype, "updating", void 0), e([y({ readOnly: true })], d6.prototype, "updatingRemaining", null), d6 = e([a("esri.views.3d.layers.graphics.SpatialIndex2D")], d6);
var u9 = { minX: 0, minY: 0, maxX: 0, maxY: 0 };

// node_modules/@arcgis/core/views/3d/layers/graphics/symbolMemory.js
var e14 = 2216;
var o6 = 4096;
function r5(r7) {
  return e14 + o6 * r7.symbolLayers.length + r7.complexity.memory.resourceBytes;
}

// node_modules/@arcgis/core/views/3d/layers/support/StageLayerElevationProvider.js
var _3 = 1;
var v3 = Symbol("layerHandles");
var y3 = class extends o.EventedMixin(S) {
  get spatialReference() {
    var _a;
    return (_a = this.view) == null ? void 0 : _a.spatialReference;
  }
  constructor(e16) {
    super(e16), this._elevationOffset = 0;
  }
  initialize() {
    this._renderCoordsHelper = this.view.renderCoordsHelper, this._intersectLayers = [this.stageLayer], this._intersector = T(this.view.state.viewingMode), this._intersector.options.store = e7.MIN;
    const e16 = this._computeLayerExtent(this.spatialReference, this.stageLayer);
    this._zmin = e16[2], this._zmax = e16[5];
    const t9 = this.stageLayer.events;
    this.addHandles([t9.on(["layerObjectAdded", "layerObjectRemoved", "geometryAdded", "geometryRemoved"], ({ object: e17 }) => this._objectChanged(e17)), t9.on("attributesChanged", ({ attribute: e17, object: t10 }) => E2(e17) && this._objectChanged(t10)), t9.on(["transformationChanged", "shaderTransformationChanged"], (e17) => this._objectChanged(e17))], v3);
  }
  dispose() {
    this.removeHandles(v3);
  }
  elevationInfoChanged() {
    const e16 = null != this.layer ? this.layer.elevationInfo : null;
    if (null != e16 && "on-the-ground" !== e16.mode) {
      const t9 = L2(this.layer.spatialReference), r7 = r3(e16.unit ?? "meters");
      this._elevationOffset = (e16.offset ?? 0) * r7 / t9;
    } else
      this._elevationOffset = 0;
  }
  getElevation(e16, t9, r7, s8) {
    if (x2[0] = e16, x2[1] = t9, x2[2] = r7, !this._renderCoordsHelper.toRenderCoords(x2, s8, x2))
      return n.getLogger(this).error("could not project point for elevation alignment"), null;
    const i9 = this._elevationOffset, n6 = this._zmin + i9, a7 = this._zmax + i9;
    this._renderCoordsHelper.setAltitude(C4, a7, x2), this._renderCoordsHelper.setAltitude(E3, n6, x2);
    const l8 = (e17) => !!e17.lastValidElevationBB;
    return this._intersector.reset(C4, E3, null), this._intersector.intersect(this._intersectLayers, null, _3, null, l8), this._intersector.results.min.getIntersectionPoint(x2) ? this._renderCoordsHelper.getAltitude(x2) : null;
  }
  _objectChanged(e16) {
    const t9 = this.spatialReference;
    if (!e16.lastValidElevationBB || !t9)
      return;
    P2(j2);
    const r7 = e16.lastValidElevationBB;
    r7.isEmpty() || this._expandExtent(t9, r7.min, r7.max, j2);
    const { min: o8, max: s8 } = e16.boundingVolumeWorldSpace;
    this._expandExtent(t9, o8, s8, j2), S2(j2, b7.extent), this._zmin = Math.min(this._zmin, j2[2]), this._zmax = Math.max(this._zmax, j2[5]), b7.spatialReference = t9, this.emit("elevation-change", b7), r2(r7.min, o8), r2(r7.max, s8);
  }
  _computeLayerExtent(e16, t9) {
    return P2(j2), null != e16 && t9.objects.forAll((t10) => this._expandExtent(e16, t10.boundingVolumeWorldSpace.min, t10.boundingVolumeWorldSpace.max, j2)), j2;
  }
  _expandExtent(e16, t9, r7, o8) {
    for (let s8 = 0; s8 < 8; ++s8)
      x2[0] = 1 & s8 ? t9[0] : r7[0], x2[1] = 2 & s8 ? t9[1] : r7[1], x2[2] = 4 & s8 ? t9[2] : r7[2], this._renderCoordsHelper.fromRenderCoords(x2, x2, e16), h(o8, x2);
    return o8;
  }
};
e([y({ constructOnly: true })], y3.prototype, "layer", void 0), e([y({ constructOnly: true })], y3.prototype, "stageLayer", void 0), e([y({ constructOnly: true })], y3.prototype, "view", void 0), e([y()], y3.prototype, "spatialReference", null), y3 = e([a("esri.views.3d.layers.support.StageLayerElevationProvider")], y3);
var j2 = P2();
var b7 = new e11();
var x2 = n3();
var C4 = n3();
var E3 = n3();

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DCore.js
var Ve;
var Fe = n3();
var Te = i();
var ke = Ve = class extends S {
  get _viewSpatialReference() {
    return this.owner.view.spatialReference;
  }
  get spatialIndex() {
    var _a;
    return this._spatialIndex || (this._spatialIndex = new d6({ objectIdField: (_a = this.owner.layer) == null ? void 0 : _a.objectIdField, spatialReference: this._viewSpatialReference, hasZ: !!this.hasZ, hasM: !!this.hasM }), this._spatialIndex.setup(Array.from(this.graphics3DGraphics.values()))), this._spatialIndex.update(), this._spatialIndex;
  }
  get deconflictor() {
    return this._deconflictor;
  }
  get labeler() {
    return this._labeler;
  }
  get numberOfGraphics() {
    return this._numberOfGraphics;
  }
  get effectiveUpdatePolicy() {
    return null != this.currentRenderer && "dictionary" === this.currentRenderer.type ? C3.ASYNC : this._forcedUpdatePolicy ?? this.preferredUpdatePolicy;
  }
  get featureStore() {
    return this._featureStore;
  }
  get initializePromise() {
    return this._initializePromise;
  }
  get scaleVisibility() {
    return this._scaleVisibility;
  }
  get elevationAlignment() {
    return this._elevationAlignment;
  }
  get objectStates() {
    return this._objectStates;
  }
  get filterVisibility() {
    return this._filterVisibility;
  }
  get updating() {
    var _a, _b, _c;
    return !!(this.dataUpdating || ((_a = this._elevationAlignment) == null ? void 0 : _a.updating) || ((_b = this._scaleVisibility) == null ? void 0 : _b.updating) || ((_c = this._filterVisibility) == null ? void 0 : _c.updating) || this._rendererChangeAbortController || this._elevationInfoChangeAbortController || this._frameTaskHandle.updating || this.running);
  }
  get dataUpdating() {
    var _a;
    return !!(this._graphicsWaitingForSymbol.size > 0 || this._pendingUpdates.size > 0 || ((_a = this._spatialIndex) == null ? void 0 : _a.updating) || this._updatingPendingLoadedGraphicsChange || this._dataUpdateQueue.running || this._loadingSymbols > 0);
  }
  get running() {
    var _a;
    return this._pendingUpdates.size > 0 || !!((_a = this._spatialIndex) == null ? void 0 : _a.updating) || this._dataUpdateQueue.running || this._updateQueue.running;
  }
  get suspendedOrOutsideOfView() {
    var _a;
    return this.owner.suspended || !!((_a = this.owner.suspendInfo) == null ? void 0 : _a.outsideOfView);
  }
  get updatingRemaining() {
    var _a, _b;
    return this.updating ? this._pendingUpdates.size + 0.1 * (((_a = this._spatialIndex) == null ? void 0 : _a.updatingRemaining) || 0) + 0.1 * (((_b = this._elevationAlignment) == null ? void 0 : _b.updatingRemaining) || 0) : 0;
  }
  get displayFeatureLimit() {
    const e16 = this.owner && this.owner.view && this.owner.view.qualitySettings, t9 = (e16 == null ? void 0 : e16.graphics3D.minTotalNumberOfFeatures) ?? 0, i9 = (e16 == null ? void 0 : e16.graphics3D.maxTotalNumberOfFeatures) ?? 0, r7 = (e16 == null ? void 0 : e16.graphics3D.maxNumberOfDrawCalls) ?? 0, s8 = (e16 == null ? void 0 : e16.graphics3D.maxTotalNumberOfVertices) ?? 0, a7 = this.averageSymbolComplexity, n6 = Math.max(1, (a7 == null ? void 0 : a7.verticesPerFeature) ?? 1), o8 = a7 && a7.drawCallsPerFeature > 0 && r7 > 0 ? r7 / a7.drawCallsPerFeature : i9, l8 = Math.ceil(s8 / n6), h8 = Math.max(t9, Math.min(i9, l8, o8)), d8 = this._get("displayFeatureLimit");
    return d8 && d8.maximumTotalNumberOfVertices === s8 && d8.averageSymbolComplexity === a7 && d8.maximumNumberOfFeatures === h8 ? d8 : new e12(s8, h8, a7);
  }
  get averageSymbolComplexity() {
    const e16 = d4(this._symbolComplexities), t9 = this._get("averageSymbolComplexity");
    return 0 === e16.numComplexities || null != t9 && (e16.estimated && (t9.verticesPerFeature >= e16.verticesPerFeature || t9.verticesPerCoordinate >= e16.verticesPerCoordinate || t9.drawCallsPerFeature >= e16.drawCallsPerFeature) || t9.verticesPerFeature === e16.verticesPerFeature && t9.verticesPerCoordinate === e16.verticesPerCoordinate && t9.drawCallsPerFeature === e16.drawCallsPerFeature) ? t9 : e16;
  }
  get usedMemory() {
    const e16 = null != this.averageSymbolComplexity && this.labelsEnabled ? this.averageSymbolComplexity.memory.bytesPerFeatureLabel * this._numberOfGraphics : 0, t9 = this._getSymbolComplexitiesUsed().reduce((e17, t10) => e17 + t10.memory.resourceBytes, 0), i9 = this.owner.view._stage.renderer, r7 = this.owner.view.basemapTerrain.overlayManager.renderer, s8 = Array.from(this._symbols.values()).reduce((e17, t10) => e17 + ((t10 == null ? void 0 : t10.symbolLayers.reduce((e18, t11) => e18 + ((t11 == null ? void 0 : t11.materials.reduce((e19, t12) => {
      var _a;
      return t12 ? e19 + (((_a = i9.plugins.getMaterialRenderer(t12)) == null ? void 0 : _a.usedMemory) ?? 0) + r7.getMemoryForMaterial(t12) : e19;
    }, 0)) ?? 0), 0)) ?? 0), 0);
    return this._usedMemory + e16 + t9 + s8;
  }
  get usedMemoryPerGraphic() {
    if (this._usedMemory && this._numberOfGraphics) {
      const e16 = this._numberOfGraphics / (this._numberOfGraphics + Math.max(this._pendingAdds, this._pendingRemoves));
      return this._usedMemory / this._numberOfGraphics * e16;
    }
    if (null != this.averageSymbolComplexity) {
      const e16 = this.labelsEnabled ? this.averageSymbolComplexity.memory.bytesPerFeatureLabel : 0;
      return this.averageSymbolComplexity.memory.bytesPerFeature + e16;
    }
    return 0;
  }
  get unprocessedMemoryEstimate() {
    return (this._pendingAdds - this._pendingRemoves) * this.usedMemoryPerGraphic;
  }
  get _symbolComplexities() {
    return this.currentRenderer ? this._getSymbolComplexitiesUsedOrRenderer(this.currentRenderer) : this._getSymbolComplexitiesUsed();
  }
  get visible() {
    return this._visible;
  }
  _getConvertedSymbol(e16) {
    var _a;
    if ("web-style" === e16.type)
      return e16.clone();
    const t9 = this._symbolConversionCache.get(e16.id);
    if (null != t9)
      return t9;
    const r7 = S3(e16, { geometryType: ((_a = this.layer) == null ? void 0 : _a.geometryType) ?? void 0, retainId: true, hasLabelingContext: this._hasLabelingContext(e16) }), s8 = r7.symbol || null;
    return null == s8 && r7.error && n.getLogger(this).error(r7.error.message), this._symbolConversionCache.set(e16.id, s8), s8;
  }
  _getSymbolComplexitiesUsedOrRenderer(e16) {
    if (null == e16)
      return [];
    const t9 = e16.getSymbols(), i9 = "backgroundFillSymbol" in e16 ? e16.backgroundFillSymbol : null;
    if (!i9 && !(t9 == null ? void 0 : t9.length))
      return [];
    const r7 = [], s8 = this._getSymbolComplexityUsedOrRenderer(i9);
    null != s8 && r7.push(s8);
    for (const a7 of t9) {
      const e17 = this._getSymbolComplexityUsedOrRenderer(a7);
      null != e17 && r7.push(e17);
    }
    return r7;
  }
  _getSymbolComplexityUsedOrRenderer(e16) {
    if (null == e16)
      return null;
    const t9 = this._symbols.get(e16.id);
    if (null != t9)
      return t9.complexity;
    const i9 = this._getConvertedSymbol(e16);
    return null != i9 ? m4(i9) : null;
  }
  _getSymbolComplexitiesUsed() {
    const e16 = [];
    return this._symbols.forEach((t9) => {
      null != t9 && e16.push(t9.complexity);
    }), e16;
  }
  get _objectIdField() {
    return this.layer.objectIdField;
  }
  constructor(e16) {
    super(e16), this._propertiesPool = new o5({ computedExtent: w2 }, this), this.computedExtent = null, this.currentRenderer = null, this.rendererHasGeometryOperations = false, this._graphicStateTracking = null, this.graphics3DGraphics = /* @__PURE__ */ new Map(), this.stageLayer = null, this.stage = null, this._graphicsDrapedUids = /* @__PURE__ */ new Set(), this._graphicsBySymbol = /* @__PURE__ */ new Map(), this._symbolConversionCache = /* @__PURE__ */ new Map(), this._symbols = /* @__PURE__ */ new Map(), this._graphicsWithoutSymbol = /* @__PURE__ */ new Map(), this._graphicsWaitingForSymbol = /* @__PURE__ */ new Map(), this._graphicsUpdateId = 0, this._frameTaskHandle = F2, this._dataUpdateQueue = new i4(), this._updateQueue = new i4(), this._suspendSymbolCleanup = false, this._arcadeOnDemand = null, this._rendererChangeAbortController = null, this._elevationInfoChangeAbortController = null, this._initializeAbortController = null, this._elevationAlignment = null, this._scaleVisibility = null, this._filterVisibility = null, this._spatialIndex = null, this.extentPadding = 0, this._updatingPendingLoadedGraphicsChange = null, this._featureStore = null, this._deconflictor = null, this._labeler = null, this._objectStates = null, this._viewElevationProvider = null, this._stageLayerElevationProvider = null, this._sharedSymbolResourcesOwnerHandle = null, this._whenGraphics3DGraphicRequests = {}, this._pendingUpdates = /* @__PURE__ */ new Map(), this._numberOfGraphics = 0, this._numberOfGraphicsProvidingElevation = 0, this._pendingAdds = 0, this._pendingRemoves = 0, this._applyPendingRemovesFirst = false, this._loadingSymbols = 0, this._pendingUpdatesPool = new l2({ allocator: (e17) => e17 || new Me(), deallocator: (e17) => (e17.clear(), e17) }), this._symbolWarningLogged = false, this._geometryWarningLogged = false, this._objectIdInvisibleSet = /* @__PURE__ */ new Set(), this._whenSymbolRemoved = new l2(), this.preferredUpdatePolicy = C3.SYNC, this._forcedUpdatePolicy = null, this.elevationFeatureExpressionEnabled = true, this.owner = null, this.layer = null, this.graphicSymbolSupported = true, this.getRenderingInfoWithoutRenderer = false, this.setUidToIdOnAdd = true, this.hasZ = null, this.hasM = null, this._usedMemory = 0, this._visible = false, this._startCreateGraphics = false, this._unusedSymbolsCache = e16.owner.view.resourceController.memoryController.newCache("graphics-3d-unused-symbols", (e17) => e17.destroy()), this.symbolCreationContext = new e8(e16.owner.view.resourceController.scheduler, (e17, t9) => this._updateQueue.push(e17, t9));
  }
  initialize() {
    var _a, _b, _c, _d, _e, _f, _g;
    this._featureStore = new l6({ objectIdField: (_a = this.owner.layer) == null ? void 0 : _a.objectIdField, hasZ: !!this.hasZ, hasM: !!this.hasM, viewSpatialReference: this._viewSpatialReference, featureSpatialReference: this.owner.featureSpatialReference, getSpatialIndex: () => this.spatialIndex, forEach: (e17) => this.graphics3DGraphics.forEach(e17) });
    const e16 = (e17, t10, i9) => this.spatialIndex.queryGraphicUIDsInExtent(e17, t10, i9), { componentFactories: t9 } = this;
    this._elevationAlignment = (_b = t9.elevationAlignment) == null ? void 0 : _b.call(t9, this, e16), this._scaleVisibility = (_c = t9.scaleVisibility) == null ? void 0 : _c.call(t9, this, e16), this._filterVisibility = (_d = t9.filterVisibility) == null ? void 0 : _d.call(t9, { featureStore: this._featureStore, getFeatureCount: () => this.graphics3DGraphics.size, updateFeatureVisibilities: (e17) => this.modifyGraphics3DGraphicVisibilities((t10) => t10.setVisibilityFlag(A3.GRAPHIC, L3.FILTER, e17(I2(t10.graphic, this._objectIdField)))), setAllFeaturesVisibility: (e17) => this.modifyGraphics3DGraphicVisibilities((t10) => t10.setVisibilityFlag(A3.GRAPHIC, L3.FILTER, e17)), clearFeaturesVisibility: () => this.modifyGraphics3DGraphicVisibilities((e17) => e17.setVisibilityFlag(A3.GRAPHIC, L3.FILTER, true)) }), this._deconflictor = (_e = t9.deconflictor) == null ? void 0 : _e.call(t9, this), this._labeler = (_f = t9.labeler) == null ? void 0 : _f.call(t9, this, this._scaleVisibility), this._objectStates = (_g = t9.objectStates) == null ? void 0 : _g.call(t9, this), this._initializeAbortController = new AbortController(), this._initializePromise = this._initializeAsync();
  }
  async _initializeAsync() {
    var _a, _b, _c, _d;
    const e16 = (_a = this._initializeAbortController) == null ? void 0 : _a.signal, t9 = this.owner.view;
    this._viewElevationProvider = new l4(this._viewSpatialReference, t9), this._initializeStage(t9, this.layer.uid);
    const r7 = t9.sharedSymbolResources;
    this.symbolCreationContext.sharedResources = r7, this._sharedSymbolResourcesOwnerHandle = r7.addGraphicsOwner(this.owner), null != this.currentRenderer && (this.symbolCreationContext.renderer = this.currentRenderer), this.symbolCreationContext.stage = this.stage, this.symbolCreationContext.streamDataRequester = r7.streamDataRequester, this.symbolCreationContext.renderCoordsHelper = t9.renderCoordsHelper, this.symbolCreationContext.layer = this.layer, this.symbolCreationContext.graphicsCoreOwner = this.owner, this.symbolCreationContext.localOriginFactory = new _2(t9.renderSpatialReference), this.symbolCreationContext.elevationProvider = t9.elevationProvider, this.symbolCreationContext.notifyGraphicGeometryChanged = (e17) => this.notifyGraphicGeometryChanged(e17), this.symbolCreationContext.notifyGraphicVisibilityChanged = (e17) => this.notifyGraphicVisibilityChanged(e17);
    const s8 = d3(this.layer.elevationInfo, this.elevationFeatureExpressionEnabled);
    if (this.symbolCreationContext.featureExpressionInfoContext = await a2(s8, this._viewSpatialReference, e16, n.getLogger(this)), s2(e16), this.symbolCreationContext.screenSizePerspectiveEnabled = t9.screenSizePerspectiveEnabled && !!this.layer.screenSizePerspectiveEnabled, this.symbolCreationContext.slicePlaneEnabled = !!this.owner.slicePlaneEnabled, this.symbolCreationContext.physicalBasedRenderingEnabled = !!((_b = this.owner.view.qualitySettings) == null ? void 0 : _b.physicallyBasedRenderingEnabled), this.symbolCreationContext.skipHighSymbolLods = !!((_d = (_c = this.owner.view.qualitySettings) == null ? void 0 : _c.graphics3D) == null ? void 0 : _d.skipHighSymbolLods), "drapeSourceType" in this.owner) {
      const { owner: e17 } = this;
      this.symbolCreationContext.drapeSourceRenderer = t9.basemapTerrain.overlayManager.registerGeometryDrapeSource(e17), this.addHandles(e2(() => t9.basemapTerrain.overlayManager.unregisterDrapeSource(e17)));
    }
    this.addHandles([d(() => this.suspendedOrOutsideOfView, () => this._updateQueue.unshift(() => this._updateLayerVisibility(), null)), d(() => {
      var _a2, _b2;
      return [(_a2 = this.layer) == null ? void 0 : _a2.screenSizePerspectiveEnabled, (_b2 = this.owner.view) == null ? void 0 : _b2.screenSizePerspectiveEnabled];
    }, () => {
      var _a2;
      const e17 = t9.screenSizePerspectiveEnabled && !!this.layer.screenSizePerspectiveEnabled;
      e17 !== this.symbolCreationContext.screenSizePerspectiveEnabled && (this.symbolCreationContext.screenSizePerspectiveEnabled = e17, (_a2 = this._labeler) == null ? void 0 : _a2.reset(), this.recreateAllGraphicsAndSymbols());
    }), d(() => this.owner.slicePlaneEnabled, (e17) => this._slicePlaneEnabledChange(!!e17)), d(() => {
      var _a2;
      return (_a2 = this.owner.view.state) == null ? void 0 : _a2.rasterPixelRatio;
    }, () => this._pixelRatioChange()), d(() => {
      var _a2;
      return !!((_a2 = this.owner.view.qualitySettings) == null ? void 0 : _a2.physicallyBasedRenderingEnabled);
    }, (e17) => this._physicalBasedRenderingChange(e17)), d(() => {
      var _a2, _b2;
      return !!((_b2 = (_a2 = this.owner.view.qualitySettings) == null ? void 0 : _a2.graphics3D) == null ? void 0 : _b2.skipHighSymbolLods);
    }, (e17) => this._skipHighSymbolLoDsChange(e17)), p(() => {
      var _a2;
      return (_a2 = t9.basemapTerrain) == null ? void 0 : _a2.tilingScheme;
    }, (e17) => {
      if (e17.spatialReference.equals(this.symbolCreationContext.overlaySR) || null == t9.basemapTerrain.spatialReference || (this.symbolCreationContext.overlaySR = t9.basemapTerrain.spatialReference), this.hasHandles("loaded-graphics"))
        this.recreateAllGraphics();
      else {
        const e18 = () => {
          var _a2;
          return (_a2 = this.owner) == null ? void 0 : _a2.loadedGraphics;
        };
        this.addHandles([v2(e18, "change", (e19) => {
          this._graphicsCollectionChanged(e19), this._signalUpdatingDuringAsyncLoadedGraphicsChange();
        }, { onListenerAdd: () => {
          this.recreateAllGraphics(), this._signalUpdatingDuringAsyncLoadedGraphicsChange();
        } })], "loaded-graphics");
      }
    }, { initial: true }), d(() => this.effectiveUpdatePolicy, (e17) => {
      null != this.stageLayer && (this.stageLayer.updatePolicy = e17), this.symbolCreationContext.isAsync = this.effectiveUpdatePolicy === C3.ASYNC, e17 === C3.SYNC && this.runTask(C2);
    }, A)]), this._frameTaskHandle = t9.resourceController.scheduler.registerTask(I.GRAPHICS_CORE, this), this.layer && "featureReduction" in this.layer && this.addHandles(d(() => this.layer.featureReduction, () => {
      var _a2;
      return (_a2 = this._deconflictor) == null ? void 0 : _a2.featureReductionChange();
    })), this.notifyChange("averageSymbolComplexity"), this.rendererChange(this.owner.renderer).catch(() => {
    }), this._initializeAbortController = null;
  }
  _abortInitialize() {
    this._initializeAbortController && (this._initializeAbortController.abort(), this._initializeAbortController = null);
  }
  destroy() {
    this._unusedSymbolsCache.destroy(), this._abortInitialize(), this._abortRendererChange(), this._abortElevationInfoChange(), this._frameTaskHandle.remove(), this._frameTaskHandle = F2, this._dataUpdateQueue.cancelAll(), this._updateQueue.cancelAll(), this._deconflictor = l(this._deconflictor), this._labeler = l(this._labeler), this._elevationAlignment = u(this._elevationAlignment), this._scaleVisibility = u(this._scaleVisibility), this._filterVisibility = u(this._filterVisibility), this._objectStates = u(this._objectStates), this.clear(), this._featureStore = u(this._featureStore), this._updatingPendingLoadedGraphicsChange = l(this._updatingPendingLoadedGraphicsChange), this._graphicStateTracking = u(this._graphicStateTracking), this.stage && (this.stageLayer = u(this.stageLayer), this.stage = null), this._set("owner", null);
    for (const e16 in this._whenGraphics3DGraphicRequests)
      this._whenGraphics3DGraphicRequests[e16].reject(new s("graphic:layer-destroyed", "Layer has been destroyed"));
    this._whenGraphics3DGraphicRequests = null, this._sharedSymbolResourcesOwnerHandle = l(this._sharedSymbolResourcesOwnerHandle), this._propertiesPool = u(this._propertiesPool), this._pendingUpdatesPool = null, this._symbolConversionCache.clear(), this._objectIdInvisibleSet.clear(), this._spatialIndex = u(this._spatialIndex);
  }
  clear() {
    var _a, _b;
    (_a = this._objectStates) == null ? void 0 : _a.allGraphicsDeleted(), null != this._graphicStateTracking && this._graphicStateTracking.allGraphicsDeleted(), this.graphics3DGraphics.forEach((e16) => e16.destroy()), (_b = this._spatialIndex) == null ? void 0 : _b.clear(), this.graphics3DGraphics.clear(), this._numberOfGraphics = 0, this._usedMemory = 0, this._updateLayerVisibility(), this._symbols.forEach(u), this._symbols.clear(), this._graphicsBySymbol.clear(), this._graphicsWithoutSymbol.clear(), this._graphicsWaitingForSymbol.clear(), this._pendingUpdates.clear(), this._pendingUpdatesPool.clear(), this._pendingAdds = 0, this._pendingRemoves = 0, this._applyPendingRemovesFirst = false, this.notifyChange("dataUpdating"), this.notifyChange("running"), this.notifyChange("updatingRemaining"), this._featureStore.events.emit("changed");
  }
  _initializeStage(e16, t9) {
    this.stage = e16._stage, this.stageLayer = new a3(this.stage, { pickable: !this.suspendedOrOutsideOfView, updatePolicy: this.effectiveUpdatePolicy }, t9);
    const i9 = this.stageLayer.events;
    i9.on("transformationChanged", (e17) => this.notifyGraphicGeometryChanged(e17.graphicUid)), i9.on("shaderTransformationChanged", (e17) => this.notifyGraphicGeometryChanged(e17.graphicUid)), i9.on("visibilityChanged", (e17) => this.notifyGraphicVisibilityChanged(e17.graphicUid)), i9.on("geometryAdded", (e17) => this.notifyGraphicGeometryChanged(e17.object.graphicUid)), i9.on("geometryRemoved", (e17) => this.notifyGraphicGeometryChanged(e17.object.graphicUid)), i9.on("attributesChanged", (e17) => E2(e17.attribute) && this.notifyGraphicGeometryChanged(e17.object.graphicUid));
  }
  notifyGraphicGeometryChanged(e16) {
    if (null == this._graphicStateTracking || null == e16)
      return;
    const t9 = this.graphics3DGraphics.get(e16);
    t9 && this._graphicStateTracking.updateGraphicGeometry(t9);
  }
  notifyGraphicVisibilityChanged(e16) {
    if (null == this._graphicStateTracking || null == e16)
      return;
    const t9 = this.graphics3DGraphics.get(e16);
    t9 && this._graphicStateTracking.updateGraphicVisibility(t9);
  }
  _updateLayerVisibility() {
    const e16 = this.displayFeatureLimit.maximumNumberOfFeatures, t9 = this._numberOfGraphics > e16 * We, i9 = !this.suspendedOrOutsideOfView && !t9;
    i9 !== this._visible && (this._visible = i9, i9 ? (this.stageLayer.pickable = true, this.updateAllGraphicsVisibility()) : (this.stageLayer.pickable = false, this._hideAllGraphics()), this._updateStageLayerVisibility());
  }
  _updateStageLayerVisibility() {
    this.stageLayer.visible = this._visible && (null == this.layer.opacity || this.layer.opacity > 0);
  }
  getGraphics3DGraphicById(e16) {
    return null != e16 ? this.graphics3DGraphics.get(e16) : void 0;
  }
  getGraphics3DGraphicByObjectId(e16) {
    var _a;
    return ((_a = this.owner.layer) == null ? void 0 : _a.objectIdField) ? this._findGraphics3DGraphicByObjectId(e16) : null;
  }
  _getGraphicObjectID(e16, t9 = ((_a) => (_a = this.owner.layer) == null ? void 0 : _a.objectIdField)()) {
    return I2(e16, t9);
  }
  get graphics3DGraphicsByObjectID() {
    var _a;
    const e16 = (_a = this.owner.layer) == null ? void 0 : _a.objectIdField;
    if (!e16)
      return;
    const t9 = /* @__PURE__ */ new Map();
    return this.graphics3DGraphics.forEach((i9) => {
      if (!i9)
        return;
      const r7 = i9.graphic, s8 = this._getGraphicObjectID(r7, e16);
      null != s8 && t9.set(s8, i9);
    }), t9;
  }
  get labelsEnabled() {
    var _a;
    return !!((_a = this._labeler) == null ? void 0 : _a.layerLabelsEnabled());
  }
  async updateLabelingInfo(e16) {
    var _a, _b;
    const t9 = (_a = this._deconflictor) == null ? void 0 : _a.labelingInfoChange(e16), i9 = (_b = this._labeler) == null ? void 0 : _b.labelingInfoChange(e16);
    await Promise.allSettled([t9, i9]);
  }
  updateVisibilityInfo() {
    var _a, _b;
    (_a = this._deconflictor) == null ? void 0 : _a.labelingInfoChange(), (_b = this._labeler) == null ? void 0 : _b.visibilityInfoChange();
  }
  get symbolUpdateType() {
    if (this._pendingUpdates.size > 0)
      return "unknown";
    let e16 = 0, t9 = 0;
    return n2(this._symbols, (i9, r7) => {
      if (null != i9) {
        const s8 = i9.getFastUpdateStatus();
        if (s8.loading > 0)
          return true;
        this._graphicsBySymbol.has(r7) && (t9 += s8.fast, e16 += s8.slow);
      }
      return false;
    }) ? "unknown" : t9 >= 0 && 0 === e16 ? "fast" : e16 >= 0 && 0 === t9 ? "slow" : "mixed";
  }
  runTask(e16) {
    if (this._dataUpdateQueue.runTask(e16), this._updateQueue.runTask(e16), this._applyPendingUpdates(e16), this.notifyChange("running"), this.running || this.notifyChange("dataUpdating"), this.notifyChange("updatingRemaining"), !e16.hasProgressed)
      return o4;
  }
  setObjectIdVisibility(e16, t9) {
    t9 ? this._objectIdInvisibleSet.delete(e16) : this._objectIdInvisibleSet.add(e16);
    const i9 = this._findGraphics3DGraphicByObjectId(e16);
    null != i9 && this._updateUserVisibility(i9);
  }
  _findGraphics3DGraphicByObjectId(e16) {
    return t(this.graphics3DGraphics, (t9) => this._getGraphicObjectID(t9.graphic) === e16);
  }
  _updateUserVisibility(e16) {
    if (null == e16)
      return false;
    const t9 = e16.graphic, i9 = this._getGraphicObjectID(t9), r7 = t9.visible && !this.owner.suspended && (null == i9 || !this._objectIdInvisibleSet.has(i9));
    return e16.setVisibilityFlag(A3.GRAPHIC, L3.USER, r7);
  }
  _whenGraphics3DGraphic(e16) {
    const t9 = this.graphics3DGraphics.get(e16.uid);
    if (t9)
      return Promise.resolve(t9);
    const i9 = this._whenGraphics3DGraphicRequests[e16.uid];
    if (i9)
      return i9.promise;
    const r7 = L();
    return this._whenGraphics3DGraphicRequests[e16.uid] = r7, r7.promise;
  }
  async _boundsForGraphics3DGraphic(e16, t9) {
    const i9 = this._viewSpatialReference, r7 = this.owner.view.renderSpatialReference, s8 = this.owner.view.basemapTerrain.spatialReference, a7 = (e17, t10, s9) => n4(e17, r7, t10, e17, i9, t10, s9), n6 = (e17, t10, r8) => n4(e17, s8, t10, e17, i9, t10, r8), o8 = this._viewElevationProvider ? { service: this._viewElevationProvider, useViewElevation: null != t9 && !!t9.useViewElevation, minDemResolution: null != t9 ? t9.minDemResolution : null, minDemResolutionForPoints: this.owner.view.resolution } : null, l8 = await e16.getProjectedBoundingBox(a7, n6, o8, t9 == null ? void 0 : t9.signal);
    if (!l8)
      return null;
    const h8 = l8.boundingBox;
    if (l8.requiresDrapedElevation) {
      const e17 = this.symbolCreationContext.elevationProvider;
      if (e17) {
        E(h8, Fe);
        const t10 = e17.getElevation(Fe[0], Fe[1], 0, i9, "ground") ?? 0;
        h8[2] = Math.min(h8[2], t10), h8[5] = Math.max(h8[5], t10);
      }
    }
    return { boundingBox: h8, screenSpaceObjects: l8.screenSpaceObjects };
  }
  async whenGraphicBounds(e16, t9) {
    var _a;
    await w(() => {
      var _a2;
      return (_a2 = this.owner) == null ? void 0 : _a2.loadedGraphics;
    });
    const i9 = (_a = this.owner.layer) == null ? void 0 : _a.objectIdField, r7 = this.owner.loadedGraphics.find((t10) => t10 === e16 || null != i9 && null != t10.attributes && e16.attributes && t10.attributes[i9] === e16.attributes[i9]);
    if (!r7)
      throw new s("internal:graphic-not-part-of-view", "Graphic is not part of this view");
    const s8 = await this._whenGraphics3DGraphic(r7);
    return this._boundsForGraphics3DGraphic(s8, t9);
  }
  computeAttachmentOrigin(e16, t9) {
    const i9 = this.graphics3DGraphics.get(e16.uid);
    if (!i9)
      return null;
    const r7 = i9.computeAttachmentOrigin();
    if (0 === r7.render.num && 0 === r7.draped.num)
      return null;
    o2(He, 0, 0, 0);
    let s8 = 0;
    if (r7.render.num > 0) {
      if (!n5(r7.render.origin, this.symbolCreationContext.renderCoordsHelper.spatialReference, Ne, t9))
        return null;
      u2(He, He, Ne), s8++;
    }
    if (r7.draped.num > 0) {
      const [e17, i10] = r7.draped.origin, a7 = this._viewElevationProvider.getElevation(e17, i10, "ground") ?? 0;
      if (o2(Ne, e17, i10, a7), !n5(Ne, this._viewElevationProvider.spatialReference, Ne, t9))
        return null;
      u2(He, He, Ne), s8++;
    }
    return s8 > 1 && g(He, He, 1 / s8), new x({ x: He[0], y: He[1], z: He[2], spatialReference: t9 });
  }
  getSymbolLayerSize(e16, t9) {
    const i9 = this._symbols.get(e16.id);
    if (null == i9)
      throw new s("internal:symbol-not-part-of-view", "Symbol is not part of this view");
    const r7 = e16.symbolLayers.indexOf(t9);
    if (-1 === r7)
      throw new s("internal:missing-symbol-layer", "Symbol layer is not in symbol");
    const s8 = i9.getSymbolLayerSize(r7);
    if (null == s8)
      throw new s("internal:missing-size", "Symbol layer has no valid size");
    return s8;
  }
  _graphicsCollectionChanged(e16) {
    this._startCreateGraphics && (this.add(e16.added), this.remove(e16.removed));
  }
  graphicUpdateHandler(e16) {
    const t9 = e16.graphic.uid, i9 = this.graphics3DGraphics.get(t9);
    if (null != i9 || null != this._graphicsWithoutSymbol.get(t9))
      switch (e16.property) {
        case "visible":
          this._graphicUpdateVisibleHandler(i9);
          break;
        case "geometry":
          this._graphicUpdateGeometryHandler(i9, e16);
          break;
        case "symbol":
          this._graphicUpdateSymbolHandler(i9, e16);
          break;
        case "attributes":
          break;
        case "origin-transform":
          this._graphicUpdateTransformHandler(i9, e16);
      }
  }
  _graphicUpdateGeometryHandler(e16, t9) {
    this._graphicUpdateGeometryOrTransformHandler(e16, t9, () => null != t9.newValue && null != e16 && e16.graphics3DSymbol.updateGeometry(e16, t9.newValue));
    const i9 = t9.graphic.geometry;
    null != i9 && this._expandComputedExtent(i9);
  }
  _graphicUpdateTransformHandler(e16, t9) {
    const i9 = t9.graphic.geometry;
    this._graphicUpdateGeometryOrTransformHandler(e16, t9, () => null != t9.newValue && null != e16 && null != i9 && e16.graphics3DSymbol.updateTransform(e16, i9.spatialReference, t9.newValue, t9.action));
  }
  _graphicUpdateGeometryOrTransformHandler(e16, t9, i9) {
    var _a;
    if (null != t9.graphic.geometry)
      if (null != e16)
        i9() || this._recreateGraphic(e16.graphic);
      else {
        const e17 = (_a = t9.graphic.symbol) == null ? void 0 : _a.id;
        if (e17) {
          const t10 = this._symbols.get(e17);
          if (null != t10 && t10.loadStatus === l5.LOADING)
            return;
        }
        this._recreateGraphic(t9.graphic);
      }
    else
      this._recreateGraphic(t9.graphic);
  }
  _graphicUpdateSymbolHandler(e16, t9) {
    const i9 = t9.graphic, r7 = null != e16 ? e16.graphics3DSymbol : null != t9.oldValue ? this._symbols.get(t9.oldValue.id) : null;
    if (null == r7 || null == t9.newValue)
      return void this._recreateGraphic(i9);
    const s8 = r7.symbol, a7 = this._getConvertedSymbol(t9.newValue);
    if (null != a7 && (a7.type !== s8.type || "web-style" === a7.type) || "web-style" === s8.type)
      return void this._recreateGraphic(i9);
    const n6 = this._graphicsBySymbol.get(s8.id);
    if (n6 && 1 !== n6.size)
      return void this._recreateGraphic(i9);
    const o8 = d2(s8, a7);
    if (null == o8)
      return void this._updateSymbolMapping(s8.id, a7);
    const l8 = { diff: o8, graphics3DGraphicPatches: [], symbolStatePatches: [] };
    if (r7.prepareSymbolPatch(l8), !m3(l8.diff))
      return void this._recreateGraphic(i9);
    const h8 = this._getRenderingInfo(i9);
    if (null == h8)
      return void this._recreateGraphic(i9);
    const d8 = r7.extentPadding;
    for (const p3 of l8.symbolStatePatches)
      p3();
    if (d8 !== r7.extentPadding && this._recomputeExtentPadding(), null != e16)
      for (const p3 of l8.graphics3DGraphicPatches)
        p3(e16, h8);
    this._updateSymbolMapping(s8.id, a7);
  }
  _graphicUpdateVisibleHandler(e16) {
    var _a, _b;
    this._updateUserVisibility(e16) && ((_a = this._labeler) == null ? void 0 : _a.setDirty(), (_b = this._deconflictor) == null ? void 0 : _b.setDirty());
  }
  recreateGraphics(e16) {
    this._suspendSymbolCleanup = true, this.remove(e16), this.add(e16), this._suspendSymbolCleanup = false, this.effectiveUpdatePolicy === C3.SYNC && this._cleanupSymbols();
  }
  _recreateGraphic(e16) {
    this.recreateGraphics([e16]);
  }
  _beginGraphicUpdate(e16) {
    const t9 = this._graphicsUpdateId;
    return this._graphicsUpdateId++, this._graphicsWaitingForSymbol.set(e16.uid, t9), 1 === this._graphicsWaitingForSymbol.size && this.notifyChange("dataUpdating"), t9;
  }
  _endGraphicUpdate(e16) {
    e16 && (this._graphicsWaitingForSymbol.delete(e16.uid), 0 === this._graphicsWaitingForSymbol.size && (this._cleanupSymbols(), this.notifyChange("dataUpdating")));
  }
  _recomputeExtentPadding() {
    let e16 = 0;
    this._symbols.forEach((t9) => {
      null != t9 && (e16 = Math.max(e16, t9.extentPadding));
    }), this._set("extentPadding", e16);
  }
  _expandComputedExtent(e16) {
    const t9 = Te, i9 = e16.spatialReference;
    N(e16, t9);
    const r7 = this._viewSpatialReference, s8 = Ve.tmpVec;
    if (G(i9, r7) || t3(t9[0], t9[1], 0, i9, s8, r7) && (t9[0] = s8[0], t9[1] = s8[1], t3(t9[3], t9[4], 0, i9, s8, r7), t9[3] = s8[0], t9[4] = s8[1]), !(isFinite(t9[0]) && isFinite(t9[3]) && isFinite(t9[1]) && isFinite(t9[4])))
      return;
    const a7 = this.computedExtent;
    let n6 = null;
    const o8 = isFinite(t9[2]) && isFinite(t9[5]), l8 = o8 && (null == (a7 == null ? void 0 : a7.zmin) || t9[2] < a7.zmin), h8 = o8 && (null == (a7 == null ? void 0 : a7.zmax) || t9[5] > a7.zmax);
    if (a7) {
      (t9[0] < a7.xmin || t9[1] < a7.ymin || t9[3] > a7.xmax || t9[4] > a7.ymax || l8 || h8) && (n6 = this._propertiesPool.get("computedExtent"), n6.xmin = Math.min(t9[0], a7.xmin), n6.ymin = Math.min(t9[1], a7.ymin), n6.xmax = Math.max(t9[3], a7.xmax), n6.ymax = Math.max(t9[4], a7.ymax), n6.spatialReference = r7);
    } else
      n6 = this._propertiesPool.get("computedExtent"), n6.xmin = t9[0], n6.ymin = t9[1], n6.xmax = t9[3], n6.ymax = t9[4], n6.spatialReference = r7;
    n6 && (l8 && (n6.zmin = t9[2]), h8 && (n6.zmax = t9[5]), this._set("computedExtent", n6));
  }
  _abortElevationInfoChange() {
    this._elevationInfoChangeAbortController && (this._elevationInfoChangeAbortController.abort(), this._elevationInfoChangeAbortController = null);
  }
  async elevationInfoChange() {
    var _a, _b;
    this._abortElevationInfoChange();
    const e16 = new AbortController();
    this._elevationInfoChangeAbortController = e16;
    const t9 = d3(this.layer.elevationInfo, this.elevationFeatureExpressionEnabled);
    this.symbolCreationContext.featureExpressionInfoContext = await a2(t9, this._viewSpatialReference, e16.signal, n.getLogger(this)), s2(e16.signal), this._elevationInfoChangeAbortController = null, (_a = this._labeler) == null ? void 0 : _a.elevationInfoChange(), this.forEachGraphics3DSymbol((e17, t10, i9) => {
      e17.globalPropertyChanged("elevationInfo", t10) ? t10.forEach((e18) => {
        const t11 = e18.graphic, i10 = e18.labelLayers;
        for (const r7 of i10) {
          r7.graphics3DSymbolLayer.updateGraphicElevationContext(t11, r7);
        }
      }) : this._recreateSymbol(i9);
    }), this.updateStageLayerElevationProvider(), (_b = this._elevationAlignment) == null ? void 0 : _b.elevationInfoChange();
  }
  updateStageLayerElevationProvider() {
    this._stageLayerElevationProvider ? (this.layer.elevationInfo && "relative-to-scene" === this.layer.elevationInfo.mode || 0 === this._numberOfGraphicsProvidingElevation) && (this.owner.view.elevationProvider.unregister(this._stageLayerElevationProvider), this._stageLayerElevationProvider = r(this._stageLayerElevationProvider)) : (!this.layer.elevationInfo || this.layer.elevationInfo && "relative-to-scene" !== this.layer.elevationInfo.mode) && this._numberOfGraphicsProvidingElevation > 0 && (this._stageLayerElevationProvider = new y3({ layer: this.layer, stageLayer: this.stageLayer, view: this.owner.view }), this.owner.view.elevationProvider.register("scene", this._stageLayerElevationProvider));
  }
  _clearSymbolsAndGraphics() {
    var _a, _b, _c, _d;
    this.clear(), null != this._filterVisibility && this._filterVisibility.clear(), (_a = this._labeler) == null ? void 0 : _a.reset(), (_b = this._deconflictor) == null ? void 0 : _b.clear(), (_c = this._elevationAlignment) == null ? void 0 : _c.clear(), (_d = this.stageLayer) == null ? void 0 : _d.invalidateSpatialQueryAccelerator(), this._stageLayerElevationProvider && (this.owner.view.elevationProvider.unregister(this._stageLayerElevationProvider), this._stageLayerElevationProvider = r(this._stageLayerElevationProvider));
  }
  startCreateGraphics() {
    this._startCreateGraphics = true, this.recreateAllGraphics();
  }
  recreateAllGraphics() {
    this._recreateAllGraphics(false);
  }
  recreateAllGraphicsAndSymbols() {
    this._recreateAllGraphics(true);
  }
  _recreateAllGraphics(e16 = false) {
    if (!this._startCreateGraphics)
      return;
    const { loadedGraphics: t9, view: i9 } = this.owner, r7 = i9.basemapTerrain.tilingScheme && (t9 == null ? void 0 : t9.length) ? t9.toArray() : null;
    !e16 && r7 || this._clearSymbolsAndGraphics(), this.symbolCreationContext.screenSizePerspectiveEnabled = this.owner.view.screenSizePerspectiveEnabled && !!this.layer.screenSizePerspectiveEnabled, this.symbolCreationContext.slicePlaneEnabled = !!this.owner.slicePlaneEnabled, this._set("computedExtent", null), r7 && (e16 ? this.add(r7) : this.recreateGraphics(r7));
  }
  _recreateSymbol(e16) {
    const t9 = this._graphicsBySymbol.get(e16), i9 = [];
    t9 && (t9.forEach((e17, t10) => {
      var _a;
      const r8 = e17.usedMemory;
      this._conditionalRemove(e17, t10), (_a = this._spatialIndex) == null ? void 0 : _a.remove(e17), i9.push(e17.graphic), e17.destroy(), this._removeGraphics3DGraphic(t10, r8), this._updateLayerVisibility(), this._featureStore.events.emit("changed");
    }), this._graphicsBySymbol.set(e16, /* @__PURE__ */ new Map()));
    const r7 = this._symbols.get(e16);
    u(r7), this._symbols.delete(e16), this.add(i9);
  }
  _recreateGraphicsForSymbol(e16) {
    const t9 = this._graphicsBySymbol.get(e16);
    if (t9) {
      const e17 = [];
      t9.forEach((t10) => e17.push(t10.graphic)), this.recreateGraphics(e17);
    }
  }
  _conditionalRemove(e16, t9) {
    var _a, _b, _c;
    this._graphicsDrapedUids.delete(t9), (_a = this._objectStates) == null ? void 0 : _a.removeGraphic(e16), (_b = this._labeler) == null ? void 0 : _b.removeGraphic(e16), (_c = this._deconflictor) == null ? void 0 : _c.removeGraphic(e16), null != this._graphicStateTracking && this._graphicStateTracking.removeGraphic(e16);
  }
  add(e16) {
    var _a;
    e16 && 0 !== e16.length && (((_a = this.owner.view.basemapTerrain) == null ? void 0 : _a.tilingScheme) ? (this._updatePolicyForGraphics(e16) === C3.ASYNC ? this._addDelayed(e16) : this._addImmediate(e16), this.notifyChange("dataUpdating")) : n.getLogger(this).error("#add()", "Cannot add graphics before terrain surface has been initialized"));
  }
  _updatePolicyForGraphics(e16) {
    if (this.effectiveUpdatePolicy === C3.SYNC && ("mesh" === this.layer.geometryType || null == this.layer.geometryType)) {
      for (const t9 of e16)
        if (null != t9.geometry && "mesh" === t9.geometry.type && !t9.geometry.loaded)
          return C3.ASYNC;
    }
    return this.effectiveUpdatePolicy;
  }
  _addImmediate(e16) {
    var _a, _b;
    this._geometryWarningLogged = false, this._symbolWarningLogged = false;
    for (const t9 of e16)
      this._addGraphic(t9, this._getRenderingInfo(t9, n.getLogger(this)), C3.SYNC);
    this._cleanupSymbols(), (_a = this._labeler) == null ? void 0 : _a.setDirty(), (_b = this._deconflictor) == null ? void 0 : _b.setDirty();
  }
  _addDelayed(e16) {
    var _a;
    for (const t9 of e16) {
      const e17 = t9.uid;
      let i9 = this._pendingUpdates.get(e17);
      i9 ? i9.add ? i9.state !== ze.NEW && ((_a = i9.abortController) == null ? void 0 : _a.abort()) : this._pendingAdds++ : (i9 = this._pendingUpdatesPool.pushNew(), this._pendingAdds++, this._pendingUpdates.set(e17, i9)), i9.add = t9;
    }
    this.notifyChange("running"), this.notifyChange("updatingRemaining"), this.notifyChange("dataUpdating");
  }
  remove(e16) {
    this.effectiveUpdatePolicy === C3.ASYNC ? this._removeDelayed(e16) : this._removeImmediate(e16), this.notifyChange("dataUpdating");
  }
  _removeImmediate(e16) {
    var _a, _b;
    for (const t9 of e16)
      this._removeGraphic(t9);
    this._cleanupSymbols(), (_a = this._labeler) == null ? void 0 : _a.setDirty(), (_b = this._deconflictor) == null ? void 0 : _b.setDirty();
  }
  _removeDelayed(e16) {
    var _a;
    for (const t9 of e16) {
      const e17 = t9.uid, i9 = this._pendingUpdates.get(e17);
      if (i9)
        i9.add && (i9.remove ? i9.add = null : this._pendingUpdates.delete(e17), i9.state === ze.LOADING && ((_a = i9.abortController) == null ? void 0 : _a.abort()), this._pendingAdds--);
      else {
        const i10 = this._pendingUpdatesPool.pushNew();
        i10.remove = t9, this._pendingUpdates.set(e17, i10), this._pendingRemoves++, this._applyPendingRemovesFirst = true;
      }
    }
    0 === this._pendingUpdates.size && this._finishPendingUpdates(), this.notifyChange("running"), this.notifyChange("updatingRemaining"), this.notifyChange("dataUpdating");
  }
  _finishPendingUpdates() {
    this._pendingUpdatesPool.clear(), this._cleanupSymbols(), (this._pendingAdds || this._pendingRemoves) && n.getLogger(this).warn("pendingAdds/Removes in inconsistent state!"), this._pendingAdds = 0, this._pendingRemoves = 0, this._applyPendingRemovesFirst = false;
  }
  _applyPendingUpdates(e16) {
    var _a;
    if (this._geometryWarningLogged = false, this._symbolWarningLogged = false, 0 === this._pendingUpdates.size && ((_a = this._spatialIndex) == null ? void 0 : _a.updating))
      return this._spatialIndex.update(), void e16.madeProgress();
    if (this._applyPendingRemovesFirst) {
      this._applyPendingRemovesFirst = false;
      for (const [t9, i9] of this._pendingUpdates) {
        if (e16.done) {
          this._applyPendingRemovesFirst = true;
          break;
        }
        if (i9.remove && !i9.add && (this._pendingRemoves--, e16.madeProgress(), this._removeGraphic(i9.remove), i9.remove = null, this._pendingUpdates.delete(t9), 0 === this._pendingRemoves))
          break;
      }
    }
    for (const [t9, i9] of this._pendingUpdates) {
      if (e16.done)
        break;
      i9.add && i9.state === ze.NEW && this._processPendingUpdateNew(i9);
      let r7 = this.effectiveUpdatePolicy;
      if (!i9.remove || i9.add && i9.state !== ze.READY || (this._pendingRemoves--, e16.madeProgress(), this._removeGraphic(i9.remove), i9.remove = null, r7 = C3.SYNC), i9.add)
        switch (i9.state) {
          case ze.READY:
            this._addGraphic(i9.add, i9.renderingInfo, r7), i9.add = null, this._pendingAdds--, e16.madeProgress();
            break;
          case ze.REJECTED:
            i9.add = null, this._pendingAdds--;
          case ze.LOADING:
        }
      null == i9.remove && null == i9.add && this._pendingUpdates.delete(t9);
    }
    0 === this._pendingUpdates.size && (this._finishPendingUpdates(), this.notifyChange("running"), this.notifyChange("dataUpdating"));
  }
  _processPendingUpdateNew(e16) {
    if (!e16.add)
      return void (e16.state = ze.READY);
    const t9 = e16.add.geometry;
    null == t9 || "mesh" !== t9.type || t9.loaded ? this._processPendingUpdateNewRenderingInfo(e16) : this._processPendingUpdateNewMesh(e16, t9);
  }
  async _processPendingUpdateNewMesh(e16, t9) {
    e16.state = ze.LOADING, e16.abortController = new AbortController();
    const i9 = e16.abortController.signal;
    try {
      await t9.load({ signal: i9 });
    } catch (r7) {
      return this._processPendingUpdateNewError(e16, r7);
    }
    e16.abortController = null, this._processPendingUpdateNewRenderingInfo(e16);
  }
  _processPendingUpdateNewError(e16, t9) {
    e16.abortController = null, b(t9) ? e16.state = ze.NEW : e16.state = ze.REJECTED;
  }
  async _processPendingUpdateNewRenderingInfo(e16) {
    if (null == this.layer.renderer || "dictionary" !== this.layer.renderer.type)
      return e16.renderingInfo = this._getRenderingInfo(e16.add, n.getLogger(this)), void (e16.state = ze.READY);
    e16.state = ze.LOADING, e16.abortController = new AbortController();
    let t9 = null;
    try {
      t9 = await this._getRenderingInfoAsync(e16.add, { signal: e16.abortController.signal });
    } catch (r7) {
      return e16.abortController = null, void (b(r7) ? e16.state = ze.NEW : e16.state = ze.REJECTED);
    }
    null == (t9 == null ? void 0 : t9.symbol) ? (this._symbolWarningLogged || (this._symbolWarningLogged = true, n.getLogger(this).warn(`Graphic in layer ${this.layer.id} has no symbol and will not render`)), e16.renderingInfo = null) : e16.renderingInfo = t9, e16.state = ze.READY;
  }
  _addGraphic(e16, t9, i9) {
    var _a;
    if (this._graphicsWithoutSymbol.set(e16.uid, e16), null == (t9 == null ? void 0 : t9.symbol) || !y2(e16))
      return;
    if (null != this.stage.renderView.objectAndLayerIdRenderHelper && this.setUidToIdOnAdd) {
      const t10 = S5(this.owner.view.map, this.layer.uid);
      this.stage.renderView.objectAndLayerIdRenderHelper.setUidToObjectAndLayerId(e16.objectId, e16.uid, this.layer.id, this.layer.uid, !!this.layer.popupEnabled && !t10 && u4(this.layer, (_a = this.owner.view.popup) == null ? void 0 : _a.defaultPopupTemplateEnabled));
    }
    const r7 = t9.symbol, s8 = this.getOrCreateGraphics3DSymbol(r7, t9.renderer);
    if (null == s8)
      return;
    this._expandComputedExtent(e16.geometry);
    const a7 = this._beginGraphicUpdate(e16), n6 = new r4(e16, t9, this.layer);
    let o8 = false;
    const l8 = (e17) => {
      e17 === s8.symbol.id && (o8 = true);
    };
    this._whenSymbolRemoved.push(l8);
    const h8 = () => {
      var _a2;
      if (--this._loadingSymbols, this.destroyed)
        return;
      this._whenSymbolRemoved.removeUnordered(l8);
      if (this._graphicsWaitingForSymbol.get(e16.uid) !== a7 || o8 || s8.destroyed || this.graphicSymbolSupported && e16.symbol && e16.symbol.id !== s8.symbol.id)
        --s8.referenced, this._cleanupSymbols();
      else {
        const t10 = this._createGraphics3DGraphic(s8, n6);
        this._spatialIndex && null != t10 && this._spatialIndex.add(t10), --s8.referenced, this._endGraphicUpdate(e16);
      }
      this._featureStore.events.emit("changed"), (_a2 = this._labeler) == null ? void 0 : _a2.setDirty();
    }, d8 = (t10) => {
      --this._loadingSymbols, this.destroyed || (this._whenSymbolRemoved.removeUnordered(l8), o8 || (b(t10) ? this.add([e16]) : s8.destroyed || this._endGraphicUpdate(e16)));
    };
    ++this._loadingSymbols, i9 === C3.ASYNC ? s8.load(() => this._dataUpdateQueue.push(h8, null), (e17) => this._dataUpdateQueue.push(() => d8(e17), null)) : s8.load(h8, d8);
  }
  _removeGraphic(e16) {
    var _a, _b;
    const t9 = e16.uid, i9 = this.graphics3DGraphics.get(t9);
    if (i9) {
      i9.graphics3DSymbol.onRemoveGraphic(i9);
      const e17 = i9.usedMemory, r7 = i9.isElevationSource;
      this._conditionalRemove(i9, t9), (_a = this._spatialIndex) == null ? void 0 : _a.remove(i9);
      const s8 = i9.graphics3DSymbol.symbol.id;
      (_b = this._graphicsBySymbol.get(s8)) == null ? void 0 : _b.delete(t9), this._graphicsWithoutSymbol.delete(t9), this._removeGraphics3DGraphic(t9, e17, r7), i9.destroy(), this._featureStore.events.emit("changed");
    } else
      this._graphicsWithoutSymbol.delete(t9), this._graphicsWaitingForSymbol.delete(t9), 0 === this._graphicsWaitingForSymbol.size && (this._cleanupSymbols(), this.notifyChange("dataUpdating"));
  }
  _hasLabelingContext(e16) {
    if (e16 instanceof b4 || e16 instanceof m2) {
      const t9 = this.symbolCreationContext.layer;
      return !!t9.labelingInfo && t9.labelingInfo.some((t10) => t10.symbol === e16);
    }
    return false;
  }
  _hasValidSymbolCreationContext(e16) {
    return !(e16 instanceof b4 && !this._hasLabelingContext(e16)) || (n.getLogger(this).error("LabelSymbol3D is only valid as part of a LabelClass. Using LabelSymbol3D as a renderer symbol is not supported."), false);
  }
  _getRenderingInfo(e16, t9) {
    const i9 = e16.geometry;
    if (null == i9)
      return t9 && !this._geometryWarningLogged && (this._geometryWarningLogged = true, t9.warn(`Graphic in layer ${this.layer.id} has no geometry and will not render`)), null;
    if (!F(i9.spatialReference, this._viewSpatialReference))
      return t9 && !this._geometryWarningLogged && (this._geometryWarningLogged = true, t9.warn(`Graphic in layer ${this.layer.id} has incompatible spatial reference and will not render`)), null;
    if (!this.graphicSymbolSupported && null != e16.symbol)
      return t9 && !this._symbolWarningLogged && (this._symbolWarningLogged = true, t9.warn(`Graphic in layer ${this.layer.id} is not allowed to have a symbol, use a renderer instead`)), null;
    const r7 = this.rendererHasGeometryOperations ? c3(e16, this.layer) : e16;
    let s8;
    if (this.owner.getRenderingInfo && (this.getRenderingInfoWithoutRenderer || null != this.currentRenderer))
      s8 = this.owner.getRenderingInfo(r7, this.currentRenderer, this._arcadeOnDemand);
    else {
      s8 = { symbol: r7.symbol || j(r7.geometry) };
    }
    return null == (s8 == null ? void 0 : s8.symbol) ? (t9 && !this._symbolWarningLogged && (this._symbolWarningLogged = true, t9.warn(`Graphic in layer ${this.layer.id} has no symbol and will not render`)), null) : s8;
  }
  _getRenderingInfoAsync(e16, t9) {
    if (null == e16.geometry)
      return this._geometryWarningLogged || (this._geometryWarningLogged = true, n.getLogger(this).warn(`Graphic in layer ${this.layer.id} has no geometry and will not render`)), null;
    if (!this.graphicSymbolSupported && null != e16.symbol)
      return this._symbolWarningLogged || (this._symbolWarningLogged = true, n.getLogger(this).warn(`Graphic in layer ${this.layer.id} is not allowed to have a symbol, use a renderer instead`)), null;
    const r7 = this.rendererHasGeometryOperations ? c3(e16, this.layer) : e16;
    return this.owner.getRenderingInfoAsync(r7, this.currentRenderer, this._arcadeOnDemand, t9);
  }
  _createGraphics3DSymbol(e16, t9) {
    if (!this._hasValidSymbolCreationContext(e16))
      return null;
    const i9 = this._getConvertedSymbol(e16);
    if (!i9)
      return null;
    let r7;
    if (null != t9 && "backgroundFillSymbol" in t9 && t9.backgroundFillSymbol) {
      const e17 = S3(t9.backgroundFillSymbol, { ignoreDrivers: true });
      null != e17.symbol && "web-style" !== e17.symbol.type && "cim" !== e17.symbol.type && (r7 = e17.symbol.symbolLayers);
    }
    const s8 = t7(i9, this.symbolCreationContext, r7);
    return s8.load(() => {
      const e17 = s8.extentPadding;
      e17 > this.extentPadding && this._set("extentPadding", e17), this.notifyChange("averageSymbolComplexity");
    }, () => {
    }), s8;
  }
  getOrCreateGraphics3DSymbol(e16, t9) {
    let i9 = this._symbols.get(e16.id);
    if (void 0 === i9) {
      const r7 = this._unusedSymbolsCache.pop(e16.id);
      i9 = null != r7 ? r7 : e16 instanceof h4 ? new i7(e16, (e17) => this._dataUpdateQueue.push(e17, null), (e17) => this._createGraphics3DSymbol(e17, t9)) : this._createGraphics3DSymbol(e16, t9), this._symbols.set(e16.id, i9);
    }
    return null != i9 && ++i9.referenced, i9;
  }
  trackGraphicState(e16) {
    return null == this._graphicStateTracking && (this._graphicStateTracking = new e13(this)), this._graphicStateTracking.add(e16);
  }
  _addGraphics3DGraphic(e16) {
    this._usedMemory += e16.usedMemory, this.graphics3DGraphics.set(e16.graphic.uid, e16), this._numberOfGraphics++, e16.isElevationSource && (this._numberOfGraphicsProvidingElevation++, this.updateStageLayerElevationProvider()), this._updateLayerVisibility();
  }
  _removeGraphics3DGraphic(e16, t9, i9 = false) {
    this._usedMemory -= t9, this.graphics3DGraphics.delete(e16), this._numberOfGraphics--, i9 && (this._numberOfGraphicsProvidingElevation--, this.updateStageLayerElevationProvider()), this._updateLayerVisibility();
  }
  _createGraphics3DGraphic(e16, t9) {
    var _a, _b, _c;
    const i9 = t9.graphic;
    if (this._graphicsWithoutSymbol.delete(i9.uid), !this._symbols.has(e16.symbol.id))
      return this.add([i9]), null;
    if (this.graphics3DGraphics.has(i9.uid))
      return null;
    const r7 = e16.createGraphics3DGraphic(t9);
    if (null == r7)
      return null;
    this._addGraphics3DGraphic(r7);
    const s8 = e16.symbol.id;
    this._graphicsBySymbol.has(s8) || this._graphicsBySymbol.set(s8, /* @__PURE__ */ new Map()), this._graphicsBySymbol.get(s8).set(i9.uid, r7);
    if (r7.isDraped && this._graphicsDrapedUids.add(i9.uid), r7.centroid = null, null != i9.geometry && "point" !== i9.geometry.type && (r7.centroid = b6(i9.geometry, this._viewSpatialReference)), this._updateUserVisibility(r7), null != this._scaleVisibility && this._scaleVisibility.updateVisibility(r7), null != this._filterVisibility) {
      const { defaultVisibility: e17 } = this._filterVisibility;
      r7.setVisibilityFlag(A3.GRAPHIC, L3.FILTER, e17), e17 || this._filterVisibility.reapply();
    }
    (_a = this._deconflictor) == null ? void 0 : _a.addGraphic(r7), (_b = this._labeler) == null ? void 0 : _b.addGraphic(r7), (_c = this._objectStates) == null ? void 0 : _c.addGraphic(r7), r7.initialize(this.stageLayer, this.owner), null != this._graphicStateTracking && this._graphicStateTracking.addGraphic(r7);
    const a7 = this._whenGraphics3DGraphicRequests[i9.uid];
    return a7 && (delete this._whenGraphics3DGraphicRequests[i9.uid], a7.resolve(r7)), r7;
  }
  _abortRendererChange() {
    this._rendererChangeAbortController && (this._rendererChangeAbortController.abort(), this._rendererChangeAbortController = null);
  }
  async rendererChange(e16) {
    if (this._abortRendererChange(), e16 !== this.currentRenderer)
      if (this._validateRenderer(e16), null == e16 && this._currentRendererChange(null, false), t6(e16))
        if (null != e16 && e16.arcadeRequired) {
          const t9 = new AbortController();
          this._rendererChangeAbortController = t9;
          const { arcadeUtils: i9 } = await this._ensureArcade();
          s2(t9);
          const r7 = i9.hasGeometryOperations(e16);
          r7 && (await i9.enableGeometryOperations(), s2(t9)), this.effectiveUpdatePolicy === C3.ASYNC ? await this._updateQueue.push(() => this._currentRendererChange(e16, r7), t9.signal) : this._currentRendererChange(e16, r7), this._rendererChangeAbortController = null;
        } else if (this.effectiveUpdatePolicy === C3.ASYNC) {
          const t9 = new AbortController();
          this._rendererChangeAbortController = t9, await this._updateQueue.push(() => this._currentRendererChange(e16, false), t9.signal), this._rendererChangeAbortController = null;
        } else
          this._currentRendererChange(e16, false);
      else
        this._currentRendererChange(e16, false);
  }
  async _ensureArcade() {
    return null == this._arcadeOnDemand ? (this._arcadeOnDemand = await i5(), this._arcadeOnDemand) : this._arcadeOnDemand;
  }
  _currentRendererChange(e16, t9) {
    var _a;
    this.currentRenderer = e16, this.rendererHasGeometryOperations = t9, this.symbolCreationContext.arcade = this._arcadeOnDemand;
    const i9 = this.symbolCreationContext.renderer;
    if (e16 === i9)
      return;
    if (this._symbolConversionCache.clear(), this._unusedSymbolsCache.clear(), null == e16)
      return this.symbolCreationContext.renderer = null, void this.recreateAllGraphicsAndSymbols();
    const r7 = d2(i9, e16);
    this._updateUnchangedSymbolMappings(r7, e16, i9), this.symbolCreationContext.renderer = e16, null != r7 && ("complete" === r7.type ? this.recreateAllGraphicsAndSymbols() : "partial" === r7.type && (this._applyRendererDiff(r7, e16, i9) ? (_a = this._labeler) == null ? void 0 : _a.reset() : this.recreateAllGraphicsAndSymbols()), this.notifyChange("averageSymbolComplexity"));
  }
  _diffHasSymbolChange(e16) {
    for (const t9 in e16.diff)
      switch (t9) {
        case "visualVariables":
        case "defaultSymbol":
        case "uniqueValueInfos":
          break;
        case "uniqueValueGroups":
        case "authoringInfo":
        case "fieldDelimiter":
          delete e16.diff[t9];
          break;
        default:
          return true;
      }
    return false;
  }
  _applySymbolSetDiff(e16, t9, i9) {
    var _a, _b;
    e16 = e16 || [], t9 = t9 || [];
    const r7 = [];
    for (const s8 of t9) {
      const t10 = this._graphicsBySymbol.get(s8.id);
      t10 && t10.forEach((a7, n6) => {
        const o8 = a7.graphic, l8 = this.layer instanceof b3 ? this.layer : null, h8 = this._arcadeOnDemand;
        if (s8 === i9.defaultSymbol && i9.getSymbol(c3(o8, l8), { arcade: h8 }) === i9.defaultSymbol)
          return;
        const d8 = a7.usedMemory;
        e16.length || i9.defaultSymbol ? r7.push(o8) : this._graphicsWithoutSymbol.set(n6, o8);
        const p3 = this.graphics3DGraphics.get(n6);
        this._conditionalRemove(p3, n6), a7.destroy(), t10.delete(n6), this._removeGraphics3DGraphic(n6, d8), this._updateLayerVisibility();
      }), this._whenSymbolRemoved.forAll((e17) => e17(s8.id));
    }
    (e16.length || r7.length) && (this._graphicsWithoutSymbol.forEach((e17) => r7.push(e17)), this._graphicsWithoutSymbol.clear(), this.add(r7)), this._cleanupSymbols(), (_a = this._labeler) == null ? void 0 : _a.setDirty(), (_b = this._deconflictor) == null ? void 0 : _b.setDirty();
  }
  _applyUniqueValueRendererDiff(e16, t9, i9) {
    const r7 = e16.diff.defaultSymbol, a7 = e16.diff.uniqueValueInfos;
    if (r7 || a7) {
      const n6 = a7 ? a7.added.map((e17) => e17.symbol).filter(k) : [], o8 = a7 ? a7.removed.map((e17) => e17.symbol).filter(k) : [];
      if (a7)
        for (let e17 = 0; e17 < a7.changed.length; e17++)
          n6.push(a7.changed[e17].newValue.symbol), o8.push(a7.changed[e17].oldValue.symbol);
      return r7 ? (i9.defaultSymbol && o8.push(i9.defaultSymbol), t9.defaultSymbol && n6.push(t9.defaultSymbol)) : i9.defaultSymbol && n6.length && o8.push(t9.defaultSymbol), this._applySymbolSetDiff(n6, o8, t9), delete e16.diff.defaultSymbol, delete e16.diff.uniqueValueInfos, true;
    }
    return false;
  }
  _calculateUnchangedSymbolMapping(e16, t9, i9) {
    var _a;
    if ("unique-value" !== (t9 == null ? void 0 : t9.type) || "unique-value" !== (i9 == null ? void 0 : i9.type) || null != e16 && "partial" !== e16.type)
      return [];
    const r7 = (e17) => null != e17 ? e17.id : null, s8 = e16 && e16.diff, a7 = s8 == null ? void 0 : s8.defaultSymbol, n6 = s8 && s8.uniqueValueInfos;
    let o8;
    if (n6)
      o8 = n6.unchanged.map((e17) => ({ oldId: r7(e17.oldValue.symbol), newId: r7(e17.newValue.symbol) }));
    else {
      o8 = [];
      for (const e17 of i9.uniqueValueInfos ?? []) {
        const i10 = r7(e17.symbol), s9 = (_a = t9.uniqueValueInfos) == null ? void 0 : _a.find((t10) => t10.value === e17.value);
        s9 && i10 !== r7(s9.symbol) && o8.push({ oldId: i10, newId: r7(s9.symbol) });
      }
    }
    return !a7 && i9.defaultSymbol && o8.push({ oldId: r7(i9.defaultSymbol), newId: r7(t9.defaultSymbol) }), o8;
  }
  _updateSymbolMapping(e16, t9) {
    const i9 = null != t9 && t9 ? "string" == typeof t9 ? t9 : t9.id : null;
    if (null == e16 || e16 === i9)
      return;
    const r7 = this._graphicsBySymbol.get(e16);
    this._graphicsBySymbol.delete(e16), void 0 !== r7 && this._graphicsBySymbol.set(i9, r7);
    const s8 = this._symbols.get(e16);
    if (void 0 !== s8 && (this._symbols.delete(e16), this._symbols.set(i9, s8), null != s8)) {
      const e17 = "string" == typeof t9 ? null : t9;
      null != e17 ? s8.symbol = e17 : s8.symbol.id = i9;
    }
  }
  _updateUnchangedSymbolMappings(e16, t9, i9) {
    const r7 = this._calculateUnchangedSymbolMapping(e16, t9, i9);
    for (const { oldId: s8, newId: a7 } of r7)
      this._updateSymbolMapping(s8, a7);
  }
  _applyRendererDiff(e16, i9, r7) {
    if (this._diffHasSymbolChange(e16))
      return false;
    if (i9 instanceof A2 && r7 instanceof A2 && this._applyUniqueValueRendererDiff(e16, i9, r7) && 0 === Object.keys(e16.diff).length)
      return true;
    for (const [t9] of this._graphicsBySymbol) {
      const r8 = this._symbols.get(t9);
      if (null != r8)
        switch (r8.applyRendererDiff(e16, i9)) {
          case e9.RecreateSymbol:
            this._recreateSymbol(t9);
            break;
          case e9.RecreateGraphics:
            this._recreateGraphicsForSymbol(t9);
          case e9.FastUpdate:
        }
    }
    return true;
  }
  opacityChange() {
    this.forEachGraphics3DSymbol((e16, t9) => e16.globalPropertyChanged("opacity", t9)), this._updateStageLayerVisibility();
  }
  _slicePlaneEnabledChange(e16) {
    var _a, _b;
    e16 !== this.symbolCreationContext.slicePlaneEnabled && (this.symbolCreationContext.slicePlaneEnabled = e16, this.stageLayer.sliceable = e16, this.forEachGraphics3DSymbol((e17, t9) => e17.globalPropertyChanged("slicePlaneEnabled", t9)), (_a = this._deconflictor) == null ? void 0 : _a.slicePlaneEnabledChange(), (_b = this._labeler) == null ? void 0 : _b.slicePlaneEnabledChange());
  }
  _physicalBasedRenderingChange(e16) {
    this.symbolCreationContext.physicalBasedRenderingEnabled = e16, this.forEachGraphics3DSymbol((e17, t9, i9) => {
      e17.globalPropertyChanged("physicalBasedRenderingEnabled", t9) || this._recreateSymbol(i9);
    });
  }
  _skipHighSymbolLoDsChange(e16) {
    this.symbolCreationContext.skipHighSymbolLods = e16, this.forEachGraphics3DSymbol((e17, t9, i9) => {
      e17.globalPropertyChanged("skipHighSymbolLods", t9) || this._recreateSymbol(i9);
    });
  }
  _pixelRatioChange() {
    this.forEachGraphics3DSymbol((e16, t9, i9) => {
      e16.globalPropertyChanged("pixelRatio", t9) || this._recreateSymbol(i9);
    });
  }
  _signalUpdatingDuringAsyncLoadedGraphicsChange() {
    this._updatingPendingLoadedGraphicsChange && this._updatingPendingLoadedGraphicsChange.remove(), this._updatingPendingLoadedGraphicsChange = v(() => {
      this._updatingPendingLoadedGraphicsChange = null;
    });
  }
  setClippingExtent(e16, t9) {
    const i9 = this.symbolCreationContext.clippingExtent, r7 = u3();
    return u6(e16, r7, t9) ? this.symbolCreationContext.clippingExtent = Z(i(), r7) : this.symbolCreationContext.clippingExtent = null, !B(this.symbolCreationContext.clippingExtent, i9);
  }
  modifyGraphics3DGraphicVisibilities(e16) {
    var _a, _b;
    if (this.destroyed)
      return;
    let t9 = false;
    this.graphics3DGraphics.forEach((i9) => {
      e16(i9) && (t9 = true);
    }), t9 && ((_a = this._labeler) == null ? void 0 : _a.setDirty(), (_b = this._deconflictor) == null ? void 0 : _b.setDirty());
  }
  forEachGraphics3DSymbol(e16) {
    for (const [t9, i9] of this._symbols) {
      if (null == i9)
        return;
      e16(i9, this._graphicsBySymbol.get(t9) || Be, t9);
    }
  }
  updateAllGraphicsVisibility() {
    null != this._filterVisibility && this._filterVisibility.reapply(), this.modifyGraphics3DGraphicVisibilities((e16) => {
      const t9 = this._updateUserVisibility(e16), i9 = null != this._scaleVisibility && this._scaleVisibility.updateVisibility(e16);
      return t9 || i9;
    });
  }
  _hideAllGraphics() {
    this.modifyGraphics3DGraphicVisibilities((e16) => e16.setVisibilityFlag(A3.GRAPHIC, L3.USER, false));
  }
  _validateRenderer(e16) {
    var _a;
    const t9 = s4(e16, { geometryType: (_a = this.layer) == null ? void 0 : _a.geometryType });
    if (t9) {
      const e17 = `Renderer for layer '${this.layer.title ? `${this.layer.title}, ` : ""}, id:${this.layer.id}' is not supported in a SceneView`;
      n.getLogger(this).warn(e17, t9.message);
    }
  }
  _cleanupSymbols() {
    if (this._graphicsWaitingForSymbol.size > 0 || this._suspendSymbolCleanup)
      return;
    let e16 = false;
    this._symbols.forEach((t9, i9) => {
      if (null == t9 || t9.referenced > 0)
        return;
      const r7 = this._graphicsBySymbol.get(i9);
      r7 && 0 !== r7.size || (this._graphicsBySymbol.delete(i9), this._symbols.delete(i9), this._unusedSymbolsCache.put(i9, t9, r5(t9), e5), e16 = true);
    }), e16 && (this._recomputeExtentPadding(), this.notifyChange("averageSymbolComplexity"));
  }
  get test() {
    return { snapshotInternals: () => ({ graphics: [...this.graphics3DGraphics.keys()].sort(), symbols: [...this._symbols.keys()].sort(), graphicsBySymbol: [...this._graphicsBySymbol.keys()].sort().map((e16) => ({ symbolId: e16, graphics: [...this._graphicsBySymbol.get(e16).keys()].sort() })), graphicsWithoutSymbol: [...this._graphicsWithoutSymbol.keys()].sort(), graphicsDrapedUids: [...this._graphicsDrapedUids].sort(), pendingUpdates: this._pendingUpdates }), symbols: this._symbols, filterVisibility: this._filterVisibility, numPending: this._pendingUpdates.size, forceUpdatePolicy: (e16) => {
      this._forcedUpdatePolicy = e16;
    } };
  }
  get performanceInfo() {
    return new s6(this.graphics3DGraphics.size, this._graphicsWithoutSymbol.size, this._pendingUpdates.size);
  }
};
var ze;
ke.tmpVec = n3(), e([y({ readOnly: true })], ke.prototype, "computedExtent", void 0), e([y()], ke.prototype, "currentRenderer", void 0), e([y()], ke.prototype, "rendererHasGeometryOperations", void 0), e([y()], ke.prototype, "_frameTaskHandle", void 0), e([y()], ke.prototype, "_dataUpdateQueue", void 0), e([y()], ke.prototype, "_updateQueue", void 0), e([y({ readOnly: true })], ke.prototype, "_viewSpatialReference", null), e([y()], ke.prototype, "_rendererChangeAbortController", void 0), e([y()], ke.prototype, "_elevationInfoChangeAbortController", void 0), e([y()], ke.prototype, "_initializeAbortController", void 0), e([y()], ke.prototype, "_elevationAlignment", void 0), e([y()], ke.prototype, "_scaleVisibility", void 0), e([y()], ke.prototype, "_filterVisibility", void 0), e([y()], ke.prototype, "_initializePromise", void 0), e([y()], ke.prototype, "_spatialIndex", void 0), e([y({ readOnly: true })], ke.prototype, "extentPadding", void 0), e([y()], ke.prototype, "_updatingPendingLoadedGraphicsChange", void 0), e([y()], ke.prototype, "_featureStore", void 0), e([y()], ke.prototype, "_objectStates", void 0), e([y()], ke.prototype, "_loadingSymbols", void 0), e([y()], ke.prototype, "preferredUpdatePolicy", void 0), e([y()], ke.prototype, "_forcedUpdatePolicy", void 0), e([y({ readOnly: true })], ke.prototype, "effectiveUpdatePolicy", null), e([y({ constructOnly: true })], ke.prototype, "elevationFeatureExpressionEnabled", void 0), e([y({ constructOnly: true })], ke.prototype, "owner", void 0), e([y({ constructOnly: true })], ke.prototype, "layer", void 0), e([y({ constructOnly: true })], ke.prototype, "graphicSymbolSupported", void 0), e([y({ constructOnly: true })], ke.prototype, "getRenderingInfoWithoutRenderer", void 0), e([y({ constructOnly: true })], ke.prototype, "componentFactories", void 0), e([y({ constructOnly: true })], ke.prototype, "setUidToIdOnAdd", void 0), e([y()], ke.prototype, "featureStore", null), e([y()], ke.prototype, "initializePromise", null), e([y()], ke.prototype, "scaleVisibility", null), e([y()], ke.prototype, "elevationAlignment", null), e([y()], ke.prototype, "objectStates", null), e([y()], ke.prototype, "filterVisibility", null), e([y({ readOnly: true })], ke.prototype, "updating", null), e([y({ readOnly: true })], ke.prototype, "dataUpdating", null), e([y({ readOnly: true })], ke.prototype, "running", null), e([y({ readOnly: true })], ke.prototype, "suspendedOrOutsideOfView", null), e([y({ readOnly: true, dependsOn: [] })], ke.prototype, "updatingRemaining", null), e([y({ readOnly: true })], ke.prototype, "displayFeatureLimit", null), e([y({ readOnly: true, dependsOn: [] })], ke.prototype, "averageSymbolComplexity", null), e([y({ constructOnly: true })], ke.prototype, "hasZ", void 0), e([y({ constructOnly: true })], ke.prototype, "hasM", void 0), e([y()], ke.prototype, "_objectIdField", null), ke = Ve = e([a("esri.views.3d.layers.graphics.Graphics3DCore")], ke), function(e16) {
  e16[e16.NEW = 0] = "NEW", e16[e16.LOADING = 1] = "LOADING", e16[e16.READY = 2] = "READY", e16[e16.REJECTED = 3] = "REJECTED";
}(ze || (ze = {}));
var Me = class {
  constructor() {
    this.add = null, this.renderingInfo = null, this.state = ze.NEW, this.abortController = null, this.remove = null;
  }
  clear() {
    this.add = null, this.renderingInfo = null, this.state = ze.NEW, this.abortController = null, this.remove = null;
  }
};
var We = 10;
var He = n3();
var Ne = n3();
var Be = /* @__PURE__ */ new Map();

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DScaleVisibility.js
var u10 = class extends S {
  constructor(e16) {
    super(e16), this._scaleRangeActive = false, this._layerScaleRangeVisibilityQuery = false, this._extent = null, this._updatingHandles = new h6(), this.graphicsCoreOwner = null, this.layer = null, this.queryGraphicUIDsInExtent = null, this.graphicsCore = null, this.basemapTerrain = null, this.layerScaleEnabled = true, this.suspended = false, this._dirty = true;
  }
  initialize() {
    this.updateScaleRangeActive();
    const e16 = this.graphicsCoreOwner.view.resourceController.scheduler;
    this.addHandles(e16.registerTask(I.SCALE_VISIBILITY, this)), this._updatingHandles.add(() => this.layer.effectiveScaleRange, () => this.layerMinMaxScaleChangeHandler());
  }
  destroy() {
    this._updatingHandles.destroy(), this.removeHandles(), this._dirty = false, this._extent = null, this.graphicsCoreOwner = null, this.layer = null, this.queryGraphicUIDsInExtent = null, this.graphicsCore = null, this.basemapTerrain = null;
  }
  get updating() {
    return this._dirty || this._updatingHandles.updating;
  }
  _setDirty() {
    this._dirty = true;
  }
  setExtent(e16) {
    const i9 = this.graphicsCoreOwner.view.spatialReference, t9 = this.graphicsCoreOwner.view.basemapTerrain.spatialReference;
    if (i9 === t9)
      this._extent = e16 ?? null;
    else {
      const r7 = u3();
      i6(e16, i9, r7, t9) ? this._extent = r7 : this._extent = null;
    }
    this._setDirty();
  }
  scaleRangeActive() {
    return this._scaleRangeActive;
  }
  updateScaleRangeActive() {
    const e16 = this.layer, i9 = e16.effectiveScaleRange;
    let t9 = this.layerScaleEnabled && null != i9 && g2(i9.minScale, i9.maxScale);
    e16.labelingInfo && !t9 && (t9 = e16.labelingInfo.some((e17) => e17 && g2(e17.minScale ?? 0, e17.maxScale ?? 0)));
    const r7 = this._scaleRangeActive !== t9;
    return this._scaleRangeActive = t9, t9 && !this.hasHandles(y4) && this.basemapTerrain ? (this.addHandles(this.basemapTerrain.on("scale-change", (e17) => this._scaleUpdateHandler(e17)), y4), this.layerScaleEnabled && this.addHandles(this.basemapTerrain.on("tiles-visibility-changed", () => this._setDirty()), y4)) : !t9 && this.hasHandles(y4) && this.removeHandles(y4), r7;
  }
  get running() {
    return !(!this.graphicsCoreOwner.view.basemapTerrain || !this.updating);
  }
  runTask(e16) {
    const i9 = this.graphicsCoreOwner.view.basemapTerrain;
    if (this._extent && i9 && i9.ready && this._scaleRangeActive && this.layerScaleEnabled) {
      if (this._layerScaleRangeVisibilityQuery)
        return o4;
      {
        this._layerScaleRangeVisibilityQuery = true;
        const { minScale: e17, maxScale: t9 } = this.layer.effectiveScaleRange;
        i9.queryVisibleScaleRange(this._extent, e17, t9, (e18) => this._finishUpdate(e18));
      }
    } else
      this._finishUpdate(true);
    e16.madeProgress();
  }
  _finishUpdate(e16) {
    this._layerScaleRangeVisibilityQuery = false, this._set("suspended", !e16), this._dirty = false;
  }
  _visibleAtLayerScale(e16) {
    const i9 = this.layer.effectiveScaleRange;
    return !this.layerScaleEnabled || t5(e16, i9.minScale || 0, i9.maxScale || 0);
  }
  _visibleAtLabelScale(e16, i9) {
    return t5(e16, i9.minScale || 0, i9.maxScale || 0);
  }
  _graphicScale(e16) {
    let i9;
    if (null != e16.centroid ? i9 = e16.centroid : null != e16.graphic.geometry && "point" === e16.graphic.geometry.type && (i9 = e16.graphic.geometry), i9) {
      return this.graphicsCoreOwner.view.basemapTerrain ? this.graphicsCoreOwner.view.basemapTerrain.getScale(i9) : 1;
    }
    return null;
  }
  _graphicVisible(e16) {
    if (!this.layerScaleEnabled)
      return true;
    const i9 = this._graphicScale(e16);
    return this._visibleAtLayerScale(i9);
  }
  updateVisibility(e16) {
    if (this._scaleRangeActive) {
      const i9 = this._graphicVisible(e16);
      return e16.setVisibilityFlag(A3.GRAPHIC, L3.SCALE_RANGE, i9);
    }
    return false;
  }
  updateGraphicLabelScaleVisibility(e16) {
    var _a, _b;
    if (!this._scaleRangeActive)
      return false;
    if (!e16.labelLayers || 0 === e16.labelLayers.length)
      return false;
    const i9 = this._graphicScale(e16), t9 = this._updateLabelScaleVisibility(e16, i9);
    return t9 && ((_a = this.graphicsCore.deconflictor) == null ? void 0 : _a.setDirty(), (_b = this.graphicsCore.labeler) == null ? void 0 : _b.setDirty()), t9;
  }
  _updateLabelScaleVisibility(e16, i9) {
    if (!e16.labelLayers || 0 === e16.labelLayers.length)
      return false;
    const t9 = e16.labelLayers[0]._labelClass;
    if (null != (t9 == null ? void 0 : t9.minScale) && null != t9.maxScale) {
      const r7 = this._visibleAtLabelScale(i9, t9);
      if (e16.setVisibilityFlag(A3.LABEL, L3.SCALE_RANGE, r7))
        return true;
    }
    return false;
  }
  _scaleUpdateHandler(e16) {
    var _a, _b;
    if (this._setDirty(), !this.graphicsCore.visible)
      return;
    const i9 = e16.extent, r7 = e16.scale, s8 = this._visibleAtLayerScale(r7);
    let a7 = false;
    const n6 = this.graphicsCoreOwner.view.spatialReference, h8 = e16.spatialReference;
    if (null == h8)
      return void n.getLogger(this).error("scaleUpdate: Internal error, no SpatialReference given for tiles");
    const p3 = !h8.equals(n6);
    if (p3) {
      if (!i6(i9, h8, b8, n6))
        return void n.getLogger(this).error("scaleUpdate: Internal error, cannot project AABR from " + h8 + " to wkid " + n6);
    }
    const d8 = p3 ? b8 : i9;
    this.queryGraphicUIDsInExtent(d8, n6, (e17) => {
      const t9 = this.graphicsCore.getGraphics3DGraphicById(e17);
      if (null == t9)
        return;
      const l8 = t9.centroid;
      null != l8 && (i9[0] > l8.x || i9[1] > l8.y || i9[2] < l8.x || i9[3] < l8.y) || (t9.setVisibilityFlag(A3.GRAPHIC, L3.SCALE_RANGE, s8) && (a7 = true), this._updateLabelScaleVisibility(t9, r7) && (a7 = true));
    }), a7 && ((_a = this.graphicsCore.deconflictor) == null ? void 0 : _a.setDirty(), (_b = this.graphicsCore.labeler) == null ? void 0 : _b.setDirty());
  }
  layerMinMaxScaleChangeHandler() {
    this.updateScaleRangeActive() && !this._scaleRangeActive ? this.graphicsCore.modifyGraphics3DGraphicVisibilities((e16) => e16.setVisibilityFlag(A3.GRAPHIC, L3.SCALE_RANGE, true)) : this._scaleRangeActive && this.graphicsCore.updateAllGraphicsVisibility(), this._setDirty();
  }
};
function g2(e16, i9) {
  return e16 > 0 || i9 > 0;
}
e([y()], u10.prototype, "graphicsCoreOwner", void 0), e([y()], u10.prototype, "layer", void 0), e([y()], u10.prototype, "queryGraphicUIDsInExtent", void 0), e([y()], u10.prototype, "graphicsCore", void 0), e([y()], u10.prototype, "basemapTerrain", void 0), e([y({ constructOnly: true })], u10.prototype, "layerScaleEnabled", void 0), e([y({ readOnly: true })], u10.prototype, "suspended", void 0), e([y({ readOnly: true })], u10.prototype, "updating", null), e([y()], u10.prototype, "_dirty", void 0), u10 = e([a("esri.views.3d.layers.graphics.Graphics3DScaleVisibility")], u10);
var y4 = "terrain-events";
var b8 = u3();

// node_modules/@arcgis/core/views/3d/layers/graphics/ExtentSet.js
var a5 = 0.05;
var l7 = class {
  constructor() {
    this._extents = new l2({ allocator: (t9) => t9 || u3() }), this._tmpExtent = u3(), this._dirty = false;
  }
  get empty() {
    return 0 === this._extents.length;
  }
  get size() {
    return this._extents.length;
  }
  clear() {
    this._extents.clear();
  }
  add(t9) {
    this._contains(t9) || (this._removeContained(t9), e3(this._extents.pushNew(), t9), this._dirty = true);
  }
  pop() {
    return this._dirty && this._mergeTight(), this._extents.pop();
  }
  merge(t9) {
    return this._mergeTight(t9), t9.hasProgressed;
  }
  _mergeTight(t9 = C2) {
    const e16 = this._extents, o8 = /* @__PURE__ */ new Set();
    let i9 = 0;
    for (; i9 !== e16.length; ) {
      e16.sort((t10, e17) => t10[0] - e17[0]), i9 = e16.length, o8.clear();
      for (let i10 = 0; i10 < e16.length; ++i10) {
        if (t9.done)
          return;
        const h8 = e16.at(i10);
        if (h8) {
          for (let t10 = i10 + 1; t10 < e16.length; ++t10) {
            const r7 = e16.at(t10);
            if (null == r7 || r7[0] >= h8[2])
              break;
            o8.add(r7);
          }
          o8.forEach((i11) => {
            if (h8 === i11)
              return;
            if (i11[2] <= h8[0])
              return void o8.delete(i11);
            const l8 = l3(h8), _4 = l3(i11), c5 = this._tmpExtent;
            m(h8, i11, c5);
            const d8 = l8 + _4;
            (l3(c5) - d8) / d8 < a5 && (e3(h8, c5), o8.delete(i11), e16.remove(i11), t9.madeProgress());
          }), o8.add(h8);
        }
      }
    }
    this._dirty = false;
  }
  _contains(t9) {
    return this._extents.some((e16) => R(e16, t9));
  }
  _removeContained(t9) {
    this._extents.filterInPlace((e16) => !R(t9, e16));
  }
  get test() {
    const t9 = this;
    return { containsPoint: (e16) => t9._extents.some((t10) => b2(t10, e16)) };
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DElevationAlignment.js
var p2 = class extends S {
  constructor(t9) {
    super(t9), this._dirtyExtents = new l7(), this._globalDirty = false, this._averageExtentUpdateSize = 0, this._dirtyGraphicsSet = /* @__PURE__ */ new Set(), this._updateElevation = false, this.graphicsCoreOwner = null, this.graphicsCore = null, this.events = new o();
  }
  initialize() {
    var _a;
    const t9 = this.elevationProvider, e16 = this.graphicsCoreOwner.view.resourceController.scheduler;
    this._task = e16.registerTask(d7((_a = this.graphicsCore.layer.elevationInfo) == null ? void 0 : _a.mode), this), this.addHandles([t9.on("elevation-change", (t10) => this._elevationChanged(t10)), d(() => this.graphicsCoreOwner.suspended, () => this._suspendedChange()), this._task, d(() => {
      var _a2;
      return d7((_a2 = this.graphicsCore.layer.elevationInfo) == null ? void 0 : _a2.mode);
    }, (t10) => this._task.priority = t10)]);
  }
  destroy() {
    this._dirtyGraphicsSet.clear(), this.graphicsCoreOwner = null, this.graphicsCore = null, this.queryGraphicUIDsInExtent = null, this.elevationProvider = null;
  }
  clear() {
    this._dirtyGraphicsSet.clear(), this.notifyChange("updating");
  }
  _suspendedChange() {
    true === this.graphicsCoreOwner.suspended ? this._updateElevation = false : false === this.graphicsCoreOwner.suspended && this._updateElevation && (this._globalDirty = true, this.notifyChange("updating"));
  }
  elevationInfoChange() {
    this._globalDirty = true, this.notifyChange("updating");
  }
  get updating() {
    return this.running;
  }
  get running() {
    return this._dirtyGraphicsSet.size > 0 || this._dirtyExtents && !this._dirtyExtents.empty || this._globalDirty;
  }
  get updatingRemaining() {
    return this._dirtyGraphicsSet.size + this._dirtyExtents.size * this._averageExtentUpdateSize;
  }
  runTask(t9) {
    for (this._globalDirty && (this._markAllGraphicsElevationDirty(), this._globalDirty = false, t9.madeProgress()), t9.run(() => this._dirtyExtents.merge(t9)); this.running && !t9.done; )
      this._updateDirtyGraphics(t9), this._updateDirtyExtents(t9);
    this.notifyChange("updating");
  }
  _updateDirtyGraphics(t9) {
    var _a;
    const e16 = this.graphicsCoreOwner.view.renderCoordsHelper, i9 = this.graphicsCore.effectiveUpdatePolicy === C3.ASYNC;
    for (const r7 of this._dirtyGraphicsSet.keys()) {
      const s8 = this.graphicsCore.getGraphics3DGraphicById(r7);
      if (this._dirtyGraphicsSet.delete(r7), null != s8 && (s8.alignWithElevation(this.elevationProvider, e16, i9), (_a = this.graphicsCore.deconflictor) == null ? void 0 : _a.setDirty(), t9.madeProgress()), t9.done)
        return;
    }
  }
  _updateDirtyExtents(t9) {
    for (; !this._dirtyExtents.empty && !t9.done; ) {
      const e16 = this._dirtyExtents.pop(), i9 = this.elevationProvider.spatialReference;
      this.events.emit("invalidate-elevation", { extent: e16, spatialReference: i9 });
      const r7 = this._dirtyGraphicsSet.size;
      this.queryGraphicUIDsInExtent(e16, i9, (t10) => {
        const e17 = this.graphicsCore.getGraphics3DGraphicById(t10);
        null != e17 && e17.needsElevationUpdates() && this._dirtyGraphicsSet.add(t10);
      }), this._averageExtentUpdateSize = 0.1 * (this._dirtyGraphicsSet.size - r7) + 0.9 * this._averageExtentUpdateSize, t9.madeProgress();
    }
  }
  _markAllGraphicsElevationDirty() {
    this._dirtyExtents.clear(), this._dirtyGraphicsSet.clear(), this.graphicsCore.graphics3DGraphics.forEach((t9, e16) => this._dirtyGraphicsSet.add(e16));
  }
  _elevationChanged(t9) {
    if ("scene" === t9.context && (!this.graphicsCore.layer.elevationInfo || "relative-to-scene" !== this.graphicsCore.layer.elevationInfo.mode))
      return;
    const e16 = t9.extent;
    if (this.graphicsCoreOwner.suspended) {
      if (!this._updateElevation) {
        const t10 = this.graphicsCore.computedExtent;
        t10 && e16[2] > t10.xmin && e16[0] < t10.xmax && e16[3] > t10.ymin && e16[1] < t10.ymax && (this._updateElevation = true);
      }
      this.events.emit("invalidate-elevation", t9);
    } else
      e16[0] === -1 / 0 ? this._globalDirty = true : this._dirtyExtents.add(e16), this.notifyChange("updating");
  }
};
function d7(t9) {
  return null == t9 ? I.ELEVATION_ALIGNMENT : "relative-to-scene" === t9 ? I.ELEVATION_ALIGNMENT_SCENE : I.ELEVATION_ALIGNMENT;
}
e([y()], p2.prototype, "graphicsCoreOwner", void 0), e([y()], p2.prototype, "graphicsCore", void 0), e([y()], p2.prototype, "queryGraphicUIDsInExtent", void 0), e([y()], p2.prototype, "elevationProvider", void 0), e([y({ readOnly: true })], p2.prototype, "updating", null), e([y({ readOnly: true })], p2.prototype, "updatingRemaining", null), p2 = e([a("esri.views.3d.layers.graphics.Graphics3DElevationAlignment")], p2);

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DFrustumVisibility.js
var h7 = 1.2;
var u11 = class extends S {
  constructor(e16) {
    super(e16), this.suspended = false, this._extent = null, this._extentIntersectionDirty = true, this._isVisibleBelowSurfaceInternal = false, this.graphicsCoreOwner = null, this.updating = true;
  }
  initialize() {
    const { graphicsCoreOwner: e16 } = this;
    this._extentIntersection = new N2({ renderCoordsHelper: e16.view.renderCoordsHelper });
    const t9 = e16.view, n6 = t9.basemapTerrain, o8 = t9.resourceController.scheduler;
    this.addHandles([t9.on("resize", () => this._viewChange()), d(() => t9.state.camera, () => this._viewChange(), C), o8.registerTask(I.FRUSTUM_VISIBILITY, this), d(() => n6.visibleElevationBounds, () => this._elevationBoundsChange())]), "local" === t9.viewingMode ? this._isVisibleBelowSurface = true : this.addHandles([d(() => {
      var _a, _b, _c;
      return [n6.baseOpacity, n6.wireframe, (_c = (_b = (_a = t9.map) == null ? void 0 : _a.ground) == null ? void 0 : _b.navigationConstraint) == null ? void 0 : _c.type];
    }, () => this._updateIsVisibleBelowSurface(), P)]);
  }
  destroy() {
    this._set("graphicsCoreOwner", null), this._extent = null, this._extentIntersection = null;
  }
  _setDirty() {
    this.updating || this._set("updating", true);
  }
  setExtent(e16) {
    this._extent = e16, this._extentIntersectionDirty = true, this._setDirty();
  }
  _viewChange() {
    this._setDirty();
  }
  _elevationBoundsChange() {
    this._setDirty(), this._extentIntersectionDirty = true;
  }
  set _isVisibleBelowSurface(e16) {
    this._isVisibleBelowSurfaceInternal = e16, this._setDirty(), this._extentIntersectionDirty = true;
  }
  _updateIsVisibleBelowSurface() {
    var _a, _b;
    const e16 = this.graphicsCoreOwner.view, t9 = e16.basemapTerrain, s8 = "local" === e16.viewingMode, i9 = "none" === ((_b = (_a = e16.map.ground) == null ? void 0 : _a.navigationConstraint) == null ? void 0 : _b.type);
    this._isVisibleBelowSurface = s8 || !t9.opaque || i9;
  }
  _updateExtentIntersection() {
    if (!this._extentIntersectionDirty)
      return;
    this._extentIntersectionDirty = false;
    const e16 = this.graphicsCoreOwner.view;
    let t9;
    if (this._isVisibleBelowSurfaceInternal)
      t9 = -0.3 * s3(e16.spatialReference).radius;
    else {
      const { min: s8, max: i9 } = e16.basemapTerrain.visibleElevationBounds;
      t9 = s8 - Math.max(1, (i9 - s8) * (h7 - 1));
    }
    this._extentIntersection.update(this._extent, e16.spatialReference, t9);
  }
  get running() {
    return this.updating;
  }
  runTask(e16) {
    if (this._set("updating", false), !this._extent)
      return this._set("suspended", false), o4;
    this._updateExtentIntersection();
    const t9 = this.graphicsCoreOwner.view.frustum, s8 = s3(this.graphicsCoreOwner.view.spatialReference).radius;
    this._set("suspended", !this._extentIntersection.isVisibleInFrustum(t9, s8)), e16.madeProgress();
  }
};
e([y({ readOnly: true })], u11.prototype, "suspended", void 0), e([y({ constructOnly: true })], u11.prototype, "graphicsCoreOwner", void 0), e([y({ readOnly: true })], u11.prototype, "updating", void 0), u11 = e([a("esri.views.3d.layers.graphics.Graphics3DFrustumVisibility")], u11);

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/Object3DStateSet.js
var t8;
!function(e16) {
  e16[e16.Object = 0] = "Object", e16[e16.RenderGeometry = 1] = "RenderGeometry", e16[e16.External = 2] = "External", e16[e16.COUNT = 3] = "COUNT";
}(t8 || (t8 = {}));
var r6 = class {
  constructor() {
    this._items = [];
  }
  addObject(e16, r7) {
    this._items.push({ type: t8.Object, objectStateId: r7, object: e16 });
  }
  addRenderGeometry(e16, r7, o8) {
    this._items.push({ type: t8.RenderGeometry, objectStateId: r7, renderGeometry: e16, owner: o8 });
  }
  addExternal(e16, r7) {
    this._items.push({ type: t8.External, objectStateId: r7, remove: e16 });
  }
  remove(e16) {
    for (let t9 = this._items.length - 1; t9 >= 0; --t9) {
      const r7 = this._items[t9];
      r7.objectStateId === e16 && (o7(r7), this._items.splice(t9, 1));
    }
  }
  removeObject(e16) {
    for (let r7 = this._items.length - 1; r7 >= 0; --r7) {
      const s8 = this._items[r7];
      s8.type === t8.Object && s8.object === e16 && (o7(s8), this._items.splice(r7, 1));
    }
  }
  removeRenderGeometry(e16) {
    for (let r7 = this._items.length - 1; r7 >= 0; --r7) {
      const s8 = this._items[r7];
      s8.type === t8.RenderGeometry && s8.renderGeometry === e16 && (o7(s8), this._items.splice(r7, 1));
    }
  }
  removeAll() {
    this._items.forEach((e16) => {
      o7(e16);
    }), this._items = [];
  }
};
function o7(r7) {
  switch (r7.type) {
    case t8.Object:
      r7.objectStateId.channel === t4.Highlight ? r7.object.removeHighlight(r7.objectStateId) : r7.objectStateId.channel === t4.MaskOccludee && r7.object.removeOcclude(r7.objectStateId);
      break;
    case t8.RenderGeometry:
      r7.owner.removeRenderGeometryObjectState(r7.renderGeometry, r7.objectStateId);
      break;
    case t8.External:
      r7.remove(r7.objectStateId);
  }
}

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DObjectStateSet.js
var e15 = class {
  constructor(e16, i9) {
    this.stateType = e16, this.objectIdField = i9, this.objectStateSet = new r6(), this.ids = /* @__PURE__ */ new Set(), this.paused = false;
  }
  hasGraphic(t9) {
    if (this.objectIdField) {
      const e16 = t9.graphic.attributes[this.objectIdField];
      return this.ids.has(e16);
    }
    return this.ids.has(t9.graphic.uid);
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DObjectStates.js
var s7 = class {
  constructor(t9) {
    this._graphicsCore = t9, this._stateSets = new Array();
  }
  destroy() {
    this.reset(), this._stateSets = null;
  }
  reset() {
    this._stateSets && (this._stateSets.forEach((t9) => t9.objectStateSet.removeAll()), this._stateSets.length = 0);
  }
  acquireSet(s8, a7) {
    const i9 = new e15(s8, a7);
    this._stateSets.push(i9);
    const h8 = e2(() => this.releaseSet(i9));
    return { set: i9, handle: h8 };
  }
  releaseSet(t9) {
    t9.objectStateSet.removeAll();
    const e16 = this._stateSets ? this._stateSets.indexOf(t9) : -1;
    -1 !== e16 && this._stateSets.splice(e16, 1);
  }
  setUid(t9, e16) {
    t9.ids.add(e16);
    const s8 = this._graphicsCore.graphics3DGraphics.get(e16);
    s8 && a6(s8, t9);
  }
  setUids(t9, e16) {
    e16.forEach((e17) => this.setUid(t9, e17));
  }
  setObjectIds(t9, e16) {
    e16.forEach((e17) => t9.ids.add(e17)), this._initializeSet(t9);
  }
  addGraphic(t9) {
    this._stateSets.forEach((e16) => {
      !e16.paused && e16.hasGraphic(t9) && a6(t9, e16);
    });
  }
  removeGraphic(t9) {
    this._stateSets.forEach((e16) => {
      e16.hasGraphic(t9) && i8(t9, e16);
    });
  }
  allGraphicsDeleted() {
    this._stateSets && this._stateSets.forEach((t9) => t9.objectStateSet.removeAll());
  }
  _initializeSet(t9) {
    const e16 = this._graphicsCore.graphics3DGraphics;
    t9.objectIdField ? e16.forEach((e17) => {
      e17 && t9.hasGraphic(e17) && a6(e17, t9);
    }) : t9.ids.forEach((s8) => {
      const i9 = e16.get(s8);
      i9 && a6(i9, t9);
    });
  }
  get test() {
    return { states: this._stateSets };
  }
};
function a6(t9, e16) {
  t9.addObjectStateSet(e16.stateType, e16.objectStateSet);
}
function i8(t9, e16) {
  t9.removeObjectState(e16.objectStateSet);
}

export {
  e12 as e,
  s6 as s,
  ke,
  u10 as u,
  l7 as l,
  p2 as p,
  u11 as u2,
  s7 as s2
};
//# sourceMappingURL=chunk-UC6QLXCR.js.map
