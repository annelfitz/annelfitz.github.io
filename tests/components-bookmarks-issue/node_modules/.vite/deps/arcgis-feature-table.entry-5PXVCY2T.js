import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  importCoreReactiveUtils,
  newLayersFeatureLayer,
  newWidgetsFeatureTable
} from "./chunk-YXW2SI4L.js";
import {
  addHandles,
  checkForView,
  isNullOrEmptyString,
  referenceElementHelper
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-feature-table.entry.js
var featureTableCss = ".arcgis-feature-table{width:100%;height:100%}";
var ArcgisFeatureTable = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.arcgisFeatureTableReady = createEvent(this, "arcgisFeatureTableReady", 7);
    this.featureTableSelectionChange = createEvent(this, "featureTableSelectionChange", 7);
    this._watchHandles = [];
    this.referenceElement = void 0;
    this.activeFilters = void 0;
    this.activeSortOrders = [];
    this.attachmentsEnabled = false;
    this.autoRefreshEnabled = true;
    this.columnReorderingEnabled = true;
    this.columns = void 0;
    this.editingEnabled = false;
    this.filterGeometry = void 0;
    this.hiddenFields = true;
    this.highlightEnabled = true;
    this.highlightIds = void 0;
    this.layer = void 0;
    this.menu = void 0;
    this.menuConfig = void 0;
    this.multiSortEnabled = false;
    this.pageSize = 50;
    this.returnGeometryEnabled = false;
    this.state = void 0;
    this.tableTemplate = void 0;
    this.timeZone = void 0;
    this.itemId = void 0;
    this.url = void 0;
    this.visibleElementsHeader = true;
    this.visibleElementsMenu = true;
    this.visibleElementsSelectionColumn = true;
    this.visibleElementsColumnMenus = true;
    this.visibleElementsMenuItemsClearSelection = true;
    this.visibleElementsMenuItemsDeleteSelection = true;
    this.visibleElementsMenuItemsRefreshData = true;
    this.visibleElementsMenuItemsSelectedRecordsShowAllToggle = true;
    this.visibleElementsMenuItemsToggleColumns = true;
    this.visibleElementsMenuItemsZoomToSelection = true;
    this.view = void 0;
    this.widget = void 0;
  }
  referenceElementWatcher(value) {
    void referenceElementHelper(this, value);
  }
  attachmentsEnabledWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.attachmentsEnabled = value;
    }
  }
  autoRefreshEnabledWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.autoRefreshEnabled = value;
    }
  }
  columnReorderingEnabledWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.columnReorderingEnabled = value;
    }
  }
  editingEnabledWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.editingEnabled = value;
    }
  }
  filterGeometryWatcher(value) {
    if (value && this.widget) {
      this.widget.filterGeometry = value;
    }
  }
  hiddenFieldsWatcher(value) {
    if (value && this.widget) {
      this.widget.hiddenFields = value;
    }
  }
  highlightEnabledWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.highlightEnabled = value;
    }
  }
  highlightIdsWatcher(value) {
    if (value && this.widget) {
      this.widget.highlightIds = value;
    }
  }
  layerWatcher(value) {
    if (value && this.widget) {
      this.widget.layer = value;
    } else if (!value) {
      this.widget.layer = null;
    }
  }
  menuConfigWatcher(value) {
    if (value && this.widget) {
      this.widget.menuConfig = value;
    }
  }
  multiSortEnabledWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.multiSortEnabled = value;
    }
  }
  pageSizeWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.pageSize = value;
    }
  }
  returnGeometryEnabledWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.returnGeometryEnabled = value;
    }
  }
  tableTemplateWatcher(value) {
    if (value && this.widget) {
      this.widget.tableTemplate = value;
    }
  }
  timeZoneWatcher(value) {
    if (this.widget) {
      this.widget.timeZone = value;
    }
  }
  async itemIdWatcher(value, old) {
    if (isNullOrEmptyString(value)) {
      this.layer = null;
    } else if (value && value !== old) {
      const layer = await newLayersFeatureLayer({
        portalItem: {
          id: value
        }
      });
      this.layer = layer;
    }
  }
  async urlWatcher(value, old) {
    if (value && value !== old) {
      const layer = await newLayersFeatureLayer({ url: value });
      this.layer = layer;
    }
  }
  visibleElementsHeaderWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        header: value
      };
    }
  }
  visibleElementsMenuWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        menu: value
      };
    }
  }
  visibleElementsSelectionColumnWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        selectionColumn: value
      };
    }
  }
  visibleElementsColumnMenusWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        columnMenus: value
      };
    }
  }
  visibleElementsMenuItemsClearSelectionWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        menuItems: {
          ...this.widget.visibleElements.menuItems,
          clearSelection: value
        }
      };
    }
  }
  visibleElementsMenuItemsDeleteSelectionWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        menuItems: {
          ...this.widget.visibleElements.menuItems,
          deleteSelection: value
        }
      };
    }
  }
  visibleElementsMenuItemsRefreshDataWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        menuItems: {
          ...this.widget.visibleElements.menuItems,
          refreshData: value
        }
      };
    }
  }
  visibleElementsMenuItemsSelectedRecordsShowAllToggleWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        menuItems: {
          ...this.widget.visibleElements.menuItems,
          selectedRecordsShowAllToggle: value
        }
      };
    }
  }
  visibleElementsMenuItemsToggleColumnsWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        menuItems: {
          ...this.widget.visibleElements.menuItems,
          toggleColumns: value
        }
      };
    }
  }
  visibleElementsMenuItemsZoomToSelectionWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        menuItems: {
          ...this.widget.visibleElements.menuItems,
          zoomToSelection: value
        }
      };
    }
  }
  viewWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.view = value;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Methods
  //
  //--------------------------------------------------------------------------
  async clearSelectionFilter() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.clearSelectionFilter();
  }
  async deleteSelection(showWarningPrompt) {
    var _a;
    await ((_a = this.widget) == null ? void 0 : _a.deleteSelection(showWarningPrompt));
  }
  async filterBySelection() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.filterBySelection();
  }
  async findColumn(fieldName) {
    var _a;
    return (_a = this.widget) == null ? void 0 : _a.findColumn(fieldName);
  }
  async hideColumn(fieldName) {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.hideColumn(fieldName);
  }
  async refresh() {
    var _a;
    await ((_a = this.widget) == null ? void 0 : _a.refresh());
  }
  async scrollToIndex(index) {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.scrollToIndex(index);
  }
  async showAllColumns() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.showAllColumns();
  }
  async showColumn(fieldName) {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.showColumn(fieldName);
  }
  async sortColumn(path, direction) {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.sortColumn(path, direction);
  }
  async zoomToSelection() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.zoomToSelection();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = await this._createParams();
    const widget = await newWidgetsFeatureTable(params);
    this.widget = widget;
    await this._addWatchers();
    this._proxyEvents();
    this._addContainer();
    this.arcgisFeatureTableReady.emit();
    checkForView(this);
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    return h("div", { class: "arcgis-feature-table", ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  _addContainer() {
    this.widget.container = this.childElem;
  }
  async _addWatchers() {
    const { watch } = await importCoreReactiveUtils();
    addHandles(this, watch(() => this.widget.activeFilters, (value) => this.activeFilters = value, {
      initial: true
    }));
    addHandles(this, watch(() => this.widget.activeSortOrders, (value) => this.activeSortOrders = value, {
      initial: true
    }));
    addHandles(this, watch(() => this.widget.columns, (value) => this.columns = value, {
      initial: true
    }));
    addHandles(this, watch(() => this.widget.menu, (value) => this.menu = value, {
      initial: true
    }));
    addHandles(this, watch(() => this.widget.state, (value) => this.state = value, {
      initial: true
    }));
  }
  async _createParams() {
    const params = {};
    params.visibleElements = {
      header: this.visibleElementsHeader,
      menu: this.visibleElementsMenu,
      selectionColumn: this.visibleElementsSelectionColumn,
      columnMenus: this.visibleElementsColumnMenus,
      menuItems: {
        clearSelection: this.visibleElementsMenuItemsClearSelection,
        deleteSelection: this.visibleElementsMenuItemsDeleteSelection,
        refreshData: this.visibleElementsMenuItemsRefreshData,
        selectedRecordsShowAllToggle: this.visibleElementsMenuItemsSelectedRecordsShowAllToggle,
        toggleColumns: this.visibleElementsMenuItemsToggleColumns,
        zoomToSelection: this.visibleElementsMenuItemsZoomToSelection
      }
    };
    if (this.view) {
      params.view = this.view;
    }
    if (this.attachmentsEnabled !== void 0) {
      params.attachmentsEnabled = this.attachmentsEnabled;
    }
    if (this.autoRefreshEnabled !== void 0) {
      params.autoRefreshEnabled = this.autoRefreshEnabled;
    }
    if (this.columnReorderingEnabled !== void 0) {
      params.columnReorderingEnabled = this.columnReorderingEnabled;
    }
    if (this.editingEnabled !== void 0) {
      params.editingEnabled = this.editingEnabled;
    }
    if (this.filterGeometry !== void 0) {
      params.filterGeometry = this.filterGeometry;
    }
    if (this.hiddenFields !== void 0) {
      params.hiddenFields = this.hiddenFields;
    }
    if (this.highlightEnabled !== void 0) {
      params.highlightEnabled = this.highlightEnabled;
    }
    if (this.highlightIds !== void 0) {
      params.highlightIds = this.highlightIds;
    }
    if (this.menuConfig !== void 0) {
      params.menuConfig = this.menuConfig;
    }
    if (this.multiSortEnabled !== void 0) {
      params.multiSortEnabled = this.multiSortEnabled;
    }
    if (this.pageSize !== void 0) {
      params.pageSize = this.pageSize;
    }
    if (this.tableTemplate !== void 0) {
      params.tableTemplate = this.tableTemplate;
    }
    if (this.timeZone !== void 0) {
      params.timeZone = this.timeZone;
    }
    if (this.layer !== void 0) {
      params.layer = this.layer;
    } else if (this.url) {
      params.layer = await newLayersFeatureLayer({ url: this.url });
    } else if (this.itemId) {
      params.layer = await newLayersFeatureLayer({
        portalItem: {
          id: this.itemId
        }
      });
    }
    return params;
  }
  _proxyEvents() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.highlightIds.on("change", (e) => this.featureTableSelectionChange.emit(e));
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "referenceElement": ["referenceElementWatcher"],
      "attachmentsEnabled": ["attachmentsEnabledWatcher"],
      "autoRefreshEnabled": ["autoRefreshEnabledWatcher"],
      "columnReorderingEnabled": ["columnReorderingEnabledWatcher"],
      "editingEnabled": ["editingEnabledWatcher"],
      "filterGeometry": ["filterGeometryWatcher"],
      "hiddenFields": ["hiddenFieldsWatcher"],
      "highlightEnabled": ["highlightEnabledWatcher"],
      "highlightIds": ["highlightIdsWatcher"],
      "layer": ["layerWatcher"],
      "menuConfig": ["menuConfigWatcher"],
      "multiSortEnabled": ["multiSortEnabledWatcher"],
      "pageSize": ["pageSizeWatcher"],
      "returnGeometryEnabled": ["returnGeometryEnabledWatcher"],
      "tableTemplate": ["tableTemplateWatcher"],
      "timeZone": ["timeZoneWatcher"],
      "itemId": ["itemIdWatcher"],
      "url": ["urlWatcher"],
      "visibleElementsHeader": ["visibleElementsHeaderWatcher"],
      "visibleElementsMenu": ["visibleElementsMenuWatcher"],
      "visibleElementsSelectionColumn": ["visibleElementsSelectionColumnWatcher"],
      "visibleElementsColumnMenus": ["visibleElementsColumnMenusWatcher"],
      "visibleElementsMenuItemsClearSelection": ["visibleElementsMenuItemsClearSelectionWatcher"],
      "visibleElementsMenuItemsDeleteSelection": ["visibleElementsMenuItemsDeleteSelectionWatcher"],
      "visibleElementsMenuItemsRefreshData": ["visibleElementsMenuItemsRefreshDataWatcher"],
      "visibleElementsMenuItemsSelectedRecordsShowAllToggle": ["visibleElementsMenuItemsSelectedRecordsShowAllToggleWatcher"],
      "visibleElementsMenuItemsToggleColumns": ["visibleElementsMenuItemsToggleColumnsWatcher"],
      "visibleElementsMenuItemsZoomToSelection": ["visibleElementsMenuItemsZoomToSelectionWatcher"],
      "view": ["viewWatcher"]
    };
  }
};
ArcgisFeatureTable.style = featureTableCss;
export {
  ArcgisFeatureTable as arcgis_feature_table
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-feature-table.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-feature-table.entry-5PXVCY2T.js.map
