{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/esm/src/components/value-list/resources.ts", "../../@esri/calcite-components/dist/esm/src/components/value-list/utils.ts", "../../@esri/calcite-components/dist/esm/src/components/value-list/value-list.scss?tag=calcite-value-list&encapsulation=shadow", "../../@esri/calcite-components/dist/esm/src/components/value-list/value-list.tsx", "../../@esri/calcite-components/dist/esm/src/components/value-list-item/resources.ts", "../../@esri/calcite-components/dist/esm/src/components/value-list-item/value-list-item.scss?tag=calcite-value-list-item&encapsulation=shadow", "../../@esri/calcite-components/dist/esm/src/components/value-list-item/value-list-item.tsx"],
  "sourcesContent": ["export const CSS = {\n  container: \"container\",\n  handle: \"handle\",\n};\nexport enum ICON_TYPES {\n  grip = \"grip\",\n}\nexport const TEXT = {\n  filterResults: \"Filter results\",\n};\n", "import { getItemIndex } from \"../pick-list/shared-list-logic\";\nimport { DragStatus } from \"./interfaces\";\nimport { ValueList } from \"./value-list\";\n\nexport function getScreenReaderText(\n  item: HTMLCalciteValueListItemElement,\n  status: DragStatus,\n  valueList: ValueList<HTMLCalciteValueListItemElement>,\n): string {\n  const { items, messages } = valueList;\n\n  const total = items.length;\n  const position = getItemIndex(valueList, item) + 1;\n  const template =\n    status === \"idle\"\n      ? messages.dragHandleIdle\n      : status === \"active\"\n        ? messages.dragHandleActive\n        : status === \"change\"\n          ? messages.dragHandleChange\n          : messages.dragHandleCommit;\n\n  return replacePlaceholders(template, item.label, position, total);\n}\n\nexport function getHandleAndItemElement(event: KeyboardEvent | FocusEvent): {\n  handle: HTMLCalciteHandleElement;\n  item: HTMLCalciteValueListItemElement;\n} {\n  const handle = event\n    .composedPath()\n    .find((item: HTMLElement) => item.dataset?.jsHandle !== undefined) as HTMLCalciteHandleElement;\n\n  const item = event\n    .composedPath()\n    .find(\n      (item: HTMLElement) => item.tagName?.toLowerCase() === \"calcite-value-list-item\",\n    ) as HTMLCalciteValueListItemElement;\n\n  return { handle, item };\n}\n\nexport function replacePlaceholders(text: string, label: string, position: number, total: number): string {\n  const replacePosition = text.replace(\"{position}\", position.toString());\n  const replaceLabel = replacePosition.replace(\"{itemLabel}\", label);\n  return replaceLabel.replace(\"{total}\", total.toString());\n}\n", ":host {\n  @apply text-color-2\n    text-n1\n    relative\n    box-border\n    flex\n    flex-shrink-0\n    flex-grow-0\n    flex-col\n    items-stretch\n    bg-transparent;\n  * {\n    @apply box-border;\n  }\n}\n\n@include disabled();\n\ncalcite-value-list-item:last-of-type {\n  @apply shadow-none;\n}\n\n:host([filter-enabled]) header {\n  @apply bg-foreground-1\n    mb-1\n    flex\n    items-center\n    justify-end;\n  &.sticky-pos {\n    @apply sticky top-0 z-sticky;\n  }\n  @apply shadow-border-bottom;\n}\n\ncalcite-filter {\n  @apply mb-px;\n}\n\n.assistive-text {\n  @apply sr-only;\n}\n\n@include base-component();\n", "import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Listen,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport Sortable from \"sortablejs\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport { createObserver } from \"../../utils/observers\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport {\n  calciteInternalListItemValueChangeHandler,\n  calciteListFocusOutHandler,\n  calciteListItemChangeHandler,\n  cleanUpObserver,\n  deselectRemovedItems,\n  deselectSiblingItems,\n  getItemData,\n  handleFilter,\n  handleFilterEvent,\n  handleInitialFilter,\n  initialize,\n  initializeObserver,\n  ItemData,\n  keyDownHandler,\n  ListFocusId,\n  moveItemIndex,\n  mutationObserverCallback,\n  removeItem,\n  selectSiblings,\n  setFocus,\n  setUpItems,\n} from \"../pick-list/shared-list-logic\";\nimport List from \"../pick-list/shared-list-render\";\nimport { ListItemAndHandle } from \"../value-list-item/interfaces\";\nimport { ValueListMessages } from \"./assets/value-list/t9n\";\nimport { CSS, ICON_TYPES } from \"./resources\";\nimport { getHandleAndItemElement, getScreenReaderText } from \"./utils\";\nimport {\n  DragDetail,\n  connectSortableComponent,\n  disconnectSortableComponent,\n  SortableComponent,\n  dragActive,\n} from \"../../utils/sortableComponent\";\nimport { focusElement } from \"../../utils/dom\";\n\n/**\n * @deprecated Use the `list` component instead.\n * @slot - A slot for adding `calcite-value-list-item` elements. List items are displayed as a vertical list.\n * @slot menu-actions - A slot for adding a button and menu combination for performing actions, such as sorting.\n */\n@Component({\n  tag: \"calcite-value-list\",\n  styleUrl: \"value-list.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class ValueList<\n    ItemElement extends HTMLCalciteValueListItemElement = HTMLCalciteValueListItemElement,\n  >\n  implements\n    InteractiveComponent,\n    LoadableComponent,\n    LocalizedComponent,\n    T9nComponent,\n    SortableComponent\n{\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * When provided, the method will be called to determine whether the element can move from the list.\n   */\n  @Prop() canPull: (detail: DragDetail) => boolean;\n\n  /**\n   * When provided, the method will be called to determine whether the element can be added from another list.\n   */\n  @Prop() canPut: (detail: DragDetail) => boolean;\n\n  /**\n   * When `true`, `calcite-value-list-item`s are sortable via a draggable button.\n   */\n  @Prop({ reflect: true }) dragEnabled = false;\n\n  /**\n   * The currently filtered items.\n   *\n   * @readonly\n   */\n  @Prop({ mutable: true }) filteredItems: HTMLCalciteValueListItemElement[] = [];\n\n  /**\n   * The currently filtered data.\n   *\n   * @readonly\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by shared-list-logic module\n  @Prop({ mutable: true }) filteredData: ItemData = [];\n\n  /**\n   * When `true`, an input appears at the top of the component that can be used by end users to filter list items.\n   */\n  @Prop({ reflect: true }) filterEnabled = false;\n\n  /**\n   * Placeholder text for the filter's input field.\n   */\n  @Prop({ reflect: true }) filterPlaceholder: string;\n\n  /**\n   * Text for the filter input field.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by shared-list-logic module\n  @Prop({ reflect: true, mutable: true }) filterText: string;\n\n  /**\n   * The component's group identifier.\n   *\n   * To drag elements from one list into another, both lists must have the same group value.\n   */\n  @Prop({ reflect: true }) group?: string;\n\n  /**\n   * When `true`, a busy indicator is displayed.\n   */\n  @Prop({ reflect: true }) loading = false;\n\n  /**\n   * Similar to standard radio buttons and checkboxes.\n   * When `true`, a user can select multiple `calcite-value-list-item`s at a time.\n   * When `false`, only a single `calcite-value-list-item` can be selected at a time,\n   * and a new selection will deselect previous selections.\n   */\n  @Prop({ reflect: true }) multiple = false;\n\n  /**\n   * When `true` and single-selection is enabled, the selection changes when navigating `calcite-value-list-item`s via keyboard.\n   */\n  @Prop({ reflect: true }) selectionFollowsFocus = false;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<ValueListMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: ValueListMessages;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteValueListElement;\n\n  @State() dataForFilter: ItemData = [];\n\n  @State() defaultMessages: ValueListMessages;\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() selectedValues: Map<string, ItemElement> = new Map();\n\n  items: ItemElement[];\n\n  lastSelectedItem: ItemElement = null;\n\n  mutationObserver = createObserver(\"mutation\", mutationObserverCallback.bind(this));\n\n  sortable: Sortable;\n\n  emitCalciteListChange: () => void;\n\n  emitCalciteListFilter: () => void;\n\n  filterEl: HTMLCalciteFilterElement;\n\n  assistiveTextEl: HTMLSpanElement;\n\n  handleSelector = `.${CSS.handle}`;\n\n  dragSelector = \"calcite-value-list-item\";\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    if (dragActive(this)) {\n      return;\n    }\n\n    connectInteractive(this);\n    connectLocalized(this);\n    connectMessages(this);\n    initialize.call(this);\n    initializeObserver.call(this);\n    this.setUpSorting();\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n    handleInitialFilter.call(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  disconnectedCallback(): void {\n    if (dragActive(this)) {\n      return;\n    }\n\n    disconnectInteractive(this);\n    disconnectSortableComponent(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    cleanUpObserver.call(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Emits when any of the list item selections have changed.\n   */\n  @Event({ cancelable: false }) calciteListChange: EventEmitter<\n    Map<string, HTMLCalciteValueListItemElement>\n  >;\n\n  /**\n   * Emits when the order of the list has changed.\n   */\n  @Event({ cancelable: false }) calciteListOrderChange: EventEmitter<any[]>;\n\n  /**\n   * Emits when a filter has changed.\n   */\n  @Event({ cancelable: false }) calciteListFilter: EventEmitter<void>;\n\n  @Listen(\"focusout\")\n  calciteListFocusOutHandler(event: FocusEvent): void {\n    calciteListFocusOutHandler.call(this, event);\n  }\n\n  @Listen(\"calciteListItemRemove\")\n  calciteListItemRemoveHandler(event: CustomEvent<void>): void {\n    removeItem.call(this, event);\n  }\n\n  @Listen(\"calciteListItemChange\")\n  calciteListItemChangeHandler(event: CustomEvent): void {\n    calciteListItemChangeHandler.call(this, event);\n  }\n\n  @Listen(\"calciteInternalListItemPropsChange\")\n  calciteInternalListItemPropsChangeHandler(event: CustomEvent): void {\n    event.stopPropagation();\n    this.setUpFilter();\n  }\n\n  @Listen(\"calciteInternalListItemValueChange\")\n  calciteInternalListItemValueChangeHandler(event: CustomEvent): void {\n    calciteInternalListItemValueChangeHandler.call(this, event);\n    event.stopPropagation();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  onGlobalDragStart(): void {\n    cleanUpObserver.call(this);\n  }\n\n  onGlobalDragEnd(): void {\n    initializeObserver.call(this);\n  }\n\n  onDragEnd(): void {}\n\n  onDragStart(): void {}\n\n  onDragSort(): void {\n    this.items = Array.from(this.el.querySelectorAll<ItemElement>(\"calcite-value-list-item\"));\n    const values = this.items.map((item) => item.value);\n    this.calciteListOrderChange.emit(values);\n  }\n\n  getItems(): ItemElement[] {\n    return Array.from(this.el.querySelectorAll<ItemElement>(\"calcite-value-list-item\"));\n  }\n\n  setUpItems(): void {\n    setUpItems.call(this, \"calcite-value-list-item\");\n    this.setUpSorting();\n  }\n\n  setUpFilter(): void {\n    if (this.filterEnabled) {\n      this.dataForFilter = this.getItemData();\n    }\n  }\n\n  setFilterEl = (el: HTMLCalciteFilterElement): void => {\n    this.filterEl = el;\n  };\n\n  setFilteredItems = (filteredItems: HTMLCalciteValueListItemElement[]): void => {\n    this.filteredItems = filteredItems;\n  };\n\n  setUpSorting(): void {\n    const { dragEnabled } = this;\n\n    if (!dragEnabled) {\n      return;\n    }\n\n    connectSortableComponent(this);\n  }\n\n  deselectRemovedItems = deselectRemovedItems.bind(this);\n\n  deselectSiblingItems = deselectSiblingItems.bind(this);\n\n  selectSiblings = selectSiblings.bind(this);\n\n  handleFilter = handleFilter.bind(this);\n\n  handleFilterEvent = handleFilterEvent.bind(this);\n\n  getItemData = getItemData.bind(this);\n\n  keyDownHandler = (event: KeyboardEvent): void => {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    const { handle, item } = getHandleAndItemElement(event);\n    if (handle && !item.handleActivated && event.key === \" \") {\n      this.updateScreenReaderText(getScreenReaderText(item, \"commit\", this));\n    }\n\n    if (!handle || !item.handleActivated) {\n      keyDownHandler.call(this, event);\n      return;\n    }\n\n    event.preventDefault();\n\n    const { items } = this;\n\n    if (event.key === \" \") {\n      this.updateScreenReaderText(getScreenReaderText(item, \"active\", this));\n    }\n\n    if ((event.key !== \"ArrowUp\" && event.key !== \"ArrowDown\") || items.length <= 1) {\n      return;\n    }\n\n    const { el } = this;\n    const nextIndex = moveItemIndex(this, item, event.key === \"ArrowUp\" ? \"up\" : \"down\");\n    if (nextIndex === items.length - 1) {\n      el.appendChild(item);\n    } else {\n      const itemAtNextIndex = el.children[nextIndex];\n      const insertionReferenceItem =\n        itemAtNextIndex === item.nextElementSibling\n          ? itemAtNextIndex.nextElementSibling\n          : itemAtNextIndex;\n      el.insertBefore(item, insertionReferenceItem);\n    }\n\n    this.items = this.getItems();\n    this.calciteListOrderChange.emit(this.items.map(({ value }) => value));\n\n    requestAnimationFrame(() => focusElement(handle));\n    item.handleActivated = true;\n\n    this.updateHandleAriaLabel(handle, getScreenReaderText(item, \"change\", this));\n  };\n\n  handleBlur(): void {\n    if (this.dragEnabled) {\n      this.updateScreenReaderText(\"\");\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /** Returns the component's selected items. */\n  @Method()\n  async getSelectedItems(): Promise<Map<string, HTMLCalciteValueListItemElement>> {\n    return this.selectedValues;\n  }\n\n  /**\n   * Sets focus on the component's first focusable element.\n   *\n   * @param focusId\n   */\n  @Method()\n  async setFocus(focusId?: ListFocusId): Promise<void> {\n    await componentFocusable(this);\n\n    return setFocus.call(this, focusId);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  getIconType(): ICON_TYPES | null {\n    let type = null;\n    if (this.dragEnabled) {\n      type = ICON_TYPES.grip;\n    }\n    return type;\n  }\n\n  updateScreenReaderText(text: string): void {\n    this.assistiveTextEl.textContent = text;\n  }\n\n  updateHandleAriaLabel(handleElement: HTMLSpanElement, text: string): void {\n    handleElement.ariaLabel = text;\n  }\n\n  storeAssistiveEl = (el: HTMLSpanElement): void => {\n    this.assistiveTextEl = el;\n  };\n\n  handleFocusIn = (event: FocusEvent): void => {\n    const { handle, item } = getHandleAndItemElement(event);\n    if (!item?.handleActivated && item && handle) {\n      this.updateHandleAriaLabel(handle, getScreenReaderText(item, \"idle\", this));\n    }\n  };\n\n  @Listen(\"calciteValueListItemDragHandleBlur\")\n  handleValueListItemBlur(event: CustomEvent<ListItemAndHandle>): void {\n    const { item, handle } = event.detail;\n    if (!item?.handleActivated && item) {\n      this.updateHandleAriaLabel(handle, getScreenReaderText(item, \"idle\", this));\n    }\n    event.stopPropagation();\n  }\n\n  render(): VNode {\n    return (\n      <List\n        onBlur={this.handleBlur}\n        onFocusin={this.handleFocusIn}\n        onKeyDown={this.keyDownHandler}\n        props={this}\n      />\n    );\n  }\n}\n", "export const ICONS = {\n  drag: \"drag\",\n};\n\nexport const SLOTS = {\n  actionsEnd: \"actions-end\",\n  actionsStart: \"actions-start\",\n};\n", ":host {\n  @apply bg-foreground-1\n    text-color-2\n    text-n1\n    shadow-border-bottom\n    mb-px\n    box-border\n    flex;\n  transition:\n    background-color var(--calcite-animation-timing),\n    box-shadow var(--calcite-animation-timing);\n  * {\n    @apply box-border;\n  }\n}\n\ncalcite-pick-list-item {\n  @apply relative\n    m-0\n    flex-grow\n    shadow-none;\n}\n\n:host([active]),\n:host([selected]) {\n  @apply shadow-outline-active;\n}\n\n.handle {\n  @apply flex\n    cursor-move\n    items-center\n    justify-center\n    border-none\n    bg-transparent\n    py-0\n    px-1;\n  color: theme(\"borderColor.color.input\");\n  &:hover {\n    @apply bg-foreground-2 text-color-1;\n  }\n  @apply focus-base;\n  &:focus {\n    @apply focus-inset;\n  }\n  &--activated {\n    @apply bg-foreground-3 text-color-1;\n  }\n  calcite-icon {\n    color: inherit;\n  }\n}\n\n@include disabled();\n@include base-component();\n", "import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  VNode,\n} from \"@stencil/core\";\nimport {\n  ConditionalSlotComponent,\n  connectConditionalSlotComponent,\n  disconnectConditionalSlotComponent,\n} from \"../../utils/conditionalSlot\";\nimport { getSlotted } from \"../../utils/dom\";\nimport { guid } from \"../../utils/guid\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { CSS, SLOTS as PICK_LIST_SLOTS } from \"../pick-list-item/resources\";\nimport { ICON_TYPES } from \"../pick-list/resources\";\nimport { ListItemAndHandle } from \"./interfaces\";\nimport { ICONS, SLOTS } from \"./resources\";\n\n/**\n * @deprecated Use the `list` component instead.\n * @slot actions-end - A slot for adding `calcite-action`s or content to the end side of the component.\n * @slot actions-start - A slot for adding `calcite-action`s or content to the start side of the component.\n */\n@Component({\n  tag: \"calcite-value-list-item\",\n  styleUrl: \"value-list-item.scss\",\n  shadow: true,\n})\nexport class ValueListItem\n  implements ConditionalSlotComponent, InteractiveComponent, LoadableComponent\n{\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * A description for the component that displays below the label text.\n   */\n  @Prop({ reflect: true }) description?: string;\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * @internal\n   */\n  @Prop() deselectDisabled = false;\n\n  /**\n   * When `true`, prevents the content of the component from user interaction.\n   */\n  @Prop({ reflect: true }) nonInteractive = false;\n\n  /**\n   * @internal\n   */\n  @Prop({ mutable: true }) handleActivated? = false;\n\n  /**\n   * Determines the icon SVG symbol that will be shown. Options are circle, square, grip or null.\n   *\n   * @see [ICON_TYPES](https://github.com/Esri/calcite-design-system/blob/main/src/components/pick-list/resources.ts#L5)\n   */\n  @Prop({ reflect: true }) icon?: ICON_TYPES | null = null;\n\n  /** When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl = false;\n\n  /**\n   * Label and accessible name for the component. Appears next to the icon.\n   */\n  @Prop({ reflect: true }) label!: string;\n\n  /**\n   * Provides additional metadata to the component. Primary use is for a filter on the parent list.\n   */\n  @Prop() metadata?: Record<string, unknown>;\n\n  /**\n   * When `true`, adds an action to remove the component.\n   */\n  @Prop({ reflect: true }) removable = false;\n\n  /**\n   * When `true`, the component is selected.\n   */\n  @Prop({ reflect: true, mutable: true }) selected = false;\n\n  /**\n   * The component's value.\n   */\n  @Prop() value!: any;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteValueListItemElement;\n\n  pickListItem: HTMLCalcitePickListItemElement = null;\n\n  handleEl: HTMLSpanElement;\n\n  guid = `calcite-value-list-item-${guid()}`;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectConditionalSlotComponent(this);\n    connectInteractive(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectConditionalSlotComponent(this);\n    disconnectInteractive(this);\n  }\n\n  componentWillLoad(): void {\n    setUpLoadableComponent(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Toggle the selection state. By default this won't trigger an event.\n   * The first argument allows the value to be coerced, rather than swapping values.\n   *\n   * @param coerce\n   */\n  @Method()\n  async toggleSelected(coerce?: boolean): Promise<void> {\n    this.pickListItem.toggleSelected(coerce);\n  }\n\n  /** Set focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    return this.pickListItem?.setFocus();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Fires when the component is selected or unselected.\n   */\n  @Event({ cancelable: false }) calciteListItemChange: EventEmitter<{\n    item: HTMLCalciteValueListItemElement;\n    value: any;\n    selected: boolean;\n    shiftPressed: boolean;\n  }>;\n\n  /**\n   * Fires when the remove button is pressed.\n   */\n  @Event({ cancelable: true }) calciteListItemRemove: EventEmitter<void>; // wrapped pick-list-item emits this\n\n  /**\n   * @internal\n   */\n  @Event({ cancelable: false })\n  calciteValueListItemDragHandleBlur: EventEmitter<ListItemAndHandle>;\n\n  @Listen(\"calciteListItemChange\")\n  calciteListItemChangeHandler(event: CustomEvent): void {\n    // adjust item payload from wrapped item before bubbling\n    event.detail.item = this.el;\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  getPickListRef = (el: HTMLCalcitePickListItemElement): HTMLCalcitePickListItemElement =>\n    (this.pickListItem = el);\n\n  handleKeyDown = (event: KeyboardEvent): void => {\n    if (event.key === \" \") {\n      this.handleActivated = !this.handleActivated;\n    }\n  };\n\n  handleBlur = (): void => {\n    this.handleActivated = false;\n    this.calciteValueListItemDragHandleBlur.emit({ item: this.el, handle: this.handleEl });\n  };\n\n  handleSelectChange = (event: CustomEvent): void => {\n    this.selected = event.detail.selected;\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  renderActionsEnd(): VNode {\n    const { el } = this;\n    const hasActionsEnd = getSlotted(el, SLOTS.actionsEnd);\n\n    return hasActionsEnd ? (\n      <slot name={SLOTS.actionsEnd} slot={PICK_LIST_SLOTS.actionsEnd} />\n    ) : null;\n  }\n\n  renderActionsStart(): VNode {\n    const { el } = this;\n    const hasActionsStart = getSlotted(el, SLOTS.actionsStart);\n\n    return hasActionsStart ? (\n      <slot name={SLOTS.actionsStart} slot={PICK_LIST_SLOTS.actionsStart} />\n    ) : null;\n  }\n\n  renderHandle(): VNode {\n    const { icon, iconFlipRtl } = this;\n    if (icon === ICON_TYPES.grip) {\n      return (\n        <span\n          class={{\n            [CSS.handle]: true,\n            [CSS.handleActivated]: this.handleActivated,\n          }}\n          data-js-handle\n          onBlur={this.handleBlur}\n          onKeyDown={this.handleKeyDown}\n          role=\"button\"\n          tabindex=\"0\"\n          // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n          ref={(el) => (this.handleEl = el as HTMLSpanElement)}\n        >\n          <calcite-icon flipRtl={iconFlipRtl} icon={ICONS.drag} scale=\"s\" />\n        </span>\n      );\n    }\n  }\n\n  render(): VNode {\n    return (\n      <Host id={this.el.id || this.guid}>\n        <InteractiveContainer disabled={this.disabled}>\n          {this.renderHandle()}\n          <calcite-pick-list-item\n            description={this.description}\n            deselectDisabled={this.deselectDisabled}\n            disabled={this.disabled}\n            label={this.label}\n            metadata={this.metadata}\n            nonInteractive={this.nonInteractive}\n            onCalciteListItemChange={this.handleSelectChange}\n            removable={this.removable}\n            selected={this.selected}\n            value={this.value}\n            // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n            ref={this.getPickListRef}\n          >\n            {this.renderActionsStart()}\n            {this.renderActionsEnd()}\n          </calcite-pick-list-item>\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n}\n"],
  "mappings": "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",
  "names": ["CSS", "ICON_TYPES", "item", "SLOTS", "PICK_LIST_SLOTS"]
}
