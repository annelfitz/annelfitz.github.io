{
  "version": 3,
  "sources": ["../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/VertexTangent.glsl.js", "../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/terrain/TileBlendInput.js", "../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/terrain/TerrainTexture.glsl.js", "../../@arcgis/core/chunks/Terrain.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{glsl as n}from\"../../shaderModules/interfaces.js\";function e(e,t){e.varyings.add(\"tbnTangent\",\"vec3\"),e.varyings.add(\"tbnBiTangent\",\"vec3\"),t.spherical?e.vertex.code.add(n`void forwardVertexTangent(vec3 n) {\ntbnTangent = normalize(cross(vec3(0.0, 0.0, 1.0), n));\ntbnBiTangent = normalize(cross(n, tbnTangent));\n}`):e.vertex.code.add(n`void forwardVertexTangent(vec3 n) {\ntbnTangent = vec3(1.0, 0.0, 0.0);\ntbnBiTangent = normalize(cross(n, tbnTangent));\n}`),e.fragment.code.add(n`mat3 getTBNMatrix(vec3 n) {\nreturn mat3(tbnTangent, tbnBiTangent, n);\n}`)}export{e as VertexTangent};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nvar o;!function(o){o[o.LayerOnly=0]=\"LayerOnly\",o[o.ColorComposite=1]=\"ColorComposite\",o[o.GridComposite=2]=\"GridComposite\",o[o.COUNT=3]=\"COUNT\"}(o||(o={}));export{o as TileBlendInput};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{ReadShadowMapPassParameters as e}from\"../shading/ReadShadowMap.glsl.js\";import{BackgroundGrid as t}from\"./BackgroundGrid.glsl.js\";import{TileBlendInput as o}from\"./TileBlendInput.js\";import{glsl as r}from\"../../shaderModules/interfaces.js\";import{Uniform as c}from\"../../shaderModules/Uniform.js\";class n extends e{constructor(){super(...arguments),this.overlayOpacity=1}}function s(e,c){const{vertex:n,fragment:s,varyings:u}=e;u.add(\"vtc\",\"vec2\"),n.uniforms.add(new i(\"texOffsetAndScale\")),s.uniforms.add(new l(\"tex\")),s.uniforms.add(new a(\"textureOpacities\"));const x=c.textureFadingEnabled&&!c.renderOccluded;x&&(n.uniforms.add(new i(\"nextTexOffsetAndScale\")),u.add(\"nvtc\",\"vec2\"),s.uniforms.add(new l(\"texNext\")),s.uniforms.add(new a(\"nextTexOpacities\")),s.uniforms.add(new d(\"fadeFactor\")));const f=c.tileBlendInput===o.ColorComposite,v=c.tileBlendInput===o.GridComposite;v&&s.include(t),f&&s.uniforms.add(new a(\"backgroundColor\")),n.code.add(r`\n  void forwardTextureCoordinatesWithTransform(in vec2 uv) {\n    vtc = uv * texOffsetAndScale.zw + texOffsetAndScale.xy;\n    ${x?r`nvtc = uv * nextTexOffsetAndScale.zw + nextTexOffsetAndScale.xy;`:r``}\n  }`),s.code.add(r`\n    vec4 getColor(vec4 color, vec2 uv, vec3 opacities) {\n      ${v||f?r`\n              if (opacities.y <= 0.0) {\n                return color * opacities.z * opacities.x;\n              }\n              vec4 bg = vec4(${f?r`backgroundColor`:r`gridColor(uv)`} * opacities.y, opacities.y);\n              vec4 layer = color * opacities.z;\n              return (bg * (1.0 - layer.a) + layer) * opacities.x;`:r`return color;`}\n    }`),x?s.code.add(r`vec4 getTileColor() {\nvec4 color = getColor(texture(tex, vtc), vtc, textureOpacities);\nif (fadeFactor >= 1.0) {\nreturn color;\n}\nvec4 nextColor = getColor(texture(texNext, nvtc), nvtc, nextTexOpacities);\nreturn mix(nextColor, color, fadeFactor);\n}`):s.code.add(r`vec4 getTileColor() {\nreturn getColor(texture(tex, vtc), vtc, textureOpacities);\n}`)}class d extends c{constructor(e){super(e,\"float\")}}class a extends c{constructor(e){super(e,\"vec3\")}}class i extends c{constructor(e){super(e,\"vec4\")}}class l extends c{constructor(e){super(e,\"sampler2D\")}}export{a as Float3Uniform,n as OverlayTerrainPassParameters,s as TerrainTexture,l as Texture2DUniform};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{translate as e}from\"../core/libs/gl-matrix-2/math/mat4.js\";import{create as r}from\"../core/libs/gl-matrix-2/factories/mat4f64.js\";import{n as o,s as i}from\"./vec32.js\";import{create as a}from\"../core/libs/gl-matrix-2/factories/vec3f64.js\";import{OverlayContent as l}from\"../views/3d/terrain/OverlayContent.js\";import{addLinearDepth as t,addNearFar as n,ForwardLinearDepth as s}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{ShaderOutput as d}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as c}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as v}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{NormalAttribute as m}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";import{PositionAttribute as g}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js\";import{TextureCoordinateAttribute as p}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";import{VertexTangent as f}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexTangent.glsl.js\";import{OutputDepth as w}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputDepth.glsl.js\";import{OutputHighlight as h}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";import{EvaluateAmbientOcclusion as u}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";import{EvaluateSceneLighting as b,addAmbientBoostFactor as C,addLightingGlobalFactor as y}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";import{addMainLightDirection as x,addMainLightIntensity as S}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MainLighting.glsl.js\";import{NormalUtils as O}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/NormalUtils.glsl.js\";import{PBRMode as L}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";import{ReadShadowMapDraw as j}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";import{OverlayMode as z,OverlayTerrain as P}from\"../views/3d/webgl-engine/core/shaderLibrary/terrain/Overlay.glsl.js\";import{OverlayTerrainPassParameters as T,TerrainTexture as M}from\"../views/3d/webgl-engine/core/shaderLibrary/terrain/TerrainTexture.glsl.js\";import{addProjViewLocalOrigin as D,addViewNormal as N,addCameraPosition as W}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float3PassUniform as $}from\"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";import{glsl as U}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{Matrix4DrawUniform as V}from\"../views/3d/webgl-engine/core/shaderModules/Matrix4DrawUniform.js\";import{ShaderBuilder as F}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{Texture2DPassUniform as A}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";class _ extends T{}function B(r){const a=new F,{vertex:T,fragment:_,varyings:B}=a;a.include(g),a.include(m,r),a.include(p,r);const E=()=>{a.include(O,r),T.code.add(U`vec3 getNormal() {\nfloat z = 1.0 - abs(normalCompressed.x) - abs(normalCompressed.y);\nvec3 n = vec3(normalCompressed + vec2(normalCompressed.x >= 0.0 ? 1.0 : -1.0,\nnormalCompressed.y >= 0.0 ? 1.0 : -1.0) * min(z, 0.0), z);\nreturn normalize(n);\n}`)};D(T,r),a.include(v,r);const I=r.overlayMode!==z.Disabled,q=I&&r.invisible;switch(r.output){case d.Color:{a.include(M,r),a.include(b,r),I&&a.include(P,{...r,pbrMode:r.pbrMode===L.Simplified?L.TerrainWithWater:L.Water});const t=r.overlayMode===z.EnabledWithWater;t&&a.include(f,r),B.add(\"vnormal\",\"vec3\"),B.add(\"vpos\",\"vec3\"),B.add(\"vup\",\"vec3\"),E(),r.screenSizePerspective&&N(T);const n=r.receiveShadows&&!r.renderOccluded;n&&a.include(s,r),r.screenSizePerspective&&(B.add(\"screenSizeDistanceToCamera\",\"float\"),B.add(\"screenSizeCosAngle\",\"float\")),T.code.add(U`\n        void main(void) {\n          //Position\n          vpos = position;\n          vec3 positionWorld = position + localOrigin;\n          gl_Position = transformPosition(proj, view, vpos);\n\n          //Normal\n          vnormal = getNormal();\n\n          //Up\n          vup = getLocalUp(position, localOrigin);\n\n          ${t?U`forwardVertexTangent(vnormal);`:U``}\n\n          //Texture UV\n          vec2 uv = getUV0();\n          forwardTextureCoordinatesWithTransform(uv);\n          ${I?U`setOverlayVTC(uv);`:\"\"}\n          ${r.tileBorders?U`forwardTextureCoordinates();`:\"\"}\n\n          ${r.screenSizePerspective?U`\n          vec3 viewPos = (view * vec4(vpos, 1.0)).xyz;\n          screenSizeDistanceToCamera = length(viewPos);\n          vec3 viewSpaceNormal = (viewNormal * vec4(normalize(positionWorld), 1.0)).xyz;\n          screenSizeCosAngle = abs(viewSpaceNormal.z);`:\"\"}\n\n          ${n?U`forwardLinearDepth();`:\"\"}\n\n        }\n      `),a.include(c,r),a.include(b,r),a.include(u,r),a.include(j,r),W(_,r),C(_),y(_),_.uniforms.add(T.uniforms.get(\"localOrigin\"),new $(\"viewDirection\",((e,r)=>o(H,i(H,r.camera.viewMatrix[12],r.camera.viewMatrix[13],r.camera.viewMatrix[14]))))),t&&_.uniforms.add(new A(\"ovWaterTex\",((e,r)=>r.overlay?.getTexture(l.WaterNormal))),new V(\"view\",((r,o)=>e(k,o.camera.viewMatrix,r.origin)))),_.code.add(U`const float sliceOpacity = 0.2;\nfloat lum(vec3 c) {\nreturn (min(min(c.r, c.g), c.b) + max(max(c.r, c.g), c.b)) * 0.5;\n}`),x(_),S(_),_.code.add(U`\n        void main() {\n          vec3 normal = normalize(vnormal);\n          float vndl = dot(normal, mainLightDirection);\n\n          float additionalAmbientScale = smoothstep(0.0, 1.0, clamp(vndl*2.5, 0.0, 1.0));\n          float shadow = ${r.receiveShadows&&!r.renderOccluded?\"readShadowMap(vpos, linearDepth)\":r.spherical?\"lightingGlobalFactor * (1.0 - additionalAmbientScale)\":\"0.0\"};\n\n          float ssao = evaluateAmbientOcclusionInverse();\n          vec4 tileColor = getTileColor();\n\n          ${I?U`\n              vec4 overlayColorOpaque = getOverlayColor(ovColorTex, vtcOverlay);\n              vec4 overlayColor = overlayOpacity * overlayColorOpaque;\n              ${r.invisible?U`if (overlayColor.a == 0.0) { discard; }`:\"\"}\n              vec4 groundColor = tileColor;\n              tileColor = tileColor * (1.0 - overlayColor.a) + overlayColor;`:\"\"}\n\n          // If combined alpha is 0 we can discard pixel. The performance impact by having a discard here\n          // is neglectable because terrain typically renders first into the framebuffer.\n          if(tileColor.a <= 0.0) {\n            discard;\n          }\n\n          bool sliced = rejectBySlice(vpos);\n          if (sliced) {\n            tileColor *= sliceOpacity;\n          }\n\n          vec3 albedo = tileColor.rgb;\n\n          // heuristic shading function used in the old terrain, now used to add ambient lighting\n\n          vec3 additionalLight = ssao * mainLightIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n\n          ${r.pbrMode===L.Simplified||r.pbrMode===L.TerrainWithWater?U`fragColor = vec4(evaluatePBRSimplifiedLighting(normal, albedo, shadow, 1.0 - ssao, additionalLight, normalize(vpos - cameraPosition), vup), tileColor.a);`:U`fragColor = vec4(evaluateSceneLighting(normal, albedo, shadow, 1.0 - ssao, additionalLight), tileColor.a);`}\n          ${t?U`\n              vec4 overlayWaterMask = getOverlayColor(ovWaterTex, vtcOverlay);\n              float waterNormalLength = length(overlayWaterMask);\n              if (waterNormalLength > 0.95) {\n                mat3 tbnMatrix = mat3(tbnTangent, tbnBiTangent, vnormal);\n                vec4 waterOverlayColor = vec4(overlayColor.w > 0.0 ? overlayColorOpaque.xyz/overlayColor.w : vec3(1.0), overlayColor.w);\n                vec4 viewPosition = view*vec4(vpos, 1.0);\n                vec4 waterColorLinear = getOverlayWaterColor(overlayWaterMask, waterOverlayColor, -normalize(vpos - cameraPosition), shadow, vnormal, tbnMatrix, viewPosition.xyz,  vpos + localOrigin);\n                vec4 waterColorNonLinear = delinearizeGamma(vec4(waterColorLinear.xyz, 1.0));\n                float opacity = sliced ? sliceOpacity : 1.0;\n                // un-gamma the ground color to mix in linear space\n                fragColor = mix(groundColor, waterColorNonLinear, waterColorLinear.w) * opacity;\n              }`:\"\"}\n          ${r.screenSizePerspective?U`\n            float perspectiveScale = screenSizePerspectiveScaleFloat(1.0, screenSizeCosAngle, screenSizeDistanceToCamera, vec4(0.0, 0.0, 0.0, 0.0));\n            if (perspectiveScale <= 0.25) {\n              fragColor = mix(fragColor, vec4(1.0, 0.0, 0.0, 1.0), perspectiveScale * 4.0);\n            }\n            else if (perspectiveScale <= 0.5) {\n              fragColor = mix(fragColor, vec4(0.0, 0.0, 1.0, 1.0), (perspectiveScale - 0.25) * 4.0);\n            }\n            else if (perspectiveScale >= 0.99) {\n              fragColor = mix(fragColor, vec4(0.0, 1.0, 0.0, 1.0), 0.2);\n            }\n            else {\n              fragColor = mix(fragColor, vec4(1.0, 0.0, 1.0, 1.0), (perspectiveScale - 0.5) * 2.0);\n            }`:\"\"}\n          ${r.visualizeNormals?r.spherical?U`\n                  vec3 localUp = normalize(vpos + localOrigin);\n                  vec3 right = normalize(cross(vec3(0.0, 0.0, 1.0), localUp));\n                  vec3 forward = normalize(cross(localUp, right));\n                  mat3 tbn = mat3(right, forward, localUp);\n                  vec3 tNormal = normalize(normal * tbn);\n                  fragColor = vec4(vec3(0.5) + 0.5 * tNormal, 0.0);\n              `:U`\n                  vec3 tNormal = normalize(normal);\n                  fragColor = vec4(vec3(0.5) + 0.5 * tNormal, 0.0);\n              `:\"\"}\n          ${r.tileBorders?U`\n              vec2 dVuv = fwidth(vuv0);\n              vec2 edgeFactors = smoothstep(vec2(0.0), 1.5 * dVuv, min(vuv0, 1.0 - vuv0));\n              float edgeFactor = 1.0 - min(edgeFactors.x, edgeFactors.y);\n              fragColor = mix(fragColor, vec4(1.0, 0.0, 0.0, 1.0), edgeFactor);`:\"\"}\n          fragColor = highlightSlice(fragColor, vpos);\n        }\n      `)}break;case d.LinearDepth:q&&a.include(P,r),a.include(w,r),t(a),n(a),T.code.add(U`\n              void main(void) {\n                ${q?U`setOverlayVTC(getUV0());`:\"\"}\n                gl_Position = transformPositionWithDepth(proj, view, position, nearFar, linearDepth);\n              }\n          `),_.code.add(U`\n              void main() {\n                ${q?U`if (getCombinedOverlayColor().a == 0.0) { discard; }`:\"\"}\n                outputDepth(linearDepth);\n              }\n          `);break;case d.Shadow:case d.ShadowHighlight:case d.ShadowExcludeHighlight:a.include(w,r),t(a),n(a),T.code.add(U`void main(void) {\ngl_Position = transformPositionWithDepth(proj, view, position, nearFar, linearDepth);\n}`),_.code.add(U`void main() {\noutputDepth(linearDepth);\n}`);break;case d.Normal:q&&a.include(P,r),B.add(\"vnormal\",\"vec3\"),N(T),E(),T.code.add(U`\n        void main(void) {\n          ${q?U`setOverlayVTC(getUV0());`:\"\"}\n          gl_Position = transformPosition(proj, view, position);\n          vnormal = normalize((viewNormal * vec4(getNormal(), 1.0)).xyz);\n        }\n      `),_.code.add(U`\n        void main() {\n          ${q?U`if (getCombinedOverlayColor().a == 0.0) { discard; }`:\"\"}\n          vec3 normal = normalize(vnormal);\n          if (gl_FrontFacing == false) {\n            normal = -normal;\n          }\n          fragColor = vec4(vec3(0.5) + 0.5 * normal, 1.0);\n        }\n      `);break;case d.Highlight:I&&a.include(P,r),T.code.add(U`\n          void main() {\n            ${I?U`setOverlayVTC(getUV0());`:\"\"}\n            gl_Position = transformPosition(proj, view, position);\n          }\n        `),a.include(h,r),_.code.add(U`\n          void main() {\n            ${I?U`if (getCombinedOverlayColor().a == 0.0) { discard; }`:\"\"}\n            outputHighlight();\n          }\n        `)}return r.output===d.ObjectAndLayerIdColor&&(I?(a.include(P,{...r,pbrMode:L.Disabled}),T.code.add(U`void main(void) {\ngl_Position = transformPosition(proj, view, position);\nsetOverlayVTC(getUV0());\n}`),_.code.add(U`void main() {\nfragColor = getOverlayColorTexel(vtcOverlay);\n}`)):(T.code.add(U`void main(void) {}`),_.code.add(U`void main() {\nfragColor = vec4(0.0);\n}`))),a}const k=r(),H=a(),E=Object.freeze(Object.defineProperty({__proto__:null,TerrainPassParameters:_,build:B},Symbol.toStringTag,{value:\"Module\"}));export{_ as T,E as a,B as b};\n"],
  "mappings": "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",
  "names": ["e", "t", "o", "o", "n", "h", "s", "e", "c", "u", "i", "l", "a", "x", "d", "f", "o", "t", "n", "r", "a", "o", "_", "B", "E", "d", "f", "s", "p", "t", "e", "i"]
}
