import {
  b,
  j,
  x
} from "./chunk-WVKWBQ7C.js";
import "./chunk-RK2U53CD.js";
import "./chunk-YPY24RRU.js";
import "./chunk-O7RKI2QW.js";
import {
  $,
  C,
  E,
  P,
  U,
  d,
  f,
  k,
  p
} from "./chunk-BMB27ANS.js";
import "./chunk-3FOBZIUS.js";
import "./chunk-IYKBAIQE.js";
import "./chunk-BDRVHR2K.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-HV2SFSJW.js";
import "./chunk-SBARCIDP.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-SLQA5YBV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import "./chunk-NDIXNREV.js";
import "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/smartMapping/statistics/support/statsWorker.js
async function d2(a) {
  const { attribute: e, features: r } = a, { normalizationType: s, normalizationField: m, minValue: f2, maxValue: u, fieldType: d3 } = e, p3 = await b({ field: e.field, valueExpression: e.valueExpression, normalizationType: s, normalizationField: m, normalizationTotal: e.normalizationTotal, viewInfoParams: e.viewInfoParams, timeZone: e.timeZone, fieldInfos: e.fieldInfos }, r), v2 = f({ normalizationType: s, normalizationField: m, minValue: f2, maxValue: u }), c2 = { value: 0.5, fieldType: d3 }, z2 = "esriFieldTypeString" === d3 ? d({ values: p3, supportsNullCount: v2, percentileParams: c2 }) : p({ values: p3, minValue: f2, maxValue: u, useSampleStdDev: !s, supportsNullCount: v2, percentileParams: c2 });
  return C(z2, "esriFieldTypeDate" === d3);
}
async function p2(a) {
  const { attribute: e, features: n } = a, o = await b({ field: e.field, field2: e.field2, field3: e.field3, fieldDelimiter: e.fieldDelimiter, valueExpression: e.valueExpression, viewInfoParams: e.viewInfoParams, timeZone: e.timeZone, fieldInfos: e.fieldInfos }, n, false), l = k(o);
  return $(l, e.domains, e.returnAllCodedValues, e.fieldDelimiter);
}
async function v(a) {
  const { attribute: e, features: n } = a, { field: o, normalizationType: l, normalizationField: t, normalizationTotal: r, classificationMethod: s } = e, u = await b({ field: o, valueExpression: e.valueExpression, normalizationType: l, normalizationField: t, normalizationTotal: r, viewInfoParams: e.viewInfoParams, timeZone: e.timeZone, fieldInfos: e.fieldInfos }, n), d3 = E(u, { field: o, normalizationType: l, normalizationField: t, normalizationTotal: r, classificationMethod: s, standardDeviationInterval: e.standardDeviationInterval, numClasses: e.numClasses, minValue: e.minValue, maxValue: e.maxValue });
  return P(d3, s);
}
async function c(a) {
  const { attribute: e, features: n } = a, { field: o, normalizationType: l, normalizationField: t, normalizationTotal: r, classificationMethod: s } = e, m = await b({ field: o, valueExpression: e.valueExpression, normalizationType: l, normalizationField: t, normalizationTotal: r, viewInfoParams: e.viewInfoParams, timeZone: e.timeZone, fieldInfos: e.fieldInfos }, n);
  return U(m, { field: o, normalizationType: l, normalizationField: t, normalizationTotal: r, classificationMethod: s, standardDeviationInterval: e.standardDeviationInterval, numBins: e.numBins, minValue: e.minValue, maxValue: e.maxValue });
}
async function z(i) {
  const { attribute: n, features: o } = i, { field: l, radius: t, transform: r, spatialReference: s } = n, m = n.size ?? [0, 0], f2 = j(o ?? [], r, s, m);
  return x(f2, t ?? void 0, l, m[0], m[1]);
}
export {
  v as classBreaks,
  z as heatmapStatistics,
  c as histogram,
  d2 as summaryStatistics,
  p2 as uniqueValues
};
//# sourceMappingURL=statsWorker-IY5LHBDB.js.map
