import {
  d
} from "./chunk-6I7QXKCJ.js";
import "./chunk-T522M7RE.js";
import "./chunk-M7V6LN55.js";
import {
  f as f2,
  i,
  s
} from "./chunk-I2X6UR6L.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-RUN6MNXL.js";
import {
  U
} from "./chunk-SAYWXQVM.js";
import {
  f
} from "./chunk-SBL4URUW.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/rest/networks/support/AssociationGeometriesResult.js
var p = class extends f {
  constructor(o) {
    super(o), this.maxGeometryCountExceeded = false, this.associations = [];
  }
};
e([y({ type: Boolean, json: { write: true } })], p.prototype, "maxGeometryCountExceeded", void 0), e([y({ type: [d], json: { write: true } })], p.prototype, "associations", void 0), p = e([a("esri.rest.networks.support.AssociationGeometriesResult")], p);
var i2 = p;

// node_modules/@arcgis/core/rest/networks/synthesizeAssociationGeometries.js
async function n(r, n2, c) {
  const a2 = f2(r), f3 = { ...n2.toJSON(), f: "json" }, m = s({ ...a2.query, ...f3 });
  c ? c.method = "post" : c = { method: "post" };
  const p2 = i(m, c), u = `${a2.path}/synthesizeAssociationGeometries`;
  return U(u, p2).then((o) => i3(o, n2.outSpatialReference));
}
function i3(o, t) {
  const { data: e2 } = o, s2 = i2.fromJSON(e2);
  if (t)
    for (const r of s2.associations)
      r.geometry.spatialReference = t.clone();
  return s2;
}
export {
  n as synthesizeAssociationGeometries
};
//# sourceMappingURL=synthesizeAssociationGeometries-IU6F77MS.js.map
