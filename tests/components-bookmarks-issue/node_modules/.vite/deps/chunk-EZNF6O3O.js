import {
  i as i3
} from "./chunk-DORNK7ZC.js";
import {
  i as i2
} from "./chunk-OWKPWQPA.js";
import {
  t
} from "./chunk-VQWLJR3W.js";
import {
  o
} from "./chunk-RDPH36VD.js";
import {
  f,
  i
} from "./chunk-LBXFRGMS.js";
import {
  S
} from "./chunk-SLQA5YBV.js";
import {
  Q
} from "./chunk-UMXV3EBO.js";
import {
  s
} from "./chunk-7RBRCL6S.js";

// node_modules/@arcgis/core/layers/save/utils.js
function l(t2, r, o2) {
  const a = o2(t2);
  if (!a.isValid)
    throw new s(`${r}:invalid-parameters`, a.errorMessage, { layer: t2 });
}
async function m(e) {
  const { layer: t2, errorNamePrefix: r, validateLayer: o2 } = e;
  await t2.load(), l(t2, r, o2);
}
function c(e, t2) {
  return `Layer (title: ${e.title}, id: ${e.id}) of type '${e.declaredClass}' ${t2}`;
}
function u(t2) {
  const { item: r, errorNamePrefix: o2, layer: a, validateItem: i4 } = t2;
  if (i3(r), f2(t2), i4) {
    const t3 = i4(r);
    if (!t3.isValid)
      throw new s(`${o2}:invalid-parameters`, t3.errorMessage, { layer: a });
  }
}
function f2(t2) {
  const { item: r, itemType: o2, additionalItemType: a, errorNamePrefix: i4, layer: n } = t2, s2 = [o2];
  if (a && s2.push(a), !s2.includes(r.type)) {
    const t3 = s2.map((e) => `'${e}'`).join(", ");
    throw new s(`${i4}:portal-item-wrong-type`, `Portal item type should be one of: "${t3}"`, { item: r, layer: n });
  }
}
function d(t2) {
  const { layer: r, errorNamePrefix: o2 } = t2, { portalItem: a } = r;
  if (!a)
    throw new s(`${o2}:portal-item-not-set`, c(r, "requires the portalItem property to be set"));
  if (!a.loaded)
    throw new s(`${o2}:portal-item-not-loaded`, c(r, "cannot be saved to a portal item that does not exist or is inaccessible"));
  u({ ...t2, item: a });
}
function y(e) {
  const { newItem: t2, itemType: a } = e;
  let i4 = S.from(t2);
  return i4.id && (i4 = i4.clone(), i4.id = null), i4.type ?? (i4.type = a), i4.portal ?? (i4.portal = Q.getDefault()), u({ ...e, item: i4 }), i4;
}
function w(e) {
  return o(e, "portal-item");
}
async function I(e, t2, r) {
  var _a;
  "beforeSave" in e && "function" == typeof e.beforeSave && await e.beforeSave();
  const o2 = e.write({}, t2);
  return await Promise.all(((_a = t2.resources) == null ? void 0 : _a.pendingOperations) ?? []), t(t2, { errorName: "layer-write:unsupported" }, r), o2;
}
function v(e) {
  i(e, f.JSAPI), e.typeKeywords && (e.typeKeywords = e.typeKeywords.filter((e2, t2, r) => r.indexOf(e2) === t2));
}
async function P(e, t2, r) {
  var _a;
  const o2 = e.portal;
  await o2.signIn(), await ((_a = o2.user) == null ? void 0 : _a.addItem({ item: e, data: t2, folder: r == null ? void 0 : r.folder }));
}
async function $(e, r) {
  const { layer: o2, createItemData: a, createJSONContext: i4, setItemProperties: n, saveResources: s2, supplementalUnsupportedErrors: p } = e;
  await m(e), d(e);
  const l2 = o2.portalItem, c2 = i4 ? i4(l2) : w(l2), u2 = await I(o2, c2, { ...r, supplementalUnsupportedErrors: p }), f3 = await a({ layer: o2, layerJSON: u2 }, l2);
  return await (n == null ? void 0 : n(o2, l2)), v(l2), await l2.update({ data: f3 }), i2(c2), await (s2 == null ? void 0 : s2(l2, c2)), l2;
}
async function j(e, r) {
  const { layer: o2, createItemData: a, createJSONContext: i4, setItemProperties: n, saveResources: s2, supplementalUnsupportedErrors: p } = e;
  await m(e);
  const l2 = y(e), c2 = i4 ? i4(l2) : w(l2), u2 = await I(o2, c2, { ...r, supplementalUnsupportedErrors: p }), f3 = await a({ layer: o2, layerJSON: u2 }, l2);
  return await n(o2, l2), v(l2), await P(l2, f3, r), o2.portalItem = l2, i2(c2), await (s2 == null ? void 0 : s2(l2, c2)), l2;
}

export {
  l,
  c,
  d,
  y,
  w,
  I,
  v,
  P,
  $,
  j
};
//# sourceMappingURL=chunk-EZNF6O3O.js.map
