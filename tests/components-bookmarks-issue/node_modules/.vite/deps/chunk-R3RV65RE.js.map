{
  "version": 3,
  "sources": ["../../@arcgis/core/views/3d/webgl-engine/materials/PatternStyle.js", "../../@arcgis/core/chunks/Pattern.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nvar a;!function(a){a[a.Horizontal=0]=\"Horizontal\",a[a.Vertical=1]=\"Vertical\",a[a.Cross=2]=\"Cross\",a[a.ForwardDiagonal=3]=\"ForwardDiagonal\",a[a.BackwardDiagonal=4]=\"BackwardDiagonal\",a[a.DiagonalCross=5]=\"DiagonalCross\",a[a.COUNT=6]=\"COUNT\"}(a||(a={}));export{a as Style};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{addNearFar as e,addLinearDepth as o}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{ShaderOutput as r}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as t}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as a}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{ObjectAndLayerIdColor as i}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/ObjectAndLayerIdColor.glsl.js\";import{VertexColor as l}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{OutputDepth as n}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputDepth.glsl.js\";import{OutputHighlight as c}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";import{multipassTerrainTest as d}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";import{VisualVariables as s}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{symbolAlphaCutoff as p}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";import{ColorConversion as g}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";import{addProjViewLocalOrigin as u,addCameraPosition as v}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float4PassUniform as m}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as f}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as h}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as w}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{TransparencyPassType as b}from\"../views/3d/webgl-engine/lib/TransparencyPassType.js\";import{VertexAttribute as y}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{Style as j}from\"../views/3d/webgl-engine/materials/PatternStyle.js\";const S=.70710678118,C=S,x=.08715574274;function T(T){const R=new w,$=T.multipassEnabled&&(T.output===r.Color||T.output===r.Alpha),{vertex:D,fragment:L,attributes:V,varyings:A}=R;u(D,T),R.include(a,T),R.include(l,T),R.include(s,T),R.include(i,T),T.draped?D.uniforms.add(new f(\"worldToScreenRatio\",((e,o)=>1/o.screenToPCSRatio))):V.add(y.BOUNDINGRECT,\"mat3\"),V.add(y.POSITION,\"vec3\"),V.add(y.UVMAPSPACE,\"vec4\"),T.vvColor&&V.add(y.COLORFEATUREATTRIBUTE,\"float\"),A.add(\"vColor\",\"vec4\"),A.add(\"vpos\",\"vec3\"),A.add(\"vuv\",\"vec2\"),$&&A.add(\"depth\",\"float\"),D.uniforms.add(new m(\"uColor\",(e=>e.color)));const O=T.style===j.ForwardDiagonal||T.style===j.BackwardDiagonal||T.style===j.DiagonalCross;O&&D.code.add(h`\n      const mat2 rotate45 = mat2(${h.float(S)}, ${h.float(-C)},\n                                 ${h.float(C)}, ${h.float(S)});\n    `),T.draped||(v(D,T),D.uniforms.add(new f(\"worldToScreenPerDistanceRatio\",((e,o)=>1/o.camera.perScreenPixelRatio))),D.code.add(h`vec3 projectPointToLineSegment(vec3 center, vec3 halfVector, vec3 point) {\nfloat projectedLength = dot(halfVector, point - center) / dot(halfVector, halfVector);\nreturn center + halfVector * clamp(projectedLength, -1.0, 1.0);\n}`),D.code.add(h`vec3 intersectRayPlane(vec3 rayDir, vec3 rayOrigin, vec3 planeNormal, vec3 planePoint) {\nfloat d = dot(planeNormal, planePoint);\nfloat t = (d - dot(planeNormal, rayOrigin)) / dot(planeNormal, rayDir);\nreturn rayOrigin + t * rayDir;\n}`),D.code.add(h`\n      float boundingRectDistanceToCamera() {\n        vec3 center = vec3(boundingRect[0][0], boundingRect[0][1], boundingRect[0][2]);\n        vec3 halfU = vec3(boundingRect[1][0], boundingRect[1][1], boundingRect[1][2]);\n        vec3 halfV = vec3(boundingRect[2][0], boundingRect[2][1], boundingRect[2][2]);\n        vec3 n = normalize(cross(halfU, halfV));\n\n        vec3 viewDir = - vec3(view[0][2], view[1][2], view[2][2]);\n\n        float viewAngle = dot(viewDir, n);\n        float minViewAngle = ${h.float(x)};\n\n        if (abs(viewAngle) < minViewAngle) {\n          // view direction is (almost) parallel to plane -> clamp it to min angle\n          float normalComponent = sign(viewAngle) * minViewAngle - viewAngle;\n          viewDir = normalize(viewDir + normalComponent * n);\n        }\n\n        // intersect view direction with infinite plane that contains bounding rect\n        vec3 planeProjected = intersectRayPlane(viewDir, cameraPosition, n, center);\n\n        // clip to bounds by projecting to u and v line segments individually\n        vec3 uProjected = projectPointToLineSegment(center, halfU, planeProjected);\n        vec3 vProjected = projectPointToLineSegment(center, halfV, planeProjected);\n\n        // use to calculate the closest point to camera on bounding rect\n        vec3 closestPoint = uProjected + vProjected - center;\n\n        return length(closestPoint - cameraPosition);\n      }\n    `)),D.code.add(h`\n    vec2 scaledUV() {\n      vec2 uv = uvMapSpace.xy ${O?\" * rotate45\":\"\"};\n      vec2 uvCellOrigin = uvMapSpace.zw ${O?\" * rotate45\":\"\"};\n\n      ${T.draped?\"\":h`\n            float distanceToCamera = boundingRectDistanceToCamera();\n            float worldToScreenRatio = worldToScreenPerDistanceRatio / distanceToCamera;\n          `}\n\n      // Logarithmically discretize ratio to avoid jittering\n      float step = 0.1;\n      float discreteWorldToScreenRatio = log(worldToScreenRatio);\n      discreteWorldToScreenRatio = ceil(discreteWorldToScreenRatio / step) * step;\n      discreteWorldToScreenRatio = exp(discreteWorldToScreenRatio);\n\n      vec2 uvOffset = mod(uvCellOrigin * discreteWorldToScreenRatio, ${h.float(T.patternSpacing)});\n      return uvOffset + (uv * discreteWorldToScreenRatio);\n    }\n  `);const z=T.output===r.LinearDepth;return z&&(R.include(n,T),e(R),o(R)),D.code.add(h`\n    void main(void) {\n      vuv = scaledUV();\n      vpos = position;\n      ${$?\"depth = (view * vec4(vpos, 1.0)).z;\":\"\"}\n      forwardNormalizedVertexColor();\n      forwardObjectAndLayerIdColor();\n      ${T.hasVertexColors?\"vColor *= uColor;\":T.vvColor?\"vColor = uColor * interpolateVVColor(colorFeatureAttribute);\":\"vColor = uColor;\"}\n      gl_Position = ${z?h`transformPositionWithDepth(proj, view, vpos, nearFar, linearDepth);`:h`transformPosition(proj, view, vpos);`}\n    }\n  `),R.include(t,T),L.include(g),T.draped&&L.uniforms.add(new f(\"texelSize\",((e,o)=>1/o.camera.pixelRatio))),T.output===r.Highlight&&R.include(c,T),$&&R.include(d,T),T.output!==r.Highlight&&(L.code.add(h`\n      const float lineWidth = ${h.float(T.lineWidth)};\n      const float spacing = ${h.float(T.patternSpacing)};\n      const float spacingINV = ${h.float(1/T.patternSpacing)};\n\n      float coverage(float p, float txlSize) {\n        p = mod(p, spacing);\n\n        float halfTxlSize = txlSize / 2.0;\n\n        float start = p - halfTxlSize;\n        float end = p + halfTxlSize;\n\n        float coverage = (ceil(end * spacingINV) - floor(start * spacingINV)) * lineWidth;\n        coverage -= min(lineWidth, mod(start, spacing));\n        coverage -= max(lineWidth - mod(end, spacing), 0.0);\n\n        return coverage / txlSize;\n      }\n    `),T.draped||L.code.add(h`const int maxSamples = 5;\nfloat sampleAA(float p) {\nvec2 dxdy = abs(vec2(dFdx(p), dFdy(p)));\nfloat fwidth = dxdy.x + dxdy.y;\nivec2 samples = 1 + ivec2(clamp(dxdy, 0.0, float(maxSamples - 1)));\nvec2 invSamples = 1.0 / vec2(samples);\nfloat accumulator = 0.0;\nfor (int j = 0; j < maxSamples; j++) {\nif(j >= samples.y) {\nbreak;\n}\nfor (int i = 0; i < maxSamples; i++) {\nif(i >= samples.x) {\nbreak;\n}\nvec2 step = vec2(i,j) * invSamples - 0.5;\naccumulator += coverage(p + step.x * dxdy.x + step.y * dxdy.y, fwidth);\n}\n}\naccumulator /= float(samples.x * samples.y);\nreturn accumulator;\n}`)),L.code.add(h`\n    void main() {\n      discardBySlice(vpos);\n      ${$?\"terrainDepthTest(depth);\":\"\"}\n      vec4 color = vColor;\n      color = highlightSlice(color, vpos);\n\n      ${T.output!==r.Highlight?h`color.a *= ${P(T)};`:\"\"}\n\n      ${T.output===r.ObjectAndLayerIdColor?h`color.a = 1.0;`:\"\"}\n\n      if (color.a < ${h.float(p)}) {\n        discard;\n      }\n\n      ${T.output===r.Alpha?h`fragColor = vec4(color.a);`:\"\"}\n\n      ${T.output===r.Color?h`fragColor = color; ${T.transparencyPassType===b.Color?\"fragColor = premultiplyAlpha(fragColor);\":\"\"}`:\"\"}\n      ${T.output===r.Highlight?h`outputHighlight();`:\"\"}\n      ${T.output===r.LinearDepth?h`outputDepth(linearDepth);`:\"\"};\n      ${T.output===r.ObjectAndLayerIdColor?h`outputObjectAndLayerIdColor();`:\"\"}\n    }\n  `),R}function P(e){function o(o){return e.draped?h`coverage(vuv.${o}, texelSize)`:h`sampleAA(vuv.${o})`}switch(e.style){case j.ForwardDiagonal:case j.Horizontal:return o(\"y\");case j.BackwardDiagonal:case j.Vertical:return o(\"x\");case j.DiagonalCross:case j.Cross:return h`\n        1.0 - (1.0 - ${o(\"x\")}) * (1.0 - ${o(\"y\")})\n      `;default:return\"0.0\"}}const R=Object.freeze(Object.defineProperty({__proto__:null,build:T},Symbol.toStringTag,{value:\"Module\"}));export{R as P,T as b};\n"],
  "mappings": "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",
  "names": ["a", "T", "R", "o", "e", "l", "d", "a", "t", "P"]
}
