{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/components/src/utils/observers.ts"],
  "sourcesContent": ["import { Build } from \"@stencil/core\";\n\nexport interface ExtendedMutationObserver extends MutationObserver {\n  new: () => ExtendedMutationObserver;\n  unobserve(target: Node): void;\n}\n\ndeclare const ExtendedMutationObserver: {\n  prototype: ExtendedMutationObserver;\n  new (callback: MutationCallback): ExtendedMutationObserver;\n};\n\ntype ObserverType = \"mutation\" | \"intersection\" | \"resize\";\n\ntype ObserverCallbackType<T extends ObserverType> = T extends \"mutation\"\n  ? MutationCallback\n  : T extends \"intersection\"\n    ? IntersectionObserverCallback\n    : T extends \"resize\"\n      ? ResizeObserverCallback\n      : never;\n\ntype ObserverOptions<T extends ObserverType> = T extends \"intersection\" ? IntersectionObserverInit : never;\n\ntype ObserverClassType<T extends ObserverType> = T extends \"mutation\"\n  ? typeof ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? typeof IntersectionObserver\n    : T extends \"resize\"\n      ? typeof ResizeObserver\n      : never;\n\ntype ObserverInstanceType<T extends ObserverType> = T extends \"mutation\"\n  ? ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? IntersectionObserver\n    : T extends \"resize\"\n      ? ResizeObserver\n      : never;\n\n/**\n * This utility ensures observers are created only for browser contexts.\n *\n * @param type - the type of observer to create\n * @param callback - the observer callback\n * @param options - the observer options\n */\nexport function createObserver<T extends ObserverType>(\n  type: T,\n  callback: ObserverCallbackType<T>,\n  options?: ObserverOptions<T>,\n): ObserverInstanceType<T> | undefined {\n  if (!Build.isBrowser) {\n    return undefined;\n  }\n\n  const Observer = getObserver<T>(type);\n  return new Observer(callback as any, options) as any;\n}\n\nfunction getObserver<T extends ObserverType>(type: T): ObserverClassType<T> {\n  // based on https://github.com/whatwg/dom/issues/126#issuecomment-1049814948\n  class ExtendedMutationObserver extends window.MutationObserver implements ExtendedMutationObserver {\n    private observedEntry: Array<{\n      target: Node;\n      options?: MutationObserverInit;\n    }> = [];\n\n    private readonly callback: MutationCallback;\n\n    constructor(callback: MutationCallback) {\n      super(callback);\n      this.callback = callback;\n    }\n\n    observe(target: Node, options?: MutationObserverInit): void {\n      this.observedEntry.push({ target, options });\n\n      return super.observe(target, options);\n    }\n\n    unobserve(target: Node): void {\n      const newObservedEntries = this.observedEntry.filter((observed) => observed.target !== target);\n      this.observedEntry = [];\n      this.callback(super.takeRecords(), this);\n      this.disconnect();\n      newObservedEntries.forEach((observed) => this.observe(observed.target, observed.options));\n    }\n  }\n\n  return (function () {\n    return (\n      type === \"intersection\"\n        ? window.IntersectionObserver\n        : type === \"mutation\"\n          ? ExtendedMutationObserver\n          : window.ResizeObserver\n    ) as any;\n  })();\n}\n"],
  "mappings": ";;;;;SA+CgB,eACd,MACA,UACA,SAA4B;AAE5B,MAAI,CAAC,MAAM,WAAW;AACpB,WAAO;;AAGT,QAAM,WAAW,YAAe,IAAI;AACpC,SAAO,IAAI,SAAS,UAAiB,OAAO;AAC9C;AAEA,SAAS,YAAoC,MAAO;EAElD,MAAM,iCAAiC,OAAO,iBAAgB;IAQ5D,YAAY,UAA0B;AACpC,YAAM,QAAQ;AARR,WAAA,gBAGH,CAAA;AAMH,WAAK,WAAW;;IAGlB,QAAQ,QAAc,SAA8B;AAClD,WAAK,cAAc,KAAK,EAAE,QAAQ,QAAO,CAAE;AAE3C,aAAO,MAAM,QAAQ,QAAQ,OAAO;;IAGtC,UAAU,QAAY;AACpB,YAAM,qBAAqB,KAAK,cAAc,OAAO,CAAC,aAAa,SAAS,WAAW,MAAM;AAC7F,WAAK,gBAAgB,CAAA;AACrB,WAAK,SAAS,MAAM,YAAW,GAAI,IAAI;AACvC,WAAK,WAAU;AACf,yBAAmB,QAAQ,CAAC,aAAa,KAAK,QAAQ,SAAS,QAAQ,SAAS,OAAO,CAAC;;;AAI5F,SAAQ,WAAA;AACN,WACE,SAAS,iBACL,OAAO,uBACP,SAAS,aACP,2BACA,OAAO;IAEhB;AACH;",
  "names": []
}
