import {
  I,
  P,
  y as y2
} from "./chunk-SA77Z3WI.js";
import {
  i
} from "./chunk-QMPD4WXY.js";
import {
  l
} from "./chunk-AHEDDTVZ.js";
import {
  e as e3
} from "./chunk-XW3FDKYP.js";
import {
  j
} from "./chunk-4ZLXDMI5.js";
import {
  t
} from "./chunk-UUG4W2PI.js";
import {
  u as u3
} from "./chunk-WW22JHXA.js";
import {
  S
} from "./chunk-ZAM62XN5.js";
import {
  d,
  f as f2
} from "./chunk-RKVEKQ5O.js";
import "./chunk-P7J4JFEH.js";
import {
  b as b2
} from "./chunk-G7FOE26O.js";
import "./chunk-USOPZ2Q6.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-AKLOTDO2.js";
import "./chunk-6AQIVLDN.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-LBXFRGMS.js";
import "./chunk-VTH4DAHQ.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-SLQA5YBV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import {
  n as n3
} from "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import {
  M
} from "./chunk-OCF7OAES.js";
import {
  K,
  O,
  b,
  e as e2,
  m,
  r as r2,
  u as u2
} from "./chunk-JZBR4X6W.js";
import {
  n as n2,
  r
} from "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import {
  w
} from "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import {
  f
} from "./chunk-MBGZKT2Z.js";
import {
  u
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import {
  U
} from "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a2
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  a
} from "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n,
  s
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/layers/IntegratedMesh3DTilesLayer.js
var U2 = class extends l(u3(j(t(S(e3(i(b2))))))) {
  constructor(e4) {
    super(e4), this.operationalLayerType = "IntegratedMesh3DTilesLayer", this.spatialReference = new f({ wkid: 4326, vcsWkid: 115700 }), this.fullExtent = new w(-180, -90, 180, 90, this.spatialReference), this.url = null, this.type = "integrated-mesh-3dtiles", this.path = null, this.minScale = 0, this.maxScale = 0;
  }
  set elevationInfo(e4) {
    this._set("elevationInfo", e4), this._validateElevationInfo();
  }
  _verifyArray(e4, t2) {
    if (!Array.isArray(e4) || e4.length < t2)
      return false;
    for (const r3 of e4)
      if ("number" != typeof r3)
        return false;
    return true;
  }
  _initFullExtent(e4) {
    var _a, _b;
    const t2 = (_a = e4.root) == null ? void 0 : _a.boundingVolume;
    if (!t2)
      return;
    if (t2.box) {
      const e5 = t2 == null ? void 0 : t2.box;
      if (e5[3] > 7972671 && e5[7] > 7972671 && e5[11] > 7945940)
        return;
    }
    const r3 = (_b = e4.root) == null ? void 0 : _b.transform, i2 = n2();
    if (t2.region && this._verifyArray(t2.region, 6)) {
      const e5 = t2.region, r4 = M(e5[0]), i3 = M(e5[1]), s2 = e5[4], a3 = M(e5[2]), n4 = M(e5[3]), m2 = e5[5];
      this.fullExtent = new w({ xmin: r4, ymin: i3, zmin: s2, xmax: a3, ymax: n4, zmax: m2, spatialReference: this.spatialReference });
    } else if (t2.sphere && this._verifyArray(t2.sphere, 4)) {
      const e5 = t2.sphere, o = r(e5[0], e5[1], e5[2]), s2 = e5[3] / Math.sqrt(3), a3 = n2();
      e2(a3, o, r(-s2, -s2, -s2));
      const n4 = n2();
      if (u2(n4, o, r(s2, s2, s2)), r3 && this._verifyArray(r3, 16)) {
        const e6 = r3;
        O(i2, a3, e6), r2(a3, i2), O(i2, n4, e6), r2(n4, i2);
      }
      n3(a3, u, 0, a3, f.WGS84, 0, 1), n3(n4, u, 0, n4, f.WGS84, 0, 1);
      const m2 = n2(), d2 = n2();
      m(m2, a3, n4), b(d2, a3, n4), this.fullExtent = new w({ xmin: m2[0], ymin: m2[1], zmin: m2[2], xmax: d2[0], ymax: d2[1], zmax: d2[2], spatialReference: this.spatialReference });
    } else if (t2.box && this._verifyArray(t2.box, 12)) {
      const e5 = t2.box, i3 = r(e5[0], e5[1], e5[2]), o = r(e5[3], e5[4], e5[5]), s2 = r(e5[6], e5[7], e5[8]), a3 = r(e5[9], e5[10], e5[11]), n4 = [];
      for (let t3 = 0; t3 < 8; ++t3)
        n4.push(n2());
      if (u2(n4[0], i3, o), u2(n4[0], n4[0], s2), u2(n4[0], n4[0], a3), K(n4[1], i3, o), u2(n4[1], n4[1], s2), u2(n4[1], n4[1], a3), u2(n4[2], i3, o), K(n4[2], n4[2], s2), u2(n4[2], n4[2], a3), K(n4[3], i3, o), K(n4[3], n4[3], s2), u2(n4[3], n4[3], a3), u2(n4[4], i3, o), u2(n4[4], n4[4], s2), K(n4[4], n4[4], a3), K(n4[5], i3, o), u2(n4[5], n4[5], s2), K(n4[5], n4[5], a3), u2(n4[6], i3, o), K(n4[6], n4[6], s2), K(n4[6], n4[6], a3), K(n4[7], i3, o), K(n4[7], n4[7], s2), K(n4[7], n4[7], a3), r3 && this._verifyArray(r3, 16)) {
        const e6 = r3;
        for (let t3 = 0; t3 < 8; ++t3)
          O(n4[t3], n4[t3], e6);
      }
      const m2 = r(Number.MIN_VALUE, Number.MIN_VALUE, Number.MIN_VALUE), l2 = r(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
      for (let t3 = 0; t3 < 8; ++t3)
        n3(n4[t3], u, 0, n4[t3], f.WGS84, 0, 1), m(l2, l2, n4[t3]), b(m2, m2, n4[t3]);
      this.fullExtent = new w({ xmin: l2[0], ymin: l2[1], zmin: l2[2], xmax: m2[0], ymax: m2[1], zmax: m2[2], spatialReference: this.spatialReference });
    }
  }
  async load(e4) {
    return this.addResolvingPromise(this._doLoad(e4)), this;
  }
  async _doLoad(e4) {
    const i2 = null != e4 ? e4.signal : null;
    try {
      await this.loadFromPortal({ supportedTypes: ["3DTiles Service"], validateItem: (e5) => {
        var _a;
        if ((_a = e5.typeKeywords) == null ? void 0 : _a.includes("IntegratedMesh"))
          return true;
        throw new s("portal:invalid-layer-item-type", "Invalid layer item, expected '${expectedType}' ", { expectedType: "3DTiles Service containing IntegratedMesh" });
      } }, e4);
    } catch (o) {
      a(o);
    }
    if (this.url) {
      const e5 = U(this.url, { query: { f: "json", ...this.customParameters, token: this.apiKey }, responseType: "json", signal: i2 }).then((e6) => {
        this._initFullExtent(e6.data);
      }, (e6) => {
        a(e6);
      });
      await e5;
    }
  }
  async fetchAttributionData() {
    return this.load().then(() => ({}));
  }
  _validateElevationInfo() {
    const e4 = this.elevationInfo, t2 = "Integrated mesh 3d tiles layers";
    P(n.getLogger(this), y2(t2, "absolute-height", e4)), P(n.getLogger(this), I(t2, e4));
  }
};
e([y({ type: ["IntegratedMesh3DTilesLayer"] })], U2.prototype, "operationalLayerType", void 0), e([y({ type: f })], U2.prototype, "spatialReference", void 0), e([y({ type: w })], U2.prototype, "fullExtent", void 0), e([y(f2)], U2.prototype, "elevationInfo", null), e([y({ type: ["show", "hide"] })], U2.prototype, "listMode", void 0), e([y(d)], U2.prototype, "url", void 0), e([y({ readOnly: true })], U2.prototype, "type", void 0), e([y({ type: String, json: { origins: { "web-scene": { read: true, write: true }, "portal-item": { read: true, write: true } }, read: false } })], U2.prototype, "path", void 0), e([y({ type: Number, json: { origins: { "web-scene": { name: "layerDefinition.minScale", write: () => {
}, read: () => {
} }, "portal-item": { name: "layerDefinition.minScale", write: () => {
}, read: () => {
} } } } })], U2.prototype, "minScale", void 0), e([y({ type: Number, json: { origins: { "web-scene": { name: "layerDefinition.maxScale", write: () => {
}, read: () => {
} }, "portal-item": { name: "layerDefinition.maxScale", write: () => {
}, read: () => {
} } } } })], U2.prototype, "maxScale", void 0), U2 = e([a2("esri.layers.IntegratedMesh3DTilesLayer")], U2);
var z = U2;
export {
  z as default
};
//# sourceMappingURL=IntegratedMesh3DTilesLayer-S2ZJYF4G.js.map
