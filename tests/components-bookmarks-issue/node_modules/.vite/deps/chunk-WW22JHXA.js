import {
  C,
  g as g2
} from "./chunk-RKVEKQ5O.js";
import {
  a as a2
} from "./chunk-P7J4JFEH.js";
import {
  o
} from "./chunk-YOPMY6TS.js";
import {
  r
} from "./chunk-VIN55KNF.js";
import {
  Z
} from "./chunk-SAYWXQVM.js";
import {
  d,
  g
} from "./chunk-SBL4URUW.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import {
  s
} from "./chunk-7RBRCL6S.js";

// node_modules/@arcgis/core/layers/mixins/operationalLayers.js
var e2 = { ArcGISAnnotationLayer: true, ArcGISDimensionLayer: true, ArcGISFeatureLayer: true, ArcGISImageServiceLayer: true, ArcGISImageServiceVectorLayer: true, ArcGISMapServiceLayer: true, ArcGISStreamLayer: true, ArcGISTiledImageServiceLayer: true, ArcGISTiledMapServiceLayer: true, BingMapsAerial: true, BingMapsHybrid: true, BingMapsRoad: true, CatalogLayer: true, CSV: true, GeoJSON: true, GeoRSS: true, GroupLayer: true, KML: true, KnowledgeGraphLayer: true, MediaLayer: true, OGCFeatureLayer: true, OrientedImageryLayer: true, SubtypeGroupLayer: true, VectorTileLayer: true, WFS: true, WMS: true, WebTiledLayer: true };
var r2 = { ArcGISImageServiceLayer: true, ArcGISImageServiceVectorLayer: true, ArcGISMapServiceLayer: true, ArcGISTiledImageServiceLayer: true, ArcGISTiledMapServiceLayer: true, BingMapsAerial: true, BingMapsHybrid: true, BingMapsRoad: true, OpenStreetMap: true, VectorTileLayer: true, WMS: true, WebTiledLayer: true };
var a3 = { ArcGISFeatureLayer: true, SubtypeGroupTable: true };
var i = { "web-scene/operational-layers": { ArcGISDimensionLayer: true, ArcGISFeatureLayer: true, ArcGISImageServiceLayer: true, ArcGISMapServiceLayer: true, ArcGISSceneServiceLayer: true, ArcGISTiledElevationServiceLayer: true, ArcGISTiledImageServiceLayer: true, ArcGISTiledMapServiceLayer: true, BuildingSceneLayer: true, CSV: true, GeoJSON: true, GroupLayer: true, IntegratedMesh3DTilesLayer: true, IntegratedMeshLayer: true, KML: true, LineOfSightLayer: true, MediaLayer: true, OGCFeatureLayer: true, PointCloudLayer: true, RasterDataLayer: true, VectorTileLayer: true, Voxel: true, WFS: true, WMS: true, WebTiledLayer: true }, "web-scene/basemap": { ArcGISImageServiceLayer: true, ArcGISMapServiceLayer: true, ArcGISSceneServiceLayer: true, ArcGISTiledImageServiceLayer: true, ArcGISTiledMapServiceLayer: true, OpenStreetMap: true, VectorTileLayer: true, WMS: true, WebTiledLayer: true }, "web-scene/ground": { ArcGISTiledElevationServiceLayer: true, RasterDataElevationLayer: true }, "web-scene/tables": { ArcGISFeatureLayer: true }, "web-map/operational-layers": e2, "web-map/basemap": r2, "web-map/tables": a3, "link-chart/operational-layers": { ...e2, LinkChartLayer: true }, "link-chart/basemap": r2, "link-chart/tables": a3, "portal-item/operational-layers": { ArcGISFeatureLayer: true, ArcGISImageServiceLayer: true, ArcGISSceneServiceLayer: true, ArcGISStreamLayer: true, ArcGISTiledImageServiceLayer: true, BuildingSceneLayer: true, IntegratedMesh3DTilesLayer: true, IntegratedMeshLayer: true, MediaLayer: true, OrientedImageryLayer: true, PointCloudLayer: true, SubtypeGroupLayer: true } };

// node_modules/@arcgis/core/layers/mixins/OperationalLayer.js
var u = (u2) => {
  let m = class extends u2 {
    constructor() {
      super(...arguments), this.persistenceEnabled = true, this.title = null;
    }
    readId(e3, r3, t) {
      var _a;
      return "Group Layer" === ((_a = t == null ? void 0 : t.portalItem) == null ? void 0 : _a.type) ? void 0 : e3;
    }
    writeListMode(e3, r3, t, o2) {
      (o2 && "ground" === o2.layerContainerType || e3 && g(this, t, {}, o2)) && (r3[t] = e3);
    }
    writeOperationalLayerType(e3, r3, t, o2) {
      e3 && "tables" !== (o2 == null ? void 0 : o2.layerContainerType) && (r3.layerType = e3);
    }
    writeTitle(e3, r3) {
      r3.title = e3 ?? "Layer";
    }
    read(e3, r3) {
      r3 && (r3.layer = this), d(this, e3, (r4) => super.read(e3, r4), r3);
    }
    write(e3, o2) {
      var _a, _b;
      if (!this.persistenceEnabled)
        return null;
      if (o2 == null ? void 0 : o2.origin) {
        const e4 = `${o2.origin}/${o2.layerContainerType || "operational-layers"}`, t = i[e4];
        let i3 = !!(t == null ? void 0 : t[this.operationalLayerType]);
        if ("ArcGISTiledElevationServiceLayer" === this.operationalLayerType && "web-scene/operational-layers" === e4 && (i3 = false), "ArcGISDimensionLayer" === this.operationalLayerType && "web-map/operational-layers" === e4 && (i3 = false), !i3)
          return (_a = o2.messages) == null ? void 0 : _a.push(new s("layer:unsupported", `Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e4}'`, { layer: this })), null;
      }
      const i2 = super.write(e3, { ...o2, layer: this }), s2 = !!o2 && !!o2.messages && !!o2.messages.filter((e4) => e4 instanceof s && "web-document-write:property-required" === e4.name).length;
      return Z(i2 == null ? void 0 : i2.url) ? ((_b = o2 == null ? void 0 : o2.messages) == null ? void 0 : _b.push(new s("layer:invalid-url", `Layer (${this.title}, ${this.id}) of type '${this.declaredClass}' using a Blob URL cannot be written to web scenes and web maps`, { layer: this })), null) : !this.url && s2 ? null : i2;
    }
    beforeSave() {
    }
  };
  return e([y({ type: String, json: { write: { ignoreOrigin: true }, origins: { "web-scene": { write: { isRequired: true, ignoreOrigin: true } }, "portal-item": { write: false } } } })], m.prototype, "id", void 0), e([o("id", ["id"])], m.prototype, "readId", null), e([y(C)], m.prototype, "listMode", void 0), e([r("listMode")], m.prototype, "writeListMode", null), e([y({ type: String, readOnly: true, json: { read: false, write: { target: "layerType", ignoreOrigin: true }, origins: { "portal-item": { write: false }, "web-scene": { name: "layerType", read: false, write: { enabled: true, ignoreOrigin: true, layerContainerTypes: a2 } } } } })], m.prototype, "operationalLayerType", void 0), e([r("operationalLayerType")], m.prototype, "writeOperationalLayerType", null), e([y(g2)], m.prototype, "opacity", void 0), e([y({ type: Boolean, readOnly: false })], m.prototype, "persistenceEnabled", void 0), e([y({ type: String, json: { write: { ignoreOrigin: true, writerEnsuresNonNull: true }, origins: { "web-scene": { write: { isRequired: true, ignoreOrigin: true, writerEnsuresNonNull: true } }, "portal-item": { write: false } } }, value: "Layer" })], m.prototype, "title", void 0), e([r("title"), r(["web-scene"], "title")], m.prototype, "writeTitle", null), e([y({ type: Boolean, json: { origins: { "web-scene": { name: "visibility", write: { enabled: true, layerContainerTypes: a2 } } }, name: "visibility", write: true } })], m.prototype, "visible", void 0), m = e([a("esri.layers.mixins.OperationalLayer")], m), m;
};

export {
  u
};
//# sourceMappingURL=chunk-WW22JHXA.js.map
