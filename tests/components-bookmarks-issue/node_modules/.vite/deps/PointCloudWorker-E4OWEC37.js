import {
  c,
  f as f2,
  i,
  u
} from "./chunk-ABB5QLHO.js";
import {
  n as n2,
  t as t2
} from "./chunk-YUWVLORR.js";
import "./chunk-DJI5O7V7.js";
import "./chunk-5DH2QVPW.js";
import {
  I
} from "./chunk-GPWQGIYV.js";
import "./chunk-WZJNHZ6H.js";
import "./chunk-H6NTWZSO.js";
import "./chunk-42DUJ2CX.js";
import "./chunk-Z2F5OKVA.js";
import "./chunk-UQA6M3KF.js";
import "./chunk-GLF3KRAL.js";
import "./chunk-ZLQTPFTL.js";
import "./chunk-WIVZ7SMV.js";
import "./chunk-O76UVYOO.js";
import {
  O
} from "./chunk-QCMUK3QA.js";
import "./chunk-HZSGATFT.js";
import {
  e
} from "./chunk-KNMQQRV7.js";
import "./chunk-N5GQOIDP.js";
import "./chunk-NFB6O77E.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-VBUVOOM6.js";
import {
  n
} from "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-OCF7OAES.js";
import {
  E
} from "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import {
  f
} from "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-VIN55KNF.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import "./chunk-NDIXNREV.js";
import "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import "./chunk-7RBRCL6S.js";
import {
  k,
  t4 as t
} from "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/views/3d/layers/PointCloudWorker.js
var c2 = class {
  transform(t3) {
    const e2 = this._transform(t3), o = [e2.points.buffer, e2.rgb.buffer];
    null != e2.pointIdFilterMap && o.push(e2.pointIdFilterMap.buffer);
    for (const a of e2.attributes)
      "buffer" in a.values && t(a.values.buffer) && a.values.buffer !== e2.rgb.buffer && o.push(a.values.buffer);
    return Promise.resolve({ result: e2, transferList: o });
  }
  _transform(r) {
    const e2 = u(r.schema, r.geometryBuffer);
    let o = e2.length / 3, a = null;
    const i2 = new Array(), f3 = c(r.primaryAttributeData, e2, o);
    null != r.primaryAttributeData && f3 && i2.push({ attributeInfo: r.primaryAttributeData.attributeInfo, values: f3 });
    const s = c(r.modulationAttributeData, e2, o);
    null != r.modulationAttributeData && s && i2.push({ attributeInfo: r.modulationAttributeData.attributeInfo, values: s });
    let c3 = i(r.rendererInfo, f3, s, o);
    if (r.filterInfo && r.filterInfo.length > 0 && null != r.filterAttributesData) {
      const f4 = r.filterAttributesData.filter(k).map((t3) => {
        const r2 = c(t3, e2, o), a2 = { attributeInfo: t3.attributeInfo, values: r2 };
        return i2.push(a2), a2;
      });
      a = new Uint32Array(o), o = f2(e2, c3, a, r.filterInfo, f4);
    }
    for (const t3 of r.userAttributesData) {
      const r2 = c(t3, e2, o);
      i2.push({ attributeInfo: t3.attributeInfo, values: r2 });
    }
    3 * o < c3.length && (c3 = new Uint8Array(c3.buffer.slice(0, 3 * o))), I2(e2, o, r.elevationOffset);
    const A2 = h(e2, o, I.fromData(r.obbData), f.fromJSON(r.inSR), f.fromJSON(r.outSR));
    return { obbData: r.obbData, points: A2, rgb: c3, attributes: i2, pointIdFilterMap: a };
  }
};
function h(t3, r, o, n3, u2) {
  if (!n(t3, n3, 0, t3, u2, 0, r))
    throw new Error("Can't reproject");
  const l = t2(o.center), m = n2(), b = n2(), p = t2(o.halfSize);
  O(A, o.quaternion);
  const c3 = new Float32Array(3 * r);
  for (let e2 = 0; e2 < r; e2++) {
    let r2 = 3 * e2;
    m[0] = t3[r2] - l[0], m[1] = t3[r2 + 1] - l[1], m[2] = t3[r2 + 2] - l[2], E(b, m, A), p[0] = Math.max(p[0], Math.abs(b[0])), p[1] = Math.max(p[1], Math.abs(b[1])), p[2] = Math.max(p[2], Math.abs(b[2])), c3[r2++] = m[0], c3[r2++] = m[1], c3[r2] = m[2];
  }
  return o.halfSize = p, c3;
}
function I2(t3, r, e2) {
  if (0 !== e2)
    for (let o = 0; o < r; o++)
      t3[3 * o + 2] += e2;
}
var A = e();
function g() {
  return new c2();
}
export {
  g as default
};
//# sourceMappingURL=PointCloudWorker-E4OWEC37.js.map
