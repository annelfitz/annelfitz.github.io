import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  importCoreReactiveUtils,
  newWidgetsBasemapLayerList
} from "./chunk-YXW2SI4L.js";
import {
  addHandles,
  checkForView,
  referenceElementHelper
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-basemap-layer-list.entry.js
var basemapLayerListCss = "";
var ArcgisBasemapLayerList = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.arcgisBasemapLayerListReady = createEvent(this, "arcgisBasemapLayerListReady", 7);
    this.basemapLayerListTriggerAction = createEvent(this, "basemapLayerListTriggerAction", 7);
    this._watchHandles = [];
    this.referenceElement = void 0;
    this.baseFilterText = "";
    this.baseItems = void 0;
    this.baseListItemCreatedFunction = void 0;
    this.basemapTitle = void 0;
    this.collapsed = false;
    this.dragEnabled = false;
    this.editingTitle = false;
    this.filterPlaceholder = "";
    this.icon = void 0;
    this.minFilterItems = 10;
    this.referenceFilterText = "";
    this.referenceListItemCreatedFunction = void 0;
    this.selectedItems = void 0;
    this.selectionMode = "none";
    this.visibilityAppearance = "default";
    this.visibleElementsBaseLayers = true;
    this.visibleElementsCloseButton = false;
    this.visibleElementsCollapseButton = false;
    this.visibleElementsEditTitleButton = false;
    this.visibleElementsErrors = false;
    this.visibleElementsFilter = false;
    this.visibleElementsFlow = true;
    this.visibleElementsHeading = true;
    this.visibleElementsReferenceLayers = true;
    this.visibleElementsStatusIndicators = true;
    this.visibleElementsTemporaryLayerIndicators = false;
    this.view = void 0;
    this.widget = void 0;
    this.position = "bottom-left";
  }
  referenceElementWatcher(value) {
    void referenceElementHelper(this, value);
  }
  baseFilterTextWatcher(value) {
    if (this.widget) {
      this.widget.baseFilterText = value;
    }
  }
  baseListItemCreatedFunctionWatcher(value) {
    if (this.widget) {
      this.widget.baseListItemCreatedFunction = value;
    }
  }
  basemapTitleWatcher(value, old) {
    if (this.widget && value !== old) {
      this.widget.basemapTitle = value;
    }
  }
  collapsedWatcher(value) {
    if (this.widget && this.widget.collapsed !== value) {
      this.widget.collapsed = value;
    }
  }
  dragEnabledWatcher(value) {
    if (this.widget && value !== void 0) {
      this.widget.dragEnabled = value;
    }
  }
  editingTitleWatcher(value) {
    if (this.widget && value !== void 0) {
      this.widget.editingTitle = value;
    }
  }
  filterPlaceholderWatcher(value) {
    if (this.widget) {
      this.widget.filterPlaceholder = value;
    }
  }
  iconWatcher(value) {
    if (this.widget) {
      this.widget.icon = value;
    }
  }
  minFilterItemsWatcher(value) {
    if (this.widget) {
      this.widget.minFilterItems = value;
    }
  }
  referenceFilterTextWatcher(value) {
    if (this.widget) {
      this.widget.referenceFilterText = value;
    }
  }
  referenceListItemCreatedFunctionWatcher(value) {
    if (this.widget) {
      this.widget.referenceListItemCreatedFunction = value;
    }
  }
  selectionModeWatcher(value) {
    if (this.widget) {
      this.widget.selectionMode = value;
    }
  }
  visibilityAppearanceWatcher(value) {
    if (this.widget) {
      this.widget.visibilityAppearance = value;
    }
  }
  visibleElementsBaseLayersWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        baseLayers: value
      };
    }
  }
  visibleElementsCloseButtonWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        closeButton: value
      };
    }
  }
  visibleElementsCollapseButtonWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        collapseButton: value
      };
    }
  }
  visibleElementsEditTitleButtonWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        editTitleButton: value
      };
    }
  }
  visibleElementsErrorsWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        errors: value
      };
    }
  }
  visibleElementsFilterWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        filter: value
      };
    }
  }
  visibleElementsFlowWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        flow: value
      };
    }
  }
  visibleElementsHeadingWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        filter: value
      };
    }
  }
  visibleElementsReferenceLayersWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        referenceLayers: value
      };
    }
  }
  visibleElementsStatusIndicatorsWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        statusIndicators: value
      };
    }
  }
  visibleElementsTemporaryLayerIndicatorsWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        temporaryLayerIndicators: value
      };
    }
  }
  viewWatcher(value) {
    if (this.widget) {
      this.widget.view = value;
    }
  }
  positionWatcher(value) {
    if (this.widget) {
      this.view.ui.move(this.childElem, value);
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = this._createParams();
    const widget = await newWidgetsBasemapLayerList(params);
    this.widget = widget;
    await this._addWatchers();
    await this._addWatchers();
    this._proxyEvents();
    this._addContainer();
    this.arcgisBasemapLayerListReady.emit();
    checkForView(this);
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    return h("div", { ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  _addContainer() {
    this.widget.container = this.childElem;
  }
  _createParams() {
    const params = {};
    params.visibleElements = {
      baseLayers: this.visibleElementsBaseLayers,
      closeButton: this.visibleElementsCloseButton,
      collapseButton: this.visibleElementsCollapseButton,
      editTitleButton: this.visibleElementsEditTitleButton,
      errors: this.visibleElementsErrors,
      filter: this.visibleElementsFilter,
      flow: this.visibleElementsFlow,
      heading: this.visibleElementsHeading,
      referenceLayers: this.visibleElementsReferenceLayers,
      statusIndicators: this.visibleElementsStatusIndicators,
      temporaryLayerIndicators: this.visibleElementsTemporaryLayerIndicators
    };
    if (this.baseFilterText) {
      params.baseFilterText = this.baseFilterText;
    }
    if (this.baseListItemCreatedFunction) {
      params.baseListItemCreatedFunction = this.baseListItemCreatedFunction;
    }
    if (this.basemapTitle) {
      params.basemapTitle = this.basemapTitle;
    }
    if (this.collapsed !== void 0) {
      params.collapsed = this.collapsed;
    }
    if (this.dragEnabled !== void 0) {
      params.dragEnabled = this.dragEnabled;
    }
    if (this.editingTitle !== void 0) {
      params.editingTitle = this.editingTitle;
    }
    if (this.filterPlaceholder) {
      params.filterPlaceholder = this.filterPlaceholder;
    }
    if (this.icon) {
      params.icon = this.icon;
    }
    if (this.minFilterItems !== void 0) {
      params.minFilterItems = this.minFilterItems;
    }
    if (this.referenceFilterText) {
      params.referenceFilterText = this.referenceFilterText;
    }
    if (this.referenceListItemCreatedFunction) {
      params.referenceListItemCreatedFunction = this.referenceListItemCreatedFunction;
    }
    if (this.selectionMode) {
      params.selectionMode = this.selectionMode;
    }
    if (this.visibilityAppearance) {
      params.visibilityAppearance = this.visibilityAppearance;
    }
    if (this.view) {
      params.view = this.view;
    }
    return params;
  }
  async _addWatchers() {
    const { watch } = await importCoreReactiveUtils();
    addHandles(this, [
      watch(() => this.widget.baseItems, (value) => this.baseItems = value, {
        initial: true
      }),
      watch(() => this.widget.selectedItems, (value) => this.selectedItems = value, {
        initial: true
      }),
      watch(() => this.widget.basemapTitle, (value) => {
        if (!this.basemapTitle) {
          this.basemapTitle = value;
        }
      }, {
        initial: true
      }),
      watch(() => this.widget.collapsed, (value) => this.collapsed = value)
    ]);
  }
  _proxyEvents() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.on("trigger-action", (e) => this.basemapLayerListTriggerAction.emit(e));
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "referenceElement": ["referenceElementWatcher"],
      "baseFilterText": ["baseFilterTextWatcher"],
      "baseListItemCreatedFunction": ["baseListItemCreatedFunctionWatcher"],
      "basemapTitle": ["basemapTitleWatcher"],
      "collapsed": ["collapsedWatcher"],
      "dragEnabled": ["dragEnabledWatcher"],
      "editingTitle": ["editingTitleWatcher"],
      "filterPlaceholder": ["filterPlaceholderWatcher"],
      "icon": ["iconWatcher"],
      "minFilterItems": ["minFilterItemsWatcher"],
      "referenceFilterText": ["referenceFilterTextWatcher"],
      "referenceListItemCreatedFunction": ["referenceListItemCreatedFunctionWatcher"],
      "selectionMode": ["selectionModeWatcher"],
      "visibilityAppearance": ["visibilityAppearanceWatcher"],
      "visibleElementsBaseLayers": ["visibleElementsBaseLayersWatcher"],
      "visibleElementsCloseButton": ["visibleElementsCloseButtonWatcher"],
      "visibleElementsCollapseButton": ["visibleElementsCollapseButtonWatcher"],
      "visibleElementsEditTitleButton": ["visibleElementsEditTitleButtonWatcher"],
      "visibleElementsErrors": ["visibleElementsErrorsWatcher"],
      "visibleElementsFilter": ["visibleElementsFilterWatcher"],
      "visibleElementsFlow": ["visibleElementsFlowWatcher"],
      "visibleElementsHeading": ["visibleElementsHeadingWatcher"],
      "visibleElementsReferenceLayers": ["visibleElementsReferenceLayersWatcher"],
      "visibleElementsStatusIndicators": ["visibleElementsStatusIndicatorsWatcher"],
      "visibleElementsTemporaryLayerIndicators": ["visibleElementsTemporaryLayerIndicatorsWatcher"],
      "view": ["viewWatcher"],
      "position": ["positionWatcher"]
    };
  }
};
ArcgisBasemapLayerList.style = basemapLayerListCss;
export {
  ArcgisBasemapLayerList as arcgis_basemap_layer_list
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-basemap-layer-list.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-basemap-layer-list.entry-PTVCA42M.js.map
