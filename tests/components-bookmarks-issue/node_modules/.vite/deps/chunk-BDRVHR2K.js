// node_modules/@arcgis/core/geometry/support/quantizationUtils.js
var i = (n, t, e) => [t, e];
var o = (n, t, e) => [t, e, n[2]];
var a = (n, t, e) => [t, e, n[2], n[3]];
function m2(n) {
  if (!n)
    return null;
  return { originPosition: "upper-left" === n.originPosition ? "upperLeft" : "lower-left" === n.originPosition ? "lowerLeft" : n.originPosition, scale: n.tolerance ? [n.tolerance, n.tolerance] : [1, 1], translate: null != n.extent ? [n.extent.xmin, n.extent.ymax] : [0, 0] };
}
function s2({ scale: n, translate: t }, e) {
  return Math.round((e - t[0]) / n[0]);
}
function f2({ scale: n, translate: t }, e) {
  return Math.round((t[1] - e) / n[1]);
}
function p({ scale: n, translate: t }, e) {
  return e * n[0] + t[0];
}
function y({ scale: n, translate: t }, e) {
  return t[1] - e * n[1];
}
function z(n, t, e) {
  const r = new Array(e.length);
  if (!e.length)
    return r;
  const [u2, l2] = n.scale;
  let i2 = p(n, e[0][0]), o2 = y(n, e[0][1]);
  r[0] = t(e[0], i2, o2);
  for (let a2 = 1; a2 < e.length; a2++) {
    const n2 = e[a2];
    i2 += n2[0] * u2, o2 -= n2[1] * l2, r[a2] = t(n2, i2, o2);
  }
  return r;
}
function T(n, t, e) {
  const r = new Array(e.length);
  for (let u2 = 0; u2 < e.length; u2++)
    r[u2] = z(n, t, e[u2]);
  return r;
}
function E(n, t, e, r) {
  return z(n, e ? r ? a : o : r ? o : i, t);
}
function P(n, t, e, r) {
  return T(n, e ? r ? a : o : r ? o : i, t);
}
function b(n, t, e, r) {
  return T(n, e ? r ? a : o : r ? o : i, t);
}
function L(n, t, e, r, u2) {
  return t.x = s2(n, e.x), t.y = f2(n, e.y), t !== e && (r && (t.z = e.z), u2 && (t.m = e.m)), t;
}
function U(n, t, e, r, u2) {
  return null != e && (t.points = E(n, e.points, r, u2)), t;
}
function k(n, t, e, r, u2) {
  return null == e || (t.x = p(n, e.x), t.y = y(n, e.y), t !== e && (r && (t.z = e.z), u2 && (t.m = e.m))), t;
}
function q(n, t, e, r, u2) {
  return null != e && (t.rings = b(n, e.rings, r, u2)), t;
}
function v(n, t, e, r, u2) {
  return null != e && (t.paths = P(n, e.paths, r, u2)), t;
}

export {
  m2 as m,
  L,
  U,
  k,
  q,
  v
};
//# sourceMappingURL=chunk-BDRVHR2K.js.map
