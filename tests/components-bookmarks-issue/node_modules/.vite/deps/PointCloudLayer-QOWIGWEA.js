import {
  a as a4,
  a2 as a5,
  a3 as a6,
  d
} from "./chunk-DJI5O7V7.js";
import {
  C,
  L
} from "./chunk-YULKNNDN.js";
import "./chunk-A64EK7QM.js";
import {
  I,
  P,
  y as y4
} from "./chunk-SA77Z3WI.js";
import {
  i
} from "./chunk-QMPD4WXY.js";
import "./chunk-YBPOKK6D.js";
import {
  l
} from "./chunk-AHEDDTVZ.js";
import {
  s as s2
} from "./chunk-IHQNQQJC.js";
import {
  p
} from "./chunk-OHYLFFUW.js";
import {
  e as e2
} from "./chunk-XW3FDKYP.js";
import "./chunk-QNG4TY7L.js";
import "./chunk-H6NTWZSO.js";
import {
  y as y2
} from "./chunk-Z3NX5DTX.js";
import "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import {
  P as P2,
  i5 as i2
} from "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-EDPA37RA.js";
import "./chunk-DORNK7ZC.js";
import "./chunk-OWKPWQPA.js";
import "./chunk-CQFVWMFK.js";
import {
  j
} from "./chunk-4ZLXDMI5.js";
import "./chunk-VQWLJR3W.js";
import {
  t
} from "./chunk-UUG4W2PI.js";
import {
  u
} from "./chunk-WW22JHXA.js";
import {
  S
} from "./chunk-ZAM62XN5.js";
import {
  c,
  f as f2,
  y as y3
} from "./chunk-RKVEKQ5O.js";
import "./chunk-P7J4JFEH.js";
import {
  b
} from "./chunk-G7FOE26O.js";
import "./chunk-USOPZ2Q6.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-WDPG5BMO.js";
import {
  o as o3
} from "./chunk-TGXFDJCS.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-AKLOTDO2.js";
import "./chunk-6AQIVLDN.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-RDPH36VD.js";
import "./chunk-LBXFRGMS.js";
import "./chunk-VTH4DAHQ.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-SLQA5YBV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-5LSHHVQ5.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import {
  o as o2
} from "./chunk-YOPMY6TS.js";
import {
  r
} from "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-JCZIM4PO.js";
import {
  U,
  V
} from "./chunk-SAYWXQVM.js";
import {
  f
} from "./chunk-SBL4URUW.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  T,
  a3
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  a as a2
} from "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  a,
  n2 as n,
  o,
  s
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/layers/pointCloudFilters/PointCloudFilter.js
var t2 = class extends f {
  constructor(o4) {
    super(o4), this.field = null, this.type = null;
  }
  clone() {
    return console.warn(".clone() is not implemented for " + this.declaredClass), null;
  }
};
e([y({ type: String, json: { write: { enabled: true, isRequired: true } } })], t2.prototype, "field", void 0), e([y({ readOnly: true, nonNullable: true, json: { read: false } })], t2.prototype, "type", void 0), t2 = e([a3("esri.layers.pointCloudFilters.PointCloudFilter")], t2);
var l2 = t2;

// node_modules/@arcgis/core/layers/pointCloudFilters/PointCloudBitfieldFilter.js
var d2;
var p2 = d2 = class extends l2 {
  constructor(e4) {
    super(e4), this.requiredClearBits = null, this.requiredSetBits = null, this.type = "bitfield";
  }
  clone() {
    return new d2({ field: this.field, requiredClearBits: a(this.requiredClearBits), requiredSetBits: a(this.requiredSetBits) });
  }
};
e([y({ type: [T], json: { write: { enabled: true, overridePolicy() {
  return { enabled: true, isRequired: !this.requiredSetBits };
} } } })], p2.prototype, "requiredClearBits", void 0), e([y({ type: [T], json: { write: { enabled: true, overridePolicy() {
  return { enabled: true, isRequired: !this.requiredClearBits };
} } } })], p2.prototype, "requiredSetBits", void 0), e([o3({ pointCloudBitfieldFilter: "bitfield" })], p2.prototype, "type", void 0), p2 = d2 = e([a3("esri.layers.pointCloudFilters.PointCloudBitfieldFilter")], p2);
var u2 = p2;

// node_modules/@arcgis/core/layers/pointCloudFilters/PointCloudReturnFilter.js
var n2;
var p3 = n2 = class extends l2 {
  constructor(r2) {
    super(r2), this.includedReturns = [], this.type = "return";
  }
  clone() {
    return new n2({ field: this.field, includedReturns: a(this.includedReturns) });
  }
};
e([y({ type: [["firstOfMany", "last", "lastOfMany", "single"]], json: { write: { enabled: true, isRequired: true } } })], p3.prototype, "includedReturns", void 0), e([o3({ pointCloudReturnFilter: "return" })], p3.prototype, "type", void 0), p3 = n2 = e([a3("esri.layers.pointCloudFilters.PointCloudReturnFilter")], p3);
var u3 = p3;

// node_modules/@arcgis/core/layers/pointCloudFilters/PointCloudValueFilter.js
var l3;
var p4 = l3 = class extends l2 {
  constructor(e4) {
    super(e4), this.mode = "exclude", this.type = "value", this.values = [];
  }
  clone() {
    return new l3({ field: this.field, mode: this.mode, values: a(this.values) });
  }
};
e([y({ type: ["exclude", "include"], json: { write: { enabled: true, isRequired: true } } })], p4.prototype, "mode", void 0), e([o3({ pointCloudValueFilter: "value" })], p4.prototype, "type", void 0), e([y({ type: [Number], json: { write: { enabled: true, isRequired: true } } })], p4.prototype, "values", void 0), p4 = l3 = e([a3("esri.layers.pointCloudFilters.PointCloudValueFilter")], p4);
var u4 = p4;

// node_modules/@arcgis/core/layers/pointCloudFilters/typeUtils.js
var e3 = { key: "type", base: l2, typeMap: { value: u4, bitfield: u2, return: u3 } };

// node_modules/@arcgis/core/renderers/PointCloudRGBRenderer.js
var p5;
var c2 = p5 = class extends a4 {
  constructor(r2) {
    super(r2), this.type = "point-cloud-rgb", this.field = null;
  }
  clone() {
    return new p5({ ...this.cloneProperties(), field: a(this.field) });
  }
};
e([o3({ pointCloudRGBRenderer: "point-cloud-rgb" })], c2.prototype, "type", void 0), e([y({ type: String, json: { write: true } })], c2.prototype, "field", void 0), c2 = p5 = e([a3("esri.renderers.PointCloudRGBRenderer")], c2);
var n3 = c2;

// node_modules/@arcgis/core/renderers/support/pointCloud/typeUtils.js
var i3 = { key: "type", base: a4, typeMap: { "point-cloud-class-breaks": d, "point-cloud-rgb": n3, "point-cloud-stretch": a5, "point-cloud-unique-value": a6 }, errorContext: "renderer" };

// node_modules/@arcgis/core/layers/PointCloudLayer.js
var O = s2();
var V2 = class extends L(l(u(j(t(S(e2(i(b)))))))) {
  constructor(...e4) {
    super(...e4), this.operationalLayerType = "PointCloudLayer", this.popupEnabled = true, this.popupTemplate = null, this.opacity = 1, this.filters = [], this.fields = null, this.fieldsIndex = null, this.outFields = null, this.path = null, this.legendEnabled = true, this.renderer = null, this.type = "point-cloud";
  }
  normalizeCtorArgs(e4, r2) {
    return "string" == typeof e4 ? { url: e4, ...r2 } : e4;
  }
  get defaultPopupTemplate() {
    return this.attributeStorageInfo ? this.createPopupTemplate() : null;
  }
  getFieldDomain(e4) {
    const r2 = this.fieldsIndex.get(e4);
    return (r2 == null ? void 0 : r2.domain) ? r2.domain : null;
  }
  readServiceFields(e4, r2, t3) {
    return Array.isArray(e4) ? e4.map((e5) => {
      const r3 = new y2();
      return "FieldTypeInteger" === e5.type && ((e5 = a(e5)).type = "esriFieldTypeInteger"), r3.read(e5, t3), r3;
    }) : Array.isArray(r2.attributeStorageInfo) ? r2.attributeStorageInfo.map((e5) => new y2({ name: e5.name, type: "ELEVATION" === e5.name ? "double" : "integer" })) : null;
  }
  set elevationInfo(e4) {
    this._set("elevationInfo", e4), this._validateElevationInfo();
  }
  writeRenderer(e4, r2, t3, o4) {
    o("layerDefinition.drawingInfo.renderer", e4.write({}, o4), r2);
  }
  load(e4) {
    const r2 = null != e4 ? e4.signal : null, t3 = this.loadFromPortal({ supportedTypes: ["Scene Service"] }, e4).catch(a2).then(() => this._fetchService(r2));
    return this.addResolvingPromise(t3), Promise.resolve(this);
  }
  createPopupTemplate(e4) {
    const r2 = p(this, e4);
    return r2 && (this._formatPopupTemplateReturnsField(r2), this._formatPopupTemplateRGBField(r2)), r2;
  }
  _formatPopupTemplateReturnsField(e4) {
    var _a;
    const r2 = this.fieldsIndex.get("RETURNS");
    if (!r2)
      return;
    const t3 = (_a = e4.fieldInfos) == null ? void 0 : _a.find((e5) => e5.fieldName === r2.name);
    if (!t3)
      return;
    const o4 = new i2({ name: "pcl-returns-decoded", title: r2.alias || r2.name, expression: `
        var returnValue = $feature.${r2.name};
        return (returnValue % 16) + " / " + Floor(returnValue / 16);
      ` });
    e4.expressionInfos = [...e4.expressionInfos || [], o4], t3.fieldName = "expression/pcl-returns-decoded";
  }
  _formatPopupTemplateRGBField(e4) {
    var _a;
    const r2 = this.fieldsIndex.get("RGB");
    if (!r2)
      return;
    const t3 = (_a = e4.fieldInfos) == null ? void 0 : _a.find((e5) => e5.fieldName === r2.name);
    if (!t3)
      return;
    const o4 = new i2({ name: "pcl-rgb-decoded", title: r2.alias || r2.name, expression: `
        var rgb = $feature.${r2.name};
        var red = Floor(rgb / 65536, 0);
        var green = Floor((rgb - (red * 65536)) / 256,0);
        var blue = rgb - (red * 65536) - (green * 256);

        return "rgb(" + red + "," + green + "," + blue + ")";
      ` });
    e4.expressionInfos = [...e4.expressionInfos || [], o4], t3.fieldName = "expression/pcl-rgb-decoded";
  }
  async queryCachedStatistics(e4, r2) {
    if (await this.load(r2), !this.attributeStorageInfo)
      throw new s("scenelayer:no-cached-statistics", "Cached statistics are not available for this layer");
    const i4 = this.fieldsIndex.get(e4);
    if (!i4)
      throw new s("pointcloudlayer:field-unexisting", `Field '${e4}' does not exist on the layer`);
    for (const o4 of this.attributeStorageInfo)
      if (o4.name === i4.name) {
        const e5 = V(this.parsedUrl.path, `./statistics/${o4.key}`);
        return U(e5, { query: { f: "json", ...this.customParameters, token: this.apiKey }, responseType: "json", signal: r2 ? r2.signal : null }).then((e6) => e6.data);
      }
    throw new s("pointcloudlayer:no-cached-statistics", "Cached statistics for this attribute are not available");
  }
  async saveAs(e4, r2) {
    return this._debouncedSaveOperations(C.SAVE_AS, { ...r2, getTypeKeywords: () => this._getTypeKeywords(), portalItemLayerType: "point-cloud" }, e4);
  }
  async save() {
    const e4 = { getTypeKeywords: () => this._getTypeKeywords(), portalItemLayerType: "point-cloud" };
    return this._debouncedSaveOperations(C.SAVE, e4);
  }
  validateLayer(e4) {
    if (e4.layerType && "PointCloud" !== e4.layerType)
      throw new s("pointcloudlayer:layer-type-not-supported", "PointCloudLayer does not support this layer type", { layerType: e4.layerType });
    if (isNaN(this.version.major) || isNaN(this.version.minor))
      throw new s("layer:service-version-not-supported", "Service version is not supported.", { serviceVersion: this.version.versionString, supportedVersions: "1.x-2.x" });
    if (this.version.major > 2)
      throw new s("layer:service-version-too-new", "Service version is too new.", { serviceVersion: this.version.versionString, supportedVersions: "1.x-2.x" });
  }
  hasCachedStatistics(e4) {
    return null != this.attributeStorageInfo && this.attributeStorageInfo.some((r2) => r2.name === e4);
  }
  _getTypeKeywords() {
    return ["PointCloud"];
  }
  _validateElevationInfo() {
    const e4 = this.elevationInfo;
    P(n.getLogger(this), y4("Point cloud layers", "absolute-height", e4)), P(n.getLogger(this), I("Point cloud layers", e4));
  }
};
e([y({ type: ["PointCloudLayer"] })], V2.prototype, "operationalLayerType", void 0), e([y(y3)], V2.prototype, "popupEnabled", void 0), e([y({ type: P2, json: { name: "popupInfo", write: true } })], V2.prototype, "popupTemplate", void 0), e([y({ readOnly: true, json: { read: false } })], V2.prototype, "defaultPopupTemplate", null), e([y({ readOnly: true, json: { write: false, read: false, origins: { "web-document": { write: false, read: false } } } })], V2.prototype, "opacity", void 0), e([y({ type: ["show", "hide"] })], V2.prototype, "listMode", void 0), e([y({ types: [e3], json: { origins: { service: { read: { source: "filters" } } }, name: "layerDefinition.filters", write: true } })], V2.prototype, "filters", void 0), e([y({ type: [y2] })], V2.prototype, "fields", void 0), e([y(O.fieldsIndex)], V2.prototype, "fieldsIndex", void 0), e([o2("service", "fields", ["fields", "attributeStorageInfo"])], V2.prototype, "readServiceFields", null), e([y(O.outFields)], V2.prototype, "outFields", void 0), e([y({ readOnly: true })], V2.prototype, "attributeStorageInfo", void 0), e([y(f2)], V2.prototype, "elevationInfo", null), e([y({ type: String, json: { origins: { "web-scene": { read: true, write: true }, "portal-item": { read: true, write: true } }, read: false } })], V2.prototype, "path", void 0), e([y(c)], V2.prototype, "legendEnabled", void 0), e([y({ types: i3, json: { origins: { service: { read: { source: "drawingInfo.renderer" } } }, name: "layerDefinition.drawingInfo.renderer", write: { target: { "layerDefinition.drawingInfo.renderer": { types: i3 }, "layerDefinition.drawingInfo.transparency": { type: Number } } } } })], V2.prototype, "renderer", void 0), e([r("renderer")], V2.prototype, "writeRenderer", null), e([y({ json: { read: false }, readOnly: true })], V2.prototype, "type", void 0), V2 = e([a3("esri.layers.PointCloudLayer")], V2);
var U2 = V2;
export {
  U2 as default
};
//# sourceMappingURL=PointCloudLayer-QOWIGWEA.js.map
