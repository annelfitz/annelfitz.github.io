import {
  A,
  N,
  T,
  U,
  e as e2,
  g,
  i2,
  j as j3,
  n,
  p,
  r2,
  s2 as s,
  u,
  v
} from "./chunk-CEUXXR2I.js";
import {
  f as f2
} from "./chunk-QYC3GV65.js";
import {
  P
} from "./chunk-ETHGDNE6.js";
import {
  j2
} from "./chunk-ZIJHDTB7.js";
import {
  i
} from "./chunk-R4CJB3GP.js";
import {
  j,
  m2 as m
} from "./chunk-HV6S3GY2.js";
import {
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import {
  o
} from "./chunk-YOPMY6TS.js";
import {
  r
} from "./chunk-VIN55KNF.js";
import {
  f
} from "./chunk-SBL4URUW.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";

// node_modules/@arcgis/core/rest/support/DirectionLine.js
var d;
var c = d = class extends i(f) {
  constructor(e3) {
    super(e3), this.directionLineType = null, this.directionPointId = null, this.distance = null, this.duration = null, this.fromLevel = null, this.geometry = null, this.objectId = null, this.popupTemplate = null, this.symbol = null, this.toLevel = null, this.type = "direction-line";
  }
  static fromGraphic(e3) {
    return new d({ directionLineType: g.fromJSON(e3.attributes.DirectionLineType), directionPointId: e3.attributes.DirectionPointID, distance: e3.attributes.Meters, duration: e3.attributes.Minutes, fromLevel: e3.attributes.FromLevel ?? null, geometry: e3.geometry, objectId: e3.attributes.ObjectID ?? e3.attributes.__OBJECTID, popupTemplate: e3.popupTemplate, symbol: e3.symbol, toLevel: e3.attributes.ToLevel ?? null });
  }
  toGraphic() {
    const e3 = { ObjectID: this.objectId, DirectionLineType: null != this.directionLineType ? g.toJSON(this.directionLineType) : null, DirectionPointID: this.directionPointId, Meters: this.distance, Minutes: this.duration };
    return null != this.fromLevel && (e3.FromLevel = this.fromLevel), null != this.toLevel && (e3.ToLevel = this.toLevel), new f2({ geometry: this.geometry, attributes: e3, symbol: this.symbol, popupTemplate: this.popupTemplate });
  }
};
c.fields = [{ name: "ObjectID", alias: "ObjectID", type: "esriFieldTypeOID", editable: false, nullable: false, domain: null }, { name: "DirectionLineType", alias: "Line Type", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true, domain: { type: "codedValue", name: "esriDirectionsLineType", codedValues: [{ name: "Unknown", code: 0 }, { name: "Segment", code: 1 }, { name: "Maneuver Segment", code: 2 }, { name: "Restriction violation", code: 3 }, { name: "Scale cost barrier crossing", code: 4 }, { name: "Heavy Traffic", code: 5 }, { name: "Slow Traffic", code: 6 }, { name: "Moderate Traffic", code: 7 }] } }, { name: "DirectionPointID", alias: "Direction Point ID", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: false }, { name: "FromLevel", alias: "Start from 3D Level", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: false }, { name: "Meters", alias: "Length in Meters", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: true }, { name: "Minutes", alias: "Duration in Minutes", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: true }, { name: "ToLevel", alias: "End at 3D Level", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: false }], c.popupInfo = { title: "Direction Lines", fieldInfos: [{ fieldName: "DirectionLineType", label: "Line Type", isEditable: false, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "Meters", label: "Length in Meters", isEditable: false, tooltip: "", visible: true, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "Minutes", label: "Duration in Minutes", isEditable: false, tooltip: "", visible: true, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "DirectionPointID", label: "Direction Point ID", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "FromLevel", label: "Start from 3D Level", isEditable: false, tooltip: "", visible: false, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "ToLevel", label: "End at 3D Level", isEditable: false, tooltip: "", visible: false, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }], description: null, showAttachments: false, mediaInfos: [] }, e([y({ type: g.apiValues, json: { read: { source: "attributes.DirectionLineType", reader: g.read } } })], c.prototype, "directionLineType", void 0), e([y({ json: { read: { source: "attributes.DirectionPointID" } } })], c.prototype, "directionPointId", void 0), e([y({ json: { read: { source: "attributes.Meters" } } })], c.prototype, "distance", void 0), e([y({ json: { read: { source: "attributes.Minutes" } } })], c.prototype, "duration", void 0), e([y({ json: { read: { source: "attributes.FromLevel" } } })], c.prototype, "fromLevel", void 0), e([y({ type: m })], c.prototype, "geometry", void 0), e([y({ json: { read: { source: "attributes.ObjectID" } } })], c.prototype, "objectId", void 0), e([y({ type: P })], c.prototype, "popupTemplate", void 0), e([y({ types: j2 })], c.prototype, "symbol", void 0), e([y({ json: { read: { source: "attributes.ToLevel" } } })], c.prototype, "toLevel", void 0), e([y({ readOnly: true, json: { read: false } })], c.prototype, "type", void 0), c = d = e([a("esri.rest.support.DirectionLine")], c);
var m2 = c;

// node_modules/@arcgis/core/rest/support/DirectionPoint.js
var p2;
var u2 = p2 = class extends i(f) {
  constructor(e3) {
    super(e3), this.alternateName = null, this.arrivalTime = null, this.arrivalTimeOffset = null, this.azimuth = null, this.branchName = null, this.directionPointType = null, this.displayText = null, this.exitName = null, this.geometry = null, this.intersectingName = null, this.level = null, this.name = null, this.objectId = null, this.popupTemplate = null, this.sequence = null, this.shortVoiceInstruction = null, this.stopId = null, this.symbol = null, this.towardName = null, this.type = "direction-point", this.voiceInstruction = null;
  }
  readArrivalTime(e3, t) {
    return null != t.attributes.ArrivalTime ? new Date(t.attributes.ArrivalTime) : null;
  }
  static fromGraphic(e3) {
    return new p2({ alternateName: e3.attributes.AlternateName ?? null, arrivalTime: null != e3.attributes.ArrivalTime ? new Date(e3.attributes.ArrivalTime) : null, arrivalTimeOffset: e3.attributes.ArrivalUTCOffset ?? null, azimuth: e3.attributes.Azimuth ?? null, branchName: e3.attributes.BranchName ?? null, directionPointType: N.fromJSON(e3.attributes.DirectionPointType), displayText: e3.attributes.DisplayText ?? null, exitName: e3.attributes.ExitName ?? null, geometry: e3.geometry, intersectingName: e3.attributes.IntersectingName ?? null, level: e3.attributes.Level ?? null, name: e3.attributes.Name ?? null, objectId: e3.attributes.ObjectID ?? e3.attributes.__OBJECTID, popupTemplate: e3.popupTemplate, sequence: e3.attributes.Sequence, shortVoiceInstruction: e3.attributes.ShortVoiceInstruction ?? null, stopId: e3.attributes.StopID ?? null, symbol: e3.symbol, towardName: e3.attributes.TowardName ?? null, voiceInstruction: e3.attributes.VoiceInstruction ?? null });
  }
  toGraphic() {
    const e3 = { ObjectID: this.objectId, DirectionPointType: null != this.directionPointType ? N.toJSON(this.directionPointType) : null, Sequence: this.sequence, StopID: this.stopId };
    return null != this.alternateName && (e3.AlternateName = this.alternateName), null != this.arrivalTime && (e3.ArrivalTime = this.arrivalTime.getTime()), null != this.arrivalTimeOffset && (e3.ArrivalUTCOffset = this.arrivalTimeOffset), null != this.azimuth && (e3.Azimuth = this.azimuth), null != this.branchName && (e3.BranchName = this.branchName), null != this.displayText && (e3.DisplayText = this.displayText), null != this.exitName && (e3.ExitName = this.exitName), null != this.intersectingName && (e3.IntersectingName = this.intersectingName), null != this.level && (e3.Level = this.level), null != this.name && (e3.Name = this.name), null != this.shortVoiceInstruction && (e3.ShortVoiceInstruction = this.shortVoiceInstruction), null != this.towardName && (e3.TowardName = this.towardName), null != this.voiceInstruction && (e3.VoiceInstruction = this.voiceInstruction), new f2({ geometry: this.geometry, attributes: e3, symbol: this.symbol, popupTemplate: this.popupTemplate });
  }
};
u2.fields = [{ name: "ObjectID", alias: "ObjectID", type: "esriFieldTypeOID", editable: false, nullable: false, domain: null }, { name: "AlternateName", alias: "Alternative Feature Name", type: "esriFieldTypeString", length: 2048, editable: true, nullable: true, visible: true, domain: null }, { name: "ArrivalTime", alias: "Maneuver Starts at", type: "esriFieldTypeDate", length: 36, editable: true, nullable: true, visible: true }, { name: "ArrivalUTCOffset", alias: "Offset from UTC in Minutes", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true }, { name: "Azimuth", alias: "Azimuth", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: true }, { name: "BranchName", alias: "Signpost Branch Name", type: "esriFieldTypeString", length: 2048, editable: true, nullable: true, visible: true, domain: null }, { name: "DirectionPointType", alias: "Directions Item Type", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true, domain: { type: "codedValue", name: "esriDirectionPointType", codedValues: [{ name: "Unknown", code: 0 }, { name: "", code: 1 }, { name: "Arrive at stop", code: 50 }, { name: "Depart at stop", code: 51 }, { name: "Go straight", code: 52 }, { name: "Take ferry", code: 100 }, { name: "Take off ferry", code: 101 }, { name: "Keep center at fork", code: 102 }, { name: "Take roundabout", code: 103 }, { name: "Make U-Turn", code: 104 }, { name: "Pass the door", code: 150 }, { name: "Take stairs", code: 151 }, { name: "", code: 152 }, { name: "Take escalator", code: 153 }, { name: "Take pedestrian ramp", code: 154 }, { name: "Keep left at fork", code: 200 }, { name: "Ramp left", code: 201 }, { name: "Take left-handed roundabout", code: 202 }, { name: "Make left-handed U-Turn", code: 203 }, { name: "Bear left", code: 204 }, { name: "Turn left", code: 205 }, { name: "Make sharp left", code: 206 }, { name: "Turn left, followed by turn left", code: 207 }, { name: "Turn left, followed by turn right", code: 208 }, { name: "Keep right at fork", code: 300 }, { name: "Ramp right", code: 301 }, { name: "Take right-handed roundabout", code: 302 }, { name: "Make right-handed U-Turn", code: 303 }, { name: "Bear right", code: 304 }, { name: "Turn right", code: 305 }, { name: "Make sharp right", code: 306 }, { name: "Turn right, followed by turn left", code: 307 }, { name: "Turn right, followed by turn right", code: 308 }, { name: "Indicates up direction of elevator", code: 400 }, { name: "Indicates up direction of escalator", code: 401 }, { name: "Take up-stairs", code: 402 }, { name: "Indicates down direction of elevator", code: 500 }, { name: "Indicates down direction of escalator", code: 501 }, { name: "Take down-stairs", code: 502 }, { name: "General event", code: 1e3 }, { name: "Landmark", code: 1001 }, { name: "Time zone change", code: 1002 }, { name: "Heavy traffic segment", code: 1003 }, { name: "Scale cost barrier crossing", code: 1004 }, { name: "Administrative Border crossing", code: 1005 }, { name: "Restriction violation", code: 1006 }] } }, { name: "DisplayText", alias: "Text to Display", type: "esriFieldTypeString", length: 2048, editable: true, nullable: true, visible: true, domain: null }, { name: "ExitName", alias: "Highway Exit Name", type: "esriFieldTypeString", length: 2048, editable: true, nullable: true, visible: true, domain: null }, { name: "IntersectingName", alias: "Intersecting Feature Name", type: "esriFieldTypeString", length: 2048, editable: true, nullable: true, visible: true, domain: null }, { name: "Level", alias: "3D Logical Level", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true }, { name: "Name", alias: "Primary Feature Name", type: "esriFieldTypeString", length: 2048, editable: true, nullable: true, visible: true, domain: null }, { name: "Sequence", alias: "Sequence", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true }, { name: "ShortVoiceInstruction", alias: "Voice Instruction", type: "esriFieldTypeString", length: 2048, editable: true, nullable: true, visible: true, domain: null }, { name: "StopID", alias: "Stop ID", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true }, { name: "TowardName", alias: "Signpost Toward Name", type: "esriFieldTypeString", length: 2048, editable: true, nullable: true, visible: true, domain: null }, { name: "VoiceInstruction", alias: "Voice Full Instruction", type: "esriFieldTypeString", length: 2048, editable: true, nullable: true, visible: true, domain: null }], u2.popupInfo = { title: "{DisplayText}", fieldInfos: [{ fieldName: "DirectionPointType", label: "Directions Item Type", isEditable: false, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "DisplayText", label: "Text to Display", isEditable: false, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "Sequence", label: "Sequence", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "StopID", label: "Stop ID", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "ArrivalTime", label: "Maneuver Starts at", isEditable: true, tooltip: "", visible: true, format: { dateFormat: "shortDateShortTime24" }, stringFieldOption: "textbox" }, { fieldName: "ArrivalUTCOffset", label: "Offset from UTC in Minutes", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "Azimuth", label: "Azimuth", isEditable: false, tooltip: "", visible: false, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "Name", label: "Primary Feature Name", isEditable: false, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "AlternateName", label: "Alternative Feature Name", isEditable: false, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "ExitName", label: "Highway Exit Name", isEditable: false, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "IntersectingName", label: "Intersecting Feature Name", isEditable: false, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "BranchName", label: "Signpost Branch Name", isEditable: false, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "TowardName", label: "Signpost Toward Name", isEditable: false, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "ShortVoiceInstruction", label: "Voice Instruction", isEditable: false, tooltip: "", visible: false, stringFieldOption: "textbox" }, { fieldName: "VoiceInstruction", label: "Voice Full Instruction", isEditable: false, tooltip: "", visible: false, stringFieldOption: "textbox" }], description: null, showAttachments: false, mediaInfos: [] }, e([y({ json: { read: { source: "attributes.AlternateName" } } })], u2.prototype, "alternateName", void 0), e([y()], u2.prototype, "arrivalTime", void 0), e([o("arrivalTime", ["attributes.ArrivalTime"])], u2.prototype, "readArrivalTime", null), e([y({ json: { read: { source: "attributes.ArrivalUTCOffset" } } })], u2.prototype, "arrivalTimeOffset", void 0), e([y({ json: { read: { source: "attributes.Azimuth" } } })], u2.prototype, "azimuth", void 0), e([y({ json: { read: { source: "attributes.BranchName" } } })], u2.prototype, "branchName", void 0), e([y({ type: N.apiValues, json: { read: { source: "attributes.DirectionPointType", reader: N.read } } })], u2.prototype, "directionPointType", void 0), e([y({ json: { read: { source: "attributes.DisplayText" } } })], u2.prototype, "displayText", void 0), e([y({ json: { read: { source: "attributes.ExitName" } } })], u2.prototype, "exitName", void 0), e([y({ type: x })], u2.prototype, "geometry", void 0), e([y({ json: { read: { source: "attributes.IntersectingName" } } })], u2.prototype, "intersectingName", void 0), e([y()], u2.prototype, "level", void 0), e([y({ json: { read: { source: "attributes.Name" } } })], u2.prototype, "name", void 0), e([y({ json: { read: { source: "attributes.ObjectID" } } })], u2.prototype, "objectId", void 0), e([y({ type: P })], u2.prototype, "popupTemplate", void 0), e([y({ json: { read: { source: "attributes.Sequence" } } })], u2.prototype, "sequence", void 0), e([y({ json: { read: { source: "attributes.ShortVoiceInstruction" } } })], u2.prototype, "shortVoiceInstruction", void 0), e([y({ json: { read: { source: "attributes.StopID" } } })], u2.prototype, "stopId", void 0), e([y({ types: j2 })], u2.prototype, "symbol", void 0), e([y({ json: { read: { source: "attributes.TowardName" } } })], u2.prototype, "towardName", void 0), e([y({ readOnly: true, json: { read: false } })], u2.prototype, "type", void 0), e([y({ json: { read: { source: "attributes.VoiceInstruction" } } })], u2.prototype, "voiceInstruction", void 0), u2 = p2 = e([a("esri.rest.support.DirectionPoint")], u2);
var c2 = u2;

// node_modules/@arcgis/core/rest/support/PointBarrier.js
var C;
var T2 = C = class extends i(f) {
  constructor(e3) {
    super(e3), this.addedCost = null, this.barrierType = null, this.costs = null, this.curbApproach = null, this.fullEdge = null, this.geometry = null, this.name = null, this.objectId = null, this.popupTemplate = null, this.sideOfEdge = null, this.sourceId = null, this.sourceOid = null, this.status = null, this.symbol = null, this.type = "point-barrier";
  }
  readCosts(e3, t) {
    return r2(t.attributes, "Attr_");
  }
  writeCosts(e3, t) {
    i2(e3, t, "Attr_");
  }
  static fromGraphic(e3) {
    return new C({ addedCost: e3.attributes.AddedCost ?? null, barrierType: null != e3.attributes.BarrierType ? A.fromJSON(e3.attributes.BarrierType) : null, costs: null != e3.attributes.Costs ? e2(JSON.parse(e3.attributes.Costs)) : null, curbApproach: null != e3.attributes.CurbApproach ? u.fromJSON(e3.attributes.CurbApproach) : null, fullEdge: null != e3.attributes.FullEdge ? T.fromJSON(e3.attributes.FullEdge) : null, geometry: e3.geometry, name: e3.attributes.Name ?? null, objectId: e3.attributes.ObjectID ?? e3.attributes.__OBJECTID, popupTemplate: e3.popupTemplate, status: null != e3.attributes.Status ? p.fromJSON(e3.attributes.Status) : null, symbol: e3.symbol });
  }
  toGraphic() {
    const e3 = { ObjectID: this.objectId, AddedCost: this.addedCost, BarrierType: null != this.barrierType ? A.toJSON(this.barrierType) : null, Costs: null != this.costs ? JSON.stringify(s(this.costs)) : null, CurbApproach: null != this.curbApproach ? u.toJSON(this.curbApproach) : null, FullEdge: null != this.fullEdge ? T.toJSON(this.fullEdge) : null, Name: this.name, Status: null != this.status ? p.toJSON(this.status) : null };
    return new f2({ geometry: this.geometry, attributes: e3, symbol: this.symbol, popupTemplate: this.popupTemplate });
  }
};
T2.fields = [{ name: "ObjectID", alias: "ObjectID", type: "esriFieldTypeOID", editable: false, nullable: false, domain: null }, { name: "AddedCost", alias: "Added Cost", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: true, domain: null }, { name: "BarrierType", alias: "Barrier Type", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true, domain: { type: "codedValue", name: "esriNABarrierType", codedValues: [{ name: "Restriction", code: 0 }, { name: "Scaled Cost", code: 1 }, { name: "Added Cost", code: 2 }] } }, { name: "Costs", alias: "Costs", type: "esriFieldTypeString", length: 1048576, editable: true, nullable: true, visible: false, domain: null }, { name: "CurbApproach", alias: "Curb Approach", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: false, domain: { type: "codedValue", name: "esriNACurbApproachType", codedValues: [{ name: "Either side", code: 0 }, { name: "From the right", code: 1 }, { name: "From the left", code: 2 }, { name: "Depart in the same direction", code: 3 }] } }, { name: "FullEdge", alias: "Full Edge", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true, domain: { type: "codedValue", name: "esriNAIntYesNo", codedValues: [{ name: "No", code: 0 }, { name: "Yes", code: 1 }] } }, { name: "Name", alias: "Name", type: "esriFieldTypeString", length: 255, editable: true, nullable: true, visible: true }, { name: "Status", alias: "Status", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true, domain: { type: "codedValue", name: "esriNAObjectStatus", codedValues: [{ name: "OK", code: 0 }, { name: "Not Located on Network", code: 1 }, { name: "Network Unbuilt", code: 2 }, { name: "Prohibited Street", code: 3 }, { name: "Invalid Field Values", code: 4 }, { name: "Cannot Reach", code: 5 }, { name: "Time Window Violation", code: 6 }] } }], T2.popupInfo = { title: "Point Barriers", fieldInfos: [{ fieldName: "Name", label: "Name", isEditable: true, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "BarrierType", label: "Barrier Type", isEditable: true, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "AddedCost", label: "Added Cost", isEditable: true, tooltip: "", visible: true, format: { places: 3, digitSeparator: true }, stringFieldOption: "textbox" }], description: null, showAttachments: false, mediaInfos: [] }, e([y()], T2.prototype, "addedCost", void 0), e([y({ type: A.apiValues, json: { name: "attributes.BarrierType", read: { reader: A.read }, write: { writer: A.write } } })], T2.prototype, "barrierType", void 0), e([y()], T2.prototype, "costs", void 0), e([o("costs", ["attributes"])], T2.prototype, "readCosts", null), e([r("costs")], T2.prototype, "writeCosts", null), e([y({ constructOnly: true, type: u.apiValues, json: { read: { source: "attributes.CurbApproach", reader: u.read } } })], T2.prototype, "curbApproach", void 0), e([y({ type: T.apiValues, json: { name: "attributes.FullEdge", read: { reader: T.read }, write: { writer: T.write } } })], T2.prototype, "fullEdge", void 0), e([y({ type: x, json: { write: true } })], T2.prototype, "geometry", void 0), e([y({ json: { name: "attributes.Name" } })], T2.prototype, "name", void 0), e([y({ json: { name: "attributes.ObjectID" } })], T2.prototype, "objectId", void 0), e([y({ type: P })], T2.prototype, "popupTemplate", void 0), e([y({ type: v.apiValues, json: { read: { source: "attributes.SideOfEdge", reader: v.read } } })], T2.prototype, "sideOfEdge", void 0), e([y({ json: { read: { source: "attributes.SourceID" } } })], T2.prototype, "sourceId", void 0), e([y({ json: { read: { source: "attributes.SourceOID" } } })], T2.prototype, "sourceOid", void 0), e([y({ type: p.apiValues, json: { read: { source: "attributes.Status", reader: p.read } } })], T2.prototype, "status", void 0), e([y({ types: j2 })], T2.prototype, "symbol", void 0), e([y({ readOnly: true, json: { read: false } })], T2.prototype, "type", void 0), T2 = C = e([a("esri.rest.support.PointBarrier")], T2);
var O = T2;

// node_modules/@arcgis/core/rest/support/PolygonBarrier.js
var j4;
var h = j4 = class extends i(f) {
  constructor(e3) {
    super(e3), this.barrierType = null, this.costs = null, this.geometry = null, this.name = null, this.objectId = null, this.popupTemplate = null, this.scaleFactor = null, this.symbol = null, this.type = "polygon-barrier";
  }
  readCosts(e3, t) {
    return r2(t.attributes, "Attr_");
  }
  writeCosts(e3, t) {
    i2(e3, t, "Attr_");
  }
  static fromGraphic(e3) {
    return new j4({ barrierType: null != e3.attributes.BarrierType ? A.fromJSON(e3.attributes.BarrierType) : null, costs: null != e3.attributes.Costs ? e2(JSON.parse(e3.attributes.Costs)) : null, geometry: e3.geometry, name: e3.attributes.Name ?? null, objectId: e3.attributes.ObjectID ?? e3.attributes.__OBJECTID, popupTemplate: e3.popupTemplate, scaleFactor: e3.attributes.ScaleFactor ?? null, symbol: e3.symbol });
  }
  toGraphic() {
    const e3 = { ObjectID: this.objectId, BarrierType: null != this.barrierType ? A.toJSON(this.barrierType) : null, Costs: null != this.costs ? JSON.stringify(s(this.costs)) : null, Name: this.name ?? null, ScaleFactor: this.scaleFactor ?? null };
    return new f2({ geometry: this.geometry, attributes: e3, symbol: this.symbol, popupTemplate: this.popupTemplate });
  }
};
h.fields = [{ name: "ObjectID", alias: "ObjectID", type: "esriFieldTypeOID", editable: false, nullable: false, domain: null }, { name: "BarrierType", alias: "Barrier Type", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true, domain: { type: "codedValue", name: "esriNABarrierType", codedValues: [{ name: "Restriction", code: 0 }, { name: "Scaled Cost", code: 1 }, { name: "Added Cost", code: 2 }] } }, { name: "Costs", alias: "Costs", type: "esriFieldTypeString", length: 1048576, editable: true, nullable: true, visible: false, domain: null }, { name: "Name", alias: "Name", type: "esriFieldTypeString", length: 255, editable: true, nullable: true, visible: true }, { name: "ScaleFactor", alias: "Scale Factor", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: true }], h.popupInfo = { title: "Polygon Barriers", fieldInfos: [{ fieldName: "Name", label: "Name", isEditable: true, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "BarrierType", label: "Barrier Type", isEditable: true, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "ScaleFactor", isEditable: true, tooltip: "", visible: true, format: { places: 3, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "Costs", label: "Costs", isEditable: true, tooltip: "", visible: false, stringFieldOption: "textbox" }], description: null, showAttachments: false, mediaInfos: [] }, e([y({ type: A.apiValues, json: { name: "attributes.BarrierType", read: { reader: A.read }, write: { writer: A.write } } })], h.prototype, "barrierType", void 0), e([y()], h.prototype, "costs", void 0), e([o("costs", ["attributes"])], h.prototype, "readCosts", null), e([r("costs")], h.prototype, "writeCosts", null), e([y({ type: j, json: { write: true } })], h.prototype, "geometry", void 0), e([y({ json: { name: "attributes.Name" } })], h.prototype, "name", void 0), e([y({ json: { name: "attributes.ObjectID" } })], h.prototype, "objectId", void 0), e([y({ type: P })], h.prototype, "popupTemplate", void 0), e([y()], h.prototype, "scaleFactor", void 0), e([y({ types: j2 })], h.prototype, "symbol", void 0), e([y({ readOnly: true, json: { read: false } })], h.prototype, "type", void 0), h = j4 = e([a("esri.rest.support.PolygonBarrier")], h);
var f3 = h;

// node_modules/@arcgis/core/rest/support/PolylineBarrier.js
var d2;
var y2 = d2 = class extends i(f) {
  constructor(e3) {
    super(e3), this.barrierType = null, this.costs = null, this.geometry = null, this.name = null, this.objectId = null, this.popupTemplate = null, this.scaleFactor = null, this.symbol = null, this.type = "polyline-barrier";
  }
  readCosts(e3, t) {
    return r2(t.attributes, "Attr_");
  }
  static fromGraphic(e3) {
    return new d2({ barrierType: null != e3.attributes.BarrierType ? A.fromJSON(e3.attributes.BarrierType) : null, costs: null != e3.attributes.Costs ? e2(JSON.parse(e3.attributes.Costs)) : null, geometry: e3.geometry, name: e3.attributes.Name ?? null, objectId: e3.attributes.ObjectID ?? e3.attributes.__OBJECTID, popupTemplate: e3.popupTemplate, scaleFactor: e3.attributes.ScaleFactor ?? null, symbol: e3.symbol });
  }
  toGraphic() {
    const e3 = { ObjectID: this.objectId, BarrierType: null != this.barrierType ? A.toJSON(this.barrierType) : null, Costs: null != this.costs ? JSON.stringify(s(this.costs)) : null, Name: this.name, ScaleFactor: this.scaleFactor };
    return new f2({ geometry: this.geometry, attributes: e3, symbol: this.symbol, popupTemplate: this.popupTemplate });
  }
};
y2.fields = [{ name: "ObjectID", alias: "ObjectID", type: "esriFieldTypeOID", editable: false, nullable: false, domain: null }, { name: "BarrierType", alias: "Barrier Type", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true, domain: { type: "codedValue", name: "esriNABarrierType", codedValues: [{ name: "Restriction", code: 0 }, { name: "Scaled Cost", code: 1 }, { name: "Added Cost", code: 2 }] } }, { name: "Costs", alias: "Costs", type: "esriFieldTypeString", length: 1048576, editable: true, nullable: true, visible: false, domain: null }, { name: "Name", alias: "Name", type: "esriFieldTypeString", length: 255, editable: true, nullable: true, visible: true }, { name: "ScaleFactor", alias: "Scale Factor", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: true }], y2.popupInfo = { title: "Line Barriers", fieldInfos: [{ fieldName: "Name", label: "Name", isEditable: true, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "BarrierType", label: "Barrier Type", isEditable: true, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "ScaleFactor", isEditable: true, tooltip: "", visible: true, format: { places: 3, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "Costs", label: "Costs", isEditable: true, tooltip: "", visible: false, stringFieldOption: "textbox" }], description: null, showAttachments: false, mediaInfos: [] }, e([y({ type: A.apiValues, json: { read: { source: "attributes.BarrierType", reader: A.read } } })], y2.prototype, "barrierType", void 0), e([y()], y2.prototype, "costs", void 0), e([o("costs", ["attributes"])], y2.prototype, "readCosts", null), e([y({ type: m, json: { write: true } })], y2.prototype, "geometry", void 0), e([y({ json: { name: "attributes.Name" } })], y2.prototype, "name", void 0), e([y({ json: { name: "attributes.ObjectID" } })], y2.prototype, "objectId", void 0), e([y({ type: P })], y2.prototype, "popupTemplate", void 0), e([y()], y2.prototype, "scaleFactor", void 0), e([y({ types: j2 })], y2.prototype, "symbol", void 0), e([y({ readOnly: true, json: { read: false } })], y2.prototype, "type", void 0), y2 = d2 = e([a("esri.rest.support.PolylineBarrier")], y2);
var j5 = y2;

// node_modules/@arcgis/core/rest/support/RouteSettings.js
var a2 = class extends f {
  constructor(t) {
    super(t), this.accumulateAttributes = null, this.directionsLanguage = null, this.findBestSequence = null, this.preserveFirstStop = null, this.preserveLastStop = null, this.startTimeIsUTC = null, this.timeWindowsAreUTC = null, this.travelMode = null;
  }
  readAccumulateAttributes(t) {
    return null == t ? null : t.map((t2) => U.fromJSON(t2));
  }
  writeAccumulateAttributes(t, e3, r3) {
    (t == null ? void 0 : t.length) && (e3[r3] = t.map((t2) => U.toJSON(t2)));
  }
};
e([y({ type: [String], json: { name: "accumulateAttributeNames", write: true } })], a2.prototype, "accumulateAttributes", void 0), e([o("accumulateAttributes")], a2.prototype, "readAccumulateAttributes", null), e([r("accumulateAttributes")], a2.prototype, "writeAccumulateAttributes", null), e([y({ type: String, json: { write: true } })], a2.prototype, "directionsLanguage", void 0), e([y({ type: Boolean, json: { write: true } })], a2.prototype, "findBestSequence", void 0), e([y({ type: Boolean, json: { write: true } })], a2.prototype, "preserveFirstStop", void 0), e([y({ type: Boolean, json: { write: true } })], a2.prototype, "preserveLastStop", void 0), e([y({ type: Boolean, json: { write: true } })], a2.prototype, "startTimeIsUTC", void 0), e([y({ type: Boolean, json: { write: true } })], a2.prototype, "timeWindowsAreUTC", void 0), e([y({ type: j3, json: { write: true } })], a2.prototype, "travelMode", void 0), a2 = e([a("esri.rest.support.RouteSettings")], a2);
var c3 = a2;

// node_modules/@arcgis/core/rest/support/RouteInfo.js
var f4;
var y3 = f4 = class extends i(f) {
  constructor(t) {
    super(t), this.analysisSettings = null, this.endTime = null, this.endTimeOffset = null, this.firstStopId = null, this.geometry = null, this.lastStopId = null, this.messages = null, this.name = null, this.objectId = null, this.popupTemplate = null, this.startTime = null, this.startTimeOffset = null, this.stopCount = null, this.symbol = null, this.totalCosts = null, this.totalDistance = null, this.totalDuration = null, this.totalLateDuration = null, this.totalViolations = null, this.totalWait = null, this.totalWaitDuration = null, this.type = "route-info", this.version = "1.0.0";
  }
  readEndTime(t, e3) {
    return null != e3.attributes.EndTimeUTC ? new Date(e3.attributes.EndTimeUTC) : null;
  }
  readEndTimeOffset(t, e3) {
    return n(e3.attributes.EndTime, e3.attributes.EndTimeUTC);
  }
  readStartTime(t, e3) {
    return null != e3.attributes.StartTimeUTC ? new Date(e3.attributes.StartTimeUTC) : null;
  }
  readStartTimeOffset(t, e3) {
    return n(e3.attributes.StartTime, e3.attributes.StartTimeUTC);
  }
  readTotalCosts(t, e3) {
    return r2(e3.attributes, "Total_");
  }
  readTotalViolations(t, e3) {
    return r2(e3.attributes, "TotalViolation_");
  }
  readTotalWait(t, e3) {
    return r2(e3.attributes, "TotalWait_");
  }
  static fromGraphic(t) {
    return new f4({ analysisSettings: null != t.attributes.AnalysisSettings ? c3.fromJSON(JSON.parse(t.attributes.AnalysisSettings)) : null, endTime: null != t.attributes.EndTime ? new Date(t.attributes.EndTime) : null, endTimeOffset: t.attributes.EndUTCOffset ?? null, geometry: t.geometry, messages: null != t.attributes.Messages ? JSON.parse(t.attributes.Messages) : null, name: t.attributes.RouteName, objectId: t.attributes.ObjectID ?? t.attributes.__OBJECTID, popupTemplate: t.popupTemplate, startTime: null != t.attributes.StartTime ? new Date(t.attributes.StartTime) : null, startTimeOffset: t.attributes.StartUTCOffset ?? null, symbol: t.symbol, totalCosts: null != t.attributes.TotalCosts ? e2(JSON.parse(t.attributes.TotalCosts)) : null, totalDistance: t.attributes.TotalMeters ?? null, totalDuration: t.attributes.TotalMinutes ?? null, totalLateDuration: t.attributes.TotalLateMinutes ?? null, totalWaitDuration: t.attributes.TotalWaitMinutes ?? null, version: t.attributes.Version });
  }
  toGraphic() {
    const t = { ObjectID: this.objectId, AnalysisSettings: null != this.analysisSettings ? JSON.stringify(this.analysisSettings.toJSON()) : null, EndTime: null != this.endTime ? this.endTime.getTime() : null, EndUTCOffset: this.endTimeOffset, Messages: null != this.messages ? JSON.stringify(this.messages) : null, RouteName: this.name, StartTime: null != this.startTime ? this.startTime.getTime() : null, StartUTCOffset: this.startTimeOffset, TotalCosts: null != this.totalCosts ? JSON.stringify(s(this.totalCosts)) : null, TotalLateMinutes: this.totalLateDuration, TotalMeters: this.totalDistance, TotalMinutes: this.totalDuration, TotalWaitMinutes: this.totalWaitDuration, Version: this.version };
    return new f2({ geometry: this.geometry, attributes: t, symbol: this.symbol, popupTemplate: this.popupTemplate });
  }
};
y3.fields = [{ name: "ObjectID", alias: "ObjectID", type: "esriFieldTypeOID", editable: false, nullable: false, domain: null }, { name: "AnalysisSettings", alias: "Analysis Settings", type: "esriFieldTypeString", length: 1048576, editable: true, nullable: true, visible: false, domain: null }, { name: "EndTime", alias: "End Time", type: "esriFieldTypeDate", length: 36, editable: true, nullable: true, visible: true }, { name: "EndUTCOffset", alias: "End Time: Offset from UTC in Minutes", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true }, { name: "Messages", alias: "Analysis Messages", type: "esriFieldTypeString", length: 1048576, editable: true, nullable: true, visible: false, domain: null }, { name: "RouteName", alias: "Route Name", type: "esriFieldTypeString", length: 1024, editable: true, nullable: true, visible: true, domain: null }, { name: "StartTime", alias: "Start Time", type: "esriFieldTypeDate", length: 36, editable: true, nullable: true, visible: true }, { name: "StartUTCOffset", alias: "Start Time: Offset from UTC in Minutes", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true }, { name: "TotalCosts", alias: "Total Costs", type: "esriFieldTypeString", length: 1048576, editable: true, nullable: true, visible: false, domain: null }, { name: "TotalLateMinutes", alias: "Total Late Minutes", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: false }, { name: "TotalMeters", alias: "Total Meters", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: true }, { name: "TotalMinutes", alias: "Total Minutes", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: true }, { name: "TotalWaitMinutes", alias: "Total Wait Minutes", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: false }, { name: "Version", alias: "Version", type: "esriFieldTypeString", length: 16, editable: true, nullable: true, visible: true, domain: null }], y3.popupInfo = { title: "Route Details", fieldInfos: [{ fieldName: "RouteName", label: "Route Name", isEditable: false, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "TotalMinutes", label: "Total Minutes", isEditable: false, tooltip: "", visible: true, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "TotalMeters", label: "Total Meters", isEditable: false, tooltip: "", visible: true, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "TotalLateMinutes", label: "Total Late Minutes", isEditable: false, tooltip: "", visible: false, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "TotalWaitMinutes", label: "Total Wait Minutes", isEditable: false, tooltip: "", visible: false, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "TotalCosts", label: "Total Costs", isEditable: false, tooltip: "", visible: false, stringFieldOption: "textbox" }, { fieldName: "StartTime", label: "Start Time", isEditable: false, tooltip: "", visible: true, format: { dateFormat: "shortDateShortTime24" }, stringFieldOption: "textbox" }, { fieldName: "StartUTCOffset", label: "Start Time: Offset from UTC in Minutes", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "EndTime", label: "End Time", isEditable: false, tooltip: "", visible: true, format: { dateFormat: "shortDateShortTime24" }, stringFieldOption: "textbox" }, { fieldName: "EndUTCOffset", label: "End Time: Offset from UTC in Minutes", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "Messages", label: "Analysis Messages", isEditable: false, tooltip: "", visible: false, stringFieldOption: "textbox" }, { fieldName: "AnalysisSettings", isEditable: false, tooltip: "", visible: false, stringFieldOption: "textbox" }, { fieldName: "Version", label: "Version", isEditable: false, tooltip: "", visible: true, stringFieldOption: "textbox" }], description: null, showAttachments: false, mediaInfos: [] }, e([y()], y3.prototype, "analysisSettings", void 0), e([y()], y3.prototype, "endTime", void 0), e([o("endTime", ["attributes.EndTimeUTC"])], y3.prototype, "readEndTime", null), e([y()], y3.prototype, "endTimeOffset", void 0), e([o("endTimeOffset", ["attributes.EndTime", "attributes.EndTimeUTC"])], y3.prototype, "readEndTimeOffset", null), e([y({ json: { read: { source: "attributes.FirstStopID" } } })], y3.prototype, "firstStopId", void 0), e([y({ type: m })], y3.prototype, "geometry", void 0), e([y({ json: { read: { source: "attributes.LastStopID" } } })], y3.prototype, "lastStopId", void 0), e([y()], y3.prototype, "messages", void 0), e([y({ json: { read: { source: "attributes.Name" } } })], y3.prototype, "name", void 0), e([y({ json: { read: { source: "attributes.ObjectID" } } })], y3.prototype, "objectId", void 0), e([y({ type: P })], y3.prototype, "popupTemplate", void 0), e([y()], y3.prototype, "startTime", void 0), e([o("startTime", ["attributes.StartTimeUTC"])], y3.prototype, "readStartTime", null), e([y()], y3.prototype, "startTimeOffset", void 0), e([o("startTimeOffset", ["attributes.StartTime", "attributes.StartTimeUTC"])], y3.prototype, "readStartTimeOffset", null), e([y({ json: { read: { source: "attributes.StopCount" } } })], y3.prototype, "stopCount", void 0), e([y({ types: j2 })], y3.prototype, "symbol", void 0), e([y()], y3.prototype, "totalCosts", void 0), e([o("totalCosts", ["attributes"])], y3.prototype, "readTotalCosts", null), e([y()], y3.prototype, "totalDistance", void 0), e([y()], y3.prototype, "totalDuration", void 0), e([y()], y3.prototype, "totalLateDuration", void 0), e([y()], y3.prototype, "totalViolations", void 0), e([o("totalViolations", ["attributes"])], y3.prototype, "readTotalViolations", null), e([y()], y3.prototype, "totalWait", void 0), e([o("totalWait", ["attributes"])], y3.prototype, "readTotalWait", null), e([y()], y3.prototype, "totalWaitDuration", void 0), e([y({ readOnly: true, json: { read: false } })], y3.prototype, "type", void 0), e([y()], y3.prototype, "version", void 0), y3 = f4 = e([a("esri.rest.support.RouteInfo")], y3);
var g2 = y3;

export {
  m2 as m,
  c2 as c,
  O,
  f3 as f,
  j5 as j,
  c3 as c2,
  g2 as g
};
//# sourceMappingURL=chunk-B3DOIFRS.js.map
