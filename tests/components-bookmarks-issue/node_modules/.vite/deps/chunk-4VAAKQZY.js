import {
  u
} from "./chunk-DUBEFL4F.js";
import {
  m,
  o
} from "./chunk-6CWL7BCV.js";
import {
  D,
  e2,
  r
} from "./chunk-RGCWZ2KZ.js";
import {
  n
} from "./chunk-5VMSFOCB.js";
import {
  j
} from "./chunk-QLL2YG25.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";

// node_modules/@arcgis/core/widgets/support/timeWidgetUtils.js
var s = { hour: "2-digit", minute: "2-digit", timeZone: "UTC" };
var i = { hour: "numeric", timeZone: "UTC" };
function f(e3, n2) {
  let f2;
  if ("tick" === n2) {
    const o2 = Math.round(m(e3, "minutes", "hours"));
    f2 = new Date(m(o2, "hours", "milliseconds"));
  } else
    f2 = new Date(6e4 * e3);
  let l3 = j(f2, s);
  return 0 !== e3 && "00:00" === l3 && (l3 = "24:00"), "tick" === n2 && l3.includes(" ") && (l3 = j(f2, i), l3 = l3.replace(":00", "")), l3;
}
function l(t, o2, s2, i2) {
  if (null == o2 || null == s2)
    return null;
  const f2 = u.getTimes(t, o2, s2), l3 = f2.sunrise, m4 = f2.sunset, u2 = o(t, i2, "hours"), r2 = o(l3, i2, "hours"), z = o(m4, i2, "hours");
  if (u2.getUTCDate() !== r2.getUTCDate() || u2.getUTCDate() !== z.getUTCDate()) {
    const t2 = u2.getTime() - r2.getTime() > 0 ? 1 : -1;
    l3.setUTCDate(l3.getUTCDate() + t2), m4.setUTCDate(m4.getUTCDate() + t2);
  }
  return { sunrise: l3, sunset: m4 };
}
function m2(t) {
  return [{ utcOffset: -12, short: "UTC-12", long: t.timezoneDateline }, { utcOffset: -11, short: "UTC-11", long: t.timezoneSamoa }, { utcOffset: -10, short: t.timezoneHAST, long: t.timezoneHawaii }, { utcOffset: -9, short: t.timezoneAKST, long: t.timezoneAlaska }, { utcOffset: -8, short: t.timezonePST, long: t.timezoneBaja }, { utcOffset: -7, short: t.timezoneMST, long: t.timezoneMountain }, { utcOffset: -7, short: t.timezoneMST, long: t.timezoneLaPaz }, { utcOffset: -7, short: t.timezoneMST, long: t.timezoneArizona }, { utcOffset: -6, short: t.timezoneCST, long: t.timezoneSaskatchewan }, { utcOffset: -6, short: t.timezoneCST, long: t.timezoneCentralAmerica }, { utcOffset: -6, short: t.timezoneCST, long: t.timezoneCentralTime }, { utcOffset: -6, short: t.timezoneCST, long: t.timezoneMexico }, { utcOffset: -5, short: t.timezoneEST, long: t.timezoneEasternUS }, { utcOffset: -5, short: t.timezoneEST, long: t.timezoneLima }, { utcOffset: -5, short: t.timezoneEST, long: t.timezoneIndiana }, { utcOffset: -4, short: null, long: t.timezoneAtlantic }, { utcOffset: -4, short: null, long: t.timezoneCuiaba }, { utcOffset: -4, short: null, long: t.timezoneSantiago }, { utcOffset: -4, short: null, long: t.timezoneManaus }, { utcOffset: -4, short: null, long: t.timezoneAsuncion }, { utcOffset: -3, short: null, long: t.timezoneBrasilia }, { utcOffset: -3, short: null, long: t.timezoneGreenland }, { utcOffset: -3, short: null, long: t.timezoneMontevideo }, { utcOffset: -3, short: null, long: t.timezoneCayenne }, { utcOffset: -3, short: null, long: t.timezoneBuenosAires }, { utcOffset: -2, short: null, long: t.timezoneMidAtlantic }, { utcOffset: -1, short: null, long: t.timezoneAzores }, { utcOffset: -1, short: null, long: t.timezoneCaboVerde }, { utcOffset: 0, short: null, long: t.timezoneDublin }, { utcOffset: 0, short: null, long: t.timezoneReykjavik }, { utcOffset: 0, short: null, long: t.timezoneCasablanca }, { utcOffset: 1, short: t.timezoneCET, long: t.timezoneBelgrade }, { utcOffset: 1, short: t.timezoneCET, long: t.timezoneSarajevo }, { utcOffset: 1, short: t.timezoneCET, long: t.timezoneBrussels }, { utcOffset: 1, short: t.timezoneCET, long: t.timezoneWCAfrica }, { utcOffset: 1, short: t.timezoneCET, long: t.timezoneAmsterdam }, { utcOffset: 1, short: t.timezoneCET, long: t.timezoneWindhoek }, { utcOffset: 2, short: t.timezoneEET, long: t.timezoneMinsk }, { utcOffset: 2, short: t.timezoneEET, long: t.timezoneCairo }, { utcOffset: 2, short: t.timezoneEET, long: t.timezoneHelsinki }, { utcOffset: 2, short: t.timezoneEET, long: t.timezoneAthens }, { utcOffset: 2, short: t.timezoneEET, long: t.timezoneJerusalem }, { utcOffset: 2, short: t.timezoneEET, long: t.timezoneAmman }, { utcOffset: 2, short: t.timezoneEET, long: t.timezoneBeirut }, { utcOffset: 2, short: t.timezoneEET, long: t.timezoneHarare }, { utcOffset: 2, short: t.timezoneEET, long: t.timezoneDamascus }, { utcOffset: 2, short: t.timezoneEET, long: t.timezoneIstanbul }, { utcOffset: 3, short: t.timezoneMSK, long: t.timezoneKuwait }, { utcOffset: 3, short: t.timezoneMSK, long: t.timezoneBaghdad }, { utcOffset: 3, short: t.timezoneMSK, long: t.timezoneNairobi }, { utcOffset: 3, short: t.timezoneMSK, long: t.timezoneKaliningrad }, { utcOffset: 4, short: t.timezoneGST, long: t.timezoneMoscow }, { utcOffset: 4, short: t.timezoneGST, long: t.timezoneMuscat }, { utcOffset: 4, short: t.timezoneGST, long: t.timezoneBaku }, { utcOffset: 4, short: t.timezoneGST, long: t.timezoneYerevan }, { utcOffset: 4, short: t.timezoneGST, long: t.timezoneTbilisi }, { utcOffset: 4, short: t.timezoneGST, long: t.timezonePortLouis }, { utcOffset: 5, short: null, long: t.timezoneTashkent }, { utcOffset: 5, short: null, long: t.timezoneIslamabad }, { utcOffset: 6, short: null, long: t.timezoneEkaterinburg }, { utcOffset: 6, short: null, long: t.timezoneAstana }, { utcOffset: 6, short: null, long: t.timezoneDhaka }, { utcOffset: 7, short: t.timezoneICT, long: t.timezoneNovosibirsk }, { utcOffset: 7, short: t.timezoneICT, long: t.timezoneBangkok }, { utcOffset: 8, short: t.timezoneCCT, long: t.timezoneKrasnoyarsk }, { utcOffset: 8, short: t.timezoneCCT, long: t.timezoneBeijing }, { utcOffset: 8, short: t.timezoneCCT, long: t.timezoneSingapore }, { utcOffset: 8, short: t.timezoneCCT, long: t.timezoneTaipei }, { utcOffset: 8, short: t.timezoneCCT, long: t.timezonePerth }, { utcOffset: 8, short: t.timezoneCCT, long: t.timezoneUlaanbaatar }, { utcOffset: 9, short: t.timezoneJST, long: t.timezoneIrkutsk }, { utcOffset: 9, short: t.timezoneJST, long: t.timezoneSeoul }, { utcOffset: 9, short: t.timezoneJST, long: t.timezoneOsaka }, { utcOffset: 10, short: t.timezoneAEST, long: t.timezoneYakutsk }, { utcOffset: 10, short: t.timezoneAEST, long: t.timezoneCanberra }, { utcOffset: 10, short: t.timezoneAEST, long: t.timezoneBrisbane }, { utcOffset: 10, short: t.timezoneAEST, long: t.timezoneHobart }, { utcOffset: 10, short: t.timezoneAEST, long: t.timezoneGuam }, { utcOffset: 11, short: null, long: t.timezoneVladivostok }, { utcOffset: 11, short: null, long: t.timezoneSolomon }, { utcOffset: 12, short: t.timezoneNZST, long: t.timezoneMagadan }, { utcOffset: 12, short: t.timezoneNZST, long: t.timezoneFiji }, { utcOffset: 12, short: t.timezoneNZST, long: t.timezoneAuckland }, { utcOffset: 12, short: t.timezoneNZST, long: t.timezoneNukualofa }].map(({ utcOffset: t2, short: e3, long: o2 }) => {
    const n2 = t2 > 0 ? `UTC+${t2}` : t2 < 0 ? `UTC${t2}` : "GMT";
    return e3 ? { utcOffset: t2, short: e3, shortWithUTC: `${n2} (${e3})`, long: o2 } : { utcOffset: t2, short: n2, shortWithUTC: n2, long: o2 };
  });
}

// node_modules/@arcgis/core/widgets/support/TimezonePicker.js
var p = "esri-timezone-picker";
var l2 = { base: p, trigger: `${p}__trigger`, itemTitle: `${p}__item-title`, itemDescription: `${p}__item_description` };
var d = class extends D {
  constructor(t, e3) {
    super(t, e3), this.value = null, this.onChange = null, this.open = false, this.onOpen = null, this.onClose = null, this._selectedId = null, this._onOpen = () => {
      var _a;
      this.open = true, (_a = this.onOpen) == null ? void 0 : _a.call(this);
    }, this._onClose = () => {
      var _a;
      this.open = false, (_a = this.onClose) == null ? void 0 : _a.call(this);
    }, this._killEvent = (t2) => (t2.stopPropagation(), true), this._onChange = (t2) => {
      var _a, _b, _c;
      const e4 = t2.target, o2 = (_a = e4.selectedItems) == null ? void 0 : _a[0].getAttribute("data-id"), s2 = (_b = a2(this._gmtOffsets, o2)) == null ? void 0 : _b.utcOffset;
      s2 && (this._selectedId = o2, (_c = this.onChange) == null ? void 0 : _c.call(this, s2));
    };
  }
  loadDependencies() {
    return r({ button: () => import("./calcite-button-V4T5NPWY.js"), dropdown: () => import("./calcite-dropdown-4KYIVSVI.js"), "dropdown-group": () => import("./calcite-dropdown-group-P5PY6RML.js"), "dropdown-item": () => import("./calcite-dropdown-item-J3TR6MXT.js") });
  }
  render() {
    const t = this._messages;
    if (!t)
      return n("div", { class: l2.base, key: "empty" });
    const e3 = this._selectedItem, o2 = g(e3);
    return n("div", { class: l2.base, key: "container", onpointerdown: this._killEvent }, n("calcite-dropdown", { open: this.open, overlayPositioning: "fixed", placement: "bottom-end", scale: "s", onCalciteDropdownClose: this._onClose, onCalciteDropdownOpen: this._onOpen, onCalciteDropdownSelect: this._onChange }, n("calcite-button", { appearance: "transparent", class: l2.trigger, key: "trigger", kind: "neutral", scale: "s", slot: "trigger", tabIndex: 0, title: t.chooseTimezone }, (e3 == null ? void 0 : e3.short) ?? ""), n("calcite-dropdown-group", { selectionMode: "single" }, this._gmtOffsets.map((t2) => {
      const e4 = g(t2);
      return n("calcite-dropdown-item", { "data-id": e4, key: e4, selected: o2 === e4 }, n("div", { class: l2.itemTitle, key: "title" }, t2.shortWithUTC), n("div", { class: l2.itemDescription, key: "description" }, t2.long));
    }))));
  }
  get _gmtOffsets() {
    const t = this._messages;
    return t ? m2(t) : [];
  }
  get _selectedItem() {
    const t = this._gmtOffsets, e3 = this.value, o2 = a2(t, this._selectedId);
    return (o2 == null ? void 0 : o2.utcOffset) === e3 ? o2 : m3(t, e3);
  }
};
function a2(t, e3) {
  return t.find((t2) => g(t2) === e3);
}
function m3(t, e3) {
  return t.find((t2) => t2.utcOffset === e3);
}
function g(t) {
  return t ? `${t.utcOffset}-${t.long}` : void 0;
}
e([y()], d.prototype, "value", void 0), e([y()], d.prototype, "onChange", void 0), e([y()], d.prototype, "open", void 0), e([y()], d.prototype, "onOpen", void 0), e([y()], d.prototype, "onClose", void 0), e([y(), e2("esri/widgets/support/t9n/timezone")], d.prototype, "_messages", void 0), e([y()], d.prototype, "_gmtOffsets", null), e([y()], d.prototype, "_selectedItem", null), e([y()], d.prototype, "_selectedId", void 0), d = e([a("esri.widgets.support.TimezonePicker")], d);

export {
  f,
  l,
  d
};
//# sourceMappingURL=chunk-4VAAKQZY.js.map
