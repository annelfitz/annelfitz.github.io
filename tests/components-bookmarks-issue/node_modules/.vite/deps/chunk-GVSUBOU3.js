import {
  closestElementCrossShadowBoundary,
  queryElementRoots
} from "./chunk-W3V5A544.js";
import {
  h
} from "./chunk-NCF6OYL5.js";

// node_modules/@esri/calcite-components/dist/components/form.js
var componentsWithInputEvent = [
  "calcite-input",
  "calcite-input-number",
  "calcite-input-text",
  "calcite-text-area"
];
function getClearValidationEventName(componentTag) {
  const componentTagCamelCase = componentTag.split("-").map((part, index) => index === 0 ? part : `${part[0].toUpperCase()}${part.slice(1)}`).join("");
  const clearValidationEvent = `${componentTagCamelCase}${componentsWithInputEvent.includes(componentTag) ? "Input" : "Change"}`;
  return clearValidationEvent;
}
var hiddenFormInputSlotName = "hidden-form-input";
function isCheckable(component) {
  return "checked" in component;
}
var onFormResetMap = /* @__PURE__ */ new WeakMap();
var formComponentSet = /* @__PURE__ */ new WeakSet();
function hasRegisteredFormComponentParent(form, formComponentEl) {
  const hasParentComponentWithFormIdSet = closestElementCrossShadowBoundary(formComponentEl.parentElement, "[form]");
  if (hasParentComponentWithFormIdSet) {
    return true;
  }
  const formComponentRegisterEventName = "calciteInternalFormComponentRegister";
  let hasRegisteredFormComponentParent2 = false;
  form.addEventListener(formComponentRegisterEventName, (event) => {
    hasRegisteredFormComponentParent2 = event.composedPath().some((element) => formComponentSet.has(element));
    event.stopPropagation();
  }, { once: true });
  formComponentEl.dispatchEvent(new CustomEvent(formComponentRegisterEventName, {
    bubbles: true,
    composed: true
  }));
  return hasRegisteredFormComponentParent2;
}
function clearFormValidation(component) {
  "status" in component && (component.status = "idle");
  "validationIcon" in component && (component.validationIcon = false);
  "validationMessage" in component && (component.validationMessage = "");
}
function setInvalidFormValidation(component, message) {
  "status" in component && (component.status = "invalid");
  "validationIcon" in component && !component.validationIcon && (component.validationIcon = true);
  "validationMessage" in component && !component.validationMessage && (component.validationMessage = message);
}
function displayValidationMessage(event) {
  var _a;
  const hiddenInput = event == null ? void 0 : event.target;
  const formComponent = hiddenInput == null ? void 0 : hiddenInput.parentElement;
  const componentTag = (_a = formComponent == null ? void 0 : formComponent.nodeName) == null ? void 0 : _a.toLowerCase();
  const componentTagParts = componentTag == null ? void 0 : componentTag.split("-");
  if (componentTagParts.length < 2 || componentTagParts[0] !== "calcite") {
    return;
  }
  event == null ? void 0 : event.preventDefault();
  setInvalidFormValidation(formComponent, hiddenInput == null ? void 0 : hiddenInput.validationMessage);
  if ((formComponent == null ? void 0 : formComponent.validationMessage) !== (hiddenInput == null ? void 0 : hiddenInput.validationMessage)) {
    return;
  }
  const clearValidationEvent = getClearValidationEventName(componentTag);
  formComponent.addEventListener(clearValidationEvent, () => clearFormValidation(formComponent), {
    once: true
  });
}
function submitForm(component) {
  const { formEl } = component;
  if (!formEl) {
    return false;
  }
  formEl.addEventListener("invalid", displayValidationMessage, true);
  formEl.requestSubmit();
  formEl.removeEventListener("invalid", displayValidationMessage, true);
  requestAnimationFrame(() => {
    const invalidEls = formEl.querySelectorAll("[status=invalid]");
    for (const el of invalidEls) {
      if (el == null ? void 0 : el.validationMessage) {
        el == null ? void 0 : el.setFocus();
        break;
      }
    }
  });
  return true;
}
function resetForm(component) {
  var _a;
  (_a = component.formEl) == null ? void 0 : _a.reset();
}
function connectForm(component) {
  const { el, value } = component;
  const associatedForm = findAssociatedForm(component);
  if (!associatedForm || hasRegisteredFormComponentParent(associatedForm, el)) {
    return;
  }
  component.formEl = associatedForm;
  component.defaultValue = value;
  if (isCheckable(component)) {
    component.defaultChecked = component.checked;
  }
  const boundOnFormReset = (component.onFormReset || onFormReset).bind(component);
  associatedForm.addEventListener("reset", boundOnFormReset);
  onFormResetMap.set(component.el, boundOnFormReset);
  formComponentSet.add(el);
}
function findAssociatedForm(component) {
  const { el, form } = component;
  return form ? queryElementRoots(el, { id: form }) : closestElementCrossShadowBoundary(el, "form");
}
function onFormReset() {
  clearFormValidation(this);
  if (isCheckable(this)) {
    this.checked = this.defaultChecked;
    return;
  }
  this.value = this.defaultValue;
}
function disconnectForm(component) {
  const { el, formEl } = component;
  if (!formEl) {
    return;
  }
  const boundOnFormReset = onFormResetMap.get(el);
  formEl.removeEventListener("reset", boundOnFormReset);
  onFormResetMap.delete(el);
  component.formEl = null;
  formComponentSet.delete(el);
}
function afterConnectDefaultValueSet(component, value) {
  component.defaultValue = value;
}
var internalHiddenInputInputEvent = "calciteInternalHiddenInputInput";
var hiddenInputInputHandler = (event) => {
  event.target.dispatchEvent(new CustomEvent(internalHiddenInputInputEvent, { bubbles: true }));
};
var removeHiddenInputChangeEventListener = (input) => input.removeEventListener("input", hiddenInputInputHandler);
function syncHiddenFormInput(component) {
  const { el, formEl, name, value } = component;
  const { ownerDocument } = el;
  const inputs = el.querySelectorAll(`input[slot="${hiddenFormInputSlotName}"]`);
  if (!formEl || !name) {
    inputs.forEach((input) => {
      removeHiddenInputChangeEventListener(input);
      input.remove();
    });
    return;
  }
  const values = Array.isArray(value) ? value : [value];
  const extra = [];
  const seen = /* @__PURE__ */ new Set();
  inputs.forEach((input) => {
    const valueMatch = values.find((val) => (
      /* intentional non-strict equality check */
      val == input.value
    ));
    if (valueMatch != null) {
      seen.add(valueMatch);
      defaultSyncHiddenFormInput(component, input, valueMatch);
    } else {
      extra.push(input);
    }
  });
  let docFrag;
  values.forEach((value2) => {
    if (seen.has(value2)) {
      return;
    }
    let input = extra.pop();
    if (!input) {
      input = ownerDocument.createElement("input");
      input.slot = hiddenFormInputSlotName;
    }
    if (!docFrag) {
      docFrag = ownerDocument.createDocumentFragment();
    }
    docFrag.append(input);
    input.addEventListener("input", hiddenInputInputHandler);
    defaultSyncHiddenFormInput(component, input, value2);
  });
  if (docFrag) {
    el.append(docFrag);
  }
  extra.forEach((input) => {
    removeHiddenInputChangeEventListener(input);
    input.remove();
  });
}
function defaultSyncHiddenFormInput(component, input, value) {
  var _a;
  const { defaultValue, disabled, form, name, required } = component;
  input.defaultValue = defaultValue;
  input.disabled = disabled;
  input.name = name;
  input.required = required;
  input.tabIndex = -1;
  if (form) {
    input.setAttribute("form", form);
  } else {
    input.removeAttribute("form");
  }
  if (isCheckable(component)) {
    input.checked = component.checked;
    input.defaultChecked = component.defaultChecked;
    input.value = component.checked ? value || "on" : "";
  } else {
    input.value = value || "";
  }
  (_a = component.syncHiddenFormInput) == null ? void 0 : _a.call(component, input);
}
var HiddenFormInputSlot = ({ component }) => {
  syncHiddenFormInput(component);
  return h("slot", { name: hiddenFormInputSlotName });
};

export {
  submitForm,
  resetForm,
  connectForm,
  findAssociatedForm,
  disconnectForm,
  afterConnectDefaultValueSet,
  internalHiddenInputInputEvent,
  HiddenFormInputSlot
};
/*! Bundled license information:

@esri/calcite-components/dist/components/form.js:
  (*!
   * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
   * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
   * v2.6.0
   *)
*/
//# sourceMappingURL=chunk-GVSUBOU3.js.map
