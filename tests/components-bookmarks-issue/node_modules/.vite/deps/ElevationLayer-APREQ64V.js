import {
  a as a3,
  s as s3
} from "./chunk-YFKU7PPC.js";
import "./chunk-MUMDKJ7Y.js";
import {
  p
} from "./chunk-7OR5BJ53.js";
import "./chunk-5HSC73OQ.js";
import "./chunk-G3TGE2VT.js";
import "./chunk-ECTYMEUP.js";
import "./chunk-YH2IYJYF.js";
import "./chunk-GGHKH3LP.js";
import "./chunk-VS6AHHIY.js";
import {
  v as v2
} from "./chunk-YBPOKK6D.js";
import {
  l
} from "./chunk-AHEDDTVZ.js";
import "./chunk-RW5QMWE6.js";
import "./chunk-LGMX4E7L.js";
import {
  j
} from "./chunk-4ZLXDMI5.js";
import "./chunk-2SYXH2R7.js";
import "./chunk-7JNXJYRU.js";
import {
  u
} from "./chunk-WW22JHXA.js";
import {
  S
} from "./chunk-ZAM62XN5.js";
import {
  d
} from "./chunk-RKVEKQ5O.js";
import "./chunk-P7J4JFEH.js";
import {
  b
} from "./chunk-G7FOE26O.js";
import "./chunk-USOPZ2Q6.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-AKLOTDO2.js";
import "./chunk-6AQIVLDN.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-LBXFRGMS.js";
import "./chunk-VTH4DAHQ.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-SLQA5YBV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import {
  o
} from "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import {
  U,
  v
} from "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a2
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  a,
  s as s2
} from "./chunk-JGDJR5EV.js";
import {
  t
} from "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  s
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/layers/ElevationLayer.js
var w = class extends p(l(u(j(S(b))))) {
  constructor(...e2) {
    super(...e2), this.capabilities = { operations: { supportsTileMap: false } }, this.copyright = null, this.heightModelInfo = null, this.path = null, this.minScale = void 0, this.maxScale = void 0, this.opacity = 1, this.operationalLayerType = "ArcGISTiledElevationServiceLayer", this.sourceJSON = null, this.type = "elevation", this.url = null, this.version = null, this._lercDecoder = s3();
  }
  normalizeCtorArgs(e2, r) {
    return "string" == typeof e2 ? { url: e2, ...r } : e2;
  }
  destroy() {
    this._lercDecoder = t(this._lercDecoder);
  }
  readCapabilities(e2, r) {
    const t2 = r.capabilities && r.capabilities.split(",").map((e3) => e3.toLowerCase().trim());
    if (!t2)
      return { operations: { supportsTileMap: false } };
    return { operations: { supportsTileMap: t2.includes("tilemap") } };
  }
  readVersion(e2, r) {
    let t2 = r.currentVersion;
    return t2 || (t2 = 9.3), t2;
  }
  load(e2) {
    const r = null != e2 ? e2.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Image Service"], supportsData: false, validateItem: (e3) => {
      if (e3.typeKeywords) {
        for (let r2 = 0; r2 < e3.typeKeywords.length; r2++)
          if ("elevation 3d layer" === e3.typeKeywords[r2].toLowerCase())
            return true;
      }
      throw new s("portal:invalid-layer-item-type", "Invalid layer item type '${type}', expected '${expectedType}' ", { type: "Image Service", expectedType: "Image Service Elevation 3D Layer" });
    } }, e2).catch(a).then(() => this._fetchImageService(r))), Promise.resolve(this);
  }
  fetchTile(e2, t2, i, o2) {
    const s4 = null != (o2 = o2 || { signal: null }).signal ? o2.signal : o2.signal = new AbortController().signal, a4 = { responseType: "array-buffer", signal: s4 }, p2 = { noDataValue: o2.noDataValue, returnFileInfo: true };
    return this.load().then(() => this._fetchTileAvailability(e2, t2, i, o2)).then(() => U(this.getTileUrl(e2, t2, i), a4)).then((e3) => this._lercDecoder.decode(e3.data, p2, s4)).then((e3) => new a3(e3));
  }
  getTileUrl(e2, r, t2) {
    const i = !this.capabilities.operations.supportsTileMap && this.supportsBlankTile, o2 = v({ ...this.parsedUrl.query, blankTile: !i && null });
    return `${this.parsedUrl.path}/tile/${e2}/${r}/${t2}${o2 ? "?" + o2 : ""}`;
  }
  async queryElevation(e2, r) {
    const { ElevationQuery: t2 } = await import("./ElevationQuery-AMBQNGOP.js");
    s2(r);
    return new t2().query(this, e2, r);
  }
  async createElevationSampler(e2, r) {
    const { ElevationQuery: t2 } = await import("./ElevationQuery-AMBQNGOP.js");
    s2(r);
    return new t2().createSampler(this, e2, r);
  }
  _fetchTileAvailability(e2, r, t2, i) {
    return this.tilemapCache ? this.tilemapCache.fetchAvailability(e2, r, t2, i) : Promise.resolve("unknown");
  }
  async _fetchImageService(e2) {
    var _a;
    if (this.sourceJSON)
      return this.sourceJSON;
    const t2 = { query: { f: "json", ...this.parsedUrl.query }, responseType: "json", signal: e2 }, i = await U(this.parsedUrl.path, t2);
    i.ssl && (this.url = (_a = this.url) == null ? void 0 : _a.replace(/^http:/i, "https:")), this.sourceJSON = i.data, this.read(i.data, { origin: "service", url: this.parsedUrl });
  }
  get hasOverriddenFetchTile() {
    return !this.fetchTile[S2];
  }
};
e([y({ readOnly: true })], w.prototype, "capabilities", void 0), e([o("service", "capabilities", ["capabilities"])], w.prototype, "readCapabilities", null), e([y({ json: { read: { source: "copyrightText" } } })], w.prototype, "copyright", void 0), e([y({ readOnly: true, type: v2 })], w.prototype, "heightModelInfo", void 0), e([y({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], w.prototype, "path", void 0), e([y({ type: ["show", "hide"] })], w.prototype, "listMode", void 0), e([y({ json: { read: false, write: false, origins: { service: { read: false, write: false }, "portal-item": { read: false, write: false }, "web-document": { read: false, write: false } } }, readOnly: true })], w.prototype, "minScale", void 0), e([y({ json: { read: false, write: false, origins: { service: { read: false, write: false }, "portal-item": { read: false, write: false }, "web-document": { read: false, write: false } } }, readOnly: true })], w.prototype, "maxScale", void 0), e([y({ json: { read: false, write: false, origins: { "web-document": { read: false, write: false } } } })], w.prototype, "opacity", void 0), e([y({ type: ["ArcGISTiledElevationServiceLayer"] })], w.prototype, "operationalLayerType", void 0), e([y()], w.prototype, "sourceJSON", void 0), e([y({ json: { read: false }, value: "elevation", readOnly: true })], w.prototype, "type", void 0), e([y(d)], w.prototype, "url", void 0), e([y()], w.prototype, "version", void 0), e([o("version", ["currentVersion"])], w.prototype, "readVersion", null), w = e([a2("esri.layers.ElevationLayer")], w);
var S2 = Symbol("default-fetch-tile");
w.prototype.fetchTile[S2] = true;
var T = w;
export {
  T as default
};
//# sourceMappingURL=ElevationLayer-APREQ64V.js.map
