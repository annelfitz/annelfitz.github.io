{
  "version": 3,
  "sources": ["../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/util/ScreenSizePerspective.glsl.js", "../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{s as e}from\"../../../../../../chunks/vec32.js\";import{create as a}from\"../../../../../../core/libs/gl-matrix-2/factories/vec3f64.js\";import{Float3PassUniform as r}from\"../../shaderModules/Float3PassUniform.js\";import{glsl as c}from\"../../shaderModules/interfaces.js\";function s(e){e.vertex.code.add(c`float screenSizePerspectiveViewAngleDependentFactor(float absCosAngle) {\nreturn absCosAngle * absCosAngle * absCosAngle;\n}`),e.vertex.code.add(c`vec3 screenSizePerspectiveScaleFactor(float absCosAngle, float distanceToCamera, vec3 params) {\nreturn vec3(\nmin(params.x / (distanceToCamera - params.y), 1.0),\nscreenSizePerspectiveViewAngleDependentFactor(absCosAngle),\nparams.z\n);\n}`),e.vertex.code.add(c`float applyScreenSizePerspectiveScaleFactorFloat(float size, vec3 factor) {\nreturn mix(size * clamp(factor.x, factor.z, 1.0), size, factor.y);\n}`),e.vertex.code.add(c`float screenSizePerspectiveScaleFloat(float size, float absCosAngle, float distanceToCamera, vec3 params) {\nreturn applyScreenSizePerspectiveScaleFactorFloat(\nsize,\nscreenSizePerspectiveScaleFactor(absCosAngle, distanceToCamera, params)\n);\n}`),e.vertex.code.add(c`vec2 applyScreenSizePerspectiveScaleFactorVec2(vec2 size, vec3 factor) {\nreturn mix(size * clamp(factor.x, factor.z, 1.0), size, factor.y);\n}`),e.vertex.code.add(c`vec2 screenSizePerspectiveScaleVec2(vec2 size, float absCosAngle, float distanceToCamera, vec3 params) {\nreturn applyScreenSizePerspectiveScaleFactorVec2(size, screenSizePerspectiveScaleFactor(absCosAngle, distanceToCamera, params));\n}`)}function t(e){e.uniforms.add(new r(\"screenSizePerspective\",(e=>i(e.screenSizePerspective))))}function o(e){e.uniforms.add(new r(\"screenSizePerspectiveAlignment\",(e=>i(e.screenSizePerspectiveAlignment||e.screenSizePerspective))))}function i(a){return e(n,a.parameters.divisor,a.parameters.offset,a.minScaleFactor)}const n=a();export{s as ScreenSizePerspective,t as addScreenSizePerspective,o as addScreenSizePerspectiveAlignment};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{s as e}from\"../../../../../../chunks/vec42.js\";import{create as r}from\"../../../../../../core/libs/gl-matrix-2/factories/vec4f64.js\";import{ScreenSizePerspective as t,addScreenSizePerspectiveAlignment as l}from\"../util/ScreenSizePerspective.glsl.js\";import{addCameraPosition as o}from\"../util/View.glsl.js\";import{Float4PassUniform as c}from\"../../shaderModules/Float4PassUniform.js\";import{glsl as i}from\"../../shaderModules/interfaces.js\";function a(e,r){const c=e.vertex;r.hasVerticalOffset?(f(c),r.hasScreenSizePerspective&&(e.include(t),l(c),o(e.vertex,r)),c.code.add(i`\n      vec3 calculateVerticalOffset(vec3 worldPos, vec3 localOrigin) {\n        float viewDistance = length((view * vec4(worldPos, 1.0)).xyz);\n        ${r.spherical?i`vec3 worldNormal = normalize(worldPos + localOrigin);`:i`vec3 worldNormal = vec3(0.0, 0.0, 1.0);`}\n        ${r.hasScreenSizePerspective?i`\n            float cosAngle = dot(worldNormal, normalize(worldPos - cameraPosition));\n            float verticalOffsetScreenHeight = screenSizePerspectiveScaleFloat(verticalOffset.x, abs(cosAngle), viewDistance, screenSizePerspectiveAlignment);`:i`\n            float verticalOffsetScreenHeight = verticalOffset.x;`}\n        // Screen sized offset in world space, used for example for line callouts\n        float worldOffset = clamp(verticalOffsetScreenHeight * verticalOffset.y * viewDistance, verticalOffset.z, verticalOffset.w);\n        return worldNormal * worldOffset;\n      }\n\n      vec3 addVerticalOffset(vec3 worldPos, vec3 localOrigin) {\n        return worldPos + calculateVerticalOffset(worldPos, localOrigin);\n      }\n    `)):c.code.add(i`vec3 addVerticalOffset(vec3 worldPos, vec3 localOrigin) { return worldPos; }`)}const s=r();function f(r){r.uniforms.add(new c(\"verticalOffset\",((r,t)=>{const{minWorldLength:l,maxWorldLength:o,screenLength:c}=r.verticalOffset,i=Math.tan(.5*t.camera.fovY)/(.5*t.camera.fullViewport[3]),a=t.camera.pixelRatio||1;return e(s,c*a,i,l,o)})))}export{a as VerticalOffset,f as addVerticalOffset};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAIkR,SAASA,GAAEC,IAAE;AAAC,EAAAA,GAAE,OAAO,KAAK,IAAIC;AAAA;AAAA,EAEhT,GAAED,GAAE,OAAO,KAAK,IAAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMpB,GAAED,GAAE,OAAO,KAAK,IAAIC;AAAA;AAAA,EAEpB,GAAED,GAAE,OAAO,KAAK,IAAIC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKpB,GAAED,GAAE,OAAO,KAAK,IAAIC;AAAA;AAAA,EAEpB,GAAED,GAAE,OAAO,KAAK,IAAIC;AAAA;AAAA,EAEpB;AAAC;AAAC,SAAS,EAAED,IAAE;AAAC,EAAAA,GAAE,SAAS,IAAI,IAAI,EAAE,yBAAyB,CAAAA,OAAG,EAAEA,GAAE,qBAAqB,CAAE,CAAC;AAAC;AAAC,SAASC,GAAED,IAAE;AAAC,EAAAA,GAAE,SAAS,IAAI,IAAI,EAAE,kCAAkC,CAAAA,OAAG,EAAEA,GAAE,kCAAgCA,GAAE,qBAAqB,CAAE,CAAC;AAAC;AAAC,SAAS,EAAEE,IAAE;AAAC,SAAO,EAAEC,IAAED,GAAE,WAAW,SAAQA,GAAE,WAAW,QAAOA,GAAE,cAAc;AAAC;AAAC,IAAMC,KAAE,EAAE;;;ACnByH,SAAS,EAAEC,IAAE,GAAE;AAAC,QAAM,IAAEA,GAAE;AAAO,IAAE,qBAAmBC,GAAE,CAAC,GAAE,EAAE,6BAA2BD,GAAE,QAAQE,EAAC,GAAEC,GAAE,CAAC,GAAE,EAAEH,GAAE,QAAO,CAAC,IAAG,EAAE,KAAK,IAAIG;AAAA;AAAA;AAAA,UAG1jB,EAAE,YAAUA,4DAAyDA,2CAA0C;AAAA,UAC/G,EAAE,2BAAyBA;AAAA;AAAA,kKAE2HA;AAAA,iEAC/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAS5D,KAAG,EAAE,KAAK,IAAIA,gFAA+E;AAAC;AAAC,IAAMD,KAAEE,GAAE;AAAE,SAASH,GAAE,GAAE;AAAC,IAAE,SAAS,IAAI,IAAID,GAAE,kBAAkB,CAACK,IAAEC,OAAI;AAAC,UAAK,EAAC,gBAAe,GAAE,gBAAeH,IAAE,cAAa,EAAC,IAAEE,GAAE,gBAAeE,KAAE,KAAK,IAAI,MAAGD,GAAE,OAAO,IAAI,KAAG,MAAGA,GAAE,OAAO,aAAa,CAAC,IAAGE,KAAEF,GAAE,OAAO,cAAY;AAAE,WAAO,EAAEJ,IAAE,IAAEM,IAAED,IAAE,GAAEJ,EAAC;AAAA,EAAC,CAAE,CAAC;AAAC;",
  "names": ["s", "e", "o", "a", "n", "e", "f", "s", "o", "n", "r", "t", "i", "a"]
}
