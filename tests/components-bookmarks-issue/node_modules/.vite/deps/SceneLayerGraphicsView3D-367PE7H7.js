import {
  a as a2,
  f as f2,
  i as i3,
  i2 as i4,
  u as u4,
  w
} from "./chunk-NUJDDQFT.js";
import {
  i as i2
} from "./chunk-2G4FVFG2.js";
import {
  t2 as t5,
  u2 as u3
} from "./chunk-FU2UQ2HG.js";
import {
  G,
  Y as Y2
} from "./chunk-J3NVEAU3.js";
import "./chunk-O7GHSWFW.js";
import "./chunk-XPABJ7YF.js";
import "./chunk-52QXS2S5.js";
import "./chunk-BZ24WJCW.js";
import "./chunk-BY6CCMKY.js";
import "./chunk-7WLETYGH.js";
import {
  P2,
  l as l2
} from "./chunk-UACJ4BQN.js";
import "./chunk-ZZWM6CET.js";
import "./chunk-CEFCTXUM.js";
import "./chunk-5N67JZXF.js";
import "./chunk-UC6QLXCR.js";
import "./chunk-PLT24NZO.js";
import "./chunk-WS5XOTML.js";
import "./chunk-ID25T22U.js";
import "./chunk-5SYJEI74.js";
import "./chunk-OOISODT4.js";
import "./chunk-YWPIIZFL.js";
import "./chunk-LARO5FBS.js";
import "./chunk-QFYJUFUK.js";
import "./chunk-V7IF2KNH.js";
import "./chunk-AZYURM7A.js";
import "./chunk-HBBLDSW6.js";
import "./chunk-YYI7TRI3.js";
import "./chunk-RQW2N53A.js";
import "./chunk-LHVWC4RW.js";
import "./chunk-GN2OLKIL.js";
import "./chunk-LMCIQOBX.js";
import "./chunk-4VVENLLF.js";
import "./chunk-VUHMQQ6M.js";
import {
  c
} from "./chunk-6GQQIJM7.js";
import "./chunk-PAH4PVZY.js";
import "./chunk-5T7MASZO.js";
import "./chunk-5WKN6K5Z.js";
import "./chunk-WCBHO6BH.js";
import "./chunk-V7NVRGBC.js";
import "./chunk-KCZGCTYM.js";
import "./chunk-3YZBQBZ5.js";
import "./chunk-RFBA77K3.js";
import "./chunk-46T3D2EU.js";
import "./chunk-RYF27IO3.js";
import "./chunk-G3J4F5JD.js";
import "./chunk-OFEQM7IB.js";
import "./chunk-2GT6KC2O.js";
import "./chunk-R3RV65RE.js";
import "./chunk-5XOEX7AO.js";
import "./chunk-5MKTGTC4.js";
import "./chunk-7UDCRD5C.js";
import "./chunk-B3GKRGWX.js";
import "./chunk-FN7LLNVA.js";
import "./chunk-BR3PF5YD.js";
import "./chunk-NMKWX7AG.js";
import "./chunk-6OG4R2CR.js";
import "./chunk-XCK6RPVT.js";
import "./chunk-REXEABYB.js";
import "./chunk-VIRGWB3Z.js";
import "./chunk-QCUK7T7Y.js";
import "./chunk-2NDIVJST.js";
import "./chunk-SPYHZ6ZW.js";
import "./chunk-637XZX4A.js";
import {
  C
} from "./chunk-PMFQ2A2V.js";
import "./chunk-MBLWM4C2.js";
import "./chunk-HHAESKQ6.js";
import "./chunk-5INQRMFY.js";
import "./chunk-XP3ABGGF.js";
import "./chunk-TACIE3AK.js";
import "./chunk-6LT23NJG.js";
import "./chunk-4FXZDEEP.js";
import "./chunk-KYKKN5I4.js";
import "./chunk-PWQTGVPO.js";
import "./chunk-4MJOJUFR.js";
import "./chunk-F7X3QPMY.js";
import {
  t as t4
} from "./chunk-BMTOVJNA.js";
import {
  t as t3
} from "./chunk-CMLG62TA.js";
import {
  n as n6
} from "./chunk-SPU25K6A.js";
import "./chunk-P257AUOX.js";
import "./chunk-X5WDIDKE.js";
import "./chunk-SWNHB34O.js";
import "./chunk-NGAYW4TW.js";
import "./chunk-2LPPSWTR.js";
import {
  o as o5
} from "./chunk-7E37N35O.js";
import "./chunk-BEXFYHUM.js";
import "./chunk-MDGE56IH.js";
import "./chunk-I6RS7YIS.js";
import "./chunk-M5UX4IRZ.js";
import "./chunk-BHOYA5LV.js";
import "./chunk-5T2QNVDA.js";
import "./chunk-SI6AVZBW.js";
import "./chunk-I7LDU4W6.js";
import "./chunk-SCRCLNT5.js";
import "./chunk-NT7TKMWH.js";
import "./chunk-BQGPMKNK.js";
import "./chunk-KWLN46JY.js";
import "./chunk-7KNPDPFB.js";
import "./chunk-M6P775BS.js";
import "./chunk-J5F4VILS.js";
import "./chunk-KSBIR2KG.js";
import "./chunk-XVQGALI7.js";
import "./chunk-XFQIXBHG.js";
import "./chunk-MVSN2HAN.js";
import "./chunk-7A5N7G2Z.js";
import "./chunk-B4ZPBUH4.js";
import "./chunk-HHTLQ7O6.js";
import "./chunk-FIHLU3LF.js";
import "./chunk-PZEIVZJB.js";
import "./chunk-DXK65EP4.js";
import "./chunk-H6MCGW3O.js";
import "./chunk-OM7WUMCL.js";
import "./chunk-J54I3TB7.js";
import "./chunk-MDXZIVBP.js";
import "./chunk-7W5MWPC6.js";
import "./chunk-OE52KVBM.js";
import "./chunk-L577YNYZ.js";
import "./chunk-GL5TSVQL.js";
import "./chunk-FD7NY4JS.js";
import "./chunk-ZQTY6DQZ.js";
import "./chunk-ITCKUEVD.js";
import "./chunk-TYYN3C37.js";
import "./chunk-OBABKQ6S.js";
import "./chunk-4GGEQMYI.js";
import "./chunk-A47N2JLN.js";
import "./chunk-GQP7H7SM.js";
import "./chunk-ZPC74XHC.js";
import "./chunk-IVGJRGD2.js";
import "./chunk-JA2AO4PC.js";
import "./chunk-MTLWPXQD.js";
import "./chunk-ZEMG7GKC.js";
import "./chunk-ECIXBYOQ.js";
import "./chunk-5MQ4HAUX.js";
import "./chunk-XIWETS2Q.js";
import "./chunk-FOCTPJDR.js";
import "./chunk-2DATALUO.js";
import "./chunk-QFKFOAJ6.js";
import "./chunk-LOPMLCHC.js";
import "./chunk-JIR2YP6A.js";
import "./chunk-LANUNBDP.js";
import "./chunk-JBF6CULO.js";
import "./chunk-DRCNNCTI.js";
import "./chunk-MKOOEINB.js";
import "./chunk-JKOHBDRD.js";
import "./chunk-MDSRD3WV.js";
import "./chunk-3DFMDDMO.js";
import {
  t as t2
} from "./chunk-4BCSYJOQ.js";
import "./chunk-GMUCR2DJ.js";
import "./chunk-HBRJJENW.js";
import "./chunk-VHY5K2VE.js";
import "./chunk-6ENXMQPD.js";
import "./chunk-FV43HSGW.js";
import "./chunk-ZR7OV2EH.js";
import "./chunk-U76EZJUZ.js";
import "./chunk-MEEG7XMI.js";
import "./chunk-LJULTBAY.js";
import "./chunk-FD4DXBZA.js";
import "./chunk-54XXLVAD.js";
import "./chunk-KO7QNSNZ.js";
import {
  h
} from "./chunk-MUMDKJ7Y.js";
import "./chunk-ZFR4QMZ5.js";
import "./chunk-R2MAAYED.js";
import "./chunk-B7M5G3J5.js";
import "./chunk-7QHIE4SQ.js";
import "./chunk-6MGK5WBT.js";
import "./chunk-HSOVRETF.js";
import "./chunk-CPZW2LMK.js";
import "./chunk-QR7J3YDY.js";
import "./chunk-GO2OGJDG.js";
import "./chunk-UYMREM3D.js";
import "./chunk-BYRUCUF7.js";
import "./chunk-CXP4BHPO.js";
import "./chunk-IJD65EMQ.js";
import "./chunk-4YGBWYMD.js";
import "./chunk-ZPU7GNG4.js";
import "./chunk-TNR6E67I.js";
import "./chunk-7O3VD45U.js";
import "./chunk-QREUCRQ4.js";
import "./chunk-YK3UMVCY.js";
import "./chunk-GB4RVOXH.js";
import "./chunk-JTUYA5FE.js";
import "./chunk-UNTQATE2.js";
import "./chunk-5YY6NZNY.js";
import "./chunk-5IT6RVBX.js";
import "./chunk-MTQHYT7Y.js";
import "./chunk-JCP47SOM.js";
import "./chunk-CXCB57TE.js";
import "./chunk-IWO6JXL2.js";
import "./chunk-AVR3LWTZ.js";
import "./chunk-YUWVLORR.js";
import "./chunk-7MYYCSEB.js";
import "./chunk-ESK2YRQM.js";
import "./chunk-3GY64OYE.js";
import "./chunk-QIEXJLRX.js";
import "./chunk-UNTPHF5R.js";
import "./chunk-YJFPDMSR.js";
import "./chunk-FFG7BDAP.js";
import "./chunk-I4SHZ6P5.js";
import "./chunk-PGOAFABD.js";
import "./chunk-63NZBHDP.js";
import "./chunk-BNDDKY53.js";
import "./chunk-BECEVYQR.js";
import "./chunk-S243OWEZ.js";
import {
  I
} from "./chunk-QYDOVVH7.js";
import "./chunk-YSXT2SWC.js";
import "./chunk-DGRFM5OL.js";
import "./chunk-AOAT6HYL.js";
import "./chunk-YH3SFFF7.js";
import "./chunk-JBU54P54.js";
import "./chunk-UQEUYEWU.js";
import "./chunk-5LIYYE75.js";
import {
  Z
} from "./chunk-IWZSAF74.js";
import "./chunk-FMS3CZY7.js";
import "./chunk-F2EHRKUX.js";
import "./chunk-UWZ4CRJK.js";
import "./chunk-2636VFVY.js";
import "./chunk-252ISA6Z.js";
import "./chunk-TLTAGTBA.js";
import "./chunk-2QPP5AGU.js";
import "./chunk-2C26DRKK.js";
import "./chunk-M4RFJU4F.js";
import "./chunk-WVKWBQ7C.js";
import "./chunk-RK2U53CD.js";
import {
  S
} from "./chunk-YPY24RRU.js";
import "./chunk-O7RKI2QW.js";
import "./chunk-BMB27ANS.js";
import "./chunk-3FOBZIUS.js";
import "./chunk-VVAVEXL2.js";
import "./chunk-BKBB7AOV.js";
import "./chunk-H7T5AB2S.js";
import "./chunk-HXYRQKMI.js";
import "./chunk-WKVHVZW2.js";
import "./chunk-7KK6L4F6.js";
import "./chunk-N7746YEI.js";
import "./chunk-DH7BG2VH.js";
import "./chunk-KSZESDGM.js";
import "./chunk-CHJMCUAV.js";
import "./chunk-5P74D2TG.js";
import "./chunk-33LWZO2E.js";
import "./chunk-YT66FIGM.js";
import "./chunk-VIKID44H.js";
import "./chunk-3IDXRFXE.js";
import "./chunk-TLU6YG3S.js";
import "./chunk-RLZYC2LS.js";
import "./chunk-WTKF56EK.js";
import "./chunk-3RIV3ECV.js";
import "./chunk-WEER6QME.js";
import "./chunk-IYU3Q2BA.js";
import "./chunk-L52HB3KV.js";
import "./chunk-TXLJQAAN.js";
import "./chunk-XJICXW6N.js";
import "./chunk-YF5E2R37.js";
import {
  e as e3,
  t
} from "./chunk-R4SGP2EA.js";
import "./chunk-IRL6OOVK.js";
import "./chunk-3AIILHI5.js";
import "./chunk-QJRGTKPN.js";
import "./chunk-VIH3KDZO.js";
import "./chunk-LA365FE7.js";
import "./chunk-ONKWNPIN.js";
import "./chunk-JKLFCJPR.js";
import {
  u as u2
} from "./chunk-J6T3FJLS.js";
import "./chunk-SA77Z3WI.js";
import {
  A as A2,
  N,
  Q,
  Y,
  te
} from "./chunk-676ANOCK.js";
import "./chunk-6K2UNRXT.js";
import "./chunk-WTKV7W5Z.js";
import "./chunk-D4Y7YHG7.js";
import "./chunk-AL5NKCU5.js";
import "./chunk-6MBDB46F.js";
import {
  n as n5
} from "./chunk-D56W4LPT.js";
import {
  e as e2
} from "./chunk-BKOYOJBG.js";
import "./chunk-7JR6S3WL.js";
import "./chunk-CSSLIU64.js";
import "./chunk-CJNDQ2LH.js";
import "./chunk-B4E4X2TN.js";
import "./chunk-HS6YI5DU.js";
import "./chunk-CDBOQCLE.js";
import "./chunk-RSRUEM5U.js";
import "./chunk-HFJMEXIX.js";
import "./chunk-VYSGSKHB.js";
import "./chunk-DGJJJ2DD.js";
import "./chunk-UAFQMHYI.js";
import "./chunk-IDPLBNJX.js";
import "./chunk-ZHAZR5C3.js";
import "./chunk-P4MNTMCZ.js";
import "./chunk-YH2IYJYF.js";
import "./chunk-BSPKLAHD.js";
import "./chunk-GGHKH3LP.js";
import "./chunk-VS6AHHIY.js";
import "./chunk-5DH2QVPW.js";
import {
  J
} from "./chunk-GPWQGIYV.js";
import "./chunk-WZJNHZ6H.js";
import "./chunk-XMYPMIYH.js";
import "./chunk-FQLGRQKL.js";
import "./chunk-YBPOKK6D.js";
import "./chunk-IZ3VJLQ6.js";
import {
  d as d2
} from "./chunk-DRC4XSYG.js";
import "./chunk-TUVEYM7U.js";
import "./chunk-5S637BGW.js";
import "./chunk-BFOJPIF7.js";
import "./chunk-Y7RXGLGH.js";
import "./chunk-RO3CTAP7.js";
import "./chunk-GKMVTGGM.js";
import "./chunk-XGTCDM4C.js";
import "./chunk-QNG4TY7L.js";
import "./chunk-RW5QMWE6.js";
import "./chunk-LGMX4E7L.js";
import "./chunk-U34ZXOJT.js";
import "./chunk-OKRW5W44.js";
import "./chunk-Q6RZBEZ6.js";
import "./chunk-PC66NY33.js";
import "./chunk-YY2VB3AE.js";
import "./chunk-VEYMN5N3.js";
import "./chunk-H6NTWZSO.js";
import "./chunk-BMT3OVAP.js";
import {
  b
} from "./chunk-W5ALAOW2.js";
import "./chunk-FHDHOWK5.js";
import "./chunk-Y546C2O5.js";
import "./chunk-IYKBAIQE.js";
import "./chunk-BDRVHR2K.js";
import "./chunk-DVIGFJWY.js";
import "./chunk-LQBHIBXV.js";
import {
  s
} from "./chunk-42DUJ2CX.js";
import "./chunk-B35SNV2V.js";
import "./chunk-Z2F5OKVA.js";
import "./chunk-UQA6M3KF.js";
import "./chunk-GLF3KRAL.js";
import "./chunk-ZLQTPFTL.js";
import "./chunk-WIVZ7SMV.js";
import "./chunk-O76UVYOO.js";
import "./chunk-QCMUK3QA.js";
import "./chunk-HZSGATFT.js";
import "./chunk-KNMQQRV7.js";
import "./chunk-N5GQOIDP.js";
import "./chunk-NFB6O77E.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-ERD6I7QP.js";
import "./chunk-EZL4LTMD.js";
import "./chunk-F3BQGS35.js";
import "./chunk-Z3NX5DTX.js";
import "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import "./chunk-LMO6NZJA.js";
import "./chunk-A5QTLE4Y.js";
import "./chunk-SCHTG6ZQ.js";
import "./chunk-YUUTEPX2.js";
import "./chunk-G7YFDDME.js";
import "./chunk-PCKG3UTS.js";
import "./chunk-3VMVD66K.js";
import {
  f
} from "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-I2X6UR6L.js";
import "./chunk-HV2SFSJW.js";
import "./chunk-SBARCIDP.js";
import "./chunk-2SYXH2R7.js";
import "./chunk-7JNXJYRU.js";
import "./chunk-3KPZ3BQR.js";
import "./chunk-5JYVZQZR.js";
import "./chunk-RKVEKQ5O.js";
import "./chunk-P7J4JFEH.js";
import "./chunk-G7FOE26O.js";
import "./chunk-USOPZ2Q6.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-TCRKKQAL.js";
import "./chunk-77YSHEUQ.js";
import "./chunk-JW7VBMHD.js";
import "./chunk-GLLRUDMY.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-AKLOTDO2.js";
import "./chunk-6AQIVLDN.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-VTH4DAHQ.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-SLQA5YBV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-2ICUS4HL.js";
import {
  o as o4
} from "./chunk-ZXJ6I4RF.js";
import {
  n as n4
} from "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import {
  o as o3
} from "./chunk-JZBR4X6W.js";
import {
  l,
  n as n3
} from "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-PWPXYWXV.js";
import "./chunk-545NO6M2.js";
import "./chunk-5LSHHVQ5.js";
import {
  i,
  o as o2
} from "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  P,
  d
} from "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import {
  o
} from "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a,
  n as n2
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import {
  u
} from "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n
} from "./chunk-7RBRCL6S.js";
import {
  A2 as A,
  x
} from "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/views/3d/layers/I3SPointsWorkerHandle.js
var r = class extends h {
  constructor(e4) {
    super("SceneLayerWorker", "dracoDecompressPointCloudData", { dracoDecompressPointCloudData: (e5) => [e5.geometryBuffer] }, e4, { hasInitialize: true });
  }
};

// node_modules/@arcgis/core/views/3d/layers/i3s/I3SGraphicsMap.js
var s2 = class extends o {
  constructor(e4, t6) {
    super(), this._updateAndCompare = e4, this._notifyUpdated = t6, this._nodes = /* @__PURE__ */ new Map(), this._graphics = /* @__PURE__ */ new Map(), this._duplicates = /* @__PURE__ */ new Map();
  }
  clear() {
    if (this._graphics.size > 0) {
      const e4 = this.toArray();
      this._graphics.clear(), this.emit("change", { added: [], removed: e4 });
    }
    this._nodes.clear();
  }
  get length() {
    return this._graphics.size;
  }
  get(e4) {
    return this._graphics.get(e4);
  }
  getNode(e4) {
    return this._nodes.get(e4);
  }
  hasNode(e4) {
    return this._nodes.has(e4);
  }
  nodes() {
    return this._nodes.values();
  }
  addNode(e4, t6) {
    this._nodes.set(e4, t6);
    const s3 = t6.graphics;
    if (0 === s3.length)
      return;
    const n7 = /* @__PURE__ */ new Set();
    for (let i5 = 0; i5 < s3.length; i5++) {
      const t7 = s3[i5], o7 = t7.objectId, r2 = this._graphics.get(o7);
      if (r2) {
        n7.add(o7), t7 !== r2 && (s3[i5] = r2);
        const d3 = this._duplicates.get(o7);
        d3 ? d3.push(e4) : this._duplicates.set(o7, [r2.nodeIndex, e4]);
      } else
        t7.nodeIndex = e4, this._graphics.set(o7, t7);
    }
    n7.size && this._updateForeignGraphics(t6);
    const o6 = n7.size > 0 ? s3.filter((e5) => !n7.has(e5.objectId)) : s3;
    o6.length > 0 && this.emit("change", { added: o6, removed: [] });
  }
  removeNode(e4) {
    const t6 = this._nodes.get(e4);
    if (!t6)
      return void console.error("Removing unknown node");
    this._nodes.delete(e4);
    const s3 = /* @__PURE__ */ new Set(), n7 = [];
    for (const o6 of t6.graphics) {
      const t7 = o6.objectId, i5 = this._graphics.get(t7);
      if (!i5)
        continue;
      const r2 = this._duplicates.get(t7);
      if (r2) {
        const n8 = r2.indexOf(e4);
        if (-1 === n8) {
          console.error("error: removing graphic from node that should not reference it.");
          continue;
        }
        if (r2.splice(n8, 1), i5.nodeIndex === e4) {
          let e5 = this.getNode(r2[0]);
          for (let t8 = 1; t8 < r2.length; t8++) {
            const s4 = this.getNode(r2[t8]);
            (null == e5 || null != s4 && s4.node.level > e5.node.level) && (e5 = s4);
          }
          null != e5 && s3.add(e5);
        }
        1 === r2.length && this._duplicates.delete(t7);
      } else
        this._graphics.delete(t7), n7.push(o6);
    }
    n7.length > 0 && this.emit("change", { added: [], removed: n7 }), s3.forEach((e5) => this._updateForeignGraphics(e5));
  }
  _updateForeignGraphics(e4) {
    const t6 = [], s3 = e4.node.index, n7 = e4.node.level;
    let o6 = 0;
    for (; o6 < e4.graphics.length; ) {
      const i5 = e4.graphics[o6].nodeIndex;
      if (i5 === s3) {
        o6++;
        continue;
      }
      let r2 = 1;
      for (; o6 + r2 < e4.graphics.length && e4.graphics[o6 + r2].nodeIndex === i5; )
        r2++;
      const d3 = this.getNode(i5);
      if (null != d3 && d3.node.level > n7)
        o6 += r2;
      else {
        for (let n8 = o6; n8 < o6 + r2; n8++) {
          const o7 = e4.graphics[n8];
          o7.nodeIndex = s3, this._updateAndCompare(o7, e4, n8) && t6.push(o7);
        }
        o6 += r2;
      }
    }
    this._notifyUpdated(t6);
  }
  toArray() {
    return Array.from(this._graphics.values());
  }
  find(e4) {
    let s3;
    return n2(this._graphics, (t6) => !!e4(t6) && (s3 = t6, true)), s3;
  }
  forEach(e4) {
    this._graphics.forEach((t6) => e4(t6));
  }
  forEachNode(e4) {
    this._nodes.forEach((t6, s3) => e4(t6, s3));
  }
  get nodeCount() {
    return this._nodes.size;
  }
  _checkInvariants() {
    const e4 = /* @__PURE__ */ new Map();
    this._nodes.forEach((t7, s3) => {
      s3 !== t7.node.index && console.error("Mismatched node index"), t7.graphics.forEach((t8) => {
        e4.set(t8.objectId, 1 + (e4.get(t8.objectId) ?? 0));
        const n7 = this._duplicates.get(t8.objectId);
        n7 && !n7.includes(s3) && console.error("Node not listed in duplicate list"), n7 || t8.nodeIndex === s3 || console.error("Unique graphic does not reference owning node index");
      });
    }), this._graphics.size !== e4.size && console.error("Mismatch between actual and expected number of graphics");
    let t6 = 0;
    e4.forEach((e5, s3) => {
      t6 += e5 > 1 ? 1 : 0;
      const n7 = this._graphics.get(s3);
      if (!n7)
        return void console.error("Missing graphic entry");
      const o6 = this._nodes.get(n7.nodeIndex);
      if (!o6)
        return void console.error("Graphic references unkown node");
      const i5 = this._duplicates.get(s3);
      i5 ? (i5.length !== e5 && console.error("Wrong number of entries in duplicate list"), i5.forEach((e6) => {
        const t7 = this._nodes.get(e6);
        t7 ? t7.node.level > o6.node.level && console.error("Duplicated graphic does not reference highest level node") : console.error("Unknown node in duplicate list");
      })) : e5 > 1 && console.error("Missing duplicates entry");
    }), this._duplicates.size !== t6 && console.error("Mismatch between expected and actual number of duplicate entries");
  }
};

// node_modules/@arcgis/core/views/3d/layers/SceneLayerGraphicsView3D.js
var re = i4();
var ie = class {
  constructor(e4, t6, r2, i5) {
    this.graphics = e4, this.featureIds = t6, this.attributeInfo = r2, this.node = i5;
  }
};
var se = class extends u3(t5(i2(n6(w)))) {
  constructor() {
    super(...arguments), this.type = "scene-layer-graphics-3d", this._queryEngine = null, this._memCache = null, this._interactiveEditingSessions = /* @__PURE__ */ new Map(), this._pendingEditsQueue = Promise.resolve(), this.loadedGraphics = new s2((e4, t6, r2) => le(e4, t6, r2), (e4) => this.processor.graphicsCore.recreateGraphics(e4)), this.holeFilling = "always", this.progressiveLoadFactor = 1, this.supportsHeightUnitConversion = true, this._coordinatesOutsideExtentErrors = 0, this._maxCoordinatesOutsideExtentErrors = 20;
  }
  tryRecycleWith(e4, t6) {
    return e4.url === this.layer.url && this._i3sOverrides.isEmpty ? e4.load(t6).then(() => {
      var _a;
      Y(this.layer, e4, this._i3sOverrides), this.layer = e4, this._i3sOverrides.destroy();
      const t7 = (_a = this.view.resourceController) == null ? void 0 : _a.memoryController;
      this._i3sOverrides = new G({ view: this.view, layer: e4, memoryController: t7 }), u(this._queryEngine), this._setupQueryEngine(), this.processor.resetObjectStates();
    }) : null;
  }
  initialize() {
    var _a, _b;
    this.addResolvingPromise(this.layer.indexInfo);
    const e4 = (_a = this.view.resourceController) == null ? void 0 : _a.memoryController;
    this._i3sOverrides = new G({ view: this.view, layer: this.layer, memoryController: e4 }), te(this.layer, this.view.spatialReference, this.view.viewingMode), this._fieldsHelper = new a2({ layerView: this }), this._updatingHandles.add(() => this.layer.rangeInfos, (e5) => this._rangeInfosChanged(e5), P), this._updatingHandles.add(() => this.layer.renderer, (e5, t6) => this._rendererChange(e5, t6)), this._updatingHandles.add(() => [this.parsedDefinitionExpression, this._excludeObjectIdsSorted], () => this._filterChange()), this.addHandles(d(() => t2.I3S_TREE_SHOW_TILES, (e5) => {
      if (e5 && !this._treeDebugger) {
        const e6 = this._controller.crsIndex;
        import("./I3STreeDebugger-2PZ4O6YN.js").then(({ I3STreeDebugger: t6 }) => {
          !this._treeDebugger && t2.I3S_TREE_SHOW_TILES && (this._treeDebugger = new t6({ lv: this, view: this.view, nodeSR: e6 }));
        });
      } else
        e5 || !this._treeDebugger || t2.I3S_TREE_SHOW_TILES || (this._treeDebugger.destroy(), this._treeDebugger = null);
    }, P)), this._set("processor", new P2({ owner: this, preferredUpdatePolicy: C.ASYNC, scaleVisibilityEnabled: true, filterVisibilityEnabled: true, timeExtentEnabled: false, frustumVisibilityEnabled: false, elevationAlignmentEnabled: true, elevationFeatureExpressionEnabled: false, setUidToIdOnAdd: false, dataExtent: this.layer.fullExtent, updateClippingExtent: (e5) => this._updateClippingExtent(e5) })), (_b = this.processor.elevationAlignment) == null ? void 0 : _b.events.on("invalidate-elevation", ({ extent: e5, spatialReference: t6 }) => this._controller.updateElevationChanged(e5, t6)), this.supportsHeightUnitConversion && (this._verticalScale = o4("point", this.layer.spatialReference, this.view.spatialReference)), this.addResolvingPromise(this.processor.initializePromise), this._memCache = this.view.resourceController.memoryController.newCache(`psl-${this.uid}`), this._controller = new Y2({ layerView: this, scaleVisibilityEnabled: false }), N(this.layer.geometryDefinitions) && (this._worker = new r((e5) => this.view.resourceController.immediate.schedule(e5))), this.addHandles(this.layer.on("apply-edits", (e5) => this._updatingHandles.addPromise(e5.result))), this.addHandles(this.layer.on("edits", (e5) => {
      const t6 = this._pendingEditsQueue.then(() => this._handleEdits(e5)).then();
      this._pendingEditsQueue = t6, this._updatingHandles.addPromise(t6);
    })), this.when(() => {
      this._setupQueryEngine(), this._updatingHandles.add(() => this.maximumNumberOfFeatures, (e5) => this._controller.featureTarget = e5, P), this._updatingHandles.add(() => this.suspended, (e5) => {
        e5 && this._removeAllNodeData();
      });
    });
  }
  destroy() {
    this._treeDebugger = u(this._treeDebugger), this._i3sOverrides = u(this._i3sOverrides), this._set("processor", u(this.processor)), this._controller = u(this._controller), this._queryEngine = u(this._queryEngine), this._worker = u(this._worker), this._memCache = u(this._memCache), this.loadedGraphics.clear(), this._fieldsHelper = u(this._fieldsHelper);
  }
  get i3slayer() {
    return this.layer;
  }
  get updatingProgressValue() {
    var _a;
    return ((_a = this._controller) == null ? void 0 : _a.updatingProgress) ?? 1;
  }
  get requiredFields() {
    var _a;
    return ((_a = this._fieldsHelper) == null ? void 0 : _a.requiredFields) ?? [];
  }
  get maximumNumberOfFeatures() {
    var _a, _b;
    const e4 = (_b = (_a = this.processor) == null ? void 0 : _a.graphicsCore) == null ? void 0 : _b.displayFeatureLimit;
    return (e4 == null ? void 0 : e4.maximumNumberOfFeatures) ?? 0;
  }
  set maximumNumberOfFeatures(e4) {
    null != e4 ? (this._override("maximumNumberOfFeatures", e4), this._controller.fixedFeatureTarget = true) : (this._clearOverride("maximumNumberOfFeatures"), this._controller.fixedFeatureTarget = false);
  }
  get maximumNumberOfFeaturesExceeded() {
    var _a;
    return !this.suspended && (!!((_a = this._controller) == null ? void 0 : _a.useMaximumNumberOfFeatures) && !this._controller.leavesReached);
  }
  get _excludeObjectIdsSorted() {
    const e4 = this.layer.excludeObjectIds;
    return e4.length ? e4.toArray().sort((e5, t6) => e5 - t6) : null;
  }
  get lodFactor() {
    return "Labels" === this.layer.semantic ? 1 : this.view.qualitySettings.sceneService.point.lodFactor;
  }
  get hasM() {
    return false;
  }
  get hasZ() {
    return true;
  }
  get contentVisible() {
    var _a;
    return !this.suspended && !!((_a = this._controller) == null ? void 0 : _a.rootNodeVisible);
  }
  get legendEnabled() {
    var _a;
    return this.contentVisible && true === ((_a = this.i3slayer) == null ? void 0 : _a.legendEnabled);
  }
  async whenGraphicAttributes(e4, t6) {
    return A2(this.layer, e4, this._getObjectIdField(), t6, () => [...this.loadedGraphics.nodes()]);
  }
  getHit(e4) {
    var _a;
    if (!this.loadedGraphics)
      return null;
    const t6 = c(this.loadedGraphics.find((t7) => t7.uid === e4), this.layer), r2 = this._getObjectIdField();
    return ((_a = t6 == null ? void 0 : t6.attributes) == null ? void 0 : _a[r2]) ? (t6.layer = this.layer, t6.sourceLayer = this.layer, { type: "graphic", graphic: t6, layer: t6.layer }) : null;
  }
  whenGraphicBounds(e4, t6) {
    return this.processor.whenGraphicBounds(e4, t6);
  }
  computeAttachmentOrigin(e4, t6) {
    return this.processor.computeAttachmentOrigin(e4, t6);
  }
  isUpdating() {
    var _a, _b, _c;
    return !!(((_a = this._controller) == null ? void 0 : _a.updating) || ((_b = this.processor) == null ? void 0 : _b.updating) || ((_c = this._fieldsHelper) == null ? void 0 : _c.updating) || this.layerFilterUpdating);
  }
  highlight(e4) {
    return this.processor.highlight(e4, this.layer.objectIdField);
  }
  get updatePolicy() {
    return this.processor.graphicsCore.effectiveUpdatePolicy;
  }
  createInteractiveEditSession(e4) {
    return i3(this._attributeEditingContext, e4);
  }
  async _decompressBinaryPointData(e4, t6) {
    const r2 = { geometryBuffer: e4.geometryBuffer };
    null == this._worker && (this._worker = new r((e5) => this.view.resourceController.immediate.schedule(e5)));
    const i5 = await this._worker.invoke(r2, t6);
    if (null == i5)
      throw new Error("Failed to decompress Draco point data");
    return { positionData: i5.positions, featureIds: i5.featureIds };
  }
  async addNode(e4, t6, r2) {
    var _a;
    if (!ne(t6) && !ae(t6))
      throw new Error();
    if (this.loadedGraphics.hasNode(e4.index))
      return void n.getLogger(this).error("I3S node " + e4.id + " already added");
    const s3 = null != this.layer.fullExtent ? ue(this.layer.fullExtent.clone(), 0.5) : null, { featureIds: o6, pointPositions: a3 } = ne(t6) ? await this._extractBinaryPointPositions(e4, t6, r2) : this._extractLegacyPointPositions(t6), n7 = new Array();
    this._validatePositions(e4, o6, a3, s3, n7);
    const l3 = this._controller.crsVertex, d3 = this.view.spatialReference;
    n4(a3, l3, 0, a3, d3, 0, o6.length);
    const u5 = ne(t6) ? e4.level : 0, h2 = this._createGraphics(o6, a3, e4.index, u5), p = new ie(h2, o6, t6.attributeDataInfo, e4);
    if (await this._i3sOverrides.applyAttributeOverrides(p.featureIds, t6.attributeDataInfo, r2), e4.numFeatures = p.graphics.length, this._updateNodeMemory(e4), de(p), n7.length > 0 && (this._computeObb(e4, n7, l3), this._controller.updateVisibility(e4.index)), !this._controller.isGeometryVisible(e4))
      return void this._cacheNodeData(p);
    if (null != this._verticalScale)
      for (const i5 of p.graphics)
        this._verticalScale(i5.geometry);
    const g = this.view._stage.renderView.objectAndLayerIdRenderHelper;
    if (null != g) {
      const e5 = S(this.view.map, this.layer.uid);
      for (let t7 = 0; t7 < p.featureIds.length; t7++) {
        const r3 = p.featureIds[t7];
        g.setUidToObjectAndLayerId(r3, p.graphics[t7].uid, this.layer.id, this.layer.uid, this.layer.popupEnabled && !e5 && u2(this.layer, (_a = this.view.popup) == null ? void 0 : _a.defaultPopupTemplateEnabled), p.node.resources.attributes, t7);
      }
    }
    this.loadedGraphics.addNode(e4.index, p), this._controller.updateLoadStatus(e4.index, true), this._filterNode(p), this._treeDebugger && this._treeDebugger.update();
  }
  _computeObb(e4, t6, r2) {
    const i5 = this._controller.crsIndex, s3 = i5.isGeographic ? this.view.renderSpatialReference : i5;
    n4(t6, r2, 0, t6, s3, 0, t6.length / 3), e4.serviceObbInIndexSR = J(new s(t6, 3)), i5.isGeographic && (n5(e4.serviceObbInIndexSR.center, s3, pe, i5), e4.serviceObbInIndexSR.center = pe);
  }
  isNodeLoaded(e4) {
    return this.loadedGraphics.hasNode(e4);
  }
  isNodeReloading() {
    return false;
  }
  updateNodeState() {
  }
  async _extractBinaryPointPositions(e4, t6, r2) {
    const i5 = await this._decompressBinaryPointData(t6, r2), s3 = i5.positionData, o6 = 3, a3 = s3.length / o6, n7 = t(3 * a3), l3 = null != e4.serviceObbInIndexSR ? e4.serviceObbInIndexSR.center : l, d3 = Math.abs(l3[2]) * 2 ** -20;
    for (let u5 = 0; u5 < a3; u5++) {
      const e5 = u5 * o6;
      n7[e5] = s3[e5] + l3[0], n7[e5 + 1] = s3[e5 + 1] + l3[1], n7[e5 + 2] = s3[e5 + 2] + l3[2], Math.abs(n7[e5 + 2]) < d3 && (n7[e5 + 2] = 0);
    }
    return { featureIds: i5.featureIds ? e3(i5.featureIds) : [], pointPositions: n7 };
  }
  _extractLegacyPointPositions(e4) {
    var _a, _b;
    const t6 = e4.pointData.length, r2 = t(3 * t6), i5 = new Array();
    for (let s3 = 0; s3 < t6; s3++) {
      const t7 = e4.pointData[s3], o6 = t7.featureDataPosition, a3 = o6.length, n7 = ((_a = t7.geometries) == null ? void 0 : _a[0]) ?? he[a3], l3 = t7.featureIds[0];
      if ("Embedded" !== n7.type || "points" !== n7.params.type || a3 < 2 || a3 > 3)
        continue;
      const d3 = ((_b = n7.params.vertexAttributes) == null ? void 0 : _b.position) ?? [0, 0, 0], u5 = 3 * i5.length;
      r2[u5] = o6[0] + d3[0], r2[u5 + 1] = o6[1] + d3[1], r2[u5 + 2] = 3 === a3 ? o6[2] + d3[2] : NaN, i5.push(l3);
    }
    return { featureIds: i5, pointPositions: r2 };
  }
  _validatePositions(e4, t6, r2, s3, o6) {
    if (null == s3 && e4.serviceObbInIndexSR)
      return;
    const a3 = t6.length, n7 = 3;
    for (let l3 = 0; l3 < a3; l3++) {
      const t7 = l3 * n7;
      o3(pe, r2[t7], r2[t7 + 1], r2[t7 + 2]);
      const a4 = !Number.isNaN(r2[2]);
      null == s3 || (a4 ? o2(s3, pe) : i(s3, pe)) || (this._coordinatesOutsideExtentErrors < this._maxCoordinatesOutsideExtentErrors && n.getLogger(this).error("Service Error: Coordinates outside of layer extent"), this._coordinatesOutsideExtentErrors + 1 === this._maxCoordinatesOutsideExtentErrors && n.getLogger(this).error("Maximum number of errors reached. Further errors are ignored."), this._coordinatesOutsideExtentErrors++), e4.serviceObbInIndexSR || o6.push(pe[0], pe[1], pe[2]);
    }
  }
  _createGraphics(e4, r2, i5, s3) {
    const o6 = e4.length, a3 = 3, n7 = this._getObjectIdField(), l3 = this.processor.graphicsCore, d3 = new Array(), u5 = this.view.spatialReference;
    for (let h2 = 0; h2 < o6; h2++) {
      const o7 = e4[h2], p = {};
      null != o7 && (p[n7] = o7);
      const c2 = o7 ?? f.generateUID(), g = h2 * a3, m = isNaN(r2[g + 2]) ? void 0 : r2[g + 2], y2 = e2(r2[g], r2[g + 1], m, u5), f3 = this.loadedGraphics.get(c2);
      if (null != f3)
        (null == f3.level || f3.level < s3) && (ce.property = "geometry", ce.graphic = f3, ce.oldValue = f3.geometry, ce.newValue = y2, f3.geometry = y2, f3.level = s3, l3.graphicUpdateHandler(ce)), d3.push(f3);
      else {
        const e5 = f.generateUID();
        d3.push({ objectId: c2, uid: e5, geometry: y2, attributes: p, visible: true, nodeIndex: i5, level: s3 });
      }
    }
    return d3;
  }
  _updateNodeMemory(e4) {
    e4.memory = 4096 + (null != e4.numFeatures ? e4.numFeatures * this.processor.graphicsCore.usedMemoryPerGraphic : 0);
  }
  _cacheNodeData(e4) {
    const t6 = e4.graphics.reduce((e5, t7) => Z(t7) + e5, A(e4.featureIds) + 1024);
    this._memCache.put(this._getMemCacheKey(e4.node), e4, t6);
  }
  _getMemCacheKey(e4) {
    return `${e4.index}`;
  }
  _removeAllNodeData() {
    this.loadedGraphics.forEachNode((e4, t6) => {
      if (e4) {
        const t7 = e4.node;
        this._updateNodeMemory(t7), this._cacheNodeData(e4);
      }
      this._controller.updateLoadStatus(t6, false);
    }), this._treeDebugger && this._treeDebugger.update(), this.loadedGraphics.clear();
  }
  removeNode(e4) {
    const t6 = this._removeNodeStageData(e4);
    t6 && (this._updateNodeMemory(t6.node), this._cacheNodeData(t6));
  }
  _removeNodeStageData(e4) {
    const t6 = this.loadedGraphics.getNode(e4);
    return null == t6 ? null : (this._controller.updateLoadStatus(e4, false), this.loadedGraphics.removeNode(e4), this._treeDebugger && this._treeDebugger.update(), t6);
  }
  async loadCachedNodeData(e4) {
    var _a;
    return (_a = this._memCache) == null ? void 0 : _a.pop(this._getMemCacheKey(e4));
  }
  async addCachedNodeData(e4, t6, r2, s3) {
    this.loadedGraphics.hasNode(e4.index) ? n.getLogger(this).error("I3S node " + e4.id + " already added") : (await this._i3sOverrides.applyAttributeOverrides(t6.featureIds, r2, s3), this.loadedGraphics.addNode(e4.index, t6), this._controller.updateLoadStatus(e4.index, true), this._updateNodeMemory(e4), t6.attributeInfo = r2, this._attributeValuesChanged(t6), this._filterNode(t6), this._treeDebugger && this._treeDebugger.update());
  }
  getLoadedNodeIds() {
    const e4 = [];
    return this.loadedGraphics.forEachNode((t6) => e4.push(t6.node.id)), e4.sort();
  }
  getVisibleNodes() {
    const e4 = new Array();
    return this.loadedGraphics.forEachNode((t6) => e4.push(t6.node)), e4;
  }
  getLoadedNodeIndices(e4) {
    this.loadedGraphics.forEachNode((t6, r2) => e4.push(r2));
  }
  getLoadedAttributes(e4) {
    const t6 = this.loadedGraphics.getNode(e4);
    if (null != (t6 == null ? void 0 : t6.attributeInfo))
      return t6.attributeInfo.loadedAttributes;
  }
  getAttributeData(e4) {
    const t6 = this.loadedGraphics.getNode(e4);
    if (null != (t6 == null ? void 0 : t6.attributeInfo))
      return t6.attributeInfo.attributeData;
  }
  _setAttributeData(e4, t6) {
    const r2 = this.loadedGraphics.getNode(e4);
    null != (r2 == null ? void 0 : r2.attributeInfo) && (r2.attributeInfo.attributeData = t6, this._attributeValuesChanged(r2));
  }
  async updateAttributes(e4, t6, r2) {
    const i5 = this.loadedGraphics.getNode(e4);
    null != i5 && (await this._i3sOverrides.applyAttributeOverrides(i5.featureIds, t6, r2), i5.attributeInfo = t6, this._attributeValuesChanged(i5));
  }
  _attributeValuesChanged(e4) {
    if (de(e4), this._filterNode(e4), this.processor.graphicsCore.labelsEnabled) {
      const t6 = e4.graphics.map((e5) => e5.uid);
      this.processor.graphicsCore.updateLabelingInfo(t6);
    }
  }
  _updateClippingExtent(e4) {
    return this._controller && this._controller.updateClippingArea(e4), false;
  }
  _getObjectIdField() {
    return this.layer.objectIdField || o5;
  }
  _getGlobalIdField() {
    var _a;
    return (_a = this.layer.associatedLayer) == null ? void 0 : _a.globalIdField;
  }
  async _rendererChange(e4, t6) {
    const { layer: { fieldsIndex: r2 } } = this, i5 = /* @__PURE__ */ new Set();
    let s3, o6;
    e4 ? (await e4.collectRequiredFields(i5, r2), s3 = Array.from(i5).sort()) : s3 = [], i5.clear(), t6 ? (await t6.collectRequiredFields(i5, r2), o6 = Array.from(i5).sort()) : o6 = [], s3.length === o6.length && s3.every((e5, t7) => s3[t7] === o6[t7]) || this._reloadAllNodes();
  }
  _rangeInfosChanged(e4) {
    null != e4 && e4.length > 0 && n.getLogger(this).warn("Unsupported property: rangeInfos are currently only serialized to and from web scenes but do not affect rendering.");
  }
  _filterChange() {
    this.loadedGraphics.forEachNode((e4) => this._filterNode(e4));
  }
  _reloadAllNodes() {
    this._removeAllNodeData(), this._controller && this._controller.restartNodeLoading();
  }
  _filterNode(e4) {
    const t6 = this.parsedDefinitionExpression, i5 = this._excludeObjectIdsSorted, s3 = this._getObjectIdField();
    for (const o6 of e4.graphics) {
      const e5 = o6.visible, a3 = !t6 || this._evaluateClause(t6, o6), n7 = null == i5 || x(i5, o6.attributes[s3]) < 0;
      o6.visible = a3 && n7, e5 !== o6.visible && (ce.graphic = o6, ce.property = "visible", ce.oldValue = e5, ce.newValue = o6.visible, this.processor.graphicsCore.graphicUpdateHandler(ce));
    }
  }
  createQuery() {
    const e4 = { outFields: ["*"], returnGeometry: true, outSpatialReference: this.view.spatialReference };
    return null != this.filter ? this.filter.createQuery(e4) : new b(e4);
  }
  queryFeatures(e4, t6) {
    return this._queryEngine.executeQuery(this._ensureQuery(e4), t6 == null ? void 0 : t6.signal);
  }
  queryObjectIds(e4, t6) {
    return this._queryEngine.executeQueryForIds(this._ensureQuery(e4), t6 == null ? void 0 : t6.signal);
  }
  queryFeatureCount(e4, t6) {
    return this._queryEngine.executeQueryForCount(this._ensureQuery(e4), t6 == null ? void 0 : t6.signal);
  }
  queryExtent(e4, t6) {
    return this._queryEngine.executeQueryForExtent(this._ensureQuery(e4), t6 == null ? void 0 : t6.signal);
  }
  _ensureQuery(e4) {
    return this._addDefinitionExpressionToQuery(null == e4 ? this.createQuery() : b.from(e4));
  }
  _setupQueryEngine() {
    const e4 = () => this.processor.featureStore;
    this._queryEngine = new l2({ context: { spatialReference: this.view.spatialReference, layer: this.layer, scheduler: this.view.resourceController.scheduler, get featureStore() {
      return e4();
    }, hasZ: this.hasZ, hasM: this.hasM }, priority: I.FEATURE_QUERY_ENGINE });
  }
  get usedMemory() {
    var _a, _b;
    return ((_b = (_a = this.processor) == null ? void 0 : _a.graphicsCore) == null ? void 0 : _b.usedMemory) ?? 0;
  }
  get unloadedMemory() {
    var _a, _b, _c;
    return 0.8 * ((((_a = this._controller) == null ? void 0 : _a.unloadedMemoryEstimate) ?? 0) + (((_c = (_b = this.processor) == null ? void 0 : _b.graphicsCore) == null ? void 0 : _c.unprocessedMemoryEstimate) ?? 0));
  }
  get ignoresMemoryFactor() {
    return this._controller && this._controller.fixedFeatureTarget;
  }
  async _handleEdits(e4) {
    const t6 = this._attributeEditingContext, r2 = await u4(t6, e4);
    f2(t6, r2);
  }
  get _attributeEditingContext() {
    const e4 = this._getObjectIdField(), t6 = this._getGlobalIdField();
    return { sessions: this._interactiveEditingSessions, fieldsIndex: this.layer.fieldsIndex, objectIdField: e4, globalIdField: t6, forEachNode: (e5) => this.loadedGraphics.forEachNode((t7) => e5(t7.node, t7.featureIds)), attributeStorageInfo: this.i3slayer.attributeStorageInfo ?? [], i3sOverrides: this._i3sOverrides, getAttributeData: (e5) => this.getAttributeData(e5), setAttributeData: (t7, r2, i5) => {
      this._setAttributeData(t7, r2);
      const s3 = this.loadedGraphics.getNode(t7);
      if (null != i5) {
        const t8 = this.loadedGraphics.get(i5.attributes[e4]);
        null != t8 && this.processor.graphicsCore.recreateGraphics([t8]);
      } else
        null != s3 && this.processor.graphicsCore.recreateGraphics(s3.graphics);
    }, clearMemCache: () => {
    } };
  }
  get performanceInfo() {
    return new t3(this.usedMemory, this.loadedGraphics.length, -1, this.maximumNumberOfFeatures, this.loadedGraphics.nodeCount, this.processor.graphicsCore.performanceInfo);
  }
  get test() {
    return { controller: this._controller, numNodes: this.loadedGraphics.nodeCount, loadedGraphics: this.loadedGraphics };
  }
};
e([y()], se.prototype, "processor", void 0), e([y({ type: d2 })], se.prototype, "filter", void 0), e([y()], se.prototype, "loadedGraphics", void 0), e([y()], se.prototype, "i3slayer", null), e([y()], se.prototype, "_controller", void 0), e([y()], se.prototype, "updating", void 0), e([y()], se.prototype, "suspended", void 0), e([y()], se.prototype, "holeFilling", void 0), e([y(t4)], se.prototype, "updatingProgress", void 0), e([y()], se.prototype, "updatingProgressValue", null), e([y(re.requiredFields)], se.prototype, "requiredFields", null), e([y(re.availableFields)], se.prototype, "availableFields", void 0), e([y()], se.prototype, "_fieldsHelper", void 0), e([y({ type: Number })], se.prototype, "maximumNumberOfFeatures", null), e([y({ readOnly: true })], se.prototype, "maximumNumberOfFeaturesExceeded", null), e([y()], se.prototype, "_excludeObjectIdsSorted", null), e([y({ readOnly: true })], se.prototype, "lodFactor", null), e([y({ readOnly: true })], se.prototype, "hasM", null), e([y({ readOnly: true })], se.prototype, "hasZ", null), e([y()], se.prototype, "contentVisible", null), e([y({ readOnly: true })], se.prototype, "legendEnabled", null), se = e([a("esri.views.3d.layers.SceneLayerGraphicsView3D")], se);
var oe = se;
function ae(e4) {
  return "pointData" in e4;
}
function ne(e4) {
  return "geometryBuffer" in e4 && null !== e4.geometryBuffer;
}
function le(e4, t6, r2) {
  const i5 = t6.attributeInfo;
  if (null == (i5 == null ? void 0 : i5.loadedAttributes) || null == i5.attributeData)
    return false;
  let s3 = false;
  for (const { name: o6 } of i5.loadedAttributes)
    if (i5.attributeData[o6]) {
      const t7 = Q(i5.attributeData[o6], r2);
      t7 !== e4.attributes[o6] && (e4.attributes[o6] = t7, s3 = true);
    }
  return s3;
}
function de(e4) {
  const t6 = e4.attributeInfo, r2 = e4.node.index;
  if (null != (t6 == null ? void 0 : t6.loadedAttributes) && null != t6.attributeData)
    for (let i5 = 0; i5 < e4.graphics.length; i5++) {
      const s3 = e4.graphics[i5];
      if (s3.nodeIndex === r2) {
        s3.attributes || (s3.attributes = {});
        for (const { name: e5 } of t6.loadedAttributes)
          t6.attributeData[e5] && (s3.attributes[e5] = Q(t6.attributeData[e5], i5));
      }
    }
}
function ue(e4, t6) {
  return e4.xmin -= t6, e4.ymin -= t6, e4.xmax += t6, e4.ymax += t6, null != e4.zmin && null != e4.zmax && (e4.zmin -= t6, e4.zmax += t6), null != e4.mmin && null != e4.mmax && (e4.mmin -= t6, e4.mmax += t6), e4;
}
var he = { 2: { type: "Embedded", params: { type: "points", vertexAttributes: { position: [0, 0] } } }, 3: { type: "Embedded", params: { type: "points", vertexAttributes: { position: [0, 0, 0] } } } };
var pe = n3();
var ce = { graphic: null, property: null, oldValue: null, newValue: null };
export {
  oe as default
};
//# sourceMappingURL=SceneLayerGraphicsView3D-367PE7H7.js.map
