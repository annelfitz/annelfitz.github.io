import {
  j as j3,
  w as w4
} from "./chunk-UP44TGUG.js";
import {
  P as P4,
  r as r9
} from "./chunk-CRYY7ZCN.js";
import {
  e as e13
} from "./chunk-YBFQVZX5.js";
import {
  $ as $3,
  E as E5,
  F as F4,
  W as W3,
  d as d5,
  h as h9
} from "./chunk-XRMNBR5S.js";
import "./chunk-X5YTZ5V2.js";
import "./chunk-XTC23A5V.js";
import {
  i as i6,
  o as o8,
  p as p7
} from "./chunk-X6YRTSHB.js";
import {
  u as u10
} from "./chunk-RUJWNMKZ.js";
import {
  a as a5,
  c as c7,
  l as l11,
  n as n5,
  p as p6,
  r as r10
} from "./chunk-PHGMJ5KG.js";
import {
  r as r8,
  u as u9
} from "./chunk-EIFRMATR.js";
import "./chunk-AVQM6UNY.js";
import {
  l as l9
} from "./chunk-ZIKY3AX6.js";
import {
  L as L3,
  c2 as c6,
  l as l10
} from "./chunk-M4ETSXXR.js";
import "./chunk-VGQTAP4F.js";
import {
  Ei,
  H as H2,
  Hi,
  I,
  Ii,
  Si,
  Ui,
  _i,
  ci,
  g as g6,
  gi,
  li,
  v as v6
} from "./chunk-LBNOZOSP.js";
import "./chunk-B4G2B67L.js";
import "./chunk-OEXKWOWE.js";
import "./chunk-QKSE6KAV.js";
import "./chunk-MP3BMLR3.js";
import {
  i as i5
} from "./chunk-VQ7RPZCH.js";
import "./chunk-Y52LFEYF.js";
import {
  n as n4
} from "./chunk-2KONNOEN.js";
import {
  d as d4
} from "./chunk-2QQPANF6.js";
import {
  c as c4,
  m as m3,
  u as u8
} from "./chunk-BOU46AXG.js";
import {
  O as O2
} from "./chunk-53QTUAOU.js";
import {
  G as G3
} from "./chunk-UAITPI2I.js";
import "./chunk-CTJKH5VV.js";
import {
  f as f7
} from "./chunk-FKMPOIQR.js";
import "./chunk-FQUIQQYI.js";
import {
  e as e12
} from "./chunk-CTY3WTET.js";
import "./chunk-EZMIPVQL.js";
import "./chunk-7IFMSG3H.js";
import {
  l as l6
} from "./chunk-N3SF7L2P.js";
import {
  D as D2,
  N,
  O,
  T,
  U as U3,
  k as k2
} from "./chunk-RYDZOUU4.js";
import "./chunk-5SOMZZNP.js";
import "./chunk-7G5NQR7Q.js";
import {
  x as x5
} from "./chunk-UEYTNVS4.js";
import {
  q as q4
} from "./chunk-NIRB3OB6.js";
import {
  l as l7
} from "./chunk-CA3XJ2RX.js";
import {
  u as u7
} from "./chunk-JASPUPTW.js";
import {
  e as e9
} from "./chunk-HWBFFWYY.js";
import {
  R as R4,
  g as g4,
  y as y5
} from "./chunk-B473F3N3.js";
import {
  x as x4
} from "./chunk-E22EEEDE.js";
import {
  c as c5
} from "./chunk-KDHW2KXU.js";
import {
  e as e10,
  ee
} from "./chunk-6FMD7BOV.js";
import {
  F as F3,
  f as f5,
  h as h8,
  t as t6,
  w as w2
} from "./chunk-TKMRXVLK.js";
import {
  D,
  M as M2,
  S as S3,
  U as U2,
  f as f6,
  g as g5,
  j as j2,
  l as l8,
  m as m5,
  p as p5,
  v as v5,
  w as w3,
  z as z5
} from "./chunk-6SB3EFZU.js";
import {
  m as m4
} from "./chunk-WOKVMRAD.js";
import "./chunk-FXZUN4XG.js";
import "./chunk-3W2U3CD4.js";
import "./chunk-3ENNELTC.js";
import {
  E as E3,
  E2 as E4,
  Y,
  Z as Z2,
  e as e11
} from "./chunk-LEFES6LS.js";
import "./chunk-AEAYH74I.js";
import "./chunk-ZKV5BWYX.js";
import "./chunk-E6JAHJ2A.js";
import "./chunk-SVNPPUZN.js";
import "./chunk-UANQJYHL.js";
import "./chunk-TO6UIATU.js";
import "./chunk-IB7OUIEK.js";
import "./chunk-WCBCYPOZ.js";
import "./chunk-3FTSPLRV.js";
import "./chunk-OMRW2J7M.js";
import "./chunk-UXQH3C5A.js";
import "./chunk-ID25T22U.js";
import {
  a as a4
} from "./chunk-5SYJEI74.js";
import "./chunk-OOISODT4.js";
import "./chunk-HBBLDSW6.js";
import "./chunk-YYI7TRI3.js";
import "./chunk-RQW2N53A.js";
import "./chunk-LHVWC4RW.js";
import "./chunk-GN2OLKIL.js";
import "./chunk-LMCIQOBX.js";
import {
  f as f4,
  o as o7
} from "./chunk-4VVENLLF.js";
import "./chunk-VUHMQQ6M.js";
import "./chunk-6GQQIJM7.js";
import {
  _ as _3
} from "./chunk-PAH4PVZY.js";
import "./chunk-5T7MASZO.js";
import "./chunk-5WKN6K5Z.js";
import "./chunk-WCBHO6BH.js";
import "./chunk-V7NVRGBC.js";
import "./chunk-KCZGCTYM.js";
import "./chunk-3YZBQBZ5.js";
import "./chunk-RFBA77K3.js";
import "./chunk-46T3D2EU.js";
import {
  J as J3,
  W as W2,
  Z
} from "./chunk-RYF27IO3.js";
import "./chunk-2GT6KC2O.js";
import "./chunk-5MKTGTC4.js";
import "./chunk-7UDCRD5C.js";
import "./chunk-B3GKRGWX.js";
import "./chunk-FN7LLNVA.js";
import "./chunk-BR3PF5YD.js";
import "./chunk-KVZT4PEH.js";
import "./chunk-VIRGWB3Z.js";
import "./chunk-QCUK7T7Y.js";
import "./chunk-2NDIVJST.js";
import {
  at,
  ft,
  it,
  mt,
  pt,
  st,
  wt
} from "./chunk-SPYHZ6ZW.js";
import "./chunk-637XZX4A.js";
import "./chunk-PMFQ2A2V.js";
import "./chunk-5IITWVGY.js";
import "./chunk-HHAESKQ6.js";
import "./chunk-5INQRMFY.js";
import "./chunk-XP3ABGGF.js";
import "./chunk-TACIE3AK.js";
import "./chunk-6LT23NJG.js";
import "./chunk-4FXZDEEP.js";
import "./chunk-KYKKN5I4.js";
import "./chunk-4MJOJUFR.js";
import {
  t as t4
} from "./chunk-DRUZYZGP.js";
import {
  t as t5,
  u as u6
} from "./chunk-L3GUCBXG.js";
import "./chunk-K3DEHPDR.js";
import "./chunk-I6RS7YIS.js";
import "./chunk-YGP7UFWC.js";
import "./chunk-XTY645DH.js";
import "./chunk-BHOYA5LV.js";
import "./chunk-7KPPNEIJ.js";
import "./chunk-G4YIJOSP.js";
import {
  a as a3,
  h as h7,
  i as i4,
  o as o6,
  y as y4
} from "./chunk-PMQ5HDZI.js";
import "./chunk-NAWP2ZCR.js";
import "./chunk-M5DWZKDJ.js";
import "./chunk-VXM3PR7E.js";
import "./chunk-VE57JPH4.js";
import "./chunk-KWLN46JY.js";
import "./chunk-7KNPDPFB.js";
import "./chunk-M6P775BS.js";
import "./chunk-J5F4VILS.js";
import "./chunk-KSBIR2KG.js";
import "./chunk-XVQGALI7.js";
import "./chunk-XFQIXBHG.js";
import "./chunk-MVSN2HAN.js";
import "./chunk-7A5N7G2Z.js";
import "./chunk-J54I3TB7.js";
import "./chunk-OE52KVBM.js";
import "./chunk-L577YNYZ.js";
import "./chunk-GL5TSVQL.js";
import "./chunk-FD7NY4JS.js";
import "./chunk-TYYN3C37.js";
import "./chunk-OBABKQ6S.js";
import "./chunk-4GGEQMYI.js";
import "./chunk-A47N2JLN.js";
import "./chunk-ZPC74XHC.js";
import "./chunk-IVGJRGD2.js";
import "./chunk-JA2AO4PC.js";
import "./chunk-MTLWPXQD.js";
import "./chunk-ZEMG7GKC.js";
import "./chunk-ECIXBYOQ.js";
import "./chunk-5MQ4HAUX.js";
import "./chunk-XIWETS2Q.js";
import "./chunk-FOCTPJDR.js";
import "./chunk-2DATALUO.js";
import "./chunk-QFKFOAJ6.js";
import "./chunk-LOPMLCHC.js";
import "./chunk-JIR2YP6A.js";
import "./chunk-LANUNBDP.js";
import "./chunk-JBF6CULO.js";
import "./chunk-DRCNNCTI.js";
import "./chunk-MKOOEINB.js";
import "./chunk-JKOHBDRD.js";
import "./chunk-MDSRD3WV.js";
import {
  h as h6
} from "./chunk-3DFMDDMO.js";
import "./chunk-4BCSYJOQ.js";
import "./chunk-GMUCR2DJ.js";
import "./chunk-HBRJJENW.js";
import "./chunk-VHY5K2VE.js";
import "./chunk-6ENXMQPD.js";
import "./chunk-FV43HSGW.js";
import "./chunk-ZR7OV2EH.js";
import "./chunk-U76EZJUZ.js";
import "./chunk-MEEG7XMI.js";
import "./chunk-LJULTBAY.js";
import "./chunk-FD4DXBZA.js";
import "./chunk-LO5UMUY4.js";
import {
  y2 as y3
} from "./chunk-54XXLVAD.js";
import "./chunk-KO7QNSNZ.js";
import {
  s as s3
} from "./chunk-YKIGDW5O.js";
import "./chunk-7QHIE4SQ.js";
import "./chunk-6MGK5WBT.js";
import "./chunk-HSOVRETF.js";
import "./chunk-CPZW2LMK.js";
import "./chunk-QR7J3YDY.js";
import "./chunk-GO2OGJDG.js";
import "./chunk-UYMREM3D.js";
import "./chunk-4YGBWYMD.js";
import "./chunk-YK3UMVCY.js";
import "./chunk-JTUYA5FE.js";
import "./chunk-UNTQATE2.js";
import "./chunk-5YY6NZNY.js";
import "./chunk-YUWVLORR.js";
import "./chunk-7MYYCSEB.js";
import "./chunk-ESK2YRQM.js";
import "./chunk-QD3CP3I4.js";
import "./chunk-QIEXJLRX.js";
import "./chunk-UNTPHF5R.js";
import "./chunk-YJFPDMSR.js";
import "./chunk-FFG7BDAP.js";
import "./chunk-ECTYMEUP.js";
import {
  h as h5
} from "./chunk-I4SHZ6P5.js";
import "./chunk-QYDOVVH7.js";
import "./chunk-YSXT2SWC.js";
import "./chunk-YH3SFFF7.js";
import {
  r as r7
} from "./chunk-JBU54P54.js";
import "./chunk-FMS3CZY7.js";
import "./chunk-H7T5AB2S.js";
import "./chunk-WKVHVZW2.js";
import "./chunk-DH7BG2VH.js";
import "./chunk-KSZESDGM.js";
import "./chunk-CHJMCUAV.js";
import "./chunk-5P74D2TG.js";
import "./chunk-33LWZO2E.js";
import "./chunk-YT66FIGM.js";
import "./chunk-VIKID44H.js";
import "./chunk-3IDXRFXE.js";
import "./chunk-TLU6YG3S.js";
import "./chunk-RLZYC2LS.js";
import "./chunk-WEER6QME.js";
import {
  e as e8
} from "./chunk-TXLJQAAN.js";
import {
  y as y2,
  z as z4
} from "./chunk-YF5E2R37.js";
import "./chunk-R4SGP2EA.js";
import "./chunk-IRL6OOVK.js";
import {
  _ as _2,
  b as b2,
  l as l5,
  o as o5,
  u as u5,
  v as v4
} from "./chunk-3AIILHI5.js";
import {
  g as g3
} from "./chunk-QJRGTKPN.js";
import "./chunk-VIH3KDZO.js";
import "./chunk-LA365FE7.js";
import {
  $ as $2,
  g as g2,
  h as h4,
  m as m2,
  r as r6,
  u as u4
} from "./chunk-SA77Z3WI.js";
import "./chunk-6MBDB46F.js";
import {
  n as n2
} from "./chunk-D56W4LPT.js";
import {
  e as e7
} from "./chunk-BKOYOJBG.js";
import "./chunk-7JR6S3WL.js";
import "./chunk-CJNDQ2LH.js";
import "./chunk-B4E4X2TN.js";
import "./chunk-HS6YI5DU.js";
import "./chunk-CDBOQCLE.js";
import "./chunk-RSRUEM5U.js";
import "./chunk-HFJMEXIX.js";
import "./chunk-VYSGSKHB.js";
import "./chunk-DGJJJ2DD.js";
import "./chunk-UAFQMHYI.js";
import "./chunk-IDPLBNJX.js";
import "./chunk-ZHAZR5C3.js";
import "./chunk-P4MNTMCZ.js";
import "./chunk-FLBJ53KN.js";
import "./chunk-BSPKLAHD.js";
import "./chunk-VS6AHHIY.js";
import "./chunk-GPWQGIYV.js";
import {
  l as l4
} from "./chunk-WZJNHZ6H.js";
import "./chunk-XMYPMIYH.js";
import {
  p as p4,
  v as v3
} from "./chunk-FQLGRQKL.js";
import "./chunk-GKMVTGGM.js";
import {
  E,
  F,
  G as G2,
  L as L2,
  R as R3,
  q as q3
} from "./chunk-XGTCDM4C.js";
import "./chunk-RW5QMWE6.js";
import "./chunk-LGMX4E7L.js";
import "./chunk-VEYMN5N3.js";
import "./chunk-W5ALAOW2.js";
import "./chunk-FHDHOWK5.js";
import {
  c as c2
} from "./chunk-LQBHIBXV.js";
import "./chunk-42DUJ2CX.js";
import "./chunk-B35SNV2V.js";
import {
  E as E2,
  F as F2,
  J as J2,
  S as S2,
  c as c3,
  f as f3,
  j
} from "./chunk-Z2F5OKVA.js";
import "./chunk-UQA6M3KF.js";
import "./chunk-GLF3KRAL.js";
import {
  n as n3,
  r as r5
} from "./chunk-ZLQTPFTL.js";
import "./chunk-WIVZ7SMV.js";
import "./chunk-O76UVYOO.js";
import "./chunk-QCMUK3QA.js";
import "./chunk-HZSGATFT.js";
import "./chunk-KNMQQRV7.js";
import {
  e as e6,
  o as o4,
  t as t3
} from "./chunk-N5GQOIDP.js";
import "./chunk-NFB6O77E.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-ERD6I7QP.js";
import "./chunk-Z3NX5DTX.js";
import "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import "./chunk-SCHTG6ZQ.js";
import "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-CQFVWMFK.js";
import "./chunk-6PMFOUWZ.js";
import "./chunk-3KPZ3BQR.js";
import "./chunk-5JYVZQZR.js";
import "./chunk-UUG4W2PI.js";
import "./chunk-G7FOE26O.js";
import {
  h as h3
} from "./chunk-USOPZ2Q6.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-LSM34QAB.js";
import {
  R as R2,
  b,
  c,
  d as d3,
  f as f2,
  i as i3,
  l as l3,
  p as p3,
  q as q2,
  x as x3
} from "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import {
  P as P3,
  R,
  i
} from "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import {
  u as u3
} from "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import {
  i as i2,
  x as x2
} from "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-WMUEII2O.js";
import "./chunk-6QNF7OHN.js";
import "./chunk-6AQIVLDN.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import {
  m2 as m
} from "./chunk-HV6S3GY2.js";
import {
  a as a2
} from "./chunk-IGR2BTWR.js";
import {
  w
} from "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import {
  M,
  e as e5,
  h as h2
} from "./chunk-OCF7OAES.js";
import {
  A as A3,
  H,
  J,
  P as P2,
  U,
  _,
  e as e4,
  g,
  o as o3,
  p as p2,
  q,
  r as r4,
  s as s2,
  u as u2,
  v as v2,
  z as z3
} from "./chunk-JZBR4X6W.js";
import {
  n,
  r as r3,
  t as t2
} from "./chunk-OIJCMME5.js";
import {
  e as e3
} from "./chunk-4KLYOMH2.js";
import "./chunk-CXNX736Z.js";
import "./chunk-RGCWZ2KZ.js";
import "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import "./chunk-2SDMYJDE.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import {
  h
} from "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import {
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import {
  f
} from "./chunk-MBGZKT2Z.js";
import {
  $,
  G,
  L,
  W2 as W,
  z as z2
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  A as A2,
  C,
  P,
  d as d2,
  p,
  v
} from "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import {
  o as o2
} from "./chunk-TXBMNSNF.js";
import {
  d
} from "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  A,
  S,
  r2 as r,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  e as e2,
  l as l2,
  o,
  r as r2,
  s,
  t
} from "./chunk-JGDJR5EV.js";
import {
  l,
  u
} from "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import "./chunk-7RBRCL6S.js";
import {
  has,
  k,
  z
} from "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/views/interactive/SegmentLabels.js
var G4 = 3025;
var M3 = { default: 15, far: 25 };
var A4 = class extends S {
  constructor(t9) {
    super(t9), this.context = null, this.stagedVertex = null, this.visible = true, this.edgeDistance = "default", this._messagesUnits = null, this._labelInfos = [], this._nextLabelIndex = 0;
  }
  initialize() {
    const t9 = d(async (t10) => {
      const e17 = await h("esri/core/t9n/Units");
      s(t10), this._messagesUnits = e17;
    });
    this.addHandles([d2(() => [null != this.context && this.getCameraOrExtent(this.context), this.visible, this._edgeDistancePixels, this.stagedVertex, this._messagesUnits], () => this._update()), ...["vertex-add", "vertex-update", "vertex-remove"].map((t10) => v(() => {
      var _a;
      return (_a = this.context) == null ? void 0 : _a.editGeometryOperations;
    }, t10, () => this._update())), e2(() => t9.abort()), d2(() => this._colors, (t10) => this._updateStyle(t10))]);
  }
  destroy() {
    for (this._nextLabelIndex = 0; this._labelInfos.length; )
      this._destroyLabel(this._labelInfos.pop());
  }
  get updating() {
    return null == this._messagesUnits;
  }
  get test() {
    return { labelContents: this._labelInfos.slice(0, this._nextLabelIndex).map((t9) => t9.label.text) };
  }
  get _edgeDistancePixels() {
    return M3[this.edgeDistance];
  }
  get _colors() {
    var _a;
    const t9 = ((_a = this.context) == null ? void 0 : _a.view.effectiveTheme.textColor) ?? u3.fromArray([255, 255, 255]);
    return { textColor: t9, backgroundColor: R3(G2(t9, q3.Low), 0.6) };
  }
  _update() {
    if (this.destroyed)
      return;
    this._nextLabelIndex = 0;
    const { context: t9, stagedVertex: e17 } = this;
    if (!t9)
      return this._destroyUnusedLabels();
    const { editGeometryOperations: o11 } = t9, { components: s6, geometry: r14, coordinateHelper: i9 } = o11.data;
    if (!r14)
      return this._destroyUnusedLabels();
    const n13 = s6.length;
    for (let l16 = 0; l16 < n13; ++l16) {
      const s7 = R5(r14, o11, e17, i9, l16);
      if (s7.length < 2 || !q5(s7, t9.view, t9.elevationInfo, i9.spatialReference))
        continue;
      const a14 = 1 === n13 && !a2(s7);
      let c13 = T2, p13 = X;
      this.toScreenPointArray(t9, s7[0], c13);
      for (let e18 = 1; e18 < s7.length; ++e18) {
        const o12 = s7[e18 - 1], r15 = s7[e18];
        this.toScreenPointArray(t9, r15, p13), this._addLabel(t9, o12, c13, r15, p13, a14), [c13, p13] = [p13, c13];
      }
    }
    this._destroyUnusedLabels();
  }
  _updateStyle({ textColor: t9, backgroundColor: e17 }) {
    const o11 = this._nextLabelIndex, s6 = this._labelInfos;
    for (let r14 = 0; r14 < o11; ++r14) {
      const { label: o12 } = s6[r14];
      o12.textColor = t9, o12.backgroundColor = e17;
    }
  }
  _addLabel(t9, e17, o11, s6, r14, i9) {
    const { label: n13 } = this._getOrCreateLabel(t9);
    if (!this.visible || b2(o11, r14) < G4)
      return void (n13.visible = false);
    const { spatialReference: l16 } = t9.editGeometryOperations.data, a14 = u8(e17, s6, l16), c13 = this._messagesUnits, h13 = e9(t9.view);
    n13.text = null != c13 && null != a14 ? q4(c13, a14, h13) : "", n13.visible = true;
    const m8 = r14[0] - o11[0], d7 = r14[1] - o11[1];
    i9 ? o5(F5, -d7, m8) : o5(F5, d7, -m8), v4(F5, F5), l5(F5, F5, this._edgeDistancePixels), _2(H3, o11, r14, 0.5), u5(H3, H3, F5), n13.position = [H3[0], H3[1]], Math.abs(F5[0]) > Math.abs(F5[1]) ? n13.anchor = F5[0] > 0 ? "left" : "right" : n13.anchor = -F5[1] < 0 ? "top" : "bottom";
  }
  _getOrCreateLabel(t9) {
    var _a;
    const e17 = this._labelInfos.length > this._nextLabelIndex, { textColor: o11, backgroundColor: s6 } = this._colors;
    if (e17) {
      const t10 = this._labelInfos[this._nextLabelIndex++], { label: e18 } = t10;
      return e18.textColor = o11, e18.backgroundColor = s6, t10;
    }
    const r14 = new x5({ anchor: "center", fontSize: 8, textColor: o11, backgroundColor: s6 });
    (_a = t9.view.overlay) == null ? void 0 : _a.items.add(r14);
    const i9 = { label: r14 };
    return this._labelInfos.push(i9), this._nextLabelIndex = this._labelInfos.length, i9;
  }
  _destroyUnusedLabels() {
    for (; this._labelInfos.length > this._nextLabelIndex; )
      this._destroyLabel(this._labelInfos.pop());
  }
  _destroyLabel({ label: t9 }) {
    var _a, _b;
    (_b = (_a = this.context) == null ? void 0 : _a.view.overlay) == null ? void 0 : _b.items.remove(t9), t9.destroy();
  }
};
function R5(t9, e17, o11, s6, r14) {
  const i9 = [];
  if (e17.data.components[r14].iterateVertices((t10) => {
    i9.push(s6.toXYZ(t10.pos, c3.get()));
  }), 0 === r14 && null != o11 && i9.push(s6.toXYZ(o11, c3.get())), i9.length < 2)
    return i9;
  const n13 = i9[0], l16 = i9[i9.length - 1];
  return "polygon" === t9.type && i9.length > 2 && !H(n13, l16) && i9.push(n13), i9;
}
function q5(t9, e17, o11, s6) {
  if ("2d" === e17.type)
    return true;
  const r14 = $(s6) ?? 1, i9 = L(s6), n13 = (t10) => m2(e17, t10, s6, o11, $2) ?? 0;
  for (let l16 = 1; l16 < t9.length; ++l16) {
    const e18 = t9[l16 - 1], o12 = t9[l16], s7 = (o12[0] - e18[0]) * r14, a14 = (o12[1] - e18[1]) * r14, c13 = (n13(o12) - n13(e18)) * i9;
    if (Math.abs(c13) / Math.sqrt(s7 * s7 + a14 * a14) > z6)
      return false;
  }
  return true;
}
e([y()], A4.prototype, "context", void 0), e([y()], A4.prototype, "stagedVertex", void 0), e([y()], A4.prototype, "visible", void 0), e([y()], A4.prototype, "edgeDistance", void 0), e([y()], A4.prototype, "updating", null), e([y()], A4.prototype, "_messagesUnits", void 0), e([y()], A4.prototype, "_edgeDistancePixels", null), e([y()], A4.prototype, "_colors", null), A4 = e([a("esri.views.interactive.SegmentLabels")], A4);
var z6 = h2(5);
var F5 = n3();
var H3 = n3();
var T2 = i2();
var X = i2();

// node_modules/@arcgis/core/views/3d/interactive/SegmentLabels3D.js
var a6 = class extends A4 {
  getCameraOrExtent({ view: e17 }) {
    return e17.state.camera;
  }
  toScreenPointArray({ view: e17, elevationInfo: t9, editGeometryOperations: o11 }, s6, a14 = i2()) {
    const { spatialReference: m8 } = o11.data.coordinateHelper;
    return l7(s6, m8, t9, e17, c8), e17.state.camera.projectToScreen(c8, a14), a14;
  }
};
a6 = e([a("esri.views.3d.interactive.SegmentLabels3D")], a6);
var c8 = n();

// node_modules/@arcgis/core/views/3d/interactive/editingTools/meshFastUpdateUtils.js
function a7(o11, i9) {
  const s6 = o11.graphic;
  return s6 ? [d2(() => "visible" in o11 ? o11.visible : o11.displaying, (e17) => {
    e17 ? c9(s6, i9) : p8(s6, i9);
  }, { ...A2 }), e2(() => p8(s6, i9))] : [];
}
function c9(e17, t9) {
  const { geometry: r14 } = e17;
  f8(r14, t9) && e17.notifyMeshTransformChanged({ action: a4.EnableFastUpdates });
}
function p8(e17, t9) {
  const { geometry: r14 } = e17;
  f8(r14, t9) && e17.notifyMeshTransformChanged({ action: a4.DisableFastUpdates });
}
function f8(e17, { state: { viewingMode: t9 }, spatialReference: r14 }) {
  if ("mesh" !== (e17 == null ? void 0 : e17.type))
    return false;
  const { vertexSpace: s6, spatialReference: a14 } = e17;
  if (!g3(s6))
    return false;
  const { type: c13 } = s6;
  return t9 === l4.Global && "local" === c13 || t9 === l4.Local && G(r14, a14) && "georeferenced" === c13 && !a14.isGeographic;
}

// node_modules/@arcgis/core/views/3d/interactive/editingTools/draw/DrawGraphicTool3D.js
var b3 = class extends W3 {
  constructor(e17) {
    super(e17), this._activeVertexVisualElement = null, this._createGraphicState = null, this._outlineVisualElement = null, this._verticesVisualElement = null, this._verticalLineVisualElement = null, this._settings = new j3({ getTheme: () => this.view.effectiveTheme }), this.geometryType = null, this.type = "draw-3d";
  }
  initialize() {
    const { mode: e17, offset: t9, unit: i9 } = this.elevationInfo;
    this.internalGraphicsLayer.elevationInfo = new h3({ mode: e17, offset: t9, unit: i9 });
  }
  normalizeCtorArgs(e17) {
    if (!e17.elevationInfo) {
      const t9 = e17.hasZ ?? true;
      return { ...e17, elevationInfo: u4(t9) };
    }
    return e17;
  }
  initializeGraphic(e17) {
    const { view: t9 } = this, s6 = this._createGraphicState = new e13({ graphic: e17 });
    return o([t9.maskOccludee(e17), t9.trackGraphicState(s6), d2(() => ({ element: this._outlineVisualElement, isDraped: s6.isDraped }), ({ element: e18, isDraped: t10 }) => {
      e18 && (e18.isDraped = t10);
    }, A2), this._setupLoadingIndicator(s6), ...a7(s6, t9)]);
  }
  updateDrawMeshTooltipInfo(e17) {
    const { graphic: t9, sketchOptions: i9, view: s6 } = this;
    e17.sketchOptions = i9, e17.viewType = s6.type, e17.helpMessage = i5(t9, this.view), this.updateElevation(e17.elevation);
  }
  makeDrawOperation() {
    const { geometryType: e17 } = this, t9 = "circle" !== e17 && "rectangle" !== e17;
    return new L3({ view: this.view, manipulators: this.manipulators, geometryType: $3(e17), drawingMode: this.mode, hasZ: this.hasZ, defaultZ: this.defaultZ, snapToSceneEnabled: this.snapToScene, drawSurface: new l10(this.view, this.elevationInfo, [this.internalGraphicsLayer]), elevationDrawSurface: new c6(this.elevationInfo, this.defaultZ, this.view, this.internalGraphicsLayer), hasM: false, elevationInfo: this.elevationInfo, snappingManager: this.snappingManager, snappingVisualizer: new O2(), segmentLabels: t9 ? new a6() : null, labelOptions: this.sketchOptions.labels, isDraped: this._createGraphicState ? this._createGraphicState.isDraped : "on-the-ground" === r6(this.hasZ, this.elevationInfo), cursor: this.cursor, constraintsEnabled: true });
  }
  onActiveVertexChanged(e17) {
    const { view: n13 } = this;
    if (this._activeVertexVisualElement)
      return this._activeVertexVisualElement.vertices = [e17], this._activeVertexVisualElement.recreate(), this._updateVerticalLineVisualElement(e17), e2();
    const a14 = this._settings, c13 = a14.manipulators.vertex, p13 = new d4({ view: n13, spatialReference: n13.spatialReference, vertices: [e17], elevationInfo: this.internalGraphicsLayer.elevationInfo, size: c13.size, outlineSize: c13.outlineSize, renderOccluded: c13.renderOccluded, attached: false, isDecoration: true });
    this._activeVertexVisualElement = p13;
    const h13 = a14.visualElements.zVerticalLine, m8 = new G3({ view: n13, extensionType: h13.extensionType, innerWidth: 1, attached: false, writeDepthEnabled: false, renderOccluded: h6.OccludeAndTransparent, isDecoration: true });
    this._verticalLineVisualElement = m8;
    const u14 = o([d2(() => a14.visualElements.zVerticalLine, (e18) => e18.apply(m8), P), d2(() => ({ selectedColor: E(a14.colors.selected), outlineColor: E(a14.manipulators.vertex.outlineColor) }), ({ selectedColor: e18, outlineColor: t9 }) => {
      p13.color = e18, p13.outlineColor = t9;
    }, P), e2(() => {
      this._activeVertexVisualElement = u(this._activeVertexVisualElement), this._verticalLineVisualElement = u(this._verticalLineVisualElement);
    })]);
    return p13.attached = true, this._updateVerticalLineVisualElement(e17), u14;
  }
  _updateVerticalLineVisualElement(e17) {
    const t9 = this._verticalLineVisualElement;
    if (!t9)
      return;
    const { renderCoordsHelper: i9, elevationProvider: s6 } = this.view;
    o3(k3, e17[0], e17[1], e17[2]), z7.setFromElevationInfo(this.elevationInfo), k3[2] = f4(k3, s6, z7, i9);
    i9.toRenderCoords(k3, this.view.spatialReference, k3) ? (t9.setStartEndFromWorldDownAtLocation(k3), t9.attached = true) : t9.attached = false;
  }
  onOutlineChanged(e17) {
    if (this._outlineVisualElement)
      return this._outlineVisualElement.geometry = e17, e2();
    const t9 = this.internalGraphicsLayer.elevationInfo, { view: n13 } = this, a14 = this._settings, c13 = new w4({ view: n13, geometry: e17, elevationInfo: t9, isDraped: this._createGraphicState ? this._createGraphicState.isDraped : "on-the-ground" === r6(this.hasZ, t9), attached: false, isDecoration: true });
    this._outlineVisualElement = c13;
    const p13 = o([d2(() => a14.visualElements.lineObjects.outline, (e18) => e18.apply(c13), P), d2(() => a14.visualElements.lineObjects.shadowStyle, (e18) => e18.apply(c13), P), e2(() => {
      this._outlineVisualElement = u(this._outlineVisualElement);
    })]);
    return c13.attached = true, c13.laserlineEnabled = true, p13;
  }
  onRegularVerticesChanged(e17) {
    if (this._verticesVisualElement)
      return this._verticesVisualElement.vertices = e17, e2();
    const { view: n13 } = this, a14 = this._settings, c13 = a14.manipulators.vertex, p13 = new d4({ view: n13, spatialReference: n13.spatialReference, vertices: e17, elevationInfo: this.internalGraphicsLayer.elevationInfo, size: c13.size, outlineSize: c13.outlineSize, renderOccluded: c13.renderOccluded, attached: false, isDecoration: true }), h13 = o([d2(() => ({ color: E(a14.manipulators.vertex.color), outlineColor: E(a14.manipulators.vertex.outlineColor) }), ({ color: e18, outlineColor: t9 }) => {
      p13.color = e18, p13.outlineColor = t9;
    }, P), e2(() => {
      this._verticesVisualElement = u(this._verticesVisualElement);
    })]);
    return p13.attached = true, this._verticesVisualElement = p13, h13;
  }
  updateGraphicGeometry(e17) {
    if ("mesh" !== this.geometryType || "point" !== (e17 == null ? void 0 : e17.type))
      super.updateGraphicGeometry(e17);
    else {
      const t9 = this.geometryToPlace;
      t9 == null ? void 0 : t9.centerAt(e17);
      const i9 = this._graphic;
      t9 && i9.geometry === t9 || (i9.geometry = t9);
    }
  }
  _setupLoadingIndicator(e17) {
    const { drawOperation: t9 } = this;
    if (!this.geometryToPlace)
      return t9.loading = false, null;
    t9.loading = true;
    const r14 = e2(() => {
      t9.loading = false;
    });
    let o11;
    const l16 = () => o11 && cancelAnimationFrame(o11);
    return o([p(() => e17.displaying, () => {
      l16(), o11 = requestAnimationFrame(() => r14.remove());
    }, { ...A2, once: true }), e2(l16), r14]);
  }
};
e([y({ constructOnly: true })], b3.prototype, "elevationInfo", void 0), e([y({ constructOnly: true })], b3.prototype, "geometryType", void 0), e([y()], b3.prototype, "type", void 0), e([y({ constructOnly: true })], b3.prototype, "view", void 0), b3 = e([a("esri.views.3d.interactive.editingTools.draw.DrawGraphicTool3D")], b3);
var z7 = new o7();
var k3 = n();

// node_modules/@arcgis/core/views/3d/interactive/editingTools/geometryUtils.js
function n6(o11) {
  const n13 = r11(o11);
  return r5(Math.cos(n13), Math.sin(n13));
}
function r11(t9) {
  if (null == t9 || "polyline" !== t9.type && "polygon" !== t9.type)
    return 0;
  const n13 = "polyline" === t9.type ? t9.paths : t9.rings, r14 = e3();
  for (const o11 of n13)
    for (let t10 = 0; t10 < o11.length - 1; t10++) {
      const n14 = o11[t10], e17 = o11[t10 + 1], i9 = n14[0] - e17[0], l16 = n14[1] - e17[1];
      if (i9 * i9 + l16 * l16 > r14)
        return Math.atan2(e17[1] - n14[1], e17[0] - n14[0]);
    }
  return 0;
}

// node_modules/@arcgis/core/views/3d/interactive/editingTools/GrabbingState.js
var N2;
!function(N4) {
  N4[N4.NONE = 0] = "NONE", N4[N4.ANY = 1] = "ANY", N4[N4.Z = 2] = "Z", N4[N4.XY = 4] = "XY";
}(N2 || (N2 = {}));

// node_modules/@arcgis/core/views/3d/interactive/editingTools/ManipulatorType.js
var A5;
!function(A8) {
  A8[A8.TRANSLATE_Z = 0] = "TRANSLATE_Z", A8[A8.TRANSLATE_XY = 1] = "TRANSLATE_XY", A8[A8.SCALE = 2] = "SCALE", A8[A8.ROTATE = 3] = "ROTATE", A8[A8.SCALE_ROTATE = 4] = "SCALE_ROTATE";
}(A5 || (A5 = {}));

// node_modules/@arcgis/core/views/3d/interactive/editingTools/ManipulatorState.js
var a8 = class {
  constructor() {
    this.grabbingState = N2.NONE, this.zManipulator = null, this.firstSelected = null, this.numSelected = 0, this.firstGrabbedXY = null;
  }
  update(a14) {
    this.grabbingState = N2.NONE, this.zManipulator = null, this.numSelected = 0, this.firstSelected = null, this.firstGrabbedXY = null, a14.forEachManipulator((a15, s6) => {
      if (s6 === A5.TRANSLATE_Z && (this.zManipulator = a15), a15 instanceof ee && (a15.selected && (0 === this.numSelected && (this.firstSelected = a15), this.numSelected++), null == this.firstGrabbedXY && a15.grabbing && s6 === A5.TRANSLATE_XY && (this.firstGrabbedXY = a15)), a15.grabbing)
        switch (this.grabbingState |= N2.ANY, s6) {
          case A5.TRANSLATE_Z:
            this.grabbingState |= N2.Z;
            break;
          case A5.TRANSLATE_XY:
            this.grabbingState |= N2.XY;
        }
    });
  }
};

// node_modules/@arcgis/core/views/3d/interactive/editingTools/lineObjectVisualElementUtils.js
function y6(t9) {
  const { object: n13 } = t9, a14 = S4(t9), l16 = [a14, M4(t9, a14.visualElement)];
  return n13.maskOccludee && l16.push(n13.maskOccludee()), { visualElement: a14.visualElement, remove: () => r2(l16) };
}
function S4(e17) {
  const { view: a14, object: l16 } = e17, s6 = t6(l16), r14 = new w4({ view: a14, geometry: D3(s6) ? s6 : null, elevationInfo: l16.elevationInfo, attached: false, isDecoration: true }), c13 = new j3({ getTheme: () => a14.effectiveTheme }), m8 = () => {
    r14.attached = l16.visible;
  }, u14 = o([d2(() => c13.visualElements.lineObjects.outline, (e18) => e18.apply(r14), P), d2(() => c13.visualElements.lineObjects.shadowStyle, (e18) => e18.apply(r14), P), d2(() => l16.visible, m8), d2(() => l16.isDraped, (e18) => {
    r14.isDraped = e18;
  }, P), l16.on("committed", () => {
    const e18 = t6(l16);
    r14.geometry = D3(e18) ? e18 : null;
  }), l2(r14)]);
  return m8(), { visualElement: r14, remove: () => u14.remove() };
}
function M4(r14, c13) {
  const { object: m8, view: u14 } = r14, p13 = [], v8 = m8.elevationInfo, j7 = "on-the-ground" === v8.mode || !v8.offset && "absolute-height" !== v8.mode, y7 = new a8(), S9 = new j3({ getTheme: () => u14.effectiveTheme }), M8 = S9.visualElements, L8 = new G3({ view: u14, extensionType: M8.zVerticalLine.extensionType, innerWidth: 1, attached: false, writeDepthEnabled: false, renderOccluded: h6.OccludeAndTransparent, isDecoration: true }), A8 = h2(M8.heightPlaneAngleCutoff), x8 = new c5({ view: u14, attached: false, angleCutoff: A8, isDecoration: true }), C7 = r7(1);
  p13.push(d2(() => ({ lineShadowStyle: S9.visualElements.lineObjects.shadowStyle, pointShadowStyle: S9.visualElements.pointObjects.shadowStyle, alpha: C7.value }), ({ lineShadowStyle: e17, pointShadowStyle: t9, alpha: n13 }) => {
    e17.apply(c13, n13), t9.apply(L8, n13);
  }, P));
  const V4 = r7(1);
  p13.push(d2(() => ({ heightPlane: S9.visualElements.heightPlane, alpha: V4.value }), ({ heightPlane: e17, alpha: t9 }) => e17.apply(x8, t9), P));
  const P7 = () => {
    y7.update(r14);
    const e17 = t6(m8);
    if (!m8.visible || j7 && (m8.isDraped || !D3(e17) || !e17.hasZ))
      return c13.laserlineEnabled = false, L8.attached = false, void (x8.attached = false);
    c13.laserlineEnabled = true;
    const t9 = y7.grabbingState & N2.XY ? M8.laserlineAlphaMultiplier : 1;
    C7.value = t9;
    const n13 = y7.grabbingState & N2.Z ? M8.laserlineAlphaMultiplier : 1;
    V4.value = n13, T3(L8, y7), O3(r14, c13, x8, y7);
  };
  p13.push(d2(() => S9.visualElements.zVerticalLine, (e17) => e17.apply(L8), P)), p13.push(m8.on("committed", P7), d2(() => m8.visible, P7), c13.events.on("attachment-origin-changed", P7), l2(L8), l2(x8));
  const U5 = [], X2 = () => {
    r2(U5), U5.length = 0, r14.forEachManipulator((e17) => U5.push(e17.events.on("grab-changed", P7))), r14.forEachManipulator((e17) => U5.push(e17.events.on("select-changed", P7))), P7();
  };
  return X2(), p13.push(r14.onManipulatorsChanged(X2), t(() => o(U5))), o(p13);
}
function T3(e17, t9) {
  const n13 = 1 === t9.numSelected ? t9.firstSelected : t9.numSelected > 1 && null != t9.firstGrabbedXY ? t9.firstGrabbedXY : null;
  null != n13 ? (e17.setStartEndFromWorldDownAtLocation(n13.renderLocation), e17.attached = true) : e17.attached = false;
}
function O3(e17, t9, n13, a14) {
  if (a14.numSelected > 0) {
    o3(L4, 0, 0, 0);
    let t10 = 0;
    e17.forEachManipulator((e18, n14) => {
      n14 === A5.TRANSLATE_XY && e18.selected && e18 instanceof ee && (u2(L4, L4, e18.renderLocation), t10++);
    }), t10 > 0 ? (n13.heightManifoldTarget = g(L4, L4, 1 / t10), n13.attached = true) : n13.attached = false;
  } else {
    const a15 = t9.attachmentOrigin;
    null != a15 && e17.view.renderCoordsHelper.toRenderCoords(a15, L4) ? (n13.heightManifoldTarget = L4, n13.attached = true) : n13.attached = false;
  }
}
function D3(e17) {
  return null != e17 && ("polygon" === e17.type || "polyline" === e17.type);
}
var L4 = n();

// node_modules/@arcgis/core/views/3d/interactive/editingTools/originGeometryVisualElementUtils.js
function D4(t9) {
  const o11 = [], n13 = S5(t9, o11);
  return P5(t9, o11, n13), { visualElement: n13, remove: () => r2(o11) };
}
function P5(e17, o11, l16) {
  const { view: c13, object: m8 } = e17, f10 = new j3({ getTheme: () => c13.effectiveTheme }), y7 = new G3({ view: c13, extensionType: f10.visualElements.zVerticalLine.extensionType, innerWidth: 1, attached: false, writeDepthEnabled: false, renderOccluded: h6.OccludeAndTransparent, isDecoration: true });
  o11.push(d2(() => f10.visualElements.zVerticalLine, (e18) => e18.apply(y7), P));
  const D8 = new c5({ view: c13, intersectsLineInfinite: true, attached: false, isDecoration: true }), P7 = h2(f10.visualElements.heightPlaneAngleCutoff), S9 = new c5({ view: c13, attached: false, angleCutoff: P7, isDecoration: true }), A8 = m8.elevationInfo, L8 = o7.fromElevationInfo(A8), M8 = "on-the-ground" === A8.mode || !A8.offset && "absolute-height" !== A8.mode, U5 = new a8(), I5 = r7(1);
  o11.push(d2(() => ({ heightPlane: f10.visualElements.heightPlane, alpha: I5.value }), ({ heightPlane: e18, alpha: t9 }) => e18.apply(S9, t9), P));
  const O6 = r7(1);
  o11.push(d2(() => ({ shadowStyle: f10.visualElements.pointObjects.shadowStyle, alpha: O6.value }), ({ shadowStyle: e18, alpha: t9 }) => e18.apply(D8, t9), P));
  const B2 = () => {
    U5.update(e17);
    const t9 = V2(t6(m8)), o12 = M8 && (m8.isDraped || null == t9 || !t9.hasZ);
    let n13 = true;
    if (o12 || null == t9)
      n13 = false;
    else {
      const e18 = f4(t9, c13.elevationProvider, L8, c13.renderCoordsHelper);
      o3(C2, t9.x, t9.y, e18), n2(C2, t9.spatialReference, C2, c13.renderCoordsHelper.spatialReference), y7.setStartEndFromWorldDownAtLocation(C2), D8.intersectsWorldUpAtLocation = C2;
    }
    const i9 = U5.grabbingState & N2.Z ? f10.visualElements.laserlineAlphaMultiplier : 1;
    I5.value = i9;
    const r14 = P3(R6);
    !o12 && m8.visible && l16.calculateMapBounds(r14) && n2(R(r14, C2), c13.spatialReference, C2, c13.renderCoordsHelper.spatialReference) ? (S9.heightManifoldTarget = C2, S9.attached = true) : S9.attached = false;
    const a14 = U5.grabbingState & N2.XY ? f10.visualElements.laserlineAlphaMultiplier : 1;
    O6.value = a14;
    const g10 = n13 && m8.visible && !o12;
    D8.attached = g10, y7.attached = g10;
  };
  o11.push(d2(() => [m8.visible, m8.isDraped], B2), m8.on("committed", B2)), e17.forEachManipulator((e18) => {
    o11.push(e18.events.on("grab-changed", B2));
  }), o11.push(l2(D8)), o11.push(l2(y7)), o11.push(l2(S9)), B2();
}
function S5(e17, o11) {
  const { view: n13, object: i9 } = e17, r14 = new x4({ view: n13, geometry: V2(t6(i9)), elevationInfo: i9.elevationInfo, isDecoration: true });
  return A6(e17, r14, o11), o11.push(l2(r14)), r14;
}
function V2(e17) {
  return null == e17 ? null : "point" === e17.type ? e17 : "mesh" === e17.type ? e17.anchor.clone() : null;
}
function A6(e17, t9, o11) {
  const { view: n13, object: a14 } = e17, s6 = () => {
    t9.attached = a14.visible;
  }, l16 = new j3({ getTheme: () => n13.effectiveTheme });
  L5(e17, t9, o11), l16.visualElements.pointObjects.outline.apply(t9), o11.push(d2(() => a14.visible, s6, P));
}
function L5(e17, t9, n13) {
  const { view: i9, object: r14 } = e17;
  let a14 = null;
  const s6 = (e18) => {
    null != a14 && (a14.remove(), a14 = null), r14.isDraped && null != e18 && (a14 = M5(i9, e18, () => {
      t9.geometry = e18;
    }));
  }, l16 = () => {
    const e18 = V2(t6(r14));
    s6(e18), t9.geometry = e18;
  };
  n13.push(r14.on("committed", l16), t(() => a14)), l16();
}
function M5(e17, t9, o11) {
  const n13 = e17.elevationProvider.spatialReference;
  c2(t9, C2, n13);
  const i9 = C2[0], r14 = C2[1];
  return e17.elevationProvider.on("elevation-change", (e18) => {
    w(e18.extent, i9, r14) && o11();
  });
}
var C2 = n();
var R6 = i();

// node_modules/@arcgis/core/views/3d/interactive/editingTools/visualElementUtils.js
function l12(l16) {
  var _a;
  switch ((_a = t6(l16.object)) == null ? void 0 : _a.type) {
    case "point":
    case "mesh":
      return D4(l16);
    case "polygon":
    case "polyline":
      return y6(l16);
    default:
      return null;
  }
}

// node_modules/@arcgis/core/views/3d/interactive/editingTools/manipulations/config.js
var t7 = 128;
var a9 = 70;
var e14 = 80;
var h10 = 0.02;
var M6 = 54;
var c10 = 100;
var o9 = Math.ceil(a9 / 3 * 2);
var I2 = 160;
var P6 = 0.5;
var i7 = 24;
var l13 = 9;
var n7 = I2 + 30;
var p9 = I2 + 53;
var r12 = 60;
var s4 = 23;
var x6 = 5 * Math.PI / 12;
var b4 = 1 * Math.PI / 3;
var d6 = 10;
var f9 = 0.2;
var g7 = 30;
var j4 = 53;
var k4 = 0.2;
var m6 = 0.3;
var q6 = 200;
var u11 = 3;
var v7 = 1e6;

// node_modules/@arcgis/core/views/3d/interactive/editingTools/manipulations/Manipulation.js
var t8 = class {
  constructor() {
    this._available = true;
  }
  set location(a14) {
    this._forEachManipulator3D((t9) => t9.location = a14);
  }
  set elevationAlignedLocation(a14) {
    this._forEachManipulator3D((t9) => t9.elevationAlignedLocation = a14);
  }
  set elevationInfo(a14) {
    this._forEachManipulator3D((t9) => t9.elevationInfo = a14);
  }
  get renderLocation() {
    let a14;
    return this._forEachManipulator3D((t9) => {
      a14 || (a14 = t9.renderLocation);
    }), a14;
  }
  get available() {
    return this._available;
  }
  set available(a14) {
    this._available = a14, this._forEachManipulator3D((t9) => t9.available = a14);
  }
  get hovering() {
    return this.someManipulator((a14) => a14.hovering);
  }
  get grabbing() {
    return this.someManipulator((a14) => a14.grabbing);
  }
  get dragging() {
    return this.someManipulator((a14) => a14.dragging);
  }
  hasManipulator(a14) {
    return this.someManipulator((t9) => t9 === a14);
  }
  someManipulator(a14) {
    let t9 = false;
    return this.forEachManipulator((i9) => {
      !t9 && a14(i9) && (t9 = true);
    }), t9;
  }
  _forEachManipulator3D(t9) {
    this.forEachManipulator((i9, o11) => {
      i9 instanceof ee && t9(i9, o11);
    });
  }
};

// node_modules/@arcgis/core/views/3d/interactive/editingTools/manipulations/moveUtils.js
function n8(n13, a14, r14) {
  const c13 = (t9, e17) => {
    a14({ action: t9, object: n13, dxScreen: e17.screenDeltaX, dyScreen: e17.screenDeltaY });
  };
  return r14((a15, r15, s6) => (r15.next((t9) => ("start" === t9.action && c13("start", t9), t9)).next(f6(n13)).next((t9) => {
    switch (t9.action) {
      case "start":
      case "update":
        (t9.translationX || t9.translationY || t9.translationZ) && c13("update", t9);
        break;
      case "end":
        c13("end", t9);
    }
    return t9;
  }), { steps: r15, cancel: s6 = s6.next(g5(n13)).next((t9) => (c13("end", { screenDeltaX: 0, screenDeltaY: 0 }), t9)) }));
}
function a10(t9) {
  if (null == (t9 == null ? void 0 : t9.axis))
    return 1;
  const { mapStart: e17, mapEnd: n13, axis: a14 } = t9, r14 = [n13.x - e17.x, n13.y - e17.y];
  return r14[0] * a14[0] + r14[1] * a14[1] > 0 ? 1 : -1;
}

// node_modules/@arcgis/core/views/3d/interactive/editingTools/manipulations/MoveXYAxisManipulation.js
var C3 = class extends t8 {
  constructor(t9) {
    super(), this._handles = new r(), this._arrowManipulatorInfos = new Array(), this._angle = 0, this._scale = 1, this._radius = a9, this._updateAfterDrag = false, this.events = new o2(), this._tool = t9.tool, this._view = t9.view, this._opaqueMaterial = this._createMaterial(), this._transparentMaterial = this._createMaterial(0.5), null != t9.radius && (this._radius = t9.radius), this._createManipulators(), this.forEachManipulator((t10) => this._tool.manipulators.add(t10));
  }
  set orthogonalAvailable(t9) {
    this._arrowManipulatorInfos.length >= 3 && (this._arrowManipulatorInfos[1].manipulator.available = t9, this._arrowManipulatorInfos[3].manipulator.available = t9);
  }
  destroy() {
    this._handles = u(this._handles), this.forEachManipulator((t9) => {
      this._tool.manipulators.remove(t9), t9.destroy();
    }), this._tool = null, this._view = null, this._arrowManipulatorInfos.length = 0;
  }
  forEachManipulator(t9) {
    for (const { manipulator: a14 } of this._arrowManipulatorInfos)
      t9(a14, A5.TRANSLATE_XY);
  }
  createManipulatedObjectDragPipeline(t9, a14, r14) {
    if (!a14.operations)
      return e2();
    const i9 = a14.operations.data.spatialReference, o11 = a14.graphic;
    return n8(a14, r14, (r15) => this.createDragPipeline((a15, e17, i10, o12, s6) => ({ steps: e17, cancel: i10 } = t9(a15, e17, i10, o12, s6), r15(a15, e17, i10)), a14.elevationInfo, i9, o11));
  }
  createDragPipeline(t9, a14, r14, e17) {
    return o(this._arrowManipulatorInfos.map(({ manipulator: i9 }, o11) => p5(i9, (i10, s6, n13, l16, p13) => {
      const u14 = s6.next((t10) => ({ ...t10, manipulatorType: A5.TRANSLATE_XY })).next(M2(this._view, i10.elevationAlignedLocation)).next(T(this._view, i10.elevationAlignedLocation, a14, r14, e17)).next(m5(i10.location, this.angle + (o11 + 1) * Math.PI * 0.5)).next(j2());
      t9(i10, u14, n13, l16, p13);
    })));
  }
  get angle() {
    return this._angle;
  }
  set angle(t9) {
    this._angle = t9, this.dragging ? this._updateAfterDrag = true : this._updateManipulatorTransform();
  }
  get displayScale() {
    return this._scale;
  }
  set displayScale(t9) {
    this._scale = t9, this._updateManipulatorTransform();
  }
  get radius() {
    return this._radius;
  }
  set radius(t9) {
    this._radius !== t9 && (this._radius = t9, this._updateManipulators());
  }
  _updateManipulators() {
    for (let t9 = 0; t9 < this._arrowManipulatorInfos.length; t9++)
      this._updateArrowManipulator(this._arrowManipulatorInfos[t9], t9);
    this._updateManipulatorTransform();
  }
  _updateArrowManipulator({ manipulator: t9, transform: a14 }, r14) {
    const e17 = this._radius / a9, i9 = M6 * e17, o11 = i9 * Math.sqrt(3) / 2, s6 = wt(this._opaqueMaterial, o11, i9 / 2, i9 / 2, h10);
    mt(s6, q2(f3.get(), o3(c3.get(), 0, -o11 / 3, 0))), t9.renderObjects = [new e10(s6, t5.Focused), new e10(s6.instantiate({ material: this._transparentMaterial }), t5.Unfocused)], t9.radius = o11 / 3 * 2 * 1.2;
    const n13 = R2(f3.get(), r14 * Math.PI / 2), h13 = q2(f3.get(), o3(c3.get(), 0, c10 * e17, 0));
    c(a14, n13, h13);
  }
  _createManipulators() {
    for (let t9 = 0; t9 < 4; t9++) {
      const a14 = this._createArrowManipulator(t9);
      this._arrowManipulatorInfos.push(a14);
    }
    this._updateManipulatorTransform();
  }
  _updateManipulatorTransform() {
    const t9 = this.angle, a14 = p3(f3.get(), t9, r3(0, 0, 1));
    if (null == a14)
      return;
    const r14 = d3(f3.get(), o3(c3.get(), this.displayScale, this.displayScale, this.displayScale)), e17 = c(f3.get(), r14, a14);
    for (const i9 of this._arrowManipulatorInfos) {
      const t10 = c(f3.get(), e17, i9.transform);
      i9.manipulator.modelTransform = t10;
    }
  }
  _createArrowManipulator(t9) {
    const a14 = new ee({ view: this._view, autoScaleRenderObjects: false, worldOriented: true, focusMultiplier: 1, touchMultiplier: 1, collisionType: { type: "disc", direction: r3(0, 0, 1) } }), r14 = { manipulator: a14, transform: e6() };
    return this._updateArrowManipulator(r14, t9), this._handles.add(a14.events.on("drag", (t10) => {
      this._updateAfterDrag && "end" === t10.action && !this.dragging && (this._updateManipulatorTransform(), this._updateAfterDrag = false);
    })), r14;
  }
  _createMaterial(a14 = 1) {
    const r14 = new _3({ cullFace: e8.Back, renderOccluded: h6.Transparent, isDecoration: true });
    return this._handles.add(d2(() => u3.toUnitRGBA(this._view.effectiveTheme.accentColor), (t9) => {
      t9[3] *= a14, r14.setParameters({ color: t9 });
    }, P)), r14;
  }
  get test() {
    return { arrowManipulators: this._arrowManipulatorInfos.map(({ manipulator: t9 }) => t9) };
  }
};

// node_modules/@arcgis/core/views/3d/interactive/editingTools/snapping/SnapToScene.js
var e15 = class {
  constructor() {
    this._view = null, this._elevationInfo = null, this._lastDragEvent = null, this._next = null, this._enabled = false;
  }
  get enabled() {
    return this._enabled;
  }
  set enabled(t9) {
    if (this._enabled !== t9 && null != this._lastDragEvent && null != this._next) {
      const n13 = this._lastDragEvent.mapEnd, e17 = this._snap(this._lastDragEvent.screenEnd);
      if (null != e17) {
        const s6 = { action: "update", mapStart: this._lastDragEvent.mapStart, mapEnd: true === t9 ? e17 : n13, screenStart: this._lastDragEvent.screenEnd, screenEnd: this._lastDragEvent.screenEnd };
        this._next.execute(s6);
      }
    }
    this._enabled = t9;
  }
  _snap(n13) {
    const e17 = null != this._view ? this._view.toMap(n13, { exclude: [] }) : null;
    return null != e17 && null != this._view && (e17.z = g2(e17, this._view, this._elevationInfo)), e17;
  }
  createDragEventPipelineStep(t9, e17) {
    this._view = t9, this._elevationInfo = e17, this._lastDragEvent = null;
    const s6 = new w3();
    this._next = s6;
    return [(t10) => {
      if (this._lastDragEvent = "end" !== t10.action ? { ...t10 } : null, this._enabled) {
        const n13 = this._snap(t10.screenEnd);
        return null != n13 ? { action: t10.action, mapStart: t10.mapStart, mapEnd: n13, screenStart: t10.screenStart, screenEnd: t10.screenEnd } : null;
      }
      return { action: t10.action, mapStart: t10.mapStart, mapEnd: t10.mapEnd, screenStart: t10.screenStart, screenEnd: t10.screenEnd };
    }, s6];
  }
};

// node_modules/@arcgis/core/views/3d/interactive/editingTools/manipulations/MoveXYDiscManipulation.js
var O4 = class extends t8 {
  constructor(t9) {
    super(), this._handles = new r(), this._snapToScene = new e15(), this._scale = 1, this._radius = a9, this._view = t9.view, this._tool = t9.tool, this._discMaterial = this._createMaterial(), this._discMaterialTransparent = this._createMaterial(0.5), null != t9.snapToScene && (this.snapToScene = t9.snapToScene), null != t9.radius && (this._radius = t9.radius), this._createManipulator(), this.forEachManipulator((t10) => this._tool.manipulators.add(t10));
  }
  destroy() {
    this._handles = u(this._handles), this.forEachManipulator((t9) => {
      this._tool.manipulators.remove(t9), t9.destroy();
    }), this._tool = null, this._view = null, this._manipulator = null;
  }
  forEachManipulator(t9) {
    t9(this._manipulator, A5.TRANSLATE_XY);
  }
  get displayScale() {
    return this._scale;
  }
  set displayScale(t9) {
    this._scale = t9, this._updateManipulatorTransform();
  }
  get snapToScene() {
    return this._snapToScene.enabled;
  }
  set snapToScene(t9) {
    this._snapToScene.enabled = t9;
  }
  get radius() {
    return this._radius;
  }
  set radius(t9) {
    t9 !== this._radius && (this._radius = t9, this._updateManipulator());
  }
  createManipulatedObjectDragPipeline(t9, e17, a14) {
    if (!e17.operations)
      return e2();
    const r14 = e17.graphic, s6 = e17.elevationInfo, o11 = e17.operations.data.spatialReference;
    return n8(e17, a14, (e18) => this.createDragPipeline((i9, a15, r15, s7, o12) => ({ steps: a15, cancel: r15 } = t9(i9, a15, r15, s7, o12), e18(i9, a15, r15)), s6, o11, r14));
  }
  createDragPipeline(t9, e17, i9, a14) {
    const r14 = this._view;
    return p5(this._manipulator, (s6, o11, n13, l16, p13) => {
      const c13 = o11.next(M2(r14, s6.elevationAlignedLocation)).next(T(r14, s6.elevationAlignedLocation, e17, i9, a14)).next(...this._snapToScene.createDragEventPipelineStep(r14, e17)).next((t10) => ({ ...t10, manipulatorType: A5.TRANSLATE_XY })).next(j2());
      t9(s6, c13, n13, l16, p13);
    });
  }
  _updateManipulatorTransform() {
    const t9 = d3(f3.get(), o3(c3.get(), this.displayScale, this.displayScale, this.displayScale));
    this._manipulator.modelTransform = t9;
  }
  _createManipulator() {
    const t9 = this._view;
    this._manipulator = new ee({ view: t9, worldSized: false, autoScaleRenderObjects: false, focusMultiplier: 1, touchMultiplier: 1, collisionType: { type: "disc", direction: r3(0, 0, 1) }, worldOriented: true }), this._updateManipulator();
  }
  _updateManipulator() {
    const t9 = ft(this._discMaterial, h10, 1, t7, r3(0, 0, 1), r3(0, 0, 0));
    t9.transformation = d3(e6(), r3(this._radius, this._radius, this._radius)), this._manipulator.renderObjects = [new e10(t9, t5.Focused), new e10(t9.instantiate({ material: this._discMaterialTransparent }), t5.Unfocused)], this._manipulator.radius = e14 * (this._radius / a9);
  }
  _createMaterial(e17 = 1) {
    const i9 = new _3({ cullFace: e8.Back, renderOccluded: h6.Transparent, isDecoration: true });
    return this._handles.add(d2(() => u3.toUnitRGBA(this._view.effectiveTheme.accentColor), (t9) => {
      t9[3] *= e17, i9.setParameters({ color: t9 });
    }, P)), i9;
  }
  get test() {
    return { discManipulator: this._manipulator };
  }
};

// node_modules/@arcgis/core/views/3d/interactive/editingTools/manipulations/MoveZManipulation.js
var C4 = class extends t8 {
  constructor(t9) {
    super(), this._radius = a9, this.events = new o2(), this._tool = t9.tool, this._view = t9.view;
    const e17 = new j3({ getTheme: () => this._view.effectiveTheme });
    this._settings = e17, null != t9.radius && (this._radius = t9.radius);
    const r14 = this._view.effectiveTheme.accentColor;
    this._materials = { materialUnfocused: f5(D5(r14, 1, 0.25), h6.Occlude), materialFocused: f5(D5(r14, 1, 0), h6.Occlude), materialOccludedUnfocused: f5(D5(r14, 0.7, 0), e17.zManipulator.renderOccluded), materialOccludedFocused: f5(D5(r14, 0.85, 0), e17.zManipulator.renderOccluded) }, this._themeHandle = d2(() => this._view.effectiveTheme.accentColor, (t10) => {
      const e18 = D5(t10, 1, 0.25), i9 = D5(t10, 1, 0), r15 = D5(t10, 0.7, 0), a14 = D5(t10, 0.85, 0), { materialUnfocused: o11, materialFocused: s6, materialOccludedUnfocused: n13, materialOccludedFocused: l16 } = this._materials;
      o11.setParameters({ color: e18 }), s6.setParameters({ color: i9 }), n13.setParameters({ color: r15 }), l16.setParameters({ color: a14 });
    }), this._createManipulator(), this.forEachManipulator((t10) => this._tool.manipulators.add(t10));
  }
  destroy() {
    this._themeHandle = l(this._themeHandle), this._manipulator.applyObjectTransform = I3, this.forEachManipulator((t9) => {
      this._tool.manipulators.remove(t9), t9.destroy();
    });
  }
  forEachManipulator(t9) {
    t9(this._manipulator, A5.TRANSLATE_Z);
  }
  createManipulatedObjectDragPipeline(t9, e17, i9) {
    if (!e17.operations)
      return e2();
    const a14 = e17.operations.data.spatialReference;
    return n8(e17, i9, (e18) => this.createDragPipeline((i10, r14, a15, o11, s6) => ({ steps: r14, cancel: a15 } = t9(i10, r14, a15, o11, s6), e18(i10, r14, a15)), a14));
  }
  createDragPipeline(t9, e17) {
    const i9 = this._view;
    return p5(this._manipulator, (r14, a14, o11, s6, n13) => {
      const l16 = a14.next((t10) => ({ ...t10, manipulatorType: A5.TRANSLATE_Z })).next(N(i9, r14.renderLocation, e17)).next(j2());
      t9(r14, l16, o11, s6, n13);
    });
  }
  get radius() {
    return this._radius;
  }
  set radius(t9) {
    t9 !== this._radius && (this._radius = t9, this._updateManipulator());
  }
  _updateManipulator() {
    const t9 = this._settings, e17 = this._radius / a9, i9 = t9.zManipulator.height * e17, r14 = t9.zManipulator.coneHeight * e17, a14 = t9.zManipulator.coneWidth * e17, o11 = t9.zManipulator.width * e17, s6 = [r3(0, 0, 0), r3(0, 0, i9)], u14 = [r3(0, 0, 0), r3(0, 0, i9 + r14)], d7 = (t10) => {
      const e18 = e6();
      if (i3(e18, e18, [0, 0, i9]), l3(e18, e18, Math.PI / 2), t10) {
        const i10 = 1 + 2 * t10 / a14;
        f2(e18, e18, [i10, i10, i10]);
      }
      return e18;
    }, p13 = d7(0), { materialUnfocused: h13, materialFocused: f10, materialOccludedUnfocused: _4, materialOccludedFocused: j7 } = this._materials, v8 = pt(h13, s6, o11 / 2, 16, false), g10 = at(h13, r14, a14 / 2, 16, false);
    g10.transformation = p13, this._manipulator.renderObjects = [new e10(g10, t5.Unfocused), new e10(v8, t5.Unfocused), new e10(g10.instantiate({ material: f10 }), t5.Focused), new e10(v8.instantiate({ material: f10 }), t5.Focused), new e10(g10.instantiate({ material: _4 }), t5.Unfocused), new e10(v8.instantiate({ material: _4 }), t5.Unfocused), new e10(g10.instantiate({ material: j7 }), t5.Focused), new e10(v8.instantiate({ material: j7 }), t5.Focused)], this._manipulator.radius = o11 / 2 + 2, this._manipulator.collisionType = { type: "line", paths: [u14] };
  }
  _createManipulator() {
    const t9 = this._view, e17 = new ee({ view: t9, autoScaleRenderObjects: false, worldSized: false, selectable: false, cursor: "ns-resize", elevationInfo: this.elevationInfo, worldOriented: true, collisionPriority: 1.6 });
    e17.applyObjectTransform = (e18) => {
      const i9 = t9.state.camera, r14 = H4;
      t9.renderCoordsHelper.toRenderCoords(this._manipulator.elevationAlignedLocation, r14);
      const o11 = U(i9.eye, r14), s6 = i9.computeRenderPixelSizeAtDist(o11), n13 = e4(S6, r14, i9.eye);
      z3(n13, n13);
      const l16 = L6;
      t9.renderCoordsHelper.worldUpAtPosition(H4, l16);
      const c13 = Math.abs(P2(n13, l16)), m8 = _(S6, n13, l16), j7 = _(S6, m8, l16), w6 = e5(c13, 0.01, 1), v8 = 1 - Math.sqrt(1 - w6 * w6) / w6 / i9.fullWidth, g10 = this._settings, M8 = this._radius / a9, U5 = g10.zManipulator.width * M8;
      g(j7, z3(j7, j7), (1 / v8 - 1) * o11 + s6 * U5), e18[12] -= S6[0], e18[13] -= S6[1], e18[14] -= S6[2];
    }, this._manipulator = e17, this._updateManipulator();
  }
  get test() {
    return { manipulator: this._manipulator };
  }
};
function D5(i9, r14, a14) {
  const o11 = L2(i9, a14);
  return o11.a *= r14, u3.toUnitRGBA(o11);
}
var H4 = n();
var S6 = n();
var L6 = n();
var I3 = () => {
};

// node_modules/@arcgis/core/views/3d/interactive/editingTools/manipulations/MoveManipulation.js
var u12 = class extends t8 {
  constructor(a14) {
    super(), this._handles = new r(), this._interactive = true;
    const { tool: t9, view: n13, snapToScene: e17, radius: s6 } = a14;
    this._view = n13, this.xyManipulation = new O4({ tool: t9, view: n13, snapToScene: e17, radius: s6 }), this.xyAxisManipulation = new C3({ tool: t9, view: n13, radius: s6 }), this.zManipulation = new C4({ tool: t9, view: n13, radius: s6 }), this.xyManipulation.available = a14.xyAvailable, this.xyAxisManipulation.available = a14.xyAxisAvailable, this.zManipulation.available = a14.zAvailable, this._autoHideXYAxis(), this.forEachManipulator((i9) => this._handles.add(i9.events.on("grab-changed", () => this._updateManipulatorInteractivity())));
  }
  destroy() {
    this._handles.destroy(), this.xyManipulation.destroy(), this.xyAxisManipulation.destroy(), this.zManipulation.destroy();
  }
  createManipulatedObjectDragPipeline(i9, t9, n13) {
    return o([this.xyManipulation.createManipulatedObjectDragPipeline((a14, t10, n14, e17, s6) => i9(c11.XY, a14, t10, n14, e17, s6), t9, n13), this.xyAxisManipulation.createManipulatedObjectDragPipeline((a14, t10, n14, e17, s6) => i9(c11.XY_AXIS, a14, t10, n14, e17, s6), t9, n13), this.zManipulation.createManipulatedObjectDragPipeline((a14, t10, n14, e17, s6) => i9(c11.Z, a14, t10, n14, e17, s6), t9, n13)]);
  }
  createDragPipeline(i9, t9, n13, e17) {
    return o([this.xyManipulation.createDragPipeline((a14, t10, n14, e18, s6) => i9(c11.XY, a14, t10, n14, e18, s6), t9, n13, e17), this.xyAxisManipulation.createDragPipeline((a14, t10, n14, e18, s6) => i9(c11.XY_AXIS, a14, t10, n14, e18, s6), t9, n13, e17), this.zManipulation.createDragPipeline((a14, t10, n14, e18, s6) => i9(c11.Z, a14, t10, n14, e18, s6), n13)]);
  }
  set snapToScene(i9) {
    this.xyManipulation.snapToScene = i9;
  }
  set angle(i9) {
    this.xyAxisManipulation.angle = i9;
  }
  set interactive(i9) {
    this._interactive !== i9 && (this._interactive = i9, this._updateManipulatorInteractivity());
  }
  set radius(i9) {
    this.xyAxisManipulation.radius = i9, this.xyManipulation.radius = i9, this.zManipulation.radius = i9;
  }
  set displayScale(i9) {
    this.xyManipulation.displayScale = i9, this.xyAxisManipulation.displayScale = i9;
  }
  forEachManipulator(i9) {
    this.xyManipulation.forEachManipulator((a14) => i9(a14, A5.TRANSLATE_XY)), this.xyAxisManipulation.forEachManipulator((a14) => i9(a14, A5.TRANSLATE_XY)), this.zManipulation.forEachManipulator((a14) => i9(a14, A5.TRANSLATE_Z));
  }
  get _xyAxisVisible() {
    const i9 = this.xyManipulation.someManipulator((i10) => i10.focused) || this.xyAxisManipulation.someManipulator((i10) => i10.focused);
    return this._view.inputManager && "touch" === this._view.inputManager.latestPointerType || i9;
  }
  _autoHideXYAxis() {
    const i9 = this.xyAxisManipulation, a14 = this.xyManipulation;
    if (has("esri-mobile"))
      return;
    const n13 = [];
    a14.forEachManipulator((i10) => n13.push(i10)), i9.forEachManipulator((i10) => n13.push(i10));
    const e17 = () => {
      const a15 = [];
      this._xyAxisVisible || i9.forEachManipulator((i10) => a15.push(i10.disableDisplay())), this._handles.remove(h11), this._handles.add(a15, h11);
    };
    for (const t9 of n13)
      this._handles.add(t9.events.on("focus-changed", e17));
    this._view.inputManager && this._handles.add(p(() => {
      var _a;
      return (_a = this._view.inputManager) == null ? void 0 : _a.latestPointerType;
    }, e17)), e17();
  }
  _updateManipulatorInteractivity() {
    const i9 = this.grabbing;
    this.forEachManipulator((a14) => {
      a14.interactive = !i9 && this._interactive || a14.grabbing;
    });
  }
  static radiusForSymbol(i9) {
    const a14 = null != i9 && "point-3d" === i9.type && i9.symbolLayers;
    return !!a14 && a14.some((i10) => "icon" === i10.type) ? o9 : a9;
  }
};
var h11 = "disable-xy-axis-display";
var c11;
!function(i9) {
  i9[i9.XY = 0] = "XY", i9[i9.XY_AXIS = 1] = "XY_AXIS", i9[i9.Z = 2] = "Z";
}(c11 || (c11 = {}));

// node_modules/@arcgis/core/views/3d/interactive/editingTools/manipulations/MoveXYObjectManipulation.js
var l14 = class extends t8 {
  constructor(t9) {
    var _a, _b;
    super(), this._view = t9.view, this._tool = t9.tool, this._object = t9.object, this._manipulator = (_b = (_a = this._object).createManipulator) == null ? void 0 : _b.call(_a, { selectable: true, cursor: "move" }), this.forEachManipulator((t10) => this._tool.manipulators.add(t10));
  }
  destroy() {
    this.forEachManipulator((t9) => {
      this._tool.manipulators.remove(t9), t9.destroy();
    }), this._tool = null, this._view = null, this._manipulator = null;
  }
  forEachManipulator(t9) {
    this._manipulator && t9(this._manipulator, A5.TRANSLATE_XY);
  }
  createManipulatedObjectDragPipeline(t9) {
    return n8(this._object, t9, (t10) => this.createDragPipeline(t10));
  }
  createDragPipeline(e17) {
    if (!this._manipulator)
      return e2();
    const o11 = this._view;
    return p5(this._manipulator, (t9, r14, a14, l16, p13) => {
      var _a;
      const h13 = (_a = this._object.operations) == null ? void 0 : _a.data.spatialReference, u14 = r14.next((t10) => h13 ? t10 : null).next(D2(p13, o11, this._object, h13)).next(v5()).next(j2());
      e17(t9, u14, a14, l16, p13);
    });
  }
};

// node_modules/@arcgis/core/views/3d/interactive/editingTools/move/MoveTool3D.js
var C5 = class {
  constructor(t9) {
    this.objects = t9, this.type = "move-start";
  }
};
var F6 = class {
  constructor(t9, e17, i9) {
    this.dx = t9, this.dy = e17, this.objects = i9, this.type = "move";
  }
};
var G5 = class {
  constructor(t9) {
    this.objects = t9, this.type = "move-stop";
  }
};
var V3 = "manipulators";
var L7 = class extends l8 {
  constructor(t9) {
    super(t9), this._infos = /* @__PURE__ */ new Map(), this.events = new o2(), this.objects = new V(), this.enableZ = true, this.sketchOptions = new l9(), this.type = "move-3d", this.tooltip = null, this._updatingHandles = new h5(), this._moveManipulation = null, this._latestTooltipInfo = null, this._translateTooltipInfo = null, this._translateXYTooltipInfo = null, this._translateZTooltipInfo = null;
  }
  initialize() {
    const { view: t9 } = this;
    this.addHandles([this.objects.on("change", (t10) => {
      t10.removed.forEach((t11) => this.removeHandles(t11)), this._updateObjectInfos(t10), this._setupFastTransformUpdates(t10.added), this._refreshManipulators();
    }), d2(() => this.sketchOptions.tooltips.effectiveEnabled, (e18) => {
      this.tooltip = e18 ? new u9({ info: this._latestTooltipInfo, view: t9 }) : u(this.tooltip);
    }, A2)]);
    const e17 = this.objects.toArray();
    this._updateObjectInfos({ added: e17, removed: [] }), this._setupFastTransformUpdates(e17), this._refreshManipulators(), this.finishToolCreation();
  }
  destroy() {
    this.tooltip = u(this.tooltip), this._moveManipulation = u(this._moveManipulation), this._set("view", null), this._updatingHandles.destroy();
  }
  get updating() {
    return this._updatingHandles.updating;
  }
  reset() {
  }
  _updateObjectInfos({ added: t9, removed: e17 }) {
    for (const i9 of t9) {
      if (r9(i9) !== P4.SUPPORTED)
        continue;
      const t10 = new N3(i9);
      this._infos.set(i9, t10);
    }
    for (const i9 of e17)
      this._infos.delete(i9);
  }
  _setupFastTransformUpdates(t9) {
    const { view: e17 } = this;
    for (const i9 of t9) {
      const t10 = this._infos.get(i9);
      this.addHandles(a7(t10.object, e17), i9);
    }
  }
  _refreshManipulators() {
    if (this.removeHandles(V3), this._moveManipulation = u(this._moveManipulation), this.manipulators.removeAll(), 0 === this._infos.size)
      return;
    const t9 = Array.from(this._infos.values());
    this._createManipulators(t9), this._createVisualElements(t9), this._updateMoveManipulation(t9);
  }
  _createManipulators(t9) {
    for (const e17 of t9) {
      const i9 = e17.object;
      e17.manipulationXY = new l14({ tool: this, view: this.view, object: i9 }), e17.manipulationXY.forEachManipulator((t10) => {
        this.addHandles([t10.events.on("immediate-click", (t11) => {
          this.events.emit("immediate-click", { ...t11, object: i9 }), t11.stopPropagation();
        }), t10.events.on("grab-changed", ({ action: t11 }) => {
          "start" === t11 ? this._showTooltip(c11.XY) : this._hideTooltip();
        })], V3);
      }), this.addHandles(e17.manipulationXY.createDragPipeline((e18, i10, o11, n13) => this._buildDragEventPipeline(t9, c11.XY, e18, i10, o11, n13)), V3);
    }
    this._createMoveManipulation(t9);
  }
  _createMoveManipulation(t9) {
    var _a;
    const e17 = new u12({ tool: this, view: this.view, snapToScene: false, xyAvailable: true, xyAxisAvailable: true, zAvailable: true, radius: 1 === t9.length ? u12.radiusForSymbol((_a = t9[0].object.graphic) == null ? void 0 : _a.symbol) : a9 });
    this._moveManipulation = e17, e17.elevationInfo = { mode: "absolute-height", offset: 0 }, e17.forEachManipulator((t10) => {
      this.addHandles(t10.events.on("immediate-click", (i10) => {
        const o12 = this.objects.at(0);
        !e17.zManipulation.hasManipulator(t10) && 1 === this.objects.length && o12 && this.events.emit("immediate-click", { ...i10, object: o12 }), i10.stopPropagation();
      }), V3);
    });
    const i9 = (t10) => (e18) => {
      this.addHandles([e18.events.on("focus-changed", ({ action: e19 }) => {
        "focus" === e19 ? this._showTooltip(t10) : this._hideTooltip();
      }), e18.events.on("grab-changed", () => {
        this._latestTooltipInfo && (this._latestTooltipInfo.distance = h7);
      })], V3);
    };
    this._moveManipulation.xyManipulation.forEachManipulator(i9(c11.XY)), this._moveManipulation.xyAxisManipulation.forEachManipulator(i9(c11.XY_AXIS)), this._moveManipulation.zManipulation.forEachManipulator(i9(c11.Z));
    const o11 = () => this._updateMoveManipulation(t9);
    for (const s6 of t9)
      this.addHandles([s6.object.on("committed", o11), d2(() => s6.object.visible, o11)], V3);
    const n13 = t9[t9.length - 1];
    this.addHandles(n13.object.on("committed", () => this._updateMoveManipulationAngle(n13)), V3);
    const { object: a14 } = n13, { operations: r14 } = a14;
    if (r14) {
      const i10 = a14.graphic;
      this.addHandles(e17.createDragPipeline((e18, i11, o12, n14, s6) => this._buildDragEventPipeline(t9, e18, i11, o12, n14, s6), a14.elevationInfo, r14.data.spatialReference, i10), V3);
    }
    this._updateMoveManipulationAngle(n13);
  }
  _createVisualElements(t9) {
    for (const e17 of t9) {
      const i9 = e17.object, n13 = l12({ view: this.view, object: i9, forEachManipulator: (t10) => {
        var _a, _b;
        (_a = e17.manipulationXY) == null ? void 0 : _a.forEachManipulator(t10), (_b = this._moveManipulation) == null ? void 0 : _b.forEachManipulator(t10);
      }, onManipulatorsChanged: () => e2() });
      null != n13 && (e17.geometryRepresentation = n13.visualElement, e17.geometryRepresentation instanceof w4 && this.addHandles([e17.geometryRepresentation.events.on("attachment-origin-changed", () => {
        e17.object.isDraped || this._updateMoveManipulation(t9);
      }), d2(() => e17.object.isDraped, () => this._updateMoveManipulation(t9))], V3), this.addHandles(n13, V3));
    }
  }
  _updateMoveManipulationAngle(t9) {
    this._moveManipulation && (this._moveManipulation.angle = r11(t6(t9.object)));
  }
  _updateMoveManipulation(t9) {
    const e17 = e7(0, 0, 0, this.view.spatialReference);
    let i9 = 0, o11 = false;
    const n13 = this._moveManipulation;
    if (n13) {
      for (const n14 of t9) {
        if (!n14.object.visible)
          continue;
        this.enableZ && n4(n14.object.operations, n14.object.elevationInfo) && (o11 = true);
        const t10 = n14.geometryRepresentation instanceof w4 && !n14.object.isDraped ? n14.geometryRepresentation.attachmentOrigin : n14.object.origin;
        if (null != t10) {
          const { x: o12, y: n15, z: s6 } = t10;
          e17.x += o12, e17.y += n15, s6 && (e17.z ?? (e17.z = 0), e17.z += s6), i9++;
        }
      }
      i9 > 0 ? (e17.x /= i9, e17.y /= i9, e17.z ?? (e17.z = 0), e17.z /= i9, n13.location = e17, n13.xyManipulation.available = true, n13.xyAxisManipulation.available = true, n13.zManipulation.available = o11) : n13.available = false;
    }
  }
  _buildDragEventPipeline(t9, e17, i9, o11, n13, s6) {
    const a14 = [], l16 = [];
    let r14 = null, p13 = null;
    const c13 = () => {
      for (const t10 of a14)
        t10.dragging = false;
      a14.length = 0, l16.length = 0, r14 = null, p13 = null, this._moveManipulation && (this._moveManipulation.interactive = true);
    };
    if (1 === t9.length && e17 === c11.XY) {
      const e18 = t9[0].object;
      ({ steps: o11, cancel: n13 } = this._buildSnappingPipelineSteps(e18, e18.elevationInfo, o11, n13, s6));
    }
    return n13 = n13.next((t10) => p13 == null ? void 0 : p13(t10)).next(() => (l16.length && this.events.emit("move-stop", new G5(l16)), this.destroyed || c13(), null)), { steps: o11 = o11.next((e18) => {
      var _a, _b;
      if ("start" === e18.action) {
        a14.length = 0, l16.length = 0;
        for (const e19 of t9)
          e19.dragging || !((_a = e19.manipulationXY) == null ? void 0 : _a.hasManipulator(i9)) && ((_b = e19.manipulationXY) == null ? void 0 : _b.grabbing) || (a14.push(e19), l16.push(e19.object), e19.dragging = true);
        if (0 !== l16.length && (this._moveManipulation && (this._moveManipulation.interactive = false), r14 = S3(l16), p13 = z5(l16), this.events.emit("move-start", new C5(l16)), this.destroyed))
          return null;
      }
      return 0 !== l16.length ? e18 : null;
    }).next((t10) => r14 == null ? void 0 : r14(t10)).next((t10) => (this._updateMoveTooltip(e17, t10), t10)).next((t10) => {
      switch (t10.action) {
        case "start":
        case "update":
          if (t10.translationX || t10.translationY || t10.translationZ) {
            const e18 = this.view.toScreen(t10.mapStart), i10 = this.view.toScreen(t10.mapEnd), o12 = i10.x - e18.x, n14 = i10.y - e18.y;
            if (this.events.emit("move", new F6(o12, n14, l16)), this.destroyed)
              return null;
          }
          break;
        case "end":
          if (this.events.emit("move-stop", new G5(l16)), this.destroyed)
            return null;
          c13();
      }
      return null;
    }), cancel: n13 };
  }
  _showTooltip(t9) {
    this._updateMoveTooltip(t9), this._latestTooltipInfo && (this._latestTooltipInfo.distance = h7);
  }
  _hideTooltip() {
    var _a;
    (_a = this.tooltip) == null ? void 0 : _a.clear(), this._latestTooltipInfo = null;
  }
  _updateMoveTooltip(t9, e17) {
    const { sketchOptions: i9, tooltip: o11 } = this;
    switch (t9) {
      case c11.XY:
        this._latestTooltipInfo = this._translateTooltipInfo ?? (this._translateTooltipInfo = new r10({ sketchOptions: i9 })), q7(this._latestTooltipInfo, e17, (t10, e18) => m3(t10, e18));
        break;
      case c11.XY_AXIS:
        this._latestTooltipInfo = this._translateXYTooltipInfo ?? (this._translateXYTooltipInfo = new l11({ sketchOptions: i9 })), q7(this._latestTooltipInfo, e17, (t10, i10) => y4(m3(t10, i10), a10(e17)));
        break;
      case c11.Z:
        this._latestTooltipInfo = this._translateZTooltipInfo ?? (this._translateZTooltipInfo = new a5({ sketchOptions: i9 })), q7(this._latestTooltipInfo, e17, y5);
    }
    this._latestTooltipInfo.sketchOptions = i9, o11 && (o11.info = this._latestTooltipInfo);
  }
  _buildSnappingPipelineSteps(t9, e17, i9, o11, n13) {
    const s6 = t6(t9);
    if (null == s6 || "point" !== s6.type && "mesh" !== s6.type)
      return { steps: i9, cancel: o11 };
    const a14 = ("point" === s6.type ? s6 : s6.anchor).clone(), l16 = new e12({ elevationInfo: e17, pointer: n13, editGeometryOperations: E4.fromGeometry(a14, this.view.state.viewingMode), visualizer: new O2(), excludeFeature: t9.graphic }), r14 = this.snappingManager, { snappingStep: p13, cancelSnapping: c13 } = f7({ snappingContext: l16, snappingManager: r14, updatingHandles: this._updatingHandles });
    return o11 = o11.next(c13), { steps: i9 = i9.next((e18) => {
      a14.z = h4(this.view, a14, t9.elevationInfo, { mode: "absolute-height", offset: 0 });
      return { ...e18, snapOrigin: l16.coordinateHelper.pointToVector(a14) };
    }).next(...p13), cancel: o11 };
  }
};
e([y({ constructOnly: true, nonNullable: true })], L7.prototype, "view", void 0), e([y()], L7.prototype, "objects", void 0), e([y({ constructOnly: true, nonNullable: true })], L7.prototype, "enableZ", void 0), e([y({ constructOnly: true, type: l9 })], L7.prototype, "sketchOptions", void 0), e([y({ constructOnly: true })], L7.prototype, "snappingManager", void 0), e([y()], L7.prototype, "type", void 0), e([y()], L7.prototype, "updating", null), e([y()], L7.prototype, "tooltip", void 0), L7 = e([a("esri.views.3d.interactive.editingTools.move.MoveTool3D")], L7);
var N3 = class {
  constructor(t9) {
    this.object = t9, this.geometryRepresentation = null, this.manipulationXY = null, this.dragging = false;
  }
};
function q7(t9, e17, i9) {
  if (null == e17 || "end" === e17.action)
    return;
  const { mapStart: o11, mapEnd: n13 } = e17, a14 = i9(o11, n13);
  t9.distance = null != a14 ? a14 : h7;
}

// node_modules/@arcgis/core/views/3d/interactive/editingTools/reshape/edgeOffsetUtils.js
function a11(e17, r14, o11) {
  const n13 = "on-the-ground" === o11.mode ? Z2.XY : Z2.XYZ;
  return new Y(e17, n13, r14, 0);
}
function m7(e17, r14, n13) {
  const t9 = n();
  if (!e17.renderCoordsHelper.toRenderCoords(r14, t9))
    return null;
  const s6 = j5(e17, r14, F2(n13.plane)), f10 = j5(e17, r14, n13.edgeDirection);
  if (null == s6 || null == f10)
    return null;
  const u14 = _(n(), s6, f10);
  return j(t9, u14, E2());
}
function j5(e17, r14, o11) {
  const t9 = e7(r14.x + o11[0], r14.y + o11[1], r14.z + o11[2], r14.spatialReference), s6 = n(), i9 = n();
  return e17.renderCoordsHelper.toRenderCoords(r14, s6) && e17.renderCoordsHelper.toRenderCoords(t9, i9) ? J(i9, s6, i9) : null;
}
function g8(e17, t9, s6) {
  const l16 = F2(e17), d7 = J(n(), t9, s6), f10 = _(n(), d7, l16), u14 = _(n(), d7, f10);
  return t3(d7[0], d7[1], d7[2], 0, f10[0], f10[1], f10[2], 0, u14[0], u14[1], u14[2], 0, 0, 0, 0, 1);
}
function C6(r14, o11, n13) {
  const c13 = n13.projectToRenderScreen(r14, x2()), i9 = n13.projectToRenderScreen(o11, x2());
  return null != c13 && null != i9 ? v2(e4(c13, c13, i9)) : 0;
}

// node_modules/@arcgis/core/views/interactive/tooltip/ReshapeTooltipInfos.js
var p10 = class extends r8 {
  constructor(o11) {
    super(o11), this.type = "reshape-edge-offset", this.distance = h7, this.area = null, this.totalLength = null;
  }
};
e([y()], p10.prototype, "type", void 0), e([y()], p10.prototype, "distance", void 0), e([y()], p10.prototype, "area", void 0), e([y()], p10.prototype, "totalLength", void 0), p10 = e([a("esri.views.interactive.tooltip.ReshapeTooltipInfos.ReshapeEdgeOffsetTooltipInfo")], p10);

// node_modules/@arcgis/core/views/3d/interactive/editingTools/reshape/ReshapeOperation.js
var Dt = class extends S {
  get _operations() {
    return this.object.operations;
  }
  constructor(t9) {
    super(t9), this._selectedIndex = 0, this._manipulatorHandles = new r(), this._manipulatorInfos = [], this._numGrabbing = 0, this._numDragging = 0, this._reshapeEventState = zt.NONE, this._updatingHandles = new h5(), this._recreatingManipulators = false, this._settings = new j3({ getTheme: () => this.view.effectiveTheme }), this.events = new o2(), this._latestTooltipInfo = null, this._translateTooltipInfo = null, this._translateXYTooltipInfo = null, this._translateZTooltipInfo = null, this._translateVertexTooltipInfo = null, this._translateVertexXYTooltipInfo = null, this._translateVertexZTooltipInfo = null, this._edgeOffsetTooltipInfo = null, this._vertexLaserLineVisualElement = null;
  }
  initialize() {
    const { view: t9 } = this, e17 = this._settings.manipulators, i9 = e17.vertex;
    this._vertexManipulatorMaterial = f5(E(i9.color), i9.renderOccluded), this._vertexManipulatorOutlineMaterial = h8(E(i9.outlineColor), i9.renderOccluded), this._vertexManipulatorHoverOutlineMaterial = h8(E(i9.hoverOutlineColor), i9.renderOccluded);
    const n13 = e17.edge;
    this._edgeManipulatorMaterial = f5(E(n13.color), n13.renderOccluded), this._edgeManipulatorOutlineMaterial = h8(E(n13.outlineColor), n13.renderOccluded);
    const o11 = e17.edgeOffset;
    this._edgeOffsetManipulatorMaterial = f5(E(o11.color), o11.renderOccluded, false), this._edgeOffsetManipulatorHoverMaterial = f5(E(o11.hoverColor), o11.renderOccluded, false);
    const s6 = e17.selected;
    this._selectedManipulatorMaterial = f5(E(s6.color), s6.renderOccluded), this._selectedManipulatorOutlineMaterial = h8(E(s6.outlineColor), s6.renderOccluded), this._selectedManipulatorHoverOutlineMaterial = h8(E(s6.hoverOutlineColor), s6.renderOccluded), this.tooltip = new u9({ view: t9 }), this.addHandles([d2(() => {
      const t10 = this._settings.manipulators;
      return { vertexSettings: t10.vertex, edgeSettings: t10.edge, edgeOffsetSettings: t10.edgeOffset, selectedSettings: t10.selected };
    }, ({ vertexSettings: t10, edgeSettings: e18, edgeOffsetSettings: i10, selectedSettings: a14 }) => {
      t10.applyColor(this._vertexManipulatorMaterial), t10.applyOutline(this._vertexManipulatorOutlineMaterial), t10.applyHoverOutline(this._vertexManipulatorHoverOutlineMaterial), e18.applyColor(this._edgeManipulatorMaterial), e18.applyOutline(this._edgeManipulatorOutlineMaterial), i10.applyColor(this._edgeOffsetManipulatorMaterial), i10.applyHover(this._edgeOffsetManipulatorHoverMaterial), a14.applyColor(this._selectedManipulatorMaterial), a14.applyOutline(this._selectedManipulatorOutlineMaterial), a14.applyHoverOutline(this._selectedManipulatorHoverOutlineMaterial);
    }), d2(() => this.object.visible, (t10) => {
      for (const e18 of this._manipulatorInfos)
        e18.manipulator.available = t10, "edge" === e18.type && "edgeManipulator" in e18 && (e18.edgeManipulator.available = t10);
    }), d2(() => ({ labels: this._segmentLabels, enabled: this.sketchOptions.labels.enabled, edgeOffsetEnabled: this.enableEdgeOffset }), ({ labels: t10, enabled: e18, edgeOffsetEnabled: i10 }) => {
      null != t10 && (t10.visible = e18, t10.edgeDistance = i10 ? "far" : "default");
    }, P), d2(() => this.sketchOptions.tooltips.effectiveEnabled, (t10) => {
      this.tooltip.info = t10 ? this._latestTooltipInfo : null;
    }, P), v(() => this._operations, "vertex-update", (t10) => {
      this._updateManipulatorPositions(t10.vertices);
    }, { onListenerAdd: () => this._recreateManipulators() }), v(() => {
      var _a;
      return (_a = this._operations) == null ? void 0 : _a.data;
    }, "change", (t10) => {
      "undo" !== t10.operation && "redo" !== t10.operation || this._recreateManipulators();
    })]);
  }
  destroy() {
    this._segmentLabels = u(this._segmentLabels), this.tooltip = u(this.tooltip), this._removeManipulators(), this._updatingHandles.destroy();
  }
  get updating() {
    return this._updatingHandles.updating;
  }
  get manipulators() {
    return this.tool.manipulators;
  }
  get view() {
    return this.tool.view;
  }
  get object() {
    return this.tool.object;
  }
  get enableZShape() {
    return this.tool.enableZShape;
  }
  get enableZVertex() {
    return this.tool.enableZVertex;
  }
  get enableMoveObject() {
    return this.tool.enableMoveObject;
  }
  get enableMidpoints() {
    return this.tool.enableMidpoints;
  }
  get enableEdgeOffset() {
    return this.tool.enableEdgeOffset;
  }
  get sketchOptions() {
    return this.tool.sketchOptions;
  }
  get _accentColor() {
    return this.view.effectiveTheme.accentColor;
  }
  removeSelectedVertices() {
    const t9 = this._manipulatorInfos.filter((t10) => t10.manipulator.selected && "vertex" === t10.type);
    this._removeVertices(t9);
  }
  onManipulatorSelectionChanged() {
    this.events.emit("manipulators-changed");
  }
  _removeManipulators() {
    this._manipulatorHandles.removeAll(), this._moveManipulation = u(this._moveManipulation), this._objectMoveManipulation = u(this._objectMoveManipulation), this.manipulators.removeAll(), this._manipulatorInfos = [], this._numGrabbing = 0, this._numDragging = 0;
  }
  _createManipulators(t9) {
    if (null == this._operations)
      return;
    const e17 = this.object.elevationInfo;
    for (const i9 of this._operations.data.components) {
      const a14 = t9 == null ? void 0 : t9.byComponentIndex.get(i9.index);
      for (const t10 of i9.vertices) {
        const i10 = a14 == null ? void 0 : a14.has(t10.index);
        this._createVertexOrEdgeManipulator(t10, e17, i10);
      }
      for (const t10 of i9.edges)
        this._createVertexOrEdgeManipulator(t10, e17);
    }
    this._createObjectMoveManipulation(), this._createMoveManipulation(e17), this._createVisualElements();
  }
  get canRedo() {
    return null != this._operations && this._operations.canRedo;
  }
  get canUndo() {
    return null != this._operations && this._operations.canUndo;
  }
  redo() {
    var _a;
    return (_a = this._operations) == null ? void 0 : _a.redo();
  }
  undo() {
    var _a;
    return this.events.emit("undo"), (_a = this._operations) == null ? void 0 : _a.undo();
  }
  _recreateManipulators() {
    var _a, _b;
    if (!this._recreatingManipulators) {
      if (this._recreatingManipulators = true, this._removeManipulators(), this._hideTooltip(), this._operations && ((_b = (_a = this._segmentLabels) == null ? void 0 : _a.context) == null ? void 0 : _b.editGeometryOperations) === this._operations || (this._segmentLabels = u(this._segmentLabels)), this._createManipulators(), !this._segmentLabels && this._operations) {
        const t9 = this.sketchOptions.labels;
        this._segmentLabels = new a6({ context: { view: this.view, editGeometryOperations: this._operations, elevationInfo: this.object.elevationInfo, labelOptions: t9 }, visible: t9.enabled });
      }
      this._recreatingManipulators = false;
    }
  }
  _perObjectManipulatorDragAction(t9, e17) {
    if ("end" === e17.action)
      return e17;
    let i9 = 0;
    const a14 = [], n13 = this._manipulatorInfos.some((t10) => "vertex" === t10.type && t10.manipulator.selected), o11 = t9 === Yt.SELECTED_OR_ALL && n13;
    for (const s6 of this._manipulatorInfos)
      "vertex" === s6.type && (s6.manipulator.grabbing || o11 && !s6.manipulator.selected || a14.push(s6), i9++);
    this._moveVertices(a14, e17);
    if (a14.length === i9) {
      if (this._updateEventState(zt.MOVING), this.destroyed)
        return e17;
      this.events.emit("move", { type: "move", dx: e17.screenDeltaX, dy: e17.screenDeltaY, object: this.object });
    } else {
      if (this._updateEventState(zt.RESHAPING), this.destroyed)
        return e17;
      this.events.emit("reshape", { type: "reshape", object: this.object });
    }
    return e17;
  }
  _isMultiVertexSelection() {
    return this._manipulatorInfos.reduce((t9, e17) => "vertex" === e17.type && e17.manipulator.selected ? t9 + 1 : t9, 0) > 1;
  }
  _perVertexManipulatorDragAction(t9) {
    if (this._updateEventState(zt.RESHAPING), this.destroyed)
      return;
    const { mapDeltaX: e17, mapDeltaY: i9, mapDeltaZ: a14 } = t9;
    if (!e17 && !i9 && !a14)
      return;
    const n13 = [];
    for (const o11 of this._manipulatorInfos)
      "vertex" === o11.type && (o11.manipulator.selected && !o11.manipulator.grabbing || o11 === t9.info) && n13.push(o11);
    this._moveVertices(n13, t9, E3.ACCUMULATE_STEPS), this.events.emit("reshape", { type: "reshape", object: this.object });
  }
  _updateEventState(t9) {
    if (t9 === this._reshapeEventState)
      return false;
    switch (t9) {
      case zt.NONE:
        if (0 !== this._numGrabbing || 0 !== this._numDragging)
          return false;
        switch (this._reshapeEventState) {
          case zt.MOVING:
            this.events.emit("move", { type: "move-stop", dx: 0, dy: 0, object: this.object });
            break;
          case zt.RESHAPING:
            this.events.emit("reshape", { type: "reshape-stop", object: this.object });
        }
        break;
      case zt.MOVING:
        switch (this._reshapeEventState) {
          case zt.NONE:
            this.events.emit("move", { type: "move-start", dx: 0, dy: 0, object: this.object });
            break;
          case zt.RESHAPING:
            this.events.emit("reshape", { type: "reshape-stop", object: this.object }), this.destroyed || this.events.emit("move", { type: "move-start", dx: 0, dy: 0, object: this.object });
        }
        break;
      case zt.RESHAPING:
        switch (this._reshapeEventState) {
          case zt.NONE:
            this.events.emit("reshape", { type: "reshape-start", object: this.object });
            break;
          case zt.MOVING:
            this.events.emit("move", { type: "move-stop", dx: 0, dy: 0, object: this.object }), this.destroyed || this.events.emit("reshape", { type: "reshape-start", object: this.object });
        }
    }
    if (this.destroyed)
      return false;
    const e17 = this._reshapeEventState !== t9;
    return this._reshapeEventState = t9, e17;
  }
  _createObjectMoveManipulation() {
    const { tool: t9, view: e17, object: i9, _operations: a14 } = this;
    if (a14) {
      if (this._objectMoveManipulation = new l14({ tool: t9, view: e17, object: i9 }), this.enableMoveObject) {
        let t10 = null;
        this._manipulatorHandles.add(this._objectMoveManipulation.createDragPipeline((e18, i10, n13) => {
          i10.next((t11) => this._trackNumDragging(t11)).next((e19) => ("start" === e19.action && (t10 = a14.createUndoGroup()), e19)).next((t11) => this._perObjectManipulatorDragAction(Yt.ALL, t11)).next((t11) => (this._updateTranslateObjectTooltip(c11.XY, t11), t11)).next((e19) => {
            "end" === e19.action && (this._hideTooltip(), t10 = l(t10));
          }), n13.next(() => this._onDragCancel(true, () => t10 = l(t10)));
        })), this._objectMoveManipulation.forEachManipulator((t11) => this._manipulatorHandles.add(this._watchAndUpdateGrabState(t11, false)));
      } else
        this._objectMoveManipulation.forEachManipulator((t10) => {
          t10.grabbable = false, t10.cursor = null;
        });
      this._objectMoveManipulation.forEachManipulator((t10) => this._manipulatorHandles.add(t10.events.on("immediate-click", (t11) => {
        this._manipulatorInfos.some((t12) => t12.manipulator.selected) ? this._clearSelection() : this.events.emit("immediate-click", { ...t11, object: this.object }), t11.stopPropagation();
      })));
    }
  }
  _createMoveManipulation(t9) {
    var _a;
    const { object: e17, tool: i9, view: a14, _operations: n13 } = this;
    if (!n13)
      return;
    this._moveManipulation = new u12({ tool: i9, view: a14, xyAvailable: true, xyAxisAvailable: true, zAvailable: this.enableZShape && n4(e17.operations, e17.elevationInfo), snapToScene: false, radius: u12.radiusForSymbol((_a = e17.graphic) == null ? void 0 : _a.symbol) }), this._moveManipulation.forEachManipulator((t10) => this.addHandles([t10.events.on("immediate-click", (e18) => {
      this._moveManipulation.zManipulation.hasManipulator(t10) || this._manipulatorInfos.some((t11) => t11.manipulator.selected) || this.events.emit("immediate-click", { ...e18, object: this.object }), e18.stopPropagation();
    }), this._watchAndUpdateGrabState(t10, false)]));
    const o11 = (t10) => (e18) => {
      this.addHandles(e18.events.on("focus-changed", ({ action: e19 }) => {
        "focus" === e19 ? this._updateTranslateTooltip(t10) : this._hideTooltip();
      }));
    };
    this._moveManipulation.xyManipulation.forEachManipulator(o11(c11.XY)), this._moveManipulation.xyAxisManipulation.forEachManipulator(o11(c11.XY_AXIS)), this._moveManipulation.zManipulation.forEachManipulator(o11(c11.Z)), this._moveManipulation.elevationInfo = { mode: "absolute-height", offset: 0 };
    const s6 = n13.data.spatialReference;
    this.addHandles([this._moveManipulation.createDragPipeline((a15, o12, s7, l16, r14) => {
      const { snappingStep: p13, cancelSnapping: h13 } = f7({ predicate: (t10) => !!t10.info, snappingManager: i9.snappingManager, snappingContext: new e12({ editGeometryOperations: n13, elevationInfo: t9, pointer: r14, excludeFeature: e17.graphic, visualizer: new O2() }), updatingHandles: this._updatingHandles, useZ: false });
      return l16 = l16.next((t10) => (this._onDragCancel(), t10)).next(h13), { steps: s7 = s7.next((t10) => this._trackNumDragging(t10)).next((t10) => {
        const e18 = this._manipulatorInfos.filter((t11) => "vertex" === t11.type && t11.manipulator.selected);
        return t10.manipulatorType === A5.TRANSLATE_XY && 1 === e18.length ? { ...t10, info: e18[0], snapOrigin: e18[0].handle.pos } : t10;
      }).next(D(this.view, t9, e17.graphic ?? void 0)).next(...p13).next(v5()).next((t10) => this._perObjectManipulatorDragAction(Yt.SELECTED_OR_ALL, t10)).next((t10) => (this._updateTranslateTooltip(a15, t10), t10)), cancel: l16 };
    }, t9, s6, e17.graphic), d2(() => e17.visible, () => this._updateMoveManipulationPosition(), P), e17.on("committed", () => {
      this._recreatingManipulators || this._updateMoveManipulationPosition();
    }), d2(() => e17.isDraped, (t10) => {
      this._updateMoveManipulationPosition();
      const e18 = "align-move-manipulation";
      t10 ? this.addHandles(this.view.elevationProvider.on("elevation-change", () => this._updateMoveManipulationPosition()), e18) : this.removeHandles(e18);
    }, P)]);
  }
  _createVisualElements() {
    const { object: t9, view: e17 } = this, i9 = l12({ view: e17, object: t9, forEachManipulator: (t10) => {
      if (!this.destroyed && !this._recreatingManipulators) {
        this._objectMoveManipulation.forEachManipulator(t10), this._moveManipulation.forEachManipulator(t10);
        for (const e18 of this._manipulatorInfos)
          t10(e18.manipulator, A5.TRANSLATE_XY);
      }
    }, onManipulatorsChanged: (t10) => this.events.on("manipulators-changed", t10) });
    null != i9 && (this._outlineVisualElement = i9.visualElement instanceof w4 ? i9.visualElement : null);
    const a14 = this._outlineVisualElement;
    if (null != a14) {
      const e18 = () => {
        t9.isDraped || this._updateMoveManipulationPosition();
      };
      this._manipulatorHandles.add(v(() => a14.events, "attachment-origin-changed", e18, { onListenerAdd: e18 }));
    }
    this._manipulatorHandles.add(i9);
  }
  _createEdgeOffsetManipulator(t9, e17 = this.object.elevationInfo) {
    var _a;
    const i9 = this._operations;
    if (t9.component.vertices.length <= 2 || !i9)
      return null;
    const a14 = this._settings.manipulators.edgeOffset, n13 = a14.size / 2, o11 = n13 + a14.collisionPadding, l16 = n13 / o11, r14 = l16 * Math.sqrt(3) / 2;
    null == this._edgeOffsetManipulatorGeometryInside && (this._edgeOffsetManipulatorGeometryInside = wt(this._edgeOffsetManipulatorMaterial, r14, l16 / 2, l16 / 2, a14.height, a14.offset)), null == this._edgeOffsetManipulatorGeometryOutside && (this._edgeOffsetManipulatorGeometryOutside = wt(this._edgeOffsetManipulatorMaterial, -r14, l16 / 2, l16 / 2, a14.height, -a14.offset));
    const p13 = [new e10(this._edgeOffsetManipulatorGeometryInside.instantiate(), t5.Unfocused), new e10(this._edgeOffsetManipulatorGeometryInside.instantiate({ material: this._edgeOffsetManipulatorHoverMaterial }), t5.Focused), new e10(this._edgeOffsetManipulatorGeometryOutside.instantiate(), t5.Unfocused), new e10(this._edgeOffsetManipulatorGeometryOutside.instantiate({ material: this._edgeOffsetManipulatorHoverMaterial }), t5.Focused)], h13 = new ee({ view: this.view, renderObjects: p13, elevationInfo: "on-the-ground" !== e17.mode || y3((_a = this.object.graphic) == null ? void 0 : _a.symbol) ? { mode: "absolute-height", offset: 0 } : e17, worldOriented: false, focusMultiplier: 1, radius: o11, available: this.object.visible, collisionType: { type: "disc", direction: r3(0, 0, 1) }, collisionPriority: 1, metadata: { deleting: false } }), u14 = new ee({ view: this.view, worldSized: true, worldOriented: false, available: this.object.visible, collisionPriority: -10, cursor: this.enableMoveObject ? "move" : "default", metadata: { deleting: false } }), c13 = { manipulator: h13, handle: t9, locationUpdateHandle: null, type: "edge", selectedIndex: 0, edgeManipulator: u14, elevationInfo: e17, visibilityHandle: null };
    this._autoHideEdgeOffsetManipulator(c13, a14.minSquaredEdgeLength), this._updateEdgeOffsetManipulator(c13);
    const m8 = [];
    for (const s6 of [t9.leftVertex, t9.rightVertex]) {
      const t10 = this._getManipulatorInfoFromHandle(s6);
      null != t10 && m8.push(t10.manipulator.events.on("location-update", () => this._updateEdgeOffsetManipulator(c13)));
    }
    c13.locationUpdateHandle = o(m8), this._manipulatorHandles.add(c13.locationUpdateHandle, h13), this._manipulatorHandles.add([this._watchAndUpdateGrabState(h13, true), this._watchAndUpdateGrabState(u14, true)], h13), this._manipulatorHandles.add(p5(h13, this._createEdgeOffsetPipeline(c13, e17)), h13), this._manipulatorHandles.add(p5(u14, (t10, a15, n14, o12) => {
      if ("touch" === o12) {
        this._createEdgeOffsetPipeline(c13, e17)(t10, a15, n14);
      } else if (this.enableMoveObject) {
        const o13 = this.object.graphic, s6 = i9.data.spatialReference;
        a15.next((t11) => this._trackNumDragging(t11)).next(M2(this.view, t10.elevationAlignedLocation)).next(T(this.view, t10.elevationAlignedLocation, e17, s6, o13)).next(j2()).next(v5()).next((t11) => this._perObjectManipulatorDragAction(Yt.ALL, t11)).next((t11) => (this._updateTranslateObjectTooltip(c11.XY, t11), t11)).next((t11) => {
          "end" === t11.action && this._hideTooltip();
        }), n14.next(() => this._onDragCancel(!t10.metadata.deleting));
      }
    }), h13);
    const f10 = (t10) => {
      this._manipulatorInfos.some((t11) => t11.manipulator.selected) ? this._clearSelection() : this.events.emit("immediate-click", { ...t10, object: this.object }), t10.stopPropagation();
    };
    return this._manipulatorHandles.add([h13.events.on("immediate-click", f10), u14.events.on("immediate-click", f10), h13.events.on("focus-changed", ({ action: t10 }) => {
      const { sketchOptions: e18, tooltip: i10 } = this;
      if ("focus" === t10) {
        const t11 = this._edgeOffsetTooltipInfo ?? (this._edgeOffsetTooltipInfo = new p10({ sketchOptions: e18 }));
        t11.distance = h7, t11.sketchOptions = e18, this._updateTooltipAreaOrTotalLength(t11), this._latestTooltipInfo = t11, i10.info = e18.tooltips.effectiveEnabled ? this._latestTooltipInfo : null;
      } else
        this._hideTooltip();
    })], h13), this._manipulatorInfos.push(c13), this.manipulators.add(h13), this.manipulators.add(u14), this.events.emit("manipulators-changed"), c13;
  }
  _autoHideEdgeOffsetManipulator(t9, e17) {
    const i9 = t9.manipulator, a14 = t9.edgeManipulator, n13 = () => {
      t9.visibilityHandle = l(t9.visibilityHandle);
      const n14 = this._getManipulatorInfoFromHandle(t9.handle.leftVertex), o11 = this._getManipulatorInfoFromHandle(t9.handle.rightVertex), r14 = null != n14 && null != o11 && C6(n14.manipulator.renderLocation, o11.manipulator.renderLocation, this.view.state.camera) < e17;
      (!i9.focused && !a14.focused || r14) && (i9.grabbable = !r14, a14.grabbable = !r14, t9.visibilityHandle = o([i9.disableDisplay(), e2(() => {
        i9.grabbable = true, a14.grabbable = this.enableMoveObject;
      })]));
    };
    this._manipulatorHandles.add([i9.events.on("focus-changed", n13), a14.events.on("focus-changed", n13), e2(() => {
      l(t9.visibilityHandle), a14.metadata.deleting = true, this.manipulators.remove(a14);
    })], i9), n13();
  }
  _updateEdgeOffsetManipulator(t9) {
    if (!this._operations)
      return;
    this._updateManipulatorPosition(t9);
    const { coordinateHelper: e17 } = this._operations.data, i9 = m7(this.view, t9.manipulator.elevationAlignedLocation, a11(e17, t9.handle, t9.manipulator.elevationInfo)), a14 = this._getManipulatorInfoFromHandle(t9.handle.leftVertex), n13 = this._getManipulatorInfoFromHandle(t9.handle.rightVertex);
    if (null == a14 || null == n13)
      return;
    const o11 = a14.manipulator.renderLocation, s6 = n13.manipulator.renderLocation, l16 = null != i9 ? g8(i9, o11, s6) : o4;
    t9.manipulator.modelTransform = l16, t9.edgeManipulator.elevationAlignedLocation = t9.manipulator.elevationAlignedLocation, t9.edgeManipulator.modelTransform = l16;
    const r14 = s2(e4(Ft, o11, s6)) / 2;
    t9.edgeManipulator.collisionType = { type: "line", paths: [[[-r14, 0, 0], [r14, 0, 0]]] };
  }
  _createEdgeOffsetPipeline(t9, e17) {
    return (i9, a14, n13) => {
      const o11 = this._operations;
      if (!o11)
        return;
      this._clearSelection();
      const { step: s6, cleanup: l16 } = this._initializeEdgeOffset(t9, e17, o11);
      a14.next((t10) => this._trackNumDragging(t10)).next(M2(this.view, i9.elevationAlignedLocation)).next(s6).next(O(this.view)).next(k2(this.view, o11.data.spatialReference)).next(v5()).next(kt()).next(this._applyEdgeOffsetStep(t9)).next(this._showEdgeOffsetTooltip()).next((t10) => {
        "end" === t10.action && l16();
      }), n13.next(() => {
        i9.metadata.deleting || (l16(), this._onDragCancel());
      });
    };
  }
  _initializeEdgeOffset(t9, e17, i9) {
    const { view: n13 } = this, o11 = a11(i9.data.coordinateHelper, t9.handle, e17), l16 = i9.createUndoGroup(), p13 = m7(n13, t9.manipulator.elevationAlignedLocation, o11);
    if (o11.requiresSplitEdgeLeft) {
      const e18 = this._getManipulatorInfoFromHandle(t9.handle.leftVertex.leftEdge);
      null != e18 && this._splitEdgeManipulator(e18, 1);
    }
    if (o11.requiresSplitEdgeRight) {
      const e18 = this._getManipulatorInfoFromHandle(t9.handle.rightVertex.rightEdge);
      null != e18 && this._splitEdgeManipulator(e18, 0);
    }
    const d7 = () => new m({ paths: [[t9.handle.leftVertex.pos, t9.handle.rightVertex.pos]], spatialReference: i9.data.spatialReference }), u14 = this._settings, c13 = new w4({ view: n13, isDraped: this.object.isDraped, geometry: d7(), elevationInfo: t9.elevationInfo, width: u14.visualElements.lineObjects.outline.width, attached: false, isDecoration: true });
    let g10;
    const _4 = () => {
      this._cleanEdgeOffsetCollapsedEdges(t9), g10 = l(g10);
    }, v8 = this.events.on("undo", _4);
    return g10 = o([d2(() => E(this._accentColor), (t10) => c13.color = t10, P), l2(c13), d2(() => this.object.isDraped, (t10) => c13.isDraped = t10), this.object.on("committed", () => c13.geometry = d7()), l16, v8]), c13.attached = true, { step: (t10) => null == o11 || null == p13 ? (_4(), null) : { ...t10, operation: o11, plane: p13 }, cleanup: _4 };
  }
  _applyEdgeOffsetStep(t9) {
    return (e17) => {
      if (this.destroyed || null == e17.operation)
        return e17;
      this._updateEventState(zt.RESHAPING);
      const { mapDeltaX: i9, mapDeltaY: a14, mapDeltaZ: n13 } = e17;
      return (i9 || a14 || n13) && (this._offsetEdge(t9, e17), this.events.emit("reshape", { type: "reshape", object: this.object })), e17;
    };
  }
  _showEdgeOffsetTooltip() {
    return (t9) => {
      const { mapEnd: e17, signedDistance: i9, operation: a14 } = t9, { tooltip: n13, sketchOptions: o11 } = this;
      if (null != i9 && this._operations) {
        const n14 = this._edgeOffsetTooltipInfo ?? (this._edgeOffsetTooltipInfo = new p10({ sketchOptions: o11 }));
        n14.sketchOptions = o11, n14.distance = "end" === t9.action ? h7 : Ct(this.object.isDraped, i9 * a14.selectedArrow, e17, a14.plane, this._operations.data.coordinateHelper), this._updateTooltipAreaOrTotalLength(n14), this._latestTooltipInfo = n14;
      } else
        this._latestTooltipInfo = null;
      return n13.info = o11.tooltips.effectiveEnabled ? this._latestTooltipInfo : null, t9;
    };
  }
  _cleanEdgeOffsetCollapsedEdges(t9) {
    var _a, _b;
    if (!this._operations)
      return;
    const e17 = (_a = t9.handle.leftVertex.leftEdge) == null ? void 0 : _a.leftVertex, i9 = t9.handle.leftVertex, a14 = (_b = t9.handle.rightVertex.rightEdge) == null ? void 0 : _b.rightVertex, n13 = t9.handle.rightVertex, o11 = this._operations.data.coordinateHelper, s6 = [];
    if (e17 && o11.distance(e17.pos, i9.pos) < Xt) {
      const t10 = this._getManipulatorInfoFromHandle(i9);
      null != t10 && s6.push(t10);
    }
    if (o11.distance(i9.pos, n13.pos) < Xt || a14 && o11.distance(a14.pos, n13.pos) < Xt) {
      const t10 = this._getManipulatorInfoFromHandle(n13);
      null != t10 && s6.push(t10);
    }
    s6.length && this._removeVertices(s6);
  }
  _createVertexOrEdgeManipulator(t9, e17 = this.object.elevationInfo, i9 = false) {
    var _a;
    const { view: a14, _operations: n13 } = this;
    if (!n13)
      return null;
    const o11 = this._settings;
    if ("edge" === t9.type) {
      if (this.enableEdgeOffset)
        return this._createEdgeOffsetManipulator(t9, e17);
      if (!this.enableMidpoints)
        return null;
    }
    if (null == this._vertexManipulatorGeometry || null == this._vertexManipulatorOutlineGeometry) {
      const { size: t10, outlineSize: e18 } = Ut(o11.manipulators.vertex);
      this._vertexManipulatorGeometry = st(this._vertexManipulatorMaterial, t10, 16, 16), this._vertexManipulatorOutlineGeometry = st(this._vertexManipulatorOutlineMaterial, e18, 16, 16);
    }
    if (null == this._edgeManipulatorGeometry || null == this._edgeManipulatorOutlineGeometry) {
      const { size: t10, outlineSize: e18 } = Ut(o11.manipulators.edge);
      this._edgeManipulatorGeometry = st(this._edgeManipulatorMaterial, t10, 16, 16), this._edgeManipulatorOutlineGeometry = st(this._edgeManipulatorOutlineMaterial, e18, 16, 16);
    }
    const l16 = (_a = this._operations) == null ? void 0 : _a.data.type, r14 = "point" === l16 || "mesh" === l16 ? [] : [new e10(this._vertexManipulatorGeometry.instantiate(), Zt.Vertex | t5.Unselected), new e10(this._vertexManipulatorOutlineGeometry.instantiate(), Zt.Vertex | t5.Unfocused | t5.Unselected), new e10(this._vertexManipulatorOutlineGeometry.instantiate({ material: this._vertexManipulatorHoverOutlineMaterial }), Zt.Vertex | t5.Focused | t5.Unselected), new e10(this._vertexManipulatorGeometry.instantiate({ material: this._selectedManipulatorMaterial }), t5.Selected), new e10(this._vertexManipulatorOutlineGeometry.instantiate({ material: this._selectedManipulatorOutlineMaterial }), t5.Selected | t5.Unfocused), new e10(this._vertexManipulatorOutlineGeometry.instantiate({ material: this._selectedManipulatorHoverOutlineMaterial }), t5.Selected | t5.Focused)];
    this.enableMidpoints && r14.push(new e10(this._edgeManipulatorGeometry.instantiate({ material: this._vertexManipulatorMaterial }), Zt.Edge | t5.Focused | t5.Unselected), new e10(this._edgeManipulatorOutlineGeometry.instantiate({ material: this._vertexManipulatorHoverOutlineMaterial }), Zt.Edge | t5.Focused | t5.Unselected), new e10(this._edgeManipulatorGeometry.instantiate(), Zt.Edge | t5.Unfocused | t5.Unselected), new e10(this._edgeManipulatorOutlineGeometry.instantiate(), Zt.Edge | t5.Unfocused | t5.Unselected));
    const p13 = new ee({ view: a14, renderObjects: r14, elevationInfo: e17, focusMultiplier: 1, touchMultiplier: 1, available: this.object.visible, metadata: { deleting: false } });
    p13.selected = i9, this._setTypeSpecificManipulatorSettings(p13, t9, e17);
    const d7 = "edge" === t9.type ? { manipulator: p13, handle: t9, locationUpdateHandle: null, type: "edge", selectedIndex: 0 } : { manipulator: p13, handle: t9, type: "vertex", selectedIndex: 0 };
    if (this._manipulatorInfos.push(d7), this.manipulators.add(p13), this._updateManipulatorPosition(d7), "edge" === d7.type) {
      const t10 = [];
      for (const e18 of [d7.handle.leftVertex, d7.handle.rightVertex]) {
        const i10 = this._getManipulatorInfoFromHandle(e18);
        null != i10 && t10.push(i10.manipulator.events.on("location-update", () => this._updateManipulatorPosition(d7)));
      }
      d7.locationUpdateHandle = o(t10), this._manipulatorHandles.add(d7.locationUpdateHandle, p13);
    }
    this._manipulatorHandles.add(this._watchAndUpdateGrabState(p13, true), p13);
    const u14 = p5(p13, (t10, i10, a15, o12) => {
      let s6 = null;
      const { snappingStep: l17, cancelSnapping: r15 } = f7({ predicate: () => !this._isMultiVertexSelection(), snappingManager: this.tool.snappingManager, snappingContext: new e12({ editGeometryOperations: n13, elevationInfo: e17, pointer: o12, excludeFeature: this.object.graphic, visualizer: new O2() }), updatingHandles: this._updatingHandles, useZ: false });
      a15 = a15.next((e18) => (this._onDragCancel(!t10.metadata.deleting, () => s6 = l(s6)), e18)).next(r15), i10.next((t11) => this._trackNumDragging(t11)).next((t11) => {
        if ("start" === t11.action && this._operations && (s6 = this._operations.createUndoGroup()), "edge" === d7.type) {
          const e18 = this._splitEdgeManipulator(d7);
          return { ...t11, info: e18, snapOrigin: e18.handle.pos };
        }
        return { ...t11, info: d7, snapOrigin: d7.handle.pos };
      }).next(M2(this.view, t10.elevationAlignedLocation)).next(T(this.view, t10.elevationAlignedLocation, this.object.elevationInfo, t10.location.spatialReference, this.object.graphic)).next(D(this.view, e17, this.object.graphic ?? void 0)).next(...l17).next(v5()).next((e18) => {
        this._perVertexManipulatorDragAction(e18), "end" === e18.action && (s6 = l(s6)), this._updateTranslateVertexTooltip(t10, c11.XY, e18);
      });
    });
    return this._manipulatorHandles.add([u14, p13.events.on("immediate-click", (t10) => this._manipulatorClickCallback(t10, d7)), p13.events.on("select-changed", () => {
      d7.selectedIndex = ++this._selectedIndex, this._updateMoveManipulationPosition();
    }), p13.events.on("focus-changed", ({ action: t10 }) => {
      "focus" === t10 && "edge" !== d7.type ? this._updateTranslateVertexTooltip(p13, c11.XY) : this._hideTooltip();
    })], p13), this.events.emit("manipulators-changed"), d7;
  }
  _trackNumDragging(t9) {
    switch (t9.action) {
      case "start":
        this._numDragging++;
        break;
      case "end":
        this._numDragging--;
    }
    return t9;
  }
  _onDragCancel(t9 = true, e17) {
    switch (this._numDragging--, t9 && this.undo(), null != this.tool.snappingManager && this.tool.snappingManager.doneSnapping(), this._hideTooltip(), this._reshapeEventState) {
      case zt.NONE:
        break;
      case zt.MOVING:
        this.events.emit("move", { type: "move", dx: 0, dy: 0, object: this.object });
        break;
      case zt.RESHAPING:
        this.events.emit("reshape", { type: "reshape", object: this.object });
    }
    e17 && e17(), this.destroyed || this._updateEventState(zt.NONE);
  }
  _setTypeSpecificManipulatorSettings(t9, e17, i9) {
    var _a, _b;
    const a14 = this._settings;
    switch (e17.type) {
      case "vertex": {
        t9.state = Zt.Vertex, t9.selectable = true, t9.cursor = "move", t9.collisionPriority = 2;
        const { size: e18, collisionPadding: n13 } = a14.manipulators.vertex;
        t9.radius = e18 / 2 + n13, t9.elevationInfo = i9;
        const o11 = (_a = this._operations) == null ? void 0 : _a.data.type;
        t9.interactive = null != o11 && "point" !== o11 && "mesh" !== o11;
        break;
      }
      case "edge": {
        t9.state = Zt.Edge, t9.selectable = false, t9.cursor = "copy", t9.collisionPriority = -1;
        const { size: e18, collisionPadding: n13 } = a14.manipulators.edge;
        t9.radius = e18 / 2 + n13, t9.elevationInfo = "on-the-ground" !== i9.mode || y3((_b = this.object.graphic) == null ? void 0 : _b.symbol) ? { mode: "absolute-height", offset: 0 } : i9;
        break;
      }
    }
  }
  _watchAndUpdateGrabState(t9, e17) {
    return t9.events.on("grab-changed", (i9) => this._onGrabStateChanged(t9, e17, i9.action, i9.pointerType));
  }
  _onGrabStateChanged(t9, e17, i9, a14 = "mouse") {
    if (!this._recreatingManipulators) {
      if ("start" === i9)
        e17 && this._updateSelection(t9), this._numGrabbing++;
      else if (this._numGrabbing--, this._updateEventState(zt.NONE), this.destroyed)
        return;
      this._moveManipulation.interactive = !this._numGrabbing, ("touch" !== a14 || this.enableEdgeOffset) && (this._manipulatorInfos.forEach((t10) => {
        var _a;
        const { manipulator: e18 } = t10, i10 = (_a = this._operations) == null ? void 0 : _a.data.type;
        e18.interactive = e18.grabbing || !this._numGrabbing && null != i10 && "point" !== i10 && "mesh" !== i10, "edgeManipulator" in t10 && (t10.edgeManipulator.interactive = t10.edgeManipulator.grabbing || !this._numGrabbing);
      }), this._objectMoveManipulation.forEachManipulator((t10) => {
        t10.interactive = t10.grabbing || !this._numGrabbing;
      }));
    }
  }
  _clearSelection() {
    for (const t9 of this._manipulatorInfos)
      t9.manipulator.grabbing || (t9.manipulator.selected = false);
  }
  _updateSelection(t9) {
    t9.grabbing && !t9.selected && t9.selectable && (this._clearSelection(), t9.selected = true, this.events.emit("manipulators-changed"));
  }
  _removeManipulator(t9) {
    null != t9 && (t9.manipulator.metadata.deleting = true, this.manipulators.remove(t9.manipulator), this._manipulatorHandles.remove(t9.manipulator), z(this._manipulatorInfos, t9), this.events.emit("manipulators-changed"));
  }
  _getManipulatorInfoFromHandle(t9) {
    if (t9) {
      for (const e17 of this._manipulatorInfos)
        if (t9 === e17.handle)
          return e17;
    }
    return null;
  }
  _updateManipulatorPositions(t9) {
    for (const e17 of t9)
      this._updateManipulatorPosition(this._getManipulatorInfoFromHandle(e17));
  }
  _updateManipulatorPosition(t9) {
    const e17 = this._operations;
    if (null != t9 && e17) {
      if ("vertex" === t9.type)
        t9.manipulator.location = e17.data.coordinateHelper.vectorToDehydratedPoint(t9.handle.pos, Rt), t9.manipulator.grabbing && null != this._vertexLaserLineVisualElement && (this._vertexLaserLineVisualElement.visualElement.intersectsWorldUpAtLocation = t9.manipulator.renderLocation);
      else if ("edge" === t9.type) {
        const i9 = this._getManipulatorInfoFromHandle(t9.handle.leftVertex), a14 = this._getManipulatorInfoFromHandle(t9.handle.rightVertex);
        if (null == i9 || null == a14)
          return;
        const n13 = i9.manipulator, o11 = a14.manipulator;
        if (null != t9.manipulator.elevationInfo && "on-the-ground" === t9.manipulator.elevationInfo.mode) {
          const i10 = n13.location, a15 = o11.location, s6 = 0.5, l16 = i10.x + s6 * (a15.x - i10.x), r14 = i10.y + s6 * (a15.y - i10.y), p13 = i10.hasZ && a15.hasZ ? 0 : void 0;
          t9.manipulator.location = e7(l16, r14, p13, e17.data.spatialReference);
        } else
          A3(Ft, n13.renderLocation, o11.renderLocation, 0.5), t9.manipulator.renderLocation = Ft;
      }
    }
  }
  _splitEdgeManipulator(t9, e17 = 0.5) {
    const i9 = this._operations, a14 = i9.splitEdge(t9.handle, e17).createdVertex;
    t9.locationUpdateHandle = l(t9.locationUpdateHandle);
    const n13 = this.object.elevationInfo;
    let o11;
    this.enableEdgeOffset ? (this._removeManipulator(t9), o11 = this._createVertexOrEdgeManipulator(a14)) : (o11 = t9, o11.handle = a14, o11.type = "vertex", this._setTypeSpecificManipulatorSettings(t9.manipulator, t9.handle, n13)), a14.leftEdge && this._createVertexOrEdgeManipulator(a14.leftEdge), a14.rightEdge && this._createVertexOrEdgeManipulator(a14.rightEdge), this._updateManipulatorPosition(o11), this.enableEdgeOffset || this._updateTranslateVertexTooltip(o11.manipulator, c11.XY), this._updateSelection(t9.manipulator);
    const s6 = this._updateEventState(zt.RESHAPING), l16 = i9.data.coordinateHelper.vectorToArray(o11.handle.pos), r14 = i9.data.components.indexOf(a14.component);
    return this.events.emit("vertex-add", { type: "vertex-add", object: this.object, vertices: [{ coordinates: l16, componentIndex: r14, vertexIndex: a14.index }], added: l16 }), s6 && this._updateEventState(zt.NONE), o11;
  }
  _updateMoveManipulationPosition() {
    var _a, _b;
    const t9 = o3(Ft, 0, 0, 0);
    let e17 = 0, i9 = false, a14 = null, n13 = null;
    for (const l16 of this._manipulatorInfos)
      "vertex" === l16.type && (l16.manipulator.selected ? (e17++, u2(t9, t9, l16.manipulator.renderLocation), null == a14 || l16.selectedIndex > a14.selectedIndex ? (n13 = a14, a14 = l16) : (null == n13 || l16.selectedIndex > n13.selectedIndex) && (n13 = l16)) : i9 = true);
    const o11 = this.object, s6 = (_a = this._operations) == null ? void 0 : _a.data.geometry;
    if (0 === e17) {
      const t10 = o11.visible && this.enableMoveObject;
      this._moveManipulation.xyManipulation.available = t10, this._moveManipulation.xyAxisManipulation.available = t10, this._moveManipulation.xyAxisManipulation.orthogonalAvailable = t10, this._moveManipulation.zManipulation.available = t10 && this.enableZShape && n4(this._operations, o11.elevationInfo), this._moveManipulation.angle = r11(s6), this._moveManipulation.radius = u12.radiusForSymbol((_b = o11.graphic) == null ? void 0 : _b.symbol);
    } else {
      const t10 = o11.visible;
      this._moveManipulation.xyManipulation.available = t10, this._moveManipulation.xyAxisManipulation.available = t10, this._moveManipulation.zManipulation.available = t10 && this.enableZVertex && n4(this._operations, this.object.elevationInfo), this._moveManipulation.xyAxisManipulation.orthogonalAvailable = t10 && 1 !== e17;
      let i10 = 0;
      if (null != a14) {
        const t11 = a14.handle.pos, e18 = null != n13 ? n13.handle.pos : a14.handle.leftEdge && a14.handle.leftEdge.leftVertex ? a14.handle.leftEdge.leftVertex.pos : null, o12 = null == n13 && a14.handle.rightEdge && a14.handle.rightEdge.rightVertex ? a14.handle.rightEdge.rightVertex.pos : null;
        e18 && o12 ? this._moveManipulation.xyAxisManipulation.available = false : e18 ? i10 = Nt(e18, t11) : o12 && (i10 = Nt(t11, o12));
      }
      this._moveManipulation.angle = i10, this._moveManipulation.radius = o9;
    }
    0 !== e17 && i9 ? (g(t9, t9, 1 / e17), Rt.spatialReference = this._operations.data.spatialReference, Rt.hasZ = true, this.view.renderCoordsHelper.fromRenderCoords(t9, Rt), this._moveManipulation.elevationAlignedLocation = Rt) : null == this._outlineVisualElement || this.object.isDraped || null == this._outlineVisualElement.attachmentOrigin ? F3(this._moveManipulation, this.object) : this._moveManipulation.elevationAlignedLocation = this._outlineVisualElement.attachmentOrigin;
  }
  _removeVertices(t9) {
    var _a;
    const e17 = new Array(), i9 = this._operations;
    if (i9) {
      for (const a14 of t9) {
        const t10 = a14.handle.component;
        if ("vertex" === a14.type && i9.canRemoveVertex(t10)) {
          e17.push(a14.handle), this._removeManipulator(a14), this._removeManipulator(this._getManipulatorInfoFromHandle(a14.handle.leftEdge)), this._removeManipulator(this._getManipulatorInfoFromHandle(a14.handle.rightEdge));
          const n13 = i9.removeVertices([a14.handle]), o11 = (_a = n13.removedVertices) == null ? void 0 : _a[0].createdEdge;
          o11 ? this._createVertexOrEdgeManipulator(o11) : this.enableEdgeOffset && t10.vertices.length <= 2 && this._removeManipulator(this._getManipulatorInfoFromHandle(t10.edges[0]));
        }
      }
      if (e17.length > 0) {
        const t10 = e17.map((t11) => {
          const e18 = i9.data.components.indexOf(t11.component);
          return { coordinates: i9.data.coordinateHelper.vectorToArray(t11.pos), componentIndex: e18, vertexIndex: t11.index };
        }), a14 = this._updateEventState(zt.RESHAPING);
        if (this.destroyed)
          return;
        if (this.events.emit("vertex-remove", { type: "vertex-remove", object: this.object, removed: t10.map((t11) => t11.coordinates), vertices: t10 }), this.destroyed)
          return;
        if (a14 && (this._updateEventState(zt.NONE), this.destroyed))
          return;
        this._updateMoveManipulationPosition();
      }
    }
  }
  _moveVertices(t9, e17, i9 = "start" === e17.action ? E3.NEW_STEP : E3.ACCUMULATE_STEPS) {
    const a14 = this._operations;
    if (a14) {
      t9.length > 0 && a14.moveVertices(t9.map((t10) => t10.handle), e17.mapDeltaX, e17.mapDeltaY, e17.mapDeltaZ, i9);
      for (const e18 of t9)
        this._updateManipulatorPosition(e18);
    }
  }
  _offsetEdge(t9, e17) {
    if (null == e17.operation || null == e17.signedDistance)
      return;
    const i9 = this._operations;
    if (!i9)
      return;
    const a14 = e17.operation.clone();
    a14.distance = e17.signedDistance, i9.updateVertices([t9.handle.leftVertex, t9.handle.rightVertex], a14), this._updateManipulatorPosition(this._getManipulatorInfoFromHandle(t9.handle.leftVertex)), this._updateManipulatorPosition(this._getManipulatorInfoFromHandle(t9.handle.rightVertex));
  }
  _manipulatorClickCallback(t9, e17) {
    t9.shiftKey || this._clearSelection(), "vertex" === e17.type && (e17.manipulator.selected = !e17.manipulator.selected, t9.button === t4.Right && this._removeVertices([e17])), "edge" === e17.type && t9.button === t4.Left && this._splitEdgeManipulator(e17), t9.stopPropagation();
  }
  _updateTranslateTooltip(t9, e17) {
    const i9 = this._manipulatorInfos.filter((t10) => "vertex" === t10.type && t10.manipulator.selected);
    1 === i9.length ? this._updateTranslateVertexTooltip(i9[0].manipulator, t9, e17) : this._updateTranslateObjectTooltip(t9, e17);
  }
  _updateTranslateObjectTooltip(t9, e17) {
    const { sketchOptions: i9, tooltip: a14 } = this;
    switch (t9) {
      case c11.XY:
        this._latestTooltipInfo = this._translateTooltipInfo ?? (this._translateTooltipInfo = new r10({ sketchOptions: i9 })), Pt(this._latestTooltipInfo, e17, (t10, e18) => m3(t10, e18));
        break;
      case c11.XY_AXIS:
        this._latestTooltipInfo = this._translateXYTooltipInfo ?? (this._translateXYTooltipInfo = new l11({ sketchOptions: i9 })), Pt(this._latestTooltipInfo, e17, (t10, i10) => y4(m3(t10, i10), a10(e17)));
        break;
      case c11.Z:
        this._latestTooltipInfo = this._translateZTooltipInfo ?? (this._translateZTooltipInfo = new a5({ sketchOptions: i9 })), Pt(this._latestTooltipInfo, e17, y5);
    }
    this._latestTooltipInfo.sketchOptions = i9, a14.info = i9.tooltips.effectiveEnabled ? this._latestTooltipInfo : null;
  }
  _updateTranslateVertexTooltip(t9, e17, i9) {
    const { sketchOptions: a14, tooltip: n13 } = this;
    switch (e17) {
      case c11.XY:
        this._latestTooltipInfo = this._translateVertexTooltipInfo ?? (this._translateVertexTooltipInfo = new n5({ sketchOptions: a14 })), Pt(this._latestTooltipInfo, i9, (t10, e18) => m3(t10, e18)), this._updateTooltipAreaOrTotalLength(this._latestTooltipInfo);
        break;
      case c11.XY_AXIS:
        this._latestTooltipInfo = this._translateVertexXYTooltipInfo ?? (this._translateVertexXYTooltipInfo = new c7({ sketchOptions: a14 })), Pt(this._latestTooltipInfo, i9, (t10, e18) => y4(m3(t10, e18), a10(i9))), this._updateTooltipAreaOrTotalLength(this._latestTooltipInfo);
        break;
      case c11.Z:
        this._latestTooltipInfo = this._translateVertexZTooltipInfo ?? (this._translateVertexZTooltipInfo = new p6({ sketchOptions: a14 })), Pt(this._latestTooltipInfo, i9, y5);
    }
    const o11 = R4(t9.location);
    this._latestTooltipInfo.elevation = null != o11 ? h9({ actual: o11 }) : null, this._latestTooltipInfo.sketchOptions = a14, n13.info = a14.tooltips.effectiveEnabled ? this._latestTooltipInfo : null;
  }
  _updateTooltipAreaOrTotalLength(t9) {
    var _a;
    const e17 = (_a = this._operations) == null ? void 0 : _a.data.geometry;
    if (null == e17)
      return t9.area = null, void (t9.totalLength = null);
    t9.area = "polygon" === e17.type ? u10(e17) : null, t9.totalLength = "polyline" === e17.type ? c4(e17) : null;
  }
  _hideTooltip() {
    this.tooltip.clear(), this._latestTooltipInfo = null;
  }
  get test() {
    return { segmentLabels: this._segmentLabels, manipulatorInfos: this._manipulatorInfos };
  }
};
function Pt(t9, e17, i9) {
  if (null != e17 && "end" !== e17.action) {
    const { mapStart: a14, mapEnd: n13 } = e17, o11 = i9(a14, n13);
    t9.distance = null != o11 ? o11 : h7;
  } else
    t9.distance = h7;
}
function kt() {
  return (t9) => {
    const { operation: e17, mapEnd: i9 } = t9;
    return null == e17 || null == i9 ? t9 : ("start" === t9.action && e17.selectArrowFromStartPoint(i9), { ...t9, signedDistance: e17.signedDistanceToPoint(i9) });
  };
}
function Ut(t9) {
  const e17 = t9.size / 2, i9 = e17 + t9.collisionPadding;
  return { size: e17 / i9, outlineSize: (e17 + t9.outlineSize) / i9 };
}
function Nt(t9, e17) {
  return Math.atan2(e17[1] - t9[1], e17[0] - t9[0]) + Math.PI / 2;
}
function Ct(t9, e17, i9, a14, n13) {
  if (t9) {
    const t10 = n13.toXYZ(n13.pointToVector(i9)), o11 = J2(a14, t10, c3.get()), s6 = u7(o11, t10, n13.spatialReference);
    if (null != s6)
      return a3(s6.value * Math.sign(e17), s6.unit);
  }
  return a3(e17 * W(i9.spatialReference), "meters");
}
e([y()], Dt.prototype, "_operations", null), e([y()], Dt.prototype, "_segmentLabels", void 0), e([y({ constructOnly: true })], Dt.prototype, "tool", void 0), e([y()], Dt.prototype, "tooltip", void 0), e([y({ readOnly: true })], Dt.prototype, "updating", null), e([y()], Dt.prototype, "manipulators", null), e([y()], Dt.prototype, "view", null), e([y()], Dt.prototype, "object", null), e([y()], Dt.prototype, "enableZShape", null), e([y()], Dt.prototype, "enableZVertex", null), e([y()], Dt.prototype, "enableMoveObject", null), e([y()], Dt.prototype, "enableMidpoints", null), e([y()], Dt.prototype, "enableEdgeOffset", null), e([y()], Dt.prototype, "sketchOptions", null), e([y()], Dt.prototype, "_accentColor", null), Dt = e([a("esri.views.3d.interactive.editingTools.reshape.ReshapeOperation")], Dt);
var Rt = e7(0, 0, void 0, f.WGS84);
var Ft = n();
var Xt = 1e-6;
var Zt;
var zt;
var Yt;
!function(t9) {
  t9.Vertex = u6.Custom1, t9.Edge = u6.Custom2;
}(Zt || (Zt = {})), function(t9) {
  t9[t9.NONE = 0] = "NONE", t9[t9.MOVING = 1] = "MOVING", t9[t9.RESHAPING = 2] = "RESHAPING";
}(zt || (zt = {})), function(t9) {
  t9[t9.ALL = 0] = "ALL", t9[t9.SELECTED_OR_ALL = 1] = "SELECTED_OR_ALL";
}(Yt || (Yt = {}));

// node_modules/@arcgis/core/views/3d/interactive/editingTools/reshape/ReshapeTool3D.js
var p11 = class extends l8 {
  constructor(e17) {
    super(e17), this.events = new o2(), this.enableZShape = true, this.enableZVertex = true, this.enableMoveObject = true, this.enableMidpoints = true, this.enableEdgeOffset = false, this.type = "reshape-3d", this.sketchOptions = new l9(), this.snappingManager = null, this.automaticManipulatorSelection = false;
  }
  initialize() {
    const e17 = this._reshapeOperation = new Dt({ tool: this });
    this.addHandles([e17.events.on("reshape", (e18) => this.events.emit("reshape", e18)), e17.events.on("move", (e18) => this.events.emit("move", e18)), e17.events.on("vertex-add", (e18) => this.events.emit("vertex-add", e18)), e17.events.on("vertex-remove", (e18) => this.events.emit("vertex-remove", e18)), e17.events.on("immediate-click", (e18) => this.events.emit("immediate-click", { ...e18, object: this.object })), this.view.on("pointer-down", ["Shift"], (e18) => e18.stopPropagation())]), this.finishToolCreation();
  }
  destroy() {
    this._reshapeOperation = u(this._reshapeOperation);
  }
  get updating() {
    var _a;
    return ((this.object.updating ?? false) || ((_a = this._reshapeOperation) == null ? void 0 : _a.updating)) ?? false;
  }
  onManipulatorSelectionChanged() {
    this._reshapeOperation && this._reshapeOperation.onManipulatorSelectionChanged();
  }
  get canUndo() {
    return this._reshapeOperation.canUndo ?? false;
  }
  undo() {
    null != this.snappingManager && this.snappingManager.doneSnapping(), this._reshapeOperation.undo();
  }
  get canRedo() {
    return this._reshapeOperation.canRedo ?? false;
  }
  redo() {
    null != this.snappingManager && this.snappingManager.doneSnapping(), this._reshapeOperation.redo();
  }
  onInputEvent(e17) {
    "key-down" !== e17.type || "Delete" !== e17.key && "Backspace" !== e17.key || this._reshapeOperation.removeSelectedVertices();
  }
  reset() {
  }
  get test() {
    return { snappingManager: this.snappingManager, reshapeOperation: this._reshapeOperation };
  }
};
e([y()], p11.prototype, "_reshapeOperation", void 0), e([y({ constructOnly: true, nonNullable: true })], p11.prototype, "view", void 0), e([y({ constructOnly: true })], p11.prototype, "object", void 0), e([y({ constructOnly: true, nonNullable: true })], p11.prototype, "enableZShape", void 0), e([y({ constructOnly: true, nonNullable: true })], p11.prototype, "enableZVertex", void 0), e([y({ constructOnly: true, nonNullable: true })], p11.prototype, "enableMoveObject", void 0), e([y({ constructOnly: true, nonNullable: true })], p11.prototype, "enableMidpoints", void 0), e([y({ constructOnly: true, nonNullable: true })], p11.prototype, "enableEdgeOffset", void 0), e([y()], p11.prototype, "type", void 0), e([y({ constructOnly: true, type: l9 })], p11.prototype, "sketchOptions", void 0), e([y({ constructOnly: true })], p11.prototype, "snappingManager", void 0), e([y()], p11.prototype, "updating", null), e([y()], p11.prototype, "automaticManipulatorSelection", void 0), p11 = e([a("esri.views.3d.interactive.editingTools.reshape.ReshapeTool3D")], p11);

// node_modules/@arcgis/core/views/3d/interactive/editingTools/transform/undoRecords.js
function r13(e17) {
  const { graphic: t9 } = e17;
  return null != t9.geometry && "mesh" === t9.geometry.type ? o10(t9.geometry) : n9(e17);
}
function o10(e17) {
  return g3(e17.vertexSpace) ? i8(e17, e17.transform, e17.vertexSpace) : l15(e17);
}
function n9(e17) {
  let t9 = e17.graphic.geometry, r14 = null;
  return { undo(e18) {
    r14 = e18.geometry, e18.geometry = t9;
  }, redo(e18) {
    t9 = e18.geometry, e18.geometry = r14;
  } };
}
function i8(t9, r14, o11) {
  let n13 = r14 == null ? void 0 : r14.clone(), i9 = t2(o11.origin), l16 = null, u14 = null;
  return { undo: () => {
    var _a;
    l16 = (_a = t9.transform) == null ? void 0 : _a.clone(), u14 = t2(o11.origin), t9.transform = n13, t9.vertexSpace.origin = i9;
  }, redo: () => {
    var _a;
    n13 = (_a = t9.transform) == null ? void 0 : _a.clone(), i9 = t2(o11.origin), t9.transform = l16, t9.vertexSpace.origin = u14;
  } };
}
function l15(e17) {
  let t9, r14 = e17.vertexAttributes.clonePositional();
  return { undo: () => {
    t9 = e17.vertexAttributes.clonePositional(), e17.vertexAttributes = r14;
  }, redo: () => {
    r14 = e17.vertexAttributes.clonePositional(), e17.vertexAttributes = t9;
  } };
}

// node_modules/@arcgis/core/views/3d/interactive/editingTools/transform/ScaleRotateMeshAdapter.js
var g9 = class extends S {
  constructor(t9) {
    super(t9), this._interactionState = null;
  }
  initialize() {
    this.addHandles([p(() => {
      const t9 = this._interactionState;
      return t9 && t9.angle !== t9.previousAngle ? { interactionState: t9, angle: t9.state.angle } : null;
    }, ({ interactionState: t9 }) => {
      this._updateMeshRotation(t9);
    }, C), p(() => {
      const t9 = this._interactionState;
      return t9 && t9.scale !== t9.previousScale ? { interactionState: t9, scale: t9.state.scale } : null;
    }, ({ interactionState: t9 }) => {
      this._updateMeshSize(t9);
    }, C)]);
  }
  get initialAngle() {
    var _a;
    return ((_a = this._interactionState) == null ? void 0 : _a.initialAngle) ?? 0;
  }
  get angle() {
    var _a;
    const t9 = this.geometry.transform;
    if (null == t9)
      return ((_a = this._interactionState) == null ? void 0 : _a.angle) ?? 0;
    const e17 = y2(t9.rotation)[2];
    return Math.abs(e17) > 0.999999 ? h2(z4(t9.rotation)) * Math.sign(e17) : 0;
  }
  get angleClockwise() {
    return -this.angle;
  }
  get relativeAngle() {
    return this.angle - this.initialAngle;
  }
  get relativeAngleClockwise() {
    return -this.relativeAngle;
  }
  get scale() {
    var _a;
    return ((_a = this._interactionState) == null ? void 0 : _a.scale) ?? 1;
  }
  startInteraction() {
    const t9 = new u13({ angle: this.angle });
    this._interactionState = t9;
    const e17 = () => {
      this._interactionState = null;
    };
    return { state: t9, done: e17, cancel: () => {
      t9.cancel(), e17();
    } };
  }
  createUndoRecord() {
    return r13(this.object);
  }
  _updateMeshRotation(t9) {
    const { angle: e17, previousAngle: o11 } = t9;
    t9.previousAngle = e17;
    const r14 = M(e17 - o11);
    this.geometry.rotate(0, 0, r14, { origin: this.geometry.anchor });
  }
  _updateMeshSize(t9) {
    const { scale: e17, previousScale: o11 } = t9;
    t9.previousScale = e17;
    const i9 = e17 / o11, r14 = this.geometry.anchor;
    this.geometry.scale(i9, { origin: r14 });
  }
};
e([y({ constructOnly: true })], g9.prototype, "object", void 0), e([y({ constructOnly: true })], g9.prototype, "geometry", void 0), e([y({ constructOnly: true })], g9.prototype, "viewingMode", void 0), e([y()], g9.prototype, "initialAngle", null), e([y()], g9.prototype, "angle", null), e([y()], g9.prototype, "angleClockwise", null), e([y()], g9.prototype, "relativeAngle", null), e([y()], g9.prototype, "relativeAngleClockwise", null), e([y()], g9.prototype, "scale", null), e([y()], g9.prototype, "_interactionState", void 0), g9 = e([a("esri.views.3d.interactive.editingTools.transform.ScaleRotateMeshAdapter")], g9);
var u13 = class extends S {
  get state() {
    const { angle: t9, scale: e17 } = this;
    return { angle: t9, scale: e17 };
  }
  constructor(t9) {
    super(t9), this.angle = 0, this.initialAngle = 0, this.previousAngle = 0, this.previousScale = 1, this.scale = 1, this.initialAngle = t9.angle, this.previousAngle = t9.angle;
  }
  cancel() {
    this.angle = this.initialAngle, this.scale = 1;
  }
};
e([y()], u13.prototype, "angle", void 0), e([y()], u13.prototype, "initialAngle", void 0), e([y()], u13.prototype, "previousAngle", void 0), e([y()], u13.prototype, "previousScale", void 0), e([y()], u13.prototype, "scale", void 0), e([y()], u13.prototype, "state", null), u13 = e([a("esri.views.3d.interactive.editingTools.transform.ScaleRotateMeshAdapter.InteractionState")], u13);

// node_modules/@arcgis/core/views/3d/interactive/editingTools/transform/ScaleRotateObjectSymbol3DAdapter.js
var a12 = class extends S {
  constructor(t9) {
    super(t9), this.sizeAxis = null, this._interactionState = null;
  }
  initialize() {
    this.addHandles(p(() => null != this._interactionState ? this._interactionState.state : null, (t9) => {
      this._updateSymbol(t9);
    }, C));
  }
  get initialAngle() {
    var _a;
    return ((_a = this._interactionState) == null ? void 0 : _a.initialAngle) ?? 0;
  }
  get angle() {
    return null != this._interactionState ? this._interactionState.angle : null != this._orientationReferenceSymbolLayer ? c12(this._orientationReferenceSymbolLayer.heading ?? 0) : 0;
  }
  get angleClockwise() {
    return -this.angle;
  }
  get orientation() {
    return this.angle;
  }
  get orientationClockwise() {
    return this.angleClockwise;
  }
  get relativeAngle() {
    return this.angle - this.initialAngle;
  }
  get relativeAngleClockwise() {
    return -this.relativeAngle;
  }
  get scale() {
    var _a;
    return ((_a = this._interactionState) == null ? void 0 : _a.scale) ?? 1;
  }
  get size() {
    const t9 = this._sizeReferenceSymbolLayer;
    if (null == t9)
      return null;
    const e17 = this.findLayerView(), i9 = this._graphicSymbol;
    if (null == e17 || null == i9 || "point-3d" !== i9.type)
      return null;
    const l16 = e17.getSymbolLayerSize(i9, t9);
    if ("size" in l16 && null != l16.size)
      return l16.size;
    const n13 = this.sizeAxis;
    return !("width" in l16) || null == l16.width || null != n13 && "width" !== n13 && "all" !== n13 && "width-and-depth" !== n13 ? !("depth" in l16) || null == t9.depth || null != n13 && "depth" !== n13 && "all" !== n13 && "width-and-depth" !== n13 ? !("height" in l16) || null == t9.height || null != n13 && "height" !== n13 && "all" !== n13 ? null : l16.height : l16.depth : l16.width;
  }
  get _sizeReferenceSymbolLayer() {
    const t9 = this._graphicSymbol;
    return null == t9 || 0 === t9.symbolLayers.length ? null : t9.symbolLayers.find((t10) => "object" === t10.type);
  }
  get _orientationReferenceSymbolLayer() {
    const t9 = this._graphicSymbol;
    return null == t9 || 0 === t9.symbolLayers.length ? null : t9.symbolLayers.find((t10) => "object" === t10.type && null != t10.heading);
  }
  get _graphicSymbol() {
    var _a;
    return null != ((_a = this.graphic) == null ? void 0 : _a.symbol) && "point-3d" === this.graphic.symbol.type ? this.graphic.symbol : null;
  }
  set _graphicSymbol(t9) {
    this.graphic.symbol = t9;
  }
  startInteraction() {
    const t9 = this._graphicSymbol, e17 = this.findLayerView();
    if (null != this._interactionState || null == t9 || null == e17)
      return h12;
    const i9 = t9.symbolLayers.map((i10) => "object" === i10.type ? e17.getSymbolLayerSize(t9, i10) : null).toArray(), l16 = t9.clone(), n13 = this.angle, o11 = new p12({ originalSymbol: l16, angle: n13, initialSizes: i9 });
    this._interactionState = o11;
    const r14 = () => {
      this._interactionState = null;
    };
    return { state: o11, done: r14, cancel: () => {
      this._graphicSymbol = l16, r14();
    } };
  }
  createUndoRecord() {
    let t9 = this.graphic.symbol, e17 = null;
    return { undo: (i9) => {
      e17 = i9.symbol, i9.symbol = t9;
    }, redo: (i9) => {
      t9 = i9.symbol, i9.symbol = e17;
    } };
  }
  _updateSymbol({ scale: t9, angle: e17, originalSymbol: l16, initialSizes: n13 }) {
    const o11 = this._graphicSymbol;
    if (null == o11 || "point-3d" !== o11.type)
      return;
    const r14 = o11.clone(), s6 = -M(e17 - this.initialAngle);
    let a14 = false;
    this._forEachObjectSymbolLayerPair(l16, r14, (e18, i9, l17) => {
      const o12 = (e18.heading ?? 0) + s6;
      i9.heading !== o12 && (i9.heading = o12, a14 = true);
      const r15 = n13[l17];
      if (null != r15 && "width" in r15) {
        r15.width = this.sizeFilter(r15.width), r15.height = this.sizeFilter(r15.height), r15.depth = this.sizeFilter(r15.depth);
        const e19 = r15.width * t9;
        i9.width !== e19 && (i9.width = e19, a14 = true);
        const l18 = r15.depth * t9;
        i9.depth !== l18 && (i9.depth = l18, a14 = true);
        const n14 = r15.height * t9;
        i9.height !== n14 && (i9.height = n14, a14 = true);
      }
    }), a14 && (this._graphicSymbol = r14);
  }
  _forEachObjectSymbolLayerPair(t9, e17, i9) {
    t9.symbolLayers.forEach((t10, l16) => {
      const n13 = e17.symbolLayers.at(l16);
      "object" === t10.type && "object" === n13.type && i9(t10, n13, l16);
    });
  }
};
function c12(t9) {
  return -h2(t9);
}
e([y()], a12.prototype, "initialAngle", null), e([y()], a12.prototype, "angle", null), e([y()], a12.prototype, "angleClockwise", null), e([y()], a12.prototype, "orientation", null), e([y()], a12.prototype, "orientationClockwise", null), e([y()], a12.prototype, "relativeAngle", null), e([y()], a12.prototype, "relativeAngleClockwise", null), e([y()], a12.prototype, "scale", null), e([y()], a12.prototype, "size", null), e([y()], a12.prototype, "sizeAxis", void 0), e([y({ constructOnly: true })], a12.prototype, "graphic", void 0), e([y()], a12.prototype, "_interactionState", void 0), e([y({ constructOnly: true })], a12.prototype, "findLayerView", void 0), e([y({ constructOnly: true })], a12.prototype, "sizeFilter", void 0), e([y()], a12.prototype, "_sizeReferenceSymbolLayer", null), e([y()], a12.prototype, "_orientationReferenceSymbolLayer", null), e([y()], a12.prototype, "_graphicSymbol", null), a12 = e([a("esri.views.3d.interactive.editingTools.transform.ScaleRotateObjectSymbol3DAdapter")], a12);
var h12 = { state: { angle: 0, scale: 0 }, done: () => {
}, cancel: () => {
} };
var p12 = class extends S {
  get state() {
    const { originalSymbol: t9, angle: e17, initialAngle: i9, scale: l16, initialSizes: n13 } = this;
    return { originalSymbol: t9, angle: e17, initialAngle: i9, scale: l16, initialSizes: n13 };
  }
  constructor(t9) {
    super(t9), this.angle = 0, this.initialAngle = 0, this.scale = 1, this.initialAngle = t9.angle;
  }
};
e([y()], p12.prototype, "originalSymbol", void 0), e([y()], p12.prototype, "angle", void 0), e([y()], p12.prototype, "initialAngle", void 0), e([y()], p12.prototype, "initialSizes", void 0), e([y()], p12.prototype, "scale", void 0), e([y()], p12.prototype, "state", null), p12 = e([a("esri.views.3d.interactive.editingTools.transform.ScaleRotateObjectSymbol3DAdapter.InteractionState")], p12);

// node_modules/@arcgis/core/views/interactive/tooltip/TransformTooltipInfos.js
var e16 = class extends r8 {
  constructor(o11) {
    super(o11), this.type = "transform-rotate", this.rotation = null, this.rotationPrecision = null, this.orientation = null, this.orientationPrecision = null, this.rotationType = "geographic";
  }
};
e([y()], e16.prototype, "type", void 0), e([y()], e16.prototype, "rotation", void 0), e([y()], e16.prototype, "rotationPrecision", void 0), e([y()], e16.prototype, "orientation", void 0), e([y()], e16.prototype, "orientationPrecision", void 0), e([y()], e16.prototype, "rotationType", void 0), e16 = e([a("esri.views.interactive.tooltip.TransformTooltipInfos.TransformRotateTooltipInfo")], e16);
var s5 = class extends r8 {
  constructor(o11) {
    super(o11), this.type = "transform-scale", this.size = null, this.sizeUnit = null, this.sizePrecision = null;
  }
};
e([y()], s5.prototype, "type", void 0), e([y()], s5.prototype, "scale", void 0), e([y()], s5.prototype, "size", void 0), e([y()], s5.prototype, "sizeUnit", void 0), e([y()], s5.prototype, "sizePrecision", void 0), s5 = e([a("esri.views.interactive.tooltip.TransformTooltipInfos.TransformScaleTooltipInfo")], s5);
var n10 = class extends r8 {
  constructor(o11) {
    super(o11), this.type = "transform-absolute", this.orientation = null, this.orientationPrecision = null, this.rotationType = "geographic", this.size = null, this.sizePrecision = null, this.sizeUnit = null;
  }
};
e([y()], n10.prototype, "type", void 0), e([y()], n10.prototype, "orientation", void 0), e([y()], n10.prototype, "orientationPrecision", void 0), e([y()], n10.prototype, "rotationType", void 0), e([y()], n10.prototype, "size", void 0), e([y()], n10.prototype, "sizePrecision", void 0), e([y()], n10.prototype, "sizeUnit", void 0), n10 = e([a("esri.views.interactive.tooltip.TransformTooltipInfos.TransformAbsoluteTooltipInfo")], n10);

// node_modules/@arcgis/core/views/3d/interactive/editingTools/transform/ScaleRotateTransform.js
var Mt;
!function(t9) {
  t9.ScaleIn = u6.Custom2, t9.ScaleOut = u6.Custom3, t9.RotateLeft = u6.Custom4, t9.RotateRight = u6.Custom5, t9.Unlocked = u6.Custom7, t9.DelayedFocused = u6.Custom8, t9.TouchInput = u6.Custom12;
}(Mt || (Mt = {}));
var yt = class extends S {
  get angle() {
    return this.adapter.angle;
  }
  get scale() {
    return this.adapter.scale;
  }
  set location(t9) {
    this._ringManipulator.location = t9;
  }
  set elevationAlignedLocation(t9) {
    this._ringManipulator.elevationAlignedLocation = t9;
  }
  get grabbing() {
    return this._ringManipulator.grabbing;
  }
  set interactive(t9) {
    this._ringManipulator.interactive = t9;
  }
  get updating() {
    return !!this._activeAnimation;
  }
  constructor(t9) {
    super(t9), this.mode = null, this._scaleRotateDragData = null, this._activeAnimation = null, this._ringIndicatorDelayMs = q6, this._absoluteTooltipInfo = null, this._scaleTooltipInfo = null, this._rotateTooltipInfo = null, this.events = new o2(), this.getFocused = () => this._ringManipulator.focused, this.getScale = () => {
      var _a;
      return "scale" === ((_a = this._scaleRotateDragData) == null ? void 0 : _a.mode) ? this.adapter.scale : 1;
    };
  }
  initialize() {
    this._tooltip = new u9({ view: this.tool.view }), this._createManipulator(), this._updateDragState(), this._updateManipulatorTransform(), this.addHandles([p(() => !this.sketchOptions.tooltips.effectiveEnabled, () => this._tooltip.clear(), P), d2(() => {
      const { adapter: t9 } = this, { info: e17 } = this._tooltip;
      return e17 === this._absoluteTooltipInfo && this.getFocused() ? [e17, t9.size, t9.orientationClockwise] : [null];
    }, ([t9]) => {
      t9 && this._updateFocusTooltip();
    })]);
  }
  destroy() {
    var _a;
    (_a = this._activeAnimation) == null ? void 0 : _a.frameTask.remove(), this._activeAnimation = null, this.tool.manipulators.remove(this._ringManipulator), this._ringManipulator = null, this._tooltip = u(this._tooltip);
  }
  startAnimation(t9) {
    this.cancelActiveAnimation(), t9.start();
    const e17 = A({ update: ({ deltaTime: e18 }) => {
      t9.update(e18) && this.cancelActiveAnimation();
    } });
    this._activeAnimation = { ...t9, frameTask: e17 };
  }
  cancelActiveAnimation() {
    var _a;
    (_a = this._activeAnimation) == null ? void 0 : _a.frameTask.remove(), this._activeAnimation = u(this._activeAnimation);
  }
  forEachManipulator(t9) {
    t9(this._ringManipulator, A5.SCALE_ROTATE);
  }
  _createManipulator() {
    const t9 = this._createRingManipulator();
    this._ringManipulator = t9, this.tool.manipulators.add(t9);
    const e17 = this.tool.object, a14 = p5(t9, (t10, a15, i9) => {
      this._scaleRotateDragData = null;
      const r14 = this.adapter.startInteraction(), l16 = { mode: "none", origin: t2(t10.renderLocation), initialAngle: this.adapter.angle, angle: 0, angleDir: 0, scaleDir: 0 };
      this._scaleRotateDragData = l16, this._updateDragState();
      const c13 = c3.get();
      this.tool.view.renderCoordsHelper.worldUpAtPosition(t10.renderLocation, c13), a15.next(U3(this.tool.view, j(t10.renderLocation, c13, E2()))).next((t11) => {
        const a16 = F2(t11.plane), i10 = w2(t11.renderStart, t11.renderEnd, l16.origin, a16), c14 = s3.shortestSignedDiff(l16.angle, i10);
        l16.angleDir = e5(l16.angleDir + c14, -m6, m6), l16.angle = i10;
        const p13 = jt(l16, t11), h13 = p13 - this.adapter.scale;
        if (l16.scaleDir = e5(l16.scaleDir + h13, -k4, k4), this._onScaleChanged(), "none" === l16.mode) {
          const a17 = this.mode || Tt(t11, t11.plane, l16.origin, this.tool.view.state.camera);
          if (null != a17) {
            switch (a17) {
              case "rotate":
                this.tool.events.emit("rotate-start", { object: e17, angle: 0 }), this.tool.events.emit("record-undo", { record: this.adapter.createUndoRecord() });
                break;
              case "scale":
                this.tool.events.emit("scale-start", { object: e17, xScale: 1, yScale: 1 }), this.tool.events.emit("record-undo", { record: this.adapter.createUndoRecord() });
            }
            l16.mode = a17;
          }
        }
        switch (l16.mode) {
          case "rotate":
            r14.state.angle = l16.initialAngle + i10;
            break;
          case "scale":
            r14.state.scale = p13, this._onScaleChanged();
        }
        switch (this._updateDragState(), this._updateManipulatorTransform(), t11.action) {
          case "start":
          case "update":
            switch (l16.mode) {
              case "rotate":
                this.tool.events.emit("rotate", { object: e17, angle: M(l16.angle) });
                break;
              case "scale":
                this.tool.events.emit("scale", { object: e17, xScale: p13, yScale: p13 });
            }
            break;
          case "end":
            switch (l16.mode) {
              case "rotate":
                this.tool.events.emit("rotate-stop", { object: e17, angle: M(l16.angle) });
                break;
              case "scale":
                this.tool.events.emit("scale-stop", { object: e17, xScale: p13, yScale: p13 });
            }
        }
        return "end" === t11.action && (this.startAnimation(It(this, () => this._onScaleChanged())), this._scaleRotateDragData = null, this._updateDragState(), r14.done()), t11;
      }).next(this._updateTooltipPipelineStep(l16)), i9.next(() => {
        if (r14.cancel(), null != this._scaleRotateDragData) {
          switch (this._scaleRotateDragData.mode) {
            case "none":
              break;
            case "rotate":
              this.tool.events.emit("rotate-stop", { object: e17, angle: 0 });
              break;
            case "scale":
              this.tool.events.emit("scale-stop", { object: e17, xScale: 1, yScale: 1 });
          }
          this.startAnimation(It(this, () => this._onScaleChanged())), this._scaleRotateDragData = null, this._updateDragState();
        }
        this._updateFocusTooltip();
      });
    });
    this.addHandles([a14, t9.events.on("focus-changed", (t10) => {
      "focus" === t10.action ? this.startAnimation(kt2(this, () => this._updateDelayedFocusedState(), { delayMs: this._ringIndicatorDelayMs })) : this._updateDelayedFocusedState();
    }), t9.events.on("immediate-click", (t10) => {
      t10.stopPropagation();
    }), d2(() => this.tool.object.visible, (t10) => this._ringManipulator.available = t10, P)]);
  }
  _updateTooltipPipelineStep(t9) {
    return (e17) => {
      const { sketchOptions: a14 } = this, { effectiveEnabled: o11, visualVariables: i9 } = a14.tooltips;
      if (!o11)
        return e17;
      if ("end" === e17.action)
        return this._updateFocusTooltip(), e17;
      const s6 = this._tooltip;
      switch (t9.mode) {
        case "scale": {
          s6.info = this._scaleTooltipInfo ?? (this._scaleTooltipInfo = new s5({ sketchOptions: a14 }));
          const { size: t10, scale: e18 } = this.adapter, o12 = i9 == null ? void 0 : i9.size, n13 = s6.info;
          n13.sketchOptions = a14, n13.scale = i4(e18), n13.size = null != t10 ? a3(t10, "meters") : void 0, n13.sizePrecision = Ot(o12 == null ? void 0 : o12.valueType), n13.sizeUnit = o12 == null ? void 0 : o12.unit;
          break;
        }
        case "rotate": {
          s6.info = this._rotateTooltipInfo ?? (this._rotateTooltipInfo = new e16({ sketchOptions: a14 }));
          const { orientationClockwise: t10, relativeAngleClockwise: e18 } = this.adapter, o12 = i9 == null ? void 0 : i9.rotation, n13 = Ot(o12 == null ? void 0 : o12.valueType), r14 = s6.info;
          r14.sketchOptions = a14, r14.rotation = null != e18 ? o6(e18, "radians", "geographic") : void 0, r14.rotationPrecision = n13, r14.rotationType = (o12 == null ? void 0 : o12.rotationType) ?? "geographic", r14.orientation = null != t10 ? o6(t10, "radians", "geographic") : void 0, r14.orientationPrecision = n13;
          break;
        }
      }
      return e17;
    };
  }
  _updateFocusTooltip() {
    const { sketchOptions: t9, _tooltip: e17 } = this, { effectiveEnabled: a14, visualVariables: o11 } = t9.tooltips;
    if (!a14)
      return;
    if (this.getFocused()) {
      const a15 = o11 == null ? void 0 : o11.rotation, i9 = o11 == null ? void 0 : o11.size, s6 = this.mode, { size: n13, orientationClockwise: r14 } = this.adapter, c13 = null != r14 && (null == s6 || "rotate" === s6), h13 = null != n13 && (null == s6 || "scale" === s6);
      e17.info = this._absoluteTooltipInfo ?? (this._absoluteTooltipInfo = new n10({ sketchOptions: t9 }));
      const u14 = e17.info;
      u14.sketchOptions = t9, u14.orientation = c13 ? o6(r14, "radians", "geographic") : void 0, u14.orientationPrecision = Ot(a15 == null ? void 0 : a15.valueType), u14.rotationType = (a15 == null ? void 0 : a15.rotationType) ?? "geographic", u14.size = h13 ? a3(n13, "meters") : void 0, u14.sizeUnit = i9 == null ? void 0 : i9.unit, u14.sizePrecision = Ot(i9 == null ? void 0 : i9.valueType);
    } else
      e17.clear();
  }
  _onScaleChanged() {
    this.events.emit("scale-changed"), this._updateManipulatorTransform();
  }
  _updateDelayedFocusedState() {
    this._ringManipulator.updateStateEnabled(Mt.DelayedFocused, this.getFocused()), this._updateFocusTooltip();
  }
  _updateDragState() {
    var _a;
    if (this._ringManipulator.updateStateEnabled(Mt.Unlocked, !(null != this._scaleRotateDragData && "none" !== ((_a = this._scaleRotateDragData) == null ? void 0 : _a.mode))), null != this._scaleRotateDragData)
      switch (this._scaleRotateDragData.mode) {
        case "rotate":
          this._ringManipulator.updateStateEnabled(Mt.ScaleIn | Mt.ScaleOut, false), this._ringManipulator.updateStateEnabled(Mt.RotateLeft, this._scaleRotateDragData.angleDir < 0), this._ringManipulator.updateStateEnabled(Mt.RotateRight, this._scaleRotateDragData.angleDir >= 0);
          break;
        case "scale":
          this._ringManipulator.updateStateEnabled(Mt.RotateLeft | Mt.RotateRight, false), this._ringManipulator.updateStateEnabled(Mt.ScaleIn, this._scaleRotateDragData.scaleDir < 0), this._ringManipulator.updateStateEnabled(Mt.ScaleOut, this._scaleRotateDragData.scaleDir >= 0);
      }
    else
      this._ringManipulator.updateStateEnabled(Mt.ScaleIn | Mt.ScaleOut | Mt.RotateLeft | Mt.RotateRight, false);
  }
  _updateManipulatorTransform() {
    const t9 = p3(f3.get(), this.adapter.angle, r3(0, 0, 1));
    if (null == t9)
      return;
    const e17 = this.getScale(), a14 = d3(f3.get(), o3(c3.get(), e17, e17, e17));
    this._ringManipulator.modelTransform = c(f3.get(), a14, t9);
  }
  _createRingManipulator() {
    const t9 = (t10, e18, a15) => {
      const o12 = [], i10 = Math.ceil(t7 * (e18 - t10) / (2 * Math.PI));
      for (let s7 = 0; s7 < i10 + 1; s7++) {
        const n14 = t10 + s7 * (e18 - t10) / i10;
        o12.push(r3(a15 * Math.cos(n14), a15 * Math.sin(n14), 0));
      }
      return o12;
    }, e17 = (e18) => t9(0, 2 * Math.PI, e18), a14 = (t10) => [[-t10 / 2, 0], [t10 / 2, 0], [t10 / 2, P6 / 2], [-t10 / 2, P6 / 2]], o11 = this._createMaterial(1), i9 = (t10, e18, i10 = o11) => it(i10, a14(e18), t10, [], [], false), s6 = e17(I2), n13 = i9(s6, i7), r14 = { left: new Array(), right: new Array() }, l16 = [];
    for (let w6 = 0; w6 < 2; w6++) {
      const e18 = w6 * Math.PI - Math.PI / 4, a15 = Math.PI / 2 - x6, s7 = e18 + a15, n14 = e18 + Math.PI / 2 - a15, c14 = t9(s7, n14, n7), p14 = i9(c14, l13);
      l16.push(c14), l16.push(t9(s7, n14, p9 - i7 / 2)), r14.left.push(p14), r14.right.push(p14.instantiate());
      for (let t10 = 0; t10 < 2; t10++) {
        const e19 = 0 === t10, a16 = e6();
        if (e19) {
          f2(a16, a16, [1, -1, 1]), b(a16, a16, -s7, [0, 0, 1]);
          const t11 = Math.round(f9 * (c14.length - 1));
          a16[12] = c14[t11][0], a16[13] = c14[t11][1], a16[14] = c14[t11][2];
        } else {
          b(a16, a16, n14, [0, 0, 1]);
          const t11 = Math.round((1 - f9) * (c14.length - 1));
          a16[12] = c14[t11][0], a16[13] = c14[t11][1], a16[14] = c14[t11][2];
        }
        const i10 = wt(o11, r12, 0, s4, P6);
        mt(i10, a16), (e19 ? r14.left : r14.right).push(i10);
      }
    }
    const c13 = [];
    for (let b6 = 0; b6 < 2; b6++) {
      const e18 = b6 * Math.PI - Math.PI / 4, a15 = Math.PI / 2 - b4, o12 = e18 + a15, s7 = e18 + Math.PI / 2 - a15, n14 = t9(o12, s7, p9);
      c13.push(i9(n14, l13));
    }
    const p13 = this._createMaterial(0.66), h13 = this._createMaterial(0.5), u14 = this._createMaterial(0.33), d7 = e17(I2 + g7), g10 = e17(I2 + j4), m8 = i9(d7, l13, p13), f10 = i9(g10, l13, u14), _4 = e17(I2 - g7), v8 = e17(I2 - j4), D8 = i9(_4, l13, p13), S9 = i9(v8, l13, u14);
    let j7 = [new e10(n13, Mt.DelayedFocused), new e10(n13.instantiate({ material: h13 }), t5.None)];
    this.mode && "scale" !== this.mode || (j7 = j7.concat([...c13.map((t10) => new e10(t10, Mt.DelayedFocused | Mt.Unlocked)), new e10(m8, Mt.DelayedFocused | Mt.ScaleIn), new e10(f10, Mt.DelayedFocused | Mt.ScaleIn), new e10(D8, Mt.DelayedFocused | Mt.ScaleOut), new e10(S9, Mt.DelayedFocused | Mt.ScaleOut)])), this.mode && "rotate" !== this.mode || (j7 = j7.concat([...r14.right.map((t10) => new e10(t10.instantiate(), Mt.DelayedFocused | Mt.Unlocked)), ...r14.left.map((t10) => new e10(t10, Mt.DelayedFocused | Mt.RotateLeft)), ...r14.right.map((t10) => new e10(t10, Mt.DelayedFocused | Mt.RotateRight))]));
    const T5 = [s6, ...l16];
    return new ee({ view: this.tool.view, renderObjects: j7, autoScaleRenderObjects: false, worldOriented: true, radius: i7, focusMultiplier: 1, touchMultiplier: 1.5, elevationInfo: this.tool.object.elevationInfo, collisionType: { type: "ribbon", paths: T5, direction: r3(0, 0, 1) } });
  }
  _createMaterial(t9) {
    const e17 = new _3({ cullFace: e8.Back, renderOccluded: h6.Transparent, isDecoration: true });
    return this.addHandles(d2(() => ({ color: F(this.tool.view.effectiveTheme.accentColor, t9) }), (t10) => e17.setParameters(t10), P)), e17;
  }
  get test() {
    return { ringManipulator: this._ringManipulator, setRingIndicatorDelayMs: (t9) => this._ringIndicatorDelayMs = t9, tooltip: this._tooltip };
  }
};
function jt(t9, e17) {
  const a14 = e4(c3.get(), e17.renderStart, t9.origin), o11 = e4(c3.get(), e17.renderEnd, t9.origin), i9 = s2(a14), s6 = s2(o11);
  return 0 === i9 ? 0 : s6 / i9;
}
function Tt(t9, e17, a14, o11) {
  const { renderStart: i9, renderEnd: s6 } = t9, n13 = wt2(i9, o11, c3.get()), r14 = wt2(s6, o11, c3.get());
  if (p2(n13, r14) < d6 * d6)
    return null;
  const l16 = e4(c3.get(), i9, a14), c13 = _(c3.get(), l16, F2(e17)), p13 = i9, h13 = u2(c3.get(), p13, c13), u14 = wt2(a14, o11, c3.get()), d7 = n13, g10 = wt2(h13, o11, c3.get()), m8 = e4(c3.get(), g10, d7), f10 = e4(c3.get(), n13, u14), _4 = p4(d7, m8), v8 = p4(u14, f10);
  return v3(_4, r14) < v3(v8, r14) ? "rotate" : "scale";
}
function wt2(t9, e17, a14) {
  return e17.projectToScreen(t9, At), o3(a14, At[0], At[1], 0);
}
var Rt2;
function It(t9, e17) {
  let a14 = null, o11 = 1;
  const i9 = () => o11;
  return { start: () => {
    o11 = t9.getScale(), a14 = t9.getScale, t9.getScale = i9, e17();
  }, update: (t10) => (o11 += ((o11 + 1) / 2 - o11) * Math.min(t10 * u11, 1), e17(), Math.abs(o11 - 1) < 0.01 ? Rt2.STOP : Rt2.CONTINUE), destroy: () => {
    a14 && (t9.getScale = a14), e17();
  } };
}
function kt2(t9, e17, a14) {
  let o11 = 0, i9 = null;
  const s6 = () => false;
  return { start: () => {
    i9 = t9.getFocused, t9.getFocused = s6, o11 = 0, e17();
  }, update: (t10) => (o11 += t10, !(i9 == null ? void 0 : i9()) || o11 >= a14.delayMs ? Rt2.STOP : Rt2.CONTINUE), destroy: () => {
    i9 && (t9.getFocused = i9), e17();
  } };
}
function Ot(t9) {
  switch (t9) {
    case "integer":
    case "long":
      return 0;
    default:
      return null;
  }
}
e([y({ constructOnly: true })], yt.prototype, "tool", void 0), e([y({ constructOnly: true })], yt.prototype, "adapter", void 0), e([y({ constructOnly: true })], yt.prototype, "sketchOptions", void 0), e([y()], yt.prototype, "mode", void 0), e([y()], yt.prototype, "_activeAnimation", void 0), e([y()], yt.prototype, "updating", null), yt = e([a("esri.views.3d.interactive.editingTools.transform.ScaleRotateTransform")], yt), function(t9) {
  t9[t9.CONTINUE = 0] = "CONTINUE", t9[t9.STOP = 1] = "STOP";
}(Rt2 || (Rt2 = {}));
var At = i2();

// node_modules/@arcgis/core/views/3d/interactive/editingTools/transform/TransformTool3D.js
var D6 = class extends l8 {
  constructor(t9) {
    super(t9), this.events = new o2(), this.enableZ = true, this.enableRotation = true, this.enableScaling = true, this.sketchOptions = new l9(), this.type = "transform-3d", this.tooltip = null, this._updatingHandles = new h5(), this._scaleRotate = null, this._translateGraphicTooltipInfo = null, this._translateGraphicXYTooltipInfo = null, this._translateGraphicZTooltipInfo = null;
  }
  initialize() {
    var _a;
    const { object: t9, view: i9 } = this;
    this.addHandles(d2(() => this.sketchOptions.tooltips.effectiveEnabled, (t10) => {
      this.tooltip = t10 ? new u9({ view: i9 }) : u(this.tooltip);
    }, A2)), this._moveManipulation = new u12({ tool: this, view: i9, snapToScene: this.snapToScene, xyAvailable: true, xyAxisAvailable: true, zAvailable: this.enableZ && n4(t9.operations, t9.elevationInfo), radius: u12.radiusForSymbol((_a = t9.graphic) == null ? void 0 : _a.symbol) }), this._moveManipulation.forEachManipulator((t10) => this.addHandles(t10.events.on("immediate-click", (t11) => {
      this.events.emit("immediate-click", { ...t11, object: this.object }), t11.stopPropagation();
    })));
    const n13 = (t10) => (e17) => {
      this.addHandles(e17.events.on("focus-changed", ({ action: e18 }) => {
        const i10 = this.tooltip;
        null != i10 && ("focus" === e18 ? this._updateMoveTooltip(t10) : i10.clear());
      }));
    };
    this._moveManipulation.xyManipulation.forEachManipulator(n13(c11.XY)), this._moveManipulation.xyAxisManipulation.forEachManipulator(n13(c11.XY_AXIS)), this._moveManipulation.zManipulation.forEachManipulator(n13(c11.Z));
    const s6 = t9.elevationInfo;
    if (this._moveManipulation.elevationInfo = s6, this.addHandles(a7(t9, i9)), this._moveManipulation.createManipulatedObjectDragPipeline((e17, o11, a14, n14, l16) => {
      var _a2;
      if (e17 === c11.XY) {
        const { snappingStep: e18, cancelSnapping: o12 } = f7({ snappingContext: new e12({ elevationInfo: s6, pointer: l16, editGeometryOperations: E4.fromGeometry(new x({ spatialReference: (_a2 = t9.operations) == null ? void 0 : _a2.data.spatialReference }), i9.state.viewingMode), visualizer: new O2(), excludeFeature: t9.graphic }), snappingManager: this.snappingManager, updatingHandles: this._updatingHandles, useZ: false });
        n14 = n14.next(o12), a14 = a14.next(U2(this.view, s6)).next(...e18);
      }
      return { steps: a14 = a14.next((t10) => (this._updateMoveTooltip(e17, t10), t10)), cancel: n14 };
    }, t9, (t10) => {
      const { action: e17, object: i10, dxScreen: o11, dyScreen: a14 } = t10, n14 = { object: i10, dxScreen: o11, dyScreen: a14 };
      switch (e17) {
        case "start":
          this.events.emit("translate-start", n14), this.events.emit("record-undo", { record: this._createGeometryUndoRecord() });
          break;
        case "update":
          this.events.emit("translate", n14);
          break;
        case "end":
          this.events.emit("translate-stop", n14);
      }
    }), this._moveManipulation.angle = null != this._scaleRotate ? this._scaleRotate.angle : 0, this._scaleRotateAdapter = this._createScaleRotateAdapter(), this.addHandles(d2(() => this._scaleRotateAdapter.angle, () => this._updateMoveAngle())), this.enableScaling || this.enableRotation) {
      const t10 = this.enableScaling && this.enableRotation ? null : this.enableScaling ? "scale" : "rotate";
      this._scaleRotate = new yt({ tool: this, mode: t10, adapter: this._scaleRotateAdapter, sketchOptions: this.sketchOptions }), this.addHandles(this._scaleRotate.events.on("scale-changed", () => this._onScaleChanged()));
    }
    this.addHandles([l12({ view: this.view, object: this.object, forEachManipulator: (t10) => this._forEachManipulator(t10), onManipulatorsChanged: () => e2() }), this.object.on("committed", () => this._onGeometryChanged()), this._hideManipulatorsForObjectState(), d2(() => i9.scale, () => this._updateMoveAngle())].filter(k)), this._onGeometryChanged(), this._updateMoveAngle(), this._forEachManipulator((t10) => {
      t10 instanceof ee && this.addHandles(t10.events.on("grab-changed", () => this._updateManipulatorsInteractive()));
    }), this.finishToolCreation();
  }
  destroy() {
    this.tooltip = u(this.tooltip), this._moveManipulation.destroy(), this._scaleRotate = u(this._scaleRotate), this._scaleRotateAdapter = u(this._scaleRotateAdapter), this._updatingHandles.destroy(), this._set("view", null), this._set("object", null);
  }
  _updateManipulatorsInteractive() {
    null != this._scaleRotate && (this._scaleRotate.interactive = !this._moveManipulation.grabbing, this._moveManipulation.interactive = !this._scaleRotate.grabbing);
  }
  _createScaleRotateAdapter() {
    var _a, _b, _c, _d;
    const t9 = t6(this.object);
    return "mesh" === (t9 == null ? void 0 : t9.type) ? new g9({ object: this.object, geometry: t9, viewingMode: this.view.state.viewingMode }) : new a12({ graphic: this.object.graphic, sizeFilter: (t10) => this._enforceNonZeroSize(t10), findLayerView: () => this.view.allLayerViews.find((t10) => {
      var _a2;
      return t10.layer === ((_a2 = this.object.graphic) == null ? void 0 : _a2.layer);
    }), sizeAxis: ((_d = (_c = (_b = (_a = this.sketchOptions) == null ? void 0 : _a.tooltips) == null ? void 0 : _b.visualVariables) == null ? void 0 : _c.size) == null ? void 0 : _d.axis) ?? null });
  }
  _forEachManipulator(t9) {
    var _a, _b;
    (_a = this._moveManipulation) == null ? void 0 : _a.forEachManipulator(t9), (_b = this._scaleRotate) == null ? void 0 : _b.forEachManipulator(t9);
  }
  _hideManipulatorsForObjectState() {
    return d2(() => this.object.visible, (t9) => {
      this._forEachManipulator((e17) => e17.available = t9), this._moveManipulation.zManipulation.available = t9 && this.enableZ && n4(this.object.operations, this.object.elevationInfo);
    });
  }
  _createGeometryUndoRecord() {
    return r13(this.object);
  }
  set snapToScene(t9) {
    this._moveManipulation && (this._moveManipulation.snapToScene = t9), this._set("snapToScene", t9);
  }
  get updating() {
    var _a;
    return this._updatingHandles.updating || !!((_a = this._scaleRotate) == null ? void 0 : _a.updating);
  }
  set location(t9) {
    this._moveManipulation.location = t9, this._scaleRotate && (this._scaleRotate.location = t9);
  }
  set elevationAlignedLocation(t9) {
    this._moveManipulation.elevationAlignedLocation = t9, this._scaleRotate && (this._scaleRotate.elevationAlignedLocation = t9);
  }
  reset() {
  }
  onHide() {
    var _a;
    (_a = this._scaleRotate) == null ? void 0 : _a.cancelActiveAnimation();
  }
  _onScaleChanged() {
    null != this._scaleRotate && (this._moveManipulation.displayScale = this._scaleRotate.getScale());
  }
  _updateMoveAngle() {
    this.view.state.viewingMode === l4.Local || this.view.scale < v7 ? this._moveManipulation.angle = this._scaleRotateAdapter.angle : this._moveManipulation.angle = 0;
  }
  _onGeometryChanged() {
    F3(this, this.object);
  }
  _enforceNonZeroSize(t9) {
    return t9 || this.view.state.camera.computeRenderPixelSizeAt(this._moveManipulation.renderLocation);
  }
  _updateMoveTooltip(t9, e17) {
    const { sketchOptions: i9, tooltip: o11 } = this;
    if (null != o11) {
      switch (o11.clear(), t9) {
        case c11.XY:
          o11.info = this._translateGraphicTooltipInfo ?? (this._translateGraphicTooltipInfo = new r10({ sketchOptions: i9 })), Y2(o11.info, e17, (t10, e18) => m3(t10, e18));
          break;
        case c11.XY_AXIS:
          o11.info = this._translateGraphicXYTooltipInfo ?? (this._translateGraphicXYTooltipInfo = new l11({ sketchOptions: i9 })), Y2(o11.info, e17, (t10, i10) => y4(m3(t10, i10), a10(e17)));
          break;
        case c11.Z:
          o11.info = this._translateGraphicZTooltipInfo ?? (this._translateGraphicZTooltipInfo = new a5({ sketchOptions: i9 })), Y2(o11.info, e17, y5);
      }
      o11.info.sketchOptions = i9;
    }
  }
  get test() {
    return { discManipulator: this._moveManipulation.xyManipulation.test.discManipulator, zManipulator: this._moveManipulation.zManipulation.test.manipulator, ringManipulator: null != this._scaleRotate ? this._scaleRotate.test.ringManipulator : null, arrowManipulators: this._moveManipulation.xyAxisManipulation.test.arrowManipulators, setRingIndicatorDelayMs: (t9) => null != this._scaleRotate ? this._scaleRotate.test.setRingIndicatorDelayMs(t9) : null, scaleRotateAdapter: this._scaleRotateAdapter, scaleRotateTransform: this._scaleRotate };
  }
};
function Y2(t9, e17, i9) {
  if (null != e17 && "end" !== e17.action) {
    const { mapStart: o11, mapEnd: a14 } = e17, s6 = i9(o11, a14);
    t9.distance = null != s6 ? s6 : h7;
  } else
    t9.distance = h7;
}
e([y({ constructOnly: true, nonNullable: true })], D6.prototype, "view", void 0), e([y({ constructOnly: true, nonNullable: true })], D6.prototype, "object", void 0), e([y({ constructOnly: true, nonNullable: true })], D6.prototype, "enableZ", void 0), e([y()], D6.prototype, "enableRotation", void 0), e([y()], D6.prototype, "enableScaling", void 0), e([y({ constructOnly: true, type: l9 })], D6.prototype, "sketchOptions", void 0), e([y({ value: false })], D6.prototype, "snapToScene", null), e([y({ constructOnly: true })], D6.prototype, "snappingManager", void 0), e([y({ readOnly: true })], D6.prototype, "type", void 0), e([y({ readOnly: true })], D6.prototype, "updating", null), e([y()], D6.prototype, "tooltip", void 0), D6 = e([a("esri.views.3d.interactive.editingTools.transform.TransformTool3D")], D6);

// node_modules/@arcgis/core/views/3d/interactive/editingTools/transform/extentTransform/ExtentMove.js
var b5 = class {
  get _object() {
    return this._tool.object;
  }
  get _operations() {
    return this._object.operations;
  }
  constructor(t9, e17) {
    this._tool = t9, this._bounds = e17, this._moveXYTooltipInfo = null, this._moveZTooltipInfo = null;
    const o11 = this._tool, i9 = o11.view;
    this.moveXYObjectManipulation = new l14({ view: i9, tool: o11, object: this._object }), o11.addHandles(this._createMoveXYObjectDragPipeline()), this.moveZManipulator = new I(i9, H2.CENTER_ON_CALLOUT), this.moveZManipulator.state |= Si, o11.manipulators.add(this.moveZManipulator), o11.addHandles([this._createMoveZDragPipeline()]), o11.addHandles([o11.events.on("translate-stop", () => {
      this._moveXYTooltipInfo = null, this._moveZTooltipInfo = null;
    })]);
  }
  destroy() {
    this.moveXYObjectManipulation.destroy(), this._tool.manipulators.remove(this.moveZManipulator), this.moveZManipulator.destroy();
  }
  forEachManipulator(t9) {
    this.moveXYObjectManipulation.forEachManipulator(t9), t9(this.moveZManipulator, A5.TRANSLATE_Z);
  }
  updateManipulators(t9, e17) {
    const n13 = this.moveZManipulator, s6 = x3(f3.get(), t9, Math.PI);
    s6[12] = 0, s6[13] = 0, s6[14] = 0, n13.modelTransform = s6, n13.renderLocation = e4(c3.get(), e17.origin, e17.basis1);
  }
  getUpdatedTooltipInfo() {
    return this.moveXYObjectManipulation.grabbing || this.moveXYObjectManipulation.dragging ? this._computeMoveXYTooltipInfo() : this.moveZManipulator.focused ? this._computeMoveZTooltipInfo() : null;
  }
  _computeMoveXYTooltipInfo() {
    const t9 = this._tool, o11 = this._moveXYTooltipInfo ?? (this._moveXYTooltipInfo = new r10({ sketchOptions: t9.sketchOptions }));
    if (this.moveXYObjectManipulation.dragging) {
      const e17 = this._bounds, i9 = e17.mapBoundsStart.origin, n13 = e17.mapBounds.origin, { renderSpatialReference: a14 } = t9.view;
      if (!a14)
        return null;
      const r14 = u8(i9, n13, a14);
      if (null == r14)
        return null;
      o11.distance = r14;
    } else
      o11.distance = h7;
    return o11;
  }
  _computeMoveZTooltipInfo() {
    const t9 = this._tool, o11 = this._moveZTooltipInfo ?? (this._moveZTooltipInfo = new a5({ sketchOptions: t9.sketchOptions }));
    if (this.moveZManipulator.dragging) {
      const e17 = this._bounds, i9 = e17.mapBoundsStart.origin, n13 = e17.mapBounds.origin, { renderSpatialReference: a14 } = t9.view;
      if (!a14)
        return null;
      const r14 = g4(i9, n13, a14);
      if (null == r14)
        return null;
      o11.distance = r14;
    } else
      o11.distance = h7;
    return o11;
  }
  _createMoveXYObjectDragPipeline() {
    return this.moveXYObjectManipulation.createDragPipeline((t9, e17, o11) => this._applyObjectMoveSteps(e17, o11));
  }
  _createMoveZDragPipeline() {
    if (!this._operations)
      return e2();
    const e17 = this._operations.data.spatialReference;
    return p5(this.moveZManipulator, (t9, o11, i9) => {
      const a14 = t2(t9.renderLocation), r14 = o11.next(N(this._tool.view, a14, e17)).next(j2());
      this._applyObjectMoveSteps(r14, i9);
    });
  }
  _applyObjectMoveSteps(t9, e17) {
    const { _tool: o11, _object: i9 } = this, n13 = t9.next((t10) => ("start" === t10.action && (o11.inputState = { type: "move" }, this._bounds.backupMapBounds(), o11.events.emit("translate-start", { object: i9, dxScreen: t10.screenDeltaX, dyScreen: t10.screenDeltaY })), t10)).next(v5()).next(this._moveDragUpdateGeometry()).next((t10) => {
      const e18 = { object: i9, dxScreen: t10.screenDeltaX, dyScreen: t10.screenDeltaY };
      switch (t10.action) {
        case "start":
        case "update":
          (t10.mapEnd.x - t10.mapStart.x || t10.mapEnd.y - t10.mapStart.y || (t10.mapEnd.z ?? 0) - (t10.mapStart.z ?? 0)) && o11.events.emit("translate", e18);
          break;
        case "end":
          o11.inputState = null, o11.events.emit("translate-stop", e18);
      }
      return t10;
    });
    return e17.next(() => {
      null != o11.inputState && o11.events.emit("translate-stop", { object: i9, dxScreen: 0, dyScreen: 0 }), o11.cancel();
    }), n13;
  }
  _moveDragUpdateGeometry() {
    const t9 = this._tool;
    return (e17) => {
      if (null == t9.inputState || "move" !== t9.inputState.type)
        return e17;
      const o11 = "start" === e17.action ? E3.NEW_STEP : E3.ACCUMULATE_STEPS;
      if (this._operations) {
        const t10 = this._operations.move(e17.mapDeltaX, e17.mapDeltaY, e17.mapDeltaZ, o11);
        this._bounds.updateMapBoundsFromOperation(t10);
      }
      return e17;
    };
  }
};

// node_modules/@arcgis/core/views/3d/interactive/editingTools/transform/extentTransform/ExtentRotate.js
var M7 = class {
  get _object() {
    return this._tool.object;
  }
  get _operations() {
    return this._object.operations;
  }
  constructor(t9, e17, o11) {
    var _a;
    this._tool = t9, this._bounds = e17, this._snapRotation = o11, this._rotateTooltipInfo = null, this._startAngle = 0, this._endAngle = 0;
    const r14 = this._tool, a14 = r14.view, n13 = !((_a = a14._stage) == null ? void 0 : _a.renderView.renderingContext.driverTest.svgPremultipliesAlpha.result);
    this.rotateManipulator = new g6(a14, (t10, e18) => l6(a14.textures, { accentColor: t10, contrastColor: e18, preMultiplyAlpha: n13 })), r14.addHandles([this.rotateManipulator.events.on("grab-changed", (t10) => this._onRotateGrab(t10)), this._createRotateDragPipeline(this.rotateManipulator)]), r14.manipulators.add(this.rotateManipulator), r14.addHandles([r14.events.on("rotate-start", (t10) => this._startAngle = t10.angle), r14.events.on("rotate", (t10) => this._endAngle = t10.angle), r14.events.on("rotate-stop", () => {
      this._startAngle = 0, this._endAngle = 0;
    })]);
  }
  destroy() {
    this._tool.manipulators.remove(this.rotateManipulator), this.rotateManipulator.destroy();
  }
  forEachManipulator(t9) {
    t9(this.rotateManipulator, A5.ROTATE);
  }
  updateManipulators(t9, r14) {
    const a14 = this._bounds.mapBounds.plane[2] < 0 ? Math.PI : 0, n13 = l3(f3.get(), t9, a14);
    n13[12] = 0, n13[13] = 0, n13[14] = 0, this.rotateManipulator.modelTransform = n13, this.rotateManipulator.renderLocation = u2(c3.get(), r14.origin, r14.basis1);
  }
  getUpdatedTooltipInfo() {
    return this.rotateManipulator.focused ? this._computeRotateTooltipInfo() : null;
  }
  _computeRotateTooltipInfo() {
    const t9 = this._rotateTooltipInfo ?? (this._rotateTooltipInfo = new i6({ sketchOptions: this._tool.sketchOptions }));
    return t9.angle = this._startAngle - this._endAngle, t9;
  }
  _onRotateGrab({ action: t9, screenPoint: e17 }) {
    const o11 = this._tool, r14 = this._bounds;
    if ("start" !== t9 || !e17)
      return;
    const a14 = li(r14.displayBounds, o11.view.renderCoordsHelper, _i.HEADING, E2()), n13 = m4(o11.view.state.camera, e17);
    S2(a14, n13, c3.get()) && (r14.backupMapBounds(), o11.inputState = { type: "rotate", rotatePlane: a14 });
  }
  _createRotateDragPipeline(e17) {
    const { _tool: o11, _object: r14 } = this;
    return p5(e17, (e18, a14, n13) => {
      const s6 = o11.inputState;
      null != s6 && (a14.next((t9) => ("start" === t9.action && o11.events.emit("rotate-start", { object: r14, angle: 0 }), t9)).next(U3(o11.view, s6.rotatePlane)).next(this._rotateDragRenderPlaneToRotate(s6)).next(...this._snapRotation()).next(this._rotateDragUpdateGeometry()).next((e19) => {
        const a15 = { object: r14, angle: M(e19.rotateAngle) };
        switch (e19.action) {
          case "start":
          case "update":
            o11.events.emit("rotate", a15);
            break;
          case "end":
            o11.inputState = null, o11.events.emit("rotate-stop", a15);
        }
        return e19;
      }), n13.next(() => {
        null != o11.inputState && o11.events.emit("rotate-stop", { object: r14, angle: 0 }), o11.cancel();
      }));
    });
  }
  _rotateDragRenderPlaneToRotate(t9) {
    return (e17) => {
      const o11 = F2(t9.rotatePlane), r14 = w2(e17.renderStart, e17.renderEnd, this._bounds.displayBounds.origin, o11);
      return { ...e17, rotateAxis: o11, rotateAngle: r14 };
    };
  }
  _rotateDragUpdateGeometry() {
    const t9 = this._bounds;
    return (e17) => {
      const o11 = r4(n(), t9.mapBoundsStart.origin), s6 = "start" === e17.action ? E3.NEW_STEP : E3.ACCUMULATE_STEPS;
      if (this._operations) {
        const r14 = this._operations.rotate(o11, e17.rotateAngle, s6, e11.REPLACE);
        Z(t9.mapBoundsStart, t9.mapBounds), t9.updateMapBoundsFromOperation(r14);
      }
      return e17;
    };
  }
};

// node_modules/@arcgis/core/views/3d/interactive/editingTools/transform/extentTransform/extentUtils.js
var x7 = class {
  constructor(t9, o11) {
    this._tool = t9, this.mapBounds = W2(), this.mapBoundsStart = W2(), this.displayBounds = W2(), t9.addHandles(v(() => t9.object, "modified-externally", () => this._resetMapBounds(), { onListenerAdd: () => this._resetMapBounds() })), this._onDisplayBoundsChanged = o11;
  }
  get displayBoundsMargin() {
    var _a, _b;
    const { view: s6, object: t9 } = this._tool, o11 = t6(t9), i9 = ((_a = s6.pointsOfInterest) == null ? void 0 : _a.centerOnSurfaceFrequent.location) ?? ((_b = o11 == null ? void 0 : o11.extent) == null ? void 0 : _b.center);
    return i9 ? D7 * s6.pixelSizeAt(i9) : 0;
  }
  backupMapBounds() {
    Z(this.mapBounds, this.mapBoundsStart);
  }
  updateDisplayBounds() {
    var _a;
    this._calculateDisplayBounds(), (_a = this._onDisplayBoundsChanged) == null ? void 0 : _a.call(this);
  }
  updateMapBoundsFromOperation(s6) {
    d5(s6, this.mapBounds), this.updateDisplayBounds();
  }
  updateMapBoundsFromOperationInverse(s6) {
    E5(s6, this.mapBounds), this.updateDisplayBounds();
  }
  _resetMapBounds() {
    this._calculateMapBounds(), this.updateDisplayBounds();
  }
  _calculateMapBounds() {
    var _a;
    const { view: s6, attachmentOrigin: e17, object: a14 } = this._tool, n13 = (_a = a14.operations) == null ? void 0 : _a.data;
    if (!n13)
      return;
    const r14 = n13.geometry;
    this.spatialReference = r14.spatialReference;
    const p13 = n6(r14);
    l5(p13, p13, -1);
    const d7 = s6.spatialReference, c13 = r14.spatialReference, l16 = e17 ? s6.pixelSizeAt(e17) * z2(d7) / W(c13) : 0;
    F4(p13, n13, O5 * l16, this.mapBounds);
  }
  _calculateDisplayBounds() {
    const { view: s6, attachmentOrigin: t9 } = this._tool, o11 = (t9 == null ? void 0 : t9.z) ?? f4(this.mapBounds.origin, s6.elevationProvider, o7.fromElevationInfo(this._tool.object.elevationInfo), s6.renderCoordsHelper), i9 = Z(this.mapBounds);
    i9.origin[2] = o11 ?? 0, U4(i9, s6.renderCoordsHelper, this.spatialReference, this.displayBoundsMargin, this.displayBounds);
  }
};
var D7 = 10;
var O5 = 80;
function U4(s6, t9, o11, i9 = 0, u14) {
  u14 || (u14 = W2()), t9.toRenderCoords(s6.origin, o11, u14.origin);
  const m8 = c3.get();
  u2(m8, s6.origin, s6.basis1), u2(m8, m8, s6.basis2), t9.toRenderCoords(m8, o11, m8);
  const h13 = c3.get();
  u2(h13, s6.origin, s6.basis1), e4(h13, h13, s6.basis2), t9.toRenderCoords(h13, o11, h13);
  const B2 = c3.get();
  e4(B2, s6.origin, s6.basis1), e4(B2, B2, s6.basis2), t9.toRenderCoords(B2, o11, B2);
  const y7 = c3.get();
  e4(y7, s6.origin, s6.basis1), u2(y7, y7, s6.basis2), t9.toRenderCoords(y7, o11, y7);
  const j7 = A3(c3.get(), m8, h13, 0.5);
  e4(j7, j7, u14.origin);
  const v8 = A3(c3.get(), B2, y7, 0.5);
  e4(v8, u14.origin, v8), A3(u14.basis1, j7, v8, 0.5);
  const _4 = A3(c3.get(), y7, m8, 0.5);
  e4(_4, _4, u14.origin);
  const R7 = A3(c3.get(), h13, B2, 0.5);
  e4(R7, u14.origin, R7), A3(u14.basis2, _4, R7, 0.5);
  const C7 = _(c3.get(), u14.basis1, u14.basis2), M8 = _(C7, C7, u14.basis1);
  return z3(M8, M8), g(u14.basis2, M8, P2(u14.basis2, M8)), g(u14.basis1, u14.basis1, 1 + i9 / s2(u14.basis1)), g(u14.basis2, u14.basis2, 1 + i9 / s2(u14.basis2)), J3(u14), u14;
}
function S7(s6, t9, o11) {
  return e4(w5, e4(w5, s6.origin, s6.basis1), s6.basis2), q(I4, w5, s6.basis1, 2), q(A7, I4, s6.basis2, 2), q(k5, w5, s6.basis2, 2), w5[2] = I4[2] = A7[2] = k5[2] = t9, o8({ topLeft: k5, topRight: A7, bottomRight: I4, bottomLeft: w5, spatialReference: o11 });
}
var k5 = n();
var A7 = n();
var I4 = n();
var w5 = n();

// node_modules/@arcgis/core/views/3d/interactive/editingTools/transform/extentTransform/ExtentScale.js
var j6 = class {
  get _object() {
    return this._tool.object;
  }
  get _operations() {
    return this._object.operations;
  }
  get zMax() {
    if (!this._zMaxDirty || !this._operations)
      return this._zMax;
    const t9 = this._operations.data;
    if (t9.geometry.hasZ) {
      const e17 = t9.coordinateHelper;
      this._zMax = Number.NEGATIVE_INFINITY;
      for (const s6 of t9.components)
        for (const t10 of s6.vertices) {
          const s7 = e17.getZ(t10.pos) ?? 0;
          this._zMax = Math.max(s7, this._zMax);
        }
    } else
      this._zMax = 0;
    return this._zMaxDirty = false, this._zMax;
  }
  constructor(e17, a14, i9) {
    this._tool = e17, this._bounds = a14, this._preserveAspectRatioStep = i9, this._resizeHandles = [{ direction: [1, 0] }, { direction: [1, 1] }, { direction: [0, 1] }, { direction: [-1, 1] }, { direction: [-1, 0] }, { direction: [-1, -1] }, { direction: [0, -1] }, { direction: [1, -1] }], this._scaleTooltipInfo = null, this._displayBoundsStart = W2(), this._displayBoundsMarginStart = 0, this._startScale = n3(), this._endScale = n3(), this._sizeStart = null, this._zMax = 0, this._zMaxDirty = true;
    const o11 = this._tool, r14 = o11.view;
    this.resizeManipulators = this._resizeHandles.map((t9) => {
      const e18 = new v6(r14, t9);
      return o11.addHandles([e18.events.on("grab-changed", (t10) => this._onResizeGrab(t10)), this._createResizeDragPipeline(e18, t9)]), e18;
    }), o11.manipulators.addMany(this.resizeManipulators), o11.addHandles([o11.events.on("scale-start", (e18) => {
      o5(this._startScale, e18.xScale, e18.yScale), o5(this._endScale, e18.xScale, e18.yScale);
    }), o11.events.on("scale", (e18) => {
      o5(this._endScale, e18.xScale, e18.yScale);
    }), o11.events.on("scale-stop", () => {
      o5(this._startScale, 0, 0), o5(this._endScale, 0, 0);
    })]), this._operations && o11.addHandles(this._operations.data.on("change", () => {
      var _a;
      "resize" !== ((_a = o11.inputState) == null ? void 0 : _a.type) && (this._zMaxDirty = true);
    }));
  }
  destroy() {
    this.forEachManipulator((t9) => {
      this._tool.manipulators.remove(t9), t9.destroy();
    });
  }
  forEachManipulator(t9) {
    this.resizeManipulators.forEach((e17) => t9(e17, A5.SCALE));
  }
  updateManipulators(t9, e17) {
    this.resizeManipulators.forEach((s6, a14) => {
      gi(s6, this._resizeHandles[a14], t9, e17);
    });
  }
  getUpdatedTooltipInfo() {
    return this.resizeManipulators.some((t9) => t9.focused) ? this._computeScaleTooltipInfo() : null;
  }
  _computeScaleTooltipInfo() {
    const t9 = this._tool, e17 = this._scaleTooltipInfo ?? (this._scaleTooltipInfo = new p7({ sketchOptions: t9.sketchOptions })), s6 = S7(this._bounds.mapBounds, this.zMax, this._bounds.spatialReference);
    return null == s6 ? null : (e17.xSize = s6.xSize, e17.ySize = s6.ySize, null != this._sizeStart && this.resizeManipulators.some((t10) => t10.dragging) ? (e17.xScale = s6.xSize.value / this._sizeStart.xSize.value, e17.yScale = s6.ySize.value / this._sizeStart.ySize.value) : (e17.xScale = 1, e17.yScale = 1), e17);
  }
  _onResizeGrab({ action: t9, screenPoint: e17 }) {
    const s6 = this._tool, a14 = this._bounds;
    if ("start" !== t9 || !e17)
      return;
    const i9 = m4(s6.view.state.camera, e17);
    S2(a14.displayBounds.plane, i9, c3.get()) && (a14.backupMapBounds(), Z(a14.displayBounds, this._displayBoundsStart), this._displayBoundsMarginStart = a14.displayBoundsMargin, this._sizeStart = S7(a14.mapBoundsStart, this.zMax, a14.spatialReference), s6.inputState = { type: "resize" });
  }
  _createResizeDragPipeline(t9, e17) {
    const { _tool: s6, _object: a14 } = this;
    return p5(t9, (t10, i9, o11) => {
      null != s6.inputState && (i9.next((t11) => ("start" === t11.action && s6.events.emit("scale-start", { object: a14, xScale: 1, yScale: 1 }), t11)).next(U3(s6.view, this._displayBoundsStart.plane)).next((t11) => ({ ...t11, handle: e17 })).next(this._resizeDragRenderPlaneToFactors()).next(...this._preserveAspectRatioStep()).next(this._resizeDragUpdateGeometry()).next((t11) => {
        const e18 = { object: a14, xScale: t11.factor1, yScale: t11.factor2 };
        switch (t11.action) {
          case "start":
          case "update":
            s6.events.emit("scale", e18);
            break;
          case "end":
            s6.inputState = null, s6.events.emit("scale-stop", e18);
        }
        return t11;
      }), o11.next(() => {
        null != s6.inputState && s6.events.emit("scale-stop", { object: a14, xScale: 1, yScale: 1 }), s6.cancel();
      }));
    });
  }
  _resizeDragRenderPlaneToFactors() {
    const t9 = this._bounds;
    return (e17) => {
      const s6 = this._displayBoundsStart, c13 = e17.handle.direction, l16 = t9.displayBoundsMargin, p13 = this._displayBoundsMarginStart, d7 = r4(c3.get(), s6.origin);
      q(d7, d7, s6.basis1, -c13[0]), q(d7, d7, s6.basis2, -c13[1]);
      const u14 = e4(c3.get(), e17.renderEnd, d7), m8 = e4(c3.get(), e17.renderStart, d7), f10 = Ei(e17.handle), z8 = Ii(s6), y7 = Ii(t9.displayBounds) / z8, x8 = (t10, e18) => {
        if (0 === t10)
          return 1;
        let s7 = s2(e18), a14 = 0.5 * t10 * P2(e18, u14) / s7;
        const i9 = a14 < 0 ? -1 : 1;
        if (f10) {
          a14 += (s7 - 0.5 * t10 * P2(e18, m8) / s7) * i9 * y7;
        }
        const o11 = s7 < 1.5 * p13 ? 1 : B;
        return s7 = Math.max(s7 - p13, B), i9 > 0 && (a14 -= l16), i9 * Math.max(i9 * (a14 / s7), o11);
      };
      return { ...e17, factor1: x8(c13[0], s6.basis1), factor2: x8(c13[1], s6.basis2) };
    };
  }
  _resizeDragUpdateGeometry() {
    const o11 = this._bounds;
    return (r14) => {
      const n13 = r4(n(), o11.mapBoundsStart.origin);
      q(n13, n13, o11.mapBoundsStart.basis1, -r14.handle.direction[0]), q(n13, n13, o11.mapBoundsStart.basis2, -r14.handle.direction[1]);
      const l16 = o5(n3(), o11.mapBoundsStart.basis1[0], o11.mapBoundsStart.basis1[1]);
      v4(l16, l16);
      const d7 = "start" === r14.action ? E3.NEW_STEP : E3.ACCUMULATE_STEPS;
      if (this._operations) {
        const t9 = this._operations.scale(n13, l16, r14.factor1, r14.factor2, d7, e11.REPLACE);
        Z(o11.mapBoundsStart, o11.mapBounds), o11.updateMapBoundsFromOperation(t9);
      }
      return r14;
    };
  }
};
var B = 1e-6;

// node_modules/@arcgis/core/views/3d/interactive/editingTools/transform/extentTransform/PreserveAspectRatio.js
var a13 = class {
  constructor() {
    this._lastDragEvent = null, this._next = null, this._enabled = false;
  }
  get enabled() {
    return this._enabled;
  }
  set enabled(t9) {
    if (this._enabled !== t9 && null != this._lastDragEvent && null != this._next) {
      const e17 = { ...this._lastDragEvent, action: "update" };
      t9 && n11(e17), this._next.execute(e17);
    }
    this._enabled = t9;
  }
  createDragEventPipelineStep() {
    this._lastDragEvent = null;
    const t9 = new w3();
    return this._next = t9, [(t10) => (this._lastDragEvent = "end" !== t10.action ? { ...t10 } : null, this._enabled && n11(t10), t10), t9];
  }
  get test() {
    return { _adjustScaleFactors: n11 };
  }
};
function n11(e17) {
  const a14 = Ei(e17.handle) ? Math.max(Math.abs(e17.factor1), Math.abs(e17.factor2)) : 0 === e17.handle.direction[0] ? Math.abs(e17.factor2) : Math.abs(e17.factor1);
  e17.factor1 = e17.factor1 < 0 ? -a14 : a14, e17.factor2 = e17.factor2 < 0 ? -a14 : a14;
}

// node_modules/@arcgis/core/views/3d/interactive/editingTools/transform/extentTransform/SnapRotation.js
var n12 = class {
  constructor() {
    this._lastDragEvent = null, this._next = null, this.incrementRadians = h2(5), this._enabled = false;
  }
  get enabled() {
    return this._enabled;
  }
  set enabled(t9) {
    if (this._enabled !== t9 && null != this._lastDragEvent && null != this._next) {
      const e17 = { ...this._lastDragEvent, action: "update" };
      t9 && this._adjustRotation(e17), this._next.execute(e17);
    }
    this._enabled = t9;
  }
  createDragEventPipelineStep() {
    this._lastDragEvent = null;
    const t9 = new w3();
    return this._next = t9, [(t10) => (this._lastDragEvent = "end" !== t10.action ? { ...t10 } : null, this._enabled && this._adjustRotation(t10), t10), t9];
  }
  _adjustRotation(t9) {
    t9.rotateAngle = Math.round(t9.rotateAngle / this.incrementRadians) * this.incrementRadians;
  }
};

// node_modules/@arcgis/core/views/3d/interactive/editingTools/transform/ExtentTransformTool.js
var S8 = class extends l8 {
  get updating() {
    return !!this.object.updating;
  }
  constructor(t9) {
    super(t9), this.events = new o2(), this.enableZ = true, this.enableScaling = true, this.enableRotation = true, this.sketchOptions = new l9(), this._preserveAspectRatio = new a13(), this._snapRotation = new n12(), this.grabbing = false, this.inputState = null, this._attachmentOrigin = null, this.type = "transform-3d", this._outlineVisualElement = null;
  }
  initialize() {
    const { view: t9, object: e17 } = this, n13 = this._bounds = new x7(this, () => this._updateManipulators());
    this._extentMove = new b5(this, n13), this._extentScale = new j6(this, n13, () => this._preserveAspectRatio.createDragEventPipelineStep()), this._extentRotate = new M7(this, n13, () => this._snapRotation.createDragEventPipelineStep()), this.addHandles([d2(() => this.enableZ, () => this._updateManipulatorAvailability(this._extentMove.moveZManipulator, A5.TRANSLATE_Z)), d2(() => this.enableScaling, () => this._extentScale.forEachManipulator((t10) => this._updateManipulatorAvailability(t10, A5.SCALE))), d2(() => this.enableRotation, () => this._updateManipulatorAvailability(this._extentRotate.rotateManipulator, A5.ROTATE))]), this._updateManipulators(), this._updateAllManipulatorAvailability();
    const s6 = l12({ view: t9, object: e17, forEachManipulator: (t10) => this._forEachManipulator(t10), onManipulatorsChanged: () => e2() });
    if (null != s6) {
      const { visualElement: t10 } = s6;
      t10 instanceof w4 && (this._outlineVisualElement = t10, this.addHandles(t10.events.on("attachment-origin-changed", () => this._bounds.updateDisplayBounds()))), this.addHandles(s6);
    }
    this.addHandles([e17.on("committed", () => this._onGeometryChanged()), d2(() => this.object.visible, () => this._updateAllManipulatorAvailability()), d2(() => this.object.isDraped, () => this._graphicDrapedChanged(), P), d2(() => {
      var _a;
      return (_a = t9.pointsOfInterest) == null ? void 0 : _a.centerOnSurfaceFrequent.location;
    }, () => n13.updateDisplayBounds())]);
    const r14 = (t10) => {
      this.addHandles(t10.events.on("grab-changed", () => {
        this.grabbing = t10.grabbing, this._updateAllManipulatorAvailability();
      }));
    };
    this._forEachManipulator(r14);
    const l16 = (t10, i9) => {
      this.addHandles(t10.events.on("immediate-click", (t11) => {
        i9 === A5.TRANSLATE_XY && this.events.emit("immediate-click", { ...t11, object: e17 }), t11.stopPropagation();
      }));
    };
    this._forEachManipulator(l16), this._initializeTooltip(), this.finishToolCreation();
  }
  destroy() {
    this._extentMove.destroy(), this._extentScale.destroy(), this._extentRotate.destroy(), this.tooltip.destroy(), this._set("view", null), this._set("object", null);
  }
  _initializeTooltip() {
    const { view: t9 } = this, e17 = this.tooltip = new u9({ view: t9 }), i9 = () => {
      e17.info = this._getUpdatedTooltipInfo();
    };
    this.addHandles([d2(() => this.sketchOptions.tooltips.effectiveEnabled, i9), this.events.on("translate-start", i9), this.events.on("translate", i9), this.events.on("translate-stop", () => this.tooltip.clear()), this.events.on("rotate-start", i9), this.events.on("rotate", i9), this.events.on("rotate-stop", i9), this.events.on("scale-start", i9), this.events.on("scale", i9), this.events.on("scale-stop", i9)]), this._forEachManipulator((t10) => {
      this.addHandles([t10.events.on("focus-changed", i9), t10.events.on("grab-changed", i9), t10.events.on("drag", (t11) => {
        "cancel" === t11.action ? this.tooltip.clear() : i9();
      })]);
    });
  }
  _getUpdatedTooltipInfo() {
    return this.sketchOptions.tooltips.effectiveEnabled ? this._extentMove.getUpdatedTooltipInfo() ?? this._extentScale.getUpdatedTooltipInfo() ?? this._extentRotate.getUpdatedTooltipInfo() : null;
  }
  _onGeometryChanged() {
    this._bounds.updateDisplayBounds();
  }
  _graphicDrapedChanged() {
    this.removeHandles(T4), this._bounds.updateDisplayBounds(), this.object.isDraped && this.addHandles(this.view.elevationProvider.on("elevation-change", (t9) => {
      null != this._attachmentOrigin && w(t9.extent, this._attachmentOrigin.x, this._attachmentOrigin.y) && this._bounds.updateDisplayBounds();
    }), T4);
  }
  _updateManipulators() {
    if (!this.visible)
      return;
    const t9 = this._bounds.displayBounds, e17 = ci(t9, f3.get());
    this._extentMove.updateManipulators(e17, t9), this._extentScale.updateManipulators(e17, t9), this._extentRotate.updateManipulators(e17, t9);
  }
  _updateAllManipulatorAvailability() {
    this._forEachManipulator((t9, e17) => this._updateManipulatorAvailability(t9, e17));
  }
  _updateManipulatorAvailability(t9, e17) {
    const i9 = this.grabbing && !t9.grabbing;
    if (t9.interactive = !i9, t9 instanceof ee) {
      const o11 = this.object.visible, a14 = this.enableZ && n4(this.object.operations, this.object.elevationInfo);
      switch (e17) {
        case A5.ROTATE:
          t9.available = o11 && this.enableRotation;
          break;
        case A5.SCALE:
          t9.available = o11 && (this.enableScaling || this.enableRotation || a14), t9.interactive = !i9 && this.enableScaling, t9.state = this.enableScaling ? Hi : Ui;
          break;
        case A5.TRANSLATE_Z:
          t9.available = o11 && a14;
          break;
        default:
          t9.available = o11;
      }
    }
  }
  _forEachManipulator(t9) {
    this._extentMove.forEachManipulator(t9), this._extentScale.forEachManipulator(t9), this._extentRotate.forEachManipulator(t9);
  }
  get preserveAspectRatio() {
    return this._preserveAspectRatio.enabled;
  }
  set preserveAspectRatio(t9) {
    this._preserveAspectRatio.enabled = t9, this._set("preserveAspectRatio", t9);
  }
  get snapRotation() {
    return this._snapRotation.enabled;
  }
  set snapRotation(t9) {
    this._snapRotation.enabled = t9, this._set("snapRotation", t9);
  }
  get attachmentOrigin() {
    var _a, _b, _c;
    const t9 = this.object.isDraped ? null : (_a = this._outlineVisualElement) == null ? void 0 : _a.attachmentOrigin;
    return this._attachmentOrigin = t9 ?? this.object.origin ?? ((_c = (_b = t6(this.object)) == null ? void 0 : _b.extent) == null ? void 0 : _c.center), this._attachmentOrigin;
  }
  reset() {
  }
  cancel() {
    var _a;
    if (this.canUndo) {
      const t9 = (_a = this.object.operations) == null ? void 0 : _a.undo();
      t9 && this._bounds.updateMapBoundsFromOperationInverse(t9);
    }
    this.inputState = null;
  }
  get canUndo() {
    var _a;
    return !!((_a = this.object.operations) == null ? void 0 : _a.canUndo);
  }
  undo() {
    var _a;
    if (null != this.inputState)
      this.view.activeTool = null;
    else if (this.canUndo) {
      const t9 = (_a = this.object.operations) == null ? void 0 : _a.undo();
      t9 && this._bounds.updateMapBoundsFromOperationInverse(t9);
    }
  }
  get canRedo() {
    var _a;
    return !!((_a = this.object.operations) == null ? void 0 : _a.canRedo);
  }
  redo() {
    var _a;
    if (this.canRedo) {
      const t9 = (_a = this.object.operations) == null ? void 0 : _a.redo();
      t9 && this._bounds.updateMapBoundsFromOperation(t9);
    }
  }
  get test() {
    return { moveZManipulator: this._extentMove.moveZManipulator, resizeManipulators: this._extentScale.resizeManipulators, rotateManipulator: this._extentRotate.rotateManipulator };
  }
};
e([y()], S8.prototype, "updating", null), e([y({ constructOnly: true, nonNullable: true })], S8.prototype, "view", void 0), e([y({ constructOnly: true, nonNullable: true })], S8.prototype, "object", void 0), e([y()], S8.prototype, "enableZ", void 0), e([y()], S8.prototype, "enableScaling", void 0), e([y()], S8.prototype, "enableRotation", void 0), e([y({ constructOnly: true, type: l9 })], S8.prototype, "sketchOptions", void 0), e([y()], S8.prototype, "preserveAspectRatio", null), e([y()], S8.prototype, "snapRotation", null), e([y()], S8.prototype, "grabbing", void 0), e([y()], S8.prototype, "inputState", void 0), e([y({ readOnly: true })], S8.prototype, "type", void 0), e([y()], S8.prototype, "tooltip", void 0), S8 = e([a("esri.views.3d.interactive.editingTools.transform.ExtentTransformTool")], S8);
var T4 = "draped-elevation-changes";
export {
  b3 as DrawGraphicTool3D,
  S8 as ExtentTransformTool,
  L7 as MoveTool3D,
  p11 as ReshapeTool3D,
  D6 as TransformTool3D
};
//# sourceMappingURL=editingTools-QRJGL4QH.js.map
