import {
  p as p2
} from "./chunk-HEMHAUDK.js";
import {
  d as d2,
  d2 as d3,
  f
} from "./chunk-4XD5FPUL.js";
import {
  A,
  O as O2,
  T,
  _,
  c,
  f as f2,
  g as g3,
  h as h5,
  l,
  m as m4,
  p
} from "./chunk-HB6ZUQQ2.js";
import {
  i as i4
} from "./chunk-SWNHB34O.js";
import {
  a as a5,
  m as m3
} from "./chunk-UXMZQA2H.js";
import "./chunk-V2LOXBCS.js";
import {
  u as u3
} from "./chunk-NGAYW4TW.js";
import {
  mt
} from "./chunk-FZI7RNDL.js";
import "./chunk-BSYULFZQ.js";
import "./chunk-YGP7UFWC.js";
import {
  i as i3
} from "./chunk-2WUPZJUL.js";
import {
  h as h4
} from "./chunk-KN52PCW4.js";
import "./chunk-SFKZ25SS.js";
import {
  t as t3
} from "./chunk-NCZU5DB4.js";
import {
  r as r5
} from "./chunk-SMDSNUU2.js";
import "./chunk-XTY645DH.js";
import "./chunk-UIOX7MPV.js";
import {
  E,
  r as r4
} from "./chunk-HRDKP7QO.js";
import "./chunk-4UOHLZKX.js";
import {
  s
} from "./chunk-VJ2I4VSQ.js";
import {
  e as e3
} from "./chunk-MCZ4QOSQ.js";
import "./chunk-6XTKBOD7.js";
import "./chunk-IUY6HBLC.js";
import "./chunk-BHOYA5LV.js";
import {
  t as t2
} from "./chunk-6RR3WN7W.js";
import "./chunk-TXCVD3YI.js";
import "./chunk-SCRCLNT5.js";
import {
  a as a4,
  g as g2,
  i as i2,
  u as u2
} from "./chunk-2ARR5VFO.js";
import {
  o as o2
} from "./chunk-IOKSWIVD.js";
import "./chunk-YKIGDW5O.js";
import "./chunk-7FQYGAVT.js";
import "./chunk-QRQWG4D3.js";
import {
  m,
  r as r3
} from "./chunk-5JXZHN2A.js";
import {
  h as h3
} from "./chunk-KTQIY334.js";
import "./chunk-C5EJV3NW.js";
import "./chunk-XXIDOBRO.js";
import "./chunk-JL4LXZGM.js";
import "./chunk-O556EBAK.js";
import {
  x as x2
} from "./chunk-IJD65EMQ.js";
import "./chunk-4YGBWYMD.js";
import "./chunk-TNR6E67I.js";
import "./chunk-QREUCRQ4.js";
import "./chunk-YK3UMVCY.js";
import "./chunk-IQFWVTUJ.js";
import {
  t
} from "./chunk-GB4RVOXH.js";
import {
  e2,
  m as m2
} from "./chunk-JTUYA5FE.js";
import "./chunk-UNTQATE2.js";
import "./chunk-5YY6NZNY.js";
import "./chunk-DCBZOZ54.js";
import "./chunk-5IT6RVBX.js";
import "./chunk-IWO6JXL2.js";
import {
  a as a3
} from "./chunk-AVR3LWTZ.js";
import {
  D as D2,
  ae
} from "./chunk-QQDXHR2B.js";
import {
  S as S2,
  g
} from "./chunk-HUFLW46E.js";
import "./chunk-XKG6TWCH.js";
import "./chunk-FFG7BDAP.js";
import {
  h as h2
} from "./chunk-I4SHZ6P5.js";
import "./chunk-JBU54P54.js";
import "./chunk-TLTAGTBA.js";
import "./chunk-2QPP5AGU.js";
import "./chunk-2C26DRKK.js";
import "./chunk-M4RFJU4F.js";
import {
  D,
  L,
  O,
  P as P2,
  R,
  U
} from "./chunk-WKVHVZW2.js";
import "./chunk-VIKID44H.js";
import "./chunk-3AIILHI5.js";
import "./chunk-J6T3FJLS.js";
import "./chunk-VS6AHHIY.js";
import {
  a as a2
} from "./chunk-ZLQTPFTL.js";
import {
  M,
  b as b2,
  h,
  i,
  o,
  r as r2
} from "./chunk-HZSGATFT.js";
import "./chunk-G7YFDDME.js";
import "./chunk-PCKG3UTS.js";
import "./chunk-3VMVD66K.js";
import "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-I2X6UR6L.js";
import {
  j
} from "./chunk-2SYXH2R7.js";
import "./chunk-7JNXJYRU.js";
import "./chunk-5JYVZQZR.js";
import "./chunk-RKVEKQ5O.js";
import "./chunk-P7J4JFEH.js";
import "./chunk-USOPZ2Q6.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-AKLOTDO2.js";
import "./chunk-6AQIVLDN.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import {
  u
} from "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import {
  w
} from "./chunk-IZKCZQUY.js";
import {
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  C,
  P,
  d
} from "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  b,
  k
} from "./chunk-JGDJR5EV.js";
import {
  r
} from "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterBitmap.js
var p3 = { bandCount: 3, outMin: 0, outMax: 1, minCutOff: [0, 0, 0], maxCutOff: [255, 255, 255], factor: [1 / 255, 1 / 255, 1 / 255], useGamma: false, gamma: [1, 1, 1], gammaCorrection: [1, 1, 1], colormap: null, colormapOffset: null, stretchType: "none", type: "stretch" };
var _2 = class extends s {
  constructor(e17 = null, t6 = null, s17 = null) {
    super(), this._textureInvalidated = true, this._colormapTextureInvalidated = true, this._rasterTexture = null, this._rasterTextureBandIds = null, this._transformGridTexture = null, this._colormapTexture = null, this._colormap = null, this._supportsBilinearTexture = true, this._processedTexture = null, this.functionTextures = [], this.projected = false, this.stencilRef = 0, this.coordScale = [1, 1], this._processed = false, this._symbolizerParameters = null, this.height = null, this.isRendereredSource = false, this.pixelRatio = 1, this.resolution = 0, this.rotation = 0, this._source = null, this.rawPixelData = null, this._suspended = false, this._bandIds = null, this._interpolation = null, this._transformGrid = null, this.width = null, this.x = 0, this.y = 0, this.source = e17, this.transformGrid = t6, this.interpolation = s17;
  }
  destroy() {
    this._disposeTextures();
  }
  get processedTexture() {
    return this._processedTexture;
  }
  set processedTexture(e17) {
    this._processedTexture !== e17 && (this._disposeTextures(true), this._processedTexture = e17);
  }
  get rasterTexture() {
    return this._rasterTexture;
  }
  set rasterTexture(e17) {
    var _a;
    this._rasterTexture !== e17 && ((_a = this._rasterTexture) == null ? void 0 : _a.dispose(), this._rasterTexture = e17), null == e17 && (this.projected = false);
  }
  get processed() {
    return this._processed;
  }
  set processed(t6) {
    this._processed = t6, t6 || (r(this.processedTexture), this.invalidateTexture());
  }
  get symbolizerParameters() {
    return this._symbolizerParameters || p3;
  }
  set symbolizerParameters(e17) {
    this._symbolizerParameters !== e17 && (this._symbolizerParameters = e17, this._colormapTextureInvalidated = true, this.commonUniforms = null);
  }
  get source() {
    return this._source;
  }
  set source(e17) {
    this._source !== e17 && (this._source = e17, this._rasterTexture && (this._rasterTexture.dispose(), this._rasterTexture = null, this._rasterTextureBandIds = null), this.commonUniforms = null, this.projected = false, this.invalidateTexture());
  }
  get suspended() {
    return this._suspended;
  }
  set suspended(e17) {
    this._suspended && !e17 && this.stage && (this.ready(), this.requestRender()), this._suspended = e17;
  }
  get bandIds() {
    return this._bandIds;
  }
  set bandIds(e17) {
    this._bandIds = e17, this._isBandIdsChanged(e17) && (this.projected = false, this.invalidateTexture());
  }
  get interpolation() {
    return this._interpolation || "nearest";
  }
  set interpolation(e17) {
    this._interpolation = e17, this._rasterTexture && this._rasterTexture.setSamplingMode("bilinear" === this._getTextureSamplingMethod(e17 || "nearest") ? L.LINEAR : L.NEAREST);
  }
  get transformGrid() {
    return this._transformGrid;
  }
  set transformGrid(t6) {
    this._transformGrid !== t6 && (this._transformGrid = t6, this._transformGridTexture = r(this._transformGridTexture));
  }
  invalidateTexture() {
    this._textureInvalidated || (this._textureInvalidated = true, this.requestRender());
  }
  getRasterTextureSize(e17 = false) {
    var _a, _b;
    const t6 = e17 || this.projected;
    return [t6 ? this.width : ((_a = this.source) == null ? void 0 : _a.width) || this.width, t6 ? this.height : ((_b = this.source) == null ? void 0 : _b.height) || this.height];
  }
  getRasterCellSize() {
    var _a;
    const e17 = (_a = this.rawPixelData) == null ? void 0 : _a.srcPixelSize, { projected: t6, resolution: s17 } = this;
    return e17 && !t6 ? [e17.x, e17.y] : [s17, s17];
  }
  _createTransforms() {
    return { displayViewScreenMat3: e3() };
  }
  setTransform(e17) {
    const a22 = o(this.transforms.displayViewScreenMat3), [h7, n21] = e17.toScreenNoRotation([0, 0], [this.x, this.y]), l3 = this.resolution / this.pixelRatio / e17.resolution, d4 = l3 * this.width, c4 = l3 * this.height, p4 = Math.PI * this.rotation / 180;
    M(a22, a22, t(h7, n21)), M(a22, a22, t(d4 / 2, c4 / 2)), h(a22, a22, -p4), M(a22, a22, t(-d4 / 2, -c4 / 2)), b2(a22, a22, t(d4, c4)), i(this.transforms.displayViewScreenMat3, e17.displayViewMat3, a22);
  }
  getTextures({ forProcessing: e17 = false, useProcessedTexture: t6 = false } = {}) {
    const s17 = t6 ? this._processedTexture ?? this._rasterTexture : this._rasterTexture, r14 = [], i10 = [];
    return s17 ? (this._transformGridTexture && !this.projected && (i10.push(this._transformGridTexture), r14.push("u_transformGrid")), t6 ? (i10.push(s17), r14.push("u_image"), this._colormapTexture && (i10.push(this._colormapTexture), r14.push("u_colormap")), { names: r14, textures: i10 }) : (i10.push(s17), r14.push("u_image"), this._colormapTexture && !e17 && (i10.push(this._colormapTexture), r14.push("u_colormap")), { names: r14, textures: i10 })) : { names: r14, textures: i10 };
  }
  onAttach() {
    this.invalidateTexture();
  }
  onDetach() {
    this.invalidateTexture();
  }
  updateTexture({ context: e17 }) {
    if (!this.stage)
      return void this._disposeTextures();
    const t6 = this._isValidSource(this.source);
    t6 && this._colormapTextureInvalidated && (this._colormapTextureInvalidated = false, this._updateColormapTexture(e17)), this._textureInvalidated && (this._textureInvalidated = false, this._createOrDestroyRasterTexture(e17), this._rasterTexture && (t6 ? this.transformGrid && !this._transformGridTexture && (this._transformGridTexture = c(e17, this.transformGrid)) : this._rasterTexture.setData(null)), this.suspended || (this.ready(), this.requestRender()));
  }
  updateProcessedTexture() {
    const { functionTextures: e17 } = this;
    0 !== e17.length && (this.processedTexture = e17.shift(), e17.forEach((e18) => e18 == null ? void 0 : e18.dispose()), e17.length = 0);
  }
  _createOrDestroyRasterTexture(e17) {
    var _a, _b;
    const t6 = (_a = this.source) == null ? void 0 : _a.extractBands(this.bandIds);
    if (!this._isValidSource(t6))
      return void (this._rasterTexture && (this._rasterTexture.dispose(), this._rasterTextureBandIds = null, this._rasterTexture = null));
    const s17 = !this._isBandIdsChanged(this.bandIds);
    if (this._rasterTexture) {
      if (s17)
        return;
      this._rasterTexture.dispose(), this._rasterTextureBandIds = null, this._rasterTexture = null;
    }
    this._supportsBilinearTexture = !!((_b = e17.capabilities.textureFloat) == null ? void 0 : _b.textureFloatLinear);
    const r14 = this._getTextureSamplingMethod(this.interpolation), i10 = this.isRendereredSource;
    this._rasterTexture = f2(e17, t6, r14, i10), this.projected = false, this._processed = false, this._rasterTextureBandIds = this.bandIds ? [...this.bandIds] : null;
  }
  _isBandIdsChanged(e17) {
    const t6 = this._rasterTextureBandIds;
    return !(null == t6 && null == e17 || t6 && e17 && t6.join("") === e17.join(""));
  }
  _isValidSource(e17) {
    var _a;
    return null != e17 && ((_a = e17.pixels) == null ? void 0 : _a.length) > 0;
  }
  _getTextureSamplingMethod(e17) {
    const { type: t6 } = this.symbolizerParameters, s17 = "lut" === t6 || "hillshade" === t6 || "stretch" === t6 && 1 === this.symbolizerParameters.bandCount;
    return !this._supportsBilinearTexture || s17 || "bilinear" !== e17 && "cubic" !== e17 ? "nearest" : "bilinear";
  }
  _updateColormapTexture(e17) {
    const t6 = this._colormap, s17 = this.symbolizerParameters.colormap;
    return s17 ? t6 ? s17.length !== t6.length || s17.some((e18, s18) => e18 !== t6[s18]) ? (this._colormapTexture && (this._colormapTexture.dispose(), this._colormapTexture = null), this._colormapTexture = m4(e17, s17), void (this._colormap = s17)) : void 0 : (this._colormapTexture = m4(e17, s17), void (this._colormap = s17)) : (this._colormapTexture && (this._colormapTexture.dispose(), this._colormapTexture = null), void (this._colormap = null));
  }
  _disposeTextures(e17 = false) {
    !this._transformGridTexture || e17 && !this.projected || (this._transformGridTexture.dispose(), this._transformGridTexture = null), !e17 && this._colormapTexture && (this._colormapTexture.dispose(), this._colormapTexture = null, this._colormap = null, this._colormapTextureInvalidated = true), !e17 && this._rasterTexture && (this._rasterTexture.dispose(), this._rasterTexture = null, this._rasterTextureBandIds = null), this._processedTexture && (this._processedTexture.dispose(), this._processedTexture = null);
  }
};
function m5(e17) {
  return null != e17.source;
}

// node_modules/@arcgis/core/views/2d/engine/imagery/colorizer/utils.js
function i5(i10) {
  const n21 = [];
  return i10 && (n21.push("applyProjection"), 1 === i10.spacing[0] && n21.push("lookupProjection")), n21;
}
function n2(i10, n21, e17) {
  var _a;
  const t6 = !((_a = e17.capabilities.textureFloat) == null ? void 0 : _a.textureFloatLinear), u5 = [];
  return "cubic" === i10 ? u5.push("bicubic") : "bilinear" === i10 && (n21 ? (u5.push("bilinear"), u5.push("nnedge")) : t6 && u5.push("bilinear")), u5;
}

// node_modules/@arcgis/core/views/2d/engine/imagery/colorizer/lut.js
var s2 = { vsPath: "raster/common", fsPath: "raster/lut", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function a6(t6, e17, o11) {
  const a22 = o11 ? [] : i5(e17.transformGrid);
  return { defines: a22, program: t6.painter.materialManager.getProgram(s2, a22) };
}
function n3(r14, s17, a22, n21, m9 = false) {
  const { names: i10, textures: c4 } = a22.getTextures({ useProcessedTexture: m9 });
  O2(r14.context, s17, i10, c4), h5(s17, n21, a22.commonUniforms), s17.setUniformMatrix3fv("u_dvsMat3", a22.transforms.displayViewScreenMat3);
  const { colormap: f3, colormapOffset: u5 } = a22.symbolizerParameters, l3 = _(f3, u5);
  h5(s17, n21, l3);
}
var m6 = { createProgram: a6, bindTextureAndUniforms: n3 };

// node_modules/@arcgis/core/views/2d/engine/imagery/colorizer/shadedrelief.js
var n4 = { vsPath: "raster/common", fsPath: "raster/hillshade", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function i6(e17, o11, s17) {
  const { colormap: a22 } = o11.symbolizerParameters, i10 = [...s17 ? [] : i5(o11.transformGrid), ...n2(o11.interpolation, true, e17.context)];
  null != a22 && i10.push("applyColormap");
  return { defines: i10, program: e17.painter.materialManager.getProgram(n4, i10) };
}
function m7(r14, t6, n21, i10, m9 = false) {
  const { names: c4, textures: l3 } = n21.getTextures({ useProcessedTexture: m9 });
  O2(r14.context, t6, c4, l3), h5(t6, i10, n21.commonUniforms), t6.setUniformMatrix3fv("u_dvsMat3", n21.transforms.displayViewScreenMat3);
  const f3 = n21.symbolizerParameters, { colormap: p4, colormapOffset: u5 } = f3;
  if (null != p4) {
    const r15 = _(p4, u5);
    h5(t6, i10, r15);
  }
  const d4 = A(f3);
  h5(t6, i10, d4);
}
var c2 = { createProgram: i6, bindTextureAndUniforms: m7 };

// node_modules/@arcgis/core/views/2d/engine/imagery/colorizer/stretch.js
var n5 = { vsPath: "raster/common", fsPath: "raster/stretch", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function i7(e17, o11, s17) {
  const { colormap: a22, bandCount: i10 } = o11.symbolizerParameters, m9 = [...s17 ? [] : i5(o11.transformGrid), ...n2(o11.interpolation, 1 === i10, e17.context)];
  o11.isRendereredSource && !s17 ? m9.push("noop") : null != a22 && m9.push("applyColormap");
  return { defines: m9, program: e17.painter.materialManager.getProgram(n5, m9) };
}
function m8(r14, t6, n21, i10, m9 = false) {
  const { names: c4, textures: l3 } = n21.getTextures({ useProcessedTexture: m9 });
  O2(r14.context, t6, c4, l3), h5(t6, i10, n21.commonUniforms), t6.setUniformMatrix3fv("u_dvsMat3", n21.transforms.displayViewScreenMat3);
  const p4 = n21.symbolizerParameters, { colormap: u5, colormapOffset: f3 } = p4;
  if (null != u5) {
    const r15 = _(u5, f3);
    h5(t6, i10, r15);
  }
  const d4 = p(p4);
  h5(t6, i10, d4);
}
var c3 = { createProgram: i7, bindTextureAndUniforms: m8 };

// node_modules/@arcgis/core/views/2d/engine/imagery/colorizer/rasterColorizer.js
var s3 = /* @__PURE__ */ new Map();
function o3(t6) {
  return s3.get(t6);
}
s3.set("lut", m6), s3.set("hillshade", c2), s3.set("stretch", c3);

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/utils.js
var t4 = [1, 1];
var n6 = [2, 0, 0, 0, 2, 0, -1, -1, 0];
function a7(t6, n21, a22) {
  const { context: r14, rasterFunction: s17, hasBranches: i10 } = t6, { raster: o11 } = s17.parameters, f3 = i10 ? (o11 == null ? void 0 : o11.id) ?? -1 : 0, m9 = a22.functionTextures[f3] ?? a22.rasterTexture;
  O2(r14, n21, ["u_image"], [m9]);
}
function r6(t6, n21, r14) {
  const { rasters: s17 } = t6.rasterFunction.parameters;
  if (!s17)
    return;
  if (s17.length < 2)
    return a7(t6, n21, r14);
  const i10 = s17.filter((e17) => "Constant" !== e17.name).map((e17) => null != e17.id && "Identity" !== e17.name ? r14.functionTextures[e17.id] : r14.rasterTexture);
  if (O2(t6.context, n21, ["u_image", "u_image1", "u_image2"].slice(0, i10.length), i10), i10.length !== s17.length) {
    if (2 === s17.length) {
      const e17 = s17.findIndex((e18) => "Constant" === e18.name), t7 = 0 === e17 ? [0, 1, 0, 1, 0, 0, 0, 0, 0] : [1, 0, 0, 0, 1, 0, 0, 0, 0], { value: a22 } = s17[e17].parameters;
      n21.setUniform1f("u_image1Const", a22), n21.setUniformMatrix3fv("u_imageSwap", t7);
    } else if (3 === s17.length) {
      const e17 = [];
      if (s17.forEach((t7, n22) => "Constant" === t7.name && e17.push(n22)), 1 === e17.length) {
        const { value: t7 } = s17[e17[0]].parameters;
        n21.setUniform1f("u_image1Const", t7);
        const a22 = 0 === e17[0] ? [0, 1, 0, 0, 0, 1, 1, 0, 0] : 1 === e17[0] ? [1, 0, 0, 0, 0, 1, 0, 1, 0] : [1, 0, 0, 0, 1, 0, 0, 0, 1];
        n21.setUniformMatrix3fv("u_imageSwap", a22);
      } else if (2 === e17.length) {
        const { value: t7 } = s17[e17[0]].parameters;
        n21.setUniform1f("u_image1Const", t7);
        const { value: a22 } = s17[e17[1]].parameters;
        n21.setUniform1f("u_image2Const", a22);
        const r15 = s17.findIndex((e18) => "Constant" !== e18.name), i11 = 0 === r15 ? [1, 0, 0, 0, 1, 0, 0, 0, 1] : 1 === r15 ? [0, 1, 0, 1, 0, 0, 0, 0, 1] : [0, 0, 1, 1, 0, 0, 0, 1, 0];
        n21.setUniformMatrix3fv("u_imageSwap", i11);
      }
    }
  }
}
function s4(e17) {
  e17.setUniform2fv("u_coordScale", t4), e17.setUniformMatrix3fv("u_dvsMat3", n6);
}

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/aspectProcessor.js
var r7 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/aspect", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function a8(t6, e17) {
  return t6.painter.materialManager.getProgram(r7, []);
}
function s5(r14, a22, s17) {
  a7(r14, a22, s17), s4(a22);
  const n21 = s17.getRasterTextureSize();
  a22.setUniform2fv("u_srcImageSize", n21);
  const o11 = s17.getRasterCellSize();
  a22.setUniform2fv("u_cellSize", o11);
}
var n7 = { createProgram: a8, bindTextureAndUniforms: s5 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/bandArithmeticProcessor.js
var a9 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/bandarithmetic", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e4(t6, r14) {
  const { painter: e17, rasterFunction: n21 } = t6, { indexType: s17 } = n21.parameters;
  return e17.materialManager.getProgram(a9, [s17]);
}
function n8(a22, e17, n21) {
  a7(a22, e17, n21), s4(e17);
  const { bandIndexMat3: s17 } = a22.rasterFunction.parameters;
  e17.setUniformMatrix3fv("u_bandIndexMat3", s17);
}
var s6 = { createProgram: e4, bindTextureAndUniforms: n8 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/compositeBandProcessor.js
var n9 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/compositeband", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function a10(t6, r14) {
  const a22 = t6.rasterFunction.parameters.rasters.filter((t7) => "Constant" === t7.name), e17 = [];
  return a22.length && (e17.push("oneConstant"), 2 === a22.length && e17.push("twoConstant")), t6.painter.materialManager.getProgram(n9, e17);
}
function e5(n21, a22, e17) {
  r6(n21, a22, e17), s4(a22);
}
var s7 = { createProgram: a10, bindTextureAndUniforms: e5 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/contrastProcessor.js
var s8 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/contrast", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e6(t6, r14) {
  return t6.painter.materialManager.getProgram(s8, []);
}
function a11(s17, e17, a22) {
  a7(s17, e17, a22), s4(e17);
  const { contrastOffset: n21, brightnessOffset: o11 } = s17.rasterFunction.parameters;
  e17.setUniform1f("u_contrastOffset", n21), e17.setUniform1f("u_brightnessOffset", o11);
}
var n10 = { createProgram: e6, bindTextureAndUniforms: a11 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/convolutionProcessor.js
var t5 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/convolution", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function a12(e17, r14) {
  const { painter: a22, rasterFunction: n21 } = e17, { kernelRows: o11, kernelCols: s17 } = n21.parameters, i10 = [{ name: "rows", value: o11 }, { name: "cols", value: s17 }];
  return a22.materialManager.getProgram(t5, i10);
}
function n11(t6, a22, n21) {
  a7(t6, a22, n21), s4(a22), a22.setUniform2fv("u_srcImageSize", [n21.width, n21.height]);
  const { kernel: o11, clampRange: s17 } = t6.rasterFunction.parameters;
  a22.setUniform1fv("u_kernel", o11), a22.setUniform2fv("u_clampRange", s17);
}
var o4 = { createProgram: a12, bindTextureAndUniforms: n11 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/curvatureProcessor.js
var e7 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/curvature", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function a13(r14, t6) {
  const { painter: a22, rasterFunction: s17 } = r14, { curvatureType: n21 } = s17.parameters, o11 = [n21];
  return a22.materialManager.getProgram(e7, o11);
}
function s9(e17, a22, s17) {
  a7(e17, a22, s17), s4(a22);
  const n21 = s17.getRasterTextureSize();
  a22.setUniform2fv("u_srcImageSize", n21);
  const { zFactor: o11 } = e17.rasterFunction.parameters, i10 = s17.getRasterCellSize();
  a22.setUniform1f("u_zlFactor", 200 * o11 / i10[0] / i10[1]);
}
var n12 = { createProgram: a13, bindTextureAndUniforms: s9 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/extractBandProcessor.js
var a14 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/extractband", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e8(t6, r14) {
  return t6.painter.materialManager.getProgram(a14, []);
}
function n13(a22, e17, n21) {
  a7(a22, e17, n21), s4(e17);
  const { bandIndexMat3: o11 } = a22.rasterFunction.parameters;
  e17.setUniformMatrix3fv("u_bandIndexMat3", o11);
}
var o5 = { createProgram: e8, bindTextureAndUniforms: n13 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/focalStatisticsProcessor.js
var e9 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/focalstatistics", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function r8(t6, a22) {
  const { painter: r14, rasterFunction: s17 } = t6, { kernelRows: n21, kernelCols: o11, fillNoDataOnly: i10, statisticsType: c4 } = s17.parameters, l3 = [{ name: "rows", value: n21 }, { name: "cols", value: o11 }, c4];
  return i10 && l3.push("fill"), r14.materialManager.getProgram(e9, l3);
}
function s10(e17, r14, s17) {
  a7(e17, r14, s17), s4(r14), r14.setUniform2fv("u_srcImageSize", [s17.width, s17.height]);
  const { clampRange: n21 } = e17.rasterFunction.parameters;
  r14.setUniform2fv("u_clampRange", n21);
}
var n14 = { createProgram: r8, bindTextureAndUniforms: s10 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/grayscaleProcessor.js
var a15 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/grayscale", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e10(t6, r14) {
  return t6.painter.materialManager.getProgram(a15, []);
}
function s11(a22, e17, s17) {
  a7(a22, e17, s17), s4(e17);
  const { weights: n21 } = a22.rasterFunction.parameters;
  e17.setUniform3fv("u_weights", n21);
}
var n15 = { createProgram: e10, bindTextureAndUniforms: s11 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/localProcessor.js
var a16 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/local", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e11(t6) {
  const { painter: n21, rasterFunction: e17 } = t6, { imageCount: r14, operationName: o11, rasters: s17, isOutputRounded: u5 } = e17.parameters, i10 = [o11.toLowerCase()];
  2 === r14 && i10.push("twoImages");
  const m9 = s17.filter((t7) => "Constant" === t7.name);
  return m9.length && (i10.push("oneConstant"), 2 === m9.length && i10.push("twoConstant")), u5 && i10.push("roundOutput"), n21.materialManager.getProgram(a16, i10);
}
function r9(a22, e17, r14) {
  r6(a22, e17, r14), s4(e17);
  const { domainRange: o11 } = a22.rasterFunction.parameters;
  e17.setUniform2fv("u_domainRange", o11);
}
var o6 = { createProgram: e11, bindTextureAndUniforms: r9 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/maskProcessor.js
var r10 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/mask", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function n16(t6, a22) {
  const { painter: n21, rasterFunction: e17 } = t6, s17 = e17.parameters.bandCount > 1 ? ["multiBand"] : [];
  return n21.materialManager.getProgram(r10, s17);
}
function e12(r14, n21, e17) {
  a7(r14, n21, e17), s4(n21);
  const { includedRanges: s17, noDataValues: o11 } = r14.rasterFunction.parameters;
  n21.setUniform1fv("u_includedRanges", s17), n21.setUniform1fv("u_noDataValues", o11);
}
var s12 = { createProgram: n16, bindTextureAndUniforms: e12 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/ndviProcessor.js
var a17 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/ndvi", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e13(t6, r14) {
  const { painter: e17, rasterFunction: n21 } = t6, s17 = n21.parameters.scaled ? ["scaled"] : [];
  return e17.materialManager.getProgram(a17, s17);
}
function n17(a22, e17, n21) {
  a7(a22, e17, n21), s4(e17);
  const { bandIndexMat3: s17 } = a22.rasterFunction.parameters;
  e17.setUniformMatrix3fv("u_bandIndexMat3", s17);
}
var s13 = { createProgram: e13, bindTextureAndUniforms: n17 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/remapProcessor.js
var r11 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/remap", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e14(a22, t6) {
  return a22.painter.materialManager.getProgram(r11, []);
}
function n18(r14, e17, n21) {
  a7(r14, e17, n21), s4(e17);
  const { noDataRanges: s17, rangeMaps: o11, allowUnmatched: f3, clampRange: i10 } = r14.rasterFunction.parameters;
  e17.setUniform1fv("u_noDataRanges", s17), e17.setUniform1fv("u_rangeMaps", o11), e17.setUniform1f("u_unmatchMask", f3 ? 1 : 0), e17.setUniform2fv("u_clampRange", i10);
}
var s14 = { createProgram: e14, bindTextureAndUniforms: n18 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/reprojectProcessor.js
var e15 = { vsPath: "raster/common", fsPath: "raster/reproject", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function i8(r14, t6) {
  var _a;
  const { painter: i10 } = r14, o11 = [], { interpolation: s17, transformGrid: n21 } = t6, a22 = (_a = r14.rasterFunction) == null ? void 0 : _a.parameters;
  return "cubic" === s17 ? o11.push("bicubic") : "bilinear" === s17 && (o11.push("bilinear"), (a22 == null ? void 0 : a22.requireNNEdge) && o11.push("nnedge")), n21 && (o11.push("applyProjection"), 1 === n21.spacing[0] && o11.push("lookupProjection")), i10.materialManager.getProgram(e15, o11);
}
function o7(e17, i10, o11) {
  const { names: s17, textures: n21 } = o11.getTextures({ forProcessing: true });
  O2(e17.context, i10, s17, n21), i10.setUniform1f("u_scale", 1), i10.setUniform2fv("u_offset", [0, 0]), i10.setUniform2fv("u_coordScale", [1, 1]), i10.setUniformMatrix3fv("u_dvsMat3", [2, 0, 0, 0, 2, 0, -1, -1, 0]), i10.setUniform1i("u_flipY", 0), i10.setUniform1f("u_opacity", 1);
  const { width: a22, height: f3, source: c4, transformGrid: m9 } = o11;
  i10.setUniform2fv("u_srcImageSize", [c4.width, c4.height]), i10.setUniform2fv("u_targetImageSize", [a22, f3]), i10.setUniform2fv("u_transformSpacing", m9 ? m9.spacing : a2), i10.setUniform2fv("u_transformGridSize", m9 ? m9.size : a2);
}
var s15 = { createProgram: i8, bindTextureAndUniforms: o7 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/slopeProcessor.js
var r12 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/slope", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function s16(e17, t6) {
  const { painter: s17, rasterFunction: o11 } = e17, { slopeType: a22 } = o11.parameters, i10 = "percent-rise" === a22 ? ["percentRise"] : [];
  return s17.materialManager.getProgram(r12, i10);
}
function o8(r14, s17, o11) {
  a7(r14, s17, o11), s4(s17);
  const a22 = o11.getRasterTextureSize();
  s17.setUniform2fv("u_srcImageSize", a22);
  const i10 = o11.getRasterCellSize();
  s17.setUniform2fv("u_cellSize", i10);
  const { zFactor: n21, slopeType: c4, pixelSizePower: f3, pixelSizeFactor: p4 } = r14.rasterFunction.parameters;
  s17.setUniform1f("u_zFactor", n21), s17.setUniform1f("u_pixelSizePower", "adjusted" === c4 ? f3 : 0), s17.setUniform1f("u_pixelSizeFactor", "adjusted" === c4 ? p4 : 0);
}
var a18 = { createProgram: s16, bindTextureAndUniforms: o8 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/stretchProcessor.js
var a19 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/stretch", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function u4(t6, r14) {
  const { useGamma: u5, bandCount: e17, isOutputRounded: n21 } = t6.rasterFunction.parameters, o11 = [];
  return u5 && o11.push("useGamma"), e17 > 1 && o11.push("multiBand"), n21 && o11.push("roundOutput"), t6.painter.materialManager.getProgram(a19, o11);
}
function e16(a22, u5, e17) {
  a7(a22, u5, e17), s4(u5);
  const { width: n21, height: o11 } = e17, m9 = a22.rasterFunction.parameters;
  u5.setUniform2fv("u_srcImageSize", [n21, o11]), u5.setUniform1f("u_minOutput", m9.outMin), u5.setUniform1f("u_maxOutput", m9.outMax), u5.setUniform1fv("u_factor", m9.factor), u5.setUniform1fv("u_minCutOff", m9.minCutOff), u5.setUniform1fv("u_maxCutOff", m9.maxCutOff), u5.setUniform1fv("u_gamma", m9.gamma), u5.setUniform1fv("u_gammaCorrection", m9.gammaCorrection);
}
var n19 = { createProgram: u4, bindTextureAndUniforms: e16 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/rasterProcessor.js
var b3 = /* @__PURE__ */ new Map();
function v(r14, e17) {
  const t6 = new e2();
  return t6.width = r14, t6.height = e17, t6.internalFormat = P2.RGBA32F, t6.samplingMode = L.NEAREST, t6.dataType = U.FLOAT, t6.isImmutable = true, t6.wrapMode = D.CLAMP_TO_EDGE, t6;
}
function A2(r14, e17, t6, o11) {
  const { context: s17, requestRender: n21, allowDelayedRender: c4 } = r14, i10 = o11.createProgram(r14, t6);
  return c4 && null != n21 && !i10.compiled ? (n21(), null) : (s17.bindFramebuffer(e17), s17.setViewport(0, 0, e17.width, e17.height), s17.useProgram(i10), i10);
}
function F(r14) {
  return b3.get(r14.toLowerCase());
}
function y2(r14, e17, t6, o11) {
  const s17 = r14.rasterFunction.name.toLowerCase(), n21 = "reproject" === s17 ? s15 : F(s17);
  if (null == n21)
    return;
  const c4 = A2(r14, t6, o11, n21);
  if (!c4)
    return;
  n21.bindTextureAndUniforms(r14, c4, o11);
  const { interpolation: i10 } = o11;
  "reproject" === s17 && (o11.interpolation = "nearest"), e17.draw();
  const [a22, m9] = o11.getRasterTextureSize("reproject" === s17), p4 = v(a22, m9), u5 = new m2(r14.context, p4);
  if (t6.copyToTexture(0, 0, a22, m9, 0, 0, u5), "reproject" === s17)
    o11.rasterTexture = u5, o11.projected = true, o11.interpolation = i10;
  else {
    const e18 = r14.hasBranches ? r14.rasterFunction.id : 0;
    o11.functionTextures[e18] = u5;
  }
}
b3.set("arithmetic", o6), b3.set("aspect", n7), b3.set("bandarithmetic", s6), b3.set("compositeband", s7), b3.set("convolution", o4), b3.set("contrastbrightness", n10), b3.set("curvature", n12), b3.set("extractband", o5), b3.set("statistics", n14), b3.set("grayscale", n15), b3.set("local", o6), b3.set("mask", s12), b3.set("ndvi", s13), b3.set("remap", s14), b3.set("slope", a18), b3.set("stretch", n19);

// node_modules/@arcgis/core/views/2d/engine/imagery/BrushRasterBitmap.js
var h6 = class extends t3 {
  constructor() {
    super(...arguments), this.name = "raster", this._quad = null, this._rendererUniformInfos = /* @__PURE__ */ new Map(), this._fbo = null;
  }
  dispose() {
    r(this._quad), r(this._fbo);
  }
  prepareState(e17) {
    const { context: t6, renderPass: r14 } = e17, s17 = "raster" === r14;
    t6.setBlendingEnabled(!s17), t6.setBlendFunctionSeparate(R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA), t6.setColorMask(true, true, true, true), t6.setStencilWriteMask(0), t6.setStencilTestEnabled(!s17);
  }
  draw(e17, r14) {
    if (!m5(r14) || r14.suspended)
      return;
    const { renderPass: s17 } = e17;
    if ("raster-bitmap" !== s17)
      return "raster" === s17 ? this._process(e17, r14) : void this._drawBitmap(e17, r14, true);
    this._drawBitmap(e17, r14);
  }
  _process(t6, r14) {
    const { rasterFunction: i10 } = t6, o11 = "Reproject" === i10.name;
    if (!(o11 ? !(r14.rasterTexture && r14.projected) : !r14.processed))
      return;
    const { timeline: n21, context: a22 } = t6;
    n21.begin(this.name);
    const d4 = a22.getBoundFramebufferObject(), c4 = a22.getViewport();
    o11 || (r14.processedTexture = r(r14.processedTexture)), a22.setStencilFunction(O.EQUAL, r14.stencilRef, 255), r14.updateTexture(t6), this._initQuad(a22);
    const [f3, u5] = r14.getRasterTextureSize(o11), { isStandardRasterTileSize: p4, fbo: h7 } = this._getRasterFBO(a22, f3, u5);
    y2(t6, this._quad, h7, r14), p4 || h7.dispose(), a22.bindFramebuffer(d4), a22.setViewport(c4.x, c4.y, c4.width, c4.height), n21.end(this.name);
  }
  _drawBitmap(e17, t6, s17 = false) {
    const { timeline: i10, context: o11 } = e17;
    if (i10.begin(this.name), o11.setStencilFunction(O.EQUAL, t6.stencilRef, 255), t6.updateTexture(e17), s17 && !t6.processedTexture) {
      if (t6.updateProcessedTexture(), !t6.processedTexture)
        return void i10.end(this.name);
      t6.processed = true;
    }
    this._initBitmapCommonUniforms(t6);
    const a22 = t6.symbolizerParameters.type, d4 = o3(a22), { requestRender: c4, allowDelayedRender: f3 } = e17, { defines: u5, program: p4 } = d4.createProgram(e17, t6, t6.projected && s17);
    if (f3 && null != c4 && !p4.compiled)
      return void c4();
    o11.useProgram(p4);
    const h7 = this._getUniformInfos(a22, o11, p4, u5);
    this._quad || (this._quad = new h4(o11, [0, 0, 1, 0, 0, 1, 1, 1])), d4.bindTextureAndUniforms(e17, p4, t6, h7, s17), this._quad.draw(), i10.end(this.name);
  }
  _initBitmapCommonUniforms(e17) {
    if (!e17.commonUniforms) {
      const t6 = g3(1, [0, 0]), { transformGrid: r14, width: s17, height: i10 } = e17, o11 = l(r14, [s17, i10], [e17.source.width, e17.source.height], 1, false);
      e17.commonUniforms = { ...t6, ...o11, u_coordScale: e17.coordScale };
    }
  }
  _getRasterFBO(e17, t6, r14) {
    const s17 = t6 === a3 && r14 === a3;
    return s17 ? (this._fbo || (this._fbo = this._createNewFBO(e17, t6, r14)), { isStandardRasterTileSize: s17, fbo: this._fbo }) : { isStandardRasterTileSize: s17, fbo: this._createNewFBO(e17, t6, r14) };
  }
  _createNewFBO(e17, t6, r14) {
    const s17 = v(t6, r14);
    return new x2(e17, s17);
  }
  _initQuad(e17) {
    this._quad || (this._quad = new h4(e17, [0, 0, 1, 0, 0, 1, 1, 1]));
  }
  _getUniformInfos(e17, t6, r14, s17) {
    const i10 = s17.length > 0 ? e17 + "-" + s17.join("-") : e17;
    if (this._rendererUniformInfos.has(i10))
      return this._rendererUniformInfos.get(i10);
    const o11 = T(t6, r14);
    return this._rendererUniformInfos.set(i10, o11), o11;
  }
};

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterTile.js
var i9 = class extends r5 {
  constructor(t6, e17, i10, a22, r14, l3, n21 = null) {
    super(t6, e17, i10, a22, r14, l3), this.bitmap = null, this.bitmap = new _2(n21, null, null), this.bitmap.coordScale = [r14, l3], this.bitmap.once("isReady", () => this.ready());
  }
  destroy() {
    super.destroy(), this.bitmap.destroy(), this.bitmap = null, this.stage = null;
  }
  set stencilRef(t6) {
    this.bitmap.stencilRef = t6;
  }
  get stencilRef() {
    return this.bitmap.stencilRef;
  }
  setTransform(t6) {
    super.setTransform(t6), this.bitmap.transforms.displayViewScreenMat3 = this.transforms.displayViewScreenMat3;
  }
  _createTransforms() {
    return { displayViewScreenMat3: e3(), tileMat3: e3() };
  }
  onAttach() {
    this.bitmap.stage = this.stage;
  }
  onDetach() {
    this.bitmap.stage = null;
  }
};

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterTileContainer.js
var o9 = class extends i3 {
  constructor() {
    super(...arguments), this.isCustomTilingScheme = false;
  }
  createTile(e17) {
    const s17 = this._getTileBounds(e17), [r14, i10] = this._tileInfoView.tileInfo.size, n21 = this._tileInfoView.getTileResolution(e17.level);
    return new i9(e17, n21, s17[0], s17[3], r14, i10);
  }
  prepareRenderPasses(e17) {
    const s17 = e17.registerRenderPass({ name: "imagery (tile)", brushes: [h6], target: () => this.children.map((e18) => e18.bitmap), drawPhase: E.MAP });
    return [...super.prepareRenderPasses(e17), s17];
  }
  doRender(e17) {
    if (!this.visible || e17.drawPhase !== E.MAP)
      return;
    const { rasterFunctionChain: s17 } = this;
    if (!s17)
      return e17.renderPass = "raster-bitmap", void super.doRender(e17);
    if (!s17.hasFocalFunction) {
      const [r14, t6] = this._tileInfoView.tileInfo.size;
      e17.renderPass = "raster", e17.rasterFunction = { name: "Reproject", parameters: { targetImageSize: [r14, t6], requireNNEdge: s17.isSourceSingleBand }, pixelType: "f32", id: 0, isNoopProcess: false }, super.doRender(e17);
    }
    if (s17 == null ? void 0 : s17.functions.length) {
      const { functions: r14, hasBranches: t6 } = s17;
      for (let s18 = 0; s18 < r14.length; s18++) {
        const i10 = r14[s18];
        "Constant" !== i10.name && "Identity" !== i10.name && (e17.renderPass = "raster", e17.rasterFunction = i10, e17.hasBranches = t6, super.doRender(e17));
      }
    }
    e17.rasterFunction = null, e17.renderPass = "bitmap", super.doRender(e17);
  }
  _getTileBounds(r14) {
    const t6 = this._tileInfoView.getTileBounds(u(), r14);
    if (this.isCustomTilingScheme && r14.world) {
      const { tileInfo: e17 } = this._tileInfoView, i10 = mt(e17.spatialReference);
      if (i10) {
        const s17 = e17.lodAt(r14.level);
        if (!s17)
          return t6;
        const { resolution: n21 } = s17, o11 = i10 / n21 % e17.size[0], a22 = o11 ? (e17.size[0] - o11) * n21 : 0;
        t6[0] -= a22 * r14.world, t6[2] -= a22 * r14.world;
      }
    }
    return t6;
  }
};

// node_modules/@arcgis/core/views/2d/layers/imagery/BaseImageryTileSubView2D.js
var R2 = [0, 0];
var C2 = class extends S {
  constructor() {
    super(...arguments), this._updatingHandles = new h2(), this._emptyTilePixelBlock = null, this._tileStrategy = null, this._tileInfoView = null, this._fetchQueue = null, this._blockCacheRegistryUrl = null, this._blockCacheRegistryId = null, this._srcResolutions = [], this.previousLOD = null, this._needBlockCacheUpdate = false, this._globalSymbolizerParams = null, this._symbolizerParams = null, this._abortController = null, this._isCustomTilingScheme = false, this._maxIndexedColormapSize = 0, this._rasterFunctionState = "na", this._globalUpdateRequested = false, this.attached = false, this.timeExtent = null, this.redrawOrRefetch = k(async (e17 = {}) => {
      const t6 = this._rasterFunctionState;
      if (e17.reprocess && (await this._updatingHandles.addPromise(this.layer.updateRasterFunction()), this.updateRasterFunctionParameters()), !this.previousLOD || this.layerView.suspended)
        return;
      const i10 = this._rasterFunctionState, { type: s17 } = this;
      return e17.refetch || "raster" !== s17 && !!e17.reprocess || "cpu" === i10 || "cpu" === t6 ? this._updatingHandles.addPromise(this.doRefresh()) : this._updatingHandles.addPromise(this._redrawImage(e17.signal));
    });
  }
  destroy() {
    this._updatingHandles.destroy();
  }
  get useWebGLForProcessing() {
    return this._get("useWebGLForProcessing") ?? true;
  }
  set useWebGLForProcessing(e17) {
    this._set("useWebGLForProcessing", e17);
  }
  get useProgressiveUpdate() {
    return this._get("useProgressiveUpdate") ?? true;
  }
  set useProgressiveUpdate(e17) {
    if (this._tileStrategy && this.useProgressiveUpdate !== e17) {
      this._tileStrategy.destroy(), this.container.removeAllChildren();
      const t6 = this._getCacheSize(e17);
      this._tileStrategy = new r3({ cachePolicy: "purge", acquireTile: (e18) => this.acquireTile(e18), releaseTile: (e18) => this.releaseTile(e18), cacheSize: t6, tileInfoView: this._tileInfoView }), this._set("useProgressiveUpdate", e17), this.layerView.requestUpdate();
    }
  }
  update(e17) {
    var _a;
    this._fetchQueue.pause(), this._fetchQueue.state = e17.state, this._tileStrategy.update(e17), this._fetchQueue.resume();
    const { extent: t6, resolution: i10, scale: s17 } = e17.state, r14 = this._tileInfoView.getClosestInfoForScale(s17);
    if (this.layer.raster) {
      if (!this.useProgressiveUpdate || this._needBlockCacheUpdate) {
        const e18 = this._srcResolutions[r14.level], s18 = t6.toJSON ? t6 : w.fromJSON(t6);
        g2(this._blockCacheRegistryUrl, this._blockCacheRegistryId, s18, i10, e18, this.layer.raster.ioConfig.sampling);
      }
      this._needBlockCacheUpdate = false, ((_a = this.previousLOD) == null ? void 0 : _a.level) !== r14.level && (this.previousLOD = r14, null == this._symbolizerParams || this.layerView.hasTilingEffects || this._updateSymbolizerParams(), this._tileStrategy.updateCacheSize(0));
    }
  }
  moveEnd() {
    !this.layerView.hasTilingEffects && this.useProgressiveUpdate || (this._abortController && this._abortController.abort(), this._abortController = new AbortController(), 0 === this._fetchQueue.length && this._redrawImage(this._abortController.signal).then(() => {
      this._globalUpdateRequested = false, this.layerView.requestUpdate();
    }));
    const e17 = this._getCacheSize(this.useProgressiveUpdate);
    this._tileStrategy.updateCacheSize(e17), this.layerView.requestUpdate();
  }
  get updating() {
    var _a;
    return this._globalUpdateRequested || ((_a = this._updatingHandles) == null ? void 0 : _a.updating);
  }
  attach() {
    const e17 = t2();
    this._maxIndexedColormapSize = 4 * (e17.maxTextureSize || 4096), this._initializeTileInfo(), this._tileInfoView = new h3(this.layerView.tileInfo, this.layerView.fullExtent);
    const t6 = this._computeFetchConcurrency();
    this._fetchQueue = new m({ tileInfoView: this._tileInfoView, concurrency: t6, process: (e18, t7) => this._fetchTile(e18, t7) });
    const i10 = this._getCacheSize(this.useProgressiveUpdate);
    this._tileStrategy = new r3({ cachePolicy: "purge", acquireTile: (e18) => this.acquireTile(e18), releaseTile: (e18) => this.releaseTile(e18), cacheSize: i10, tileInfoView: this._tileInfoView }), this._updateBlockCacheRegistry();
  }
  detach() {
    this._tileStrategy.destroy(), this._fetchQueue.clear(), this.container.removeAllChildren(), this._fetchQueue = this._tileStrategy = this._tileInfoView = null, a4(this._blockCacheRegistryUrl, this._blockCacheRegistryId), this._blockCacheRegistryUrl = this._blockCacheRegistryId = null;
  }
  acquireTile(e17) {
    const t6 = this.container.createTile(e17);
    return this._updatingHandles.addPromise(this._enqueueTileFetch(t6)), this.layerView.requestUpdate(), this._needBlockCacheUpdate = true, this._globalUpdateRequested = this.layerView.hasTilingEffects || !this.useProgressiveUpdate, t6;
  }
  releaseTile(e17) {
    this._fetchQueue.abort(e17.key.id), this.container.removeChild(e17), e17.once("detach", () => {
      e17.destroy(), this.layerView.requestUpdate();
    }), this.layerView.requestUpdate();
  }
  createEmptyTilePixelBlock(e17 = null) {
    const t6 = null == e17 || e17.join(",") === this._tileInfoView.tileInfo.size.join(",");
    if (t6 && null != this._emptyTilePixelBlock)
      return this._emptyTilePixelBlock;
    e17 = e17 || this._tileInfoView.tileInfo.size;
    const [i10, s17] = e17, r14 = new g({ width: i10, height: s17, pixels: [new Uint8Array(i10 * s17)], mask: new Uint8Array(i10 * s17), pixelType: "u8" });
    return t6 && (this._emptyTilePixelBlock = r14), r14;
  }
  _getBandIds() {
    if (!("rasterFunctionChain" in this.container) || !this.container.rasterFunctionChain)
      return this.layer.bandIds;
    const { bandIds: e17, raster: t6 } = this.layer, i10 = "rasterFunction" in t6 ? t6.rasterFunction.rawInputBandIds : null;
    return (e17 == null ? void 0 : e17.length) && (i10 == null ? void 0 : i10.length) && 1 !== t6.rasterInfo.bandCount ? e17.map((e18) => i10[Math.min(e18, i10.length - 1)]) : e17 || i10;
  }
  updateRasterFunctionParameters() {
  }
  _fetchTile(e17, t6) {
    const i10 = null != t6 ? t6.signal : null, s17 = this.canUseWebGLForProcessing(), { layerView: r14 } = this, { tileInfo: a22 } = r14, o11 = !a22.isWrappable && null != D2(r14.view.spatialReference), l3 = s17 && this.layer.raster.hasUniqueSourceStorageInfo, n21 = { allowPartialFill: true, datumTransformation: r14.datumTransformation, interpolation: s17 ? "nearest" : this.layer.interpolation, registryId: this._blockCacheRegistryId, requestRawData: l3, skipRasterFunction: "raster" === this.type && null != this.container.rasterFunctionChain, signal: i10, srcResolution: this._srcResolutions[e17.level], timeExtent: r14.timeExtent, tileInfo: a22, disableWrapAround: o11 };
    return this.fetchTile(e17, n21);
  }
  _getCacheSize(e17) {
    return e17 ? 40 : 0;
  }
  _initializeTileInfo() {
    const { layerView: e17 } = this, t6 = e17.view.spatialReference;
    if (this._canUseLayerLODs()) {
      const { origin: i11, lods: s18 } = this.layer.tileInfo, r15 = s18.map(({ scale: e18 }) => e18), a23 = j.create({ spatialReference: t6, size: a3, scales: r15, origin: i11 });
      return e17.set("tileInfo", a23), void (this._srcResolutions = s18.map(({ resolution: e18 }) => ({ x: e18, y: e18 })));
    }
    const { scales: i10, srcResolutions: s17, isCustomTilingScheme: r14 } = ae(this.layer.serviceRasterInfo, t6, { tileSize: a3, alignGlobalDatasetWithAGOL: true, limitToSrcResolution: false }), a22 = j.create({ spatialReference: t6, size: a3, scales: i10 }), o11 = 0 === a22.origin.x, { xmin: l3, ymax: h7 } = e17.fullExtent;
    (o11 || r14 && a22.origin.x > l3) && (a22.origin = new x({ x: l3, y: h7, spatialReference: t6 })), this._isCustomTilingScheme = r14, e17.set("tileInfo", a22), this._srcResolutions = s17 ?? [];
  }
  _canUseLayerLODs() {
    var _a;
    const { layer: e17, layerView: t6 } = this;
    if ("Map" !== e17.raster.tileType)
      return false;
    const { lods: i10 } = e17.tileInfo, s17 = (_a = t6.view.constraints) == null ? void 0 : _a.effectiveLODs;
    return (s17 == null ? void 0 : s17.length) === i10.length && s17.every(({ scale: e18 }, t7) => Math.abs(e18 - i10[t7].scale) < 1e-3);
  }
  _computeFetchConcurrency() {
    const { blockBoundary: e17 } = this.layer.serviceRasterInfo.storageInfo, t6 = e17[e17.length - 1];
    return (t6.maxCol - t6.minCol + 1) * (t6.maxRow - t6.minRow + 1) > 64 ? 2 : 10;
  }
  async _enqueueTileFetch(e17, t6) {
    var _a;
    if (!this._fetchQueue.has(e17.key.id)) {
      try {
        const t7 = await this._fetchQueue.push(e17.key), a22 = this._getBandIds();
        let o11 = !this.useProgressiveUpdate || this.layerView.hasTilingEffects && !this._globalSymbolizerParams;
        if (this._globalUpdateRequested && !this.layerView.moving && 0 === this._fetchQueue.length) {
          o11 = false;
          try {
            await this._redrawImage((_a = this._abortController) == null ? void 0 : _a.signal);
          } catch (s17) {
            b(s17) && n.getLogger(this).error(s17);
          }
          this._globalUpdateRequested = false;
        }
        !this.canUseWebGLForProcessing() && "rasterVF" !== this.type || this.layerView.hasTilingEffects || null != this._symbolizerParams || this._updateSymbolizerParams();
        const l3 = this._tileInfoView.getTileCoords(R2, e17.key), n21 = this._tileInfoView.getTileResolution(e17.key);
        await this.updateTileSource(e17, { source: t7, symbolizerParams: this._symbolizerParams, globalSymbolizerParams: this._globalSymbolizerParams, suspended: o11, bandIds: a22, coords: l3, resolution: n21 }), e17.once("attach", () => this.layerView.requestUpdate()), this.container.addChild(e17);
      } catch (s17) {
        b(s17) || n.getLogger(this).error(s17);
      }
      this.layerView.requestUpdate();
    }
  }
  async _redrawImage(e17) {
    if (0 === this.container.children.length)
      return;
    await this.layer.updateRenderer(), this.layerView.hasTilingEffects ? await this._updateGlobalSymbolizerParams(e17) : (this._updateSymbolizerParams(), this._globalSymbolizerParams = null);
    const t6 = this.container.children.map(async (e18) => this.updateTileSymbolizerParameters(e18, { local: this._symbolizerParams, global: this._globalSymbolizerParams }));
    await Promise.allSettled(t6), this.container.requestRender();
  }
  async _updateGlobalSymbolizerParams(e17) {
    const t6 = { srcResolution: this._srcResolutions[this.previousLOD.level], registryId: this._blockCacheRegistryId, signal: e17 }, i10 = await this.layer.fetchPixels(this.layerView.view.extent, this.layerView.view.width, this.layerView.view.height, t6);
    if (!(i10 == null ? void 0 : i10.pixelBlock))
      return;
    const { resolution: s17 } = this.previousLOD, r14 = this._getBandIds(), a22 = this.layer.symbolizer.generateWebGLParameters({ pixelBlock: i10.pixelBlock.extractBands(r14), isGCS: this.layerView.view.spatialReference.isGeographic, resolution: { x: s17, y: s17 }, bandIds: r14 });
    !this.canUseWebGLForProcessing() && a22 && "stretch" === a22.type && this.layer.renderer && "raster-stretch" === this.layer.renderer.type && (a22.factor = a22.factor.map((e18) => 255 * e18), a22.outMin = Math.round(255 * a22.outMin), a22.outMax = Math.round(255 * a22.outMax)), this._globalSymbolizerParams = a22;
  }
  _updateSymbolizerParams() {
    const { resolution: e17 } = this.previousLOD, t6 = this._getBandIds();
    this._symbolizerParams = this.layer.symbolizer.generateWebGLParameters({ pixelBlock: null, isGCS: this.layerView.view.spatialReference.isGeographic, resolution: { x: e17, y: e17 }, bandIds: t6 });
  }
  _updateBlockCacheRegistry(e17 = false) {
    const { layer: t6, layerView: i10 } = this, { raster: s17 } = t6, { multidimensionalDefinition: r14 } = t6.normalizeRasterFetchOptions({ multidimensionalDefinition: t6.multidimensionalDefinition, timeExtent: i10.timeExtent }), a22 = s17.rasterInfo.multidimensionalInfo ? s17.getSliceIndex(r14) : null, o11 = i2(s17.rasterId, a22);
    if (o11 !== this._blockCacheRegistryUrl) {
      if (null != this._blockCacheRegistryUrl && a4(this._blockCacheRegistryUrl, this._blockCacheRegistryId), this._blockCacheRegistryId = u2(o11, s17.rasterInfo), e17) {
        const { view: e18 } = i10, t7 = this._tileInfoView.getClosestInfoForScale(e18.scale), r15 = this._srcResolutions[t7.level];
        g2(o11, this._blockCacheRegistryId, e18.extent, e18.resolution, r15, s17.ioConfig.sampling);
      }
      this._blockCacheRegistryUrl = o11;
    }
  }
  async doRefresh() {
    if (!this.attached || !this.previousLOD || this.layerView.suspended)
      return;
    await this.layer.updateRenderer(), this.layerView.hasTilingEffects || this._updateSymbolizerParams(), this._updateBlockCacheRegistry(true), this._fetchQueue.reset();
    const e17 = [];
    this._globalUpdateRequested = this.layerView.hasTilingEffects || !this.useProgressiveUpdate, this._tileStrategy.refresh((t6) => e17.push(this._enqueueTileFetch(t6))), await this._updatingHandles.addPromise(Promise.allSettled(e17));
  }
};
e([y()], C2.prototype, "_globalUpdateRequested", void 0), e([y()], C2.prototype, "attached", void 0), e([y()], C2.prototype, "container", void 0), e([y()], C2.prototype, "layer", void 0), e([y()], C2.prototype, "layerView", void 0), e([y()], C2.prototype, "type", void 0), e([y()], C2.prototype, "useWebGLForProcessing", null), e([y()], C2.prototype, "useProgressiveUpdate", null), e([y()], C2.prototype, "timeExtent", void 0), e([y()], C2.prototype, "updating", null), C2 = e([a("esri.views.2d.layers.imagery.BaseImageryTileSubView2D")], C2);

// node_modules/@arcgis/core/views/2d/layers/imagery/ImageryTileView2D.js
var a20 = class extends C2 {
  constructor() {
    super(...arguments), this.type = "raster";
  }
  attach() {
    super.attach(), this.container = new o9(this._tileInfoView), this.container.isCustomTilingScheme = this._isCustomTilingScheme, this.updateRasterFunctionParameters();
  }
  detach() {
    super.detach(), this.container.removeAllChildren(), this.container = null;
  }
  canUseWebGLForProcessing() {
    var _a, _b;
    const { symbolizer: e17 } = this.layer, t6 = (_b = (_a = e17.lookup) == null ? void 0 : _a.colormapLut) == null ? void 0 : _b.indexedColormap, r14 = t6 && t6.length > this._maxIndexedColormapSize;
    return this.useWebGLForProcessing && e17.canRenderInWebGL && !r14 && !("majority" === this.layer.interpolation && r4(this.layer));
  }
  fetchTile(e17, t6) {
    return this.layer.fetchTile(e17.level, e17.row, e17.col, t6);
  }
  updateRasterFunctionParameters() {
    const { clips: e17, view: t6 } = this.layerView;
    null != this._geometry && e17.remove(this._geometry);
    const { raster: r14, type: s17 } = this.layer;
    if ("Function" === r14.datasetFormat) {
      const s18 = r14.getClippingGeometry(t6.spatialReference);
      if (s18) {
        const t7 = new a5({ geometry: s18 });
        e17.add(t7), this._geometry = t7;
      }
    }
    const { container: i10 } = this;
    if ("Function" !== r14.datasetFormat || "wcs" === s17)
      return i10.rasterFunctionChain = null, i10.children.forEach((e18) => {
        const { bitmap: t7 } = e18;
        t7 && (t7.suspended = true, t7.processed = false, t7.projected && (t7.invalidateTexture(), t7.rasterTexture = null));
      }), void (this._rasterFunctionState = "na");
    const o11 = this._rasterFunctionState, { rasterFunction: a22, primaryRasters: l3 } = r14, c4 = a22.supportsGPU && (!l3 || l3.rasters.length <= 1), u5 = c4 ? a22.flatWebGLFunctionChain : null, { renderer: p4 } = this.layer, d4 = !c4 || !(u5 == null ? void 0 : u5.functions.length) || "raster-stretch" === (p4 == null ? void 0 : p4.type) && p4.dynamicRangeAdjustment || !this.canUseWebGLForProcessing();
    i10.rasterFunctionChain = d4 ? null : u5;
    const h7 = null == a22 ? "na" : i10.rasterFunctionChain ? "gpu" : "cpu";
    i10.children.forEach((e18) => {
      const { bitmap: t7 } = e18;
      t7 && (t7.suspended = o11 !== h7, t7.processed = false, t7.processedTexture = null);
    }), this._rasterFunctionState = h7;
  }
  async updateTileSource(e17, t6) {
    const r14 = this._getBandIds(), s17 = this._getLayerInterpolation(), i10 = this.canUseWebGLForProcessing(), { source: o11, globalSymbolizerParams: n21, suspended: a22, coords: l3, resolution: c4 } = t6, u5 = this.layerView.hasTilingEffects ? n21 : t6.symbolizerParams, { bitmap: p4 } = e17;
    if ([p4.x, p4.y] = l3, p4.resolution = c4, null != (o11 == null ? void 0 : o11.pixelBlock)) {
      const e18 = { extent: o11.extent, pixelBlock: o11.pixelBlock, srcPixelSize: o11.srcTilePixelSize };
      if (p4.rawPixelData = e18, i10)
        p4.source = o11.pixelBlock, p4.isRendereredSource = false;
      else {
        const t7 = await this.layer.applyRenderer(e18, "stretch" === (n21 == null ? void 0 : n21.type) ? n21 : void 0);
        p4.source = t7, p4.isRendereredSource = true;
      }
      p4.symbolizerParameters = i10 ? u5 : null, p4.transformGrid = i10 ? o11.transformGrid : null;
    } else {
      const e18 = this.createEmptyTilePixelBlock();
      p4.source = e18, p4.symbolizerParameters = i10 ? u5 : null, p4.transformGrid = null;
    }
    p4.bandIds = i10 ? r14 : null, p4.width = this._tileInfoView.tileInfo.size[0], p4.height = this._tileInfoView.tileInfo.size[1], p4.interpolation = s17, p4.suspended = a22, p4.invalidateTexture();
  }
  async updateTileSymbolizerParameters(e17, t6) {
    const { local: r14, global: s17 } = t6, i10 = this._getBandIds(), o11 = this._getLayerInterpolation(), n21 = this.canUseWebGLForProcessing(), { bitmap: a22 } = e17, { rawPixelData: l3 } = a22;
    n21 || null == l3 ? (a22.isRendereredSource && null != l3 && (a22.source = l3.pixelBlock), a22.isRendereredSource = false) : (a22.source = await this.layer.applyRenderer(l3, "stretch" === (s17 == null ? void 0 : s17.type) ? s17 : void 0), a22.isRendereredSource = true), a22.symbolizerParameters = n21 ? this.layerView.hasTilingEffects ? s17 : r14 : null, a22.bandIds = n21 ? i10 : null, a22.interpolation = o11, a22.suspended = false;
  }
  _getLayerInterpolation() {
    const { interpolation: e17, renderer: t6 } = this.layer;
    if (!t6)
      return e17;
    const r14 = t6.type;
    return "raster-colormap" === r14 || "unique-value" === r14 || "class-breaks" === r14 ? "nearest" : "raster-stretch" === t6.type && null != t6.colorRamp ? "bilinear" === e17 || "cubic" === e17 ? "bilinear" : "nearest" : e17;
  }
};
e([y()], a20.prototype, "container", void 0), e([y()], a20.prototype, "layer", void 0), e([y()], a20.prototype, "type", void 0), a20 = e([a("esri.views.2d.layers.imagery.ImageryTileView2D")], a20);
var l2 = a20;

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterVFTile.js
var r13 = class extends r5 {
  constructor(t6, e17, s17, a22, r14, l3, o11 = null) {
    super(t6, e17, s17, a22, r14, l3), this.tileData = new f(o11), this.tileData.coordScale = [r14, l3], this.tileData.once("isReady", () => this.ready());
  }
  destroy() {
    super.destroy(), this.tileData.destroy(), this.tileData = null, this.stage = null;
  }
  set stencilRef(t6) {
    this.tileData.stencilRef = t6;
  }
  get stencilRef() {
    return this.tileData.stencilRef;
  }
  _createTransforms() {
    return { displayViewScreenMat3: e3(), tileMat3: e3() };
  }
  setTransform(s17) {
    super.setTransform(s17);
    const i10 = this.resolution / (s17.resolution * s17.pixelRatio), a22 = this.transforms.tileMat3, [r14, l3] = this.tileData.offset, o11 = [this.x + r14 * this.resolution, this.y - l3 * this.resolution], [n21, h7] = s17.toScreenNoRotation([0, 0], o11), { symbolTileSize: c4 } = this.tileData.symbolizerParameters, f3 = Math.round((this.width - this.tileData.offset[0]) / c4) * c4, m9 = Math.round((this.height - this.tileData.offset[1]) / c4) * c4, D3 = f3 / this.rangeX * i10, d4 = m9 / this.rangeY * i10;
    r2(a22, D3, 0, 0, 0, d4, 0, n21, h7, 1), i(this.transforms.displayViewScreenMat3, s17.displayViewMat3, a22), this.tileData.transforms.displayViewScreenMat3 = this.transforms.displayViewScreenMat3;
  }
  onAttach() {
    this.tileData.stage = this.stage;
  }
  onDetach() {
    this.tileData.stage = null;
  }
};

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterVFTileContainer.js
var o10 = class extends i3 {
  constructor() {
    super(...arguments), this.isCustomTilingScheme = false, this.symbolTypes = ["triangle"];
  }
  createTile(s17) {
    const t6 = this._tileInfoView.getTileBounds(u(), s17), [i10, o11] = this._tileInfoView.tileInfo.size, n21 = this._tileInfoView.getTileResolution(s17.level);
    return new r13(s17, n21, t6[0], t6[3], i10, o11);
  }
  prepareRenderPasses(e17) {
    const r14 = e17.registerRenderPass({ name: "imagery (vf tile)", brushes: [d3], target: () => this.children.map((e18) => e18.tileData), drawPhase: E.MAP });
    return [...super.prepareRenderPasses(e17), r14];
  }
  doRender(e17) {
    this.visible && e17.drawPhase === E.MAP && this.symbolTypes.forEach((s17) => {
      e17.renderPass = s17, super.doRender(e17);
    });
  }
};

// node_modules/@arcgis/core/views/2d/layers/imagery/VectorFieldTileView2D.js
var a21 = class extends C2 {
  constructor() {
    super(...arguments), this._handle = null, this.type = "rasterVF";
  }
  canUseWebGLForProcessing() {
    return false;
  }
  async fetchTile(e17, t6) {
    t6 = { ...t6, interpolation: "nearest", requestProjectedLocalDirections: true };
    const i10 = await this.layer.fetchTile(e17.level, e17.row, e17.col, t6);
    return "vector-magdir" === this.layer.serviceRasterInfo.dataType && (i10 == null ? void 0 : i10.pixelBlock) && (i10.pixelBlock = await this.layer.convertVectorFieldData(i10.pixelBlock, t6)), i10;
  }
  updateTileSource(e17, t6) {
    const i10 = t6.symbolizerParams, { tileData: r14 } = e17;
    r14.key = e17.key, r14.width = this._tileInfoView.tileInfo.size[0], r14.height = this._tileInfoView.tileInfo.size[1];
    const { symbolTileSize: o11 } = i10, { source: s17 } = t6;
    if (r14.offset = this._getTileSymbolOffset(r14.key, o11), null != (s17 == null ? void 0 : s17.pixelBlock)) {
      const e18 = { extent: s17.extent, pixelBlock: s17.pixelBlock };
      r14.rawPixelData = e18, r14.symbolizerParameters = i10, r14.source = this._sampleVectorFieldData(s17.pixelBlock, i10, r14.offset);
    } else {
      const e18 = [Math.round((this._tileInfoView.tileInfo.size[0] - r14.offset[0]) / o11), Math.round((this._tileInfoView.tileInfo.size[1] - r14.offset[1]) / o11)], t7 = this.createEmptyTilePixelBlock(e18);
      r14.source = t7, r14.symbolizerParameters = i10;
    }
    return r14.invalidateVAO(), Promise.resolve();
  }
  updateTileSymbolizerParameters(e17, t6) {
    var _a;
    const i10 = t6.local, { symbolTileSize: r14 } = i10, { tileData: o11 } = e17;
    o11.offset = this._getTileSymbolOffset(o11.key, r14);
    const s17 = o11.symbolizerParameters.symbolTileSize;
    o11.symbolizerParameters = i10;
    const l3 = (_a = o11.rawPixelData) == null ? void 0 : _a.pixelBlock;
    return null != l3 && s17 !== r14 && (o11.source = this._sampleVectorFieldData(l3, o11.symbolizerParameters, o11.offset)), Promise.resolve();
  }
  attach() {
    super.attach(), this.container = new o10(this._tileInfoView), this.container.isCustomTilingScheme = this._isCustomTilingScheme, this._updateSymbolType(this.layer.renderer), this._handle = d(() => this.layer.renderer, (e17) => this._updateSymbolType(e17));
  }
  detach() {
    var _a;
    super.detach(), this.container.removeAllChildren(), (_a = this._handle) == null ? void 0 : _a.remove(), this._handle = null, this.container = null;
  }
  _getTileSymbolOffset(e17, t6) {
    const i10 = e17.col * this._tileInfoView.tileInfo.size[0] % t6, r14 = e17.row * this._tileInfoView.tileInfo.size[1] % t6;
    return [i10 > t6 / 2 ? t6 - i10 : -i10, r14 > t6 / 2 ? t6 - r14 : -r14];
  }
  _sampleVectorFieldData(e17, t6, i10) {
    const { symbolTileSize: r14 } = t6;
    return S2(e17, "vector-uv", r14, i10);
  }
  _updateSymbolType(e17) {
    "vector-field" === e17.type && (this.container.symbolTypes = "wind-barb" === e17.style ? ["scalar", "triangle"] : "simple-scalar" === e17.style ? ["scalar"] : ["triangle"]);
  }
};
e([y()], a21.prototype, "container", void 0), e([y()], a21.prototype, "layer", void 0), e([y()], a21.prototype, "type", void 0), a21 = e([a("esri.views.2d.layers.imagery.VectorFieldTileView2D")], a21);
var n20 = a21;

// node_modules/@arcgis/core/views/2d/layers/ImageryTileLayerView2D.js
var b4 = class extends p2(i4(m3(u3))) {
  constructor() {
    super(...arguments), this._useWebGLForProcessing = true, this._useProgressiveUpdate = true, this.subview = null;
  }
  get useWebGLForProcessing() {
    return this._useWebGLForProcessing;
  }
  set useWebGLForProcessing(e17) {
    this._useWebGLForProcessing = e17, this.subview && "useWebGLForProcessing" in this.subview && (this.subview.useWebGLForProcessing = e17);
  }
  get useProgressiveUpdate() {
    return this._useWebGLForProcessing;
  }
  set useProgressiveUpdate(e17) {
    this._useProgressiveUpdate = e17, this.subview && "useProgressiveUpdate" in this.subview && (this.subview.useProgressiveUpdate = e17);
  }
  get displayParameters() {
    const { layer: e17 } = this, s17 = this._get("displayParameters");
    return e17.renderer ? { bandIds: e17.bandIds, renderer: e17.renderer, interpolation: e17.interpolation, multidimensionalDefinition: e17.multidimensionalDefinition, rasterFunction: "imagery-tile" === e17.type ? e17.rasterFunction : null } : s17;
  }
  update(e17) {
    var _a;
    (_a = this.subview) == null ? void 0 : _a.update(e17), this.notifyChange("updating");
  }
  isUpdating() {
    return !this.subview || this.subview.updating;
  }
  attach() {
    this.layer.increaseRasterJobHandlerUsage(), this._updateSubview(), this.addAttachHandles([d(() => this.displayParameters, (e17, t6) => {
      const r14 = e17.interpolation !== (t6 == null ? void 0 : t6.interpolation) && ("majority" === e17.interpolation || "majority" === (t6 == null ? void 0 : t6.interpolation)) && r4(this.layer), o11 = e17.renderer !== (t6 == null ? void 0 : t6.renderer) && this._getSubviewType(t6 == null ? void 0 : t6.renderer) !== this._getSubviewType(e17.renderer);
      o11 && this._updateSubview();
      const a22 = e17.multidimensionalDefinition !== (t6 == null ? void 0 : t6.multidimensionalDefinition), n21 = e17.rasterFunction !== (t6 == null ? void 0 : t6.rasterFunction), u5 = n21 && !this._useWebGLForProcessing, h7 = a22 || r14 || o11 || u5;
      this.subview.redrawOrRefetch({ refetch: h7, reprocess: n21 }).catch((e18) => {
        b(e18) || n.getLogger(this).error(e18);
      }), this.notifyChange("updating");
    }), d(() => this.layer.multidimensionalSubset ?? null, (e17, t6) => {
      const { multidimensionalDefinition: r14 } = this.layer;
      null != r14 && o2(r14, e17) !== o2(r14, t6) && (this.subview.redrawOrRefetch({ refetch: true }).catch((e18) => {
        b(e18) || n.getLogger(this).error(e18);
      }), this.notifyChange("updating"));
    }, C), d(() => this.timeExtent, () => {
      this.subview.timeExtent = this.timeExtent, this.subview.redrawOrRefetch({ refetch: true }).catch((e17) => {
        b(e17) || n.getLogger(this).error(e17);
      });
    }, P)]);
  }
  detach() {
    var _a;
    this.layer.decreaseRasterJobHandlerUsage(), this._detachSubview(this.subview), (_a = this.subview) == null ? void 0 : _a.destroy(), this.subview = null;
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.subview.moveEnd();
  }
  doRefresh() {
    return this.subview ? this.subview.doRefresh() : Promise.resolve();
  }
  _updateSubview() {
    var _a;
    const { renderer: e17 } = this.layer;
    if (!e17)
      return;
    const s17 = this._getSubviewType(e17);
    if (this.subview) {
      if (this.subview.type === s17)
        return void this._attachSubview(this.subview);
      this._detachSubview(this.subview), (_a = this.subview) == null ? void 0 : _a.destroy(), this.subview = null;
    }
    const { layer: i10 } = this;
    let t6;
    if (t6 = "rasterVF" === s17 ? new n20({ layer: i10, layerView: this }) : "flow" === s17 ? new d2({ layer: i10, layerView: this }) : new l2({ layer: i10, layerView: this }), "useWebGLForProcessing" in t6 && (t6.useWebGLForProcessing = this._useWebGLForProcessing), "useProgressiveUpdate" in t6 && (t6.useProgressiveUpdate = this._useProgressiveUpdate), "previousLOD" in t6) {
      const { subview: e18 } = this;
      t6.previousLOD = e18 && "previousLOD" in e18 ? e18.previousLOD : null;
    }
    this._attachSubview(t6), this.subview = t6, this.requestUpdate();
  }
  _attachSubview(e17) {
    e17 && !e17.attached && (e17.attach(), e17.attached = true, this.container.addChildAt(e17.container, 0));
  }
  _detachSubview(e17) {
    (e17 == null ? void 0 : e17.attached) && (this.container.removeChild(e17.container), e17.detach(), e17.attached = false);
  }
  _getSubviewType(e17) {
    const s17 = e17 == null ? void 0 : e17.type;
    return "vector-field" === s17 ? "rasterVF" : "flow" === s17 ? "flow" : "raster";
  }
};
e([y()], b4.prototype, "subview", void 0), e([y()], b4.prototype, "useWebGLForProcessing", null), e([y()], b4.prototype, "useProgressiveUpdate", null), e([y({ readOnly: true })], b4.prototype, "displayParameters", null), b4 = e([a("esri.views.2d.layers.ImageryTileLayerView2D")], b4);
var g4 = b4;
export {
  g4 as default
};
//# sourceMappingURL=ImageryTileLayerView2D-EZ7LOFSZ.js.map
