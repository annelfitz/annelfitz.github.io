import {
  p as p2
} from "./chunk-LBXFRGMS.js";
import {
  x
} from "./chunk-HLDUDRTD.js";
import {
  S
} from "./chunk-SLQA5YBV.js";
import {
  Q,
  p
} from "./chunk-UMXV3EBO.js";
import {
  o
} from "./chunk-YOPMY6TS.js";
import {
  r as r2
} from "./chunk-VIN55KNF.js";
import {
  K,
  N,
  U,
  W,
  t3 as t
} from "./chunk-SAYWXQVM.js";
import {
  _
} from "./chunk-BVQWKK2V.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a2
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import {
  a,
  b,
  s as s2
} from "./chunk-JGDJR5EV.js";
import {
  u
} from "./chunk-QHK5ZYFW.js";
import {
  n2 as n,
  r,
  s
} from "./chunk-7RBRCL6S.js";

// node_modules/@arcgis/core/layers/mixins/PortalLayer.js
var j = (j2) => {
  let _2 = class extends j2 {
    constructor() {
      super(...arguments), this.resourceReferences = { portalItem: null, paths: [] }, this.userHasEditingPrivileges = true, this.userHasFullEditingPrivileges = false, this.userHasUpdateItemPrivileges = false;
    }
    destroy() {
      this.portalItem = u(this.portalItem), this.resourceReferences.portalItem = null, this.resourceReferences.paths.length = 0;
    }
    set portalItem(t2) {
      t2 !== this._get("portalItem") && (this.removeOrigin("portal-item"), this._set("portalItem", t2));
    }
    readPortalItem(t2, e2, r3) {
      if (e2.itemId)
        return new S({ id: e2.itemId, portal: r3 == null ? void 0 : r3.portal });
    }
    writePortalItem(t2, e2) {
      (t2 == null ? void 0 : t2.id) && (e2.itemId = t2.id);
    }
    async loadFromPortal(t2, e2) {
      var _a;
      if ((_a = this.portalItem) == null ? void 0 : _a.id)
        try {
          const { load: r3 } = await import("./layersLoader-AWL4ECXO.js");
          return s2(e2), await r3({ instance: this, supportedTypes: t2.supportedTypes, validateItem: t2.validateItem, supportsData: t2.supportsData, layerModuleTypeMap: t2.layerModuleTypeMap }, e2);
        } catch (r3) {
          throw b(r3) || n.getLogger(this).warn(`Failed to load layer (${this.title}, ${this.id}) portal item (${this.portalItem.id})
  ${r3}`), r3;
        }
    }
    async finishLoadEditablePortalLayer(t2) {
      this._set("userHasEditingPrivileges", await this._fetchUserHasEditingPrivileges(t2).catch((t3) => (a(t3), true)));
    }
    async setUserPrivileges(t2, r3) {
      if (!r.userPrivilegesApplied)
        return this.finishLoadEditablePortalLayer(r3);
      if (this.url)
        try {
          const { features: { edit: e2, fullEdit: s3 }, content: { updateItem: i } } = await this._fetchUserPrivileges(t2, r3);
          this._set("userHasEditingPrivileges", e2), this._set("userHasFullEditingPrivileges", s3), this._set("userHasUpdateItemPrivileges", i);
        } catch (s3) {
          a(s3);
        }
    }
    async _fetchUserPrivileges(t2, e2) {
      var _a;
      let s3 = this.portalItem;
      if (!t2 || !s3 || !s3.loaded || s3.sourceUrl)
        return this._fetchFallbackUserPrivileges(e2);
      const i = t2 === s3.id;
      if (i && s3.portal.user)
        return p2(s3);
      let o2, a3;
      if (i)
        o2 = s3.portal.url;
      else
        try {
          o2 = await x(this.url, e2);
        } catch (d) {
          a(d);
        }
      if (!o2 || !W(o2, s3.portal.url))
        return this._fetchFallbackUserPrivileges(e2);
      try {
        const t3 = null != e2 ? e2.signal : null;
        a3 = await ((_a = t) == null ? void 0 : _a.getCredential(`${o2}/sharing`, { prompt: false, signal: t3 }));
      } catch (d) {
        a(d);
      }
      const l = true, n2 = false, p3 = false;
      if (!a3)
        return { features: { edit: l, fullEdit: n2 }, content: { updateItem: p3 } };
      try {
        if (i ? await s3.reload() : (s3 = new S({ id: t2, portal: { url: o2 } }), await s3.load(e2)), s3.portal.user)
          return p2(s3);
      } catch (d) {
        a(d);
      }
      return { features: { edit: l, fullEdit: n2 }, content: { updateItem: p3 } };
    }
    async _fetchFallbackUserPrivileges(t2) {
      let e2 = true;
      try {
        e2 = await this._fetchUserHasEditingPrivileges(t2);
      } catch (r3) {
        a(r3);
      }
      return { features: { edit: e2, fullEdit: false }, content: { updateItem: false } };
    }
    async _fetchUserHasEditingPrivileges(t2) {
      var _a;
      const e2 = this.url ? (_a = t) == null ? void 0 : _a.findCredential(this.url) : null;
      if (!e2)
        return true;
      const s3 = E.credential === e2 ? E.user : await this._fetchEditingUser(t2);
      return E.credential = e2, E.user = s3, null == (s3 == null ? void 0 : s3.privileges) || s3.privileges.includes("features:user:edit");
    }
    async _fetchEditingUser(t2) {
      var _a, _b;
      const e2 = (_b = (_a = this.portalItem) == null ? void 0 : _a.portal) == null ? void 0 : _b.user;
      if (e2)
        return e2;
      const o2 = t.findServerInfo(this.url ?? "");
      if (!(o2 == null ? void 0 : o2.owningSystemUrl))
        return null;
      const a3 = `${o2.owningSystemUrl}/sharing/rest`, l = Q.getDefault();
      if (l && l.loaded && K(l.restUrl) === K(a3))
        return l.user;
      const n2 = `${a3}/community/self`, p3 = null != t2 ? t2.signal : null, u2 = await _(U(n2, { authMode: "no-prompt", query: { f: "json" }, signal: p3 }));
      return u2.ok ? p.fromJSON(u2.value.data) : null;
    }
    read(t2, e2) {
      e2 && (e2.layer = this), super.read(t2, e2);
    }
    write(t2, e2) {
      var _a;
      const r3 = e2 == null ? void 0 : e2.portal, s3 = ((_a = this.portalItem) == null ? void 0 : _a.id) && (this.portalItem.portal || Q.getDefault());
      return r3 && s3 && !N(s3.restUrl, r3.restUrl) ? (e2.messages && e2.messages.push(new s("layer:cross-portal", `The layer '${this.title} (${this.id})' cannot be persisted because it refers to an item on a different portal than the one being saved to. To save, set layer.portalItem to null or save to the same portal as the item associated with the layer`, { layer: this })), null) : super.write(t2, { ...e2, layer: this });
    }
  };
  return e([y({ type: S })], _2.prototype, "portalItem", null), e([o("web-document", "portalItem", ["itemId"])], _2.prototype, "readPortalItem", null), e([r2("web-document", "portalItem", { itemId: { type: String } })], _2.prototype, "writePortalItem", null), e([y({ clonable: false })], _2.prototype, "resourceReferences", void 0), e([y({ type: Boolean, readOnly: true })], _2.prototype, "userHasEditingPrivileges", void 0), e([y({ type: Boolean, readOnly: true })], _2.prototype, "userHasFullEditingPrivileges", void 0), e([y({ type: Boolean, readOnly: true })], _2.prototype, "userHasUpdateItemPrivileges", void 0), _2 = e([a2("esri.layers.mixins.PortalLayer")], _2), _2;
};
var E = { credential: null, user: null };

export {
  j
};
//# sourceMappingURL=chunk-4ZLXDMI5.js.map
