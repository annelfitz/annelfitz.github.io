import {
  t as t2
} from "./chunk-IKON42NH.js";
import {
  e as e4
} from "./chunk-HLKM6YBE.js";
import {
  t
} from "./chunk-CDYT7KXF.js";
import {
  i as i2
} from "./chunk-WK2KEW7P.js";
import {
  e as e3
} from "./chunk-EAAEPSBY.js";
import {
  p as p2,
  r,
  s as s4
} from "./chunk-QD3CP3I4.js";
import {
  f as f4
} from "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-QX66UTIR.js";
import {
  n as n4
} from "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import {
  B,
  b,
  k
} from "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import {
  D,
  e2
} from "./chunk-RGCWZ2KZ.js";
import {
  n as n2
} from "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import {
  L,
  v
} from "./chunk-2SDMYJDE.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import {
  h
} from "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import {
  g as g2,
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import {
  f as f3
} from "./chunk-MBGZKT2Z.js";
import {
  E,
  G,
  T,
  c as c2,
  f as f2,
  g,
  s as s3
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import {
  s as s2
} from "./chunk-IOB3DJMR.js";
import {
  n as n3
} from "./chunk-BPRXWDBO.js";
import {
  c,
  f
} from "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  P,
  d,
  p
} from "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import {
  o
} from "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import {
  i
} from "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n,
  s
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/widgets/CoordinateConversion/support/Conversion.js
var e5 = class extends S {
  constructor(o4) {
    super(o4), this.format = null, this.position = { coordinate: null, location: null };
  }
  get displayCoordinate() {
    var _a, _b;
    return (_b = this.format) == null ? void 0 : _b.getDisplayCoordinate((_a = this.position) == null ? void 0 : _a.coordinate);
  }
};
e([y({ readOnly: true })], e5.prototype, "displayCoordinate", null), e([y()], e5.prototype, "format", void 0), e([y()], e5.prototype, "position", void 0), e5 = e([a("esri.widgets.CoordinateConversion.support.Conversion")], e5);
var i3 = e5;

// node_modules/@arcgis/core/widgets/CoordinateConversion/support/coordinateConversionUtils.js
function e6(t3, n6) {
  const e7 = r2(n6);
  return [t3[0].toFixed(e7), t3[1].toFixed(e7)];
}
function r2(t3) {
  return t3 >= 500 ? 6 : t3 < 500 && t3 >= 50 ? 7 : t3 < 50 && t3 >= 5 ? 8 : 9;
}
function i4(e7, r5) {
  const i5 = e7.includes(",") ? "," : " ", [u3, s7, c5] = e7.split(i5).map((t3) => {
    const n6 = t3.trim();
    return n6 ? Number(n6) : null;
  });
  if (!o2(u3) || !o2(s7))
    return null;
  const m3 = new x({ x: u3, y: s7, spatialReference: r5 || f3.WGS84 });
  return c5 && (m3.z = c5, m3.hasZ = true), m3;
}
function o2(t3) {
  return "number" == typeof t3 && isFinite(t3);
}
function u(t3) {
  return !!t3 && o2(t3.x) && o2(t3.y);
}
function s5(t3, n6) {
  if (t3.spatialReference.isGeographic && n6) {
    const [r5, i5] = e6([t3.x, t3.y], n6);
    return `${r5}, ${i5}`;
  }
  return `${t3.x.toFixed(3)}, ${t3.y.toFixed(3)}`;
}
var c3 = ["dd", "dms", "ddm", "mgrs", "usng", "utm"];
function m(t3) {
  return c3.includes(t3);
}

// node_modules/@arcgis/core/geometry/coordinateFormatter.js
function w(n6, e7) {
  const o4 = [];
  n6 = (n6 = (n6 = n6.replaceAll(/[\u00B0\u00BA]/g, "^")).replaceAll("′", "'")).replaceAll("″", '"');
  const t3 = p3(e7);
  return c2.dmsToGeog(t3, 1, [n6], o4) ? new x(o4[0][0], o4[0][1], e7 || f3.WGS84) : null;
}
function E2(n6, e7, o4) {
  const t3 = [], r5 = M(o4);
  if (-1 === r5)
    return console.warn(`invalid conversionMode: ${o4}`), null;
  const a2 = p3(e7);
  return T.mgrsToGeogExtended(a2, 1, [n6], r5, t3) ? new x(t3[0][0], t3[0][1], e7 || f3.WGS84) : null;
}
function g3(n6, e7) {
  const o4 = [];
  !e7 && /\(.+27/.test(n6) && (e7 = f3.GCS_NAD_1927);
  const t3 = p3(e7);
  return g.usngToGeog(t3, 1, [n6], o4) ? new x(o4[0][0], o4[0][1], e7 || f3.WGS84) : null;
}
function m2(n6, e7, o4) {
  const t3 = [], r5 = v2(o4);
  if (-1 === r5)
    return console.warn(`invalid conversionMode: ${o4}`), null;
  const i5 = p3(e7);
  return f2.utmToGeog(i5, 1, [n6], r5, t3) ? new x(t3[0][0], t3[0][1], e7 || f3.WGS84) : null;
}
function T2(n6, e7, o4 = 0) {
  const t3 = [[n6.x, n6.y]], i5 = [], a2 = p3(n6.spatialReference);
  let l2 = 0;
  switch (e7) {
    case "dd":
      l2 = c2.geogToDd(a2, 1, t3, o4, i5);
      break;
    case "ddm":
      l2 = c2.geogToDdm(a2, 1, t3, o4, i5);
      break;
    case "dms":
      l2 = c2.geogToDms(a2, 1, t3, o4, i5);
      break;
    default:
      return console.warn(`invalid format: ${e7}`), null;
  }
  return l2 ? i5[0] : null;
}
function P2(n6, e7, o4 = 0, t3 = false) {
  const r5 = [[n6.x, n6.y]], a2 = [], l2 = p3(n6.spatialReference);
  let s7 = M(e7);
  if (-1 === s7)
    return console.warn(`invalid conversionMode: ${e7}`), null;
  t3 && (s7 |= T.PE_MGRS_ADD_SPACES);
  return T.geogToMgrsExtended(l2, 1, r5, o4, false, s7, a2) ? a2[0] : null;
}
function G2(n6, e7 = 0, o4 = false) {
  const t3 = [[n6.x, n6.y]], r5 = [], i5 = p3(n6.spatialReference);
  return g.geogToUsng(i5, 1, t3, e7, false, o4, r5) ? r5[0] : null;
}
function k2(n6, e7, o4 = false) {
  const t3 = [[n6.x, n6.y]], r5 = [], i5 = p3(n6.spatialReference);
  let a2 = v2(e7);
  if (-1 === a2)
    return console.warn(`invalid conversionMode: ${e7}`), null;
  o4 && (a2 |= f2.PE_UTM_OPTS_ADD_SPACES);
  return f2.geogToUtm(i5, 1, t3, a2, r5) ? r5[0] : null;
}
function p3(e7) {
  let o4 = null;
  if (e7 || (e7 = f3.WGS84), e7.wkid) {
    if (o4 = E.geogcs(e7.wkid), !o4)
      throw new s("coordinate-formatter:invalid-spatial-reference", "wkid is not valid");
  } else {
    if (!e7.wkt2 && !e7.wkt)
      throw new s("coordinate-formatter:invalid-spatial-reference", "wkid and wkt are missing");
    if (o4 = E.fromString(s3.PE_TYPE_GEOGCS, e7.wkt2 || e7.wkt), !o4)
      throw new s("coordinate-formatter:invalid-spatial-reference", "wkt is not valid");
  }
  return o4;
}
function M(n6) {
  let e7 = -1;
  switch (n6) {
    case "automatic":
      e7 = T.PE_MGRS_STYLE_AUTO;
      break;
    case "new-180-in-zone-01":
      e7 = T.PE_MGRS_STYLE_NEW | T.PE_MGRS_180_ZONE_1_PLUS;
      break;
    case "new-180-in-zone-60":
      e7 = T.PE_MGRS_STYLE_NEW;
      break;
    case "old-180-in-zone-01":
      e7 = T.PE_MGRS_STYLE_OLD | T.PE_MGRS_180_ZONE_1_PLUS;
      break;
    case "old-180-in-zone-60":
      e7 = T.PE_MGRS_STYLE_OLD;
  }
  return e7;
}
function v2(n6) {
  let e7 = -1;
  switch (n6) {
    case "latitude-band-indicators":
      e7 = f2.PE_UTM_OPTS_NONE;
      break;
    case "north-south-indicators":
      e7 = f2.PE_UTM_OPTS_NS;
  }
  return e7;
}

// node_modules/@arcgis/core/widgets/CoordinateConversion/support/Format.js
var P3 = class extends S {
  constructor(e7) {
    super(e7), this.conversionInfo = null, this.coordinateSegments = null, this._currentPattern = void 0, this.defaultPattern = null, this.name = null, this.viewModel = null;
  }
  get currentPattern() {
    return (this._currentPattern || this.defaultPattern) ?? "";
  }
  set currentPattern(e7) {
    this._currentPattern = e7;
  }
  get label() {
    return this.name ?? "";
  }
  set label(e7) {
    this._overrideIfSome("label", e7);
  }
  get hasDisplayProperties() {
    return !(!this.defaultPattern || !this.coordinateSegments);
  }
  get spatialReference() {
    var _a;
    return "basemap" === this.name ? this._viewSpatialReference : ((_a = this.conversionInfo) == null ? void 0 : _a.spatialReference) ?? f3.WGS84;
  }
  set spatialReference(e7) {
    this._overrideIfSome("spatialReference", e7);
  }
  get _viewSpatialReference() {
    var _a, _b;
    return ((_b = (_a = this.viewModel) == null ? void 0 : _a.view) == null ? void 0 : _b.spatialReference) ?? f3.WGS84;
  }
  get _additionalCharactersPattern() {
    const e7 = this.coordinateSegments;
    if (!e7)
      return null;
    const t3 = e7.map((e8) => e8.alias), r5 = this.currentPattern.replaceAll(new RegExp(`["nsew${t3.join()}]`, "gi"), "").replaceAll(" ", "");
    return new RegExp(`[${r5}]`, "g");
  }
  get test() {
    return { additionalCharactersPattern: this._additionalCharactersPattern };
  }
  async convert(e7) {
    var _a;
    if (!u(e7))
      throw new s("format:invalid-point", "Could not convert invalid point.", { point: e7 });
    const t3 = (_a = this.conversionInfo) == null ? void 0 : _a.convert;
    if (t3)
      return Promise.resolve().then(() => t3(e7));
    const n6 = await this._project(e7, this.spatialReference);
    return { location: n6, coordinate: await this._getCoordinate(n6) };
  }
  getConversionStrategy() {
    var _a, _b;
    const e7 = this._viewSpatialReference;
    return ((_a = this.conversionInfo) == null ? void 0 : _a.convert) || ((_b = this.viewModel) == null ? void 0 : _b.formatterAvailable) || "xy" === this.name && (e7.isWebMercator || e7.isWGS84) || "basemap" === this.name ? "client" : "server";
  }
  getDisplayCoordinate(e7) {
    if (!e7)
      return null;
    if (!this.coordinateSegments || !this.currentPattern)
      return e7;
    let t3 = this.currentPattern;
    const r5 = this._getSegmentMatches(e7, false);
    for (let n6 = this.coordinateSegments.length - 1; n6 >= 0; n6--) {
      const e8 = this.coordinateSegments[n6];
      t3 = t3.replace(e8.alias, r5[n6]);
    }
    return t3;
  }
  parseUserInput(e7) {
    const { defaultPattern: t3, _additionalCharactersPattern: r5, coordinateSegments: n6 } = this;
    if (!t3 || !r5)
      return "";
    let o4 = t3.replace(r5, "");
    e7 = e7.replace(r5, "");
    const i5 = this._getSegmentMatches(e7, true);
    if (n6)
      for (let a2 = n6.length - 1; a2 >= 0; a2--) {
        const e8 = n6[a2];
        o4 = o4.replace(e8.alias, i5[a2]);
      }
    return o4;
  }
  _getSegmentMatches(e7, t3) {
    const r5 = new Array(), { coordinateSegments: n6 } = this;
    if (!n6)
      return r5;
    for (let o4 = 0; o4 < n6.length; o4++) {
      const i5 = n6[o4], a2 = e7.match(i5.searchPattern);
      if (!a2) {
        r5.push("");
        continue;
      }
      let s7 = a2[0];
      if (e7 = e7.replace(s7, "").trim(), i5.substitution) {
        const e8 = t3 ? i5.substitution.input(s7) : i5.substitution.output(s7);
        e8 && (s7 = `${e8}`);
      }
      r5.push(s7);
    }
    return r5;
  }
  async reverseConvert(e7) {
    var _a, _b;
    const t3 = this.parseUserInput(e7), n6 = (_a = this.conversionInfo) == null ? void 0 : _a.reverseConvert;
    let o4;
    if (n6)
      o4 = n6(t3);
    else if ("xy" === this.name || "basemap" === this.name)
      o4 = i4(t3, this.spatialReference);
    else if ((_b = this.viewModel) == null ? void 0 : _b.formatterAvailable)
      switch (this.name) {
        case "dd":
        case "ddm":
        case "dms":
          o4 = w(t3, this.spatialReference);
          break;
        case "mgrs": {
          const e8 = "automatic";
          o4 = E2(t3, this.spatialReference, e8);
          break;
        }
        case "utm": {
          const e8 = "latitude-band-indicators";
          o4 = m2(t3, this.spatialReference, e8);
          break;
        }
        case "usng":
          o4 = g3(t3, this.spatialReference);
          break;
        default:
          o4 = null;
      }
    if (!o4)
      throw new s("format:invalid-input", "Could not parse input into point.", { userInput: e7 });
    return this._project(o4, this._viewSpatialReference);
  }
  async _getCoordinate(e7) {
    var _a, _b, _c;
    const t3 = ((_b = (_a = this.viewModel) == null ? void 0 : _a.view) == null ? void 0 : _b.scale) ?? 0;
    if (!u(e7))
      throw new s("format:invalid-point", "Could not transform invalid point into coordinate.", { point: e7 });
    if (((_c = this.viewModel) == null ? void 0 : _c.formatterAvailable) || "basemap" === this.name || "xy" === this.name)
      switch (this.name) {
        case "dd":
        case "ddm":
        case "dms": {
          const r5 = r2(t3);
          return T2(e7, this.name, r5);
        }
        case "mgrs":
          return P2(e7, "automatic", 5, false);
        case "usng":
          return G2(e7, 5, false);
        case "utm":
          return k2(e7, "latitude-band-indicators", true);
        default:
          return s5(e7, t3);
      }
    return s5(e7, t3);
  }
  async _project(e7, t3) {
    var _a, _b;
    if (G(e7.spatialReference, t3) || !t3)
      return e7;
    if (((_a = this.viewModel) == null ? void 0 : _a.formatterAvailable) && b())
      return B(e7, t3);
    if (!((_b = this.viewModel) == null ? void 0 : _b.formatterAvailable)) {
      const r5 = g2(e7, t3);
      if (null != r5)
        return r5;
    }
    return null;
  }
};
e([y()], P3.prototype, "conversionInfo", void 0), e([y()], P3.prototype, "coordinateSegments", void 0), e([y()], P3.prototype, "currentPattern", null), e([y()], P3.prototype, "_currentPattern", void 0), e([y()], P3.prototype, "label", null), e([y()], P3.prototype, "defaultPattern", void 0), e([y({ readOnly: true })], P3.prototype, "hasDisplayProperties", null), e([y()], P3.prototype, "name", void 0), e([y({ type: f3 })], P3.prototype, "spatialReference", null), e([y()], P3.prototype, "viewModel", void 0), e([y({ readOnly: true })], P3.prototype, "_viewSpatialReference", null), e([y({ readOnly: true })], P3.prototype, "_additionalCharactersPattern", null), P3 = e([a("esri.widgets.CoordinateConversion.support.Format")], P3);
var _2 = P3;

// node_modules/@arcgis/core/widgets/CoordinateConversion/support/formatUtils.js
var s6 = r().decimal;
var r4 = { N: "north", S: "south", E: "east", W: "west" };
var o3 = `°${"‎"}`;
var u2 = new RegExp(`-?\\d+[\\.|\\${s6}]?\\d*`);
var d2 = /^[\\0]+(?=\d)/;
function c4(e7, i5) {
  const a2 = "ar" === c(), s7 = e7.abbreviatedDirections.north, u3 = e7.abbreviatedDirections.south, d3 = e7.abbreviatedDirections.east, c5 = e7.abbreviatedDirections.west, p5 = r().decimal, h2 = { [s7]: "N", [u3]: "S", [d3]: "E", [c5]: "W" }, g5 = new RegExp(`-?\\d+[\\.|\\${p5}]?\\d*`), P6 = new RegExp(`N|S|${s7}|${u3}`, "i"), $ = new RegExp(`E|W|${d3}|${c5}`, "i"), m3 = { ddm: `Y${o3} A'${e7.abbreviatedDirections.north}, X${o3} B'${e7.abbreviatedDirections.east}`, dms: `Y${o3} A' B"${e7.abbreviatedDirections.north}, X${o3} C' D"${e7.abbreviatedDirections.east}`, dd: `Y${o3}${e7.abbreviatedDirections.north}, X${o3}${e7.abbreviatedDirections.east}`, xy: `X${o3}, Y${o3}`, basemap: "X, Y" }, w3 = { ddm: `${e7.abbreviatedDirections.north}${o3}Y 'A ,${e7.abbreviatedDirections.east}${o3}X 'B`, dms: `${e7.abbreviatedDirections.north}${o3}Y 'A "B ,${e7.abbreviatedDirections.east}${o3}X 'C "D`, dd: `${e7.abbreviatedDirections.north}${o3}Y ,${e7.abbreviatedDirections.east}${o3}X`, xy: `X${o3} ,Y${o3}`, basemap: "X ,Y" }, D2 = (t3) => null != t3 && Object.keys(m3).includes(t3), E4 = new RegExp(`\\d{1,2}[\\.|\\${p5}]?\\d*`, "i"), v3 = new RegExp(`\\d{1,3}[\\.|\\${p5}]?\\d*`, "i");
  i5.forEach((t3) => {
    const { name: i6 } = t3;
    if ("dd" === i6 ? t3.coordinateSegments = [{ alias: "Y", description: "degrees latitude", searchPattern: E4, substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: e7.abbreviatedDirections.north, description: "north/south indicator", searchPattern: P6, substitution: { input: (t4) => h2[t4], output: (t4) => e7.abbreviatedDirections[r4[t4]] } }, { alias: "X", description: "degrees longitude", searchPattern: v3, substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: e7.abbreviatedDirections.east, description: "east/west indicator", searchPattern: $, substitution: { input: (t4) => h2[t4], output: (t4) => e7.abbreviatedDirections[r4[t4]] } }] : "ddm" === i6 ? t3.coordinateSegments = [{ alias: "Y", description: "degrees latitude", searchPattern: E4, substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: "A", description: "minutes latitude", searchPattern: E4, substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: e7.abbreviatedDirections.north, description: "north/south indicator", searchPattern: P6, substitution: { input: (t4) => h2[t4], output: (t4) => e7.abbreviatedDirections[r4[t4]] } }, { alias: "X", description: "degrees longitude", searchPattern: v3, substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: "B", description: "minutes longitude", searchPattern: E4, substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: e7.abbreviatedDirections.east, description: "east/west indicator", searchPattern: $, substitution: { input: (t4) => h2[t4], output: (t4) => e7.abbreviatedDirections[r4[t4]] } }] : "dms" === i6 ? t3.coordinateSegments = [{ alias: "Y", description: "degrees latitude", searchPattern: E4, substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: "A", description: "minutes latitude", searchPattern: E4, substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: "B", description: "seconds latitude", searchPattern: E4, substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: e7.abbreviatedDirections.north, description: "north/south indicator", searchPattern: P6, substitution: { input: (t4) => h2[t4], output: (t4) => e7.abbreviatedDirections[r4[t4]] } }, { alias: "X", description: "degrees longitude", searchPattern: v3, substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: "C", description: "minutes longitude", searchPattern: E4, substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: "D", description: "seconds longitude", searchPattern: E4, substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: e7.abbreviatedDirections.east, description: "east/west indicator", searchPattern: $, substitution: { input: (t4) => h2[t4], output: (t4) => e7.abbreviatedDirections[r4[t4]] } }] : ("xy" === t3.name || "basemap" === t3.name) && (t3.coordinateSegments = [{ alias: "X", description: "easting", searchPattern: g5, substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: "Y", description: "northing", searchPattern: g5, substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }]), D2(i6)) {
      const e8 = a2 ? w3[i6] : m3[i6];
      t3.defaultPattern = e8, t3.currentPattern = e8;
    }
  });
}
function p4() {
  const t3 = new RegExp("N|S", "i"), e7 = new RegExp("E|W", "i");
  return [new _2({ name: "basemap", coordinateSegments: [{ alias: "X", description: "easting", searchPattern: u2, substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: "Y", description: "northing", searchPattern: u2, substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }], defaultPattern: "X, Y", viewModel: null }), new _2({ name: "dd", coordinateSegments: [{ alias: "Y", description: "degrees latitude", searchPattern: new RegExp(`\\d{1,2}[\\.|\\${s6}]?\\d*(?=\\D*?[N|S])`, "i"), substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: "N", description: "north/south indicator", searchPattern: t3 }, { alias: "X", description: "degrees longitude", searchPattern: new RegExp(`\\d{1,3}[\\.|\\${s6}]?\\d*(?=\\D*?[E|W|])`, "i"), substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: "E", description: "east/west indicator", searchPattern: e7 }], defaultPattern: `Y${o3}N, X${o3}E`, viewModel: null }), new _2({ name: "ddm", coordinateSegments: [{ alias: "Y", description: "degrees latitude", searchPattern: new RegExp("\\d{1,2}(?=.*?\\s+.*?[N|S])", "i"), substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: "A", description: "minutes latitude", searchPattern: new RegExp(`\\d{1,2}[\\.\\${s6}]?\\d*(?=.*?[N|S])`, "i"), substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: "N", description: "north/south indicator", searchPattern: t3 }, { alias: "X", description: "degrees longitude", searchPattern: new RegExp("\\d{1,3}(?=\\D*?\\s+.*?[E|W])", "i"), substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: "B", description: "minutes longitude", searchPattern: new RegExp(`\\d{1,2}[\\.|\\|${s6}]?\\d*(?=.*?[E|W])`, "i"), substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: "E", description: "east/west indicator", searchPattern: e7 }], defaultPattern: `Y${o3} A'N, X${o3} B'E`, viewModel: null }), new _2({ name: "dms", coordinateSegments: [{ alias: "Y", description: "degrees latitude", searchPattern: new RegExp("\\d{1,2}(?=.*?\\s+.*?[N|S])", "i"), substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: "A", description: "minutes latitude", searchPattern: new RegExp("\\d{1,2}(?=.*?[N|S])", "i"), substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: "B", description: "seconds latitude", searchPattern: new RegExp(`\\d{1,2}[\\.|\\${s6}]?\\d*(?=.*?[N|S])`, "i"), substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: "N", description: "north/south indicator", searchPattern: t3 }, { alias: "X", description: "degrees longitude", searchPattern: new RegExp("\\d{1,3}(?=.*?\\s+.*?[E|W])", "i"), substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: "C", description: "minutes longitude", searchPattern: new RegExp("\\d{1,2}(?=.*?[E|W])", "i"), substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: "D", description: "seconds longitude", searchPattern: new RegExp(`\\d{1,2}[\\.|\\${s6}]?\\d*(?=.*?[E|W])`, "i"), substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: "E", description: "east/west indicator", searchPattern: e7 }], defaultPattern: `Y${o3} A' B"N, X${o3} C' D"E`, viewModel: null }), new _2({ name: "xy", coordinateSegments: [{ alias: "X", description: "longitude", searchPattern: u2, substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }, { alias: "Y", description: "latitude", searchPattern: u2, substitution: { input: (t4) => b2(t4), output: (t4) => l(t4) } }], defaultPattern: `X${o3}, Y${o3}`, viewModel: null }), new _2({ name: "mgrs", coordinateSegments: [{ alias: "Z", description: "grid zone", searchPattern: /\d{1,2}\w|[abyz]/i }, { alias: "S", description: "grid square", searchPattern: /\w{2}/ }, { alias: "X", description: "easting", searchPattern: /^\d{5}(?=.?\d{5}$)|^\d{4}(?=.?\d{4}$)|^\d{3}(?=.?\d{3}$)|^\d{2}(?=.?\d{2}$)|^\d(?=.?\d$)/ }, { alias: "Y", description: "northing", searchPattern: /^\d{1,5}/ }], defaultPattern: "Z S X Y", viewModel: null }), new _2({ name: "usng", coordinateSegments: [{ alias: "Z", description: "grid zone", searchPattern: /\d{1,2}\w|[abyz]/i }, { alias: "S", description: "grid square", searchPattern: /\w{2}/ }, { alias: "X", description: "easting", searchPattern: /^\d{5}(?=.?\d{5}$)|^\d{4}(?=.?\d{4}$)|^\d{3}(?=.?\d{3}$)|^\d{2}(?=.?\d{2}$)|^\d(?=.?\d$)/ }, { alias: "Y", description: "northing", searchPattern: /^\d{1,5}/ }], defaultPattern: "Z S X Y", viewModel: null }), new _2({ name: "utm", coordinateSegments: [{ alias: "Z", description: "zone number", searchPattern: /\d{1,2}|[abyz]/i }, { alias: "B", description: "latitude band", searchPattern: /^\D/ }, { alias: "X", description: "easting", searchPattern: /\d{1,7}(?=\s*\d{7}$)/ }, { alias: "Y", description: "northing", searchPattern: /\d{1,7}/ }], defaultPattern: "ZB X Y", viewModel: null })];
}
function l(t3) {
  const i5 = t3.match(d2), n6 = i5 ? i5[0] : "", a2 = t3.includes(".") ? t3.split(".")[1].length : 0;
  return n6 + s4(Number(t3), { pattern: "###0.###", places: a2, round: -1 });
}
function b2(t3) {
  return p2(t3);
}

// node_modules/@arcgis/core/widgets/CoordinateConversion/CoordinateConversionViewModel.js
var P4 = { default: "default", crosshair: "crosshair" };
var j = new x([0, 0, 500]);
var S2 = "xy";
var F = ["mgrs", "utm", "usng", "dd", "dms", "ddm"];
var G3 = "esri__coordinateConversionWidgetState";
var H = { conversions: "conversions", formats: "formats", view: "view", viewChange: "view-change" };
var E3 = "esri/images/search/search-symbol-32.png";
var x2 = class extends t2(o.EventedAccessor) {
  constructor(t3) {
    super(t3), this._conversionPromise = null, this._locationGraphic = null, this._pointerCount = 0, this.conversions = new V(), this.formats = new V(), this.formatterAvailable = false, this.messages = null, this.filteredFormats = new V(), this.locationSymbol = new n4({ url: n3(E3), width: 24, height: 24 }), this.storageEnabled = true, this.storageType = "session", this.view = null, this._saveWidgetState = this._saveWidgetState.bind(this), this._handleFormatChange = this._handleFormatChange.bind(this), this._handleConversionChange = this._handleConversionChange.bind(this), this._handleViewChange = this._handleViewChange.bind(this), this._onClick = this._onClick.bind(this), this._onPointerMove = this._onPointerMove.bind(this), this._onPointerDown = this._onPointerDown.bind(this), this._onPointerUp = this._onPointerUp.bind(this);
  }
  initialize() {
    const t3 = async () => this.messages = await h("esri/widgets/CoordinateConversion/t9n/CoordinateConversion");
    this.formats.addMany(p4()), t3().then(() => {
      if (!this.destroyed && (c4(this.messages, this.formats), this.storageEnabled && this._loadWidgetState(), this.formats.forEach((t4) => {
        t4.viewModel = this, this.addHandles(d(() => t4.currentPattern, this._saveWidgetState), t4.name ?? "unnamed-format");
      }), this.addHandles(this.conversions.on("change", this._handleConversionChange), H.conversions), this.addHandles(this.formats.on("change", this._handleFormatChange), H.formats), this.addHandles(f(() => {
        t3().then(() => {
          c4(this.messages, this.formats);
        });
      })), k().then(() => {
        this.formatterAvailable = true;
      }).catch((t4) => {
        n.getLogger(this).error(new s("coordinate-conversion:projection-load-failed", "Failed to load the projection module.", { error: t4 })), this.formatterAvailable = false, this._filterFormatsAndConversions();
      }).then(() => this.addHandles(d(() => this.view, this._handleViewChange, P), H.viewChange)), 0 === this.conversions.length)) {
        const t4 = this.formats.find((t5) => t5.name === S2) || this.formats.at(0);
        this.conversions.add(new i3({ format: t4 }));
      }
    });
  }
  destroy() {
    this.removeHandles(), this._cleanUpView(this.view), this.view = null;
  }
  castConversions(t3) {
    return this._castToConversions(t3);
  }
  set currentLocation(t3) {
    this._set("currentLocation", t3), this._updateConversions();
  }
  get currentLocation() {
    return this._get("currentLocation") || null;
  }
  set mode(t3) {
    switch (t3) {
      case "capture":
        this.currentLocation = null, this._startCaptureMode(), this._set("mode", t3);
        break;
      case "live":
        this._startLiveMode(), this._set("mode", t3);
    }
  }
  get mode() {
    return this._get("mode") || "live";
  }
  get state() {
    const { messages: t3, view: e7 } = this, o4 = e7 == null ? void 0 : e7.ready;
    return t3 ? o4 ? "ready" : e7 ? "loading" : "disabled" : "disabled";
  }
  get storage() {
    const { storageType: t3 } = this;
    return "session" === t3 ? sessionStorage : localStorage;
  }
  get waitingForConversions() {
    return null != this._conversionPromise;
  }
  setLocation(t3) {
    var _a, _b;
    if (this._locationGraphic && ((_a = this.view) == null ? void 0 : _a.graphics.remove(this._locationGraphic)), !t3)
      return;
    const e7 = t3.clone();
    e7.hasZ && (e7.z = void 0), this._locationGraphic = new f4({ geometry: e7, symbol: this.locationSymbol }), (_b = this.view) == null ? void 0 : _b.graphics.add(this._locationGraphic);
  }
  async convert(t3, e7) {
    if (!u(e7))
      throw new s("coordinate-conversion:invalid-point", "Invalid point cannot be converted.", { point: e7 });
    return Promise.resolve().then(() => t3.convert(e7));
  }
  async goToLocation(t3) {
    var _a, _b, _c;
    const { view: e7 } = this;
    if (!e7)
      throw new s("coordinate-conversion:go-to-failed", "no view");
    const o4 = "3d" === e7.type ? e7.clippingArea : null, i5 = (_b = (_a = e7.map) == null ? void 0 : _a.basemap) == null ? void 0 : _b.baseLayers;
    if (o4 || (i5 == null ? void 0 : i5.length) > 0) {
      const e8 = o4 ?? ((_c = i5.at(0)) == null ? void 0 : _c.fullExtent);
      if (null != e8 && !e8.contains(t3))
        throw new s("coordinate-conversion:go-to-failed", "Point outside basemap extent.", { point: t3 });
    }
    return this.callGoTo({ target: t3 });
  }
  pause() {
    this.currentLocation = null, this.removeHandles(H.view), this.view && (this.view.cursor = P4.default, this._locationGraphic && this.view.graphics.remove(this._locationGraphic));
  }
  async previewConversion(t3, e7 = this.currentLocation || j) {
    return (await W(t3, e7)).displayCoordinate;
  }
  resume() {
    "capture" === this.mode ? this._startCaptureMode() : this._startLiveMode();
  }
  reverseConvert(t3, e7) {
    return e7.reverseConvert(t3);
  }
  async updateConversions(t3, e7) {
    if ("point" !== (e7 == null ? void 0 : e7.type))
      throw this._clearConversions(this.conversions), new s("coordinate-conversion:invalid-input-point", "Point is invalid, conversions cannot be updated.", { point: e7 });
    return this._convertMany(t3, e7);
  }
  _castToConversions(t3) {
    const e7 = new V();
    return t3.forEach((t4) => {
      let o4 = null;
      if (t4 instanceof i3)
        o4 = t4;
      else if ("string" == typeof t4) {
        const e8 = this.formats.find((e9) => e9.name === t4);
        e8 && (o4 = new i3({ format: e8 }));
      }
      o4 && e7.add(o4);
    }), e7;
  }
  _cleanUpView(t3) {
    t3 && (this._locationGraphic && t3.graphics.remove(this._locationGraphic), this.removeHandles(H.view), t3.cursor = P4.default);
  }
  _clearConversions(t3) {
    t3.forEach((t4) => {
      t4.position = { location: null, coordinate: null };
    });
  }
  async _convertMany(t3, e7) {
    return Promise.all(t3.map((t4) => W(t4, e7)));
  }
  _handleConversionChange(t3) {
    for (const e7 of t3.added) {
      const { format: t4 } = e7;
      t4 && (t4.viewModel = this, this.currentLocation && (this._set("waitingForConversions", true), this.convert(t4, this.currentLocation).then((t5) => {
        e7.position = t5, this._set("waitingForConversions", false);
      })));
    }
    this._saveWidgetState();
  }
  _handleFormatChange(t3) {
    t3.added.forEach((t4) => {
      this.addHandles(d(() => t4.currentPattern, this._saveWidgetState), t4.name ?? "unnamed-format"), t4.viewModel = this;
    }), t3.removed.forEach((t4) => {
      t4.viewModel = null;
      const e7 = this.conversions.filter((e8) => e8.format === t4);
      this.conversions.removeMany(e7), t4.name && this.removeHandles(t4.name);
    });
  }
  _loadWidgetState() {
    try {
      const t3 = JSON.parse(this.storage.getItem(G3));
      t3 && this._setWidgetState(t3);
    } catch (t3) {
      n.getLogger(this).error(new s("coordinate-conversion:invalid-session-storage-json", "Could not read from storage.", { error: t3 }));
    }
  }
  _startCaptureMode() {
    this.removeHandles(H.view), this.view && (this.view.cursor = P4.crosshair, this.currentLocation && this.setLocation(this.currentLocation), this.addHandles(this.view.on("click", this._onClick), H.view));
  }
  _startLiveMode() {
    this._pointerCount = 0, this.removeHandles(H.view), this.view && (this.view.cursor = P4.default, this._locationGraphic && this.view.graphics.remove(this._locationGraphic), this.addHandles([this.view.on("pointer-down", this._onPointerDown), this.view.on("pointer-up", this._onPointerUp), this.view.on("pointer-move", this._onPointerMove)], H.view));
  }
  _handleViewChange(t3, e7) {
    e7 && e7 !== t3 && this._cleanUpView(e7), t3 && ("capture" === this.mode ? this._startCaptureMode() : this._startLiveMode(), e7 && this._filterFormatsAndConversions());
  }
  _onClick(t3) {
    var _a;
    if (0 === t3.button) {
      const e7 = (_a = this.view) == null ? void 0 : _a.toMap(t3), o4 = e7 == null ? void 0 : e7.normalize();
      this.setLocation(o4), this.currentLocation = o4;
    }
  }
  _onPointerDown(t3) {
    var _a;
    const { pointerType: e7 } = t3;
    if (this._pointerCount++, ("touch" === e7 || "pen" === e7) && 1 === this._pointerCount) {
      const e8 = (_a = this.view) == null ? void 0 : _a.toMap(t3);
      this.currentLocation = e8 == null ? void 0 : e8.normalize();
    }
  }
  _onPointerMove(t3) {
    var _a;
    const { pointerType: e7 } = t3;
    if ("mouse" === e7 || 1 === this._pointerCount) {
      const e8 = (_a = this.view) == null ? void 0 : _a.toMap(t3);
      this.currentLocation = e8 == null ? void 0 : e8.normalize();
    }
  }
  _onPointerUp() {
    this._pointerCount--;
  }
  _setWidgetState(t3) {
    try {
      t3.formats.forEach((e7) => {
        const o4 = this.formats.find((t4) => t4.name === e7.name);
        o4 && t3.locale === c() && e7.currentPattern && (o4.currentPattern = e7.currentPattern), o4 && e7.index >= 0 && this.conversions.add(new i3({ format: o4 }));
      });
    } catch (e7) {
      n.getLogger(this).warn(new s("coordinate-conversion:session-storage-read-error", "Could not get widget state from stored JSON.", { error: e7 }));
    }
  }
  _saveWidgetState() {
    if (!this.storageEnabled)
      return;
    const t3 = this._toJSON();
    try {
      this.storage.setItem(G3, JSON.stringify({ formats: t3, locale: c() }));
    } catch (e7) {
      n.getLogger(this).error(new s("coordinate-conversion:local-storage-write-error", "Could not write to localStorage.", { error: e7 }));
    }
  }
  async _updateConversions() {
    try {
      await this.updateConversions(this.conversions.toArray(), this.currentLocation);
    } catch {
    }
  }
  _toJSON() {
    return this.formats.filter((t3) => {
      const e7 = t3.name;
      return "xy" === e7 || "basemap" === e7 || m(e7);
    }).map((t3) => ({ name: t3.name, currentPattern: t3.currentPattern, defaultPattern: t3.defaultPattern, index: this.conversions.findIndex((e7) => e7.format === t3) })).sort((t3, e7) => t3.index - e7.index).toArray();
  }
  _filterFormatsAndConversions() {
    const { formatterAvailable: t3, conversions: e7, formats: o4 } = this;
    t3 || this.addHandles(p(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.spatialReference;
    }, (t4) => {
      const i5 = t4.isWebMercator || t4.isWGS84, s7 = o4.filter((t5) => {
        const { name: e8 } = t5;
        return !!A(e8) || "xy" === e8 && !i5;
      }), r5 = this.filteredFormats.filter((t5) => "xy" === t5.name && i5 && !this.formats.includes(t5)), n6 = e7.filter((t5) => s7.includes(t5.format));
      o4.removeMany(s7), e7.removeMany(n6), this.filteredFormats.addMany(s7.filter((t5) => !this.filteredFormats.includes(t5))), o4.addMany(r5);
    }, { once: true, initial: true }), H.view);
  }
};
async function W(t3, e7) {
  var _a;
  try {
    t3.position = await ((_a = t3.format) == null ? void 0 : _a.convert(e7));
  } catch (o4) {
    t3.position = null;
  }
  return t3;
}
function A(t3) {
  return F.includes(t3);
}
e([y()], x2.prototype, "conversions", void 0), e([s2("conversions")], x2.prototype, "castConversions", null), e([y({ type: x })], x2.prototype, "currentLocation", null), e([y()], x2.prototype, "formats", void 0), e([y()], x2.prototype, "messages", void 0), e([y()], x2.prototype, "mode", null), e([y()], x2.prototype, "filteredFormats", void 0), e([y({ readOnly: true })], x2.prototype, "state", null), e([y()], x2.prototype, "locationSymbol", void 0), e([y({ readOnly: true, dependsOn: ["storageType"] })], x2.prototype, "storage", null), e([y()], x2.prototype, "storageEnabled", void 0), e([y()], x2.prototype, "storageType", void 0), e([y({ readOnly: true })], x2.prototype, "waitingForConversions", null), e([y()], x2.prototype, "view", void 0), x2 = e([a("esri.widgets.CoordinateConversion.CoordinateConversionViewModel")], x2);
var T3 = x2;

// node_modules/@arcgis/core/widgets/CoordinateConversion.js
var g4 = "esri-coordinate-conversion";
var b3 = { base: g4, captureMode: `${g4}--capture-mode`, noBasemap: `${g4}--no-basemap`, popup: `${g4}__popup`, clipboardPopup: `${g4}__clipboard-popup`, conversionList: `${g4}__conversion-list`, conversionRow: `${g4}__row`, coordDisplay: `${g4}__display`, expanded: `${g4}__conversions-view--expanded`, expandDown: `${g4}__conversions-view--expand-down`, expandUp: `${g4}__conversions-view--expand-up`, conversionsView: `${g4}__conversions-view`, primarySelect: `${g4}__select-primary`, rowSelect: `${g4}__select-row`, toolDisplay: `${g4}__tools`, modeToggle: `${g4}__mode-toggle`, rowButton: `${g4}__row-button`, backButton: `${g4}__back-button`, convertButton: `${g4}__button`, convertButtonSpan: `${g4}__convert-button-span`, coordinateInput: `${g4}__input-coordinate`, inputForm: `${g4}__input-form`, inputFormGroup: `${g4}__input-group`, rejectInput: `${g4}__input-coordinate--rejected`, sectionHeading: `${g4}__heading`, patternInput: `${g4}__pattern-input`, settings: `${g4}__settings`, settingsFormGroup: `${g4}__settings-group`, settingsFormGroupHorizontal: `${g4}__settings-group-horizontal`, previewCoordinate: `${g4}__preview-coordinate` };
var y2 = { settingsButton: true, inputButton: true, captureButton: true, expandButton: true };
var w2 = 750;
var C = 2500;
var f5 = class extends D {
  constructor(e7, t3) {
    super(e7, t3), this._popupMessage = null, this._popupTimeoutId = void 0, this._clipboardPopupTimeoutId = void 0, this._coordinateInput = null, this._badInput = false, this._goToEnabled = false, this._conversionFormat = null, this._settingsFormat = null, this._previewConversion = null, this._expanded = false, this._clipboardPopupVisible = false, this._popupVisible = false, this._settingsVisible = false, this._inputVisible = false, this.headingLevel = 4, this.messages = null, this.messagesCommon = null, this.orientation = "auto", this.viewModel = new T3(), this.visibleElements = { ...y2 };
  }
  get conversions() {
    return this.viewModel.conversions;
  }
  set conversions(e7) {
    this.viewModel.conversions = e7;
  }
  get currentLocation() {
    return this.viewModel.currentLocation;
  }
  set currentLocation(e7) {
    this.viewModel.currentLocation = e7;
  }
  get formats() {
    return this.viewModel.formats;
  }
  set formats(e7) {
    this.viewModel.formats = e7;
  }
  get goToOverride() {
    return this.viewModel.goToOverride;
  }
  set goToOverride(e7) {
    this.viewModel.goToOverride = e7;
  }
  get icon() {
    return "coordinate-system";
  }
  set icon(e7) {
    this._overrideIfSome("icon", e7);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e7) {
    this._overrideIfSome("label", e7);
  }
  get mode() {
    return this.viewModel.mode;
  }
  set mode(e7) {
    this.viewModel.mode = e7;
  }
  set multipleConversions(e7) {
    false === e7 && (this._expanded = false, this.conversions.splice(1, this.conversions.length - 1)), this._set("multipleConversions", e7);
  }
  get multipleConversions() {
    const e7 = this._get("multipleConversions");
    return "boolean" != typeof e7 || e7;
  }
  get locationSymbol() {
    return this.viewModel.locationSymbol;
  }
  set locationSymbol(e7) {
    this.viewModel.locationSymbol = e7;
  }
  get storageEnabled() {
    return this.viewModel.storageEnabled;
  }
  set storageEnabled(e7) {
    this.viewModel.storageEnabled = e7;
  }
  get storageType() {
    return this.viewModel.storageType;
  }
  set storageType(e7) {
    this.viewModel.storageType = e7;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e7) {
    this.viewModel.view = e7;
  }
  castVisibleElements(e7) {
    return { ...y2, ...e7 };
  }
  reverseConvert(e7, t3) {
    return this.viewModel.reverseConvert(e7, t3);
  }
  render() {
    var _a, _b;
    const e7 = (_a = this.viewModel) == null ? void 0 : _a.state, t3 = "disabled" === e7 ? n2("div", { key: "esri-coordinate__no-basemap" }, (_b = this.messages) == null ? void 0 : _b.noBasemap) : null, o4 = !t3 && this._inputVisible ? this._renderInputForm() : null, i5 = !t3 && this._settingsVisible ? this._renderSettings() : null, s7 = t3 || o4 || i5 ? null : this._renderConversionsView(), n6 = this._popupVisible ? this._renderPopup() : null, r5 = { [b3.captureMode]: "capture" === this.mode, [e3.disabled]: "loading" === e7, [b3.noBasemap]: "disabled" === e7 };
    return n2("div", { class: this.classes(b3.base, e3.widget, r5) }, n6, t3, s7, i5, o4);
  }
  _addConversion(e7) {
    const t3 = e7.target, o4 = x3(t3.options[t3.options.selectedIndex]), i5 = I(t3);
    if (null == o4 || null == i5)
      return;
    const s7 = new i3({ format: o4 });
    t3.options.selectedIndex = 0, i5 >= 0 ? (this.conversions.removeAt(i5), this.conversions.add(s7, i5)) : this.conversions.add(s7);
  }
  _findSettingsFormat() {
    return this._settingsFormat || this.conversions.reduceRight((e7, t3) => {
      const o4 = t3.format;
      return (o4 == null ? void 0 : o4.hasDisplayProperties) ? o4 : e7;
    }, null) || this.formats.find((e7) => e7.hasDisplayProperties);
  }
  _hidePopup() {
    this._popupTimeoutId && (clearTimeout(this._popupTimeoutId), this._popupTimeoutId = void 0), this._popupVisible = false, this._popupMessage = null, this.scheduleRender();
  }
  _hideClipboardPopup() {
    this._clipboardPopupTimeoutId && (clearTimeout(this._clipboardPopupTimeoutId), this._clipboardPopupTimeoutId = void 0), this._clipboardPopupVisible = false, this.scheduleRender();
  }
  _onConvertComplete() {
    this._inputVisible = false, this._coordinateInput.value = "";
  }
  _onCopy(e7) {
    var _a, _b;
    const t3 = (_a = T4(e7.currentTarget)) == null ? void 0 : _a.displayCoordinate;
    null != t3 && ((_b = e7.clipboardData) == null ? void 0 : _b.setData("text/plain", t3), this._showClipboardPopup(), e7.preventDefault());
  }
  _processUserInput(e7) {
    const i5 = i(e7, "key"), s7 = this.viewModel;
    if ("Enter" !== i5 && i5)
      this._badInput && (this._badInput = false);
    else {
      const e8 = x3(this._coordinateInput);
      if (!e8)
        return;
      const o4 = this._coordinateInput.value;
      this._reverseConvert(o4, e8).then((e9) => {
        "capture" === this.mode ? s7.resume() : this.mode = "capture", this.currentLocation = e9, s7.setLocation(e9), this._onConvertComplete();
      }).catch((e9) => {
        var _a;
        n.getLogger(this).error(e9), this._showPopup((_a = this.messages) == null ? void 0 : _a.invalidCoordinate), this._badInput = true;
      });
    }
  }
  async _reverseConvert(e7, o4) {
    const i5 = this.viewModel, s7 = await o4.reverseConvert(e7);
    return this._goToEnabled && s7 && i5.goToLocation(s7).catch((e8) => {
      var _a;
      n.getLogger(this).warn(e8), this._showPopup((_a = this.messages) == null ? void 0 : _a.locationOffBasemap);
    }), s7;
  }
  _setInputFormat(e7) {
    const t3 = e7.target, o4 = x3(t3[t3.options.selectedIndex]);
    null != o4 && (this._conversionFormat = o4);
  }
  _setPreviewConversion() {
    var _a, _b;
    const e7 = this._findSettingsFormat(), t3 = this.viewModel;
    if (e7) {
      const o4 = this.conversions.find((t4) => t4.format === e7);
      this._previewConversion = new i3({ format: e7, position: { location: this.currentLocation, coordinate: (_a = o4 == null ? void 0 : o4.position) == null ? void 0 : _a.coordinate } }), ((_b = this._previewConversion.position) == null ? void 0 : _b.coordinate) || t3.previewConversion(this._previewConversion);
    }
  }
  _setSettingsFormat(e7) {
    const t3 = e7.target, o4 = x3(t3[t3.options.selectedIndex]);
    null != o4 && (this._settingsFormat = o4, this._setPreviewConversion());
  }
  _showClipboardPopup() {
    this._clipboardPopupVisible ? clearTimeout(this._clipboardPopupTimeoutId) : this._clipboardPopupVisible = true, this.scheduleRender(), this._popupTimeoutId = setTimeout(() => {
      this._popupTimeoutId = void 0, this._hideClipboardPopup();
    }, w2);
  }
  _showPopup(e7, t3 = C) {
    this._popupMessage = e7, this._popupVisible ? clearTimeout(this._popupTimeoutId) : this._popupVisible = true, this.scheduleRender(), this._popupTimeoutId = setTimeout(() => {
      this._popupTimeoutId = void 0, this._hidePopup();
    }, t3);
  }
  _toggleGoTo() {
    this._goToEnabled = !this._goToEnabled;
  }
  _updateCurrentPattern(e7) {
    e7.stopPropagation();
    const t3 = e7.target, o4 = this._findSettingsFormat();
    o4 && (o4.currentPattern = t3.value);
  }
  _renderConversion(e7, t3) {
    const { messages: o4 } = this;
    if (!o4)
      return n2("li", null);
    const { format: i5 } = e7, s7 = (i5 == null ? void 0 : i5.label) ?? "", n6 = `${this.id}__list-item-${t3}`, r5 = `${s7} ${o4.conversionOutputSuffix}`, a2 = 0 === t3, l2 = a2 || this._expanded, d3 = a2 ? this._renderFirstConversion(e7) : this._renderTools(t3, e7, n6), u3 = a2 && !e7.displayCoordinate ? o4.noLocation : e7.displayCoordinate, c5 = n2("div", { "aria-label": u3, class: b3.coordDisplay, "data-conversion": e7, role: "listitem", tabIndex: 0, title: u3 ?? "" }, u3), h2 = this._renderOptions(this.formats.filter((e8) => e8 !== i5));
    return l2 ? n2("li", { "aria-label": r5, class: b3.conversionRow, id: n6, key: e7, role: "group", tabIndex: 0, title: r5 }, n2("select", { "aria-controls": n6, "aria-label": o4.selectFormat, bind: this, class: this.classes(e3.select, b3.rowSelect), "data-index": t3, onchange: this._addConversion, title: o4.selectFormat }, n2("option", { "aria-label": s7, selected: true, title: s7 }, s7.toUpperCase()), h2), c5, d3) : null;
  }
  _renderCopyButton(e7) {
    const t3 = this._clipboardPopupVisible && this._renderClipboardPopup(), { messagesCommon: o4 } = this;
    return o4 ? n2("li", { "aria-label": o4.copy, bind: this, class: this.classes(e3.widgetButton, b3.rowButton), "data-conversion": e7, onclick: this._copyCoordinateOutput, oncopy: this._onCopy, onkeydown: this._copyCoordinateOutput, role: "button", tabIndex: 0, title: o4.copy }, t3, n2("span", { "aria-hidden": "true", class: i2.duplicate })) : n2("li", null);
  }
  _renderFirstConversion(e7) {
    const t3 = this.id, o4 = { [i2.down]: !this._expanded, [i2.up]: this._expanded }, { messages: i5, messagesCommon: s7, multipleConversions: n6, visibleElements: r5 } = this;
    if (!s7 || !i5)
      return n2("ul", null);
    const a2 = "live" === this.mode ? i5.captureMode : i5.liveMode, l2 = this._expanded ? s7.collapse : s7.expand, d3 = e7.displayCoordinate && "capture" === this.mode ? this._renderCopyButton(e7) : null, c5 = n6 && r5.expandButton && n2("li", { "aria-controls": `${t3}__${b3.conversionList}`, "aria-label": l2, bind: this, class: e3.widgetButton, key: "esri-coordinate-conversion__expand-button", onclick: this._toggleExpand, onkeydown: this._toggleExpand, role: "button", tabIndex: 0, title: l2 }, n2("span", { "aria-hidden": "true", class: this.classes(o4) })), h2 = !n6 && r5.captureButton && n2("li", { "aria-label": a2, bind: this, class: this.classes(e3.widgetButton, b3.modeToggle), key: "esri-coordinate-conversion__mode-toggle", onclick: this._toggleMode, onkeydown: this._toggleMode, role: "button", tabIndex: 0, title: a2 }, n2("span", { "aria-hidden": "true", class: i2.mapPin }));
    return n2("ul", { class: b3.toolDisplay }, d3, c5, h2);
  }
  _renderInputForm() {
    const e7 = this._conversionFormat || this.conversions.at(0).format, t3 = this.formats.findIndex((t4) => t4.name === (e7 == null ? void 0 : e7.name)), o4 = this.id, i5 = `${o4}__${b3.coordinateInput}`, s7 = `${o4}__${b3.coordinateInput}__header`, n6 = this._renderOptions(this.formats, true, t3), r5 = { [b3.rejectInput]: this._badInput }, { messages: a2, messagesCommon: l2, headingLevel: u3 } = this;
    return l2 && a2 ? n2("div", { "aria-labelledby": s7, class: b3.inputForm, key: "esri-coordinate-conversion__input-form", role: "search" }, n2("div", { class: b3.sectionHeading }, n2("div", { "aria-label": l2.back, bind: this, class: this.classes(e3.widgetButton, b3.backButton), onclick: this._toggleInputVisibility, onkeydown: this._toggleInputVisibility, role: "button", tabIndex: 0, title: l2.back }, this._renderBackIcon()), n2(e4, { class: e3.heading, id: s7, level: u3 }, a2.inputCoordTitle)), n2("div", { class: b3.inputFormGroup }, n2("select", { "aria-controls": i5, "aria-label": a2.selectFormat, bind: this, class: this.classes(e3.select, b3.rowSelect), onchange: this._setInputFormat, title: a2.selectFormat }, n6), n2("input", { afterCreate: L, "aria-labelledby": s7, "aria-required": "true", bind: this, class: this.classes(b3.coordinateInput, e3.input, r5), "data-format": e7, "data-node-ref": "_coordinateInput", id: i5, onkeydown: this._processUserInput, placeholder: a2.inputCoordTitle, role: "textbox", spellcheck: false, title: a2.inputCoordTitle, type: "text" })), n2("div", { class: b3.inputFormGroup }, n2("label", { "aria-label": a2.goTo }, n2("input", { bind: this, checked: this._goToEnabled, onclick: this._toggleGoTo, title: a2.goTo, type: "checkbox" }), a2.goTo), n2("button", { "aria-label": a2.convert, bind: this, class: this.classes(b3.convertButton, e3.button), onclick: this._processUserInput, title: a2.convert, type: "button" }, n2("span", { class: b3.convertButtonSpan }, a2.convert)))) : n2("div", null);
  }
  _renderConversionsView() {
    const { messages: e7 } = this;
    if (!e7)
      return n2("div", null);
    const t3 = `${this.id}__${b3.conversionList}`, o4 = this._renderPrimaryTools(), i5 = this._renderOptions(this.formats), s7 = this.conversions.map((e8, t4) => this._renderConversion(e8, t4)).toArray(), n6 = this._expanded ? n2("div", { class: b3.conversionRow }, n2("select", { "aria-controls": t3, "aria-label": e7.addConversion, bind: this, class: this.classes(e3.select, b3.primarySelect), "data-index": -1, onchange: this._addConversion, title: e7.addConversion }, n2("option", { disabled: true, selected: true, value: "" }, e7.addConversion), i5), o4) : null, r5 = { [b3.expanded]: this._expanded, [b3.expandUp]: "expand-up" === this.orientation, [b3.expandDown]: "expand-down" === this.orientation };
    return n2("div", { class: this.classes(b3.conversionsView, r5), key: "esri-coordinate-conversion__main-view" }, n2("ul", { "aria-expanded": this._expanded ? "true" : "false", class: b3.conversionList, id: t3 }, s7), n6);
  }
  _renderOptions(e7, t3, o4) {
    var _a;
    const i5 = this.conversions.at(0), s7 = (_a = i5.format) == null ? void 0 : _a.name;
    return e7.map((e8, n6) => {
      const r5 = !(t3 || !i5) && (s7 === e8.name || this.conversions.map((e9) => {
        var _a2;
        return (_a2 = e9.format) == null ? void 0 : _a2.name;
      }).includes(e8.name));
      return n2("option", { "aria-label": e8.label, "data-format": e8, disabled: r5, key: e8.name ?? "unnamed-format", selected: n6 === o4, value: e8.label }, e8.label.toUpperCase());
    }).toArray();
  }
  _renderPopup() {
    return n2("div", { class: b3.popup, role: "alert" }, this._popupMessage);
  }
  _renderClipboardPopup() {
    const { messages: e7 } = this;
    return e7 ? n2("div", { class: this.classes(b3.popup, b3.clipboardPopup), role: "alert" }, e7.copySuccessMessage) : n2("div", null);
  }
  _renderPrimaryTools() {
    const { messages: e7, visibleElements: t3 } = this;
    if (!e7)
      return n2("ul", null);
    const o4 = "live" === this.mode ? e7.captureMode : e7.liveMode, i5 = t3.inputButton && n2("li", { bind: this, class: e3.widgetButton, onclick: this._toggleInputVisibility, onkeydown: this._toggleInputVisibility, role: "button", tabIndex: 0, title: e7.inputCoordTitle }, n2("span", { "aria-hidden": "true", class: i2.edit })), s7 = t3.captureButton && n2("li", { bind: this, class: this.classes(e3.widgetButton, b3.modeToggle), onclick: this._toggleMode, onkeydown: this._toggleMode, role: "button", tabIndex: 0, title: o4 }, n2("span", { "aria-hidden": "true", class: i2.mapPin })), n6 = t3.settingsButton && n2("li", { bind: this, class: e3.widgetButton, onclick: this._toggleSettingsVisibility, onkeydown: this._toggleSettingsVisibility, role: "button", tabIndex: 0, title: e7.settingsTitle }, n2("span", { "aria-hidden": "true", class: i2.settings2 }));
    return n2("ul", { class: b3.toolDisplay }, i5, s7, n6);
  }
  _renderSettings() {
    var _a;
    const e7 = this.id, t3 = `${e7}__${b3.patternInput}`, o4 = `${e7}__${b3.patternInput}__header`, i5 = `${e7}__${b3.previewCoordinate}`, s7 = this.formats.filter((e8) => e8.hasDisplayProperties), n6 = this._findSettingsFormat(), r5 = n6 ? s7.indexOf(n6) : -1, a2 = this._renderOptions(s7, true, r5), l2 = n6 == null ? void 0 : n6.currentPattern, { messages: c5, messagesCommon: h2, headingLevel: m3 } = this;
    return h2 && c5 ? n2("div", { "aria-labelledby": o4, class: b3.settings, key: b3.settings }, n2("div", { class: b3.sectionHeading }, n2("div", { bind: this, class: this.classes(e3.widgetButton, b3.backButton), onclick: this._toggleSettingsVisibility, onkeydown: this._toggleSettingsVisibility, role: "button", tabIndex: 0, title: h2.back }, this._renderBackIcon()), n2(e4, { class: e3.heading, id: o4, level: m3 }, c5.settingsTitle)), n2("div", { class: b3.settingsFormGroup }, n2("label", { for: t3 }, c5.changeCoordinateDisplay), n2("select", { "aria-label": c5.selectFormat, bind: this, class: e3.select, onchange: this._setSettingsFormat, title: c5.selectFormat }, a2), n2("div", { class: b3.settingsFormGroupHorizontal }, n2("input", { "aria-controls": i5, bind: this, class: this.classes(b3.patternInput, e3.input), id: t3, oninput: this._updateCurrentPattern, spellcheck: false, title: c5.changeCoordinateDisplay, type: "text", value: l2 }), n2("div", { "aria-controls": t3, bind: this, class: e3.widgetButton, onclick: this._setDefaultPattern, onkeydown: this._setDefaultPattern, role: "button", tabIndex: 0, title: c5.defaultPattern }, n2("span", { "aria-hidden": "true", class: i2.refresh })))), n2("div", { class: b3.settingsFormGroup }, n2("label", null, h2.preview, n2("div", { class: b3.previewCoordinate, id: i5, tabIndex: 0 }, (_a = this._previewConversion) == null ? void 0 : _a.displayCoordinate)))) : n2("div", null);
  }
  _renderBackIcon() {
    return n2("span", { "aria-hidden": "true", class: v(this.container) ? i2.rightArrow : i2.leftArrows });
  }
  _renderTools(e7, t3, o4) {
    const i5 = t3.displayCoordinate && "capture" === this.mode ? this._renderCopyButton(t3) : null, { messages: s7 } = this;
    return s7 ? n2("ul", { class: b3.toolDisplay, role: "listitem" }, i5, n2("li", { "aria-controls": o4, "aria-label": s7.removeConversion, bind: this, class: this.classes(e3.widgetButton, b3.rowButton), "data-index": e7, key: `${o4}__${e3.widgetButton}`, onclick: this._removeConversion, onkeydown: this._removeConversion, role: "button", tabIndex: 0, title: s7.removeConversion }, n2("span", { "aria-hidden": "true", class: i2.close }))) : n2("ul", null);
  }
  _copyCoordinateOutput(e7) {
    const t3 = e7.target;
    if (!("createTextRange" in document.body)) {
      const e8 = window.getSelection(), o4 = document.createRange();
      o4.selectNodeContents(t3), e8 == null ? void 0 : e8.removeAllRanges(), e8 == null ? void 0 : e8.addRange(o4);
    }
    document.execCommand("copy");
  }
  _removeConversion(e7) {
    const t3 = I(e7.currentTarget);
    null != t3 && this.conversions.removeAt(t3);
  }
  _setDefaultPattern(e7) {
    e7.stopPropagation();
    const t3 = this._findSettingsFormat();
    t3 && (t3.currentPattern = t3.defaultPattern);
  }
  _toggleExpand() {
    this._expanded = !this._expanded;
  }
  _toggleInputVisibility() {
    this._inputVisible = !this._inputVisible, this._popupVisible && this._hidePopup(), this._inputVisible ? this.viewModel.pause() : this.viewModel.resume();
  }
  _toggleMode() {
    this.mode = "live" === this.mode ? "capture" : "live";
  }
  _toggleSettingsVisibility() {
    this._settingsVisible = !this._settingsVisible, this._popupVisible && this._hidePopup(), this._settingsVisible ? (this._setPreviewConversion(), this.viewModel.pause()) : this.viewModel.resume();
  }
};
function I(e7) {
  return e7["data-index"];
}
function x3(e7) {
  return e7["data-format"];
}
function T4(e7) {
  return e7["data-conversion"];
}
e([y()], f5.prototype, "conversions", null), e([y()], f5.prototype, "currentLocation", null), e([y()], f5.prototype, "formats", null), e([y()], f5.prototype, "goToOverride", null), e([y()], f5.prototype, "headingLevel", void 0), e([y()], f5.prototype, "icon", null), e([y()], f5.prototype, "label", null), e([y(), e2("esri/widgets/CoordinateConversion/t9n/CoordinateConversion")], f5.prototype, "messages", void 0), e([y(), e2("esri/t9n/common")], f5.prototype, "messagesCommon", void 0), e([y()], f5.prototype, "mode", null), e([y()], f5.prototype, "orientation", void 0), e([y()], f5.prototype, "multipleConversions", null), e([y()], f5.prototype, "locationSymbol", null), e([y()], f5.prototype, "storageEnabled", null), e([y()], f5.prototype, "storageType", null), e([y()], f5.prototype, "view", null), e([y({ type: T3 })], f5.prototype, "viewModel", void 0), e([y()], f5.prototype, "visibleElements", void 0), e([s2("visibleElements")], f5.prototype, "castVisibleElements", null), e([t()], f5.prototype, "_copyCoordinateOutput", null), e([t()], f5.prototype, "_removeConversion", null), e([t()], f5.prototype, "_setDefaultPattern", null), e([t()], f5.prototype, "_toggleExpand", null), e([t()], f5.prototype, "_toggleInputVisibility", null), e([t()], f5.prototype, "_toggleMode", null), e([t()], f5.prototype, "_toggleSettingsVisibility", null), f5 = e([a("esri.widgets.CoordinateConversion")], f5);
var P5 = f5;
export {
  P5 as default
};
//# sourceMappingURL=CoordinateConversion-EHQMUA6I.js.map
