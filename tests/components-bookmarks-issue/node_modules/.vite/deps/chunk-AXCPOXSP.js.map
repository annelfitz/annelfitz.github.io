{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/esm/src/utils/number.ts", "../../@esri/calcite-components/dist/esm/src/utils/locale.ts"],
  "sourcesContent": ["import { numberKeys } from \"./key\";\nimport { NumberStringFormat } from \"./locale\";\n\nconst unnecessaryDecimal = new RegExp(`\\\\${\".\"}(0+)?$`);\nconst trailingZeros = new RegExp(\"0+$\");\n\n// adopted from https://stackoverflow.com/a/66939244\nexport class BigDecimal {\n  value: bigint;\n\n  // BigInt(\"-0\").toString() === \"0\" which removes the minus sign when typing numbers like -0.1\n  isNegative: boolean;\n\n  // Configuration: constants\n  static DECIMALS = 100; // number of decimals on all instances\n\n  static ROUNDED = true; // numbers are truncated (false) or rounded (true)\n\n  static SHIFT = BigInt(\"1\" + \"0\".repeat(BigDecimal.DECIMALS)); // derived constant\n\n  constructor(input: string | BigDecimal) {\n    if (input instanceof BigDecimal) {\n      return input;\n    }\n    const [integers, decimals] = expandExponentialNumberString(input).split(\".\").concat(\"\");\n    this.value =\n      BigInt(integers + decimals.padEnd(BigDecimal.DECIMALS, \"0\").slice(0, BigDecimal.DECIMALS)) +\n      BigInt(BigDecimal.ROUNDED && decimals[BigDecimal.DECIMALS] >= \"5\");\n\n    this.isNegative = input.charAt(0) === \"-\";\n  }\n\n  static _divRound = (dividend: bigint, divisor: bigint): BigDecimal =>\n    BigDecimal.fromBigInt(\n      dividend / divisor + (BigDecimal.ROUNDED ? ((dividend * BigInt(2)) / divisor) % BigInt(2) : BigInt(0)),\n    );\n\n  static fromBigInt = (bigint: bigint): BigDecimal =>\n    Object.assign(Object.create(BigDecimal.prototype), { value: bigint, isNegative: bigint < BigInt(0) });\n\n  getIntegersAndDecimals(): { integers: string; decimals: string } {\n    const s = this.value\n      .toString()\n      .replace(\"-\", \"\")\n      .padStart(BigDecimal.DECIMALS + 1, \"0\");\n    const integers = s.slice(0, -BigDecimal.DECIMALS);\n    const decimals = s.slice(-BigDecimal.DECIMALS).replace(trailingZeros, \"\");\n    return { integers, decimals };\n  }\n\n  toString(): string {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    return `${this.isNegative ? \"-\" : \"\"}${integers}${decimals.length ? \".\" + decimals : \"\"}`;\n  }\n\n  formatToParts(formatter: NumberStringFormat): Intl.NumberFormatPart[] {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    const parts = formatter.numberFormatter.formatToParts(BigInt(integers));\n    this.isNegative && parts.unshift({ type: \"minusSign\", value: formatter.minusSign });\n\n    if (decimals.length) {\n      parts.push({ type: \"decimal\", value: formatter.decimal });\n      decimals.split(\"\").forEach((char: string) => parts.push({ type: \"fraction\", value: char }));\n    }\n\n    return parts;\n  }\n\n  format(formatter: NumberStringFormat): string {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    const integersFormatted = `${this.isNegative ? formatter.minusSign : \"\"}${formatter.numberFormatter.format(\n      BigInt(integers),\n    )}`;\n    const decimalsFormatted = decimals.length\n      ? `${formatter.decimal}${decimals\n          .split(\"\")\n          .map((char: string) => formatter.numberFormatter.format(Number(char)))\n          .join(\"\")}`\n      : \"\";\n    return `${integersFormatted}${decimalsFormatted}`;\n  }\n\n  add(n: string): BigDecimal {\n    return BigDecimal.fromBigInt(this.value + new BigDecimal(n).value);\n  }\n\n  subtract(n: string): BigDecimal {\n    return BigDecimal.fromBigInt(this.value - new BigDecimal(n).value);\n  }\n\n  multiply(n: string): BigDecimal {\n    return BigDecimal._divRound(this.value * new BigDecimal(n).value, BigDecimal.SHIFT);\n  }\n\n  divide(n: string): BigDecimal {\n    return BigDecimal._divRound(this.value * BigDecimal.SHIFT, new BigDecimal(n).value);\n  }\n}\n\nexport function isValidNumber(numberString: string): boolean {\n  return !(!numberString || isNaN(Number(numberString)));\n}\n\nexport function parseNumberString(numberString?: string): string {\n  if (!numberString || !stringContainsNumbers(numberString)) {\n    return \"\";\n  }\n\n  return sanitizeExponentialNumberString(numberString, (nonExpoNumString: string): string => {\n    let containsDecimal = false;\n    const result = nonExpoNumString\n      .split(\"\")\n      .filter((value, i) => {\n        if (value.match(/\\./g) && !containsDecimal) {\n          containsDecimal = true;\n          return true;\n        }\n        if (value.match(/\\-/g) && i === 0) {\n          return true;\n        }\n        return numberKeys.includes(value);\n      })\n      .join(\"\");\n    return isValidNumber(result) ? new BigDecimal(result).toString() : \"\";\n  });\n}\n\n// regex for number sanitization\nconst allLeadingZerosOptionallyNegative = /^([-0])0+(?=\\d)/;\nconst decimalOnlyAtEndOfString = /(?!^\\.)\\.$/;\nconst allHyphensExceptTheStart = /(?!^-)-/g;\nconst isNegativeDecimalOnlyZeros = /^-\\b0\\b\\.?0*$/;\nconst hasTrailingDecimalZeros = /0*$/;\n\nexport const sanitizeNumberString = (numberString: string): string =>\n  sanitizeExponentialNumberString(numberString, (nonExpoNumString) => {\n    const sanitizedValue = nonExpoNumString\n      .replace(allHyphensExceptTheStart, \"\")\n      .replace(decimalOnlyAtEndOfString, \"\")\n      .replace(allLeadingZerosOptionallyNegative, \"$1\");\n    return isValidNumber(sanitizedValue)\n      ? isNegativeDecimalOnlyZeros.test(sanitizedValue)\n        ? sanitizedValue\n        : getBigDecimalAsString(sanitizedValue)\n      : nonExpoNumString;\n  });\n\nexport function getBigDecimalAsString(sanitizedValue: string): string {\n  const sanitizedValueDecimals = sanitizedValue.split(\".\")[1];\n  const value = new BigDecimal(sanitizedValue).toString();\n  const [bigDecimalValueInteger, bigDecimalValueDecimals] = value.split(\".\");\n\n  return sanitizedValueDecimals && bigDecimalValueDecimals !== sanitizedValueDecimals\n    ? `${bigDecimalValueInteger}.${sanitizedValueDecimals}`\n    : value;\n}\n\nexport function sanitizeExponentialNumberString(numberString: string, func: (s: string) => string): string {\n  if (!numberString) {\n    return numberString;\n  }\n\n  const firstE = numberString.toLowerCase().indexOf(\"e\") + 1;\n\n  if (!firstE) {\n    return func(numberString);\n  }\n\n  return numberString\n    .replace(/[eE]*$/g, \"\")\n    .substring(0, firstE)\n    .concat(numberString.slice(firstE).replace(/[eE]/g, \"\"))\n    .split(/[eE]/)\n    .map((section, i) => (i === 1 ? func(section.replace(/\\./g, \"\")) : func(section)))\n    .join(\"e\")\n    .replace(/^e/, \"1e\");\n}\n\n/**\n * Converts an exponential notation numberString into decimal notation.\n * BigInt doesn't support exponential notation, so this is required to maintain precision\n *\n * @param {string} numberString - pre-validated exponential or decimal number\n * @returns {string} numberString in decimal notation\n */\nexport function expandExponentialNumberString(numberString: string): string {\n  const exponentialParts = numberString.split(/[eE]/);\n  if (exponentialParts.length === 1) {\n    return numberString;\n  }\n\n  const number = +numberString;\n  if (Number.isSafeInteger(number)) {\n    return `${number}`;\n  }\n\n  const isNegative = numberString.charAt(0) === \"-\";\n  const magnitude = +exponentialParts[1];\n  const decimalParts = exponentialParts[0].split(\".\");\n  const integers = (isNegative ? decimalParts[0].substring(1) : decimalParts[0]) || \"\";\n  const decimals = decimalParts[1] || \"\";\n\n  const shiftDecimalLeft = (integers: string, magnitude: number): string => {\n    const magnitudeDelta = Math.abs(magnitude) - integers.length;\n    const leftPaddedZeros = magnitudeDelta > 0 ? `${\"0\".repeat(magnitudeDelta)}${integers}` : integers;\n    const shiftedDecimal = `${leftPaddedZeros.slice(0, magnitude)}${\".\"}${leftPaddedZeros.slice(magnitude)}`;\n    return shiftedDecimal;\n  };\n\n  const shiftDecimalRight = (decimals: string, magnitude: number): string => {\n    const rightPaddedZeros =\n      magnitude > decimals.length ? `${decimals}${\"0\".repeat(magnitude - decimals.length)}` : decimals;\n    const shiftedDecimal = `${rightPaddedZeros.slice(0, magnitude)}${\".\"}${rightPaddedZeros.slice(magnitude)}`;\n    return shiftedDecimal;\n  };\n\n  const expandedNumberString =\n    magnitude > 0\n      ? `${integers}${shiftDecimalRight(decimals, magnitude)}`\n      : `${shiftDecimalLeft(integers, magnitude)}${decimals}`;\n\n  return `${isNegative ? \"-\" : \"\"}${expandedNumberString.charAt(0) === \".\" ? \"0\" : \"\"}${expandedNumberString\n    .replace(unnecessaryDecimal, \"\")\n    .replace(allLeadingZerosOptionallyNegative, \"\")}`;\n}\n\nfunction stringContainsNumbers(string: string): boolean {\n  return numberKeys.some((number) => string.includes(number));\n}\n\n/**\n * Adds localized trailing decimals zero values to the number string.\n * BigInt conversion to string removes the trailing decimal zero values (Ex: 1.000 is returned as 1). This method helps adding them back.\n *\n * @param {string} localizedValue - localized number string value\n * @param {string} value - current value in the input field\n * @param {NumberStringFormat} formatter - numberStringFormatter instance to localize the number value\n * @returns {string} localized number string value\n */\nexport function addLocalizedTrailingDecimalZeros(\n  localizedValue: string,\n  value: string,\n  formatter: NumberStringFormat,\n): string {\n  const decimals = value.split(\".\")[1];\n  if (decimals) {\n    const trailingDecimalZeros = decimals.match(hasTrailingDecimalZeros)[0];\n    if (\n      trailingDecimalZeros &&\n      formatter.delocalize(localizedValue).length !== value.length &&\n      decimals.indexOf(\"e\") === -1\n    ) {\n      const decimalSeparator = formatter.decimal;\n      localizedValue = !localizedValue.includes(decimalSeparator)\n        ? `${localizedValue}${decimalSeparator}`\n        : localizedValue;\n      return localizedValue.padEnd(localizedValue.length + trailingDecimalZeros.length, formatter.localize(\"0\"));\n    }\n  }\n  return localizedValue;\n}\n", "import { closestElementCrossShadowBoundary, containsCrossShadowBoundary } from \"./dom\";\nimport { BigDecimal, isValidNumber, sanitizeExponentialNumberString } from \"./number\";\nimport { createObserver } from \"./observers\";\n\nexport const defaultLocale = \"en\";\n\nexport const t9nLocales = [\n  \"ar\",\n  \"bg\",\n  \"bs\",\n  \"ca\",\n  \"cs\",\n  \"da\",\n  \"de\",\n  \"el\",\n  defaultLocale,\n  \"es\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"he\",\n  \"hr\",\n  \"hu\",\n  \"id\",\n  \"it\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"lv\",\n  \"no\",\n  \"nl\",\n  \"pl\",\n  \"pt-BR\",\n  \"pt-PT\",\n  \"ro\",\n  \"ru\",\n  \"sk\",\n  \"sl\",\n  \"sr\",\n  \"sv\",\n  \"th\",\n  \"tr\",\n  \"uk\",\n  \"vi\",\n  \"zh-CN\",\n  \"zh-HK\",\n  \"zh-TW\",\n];\n\nexport const locales = [\n  \"ar\",\n  \"bg\",\n  \"bs\",\n  \"ca\",\n  \"cs\",\n  \"da\",\n  \"de\",\n  \"de-AT\",\n  \"de-CH\",\n  \"el\",\n  defaultLocale,\n  \"en-AU\",\n  \"en-CA\",\n  \"en-GB\",\n  \"es\",\n  \"es-MX\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"fr-CH\",\n  \"he\",\n  \"hi\",\n  \"hr\",\n  \"hu\",\n  \"id\",\n  \"it\",\n  \"it-CH\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"lv\",\n  \"mk\",\n  \"no\",\n  \"nl\",\n  \"pl\",\n  \"pt\",\n  \"pt-PT\",\n  \"ro\",\n  \"ru\",\n  \"sk\",\n  \"sl\",\n  \"sr\",\n  \"sv\",\n  \"th\",\n  \"tr\",\n  \"uk\",\n  \"vi\",\n  \"zh-CN\",\n  \"zh-HK\",\n  \"zh-TW\",\n];\n\nexport const numberingSystems = [\"arab\", \"arabext\", \"latn\"] as const;\n\nexport const supportedLocales = [...new Set([...t9nLocales, ...locales])] as const;\n\nexport type NumberingSystem = (typeof numberingSystems)[number];\n\nexport type SupportedLocale = (typeof supportedLocales)[number];\n\nconst isNumberingSystemSupported = (numberingSystem: string): numberingSystem is NumberingSystem =>\n  numberingSystems.includes(numberingSystem as NumberingSystem);\n\nconst browserNumberingSystem = new Intl.NumberFormat().resolvedOptions().numberingSystem;\n\n// for consistent browser behavior, we normalize numberingSystem to prevent the browser-inferred value\n// see https://github.com/Esri/calcite-design-system/issues/3079#issuecomment-1168964195 for more info\nexport const defaultNumberingSystem =\n  browserNumberingSystem === \"arab\" || !isNumberingSystemSupported(browserNumberingSystem)\n    ? \"latn\"\n    : browserNumberingSystem;\n\nexport const getSupportedNumberingSystem = (numberingSystem: string): NumberingSystem =>\n  isNumberingSystemSupported(numberingSystem) ? numberingSystem : defaultNumberingSystem;\n\n/**\n * Gets the locale that best matches the context.\n *\n * @param locale – the BCP 47 locale code\n * @param context - specifies whether the locale code should match in the context of CLDR or T9N (translation)\n */\nexport function getSupportedLocale(locale: string, context: \"cldr\" | \"t9n\" = \"cldr\"): SupportedLocale {\n  const contextualLocales = context === \"cldr\" ? locales : t9nLocales;\n\n  if (!locale) {\n    return defaultLocale;\n  }\n\n  if (contextualLocales.includes(locale)) {\n    return locale;\n  }\n\n  locale = locale.toLowerCase();\n\n  // we support both 'nb' and 'no' (BCP 47) for Norwegian but only `no` has corresponding bundle\n  if (locale === \"nb\") {\n    return \"no\";\n  }\n\n  // we use `pt-BR` as it will have the same translations as `pt`, which has no corresponding bundle\n  if (context === \"t9n\" && locale === \"pt\") {\n    return \"pt-BR\";\n  }\n\n  if (locale.includes(\"-\")) {\n    locale = locale.replace(/(\\w+)-(\\w+)/, (_match, language, region) => `${language}-${region.toUpperCase()}`);\n\n    if (!contextualLocales.includes(locale)) {\n      locale = locale.split(\"-\")[0];\n    }\n  }\n\n  // we can `zh-CN` as base translation for chinese locales which has no corresponding bundle.\n  if (locale === \"zh\") {\n    return \"zh-CN\";\n  }\n\n  if (!contextualLocales.includes(locale)) {\n    console.warn(\n      `Translations for the \"${locale}\" locale are not available and will fall back to the default, English (en).`,\n    );\n    return defaultLocale;\n  }\n\n  return locale;\n}\n\n/**\n * This interface is for components that need to determine locale from the lang attribute.\n */\nexport interface LocalizedComponent {\n  el: HTMLElement;\n\n  /**\n   * Used to store the effective locale to avoid multiple lookups.\n   *\n   * This is an internal property and should:\n   *\n   * - use the `@State` decorator\n   * - be initialized to \"\"\n   *\n   * Components should watch this prop to ensure messages are updated.\n   *\n   * @Watch(\"effectiveLocale\")\n   * effectiveLocaleChange(): void {\n   *   updateMessages(this, this.effectiveLocale);\n   * }\n   */\n  effectiveLocale: string;\n}\n\nconst connectedComponents = new Set<LocalizedComponent>();\n\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback` before any logic that depends on locale\n *\n * @param component\n */\nexport function connectLocalized(component: LocalizedComponent): void {\n  updateEffectiveLocale(component);\n\n  if (connectedComponents.size === 0) {\n    mutationObserver?.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"lang\"],\n      subtree: true,\n    });\n  }\n\n  connectedComponents.add(component);\n}\n\n/**\n * This is only exported for components that implemented the now deprecated `locale` prop.\n *\n * Do not use this utils for new components.\n *\n * @param component\n */\nexport function updateEffectiveLocale(component: LocalizedComponent): void {\n  component.effectiveLocale = getLocale(component);\n}\n\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectLocalized(component: LocalizedComponent): void {\n  connectedComponents.delete(component);\n\n  if (connectedComponents.size === 0) {\n    mutationObserver.disconnect();\n  }\n}\n\nconst mutationObserver = createObserver(\"mutation\", (records) => {\n  records.forEach((record) => {\n    const el = record.target as HTMLElement;\n\n    connectedComponents.forEach((component) => {\n      const inUnrelatedSubtree = !containsCrossShadowBoundary(el, component.el);\n\n      if (inUnrelatedSubtree) {\n        return;\n      }\n\n      const closestLangEl = closestElementCrossShadowBoundary<HTMLElement>(component.el, \"[lang]\");\n\n      if (!closestLangEl) {\n        component.effectiveLocale = defaultLocale;\n        return;\n      }\n\n      const closestLang = closestLangEl.lang;\n\n      component.effectiveLocale =\n        // user set lang=\"\" means unknown language, so we use default\n        closestLangEl.hasAttribute(\"lang\") && closestLang === \"\" ? defaultLocale : closestLang;\n    });\n  });\n});\n\n/**\n * This util helps resolve a component's locale.\n * It will also fall back on the deprecated `locale` if a component implemented this previously.\n *\n * @param component\n */\nfunction getLocale(component: LocalizedComponent): string {\n  return (\n    component.el.lang ||\n    closestElementCrossShadowBoundary<HTMLElement>(component.el, \"[lang]\")?.lang ||\n    document.documentElement.lang ||\n    defaultLocale\n  );\n}\n\nexport interface NumberStringFormatOptions extends Intl.NumberFormatOptions {\n  numberingSystem: NumberingSystem;\n  locale: string;\n}\n\n/**\n * This util formats and parses numbers for localization\n */\nexport class NumberStringFormat {\n  /**\n   * The actual group separator for the specified locale.\n   * White-space group separators are changed to the non-breaking space (nbsp) unicode character.\n   * so we replace them with a normal <SPACE>.\n   */\n  private _actualGroup: string;\n\n  /** the corrected group separator */\n  private _group: string;\n\n  get group(): string {\n    return this._group;\n  }\n\n  private _decimal: string;\n\n  get decimal(): string {\n    return this._decimal;\n  }\n\n  private _minusSign: string;\n\n  get minusSign(): string {\n    return this._minusSign;\n  }\n\n  private _digits: Array<string>;\n\n  get digits(): Array<string> {\n    return this._digits;\n  }\n\n  private _getDigitIndex;\n\n  private _numberFormatter: Intl.NumberFormat;\n\n  get numberFormatter(): Intl.NumberFormat {\n    return this._numberFormatter;\n  }\n\n  private _numberFormatOptions: NumberStringFormatOptions;\n\n  get numberFormatOptions(): NumberStringFormatOptions {\n    return this._numberFormatOptions;\n  }\n\n  /**\n   * numberFormatOptions needs to be set before localize/delocalize is called to ensure the options are up to date\n   */\n  set numberFormatOptions(options: NumberStringFormatOptions) {\n    options.locale = getSupportedLocale(options?.locale);\n    options.numberingSystem = getSupportedNumberingSystem(options?.numberingSystem);\n\n    if (\n      // No need to create the formatter if `locale` and `numberingSystem`\n      // are the default values and `numberFormatOptions` has not been set\n      (!this._numberFormatOptions &&\n        options.locale === defaultLocale &&\n        options.numberingSystem === defaultNumberingSystem &&\n        // don't skip initialization if any options besides locale/numberingSystem are set\n        Object.keys(options).length === 2) ||\n      // cache formatter by only recreating when options change\n      JSON.stringify(this._numberFormatOptions) === JSON.stringify(options)\n    ) {\n      return;\n    }\n\n    this._numberFormatOptions = options;\n\n    this._numberFormatter = new Intl.NumberFormat(\n      this._numberFormatOptions.locale,\n      this._numberFormatOptions as Intl.NumberFormatOptions,\n    );\n\n    this._digits = [\n      ...new Intl.NumberFormat(this._numberFormatOptions.locale, {\n        useGrouping: false,\n        numberingSystem: this._numberFormatOptions.numberingSystem,\n      } as Intl.NumberFormatOptions).format(9876543210),\n    ].reverse();\n\n    const index = new Map(this._digits.map((d, i) => [d, i]));\n\n    // numberingSystem is parsed to return consistent decimal separator across browsers.\n    const parts = new Intl.NumberFormat(this._numberFormatOptions.locale, {\n      numberingSystem: this._numberFormatOptions.numberingSystem,\n    } as Intl.NumberFormatOptions).formatToParts(-12345678.9);\n\n    this._actualGroup = parts.find((d) => d.type === \"group\").value;\n    // change whitespace group separators to the unicode non-breaking space (nbsp)\n    this._group = this._actualGroup.trim().length === 0 || this._actualGroup == \" \" ? \"\\u00A0\" : this._actualGroup;\n    this._decimal = parts.find((d) => d.type === \"decimal\").value;\n    this._minusSign = parts.find((d) => d.type === \"minusSign\").value;\n    this._getDigitIndex = (d: string) => index.get(d);\n  }\n\n  delocalize = (numberString: string): string =>\n    // For performance, (de)localization is skipped if the formatter isn't initialized.\n    // In order to localize/delocalize, e.g. when lang/numberingSystem props are not default values,\n    // `numberFormatOptions` must be set in a component to create and cache the formatter.\n    this._numberFormatOptions\n      ? sanitizeExponentialNumberString(numberString, (nonExpoNumString: string): string =>\n          nonExpoNumString\n            .replace(new RegExp(`[${this._minusSign}]`, \"g\"), \"-\")\n            .replace(new RegExp(`[${this._group}]`, \"g\"), \"\")\n            .replace(new RegExp(`[${this._decimal}]`, \"g\"), \".\")\n            .replace(new RegExp(`[${this._digits.join(\"\")}]`, \"g\"), this._getDigitIndex),\n        )\n      : numberString;\n\n  localize = (numberString: string): string =>\n    this._numberFormatOptions\n      ? sanitizeExponentialNumberString(numberString, (nonExpoNumString: string): string =>\n          isValidNumber(nonExpoNumString.trim())\n            ? new BigDecimal(nonExpoNumString.trim())\n                .format(this)\n                .replace(new RegExp(`[${this._actualGroup}]`, \"g\"), this._group)\n            : nonExpoNumString,\n        )\n      : numberString;\n}\n\nexport const numberStringFormatter = new NumberStringFormat();\n\nexport type LocaleDateTimeOptionKey = string;\n\n/**\n * Exported for testing purposes only.\n *\n * @internal\n */\nexport let dateTimeFormatCache: Map<LocaleDateTimeOptionKey, Intl.DateTimeFormat>;\n\n/**\n * Used to ensure all cached formats are for the same locale.\n *\n * @internal\n */\nlet previousLocaleUsedForCaching: string;\n\n/**\n * Generates a cache key for date time format lookups.\n *\n * @internal\n */\nfunction buildDateTimeFormatCacheKey(options: Intl.DateTimeFormatOptions = {}): string {\n  return Object.entries(options)\n    .sort(([key1], [key2]) => key1.localeCompare(key2))\n    .map((keyValue) => `${keyValue[0]}-${keyValue[1]}`)\n    .flat()\n    .join(\":\");\n}\n\n/**\n * Returns an instance of Intl.DateTimeFormat and reuses it if requested with the same locale and options.\n *\n * **Note**: the cache will be cleared if a different locale is provided\n *\n * @internal\n */\nexport function getDateTimeFormat(locale: string, options?: Intl.DateTimeFormatOptions): Intl.DateTimeFormat {\n  locale = getSupportedLocale(locale);\n\n  if (!dateTimeFormatCache) {\n    dateTimeFormatCache = new Map();\n  }\n\n  if (previousLocaleUsedForCaching !== locale) {\n    dateTimeFormatCache.clear();\n    previousLocaleUsedForCaching = locale;\n  }\n\n  const key = buildDateTimeFormatCacheKey(options);\n  const cached = dateTimeFormatCache.get(key);\n\n  if (cached) {\n    return cached;\n  }\n\n  const format = new Intl.DateTimeFormat(locale, options);\n  dateTimeFormatCache.set(key, format);\n\n  return format;\n}\n"],
  "mappings": "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",
  "names": ["integers", "magnitude", "decimals"]
}
