import {
  a as a2
} from "./chunk-YY2VB3AE.js";
import {
  p
} from "./chunk-H6NTWZSO.js";
import {
  d
} from "./chunk-LMO6NZJA.js";
import {
  a as a3,
  e as e2,
  i,
  t
} from "./chunk-A5QTLE4Y.js";
import {
  o as o2
} from "./chunk-BOAEEYBE.js";
import {
  o
} from "./chunk-YOPMY6TS.js";
import {
  r
} from "./chunk-VIN55KNF.js";
import {
  s as s2
} from "./chunk-IOB3DJMR.js";
import {
  n as n2
} from "./chunk-RUN6MNXL.js";
import {
  f
} from "./chunk-SBL4URUW.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a,
  u2 as u
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import {
  n2 as n,
  s
} from "./chunk-7RBRCL6S.js";

// node_modules/@arcgis/core/renderers/visualVariables/support/VisualVariableLegendOptions.js
var t2;
var p2 = t2 = class extends p {
  constructor() {
    super(...arguments), this.showLegend = null;
  }
  clone() {
    return new t2({ title: this.title, showLegend: this.showLegend });
  }
};
e([y({ type: Boolean, json: { write: true } })], p2.prototype, "showLegend", void 0), p2 = t2 = e([a("esri.renderers.visualVariables.support.VisualVariableLegendOptions")], p2);
var i2 = p2;

// node_modules/@arcgis/core/renderers/visualVariables/VisualVariable.js
var a4 = new n2({ colorInfo: "color", transparencyInfo: "opacity", rotationInfo: "rotation", sizeInfo: "size" });
var u2 = class extends f {
  constructor(e3) {
    super(e3), this.index = null, this.type = null, this.field = null, this.valueExpression = null, this.valueExpressionTitle = null, this.legendOptions = null;
  }
  castField(e3) {
    return null == e3 ? e3 : "function" == typeof e3 ? (n.getLogger(this).error(".field: field must be a string value"), null) : u(e3);
  }
  get arcadeRequired() {
    return !!this.valueExpression;
  }
  clone() {
  }
  getAttributeHash() {
    return `${this.type}-${this.field}-${this.valueExpression}`;
  }
};
e([y()], u2.prototype, "index", void 0), e([y({ type: a4.apiValues, readOnly: true, json: { read: a4.read, write: a4.write } })], u2.prototype, "type", void 0), e([y({ type: String, json: { write: true } })], u2.prototype, "field", void 0), e([s2("field")], u2.prototype, "castField", null), e([y({ type: String, json: { write: true } })], u2.prototype, "valueExpression", void 0), e([y({ type: String, json: { write: true } })], u2.prototype, "valueExpressionTitle", void 0), e([y({ readOnly: true })], u2.prototype, "arcadeRequired", null), e([y({ type: i2, json: { write: true } })], u2.prototype, "legendOptions", void 0), u2 = e([a("esri.renderers.visualVariables.VisualVariable")], u2);
var c = u2;

// node_modules/@arcgis/core/renderers/visualVariables/support/SizeVariableLegendOptions.js
var t3;
var i3 = t3 = class extends i2 {
  constructor() {
    super(...arguments), this.customValues = null;
  }
  clone() {
    var _a;
    return new t3({ title: this.title, showLegend: this.showLegend, customValues: (_a = this.customValues) == null ? void 0 : _a.slice(0) });
  }
};
e([y({ type: [Number], json: { write: true } })], i3.prototype, "customValues", void 0), i3 = t3 = e([a("esri.renderers.visualVariables.support.SizeVariableLegendOptions")], i3);
var a5 = i3;

// node_modules/@arcgis/core/renderers/visualVariables/SizeVariable.js
var z;
var v = new n2({ width: "width", depth: "depth", height: "height", widthAndDepth: "width-and-depth", all: "all" });
var w = new n2({ unknown: "unknown", inch: "inches", foot: "feet", yard: "yards", mile: "miles", "nautical-mile": "nautical-miles", millimeter: "millimeters", centimeter: "centimeters", decimeter: "decimeters", meter: "meters", kilometer: "kilometers", "decimal-degree": "decimal-degrees" });
function g(e3) {
  if (null != e3)
    return "string" == typeof e3 || "number" == typeof e3 ? o2(e3) : "size" === e3.type ? e2(e3) ? e3 : (delete (e3 = { ...e3 }).type, new V(e3)) : void 0;
}
function f2(e3, t4, i4) {
  if ("object" != typeof e3)
    return e3;
  const s3 = new V();
  return s3.read(e3, i4), s3;
}
var V = z = class extends c {
  constructor(e3) {
    super(e3), this.axis = null, this.legendOptions = null, this.normalizationField = null, this.scaleBy = null, this.target = null, this.type = "size", this.useSymbolValue = null, this.valueExpression = null, this.valueRepresentation = null, this.valueUnit = null;
  }
  get cache() {
    return { ipData: this._interpolateData(), hasExpression: !!this.valueExpression, compiledFunc: null, isScaleDriven: null != this.valueExpression && d.test(this.valueExpression) };
  }
  set index(e3) {
    e2(this.maxSize) && (this.maxSize.index = `visualVariables[${e3}].maxSize`), e2(this.minSize) && (this.minSize.index = `visualVariables[${e3}].minSize`), this._set("index", e3);
  }
  get inputValueType() {
    return t(this);
  }
  set maxDataValue(e3) {
    e3 && this.stops && (n.getLogger(this).warn("cannot set maxDataValue when stops is not null."), e3 = null), this._set("maxDataValue", e3);
  }
  set maxSize(e3) {
    e3 && this.stops && (n.getLogger(this).warn("cannot set maxSize when stops is not null."), e3 = null), this._set("maxSize", e3);
  }
  castMaxSize(e3) {
    return g(e3);
  }
  readMaxSize(e3, t4, i4) {
    return f2(e3, t4, i4);
  }
  set minDataValue(e3) {
    e3 && this.stops && (n.getLogger(this).warn("cannot set minDataValue when stops is not null."), e3 = null), this._set("minDataValue", e3);
  }
  set minSize(e3) {
    e3 && this.stops && (n.getLogger(this).warn("cannot set minSize when stops is not null."), e3 = null), this._set("minSize", e3);
  }
  castMinSize(e3) {
    return g(e3);
  }
  readMinSize(e3, t4, i4) {
    return f2(e3, t4, i4);
  }
  get arcadeRequired() {
    return !!this.valueExpression || (null != this.minSize && "object" == typeof this.minSize && this.minSize.arcadeRequired || null != this.maxSize && "object" == typeof this.maxSize && this.maxSize.arcadeRequired);
  }
  set stops(e3) {
    null == this.minDataValue && null == this.maxDataValue && null == this.minSize && null == this.maxSize ? e3 && Array.isArray(e3) && (e3 = e3.filter((e4) => !!e4)).sort((e4, t4) => e4.value - t4.value) : e3 && (n.getLogger(this).warn("cannot set stops when one of minDataValue, maxDataValue, minSize or maxSize is not null."), e3 = null), this._set("stops", e3);
  }
  get transformationType() {
    return a3(this, this.inputValueType);
  }
  readValueExpression(e3, t4) {
    return e3 || t4.expression && "$view.scale";
  }
  writeValueExpressionWebScene(e3, i4, s3, r2) {
    if ("$view.scale" === e3) {
      if (r2 == null ? void 0 : r2.messages) {
        const e4 = this.index, i5 = "string" == typeof e4 ? e4 : `visualVariables[${e4}]`;
        r2.messages.push(new s("property:unsupported", this.type + "VisualVariable.valueExpression = '$view.scale' is not supported in Web Scene. Please remove this property to save the Web Scene.", { instance: this, propertyName: i5 + ".valueExpression", context: r2 }));
      }
    } else
      i4[s3] = e3;
  }
  readValueUnit(e3) {
    return e3 ? w.read(e3) : null;
  }
  clone() {
    var _a, _b;
    return new z({ axis: this.axis, field: this.field, valueExpression: this.valueExpression, valueExpressionTitle: this.valueExpressionTitle, maxDataValue: this.maxDataValue, maxSize: e2(this.maxSize) ? this.maxSize.clone() : this.maxSize, minDataValue: this.minDataValue, minSize: e2(this.minSize) ? this.minSize.clone() : this.minSize, normalizationField: this.normalizationField, stops: (_a = this.stops) == null ? void 0 : _a.map((e3) => e3.clone()), target: this.target, useSymbolValue: this.useSymbolValue, valueRepresentation: this.valueRepresentation, valueUnit: this.valueUnit, legendOptions: (_b = this.legendOptions) == null ? void 0 : _b.clone() });
  }
  flipSizes() {
    if (this.transformationType === i.ClampedLinear) {
      const { minSize: e3, maxSize: t4 } = this;
      return this.minSize = t4, this.maxSize = e3, this;
    }
    if (this.transformationType === i.Stops) {
      const e3 = this.stops;
      if (!e3)
        return this;
      const t4 = e3.map((e4) => e4.size).reverse(), i4 = e3.length;
      for (let s3 = 0; s3 < i4; s3++)
        e3[s3].size = t4[s3];
      return this;
    }
    return this;
  }
  getAttributeHash() {
    return `${super.getAttributeHash()}-${this.target}-${this.normalizationField}`;
  }
  _interpolateData() {
    var _a;
    return (_a = this.stops) == null ? void 0 : _a.map((e3) => e3.value || 0);
  }
};
e([y({ readOnly: true })], V.prototype, "cache", null), e([y({ type: v.apiValues, json: { type: v.jsonValues, origins: { "web-map": { read: false } }, read: v.read, write: v.write } })], V.prototype, "axis", void 0), e([y()], V.prototype, "index", null), e([y({ type: String, readOnly: true })], V.prototype, "inputValueType", null), e([y({ type: a5, json: { write: true } })], V.prototype, "legendOptions", void 0), e([y({ type: Number, value: null, json: { write: true } })], V.prototype, "maxDataValue", null), e([y({ type: Number, value: null, json: { write: true } })], V.prototype, "maxSize", null), e([s2("maxSize")], V.prototype, "castMaxSize", null), e([o("maxSize")], V.prototype, "readMaxSize", null), e([y({ type: Number, value: null, json: { write: true } })], V.prototype, "minDataValue", null), e([y({ type: Number, value: null, json: { write: true } })], V.prototype, "minSize", null), e([s2("minSize")], V.prototype, "castMinSize", null), e([o("minSize")], V.prototype, "readMinSize", null), e([y({ type: String, json: { write: true } })], V.prototype, "normalizationField", void 0), e([y({ readOnly: true })], V.prototype, "arcadeRequired", null), e([y({ type: String })], V.prototype, "scaleBy", void 0), e([y({ type: [a2], value: null, json: { write: true } })], V.prototype, "stops", null), e([y({ type: ["outline"], json: { write: true } })], V.prototype, "target", void 0), e([y({ type: String, readOnly: true })], V.prototype, "transformationType", null), e([y({ type: ["size"], json: { type: ["sizeInfo"] } })], V.prototype, "type", void 0), e([y({ type: Boolean, json: { write: true, origins: { "web-map": { read: false } } } })], V.prototype, "useSymbolValue", void 0), e([y({ type: String, json: { write: true } })], V.prototype, "valueExpression", void 0), e([o("valueExpression", ["valueExpression", "expression"])], V.prototype, "readValueExpression", null), e([r("web-scene", "valueExpression")], V.prototype, "writeValueExpressionWebScene", null), e([y({ type: ["radius", "diameter", "area", "width", "distance"], json: { write: true } })], V.prototype, "valueRepresentation", void 0), e([y({ type: w.apiValues, json: { write: w.write, origins: { "web-map": { read: false }, "web-scene": { write: true }, "portal-item": { write: true } } } })], V.prototype, "valueUnit", void 0), e([o("valueUnit")], V.prototype, "readValueUnit", null), V = z = e([a("esri.renderers.visualVariables.SizeVariable")], V);
var b = V;

export {
  c,
  a5 as a,
  b
};
//# sourceMappingURL=chunk-PC66NY33.js.map
