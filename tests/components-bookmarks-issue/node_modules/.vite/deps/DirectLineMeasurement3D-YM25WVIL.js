import {
  _
} from "./chunk-7ZELJY3T.js";
import {
  u as u3
} from "./chunk-BSG4F4MT.js";
import "./chunk-PE5CJM6H.js";
import {
  M as M2
} from "./chunk-IZ6ZAGHW.js";
import {
  e as e8
} from "./chunk-RYFDUIZK.js";
import {
  e as e7
} from "./chunk-TIIBPE7N.js";
import {
  e as e6
} from "./chunk-EPOP3OQ6.js";
import "./chunk-QKSE6KAV.js";
import {
  a as a3
} from "./chunk-XWTZSPU2.js";
import "./chunk-YSRCOU2A.js";
import {
  O
} from "./chunk-53QTUAOU.js";
import "./chunk-UAITPI2I.js";
import {
  f as f2
} from "./chunk-FKMPOIQR.js";
import "./chunk-FQUIQQYI.js";
import {
  e as e5
} from "./chunk-CTY3WTET.js";
import "./chunk-EZMIPVQL.js";
import "./chunk-7IFMSG3H.js";
import {
  A as A2,
  F as F2,
  G as G2
} from "./chunk-RYDZOUU4.js";
import "./chunk-5SOMZZNP.js";
import "./chunk-7G5NQR7Q.js";
import "./chunk-CA3XJ2RX.js";
import "./chunk-JASPUPTW.js";
import "./chunk-HWBFFWYY.js";
import {
  o
} from "./chunk-23GKO7D7.js";
import "./chunk-E22EEEDE.js";
import {
  c as c2
} from "./chunk-KDHW2KXU.js";
import {
  e as e4,
  ee
} from "./chunk-6FMD7BOV.js";
import {
  f
} from "./chunk-TKMRXVLK.js";
import {
  h as h2,
  p as p2
} from "./chunk-6SB3EFZU.js";
import "./chunk-WOKVMRAD.js";
import "./chunk-3W2U3CD4.js";
import "./chunk-3ENNELTC.js";
import {
  E2 as E,
  P as P3,
  p
} from "./chunk-LEFES6LS.js";
import "./chunk-AEAYH74I.js";
import "./chunk-ZKV5BWYX.js";
import "./chunk-E6JAHJ2A.js";
import "./chunk-SVNPPUZN.js";
import "./chunk-6BCJJDKK.js";
import {
  t
} from "./chunk-UANQJYHL.js";
import "./chunk-DNFHDQRJ.js";
import {
  N
} from "./chunk-TO6UIATU.js";
import "./chunk-IB7OUIEK.js";
import "./chunk-WCBCYPOZ.js";
import "./chunk-3FTSPLRV.js";
import "./chunk-OMRW2J7M.js";
import "./chunk-UXQH3C5A.js";
import "./chunk-YYI7TRI3.js";
import "./chunk-RQW2N53A.js";
import "./chunk-LHVWC4RW.js";
import "./chunk-GN2OLKIL.js";
import "./chunk-LMCIQOBX.js";
import "./chunk-4VVENLLF.js";
import "./chunk-VUHMQQ6M.js";
import {
  x as x2
} from "./chunk-6GQQIJM7.js";
import "./chunk-PAH4PVZY.js";
import "./chunk-5WKN6K5Z.js";
import "./chunk-WCBHO6BH.js";
import {
  a as a2
} from "./chunk-V7NVRGBC.js";
import "./chunk-KCZGCTYM.js";
import "./chunk-3YZBQBZ5.js";
import "./chunk-RFBA77K3.js";
import "./chunk-46T3D2EU.js";
import "./chunk-RYF27IO3.js";
import "./chunk-2GT6KC2O.js";
import "./chunk-5MKTGTC4.js";
import "./chunk-7UDCRD5C.js";
import "./chunk-B3GKRGWX.js";
import "./chunk-FN7LLNVA.js";
import "./chunk-BR3PF5YD.js";
import "./chunk-QCUK7T7Y.js";
import "./chunk-2NDIVJST.js";
import {
  st
} from "./chunk-SPYHZ6ZW.js";
import "./chunk-637XZX4A.js";
import "./chunk-PMFQ2A2V.js";
import "./chunk-HHAESKQ6.js";
import "./chunk-5INQRMFY.js";
import "./chunk-XP3ABGGF.js";
import "./chunk-TACIE3AK.js";
import "./chunk-6LT23NJG.js";
import "./chunk-4FXZDEEP.js";
import "./chunk-KYKKN5I4.js";
import "./chunk-4MJOJUFR.js";
import {
  n as n3
} from "./chunk-PTIWH4S7.js";
import "./chunk-L3GUCBXG.js";
import "./chunk-BEXFYHUM.js";
import "./chunk-K3DEHPDR.js";
import "./chunk-I6RS7YIS.js";
import "./chunk-XTY645DH.js";
import "./chunk-BHOYA5LV.js";
import "./chunk-PMQ5HDZI.js";
import {
  e as e3
} from "./chunk-EAAEPSBY.js";
import "./chunk-I7LDU4W6.js";
import "./chunk-KWLN46JY.js";
import "./chunk-7KNPDPFB.js";
import "./chunk-M6P775BS.js";
import "./chunk-J5F4VILS.js";
import "./chunk-KSBIR2KG.js";
import "./chunk-XVQGALI7.js";
import "./chunk-XFQIXBHG.js";
import "./chunk-MVSN2HAN.js";
import "./chunk-7A5N7G2Z.js";
import "./chunk-J54I3TB7.js";
import "./chunk-OE52KVBM.js";
import "./chunk-L577YNYZ.js";
import "./chunk-GL5TSVQL.js";
import "./chunk-FD7NY4JS.js";
import "./chunk-TYYN3C37.js";
import "./chunk-OBABKQ6S.js";
import "./chunk-4GGEQMYI.js";
import "./chunk-A47N2JLN.js";
import "./chunk-ZPC74XHC.js";
import "./chunk-IVGJRGD2.js";
import "./chunk-JA2AO4PC.js";
import "./chunk-MTLWPXQD.js";
import "./chunk-ZEMG7GKC.js";
import "./chunk-ECIXBYOQ.js";
import "./chunk-5MQ4HAUX.js";
import "./chunk-XIWETS2Q.js";
import "./chunk-FOCTPJDR.js";
import "./chunk-2DATALUO.js";
import "./chunk-QFKFOAJ6.js";
import "./chunk-LOPMLCHC.js";
import "./chunk-JIR2YP6A.js";
import "./chunk-LANUNBDP.js";
import "./chunk-JBF6CULO.js";
import "./chunk-DRCNNCTI.js";
import "./chunk-MKOOEINB.js";
import "./chunk-JKOHBDRD.js";
import "./chunk-MDSRD3WV.js";
import "./chunk-3DFMDDMO.js";
import "./chunk-4BCSYJOQ.js";
import "./chunk-GMUCR2DJ.js";
import "./chunk-HBRJJENW.js";
import "./chunk-VHY5K2VE.js";
import "./chunk-6ENXMQPD.js";
import "./chunk-FV43HSGW.js";
import "./chunk-ZR7OV2EH.js";
import "./chunk-U76EZJUZ.js";
import "./chunk-MEEG7XMI.js";
import "./chunk-LJULTBAY.js";
import "./chunk-FD4DXBZA.js";
import "./chunk-LO5UMUY4.js";
import "./chunk-YKIGDW5O.js";
import {
  c
} from "./chunk-XDDNM6BM.js";
import "./chunk-7QHIE4SQ.js";
import "./chunk-6MGK5WBT.js";
import "./chunk-HSOVRETF.js";
import "./chunk-CPZW2LMK.js";
import "./chunk-QR7J3YDY.js";
import "./chunk-GO2OGJDG.js";
import "./chunk-UYMREM3D.js";
import "./chunk-4YGBWYMD.js";
import "./chunk-JTUYA5FE.js";
import "./chunk-UNTQATE2.js";
import "./chunk-5YY6NZNY.js";
import "./chunk-YUWVLORR.js";
import "./chunk-7MYYCSEB.js";
import "./chunk-ESK2YRQM.js";
import "./chunk-QIEXJLRX.js";
import "./chunk-UNTPHF5R.js";
import "./chunk-YJFPDMSR.js";
import "./chunk-FFG7BDAP.js";
import {
  h
} from "./chunk-I4SHZ6P5.js";
import "./chunk-QYDOVVH7.js";
import "./chunk-YSXT2SWC.js";
import "./chunk-YH3SFFF7.js";
import "./chunk-JBU54P54.js";
import "./chunk-FMS3CZY7.js";
import "./chunk-H7T5AB2S.js";
import "./chunk-WKVHVZW2.js";
import "./chunk-KSZESDGM.js";
import "./chunk-CHJMCUAV.js";
import "./chunk-5P74D2TG.js";
import "./chunk-33LWZO2E.js";
import "./chunk-YT66FIGM.js";
import {
  b
} from "./chunk-3IDXRFXE.js";
import "./chunk-RLZYC2LS.js";
import "./chunk-WEER6QME.js";
import "./chunk-TXLJQAAN.js";
import "./chunk-YF5E2R37.js";
import "./chunk-R4SGP2EA.js";
import "./chunk-IRL6OOVK.js";
import "./chunk-3AIILHI5.js";
import "./chunk-QJRGTKPN.js";
import "./chunk-VIH3KDZO.js";
import "./chunk-LA365FE7.js";
import "./chunk-SA77Z3WI.js";
import "./chunk-6MBDB46F.js";
import "./chunk-D56W4LPT.js";
import "./chunk-BKOYOJBG.js";
import "./chunk-7JR6S3WL.js";
import "./chunk-CJNDQ2LH.js";
import "./chunk-B4E4X2TN.js";
import "./chunk-HS6YI5DU.js";
import "./chunk-CDBOQCLE.js";
import "./chunk-RSRUEM5U.js";
import "./chunk-HFJMEXIX.js";
import "./chunk-VYSGSKHB.js";
import "./chunk-DGJJJ2DD.js";
import "./chunk-UAFQMHYI.js";
import "./chunk-IDPLBNJX.js";
import "./chunk-ZHAZR5C3.js";
import "./chunk-P4MNTMCZ.js";
import "./chunk-BSPKLAHD.js";
import "./chunk-VS6AHHIY.js";
import "./chunk-GPWQGIYV.js";
import "./chunk-WZJNHZ6H.js";
import "./chunk-XMYPMIYH.js";
import "./chunk-FQLGRQKL.js";
import "./chunk-DRC4XSYG.js";
import {
  D as D2,
  F,
  G,
  P as P2
} from "./chunk-XGTCDM4C.js";
import "./chunk-LGMX4E7L.js";
import "./chunk-W5ALAOW2.js";
import "./chunk-FHDHOWK5.js";
import "./chunk-LQBHIBXV.js";
import "./chunk-42DUJ2CX.js";
import "./chunk-B35SNV2V.js";
import "./chunk-Z2F5OKVA.js";
import "./chunk-UQA6M3KF.js";
import "./chunk-GLF3KRAL.js";
import "./chunk-ZLQTPFTL.js";
import "./chunk-WIVZ7SMV.js";
import "./chunk-O76UVYOO.js";
import "./chunk-QCMUK3QA.js";
import "./chunk-HZSGATFT.js";
import "./chunk-KNMQQRV7.js";
import "./chunk-N5GQOIDP.js";
import "./chunk-NFB6O77E.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-ERD6I7QP.js";
import "./chunk-Z3NX5DTX.js";
import "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import "./chunk-SCHTG6ZQ.js";
import "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import {
  u as u2
} from "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-WMUEII2O.js";
import "./chunk-6QNF7OHN.js";
import "./chunk-6AQIVLDN.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import {
  n as n2
} from "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import {
  D,
  e2
} from "./chunk-RGCWZ2KZ.js";
import {
  n
} from "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import "./chunk-2SDMYJDE.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import {
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import {
  M
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  A,
  P,
  d as d2
} from "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  d
} from "./chunk-JGDJR5EV.js";
import {
  u
} from "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/analysis/DirectLineMeasurementAnalysis.js
var n4 = class extends c {
  constructor(t2) {
    super(t2), this.type = "direct-line-measurement", this.startPoint = null, this.endPoint = null, this.unit = null;
  }
  get requiredPropertiesForEditing() {
    return [this.startPoint, this.endPoint];
  }
  clear() {
    this.startPoint = null, this.endPoint = null;
  }
};
e([y({ type: ["direct-line-measurement"] })], n4.prototype, "type", void 0), e([y({ type: x })], n4.prototype, "startPoint", void 0), e([y({ type: x })], n4.prototype, "endPoint", void 0), e([y({ type: M, value: null })], n4.prototype, "unit", void 0), e([y({ readOnly: true })], n4.prototype, "requiredPropertiesForEditing", null), n4 = e([a("esri.analysis.DirectLineMeasurementAnalysis")], n4);
var p3 = n4;

// node_modules/@arcgis/core/views/3d/interactive/measurementTools/directLineMeasurement3D/DirectLineMeasurement3DView.js
var L;
!function(e9) {
  e9.Manipulators = "manipulators", e9.AnalysisViewDestroyed = "analysis-view-destroyed", e9.AnalysisView = "analysis-view";
}(L || (L = {}));
var P4 = class extends S {
  constructor(e9) {
    super(e9), this.cursorPoint = null, this._visible = false, this._laserLine = null, this.laserLineEnabled = true, this._lastDraggedHandle = null;
  }
  initialize() {
    this._laserLine = new c2({ view: this.view, attached: true, isDecoration: true }), this._updateVisibility(this._visible), this._connectToAnalysisView(), this.addHandles(d2(() => this._params, ({ laserLineGlowColor: e9, laserLineInnerColor: t2, laserLineGlobalAlpha: i }) => {
      const s = this._laserLine, n5 = s.style;
      s.style = { ...n5, innerColor: t2, glowColor: e9, globalAlpha: i };
    }));
  }
  destroy() {
    this._laserLine = u(this._laserLine);
  }
  get _params() {
    const { accentColor: e9 } = this.view.effectiveTheme;
    return { laserLineGlowColor: u2.toUnitRGB(e9), laserLineGlowWidth: 8, laserLineGlowFalloff: 8, laserLineInnerColor: u2.toUnitRGB(G(e9)), laserLineInnerWidth: 0.75, laserLineGlobalAlpha: 0.75 * e9.a, handleColor: F(e9, 0.5), handleRadius: 5 };
  }
  get visible() {
    return this._visible;
  }
  set visible(e9) {
    e9 ? this.show() : this.hide();
  }
  get testData() {
    const e9 = this._laserLine.testData, t2 = this.analysisViewData.testData;
    return { labels: t2 == null ? void 0 : t2.labels, stripeLength: t2 == null ? void 0 : t2.stripeLength, laserLineRenderer: { heightManifoldEnabled: null != e9 && e9.heightManifoldEnabled, heightManifoldTarget: null != e9 ? e9.heightManifoldTarget : null, pointDistanceEnabled: null != e9 && e9.pointDistanceEnabled, pointDistanceOrigin: null != e9 ? e9.pointDistanceOrigin : null, pointDistanceTarget: null != e9 ? e9.pointDistanceTarget : null, lineVerticalPlaneEnabled: null != e9 && e9.lineVerticalPlaneEnabled } };
  }
  get _cursorPosition() {
    const e9 = n2(), t2 = this.cursorPoint;
    return t2 && this.view.renderCoordsHelper.toRenderCoords(t2, e9), e9;
  }
  get _startPosition() {
    const e9 = n2(), t2 = this.analysis.startPoint;
    return t2 && this.view.renderCoordsHelper.toRenderCoords(t2, e9), e9;
  }
  get _endPosition() {
    const e9 = n2(), t2 = this.analysis.endPoint;
    return t2 && this.view.renderCoordsHelper.toRenderCoords(t2, e9), e9;
  }
  get _laserLineParams() {
    const e9 = this._focusPosition, { active: t2, lineState: i } = this.toolState, s = this.analysisViewData, n5 = this.laserLineEnabled && !!e9 && "measured" !== i && t2;
    if (!n5 || !this.visible || null == s || s.destroyed)
      return { heightManifoldTarget: null, pointDistanceLine: null, lineVerticalPlaneSegment: null };
    const a4 = s.actualVisualizedMeasurement, o2 = "local" !== this.view.viewingMode && n5 && !!this.analysis.startPoint && "geodesic" === a4, r = n5 && s.viewMode === e8.Triangle;
    return { heightManifoldTarget: "euclidean" === a4 ? e9 : null, pointDistanceLine: o2 ? this._pointDistanceLine : null, lineVerticalPlaneSegment: r ? b(this._startPosition, this._endPosition) : null };
  }
  get _focusPosition() {
    const { lineState: e9 } = this.toolState, t2 = this.analysisViewData, i = null != t2 && !t2.destroyed && t2.measurementMode === e7.Euclidean && t2.viewMode === e8.Direct;
    switch (e9) {
      case "drawing":
        return i ? this._startPosition : this.analysis.endPoint ? this._endPosition : this._startPosition;
      case "editing":
        return i ? "start" === this._lastDraggedHandle ? this._endPosition : this._startPosition : "start" === this._lastDraggedHandle ? this._startPosition : this._endPosition;
      default:
        return null != this.cursorPoint ? this._cursorPosition : null;
    }
  }
  get _pointDistanceLine() {
    return { origin: "drawing" === this.toolState.lineState || "end" === this._lastDraggedHandle ? this._startPosition : this._endPosition, target: this._focusPosition };
  }
  createManipulators() {
    const e9 = this._params, { view: t2 } = this, i = () => {
      const i2 = f(e9.handleColor), s2 = [new e4(st(i2, 1, 32, 32))], n6 = new ee({ view: t2, renderObjects: s2 });
      return n6.available = false, n6.radius = e9.handleRadius, [n6, i2];
    }, [s, n5] = i(), [r, d4] = i(), h3 = new ee({ view: this.view, available: false, interactive: false });
    null != this.analysis.startPoint && (s.location = this.analysis.startPoint, s.available = true), null != this.analysis.endPoint && (r.location = this.analysis.endPoint, r.available = true);
    const c5 = () => {
      let e10 = this._lastDraggedHandle;
      s.grabbing && !r.grabbing && (e10 = "start"), r.grabbing && !s.grabbing && (e10 = "end"), s.grabbing || r.grabbing || (e10 = null), this._lastDraggedHandle = e10;
    }, p6 = s.events.on("grab-changed", c5), u4 = r.events.on("grab-changed", c5);
    return this.addHandles([p6, u4, d2(() => D2(this._params.handleColor), (e10) => {
      n5.setParameters({ color: e10 }), d4.setParameters({ color: e10 });
    }, { equals: P2 })], L.Manipulators), { start: s, end: r, cursor: h3 };
  }
  show() {
    this.destroyed || this._visible || this._updateVisibility(true);
  }
  hide() {
    !this.destroyed && this._visible && this._updateVisibility(false);
  }
  _connectToAnalysisView() {
    this.removeHandles(L.AnalysisView), this.addHandles([d2(() => {
      var _a;
      return (_a = this.analysisViewData) == null ? void 0 : _a.destroyed;
    }, (e9) => {
      e9 && this.removeHandles(L.AnalysisView);
    }, P), d2(() => ["measured" === this.toolState.lineState, this.analysisViewData], ([e9, t2]) => {
      null == t2 || t2.destroyed || (t2.allowVisualElementsOrientationChange = !e9);
    }, P), d2(() => this._laserLineParams, (e9) => {
      const t2 = this._laserLine;
      t2.heightManifoldTarget = e9.heightManifoldTarget, t2.pointDistanceLine = e9.pointDistanceLine, t2.lineVerticalPlaneSegment = e9.lineVerticalPlaneSegment;
    }, P)], L.AnalysisView);
  }
  _updateVisibility(e9) {
    this.initialized && (this._visible = e9, e9 ? this._laserLine.style = { innerColor: this._params.laserLineInnerColor, innerWidth: this._params.laserLineInnerWidth, glowColor: this._params.laserLineGlowColor, glowWidth: this._params.laserLineGlowWidth, glowFalloff: this._params.laserLineGlowFalloff, globalAlpha: this._params.laserLineGlobalAlpha } : this.view.cursor = null, this._laserLine.visible = e9);
  }
};
e([y({ constructOnly: true })], P4.prototype, "view", void 0), e([y()], P4.prototype, "_params", null), e([y({ constructOnly: true })], P4.prototype, "analysis", void 0), e([y({ constructOnly: true })], P4.prototype, "analysisViewData", void 0), e([y()], P4.prototype, "cursorPoint", void 0), e([y()], P4.prototype, "toolState", void 0), e([y()], P4.prototype, "visible", null), e([y()], P4.prototype, "testData", null), e([y()], P4.prototype, "_visible", void 0), e([y()], P4.prototype, "_laserLine", void 0), e([y({ constructOnly: true })], P4.prototype, "laserLineEnabled", void 0), e([y()], P4.prototype, "_cursorPosition", null), e([y()], P4.prototype, "_startPosition", null), e([y()], P4.prototype, "_endPosition", null), e([y()], P4.prototype, "_lastDraggedHandle", void 0), e([y()], P4.prototype, "_laserLineParams", null), e([y()], P4.prototype, "_focusPosition", null), e([y()], P4.prototype, "_pointDistanceLine", null), P4 = e([a("esri.views.3d.interactive.measurementTools.directLineMeasurement3D.DirectLineMeasurement3DView")], P4);

// node_modules/@arcgis/core/views/3d/interactive/measurementTools/directLineMeasurement3D/DirectLineMeasurement3DTool.js
var x3 = class extends o {
  constructor(t2) {
    super(t2), this._updatingHandles = new h(), this._emulatedDrag = null, this.lineState = "initial", this.startPointSurfaceLocation = null, this.endPointSurfaceLocation = null, this.cursorPointSurfaceLocation = null, this.startManipulator = null, this.endManipulator = null, this.cursorManipulator = null, this._getSnappingContext = t((t3) => new e5({ elevationInfo: { mode: "absolute-height", offset: 0 }, pointer: t3, editGeometryOperations: new E(new p("point", P3(true, false, this.view.spatialReference)), this.view.state.viewingMode), visualizer: new O() }));
  }
  initialize() {
    const { view: t2, analysis: e9, analysisViewData: i, visible: s } = this;
    this.measurementView = new P4({ toolState: this, view: t2, analysis: e9, analysisViewData: i, visible: s });
    const r = a3(t2);
    this._snappingManagerResult = r, this.addHandles(r);
    const { start: o2, end: u4, cursor: p6 } = this.measurementView.createManipulators(), c5 = (t3, e10, i2) => p2(t3, (t4, n5, a4, s2) => {
      const r2 = A2(t4), o3 = this._snappingManager, u5 = this._getSnappingContext(s2), p7 = this._updatingHandles, { lineState: c6 } = this;
      a4 = a4.next(r2).next(h2(this, [i2, e10])).next((i3) => {
        if ("cursorPoint" !== e10) {
          const i4 = this.analysis[e10];
          null != i4 && (t4.location = i4);
        }
        return i3;
      });
      const m2 = F2(this.view), g2 = (t5) => {
        const n6 = m2(t5);
        return n6 || "drawing" !== this.lineState && "initial" !== this.lineState || (this[e10] = null, this[i2] = null), n6;
      };
      let v2 = n5.next(r2).next(g2);
      if ("touch" !== s2 || "editing" === c6) {
        const { snappingStep: t5, cancelSnapping: e11 } = f2({ snappingManager: o3, snappingContext: u5, updatingHandles: p7 });
        a4 = a4.next(e11), v2 = v2.next(...t5);
      }
      v2.next((t5) => "start" !== t5.action ? t5 : null).next((n6) => {
        const a5 = x2(n6.mapEnd, new x());
        this[e10] = a5, t4.location = a5, this[i2] = this._surfaceLocation(a5, n6.surfaceType);
      });
    }), g = (t3) => t3.events.on("grab-changed", () => {
      const t4 = o2.grabbing || u4.grabbing;
      this.lineState = t4 ? "editing" : "measured";
    });
    this.addHandles([c5(o2, "startPoint", "startPointSurfaceLocation"), c5(u4, "endPoint", "endPointSurfaceLocation"), c5(p6, "cursorPoint", "cursorPointSurfaceLocation"), g(o2), g(u4)]), this.manipulators.add(o2), this.manipulators.add(u4), this.manipulators.add(p6), this.startManipulator = o2, this.endManipulator = u4, this.cursorManipulator = p6, this.addHandles(d2(() => this.state, (t3) => {
      "measured" === t3 && this.finishToolCreation();
    }, A)), N(this);
  }
  destroy() {
    this._updatingHandles = u(this._updatingHandles), this.measurementView = u(this.measurementView);
  }
  get _snappingManager() {
    return this._snappingManagerResult.snappingManager;
  }
  get state() {
    const { analysis: t2 } = this;
    if (null == t2.startPoint && null == t2.endPoint)
      return "ready";
    const { lineState: e9 } = this;
    return this.validMeasurement && "editing" !== e9 && "drawing" !== e9 ? "measured" : "measuring";
  }
  get cursor() {
    return "ready" === this.state || "drawing" === this.lineState ? "crosshair" : null;
  }
  get startPoint() {
    return this.analysis.startPoint;
  }
  set startPoint(t2) {
    this.analysis.startPoint = t2;
  }
  get endPoint() {
    return this.analysis.endPoint;
  }
  set endPoint(t2) {
    this.analysis.endPoint = t2;
  }
  get cursorPoint() {
    return this.measurementView.cursorPoint;
  }
  set cursorPoint(t2) {
    this.measurementView.cursorPoint = t2;
  }
  get snappingOptions() {
    return this._snappingManager.options;
  }
  get validMeasurement() {
    return null != this.analysis.startPoint && null != this.analysis.endPoint;
  }
  get updating() {
    return this._updatingHandles.updating || this._snappingManager.updating;
  }
  onShow() {
    this.measurementView.show(), this._updateManipulatorAvailability();
  }
  onHide() {
    this.measurementView.hide();
  }
  onDeactivate() {
    var _a;
    (_a = this._emulatedDrag) == null ? void 0 : _a.cancel(), this._emulatedDrag = null;
  }
  onInputEvent(t2) {
    switch (t2.type) {
      case "immediate-click":
        this._handleImmediateClick(t2);
        break;
      case "pointer-move":
        this._handlePointerMove(t2);
    }
    this._updateManipulatorAvailability();
  }
  _handlePointerMove(t2) {
    var _a, _b;
    if (!this.active || this.view.navigating)
      return;
    const { pointerType: e9 } = t2;
    if ("mouse" !== e9)
      return;
    const i = n3(t2), { lineState: n5, cursorManipulator: a4, endManipulator: s } = this;
    let r = false;
    null == this.cursorPoint && ((_a = this._emulatedDrag) == null ? void 0 : _a.cancel(), this._emulatedDrag = V(a4, e9, i), r = true), "initial" === n5 && ((_b = this._emulatedDrag) == null ? void 0 : _b.update(i), r = true), "drawing" === n5 && (s.events.emit("drag", { action: "update", start: i, screenPoint: i }), r = true), r && t2.stopPropagation();
  }
  _handleImmediateClick(t2) {
    var _a, _b, _c, _d, _e;
    if (!this.active)
      return;
    if (!M2(t2))
      return;
    const e9 = n3(t2), { pointerType: i } = t2, { cursorManipulator: n5, startManipulator: a4, endManipulator: s, lineState: r } = this;
    let o2 = false;
    switch (null == this.cursorPoint && ((_a = this._emulatedDrag) == null ? void 0 : _a.cancel(), this._emulatedDrag = V(n5, i, e9)), r) {
      case "initial":
        if ((_b = this._emulatedDrag) == null ? void 0 : _b.update(e9), null != this.cursorPoint) {
          (_c = this._emulatedDrag) == null ? void 0 : _c.end(e9), this._emulatedDrag = null;
          const { cursorPoint: t3 } = this;
          this.startPoint = t3, this.startPointSurfaceLocation = this.cursorPointSurfaceLocation, a4.location = t3, a4.interactive = false, s.interactive = false, this.lineState = "drawing", this._emulatedDrag = V(s, i, e9), o2 = true;
        }
        break;
      case "drawing":
        (_d = this._emulatedDrag) == null ? void 0 : _d.update(e9), null != this.endPoint && ((_e = this._emulatedDrag) == null ? void 0 : _e.end(e9), this._emulatedDrag = null, a4.interactive = true, s.interactive = true, this.lineState = "measured", o2 = true);
    }
    o2 && t2.stopPropagation();
  }
  _surfaceLocation(t2, e9) {
    return e9 === G2.GROUND ? "on-the-surface" : (t2.z ?? 0) >= this._getElevation(t2) ? "above-the-surface" : "below-the-surface";
  }
  _updateManipulatorAvailability() {
    this.startManipulator.available = null != this.analysis.startPoint, this.endManipulator.available = null != this.analysis.endPoint;
  }
  _getElevation(t2) {
    return this.view.basemapTerrain.ready ? a2(this.view.elevationProvider, t2) ?? 0 : 0;
  }
  get test() {
    return { snappingManager: this._snappingManager };
  }
};
function V(t2, e9, i) {
  return t2.events.emit("drag", { action: "start", pointerType: e9, start: i, screenPoint: i }), { update: (e10) => t2.events.emit("drag", { action: "update", start: e10, screenPoint: e10 }), end: (e10) => t2.events.emit("drag", { action: "end", start: e10, screenPoint: e10 }), cancel: () => t2.events.emit("drag", { action: "cancel" }) };
}
e([y({ readOnly: true })], x3.prototype, "state", null), e([y()], x3.prototype, "lineState", void 0), e([y({ readOnly: true })], x3.prototype, "cursor", null), e([y()], x3.prototype, "startPoint", null), e([y()], x3.prototype, "endPoint", null), e([y()], x3.prototype, "cursorPoint", null), e([y({ constructOnly: true })], x3.prototype, "analysis", void 0), e([y({ constructOnly: true })], x3.prototype, "analysisViewData", void 0), e([y()], x3.prototype, "measurementView", void 0), e([y({ constructOnly: true })], x3.prototype, "view", void 0), e([y({ readOnly: true })], x3.prototype, "validMeasurement", null), e([y({ value: null })], x3.prototype, "startPointSurfaceLocation", void 0), e([y({ value: null })], x3.prototype, "endPointSurfaceLocation", void 0), e([y({ value: null })], x3.prototype, "cursorPointSurfaceLocation", void 0), e([y()], x3.prototype, "updating", null), x3 = e([a("esri.views.3d.interactive.measurementTools.directLineMeasurement3D.DirectLineMeasurement3DTool")], x3);
var H = x3;

// node_modules/@arcgis/core/widgets/DirectLineMeasurement3D/DirectLineMeasurement3DViewModel.js
var p4 = class extends _ {
  constructor(t2) {
    super(t2), this.analysis = null, this.supportedViewType = "3d", this.unsupportedErrorMessage = "DirectLineMeasurement3DViewModel is only supported in 3D views.", this._userUnit = null, this._userUnitOptions = null;
  }
  initialize() {
    this.addHandles(d2(() => ({ analysis: this.analysis, unit: this.unit }), ({ analysis: t2, unit: e9 }) => {
      null != t2 && (t2.unit = e9);
    }, A));
  }
  get state() {
    return this.disabled || !this.ready ? "disabled" : null == this.tool ? "ready" : this.tool.state;
  }
  get measurement() {
    var _a;
    const { tool: t2 } = this;
    if (null == t2)
      return null;
    const e9 = () => ({ text: null, state: "unavailable" }), i = (t3) => ({ text: t3, state: "available" }), { analysisViewData: s } = t2, n5 = null != s.result;
    return { mode: ((_a = s.result) == null ? void 0 : _a.mode) ?? "euclidean", directDistance: n5 && "euclidean" === s.actualVisualizedMeasurement ? i(s.directLabelText) : e9(), horizontalDistance: n5 ? i(s.horizontalLabelText) : e9(), verticalDistance: n5 ? i(s.verticalLabelText) : e9() };
  }
  set unitOptions(t2) {
    this._userUnitOptions = t2, this._set("unitOptions", this._filteredOrAllUnits(this._userUnitOptions));
  }
  get unitOptions() {
    return this._filteredOrAllUnits(this._userUnitOptions);
  }
  set unit(t2) {
    this._userUnit = t2 ? this._findSelectableUnit(t2, this._userUnit) : null;
  }
  get unit() {
    return this._userUnit ? (this._userUnit = this._findSelectableUnit(this._userUnit, this.defaultUnit), this._userUnit) : this._findSelectableUnit(this.defaultUnit);
  }
  constructAnalysis() {
    return new p3();
  }
  constructTool() {
    return new H({ view: this.view, analysis: this.analysis, analysisViewData: this.analysisView, visible: this.visible });
  }
  _findSelectableUnit(t2, e9) {
    const i = this.unitOptions;
    return i.includes(t2) ? t2 : e9 ? this._findSelectableUnit(e9) : i[0];
  }
  _filteredOrAllUnits(t2) {
    if (!t2)
      return M.slice();
    const e9 = t2.filter((t3) => M.includes(t3));
    return 0 === e9.length ? M.slice() : e9;
  }
};
e([y({ type: p3 })], p4.prototype, "analysis", void 0), e([y({ readOnly: true })], p4.prototype, "state", null), e([y({ readOnly: true })], p4.prototype, "measurement", null), e([y()], p4.prototype, "unitOptions", null), e([y()], p4.prototype, "unit", null), e([y(e6)], p4.prototype, "defaultUnit", void 0), e([y()], p4.prototype, "_userUnit", void 0), e([y()], p4.prototype, "_userUnitOptions", void 0), p4 = e([a("esri.widgets.DirectLineMeasurement3D.DirectLineMeasurement3DViewModel")], p4);
var c3 = p4;

// node_modules/@arcgis/core/widgets/DirectLineMeasurement3D.js
var p5 = "esri-direct-line-measurement-3d";
var m = { base: p5, newMeasurementButton: `${p5}__clear-button` };
var c4 = class extends D {
  constructor(e9, t2) {
    super(e9, t2), this.messages = null, this.messagesCommon = null, this.viewModel = new c3();
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e9) {
    this.viewModel.view = e9;
  }
  get visible() {
    return this.viewModel.visible;
  }
  set visible(e9) {
    this.viewModel.visible = e9;
  }
  get active() {
    return this.viewModel.active;
  }
  get analysis() {
    return this.viewModel.analysis;
  }
  set analysis(e9) {
    this.viewModel.analysis = e9;
  }
  get icon() {
    return "measure-line";
  }
  set icon(e9) {
    this._overrideIfSome("icon", e9);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e9) {
    this._overrideIfSome("label", e9);
  }
  get unitOptions() {
    return this.viewModel.unitOptions;
  }
  set unitOptions(e9) {
    this.viewModel.unitOptions = e9;
  }
  get unit() {
    return this.viewModel.unit;
  }
  set unit(e9) {
    this.viewModel.unit = e9;
  }
  render() {
    const { messages: e9, messagesCommon: s, unit: i, unitOptions: o2, viewModel: r } = this, { active: a4, measurement: p6, state: c5, supported: v2 } = r;
    return n("div", { "aria-label": this.messages.widgetLabel, class: this.classes(m.base, e3.widget, e3.panel), key: this, role: "presentation" }, this.visible ? n(u3, { active: a4, measurementItems: [{ key: "direct", title: e9.direct, value: d3(p6 == null ? void 0 : p6.directDistance) }, { key: "horizontal", title: e9.horizontal, value: d3(p6 == null ? void 0 : p6.horizontalDistance) }, { key: "vertical", title: e9.vertical, value: d3(p6 == null ? void 0 : p6.verticalDistance) }], messages: { ...e9, notApplicable: s == null ? void 0 : s.notApplicable }, newMeasurementButtonClass: m.newMeasurementButton, state: c5, supported: v2, unit: i, unitOptions: o2, onNewMeasurementClick: () => {
      d(this.viewModel.start());
    }, onUnitChange: (e10) => {
      this.unit = e10;
    } }) : null);
  }
};
function d3(e9) {
  return "available" === (e9 == null ? void 0 : e9.state) ? e9.text : null;
}
e([y()], c4.prototype, "view", null), e([y()], c4.prototype, "visible", null), e([y()], c4.prototype, "active", null), e([y({ constructOnly: true, nonNullable: true })], c4.prototype, "analysis", null), e([y()], c4.prototype, "icon", null), e([y()], c4.prototype, "label", null), e([y(), e2("esri/widgets/DirectLineMeasurement3D/t9n/DirectLineMeasurement3D")], c4.prototype, "messages", void 0), e([y(), e2("esri/t9n/common")], c4.prototype, "messagesCommon", void 0), e([y()], c4.prototype, "uiStrings", void 0), e([y({ type: c3 })], c4.prototype, "viewModel", void 0), e([y()], c4.prototype, "unitOptions", null), e([y()], c4.prototype, "unit", null), c4 = e([a("esri.widgets.DirectLineMeasurement3D")], c4);
var v = c4;
export {
  v as default
};
//# sourceMappingURL=DirectLineMeasurement3D-YM25WVIL.js.map
