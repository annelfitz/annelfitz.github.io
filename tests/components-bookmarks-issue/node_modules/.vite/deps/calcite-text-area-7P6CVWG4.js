import {
  throttle
} from "./chunk-VQSBXDSM.js";
import "./chunk-T2EEZZPH.js";
import {
  syncHiddenFormInput
} from "./chunk-WGWB7USO.js";
import {
  Validation
} from "./chunk-JLVQRCDH.js";
import {
  defineCustomElement as defineCustomElement2
} from "./chunk-N7T2CD66.js";
import {
  HiddenFormInputSlot,
  connectForm,
  disconnectForm
} from "./chunk-GVSUBOU3.js";
import {
  InteractiveContainer,
  connectInteractive,
  disconnectInteractive,
  updateHostInteraction
} from "./chunk-PLSR7DZH.js";
import {
  connectLabel,
  disconnectLabel,
  getLabelText
} from "./chunk-FY6Q2VWS.js";
import {
  connectMessages,
  disconnectMessages,
  setUpMessages,
  updateMessages
} from "./chunk-WJ3GFKCF.js";
import {
  connectLocalized,
  disconnectLocalized,
  numberStringFormatter
} from "./chunk-XFVJO746.js";
import "./chunk-LZWNHWM7.js";
import {
  componentFocusable,
  componentLoaded,
  setComponentLoaded,
  setUpLoadableComponent
} from "./chunk-CMXPBFJM.js";
import {
  defineCustomElement
} from "./chunk-4OX5426K.js";
import {
  createObserver
} from "./chunk-QFS6X7MQ.js";
import "./chunk-55ID4B42.js";
import {
  slotChangeHasAssignedElement,
  toAriaBoolean
} from "./chunk-W3V5A544.js";
import {
  guid
} from "./chunk-3QIVUTMT.js";
import "./chunk-MDRC3XUT.js";
import {
  H,
  Host,
  createEvent,
  h,
  proxyCustomElement
} from "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@esri/calcite-components/dist/components/calcite-text-area.js
var CSS = {
  assistiveText: "assistive-text",
  characterLimit: "character-limit",
  content: "content",
  container: "container",
  footer: "footer",
  resizeDisabled: "resize--disabled",
  resizeDisabledX: "resize--disabled-x",
  resizeDisabledY: "resize--disabled-y",
  characterOverLimit: "character--over-limit",
  readOnly: "readonly",
  textAreaInvalid: "text-area--invalid",
  footerSlotted: "footer--slotted",
  borderColor: "border--color",
  hide: "hide",
  blockSizeFull: "block-size--full",
  footerEndSlotOnly: "footer--end-only"
};
var SLOTS = {
  footerStart: "footer-start",
  footerEnd: "footer-end"
};
var RESIZE_TIMEOUT = 100;
var textAreaCss = ":host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{position:relative;display:inline-block;block-size:100%;inline-size:100%}textarea{position:relative;margin:0px;box-sizing:border-box;display:block;inline-size:100%;border-width:1px;border-color:var(--calcite-color-border-input);background-color:var(--calcite-color-foreground-1);font-family:var(--calcite-sans-family);color:var(--calcite-color-text-1);min-inline-size:12rem;border-block-end:1px solid var(--calcite-color-border-3)}@media screen and (max-width: 480px){textarea{resize:none}}textarea:focus{outline:2px solid var(--calcite-ui-focus-color, var(--calcite-color-brand-hover, var(--calcite-color-brand)));outline-offset:calc(\n            -2px *\n            calc(\n              1 -\n              2 * clamp(\n                0,\n                var(--calcite-offset-invert-focus),\n                1\n              )\n            )\n          )}textarea.text-area--invalid{border-width:1px;border-block-end-width:1px;border-style:solid;border-color:var(--calcite-color-status-danger)}textarea.text-area--invalid:focus{outline:2px solid var(--calcite-color-status-danger);outline-offset:calc(\n            -2px *\n            calc(\n              1 -\n              2 * clamp(\n                0,\n                var(--calcite-offset-invert-focus),\n                1\n              )\n            )\n          )}textarea.footer--slotted{min-inline-size:18rem}.footer{box-sizing:border-box;display:flex;align-items:center;border-width:1px;border-block-start-width:0px;border-style:solid;border-color:var(--calcite-color-border-input);background-color:var(--calcite-color-foreground-1)}.character-limit{display:flex;align-items:center;justify-content:flex-end;white-space:nowrap;font-weight:var(--calcite-font-weight-normal);color:var(--calcite-color-text-2)}.character--over-limit{font-weight:var(--calcite-font-weight-bold);color:var(--calcite-color-status-danger)}:host([resize=none]) textarea{resize:none}:host([resize=horizontal]) textarea{resize:horizontal}:host([resize=vertical]) textarea{resize:vertical}:host([scale=s]){font-size:var(--calcite-font-size--2)}:host([scale=s]) .footer{padding-block:0.25rem;padding-inline:0.5rem;min-block-size:1.75rem}:host([scale=s]) textarea{padding-block:0.25rem;padding-inline:0.5rem}:host([scale=s]) textarea,:host([scale=s]) .footer,:host([scale=s]) .character-limit{padding-inline-start:0.5rem;font-size:var(--calcite-font-size--2)}:host([scale=m]) textarea{padding-block:0.5rem;padding-inline:0.75rem}:host([scale=m]) .footer{padding-block:0.5rem;padding-inline:0.75rem;min-block-size:2.25rem}:host([scale=m]) textarea,:host([scale=m]) .footer,:host([scale=m]) .character-limit{padding-inline-start:0.75rem;font-size:var(--calcite-font-size--1)}:host([scale=l]){font-size:var(--calcite-font-size-0)}:host([scale=l]) textarea{padding-block:0.75rem;padding-inline:1rem}:host([scale=l]) .footer{padding-block:0.75rem;padding-inline:1rem;min-block-size:2.75rem}:host([scale=l]) textarea,:host([scale=l]) .footer,:host([scale=l]) .character-limit{padding-inline-start:1rem;font-size:var(--calcite-font-size-0)}:host([status=invalid]) textarea{border-color:var(--calcite-color-status-danger)}:host([status=invalid]) textarea:focus{outline:2px solid var(--calcite-color-status-danger);outline-offset:calc(\n            -2px *\n            calc(\n              1 -\n              2 * clamp(\n                0,\n                var(--calcite-offset-invert-focus),\n                1\n              )\n            )\n          )}.readonly{background-color:var(--calcite-color-background);font-weight:var(--calcite-font-weight-medium)}:host([disabled]) textarea,:host([disabled]) footer{opacity:0.5}.border--color{border-block-end-width:1px;border-color:var(--calcite-color-border-input)}.border--color:focus{border-block-end-width:2px}textarea.block-size--full{block-size:100%}.content,.hide{display:none}.container{display:flex;inline-size:100%;justify-content:space-between}.footer--end-only{justify-content:flex-end}.assistive-text{position:absolute;inline-size:1px;block-size:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}.validation-container{display:flex;flex-direction:column;align-items:flex-start;align-self:stretch}:host([scale=m]) .validation-container,:host([scale=l]) .validation-container{padding-block-start:0.5rem}:host([scale=s]) .validation-container{padding-block-start:0.25rem}::slotted(input[slot=hidden-form-input]){margin:0 !important;opacity:0 !important;outline:none !important;padding:0 !important;position:absolute !important;inset:0 !important;transform:none !important;-webkit-appearance:none !important;z-index:-1 !important}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}.interaction-container{display:contents}:host([hidden]){display:none}[hidden]{display:none}";
var TextArea = proxyCustomElement(class TextArea2 extends H {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.calciteTextAreaInput = createEvent(this, "calciteTextAreaInput", 7);
    this.calciteTextAreaChange = createEvent(this, "calciteTextAreaChange", 7);
    this.guid = guid();
    this.handleInput = (event) => {
      this.value = event.target["value"];
      this.calciteTextAreaInput.emit();
    };
    this.handleChange = () => {
      this.calciteTextAreaChange.emit();
    };
    this.contentSlotChangeHandler = () => {
      if (!this.value) {
        const nodes = this.el.childNodes;
        nodes.forEach((el) => {
          if (el.nodeName === "#text") {
            this.value = el.nodeValue.trim();
          }
        });
      }
    };
    this.renderCharacterLimit = () => {
      if (this.maxLength) {
        this.localizedCharacterLengthObj = this.getLocalizedCharacterLength();
        return h("span", { class: CSS.characterLimit }, h("span", { class: { [CSS.characterOverLimit]: this.isCharacterLimitExceeded() } }, this.localizedCharacterLengthObj.currentLength), "/", this.localizedCharacterLengthObj.maxLength);
      }
      return null;
    };
    this.resizeObserver = createObserver("resize", async () => {
      await componentLoaded(this);
      const { textAreaHeight, textAreaWidth, elHeight, elWidth, footerHeight, footerWidth } = this.getHeightAndWidthOfElements();
      if (footerWidth > 0 && footerWidth !== textAreaWidth) {
        this.footerEl.style.width = `${textAreaWidth}px`;
      }
      if (elWidth !== textAreaWidth || elHeight !== textAreaHeight + (footerHeight || 0)) {
        this.setHeightAndWidthToAuto();
      }
    });
    this.setTextAreaEl = (el) => {
      this.textAreaEl = el;
      this.resizeObserver.observe(el);
    };
    this.setHeightAndWidthToAuto = throttle(() => {
      if (this.resize === "vertical" || this.resize === "both") {
        this.el.style.height = "auto";
      }
      if (this.resize === "horizontal" || this.resize === "both") {
        this.el.style.width = "auto";
      }
    }, RESIZE_TIMEOUT, { leading: false });
    this.autofocus = false;
    this.columns = void 0;
    this.disabled = false;
    this.form = void 0;
    this.groupSeparator = false;
    this.label = void 0;
    this.minLength = void 0;
    this.maxLength = void 0;
    this.messages = void 0;
    this.validationMessage = void 0;
    this.validationIcon = void 0;
    this.name = void 0;
    this.numberingSystem = void 0;
    this.placeholder = void 0;
    this.readOnly = false;
    this.required = false;
    this.resize = "both";
    this.rows = void 0;
    this.scale = "m";
    this.status = "idle";
    this.value = "";
    this.wrap = "soft";
    this.messageOverrides = void 0;
    this.defaultMessages = void 0;
    this.endSlotHasElements = void 0;
    this.startSlotHasElements = void 0;
    this.effectiveLocale = "";
  }
  onMessagesChange() {
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  connectedCallback() {
    connectInteractive(this);
    connectLabel(this);
    connectForm(this);
    connectLocalized(this);
    connectMessages(this);
  }
  async componentWillLoad() {
    setUpLoadableComponent(this);
    await setUpMessages(this);
  }
  componentDidLoad() {
    setComponentLoaded(this);
  }
  componentDidRender() {
    updateHostInteraction(this);
    this.setTextAreaHeight();
  }
  disconnectedCallback() {
    var _a;
    disconnectInteractive(this);
    disconnectLabel(this);
    disconnectForm(this);
    disconnectLocalized(this);
    disconnectMessages(this);
    (_a = this.resizeObserver) == null ? void 0 : _a.disconnect();
  }
  render() {
    const hasFooter = this.startSlotHasElements || this.endSlotHasElements || !!this.maxLength;
    return h(Host, null, h(InteractiveContainer, { disabled: this.disabled }, h("textarea", {
      "aria-describedby": this.guid,
      "aria-invalid": toAriaBoolean(this.isCharacterLimitExceeded()),
      "aria-label": getLabelText(this),
      autofocus: this.autofocus,
      class: {
        [CSS.readOnly]: this.readOnly,
        [CSS.textAreaInvalid]: this.isCharacterLimitExceeded(),
        [CSS.footerSlotted]: this.endSlotHasElements && this.startSlotHasElements,
        [CSS.blockSizeFull]: !hasFooter,
        [CSS.borderColor]: !hasFooter
      },
      cols: this.columns,
      disabled: this.disabled,
      name: this.name,
      onChange: this.handleChange,
      onInput: this.handleInput,
      placeholder: this.placeholder,
      readonly: this.readOnly,
      required: this.required,
      rows: this.rows,
      value: this.value,
      wrap: this.wrap,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.setTextAreaEl
    }), h("span", { class: { [CSS.content]: true } }, h("slot", { onSlotchange: this.contentSlotChangeHandler })), h("footer", { class: {
      [CSS.footer]: true,
      [CSS.readOnly]: this.readOnly,
      [CSS.hide]: !hasFooter
    }, ref: (el) => this.footerEl = el }, h("div", { class: {
      [CSS.container]: true,
      [CSS.footerEndSlotOnly]: !this.startSlotHasElements && this.endSlotHasElements
    } }, h("slot", { name: SLOTS.footerStart, onSlotchange: (event) => this.startSlotHasElements = slotChangeHasAssignedElement(event) }), h("slot", { name: SLOTS.footerEnd, onSlotchange: (event) => this.endSlotHasElements = slotChangeHasAssignedElement(event) })), this.renderCharacterLimit()), h(HiddenFormInputSlot, { component: this }), this.isCharacterLimitExceeded() && h("span", { "aria-hidden": true, "aria-live": "polite", class: CSS.assistiveText, id: this.guid }, this.replacePlaceHoldersInMessages()), this.validationMessage && this.status === "invalid" ? h(Validation, { icon: this.validationIcon, message: this.validationMessage, scale: this.scale, status: this.status }) : null));
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  /** Sets focus on the component. */
  async setFocus() {
    await componentFocusable(this);
    this.textAreaEl.focus();
  }
  /** Selects the text of the component's `value`. */
  async selectText() {
    await componentLoaded(this);
    this.textAreaEl.select();
  }
  effectiveLocaleChange() {
    updateMessages(this, this.effectiveLocale);
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  onLabelClick() {
    this.setFocus();
  }
  getLocalizedCharacterLength() {
    const currentLength = this.value ? this.value.length.toString() : "0";
    const maxLength = this.maxLength.toString();
    if (this.numberingSystem === "latn") {
      return { currentLength, maxLength };
    }
    numberStringFormatter.numberFormatOptions = {
      locale: this.effectiveLocale,
      numberingSystem: this.numberingSystem,
      signDisplay: "never",
      useGrouping: this.groupSeparator
    };
    return {
      currentLength: numberStringFormatter.localize(currentLength),
      maxLength: numberStringFormatter.localize(maxLength)
    };
  }
  syncHiddenFormInput(input) {
    input.setCustomValidity("");
    if (this.isCharacterLimitExceeded()) {
      input.setCustomValidity(this.replacePlaceHoldersInMessages());
    }
    syncHiddenFormInput("textarea", this, input);
  }
  setTextAreaHeight() {
    const { textAreaHeight, elHeight, footerHeight } = this.getHeightAndWidthOfElements();
    if (footerHeight > 0 && textAreaHeight + footerHeight != elHeight) {
      this.textAreaEl.style.height = `${elHeight - footerHeight}px`;
    }
  }
  getHeightAndWidthOfElements() {
    var _a;
    const { height: textAreaHeight, width: textAreaWidth } = this.textAreaEl.getBoundingClientRect();
    const { height: elHeight, width: elWidth } = this.el.getBoundingClientRect();
    const { height: footerHeight, width: footerWidth } = (_a = this.footerEl) == null ? void 0 : _a.getBoundingClientRect();
    return {
      textAreaHeight,
      textAreaWidth,
      elHeight,
      elWidth,
      footerHeight,
      footerWidth
    };
  }
  replacePlaceHoldersInMessages() {
    return this.messages.tooLong.replace("{maxLength}", this.localizedCharacterLengthObj.maxLength).replace("{currentLength}", this.localizedCharacterLengthObj.currentLength);
  }
  isCharacterLimitExceeded() {
    var _a;
    return ((_a = this.value) == null ? void 0 : _a.length) > this.maxLength;
  }
  static get assetsDirs() {
    return ["assets"];
  }
  get el() {
    return this;
  }
  static get watchers() {
    return {
      "messageOverrides": ["onMessagesChange"],
      "effectiveLocale": ["effectiveLocaleChange"]
    };
  }
  static get style() {
    return textAreaCss;
  }
}, [1, "calcite-text-area", {
  "autofocus": [516],
  "columns": [514],
  "disabled": [516],
  "form": [513],
  "groupSeparator": [516, "group-separator"],
  "label": [1],
  "minLength": [514, "min-length"],
  "maxLength": [514, "max-length"],
  "messages": [1040],
  "validationMessage": [1, "validation-message"],
  "validationIcon": [520, "validation-icon"],
  "name": [513],
  "numberingSystem": [1, "numbering-system"],
  "placeholder": [1],
  "readOnly": [516, "read-only"],
  "required": [516],
  "resize": [513],
  "rows": [514],
  "scale": [513],
  "status": [513],
  "value": [1025],
  "wrap": [513],
  "messageOverrides": [1040],
  "defaultMessages": [32],
  "endSlotHasElements": [32],
  "startSlotHasElements": [32],
  "effectiveLocale": [32],
  "setFocus": [64],
  "selectText": [64]
}, void 0, {
  "messageOverrides": ["onMessagesChange"],
  "effectiveLocale": ["effectiveLocaleChange"]
}]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["calcite-text-area", "calcite-icon", "calcite-input-message"];
  components.forEach((tagName) => {
    switch (tagName) {
      case "calcite-text-area":
        if (!customElements.get(tagName)) {
          customElements.define(tagName, TextArea);
        }
        break;
      case "calcite-icon":
        if (!customElements.get(tagName)) {
          defineCustomElement();
        }
        break;
      case "calcite-input-message":
        if (!customElements.get(tagName)) {
          defineCustomElement2();
        }
        break;
    }
  });
}
defineCustomElement$1();
var CalciteTextArea = TextArea;
var defineCustomElement3 = defineCustomElement$1;
export {
  CalciteTextArea,
  defineCustomElement3 as defineCustomElement
};
/*! Bundled license information:

@esri/calcite-components/dist/components/calcite-text-area.js:
  (*!
   * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
   * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
   * v2.6.0
   *)
*/
//# sourceMappingURL=calcite-text-area-7P6CVWG4.js.map
