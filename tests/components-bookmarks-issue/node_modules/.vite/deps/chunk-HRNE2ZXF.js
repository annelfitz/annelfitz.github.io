import {
  a
} from "./chunk-FDNEUO76.js";
import {
  f,
  i,
  s
} from "./chunk-I2X6UR6L.js";
import {
  U
} from "./chunk-SAYWXQVM.js";

// node_modules/@arcgis/core/rest/networks/trace.js
async function s2(o, s3, n2) {
  const i2 = f(o), g = s3.toJSON();
  g.traceLocations = JSON.stringify(s3.traceLocations), s3.resultTypes && (g.resultTypes = JSON.stringify(s3.resultTypes));
  const y = i(i2.query, { query: s({ ...g, f: "json" }), ...n2 }), u = `${i2.path}/trace`;
  return U(u, y).then((e) => c(e, s3.outSpatialReference));
}
async function n(o, s3, n2) {
  const c2 = f(o), i2 = s3.toJSON();
  i2.traceLocations = JSON.stringify(s3.traceLocations), s3.resultTypes && (i2.resultTypes = JSON.stringify(s3.resultTypes));
  const g = i(c2.query, { query: s({ ...i2, async: true, f: "json" }), ...n2 }), y = `${c2.path}/trace`, { data: u } = await U(y, g);
  return u.statusUrl;
}
function c(e, t) {
  const { data: r } = e, a2 = a.fromJSON(r.traceResults);
  return a2.aggregatedGeometry && t && (a2.aggregatedGeometry.line && (a2.aggregatedGeometry.line.spatialReference = t.clone()), a2.aggregatedGeometry.multipoint && (a2.aggregatedGeometry.multipoint.spatialReference = t.clone()), a2.aggregatedGeometry.polygon && (a2.aggregatedGeometry.polygon.spatialReference = t.clone())), a2;
}

export {
  s2 as s,
  n
};
//# sourceMappingURL=chunk-HRNE2ZXF.js.map
