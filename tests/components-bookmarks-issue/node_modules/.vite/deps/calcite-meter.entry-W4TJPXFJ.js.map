{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/esm/src/components/meter/resources.ts", "../../@esri/calcite-components/dist/esm/src/components/meter/meter.scss?tag=calcite-meter&encapsulation=shadow", "../../@esri/calcite-components/dist/esm/src/components/meter/meter.tsx"],
  "sourcesContent": ["export const CSS = {\n  container: \"container\",\n  fill: \"fill\",\n  stepLine: \"step-line\",\n  label: \"label\",\n  labelHidden: \"label-hidden\",\n  labelRange: \"label-range\",\n  labelValue: \"label-value\",\n  unitLabel: \"unit-label\",\n  stepsVisible: \"steps-visible\",\n  valueVisible: \"value-visible\",\n  success: \"fill-success\",\n  warning: \"fill-warning\",\n  danger: \"fill-danger\",\n};\n", "@include base-component();\n@include disabled();\n\n:host {\n  @apply flex;\n  --calcite-meter-space-internal: theme(\"spacing[0.5]\");\n  --calcite-meter-height-internal: theme(\"spacing.4\");\n  --calcite-meter-font-size-internal: var(--calcite-font-size--1);\n}\n\n:host([scale=\"s\"]) {\n  --calcite-meter-height-internal: theme(\"spacing.3\");\n  --calcite-meter-font-size-internal: var(--calcite-font-size--2);\n}\n\n:host([scale=\"l\"]) {\n  --calcite-meter-height-internal: theme(\"spacing.6\");\n  --calcite-meter-font-size-internal: var(--calcite-font-size-0);\n}\n\n.container {\n  @apply flex relative items-center w-full m-0;\n  block-size: var(--calcite-meter-height-internal);\n  background-color: var(--calcite-color-foreground-2);\n  border: 1px solid var(--calcite-color-border-3);\n  border-radius: var(--calcite-meter-height-internal);\n}\n\n.solid {\n  border: 1px solid var(--calcite-color-foreground-3);\n  background-color: var(--calcite-color-foreground-3);\n}\n\n.outline {\n  @apply bg-transparent;\n}\n\n.value-visible {\n  margin-block-start: theme(\"spacing.6\");\n}\n\n.steps-visible {\n  margin-block-end: theme(\"spacing.6\");\n}\n\n.step-line {\n  @apply block absolute inset-y-0;\n  inline-size: var(--calcite-meter-space-internal);\n  background-color: var(--calcite-color-border-3);\n}\n\n.label {\n  @apply absolute;\n  font-size: var(--calcite-meter-font-size-internal);\n}\n\n.label-hidden {\n  @apply invisible opacity-0;\n}\n\n.label-value {\n  inset-block-end: calc(100% + 0.5em);\n  font-weight: var(--calcite-font-weight-bold);\n  color: var(--calcite-color-text-1);\n}\n\n.label-range {\n  @apply text-color-3;\n  inset-block-start: calc(100% + 0.5em);\n}\n\n.unit-label {\n  @apply text-color-3 font-medium;\n}\n\n.label-value .unit-label {\n  @apply text-color-2 font-bold;\n}\n\n.fill {\n  @apply block absolute duration-150 ease-in-out bg-brand z-default;\n  inset-inline-start: var(--calcite-meter-space-internal);\n  inset-block: var(--calcite-meter-space-internal);\n  border-radius: var(--calcite-meter-height-internal);\n  max-inline-size: calc(100% - (var(--calcite-meter-space-internal) * 2));\n  min-inline-size: calc(var(--calcite-meter-height-internal) - (var(--calcite-meter-space-internal) * 2));\n  transition-property: inline-size, background-color, box-shadow;\n}\n\n.fill-danger {\n  background-color: var(--calcite-color-status-danger);\n}\n\n.fill-success {\n  background-color: var(--calcite-color-status-success);\n}\n\n.fill-warning {\n  background-color: var(--calcite-color-status-warning);\n}\n\n.solid .fill {\n  inset-block: 0;\n  inset-inline-start: 0;\n  max-inline-size: 100%;\n  min-inline-size: calc(var(--calcite-meter-height-internal));\n  box-shadow: 0 0 0 1px var(--calcite-color-brand);\n}\n\n.solid .fill-danger {\n  box-shadow: 0 0 0 1px var(--calcite-color-status-danger);\n}\n\n.solid .fill-success {\n  box-shadow: 0 0 0 1px var(--calcite-color-status-success);\n}\n\n.solid .fill-warning {\n  box-shadow: 0 0 0 1px var(--calcite-color-status-warning);\n}\n", "import { Component, Element, h, Host, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { Appearance, Scale } from \"../interfaces\";\nimport { CSS } from \"./resources\";\n\nimport {\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\n\nimport {\n  afterConnectDefaultValueSet,\n  connectForm,\n  disconnectForm,\n  FormComponent,\n} from \"../../utils/form\";\n\nimport {\n  connectLocalized,\n  disconnectLocalized,\n  getSupportedLocale,\n  LocalizedComponent,\n  NumberingSystem,\n  numberStringFormatter,\n  SupportedLocale,\n} from \"../../utils/locale\";\nimport { intersects } from \"../../utils/dom\";\nimport { createObserver } from \"../../utils/observers\";\nimport { MeterLabelType } from \"./interfaces\";\n\n@Component({\n  tag: \"calcite-meter\",\n  styleUrl: \"meter.scss\",\n  shadow: true,\n})\nexport class Meter implements FormComponent, LoadableComponent, LocalizedComponent {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** Specifies the appearance style of the component. */\n  @Prop({ reflect: true }) appearance: Extract<\"outline\" | \"outline-fill\" | \"solid\", Appearance> =\n    \"outline-fill\";\n\n  /** When `true`, interaction is prevented and the component is displayed with lower opacity. */\n  @Prop({ reflect: true }) disabled = false;\n\n  /** Specifies the component's display, where `\"single\"` displays a single color and `\"range\"` displays a range of colors based on provided `low`, `high`, `min` or `max` values. */\n  @Prop({ reflect: true }) fillType: \"single\" | \"range\" = \"range\";\n\n  /**\n   * The `id` of the form that will be associated with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   */\n  @Prop({ reflect: true }) form: string;\n\n  /** When `true`, number values are displayed with a group separator corresponding to the language and country format. */\n  @Prop({ reflect: true }) groupSeparator = false;\n\n  /** Specifies a high value.  When `fillType` is `\"range\"`, displays a different color when above the specified threshold.  */\n  @Prop({ reflect: true, mutable: true }) high: number;\n\n  /**  Accessible name for the component. */\n  @Prop() label!: string;\n\n  /** Specifies a low value.  When `fillType` is `\"range\"`, displays a different color when above the specified threshold.  */\n  @Prop({ reflect: true, mutable: true }) low: number;\n\n  /** Specifies the highest allowed value of the component. */\n  @Prop({ reflect: true }) max = 100;\n\n  /** Specifies the lowest allowed value of the component. */\n  @Prop({ reflect: true }) min = 0;\n\n  @Watch(\"min\")\n  @Watch(\"max\")\n  @Watch(\"low\")\n  @Watch(\"high\")\n  @Watch(\"value\")\n  handleRangeChange(): void {\n    this.calculateValues();\n    this.updateLabels();\n  }\n\n  /**\n   * Specifies the name of the component.\n   *\n   * Required to pass the component's `value` on form submission.\n   */\n  @Prop({ reflect: true }) name: string;\n\n  /** Specifies the Unicode numeral system used by the component for localization. */\n  @Prop() numberingSystem: NumberingSystem;\n\n  /** When `true`, displays the values of `high`, `low`, `min`, and `max`. */\n  @Prop({ reflect: true }) rangeLabels = false;\n\n  /** When `rangeLabels` is `true`, specifies the format of displayed labels. */\n  @Prop({ reflect: true }) rangeLabelType: MeterLabelType = \"percent\";\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** When `rangeLabelType` is `\"units\"` and either `valueLabel` or `rangeLabels` are `true`, displays beside the `value` and/or  `min` values. */\n  @Prop() unitLabel = \"\";\n\n  /** Specifies the current value of the component. */\n  @Prop({ mutable: true }) value: number;\n\n  /** When `true`, displays the current value. */\n  @Prop({ reflect: true }) valueLabel = false;\n\n  /** When `valueLabel` is `true`, specifies the format of displayed label. */\n  @Prop({ reflect: true }) valueLabelType: MeterLabelType = \"percent\";\n\n  @Watch(\"rangeLabels\")\n  @Watch(\"rangeLabelType\")\n  @Watch(\"unitLabel\")\n  @Watch(\"valueLabel\")\n  @Watch(\"valueLabelType\")\n  handleLabelChange(): void {\n    this.updateLabels();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    this.calculateValues();\n    afterConnectDefaultValueSet(this, this.value);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n    this.updateLabels();\n  }\n\n  connectedCallback(): void {\n    connectLocalized(this);\n    connectForm(this);\n    this.resizeObserver?.observe(this.el);\n  }\n\n  disconnectedCallback(): void {\n    disconnectLocalized(this);\n    disconnectForm(this);\n    this.resizeObserver?.disconnect();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteMeterElement;\n\n  defaultValue: Meter[\"value\"];\n\n  formEl: HTMLFormElement;\n\n  labelEl: HTMLCalciteLabelElement;\n\n  private highLabelEl: HTMLDivElement;\n\n  private labelFlipMax = 0.8;\n\n  private labelFlipProximity = 0.15;\n\n  private lowLabelEl: HTMLDivElement;\n\n  private maxLabelEl: HTMLDivElement;\n\n  private maxPercent = 100;\n\n  private meterContainerEl: HTMLDivElement;\n\n  private minLabelEl: HTMLDivElement;\n\n  private minPercent = 0;\n\n  private percentFormatting: {\n    formatter: Intl.NumberFormat;\n    locale: SupportedLocale;\n  };\n\n  private resizeObserver = createObserver(\"resize\", () => this.resizeHandler());\n\n  private valueLabelEl: HTMLDivElement;\n\n  @State() currentPercent: number;\n\n  @State() effectiveLocale: string;\n\n  @State() highActive: boolean;\n\n  @State() highPercent: number;\n\n  @State() lowActive: boolean;\n\n  @State() lowPercent: number;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private resizeHandler(): void {\n    this.updateLabels();\n  }\n\n  private updateLabels(): void {\n    if (this.valueLabelEl) {\n      this.determineValueLabelPosition();\n    }\n    if (this.rangeLabels) {\n      this.determineVisibleLabels();\n    }\n  }\n\n  private calculateValues(): void {\n    const { min, max, low, high, value } = this;\n    const lowPercent = (100 * (low - min)) / (max - min);\n    const highPercent = (100 * (high - min)) / (max - min);\n    const currentPercent = (100 * (value - min)) / (max - min);\n\n    if (!low || low < min || low > high || low > max) {\n      this.low = min;\n    }\n    if (!high || high > max || high < low || high < min) {\n      this.high = max;\n    }\n    if (!value) {\n      this.value = min;\n    }\n\n    this.lowPercent = lowPercent;\n    this.highPercent = highPercent;\n    this.currentPercent = value ? currentPercent : 0;\n    this.lowActive = !!low && low > min && (!value || low > value) && (!high || low < high);\n    this.highActive =\n      !!high && min <= high && high < max && (!value || high > value) && (!low || high > low);\n  }\n\n  private formatLabel = (value: number, labelType: MeterLabelType): string => {\n    if (labelType === \"percent\") {\n      if (!this.percentFormatting) {\n        const locale = getSupportedLocale(this.effectiveLocale);\n        const formatter = new Intl.NumberFormat(locale, {\n          useGrouping: this.groupSeparator,\n          style: \"percent\",\n        });\n        this.percentFormatting = { formatter, locale };\n      }\n      return this.percentFormatting.formatter.format(value);\n    } else {\n      numberStringFormatter.numberFormatOptions = {\n        locale: this.effectiveLocale,\n        numberingSystem: this.numberingSystem,\n        useGrouping: this.groupSeparator,\n      };\n      return numberStringFormatter.localize(value.toString());\n    }\n  };\n\n  private getMeterKindCssClass(): string {\n    const { low, high, min, max, value } = this;\n    const lowest = low ? low : min;\n    const highest = high ? high : max;\n    const aboveLowest = value >= lowest;\n    const belowLowest = value < lowest;\n    const aboveHighest = value >= highest;\n    const belowHighest = value < highest;\n\n    if (!value || (!low && belowHighest) || belowLowest) {\n      return CSS.success;\n    } else if (aboveLowest && belowHighest) {\n      return CSS.warning;\n    } else if (aboveHighest) {\n      return CSS.danger;\n    } else {\n      return CSS.success;\n    }\n  }\n\n  private intersects(el1: HTMLDivElement, el2: HTMLDivElement): boolean {\n    return el1 && el2 && intersects(el1.getBoundingClientRect(), el2.getBoundingClientRect());\n  }\n\n  private determineVisibleLabels(): void {\n    const { minLabelEl, lowLabelEl, highLabelEl, maxLabelEl } = this;\n    const highMaxOverlap = this.intersects(highLabelEl, maxLabelEl);\n    const lowHighOverlap = this.intersects(lowLabelEl, highLabelEl);\n    const lowMaxOverlap = this.intersects(lowLabelEl, maxLabelEl);\n    const minHighOverlap = this.intersects(minLabelEl, highLabelEl);\n    const minLowOverlap = this.intersects(minLabelEl, lowLabelEl);\n    const minMaxOverlap = this.intersects(minLabelEl, maxLabelEl);\n    const hiddenClass = CSS.labelHidden;\n\n    if (lowLabelEl) {\n      if (minLowOverlap || lowMaxOverlap || lowHighOverlap) {\n        lowLabelEl.classList.add(hiddenClass);\n      } else {\n        lowLabelEl.classList.remove(hiddenClass);\n      }\n    }\n\n    if (highLabelEl) {\n      if (minHighOverlap || lowMaxOverlap || highMaxOverlap) {\n        highLabelEl.classList.add(hiddenClass);\n      } else {\n        highLabelEl.classList.remove(hiddenClass);\n      }\n    }\n\n    if (minLabelEl && maxLabelEl) {\n      if (minMaxOverlap) {\n        maxLabelEl.classList.add(hiddenClass);\n      } else {\n        maxLabelEl.classList.remove(hiddenClass);\n      }\n    }\n  }\n\n  private determineValueLabelPosition(): void {\n    const { valueLabelEl, meterContainerEl, currentPercent } = this;\n    const valuePosition = currentPercent > 100 ? 100 : currentPercent > 0 ? currentPercent : 0;\n    const valueLabelWidth = valueLabelEl.getBoundingClientRect().width;\n    const containerWidth = meterContainerEl.getBoundingClientRect().width;\n    const labelWidthPercent = (100 * (valueLabelWidth - 0)) / (containerWidth - 0);\n\n    if (valuePosition + labelWidthPercent >= 100) {\n      valueLabelEl.style.insetInlineEnd = \"0%\";\n      valueLabelEl.style.removeProperty(\"inset-inline-start\");\n    } else {\n      valueLabelEl.style.insetInlineStart = `${valuePosition}% `;\n      valueLabelEl.style.removeProperty(\"inset-inline-end\");\n    }\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  //--------------------------------------------------------------------------\n\n  renderMeterFill(): VNode {\n    const { currentPercent, fillType } = this;\n    const kindClass = this.getMeterKindCssClass();\n    return (\n      <div\n        class={{ [CSS.fill]: true, [kindClass]: fillType !== \"single\" }}\n        style={{ width: `${currentPercent}%` }}\n      />\n    );\n  }\n\n  renderRangeLine(position: number): VNode {\n    const style = { insetInlineStart: `${position}%` };\n    return <div class={CSS.stepLine} style={style} />;\n  }\n\n  renderValueLabel(): VNode {\n    const { currentPercent, valueLabelType, unitLabel, value } = this;\n    const label = this.formatLabel(\n      valueLabelType === \"percent\" ? currentPercent / 100 : value || 0,\n      valueLabelType,\n    );\n    return (\n      <div\n        class={{ [CSS.label]: true, [CSS.labelValue]: true }}\n        key=\"low-label-line\"\n        // eslint-disable-next-line react/jsx-sort-props\n        ref={(el) => (this.valueLabelEl = el)}\n      >\n        {label}\n        {unitLabel && valueLabelType !== \"percent\" && (\n          <span class={CSS.unitLabel}>&nbsp;{unitLabel}</span>\n        )}\n      </div>\n    );\n  }\n\n  renderMinLabel(): VNode {\n    const { rangeLabelType, min, minPercent, unitLabel } = this;\n    const style = { insetInlineStart: `${minPercent}%` };\n    const labelMin = this.formatLabel(\n      rangeLabelType === \"percent\" ? minPercent : min,\n      rangeLabelType,\n    );\n    return (\n      <div\n        class={{ [CSS.label]: true, [CSS.labelRange]: true }}\n        key=\"min-label-line\"\n        style={style}\n        // eslint-disable-next-line react/jsx-sort-props\n        ref={(el) => (this.minLabelEl = el)}\n      >\n        {labelMin}\n        {unitLabel && rangeLabelType !== \"percent\" && (\n          <span class={CSS.unitLabel}>&nbsp;{unitLabel}</span>\n        )}\n      </div>\n    );\n  }\n\n  renderLowLabel(): VNode {\n    const { rangeLabelType, low, lowPercent, highPercent, labelFlipProximity } = this;\n    const label = low\n      ? this.formatLabel(rangeLabelType === \"percent\" ? lowPercent / 100 : low, rangeLabelType)\n      : \"\";\n    const styleDefault = { insetInlineStart: `${lowPercent}%` };\n    const styleFlipped = { insetInlineEnd: `${100 - lowPercent}%` };\n    const style =\n      (highPercent - lowPercent) / 100 < labelFlipProximity ? styleFlipped : styleDefault;\n    return (\n      <div\n        class={{ [CSS.label]: true, [CSS.labelRange]: true }}\n        key=\"low-label-line\"\n        style={style}\n        // eslint-disable-next-line react/jsx-sort-props\n        ref={(el) => (this.lowLabelEl = el)}\n      >\n        {label}\n      </div>\n    );\n  }\n\n  renderHighLabel(): VNode {\n    const { rangeLabelType, high, highPercent, labelFlipMax } = this;\n    const label = high\n      ? this.formatLabel(rangeLabelType === \"percent\" ? highPercent / 100 : high, rangeLabelType)\n      : \"\";\n    const styleDefault = { insetInlineStart: `${highPercent}%` };\n    const styleFlipped = { insetInlineEnd: `${100 - highPercent}%` };\n    const style = highPercent / 100 >= labelFlipMax ? styleFlipped : styleDefault;\n    return (\n      <div\n        class={{ [CSS.label]: true, [CSS.labelRange]: true }}\n        key=\"high-label-line\"\n        style={style}\n        // eslint-disable-next-line react/jsx-sort-props\n        ref={(el) => (this.highLabelEl = el as HTMLDivElement)}\n      >\n        {label}\n      </div>\n    );\n  }\n\n  renderMaxLabel(): VNode {\n    const { rangeLabelType, max, maxPercent } = this;\n    const style = { insetInlineEnd: `${100 - maxPercent}%` };\n    const labelMax = this.formatLabel(\n      rangeLabelType === \"percent\" ? maxPercent / 100 : max,\n      rangeLabelType,\n    );\n    return (\n      <div\n        class={{ [CSS.label]: true, [CSS.labelRange]: true }}\n        key=\"max-label-line\"\n        style={style}\n        // eslint-disable-next-line react/jsx-sort-props\n        ref={(el) => (this.maxLabelEl = el as HTMLDivElement)}\n      >\n        {labelMax}\n      </div>\n    );\n  }\n\n  render(): VNode {\n    const {\n      appearance,\n      currentPercent,\n      highActive,\n      highPercent,\n      label,\n      lowActive,\n      lowPercent,\n      max,\n      maxPercent,\n      min,\n      minPercent,\n      rangeLabels,\n      rangeLabelType,\n      unitLabel,\n      value,\n      valueLabel,\n      valueLabelType,\n    } = this;\n    const textPercentLabelWithPercent = this.formatLabel(currentPercent / 100, \"percent\");\n    const textUnitLabel = `${value} ${unitLabel}`;\n    const valueText =\n      valueLabelType === \"percent\"\n        ? textPercentLabelWithPercent\n        : unitLabel\n          ? textUnitLabel\n          : undefined;\n    return (\n      <Host>\n        <div\n          aria-label={label}\n          aria-valuemax={rangeLabelType === \"percent\" ? maxPercent : max}\n          aria-valuemin={rangeLabelType === \"percent\" ? minPercent : min}\n          aria-valuenow={valueLabelType === \"percent\" ? currentPercent : value}\n          aria-valuetext={valueText}\n          class={{\n            [CSS.container]: true,\n            [CSS.stepsVisible]: rangeLabels,\n            [CSS.valueVisible]: valueLabel,\n            [appearance]: appearance !== \"outline-fill\",\n          }}\n          role=\"meter\"\n          // eslint-disable-next-line react/jsx-sort-props\n          ref={(el) => (this.meterContainerEl = el as HTMLDivElement)}\n        >\n          {this.renderMeterFill()}\n          {valueLabel && this.renderValueLabel()}\n          {lowActive && this.renderRangeLine(lowPercent)}\n          {highActive && this.renderRangeLine(highPercent)}\n          {rangeLabels && this.renderMinLabel()}\n          {rangeLabels && lowActive && this.renderLowLabel()}\n          {rangeLabels && highActive && this.renderHighLabel()}\n          {rangeLabels && this.renderMaxLabel()}\n        </div>\n      </Host>\n    );\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
