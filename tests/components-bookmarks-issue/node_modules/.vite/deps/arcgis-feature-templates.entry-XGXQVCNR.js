import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  newWidgetsFeatureTemplates
} from "./chunk-YXW2SI4L.js";
import {
  checkForView
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-feature-templates.entry.js
var featureTemplatesCss = "";
var ArcgisFeatureTemplates = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.widgetReady = createEvent(this, "widgetReady", 7);
    this.featureTemplatesSelect = createEvent(this, "featureTemplatesSelect", 7);
    this._watchHandles = [];
    this.referenceElement = void 0;
    this.position = "bottom-left";
    this.expandable = false;
    this.widget = void 0;
    this.enableListScroll = void 0;
    this.filterFunction = void 0;
    this.filterText = void 0;
    this.groupBy = void 0;
    this.layers = void 0;
    this.selectionMode = void 0;
    this.visibleElements = void 0;
  }
  enableListScrolWatcher(newValue) {
    if (newValue !== void 0 && this.widget) {
      this.widget.enableListScroll = newValue;
    }
  }
  filterFunctionWatcher(newValue) {
    if (this.widget) {
      this.widget.filterFunction = newValue;
    }
  }
  filterTextWatcher(newValue) {
    if (this.widget) {
      this.widget.filterText = newValue;
    }
  }
  groupByWatcher(newValue) {
    if (this.widget) {
      this.widget.groupBy = newValue;
    }
  }
  layersWatcher(newValue) {
    if (this.widget) {
      this.widget.layers = newValue;
    }
  }
  selectionModeWatcher(newValue) {
    if (this.widget) {
      this.widget.selectionMode = newValue;
    }
  }
  visibleElementsWatcher(newValue) {
    if (this.widget) {
      this.widget.visibleElements = newValue;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = this._createParams();
    const widget = await newWidgetsFeatureTemplates(params);
    this.widget = widget;
    this._proxyEvents();
    this.widgetReady.emit({ widget: this.widget });
    checkForView(this);
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    if (this.expandable) {
      return h("arcgis-expand", { position: this.position, ref: (el) => this.expandElem = el }, h("div", { ref: (el) => this.childElem = el }));
    }
    return h("div", { ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  _createParams() {
    const params = {
      container: this.childElem
    };
    if (this.enableListScroll !== void 0) {
      params.enableListScroll = this.enableListScroll;
    }
    if (this.filterFunction) {
      params.filterFunction = this.filterFunction;
    }
    if (this.filterText) {
      params.filterText = this.filterText;
    }
    if (this.groupBy) {
      params.groupBy = this.groupBy;
    }
    if (this.layers) {
      params.layers = this.layers;
    }
    if (this.selectionMode !== void 0) {
      params.selectionMode = this.selectionMode;
    }
    if (this.visibleElements) {
      params.visibleElements = this.visibleElements;
    }
    return params;
  }
  _proxyEvents() {
    this.widget.on("select", (e) => this.featureTemplatesSelect.emit(e));
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "enableListScroll": ["enableListScrolWatcher"],
      "filterFunction": ["filterFunctionWatcher"],
      "filterText": ["filterTextWatcher"],
      "groupBy": ["groupByWatcher"],
      "layers": ["layersWatcher"],
      "selectionMode": ["selectionModeWatcher"],
      "visibleElements": ["visibleElementsWatcher"]
    };
  }
};
ArcgisFeatureTemplates.style = featureTemplatesCss;
export {
  ArcgisFeatureTemplates as arcgis_feature_templates
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-feature-templates.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-feature-templates.entry-XGXQVCNR.js.map
