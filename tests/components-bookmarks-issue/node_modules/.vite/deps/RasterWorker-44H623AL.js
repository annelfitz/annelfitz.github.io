import {
  R as R2,
  i
} from "./chunk-6IGKQIMQ.js";
import {
  M,
  T,
  ee
} from "./chunk-QQDXHR2B.js";
import {
  U2,
  h2 as h,
  j,
  m3 as m
} from "./chunk-TBCOV2E5.js";
import {
  D,
  E,
  R,
  U,
  W,
  f2 as f,
  g,
  s2,
  u2 as u
} from "./chunk-HUFLW46E.js";
import "./chunk-XKG6TWCH.js";
import "./chunk-XGTCDM4C.js";
import "./chunk-BMT3OVAP.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-VBUVOOM6.js";
import {
  s
} from "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import {
  w
} from "./chunk-IZKCZQUY.js";
import {
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import "./chunk-D25BO7X7.js";
import "./chunk-NDIXNREV.js";
import "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/layers/support/RasterWorker.js
var J = class {
  convertVectorFieldData(r) {
    const t = g.fromJSON(r.pixelBlock), s3 = f(t, r.type);
    return Promise.resolve(null != s3 ? s3.toJSON() : null);
  }
  computeStatisticsHistograms(r) {
    const t = g.fromJSON(r.pixelBlock), s3 = m(t);
    return Promise.resolve(s3);
  }
  async decode(r) {
    const e = await j(r.data, r.options);
    return e && e.toJSON();
  }
  symbolize(r) {
    r.pixelBlock = g.fromJSON(r.pixelBlock), r.extent = r.extent ? w.fromJSON(r.extent) : null;
    const t = this.symbolizer.symbolize(r);
    return Promise.resolve(null != t ? t.toJSON() : null);
  }
  async updateSymbolizer(r) {
    var _a;
    this.symbolizer = U2.fromJSON(r.symbolizerJSON), r.histograms && "rasterStretch" === ((_a = this.symbolizer) == null ? void 0 : _a.rendererJSON.type) && (this.symbolizer.rendererJSON.histograms = r.histograms);
  }
  async updateRasterFunction(r) {
    this.rasterFunction = R2(r.rasterFunctionJSON);
  }
  async process(r) {
    var _a;
    const t = this.rasterFunction.process({ extent: w.fromJSON(r.extent), primaryPixelBlocks: r.primaryPixelBlocks.map((r2) => null != r2 ? g.fromJSON(r2) : null), primaryPixelSizes: (_a = r.primaryPixelSizes) == null ? void 0 : _a.map((r2) => null != r2 ? x.fromJSON(r2) : null), primaryRasterIds: r.primaryRasterIds });
    return null != t ? t.toJSON() : null;
  }
  stretch(r) {
    const t = this.symbolizer.simpleStretch(g.fromJSON(r.srcPixelBlock), r.stretchParams);
    return Promise.resolve(t == null ? void 0 : t.toJSON());
  }
  estimateStatisticsHistograms(r) {
    const t = h(g.fromJSON(r.srcPixelBlock));
    return Promise.resolve(t);
  }
  split(r) {
    const t = W(g.fromJSON(r.srcPixelBlock), r.tileSize, r.maximumPyramidLevel ?? 0, false === r.useBilinear);
    return t && t.forEach((r2, e) => {
      t.set(e, r2 == null ? void 0 : r2.toJSON());
    }), Promise.resolve(t);
  }
  clipTile(r) {
    const t = g.fromJSON(r.pixelBlock), s3 = E({ ...r, pixelBlock: t });
    return Promise.resolve(s3 == null ? void 0 : s3.toJSON());
  }
  async mosaicAndTransform(r) {
    const t = r.srcPixelBlocks.map((r2) => r2 ? new g(r2) : null), s3 = U(t, r.srcMosaicSize, { blockWidths: r.blockWidths, alignmentInfo: r.alignmentInfo, clipOffset: r.clipOffset, clipSize: r.clipSize });
    let o, l = s3;
    return r.coefs && (l = D(s3, r.destDimension, r.coefs, r.sampleSpacing, r.interpolation)), r.projectDirections && r.gcsGrid && (o = R(r.destDimension, r.gcsGrid), l = u(l, r.isUV ? "vector-uv" : "vector-magdir", o)), { pixelBlock: l == null ? void 0 : l.toJSON(), localNorthDirections: o };
  }
  async createFlowMesh(r, e) {
    const t = { data: new Float32Array(r.flowData.buffer), mask: new Uint8Array(r.flowData.maskBuffer), width: r.flowData.width, height: r.flowData.height }, { vertexData: s3, indexData: o } = await s2(r.meshType, r.simulationSettings, t, e.signal);
    return { result: { vertexBuffer: s3.buffer, indexBuffer: o.buffer }, transferList: [s3.buffer, o.buffer] };
  }
  async getProjectionOffsetGrid(e) {
    const t = w.fromJSON(e.projectedExtent), s3 = w.fromJSON(e.srcBufferExtent);
    let o = null;
    e.datumTransformationSteps && (o = new s({ steps: e.datumTransformationSteps })), (e.includeGCSGrid || M(t.spatialReference, s3.spatialReference, o)) && await T();
    const i2 = e.rasterTransform ? i(e.rasterTransform) : null;
    return ee({ ...e, projectedExtent: t, srcBufferExtent: s3, datumTransformation: o, rasterTransform: i2 });
  }
};
export {
  J as default
};
//# sourceMappingURL=RasterWorker-44H623AL.js.map
