import {
  importCoreReactiveUtils
} from "./chunk-YXW2SI4L.js";
import {
  Host,
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-version-management-service-item_2.entry.js
var ArcgisVersionManagementServiceItem = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.versionItemActionClickedEventWithServiceUrl = createEvent(this, "versionItemActionClickedEventWithServiceUrl", 7);
    this.versionListActionClickedEvent = createEvent(this, "versionListActionClickedEvent", 7);
    this._versionListEventListeners = /* @__PURE__ */ new Map();
    this._watchHandles = [];
    this._versionItemActionClickedEventWithServiceUrl = (e) => {
      this.versionItemActionClickedEventWithServiceUrl.emit(e.detail);
    };
    this._versionListActionClickedEvent = (e) => {
      this.versionListActionClickedEvent.emit(e.detail);
    };
    this.flowElement = void 0;
    this.heading = void 0;
    this.serviceUrl = void 0;
    this.strings = void 0;
    this.viewModel = void 0;
    this.state = void 0;
  }
  async componentDidLoad() {
    const { watch } = await importCoreReactiveUtils();
    this._watchHandles.push(watch(() => this.viewModel.state, (state) => {
      this.state = state;
    }));
  }
  async componentWillLoad() {
    this.state = this.viewModel.state;
  }
  disconnectedCallback() {
    this._watchHandles.forEach((handle) => {
      handle.remove();
    });
    this._watchHandles = [];
    this._removeVersionListEventListeners(this._versionList);
  }
  render() {
    const { flowElement, heading, serviceUrl, strings, viewModel } = this;
    let { _versionList } = this;
    const serviceName = viewModel.serviceNameLookup.get(serviceUrl);
    return h(Host, null, h("calcite-panel", { heading: serviceName }, h("calcite-action", { id: `actionManageVersions_${serviceName}`, icon: "list", scale: "s", slot: "header-actions-end", text: "", onClick: async () => {
      await viewModel.getVersionInfos(serviceUrl, false);
      _versionList = document.createElement("arcgis-version-management-version-list");
      _versionList.addEventListener("calciteFlowItemBack", async () => {
        _versionList.remove();
      });
      _versionList.heading = heading;
      _versionList.serviceUrl = serviceUrl;
      _versionList.serviceName = serviceName;
      _versionList.strings = strings;
      _versionList.userHasAdvancedEditingUserTypeExtension = viewModel.advancedEditingUserTypeExtensionLookup.get(serviceUrl);
      _versionList.versionInfos = viewModel.versionInfoLookup.get(serviceUrl);
      _versionList.viewModel = viewModel;
      this._addVersionListEventListeners(_versionList);
      flowElement.append(_versionList);
    } }), h("calcite-tooltip", { "overlay-positioning": "fixed", referenceElement: `actionManageVersions_${serviceName}` }, h("span", null, strings.headers.manageVersions))));
  }
  _addVersionListEventListeners(versionList) {
    versionList.addEventListener("versionItemActionClickedEventWithServiceUrl", this._versionItemActionClickedEventWithServiceUrl);
    this._versionListEventListeners.set("versionItemActionClickedEventWithServiceUrl", this._versionItemActionClickedEventWithServiceUrl);
    versionList.addEventListener("versionListActionClickedEvent", this._versionListActionClickedEvent);
    this._versionListEventListeners.set("versionListActionClickedEvent", this._versionListActionClickedEvent);
  }
  _removeVersionListEventListeners(versionList) {
    for (const [type, listener] of this._versionListEventListeners) {
      versionList.removeEventListener(type, listener);
    }
  }
  get _hostElement() {
    return getElement(this);
  }
};
var ArcgisVersionManagementVersionProperties = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.versionPropertiesSaveClickedEvent = createEvent(this, "versionPropertiesSaveClickedEvent", 7);
    this._watchHandles = [];
    this.flowElement = void 0;
    this.serviceUrl = void 0;
    this.strings = void 0;
    this.versionInfo = void 0;
    this.viewModel = void 0;
    this.executionError = void 0;
    this.state = void 0;
  }
  async componentDidLoad() {
    await this.viewModel.getVersionInfos(this.serviceUrl, false);
  }
  async componentWillLoad() {
    const { watch } = await importCoreReactiveUtils();
    this._watchHandles.push(watch(() => this.viewModel.state, (state) => {
      this.state = state;
    }));
  }
  disconnectedCallback() {
    this._watchHandles.forEach((handle) => {
      handle.remove();
    });
    this._watchHandles = [];
  }
  render() {
    var _a;
    const { serviceUrl, strings, versionInfo } = this;
    const { viewModel: { executionError } } = this;
    return h(Host, null, h("calcite-flow-item", { description: versionInfo ? versionInfo.versionIdentifier.name : "", heading: versionInfo ? strings.actions.editVersion : strings.actions.newVersion }, h("calcite-panel", { loading: this.state === "executing" }, h("div", { class: "div-content" }, h("calcite-label", null, strings.input.versionName, h("calcite-input-text", { id: "inputName", maxLength: 62, value: versionInfo ? versionInfo.versionIdentifier.name.split(".")[1] : "" })), h("calcite-label", null, strings.input.versionDescription, h("calcite-text-area", { id: "inputDescription", resize: "vertical", value: versionInfo ? versionInfo.description : "" })), h("calcite-label", null, strings.input.versionAccess, h("calcite-chip-group", { id: "chipGroupAccessLevel", selectionMode: "single", label: "" }, h("calcite-chip", { selected: (versionInfo == null ? void 0 : versionInfo.access) === "public" || !versionInfo, value: "public" }, strings.accessLevels.public), h("calcite-chip", { selected: (versionInfo == null ? void 0 : versionInfo.access) === "protected", value: "protected" }, strings.accessLevels.protected), h("calcite-chip", { selected: (versionInfo == null ? void 0 : versionInfo.access) === "private", value: "private" }, strings.accessLevels.private))), h("calcite-label", null, strings.input.versionOwner, h("calcite-input-text", { id: "inputOwner", disabled: !this.viewModel.advancedEditingUserTypeExtensionLookup.get(serviceUrl), value: versionInfo ? versionInfo.versionIdentifier.name.split(".")[0] : (_a = this.viewModel.userLookup.get(serviceUrl)) == null ? void 0 : _a.toUpperCase() })), h("calcite-button", { appearance: "outline", slot: "footer", width: "half", onClick: () => {
      void this.flowElement.back();
    } }, strings.actions.cancelSave), h("calcite-button", { slot: "footer", width: "half", onClick: async () => {
      const textInputs = Array.from(this._hostElement.getElementsByTagName("calcite-input-text"));
      const inputDescription = this._hostElement.getElementsByTagName("calcite-text-area")[0];
      const inputName = textInputs.find((input) => input.id === "inputName");
      const inputOwner = textInputs.find((input) => input.id === "inputOwner");
      const chipGroupAccessLevel = Array.from(this._hostElement.getElementsByTagName("calcite-chip-group"))[0];
      const info = {
        access: chipGroupAccessLevel.selectedItems[0].value,
        description: inputDescription.value,
        versionIdentifier: {
          name: inputOwner.value !== "" ? `${inputOwner.value}.${inputName.value}` : inputName.value,
          guid: versionInfo ? versionInfo.versionIdentifier.guid : ""
        }
      };
      this.versionPropertiesSaveClickedEvent.emit({
        serviceUrl,
        versionInfo: info
      });
    } }, strings.actions.saveVersion)), this.state === "failed" ? h("calcite-notice", { class: "notice", closable: true, kind: "warning", open: true, scale: "s", slot: "footer" }, h("div", { slot: "message" }, this._getExecutionError(executionError))) : void 0)));
  }
  _getExecutionError(executionError) {
    const { strings: { executionErrors } } = this;
    switch (executionError) {
      case "no-advanced-editing-user-type-extension":
        return executionErrors.noAdvancedEditingUserTypeExtension;
      case "no-feature-service-found":
        return executionErrors.noFeatureServiceFound;
      case "no-valid-enterprise-version":
        return executionErrors.notValidEnterpriseVersion;
      case "no-valid-version-name":
        return executionErrors.invalidVersionName;
      default:
        return executionError;
    }
  }
  get _hostElement() {
    return getElement(this);
  }
};
export {
  ArcgisVersionManagementServiceItem as arcgis_version_management_service_item,
  ArcgisVersionManagementVersionProperties as arcgis_version_management_version_properties
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-version-management-service-item_2.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-version-management-service-item_2.entry-GJOW6C25.js.map
