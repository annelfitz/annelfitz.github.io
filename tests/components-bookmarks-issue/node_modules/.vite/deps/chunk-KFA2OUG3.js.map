{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/esm/src/components/input/common/input.ts"],
  "sourcesContent": ["export type InputComponent = NumericInputComponent | TextualInputComponent;\n\nexport interface NumericInputComponent {\n  min: number;\n  max: number;\n  step: number | \"any\";\n}\n\nexport interface TextualInputComponent {\n  pattern?: string;\n  minLength: number;\n  maxLength: number;\n}\n\n/**\n * Exported for testing purposes only\n */\nexport const minMaxStepTypes = [\"date\", \"datetime-local\", \"month\", \"number\", \"range\", \"time\", \"week\"];\n\n/**\n * Exported for testing purposes only\n */\nexport const patternTypes = [\"email\", \"password\", \"search\", \"tel\", \"text\", \"url\"];\n\n/**\n * Exported for testing purposes only\n */\nexport const minMaxLengthTypes = [\"email\", \"password\", \"search\", \"tel\", \"text\", \"textarea\", \"url\"];\n\nfunction updateConstraintValidation(\n  inputComponent: InputComponent,\n  input: HTMLInputElement,\n  propName: string,\n  matchesType: boolean,\n): void {\n  const attributeName = propName.toLowerCase();\n  const value = inputComponent[propName];\n\n  if (matchesType && value != null) {\n    input.setAttribute(attributeName, `${value}`);\n  } else {\n    // we remove the attribute to ensure validation-constraints are properly reset\n    input.removeAttribute(attributeName);\n  }\n}\n\n/**\n * Synchronizes the hidden form input with the validation-related input properties.\n *\n * Note: loss of precision is expected due to the hidden input's value and validation-constraint props being strings.\n *\n * @param type - The input type.\n * @param inputComponent\n * @param hiddenFormInput\n */\nexport function syncHiddenFormInput(\n  type: HTMLInputElement[\"type\"] | \"textarea\",\n  inputComponent: InputComponent,\n  hiddenFormInput: HTMLInputElement,\n): void {\n  hiddenFormInput.type = type === \"textarea\" ? \"text\" : type;\n\n  const isMinMaxStepType = minMaxStepTypes.includes(type);\n  const numericInputComponent = inputComponent as NumericInputComponent;\n\n  updateConstraintValidation(numericInputComponent, hiddenFormInput, \"min\", isMinMaxStepType);\n  updateConstraintValidation(numericInputComponent, hiddenFormInput, \"max\", isMinMaxStepType);\n  updateConstraintValidation(numericInputComponent, hiddenFormInput, \"step\", isMinMaxStepType);\n\n  const isMinMaxLengthType = minMaxLengthTypes.includes(type);\n\n  const textualInputComponent = inputComponent as TextualInputComponent;\n\n  updateConstraintValidation(textualInputComponent, hiddenFormInput, \"minLength\", isMinMaxLengthType);\n  updateConstraintValidation(textualInputComponent, hiddenFormInput, \"maxLength\", isMinMaxLengthType);\n\n  const isPatternType = patternTypes.includes(type);\n\n  updateConstraintValidation(textualInputComponent, hiddenFormInput, \"pattern\", isPatternType);\n}\n"],
  "mappings": ";AAiBO,IAAM,kBAAkB,CAAC,QAAQ,kBAAkB,SAAS,UAAU,SAAS,QAAQ,MAAM;AAK7F,IAAM,eAAe,CAAC,SAAS,YAAY,UAAU,OAAO,QAAQ,KAAK;AAKzE,IAAM,oBAAoB,CAAC,SAAS,YAAY,UAAU,OAAO,QAAQ,YAAY,KAAK;AAEjG,SAAS,2BACP,gBACA,OACA,UACA,aAAoB;AAEpB,QAAM,gBAAgB,SAAS,YAAW;AAC1C,QAAM,QAAQ,eAAe,QAAQ;AAErC,MAAI,eAAe,SAAS,MAAM;AAChC,UAAM,aAAa,eAAe,GAAG,KAAK,EAAE;SACvC;AAEL,UAAM,gBAAgB,aAAa;;AAEvC;SAWgB,oBACd,MACA,gBACA,iBAAiC;AAEjC,kBAAgB,OAAO,SAAS,aAAa,SAAS;AAEtD,QAAM,mBAAmB,gBAAgB,SAAS,IAAI;AACtD,QAAM,wBAAwB;AAE9B,6BAA2B,uBAAuB,iBAAiB,OAAO,gBAAgB;AAC1F,6BAA2B,uBAAuB,iBAAiB,OAAO,gBAAgB;AAC1F,6BAA2B,uBAAuB,iBAAiB,QAAQ,gBAAgB;AAE3F,QAAM,qBAAqB,kBAAkB,SAAS,IAAI;AAE1D,QAAM,wBAAwB;AAE9B,6BAA2B,uBAAuB,iBAAiB,aAAa,kBAAkB;AAClG,6BAA2B,uBAAuB,iBAAiB,aAAa,kBAAkB;AAElG,QAAM,gBAAgB,aAAa,SAAS,IAAI;AAEhD,6BAA2B,uBAAuB,iBAAiB,WAAW,aAAa;AAC7F;",
  "names": []
}
