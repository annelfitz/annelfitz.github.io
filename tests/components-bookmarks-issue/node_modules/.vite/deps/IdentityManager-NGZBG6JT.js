import {
  c as c2
} from "./chunk-CXNX736Z.js";
import {
  D,
  e2,
  r as r2
} from "./chunk-RGCWZ2KZ.js";
import {
  n
} from "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import "./chunk-2SDMYJDE.js";
import "./chunk-TPLOIZC7.js";
import {
  s as s2
} from "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import {
  A,
  Et,
  F,
  I,
  K,
  T,
  U,
  _,
  et,
  i,
  t as t2,
  t3,
  v,
  x
} from "./chunk-SAYWXQVM.js";
import {
  f
} from "./chunk-SBL4URUW.js";
import "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import {
  o as o2
} from "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  L,
  c2 as c,
  m,
  o3 as o
} from "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  l,
  r,
  s,
  t
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/identity/IdentityModal.js
var c3 = "esri-identity-modal";
var p = { base: c3, info: `${c3}__info`, notice: `${c3}__notice` };
var d = "ArcGIS Online";
var u = class extends D {
  constructor(t5, e4) {
    super(t5, e4), this.container = document.createElement("div"), this.error = null, this.oAuthPrompt = false, this.open = false, this.signingIn = false, this.server = null, this.resource = null, this._usernameInputNode = null, this._passwordInputNode = null, document.body.appendChild(this.container);
  }
  loadDependencies() {
    return r2({ button: () => import("./calcite-button-V4T5NPWY.js"), input: () => import("./calcite-input-CHG5BNQ7.js"), label: () => import("./calcite-label-W4VTHQAF.js"), modal: () => import("./calcite-modal-O6WMPC67.js"), notice: () => import("./calcite-notice-Q2MN4Y4I.js") });
  }
  get title() {
    var _a;
    return (_a = this.commonMessages) == null ? void 0 : _a.auth.signIn;
  }
  render() {
    var _a;
    const { open: t5, title: e4, messages: s6, signingIn: o3, oAuthPrompt: i4, server: n2, resource: c4, error: u2 } = this, { info: m3, oAuthInfo: h, lblItem: g, invalidUser: b2, noAuthService: v2, lblUser: y2, lblPwd: f2, lblCancel: _2, lblSigning: I2, lblOk: j2 } = s6;
    return n("div", { class: this.classes(p.base, c2()) }, n("form", { bind: this, onsubmit: this._submit }, n("calcite-modal", { bind: this, open: t5, outsideCloseDisabled: true, scale: "s", widthScale: "s", onCalciteModalClose: this._cancel, onCalciteModalOpen: this._focusUsernameInput }, n("div", { slot: "header" }, e4), n("div", { slot: "content" }, n("div", { class: p.info }, s2(i4 ? h : m3, { server: n2 && /\.arcgis\.com/i.test(n2) ? d : n2, resource: `(${c4 || g})` })), u2 ? n("calcite-notice", { class: p.notice, icon: "exclamation-mark-triangle", kind: "danger", open: true }, n("div", { slot: "message" }, ((_a = u2.details) == null ? void 0 : _a.httpStatus) ? b2 : v2)) : null, i4 ? null : [n("calcite-label", null, y2, n("calcite-input", { afterCreate: (t6) => this._usernameInputNode = t6, autocomplete: "off", bind: this, name: "username", required: true, spellcheck: false, type: "text", value: "" })), n("calcite-label", null, f2, n("calcite-input", { afterCreate: (t6) => this._passwordInputNode = t6, bind: this, name: "password", required: true, type: "password", value: "" }))]), n("calcite-button", { appearance: "outline", bind: this, onclick: this._cancel, slot: "secondary", type: "button", width: "full" }, _2), n("calcite-button", { loading: !!o3, slot: "primary", type: "submit", width: "full" }, o3 ? I2 : j2))));
  }
  _focusUsernameInput() {
    requestAnimationFrame(() => {
      var _a;
      (_a = this._usernameInputNode) == null ? void 0 : _a.setFocus();
    });
  }
  _cancel() {
    this._set("signingIn", false), this.open = false, this._usernameInputNode && (this._usernameInputNode.value = ""), this._passwordInputNode && (this._passwordInputNode.value = ""), this.emit("cancel");
  }
  _submit(t5) {
    var _a, _b;
    t5.preventDefault(), this._set("signingIn", true);
    const e4 = this.oAuthPrompt ? {} : { username: (_a = this._usernameInputNode) == null ? void 0 : _a.value, password: (_b = this._passwordInputNode) == null ? void 0 : _b.value };
    this.emit("submit", e4);
  }
};
e([y({ readOnly: true })], u.prototype, "container", void 0), e([y(), e2("esri/t9n/common")], u.prototype, "commonMessages", void 0), e([y()], u.prototype, "error", void 0), e([y(), e2("esri/identity/t9n/identity")], u.prototype, "messages", void 0), e([y()], u.prototype, "oAuthPrompt", void 0), e([y()], u.prototype, "open", void 0), e([y()], u.prototype, "signingIn", void 0), e([y()], u.prototype, "server", void 0), e([y({ readOnly: true })], u.prototype, "title", null), e([y()], u.prototype, "resource", void 0), u = e([a("esri.identity.IdentityModal")], u);
var m2 = u;

// node_modules/@arcgis/core/identity/OAuthCredential.js
var t4 = "esriJSAPIOAuth";
var e3 = class {
  constructor(t5, e4) {
    this.oAuthInfo = null, this.storage = null, this.appId = null, this.codeVerifier = null, this.expires = null, this.refreshToken = null, this.ssl = null, this.stateUID = null, this.token = null, this.userId = null, this.oAuthInfo = t5, this.storage = e4, this._init();
  }
  isValid() {
    let t5 = false;
    if (this.oAuthInfo && this.userId && (this.refreshToken || this.token)) {
      if (null == this.expires && this.refreshToken)
        t5 = true;
      else if (this.expires) {
        const e4 = Date.now();
        if (this.expires > e4) {
          (this.expires - e4) / 1e3 > 60 * this.oAuthInfo.minTimeUntilExpiration && (t5 = true);
        }
      }
    }
    return t5;
  }
  save() {
    if (!this.storage)
      return false;
    const e4 = this._load(), s6 = this.oAuthInfo;
    if (s6 && s6.authNamespace && s6.portalUrl) {
      let r4 = e4[s6.authNamespace];
      r4 || (r4 = e4[s6.authNamespace] = {}), this.appId || (this.appId = s6.appId), r4[s6.portalUrl] = { appId: this.appId, codeVerifier: this.codeVerifier, expires: this.expires, refreshToken: this.refreshToken, ssl: this.ssl, stateUID: this.stateUID, token: this.token, userId: this.userId };
      try {
        this.storage.setItem(t4, JSON.stringify(e4));
      } catch (i4) {
        return console.warn(i4), false;
      }
      return true;
    }
    return false;
  }
  destroy() {
    const e4 = this._load(), s6 = this.oAuthInfo;
    if ((s6 == null ? void 0 : s6.appId) && (s6 == null ? void 0 : s6.portalUrl) && (null == this.expires || this.expires > Date.now()) && (this.refreshToken || this.token)) {
      const t5 = s6.portalUrl.replace(/^http:/i, "https:") + "/sharing/rest/oauth2/revokeToken", e5 = new FormData();
      if (e5.append("f", "json"), e5.append("auth_token", this.refreshToken || this.token), e5.append("client_id", s6.appId), e5.append("token_type_hint", this.refreshToken ? "refresh_token" : "access_token"), "function" == typeof navigator.sendBeacon)
        navigator.sendBeacon(t5, e5);
      else {
        const s7 = new XMLHttpRequest();
        s7.open("POST", t5), s7.send(e5);
      }
    }
    if (s6 && s6.authNamespace && s6.portalUrl && this.storage) {
      const r4 = e4[s6.authNamespace];
      if (r4) {
        delete r4[s6.portalUrl];
        try {
          this.storage.setItem(t4, JSON.stringify(e4));
        } catch (i4) {
          console.log(i4);
        }
      }
    }
    s6 && (s6._oAuthCred = null, this.oAuthInfo = null);
  }
  _init() {
    const t5 = this._load(), e4 = this.oAuthInfo;
    if (e4 && e4.authNamespace && e4.portalUrl) {
      let s6 = t5[e4.authNamespace];
      s6 && (s6 = s6[e4.portalUrl], s6 && (this.appId = s6.appId, this.codeVerifier = s6.codeVerifier, this.expires = s6.expires, this.refreshToken = s6.refreshToken, this.ssl = s6.ssl, this.stateUID = s6.stateUID, this.token = s6.token, this.userId = s6.userId));
    }
  }
  _load() {
    let e4 = {};
    if (this.storage) {
      const i4 = this.storage.getItem(t4);
      if (i4)
        try {
          e4 = JSON.parse(i4);
        } catch (s6) {
          console.warn(s6);
        }
    }
    return e4;
  }
};
e3.prototype.declaredClass = "esri.identity.OAuthCredential";

// node_modules/@arcgis/core/identity/OAuthInfo.js
var p2;
var s3 = p2 = class extends f {
  constructor(o3) {
    super(o3), this._oAuthCred = null, this.appId = null, this.authNamespace = "/", this.expiration = 20160, this.flowType = "auto", this.forceLogin = false, this.forceUserId = false, this.locale = null, this.minTimeUntilExpiration = 30, this.popup = false, this.popupCallbackUrl = "oauth-callback.html", this.popupWindowFeatures = "height=490,width=800,resizable,scrollbars,status", this.portalUrl = "https://www.arcgis.com", this.preserveUrlHash = false, this.userId = null;
  }
  clone() {
    return p2.fromJSON(this.toJSON());
  }
};
e([y({ json: { write: true } })], s3.prototype, "appId", void 0), e([y({ json: { write: true } })], s3.prototype, "authNamespace", void 0), e([y({ json: { write: true } })], s3.prototype, "expiration", void 0), e([y({ json: { write: true } })], s3.prototype, "flowType", void 0), e([y({ json: { write: true } })], s3.prototype, "forceLogin", void 0), e([y({ json: { write: true } })], s3.prototype, "forceUserId", void 0), e([y({ json: { write: true } })], s3.prototype, "locale", void 0), e([y({ json: { write: true } })], s3.prototype, "minTimeUntilExpiration", void 0), e([y({ json: { write: true } })], s3.prototype, "popup", void 0), e([y({ json: { write: true } })], s3.prototype, "popupCallbackUrl", void 0), e([y({ json: { write: true } })], s3.prototype, "popupWindowFeatures", void 0), e([y({ json: { write: true } })], s3.prototype, "portalUrl", void 0), e([y({ json: { write: true } })], s3.prototype, "preserveUrlHash", void 0), e([y({ json: { write: true } })], s3.prototype, "userId", void 0), s3 = p2 = e([a("esri.identity.OAuthInfo")], s3);
var i2 = s3;

// node_modules/@arcgis/core/identity/ServerInfo.js
var i3 = class extends f {
  constructor(o3) {
    super(o3), this.adminTokenServiceUrl = null, this.currentVersion = null, this.hasPortal = null, this.hasServer = null, this.owningSystemUrl = null, this.owningTenant = null, this.server = null, this.shortLivedTokenValidity = null, this.tokenServiceUrl = null, this.webTierAuth = null;
  }
};
e([y({ json: { write: true } })], i3.prototype, "adminTokenServiceUrl", void 0), e([y({ json: { write: true } })], i3.prototype, "currentVersion", void 0), e([y({ json: { write: true } })], i3.prototype, "hasPortal", void 0), e([y({ json: { write: true } })], i3.prototype, "hasServer", void 0), e([y({ json: { write: true } })], i3.prototype, "owningSystemUrl", void 0), e([y({ json: { write: true } })], i3.prototype, "owningTenant", void 0), e([y({ json: { write: true } })], i3.prototype, "server", void 0), e([y({ json: { write: true } })], i3.prototype, "shortLivedTokenValidity", void 0), e([y({ json: { write: true } })], i3.prototype, "tokenServiceUrl", void 0), e([y({ json: { write: true } })], i3.prototype, "webTierAuth", void 0), i3 = e([a("esri.identity.ServerInfo")], i3);
var s4 = i3;

// node_modules/@arcgis/core/identity/IdentityManagerBase.js
var P = {};
var R = (e4) => {
  const t5 = new x(e4.owningSystemUrl).host, r4 = new x(e4.server).host, s6 = /.+\.arcgis\.com$/i;
  return s6.test(t5) && s6.test(r4);
};
var C = (e4, t5) => !!(R(e4) && t5 && t5.some((t6) => t6.test(e4.server)));
var b = null;
var D2 = null;
try {
  b = window.localStorage, D2 = window.sessionStorage;
} catch {
}
var q = class extends o2 {
  constructor() {
    super(), this._portalConfig = globalThis.esriGeowConfig, this.serverInfos = [], this.oAuthInfos = [], this.credentials = [], this._soReqs = [], this._xoReqs = [], this._portals = [], this._defaultOAuthInfo = null, this._defaultTokenValidity = 60, this.dialog = null, this.tokenValidity = null, this.normalizeWebTierAuth = false, this._appOrigin = "null" !== window.origin ? window.origin : window.location.origin, this._appUrlObj = I(window.location.href), this._busy = null, this._rejectOnPersistedPageShow = false, this._oAuthLocationParams = null, this._gwTokenUrl = "/sharing/rest/generateToken", this._agsRest = "/rest/services", this._agsPortal = /\/sharing(\/|$)/i, this._agsAdmin = /(https?:\/\/[^\/]+\/[^\/]+)\/admin\/?(\/.*)?$/i, this._adminSvcs = /\/rest\/admin\/services(\/|$)/i, this._gwDomains = [{ regex: /^https?:\/\/www\.arcgis\.com/i, customBaseUrl: "maps.arcgis.com", tokenServiceUrl: "https://www.arcgis.com/sharing/rest/generateToken" }, { regex: /^https?:\/\/(?:dev|[a-z\d-]+\.mapsdev)\.arcgis\.com/i, customBaseUrl: "mapsdev.arcgis.com", tokenServiceUrl: "https://dev.arcgis.com/sharing/rest/generateToken" }, { regex: /^https?:\/\/(?:devext|[a-z\d-]+\.mapsdevext)\.arcgis\.com/i, customBaseUrl: "mapsdevext.arcgis.com", tokenServiceUrl: "https://devext.arcgis.com/sharing/rest/generateToken" }, { regex: /^https?:\/\/(?:qaext|[a-z\d-]+\.mapsqa)\.arcgis\.com/i, customBaseUrl: "mapsqa.arcgis.com", tokenServiceUrl: "https://qaext.arcgis.com/sharing/rest/generateToken" }, { regex: /^https?:\/\/[a-z\d-]+\.maps\.arcgis\.com/i, customBaseUrl: "maps.arcgis.com", tokenServiceUrl: "https://www.arcgis.com/sharing/rest/generateToken" }], this._legacyFed = [], this._regexSDirUrl = /http.+\/rest\/services\/?/gi, this._regexServerType = /(\/(FeatureServer|GPServer|GeoDataServer|GeocodeServer|GeoenrichmentServer|GeometryServer|GlobeServer|ImageServer|KnowledgeGraphServer|MapServer|MissionServer|MobileServer|NAServer|NetworkDiagramServer|OGCFeatureServer|ParcelFabricServer|RelationalCatalogServer|SceneServer|StreamServer|UtilityNetworkServer|ValidationServer|VectorTileServer|VersionManagementServer|VideoServer)).*/gi, this._gwUser = /http.+\/users\/([^\/]+)\/?.*/i, this._gwItem = /http.+\/items\/([^\/]+)\/?.*/i, this._gwGroup = /http.+\/groups\/([^\/]+)\/?.*/i, this._rePortalTokenSvc = /\/sharing(\/rest)?\/generatetoken/i, this._createDefaultOAuthInfo = true, this._hasTestedIfAppIsOnPortal = false, this._getOAuthLocationParams(), window.addEventListener("pageshow", (e4) => {
      this._pageShowHandler(e4);
    });
  }
  registerServers(e4) {
    const t5 = this.serverInfos;
    t5 ? (e4 = e4.filter((e5) => !this.findServerInfo(e5.server)), this.serverInfos = t5.concat(e4)) : this.serverInfos = e4, e4.forEach((e5) => {
      e5.owningSystemUrl && this._portals.push(e5.owningSystemUrl), e5.hasPortal && this._portals.push(e5.server);
    });
  }
  registerOAuthInfos(e4) {
    const t5 = this.oAuthInfos;
    if (t5) {
      for (const r4 of e4) {
        const e5 = this.findOAuthInfo(r4.portalUrl);
        e5 && t5.splice(t5.indexOf(e5), 1);
      }
      this.oAuthInfos = t5.concat(e4);
    } else
      this.oAuthInfos = e4;
  }
  registerToken(e4) {
    e4 = { ...e4 };
    const t5 = this._sanitizeUrl(e4.server), r4 = this._isServerRsrc(t5);
    let s6, i4 = this.findServerInfo(t5), n2 = true;
    i4 || (i4 = new s4(), i4.server = this._getServerInstanceRoot(t5), r4 ? i4.hasServer = true : (i4.tokenServiceUrl = this._getTokenSvcUrl(t5), i4.hasPortal = true), this.registerServers([i4])), s6 = this._findCredential(t5), s6 ? (delete e4.server, Object.assign(s6, e4), n2 = false) : (s6 = new j({ userId: e4.userId, server: i4.server ?? void 0, token: e4.token, expires: e4.expires, ssl: e4.ssl, scope: r4 ? "server" : "portal" }), s6.resources = [t5], this.credentials.push(s6)), s6.emitTokenChange(false), n2 || s6.refreshServerTokens();
  }
  toJSON() {
    return l({ serverInfos: this.serverInfos.map((e4) => e4.toJSON()), oAuthInfos: this.oAuthInfos.map((e4) => e4.toJSON()), credentials: this.credentials.map((e4) => e4.toJSON()) });
  }
  initialize(e4) {
    if (!e4)
      return;
    "string" == typeof e4 && (e4 = JSON.parse(e4));
    const t5 = e4.serverInfos, r4 = e4.oAuthInfos, s6 = e4.credentials;
    if (t5) {
      const e5 = [];
      t5.forEach((t6) => {
        t6.server && t6.tokenServiceUrl && e5.push(t6.declaredClass ? t6 : new s4(t6));
      }), e5.length && this.registerServers(e5);
    }
    if (r4) {
      const e5 = [];
      r4.forEach((t6) => {
        t6.appId && e5.push(t6.declaredClass ? t6 : new i2(t6));
      }), e5.length && this.registerOAuthInfos(e5);
    }
    s6 && s6.forEach((e5) => {
      e5.server && e5.token && e5.expires && e5.expires > Date.now() && ((e5 = e5.declaredClass ? e5 : new j(e5)).emitTokenChange(), this.credentials.push(e5));
    });
  }
  findServerInfo(e4) {
    let t5;
    e4 = this._sanitizeUrl(e4);
    for (const r4 of this.serverInfos)
      if (this._hasSameServerInstance(r4.server, e4)) {
        t5 = r4;
        break;
      }
    return t5;
  }
  findOAuthInfo(e4) {
    let t5;
    e4 = this._sanitizeUrl(e4);
    for (const r4 of this.oAuthInfos)
      if (this._hasSameServerInstance(r4.portalUrl, e4)) {
        t5 = r4;
        break;
      }
    return t5;
  }
  findCredential(e4, t5) {
    if (!e4)
      return;
    let r4;
    e4 = this._sanitizeUrl(e4);
    const s6 = this._isServerRsrc(e4) ? "server" : "portal";
    if (t5) {
      for (const i4 of this.credentials)
        if (this._hasSameServerInstance(i4.server, e4) && t5 === i4.userId && i4.scope === s6) {
          r4 = i4;
          break;
        }
    } else
      for (const i4 of this.credentials)
        if (this._hasSameServerInstance(i4.server, e4) && -1 !== this._getIdenticalSvcIdx(e4, i4) && i4.scope === s6) {
          r4 = i4;
          break;
        }
    return r4;
  }
  getCredential(e4, t5) {
    let r4, s6, n2 = true;
    t5 && (r4 = !!t5.token, s6 = t5.error, n2 = false !== t5.prompt), t5 = { ...t5 }, e4 = this._sanitizeUrl(e4);
    const o3 = new AbortController(), a2 = L();
    if (t5.signal && m(t5.signal, () => {
      o3.abort();
    }), m(o3, () => {
      a2.reject(new s("identity-manager:user-aborted", "ABORTED"));
    }), c(o3))
      return a2.promise;
    t5.signal = o3.signal;
    const h = this._isAdminResource(e4), u2 = r4 ? this.findCredential(e4) : null;
    let _2;
    if (u2 && s6 && s6.details && 498 === s6.details.httpStatus)
      u2.destroy();
    else if (u2)
      return _2 = new s("identity-manager:not-authorized", "You are currently signed in as: '" + u2.userId + "'. You do not have access to this resource: " + e4, { error: s6 }), a2.reject(_2), a2.promise;
    const g = this._findCredential(e4, t5);
    if (g)
      return a2.resolve(g), a2.promise;
    let f2 = this.findServerInfo(e4);
    if (f2)
      !f2.hasPortal && f2.server && f2.owningSystemUrl && this._hasSameServerInstance(f2.server, f2.owningSystemUrl) && (f2.hasPortal = true), !f2.hasServer && this._isServerRsrc(e4) && (f2._restInfoPms = this._getTokenSvcUrl(e4), f2.hasServer = true);
    else {
      const t6 = this._getTokenSvcUrl(e4);
      if (!t6)
        return _2 = new s("identity-manager:unknown-resource", "Unknown resource - could not find token service endpoint."), a2.reject(_2), a2.promise;
      f2 = new s4(), f2.server = this._getServerInstanceRoot(e4), "string" == typeof t6 ? (f2.tokenServiceUrl = t6, f2.hasPortal = true) : (f2._restInfoPms = t6, f2.hasServer = true), this.registerServers([f2]);
    }
    return f2.hasPortal && void 0 === f2._selfReq && (n2 || F(f2.tokenServiceUrl, this._appOrigin) || this._gwDomains.some((e5) => e5.tokenServiceUrl === f2.tokenServiceUrl)) && (f2._selfReq = { owningTenant: t5 == null ? void 0 : t5.owningTenant, selfDfd: this._getPortalSelf(f2.tokenServiceUrl.replace(this._rePortalTokenSvc, "/sharing/rest/portals/self"), e4) }), this._enqueue(e4, f2, t5, a2, h);
  }
  getResourceName(e4) {
    return this._isRESTService(e4) ? e4.replace(this._regexSDirUrl, "").replace(this._regexServerType, "") || "" : this._gwUser.test(e4) && e4.replace(this._gwUser, "$1") || this._gwItem.test(e4) && e4.replace(this._gwItem, "$1") || this._gwGroup.test(e4) && e4.replace(this._gwGroup, "$1") || "";
  }
  generateToken(e4, t5, r4) {
    const n2 = this._rePortalTokenSvc.test(e4.tokenServiceUrl), o3 = new x(this._appOrigin), a2 = e4.shortLivedTokenValidity;
    let h, l2, c4, d2, u2, g, f2, m3;
    t5 && (m3 = this.tokenValidity || a2 || this._defaultTokenValidity, m3 > a2 && a2 > 0 && (m3 = a2)), r4 && (h = r4.isAdmin, l2 = r4.serverUrl, c4 = r4.token, g = r4.signal, f2 = r4.ssl, e4.customParameters = r4.customParameters), h ? d2 = e4.adminTokenServiceUrl : (d2 = e4.tokenServiceUrl, u2 = new x(d2.toLowerCase()), e4.webTierAuth && (r4 == null ? void 0 : r4.serverUrl) && !f2 && "http" === o3.scheme && (F(o3.uri, d2, true) || "https" === u2.scheme && o3.host === u2.host && "7080" === o3.port && "7443" === u2.port) && (d2 = d2.replace(/^https:/i, "http:").replace(/:7443/i, ":7080")));
    const v2 = { query: { request: "getToken", username: t5 == null ? void 0 : t5.username, password: t5 == null ? void 0 : t5.password, serverUrl: l2, token: c4, expiration: m3, referer: h || n2 ? this._appOrigin : null, client: h ? "referer" : null, f: "json", ...e4.customParameters }, method: "post", authMode: "anonymous", useProxy: this._useProxy(e4, r4), signal: g, ...r4 == null ? void 0 : r4.ioArgs };
    n2 || (v2.withCredentials = false);
    return U(d2, v2).then((r5) => {
      const s6 = r5.data;
      if (!(s6 == null ? void 0 : s6.token))
        return new s("identity-manager:authentication-failed", "Unable to generate token");
      const n3 = e4.server;
      return P[n3] || (P[n3] = {}), t5 && (P[n3][t5.username] = t5.password), s6.validity = m3, s6;
    });
  }
  isBusy() {
    return !!this._busy;
  }
  checkSignInStatus(e4) {
    return this.checkAppAccess(e4, "").then((e5) => e5.credential);
  }
  checkAppAccess(e4, t5, r4) {
    let n2 = false;
    return this.getCredential(e4, { prompt: false }).then((o3) => {
      let a2;
      const h = { f: "json" };
      if ("portal" === o3.scope)
        if (t5 && (this._doPortalSignIn(e4) || (r4 == null ? void 0 : r4.force)))
          a2 = o3.server + "/sharing/rest/oauth2/validateAppAccess", h.client_id = t5;
        else {
          if (!o3.token)
            return { credential: o3 };
          a2 = o3.server + "/sharing/rest";
        }
      else {
        if (!o3.token)
          return { credential: o3 };
        a2 = o3.server + "/rest/services";
      }
      return o3.token && (h.token = o3.token), U(a2, { query: h, authMode: "anonymous" }).then((e5) => {
        if (false === e5.data.valid)
          throw new s("identity-manager:not-authorized", `You are currently signed in as: '${o3.userId}'.`, e5.data);
        return n2 = !!e5.data.viewOnlyUserTypeApp, { credential: o3 };
      }).catch((e5) => {
        var _a;
        if ("identity-manager:not-authorized" === e5.name)
          throw e5;
        const t6 = (_a = e5.details) == null ? void 0 : _a.httpStatus;
        if (498 === t6)
          throw o3.destroy(), new s("identity-manager:not-authenticated", "User is not signed in.");
        if (400 === t6)
          throw new s("identity-manager:invalid-request");
        return { credential: o3 };
      });
    }).then((e5) => ({ credential: e5.credential, viewOnly: n2 }));
  }
  setOAuthResponseHash(e4) {
    e4 && ("#" === e4.charAt(0) && (e4 = e4.substring(1)), this._processOAuthPopupParams(A(e4)));
  }
  setOAuthRedirectionHandler(e4) {
    this._oAuthRedirectFunc = e4;
  }
  setProtocolErrorHandler(e4) {
    this._protocolFunc = e4;
  }
  signIn(e4, t5, r4 = {}) {
    const s6 = L(), n2 = () => {
      var _a;
      h == null ? void 0 : h.remove(), d2 == null ? void 0 : d2.remove(), (_a = this.dialog) == null ? void 0 : _a.destroy(), this.dialog = h = d2 = null;
    }, o3 = () => {
      n2(), this._oAuthDfd = null, s6.reject(new s("identity-manager:user-aborted", "ABORTED"));
    };
    r4.signal && m(r4.signal, () => {
      o3();
    });
    const a2 = new m2({ open: true, resource: this.getResourceName(e4), server: t5.server });
    this.dialog = a2, this.emit("dialog-create");
    let h = a2.on("cancel", o3), d2 = a2.on("submit", (e5) => {
      this.generateToken(t5, e5, { isAdmin: r4.isAdmin, signal: r4.signal }).then((i4) => {
        n2();
        const o4 = new j({ userId: e5.username, server: t5.server ?? void 0, token: i4.token, expires: null != i4.expires ? Number(i4.expires) : null, ssl: !!i4.ssl, isAdmin: r4.isAdmin, validity: i4.validity });
        s6.resolve(o4);
      }).catch((e6) => {
        a2.error = e6, a2.signingIn = false;
      });
    });
    return s6.promise;
  }
  oAuthSignIn(e4, t5, r4, s6) {
    this._oAuthDfd = L();
    const n2 = this._oAuthDfd;
    let o3;
    (s6 == null ? void 0 : s6.signal) && m(s6.signal, () => {
      const e5 = this._oAuthDfd && this._oAuthDfd.oAuthWin_;
      e5 && !e5.closed ? e5.close() : this.dialog && u2();
    }), n2.resUrl_ = e4, n2.sinfo_ = t5, n2.oinfo_ = r4;
    const a2 = r4._oAuthCred;
    if (a2.storage && ("authorization-code" === r4.flowType || "auto" === r4.flowType && t5.currentVersion >= 8.4)) {
      let e5 = crypto.getRandomValues(new Uint8Array(32));
      o3 = et(e5), a2.codeVerifier = o3, e5 = crypto.getRandomValues(new Uint8Array(32)), a2.stateUID = et(e5), a2.save() || (a2.codeVerifier = o3 = null);
    } else
      a2.codeVerifier = null;
    let h, d2;
    this._getCodeChallenge(o3).then((i4) => {
      const n3 = !s6 || false !== s6.oAuthPopupConfirmation;
      if (!r4.popup || !n3)
        return void this._doOAuthSignIn(e4, t5, r4, i4);
      const o4 = new m2({ oAuthPrompt: true, server: t5.server, open: true });
      this.dialog = o4, this.emit("dialog-create"), h = o4.on("cancel", u2), d2 = o4.on("submit", () => {
        p3(), this._doOAuthSignIn(e4, t5, r4, i4);
      });
    });
    const u2 = () => {
      p3(), this._oAuthDfd = null, n2.reject(new s("identity-manager:user-aborted", "ABORTED"));
    }, p3 = () => {
      var _a;
      h == null ? void 0 : h.remove(), d2 == null ? void 0 : d2.remove(), (_a = this.dialog) == null ? void 0 : _a.destroy(), this.dialog = null;
    };
    return n2.promise;
  }
  destroyCredentials() {
    if (this.credentials) {
      this.credentials.slice().forEach((e4) => {
        e4.destroy();
      });
    }
    this.emit("credentials-destroy");
  }
  enablePostMessageAuth(e4 = "https://www.arcgis.com/sharing/rest") {
    this._postMessageAuthHandle && this._postMessageAuthHandle.remove(), this._postMessageAuthHandle = o(window, "message", (t5) => {
      var _a;
      if ((t5.origin === this._appOrigin || t5.origin.endsWith(".arcgis.com")) && "arcgis:auth:requestCredential" === ((_a = t5.data) == null ? void 0 : _a.type)) {
        const r4 = t5.source;
        this.getCredential(e4).then((e5) => {
          r4.postMessage({ type: "arcgis:auth:credential", credential: { expires: e5.expires, server: e5.server, ssl: e5.ssl, token: e5.token, userId: e5.userId } }, t5.origin);
        }).catch((e5) => {
          r4.postMessage({ type: "arcgis:auth:error", error: { name: e5.name, message: e5.message } }, t5.origin);
        });
      }
    });
  }
  disablePostMessageAuth() {
    this._postMessageAuthHandle && (this._postMessageAuthHandle.remove(), this._postMessageAuthHandle = null);
  }
  _getOAuthLocationParams() {
    var _a, _b;
    let e4 = window.location.hash;
    if (e4) {
      "#" === e4.charAt(0) && (e4 = e4.substring(1));
      const t6 = A(e4);
      let r4 = false;
      if (t6.access_token && t6.expires_in && t6.state && t6.hasOwnProperty("username"))
        try {
          t6.state = JSON.parse(t6.state), t6.state.portalUrl && (this._oAuthLocationParams = t6, r4 = true);
        } catch {
        }
      else if (t6.error && t6.error_description && (console.log("IdentityManager OAuth Error: ", t6.error, " - ", t6.error_description), "access_denied" === t6.error && (r4 = true, t6.state)))
        try {
          t6.state = JSON.parse(t6.state);
        } catch {
        }
      r4 && (window.location.hash = ((_a = t6.state) == null ? void 0 : _a.hash) || "");
    }
    let t5 = window.location.search;
    if (t5) {
      "?" === t5.charAt(0) && (t5 = t5.substring(1));
      const e5 = A(t5);
      let r4 = false;
      if (e5.code && e5.state)
        try {
          e5.state = JSON.parse(e5.state), e5.state.portalUrl && e5.state.uid && (this._oAuthLocationParams = e5, r4 = true);
        } catch {
        }
      else if (e5.error && e5.error_description && (console.log("IdentityManager OAuth Error: ", e5.error, " - ", e5.error_description), "access_denied" === e5.error && (r4 = true, e5.state)))
        try {
          e5.state = JSON.parse(e5.state);
        } catch {
        }
      if (r4) {
        const t6 = { ...e5 };
        ["code", "error", "error_description", "message_code", "persist", "state"].forEach((e6) => {
          delete t6[e6];
        });
        const r5 = v(t6), s6 = window.location.pathname + (r5 ? `?${r5}` : "") + (((_b = e5.state) == null ? void 0 : _b.hash) || "");
        window.history.replaceState(window.history.state, "", s6);
      }
    }
  }
  _getOAuthToken(e4, t5, r4, i4, n2) {
    return e4 = e4.replace(/^http:/i, "https:"), U(`${e4}/sharing/rest/oauth2/token`, { authMode: "anonymous", method: "post", query: i4 && n2 ? { grant_type: "authorization_code", code: t5, redirect_uri: i4, client_id: r4, code_verifier: n2 } : { grant_type: "refresh_token", refresh_token: t5, client_id: r4 } }).then((e5) => e5.data);
  }
  _getCodeChallenge(e4) {
    if (e4 && globalThis.isSecureContext) {
      const t5 = new TextEncoder().encode(e4);
      return crypto.subtle.digest("SHA-256", t5).then((e5) => et(new Uint8Array(e5)));
    }
    return Promise.resolve(null);
  }
  _pageShowHandler(e4) {
    if (e4.persisted && this.isBusy() && this._rejectOnPersistedPageShow) {
      const e5 = new s("identity-manager:user-aborted", "ABORTED");
      this._errbackFunc(e5);
    }
  }
  _findCredential(e4, t5) {
    let r4, s6, i4, n2, o3 = -1;
    const a2 = t5 == null ? void 0 : t5.token, h = t5 == null ? void 0 : t5.resource, l2 = this._isServerRsrc(e4) ? "server" : "portal", c4 = this.credentials.filter((t6) => this._hasSameServerInstance(t6.server, e4) && t6.scope === l2);
    if (e4 = h || e4, c4.length)
      if (1 === c4.length) {
        if (r4 = c4[0], i4 = this.findServerInfo(r4.server), s6 = i4 == null ? void 0 : i4.owningSystemUrl, n2 = s6 ? this.findCredential(s6, r4.userId) : void 0, o3 = this._getIdenticalSvcIdx(e4, r4), !a2)
          return -1 === o3 && r4.resources.push(e4), this._addResource(e4, n2), r4;
        -1 !== o3 && (r4.resources.splice(o3, 1), this._removeResource(e4, n2));
      } else {
        let t6, r5;
        if (c4.some((a3) => (r5 = this._getIdenticalSvcIdx(e4, a3), -1 !== r5 && (t6 = a3, i4 = this.findServerInfo(t6.server), s6 = i4 == null ? void 0 : i4.owningSystemUrl, n2 = s6 ? this.findCredential(s6, t6.userId) : void 0, o3 = r5, true))), a2)
          t6 && (t6.resources.splice(o3, 1), this._removeResource(e4, n2));
        else if (t6)
          return this._addResource(e4, n2), t6;
      }
  }
  _findOAuthInfo(e4) {
    let t5 = this.findOAuthInfo(e4);
    if (!t5) {
      for (const r4 of this.oAuthInfos)
        if (this._isIdProvider(r4.portalUrl, e4)) {
          t5 = r4;
          break;
        }
    }
    return t5;
  }
  _addResource(e4, t5) {
    t5 && -1 === this._getIdenticalSvcIdx(e4, t5) && t5.resources.push(e4);
  }
  _removeResource(e4, t5) {
    let r4 = -1;
    t5 && (r4 = this._getIdenticalSvcIdx(e4, t5), r4 > -1 && t5.resources.splice(r4, 1));
  }
  _useProxy(e4, t5) {
    return (t5 == null ? void 0 : t5.isAdmin) && !F(e4.adminTokenServiceUrl, this._appOrigin) || !this._isPortalDomain(e4.tokenServiceUrl) && "10.1" === String(e4.currentVersion) && !F(e4.tokenServiceUrl, this._appOrigin);
  }
  _getOrigin(e4) {
    const t5 = new x(e4);
    return t5.scheme + "://" + t5.host + (null != t5.port ? ":" + t5.port : "");
  }
  _getServerInstanceRoot(e4) {
    const t5 = e4.toLowerCase();
    let r4 = t5.indexOf(this._agsRest);
    return -1 === r4 && this._isAdminResource(e4) && (r4 = this._agsAdmin.test(e4) ? e4.replace(this._agsAdmin, "$1").length : e4.search(this._adminSvcs)), -1 !== r4 || t2(t5) || (r4 = t5.indexOf("/sharing")), -1 === r4 && "/" === t5.substr(-1) && (r4 = t5.length - 1), r4 > -1 ? e4.substring(0, r4) : e4;
  }
  _hasSameServerInstance(e4, t5) {
    return "/" === e4.substr(-1) && (e4 = e4.slice(0, -1)), e4 = e4.toLowerCase(), t5 = this._getServerInstanceRoot(t5).toLowerCase(), e4 = this._normalizeAGOLorgDomain(e4), t5 = this._normalizeAGOLorgDomain(t5), (e4 = e4.substr(e4.indexOf(":"))) === (t5 = t5.substr(t5.indexOf(":")));
  }
  _normalizeAGOLorgDomain(e4) {
    const t5 = /^https?:\/\/(?:cdn|[a-z\d-]+\.maps)\.arcgis\.com/i, r4 = /^https?:\/\/(?:cdndev|[a-z\d-]+\.mapsdevext)\.arcgis\.com/i, s6 = /^https?:\/\/(?:cdnqa|[a-z\d-]+\.mapsqa)\.arcgis\.com/i;
    return t5.test(e4) ? e4 = e4.replace(t5, "https://www.arcgis.com") : r4.test(e4) ? e4 = e4.replace(r4, "https://devext.arcgis.com") : s6.test(e4) && (e4 = e4.replace(s6, "https://qaext.arcgis.com")), e4;
  }
  _sanitizeUrl(e4) {
    const r4 = (r.request.proxyUrl || "").toLowerCase(), s6 = r4 ? e4.toLowerCase().indexOf(r4 + "?") : -1;
    return -1 !== s6 && (e4 = e4.substring(s6 + r4.length + 1)), e4 = K(e4), I(e4).path;
  }
  _isRESTService(e4) {
    return e4.includes(this._agsRest);
  }
  _isAdminResource(e4) {
    return this._agsAdmin.test(e4) || this._adminSvcs.test(e4);
  }
  _isServerRsrc(e4) {
    return this._isRESTService(e4) || this._isAdminResource(e4);
  }
  _isIdenticalService(e4, t5) {
    let r4 = false;
    if (this._isRESTService(e4) && this._isRESTService(t5)) {
      const s6 = this._getSuffix(e4).toLowerCase(), i4 = this._getSuffix(t5).toLowerCase();
      if (r4 = s6 === i4, !r4) {
        const e5 = /(.*)\/(MapServer|FeatureServer|UtilityNetworkServer).*/gi;
        r4 = s6.replaceAll(e5, "$1") === i4.replaceAll(e5, "$1");
      }
    } else
      this._isAdminResource(e4) && this._isAdminResource(t5) ? r4 = true : this._isServerRsrc(e4) || this._isServerRsrc(t5) || !this._isPortalDomain(e4) || (r4 = true);
    return r4;
  }
  _isPortalDomain(e4) {
    const r4 = new x(e4.toLowerCase()), s6 = this._portalConfig;
    let i4 = this._gwDomains.some((e5) => e5.regex.test(r4.uri));
    return !i4 && s6 && (i4 = this._hasSameServerInstance(this._getServerInstanceRoot(s6.restBaseUrl), r4.uri)), i4 || r.portalUrl && (i4 = F(r4, r.portalUrl, true)), i4 || (i4 = this._portals.some((e5) => this._hasSameServerInstance(e5, r4.uri))), i4 = i4 || this._agsPortal.test(r4.path), i4;
  }
  _isIdProvider(e4, t5) {
    let r4 = -1, s6 = -1;
    this._gwDomains.forEach((i5, n2) => {
      -1 === r4 && i5.regex.test(e4) && (r4 = n2), -1 === s6 && i5.regex.test(t5) && (s6 = n2);
    });
    let i4 = false;
    if (r4 > -1 && s6 > -1 && (0 === r4 || 4 === r4 ? 0 !== s6 && 4 !== s6 || (i4 = true) : 1 === r4 ? 1 !== s6 && 2 !== s6 || (i4 = true) : 2 === r4 ? 2 === s6 && (i4 = true) : 3 === r4 && 3 === s6 && (i4 = true)), !i4) {
      const r5 = this.findServerInfo(t5), s7 = r5 == null ? void 0 : r5.owningSystemUrl;
      s7 && R(r5) && this._isPortalDomain(s7) && this._isIdProvider(e4, s7) && (i4 = true);
    }
    return i4;
  }
  _getIdenticalSvcIdx(e4, t5) {
    let r4 = -1;
    for (let s6 = 0; s6 < t5.resources.length; s6++) {
      const i4 = t5.resources[s6];
      if (this._isIdenticalService(e4, i4)) {
        r4 = s6;
        break;
      }
    }
    return r4;
  }
  _getSuffix(e4) {
    return e4.replace(this._regexSDirUrl, "").replace(this._regexServerType, "$1");
  }
  _getTokenSvcUrl(e4) {
    let t5, r4, i4;
    if (this._isRESTService(e4) || this._isAdminResource(e4)) {
      const i5 = this._getServerInstanceRoot(e4);
      return t5 = i5 + "/admin/generateToken", r4 = U(e4 = i5 + "/rest/info", { query: { f: "json" } }).then((e5) => e5.data), { adminUrl: t5, promise: r4 };
    }
    if (this._isPortalDomain(e4)) {
      let t6 = "";
      if (this._gwDomains.some((r5) => (r5.regex.test(e4) && (t6 = r5.tokenServiceUrl), !!t6)), t6 || this._portals.some((r5) => (this._hasSameServerInstance(r5, e4) && (t6 = r5 + this._gwTokenUrl), !!t6)), t6 || (i4 = e4.toLowerCase().indexOf("/sharing"), -1 !== i4 && (t6 = e4.substring(0, i4) + this._gwTokenUrl)), t6 || (t6 = this._getOrigin(e4) + this._gwTokenUrl), t6) {
        const r5 = new x(e4).port;
        /^http:\/\//i.test(e4) && "7080" === r5 && (t6 = t6.replace(/:7080/i, ":7443")), t6 = t6.replace(/http:/i, "https:");
      }
      return t6;
    }
    if (e4.toLowerCase().includes("premium.arcgisonline.com"))
      return "https://premium.arcgisonline.com/server/tokens";
  }
  _processOAuthResponseParams(e4, t5, r4) {
    const s6 = t5._oAuthCred;
    if (e4.code) {
      const i5 = s6.codeVerifier;
      return s6.codeVerifier = null, s6.stateUID = null, s6.save(), this._getOAuthToken(r4.server, e4.code, t5.appId, this._getRedirectURI(t5, true), i5).then((i6) => {
        const n2 = new j({ userId: i6.username, server: r4.server ?? void 0, token: i6.access_token, expires: Date.now() + 1e3 * i6.expires_in, ssl: i6.ssl, oAuthState: e4.state, _oAuthCred: s6 });
        return t5.userId = n2.userId, s6.storage = i6.persist ? b : D2, s6.refreshToken = i6.refresh_token, s6.token = null, s6.expires = i6.refresh_token_expires_in ? Date.now() + 1e3 * i6.refresh_token_expires_in : null, s6.userId = n2.userId, s6.ssl = n2.ssl, s6.save(), n2;
      });
    }
    const i4 = new j({ userId: e4.username, server: r4.server ?? void 0, token: e4.access_token, expires: Date.now() + 1e3 * Number(e4.expires_in), ssl: "true" === e4.ssl, oAuthState: e4.state, _oAuthCred: s6 });
    return t5.userId = i4.userId, s6.storage = e4.persist ? b : D2, s6.refreshToken = null, s6.token = i4.token, s6.expires = i4.expires, s6.userId = i4.userId, s6.ssl = i4.ssl, s6.save(), Promise.resolve(i4);
  }
  _processOAuthPopupParams(e4) {
    var _a;
    const t5 = this._oAuthDfd;
    if (this._oAuthDfd = null, t5)
      if (clearInterval(this._oAuthIntervalId), (_a = this._oAuthOnPopupHandle) == null ? void 0 : _a.remove(), e4.error) {
        const r4 = "access_denied" === e4.error, s6 = new s(r4 ? "identity-manager:user-aborted" : "identity-manager:authentication-failed", r4 ? "ABORTED" : "OAuth: " + e4.error + " - " + e4.error_description);
        t5.reject(s6);
      } else
        this._processOAuthResponseParams(e4, t5.oinfo_, t5.sinfo_).then((e5) => {
          t5.resolve(e5);
        }).catch((e5) => {
          t5.reject(e5);
        });
  }
  _setOAuthResponseQueryString(e4) {
    e4 && ("?" === e4.charAt(0) && (e4 = e4.substring(1)), this._processOAuthPopupParams(A(e4)));
  }
  _exchangeToken(e4, t5, r4) {
    return U(`${e4}/sharing/rest/oauth2/exchangeToken`, { authMode: "anonymous", method: "post", query: { f: "json", client_id: t5, token: r4 } }).then((e5) => e5.data.token);
  }
  _getPlatformSelf(e4, t5) {
    return e4 = e4.replace(/^http:/i, "https:"), U(`${e4}/sharing/rest/oauth2/platformSelf`, { authMode: "anonymous", headers: { "X-Esri-Auth-Client-Id": t5, "X-Esri-Auth-Redirect-Uri": window.location.href.replace(/#.*$/, "") }, method: "post", query: { f: "json", expiration: 30 }, withCredentials: true }).then((e5) => e5.data);
  }
  _getPortalSelf(e4, t5) {
    let r4;
    if (this._gwDomains.some((t6) => (t6.regex.test(e4) && (r4 = t6.customBaseUrl), !!r4)), r4)
      return Promise.resolve({ allSSL: true, currentVersion: "8.4", customBaseUrl: r4, portalMode: "multitenant", supportsOAuth: true });
    this._appOrigin.startsWith("https:") ? e4 = e4.replace(/^http:/i, "https:").replace(/:7080/i, ":7443") : /^http:/i.test(t5) && (e4 = e4.replace(/^https:/i, "http:").replace(/:7443/i, ":7080"));
    return U(e4, { query: { f: "json" }, authMode: "anonymous", withCredentials: true }).then((e5) => e5.data);
  }
  _doPortalSignIn(e4) {
    const t5 = this._portalConfig, r4 = window.location.href, s6 = this.findServerInfo(e4);
    return !(!t5 && !this._isPortalDomain(r4) || !(s6 ? s6.hasPortal || s6.owningSystemUrl && this._isPortalDomain(s6.owningSystemUrl) : this._isPortalDomain(e4)) || !(this._isIdProvider(r4, e4) || t5 && (this._hasSameServerInstance(this._getServerInstanceRoot(t5.restBaseUrl), e4) || this._isIdProvider(t5.restBaseUrl, e4)) || F(r4, e4, true)));
  }
  _checkProtocol(e4, t5, r4, s6) {
    let n2 = true;
    const o3 = s6 ? t5.adminTokenServiceUrl : t5.tokenServiceUrl;
    if (o3.trim().toLowerCase().startsWith("https:") && !this._appOrigin.startsWith("https:") && T(o3) && (n2 = !!this._protocolFunc && !!this._protocolFunc({ resourceUrl: e4, serverInfo: t5 }), !n2)) {
      r4(new s("identity-manager:aborted", "Aborted the Sign-In process to avoid sending password over insecure connection."));
    }
    return n2;
  }
  _enqueue(e4, t5, r4, s6, i4, n2) {
    return s6 || (s6 = L()), s6.resUrl_ = e4, s6.sinfo_ = t5, s6.options_ = r4, s6.admin_ = i4, s6.refresh_ = n2, this._busy ? this._hasSameServerInstance(this._getServerInstanceRoot(e4), this._busy.resUrl_) ? (this._oAuthDfd && this._oAuthDfd.oAuthWin_ && this._oAuthDfd.oAuthWin_.focus(), this._soReqs.push(s6)) : this._xoReqs.push(s6) : this._doSignIn(s6), s6.promise;
  }
  _doSignIn(e4) {
    this._busy = e4, this._rejectOnPersistedPageShow = false;
    const t5 = (t6) => {
      var _a;
      const r5 = (_a = e4.options_) == null ? void 0 : _a.resource, s7 = e4.resUrl_, i4 = e4.refresh_;
      let n3 = false;
      this.credentials.includes(t6) || (i4 && this.credentials.includes(i4) ? (i4.userId = t6.userId, i4.token = t6.token, i4.expires = t6.expires, i4.validity = t6.validity, i4.ssl = t6.ssl, i4.creationTime = t6.creationTime, n3 = true, t6 = i4) : this.credentials.push(t6)), t6.resources || (t6.resources = []), t6.resources.includes(r5 || s7) || t6.resources.push(r5 || s7), t6.scope = this._isServerRsrc(s7) ? "server" : "portal", t6.emitTokenChange();
      const o3 = this._soReqs, a3 = {};
      this._soReqs = [], o3.forEach((e5) => {
        if (!this._isIdenticalService(s7, e5.resUrl_)) {
          const r6 = this._getSuffix(e5.resUrl_);
          a3[r6] || (a3[r6] = true, t6.resources.push(e5.resUrl_));
        }
      }), e4.resolve(t6), o3.forEach((e5) => {
        this._hasSameServerInstance(this._getServerInstanceRoot(s7), e5.resUrl_) ? e5.resolve(t6) : this._soReqs.push(e5);
      }), this._busy = e4.resUrl_ = e4.sinfo_ = e4.refresh_ = null, n3 || this.emit("credential-create", { credential: t6 }), this._soReqs.length ? this._doSignIn(this._soReqs.shift()) : this._xoReqs.length && this._doSignIn(this._xoReqs.shift());
    }, r4 = (t6) => {
      e4.reject(t6), this._busy = e4.resUrl_ = e4.sinfo_ = e4.refresh_ = null, this._soReqs.length ? this._doSignIn(this._soReqs.shift()) : this._xoReqs.length && this._doSignIn(this._xoReqs.shift());
    }, s6 = (n3, a3, h, l3) => {
      var _a, _b, _c;
      const d3 = e4.sinfo_, u2 = !e4.options_ || false !== e4.options_.prompt, _2 = d3.hasPortal && this._findOAuthInfo(e4.resUrl_);
      let g, f2;
      if (n3)
        t5(new j({ userId: n3, server: d3.server ?? void 0, token: h ?? void 0, expires: null != l3 ? Number(l3) : null, ssl: !!a3 }));
      else if (window !== window.parent && ((_a = this._appUrlObj.query) == null ? void 0 : _a["arcgis-auth-origin"]) && ((_b = this._appUrlObj.query) == null ? void 0 : _b["arcgis-auth-portal"]) && this._hasSameServerInstance(this._getServerInstanceRoot(this._appUrlObj.query["arcgis-auth-portal"]), e4.resUrl_)) {
        window.parent.postMessage({ type: "arcgis:auth:requestCredential" }, this._appUrlObj.query["arcgis-auth-origin"]);
        const s7 = o(window, "message", (e5) => {
          e5.source === window.parent && e5.data && ("arcgis:auth:credential" === e5.data.type ? (s7.remove(), e5.data.credential.expires < Date.now() ? r4(new s("identity-manager:credential-request-failed", "Parent application's token has expired.")) : t5(new j(e5.data.credential))) : "arcgis:auth:error" === e5.data.type && (s7.remove(), "tokenExpiredError" === e5.data.error.name ? r4(new s("identity-manager:credential-request-failed", "Parent application's token has expired.")) : r4(s.fromJSON(e5.data.error))));
        });
        m((_c = e4.options_) == null ? void 0 : _c.signal, () => {
          s7.remove();
        });
      } else if (_2) {
        let n4 = _2._oAuthCred;
        if (!n4) {
          const e5 = new e3(_2, b), t6 = new e3(_2, D2);
          e5.isValid() && t6.isValid() ? e5.expires > t6.expires ? (n4 = e5, t6.destroy()) : (n4 = t6, e5.destroy()) : n4 = e5.isValid() ? e5 : t6, _2._oAuthCred = n4;
        }
        if (n4.isValid()) {
          g = new j({ userId: n4.userId ?? void 0, server: d3.server ?? void 0, token: n4.token ?? void 0, expires: n4.expires, ssl: n4.ssl ?? void 0, _oAuthCred: n4 });
          const r5 = _2.appId !== n4.appId && this._doPortalSignIn(e4.resUrl_);
          r5 || n4.refreshToken ? (e4._pendingDfd = n4.refreshToken ? this._getOAuthToken(d3.server, n4.refreshToken, n4.appId).then((e5) => (g.expires = Date.now() + 1e3 * e5.expires_in, g.token = e5.access_token, g)) : Promise.resolve(g), e4._pendingDfd.then((e5) => r5 ? this._exchangeToken(e5.server, _2.appId, e5.token).then((t6) => (e5.token = t6, e5)).catch(() => e5) : e5).then((e5) => {
            t5(e5);
          }).catch(() => {
            n4 == null ? void 0 : n4.destroy(), s6();
          })) : t5(g);
        } else if (this._oAuthLocationParams && this._hasSameServerInstance(_2.portalUrl, this._oAuthLocationParams.state.portalUrl) && (this._oAuthLocationParams.access_token || this._oAuthLocationParams.code && this._oAuthLocationParams.state.uid === n4.stateUID && n4.codeVerifier)) {
          const s7 = this._oAuthLocationParams;
          this._oAuthLocationParams = null, e4._pendingDfd = this._processOAuthResponseParams(s7, _2, d3).then((e5) => {
            t5(e5);
          }).catch(r4);
        } else {
          const s7 = () => {
            u2 ? e4._pendingDfd = this.oAuthSignIn(e4.resUrl_, d3, _2, e4.options_).then(t5, r4) : (f2 = new s("identity-manager:not-authenticated", "User is not signed in."), r4(f2));
          };
          this._doPortalSignIn(e4.resUrl_) ? e4._pendingDfd = this._getPlatformSelf(d3.server, _2.appId).then((e5) => {
            F(e5.portalUrl, this._appOrigin, true) ? (g = new j({ userId: e5.username, server: d3.server ?? void 0, expires: Date.now() + 1e3 * e5.expires_in, token: e5.token }), t5(g)) : s7();
          }).catch(s7) : s7();
        }
      } else if (u2) {
        if (this._checkProtocol(e4.resUrl_, d3, r4, e4.admin_)) {
          let s7 = e4.options_;
          e4.admin_ && (s7 = s7 || {}, s7.isAdmin = true), e4._pendingDfd = this.signIn(e4.resUrl_, d3, s7).then(t5, r4);
        }
      } else
        f2 = new s("identity-manager:not-authenticated", "User is not signed in."), r4(f2);
    }, n2 = () => {
      const s7 = e4.sinfo_, i4 = s7.owningSystemUrl, n3 = e4.options_;
      let o3, a3, h, l3;
      if (n3 && (o3 = n3.token, a3 = n3.error, h = n3.prompt), l3 = this._findCredential(i4, { token: o3, resource: e4.resUrl_ }), !l3) {
        for (const e5 of this.credentials)
          if (this._isIdProvider(i4, e5.server)) {
            l3 = e5;
            break;
          }
      }
      if (l3) {
        const i5 = this.findCredential(e4.resUrl_, l3.userId);
        if (i5)
          t5(i5);
        else if (C(s7, this._legacyFed)) {
          const e5 = l3.toJSON();
          e5.server = s7.server, e5.resources = null, t5(new j(e5));
        } else {
          (e4._pendingDfd = this.generateToken(this.findServerInfo(l3.server), null, { serverUrl: e4.resUrl_, token: l3.token, signal: e4.options_.signal, ssl: l3.ssl })).then((r5) => {
            t5(new j({ userId: l3 == null ? void 0 : l3.userId, server: s7.server ?? void 0, token: r5.token, expires: null != r5.expires ? Number(r5.expires) : null, ssl: !!r5.ssl, isAdmin: e4.admin_, validity: r5.validity }));
          }, r4);
        }
      } else {
        this._busy = null, o3 && (e4.options_.token = null);
        (e4._pendingDfd = this.getCredential(i4.replace(/\/?$/, "/sharing"), { resource: e4.resUrl_, owningTenant: s7.owningTenant, signal: e4.options_.signal, token: o3, error: a3, prompt: h })).then(() => {
          this._enqueue(e4.resUrl_, e4.sinfo_, e4.options_, e4, e4.admin_);
        }, (t6) => {
          e4.resUrl_ = e4.sinfo_ = e4.refresh_ = null, e4.reject(t6);
        });
      }
    };
    this._errbackFunc = r4;
    const a2 = e4.sinfo_.owningSystemUrl, l2 = this._isServerRsrc(e4.resUrl_), d2 = e4.sinfo_._restInfoPms;
    d2 ? d2.promise.then((t6) => {
      const r5 = e4.sinfo_;
      if (r5._restInfoPms) {
        r5.adminTokenServiceUrl = r5._restInfoPms.adminUrl, r5._restInfoPms = null, r5.tokenServiceUrl = (t("authInfo.tokenServicesUrl", t6) || t("authInfo.tokenServiceUrl", t6) || t("tokenServiceUrl", t6)) ?? null, r5.shortLivedTokenValidity = t("authInfo.shortLivedTokenValidity", t6) ?? null, r5.currentVersion = t6.currentVersion, r5.owningTenant = t6.owningTenant;
        const e5 = r5.owningSystemUrl = t6.owningSystemUrl;
        e5 && this._portals.push(e5);
      }
      l2 && r5.owningSystemUrl ? n2() : s6();
    }, () => {
      e4.sinfo_._restInfoPms = null;
      const t6 = new s("identity-manager:server-identification-failed", "Unknown resource - could not find token service endpoint.");
      r4(t6);
    }) : l2 && a2 ? n2() : e4.sinfo_._selfReq ? e4.sinfo_._selfReq.selfDfd.then((t6) => {
      var _a;
      const r5 = {};
      let s7, i4, n3, o3;
      return t6 && (s7 = (_a = t6.user) == null ? void 0 : _a.username, r5.username = s7, r5.allSSL = t6.allSSL, i4 = t6.supportsOAuth, o3 = parseFloat(t6.currentVersion), "multitenant" === t6.portalMode && (n3 = t6.customBaseUrl), e4.sinfo_.currentVersion = o3), e4.sinfo_.webTierAuth = !!s7, s7 && this.normalizeWebTierAuth ? this.generateToken(e4.sinfo_, null, { ssl: r5.allSSL }).catch(() => null).then((e5) => (r5.portalToken = e5 && e5.token, r5.tokenExpiration = e5 && e5.expires, r5)) : !s7 && i4 && o3 >= 4.4 && !this._findOAuthInfo(e4.resUrl_) ? this._generateOAuthInfo({ portalUrl: e4.sinfo_.server, customBaseUrl: n3, owningTenant: e4.sinfo_._selfReq.owningTenant }).catch(() => null).then(() => r5) : r5;
    }).catch(() => null).then((t6) => {
      e4.sinfo_._selfReq = null, t6 ? s6(t6.username, t6.allSSL, t6.portalToken, t6.tokenExpiration) : s6();
    }) : s6();
  }
  _generateOAuthInfo(e4) {
    let t5, r4 = null, i4 = e4.portalUrl;
    const n2 = e4.customBaseUrl, o3 = e4.owningTenant, a2 = !this._defaultOAuthInfo && this._createDefaultOAuthInfo && !this._hasTestedIfAppIsOnPortal;
    if (a2) {
      r4 = window.location.href;
      let e5 = r4.indexOf("?");
      e5 > -1 && (r4 = r4.slice(0, e5)), e5 = r4.search(/\/(apps|home)\//), r4 = e5 > -1 ? r4.slice(0, e5) : null;
    }
    return a2 && r4 ? (this._hasTestedIfAppIsOnPortal = true, t5 = U(r4 + "/sharing/rest", { query: { f: "json" } }).then(() => {
      this._defaultOAuthInfo = new i2({ appId: "arcgisonline", popupCallbackUrl: r4 + "/home/oauth-callback.html" });
    })) : t5 = Promise.resolve(), t5.then(() => {
      if (this._defaultOAuthInfo)
        return i4 = i4.replace(/^http:/i, "https:"), U(i4 + "/sharing/rest/oauth2/validateRedirectUri", { query: { accountId: o3, client_id: this._defaultOAuthInfo.appId, redirect_uri: _(this._defaultOAuthInfo.popupCallbackUrl), f: "json" } }).then((e5) => {
          if (e5.data.valid) {
            const t6 = this._defaultOAuthInfo.clone();
            e5.data.urlKey && n2 ? t6.portalUrl = "https://" + e5.data.urlKey.toLowerCase() + "." + n2 : t6.portalUrl = i4, t6.popup = window !== window.top || !(F(i4, this._appOrigin) || this._gwDomains.some((e6) => e6.regex.test(i4) && e6.regex.test(this._appOrigin))), this.oAuthInfos.push(t6);
          }
        });
    });
  }
  _doOAuthSignIn(e4, t5, r4, s6) {
    const n2 = r4._oAuthCred, a2 = { portalUrl: r4.portalUrl };
    !r4.popup && r4.preserveUrlHash && window.location.hash && (a2.hash = window.location.hash), n2.stateUID && (a2.uid = n2.stateUID);
    const h = { client_id: r4.appId, response_type: n2.codeVerifier ? "code" : "token", state: JSON.stringify(a2), expiration: r4.expiration, locale: r4.locale, redirect_uri: this._getRedirectURI(r4, !!n2.codeVerifier) };
    r4.forceLogin && (h.force_login = true), r4.forceUserId && r4.userId && (h.prepopulatedusername = r4.userId), !r4.popup && this._doPortalSignIn(e4) && (h.redirectToUserOrgUrl = true), n2.codeVerifier && (h.code_challenge = s6 || n2.codeVerifier, h.code_challenge_method = s6 ? "S256" : "plain");
    const l2 = r4.portalUrl.replace(/^http:/i, "https:") + "/sharing/oauth2/authorize", c4 = l2 + "?" + v(h);
    if (r4.popup) {
      const e5 = window.open(c4, "esriJSAPIOAuth", r4.popupWindowFeatures);
      if (e5)
        e5.focus(), this._oAuthDfd.oAuthWin_ = e5, this._oAuthIntervalId = setInterval(() => {
          if (e5.closed) {
            clearInterval(this._oAuthIntervalId), this._oAuthOnPopupHandle.remove();
            const e6 = this._oAuthDfd;
            if (e6) {
              const t6 = new s("identity-manager:user-aborted", "ABORTED");
              e6.reject(t6);
            }
          }
        }, 500), this._oAuthOnPopupHandle = o(window, ["arcgis:auth:hash", "arcgis:auth:location:search"], (e6) => {
          "arcgis:auth:hash" === e6.type ? this.setOAuthResponseHash(e6.detail) : this._setOAuthResponseQueryString(e6.detail);
        });
      else {
        const e6 = new s("identity-manager:popup-blocked", "ABORTED");
        this._oAuthDfd.reject(e6);
      }
    } else
      this._rejectOnPersistedPageShow = true, this._oAuthRedirectFunc ? this._oAuthRedirectFunc({ authorizeParams: h, authorizeUrl: l2, resourceUrl: e4, serverInfo: t5, oAuthInfo: r4 }) : window.location.href = c4;
  }
  _getRedirectURI(e4, t5) {
    const r4 = window.location.href.replace(/#.*$/, "");
    if (e4.popup)
      return _(e4.popupCallbackUrl);
    if (t5) {
      const e5 = I(r4);
      return e5.query && ["code", "error", "error_description", "message_code", "persist", "state"].forEach((t6) => {
        delete e5.query[t6];
      }), Et(e5.path, e5.query);
    }
    return r4;
  }
};
q.prototype.declaredClass = "esri.identity.IdentityManagerBase";
var j = class extends o2.EventedAccessor {
  constructor(e4) {
    super(e4), this._oAuthCred = null, this.tokenRefreshBuffer = 2, (e4 == null ? void 0 : e4._oAuthCred) && (this._oAuthCred = e4._oAuthCred);
  }
  initialize() {
    this.resources = this.resources || [], null == this.creationTime && (this.creationTime = Date.now());
  }
  refreshToken() {
    const e4 = t3.findServerInfo(this.server), t5 = e4 == null ? void 0 : e4.owningSystemUrl, s6 = !!t5 && "server" === this.scope, i4 = s6 && C(e4, t3._legacyFed), n2 = e4.webTierAuth, o3 = n2 && t3.normalizeWebTierAuth, a2 = P[this.server], h = a2 == null ? void 0 : a2[this.userId];
    let l2, c4 = this.resources && this.resources[0], d2 = s6 ? t3.findServerInfo(t5) : null, u2 = { username: this.userId, password: h };
    if (n2 && !o3)
      return;
    s6 && !d2 && t3.serverInfos.some((e5) => (t3._isIdProvider(t5, e5.server) && (d2 = e5), !!d2));
    const p3 = d2 ? t3.findCredential(d2.server, this.userId) : null;
    if (!s6 || p3) {
      if (!i4) {
        if (s6)
          l2 = { serverUrl: c4, token: p3 == null ? void 0 : p3.token, ssl: p3 && p3.ssl };
        else if (o3)
          u2 = null, l2 = { ssl: this.ssl };
        else {
          if (!h) {
            let t6;
            return c4 && (c4 = t3._sanitizeUrl(c4), this._enqueued = 1, t6 = t3._enqueue(c4, e4, null, null, this.isAdmin, this), t6.then(() => {
              this._enqueued = 0, this.refreshServerTokens();
            }).catch(() => {
              this._enqueued = 0;
            })), t6;
          }
          this.isAdmin && (l2 = { isAdmin: true });
        }
        return t3.generateToken(s6 ? d2 : e4, s6 ? null : u2, l2).then((e5) => {
          this.token = e5.token, this.expires = null != e5.expires ? Number(e5.expires) : null, this.creationTime = Date.now(), this.validity = e5.validity, this.emitTokenChange(), this.refreshServerTokens();
        }).catch(() => {
        });
      }
      p3 == null ? void 0 : p3.refreshToken();
    }
  }
  refreshServerTokens() {
    "portal" === this.scope && t3.credentials.forEach((e4) => {
      const t5 = t3.findServerInfo(e4.server), s6 = t5 == null ? void 0 : t5.owningSystemUrl;
      e4 !== this && e4.userId === this.userId && s6 && "server" === e4.scope && (t3._hasSameServerInstance(this.server, s6) || t3._isIdProvider(s6, this.server)) && (C(t5, t3._legacyFed) ? (e4.token = this.token, e4.expires = this.expires, e4.creationTime = this.creationTime, e4.validity = this.validity, e4.emitTokenChange()) : e4.refreshToken());
    });
  }
  emitTokenChange(e4) {
    clearTimeout(this._refreshTimer);
    const t5 = this.server ? t3.findServerInfo(this.server) : null, s6 = t5 == null ? void 0 : t5.owningSystemUrl, i4 = s6 ? t3.findServerInfo(s6) : null;
    false === e4 || s6 && "portal" !== this.scope && (!(i4 == null ? void 0 : i4.webTierAuth) || t3.normalizeWebTierAuth) || null == this.expires && null == this.validity || this._startRefreshTimer(), this.emit("token-change");
  }
  destroy() {
    this.userId = this.server = this.token = this.expires = this.validity = this.resources = this.creationTime = null, this._oAuthCred && (this._oAuthCred.destroy(), this._oAuthCred = null);
    const e4 = t3.credentials.indexOf(this);
    e4 > -1 && t3.credentials.splice(e4, 1), this.emitTokenChange(), this.emit("destroy");
  }
  toJSON() {
    const e4 = l({ userId: this.userId, server: this.server, token: this.token, expires: this.expires, validity: this.validity, ssl: this.ssl, isAdmin: this.isAdmin, creationTime: this.creationTime, scope: this.scope }), t5 = this.resources;
    return t5 && t5.length > 0 && (e4.resources = t5.slice()), e4;
  }
  _startRefreshTimer() {
    clearTimeout(this._refreshTimer);
    const e4 = 6e4 * this.tokenRefreshBuffer, t5 = 2 ** 31 - 1;
    let r4 = (this.validity ? this.creationTime + 6e4 * this.validity : this.expires) - Date.now();
    r4 < 0 ? r4 = 0 : r4 > t5 && (r4 = t5), this._refreshTimer = setTimeout(this.refreshToken.bind(this), r4 > e4 ? r4 - e4 : r4);
  }
};
e([y()], j.prototype, "creationTime", void 0), e([y()], j.prototype, "expires", void 0), e([y()], j.prototype, "isAdmin", void 0), e([y()], j.prototype, "oAuthState", void 0), e([y()], j.prototype, "resources", void 0), e([y()], j.prototype, "scope", void 0), e([y()], j.prototype, "server", void 0), e([y()], j.prototype, "ssl", void 0), e([y()], j.prototype, "token", void 0), e([y()], j.prototype, "tokenRefreshBuffer", void 0), e([y()], j.prototype, "userId", void 0), e([y()], j.prototype, "validity", void 0), j = e([a("esri.identity.Credential")], j);

// node_modules/@arcgis/core/identity/IdentityManager.js
var r3 = class extends q {
};
r3.prototype.declaredClass = "esri.identity.IdentityManager";
var s5 = new r3();
i(s5);
export {
  s5 as default
};
//# sourceMappingURL=IdentityManager-NGZBG6JT.js.map
