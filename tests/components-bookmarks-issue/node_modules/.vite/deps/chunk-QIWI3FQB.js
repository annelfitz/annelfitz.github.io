import {
  i as i2,
  l as l2,
  m,
  n as n7,
  r as r2
} from "./chunk-7TMUM6KU.js";
import {
  h
} from "./chunk-LNR6W2LA.js";
import {
  l
} from "./chunk-ZGRPTRAY.js";
import {
  n as n3
} from "./chunk-OI7VGKTO.js";
import {
  e as e4,
  n as n4
} from "./chunk-S3ISUHOZ.js";
import {
  L
} from "./chunk-UN4X7MBS.js";
import {
  s as s3
} from "./chunk-2LPPSWTR.js";
import {
  o as o2
} from "./chunk-7E37N35O.js";
import {
  n as n6
} from "./chunk-BEXFYHUM.js";
import {
  t as t2
} from "./chunk-IKON42NH.js";
import {
  W,
  Y,
  n as n5,
  t
} from "./chunk-JMQDZBMG.js";
import {
  e as e3
} from "./chunk-7RP2CUPD.js";
import {
  e as e7
} from "./chunk-D5LHX57G.js";
import {
  e as e6
} from "./chunk-HLKM6YBE.js";
import {
  e as e5
} from "./chunk-EAAEPSBY.js";
import {
  f as f2
} from "./chunk-QYC3GV65.js";
import {
  b as b2
} from "./chunk-G7FOE26O.js";
import {
  S as S2
} from "./chunk-G5EVVNIJ.js";
import {
  B,
  H
} from "./chunk-2ICUS4HL.js";
import {
  D,
  e2,
  r
} from "./chunk-RGCWZ2KZ.js";
import {
  i,
  n as n2
} from "./chunk-5VMSFOCB.js";
import {
  s as s2,
  u
} from "./chunk-C62RZQQX.js";
import {
  o
} from "./chunk-QLL2YG25.js";
import {
  d as d2,
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import {
  C,
  d,
  p
} from "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import {
  b,
  f2 as f,
  k as k2
} from "./chunk-JGDJR5EV.js";
import {
  n2 as n,
  s
} from "./chunk-7RBRCL6S.js";
import {
  k
} from "./chunk-J2EGIWT6.js";

// node_modules/@arcgis/core/widgets/Features/css.js
var e8 = "esri-features";
var n8 = { icon: `${e8}__icon`, actionImage: `${e8}__action-image`, base: e8, container: `${e8}__container`, contentContainer: `${e8}__content-container`, contentFeature: `${e8}__content-feature`, flowItemCollapsed: `${e8}__flow-item--collapsed`, header: `${e8}__header`, footer: `${e8}__footer`, featureMenuObserver: `${e8}__feature-menu-observer`, actionExit: `${e8}__action--exit`, loader: `${e8}__loader`, featuresHeading: `${e8}__heading`, paginationActionBar: `${e8}__pagination-action-bar`, paginationPrevious: `${e8}__pagination-previous`, paginationNext: `${e8}__pagination-next` };

// node_modules/@arcgis/core/widgets/Features/FeaturesRelatedRecords.js
var n9 = class extends D {
  constructor(e9, t3) {
    super(e9, t3), this.messages = null, this.closed = false, this.closable = true, this._handleOpenRelatedFeature = (e10) => {
      this.emit("open-related-feature", { feature: e10 });
    };
  }
  loadDependencies() {
    return r({ action: () => import("./calcite-action-P2CTRNG2.js"), "flow-item": () => import("./calcite-flow-item-BUZXXDGT.js") });
  }
  render() {
    const { flowItems: e9 } = this, t3 = e9 == null ? void 0 : e9.toArray();
    return n2(i, null, t3 == null ? void 0 : t3.map((e10) => this._renderRelatedRecordsFlowItem(e10)));
  }
  _handleCloseClick() {
    this.emit("close");
  }
  _handleExitClick() {
    this.emit("exit");
  }
  _handleRelatedRecordsBackClick() {
    var _a;
    const e9 = (_a = this.flowItems) == null ? void 0 : _a.pop();
    e9 && ("showAllEnabled" in e9.viewModel && (e9.viewModel.showAllEnabled = false), e9 && (e9.viewModel = null, e9.destroy()));
  }
  _renderRelatedRecordsFlowItem(e9) {
    const { messages: t3, closable: o3, closed: s6 } = this, r3 = "graphic" in e9 && !e9.isTable, l5 = t3.exitRelatedRecords, a2 = t3.selectFeature;
    return n2("calcite-flow-item", { bind: this, closable: o3, closed: s6, description: this._getRelatedRecordsFlowItemDescription(e9), heading: e9.title ?? "", key: `flow-item-${e9.viewModel.uid}`, onCalciteFlowItemBack: (e10) => {
      e10.preventDefault(), this._handleRelatedRecordsBackClick();
    }, onCalciteFlowItemClose: this._handleCloseClick }, n2("calcite-action", { appearance: "transparent", bind: this, class: n8.actionExit, icon: "move-up", key: "exit-related-records-action", onclick: this._handleExitClick, slot: "header-actions-start", text: l5, title: l5 }), r3 ? n2("calcite-action", { appearance: "transparent", bind: this, icon: "zoom-to-object", key: "open-related-feature-action", onclick: () => this._handleOpenRelatedFeature(e9), slot: "header-actions-end", text: a2, title: a2 }) : null, n2("div", { class: n8.container }, e9.render()));
  }
  _getRelatedRecordsFlowItemDescription(e9) {
    return "featureCountDescription" in e9 ? e9.featureCountDescription : e9.viewModel.description ?? "";
  }
};
e([y()], n9.prototype, "flowItems", void 0), e([y(), e2("esri/widgets/Features/t9n/Features")], n9.prototype, "messages", void 0), e([y()], n9.prototype, "closed", void 0), e([y()], n9.prototype, "closable", void 0), n9 = e([a("esri.widgets.Features.FeaturesRelatedRecords")], n9);
var d3 = n9;

// node_modules/@arcgis/core/widgets/Popup/actionUtils.js
var s4 = "esri.widgets.Popup.PopupViewModel";
var c = () => n.getLogger(s4);
var u2 = (t3) => {
  const { event: s6, view: c2, viewModel: u3 } = t3, { action: l5 } = s6;
  if (!l5)
    return Promise.reject(new s("trigger-action:missing-arguments", "Event has no action"));
  const { disabled: d5, id: g2 } = l5;
  if (!g2)
    return Promise.reject(new s("trigger-action:invalid-action", "action.id is missing"));
  if (d5)
    return Promise.reject(new s("trigger-action:invalid-action", "Action is disabled"));
  if (g2 === n7.id)
    return w(u3).catch(f);
  if (g2 === l2.id)
    return f3(u3);
  if (g2 === m.id)
    return u3.browseClusterEnabled = !u3.browseClusterEnabled, u3.featureMenuOpen = u3.browseClusterEnabled, Promise.resolve();
  if (g2 === r2.id) {
    u3.visible = false;
    const { selectedFeature: t4 } = u3;
    if (!t4)
      return Promise.reject(new s(`trigger-action:${r2.id}`, "selectedFeature is required", { selectedFeature: t4 }));
    const { sourceLayer: r3 } = t4;
    return r3 ? r3.remove(t4) : c2 == null ? void 0 : c2.graphics.remove(t4), Promise.resolve();
  }
  return Promise.resolve();
};
function l3(e9) {
  const { selectedFeature: t3, location: r3, view: o3 } = e9;
  return o3 ? t3 ?? r3 ?? null : null;
}
function d4(e9) {
  var _a, _b;
  return !!e9 && e9.isAggregate && "cluster" === ((_b = (_a = e9.sourceLayer) == null ? void 0 : _a.featureReduction) == null ? void 0 : _b.type);
}
async function g(e9, t3) {
  if ("3d" !== (t3 == null ? void 0 : t3.type) || !e9 || "esri.Graphic" !== e9.declaredClass)
    return true;
  const r3 = t3.getViewForGraphic(e9);
  if (r3 && "whenGraphicBounds" in r3) {
    let t4 = null;
    try {
      t4 = await r3.whenGraphicBounds(e9, { useViewElevation: true });
    } catch (o3) {
    }
    return !t4 || !t4.boundingBox || t4.boundingBox[0] === t4.boundingBox[3] && t4.boundingBox[1] === t4.boundingBox[4] && t4.boundingBox[2] === t4.boundingBox[5];
  }
  return true;
}
async function w(t3) {
  var _a;
  const { location: r3, selectedFeature: i3, view: n10, zoomFactor: a2 } = t3, s6 = l3(t3);
  if (!n10 || !s6) {
    const t4 = new s("zoom-to:invalid-target-or-view", "Cannot zoom to location without a target and view.", { target: s6, view: n10 });
    throw c().error(t4), t4;
  }
  const u3 = n10.scale / a2, d5 = (_a = t3.selectedFeature) == null ? void 0 : _a.geometry, w2 = d5 ?? r3, f4 = null != w2 && "point" === w2.type && await g(i3, n10);
  n7.active = true, n7.disabled = true;
  try {
    await t3.zoomTo({ target: { target: s6, scale: f4 ? u3 : void 0 } });
  } catch (v2) {
    const t4 = new s("zoom-to:invalid-graphic", "Could not zoom to the location of the graphic.", { graphic: i3 });
    c().error(t4);
  } finally {
    n7.active = false, n7.disabled = false, t3.zoomToLocation = null, f4 && (t3.location = w2);
  }
}
async function f3(t3) {
  const { selectedFeature: r3, view: o3 } = t3;
  if ("2d" !== (o3 == null ? void 0 : o3.type)) {
    const t4 = new s("zoomToCluster:invalid-view", "View must be 2d MapView.", { view: o3 });
    throw c().error(t4), t4;
  }
  if (!r3 || !d4(r3)) {
    const t4 = new s("zoomToCluster:invalid-selectedFeature", "Selected feature must represent an aggregate/cluster graphic.", { selectedFeature: r3 });
    throw c().error(t4), t4;
  }
  const [n10, a2] = await p2(o3, r3);
  l2.active = true, l2.disabled = true;
  const { extent: s6 } = await n10.queryExtent(a2);
  s6 && await t3.zoomTo({ target: s6 }), l2.active = false, l2.disabled = false;
}
async function v(e9) {
  const { view: t3, selectedFeature: r3 } = e9;
  if (!t3 || !r3)
    return;
  const [o3, i3] = await p2(t3, r3), { extent: n10 } = await o3.queryExtent(i3);
  e9.selectedClusterBoundaryFeature.geometry = n10, t3.graphics.add(e9.selectedClusterBoundaryFeature);
}
async function m2(e9) {
  const { selectedFeature: t3, view: r3 } = e9;
  if (!r3 || !t3)
    return;
  const [o3, i3] = await p2(r3, t3);
  m.active = true, m.disabled = true;
  const { features: a2 } = await o3.queryFeatures(i3);
  m.active = false, m.disabled = false, m.value = true, e9 == null ? void 0 : e9.open({ features: [t3].concat(a2), featureMenuOpen: true });
}
async function p2(e9, t3) {
  const r3 = await e9.whenLayerView(t3.sourceLayer), o3 = r3.createQuery(), i3 = t3.getObjectId();
  return o3.aggregateIds = null != i3 ? [i3] : [], [r3, o3];
}
function y2(e9) {
  m.value = false;
  const t3 = e9.features.filter((e10) => d4(e10));
  t3.length && (e9.features = t3);
}

// node_modules/@arcgis/core/widgets/Features/FeaturesViewModel.js
var H2 = () => [n7.clone()];
var B2 = () => [l2.clone(), m.clone()];
var U = null;
function Z(e9, t3) {
  return "building-scene" === e9 || "2d" === t3 && ("map-image" === e9 || "tile" === e9 || "imagery" === e9 || "imagery-tile" === e9);
}
var G = class extends t2(l) {
  constructor(e9) {
    super(e9), this._pendingPromises = new s3(), this._fetchFeaturesController = null, this._highlightSelectedFeaturePromise = null, this._highlightActiveFeaturePromise = null, this._selectedClusterFeature = null, this._locationScaleHandle = null, this.actions = new i2(), this.activeFeature = null, this.autoCloseEnabled = false, this.browseClusterEnabled = false, this.content = null, this.defaultPopupTemplateEnabled = false, this.featurePage = null, this.featuresPerPage = 20, this.featureMenuOpen = false, this.featureViewModelAbilities = null, this.featureViewModels = [], this.highlightEnabled = true, this.includeDefaultActions = true, this.selectedClusterBoundaryFeature = new f2({ symbol: new S2({ outline: { width: 1.5, color: "cyan" }, style: "none" }) }), this.title = null, this.updateLocationEnabled = false, this.view = null, this.visible = false, this.zoomFactor = 4, this.zoomToLocation = null, this._debouncedLocationUpdate = k2(async (e10) => {
      var _a, _b, _c;
      const { spatialReference: t3 } = this, i3 = (_b = (_a = this.selectedFeature) == null ? void 0 : _a.geometry) == null ? void 0 : _b.type, s6 = this.location ?? e10;
      if ("mesh" !== i3 && t3 && s6 && this.selectedFeature)
        if ("point" !== i3)
          try {
            const { pendingFeatures: e11 } = await this._fetchFeaturesWithController({ mapPoint: s6 }), i4 = (await Promise.all(e11)).flat().filter(Boolean);
            if (!i4.length)
              return;
            if (i4.length !== this.features.length) {
              const e12 = this._getHighlightLayer(this.selectedFeature), t4 = "imagery" === (e12 == null ? void 0 : e12.type) ? void 0 : e12 && "objectIdField" in e12 ? e12.objectIdField || o2 : null;
              if (t4) {
                const s7 = this.selectedFeature.getObjectId(), r4 = i4.findIndex((i5) => {
                  const r5 = this._getHighlightLayer(i5);
                  return (r5 == null ? void 0 : r5.uid) === (e12 == null ? void 0 : e12.uid) && i5.attributes[t4] === s7;
                });
                this.features = i4, this.selectedFeatureIndex = r4;
              }
            }
            const r3 = (_c = i4[this.selectedFeatureIndex]) == null ? void 0 : _c.geometry, o3 = ("mesh" !== (r3 == null ? void 0 : r3.type) ? r3 : null) ?? this.selectedFeature.geometry, a2 = o3 ? B(o3, t3) : null;
            if (!a2)
              return;
            U || (U = await import("./geometryEngineAsync-BHSUW6A2.js")), await U.intersects(a2, s6) || (this.location = (await U.nearestCoordinate(a2, s6)).coordinate ?? s6);
          } catch (o3) {
            b(o3) || n.getLogger(this).error(o3);
          }
        else
          this.location = n3(this.selectedFeature.geometry) ?? s6;
    });
  }
  initialize() {
    this.addHandles([this.on("view-change", () => this._autoClose()), d(() => [this.highlightEnabled, this.selectedFeature, this.visible, this.view], () => this._highlightSelectedFeature()), d(() => [this.highlightEnabled, this.activeFeature, this.visible, this.view], () => this._highlightActiveFeature()), d(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.animation) == null ? void 0 : _b.state;
    }, (e9) => this._animationStateChange(e9)), d(() => this.location, (e9) => this._locationChange(e9)), d(() => this.selectedFeature, (e9) => this._selectedFeatureChange(e9)), d(() => [this.selectedFeatureIndex, this.featureCount, this.featuresPerPage], () => this._selectedFeatureIndexChange()), d(() => [this.featurePage, this.selectedFeatureIndex, this.featureCount, this.featuresPerPage, this.featureViewModels], () => this._setGraphicOnFeatureViewModels()), d(() => this.featureViewModels, () => this._featureViewModelsChange()), this.on("trigger-action", (e9) => u2({ event: e9, viewModel: this, view: this.view })), p(() => !this.waitingForResult, () => this._waitingForResultChange(), C), d(() => [this.features, this.map, this.spatialReference, this.timeZone], () => this._updateFeatureVMs()), d(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.scale;
    }, () => this._viewScaleChange()), p(() => !this.visible, () => this.browseClusterEnabled = false), d(() => this.browseClusterEnabled, (e9) => e9 ? this.enableClusterBrowsing() : this.disableClusterBrowsing())]);
  }
  destroy() {
    var _a;
    this._cancelFetchingFeatures(), this._pendingPromises.clear(), this.browseClusterEnabled = false, this.view = null, this.map = null, this.spatialReference = null, this.timeZone = null, (_a = this._locationScaleHandle) == null ? void 0 : _a.remove(), this._locationScaleHandle = null;
  }
  get active() {
    return !(!this.visible || this.waitingForResult);
  }
  get allActions() {
    const e9 = this._get("allActions") || new i2();
    e9.removeAll();
    const { actions: t3, defaultActions: i3, defaultPopupTemplateEnabled: s6, includeDefaultActions: r3, selectedFeature: o3 } = this, a2 = r3 ? i3.concat(t3) : t3, n10 = o3 && ("function" == typeof o3.getEffectivePopupTemplate && o3.getEffectivePopupTemplate(s6) || o3.popupTemplate), l5 = n10 == null ? void 0 : n10.actions, h2 = (n10 == null ? void 0 : n10.overwriteActions) ? l5 : (l5 == null ? void 0 : l5.concat(a2)) ?? a2;
    return h2 == null ? void 0 : h2.filter(Boolean).forEach((t4) => e9.add(t4)), e9;
  }
  get defaultActions() {
    const e9 = this._get("defaultActions") || new i2();
    return e9.removeAll(), e9.addMany(d4(this.selectedFeature) ? B2() : H2()), e9;
  }
  get featureCount() {
    return this.features.length;
  }
  set features(e9) {
    const t3 = e9 || [];
    this._set("features", t3);
    const { pendingPromisesCount: i3, promiseCount: s6, selectedFeatureIndex: r3 } = this, o3 = s6 && t3.length;
    o3 && i3 && -1 === r3 ? this.selectedFeatureIndex = 0 : o3 && -1 !== r3 || (this.selectedFeatureIndex = t3.length ? 0 : -1);
  }
  set location(e9) {
    var _a, _b;
    let t3 = e9;
    const i3 = (_a = this.spatialReference) == null ? void 0 : _a.isWebMercator, s6 = (_b = e9 == null ? void 0 : e9.spatialReference) == null ? void 0 : _b.isWGS84;
    s6 && i3 && (t3 = d2(e9)), this._set("location", t3);
  }
  get map() {
    var _a;
    return ((_a = this.view) == null ? void 0 : _a.map) ?? null;
  }
  set map(e9) {
    this._override("map", e9);
  }
  get pendingPromisesCount() {
    return this._pendingPromises.size;
  }
  get promiseCount() {
    return this.promises.length;
  }
  get promises() {
    return this._get("promises") || [];
  }
  set promises(e9) {
    this._pendingPromises.clear(), this.features = [], Array.isArray(e9) && e9.length ? (this._set("promises", e9), (e9 = e9.slice(0)).forEach((e10) => this._pendingPromises.add(e10)), e9.reduce((e10, t3) => e10.finally(() => t3.then((e11) => {
      this._pendingPromises.has(t3) && this._updateFeatures(e11);
    }).finally(() => this._pendingPromises.delete(t3)).catch(() => {
    })), Promise.resolve())) : this._set("promises", []);
  }
  get selectedFeature() {
    const { features: e9, selectedFeatureIndex: t3 } = this;
    if (-1 === t3)
      return null;
    return e9[t3] || null;
  }
  get selectedFeatureIndex() {
    const e9 = this._get("selectedFeatureIndex");
    return "number" == typeof e9 ? e9 : -1;
  }
  set selectedFeatureIndex(e9) {
    const { featureCount: t3 } = this;
    e9 = isNaN(e9) || e9 < -1 || !t3 ? -1 : (e9 + t3) % t3, this.activeFeature = null, this._set("selectedFeatureIndex", e9);
  }
  get selectedFeatureViewModel() {
    return this.featureViewModels[this.selectedFeatureIndex] || null;
  }
  get spatialReference() {
    var _a;
    return ((_a = this.view) == null ? void 0 : _a.spatialReference) ?? null;
  }
  set spatialReference(e9) {
    this._override("spatialReference", e9);
  }
  get state() {
    const { view: e9, map: t3 } = this;
    return e9 ? e9.ready ? "ready" : "disabled" : t3 ? "ready" : "disabled";
  }
  get timeZone() {
    var _a;
    return ((_a = this.view) == null ? void 0 : _a.timeZone) ?? o;
  }
  set timeZone(e9) {
    this._overrideIfSome("timeZone", e9);
  }
  get waitingForContents() {
    return this.featureViewModels.some((e9) => e9.waitingForContent);
  }
  get waitingForResult() {
    return !(!(!!this._fetchFeaturesController || this.pendingPromisesCount > 0) || 0 !== this.featureCount);
  }
  centerAtLocation() {
    const { view: e9 } = this, t3 = l3(this);
    return t3 && e9 ? this.callGoTo({ target: { target: t3, scale: e9.scale } }) : Promise.reject(new s("center-at-location:invalid-target-or-view", "Cannot center at a location without a target and view.", { target: t3, view: e9 }));
  }
  zoomTo(e9) {
    return this.callGoTo(e9);
  }
  clear() {
    this.set({ promises: [], features: [], content: null, title: null, location: null, activeFeature: null });
  }
  fetchFeatures(e9, t3) {
    var _a;
    const { view: i3 } = this;
    if (!i3 || !e9)
      throw new s("fetch-features:invalid-screenpoint-or-view", "Cannot fetch features without a screenPoint and view.", { screenPoint: e9, view: i3 });
    return i3.fetchPopupFeatures(e9, { pointerType: (_a = t3 == null ? void 0 : t3.event) == null ? void 0 : _a.pointerType, defaultPopupTemplateEnabled: this.defaultPopupTemplateEnabled, signal: t3 == null ? void 0 : t3.signal });
  }
  open(e9) {
    const t3 = { updateLocationEnabled: false, promises: [], fetchFeatures: false, ...e9, visible: true }, { fetchFeatures: i3 } = t3;
    delete t3.fetchFeatures, i3 && this._setFetchFeaturesPromises(t3.location);
    const s6 = ["actionsMenuOpen", "collapsed"];
    for (const r3 of s6)
      delete t3[r3];
    this.set(t3);
  }
  triggerAction(e9) {
    const t3 = this.allActions.at(e9);
    t3 && !t3.disabled && this.emit("trigger-action", { action: t3 });
  }
  next() {
    return this.selectedFeatureIndex++, this;
  }
  previous() {
    return this.selectedFeatureIndex--, this;
  }
  disableClusterBrowsing() {
    y2(this), this._clearBrowsedClusterGraphics();
  }
  async enableClusterBrowsing() {
    const { view: e9, selectedFeature: t3 } = this;
    "2d" === (e9 == null ? void 0 : e9.type) ? d4(t3) ? (await v(this), await m2(this)) : n.getLogger(this).warn("enableClusterBrowsing:invalid-selectedFeature: Selected feature must represent an aggregate/cluster graphic.", t3) : n.getLogger(this).warn("enableClusterBrowsing:invalid-view: View must be 2d MapView.", t3);
  }
  handleViewClick(e9) {
    this._fetchFeaturesAndOpen(e9);
  }
  _animationStateChange(e9) {
    this.zoomToLocation || (n7.disabled = "waiting-for-target" === e9);
  }
  _clearBrowsedClusterGraphics() {
    var _a, _b;
    const e9 = [this.selectedClusterBoundaryFeature, this._selectedClusterFeature].filter(k);
    (_b = (_a = this.view) == null ? void 0 : _a.graphics) == null ? void 0 : _b.removeMany(e9), this._selectedClusterFeature = null, this.selectedClusterBoundaryFeature.geometry = null;
  }
  _viewScaleChange() {
    if (d4(this.selectedFeature))
      return this.browseClusterEnabled = false, this.visible = false, void this.clear();
    this.browseClusterEnabled && (this.features = this.selectedFeature ? [this.selectedFeature] : []);
  }
  _locationChange(e9) {
    const { selectedFeature: t3, updateLocationEnabled: i3, view: s6 } = this;
    s6 && i3 && e9 && (!t3 || t3.geometry) && this.centerAtLocation();
  }
  _selectedFeatureIndexChange() {
    this.featurePage = this.featureCount > 1 ? Math.floor(this.selectedFeatureIndex / this.featuresPerPage) + 1 : null;
  }
  _featureViewModelsChange() {
    this.featurePage = this.featureCount > 1 ? 1 : null;
  }
  _setGraphicOnFeatureViewModels() {
    const { features: e9, featureCount: t3, featurePage: i3, featuresPerPage: s6, featureViewModels: r3 } = this;
    if (null === i3)
      return;
    const o3 = ((i3 - 1) * s6 + t3) % t3, a2 = o3 + s6;
    r3.slice(o3, a2).forEach((t4, i4) => {
      t4 && (t4.graphic ?? (t4.graphic = e9[o3 + i4]));
    });
  }
  async _selectedFeatureChange(e9) {
    var _a;
    const { location: t3, updateLocationEnabled: i3, view: s6 } = this;
    if (e9 && s6) {
      if (this.browseClusterEnabled) {
        if (this._selectedClusterFeature && (s6.graphics.remove(this._selectedClusterFeature), this._selectedClusterFeature = null), d4(e9))
          return;
        return e9.symbol = await L(e9), this._selectedClusterFeature = e9, void s6.graphics.add(this._selectedClusterFeature);
      }
      if (e9.symbol = await L(e9), !i3 && t3 || !e9.geometry) {
        if (i3 && !e9.geometry) {
          await this.centerAtLocation();
          const e10 = (_a = s6.center) == null ? void 0 : _a.clone();
          e10 && (this.location = e10);
        }
      } else
        this.location = n3(e9.geometry);
    }
  }
  _waitingForResultChange() {
    !this.featureCount && this.promises && (this.visible = false);
  }
  async _setFetchFeaturesPromises(e9) {
    const { pendingFeatures: t3 } = await this._fetchFeaturesWithController({ mapPoint: e9 });
    this.promises = t3;
  }
  _destroyFeatureVMs() {
    this.featureViewModels.forEach((e9) => e9 && !e9.destroyed && e9.destroy()), this._set("featureViewModels", []);
  }
  _updateFeatureVMs() {
    const { selectedFeature: e9, features: t3, featureViewModels: i3, view: s6, spatialReference: r3, map: o3, timeZone: a2, location: n10 } = this;
    if (d4(e9) || (this.browseClusterEnabled = false), this._destroyFeatureVMs(), !(t3 == null ? void 0 : t3.length))
      return;
    const l5 = i3.slice(0), h2 = [];
    t3.forEach((t4, i4) => {
      if (!t4)
        return;
      let u3 = null;
      if (l5.some((e10, i5) => (e10 && e10.graphic === t4 && (u3 = e10, l5.splice(i5, 1)), !!u3)), u3)
        h2[i4] = u3;
      else {
        const l6 = new Y({ abilities: this.featureViewModelAbilities, defaultPopupTemplateEnabled: this.defaultPopupTemplateEnabled, spatialReference: r3, graphic: t4 === e9 ? t4 : null, location: n10, map: o3, view: s6, timeZone: a2 });
        h2[i4] = l6;
      }
    }), l5.forEach((e10) => e10 && !e10.destroyed && e10.destroy()), this._set("featureViewModels", h2);
  }
  async _getScreenPoint(e9, t3) {
    const { spatialReference: i3, view: s6 } = this;
    if (!s6)
      return null;
    await (s6 == null ? void 0 : s6.when());
    const r3 = e9 == null ? void 0 : e9.spatialReference;
    return r3 && i3 ? (await H(r3, i3, null, t3), s6.toScreen(e9)) : null;
  }
  _cancelFetchingFeatures() {
    const e9 = this._fetchFeaturesController;
    e9 && e9.abort(), this._fetchFeaturesController = null;
  }
  async _projectScreenPointAndFetchFeatures({ mapPoint: e9, screenPoint: t3, event: i3, signal: s6 }) {
    return this.fetchFeatures(t3 ?? await this._getScreenPoint(e9 ?? this.location, { signal: s6 }), { signal: s6, event: i3 });
  }
  _fetchFeaturesWithController({ mapPoint: e9, screenPoint: t3, event: i3 }) {
    this._cancelFetchingFeatures();
    const s6 = new AbortController(), { signal: r3 } = s6;
    this._fetchFeaturesController = s6;
    const o3 = this._projectScreenPointAndFetchFeatures({ mapPoint: e9, screenPoint: t3, signal: r3, event: i3 });
    return o3.catch(() => {
    }).then(() => {
      this._fetchFeaturesController = null;
    }), o3;
  }
  async _fetchFeaturesAndOpen(e9) {
    var _a;
    const { mapPoint: t3, screenPoint: i3 } = e9, { view: s6 } = this;
    (_a = this._locationScaleHandle) == null ? void 0 : _a.remove(), this._locationScaleHandle = d(() => {
      var _a2;
      return (_a2 = this.view) == null ? void 0 : _a2.scale;
    }, () => this._debouncedLocationUpdate(t3).catch((e10) => {
      b(e10) || n.getLogger(this).error(e10);
    }));
    const { pendingFeatures: o3 } = await this._fetchFeaturesWithController({ mapPoint: t3, screenPoint: i3, event: e9 });
    (s6 == null ? void 0 : s6.popup) && "open" in s6.popup && s6.popup.open({ location: t3 ?? void 0, promises: o3 });
  }
  _autoClose() {
    this.autoCloseEnabled && (this.visible = false);
  }
  async _getLayerView(e9, t3) {
    return await e9.when(), e9.whenLayerView(t3);
  }
  _getHighlightLayer(e9) {
    const { layer: t3, sourceLayer: i3 } = e9;
    return i3 && "layer" in i3 && i3.layer ? i3.layer : "map-notes" === (i3 == null ? void 0 : i3.type) || "subtype-group" === (i3 == null ? void 0 : i3.type) ? i3 : t3;
  }
  _getHighlightTarget(e9, t3, i3) {
    if (Z(t3.type, i3))
      return e9;
    const s6 = e9.getObjectId();
    if (null != s6)
      return s6;
    const r3 = "imagery" === t3.type ? void 0 : "objectIdField" in t3 ? t3.objectIdField || o2 : null, o3 = e9.attributes;
    return o3 && r3 && o3[r3] || e9;
  }
  _mapIncludesLayer(e9) {
    var _a, _b;
    return !!((_b = (_a = this.map) == null ? void 0 : _a.allLayers) == null ? void 0 : _b.includes(e9));
  }
  async _highlightActiveFeature() {
    const e9 = "highlight-active-feature";
    this.removeHandles(e9);
    const { highlightEnabled: t3, view: i3, activeFeature: s6, visible: r3 } = this;
    if (!(s6 && i3 && t3 && r3))
      return;
    const o3 = this._getHighlightLayer(s6);
    if (!(o3 && o3 instanceof b2 && this._mapIncludesLayer(o3)))
      return;
    const a2 = this._getLayerView(i3, o3);
    this._highlightActiveFeaturePromise = a2;
    const n10 = await a2;
    if (!(n10 && n6(n10) && this._highlightActiveFeaturePromise === a2 && this.activeFeature && this.highlightEnabled))
      return;
    const l5 = n10.highlight(this._getHighlightTarget(s6, o3, i3.type));
    this.addHandles(l5, e9);
  }
  async _highlightSelectedFeature() {
    const e9 = "highlight-selected-feature";
    this.removeHandles(e9);
    const { selectedFeature: t3, highlightEnabled: i3, view: s6, visible: r3 } = this;
    if (!(t3 && s6 && i3 && r3))
      return;
    const o3 = this._getHighlightLayer(t3);
    if (!(o3 && o3 instanceof b2 && this._mapIncludesLayer(o3)))
      return;
    const a2 = this._getLayerView(s6, o3);
    this._highlightSelectedFeaturePromise = a2;
    const n10 = await a2;
    if (!(n10 && n6(n10) && this._highlightSelectedFeaturePromise === a2 && this.selectedFeature && this.highlightEnabled && this.visible))
      return;
    const l5 = n10.highlight(this._getHighlightTarget(t3, o3, s6.type));
    this.addHandles(l5, e9);
  }
  _updateFeatures(e9) {
    const { features: t3 } = this, i3 = e9.filter((e10) => !t3.includes(e10));
    (i3 == null ? void 0 : i3.length) && (this.features = t3.concat(i3));
  }
};
e([y()], G.prototype, "_fetchFeaturesController", void 0), e([y({ type: i2 })], G.prototype, "actions", void 0), e([y({ readOnly: true })], G.prototype, "active", null), e([y()], G.prototype, "activeFeature", void 0), e([y({ readOnly: true })], G.prototype, "allActions", null), e([y()], G.prototype, "autoCloseEnabled", void 0), e([y()], G.prototype, "browseClusterEnabled", void 0), e([y()], G.prototype, "content", void 0), e([y({ type: i2, readOnly: true })], G.prototype, "defaultActions", null), e([y({ type: Boolean })], G.prototype, "defaultPopupTemplateEnabled", void 0), e([y({ readOnly: true })], G.prototype, "featureCount", null), e([y()], G.prototype, "featurePage", void 0), e([y({ value: [] })], G.prototype, "features", null), e([y()], G.prototype, "featuresPerPage", void 0), e([y()], G.prototype, "featureMenuOpen", void 0), e([y()], G.prototype, "featureViewModelAbilities", void 0), e([y({ readOnly: true })], G.prototype, "featureViewModels", void 0), e([y()], G.prototype, "highlightEnabled", void 0), e([y()], G.prototype, "includeDefaultActions", void 0), e([y({ type: x })], G.prototype, "location", null), e([y()], G.prototype, "map", null), e([y({ readOnly: true })], G.prototype, "pendingPromisesCount", null), e([y({ readOnly: true })], G.prototype, "promiseCount", null), e([y()], G.prototype, "promises", null), e([y({ readOnly: true })], G.prototype, "selectedClusterBoundaryFeature", void 0), e([y({ value: null, readOnly: true })], G.prototype, "selectedFeature", null), e([y({ value: -1 })], G.prototype, "selectedFeatureIndex", null), e([y({ readOnly: true })], G.prototype, "selectedFeatureViewModel", null), e([y({ readOnly: true })], G.prototype, "state", null), e([y()], G.prototype, "timeZone", null), e([y()], G.prototype, "title", void 0), e([y()], G.prototype, "updateLocationEnabled", void 0), e([y()], G.prototype, "view", void 0), e([y()], G.prototype, "visible", void 0), e([y({ readOnly: true })], G.prototype, "waitingForContents", null), e([y({ readOnly: true })], G.prototype, "waitingForResult", null), e([y()], G.prototype, "zoomFactor", void 0), e([y()], G.prototype, "zoomToLocation", void 0), e([y()], G.prototype, "centerAtLocation", null), G = e([a("esri.widgets.Features.FeaturesViewModel")], G);
var z = G;

// node_modules/@arcgis/core/widgets/Features/FeaturesVisibleElements.js
var s5 = class extends S {
  constructor() {
    super(...arguments), this.actionBar = true, this.closeButton = true, this.collapseButton = false, this.featureNavigation = true, this.flow = true, this.heading = true, this.spinner = true;
  }
};
e([y({ type: Boolean, nonNullable: true })], s5.prototype, "actionBar", void 0), e([y({ type: Boolean, nonNullable: true })], s5.prototype, "closeButton", void 0), e([y({ type: Boolean, nonNullable: true })], s5.prototype, "collapseButton", void 0), e([y({ type: Boolean, nonNullable: true })], s5.prototype, "featureNavigation", void 0), e([y({ type: Boolean, nonNullable: true })], s5.prototype, "flow", void 0), e([y({ type: Boolean, nonNullable: true })], s5.prototype, "heading", void 0), e([y({ type: Boolean, nonNullable: true })], s5.prototype, "spinner", void 0), s5 = e([a("esri.widgets.Features.FeaturesVisibleElements")], s5);
var l4 = s5;

// node_modules/@arcgis/core/widgets/Features.js
var x2 = "selected-index";
var O = 0;
var j = "features-spinner";
var k3 = 50;
var T = class extends n5(D) {
  constructor(e9, i3) {
    super(e9, i3), this._featureMenuIntersectionObserverCallback = ([e10]) => {
      (e10 == null ? void 0 : e10.isIntersecting) && null != this.viewModel.featurePage && this.viewModel.featurePage++;
    }, this._featureMenuIntersectionObserver = new IntersectionObserver(this._featureMenuIntersectionObserverCallback, { root: window.document }), this._featureMenuIntersectionObserverNode = null, this._focusOn = null, this._spinner = null, this._feature = null, this._relatedRecordsFlowItems = new V(), this._relatedRecordsWidget = new d3({ flowItems: this._relatedRecordsFlowItems }), this._rootFlowItemNode = null, this._featureMenuViewportNode = null, this._actionBarMenuNode = null, this.collapsed = false, this.featureNavigationTop = false, this.headerActions = new i2(), this.headingLevel = 2, this.messages = null, this.messagesCommon = null, this.responsiveActionsEnabled = false, this.viewModel = new z(), this.visibleElements = new l4(), this._renderAction = (e10, t3) => {
      const i4 = this._getActionTitle(e10), { type: o3, active: s6, uid: n10, disabled: r3, indicator: a2 } = e10;
      return e10.visible ? n2("calcite-action", { active: "toggle" === o3 && e10.value, appearance: "solid", bind: this, "data-action-uid": n10, disabled: r3, icon: this._getActionIcon(e10), indicator: a2, key: `action-${t3}`, loading: s6, onclick: this._triggerAction, scale: "s", text: i4, title: this._hideActionText ? i4 : void 0 }, this._getFallbackIcon(e10)) : null;
    }, this._openFeatureMenu = () => {
      this.featureMenuOpen = true, this._focusOn = "menu-flow-item";
    }, this._previousFeature = () => {
      this.viewModel.selectedFeatureIndex--;
    }, this._nextFeature = () => {
      this.viewModel.selectedFeatureIndex++;
    }, this._handleFeatureMenuBack = () => {
      this.featureMenuOpen && (this._focusOn = "root-flow-item", this.featureMenuOpen = false);
    }, this._focusFlowItemNode = (e10) => {
      this._focusOn === e10 && requestAnimationFrame(async () => {
        var _a, _b;
        switch (e10) {
          case "menu-flow-item":
            await ((_a = this._featureMenuViewportNode) == null ? void 0 : _a.setFocus());
            break;
          case "root-flow-item":
            await ((_b = this._rootFlowItemNode) == null ? void 0 : _b.setFocus());
        }
        this._focusOn = null;
      });
    }, this._focusFlowItemNodeThrottled = e3(this._focusFlowItemNode, k3), this._displaySpinnerThrottled = e3(() => this._displaySpinner(), O), this._addSelectedFeatureIndexHandle(), this.addHandles([this._displaySpinnerThrottled, this._focusFlowItemNodeThrottled, d(() => {
      var _a;
      return (_a = this.viewModel) == null ? void 0 : _a.active;
    }, () => this._toggleScreenLocationEnabled()), d(() => {
      var _a;
      return (_a = this.viewModel) == null ? void 0 : _a.active;
    }, (e10) => this._relatedRecordsWidget.closed = !e10), d(() => {
      var _a;
      return (_a = this.visibleElements) == null ? void 0 : _a.closeButton;
    }, (e10) => this._relatedRecordsWidget.closable = e10), d(() => {
      var _a;
      return (_a = this.visibleElements) == null ? void 0 : _a.spinner;
    }, (e10) => this._spinnerEnabledChange(e10)), d(() => {
      var _a;
      return (_a = this.viewModel) == null ? void 0 : _a.view;
    }, (e10, t3) => this._viewChange(e10, t3)), d(() => {
      var _a, _b;
      return (_b = (_a = this.viewModel) == null ? void 0 : _a.view) == null ? void 0 : _b.ready;
    }, (e10, t3) => this._viewReadyChange(e10 ?? false, t3 ?? false)), d(() => {
      var _a, _b;
      return [(_a = this.viewModel) == null ? void 0 : _a.waitingForResult, (_b = this.viewModel) == null ? void 0 : _b.location];
    }, () => {
      this._hideSpinner(), this._displaySpinnerThrottled();
    }), d(() => {
      var _a;
      return (_a = this.viewModel) == null ? void 0 : _a.screenLocation;
    }, () => this._closeOpenActionMenu()), d(() => this.selectedFeatureWidget, () => this._destroyRelatedRecordsFlowItemWidgets()), d(() => {
      var _a;
      const e10 = (_a = this.selectedFeatureWidget) == null ? void 0 : _a.viewModel;
      return [e10 == null ? void 0 : e10.title, e10 == null ? void 0 : e10.state];
    }, () => this._setTitleFromFeatureWidget()), d(() => {
      var _a;
      const e10 = (_a = this.selectedFeatureWidget) == null ? void 0 : _a.viewModel;
      return [e10 == null ? void 0 : e10.content, e10 == null ? void 0 : e10.state];
    }, () => this._setContentFromFeatureWidget()), d(() => {
      var _a;
      return (_a = this.viewModel) == null ? void 0 : _a.featureViewModels;
    }, () => this._featureMenuViewportScrollTop()), this._relatedRecordsWidget.on("close", () => this.close()), this._relatedRecordsWidget.on("exit", () => this._destroyRelatedRecordsFlowItemWidgets()), this._relatedRecordsWidget.on("open-related-feature", ({ feature: e10 }) => this._openRelatedFeature(e10))]);
  }
  loadDependencies() {
    return r({ action: () => import("./calcite-action-P2CTRNG2.js"), "action-bar": () => import("./calcite-action-bar-Q3254TXK.js"), "action-group": () => import("./calcite-action-group-COKFT2E7.js"), button: () => import("./calcite-button-V4T5NPWY.js"), flow: () => import("./calcite-flow-S3IMKQD6.js"), "flow-item": () => import("./calcite-flow-item-BUZXXDGT.js"), list: () => import("./calcite-list-CC3BA3BY.js"), "list-item": () => import("./calcite-list-item-K4SMX7ZK.js"), "list-item-group": () => import("./calcite-list-item-group-RDC3S7ND.js"), loader: () => import("./calcite-loader-64JUXTQT.js") });
  }
  destroy() {
    var _a, _b;
    this._destroyRelatedRecordsFlowItemWidgets(), this._destroySelectedFeatureWidget(), this._destroySpinner(), this._unobserveFeatureMenuObserver(), (_a = this._featureMenuIntersectionObserver) == null ? void 0 : _a.disconnect(), (_b = this._relatedRecordsWidget) == null ? void 0 : _b.destroy();
  }
  get _hideActionText() {
    var _a;
    if (!this.responsiveActionsEnabled)
      return false;
    const e9 = (_a = this.view) == null ? void 0 : _a.widthBreakpoint;
    return "xsmall" === e9 || "small" === e9 || "medium" === e9;
  }
  get _featureNavigationVisible() {
    return this.viewModel.active && this.viewModel.featureCount > 1 && this.visibleElements.featureNavigation;
  }
  get _isCollapsed() {
    return this._collapseEnabled && this.collapsed;
  }
  get _collapseEnabled() {
    return this.visibleElements.collapseButton && !!this.title && !!this.content;
  }
  get content() {
    return this.viewModel.content;
  }
  set content(e9) {
    this.viewModel.content = e9;
  }
  get icon() {
    return null;
  }
  get featureMenuOpen() {
    return this.viewModel.featureMenuOpen;
  }
  set featureMenuOpen(e9) {
    this.viewModel.featureMenuOpen = e9;
  }
  get features() {
    return this.viewModel.features;
  }
  set features(e9) {
    this.viewModel.features = e9;
  }
  get location() {
    return this.viewModel.location;
  }
  set location(e9) {
    this.viewModel.location = e9;
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e9) {
    this._overrideIfSome("label", e9);
  }
  get map() {
    return this.viewModel.map;
  }
  set map(e9) {
    this.viewModel.map = e9;
  }
  get promises() {
    return this.viewModel.promises;
  }
  set promises(e9) {
    this.viewModel.promises = e9;
  }
  get selectedFeature() {
    return this.viewModel.selectedFeature;
  }
  get selectedFeatureIndex() {
    return this.viewModel.selectedFeatureIndex;
  }
  set selectedFeatureIndex(e9) {
    this.viewModel.selectedFeatureIndex = e9;
  }
  get selectedFeatureWidget() {
    const { _feature: e9, headingLevel: t3, _relatedRecordsFlowItems: i3, timeZone: o3, spatialReference: s6, map: n10 } = this, { selectedFeatureViewModel: r3 } = this.viewModel, a2 = { title: false };
    return r3 ? (e9 ? (e9.viewModel = r3, e9.visibleElements = a2) : this._feature = new W({ flowItems: i3, headingLevel: t3 + 1, timeZone: o3, spatialReference: s6, map: n10, viewModel: r3, visibleElements: a2 }), this._feature) : null;
  }
  get spatialReference() {
    return this.viewModel.spatialReference;
  }
  set spatialReference(e9) {
    this.viewModel.spatialReference = e9;
  }
  get title() {
    return this.viewModel.title;
  }
  set title(e9) {
    this.viewModel.title = e9;
  }
  get timeZone() {
    return this.viewModel.timeZone;
  }
  set timeZone(e9) {
    this.viewModel.timeZone = e9;
  }
  get updateLocationEnabled() {
    return this.viewModel.updateLocationEnabled;
  }
  set updateLocationEnabled(e9) {
    this.viewModel.updateLocationEnabled = e9;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e9) {
    this.viewModel.view = e9;
  }
  get visible() {
    return this.viewModel.visible;
  }
  set visible(e9) {
    this.viewModel.visible = e9;
  }
  blur() {
    var _a;
    const { active: e9 } = this.viewModel;
    e9 ? (_a = this._rootFlowItemNode) == null ? void 0 : _a.blur() : n.getLogger(this).warn("Features can only be blurred when currently active.");
  }
  clear() {
    return this.viewModel.clear();
  }
  close() {
    this.viewModel.visible = false;
  }
  fetchFeatures(e9, t3) {
    return this.viewModel.fetchFeatures(e9, t3);
  }
  focus() {
    const { active: e9 } = this.viewModel;
    e9 ? this._setFocusOn() : n.getLogger(this).warn("Features can only be focused when currently active.");
  }
  next() {
    return this.viewModel.next();
  }
  open(e9) {
    this.removeHandles(x2);
    const t3 = { collapsed: (e9 == null ? void 0 : e9.collapsed) ?? false };
    this.set(t3), this.viewModel.open(e9), this.addHandles(p(() => !this.viewModel.waitingForResult, () => this._addSelectedFeatureIndexHandle(), { once: true }));
  }
  previous() {
    return this.viewModel.previous();
  }
  triggerAction(e9) {
    return this.viewModel.triggerAction(e9);
  }
  render() {
    return n2("div", { bind: this, class: this.classes(n8.base, e5.widget, e5.panel), onkeydown: this._onMainKeydown }, this._renderHeader(), this._renderContentContainer());
  }
  _renderFeatureNavigation() {
    return [this._renderPagination(), this._renderFeatureMenuButton()];
  }
  _renderHeader() {
    return !this.featureMenuOpen && this.featureNavigationTop && this._featureNavigationVisible ? n2("div", { class: n8.header, key: "header-actions" }, this._renderFeatureNavigation()) : null;
  }
  _renderFooter() {
    return this.featureMenuOpen || this.featureNavigationTop || !this._featureNavigationVisible ? null : n2("div", { class: n8.footer, key: "footer-actions", slot: "footer" }, this._renderFeatureNavigation());
  }
  _renderFeatureMenuButton() {
    const { messages: e9, viewModel: t3 } = this, { featureCount: i3, selectedFeatureIndex: o3, pendingPromisesCount: s6 } = t3;
    return n2("calcite-action", { appearance: "solid", bind: this, icon: "list", key: "feature-menu-button", label: e9.selectFeature, loading: s6 > 0, onclick: this._openFeatureMenu, scale: "s", text: s2(e9.pageText, { index: u(o3 + 1), total: u(i3) }), textEnabled: true, title: e9.selectFeature });
  }
  _renderPagination() {
    const { previous: e9, next: t3 } = this.messagesCommon.pagination;
    return n2("calcite-action-bar", { class: n8.paginationActionBar, expandDisabled: true, key: "pagination-action-bar", layout: "horizontal", overflowActionsDisabled: true, scale: "s" }, n2("calcite-action-group", { scale: "s" }, n2("calcite-action", { appearance: "solid", class: n8.paginationPrevious, icon: "chevron-left", iconFlipRtl: true, label: e9, onclick: this._previousFeature, scale: "s", text: e9, title: e9 }), n2("calcite-action", { appearance: "solid", icon: "chevron-right", iconFlipRtl: true, label: t3, onclick: this._nextFeature, scale: "s", text: t3, title: t3 })));
  }
  _renderFeatureMenuItem(e9) {
    const { selectedFeatureViewModel: t3, featureViewModels: i3 } = this.viewModel, o3 = e9 === t3, s6 = i3.indexOf(e9);
    return n2("calcite-list-item", { bind: this, "data-feature-index": s6, key: `feature-menu-item-${e9.uid}`, onblur: this._removeActiveFeature, onfocus: this._setActiveFeature, onmouseleave: this._removeActiveFeature, onmouseover: this._setActiveFeature, selected: o3, onCalciteListItemSelect: this._selectFeature }, n2("span", { innerHTML: e9.title || this.messagesCommon.untitled, slot: "content" }));
  }
  _groupResultsByLayer() {
    const { featureViewModels: e9 } = this.viewModel, t3 = /* @__PURE__ */ new Map();
    return e9.forEach((e10) => {
      const i3 = e10 == null ? void 0 : e10.graphic;
      if (!i3)
        return;
      const o3 = i3.sourceLayer ?? i3.layer, s6 = t3.get(o3) ?? [];
      t3.set(o3, [...s6, e10]);
    }), t3;
  }
  _renderFeatureMenu() {
    const { featureViewModels: e9 } = this.viewModel, t3 = this._groupResultsByLayer();
    return e9.length ? n2("calcite-list", { selectionAppearance: "icon", selectionMode: "single" }, Array.from(t3.keys()).map((e10) => {
      var _a;
      return n2("calcite-list-item-group", { heading: (e10 == null ? void 0 : e10.title) ?? this.messagesCommon.untitled, key: (e10 == null ? void 0 : e10.uid) || "untitled" }, (_a = t3.get(e10)) == null ? void 0 : _a.map((e11) => this._renderFeatureMenuItem(e11)));
    })) : null;
  }
  _renderHeaderAction(e9, t3) {
    const i3 = e9.title || "";
    return e9.visible ? n2("calcite-action", { active: "toggle" === e9.type && e9.value, appearance: "solid", bind: this, "data-action-uid": e9.uid, disabled: e9.disabled, icon: e9.icon || "", indicator: e9.indicator, key: `header-action-${t3}`, loading: e9.active, onclick: this._triggerHeaderAction, slot: "header-actions-end", text: i3, title: i3 }) : null;
  }
  _renderHeaderActions() {
    return this.headerActions.map((e9, t3) => this._renderHeaderAction(e9, t3)).toArray();
  }
  _renderContentFeature() {
    const { headingLevel: e9, visibleElements: t3, _isCollapsed: i3, _collapseEnabled: o3, featureNavigationTop: s6 } = this, { title: n10, active: r3 } = this.viewModel, a2 = t3.heading && n10 ? n10 : "";
    return n2("calcite-flow-item", { afterCreate: this._storeRootFlowItemNode, afterUpdate: this._focusRootFlowItemNode, bind: this, class: this.classes({ [n8.contentFeature]: true, [n8.flowItemCollapsed]: i3 }), closable: t3.closeButton, closed: !r3, collapsed: i3, collapseDirection: s6 ? "down" : "up", collapsible: o3, headingLevel: e9, key: "root-flow-item", onCalciteFlowItemClose: this.close, onCalciteFlowItemToggle: this._handleCollapseToggle }, a2 ? n2(e6, { class: this.classes(n8.featuresHeading, e5.heading), innerHTML: a2, key: "header-content", level: this.headingLevel, slot: "header-content" }) : null, this._renderHeaderActions(), this._renderActionBar(), i3 ? null : n2("div", { class: this.classes(n8.container, n8.contentContainer) }, this._renderContent()), this._renderFooter());
  }
  _renderFeatureMenuContainer() {
    const { viewModel: e9, featureMenuOpen: t3, messages: i3, messagesCommon: o3 } = this, { active: s6, featureViewModels: n10, pendingPromisesCount: r3 } = e9;
    return t3 ? n2("calcite-flow-item", { afterCreate: this._storeFeatureMenuFlowItemNode, afterUpdate: this._focusFeatureMenuFlowItemNode, bind: this, closable: false, closed: !s6, description: s2(i3.total, { total: n10.length }), heading: i3.selectFeature, key: "feature-menu", loading: e9.waitingForContents, onCalciteFlowItemBack: (e10) => {
      e10.preventDefault(), this._handleFeatureMenuBack();
    } }, r3 > 0 ? n2("calcite-loader", { class: n8.loader, inline: true, key: "feature-menu-loader", label: o3.loading, slot: "header-actions-end" }) : null, n2("div", { class: n8.container }, this._renderFeatureMenu()), n2("div", { afterCreate: this._featureMenuIntersectionObserverCreated, bind: this, class: n8.featureMenuObserver }), n2("calcite-button", { appearance: "transparent", onclick: this._handleFeatureMenuBack, slot: "footer-actions", width: "full" }, o3.back)) : null;
  }
  _renderContentContainer() {
    const e9 = [this._renderContentFeature(), this._renderFeatureMenuContainer(), this._relatedRecordsWidget.render()];
    return this.visibleElements.flow ? n2("calcite-flow", { key: "content-container" }, e9) : e9;
  }
  _getFallbackIcon(e9) {
    const { className: t3, icon: i3 } = e9;
    if (i3)
      return null;
    const o3 = e4({ action: e9, feature: this.selectedFeature }), s6 = { [n8.icon]: !!t3, [n8.actionImage]: !!o3 };
    return t3 && (s6[t3] = true), o3 || t3 ? n2("span", { "aria-hidden": "true", class: this.classes(n8.icon, s6), key: "icon", styles: n4(o3) }) : null;
  }
  _renderActionBar() {
    var _a;
    return !this._isCollapsed && this.visibleElements.actionBar && ((_a = this.viewModel.allActions) == null ? void 0 : _a.length) ? n2("calcite-action-bar", { expandDisabled: true, expanded: !this._hideActionText, key: "header-action-bar", scale: "s", slot: "action-bar" }, n2("calcite-action-group", { afterCreate: (e9) => this._actionBarMenuNode = e9, overlayPositioning: "fixed", scale: "s" }, this._renderActions())) : null;
  }
  _renderActions() {
    return this.viewModel.allActions.toArray().map(this._renderAction);
  }
  _renderContent() {
    var _a;
    const e9 = (_a = this.viewModel) == null ? void 0 : _a.content;
    return e9 ? "string" == typeof e9 ? n2("div", { class: t.contentNode, innerHTML: e9, key: e9 }) : this.renderNodeContent(e9) : null;
  }
  _setFocusOn() {
    this.renderNow(), requestAnimationFrame(() => {
      this._focusOn = this.featureMenuOpen ? "menu-flow-item" : "root-flow-item";
    });
  }
  _handleCollapseToggle() {
    this.collapsed = !this.collapsed;
  }
  async _openRelatedFeature(e9) {
    await e9.viewModel.updateGeometry();
    const t3 = e9.graphic, i3 = t3 == null ? void 0 : t3.geometry;
    if (null == i3 || null == t3)
      return;
    this._destroyRelatedRecordsFlowItemWidgets(), await this.viewModel.zoomTo({ target: i3 });
    const o3 = n3(i3);
    this.open({ features: [t3], location: null != o3 ? o3 : void 0 });
  }
  _focusRootFlowItemNode() {
    this._focusFlowItemNodeThrottled("root-flow-item");
  }
  _focusFeatureMenuFlowItemNode() {
    this._focusFlowItemNodeThrottled("menu-flow-item");
  }
  _storeRootFlowItemNode(e9) {
    this._rootFlowItemNode = e9, this._focusFlowItemNodeThrottled("root-flow-item");
  }
  _storeFeatureMenuFlowItemNode(e9) {
    this._featureMenuViewportNode = e9, this._focusFlowItemNodeThrottled("menu-flow-item");
  }
  _setActiveFeature(e9) {
    var _a;
    const { viewModel: t3 } = this, i3 = e9.currentTarget["data-feature-index"];
    t3.activeFeature = ((_a = t3.features) == null ? void 0 : _a[i3]) || null;
  }
  _removeActiveFeature() {
    this.viewModel.activeFeature = null;
  }
  _selectFeature(e9) {
    const t3 = e9.currentTarget["data-feature-index"];
    isNaN(t3) || (this.viewModel.selectedFeatureIndex = t3), this._handleFeatureMenuBack();
  }
  _unobserveFeatureMenuObserver() {
    this._featureMenuIntersectionObserverNode && this._featureMenuIntersectionObserver.unobserve(this._featureMenuIntersectionObserverNode);
  }
  _featureMenuIntersectionObserverCreated(e9) {
    this._unobserveFeatureMenuObserver(), this._featureMenuIntersectionObserver.observe(e9), this._featureMenuIntersectionObserverNode = e9;
  }
  _getActionIcon(e9) {
    return e9.icon ? e9.icon : e9.image || e9.className ? void 0 : "question";
  }
  _getActionTitle(e9) {
    const { messages: t3, selectedFeature: i3, messagesCommon: o3 } = this, { id: s6 } = e9, n10 = i3 == null ? void 0 : i3.attributes, r3 = e9.title ?? "", a2 = "zoom-to-feature" === s6 ? s2(r3, { messages: t3 }) : "remove-selected-feature" === s6 ? s2(r3, { messages: o3 }) : "zoom-to-clustered-features" === s6 || "browse-clustered-features" === s6 ? s2(r3, { messages: t3 }) : e9.title;
    return a2 && n10 ? s2(a2, n10) : a2 ?? "";
  }
  _onMainKeydown(e9) {
    const { key: t3 } = e9;
    "ArrowLeft" === t3 && (e9.stopPropagation(), this._handleFeatureMenuBack(), this.previous()), "ArrowRight" === t3 && (e9.stopPropagation(), this._handleFeatureMenuBack(), this.next());
  }
  _featureMenuViewportScrollTop() {
    this._featureMenuViewportNode && this._featureMenuViewportNode.scrollContentTo({ top: 0 });
  }
  _setContentFromFeatureWidget() {
    const { selectedFeatureWidget: e9 } = this;
    e9 && (this.viewModel.content = e9);
  }
  _setTitleFromFeatureWidget() {
    const { selectedFeatureWidget: e9, messagesCommon: t3 } = this, i3 = e9 == null ? void 0 : e9.viewModel;
    e9 && (this.viewModel.title = "error" === (i3 == null ? void 0 : i3.state) ? t3 == null ? void 0 : t3.errorMessage : (i3 == null ? void 0 : i3.title) || "");
  }
  _addSelectedFeatureIndexHandle() {
    const e9 = d(() => {
      var _a;
      return (_a = this.viewModel) == null ? void 0 : _a.selectedFeatureIndex;
    }, (e10, t3) => this._selectedFeatureIndexUpdated(e10, t3));
    this.addHandles(e9, x2);
  }
  _selectedFeatureIndexUpdated(e9, t3) {
    const { featureCount: i3 } = this.viewModel;
    i3 && e9 !== t3 && -1 !== e9 && (this._destroyRelatedRecordsFlowItemWidgets(), this._rootFlowItemNode && this._rootFlowItemNode.scrollContentTo({ top: 0 }));
  }
  _triggerHeaderAction(e9) {
    const t3 = e9.currentTarget;
    if (t3.disabled)
      return;
    const i3 = t3.dataset.actionUid, o3 = this.headerActions.find(({ uid: e10 }) => e10 === i3);
    o3 && !o3.disabled && ("toggle" === (o3 == null ? void 0 : o3.type) && (o3.value = !o3.value), this.emit("trigger-header-action", { action: o3 }));
  }
  _triggerAction(e9) {
    const t3 = e9.currentTarget;
    if (t3.disabled)
      return;
    const i3 = t3.dataset.actionUid, { allActions: o3 } = this.viewModel, s6 = o3.findIndex((e10) => e10.uid === i3), n10 = o3.at(s6);
    n10 && "toggle" === n10.type && (n10.value = !n10.value), this.viewModel.triggerAction(s6);
  }
  _createSpinner(e9) {
    e9 && (this._spinner = new h({ view: e9 }), e9.ui.add(this._spinner, { key: j, position: "manual", internal: true }));
  }
  _wireUpView(e9) {
    var _a;
    this._destroySpinner(), e9 && ((_a = this.visibleElements) == null ? void 0 : _a.spinner) && this._createSpinner(e9);
  }
  _hideSpinner() {
    const { _spinner: e9 } = this;
    e9 && (e9.location = null, e9.hide());
  }
  _viewReadyChange(e9, t3) {
    var _a;
    e9 ? this._wireUpView((_a = this.viewModel) == null ? void 0 : _a.view) : t3 && this.viewModel.clear();
  }
  _viewChange(e9, t3) {
    e9 && t3 && this.viewModel.clear();
  }
  _destroySelectedFeatureWidget() {
    const { _feature: e9 } = this;
    e9 && (e9.viewModel = null, !e9.destroyed && e9.destroy()), this._feature = null;
  }
  _closeOpenActionMenu() {
    const { _actionBarMenuNode: e9 } = this;
    e9 && (e9.menuOpen = false);
  }
  _destroyRelatedRecordsFlowItemWidgets() {
    this._relatedRecordsFlowItems.removeAll().forEach((e9) => {
      "showAllEnabled" in e9.viewModel && (e9.viewModel.showAllEnabled = false), e9.viewModel = null, e9.destroy();
    });
  }
  _toggleScreenLocationEnabled() {
    const { viewModel: e9 } = this;
    e9 && (e9.screenLocationEnabled = e9.active);
  }
  _displaySpinner() {
    const { _spinner: e9 } = this;
    if (!e9)
      return;
    const { location: t3, waitingForResult: i3 } = this.viewModel;
    i3 && t3 ? e9.show({ location: t3 }) : e9.hide();
  }
  _destroySpinner() {
    var _a;
    const { _spinner: e9, view: t3 } = this;
    e9 && ((_a = t3 == null ? void 0 : t3.ui) == null ? void 0 : _a.remove(e9, j), e9.destroy(), this._spinner = null);
  }
  _spinnerEnabledChange(e9) {
    var _a;
    this._destroySpinner(), e9 && this._createSpinner((_a = this.viewModel) == null ? void 0 : _a.view);
  }
};
e([y()], T.prototype, "_focusOn", void 0), e([y()], T.prototype, "_relatedRecordsFlowItems", void 0), e([y()], T.prototype, "_hideActionText", null), e([y()], T.prototype, "_featureNavigationVisible", null), e([y()], T.prototype, "_isCollapsed", null), e([y()], T.prototype, "_collapseEnabled", null), e([y()], T.prototype, "collapsed", void 0), e([y()], T.prototype, "content", null), e([y()], T.prototype, "icon", null), e([y()], T.prototype, "featureMenuOpen", null), e([y()], T.prototype, "featureNavigationTop", void 0), e([y()], T.prototype, "features", null), e([y({ type: i2 })], T.prototype, "headerActions", void 0), e([y()], T.prototype, "headingLevel", void 0), e([y()], T.prototype, "location", null), e([y()], T.prototype, "label", null), e([y()], T.prototype, "map", null), e([y(), e2("esri/widgets/Features/t9n/Features")], T.prototype, "messages", void 0), e([y(), e2("esri/t9n/common")], T.prototype, "messagesCommon", void 0), e([y()], T.prototype, "promises", null), e([y()], T.prototype, "responsiveActionsEnabled", void 0), e([y({ readOnly: true })], T.prototype, "selectedFeature", null), e([y()], T.prototype, "selectedFeatureIndex", null), e([y({ readOnly: true })], T.prototype, "selectedFeatureWidget", null), e([y()], T.prototype, "spatialReference", null), e([y()], T.prototype, "title", null), e([y()], T.prototype, "timeZone", null), e([y()], T.prototype, "updateLocationEnabled", null), e([y()], T.prototype, "view", null), e([y({ type: z }), e7(["triggerAction", "trigger-action"])], T.prototype, "viewModel", void 0), e([y({ type: l4, nonNullable: true })], T.prototype, "visibleElements", void 0), e([y()], T.prototype, "visible", null), T = e([a("esri.widgets.Features")], T);
var E = T;

export {
  z,
  E
};
//# sourceMappingURL=chunk-QIWI3FQB.js.map
