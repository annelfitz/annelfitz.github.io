import {
  HiddenFormInputSlot,
  connectForm,
  disconnectForm
} from "./chunk-JG4DEVZN.js";
import {
  connectLabel,
  disconnectLabel
} from "./chunk-U6YOC6GW.js";
import "./chunk-HPVF3F2S.js";
import {
  InteractiveContainer,
  connectInteractive,
  disconnectInteractive,
  updateHostInteraction
} from "./chunk-66JQNCB7.js";
import "./chunk-OUKAB5XV.js";
import {
  connectMessages,
  disconnectMessages,
  setUpMessages,
  updateMessages
} from "./chunk-IF3MPWQI.js";
import {
  connectLocalized,
  disconnectLocalized
} from "./chunk-AXCPOXSP.js";
import "./chunk-CTALGNVI.js";
import "./chunk-7QCRXUYY.js";
import {
  componentFocusable,
  setComponentLoaded,
  setUpLoadableComponent
} from "./chunk-HYC423SM.js";
import {
  focusFirstTabbable
} from "./chunk-BUS2XAMG.js";
import {
  guid
} from "./chunk-L553G5FP.js";
import "./chunk-PJLSVRBA.js";
import {
  Host,
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-FNA2PYJM.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@esri/calcite-components/dist/esm/calcite-rating.entry.js
var StarIcon = ({ full, scale, partial }) => h("calcite-icon", {
  class: partial ? void 0 : "icon",
  icon: full ? "star-f" : "star",
  scale
});
var ratingCss = ":host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-opacity-disabled)}:host([read-only]) *,:host([disabled]) *,:host([read-only]) ::slotted(*),:host([disabled]) ::slotted(*){pointer-events:none}:host{position:relative;display:flex;align-items:center;inline-size:-moz-fit-content;inline-size:fit-content}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}.interaction-container{display:contents}:host([scale=s]){block-size:1.5rem;--calcite-rating-spacing-unit:0.25rem}:host([scale=m]){block-size:2rem;--calcite-rating-spacing-unit:0.5rem}:host([scale=l]){block-size:2.75rem;--calcite-rating-spacing-unit:0.75rem}.fieldset{margin:0;display:flex;border-width:0;padding:0;align-items:center;gap:var(--calcite-rating-spacing-unit)}.wrapper{display:inline-block}.star{transition:all var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;position:relative;display:flex;flex-direction:column;cursor:pointer;color:var(--calcite-color-border-input)}.star:focus{outline:2px solid var(--calcite-ui-focus-color, var(--calcite-color-brand-hover, var(--calcite-color-brand)));outline-offset:calc(\n            2px *\n            calc(\n              1 -\n              2 * clamp(\n                0,\n                var(--calcite-offset-invert-focus),\n                1\n              )\n            )\n          )}.average,.fraction{color:var(--calcite-color-status-warning)}.hovered,.selected{color:var(--calcite-color-brand)}.fraction{transition:all var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;position:absolute;pointer-events:none;inset-block-start:0;overflow:hidden;inset-inline-start:0}calcite-chip{pointer-events:none;cursor:default}.number--average{font-weight:bold}.number--count{color:var(--calcite-color-text-2);font-style:italic}.number--count:not(:first-child){margin-inline-start:var(--calcite-rating-spacing-unit)}.visually-hidden{position:absolute;inline-size:1px;block-size:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}::slotted(input[slot=hidden-form-input]){margin:0 !important;opacity:0 !important;outline:none !important;padding:0 !important;position:absolute !important;inset:0 !important;transform:none !important;-webkit-appearance:none !important;z-index:-1 !important}:host([hidden]){display:none}[hidden]{display:none}";
var Rating = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.calciteRatingChange = createEvent(this, "calciteRatingChange", 6);
    this.handleRatingPointerOver = () => {
      this.isKeyboardInteraction = false;
    };
    this.handleRatingPointerOut = () => {
      this.isKeyboardInteraction = true;
      this.hoverValue = null;
    };
    this.handleHostKeyDown = () => {
      this.isKeyboardInteraction = true;
    };
    this.handleLabelKeyDown = (event) => {
      const inputValue = this.getValueFromLabelEvent(event);
      const key = event.key;
      const numberKey = key == " " ? void 0 : Number(key);
      this.emit = true;
      if (isNaN(numberKey)) {
        switch (key) {
          case "Enter":
          case " ":
            this.value = !this.required && this.value === inputValue ? 0 : inputValue;
            break;
          case "ArrowLeft":
            this.value = this.getPreviousRatingValue(inputValue);
            this.updateFocus();
            event.preventDefault();
            break;
          case "ArrowRight":
            this.value = this.getNextRatingValue(inputValue);
            this.updateFocus();
            event.preventDefault();
            break;
          case "Tab":
            this.hoverValue = null;
        }
      } else {
        if (!this.required && numberKey >= 0 && numberKey <= this.max) {
          this.value = numberKey;
        } else if (this.required && numberKey > 0 && numberKey <= this.max) {
          this.value = numberKey;
        }
        this.updateFocus();
      }
    };
    this.handleInputChange = (event) => {
      if (this.isKeyboardInteraction === true) {
        const inputVal = Number(event.target["value"]);
        this.hoverValue = inputVal;
        this.value = inputVal;
      }
    };
    this.handleLabelPointerOver = (event) => {
      this.hoverValue = this.getValueFromLabelEvent(event);
    };
    this.handleLabelPointerDown = (event) => {
      const target = event.currentTarget;
      const inputValue = this.getValueFromLabelEvent(event);
      this.hoverValue = inputValue;
      this.emit = true;
      this.value = !this.required && this.value === inputValue ? 0 : inputValue;
      target.focus();
    };
    this.handleLabelClick = (event) => {
      event.preventDefault();
    };
    this.handleLabelFocus = (event) => {
      const inputValue = this.getValueFromLabelEvent(event);
      this.hoverValue = inputValue;
    };
    this.setLabelEl = (el) => {
      this.labelElements.push(el);
    };
    this.emit = false;
    this.guid = `calcite-ratings-${guid()}`;
    this.isKeyboardInteraction = true;
    this.labelElements = [];
    this.max = 5;
    this.average = void 0;
    this.count = void 0;
    this.disabled = false;
    this.form = void 0;
    this.messages = void 0;
    this.messageOverrides = void 0;
    this.name = void 0;
    this.readOnly = false;
    this.required = false;
    this.scale = "m";
    this.showChip = false;
    this.value = 0;
    this.effectiveLocale = "";
    this.defaultMessages = void 0;
    this.hoverValue = void 0;
  }
  onMessagesChange() {
  }
  handleValueUpdate(newValue) {
    this.hoverValue = newValue;
    if (this.emit) {
      this.calciteRatingChange.emit();
    }
    this.emit = false;
  }
  effectiveLocaleChange() {
    updateMessages(this, this.effectiveLocale);
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  connectedCallback() {
    connectInteractive(this);
    connectLocalized(this);
    connectMessages(this);
    connectLabel(this);
    connectForm(this);
  }
  async componentWillLoad() {
    await setUpMessages(this);
    setUpLoadableComponent(this);
  }
  componentWillRender() {
    this.starsMap = Array.from({ length: this.max }, (_, i) => {
      const value = i + 1;
      const average = !this.hoverValue && this.average && !this.value && value <= this.average;
      const checked = value === this.value;
      const fraction = this.average && this.average + 1 - value;
      const hovered = value <= this.hoverValue;
      const id = `${this.guid}-${value}`;
      const partial = !this.hoverValue && !this.value && !hovered && fraction > 0 && fraction < 1;
      const selected = this.value >= value;
      const tabIndex = this.getTabIndex(value);
      return {
        average,
        checked,
        fraction,
        hovered,
        id,
        partial,
        selected,
        value,
        tabIndex
      };
    });
  }
  componentDidLoad() {
    setComponentLoaded(this);
  }
  disconnectedCallback() {
    disconnectInteractive(this);
    disconnectLocalized(this);
    disconnectMessages(this);
    disconnectLabel(this);
    disconnectForm(this);
  }
  componentDidRender() {
    updateHostInteraction(this);
  }
  render() {
    var _a, _b;
    return h(Host, { onKeyDown: this.handleHostKeyDown, onPointerOut: this.handleRatingPointerOut, onPointerOver: this.handleRatingPointerOver }, h(InteractiveContainer, { disabled: this.disabled }, h("span", { class: "wrapper" }, h("fieldset", { class: "fieldset", disabled: this.disabled }, h("legend", { class: "visually-hidden" }, this.messages.rating), this.starsMap.map(({ average, checked, fraction, hovered, id, partial, selected, value, tabIndex }) => {
      return h("label", {
        class: {
          star: true,
          selected,
          hovered,
          average,
          partial
        },
        "data-value": value,
        htmlFor: id,
        onClick: this.handleLabelClick,
        onFocus: this.handleLabelFocus,
        onKeyDown: this.handleLabelKeyDown,
        onPointerDown: this.handleLabelPointerDown,
        onPointerOver: this.handleLabelPointerOver,
        tabIndex,
        // eslint-disable-next-line react/jsx-sort-props
        ref: this.setLabelEl
      }, h("input", { checked, class: "visually-hidden", disabled: this.disabled || this.readOnly, id, name: this.guid, onChange: this.handleInputChange, tabIndex: -1, type: "radio", value }), h(StarIcon, { full: selected || average, scale: this.scale }), partial && h("div", { class: "fraction", style: { width: `${fraction * 100}%` } }, h(StarIcon, { full: true, partial: true, scale: this.scale })), h("span", { class: "visually-hidden" }, this.messages.stars.replace("{num}", `${value}`)));
    }), (this.count || this.average) && this.showChip ? h("calcite-chip", { scale: this.scale, value: (_a = this.count) == null ? void 0 : _a.toString() }, !!this.average && h("span", { class: "number--average" }, this.average.toString()), !!this.count && h("span", { class: "number--count" }, "(", (_b = this.count) == null ? void 0 : _b.toString(), ")")) : null), h(HiddenFormInputSlot, { component: this }))));
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  onLabelClick() {
    this.setFocus();
  }
  updateFocus() {
    this.hoverValue = this.value;
    this.labelElements[this.value - 1].focus();
  }
  getTabIndex(value) {
    if (this.readOnly || this.value !== value && (this.value || value !== 1)) {
      return -1;
    }
    return 0;
  }
  getValueFromLabelEvent(event) {
    const target = event.currentTarget;
    return Number(target.getAttribute("data-value"));
  }
  getNextRatingValue(currentValue) {
    return currentValue === 5 ? 1 : currentValue + 1;
  }
  getPreviousRatingValue(currentValue) {
    return currentValue === 1 ? 5 : currentValue - 1;
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  /** Sets focus on the component. */
  async setFocus() {
    await componentFocusable(this);
    focusFirstTabbable(this.el);
  }
  static get assetsDirs() {
    return ["assets"];
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "messageOverrides": ["onMessagesChange"],
      "value": ["handleValueUpdate"],
      "effectiveLocale": ["effectiveLocaleChange"]
    };
  }
};
Rating.style = ratingCss;
export {
  Rating as calcite_rating
};
/*! Bundled license information:

@esri/calcite-components/dist/esm/calcite-rating.entry.js:
  (*!
   * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
   * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
   * v2.6.0
   *)
*/
//# sourceMappingURL=calcite-rating.entry-ANI4ITEB.js.map
