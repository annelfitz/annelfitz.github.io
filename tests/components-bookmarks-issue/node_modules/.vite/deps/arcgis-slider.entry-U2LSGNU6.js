import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  importCoreReactiveUtils,
  newWidgetsSlider
} from "./chunk-YXW2SI4L.js";
import {
  addHandles,
  checkForView
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-slider.entry.js
var sliderCss = "arcgis-slider{min-width:200px;min-height:25px}";
var ArcgisSlider = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.sliderMaxChange = createEvent(this, "sliderMaxChange", 7);
    this.sliderMaxClick = createEvent(this, "sliderMaxClick", 7);
    this.sliderMinChange = createEvent(this, "sliderMinChange", 7);
    this.sliderMinClick = createEvent(this, "sliderMinClick", 7);
    this.sliderSegmentClick = createEvent(this, "sliderSegmentClick", 7);
    this.sliderSegmentDrag = createEvent(this, "sliderSegmentDrag", 7);
    this.sliderThumbChange = createEvent(this, "sliderThumbChange", 7);
    this.sliderThumbClick = createEvent(this, "sliderThumbClick", 7);
    this.sliderThumbDrag = createEvent(this, "sliderThumbDrag", 7);
    this.sliderTickClick = createEvent(this, "sliderTickClick", 7);
    this.sliderTrackClick = createEvent(this, "sliderTrackClick", 7);
    this.widgetReady = createEvent(this, "widgetReady", 7);
    this._watchHandles = [];
    this.referenceElement = void 0;
    this.draggableSegmentsEnabled = void 0;
    this.effectiveMax = void 0;
    this.effectiveMin = void 0;
    this.effectiveSegmentElements = void 0;
    this.labelElements = void 0;
    this.labelInputsEnabled = void 0;
    this.labels = void 0;
    this.layout = "horizontal";
    this.min = void 0;
    this.max = void 0;
    this.maxLabelElement = void 0;
    this.minLabelElement = void 0;
    this.precision = void 0;
    this.rangeLabelInputsEnabled = void 0;
    this.segmentElements = void 0;
    this.snapOnClickEnabled = void 0;
    this.syncedSegmentsEnabled = void 0;
    this.thumbElements = void 0;
    this.thumbsConstrained = void 0;
    this.tickConfigs = void 0;
    this.tickElements = void 0;
    this.trackElement = void 0;
    this.steps = void 0;
    this.values = void 0;
    this.position = "bottom-left";
    this.expandable = false;
    this.widget = void 0;
  }
  draggableSegmentsEnabledWatcher(newValue) {
    if (newValue !== void 0 && this.widget) {
      this.widget.draggableSegmentsEnabled = newValue;
    }
  }
  effectiveMaxWatcher(newValue) {
    if (newValue !== void 0 && this.widget) {
      this.widget.effectiveMax = newValue;
    }
  }
  effectiveMinWatcher(newValue) {
    if (newValue !== void 0 && this.widget) {
      this.widget.effectiveMin = newValue;
    }
  }
  layoutWatcher(newValue) {
    if (this.widget) {
      this.widget.layout = newValue;
    }
  }
  minWatcher(newValue) {
    if (newValue !== void 0 && this.widget) {
      this.widget.min = newValue;
    }
  }
  maxWatcher(newValue) {
    if (newValue !== void 0 && this.widget) {
      this.widget.max = newValue;
    }
  }
  precisionWatcher(newValue) {
    if (newValue !== void 0 && this.widget) {
      this.widget.precision = newValue;
    }
  }
  rangeLabelInputsEnabledWatcher(newValue) {
    if (newValue !== void 0 && this.widget) {
      this.widget.rangeLabelInputsEnabled = newValue;
    }
  }
  snapOnClickEnabledWatcher(newValue) {
    if (newValue !== void 0 && this.widget) {
      this.widget.snapOnClickEnabled = newValue;
    }
  }
  syncedSegmentsEnabledWatcher(newValue) {
    if (newValue !== void 0 && this.widget) {
      this.widget.syncedSegmentsEnabled = newValue;
    }
  }
  thumbsConstrainedWatcher(newValue) {
    if (newValue !== void 0 && this.widget) {
      this.widget.thumbsConstrained = newValue;
    }
  }
  tickConfigsWatcher(newValue) {
    if (this.widget) {
      this.widget.tickConfigs = newValue;
    }
  }
  stepsWatcher(newValue) {
    if (this.widget) {
      this.widget.steps = newValue;
    }
  }
  valuesWatcher(newValue) {
    if (typeof newValue === "string") {
      this.values = newValue.split(",").map((n) => Number(n));
    }
    if (this.widget) {
      this.widget.values = this.values;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = this._createParams();
    const widget = await newWidgetsSlider(params);
    this.widget = widget;
    await this._addWatchers();
    this.widgetReady.emit({ widget: this.widget });
    checkForView(this);
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    if (this.expandable) {
      return h("arcgis-expand", { position: this.position, ref: (el) => this.expandElem = el }, h("div", { ref: (el) => this.childElem = el }));
    }
    return h("div", { ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  async _addWatchers() {
    const { watch } = await importCoreReactiveUtils();
    addHandles(this, watch(() => this.widget.effectiveSegmentElements, (value) => this.effectiveSegmentElements = value, {
      initial: true
    }));
    addHandles(this, watch(() => this.widget.labelElements, (value) => this.labelElements = value, {
      initial: true
    }));
    addHandles(this, watch(() => this.widget.maxLabelElement, (value) => this.maxLabelElement = value, {
      initial: true
    }));
    addHandles(this, watch(() => this.widget.minLabelElement, (value) => this.minLabelElement = value, {
      initial: true
    }));
    addHandles(this, watch(() => this.widget.segmentElements, (value) => this.segmentElements = value, {
      initial: true
    }));
    addHandles(this, watch(() => this.widget.thumbElements, (value) => this.thumbElements = value, {
      initial: true
    }));
    addHandles(this, watch(() => this.widget.tickElements, (value) => this.tickElements = value, {
      initial: true
    }));
    addHandles(this, watch(() => this.widget.trackElement, (value) => this.trackElement = value, {
      initial: true
    }));
  }
  _createParams() {
    const params = {
      container: this.childElem,
      layout: this.layout
    };
    if (this.min !== void 0) {
      params.min = this.min;
    }
    if (this.max !== void 0) {
      params.max = this.max;
    }
    if (this.steps) {
      if (typeof this.steps === "string") {
        this.steps = this.steps.split(",").map((n) => Number(n));
      }
      params.steps = this.steps;
    }
    if (this.values) {
      if (typeof this.values === "string") {
        this.values = this.values.split(",").map((n) => Number(n));
      }
      params.values = this.values;
    }
    return params;
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "draggableSegmentsEnabled": ["draggableSegmentsEnabledWatcher"],
      "effectiveMax": ["effectiveMaxWatcher"],
      "effectiveMin": ["effectiveMinWatcher"],
      "layout": ["layoutWatcher"],
      "min": ["minWatcher"],
      "max": ["maxWatcher"],
      "precision": ["precisionWatcher"],
      "rangeLabelInputsEnabled": ["rangeLabelInputsEnabledWatcher"],
      "snapOnClickEnabled": ["snapOnClickEnabledWatcher"],
      "syncedSegmentsEnabled": ["syncedSegmentsEnabledWatcher"],
      "thumbsConstrained": ["thumbsConstrainedWatcher"],
      "tickConfigs": ["tickConfigsWatcher"],
      "steps": ["stepsWatcher"],
      "values": ["valuesWatcher"]
    };
  }
};
ArcgisSlider.style = sliderCss;
export {
  ArcgisSlider as arcgis_slider
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-slider.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-slider.entry-U2LSGNU6.js.map
