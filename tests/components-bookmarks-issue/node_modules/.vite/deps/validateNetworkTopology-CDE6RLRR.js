import {
  i as i2
} from "./chunk-6EZXOD6N.js";
import {
  f,
  i,
  s as s2
} from "./chunk-I2X6UR6L.js";
import {
  U
} from "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import "./chunk-NDIXNREV.js";
import "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  s
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/rest/networks/validateNetworkTopology.js
async function a(o, a2, n2) {
  var _a;
  const d = f(o), l = a2.toJSON();
  a2.validationSet && (l.validationSet = JSON.stringify(a2.validationSet));
  const u = { ...l, returnEdits: true, f: "json" }, p = s2({ ...d.query, ...u }), m = i(p, { ...n2, method: "post" }), v = `${d.path}/validateNetworkTopology`, { data: y } = await U(v, m), c = i2.fromJSON(y);
  return c.serviceEdits = ((_a = c.serviceEdits) == null ? void 0 : _a.map((t) => ({ layerId: t.id, editedFeatures: t.editedFeatures }))) ?? [], c;
}
async function n(s3, a2, n2) {
  if (!a2.gdbVersion)
    throw new s("submit-validate-network-topology-job:missing-gdb-version", "version is missing");
  const d = f(s3), l = a2.toJSON();
  a2.validationSet && (l.validationSet = JSON.stringify(a2.validationSet));
  const u = i(d.query, { query: s2({ ...l, returnEdits: true, async: true, f: "json" }), ...n2, method: "post" }), p = `${d.path}/validateNetworkTopology`, { data: m } = await U(p, u);
  return m ? m.statusUrl : null;
}
export {
  n as submitValidateNetworkTopologyJob,
  a as validateNetworkTopology
};
//# sourceMappingURL=validateNetworkTopology-CDE6RLRR.js.map
