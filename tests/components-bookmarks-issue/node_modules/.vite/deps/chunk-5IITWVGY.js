import {
  o as o6
} from "./chunk-ZEMG7GKC.js";
import {
  o as o8
} from "./chunk-HBRJJENW.js";
import {
  e as e2
} from "./chunk-VHY5K2VE.js";
import {
  o as o5
} from "./chunk-6ENXMQPD.js";
import {
  P
} from "./chunk-FV43HSGW.js";
import {
  d
} from "./chunk-ZR7OV2EH.js";
import {
  o as o4
} from "./chunk-LJULTBAY.js";
import {
  s
} from "./chunk-GO2OGJDG.js";
import {
  o as o7
} from "./chunk-UYMREM3D.js";
import {
  o as o2
} from "./chunk-CDBOQCLE.js";
import {
  o as o3
} from "./chunk-IDPLBNJX.js";
import {
  o
} from "./chunk-P4MNTMCZ.js";
import {
  e
} from "./chunk-GLF3KRAL.js";

// node_modules/@arcgis/core/chunks/ImageMaterial.glsl.js
function v(v2) {
  const m2 = new o7(), { vertex: f, fragment: u } = m2;
  return d(f, v2), m2.include(o6, v2), m2.attributes.add(e.POSITION, "vec3"), m2.attributes.add(e.UV0, "vec2"), v2.perspectiveInterpolation && m2.attributes.add(e.PERSPECTIVEDIVIDE, "float"), m2.varyings.add("vpos", "vec3"), v2.multipassEnabled && m2.varyings.add("depth", "float"), f.code.add(o`
    void main(void) {
      vpos = position;
      ${v2.multipassEnabled ? "depth = (view * vec4(vpos, 1.0)).z;" : ""}
      vTexCoord = uv0;
      gl_Position = transformPosition(proj, view, vpos);

      ${v2.perspectiveInterpolation ? "gl_Position *= perspectiveDivide;" : ""}
    }
  `), m2.include(P, v2), m2.include(o8, v2), u.uniforms.add(new s("tex", (e3) => e3.texture), new o3("opacity", (e3) => e3.opacity)), m2.varyings.add("vTexCoord", "vec2"), v2.output === o2.Alpha ? u.code.add(o`
    void main() {
      discardBySlice(vpos);
      ${v2.multipassEnabled ? "terrainDepthTest(depth);" : ""}

      float alpha = texture(tex, vTexCoord).a * opacity;
      if (alpha  < ${o.float(o5)}) {
        discard;
      }

      fragColor = vec4(alpha);
    }
    `) : (u.include(e2), u.code.add(o`
    void main() {
      discardBySlice(vpos);
      ${v2.multipassEnabled ? "terrainDepthTest(depth);" : ""}
      fragColor = texture(tex, vTexCoord) * opacity;

      if (fragColor.a < ${o.float(o5)}) {
        discard;
      }

      fragColor = highlightSlice(fragColor, vpos);
      ${v2.transparencyPassType === o4.Color ? "fragColor = premultiplyAlpha(fragColor);" : ""}
    }
    `)), m2;
}
var m = Object.freeze(Object.defineProperty({ __proto__: null, build: v }, Symbol.toStringTag, { value: "Module" }));

export {
  v,
  m
};
//# sourceMappingURL=chunk-5IITWVGY.js.map
