import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  importCoreReactiveUtils,
  newLayersRouteLayer,
  newWidgetsDirections
} from "./chunk-YXW2SI4L.js";
import {
  addHandles,
  checkForView,
  isNullOrEmptyString,
  referenceElementHelper
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-directions.entry.js
var directionsCss = "";
var ArcgisDirections = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.arcgisDirectionsReady = createEvent(this, "arcgisDirectionsReady", 7);
    this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
    this._watchHandles = [];
    this.referenceElement = void 0;
    this.apiKey = void 0;
    this.icon = void 0;
    this.routeLayerItemId = void 0;
    this.lastRoute = void 0;
    this.layer = void 0;
    this.maxStops = 50;
    this.searchProperties = void 0;
    this.unit = void 0;
    this.useDefaultRouteLayer = true;
    this.visibleElementsLayerDetails = true;
    this.visibleElementsSaveAsButton = true;
    this.visibleElementsSaveButton = true;
    this.position = "bottom-left";
    this.view = void 0;
    this.widget = void 0;
  }
  referenceElementWatcher(value) {
    void referenceElementHelper(this, value);
  }
  apiKeyWatcher(value) {
    if (value && this.widget) {
      this.widget.apiKey = value;
    }
  }
  iconWatcher(value) {
    if (value && this.widget) {
      this.widget.icon = value;
    }
  }
  routeLayerItemIdWatcher(value) {
    var _a;
    if (isNullOrEmptyString(value)) {
      (_a = this.view) == null ? void 0 : _a.map.remove(this.layer);
      if (this.useDefaultRouteLayer) {
        void newLayersRouteLayer({}).then((layer) => {
          this.layer = layer;
        });
      }
    } else if (value && this.widget) {
      void newLayersRouteLayer({
        portalItem: {
          id: value
        }
      }).then((layer) => {
        this.layer = layer;
      });
    }
  }
  layerWatcher(value, old) {
    var _a, _b;
    if (old) {
      (_a = this.view) == null ? void 0 : _a.map.remove(old);
    }
    if (value && this.widget) {
      this.widget.layer = value;
      (_b = this.view) == null ? void 0 : _b.map.add(this.layer);
    } else if (!value) {
      this.widget.layer = null;
    }
  }
  maxStopsWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.maxStops = value;
    }
  }
  searchPropertiesWatcher(value) {
    if (this.widget) {
      this.widget.searchProperties = value;
    }
  }
  unitWatcher(value) {
    if (this.widget) {
      this.widget.unit = value;
    }
  }
  visibleElementsLayerDetailsWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        layerDetails: value
      };
    }
  }
  visibleElementsSaveAsButtonWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        saveAsButton: value
      };
    }
  }
  visibleElementsSaveButtonWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        saveButton: value
      };
    }
  }
  positionWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.view.ui.move(this.childElem, value);
    }
  }
  viewWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.view = value;
      if (this.layer) {
        this.widget.view.map.add(this.layer);
      }
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Methods
  //
  //--------------------------------------------------------------------------
  async getDirections() {
    var _a;
    return await ((_a = this.widget) == null ? void 0 : _a.getDirections());
  }
  async save() {
    var _a;
    return await ((_a = this.widget) == null ? void 0 : _a.save());
  }
  async saveAs(portalItem, options) {
    var _a;
    return await ((_a = this.widget) == null ? void 0 : _a.saveAs(portalItem, options));
  }
  async zoomToRoute() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.zoomToRoute();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = await this._createParams();
    const widget = await newWidgetsDirections(params);
    this.widget = widget;
    await this._addWatchers();
    this._addContainer();
    this.arcgisDirectionsReady.emit();
    checkForView(this);
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    return h("div", { ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  _addContainer() {
    this.widget.container = this.childElem;
  }
  async _addWatchers() {
    const { watch } = await importCoreReactiveUtils();
    addHandles(this, watch(() => this.widget.lastRoute, (value) => {
      this.lastRoute = value;
      this.arcgisPropertyChange.emit({ name: "lastRoute" });
    }, {
      initial: true
    }));
  }
  async _createParams() {
    var _a;
    const params = {};
    params.visibleElements = {
      layerDetails: this.visibleElementsLayerDetails,
      saveAsButton: this.visibleElementsSaveAsButton,
      saveButton: this.visibleElementsSaveButton
    };
    if (this.view) {
      params.view = this.view;
    }
    if (this.apiKey) {
      params.apiKey = this.apiKey;
    }
    if (this.icon) {
      params.icon = this.icon;
    }
    if (this.routeLayerItemId) {
      params.layer = await newLayersRouteLayer({
        portalItem: {
          id: this.routeLayerItemId
        }
      });
      this.layer = params.layer;
    } else if (this.layer) {
      params.layer = this.layer;
      this.layer = params.layer;
    } else if (this.useDefaultRouteLayer) {
      params.layer = await newLayersRouteLayer({});
      this.layer = params.layer;
    }
    if (this.layer !== void 0) {
      (_a = this.view) == null ? void 0 : _a.map.add(this.layer);
    }
    if (this.maxStops !== void 0) {
      params.maxStops = this.maxStops;
    }
    if (this.searchProperties) {
      params.searchProperties = this.searchProperties;
    }
    if (this.unit) {
      params.unit = this.unit;
    }
    return params;
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "referenceElement": ["referenceElementWatcher"],
      "apiKey": ["apiKeyWatcher"],
      "icon": ["iconWatcher"],
      "routeLayerItemId": ["routeLayerItemIdWatcher"],
      "layer": ["layerWatcher"],
      "maxStops": ["maxStopsWatcher"],
      "searchProperties": ["searchPropertiesWatcher"],
      "unit": ["unitWatcher"],
      "visibleElementsLayerDetails": ["visibleElementsLayerDetailsWatcher"],
      "visibleElementsSaveAsButton": ["visibleElementsSaveAsButtonWatcher"],
      "visibleElementsSaveButton": ["visibleElementsSaveButtonWatcher"],
      "position": ["positionWatcher"],
      "view": ["viewWatcher"]
    };
  }
};
ArcgisDirections.style = directionsCss;
export {
  ArcgisDirections as arcgis_directions
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-directions.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-directions.entry-L5GWQI5P.js.map
