import {
  h
} from "./chunk-NAWP2ZCR.js";
import "./chunk-M5DWZKDJ.js";
import {
  n as n2
} from "./chunk-IBOAF5ZH.js";
import {
  We
} from "./chunk-EWD7I5UU.js";
import "./chunk-4UEJR4VO.js";
import "./chunk-BUEJAM23.js";
import "./chunk-LQR76D5M.js";
import "./chunk-2CWW7O7M.js";
import "./chunk-Q5NCQLSM.js";
import "./chunk-FLBJ53KN.js";
import "./chunk-YH2IYJYF.js";
import "./chunk-GGHKH3LP.js";
import "./chunk-VS6AHHIY.js";
import "./chunk-DIT542IP.js";
import "./chunk-HFYOMP47.js";
import "./chunk-TOKUWZQG.js";
import "./chunk-JNGJWHJD.js";
import "./chunk-QMPD4WXY.js";
import "./chunk-OF4YIONV.js";
import "./chunk-YBPOKK6D.js";
import "./chunk-AHEDDTVZ.js";
import "./chunk-Z4ALW6LX.js";
import "./chunk-H4O73SDK.js";
import "./chunk-UVXSAP7V.js";
import "./chunk-IZ3VJLQ6.js";
import "./chunk-DRC4XSYG.js";
import "./chunk-IHQNQQJC.js";
import "./chunk-4IKPTZ53.js";
import "./chunk-DXMBDX2I.js";
import "./chunk-TUVEYM7U.js";
import "./chunk-5S637BGW.js";
import "./chunk-BFOJPIF7.js";
import "./chunk-7UUNSIMA.js";
import "./chunk-GMRQGGML.js";
import "./chunk-BYK4ZOU2.js";
import "./chunk-OHYLFFUW.js";
import "./chunk-XW3FDKYP.js";
import "./chunk-Y7RXGLGH.js";
import "./chunk-3JC3OUNW.js";
import "./chunk-RO3CTAP7.js";
import "./chunk-GKMVTGGM.js";
import "./chunk-XGTCDM4C.js";
import "./chunk-QNG4TY7L.js";
import "./chunk-RW5QMWE6.js";
import "./chunk-LGMX4E7L.js";
import "./chunk-2QCWKZIQ.js";
import "./chunk-2NPNEA6N.js";
import "./chunk-U34ZXOJT.js";
import "./chunk-OKRW5W44.js";
import "./chunk-RGAA5Z76.js";
import "./chunk-Q6RZBEZ6.js";
import "./chunk-PC66NY33.js";
import "./chunk-YY2VB3AE.js";
import "./chunk-VEYMN5N3.js";
import "./chunk-H6NTWZSO.js";
import "./chunk-BMT3OVAP.js";
import "./chunk-W5ALAOW2.js";
import "./chunk-FHDHOWK5.js";
import "./chunk-Y546C2O5.js";
import "./chunk-IYKBAIQE.js";
import "./chunk-BDRVHR2K.js";
import "./chunk-DVIGFJWY.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-AKQ765JR.js";
import "./chunk-ERD6I7QP.js";
import "./chunk-QIT4M76C.js";
import "./chunk-EZL4LTMD.js";
import "./chunk-F3BQGS35.js";
import {
  y as y2
} from "./chunk-Z3NX5DTX.js";
import "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import "./chunk-LMO6NZJA.js";
import "./chunk-A5QTLE4Y.js";
import "./chunk-SCHTG6ZQ.js";
import {
  R
} from "./chunk-G7YFDDME.js";
import "./chunk-PCKG3UTS.js";
import "./chunk-3VMVD66K.js";
import "./chunk-OHE3HDFF.js";
import {
  f as f2
} from "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-I2X6UR6L.js";
import "./chunk-7EQJLP2H.js";
import {
  j
} from "./chunk-4ZLXDMI5.js";
import "./chunk-EMYOYGGK.js";
import {
  n
} from "./chunk-6PMFOUWZ.js";
import "./chunk-3KPZ3BQR.js";
import "./chunk-5JYVZQZR.js";
import {
  t
} from "./chunk-UUG4W2PI.js";
import {
  u
} from "./chunk-WW22JHXA.js";
import {
  S
} from "./chunk-ZAM62XN5.js";
import "./chunk-RKVEKQ5O.js";
import "./chunk-P7J4JFEH.js";
import {
  b as b2
} from "./chunk-G7FOE26O.js";
import "./chunk-USOPZ2Q6.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-JW7VBMHD.js";
import "./chunk-GLLRUDMY.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import {
  m3 as m2
} from "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import {
  S as S2
} from "./chunk-G5EVVNIJ.js";
import {
  y as y3
} from "./chunk-HU5IGOTI.js";
import {
  d
} from "./chunk-C24MEKSO.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-AKLOTDO2.js";
import "./chunk-6AQIVLDN.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-DVI5RM3W.js";
import "./chunk-LBXFRGMS.js";
import "./chunk-VTH4DAHQ.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-SLQA5YBV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import {
  B,
  F,
  W,
  b,
  k
} from "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import {
  D,
  I,
  K,
  c,
  m
} from "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-5LSHHVQ5.js";
import {
  w
} from "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import {
  f
} from "./chunk-MBGZKT2Z.js";
import {
  G
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import {
  o as o2
} from "./chunk-YOPMY6TS.js";
import {
  r
} from "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a2,
  s3 as s2
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  a,
  o,
  s
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/layers/MapNotesLayer.js
function B2(e2) {
  return "markup" === e2.featureCollectionType || e2.layers.some((e3) => null != e3.layerDefinition.visibilityField || !k2(e3));
}
function k2({ layerDefinition: e2, featureSet: t2 }) {
  const r2 = e2.geometryType ?? t2.geometryType;
  return $.find((t3) => {
    var _a, _b, _c;
    return r2 === t3.geometryTypeJSON && ((_c = (_b = (_a = e2.drawingInfo) == null ? void 0 : _a.renderer) == null ? void 0 : _b.symbol) == null ? void 0 : _c.type) === t3.identifyingSymbol.type;
  });
}
function z() {
  return new w({ xmin: -180, ymin: -90, xmax: 180, ymax: 90 });
}
var U = new y2({ name: "OBJECTID", alias: "OBJECTID", type: "oid", nullable: false, editable: false });
var W2 = new y2({ name: "title", alias: "Title", type: "string", nullable: true, editable: true, length: 255 });
var A = class extends h {
  constructor(e2) {
    super(e2), this.visibilityMode = "inherited";
  }
  initialize() {
    for (const e2 of this.graphics)
      e2.sourceLayer = this.layer;
    this.graphics.on("after-add", (e2) => {
      e2.item.sourceLayer = this.layer;
    }), this.graphics.on("after-remove", (e2) => {
      e2.item.sourceLayer = null;
    });
  }
  get fullExtent() {
    var _a;
    const e2 = (_a = this.layer) == null ? void 0 : _a.spatialReference, t2 = this.fullBounds;
    return e2 ? null == t2 ? W(z(), e2).geometry : c(t2, e2) : null;
  }
  get fullBounds() {
    var _a;
    const e2 = (_a = this.layer) == null ? void 0 : _a.spatialReference;
    if (!e2)
      return null;
    const t2 = D();
    return this.graphics.forEach((r2) => {
      const o3 = null != r2.geometry ? W(r2.geometry, e2).geometry : null;
      null != o3 && m(t2, "point" === o3.type ? o3 : o3.extent, t2);
    }), I(t2, K) ? null : t2;
  }
  get sublayers() {
    return this.graphics;
  }
};
e([y({ readOnly: true })], A.prototype, "fullExtent", null), e([y({ readOnly: true })], A.prototype, "fullBounds", null), e([y({ readOnly: true })], A.prototype, "sublayers", null), e([y()], A.prototype, "layer", void 0), e([y()], A.prototype, "layerId", void 0), e([y({ readOnly: true })], A.prototype, "visibilityMode", void 0), A = e([a2("esri.layers.MapNotesLayer.MapNotesSublayer")], A);
var $ = [{ geometryType: "polygon", geometryTypeJSON: "esriGeometryPolygon", id: "polygonLayer", layerId: 0, title: "Polygons", identifyingSymbol: new S2().toJSON() }, { geometryType: "polyline", geometryTypeJSON: "esriGeometryPolyline", id: "polylineLayer", layerId: 1, title: "Polylines", identifyingSymbol: new d().toJSON() }, { geometryType: "multipoint", geometryTypeJSON: "esriGeometryMultipoint", id: "multipointLayer", layerId: 2, title: "Multipoints", identifyingSymbol: new y3().toJSON() }, { geometryType: "point", geometryTypeJSON: "esriGeometryPoint", id: "pointLayer", layerId: 3, title: "Points", identifyingSymbol: new y3().toJSON() }, { geometryType: "point", geometryTypeJSON: "esriGeometryPoint", id: "textLayer", layerId: 4, title: "Text", identifyingSymbol: new m2().toJSON() }];
var q = class extends n(t(u(j(S(b2))))) {
  constructor(e2) {
    super(e2), this.capabilities = { operations: { supportsMapNotesEditing: true } }, this.featureCollections = null, this.featureCollectionJSON = null, this.featureCollectionType = "notes", this.legendEnabled = false, this.listMode = "hide-children", this.minScale = 0, this.maxScale = 0, this.spatialReference = f.WGS84, this.sublayers = new V($.map((e3) => new A({ id: e3.id, layerId: e3.layerId, title: e3.title, layer: this }))), this.title = "Map Notes", this.type = "map-notes", this.visibilityMode = "inherited";
  }
  readCapabilities(e2, t2, r2) {
    return { operations: { supportsMapNotesEditing: !B2(t2) && "portal-item" !== (r2 == null ? void 0 : r2.origin) } };
  }
  readFeatureCollections(e2, t2, o3) {
    if (!B2(t2))
      return null;
    const i = t2.layers.map((e3) => {
      const t3 = new We();
      return t3.read(e3, o3), t3;
    });
    return new V({ items: i });
  }
  readLegacyfeatureCollectionJSON(e2, t2) {
    return B2(t2) ? a(t2.featureCollection) : null;
  }
  get fullExtent() {
    var _a;
    const e2 = this.spatialReference, t2 = D();
    if (null != this.sublayers)
      this.sublayers.forEach(({ fullBounds: e3 }) => null != e3 ? m(t2, e3, t2) : t2, t2);
    else if ((_a = this.featureCollectionJSON) == null ? void 0 : _a.layers.some((e3) => e3.layerDefinition.extent)) {
      this.featureCollectionJSON.layers.forEach((r2) => {
        const o3 = W(r2.layerDefinition.extent, e2).geometry;
        null != o3 && m(t2, o3, t2);
      });
    }
    return I(t2, K) ? W(z(), e2).geometry : c(t2, e2);
  }
  readMinScale(e2, t2) {
    for (const r2 of t2.layers)
      if (null != r2.layerDefinition.minScale)
        return r2.layerDefinition.minScale;
    return 0;
  }
  readMaxScale(e2, t2) {
    for (const r2 of t2.layers)
      if (null != r2.layerDefinition.maxScale)
        return r2.layerDefinition.maxScale;
    return 0;
  }
  get multipointLayer() {
    return this._findSublayer("multipointLayer");
  }
  get pointLayer() {
    return this._findSublayer("pointLayer");
  }
  get polygonLayer() {
    return this._findSublayer("polygonLayer");
  }
  get polylineLayer() {
    return this._findSublayer("polylineLayer");
  }
  readSpatialReference(e2, t2) {
    return t2.layers.length ? f.fromJSON(t2.layers[0].layerDefinition.spatialReference) : f.WGS84;
  }
  readSublayers(e2, o3, i) {
    if (B2(o3))
      return null;
    const l = [];
    let a3 = o3.layers.reduce((e3, t2) => Math.max(e3, t2.layerDefinition.id ?? -1), -1) + 1;
    for (const r2 of o3.layers) {
      const { layerDefinition: e3, featureSet: o4 } = r2, i2 = e3.id ?? a3++, n3 = k2(r2);
      if (null != n3) {
        const r3 = new A({ id: n3.id, title: e3.name, layerId: i2, layer: this, graphics: o4.features.map(({ geometry: e4, symbol: r4, attributes: o5, popupInfo: i3 }) => f2.fromJSON({ attributes: o5, geometry: e4, symbol: r4, popupTemplate: i3 })) });
        l.push(r3);
      }
    }
    return new V(l);
  }
  writeSublayers(e2, t2, r2, i) {
    var _a;
    const { minScale: l, maxScale: n3 } = this;
    if (null == e2)
      return;
    const s3 = e2.some((e3) => e3.graphics.length > 0);
    if (!this.capabilities.operations.supportsMapNotesEditing)
      return void (s3 && ((_a = i == null ? void 0 : i.messages) == null ? void 0 : _a.push(new s("map-notes-layer:editing-not-supported", "New map notes cannot be added to this layer"))));
    const p = [];
    let y4 = this.spatialReference.toJSON();
    e:
      for (const o3 of e2)
        for (const e3 of o3.graphics)
          if (null != e3.geometry) {
            y4 = e3.geometry.spatialReference.toJSON();
            break e;
          }
    for (const o3 of $) {
      const t3 = e2.find((e3) => o3.id === e3.id);
      this._writeMapNoteSublayer(p, t3, o3, l, n3, y4, i);
    }
    o("featureCollection.layers", p, t2);
  }
  get textLayer() {
    return this._findSublayer("textLayer");
  }
  load(e2) {
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Feature Collection"] }, e2)), Promise.resolve(this);
  }
  read(e2, t2) {
    "featureCollection" in e2 && (e2 = a(e2), Object.assign(e2, e2.featureCollection)), super.read(e2, t2);
  }
  async beforeSave() {
    if (null == this.sublayers)
      return;
    let e2 = null;
    const t2 = [];
    for (const o3 of this.sublayers)
      for (const r3 of o3.graphics)
        if (null != r3.geometry) {
          const o4 = r3.geometry;
          e2 ? G(o4.spatialReference, e2) || (F(o4.spatialReference, e2) || b() || await k(), r3.geometry = B(o4, e2)) : e2 = o4.spatialReference, t2.push(r3);
        }
    const r2 = await R(t2.map((e3) => e3.geometry));
    t2.forEach((e3, t3) => e3.geometry = r2[t3]);
  }
  _findSublayer(e2) {
    var _a;
    return null == this.sublayers ? null : ((_a = this.sublayers) == null ? void 0 : _a.find((t2) => t2.id === e2)) ?? null;
  }
  _writeMapNoteSublayer(e2, t2, r2, o3, l, a3, n3) {
    const s3 = [];
    if (null != t2) {
      for (const e3 of t2.graphics)
        this._writeMapNote(s3, e3, r2.geometryType, n3);
      this._normalizeObjectIds(s3, U), e2.push({ layerDefinition: { name: t2.title, drawingInfo: { renderer: { type: "simple", symbol: a(r2.identifyingSymbol) } }, id: t2.layerId, geometryType: r2.geometryTypeJSON, minScale: o3, maxScale: l, objectIdField: "OBJECTID", fields: [U.toJSON(), W2.toJSON()], spatialReference: a3 }, featureSet: { features: s3, geometryType: r2.geometryTypeJSON } });
    }
  }
  _writeMapNote(e2, t2, r2, o3) {
    var _a, _b;
    if (null == t2)
      return;
    const { geometry: i, symbol: l, popupTemplate: a3 } = t2;
    if (null == i)
      return;
    if (i.type !== r2)
      return void ((_a = o3 == null ? void 0 : o3.messages) == null ? void 0 : _a.push(new s2("map-notes-layer:invalid-geometry-type", `Geometry "${i.type}" cannot be saved in "${r2}" layer`, { graphic: t2 })));
    if (null == l)
      return void ((_b = o3 == null ? void 0 : o3.messages) == null ? void 0 : _b.push(new s2("map-notes-layer:no-symbol", "Skipping map notes with no symbol", { graphic: t2 })));
    const s3 = { attributes: { ...t2.attributes }, geometry: i.toJSON(), symbol: l.toJSON() };
    null != a3 && (s3.popupInfo = a3.toJSON()), e2.push(s3);
  }
  _normalizeObjectIds(e2, t2) {
    const r2 = t2.name;
    let o3 = n2(r2, e2) + 1;
    const i = /* @__PURE__ */ new Set();
    for (const l of e2) {
      l.attributes || (l.attributes = {});
      const { attributes: e3 } = l;
      (null == e3[r2] || i.has(e3[r2])) && (e3[r2] = o3++), i.add(e3[r2]);
    }
  }
};
e([y({ readOnly: true })], q.prototype, "capabilities", void 0), e([o2(["portal-item", "web-map"], "capabilities", ["layers"])], q.prototype, "readCapabilities", null), e([y({ readOnly: true })], q.prototype, "featureCollections", void 0), e([o2(["web-map", "portal-item"], "featureCollections", ["layers"])], q.prototype, "readFeatureCollections", null), e([y({ readOnly: true, json: { origins: { "web-map": { write: { enabled: true, target: "featureCollection" } } } } })], q.prototype, "featureCollectionJSON", void 0), e([o2(["web-map", "portal-item"], "featureCollectionJSON", ["featureCollection"])], q.prototype, "readLegacyfeatureCollectionJSON", null), e([y({ readOnly: true, json: { read: true, write: { enabled: true, ignoreOrigin: true } } })], q.prototype, "featureCollectionType", void 0), e([y({ readOnly: true })], q.prototype, "fullExtent", null), e([y({ readOnly: true, json: { origins: { "web-map": { write: { target: "featureCollection.showLegend", overridePolicy() {
  return { enabled: null != this.featureCollectionJSON };
} } } } } })], q.prototype, "legendEnabled", void 0), e([y({ type: ["show", "hide", "hide-children"] })], q.prototype, "listMode", void 0), e([y({ type: Number, nonNullable: true, json: { write: false } })], q.prototype, "minScale", void 0), e([o2(["web-map", "portal-item"], "minScale", ["layers"])], q.prototype, "readMinScale", null), e([y({ type: Number, nonNullable: true, json: { write: false } })], q.prototype, "maxScale", void 0), e([o2(["web-map", "portal-item"], "maxScale", ["layers"])], q.prototype, "readMaxScale", null), e([y({ readOnly: true })], q.prototype, "multipointLayer", null), e([y({ value: "ArcGISFeatureLayer", type: ["ArcGISFeatureLayer"] })], q.prototype, "operationalLayerType", void 0), e([y({ readOnly: true })], q.prototype, "pointLayer", null), e([y({ readOnly: true })], q.prototype, "polygonLayer", null), e([y({ readOnly: true })], q.prototype, "polylineLayer", null), e([y({ type: f })], q.prototype, "spatialReference", void 0), e([o2(["web-map", "portal-item"], "spatialReference", ["layers"])], q.prototype, "readSpatialReference", null), e([y({ readOnly: true, json: { origins: { "web-map": { write: { ignoreOrigin: true } } } } })], q.prototype, "sublayers", void 0), e([o2("web-map", "sublayers", ["layers"])], q.prototype, "readSublayers", null), e([r("web-map", "sublayers")], q.prototype, "writeSublayers", null), e([y({ readOnly: true })], q.prototype, "textLayer", null), e([y()], q.prototype, "title", void 0), e([y({ readOnly: true, json: { read: false } })], q.prototype, "type", void 0), q = e([a2("esri.layers.MapNotesLayer")], q);
var H = q;
export {
  H as default
};
//# sourceMappingURL=MapNotesLayer-7HSXY63W.js.map
