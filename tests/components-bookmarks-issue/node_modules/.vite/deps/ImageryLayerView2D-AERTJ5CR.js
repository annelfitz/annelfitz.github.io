import {
  u as u2
} from "./chunk-OA5A2LKE.js";
import {
  d as d3,
  d2 as d4,
  f as f3
} from "./chunk-4XD5FPUL.js";
import {
  h as h2
} from "./chunk-HQBUCT2W.js";
import {
  v
} from "./chunk-USNP4EOW.js";
import {
  a as a2
} from "./chunk-475SVAPV.js";
import {
  l
} from "./chunk-SQGFMYIT.js";
import {
  i
} from "./chunk-SWNHB34O.js";
import {
  m as m2
} from "./chunk-UXMZQA2H.js";
import "./chunk-V2LOXBCS.js";
import {
  u
} from "./chunk-NGAYW4TW.js";
import "./chunk-AD6XW3W5.js";
import {
  $
} from "./chunk-ES7G4AF5.js";
import "./chunk-SGCIDT4C.js";
import "./chunk-QXRPUAVL.js";
import "./chunk-M5UX4IRZ.js";
import "./chunk-2WUPZJUL.js";
import {
  n2
} from "./chunk-KN52PCW4.js";
import "./chunk-SFKZ25SS.js";
import "./chunk-NCZU5DB4.js";
import "./chunk-SMDSNUU2.js";
import "./chunk-XTY645DH.js";
import "./chunk-UIOX7MPV.js";
import {
  E,
  h2 as h
} from "./chunk-HRDKP7QO.js";
import "./chunk-4UOHLZKX.js";
import "./chunk-VJ2I4VSQ.js";
import "./chunk-MCZ4QOSQ.js";
import "./chunk-6XTKBOD7.js";
import "./chunk-IUY6HBLC.js";
import "./chunk-BHOYA5LV.js";
import "./chunk-6RR3WN7W.js";
import "./chunk-TXCVD3YI.js";
import "./chunk-SCRCLNT5.js";
import {
  c
} from "./chunk-M5DWZKDJ.js";
import "./chunk-PGADGS3I.js";
import "./chunk-7FQYGAVT.js";
import "./chunk-QRQWG4D3.js";
import "./chunk-KTQIY334.js";
import "./chunk-6ZDDHEYR.js";
import "./chunk-YQQSFFN3.js";
import "./chunk-32X2FZ3S.js";
import "./chunk-4IJED6JM.js";
import "./chunk-LGIO6OCK.js";
import "./chunk-C5EJV3NW.js";
import "./chunk-XXIDOBRO.js";
import "./chunk-JL4LXZGM.js";
import "./chunk-O556EBAK.js";
import "./chunk-IJD65EMQ.js";
import "./chunk-4YGBWYMD.js";
import "./chunk-ZPU7GNG4.js";
import "./chunk-TNR6E67I.js";
import "./chunk-7O3VD45U.js";
import "./chunk-QREUCRQ4.js";
import "./chunk-YK3UMVCY.js";
import "./chunk-IQFWVTUJ.js";
import "./chunk-GB4RVOXH.js";
import "./chunk-JTUYA5FE.js";
import "./chunk-UNTQATE2.js";
import "./chunk-5YY6NZNY.js";
import "./chunk-DCBZOZ54.js";
import "./chunk-5IT6RVBX.js";
import "./chunk-N4HNOQVJ.js";
import "./chunk-MTQHYT7Y.js";
import "./chunk-JCP47SOM.js";
import "./chunk-CXCB57TE.js";
import "./chunk-IWO6JXL2.js";
import "./chunk-AVR3LWTZ.js";
import "./chunk-YUWVLORR.js";
import {
  J
} from "./chunk-QQDXHR2B.js";
import {
  M,
  f2,
  m
} from "./chunk-HUFLW46E.js";
import "./chunk-XKG6TWCH.js";
import "./chunk-FFG7BDAP.js";
import "./chunk-I4SHZ6P5.js";
import "./chunk-DGRFM5OL.js";
import "./chunk-AOAT6HYL.js";
import "./chunk-JBU54P54.js";
import "./chunk-5LIYYE75.js";
import "./chunk-TLTAGTBA.js";
import "./chunk-2QPP5AGU.js";
import "./chunk-2C26DRKK.js";
import "./chunk-M4RFJU4F.js";
import "./chunk-WKVHVZW2.js";
import "./chunk-VIKID44H.js";
import "./chunk-RLZYC2LS.js";
import "./chunk-3AIILHI5.js";
import "./chunk-JKLFCJPR.js";
import "./chunk-J6T3FJLS.js";
import "./chunk-BSPKLAHD.js";
import "./chunk-VS6AHHIY.js";
import "./chunk-BFOJPIF7.js";
import "./chunk-3JC3OUNW.js";
import "./chunk-RO3CTAP7.js";
import "./chunk-GKMVTGGM.js";
import "./chunk-XGTCDM4C.js";
import "./chunk-QNG4TY7L.js";
import "./chunk-VEYMN5N3.js";
import "./chunk-W5ALAOW2.js";
import "./chunk-FHDHOWK5.js";
import "./chunk-Y546C2O5.js";
import "./chunk-BDRVHR2K.js";
import "./chunk-ZLQTPFTL.js";
import "./chunk-HZSGATFT.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-ERD6I7QP.js";
import "./chunk-Z3NX5DTX.js";
import "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import "./chunk-G7YFDDME.js";
import "./chunk-PCKG3UTS.js";
import "./chunk-3VMVD66K.js";
import {
  f
} from "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-I2X6UR6L.js";
import "./chunk-2SYXH2R7.js";
import "./chunk-7JNXJYRU.js";
import "./chunk-5JYVZQZR.js";
import "./chunk-RKVEKQ5O.js";
import "./chunk-P7J4JFEH.js";
import "./chunk-USOPZ2Q6.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-AKLOTDO2.js";
import "./chunk-6AQIVLDN.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-545NO6M2.js";
import "./chunk-5LSHHVQ5.js";
import {
  w
} from "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import {
  d2
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import {
  U
} from "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  A,
  C,
  d
} from "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  b,
  e as e2,
  k
} from "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n
} from "./chunk-7RBRCL6S.js";
import {
  has
} from "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/views/2d/layers/imagery/ImageryView2D.js
var m3 = class extends S {
  constructor() {
    super(...arguments), this.attached = false, this.container = new h(), this.updateRequested = false, this.type = "imagery", this._bitmapView = new a2();
  }
  destroy() {
    this.attached && (this.detach(), this.attached = false), this.updateRequested = false;
  }
  get updating() {
    return !this.attached || this.isUpdating();
  }
  update(t2) {
    this.strategy.update(t2).catch((t3) => {
      b(t3) || n.getLogger(this).error(t3);
    });
  }
  hitTest(t2) {
    return new f({ attributes: {}, geometry: t2.clone(), layer: this.layer });
  }
  attach() {
    this.container.addChild(this._bitmapView);
    const t2 = this.layer.version >= 10, e3 = this.layer.version >= 10.1 ? this.layer.imageMaxHeight : 2048, i2 = this.layer.version >= 10.1 ? this.layer.imageMaxWidth : 2048;
    this.strategy = new v({ container: this._bitmapView, imageNormalizationSupported: t2, imageMaxHeight: e3, imageMaxWidth: i2, fetchSource: this._fetchImage.bind(this), requestUpdate: () => this.requestUpdate() });
  }
  detach() {
    this.strategy.destroy(), this._bitmapView.removeAllChildren(), this.container.removeAllChildren(), this.updateRequested = false;
  }
  redraw() {
    this.strategy.updateExports(async (t2) => {
      const { source: e3 } = t2;
      if (!e3 || e3 instanceof ImageBitmap)
        return;
      const i2 = await this.layer.applyRenderer({ extent: e3.extent, pixelBlock: e3.originalPixelBlock ?? e3.pixelBlock });
      e3.filter = (t3) => this.layer.pixelFilter ? this.layer.applyFilter(t3) : { ...i2, extent: e3.extent };
    }).catch((t2) => {
      b(t2) || n.getLogger(this).error(t2);
    });
  }
  requestUpdate() {
    this.updateRequested || (this.updateRequested = true, this.view.requestUpdate());
  }
  isUpdating() {
    return this.strategy.updating || this.updateRequested;
  }
  getPixelData() {
    if (this.updating)
      return null;
    const t2 = this.strategy.bitmaps;
    if (1 === t2.length && t2[0].source)
      return { extent: t2[0].source.extent, pixelBlock: t2[0].source.originalPixelBlock };
    if (t2.length > 1) {
      const e3 = this.view.extent, i2 = t2.map((t3) => t3.source).filter((t3) => t3.extent && t3.extent.intersects(e3)).map((t3) => ({ extent: t3.extent, pixelBlock: t3.originalPixelBlock })), r = M(i2, e3);
      return null != r ? { extent: r.extent, pixelBlock: r.pixelBlock } : null;
    }
    return null;
  }
  async _fetchImage(t2, e3, i2, r) {
    var _a;
    (r = r || {}).timeExtent = this.timeExtent, r.requestAsImageElement = true, r.returnImageBitmap = true;
    const s = await this.layer.fetchImage(t2, e3, i2, r);
    if (s.imageBitmap)
      return s.imageBitmap;
    const a3 = await this.layer.applyRenderer(s.pixelData, { signal: r.signal }), o = new l(a3.pixelBlock, (_a = a3.extent) == null ? void 0 : _a.clone(), s.pixelData.pixelBlock);
    return o.filter = (t3) => this.layer.applyFilter(t3), o;
  }
};
e([y()], m3.prototype, "attached", void 0), e([y()], m3.prototype, "container", void 0), e([y()], m3.prototype, "layer", void 0), e([y()], m3.prototype, "strategy", void 0), e([y()], m3.prototype, "timeExtent", void 0), e([y()], m3.prototype, "view", void 0), e([y()], m3.prototype, "updateRequested", void 0), e([y()], m3.prototype, "updating", null), e([y()], m3.prototype, "type", void 0), m3 = e([a("esri.views.2d.layers.imagery.ImageryView2D")], m3);
var d5 = m3;

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterVFContainer.js
var t = class extends n2 {
  constructor() {
    super(...arguments), this.symbolTypes = ["triangle"];
  }
  prepareRenderPasses(s) {
    const t2 = s.registerRenderPass({ name: "imagery (vf)", brushes: [d4], target: () => this.children, drawPhase: E.MAP });
    return [...super.prepareRenderPasses(s), t2];
  }
  doRender(e3) {
    this.visible && e3.drawPhase === E.MAP && this.symbolTypes.forEach((r) => {
      e3.renderPass = r, super.doRender(e3);
    });
  }
};

// node_modules/@arcgis/core/views/2d/layers/imagery/ImageryVFStrategy.js
var c2 = class extends S {
  constructor(e3) {
    super(e3), this._loading = null, this.update = k((e4, t2) => this._update(e4, t2).catch((e5) => {
      b(e5) || n.getLogger(this).error(e5);
    }));
  }
  get updating() {
    return !!this._loading;
  }
  redraw(e3) {
    if (!this.container.children.length)
      return;
    const t2 = this.container.children[0];
    t2.symbolizerParameters = e3, t2.invalidateVAO(), this.container.symbolTypes = "wind_speed" === e3.style ? ["scalar", "triangle"] : "simple_scalar" === e3.style ? ["scalar"] : ["triangle"], this.container.requestRender();
  }
  async _update(e3, t2, i2) {
    if (!e3.stationary)
      return;
    const { extent: r, spatialReference: o } = e3.state, s = new w({ xmin: r.xmin, ymin: r.ymin, xmax: r.xmax, ymax: r.ymax, spatialReference: o }), [a3, l2] = e3.state.size;
    this._loading = this.fetchPixels(s, a3, l2, i2);
    const c3 = await this._loading;
    this._addToDisplay(c3, t2, e3.state), this._loading = null;
  }
  _addToDisplay(e3, t2, i2) {
    if (null == e3.pixelBlock)
      return this.container.children.forEach((e4) => e4.destroy()), void this.container.removeAllChildren();
    const { extent: r, pixelBlock: o } = e3, s = new f3(o);
    s.offset = [0, 0], s.symbolizerParameters = t2, s.rawPixelData = e3, s.invalidateVAO(), s.x = r.xmin, s.y = r.ymax, s.pixelRatio = i2.pixelRatio, s.rotation = i2.rotation, s.resolution = i2.resolution, s.width = o.width * t2.symbolTileSize, s.height = o.height * t2.symbolTileSize, this.container.children.forEach((e4) => e4.destroy()), this.container.removeAllChildren(), this.container.symbolTypes = "wind_speed" === t2.style ? ["scalar", "triangle"] : "simple_scalar" === t2.style ? ["scalar"] : ["triangle"], this.container.addChild(s);
  }
};
e([y()], c2.prototype, "fetchPixels", void 0), e([y()], c2.prototype, "container", void 0), e([y()], c2.prototype, "_loading", void 0), e([y()], c2.prototype, "updating", null), c2 = e([a("esri.views.2d.layers.imagery.ImageryVFStrategy")], c2);
var p = c2;

// node_modules/@arcgis/core/views/2d/layers/imagery/VectorFieldView2D.js
var f4 = class extends S {
  constructor() {
    super(...arguments), this.attached = false, this.container = new t(), this.type = "imageryVF", this._dataParameters = { exportParametersVersion: 0, bbox: "", symbolTileSize: 0, time: "" }, this._fetchpixels = async (t2, e3, r, i2) => {
      const s = await this._projectFullExtentPromise, { symbolTileSize: a3 } = this.layer.renderer, { extent: o, width: n3, height: l2 } = m(t2, e3, r, a3, s);
      if (null != s && !s.intersects(t2))
        return { extent: o, pixelBlock: null };
      const m4 = { bbox: `${o.xmin}, ${o.ymin}, ${o.xmax}, ${o.ymax}`, exportParametersVersion: this.layer.exportImageServiceParameters.version, symbolTileSize: a3, time: JSON.stringify(this.timeExtent || "") };
      if (this._canReuseVectorFieldData(m4)) {
        const t3 = this.getPixelData();
        if (null != t3) {
          if (`${t3.extent.xmin}, ${t3.extent.ymin}, ${t3.extent.xmax}, ${t3.extent.ymax}` === m4.bbox)
            return t3;
        }
      }
      const { pixelData: c3 } = await this.layer.fetchImage(o, n3, l2, { timeExtent: this.timeExtent, requestAsImageElement: false, signal: i2 });
      this._dataParameters = m4;
      const p2 = c3 == null ? void 0 : c3.pixelBlock;
      if (null == p2)
        return { extent: o, pixelBlock: null };
      return { extent: o, pixelBlock: "vector-uv" === this.layer.rasterInfo.dataType ? f2(p2, "vector-uv") : p2 };
    };
  }
  get updating() {
    return !this.attached || this._strategy.updating;
  }
  attach() {
    this._projectFullExtentPromise = this._getProjectedFullExtent(this.view.spatialReference), this._strategy = new p({ container: this.container, fetchPixels: this._fetchpixels }), this.addHandles(d(() => this.layer.renderer, (t2) => this._updateSymbolizerParams(t2), A), "attach");
  }
  detach() {
    this._strategy.destroy(), this.container.children.forEach((t2) => t2.destroy()), this.container.removeAllChildren(), this.removeHandles("attach"), this._strategy = this.container = this._projectFullExtentPromise = null;
  }
  getPixelData() {
    var _a;
    const t2 = (_a = this.container.children[0]) == null ? void 0 : _a.rawPixelData;
    if (this.updating || !t2)
      return null;
    const { extent: e3, pixelBlock: r } = t2;
    return { extent: e3, pixelBlock: r };
  }
  hitTest(t2) {
    return new f({ attributes: {}, geometry: t2.clone(), layer: this.layer });
  }
  update(t2) {
    this._strategy.update(t2, this._symbolizerParams).catch((t3) => {
      b(t3) || n.getLogger(this).error(t3);
    });
  }
  redraw() {
    const { renderer: t2 } = this.layer;
    t2 && (this._updateSymbolizerParams(t2), this._strategy.redraw(this._symbolizerParams));
  }
  _canReuseVectorFieldData(t2) {
    const e3 = this._dataParameters.exportParametersVersion === t2.exportParametersVersion, r = this._dataParameters.time === t2.time, i2 = this._dataParameters.symbolTileSize === t2.symbolTileSize, s = this._dataParameters.bbox === t2.bbox;
    return e3 && r && i2 && s;
  }
  async _getProjectedFullExtent(t2) {
    try {
      return J(this.layer.fullExtent, t2);
    } catch (e3) {
      try {
        const e4 = (await U(this.layer.url, { query: { option: "footprints", outSR: d2(t2), f: "json" } })).data.featureCollection.layers[0].layerDefinition.extent;
        return e4 ? w.fromJSON(e4) : null;
      } catch {
        return null;
      }
    }
  }
  _updateSymbolizerParams(t2) {
    "vector-field" === t2.type && (this._symbolizerParams = this.layer.symbolizer.generateWebGLParameters({ pixelBlock: null }));
  }
};
e([y()], f4.prototype, "attached", void 0), e([y()], f4.prototype, "container", void 0), e([y()], f4.prototype, "layer", void 0), e([y()], f4.prototype, "timeExtent", void 0), e([y()], f4.prototype, "type", void 0), e([y()], f4.prototype, "view", void 0), e([y()], f4.prototype, "updating", null), f4 = e([a("esri.views.2d.layers.imagery.VectorFieldView2D")], f4);
var g = f4;

// node_modules/@arcgis/core/views/2d/layers/ImageryLayerView2D.js
var v2 = class extends u2(i(m2(u))) {
  constructor() {
    super(...arguments), this._exportImageVersion = -1, this._highlightGraphics = new c(), this._highlightView = void 0, this.layer = null, this.subview = null;
  }
  get pixelData() {
    const { subview: e3 } = this;
    return this.updating || !e3 ? null : "getPixelData" in e3 ? e3.getPixelData() : null;
  }
  update(e3) {
    var _a;
    (_a = this.subview) == null ? void 0 : _a.update(e3);
  }
  attach() {
    this.layer.increaseRasterJobHandlerUsage(), this._setSubView(), this.view && (this._highlightView = new $({ view: this.view, graphics: this._highlightGraphics, requestUpdateCallback: () => this.requestUpdate(), container: new h2(this.view.featuresTilingScheme) }), this.container.addChild(this._highlightView.container)), this.addAttachHandles([d(() => this.layer.exportImageServiceParameters.version, (e3) => {
      e3 && this._exportImageVersion !== e3 && (this._exportImageVersion = e3, this.requestUpdate());
    }, C), d(() => this.timeExtent, (e3) => {
      const { subview: i2 } = this;
      i2 && (i2.timeExtent = e3, "redraw" in i2 ? this.requestUpdate() : i2.redrawOrRefetch());
    }, C), this.layer.on("redraw", () => {
      const { subview: e3 } = this;
      e3 && ("redraw" in e3 ? e3.redraw() : e3.redrawOrRefetch());
    }), d(() => this.layer.renderer, () => this._setSubView())]);
  }
  detach() {
    var _a, _b;
    this.layer.decreaseRasterJobHandlerUsage(), this.container.removeAllChildren(), this._detachSubview(this.subview), (_a = this.subview) == null ? void 0 : _a.destroy(), this.subview = null, (_b = this._highlightView) == null ? void 0 : _b.destroy(), this._exportImageVersion = -1;
  }
  viewChange() {
  }
  moveEnd() {
    this.requestUpdate();
  }
  highlight(e3, s) {
    if (!((Array.isArray(e3) ? e3[0] : V.isCollection(e3) ? e3.at(0) : e3) instanceof f))
      return e2();
    let a3 = [];
    return Array.isArray(e3) || V.isCollection(e3) ? a3 = e3.map((e4) => e4.clone()) : e3 instanceof f && (a3 = [e3.clone()]), this._highlightGraphics.addMany(a3), e2(() => this._highlightGraphics.removeMany(a3));
  }
  async doRefresh() {
    this.requestUpdate();
  }
  isUpdating() {
    var _a, _b;
    const e3 = !this.subview || this.subview.updating || !!((_a = this._highlightView) == null ? void 0 : _a.updating);
    return has("esri-2d-log-updating") && console.log(`Updating ImageryLayerView2D (${this.layer.id}): ${e3}
-> subview ${!this.subview || this.subview.updating}
-> higlightView ${(_b = this._highlightView) == null ? void 0 : _b.updating}
`), e3;
  }
  _setSubView() {
    var _a, _b;
    if (!this.view)
      return;
    const e3 = (_a = this.layer.renderer) == null ? void 0 : _a.type;
    let i2 = "imagery";
    if ("vector-field" === e3 ? i2 = "imageryVF" : "flow" === e3 && (i2 = "flow"), this.subview) {
      const { type: e4 } = this.subview;
      if (e4 === i2)
        return this._attachSubview(this.subview), void ("flow" === e4 ? this.subview.redrawOrRefetch() : "imagery" === e4 && "lerc" === this.layer.format ? this.subview.redraw() : this.requestUpdate());
      this._detachSubview(this.subview), (_b = this.subview) == null ? void 0 : _b.destroy();
    }
    this.subview = "imagery" === i2 ? new d5({ layer: this.layer, view: this.view, timeExtent: this.timeExtent }) : "imageryVF" === i2 ? new g({ layer: this.layer, view: this.view, timeExtent: this.timeExtent }) : new d3({ layer: this.layer, layerView: this }), this._attachSubview(this.subview), this.requestUpdate();
  }
  _attachSubview(e3) {
    e3 && !e3.attached && (e3.attach(), e3.attached = true, this.container.addChildAt(e3.container, 0));
  }
  _detachSubview(e3) {
    (e3 == null ? void 0 : e3.attached) && (this.container.removeChild(e3.container), e3.detach(), e3.attached = false);
  }
};
e([y()], v2.prototype, "pixelData", null), e([y()], v2.prototype, "subview", void 0), v2 = e([a("esri.views.2d.layers.ImageryLayerView2D")], v2);
var b2 = v2;
export {
  b2 as default
};
//# sourceMappingURL=ImageryLayerView2D-AERTJ5CR.js.map
