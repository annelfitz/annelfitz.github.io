import {
  InteractiveContainer,
  connectInteractive,
  disconnectInteractive,
  updateHostInteraction
} from "./chunk-PLSR7DZH.js";
import {
  componentFocusable,
  setComponentLoaded,
  setUpLoadableComponent
} from "./chunk-CMXPBFJM.js";
import {
  createObserver
} from "./chunk-QFS6X7MQ.js";
import {
  focusElementInGroup,
  toAriaBoolean
} from "./chunk-W3V5A544.js";
import "./chunk-3QIVUTMT.js";
import "./chunk-MDRC3XUT.js";
import {
  H,
  createEvent,
  h,
  proxyCustomElement
} from "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@esri/calcite-components/dist/components/calcite-chip-group.js
var chipGroupCss = ":host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{display:flex}.container{display:flex;inline-size:100%;flex-wrap:wrap;gap:0.5rem}::slotted(calcite-chip){flex:none}:host([scale=s]) .container{gap:0.25rem}:host([scale=l]) .container{gap:0.75rem}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}.interaction-container{display:contents}:host([hidden]){display:none}[hidden]{display:none}";
var ChipGroup = proxyCustomElement(class ChipGroup2 extends H {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.calciteChipGroupSelect = createEvent(this, "calciteChipGroupSelect", 6);
    this.mutationObserver = createObserver("mutation", () => this.updateItems());
    this.items = [];
    this.updateItems = (event) => {
      var _a;
      const target = event ? event.target : this.slotRefEl;
      this.items = target == null ? void 0 : target.assignedElements({ flatten: true }).filter((el) => el == null ? void 0 : el.matches("calcite-chip"));
      (_a = this.items) == null ? void 0 : _a.forEach((el) => {
        el.interactive = true;
        el.scale = this.scale;
        el.selectionMode = this.selectionMode;
      });
      this.setSelectedItems(false);
    };
    this.setSelectedItems = (emit, elToMatch) => {
      var _a, _b;
      if (elToMatch) {
        (_a = this.items) == null ? void 0 : _a.forEach((el) => {
          const matchingEl = elToMatch === el;
          switch (this.selectionMode) {
            case "multiple":
              if (matchingEl) {
                el.selected = !el.selected;
              }
              break;
            case "single":
              el.selected = matchingEl ? !el.selected : false;
              break;
            case "single-persist":
              el.selected = !!matchingEl;
              break;
          }
        });
      }
      this.selectedItems = (_b = this.items) == null ? void 0 : _b.filter((el) => el.selected);
      if (emit) {
        this.calciteChipGroupSelect.emit();
      }
    };
    this.disabled = false;
    this.label = void 0;
    this.scale = "m";
    this.selectionMode = "none";
    this.selectedItems = [];
  }
  onSelectionModeChange() {
    this.updateItems();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  connectedCallback() {
    var _a;
    connectInteractive(this);
    (_a = this.mutationObserver) == null ? void 0 : _a.observe(this.el, { childList: true, subtree: true });
  }
  componentDidRender() {
    disconnectInteractive(this);
    updateHostInteraction(this);
  }
  componentDidLoad() {
    setComponentLoaded(this);
  }
  disconnectedCallback() {
    var _a;
    (_a = this.mutationObserver) == null ? void 0 : _a.disconnect();
  }
  async componentWillLoad() {
    setUpLoadableComponent(this);
  }
  //--------------------------------------------------------------------------
  //
  //  Event Listeners
  //
  //--------------------------------------------------------------------------
  calciteInternalChipKeyEventListener(event) {
    var _a;
    if (event.composedPath().includes(this.el)) {
      const interactiveItems = (_a = this.items) == null ? void 0 : _a.filter((el) => !el.disabled);
      switch (event.detail.key) {
        case "ArrowRight":
          focusElementInGroup(interactiveItems, event.detail.target, "next");
          break;
        case "ArrowLeft":
          focusElementInGroup(interactiveItems, event.detail.target, "previous");
          break;
        case "Home":
          focusElementInGroup(interactiveItems, event.detail.target, "first");
          break;
        case "End":
          focusElementInGroup(interactiveItems, event.detail.target, "last");
          break;
      }
    }
  }
  calciteChipCloseListener(event) {
    var _a, _b, _c, _d;
    const item = event.target;
    if ((_a = this.items) == null ? void 0 : _a.includes(item)) {
      if (((_b = this.items) == null ? void 0 : _b.indexOf(item)) > 0) {
        focusElementInGroup(this.items, item, "previous");
      } else if (((_c = this.items) == null ? void 0 : _c.indexOf(item)) === 0) {
        focusElementInGroup(this.items, item, "next");
      } else {
        focusElementInGroup(this.items, item, "first");
      }
    }
    this.items = (_d = this.items) == null ? void 0 : _d.filter((el) => el !== item);
  }
  calciteChipSelectListener(event) {
    if (event.composedPath().includes(this.el)) {
      this.setSelectedItems(true, event.target);
    }
  }
  // --------------------------------------------------------------------------
  //
  //  Public Methods
  //
  // --------------------------------------------------------------------------
  /**
   * Sets focus on the component's first focusable element.
   */
  async setFocus() {
    var _a;
    await componentFocusable(this);
    if (!this.disabled) {
      return (_a = this.selectedItems[0] || this.items[0]) == null ? void 0 : _a.setFocus();
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const role = this.selectionMode === "none" || this.selectionMode === "multiple" ? "group" : "radiogroup";
    const { disabled } = this;
    return h(InteractiveContainer, { disabled }, h("div", { "aria-disabled": toAriaBoolean(disabled), "aria-label": this.label, class: "container", role }, h("slot", { onSlotchange: this.updateItems, ref: (el) => this.slotRefEl = el })));
  }
  get el() {
    return this;
  }
  static get watchers() {
    return {
      "selectionMode": ["onSelectionModeChange"]
    };
  }
  static get style() {
    return chipGroupCss;
  }
}, [1, "calcite-chip-group", {
  "disabled": [516],
  "label": [1],
  "scale": [513],
  "selectionMode": [513, "selection-mode"],
  "selectedItems": [1040],
  "setFocus": [64]
}, [[0, "calciteInternalChipKeyEvent", "calciteInternalChipKeyEventListener"], [0, "calciteChipClose", "calciteChipCloseListener"], [0, "calciteChipSelect", "calciteChipSelectListener"]], {
  "selectionMode": ["onSelectionModeChange"]
}]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["calcite-chip-group"];
  components.forEach((tagName) => {
    switch (tagName) {
      case "calcite-chip-group":
        if (!customElements.get(tagName)) {
          customElements.define(tagName, ChipGroup);
        }
        break;
    }
  });
}
defineCustomElement$1();
var CalciteChipGroup = ChipGroup;
var defineCustomElement = defineCustomElement$1;
export {
  CalciteChipGroup,
  defineCustomElement
};
/*! Bundled license information:

@esri/calcite-components/dist/components/calcite-chip-group.js:
  (*!
   * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
   * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
   * v2.6.0
   *)
*/
//# sourceMappingURL=calcite-chip-group-OIP22DRX.js.map
