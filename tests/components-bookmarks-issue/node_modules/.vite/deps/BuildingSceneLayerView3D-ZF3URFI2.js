import {
  P as P2,
  d as d3,
  h,
  o as o3
} from "./chunk-5D55A3YR.js";
import {
  t2 as t3,
  u2 as u5
} from "./chunk-FU2UQ2HG.js";
import {
  At,
  n as n6,
  u as u4
} from "./chunk-UZQHEI2J.js";
import "./chunk-ZJXOOEWD.js";
import "./chunk-J3NVEAU3.js";
import "./chunk-O7GHSWFW.js";
import "./chunk-XPABJ7YF.js";
import "./chunk-Q2ACSSMW.js";
import "./chunk-J6WYS6OG.js";
import "./chunk-52QXS2S5.js";
import "./chunk-BZ24WJCW.js";
import "./chunk-ARNGZTAW.js";
import "./chunk-BY6CCMKY.js";
import "./chunk-7WLETYGH.js";
import "./chunk-UACJ4BQN.js";
import "./chunk-ZZWM6CET.js";
import "./chunk-CEFCTXUM.js";
import "./chunk-5N67JZXF.js";
import "./chunk-UC6QLXCR.js";
import "./chunk-PLT24NZO.js";
import "./chunk-WS5XOTML.js";
import "./chunk-ID25T22U.js";
import "./chunk-5SYJEI74.js";
import "./chunk-OOISODT4.js";
import "./chunk-YWPIIZFL.js";
import "./chunk-LARO5FBS.js";
import "./chunk-QFYJUFUK.js";
import "./chunk-V7IF2KNH.js";
import "./chunk-AZYURM7A.js";
import "./chunk-HBBLDSW6.js";
import "./chunk-YYI7TRI3.js";
import "./chunk-RQW2N53A.js";
import "./chunk-LHVWC4RW.js";
import "./chunk-GN2OLKIL.js";
import "./chunk-LMCIQOBX.js";
import "./chunk-4VVENLLF.js";
import "./chunk-VUHMQQ6M.js";
import "./chunk-6GQQIJM7.js";
import "./chunk-PAH4PVZY.js";
import "./chunk-5T7MASZO.js";
import "./chunk-5WKN6K5Z.js";
import "./chunk-WCBHO6BH.js";
import "./chunk-V7NVRGBC.js";
import "./chunk-KCZGCTYM.js";
import "./chunk-3YZBQBZ5.js";
import "./chunk-RFBA77K3.js";
import "./chunk-46T3D2EU.js";
import "./chunk-RYF27IO3.js";
import "./chunk-G3J4F5JD.js";
import "./chunk-OFEQM7IB.js";
import "./chunk-2GT6KC2O.js";
import "./chunk-R3RV65RE.js";
import "./chunk-5XOEX7AO.js";
import "./chunk-5MKTGTC4.js";
import "./chunk-7UDCRD5C.js";
import "./chunk-B3GKRGWX.js";
import "./chunk-FN7LLNVA.js";
import "./chunk-BR3PF5YD.js";
import "./chunk-NMKWX7AG.js";
import "./chunk-6OG4R2CR.js";
import "./chunk-XCK6RPVT.js";
import "./chunk-REXEABYB.js";
import "./chunk-VIRGWB3Z.js";
import "./chunk-QCUK7T7Y.js";
import "./chunk-2NDIVJST.js";
import "./chunk-SPYHZ6ZW.js";
import "./chunk-637XZX4A.js";
import "./chunk-PMFQ2A2V.js";
import "./chunk-MBLWM4C2.js";
import "./chunk-HHAESKQ6.js";
import "./chunk-5INQRMFY.js";
import "./chunk-XP3ABGGF.js";
import "./chunk-TACIE3AK.js";
import "./chunk-6LT23NJG.js";
import "./chunk-4FXZDEEP.js";
import "./chunk-KYKKN5I4.js";
import "./chunk-PWQTGVPO.js";
import "./chunk-4MJOJUFR.js";
import "./chunk-GDBENMUU.js";
import "./chunk-F7X3QPMY.js";
import {
  t as t2
} from "./chunk-BMTOVJNA.js";
import "./chunk-CMLG62TA.js";
import {
  n as n5
} from "./chunk-SPU25K6A.js";
import "./chunk-P257AUOX.js";
import "./chunk-X5WDIDKE.js";
import "./chunk-SWNHB34O.js";
import {
  u as u3
} from "./chunk-NGAYW4TW.js";
import "./chunk-2LPPSWTR.js";
import "./chunk-7E37N35O.js";
import "./chunk-BEXFYHUM.js";
import "./chunk-MDGE56IH.js";
import "./chunk-I6RS7YIS.js";
import "./chunk-M5UX4IRZ.js";
import "./chunk-BHOYA5LV.js";
import "./chunk-5T2QNVDA.js";
import "./chunk-SI6AVZBW.js";
import "./chunk-I7LDU4W6.js";
import "./chunk-SCRCLNT5.js";
import "./chunk-QJ6L2QIQ.js";
import "./chunk-VXM3PR7E.js";
import "./chunk-VE57JPH4.js";
import "./chunk-NT7TKMWH.js";
import "./chunk-BQGPMKNK.js";
import "./chunk-KWLN46JY.js";
import "./chunk-7KNPDPFB.js";
import "./chunk-M6P775BS.js";
import "./chunk-J5F4VILS.js";
import "./chunk-KSBIR2KG.js";
import "./chunk-XVQGALI7.js";
import "./chunk-XFQIXBHG.js";
import "./chunk-MVSN2HAN.js";
import "./chunk-7A5N7G2Z.js";
import "./chunk-B4ZPBUH4.js";
import "./chunk-HHTLQ7O6.js";
import "./chunk-FIHLU3LF.js";
import "./chunk-PZEIVZJB.js";
import "./chunk-DXK65EP4.js";
import "./chunk-H6MCGW3O.js";
import "./chunk-OM7WUMCL.js";
import "./chunk-J54I3TB7.js";
import "./chunk-MDXZIVBP.js";
import "./chunk-7W5MWPC6.js";
import "./chunk-OE52KVBM.js";
import "./chunk-L577YNYZ.js";
import "./chunk-GL5TSVQL.js";
import "./chunk-FD7NY4JS.js";
import "./chunk-ZQTY6DQZ.js";
import "./chunk-ITCKUEVD.js";
import "./chunk-TYYN3C37.js";
import "./chunk-OBABKQ6S.js";
import "./chunk-4GGEQMYI.js";
import "./chunk-A47N2JLN.js";
import "./chunk-GQP7H7SM.js";
import "./chunk-ZPC74XHC.js";
import "./chunk-IVGJRGD2.js";
import "./chunk-JA2AO4PC.js";
import "./chunk-MTLWPXQD.js";
import "./chunk-ZEMG7GKC.js";
import "./chunk-ECIXBYOQ.js";
import "./chunk-5MQ4HAUX.js";
import "./chunk-XIWETS2Q.js";
import "./chunk-FOCTPJDR.js";
import "./chunk-2DATALUO.js";
import "./chunk-QFKFOAJ6.js";
import "./chunk-LOPMLCHC.js";
import "./chunk-JIR2YP6A.js";
import "./chunk-LANUNBDP.js";
import "./chunk-JBF6CULO.js";
import "./chunk-DRCNNCTI.js";
import "./chunk-MKOOEINB.js";
import "./chunk-JKOHBDRD.js";
import "./chunk-MDSRD3WV.js";
import "./chunk-3DFMDDMO.js";
import "./chunk-4BCSYJOQ.js";
import "./chunk-GMUCR2DJ.js";
import "./chunk-HBRJJENW.js";
import "./chunk-VHY5K2VE.js";
import "./chunk-6ENXMQPD.js";
import "./chunk-FV43HSGW.js";
import "./chunk-ZR7OV2EH.js";
import "./chunk-U76EZJUZ.js";
import "./chunk-MEEG7XMI.js";
import "./chunk-LJULTBAY.js";
import "./chunk-FD4DXBZA.js";
import "./chunk-54XXLVAD.js";
import "./chunk-KO7QNSNZ.js";
import "./chunk-MUMDKJ7Y.js";
import "./chunk-ZFR4QMZ5.js";
import "./chunk-R2MAAYED.js";
import "./chunk-B7M5G3J5.js";
import "./chunk-7QHIE4SQ.js";
import "./chunk-6MGK5WBT.js";
import "./chunk-HSOVRETF.js";
import "./chunk-CPZW2LMK.js";
import "./chunk-QR7J3YDY.js";
import "./chunk-GO2OGJDG.js";
import "./chunk-UYMREM3D.js";
import "./chunk-4OVQYUQW.js";
import "./chunk-BYRUCUF7.js";
import "./chunk-CXP4BHPO.js";
import "./chunk-YQQSFFN3.js";
import "./chunk-IJD65EMQ.js";
import "./chunk-4YGBWYMD.js";
import "./chunk-ZPU7GNG4.js";
import "./chunk-TNR6E67I.js";
import "./chunk-7O3VD45U.js";
import "./chunk-QREUCRQ4.js";
import "./chunk-YK3UMVCY.js";
import "./chunk-GB4RVOXH.js";
import "./chunk-JTUYA5FE.js";
import "./chunk-UNTQATE2.js";
import "./chunk-5YY6NZNY.js";
import "./chunk-5IT6RVBX.js";
import "./chunk-MTQHYT7Y.js";
import "./chunk-JCP47SOM.js";
import "./chunk-CXCB57TE.js";
import "./chunk-IWO6JXL2.js";
import "./chunk-AVR3LWTZ.js";
import "./chunk-YUWVLORR.js";
import "./chunk-7MYYCSEB.js";
import "./chunk-ESK2YRQM.js";
import "./chunk-3GY64OYE.js";
import "./chunk-QIEXJLRX.js";
import "./chunk-UNTPHF5R.js";
import "./chunk-YJFPDMSR.js";
import "./chunk-FFG7BDAP.js";
import "./chunk-ECTYMEUP.js";
import "./chunk-I4SHZ6P5.js";
import "./chunk-PGOAFABD.js";
import "./chunk-63NZBHDP.js";
import "./chunk-BNDDKY53.js";
import "./chunk-BECEVYQR.js";
import "./chunk-S243OWEZ.js";
import {
  I
} from "./chunk-QYDOVVH7.js";
import "./chunk-YSXT2SWC.js";
import "./chunk-DGRFM5OL.js";
import "./chunk-AOAT6HYL.js";
import "./chunk-YH3SFFF7.js";
import "./chunk-JBU54P54.js";
import "./chunk-UQEUYEWU.js";
import "./chunk-5LIYYE75.js";
import "./chunk-IWZSAF74.js";
import "./chunk-FMS3CZY7.js";
import "./chunk-F2EHRKUX.js";
import "./chunk-UWZ4CRJK.js";
import "./chunk-2636VFVY.js";
import "./chunk-252ISA6Z.js";
import "./chunk-TLTAGTBA.js";
import "./chunk-2QPP5AGU.js";
import "./chunk-2C26DRKK.js";
import "./chunk-M4RFJU4F.js";
import "./chunk-WVKWBQ7C.js";
import "./chunk-RK2U53CD.js";
import "./chunk-YPY24RRU.js";
import "./chunk-O7RKI2QW.js";
import "./chunk-BMB27ANS.js";
import "./chunk-3FOBZIUS.js";
import "./chunk-VVAVEXL2.js";
import "./chunk-BKBB7AOV.js";
import "./chunk-H7T5AB2S.js";
import "./chunk-HXYRQKMI.js";
import "./chunk-WKVHVZW2.js";
import "./chunk-7KK6L4F6.js";
import "./chunk-N7746YEI.js";
import "./chunk-DH7BG2VH.js";
import "./chunk-KSZESDGM.js";
import "./chunk-CHJMCUAV.js";
import "./chunk-5P74D2TG.js";
import "./chunk-33LWZO2E.js";
import "./chunk-YT66FIGM.js";
import "./chunk-VIKID44H.js";
import "./chunk-3IDXRFXE.js";
import "./chunk-TLU6YG3S.js";
import "./chunk-RLZYC2LS.js";
import "./chunk-WTKF56EK.js";
import "./chunk-3RIV3ECV.js";
import "./chunk-WEER6QME.js";
import "./chunk-IYU3Q2BA.js";
import "./chunk-L52HB3KV.js";
import "./chunk-TXLJQAAN.js";
import "./chunk-XJICXW6N.js";
import "./chunk-YF5E2R37.js";
import "./chunk-R4SGP2EA.js";
import "./chunk-IRL6OOVK.js";
import "./chunk-3AIILHI5.js";
import "./chunk-QJRGTKPN.js";
import "./chunk-VIH3KDZO.js";
import "./chunk-LA365FE7.js";
import "./chunk-ONKWNPIN.js";
import "./chunk-JKLFCJPR.js";
import "./chunk-2AZYPUKO.js";
import "./chunk-5Y24AKE7.js";
import "./chunk-UYDBB2JF.js";
import {
  n as n4,
  p,
  u as u2
} from "./chunk-J6T3FJLS.js";
import "./chunk-67A4RFMD.js";
import "./chunk-A64EK7QM.js";
import "./chunk-SA77Z3WI.js";
import {
  L as L2,
  X,
  Z
} from "./chunk-676ANOCK.js";
import {
  f as f2
} from "./chunk-6K2UNRXT.js";
import "./chunk-WTKV7W5Z.js";
import "./chunk-D4Y7YHG7.js";
import "./chunk-AL5NKCU5.js";
import "./chunk-6MBDB46F.js";
import "./chunk-D56W4LPT.js";
import "./chunk-BKOYOJBG.js";
import "./chunk-7JR6S3WL.js";
import {
  n as n3
} from "./chunk-CSSLIU64.js";
import "./chunk-CJNDQ2LH.js";
import "./chunk-B4E4X2TN.js";
import "./chunk-HS6YI5DU.js";
import "./chunk-CDBOQCLE.js";
import "./chunk-RSRUEM5U.js";
import "./chunk-HFJMEXIX.js";
import "./chunk-VYSGSKHB.js";
import "./chunk-DGJJJ2DD.js";
import "./chunk-UAFQMHYI.js";
import "./chunk-IDPLBNJX.js";
import "./chunk-ZHAZR5C3.js";
import "./chunk-P4MNTMCZ.js";
import "./chunk-EWD7I5UU.js";
import "./chunk-4UEJR4VO.js";
import "./chunk-BUEJAM23.js";
import "./chunk-LQR76D5M.js";
import "./chunk-2CWW7O7M.js";
import "./chunk-Q5NCQLSM.js";
import "./chunk-FLBJ53KN.js";
import "./chunk-YH2IYJYF.js";
import "./chunk-BSPKLAHD.js";
import "./chunk-GGHKH3LP.js";
import "./chunk-VS6AHHIY.js";
import "./chunk-5DH2QVPW.js";
import "./chunk-GPWQGIYV.js";
import "./chunk-WZJNHZ6H.js";
import "./chunk-XMYPMIYH.js";
import "./chunk-FQLGRQKL.js";
import "./chunk-DIT542IP.js";
import "./chunk-HFYOMP47.js";
import "./chunk-TOKUWZQG.js";
import "./chunk-JNGJWHJD.js";
import "./chunk-QMPD4WXY.js";
import "./chunk-OF4YIONV.js";
import "./chunk-YBPOKK6D.js";
import "./chunk-AHEDDTVZ.js";
import "./chunk-Z4ALW6LX.js";
import "./chunk-H4O73SDK.js";
import "./chunk-UVXSAP7V.js";
import "./chunk-IZ3VJLQ6.js";
import {
  d as d2
} from "./chunk-DRC4XSYG.js";
import "./chunk-IHQNQQJC.js";
import "./chunk-4IKPTZ53.js";
import "./chunk-DXMBDX2I.js";
import "./chunk-TUVEYM7U.js";
import "./chunk-5S637BGW.js";
import "./chunk-BFOJPIF7.js";
import "./chunk-7UUNSIMA.js";
import "./chunk-GMRQGGML.js";
import "./chunk-BYK4ZOU2.js";
import "./chunk-OHYLFFUW.js";
import "./chunk-XW3FDKYP.js";
import "./chunk-Y7RXGLGH.js";
import "./chunk-3JC3OUNW.js";
import "./chunk-RO3CTAP7.js";
import "./chunk-GKMVTGGM.js";
import "./chunk-XGTCDM4C.js";
import "./chunk-QNG4TY7L.js";
import "./chunk-RW5QMWE6.js";
import "./chunk-LGMX4E7L.js";
import "./chunk-2QCWKZIQ.js";
import "./chunk-2NPNEA6N.js";
import "./chunk-U34ZXOJT.js";
import "./chunk-OKRW5W44.js";
import "./chunk-RGAA5Z76.js";
import "./chunk-Q6RZBEZ6.js";
import "./chunk-PC66NY33.js";
import "./chunk-YY2VB3AE.js";
import "./chunk-VEYMN5N3.js";
import "./chunk-H6NTWZSO.js";
import "./chunk-BMT3OVAP.js";
import {
  b as b2
} from "./chunk-W5ALAOW2.js";
import "./chunk-FHDHOWK5.js";
import "./chunk-Y546C2O5.js";
import "./chunk-IYKBAIQE.js";
import "./chunk-BDRVHR2K.js";
import "./chunk-DVIGFJWY.js";
import "./chunk-LQBHIBXV.js";
import "./chunk-42DUJ2CX.js";
import "./chunk-B35SNV2V.js";
import "./chunk-Z2F5OKVA.js";
import "./chunk-UQA6M3KF.js";
import "./chunk-GLF3KRAL.js";
import "./chunk-ZLQTPFTL.js";
import "./chunk-WIVZ7SMV.js";
import "./chunk-O76UVYOO.js";
import "./chunk-QCMUK3QA.js";
import "./chunk-HZSGATFT.js";
import "./chunk-KNMQQRV7.js";
import "./chunk-N5GQOIDP.js";
import "./chunk-NFB6O77E.js";
import {
  t
} from "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-AKQ765JR.js";
import "./chunk-ERD6I7QP.js";
import "./chunk-QIT4M76C.js";
import "./chunk-EZL4LTMD.js";
import "./chunk-F3BQGS35.js";
import "./chunk-Z3NX5DTX.js";
import "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import "./chunk-LMO6NZJA.js";
import "./chunk-A5QTLE4Y.js";
import "./chunk-SCHTG6ZQ.js";
import "./chunk-YUUTEPX2.js";
import "./chunk-G7YFDDME.js";
import "./chunk-PCKG3UTS.js";
import "./chunk-3VMVD66K.js";
import "./chunk-OHE3HDFF.js";
import {
  f
} from "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-I2X6UR6L.js";
import "./chunk-CQFVWMFK.js";
import "./chunk-HV2SFSJW.js";
import "./chunk-7EQJLP2H.js";
import "./chunk-4ZLXDMI5.js";
import "./chunk-SBARCIDP.js";
import "./chunk-2SYXH2R7.js";
import "./chunk-7JNXJYRU.js";
import "./chunk-EMYOYGGK.js";
import "./chunk-6PMFOUWZ.js";
import "./chunk-3KPZ3BQR.js";
import "./chunk-5JYVZQZR.js";
import "./chunk-UUG4W2PI.js";
import "./chunk-WW22JHXA.js";
import "./chunk-ZAM62XN5.js";
import "./chunk-RKVEKQ5O.js";
import "./chunk-P7J4JFEH.js";
import "./chunk-G7FOE26O.js";
import "./chunk-USOPZ2Q6.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import {
  s as s3
} from "./chunk-QX66UTIR.js";
import "./chunk-TCRKKQAL.js";
import "./chunk-77YSHEUQ.js";
import "./chunk-JW7VBMHD.js";
import "./chunk-GLLRUDMY.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import {
  I2,
  Re,
  x as x2
} from "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-AKLOTDO2.js";
import "./chunk-6AQIVLDN.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-DVI5RM3W.js";
import "./chunk-LBXFRGMS.js";
import "./chunk-VTH4DAHQ.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-SLQA5YBV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import {
  n as n2
} from "./chunk-Z2PDA67N.js";
import {
  x
} from "./chunk-PWPXYWXV.js";
import "./chunk-545NO6M2.js";
import "./chunk-5LSHHVQ5.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  A,
  P,
  d
} from "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import {
  o as o2
} from "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a2
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  L,
  a,
  b,
  g,
  o,
  s as s2
} from "./chunk-JGDJR5EV.js";
import {
  e as e2,
  u
} from "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n,
  s
} from "./chunk-7RBRCL6S.js";
import {
  R
} from "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/views/3d/layers/BuildingSublayerView3D.js
var p2 = (p3, l2) => {
  let n8 = class extends n2(s3(o2.EventedMixin(p3))) {
    constructor(e3) {
      super(e3), this.sublayer = null, this.parent = null, this.view = null;
    }
    initialize() {
    }
    get suspended() {
      return !this.canResume();
    }
    get updating() {
      return !this.suspended && this.isUpdating();
    }
    get visible() {
      var _a;
      return !!((_a = this.sublayer) == null ? void 0 : _a.visible);
    }
    set visible(e3) {
      this._overrideIfSome("visible", e3);
    }
    get fullOpacity() {
      var _a, _b;
      const e3 = (e4) => null != e4 ? e4 : 1;
      return e3((_a = this.sublayer) == null ? void 0 : _a.opacity) * e3((_b = this.parent) == null ? void 0 : _b.fullOpacity);
    }
    canResume() {
      var _a, _b;
      return !((_a = this.parent) == null ? void 0 : _a.suspended) && ((_b = this.view) == null ? void 0 : _b.ready) && this.visible || false;
    }
    isUpdating() {
      return false;
    }
  };
  return e([y()], n8.prototype, "sublayer", void 0), e([y()], n8.prototype, "parent", void 0), e([y({ readOnly: true })], n8.prototype, "suspended", null), e([y({ type: Boolean, readOnly: true })], n8.prototype, "updating", null), e([y()], n8.prototype, "view", void 0), e([y()], n8.prototype, "visible", null), e([y()], n8.prototype, "fullOpacity", null), n8 = e([a2("esri.views.3d.layers.BuildingSublayerView3D")], n8), n8;
};

// node_modules/@arcgis/core/views/3d/layers/i3s/BuildingFilterUtil.js
var a3;
!function(e3) {
  e3[e3.Solid = 0] = "Solid", e3[e3.WireFrame = 1] = "WireFrame", e3[e3.XRay = 2] = "XRay";
}(a3 || (a3 = {}));
var l = 0.15;
var t4 = 0.5 * l;
function i(e3) {
  switch (e3.filterMode.type) {
    case "solid":
      return { mode: a3.Solid };
    case "wire-frame":
      return { mode: a3.WireFrame, edgeMaterial: f2(e3.filterMode.edges, {}) };
    case "x-ray":
      return { mode: a3.XRay };
  }
}
function c(e3, r) {
  if (null == r)
    return e3.color[3] = 0, e3.edgeMaterial = null, void (e3.pickable = false);
  switch (r.mode) {
    case a3.Solid:
      return;
    case a3.WireFrame:
      return e3.color[3] = 0, e3.edgeMaterial = r.edgeMaterial, void (e3.pickable = false);
    case a3.XRay:
      return e3.color[0] = 1, e3.color[1] = 1, e3.color[2] = 1, e3.color[3] *= l, e3.colorMixMode = n3.Replace, e3.castShadows = false, e3.pickable = false, void (e3.edgeMaterial = n7(e3.edgeMaterial));
  }
}
function n7(e3) {
  return null == e3 ? null : (d4.lastMaterial !== e3 && (d4.cachedMaterial = s4(e3), d4.lastMaterial = e3), d4.cachedMaterial);
}
function s4(r) {
  const o5 = t(r.color);
  return o5[3] *= t4, { ...r, color: o5 };
}
var d4 = { cachedMaterial: null, lastMaterial: null };

// node_modules/@arcgis/core/views/layers/BuildingComponentSublayerView.js
var o4 = class extends S {
  constructor() {
    super(...arguments), this.sublayer = null;
  }
  get updating() {
    return false;
  }
  get suspended() {
    return false;
  }
  get availableFields() {
    return [];
  }
  get filter() {
    return null;
  }
  set filter(r) {
    throw new Error("Not implemented");
  }
  queryFeatures(r, e3) {
    throw new Error("Not implemented");
  }
  queryObjectIds(r, e3) {
    throw new Error("Not implemented");
  }
  queryFeatureCount(r, e3) {
    throw new Error("Not implemented");
  }
  createQuery() {
    throw new Error("Not implemented");
  }
  queryExtent(r, e3) {
    throw new Error("Not implemented");
  }
  highlight(r) {
    throw new Error("Not implemented");
  }
};
e([y()], o4.prototype, "sublayer", void 0), e([y()], o4.prototype, "availableFields", null), e([y()], o4.prototype, "filter", null);

// node_modules/@arcgis/core/views/3d/layers/BuildingComponentSublayerView3D.js
var C = class extends u5(t3(At(p2(o4)))) {
  constructor() {
    super(...arguments), this.type = "building-component-sublayer-3d", this.layerView = null, this._elevationContext = "scene", this._isIntegratedMesh = false, this._supportsLabeling = false, this.requiredFields = [], this.progressiveLoadFactor = 1, this._queryEngine = null;
  }
  get i3slayer() {
    return this.sublayer;
  }
  get layerUid() {
    return this.sublayer.layer.uid;
  }
  get sublayerUid() {
    return this.sublayer.uid;
  }
  get layerId() {
    return this.sublayer.layer.id;
  }
  get sublayerId() {
    return this.sublayer.id;
  }
  get layerPopupEnabledAndHasTemplate() {
    var _a, _b;
    return this.sublayer.popupEnabled && u2(this.sublayer, (_b = (_a = this.layerView) == null ? void 0 : _a.view.popup) == null ? void 0 : _b.defaultPopupTemplateEnabled);
  }
  initialize() {
    this._updatingHandles.add(() => this.mergedFilter, (e4) => {
      null != e4 && P2.checkSupport(e4) ? null == this._i3sFilter ? this._i3sFilter = new P2({ viewFilter: e4, layerFieldsIndex: this.sublayer.fieldsIndex, loadAsyncModule: (e5) => this._loadAsyncModule(e5), addSqlFilter: (e5, r) => this.addSqlFilter(e5, r, this.logError), addTimeFilter: (e5, r) => this.addTimeFilter(e5, r) }) : this._i3sFilter.viewFilter = e4 : this._i3sFilter = u(this._i3sFilter);
    }, A), this._updatingHandles.add(() => [this.sublayer.renderer, this.definitionExpressionFields, this.filterExpressionFields, this.timeFilterFields], () => this._updateRequiredFields()), this._updatingHandles.add(() => this.sublayer.renderer, (e4) => this._rendererChange(e4), P);
    const e3 = () => this._filterChange();
    this._updatingHandles.add(() => this.parsedDefinitionExpression, e3), this._updatingHandles.add(() => {
      var _a;
      return (_a = this._i3sFilter) == null ? void 0 : _a.sortedObjectIds;
    }, e3), this._updatingHandles.add(() => {
      var _a;
      return (_a = this._i3sFilter) == null ? void 0 : _a.parsedWhereClause;
    }, e3), this._updatingHandles.add(() => this.getTimeFilterDependencies(), e3), this._updatingHandles.add(() => this.mergedFilter, e3), this._updatingHandles.add(() => {
      var _a, _b;
      return [(_a = this._i3sFilter) == null ? void 0 : _a.parsedGeometry, (_b = this.filter) == null ? void 0 : _b.spatialRelationship];
    }, () => this._geometryFilterChange()), this._updatingHandles.add(() => this.parsedFilterExpressions, () => this._updateSymbologyOverride(), P), this.addResolvingPromise(this._updateRequiredFields());
  }
  get lodFactor() {
    return this.view.qualitySettings.sceneService.object.lodFactor;
  }
  get parsedFilterExpressions() {
    return "Overview" !== this.sublayer.modelName && this.layerView ? this.layerView.filterExpressions.map(([e3, r]) => {
      let t5;
      try {
        t5 = x.create(e3, this.sublayer.fieldsIndex);
      } catch (n8) {
        return n.getLogger(this).error("Failed to parse filterExpression: " + n8), null;
      }
      if (!t5.isStandardized)
        return n.getLogger(this).error("filterExpression is using non standard function"), null;
      const s6 = [], l2 = t5.fieldNames;
      return L2(l2, this.sublayer.fields, { missingFields: s6 }), s6.length > 0 ? (n.getLogger(this).error(`filterExpression references unknown fields: ${s6.join(", ")}`), null) : [t5, r];
    }).filter((e3) => null != e3) : [];
  }
  get filter() {
    return this._get("filter");
  }
  set filter(e3) {
    this._set("filter", P2.checkSupport(e3) ? e3 : null);
  }
  isUpdating() {
    var _a;
    return super.isUpdating() || (((_a = this._i3sFilter) == null ? void 0 : _a.updating) ?? false);
  }
  _updateSymbologyOverride() {
    const e3 = this.parsedFilterExpressions;
    e3.length > 0 ? this._setSymbologyOverride((r, t5) => {
      for (const [s6, l2] of e3)
        try {
          if (s6.testFeature(r))
            return c(t5, l2);
        } catch (i2) {
          this.logError(i2);
        }
      return c(t5, null);
    }, this.filterExpressionFields) : this._setSymbologyOverride(null, null);
  }
  get filterExpressionFields() {
    return I2(this.sublayer.fieldsIndex, this.parsedFilterExpressions.reduce((e3, [r]) => e3.concat(r.fieldNames), new Array()));
  }
  get timeFilterFields() {
    const { timeExtent: e3 } = this, { timeInfo: r, fieldsIndex: t5 } = this.sublayer;
    if (null == e3 || null == r)
      return [];
    const { startField: i2, endField: s6 } = r;
    return I2(t5, [i2, s6]);
  }
  get availableFields() {
    const e3 = this.sublayer, r = e3.fieldsIndex;
    let t5 = this.requiredFields;
    if (e3.outFields || e3.layer.outFields) {
      const i2 = [...e3.outFields || [], ...e3.layer.outFields || []];
      t5 = [...x2(r, i2), ...t5];
    }
    return I2(r, t5);
  }
  _createLayerGraphic(e3) {
    return new f({ attributes: e3, layer: this.sublayer.layer, sourceLayer: this.sublayer });
  }
  canResume() {
    return super.canResume() && (!this._controller || this._controller.rootNodeVisible);
  }
  async fetchPopupFeaturesFromGraphics(e3, r) {
    const t5 = this._validateFetchPopupFeatures(r);
    if (t5)
      throw t5;
    if (0 === e3.length)
      return [];
    const s6 = [], a4 = [], o5 = null != this.sublayer.associatedLayer ? await this.sublayer.associatedLayer.load(r) : this.sublayer, u6 = x2(this.sublayer.fieldsIndex, await n4(o5, p(this.sublayer, r)));
    s2(r);
    const d5 = /* @__PURE__ */ new Set();
    for (const i2 of e3)
      Re(u6, i2, d5) ? a4.push(i2) : s6.push(i2);
    return 0 === a4.length ? s6 : (null != this.sublayer.associatedLayer && await this.sublayer.associatedLayer.load().catch(() => n.getLogger(this).warn("Failed to load associated feature layer. Displaying popup attributes from cached attributes.")), this.whenGraphicAttributes(a4, Array.from(d5)).catch((e4) => (a(e4), a4)).then((e4) => s6.concat(e4)));
  }
  async _updateRequiredFields() {
    const e3 = I2(this.sublayer.fieldsIndex, [...this.sublayer.renderer ? await this.sublayer.renderer.getRequiredFields(this.sublayer.fieldsIndex) : [], ...this.definitionExpressionFields, ...this.filterExpressionFields, ...this.timeFilterFields]);
    this._set("requiredFields", e3);
  }
  _validateFetchPopupFeatures(e3) {
    const { sublayer: r } = this, { popupEnabled: i2 } = r;
    return i2 ? p(r, e3) ? void 0 : new s("buildingscenelayerview3d:fetchPopupFeatures", "Layer does not define a popup template", { sublayer: r }) : new s("buildingscenelayerview3d:fetchPopupFeatures", "Popups are disabled", { sublayer: r });
  }
  getFilters() {
    var _a;
    const e3 = super.getFilters();
    return this.addSqlFilter(e3, this.parsedDefinitionExpression, this.logError), (_a = this._i3sFilter) == null ? void 0 : _a.addFilters(e3, this.view, this._controller.crsIndex, this._collection), e3;
  }
  createQuery() {
    const e3 = { outFields: ["*"], returnGeometry: false, outSpatialReference: this.view.spatialReference };
    return null != this.filter ? this.filter.createQuery(e3) : new b2(e3);
  }
  queryExtent(e3, r) {
    return this._ensureQueryEngine().executeQueryForExtent(this._ensureQuery(e3), r == null ? void 0 : r.signal);
  }
  queryFeatureCount(e3, r) {
    return this._ensureQueryEngine().executeQueryForCount(this._ensureQuery(e3), r == null ? void 0 : r.signal);
  }
  queryFeatures(e3, r) {
    return this._ensureQueryEngine().executeQuery(this._ensureQuery(e3), r == null ? void 0 : r.signal).then((e4) => {
      if (!(e4 == null ? void 0 : e4.features))
        return e4;
      const r2 = this.sublayer, t5 = r2.layer;
      for (const i2 of e4.features)
        i2.layer = t5, i2.sourceLayer = r2;
      return e4;
    });
  }
  queryObjectIds(e3, r) {
    return this._ensureQueryEngine().executeQueryForIds(this._ensureQuery(e3), r == null ? void 0 : r.signal);
  }
  _ensureQueryEngine() {
    return null == this._queryEngine && (this._queryEngine = this._createQueryEngine()), this._queryEngine;
  }
  _createQueryEngine() {
    const e3 = u4(this.view.spatialReference, this.view.renderSpatialReference, this._collection);
    return new d3({ layerView: this, priority: I.FEATURE_QUERY_ENGINE, spatialIndex: new h({ featureAdapter: new o3({ objectIdField: this.sublayer.objectIdField, attributeStorageInfo: this.sublayer.attributeStorageInfo, getFeatureExtent: e3 }), forAllFeatures: (e4, r) => this._forAllFeatures((r2, t5, i2) => e4({ id: r2, index: t5, meta: i2 }), r, n6.QUERYABLE), getFeatureExtent: e3, sourceSpatialReference: Z(this.sublayer), viewSpatialReference: this.view.spatialReference }) });
  }
  _ensureQuery(e3) {
    return this._addDefinitionExpressionToQuery(null == e3 ? this.createQuery() : b2.from(e3));
  }
};
e([y()], C.prototype, "i3slayer", null), e([y()], C.prototype, "layerView", void 0), e([y()], C.prototype, "lodFactor", null), e([y({ readOnly: true })], C.prototype, "parsedFilterExpressions", null), e([y({ type: d2 })], C.prototype, "filter", null), e([y()], C.prototype, "_i3sFilter", void 0), e([y({ type: [String], readOnly: true })], C.prototype, "filterExpressionFields", null), e([y({ type: [String], readOnly: true })], C.prototype, "timeFilterFields", null), e([y({ type: [String], readOnly: true })], C.prototype, "requiredFields", void 0), e([y({ type: [String], readOnly: true })], C.prototype, "availableFields", null), C = e([a2("esri.views.3d.layers.BuildingComponentSublayerView3D")], C);
var O = C;

// node_modules/@arcgis/core/views/layers/BuildingSceneLayerView.js
var s5 = class extends u3 {
  constructor(r) {
    super(r), this.layer = null, this.sublayerViews = null;
  }
  highlight(r) {
    throw new Error("Not implemented");
  }
};
e([y()], s5.prototype, "layer", void 0), e([y()], s5.prototype, "sublayerViews", void 0);

// node_modules/@arcgis/core/views/3d/layers/BuildingSceneLayerView3D.js
var C2 = p2(S);
var S2 = class extends n5(s5) {
  constructor(e3) {
    super(e3), this.type = "building-scene-3d", this.sublayerViews = new V(), this._abortController = new AbortController(), this._loadingComponents = 0, this._pendingWhenSublayerViews = /* @__PURE__ */ new Map(), this.ignoresMemoryFactor = false;
  }
  get filterExpression() {
    var _a;
    const e3 = this.layer.activeFilterId, r = null != e3 ? this.layer.filters.find((r2) => r2.id === e3) : null, s6 = null != r ? (_a = r.filterBlocks) == null ? void 0 : _a.find((e4) => "solid" === e4.filterMode.type) : null;
    return s6 ? s6.filterExpression : null;
  }
  get filterExpressions() {
    const e3 = this.layer.activeFilterId, r = null != e3 ? this.layer.filters.find((r2) => r2.id === e3) : null;
    return (r == null ? void 0 : r.filterBlocks) ? r.filterBlocks.toArray().map((e4) => [e4.filterExpression ?? "", i(e4)]) : [];
  }
  get updatingProgressValue() {
    const e3 = this.sublayerViews, r = this._loadingComponents + (e3 ? e3.length : 0);
    return e3.reduce((e4, r2) => e4 + r2.updatingProgress, 0) / r;
  }
  isUpdating() {
    return this._loadingComponents > 0 || this.sublayerViews && this.sublayerViews.some((e3) => e3.updating);
  }
  initialize() {
    X(this.layer.spatialReference, this.view.spatialReference, this.view.viewingMode), this._initializeSubLayerViews(this.layer.sublayers, this);
  }
  destroy() {
    this.sublayerViews && (this.sublayerViews.forEach((e3) => e3.destroy()), this.sublayerViews = null), this._abortController = e2(this._abortController);
  }
  _initializeSubLayerViews(e3, r) {
    const s6 = this, t5 = this.view;
    e3.forEach((e4) => {
      if (!e4.isEmpty)
        if ("building-group" === e4.type) {
          const s7 = new C2({ sublayer: e4, view: t5, parent: r });
          this._initializeSubLayerViews(e4.sublayers, s7);
        } else
          "mesh" === e4.geometryType && (this._loadingComponents++, e4.load({ signal: this._abortController.signal }).then(() => {
            const i2 = new O({ sublayer: e4, layerView: s6, view: t5, parent: r });
            this.sublayerViews.push(i2);
            const o5 = this._pendingWhenSublayerViews.get(e4);
            if (o5) {
              for (const e5 of o5)
                e5.resolve(i2);
              this._pendingWhenSublayerViews.delete(e4);
            }
            this.addHandles([d(() => i2.updating, () => this.notifyChange("updating"), A), d(() => i2.updatingProgress, () => this.notifyChange("updatingProgressValue"), A)]);
          }).catch((r2) => {
            b(r2) || n.getLogger(this).error(`Error while creating view for sublayer ${e4.id}
Layer: ${this.layer.url}
`, r2);
          }).then(() => {
            this._loadingComponents--, this.notifyChange("updating"), this.notifyChange("updatingProgressValue");
          }));
    });
  }
  getGraphicFromIntersectorTarget(e3) {
    for (const r of this.sublayerViews.items)
      if (r.sublayer.uid === e3.sublayerUid)
        return r.getGraphicFromIntersectorTarget(e3);
    return null;
  }
  async fetchPopupFeaturesFromGraphics(e3, r) {
    if (0 === e3.length)
      return [];
    const s6 = R(e3, (e4) => e4.sourceLayer), i2 = [];
    for (const [t5, n8] of s6) {
      const e4 = this._findComponent(t5);
      null != e4 && i2.push(e4.fetchPopupFeaturesFromGraphics(n8, r));
    }
    const o5 = await g(i2);
    return s2(r), o5.flat();
  }
  whenGraphicBounds(e3) {
    const r = this._findComponent(e3.sourceLayer);
    return null == r ? Promise.reject() : r.whenGraphicBounds(e3);
  }
  getAABBFromIntersectorTarget(e3) {
    for (const r of this.sublayerViews.items)
      if (r.sublayer.uid === e3.sublayerUid)
        return r.getAABBFromIntersectorTarget(e3);
    return null;
  }
  async whenSublayerView(e3) {
    const r = this._findComponent(e3);
    if (null != r)
      return r;
    const s6 = this._pendingWhenSublayerViews.get(e3), t5 = L();
    return s6 ? s6.push(t5) : this._pendingWhenSublayerViews.set(e3, [t5]), t5.promise;
  }
  _findComponent(e3) {
    return this.sublayerViews.find((r) => e3 === r.sublayer);
  }
  highlight(e3) {
    e3 instanceof f ? e3 = [e3] : e3 instanceof V && (e3 = e3.toArray());
    const s6 = [];
    if (Array.isArray(e3) && e3.length > 0 && e3[0] instanceof f) {
      const r = e3, t5 = /* @__PURE__ */ new Map();
      for (const e4 of r) {
        let r2 = t5.get(e4.sourceLayer);
        null == r2 && (r2 = [], t5.set(e4.sourceLayer, r2)), r2.push(e4);
      }
      this.sublayerViews.forEach((e4) => {
        const r2 = t5.get(e4.sublayer);
        r2 && s6.push(e4.highlight(r2));
      });
    }
    return o(s6);
  }
  get usedMemory() {
    return this.sublayerViews.reduce((e3, r) => e3 + r.usedMemory, 0);
  }
  get unloadedMemory() {
    return this.sublayerViews.reduce((e3, r) => e3 + r.unloadedMemory, 0);
  }
};
e([y()], S2.prototype, "sublayerViews", void 0), e([y({ readOnly: true })], S2.prototype, "filterExpression", null), e([y({ readOnly: true })], S2.prototype, "filterExpressions", null), e([y(t2)], S2.prototype, "updatingProgress", void 0), e([y({ readOnly: true, dependsOn: [] })], S2.prototype, "updatingProgressValue", null), S2 = e([a2("esri.views.3d.layers.BuildingSceneLayerView3D")], S2);
var B = S2;
export {
  B as default
};
//# sourceMappingURL=BuildingSceneLayerView3D-ZF3URFI2.js.map
