import {
  m as m4
} from "./chunk-UXMZQA2H.js";
import "./chunk-V2LOXBCS.js";
import {
  u as u2
} from "./chunk-NGAYW4TW.js";
import {
  f as f2
} from "./chunk-HSRJRAFC.js";
import "./chunk-I3GWXP7X.js";
import "./chunk-QYYSPD2Q.js";
import "./chunk-K3DEHPDR.js";
import "./chunk-I6RS7YIS.js";
import {
  mt
} from "./chunk-FZI7RNDL.js";
import "./chunk-BSYULFZQ.js";
import "./chunk-YGP7UFWC.js";
import "./chunk-5IHJU3SQ.js";
import "./chunk-ES7G4AF5.js";
import "./chunk-QXRPUAVL.js";
import "./chunk-M5UX4IRZ.js";
import {
  h2 as h3,
  n2 as n3
} from "./chunk-KN52PCW4.js";
import "./chunk-SFKZ25SS.js";
import "./chunk-NCZU5DB4.js";
import "./chunk-SMDSNUU2.js";
import "./chunk-XTY645DH.js";
import "./chunk-UIOX7MPV.js";
import {
  E
} from "./chunk-HRDKP7QO.js";
import "./chunk-4UOHLZKX.js";
import {
  s as s4
} from "./chunk-VJ2I4VSQ.js";
import {
  e as e4
} from "./chunk-MCZ4QOSQ.js";
import "./chunk-6XTKBOD7.js";
import "./chunk-IUY6HBLC.js";
import {
  o as o4
} from "./chunk-BHOYA5LV.js";
import "./chunk-6RR3WN7W.js";
import "./chunk-TXCVD3YI.js";
import "./chunk-SCRCLNT5.js";
import {
  m as m3
} from "./chunk-PYZXYYZX.js";
import {
  j
} from "./chunk-ALYZBARC.js";
import "./chunk-PGADGS3I.js";
import "./chunk-7A5N7G2Z.js";
import "./chunk-MEEG7XMI.js";
import "./chunk-LJULTBAY.js";
import "./chunk-YKIGDW5O.js";
import "./chunk-7FQYGAVT.js";
import "./chunk-QO4PGON2.js";
import "./chunk-QRQWG4D3.js";
import {
  m,
  r as r3
} from "./chunk-5JXZHN2A.js";
import "./chunk-KTQIY334.js";
import "./chunk-QWREIIJ5.js";
import "./chunk-6ZDDHEYR.js";
import "./chunk-YQQSFFN3.js";
import "./chunk-32X2FZ3S.js";
import "./chunk-4IJED6JM.js";
import "./chunk-LGIO6OCK.js";
import "./chunk-C5EJV3NW.js";
import "./chunk-XXIDOBRO.js";
import "./chunk-JL4LXZGM.js";
import "./chunk-O556EBAK.js";
import "./chunk-IJD65EMQ.js";
import {
  h as h2
} from "./chunk-4YGBWYMD.js";
import "./chunk-ZPU7GNG4.js";
import "./chunk-TNR6E67I.js";
import "./chunk-7O3VD45U.js";
import "./chunk-QREUCRQ4.js";
import "./chunk-YK3UMVCY.js";
import "./chunk-IQFWVTUJ.js";
import {
  t
} from "./chunk-GB4RVOXH.js";
import {
  e2 as e3,
  m as m2
} from "./chunk-JTUYA5FE.js";
import "./chunk-UNTQATE2.js";
import "./chunk-5YY6NZNY.js";
import "./chunk-DCBZOZ54.js";
import "./chunk-5IT6RVBX.js";
import "./chunk-N4HNOQVJ.js";
import "./chunk-MTQHYT7Y.js";
import "./chunk-JCP47SOM.js";
import "./chunk-CXCB57TE.js";
import {
  d as d2
} from "./chunk-IWO6JXL2.js";
import "./chunk-AVR3LWTZ.js";
import {
  r as r4
} from "./chunk-YUWVLORR.js";
import "./chunk-FFG7BDAP.js";
import "./chunk-I4SHZ6P5.js";
import "./chunk-DGRFM5OL.js";
import "./chunk-AOAT6HYL.js";
import "./chunk-JBU54P54.js";
import "./chunk-5LIYYE75.js";
import "./chunk-252ISA6Z.js";
import "./chunk-TLTAGTBA.js";
import "./chunk-2QPP5AGU.js";
import "./chunk-2C26DRKK.js";
import "./chunk-M4RFJU4F.js";
import "./chunk-VBLASJK5.js";
import {
  D,
  F
} from "./chunk-WKVHVZW2.js";
import "./chunk-VIKID44H.js";
import "./chunk-RLZYC2LS.js";
import "./chunk-TXLJQAAN.js";
import {
  o as o3
} from "./chunk-3AIILHI5.js";
import "./chunk-JKLFCJPR.js";
import "./chunk-7JR6S3WL.js";
import "./chunk-P4MNTMCZ.js";
import "./chunk-BSPKLAHD.js";
import "./chunk-VS6AHHIY.js";
import "./chunk-TUVEYM7U.js";
import "./chunk-5S637BGW.js";
import "./chunk-BFOJPIF7.js";
import "./chunk-Y7RXGLGH.js";
import "./chunk-3JC3OUNW.js";
import "./chunk-RO3CTAP7.js";
import "./chunk-GKMVTGGM.js";
import "./chunk-XGTCDM4C.js";
import "./chunk-QNG4TY7L.js";
import "./chunk-RW5QMWE6.js";
import "./chunk-LGMX4E7L.js";
import "./chunk-OKRW5W44.js";
import "./chunk-Q6RZBEZ6.js";
import "./chunk-PC66NY33.js";
import "./chunk-YY2VB3AE.js";
import "./chunk-VEYMN5N3.js";
import "./chunk-H6NTWZSO.js";
import "./chunk-BMT3OVAP.js";
import "./chunk-W5ALAOW2.js";
import "./chunk-FHDHOWK5.js";
import "./chunk-Y546C2O5.js";
import "./chunk-IYKBAIQE.js";
import "./chunk-BDRVHR2K.js";
import "./chunk-DVIGFJWY.js";
import {
  n as n2
} from "./chunk-ZLQTPFTL.js";
import {
  M,
  f,
  h,
  i,
  o as o2
} from "./chunk-HZSGATFT.js";
import {
  e as e2
} from "./chunk-NFB6O77E.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-ERD6I7QP.js";
import "./chunk-Z3NX5DTX.js";
import "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import "./chunk-LMO6NZJA.js";
import "./chunk-A5QTLE4Y.js";
import "./chunk-SCHTG6ZQ.js";
import {
  L
} from "./chunk-G7YFDDME.js";
import "./chunk-PCKG3UTS.js";
import "./chunk-3VMVD66K.js";
import "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-I2X6UR6L.js";
import "./chunk-5JYVZQZR.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-JW7VBMHD.js";
import "./chunk-GLLRUDMY.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import {
  c
} from "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import {
  u
} from "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-545NO6M2.js";
import "./chunk-5LSHHVQ5.js";
import {
  s as s3,
  w,
  x
} from "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import {
  s2
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  P,
  d,
  p,
  v
} from "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a,
  r2
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  b,
  o3 as o
} from "./chunk-JGDJR5EV.js";
import {
  r
} from "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n,
  s
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/Overlay.js
var v2 = e2();
var _ = { none: d2.None, loop: d2.Loop, oscillate: d2.Oscillate };
function V2(e5) {
  return e5 ? { ...e5, playAnimation: e5.playing, repeatType: e5.repeatType ? _[e5.repeatType] : void 0 } : {};
}
var j2 = class extends s4 {
  constructor(i2) {
    super(), this.elementView = i2, this.isWrapAround = false, this.perspectiveTransform = n2(), this._playHandle = null, this._vertices = new Float32Array(20), this._handles = [], this._handles.push(d(() => this.elementView.element.opacity, (e5) => this.opacity = e5, P), d(() => [this.elementView.coords], () => {
      this.requestRender();
    }, P), d(() => ["animationOptions" in this.elementView.element && this.elementView.element.animationOptions], () => {
      var _a;
      (_a = this._playHandle) == null ? void 0 : _a.remove(), this.texture = r(this.texture), this.requestRender();
    }, P), p(() => this.elementView.element.loaded, () => {
      const e5 = this.elementView.element;
      this.ready(), "video" === e5.type && null != e5.content && this._handles.push(o(e5.content, "play", () => this.requestRender()));
    }, P)), i2.element.load().catch((t2) => {
      n.getLogger("esri.views.2d.layers.MediaLayerView2D").error(new s("element-load-error", "Element cannot be displayed", { element: i2, error: t2 }));
    });
  }
  getMesh(e5) {
    throw new Error("Method not implemented.");
  }
  destroy() {
    var _a;
    (_a = this._playHandle) == null ? void 0 : _a.remove(), this._handles.forEach((e5) => e5.remove()), this.texture = r(this.texture);
  }
  get dvsMat3() {
    return this.parent.dvsMat3;
  }
  beforeRender(e5) {
    const { context: t2 } = e5, r5 = this.elementView.element.content;
    if (null != r5) {
      const e6 = r5 instanceof HTMLImageElement, s5 = r5 instanceof HTMLVideoElement, i2 = e6 ? r5.naturalWidth : s5 ? r5.videoWidth : r5.width, o5 = e6 ? r5.naturalHeight : s5 ? r5.videoHeight : r5.height;
      if (this._updatePerspectiveTransform(i2, o5), this.texture)
        s5 && !r5.paused && (this.texture.setData(r5), this.requestRender(), this.texture.generateMipmap());
      else {
        const e7 = new e3();
        if (e7.wrapMode = D.CLAMP_TO_EDGE, e7.preMultiplyAlpha = true, e7.width = i2, e7.height = o5, "getFrame" in r5) {
          const s6 = (r6) => {
            this.texture ? this.texture.setData(r6) : this.texture = new m2(t2, e7, r6), this.requestRender();
          };
          "animationOptions" in this.elementView.element && (this._playHandle = f2(r5, V2(this.elementView.element.animationOptions), null, s6));
        } else
          this.texture = new m2(t2, e7, r5);
        this.texture.generateMipmap(), s5 && !r5.paused && this.requestRender();
      }
    }
    super.beforeRender(e5);
  }
  _createTransforms() {
    return null;
  }
  updateDrawCoords(e5, t2) {
    const r5 = this.elementView.coords;
    if (null == r5)
      return;
    const [s5, i2, o5, n4] = r5.rings[0], a2 = this._vertices, { x: l, y: m5 } = e5, h4 = 0 !== t2;
    h4 ? a2.set([i2[0] - l, i2[1] - m5, s5[0] - l, s5[1] - m5, o5[0] - l, o5[1] - m5, n4[0] - l, n4[1] - m5, n4[0] - l, n4[1] - m5, i2[0] + t2 - l, i2[1] - m5, i2[0] + t2 - l, i2[1] - m5, s5[0] + t2 - l, s5[1] - m5, o5[0] + t2 - l, o5[1] - m5, n4[0] + t2 - l, n4[1] - m5]) : a2.set([i2[0] - l, i2[1] - m5, s5[0] - l, s5[1] - m5, o5[0] - l, o5[1] - m5, n4[0] - l, n4[1] - m5]), this.isWrapAround = h4;
  }
  getVAO(e5, t2, r5) {
    if (null == this.elementView.coords)
      return null;
    const s5 = this._vertices;
    if (this._vao)
      this._geometryVbo.setData(s5);
    else {
      this._geometryVbo = h2.createVertex(e5, F.DYNAMIC_DRAW, s5);
      const i2 = h2.createVertex(e5, F.STATIC_DRAW, new Uint16Array([0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1]));
      this._vao = new o4(e5, r5, t2, { geometry: this._geometryVbo, tex: i2 });
    }
    return this._vao;
  }
  _updatePerspectiveTransform(e5, t2) {
    const r5 = this._vertices;
    j(v2, [0, 0, e5, 0, 0, t2, e5, t2], [r5[0], r5[1], r5[4], r5[5], r5[2], r5[3], r5[6], r5[7]]), o3(this.perspectiveTransform, v2[6] / v2[8] * e5, v2[7] / v2[8] * t2);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/OverlayContainer.js
var u3 = class extends n3 {
  constructor() {
    super(...arguments), this._localOrigin = c(0, 0), this._viewStateId = -1, this._dvsMat3 = e4();
  }
  get dvsMat3() {
    return this._dvsMat3;
  }
  beforeRender(t2) {
    this._updateMatrices(t2), this._updateOverlays(t2, this.children);
    for (const e5 of this.children)
      e5.beforeRender(t2);
  }
  prepareRenderPasses(t2) {
    const e5 = t2.registerRenderPass({ name: "overlay", brushes: [h3.overlay], target: () => this.children, drawPhase: E.MAP });
    return [...super.prepareRenderPasses(t2), e5];
  }
  _updateMatrices(t2) {
    const { state: a2 } = t2, { id: p2, size: m5, pixelRatio: d3, resolution: f3, rotation: h4, viewpoint: u4, displayMat3: M2 } = a2;
    if (this._viewStateId === p2)
      return;
    const v4 = Math.PI / 180 * h4, g = d3 * m5[0], _3 = d3 * m5[1], { x: w3, y: b3 } = u4.targetGeometry, y2 = L(w3, a2.spatialReference);
    this._localOrigin.x = y2, this._localOrigin.y = b3;
    const j3 = f3 * g, x2 = f3 * _3, R2 = o2(this._dvsMat3);
    i(R2, R2, M2), M(R2, R2, t(g / 2, _3 / 2)), f(R2, R2, r4(g / j3, -_3 / x2, 1)), h(R2, R2, -v4), this._viewStateId = p2;
  }
  _updateOverlays(t2, e5) {
    const { state: r5 } = t2, { rotation: s5, spatialReference: o5, worldScreenWidth: i2, size: a2, viewpoint: n4 } = r5, l = this._localOrigin;
    let c2 = 0;
    const d3 = s2(o5);
    if (d3 && o5.isWrappable) {
      const t3 = a2[0], p2 = a2[1], f3 = 180 / Math.PI * s5, h4 = Math.abs(Math.cos(f3)), u4 = Math.abs(Math.sin(f3)), M2 = Math.round(t3 * h4 + p2 * u4), [v4, g] = d3.valid, _3 = mt(o5), { x: w3, y: b3 } = n4.targetGeometry, y2 = [w3, b3], j3 = [0, 0];
      r5.toScreen(j3, y2);
      const x2 = [0, 0];
      let R2;
      R2 = M2 > i2 ? 0.5 * i2 : 0.5 * M2;
      const P2 = Math.floor((w3 + 0.5 * _3) / _3), O = v4 + P2 * _3, C = g + P2 * _3, I = [j3[0] + R2, 0];
      r5.toMap(x2, I), x2[0] > C && (c2 = _3), I[0] = j3[0] - R2, r5.toMap(x2, I), x2[0] < O && (c2 = -_3);
      for (const r6 of e5) {
        const t4 = r6.elementView.bounds;
        if (null == t4)
          continue;
        const [e6, , s6] = t4;
        e6 < v4 && s6 > v4 ? r6.updateDrawCoords(l, _3) : s6 > g && e6 < g ? r6.updateDrawCoords(l, -_3) : r6.updateDrawCoords(l, c2);
      }
    } else
      for (const p2 of e5)
        p2.updateDrawCoords(l, c2);
  }
};

// node_modules/@arcgis/core/views/2d/layers/MediaLayerView2D.js
var b2 = class extends m4(u2) {
  constructor() {
    super(...arguments), this._overlayContainer = null, this._fetchQueue = null, this._tileStrategy = null, this._elementReferences = /* @__PURE__ */ new Map(), this._debugGraphicsView = null, this.layer = null, this.elements = new V();
  }
  attach() {
    this.addAttachHandles([v(() => this.layer.effectiveSource, "refresh", () => {
      this._tileStrategy.refresh((e5) => this._updateTile(e5)), this.requestUpdate();
    }), v(() => this.layer.effectiveSource, "change", ({ element: e5 }) => this._elementUpdateHandler(e5))]), this._overlayContainer = new u3(), this.container.addChild(this._overlayContainer), this._fetchQueue = new m({ tileInfoView: this.view.featuresTilingScheme, concurrency: 10, process: (e5, t2) => this._queryElements(e5, t2) }), this._tileStrategy = new r3({ cachePolicy: "purge", resampling: true, acquireTile: (e5) => this._acquireTile(e5), releaseTile: (e5) => this._releaseTile(e5), tileInfoView: this.view.featuresTilingScheme }), this.requestUpdate();
  }
  detach() {
    var _a;
    this.elements.removeAll(), this._tileStrategy.destroy(), this._fetchQueue.destroy(), this._overlayContainer.removeAllChildren(), this.container.removeAllChildren(), this._elementReferences.clear(), (_a = this._debugGraphicsView) == null ? void 0 : _a.destroy();
  }
  supportsSpatialReference(e5) {
    return true;
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  update(e5) {
    var _a;
    this._tileStrategy.update(e5), (_a = this._debugGraphicsView) == null ? void 0 : _a.update(e5);
  }
  async hitTest(e5, t2) {
    const r5 = [], s5 = e5.normalize(), i2 = [s5.x, s5.y];
    for (const { projectedElement: { normalizedCoords: o5, element: n4 } } of this._elementReferences.values())
      null != o5 && s3(o5.rings, i2) && r5.push({ type: "media", element: n4, layer: this.layer, mapPoint: e5, sourcePoint: n4.toSource(e5) });
    return r5.reverse();
  }
  canResume() {
    return null != this.layer.source && super.canResume();
  }
  async doRefresh() {
    this._fetchQueue.reset(), this._tileStrategy.refresh((e5) => this._updateTile(e5));
  }
  _acquireTile(e5) {
    const t2 = new E2(e5.clone());
    return this._updateTile(t2), t2;
  }
  _updateTile(e5) {
    this._updatingHandles.addPromise(this._fetchQueue.push(e5.key).then((t2) => {
      const [r5, s5] = e5.setElements(t2);
      this._referenceElements(e5, r5), this._dereferenceElements(e5, s5), this.requestUpdate();
    }, (e6) => {
      b(e6) || n.getLogger(this).error(e6);
    }));
  }
  _releaseTile(e5) {
    this._fetchQueue.abort(e5.key.id), e5.elements && this._dereferenceElements(e5, e5.elements), this.requestUpdate();
  }
  async _queryElements(e5, t2) {
    const r5 = this.layer.effectiveSource;
    if (null == r5)
      return [];
    this.view.featuresTilingScheme.getTileBounds(w2, e5, true);
    const s5 = new w({ xmin: w2[0], ymin: w2[1], xmax: w2[2], ymax: w2[3], spatialReference: this.view.spatialReference });
    return r5.queryElements(s5, t2);
  }
  _referenceElements(e5, t2) {
    if (null != this.layer.source)
      for (const r5 of t2)
        this._referenceElement(e5, r5);
  }
  _referenceElement(e5, t2) {
    r2(this._elementReferences, t2.uid, () => {
      const e6 = new m3({ element: t2, spatialReference: this.view.spatialReference }), r5 = new j2(e6);
      this._overlayContainer.addChild(r5), this.elements.add(t2);
      let s5 = null;
      return { tiles: /* @__PURE__ */ new Set(), projectedElement: e6, overlay: r5, debugGraphic: s5 };
    }).tiles.add(e5);
  }
  _dereferenceElements(e5, t2) {
    for (const r5 of t2)
      this._dereferenceElement(e5, r5);
  }
  _dereferenceElement(e5, t2) {
    var _a;
    const r5 = this._elementReferences.get(t2.uid);
    r5.tiles.delete(e5), r5.tiles.size || (this._overlayContainer.removeChild(r5.overlay), r5.overlay.destroy(), r5.projectedElement.destroy(), this._elementReferences.delete(t2.uid), this.elements.remove(t2), (_a = this._debugGraphicsView) == null ? void 0 : _a.graphics.remove(r5.debugGraphic));
  }
  _elementUpdateHandler(e5) {
    var _a;
    let t2 = this._elementReferences.get(e5.uid);
    if (t2) {
      const r6 = t2.projectedElement.normalizedCoords;
      if (null == r6)
        return this._overlayContainer.removeChild(t2.overlay), t2.overlay.destroy(), t2.projectedElement.destroy(), this._elementReferences.delete(e5.uid), this.elements.remove(e5), void ((_a = this._debugGraphicsView) == null ? void 0 : _a.graphics.remove(t2.debugGraphic));
      const s5 = [], i2 = [];
      for (const e6 of this._tileStrategy.tiles) {
        const o5 = v3(this.view.featuresTilingScheme, e6, r6);
        t2.tiles.has(e6) ? o5 || i2.push(e6) : o5 && s5.push(e6);
      }
      for (const t3 of s5)
        this._referenceElement(t3, e5);
      for (const t3 of i2)
        this._dereferenceElement(t3, e5);
      return t2 = this._elementReferences.get(e5.uid), void ((t2 == null ? void 0 : t2.debugGraphic) && (t2.debugGraphic.geometry = t2.projectedElement.normalizedCoords, this._debugGraphicsView.graphicUpdateHandler({ graphic: t2.debugGraphic, property: "geometry" })));
    }
    const r5 = new m3({ element: e5, spatialReference: this.view.spatialReference }).normalizedCoords;
    if (null != r5)
      for (const s5 of this._tileStrategy.tiles) {
        v3(this.view.featuresTilingScheme, s5, r5) && this._referenceElement(s5, e5);
      }
  }
};
e([y()], b2.prototype, "layer", void 0), e([y({ readOnly: true })], b2.prototype, "elements", void 0), b2 = e([a("esri.views.2d.layers.MediaLayerView2D")], b2);
var w2 = u();
var _2 = { xmin: 0, ymin: 0, xmax: 0, ymax: 0 };
function v3(e5, t2, r5) {
  return e5.getTileBounds(w2, t2.key, true), _2.xmin = w2[0], _2.ymin = w2[1], _2.xmax = w2[2], _2.ymax = w2[3], x(_2, r5);
}
var E2 = class {
  constructor(e5) {
    this.key = e5, this.elements = null, this.isReady = false, this.visible = true;
  }
  setElements(e5) {
    const t2 = [], r5 = new Set(this.elements);
    this.elements = e5;
    for (const s5 of e5)
      r5.has(s5) ? r5.delete(s5) : t2.push(s5);
    return this.isReady = true, [t2, Array.from(r5)];
  }
  destroy() {
  }
};
var R = b2;
export {
  R as default
};
//# sourceMappingURL=MediaLayerView2D-65GI23TZ.js.map
