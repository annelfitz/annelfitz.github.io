import {
  b as b2
} from "./chunk-7PVGO24P.js";
import {
  i
} from "./chunk-EL74TSJT.js";
import {
  b,
  m,
  y as y2
} from "./chunk-YPY24RRU.js";
import {
  F
} from "./chunk-O7RKI2QW.js";
import {
  d as d2,
  n2,
  t
} from "./chunk-NVYR73RE.js";
import {
  l
} from "./chunk-CYVKDANA.js";
import {
  s
} from "./chunk-IOB3DJMR.js";
import {
  o
} from "./chunk-TXBMNSNF.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a,
  d
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import {
  u
} from "./chunk-QHK5ZYFW.js";
import {
  n2 as n
} from "./chunk-7RBRCL6S.js";

// node_modules/@arcgis/core/support/groundUtils.js
var i2 = { "world-elevation": { id: "worldElevation", url: "//elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer", layerType: "ArcGISTiledElevationServiceLayer" }, "world-topobathymetry": { id: "worldTopoBathymetry", url: "//elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/TopoBathy3D/ImageServer", layerType: "ArcGISTiledElevationServiceLayer" } };
function t2(t3) {
  let a2 = null;
  if ("string" == typeof t3)
    if (t3 in i2) {
      const r = i2[t3];
      a2 = new b2({ resourceInfo: { data: { layers: [r] } } });
    } else
      n.getLogger("esri.support.groundUtils").warn(`Unable to find ground definition for: ${t3}. Try "world-elevation"`);
  else
    a2 = d(b2, t3);
  return a2;
}

// node_modules/@arcgis/core/Map.js
var j = class extends n2(d2(o.EventedMixin(S))) {
  constructor(e2) {
    super(e2), this.allLayers = new l({ getCollections: () => {
      var _a, _b, _c;
      return [(_a = this.basemap) == null ? void 0 : _a.baseLayers, (_b = this.ground) == null ? void 0 : _b.layers, this.layers, (_c = this.basemap) == null ? void 0 : _c.referenceLayers];
    }, getChildrenFunction: (e3) => "layers" in e3 ? e3.layers : null }), this.allTables = t(this), this.basemap = null, this.editableLayers = new l({ getCollections: () => [this.allLayers], itemFilterFunction: i }), this.ground = new b2(), this._basemapCache = y2();
  }
  destroy() {
    m(this._basemapCache), this._basemapCache = null, this.allLayers.destroy(), this.allTables.destroy(), this.editableLayers.destroy(), this.basemap = u(this.basemap), u(this.ground), this._set("ground", null);
  }
  castBasemap(e2) {
    return b(e2, this._basemapCache);
  }
  castGround(e2) {
    const s2 = t2(e2);
    return s2 ?? this._get("ground");
  }
  findLayerById(e2) {
    return this.allLayers.find((s2) => s2.id === e2);
  }
  findTableById(e2) {
    return this.allTables.find((s2) => s2.id === e2);
  }
};
e([y({ readOnly: true, dependsOn: [] })], j.prototype, "allLayers", void 0), e([y({ readOnly: true })], j.prototype, "allTables", void 0), e([y({ type: F, json: { read: { source: "baseMap" }, write: { target: "baseMap" } } })], j.prototype, "basemap", void 0), e([s("basemap")], j.prototype, "castBasemap", null), e([y({ readOnly: true })], j.prototype, "editableLayers", void 0), e([y({ type: b2, nonNullable: true })], j.prototype, "ground", void 0), e([s("ground")], j.prototype, "castGround", null), e([y()], j.prototype, "undoRedo", void 0), j = e([a("esri.Map")], j);
var L = j;

export {
  L
};
//# sourceMappingURL=chunk-QHWIMHBR.js.map
