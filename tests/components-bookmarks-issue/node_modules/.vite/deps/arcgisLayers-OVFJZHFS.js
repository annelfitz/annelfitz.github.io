import {
  i,
  t as t2
} from "./chunk-4WS4UHOQ.js";
import {
  t
} from "./chunk-LT6KUDSQ.js";
import {
  s as s2
} from "./chunk-LRW6CHFI.js";
import {
  d,
  p
} from "./chunk-VTH4DAHQ.js";
import {
  a
} from "./chunk-GWC53NTZ.js";
import {
  g
} from "./chunk-HLDUDRTD.js";
import "./chunk-SLQA5YBV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import {
  I,
  bt
} from "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import "./chunk-NDIXNREV.js";
import "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  s
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/layers/support/arcgisLayers.js
var y = { FeatureLayer: true, SceneLayer: true };
async function f(e) {
  const { properties: r, url: a2 } = e, t3 = { ...r, url: a2 }, s3 = await v(a2, r == null ? void 0 : r.customParameters), { Constructor: l, layerId: n, sourceJSON: o, parsedUrl: c, layers: i2, tables: u } = s3;
  if (i2.length + u.length === 0)
    return null != n && (t3.layerId = n), null != o && (t3.sourceJSON = o), new l(t3);
  const y2 = new (0, (await import("./GroupLayer-SZCWNI7I.js")).default)({ title: c.title });
  return await d2(y2, s3, t3), y2;
}
function m(e, r) {
  return e ? e.find(({ id: e2 }) => e2 === r) : null;
}
function p2(e, r, a2, t3, s3) {
  const l = { ...s3, layerId: r };
  return null != e && (l.url = e), null != a2 && (l.sourceJSON = a2), "sublayerTitleMode" in t3.prototype && (l.sublayerTitleMode = "service-name"), new t3(l);
}
async function d2(e, r, a2) {
  const t3 = r.sublayerConstructorProvider;
  for (const { id: s3, serverUrl: l } of r.layers) {
    const n = m(r.sublayerInfos, s3), o = p2(l, s3, n, (n && (t3 == null ? void 0 : t3(n))) ?? r.Constructor, a2);
    e.add(o);
  }
  if (r.tables.length) {
    const t4 = await I2("FeatureLayer");
    r.tables.forEach(({ id: s3, serverUrl: l }) => {
      const n = p2(l, s3, m(r.tableInfos, s3), t4, a2);
      e.tables.add(n);
    });
  }
}
async function v(r, a2) {
  var _a, _b, _c, _d, _e, _f, _g;
  let s3 = p(r);
  if (null == s3 && (s3 = await S(r, a2)), null == s3)
    throw new s("arcgis-layers:url-mismatch", "The url '${url}' is not a valid arcgis resource", { url: r });
  const { serverType: l, sublayer: o } = s3;
  let i2;
  const f2 = { FeatureServer: "FeatureLayer", StreamServer: "StreamLayer", VectorTileServer: "VectorTileLayer" }, m2 = "FeatureServer" === l, p3 = "SceneServer" === l, d3 = { parsedUrl: s3, Constructor: null, layerId: m2 || p3 ? o ?? void 0 : void 0, layers: [], tables: [] };
  switch (l) {
    case "MapServer":
      if (null != o)
        i2 = "FeatureLayer";
      else {
        i2 = await P(r, a2) ? "TileLayer" : "MapImageLayer";
      }
      break;
    case "ImageServer": {
      const e = await t(r, { customParameters: a2 }), { tileInfo: t3, cacheType: s4 } = e;
      i2 = t3 ? "LERC" !== ((_a = t3 == null ? void 0 : t3.format) == null ? void 0 : _a.toUpperCase()) || s4 && "elevation" !== s4.toLowerCase() ? "ImageryTileLayer" : "ElevationLayer" : "ImageryLayer";
      break;
    }
    case "SceneServer": {
      const e = await t(s3.url.path, { customParameters: a2 });
      if (i2 = "SceneLayer", e) {
        const r2 = e == null ? void 0 : e.layers;
        if ("Voxel" === (e == null ? void 0 : e.layerType))
          i2 = "VoxelLayer";
        else if (r2 == null ? void 0 : r2.length) {
          const e2 = (_b = r2[0]) == null ? void 0 : _b.layerType;
          null != e2 && null != g[e2] && (i2 = g[e2]);
        }
      }
      break;
    }
    case "3DTilesServer":
      throw new s("arcgis-layers:unsupported", "fromUrl() not supported for 3DTiles layers");
    case "FeatureServer":
      if (i2 = "FeatureLayer", null != o) {
        const e = await t(r, { customParameters: a2 });
        d3.sourceJSON = e, i2 = i(e.type);
      }
      break;
    default:
      i2 = f2[l];
  }
  if (y[i2] && null == o) {
    const e = await b(r, l, a2);
    m2 && (d3.sublayerInfos = e.layerInfos, d3.tableInfos = e.tableInfos);
    if (1 !== e.layers.length + e.tables.length)
      d3.layers = e.layers, d3.tables = e.tables, m2 && ((_c = e.layerInfos) == null ? void 0 : _c.length) && (d3.sublayerConstructorProvider = await L(e.layerInfos));
    else if (m2 || p3) {
      const r2 = ((_d = e.layerInfos) == null ? void 0 : _d[0]) ?? ((_e = e.tableInfos) == null ? void 0 : _e[0]);
      if (d3.layerId = ((_f = e.layers[0]) == null ? void 0 : _f.id) ?? ((_g = e.tables[0]) == null ? void 0 : _g.id), d3.sourceJSON = r2, m2) {
        const e2 = r2 == null ? void 0 : r2.type;
        i2 = i(e2);
      }
    }
  }
  return d3.Constructor = await I2(i2), d3;
}
async function S(e, t3) {
  var _a;
  const l = await t(e, { customParameters: t3 });
  let n = null, o = null;
  const c = l.type;
  if ("Feature Layer" === c || "Table" === c ? (n = "FeatureServer", o = l.id ?? null) : "indexedVector" === c ? n = "VectorTileServer" : l.hasOwnProperty("mapName") ? n = "MapServer" : l.hasOwnProperty("bandCount") && l.hasOwnProperty("pixelSizeX") ? n = "ImageServer" : l.hasOwnProperty("maxRecordCount") && l.hasOwnProperty("allowGeometryUpdates") ? n = "FeatureServer" : l.hasOwnProperty("streamUrls") ? n = "StreamServer" : w(l) ? (n = "SceneServer", o = l.id) : l.hasOwnProperty("layers") && w((_a = l.layers) == null ? void 0 : _a[0]) && (n = "SceneServer"), !n)
    return null;
  const i2 = null != o ? d(e) : null;
  return { title: null != i2 && l.name || bt(e), serverType: n, sublayer: o, url: { path: null != i2 ? i2.serviceUrl : I(e).path } };
}
function w(e) {
  return null != e && e.hasOwnProperty("store") && e.hasOwnProperty("id") && "number" == typeof e.id;
}
async function b(e, r, a2) {
  let t3, s3, l = false;
  switch (r) {
    case "FeatureServer": {
      const r2 = await t2(e, { customParameters: a2 });
      l = !!r2.layersJSON, t3 = r2.layersJSON || r2.serviceJSON;
      break;
    }
    case "SceneServer": {
      const r2 = await h(e, a2);
      t3 = r2.serviceInfo, s3 = r2.tableServerUrl;
      break;
    }
    default:
      t3 = await t(e, { customParameters: a2 });
  }
  const n = t3 == null ? void 0 : t3.layers, c = t3 == null ? void 0 : t3.tables;
  return { layers: (n == null ? void 0 : n.map((e2) => ({ id: e2.id })).reverse()) || [], tables: (c == null ? void 0 : c.map((e2) => ({ serverUrl: s3, id: e2.id })).reverse()) || [], layerInfos: l ? n : [], tableInfos: l ? c : [] };
}
async function h(e, r) {
  var _a;
  const a2 = await t(e, { customParameters: r }), t3 = (_a = a2.layers) == null ? void 0 : _a[0];
  if (!t3)
    return { serviceInfo: a2 };
  try {
    const { serverUrl: t4 } = await s2(e), s3 = await t(t4, { customParameters: r }).catch(() => null);
    return s3 && (a2.tables = s3.tables), { serviceInfo: a2, tableServerUrl: t4 };
  } catch {
    return { serviceInfo: a2 };
  }
}
async function I2(e) {
  return (0, a[e])();
}
async function P(e, r) {
  return (await t(e, { customParameters: r })).tileInfo;
}
async function L(e) {
  if (!e.length)
    return;
  const r = /* @__PURE__ */ new Set(), a2 = [];
  for (const { type: l } of e)
    r.has(l) || (r.add(l), a2.push(I2(i(l))));
  const t3 = await Promise.all(a2), s3 = /* @__PURE__ */ new Map();
  return Array.from(r).forEach((e2, r2) => {
    s3.set(e2, t3[r2]);
  }), (e2) => s3.get(e2.type);
}
export {
  f as fromUrl
};
//# sourceMappingURL=arcgisLayers-OVFJZHFS.js.map
