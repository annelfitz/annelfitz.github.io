import {
  p2 as p
} from "./chunk-V2LOXBCS.js";
import {
  i
} from "./chunk-WK2KEW7P.js";
import {
  e as e3
} from "./chunk-EAAEPSBY.js";
import {
  D,
  e2
} from "./chunk-RGCWZ2KZ.js";
import {
  n
} from "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import "./chunk-2SDMYJDE.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  P,
  d,
  v
} from "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/widgets/Swipe/SwipeViewModel.js
function p2(i2, t) {
  const e4 = 10 ** t;
  return Math.round(i2 * e4) / e4;
}
var c = { left: 0, right: 0, top: 0, bottom: 0 };
var h = class extends S {
  constructor(i2) {
    super(i2), this._leadingClips = /* @__PURE__ */ new Map(), this._trailingClips = /* @__PURE__ */ new Map(), this.direction = "horizontal", this.leadingLayers = new V(), this.max = 100, this.min = 0, this.precision = 4, this.step = 0.5, this.stepMultiplier = 10, this.trailingLayers = new V(), this.view = null;
  }
  initialize() {
    this.addHandles([d(() => {
      var _a;
      return [this.view, (_a = this.view) == null ? void 0 : _a.ready, this.position, this.direction];
    }, () => this._clipLayers(), P), v(() => this.leadingLayers, "change", () => this._clipLeadingLayers()), v(() => this.trailingLayers, "change", () => this._clipTrailingLayers())]);
  }
  destroy() {
    this._removeExistingClips();
  }
  get position() {
    return 25;
  }
  set position(i2) {
    const { precision: t, min: e4, max: s } = this;
    this._set("position", p2(Math.max(Math.min(i2, s), e4), t));
  }
  get state() {
    const { view: i2 } = this;
    return i2 && i2.ready ? "ready" : "disabled";
  }
  _clipLayers() {
    this._clipLeadingLayers(), this._clipTrailingLayers();
  }
  _clipLeadingLayers() {
    this._removeClips("leading");
    const { leadingLayers: i2 } = this;
    i2.forEach((i3) => this._clipLayer({ layer: i3, type: "leading" }));
  }
  _clipTrailingLayers() {
    this._removeClips("trailing");
    const { trailingLayers: i2 } = this;
    i2.forEach((i3) => this._clipLayer({ layer: i3, type: "trailing" }));
  }
  async _getLayerView(i2) {
    const { view: t } = this;
    if (!i2 || !t)
      return null;
    const e4 = await t.whenLayerView(i2);
    return "clips" in e4 ? e4 : null;
  }
  _getVerticalClipRect(i2) {
    const { position: t } = this;
    return "leading" === i2 ? new p({ ...c, bottom: 100 - t + "%" }) : "trailing" === i2 ? new p({ ...c, top: `${t}%` }) : null;
  }
  _getHorizontalClipRect(i2) {
    const { position: t } = this;
    return "leading" === i2 ? new p({ ...c, right: 100 - t + "%" }) : "trailing" === i2 ? new p({ ...c, left: `${t}%` }) : null;
  }
  _getClipRect(i2) {
    const { direction: t } = this;
    return "vertical" === t ? this._getVerticalClipRect(i2) : "horizontal" === t ? this._getHorizontalClipRect(i2) : null;
  }
  async _clipLayer(i2) {
    const { _leadingClips: t, _trailingClips: e4 } = this, { layer: s, type: r } = i2, o = "trailing" === r ? e4 : "leading" === r ? t : null, l = await this._getLayerView(s);
    if (!(l && "clips" in l && o && l.hasOwnProperty("clips")))
      return;
    const n2 = o.get(l);
    n2 && l.clips.remove(n2);
    const a2 = this._getClipRect(r);
    a2 && (o.set(l, a2), l.clips.add(a2));
  }
  _removeClips(i2) {
    const { _leadingClips: t, _trailingClips: e4 } = this, s = "trailing" === i2 ? e4 : "leading" === i2 ? t : null;
    s && (s.forEach((i3, t2) => {
      t2 && t2.hasOwnProperty("clips") && t2.clips.remove(i3);
    }), s.clear());
  }
  _removeExistingClips() {
    this._removeClips("leading"), this._removeClips("trailing");
  }
};
e([y()], h.prototype, "direction", void 0), e([y({ type: V, nonNullable: true })], h.prototype, "leadingLayers", void 0), e([y({ readOnly: true })], h.prototype, "max", void 0), e([y({ readOnly: true })], h.prototype, "min", void 0), e([y()], h.prototype, "position", null), e([y()], h.prototype, "precision", void 0), e([y({ readOnly: true })], h.prototype, "state", null), e([y()], h.prototype, "step", void 0), e([y()], h.prototype, "stepMultiplier", void 0), e([y({ type: V, nonNullable: true })], h.prototype, "trailingLayers", void 0), e([y()], h.prototype, "view", void 0), h = e([a("esri.widgets.Swipe.SwipeViewModel")], h);
var g = h;

// node_modules/@arcgis/core/widgets/Swipe.js
var d2 = "esri-swipe";
var p3 = { base: d2, baseDisabled: `${d2}--disabled`, vertical: `${d2}--vertical`, horizontal: `${d2}--horizontal`, container: `${d2}__container`, divider: `${d2}__divider`, handle: `${d2}__handle`, handleHidden: `${d2}__handle--hidden`, handleIcon: `${d2}__handle-icon` };
var c2 = { handle: true, divider: true };
var h2 = class extends D {
  constructor(e4, t) {
    super(e4, t), this.disabled = false, this.messages = null, this.viewModel = new g(), this._pointerOffset = 0, this._container = null, this._onContainerPointerDown = this._onContainerPointerDown.bind(this), this._onContainerPointerMove = this._onContainerPointerMove.bind(this), this._onContainerPointerUp = this._onContainerPointerUp.bind(this);
  }
  get direction() {
    return this.viewModel.direction;
  }
  set direction(e4) {
    this.viewModel.direction = e4;
  }
  get dragLabel() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.dragLabel) ?? "";
  }
  set dragLabel(e4) {
    this._overrideIfSome("dragLabel", e4);
  }
  get icon() {
    return "compare";
  }
  set icon(e4) {
    this._overrideIfSome("icon", e4);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e4) {
    this._overrideIfSome("label", e4);
  }
  get leadingLayers() {
    return this.viewModel.leadingLayers;
  }
  set leadingLayers(e4) {
    this.viewModel.leadingLayers = e4;
  }
  get position() {
    return this.viewModel.position;
  }
  set position(e4) {
    this.viewModel.position = e4;
  }
  get trailingLayers() {
    return this.viewModel.trailingLayers;
  }
  set trailingLayers(e4) {
    this.viewModel.trailingLayers = e4;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e4) {
    this.viewModel.view = e4;
  }
  set visibleElements(e4) {
    this._set("visibleElements", { ...c2, ...e4 });
  }
  get visibleElements() {
    return this._get("visibleElements") || c2;
  }
  render() {
    const { state: e4, direction: t } = this.viewModel, i2 = "disabled" === e4 || this.disabled, n2 = { [e3.disabled]: i2, [p3.baseDisabled]: i2, [p3.vertical]: "vertical" === t, [p3.horizontal]: "horizontal" === t };
    return n("div", { class: this.classes(p3.base, e3.widget, n2) }, "disabled" === e4 ? null : this._renderContainer());
  }
  _renderHandle() {
    const { direction: e4 } = this.viewModel, { visibleElements: t } = this, i2 = { [i.dragHorizontal]: "vertical" === e4, [i.dragVertical]: "horizontal" === e4 }, n2 = this.classes(p3.handle, !t.handle && p3.handleHidden);
    return n("div", { class: n2, key: "handle", role: "presentation" }, n("span", { "aria-hidden": "true", class: this.classes(p3.handleIcon, i2) }));
  }
  _renderDivider() {
    const { visibleElements: e4 } = this;
    return e4 && e4.divider ? n("div", { class: p3.divider, key: "divider", role: "presentation" }) : null;
  }
  _renderContent() {
    return [this._renderDivider(), this._renderHandle()];
  }
  _renderContainer() {
    const { disabled: e4, dragLabel: t, viewModel: i2 } = this, { max: n2, min: r, direction: o, position: s } = i2, l = `${s}%`, d3 = { top: "vertical" === o ? l : void 0, left: "vertical" === o ? void 0 : l }, c3 = this._renderContent();
    return n("div", e4 ? { class: p3.container, key: "container", role: "presentation", styles: d3 } : { afterCreate: this._afterContainerCreate, "aria-label": t, "aria-orientation": o, "aria-valuemax": `${n2}`, "aria-valuemin": `${r}`, "aria-valuenow": `${s}`, "aria-valuetext": l, bind: this, class: p3.container, key: "container", onkeydown: this._onContainerKeyDown, role: "slider", styles: d3, tabIndex: 0, title: t, "touch-action": "none" }, c3);
  }
  _afterContainerCreate(e4) {
    this._container = e4, e4.addEventListener("pointerdown", this._onContainerPointerDown);
  }
  _calculatePointerOffset(e4) {
    const { direction: t } = this, i2 = e4.target, n2 = ("vertical" === t ? i2.clientHeight : i2.clientWidth) / 2, r = i2.getBoundingClientRect(), o = e4.clientX - r.left, s = e4.clientY - r.top;
    this._pointerOffset = "vertical" === t ? s - n2 : o - n2;
  }
  _onContainerPointerDown(e4) {
    e4.preventDefault(), this._container && document.activeElement !== this.container && this._container.focus(), this._calculatePointerOffset(e4), document.addEventListener("pointerup", this._onContainerPointerUp), document.addEventListener("pointermove", this._onContainerPointerMove);
  }
  _onContainerPointerUp(e4) {
    e4.preventDefault(), document.removeEventListener("pointerup", this._onContainerPointerUp), document.removeEventListener("pointermove", this._onContainerPointerMove);
  }
  _onContainerPointerMove(e4) {
    e4.preventDefault();
    const { _pointerOffset: t, container: i2, direction: n2 } = this, { clientX: r, clientY: o } = e4, { top: s, left: a2, width: l, height: d3 } = i2.getBoundingClientRect(), p4 = ("vertical" === n2 ? o - s - t : r - a2 - t) / ("vertical" === n2 ? d3 : l) * 100;
    this.position = p4;
  }
  _getKeyPosition(e4) {
    const { key: t } = e4, { position: i2 } = this, { max: n2, min: r, step: o, stepMultiplier: s, direction: a2 } = this.viewModel, l = o * s;
    ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight", "Home", "End", "PageUp", "PageDown"].includes(t) && (e4.preventDefault(), e4.stopPropagation());
    if ("vertical" === a2 ? "ArrowDown" === t || "ArrowRight" === t : "ArrowUp" === t || "ArrowRight" === t) {
      return i2 + (e4.shiftKey ? l : o);
    }
    if ("vertical" === a2 ? "ArrowUp" === t || "ArrowLeft" === t : "ArrowDown" === t || "ArrowLeft" === t) {
      return i2 - (e4.shiftKey ? l : o);
    }
    if ("Home" === t)
      return r;
    if ("End" === t)
      return n2;
    if ("vertical" === a2 ? "PageDown" === t : "PageUp" === t)
      return i2 + l;
    return ("vertical" === a2 ? "PageUp" === t : "PageDown" === t) ? i2 - l : null;
  }
  _onContainerKeyDown(e4) {
    const t = this._getKeyPosition(e4);
    "number" == typeof t && (this.position = t);
  }
};
e([y()], h2.prototype, "direction", null), e([y()], h2.prototype, "disabled", void 0), e([y()], h2.prototype, "dragLabel", null), e([y()], h2.prototype, "icon", null), e([y()], h2.prototype, "label", null), e([y()], h2.prototype, "leadingLayers", null), e([y(), e2("esri/widgets/Swipe/t9n/Swipe")], h2.prototype, "messages", void 0), e([y()], h2.prototype, "position", null), e([y()], h2.prototype, "trailingLayers", null), e([y()], h2.prototype, "view", null), e([y({ type: g })], h2.prototype, "viewModel", void 0), e([y()], h2.prototype, "visibleElements", null), h2 = e([a("esri.widgets.Swipe")], h2);
var v2 = h2;
export {
  v2 as default
};
//# sourceMappingURL=Swipe-5ZGTHVAA.js.map
