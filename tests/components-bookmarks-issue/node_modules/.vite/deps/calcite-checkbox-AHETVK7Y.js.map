{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/components/src/components/checkbox/checkbox.scss?tag=calcite-checkbox&encapsulation=shadow", "../../@esri/calcite-components/dist/components/src/components/checkbox/checkbox.tsx", "../../@esri/calcite-components/dist/components/calcite-checkbox.js"],
  "sourcesContent": ["/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-checkbox-size: Specifies the component's height and width.\n */\n\n:host([scale=\"s\"]) {\n  --calcite-checkbox-size: theme(\"spacing.3\");\n}\n:host([scale=\"m\"]) {\n  --calcite-checkbox-size: theme(\"fontSize.n1\");\n}\n:host([scale=\"l\"]) {\n  --calcite-checkbox-size: theme(\"spacing.4\");\n}\n\n:host {\n  @apply relative\n    inline-flex\n    cursor-pointer\n    select-none;\n  -webkit-tap-highlight-color: transparent;\n\n  .check-svg,\n  .toggle {\n    inline-size: var(--calcite-checkbox-size);\n    block-size: var(--calcite-checkbox-size);\n  }\n\n  .check-svg {\n    @apply bg-foreground-1\n      pointer-events-none\n      box-border\n      block\n      overflow-hidden\n      fill-current\n      stroke-current\n      stroke-1\n      transition-default;\n    box-shadow: inset 0 0 0 1px var(--calcite-color-border-input);\n    color: theme(\"backgroundColor.background\");\n  }\n}\n\n:host([status=\"invalid\"]:not([checked])) {\n  .check-svg {\n    box-shadow: inset 0 0 0 1px var(--calcite-color-status-danger);\n  }\n  .toggle:focus {\n    @apply focus-outset-danger;\n  }\n}\n\n:host([checked]),\n:host([indeterminate]) {\n  .check-svg {\n    @apply bg-brand;\n    box-shadow: inset 0 0 0 1px var(--calcite-color-brand);\n  }\n}\n:host([hovered]) .toggle,\n:host .toggle:hover {\n  .check-svg {\n    box-shadow: inset 0 0 0 2px var(--calcite-color-brand);\n  }\n}\n\n.toggle {\n  @apply focus-base relative;\n\n  &:active,\n  &:focus,\n  &:focus-visible {\n    @apply focus-outset;\n  }\n\n  &::after {\n    content: \"\";\n    inset-block-start: 50%;\n    inset-inline-start: 50%;\n    min-block-size: theme(\"width.6\");\n    min-inline-size: theme(\"width.6\");\n    position: absolute;\n    transform: translateX(-50%) translateY(-50%);\n  }\n}\n\n@include disabled();\n@include hidden-form-input();\n@include base-component();\n", "import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  VNode,\n} from \"@stencil/core\";\nimport { toAriaBoolean } from \"../../utils/dom\";\nimport {\n  CheckableFormComponent,\n  connectForm,\n  disconnectForm,\n  HiddenFormInputSlot,\n} from \"../../utils/form\";\nimport { guid } from \"../../utils/guid\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { isActivationKey } from \"../../utils/key\";\nimport { connectLabel, disconnectLabel, getLabelText, LabelableComponent } from \"../../utils/label\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { Scale, Status } from \"../interfaces\";\n\n@Component({\n  tag: \"calcite-checkbox\",\n  styleUrl: \"checkbox.scss\",\n  shadow: true,\n})\nexport class Checkbox\n  implements LabelableComponent, CheckableFormComponent, InteractiveComponent, LoadableComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** When `true`, the component is checked. */\n  @Prop({ reflect: true, mutable: true }) checked = false;\n\n  /** When `true`, interaction is prevented and the component is displayed with lower opacity. */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * The `id` of the form that will be associated with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   */\n  @Prop({ reflect: true })\n  form: string;\n\n  /** The `id` attribute of the component. When omitted, a globally unique identifier is used. */\n  @Prop({ reflect: true, mutable: true }) guid: string;\n\n  /**\n   * The hovered state of the checkbox.\n   *\n   * @internal\n   */\n  @Prop({ reflect: true }) hovered = false;\n\n  /**\n   * When `true`, the component is initially indeterminate, which is independent from its `checked` value.\n   *\n   * The state is visual only, and can look different across browsers.\n   *\n   * @mdn [indeterminate](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#indeterminate_state_checkboxes)\n   */\n  @Prop({ reflect: true, mutable: true }) indeterminate = false;\n\n  /** Accessible name for the component. */\n  @Prop() label: string;\n\n  /**\n   * Specifies the name of the component.\n   *\n   * Required to pass the component's `value` on form submission.\n   */\n  @Prop({ reflect: true }) name: string;\n\n  /** When `true`, the component must have a value in order for the form to submit. */\n  @Prop({ reflect: true }) required = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the status of the input field, which determines message and icons. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  /** The component's value. */\n  @Prop() value: any;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteCheckboxElement;\n\n  readonly checkedPath = \"M5.5 12L2 8.689l.637-.636L5.5 10.727l8.022-7.87.637.637z\";\n\n  readonly indeterminatePath = \"M13 8v1H3V8z\";\n\n  labelEl: HTMLCalciteLabelElement;\n\n  formEl: HTMLFormElement;\n\n  defaultChecked: boolean;\n\n  defaultValue: Checkbox[\"checked\"];\n\n  toggleEl: HTMLDivElement;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    this.toggleEl?.focus();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  syncHiddenFormInput(input: HTMLInputElement): void {\n    input.type = \"checkbox\";\n  }\n\n  getPath = (): string =>\n    this.indeterminate ? this.indeterminatePath : this.checked ? this.checkedPath : \"\";\n\n  toggle = (): void => {\n    if (!this.disabled) {\n      this.checked = !this.checked;\n      this.setFocus();\n      this.indeterminate = false;\n      this.calciteCheckboxChange.emit();\n    }\n  };\n\n  keyDownHandler = (event: KeyboardEvent): void => {\n    if (isActivationKey(event.key)) {\n      this.toggle();\n      event.preventDefault();\n    }\n  };\n\n  clickHandler = (): void => {\n    if (this.disabled) {\n      return;\n    }\n\n    this.toggle();\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Fires when the component is blurred.\n   *\n   * @internal\n   */\n  @Event({ cancelable: false }) calciteInternalCheckboxBlur: EventEmitter<boolean>;\n\n  /** Fires when the component's `checked` status changes. */\n  @Event({ cancelable: false }) calciteCheckboxChange: EventEmitter<void>;\n\n  /**\n   * Fires when the component is focused.\n   *\n   * @internal\n   */\n  @Event({ cancelable: false }) calciteInternalCheckboxFocus: EventEmitter<boolean>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Event Listeners\n  //\n  //--------------------------------------------------------------------------\n\n  onToggleBlur = (): void => {\n    this.calciteInternalCheckboxBlur.emit(false);\n  };\n\n  onToggleFocus = (): void => {\n    this.calciteInternalCheckboxFocus.emit(true);\n  };\n\n  onLabelClick = (): void => {\n    this.toggle();\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.guid = this.el.id || `calcite-checkbox-${guid()}`;\n    connectInteractive(this);\n    connectLabel(this);\n    connectForm(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectInteractive(this);\n    disconnectLabel(this);\n    disconnectForm(this);\n  }\n\n  componentWillLoad(): void {\n    setUpLoadableComponent(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    return (\n      <Host onClick={this.clickHandler} onKeyDown={this.keyDownHandler}>\n        <InteractiveContainer disabled={this.disabled}>\n          <div\n            aria-checked={toAriaBoolean(this.checked)}\n            aria-label={getLabelText(this)}\n            class=\"toggle\"\n            onBlur={this.onToggleBlur}\n            onFocus={this.onToggleFocus}\n            role=\"checkbox\"\n            tabIndex={this.disabled ? undefined : 0}\n            // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n            ref={(toggleEl) => (this.toggleEl = toggleEl)}\n          >\n            <svg aria-hidden=\"true\" class=\"check-svg\" viewBox=\"0 0 16 16\">\n              <path d={this.getPath()} />\n            </svg>\n            <slot />\n          </div>\n          <HiddenFormInputSlot component={this} />\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n}\n", "/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\n * v2.6.0\n */\nimport { C as Checkbox, d as defineCustomElement$1 } from './checkbox.js';\n\nconst CalciteCheckbox = Checkbox;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { CalciteCheckbox, defineCustomElement };\n\n//# sourceMappingURL=calcite-checkbox.js.map"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAM,cAAc;ICyCP,WAAQ,mBAAA,MAAAA,kBAAA,EAAA;;;;;;;;AAwEV,SAAA,cAAc;AAEd,SAAA,oBAAoB;AAoC7B,SAAA,UAAU,MACR,KAAK,gBAAgB,KAAK,oBAAoB,KAAK,UAAU,KAAK,cAAc;AAElF,SAAA,SAAS,MAAA;AACP,UAAI,CAAC,KAAK,UAAU;AAClB,aAAK,UAAU,CAAC,KAAK;AACrB,aAAK,SAAQ;AACb,aAAK,gBAAgB;AACrB,aAAK,sBAAsB,KAAI;;;AAInC,SAAA,iBAAiB,CAAC,UAAoB;AACpC,UAAI,gBAAgB,MAAM,GAAG,GAAG;AAC9B,aAAK,OAAM;AACX,cAAM,eAAc;;;AAIxB,SAAA,eAAe,MAAA;AACb,UAAI,KAAK,UAAU;AACjB;;AAGF,WAAK,OAAM;;AAgCb,SAAA,eAAe,MAAA;AACb,WAAK,4BAA4B,KAAK,KAAK;;AAG7C,SAAA,gBAAgB,MAAA;AACd,WAAK,6BAA6B,KAAK,IAAI;;AAG7C,SAAA,eAAe,MAAA;AACb,WAAK,OAAM;;mBArKqC;oBAGd;;;mBAkBD;yBASqB;;;oBAapB;iBAGI;kBAGE;;;;;;;;;EAmC1C,MAAM,WAAQ;;AACZ,UAAM,mBAAmB,IAAI;AAE7B,eAAK,aAAL,mBAAe;;;;;;;EASjB,oBAAoB,OAAuB;AACzC,UAAM,OAAO;;;;;;;EA6Ef,oBAAiB;AACf,SAAK,OAAO,KAAK,GAAG,MAAM,oBAAoB,KAAI,CAAE;AACpD,uBAAmB,IAAI;AACvB,iBAAa,IAAI;AACjB,gBAAY,IAAI;;EAGlB,uBAAoB;AAClB,0BAAsB,IAAI;AAC1B,oBAAgB,IAAI;AACpB,mBAAe,IAAI;;EAGrB,oBAAiB;AACf,2BAAuB,IAAI;;EAG7B,mBAAgB;AACd,uBAAmB,IAAI;;EAGzB,qBAAkB;AAChB,0BAAsB,IAAI;;;;;;;EAS5B,SAAM;AACJ,WACE,EAAC,MAAI,EAAC,SAAS,KAAK,cAAc,WAAW,KAAK,eAAc,GAC9D,EAAC,sBAAoB,EAAC,UAAU,KAAK,SAAQ,GAC3C,EAAA,OAAA;MAAA,gBACgB,cAAc,KAAK,OAAO;MAAC,cAC7B,aAAa,IAAI;MAC7B,OAAM;MACN,QAAQ,KAAK;MACb,SAAS,KAAK;MACd,MAAK;MACL,UAAU,KAAK,WAAW,SAAY;;MAEtC,KAAK,CAAC,aAAc,KAAK,WAAW;IAAS,GAE7C,EAAA,OAAA,EAAA,eAAiB,QAAO,OAAM,aAAY,SAAQ,YAAW,GAC3D,EAAA,QAAA,EAAM,GAAG,KAAK,QAAO,EAAE,CAAA,CAAI,GAE7B,EAAA,QAAA,IAAA,CAAQ,GAEV,EAAC,qBAAmB,EAAC,WAAW,KAAI,CAAA,CAAI,CACnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9Q/B,IAAM,kBAAkB;AACxB,IAAMC,uBAAsB;",
  "names": ["Checkbox", "defineCustomElement"]
}
