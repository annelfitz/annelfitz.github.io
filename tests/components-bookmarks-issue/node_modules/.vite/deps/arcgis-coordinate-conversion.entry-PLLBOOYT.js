import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  importCoreReactiveUtils,
  newWidgetsCoordinateConversion
} from "./chunk-YXW2SI4L.js";
import {
  addHandles,
  checkForView,
  referenceElementHelper
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-coordinate-conversion.entry.js
var coordinateConversionCss = "";
var ArcgisCoordinateConversion = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.arcgisCoordinateConversionReady = createEvent(this, "arcgisCoordinateConversionReady", 7);
    this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
    this._watchHandles = [];
    this.referenceElement = void 0;
    this.conversions = void 0;
    this.currentLocation = void 0;
    this.formats = void 0;
    this.icon = void 0;
    this.locationSymbol = void 0;
    this.mode = "live";
    this.multipleConversions = true;
    this.orientation = "auto";
    this.storageEnabled = true;
    this.storageType = "session";
    this.visibleElementsSettingsButton = true;
    this.visibleElementsEditButton = true;
    this.visibleElementsExpandButton = true;
    this.visibleElementsCaptureButton = true;
    this.position = "bottom-left";
    this.view = void 0;
    this.widget = void 0;
  }
  referenceElementWatcher(value) {
    void referenceElementHelper(this, value);
  }
  conversionsWatcher(value) {
    if (this.widget) {
      this.widget.conversions = value;
    }
  }
  formatsWatcher(value) {
    if (this.widget) {
      this.widget.formats = value;
    }
  }
  iconWatcher(value) {
    if (this.widget) {
      this.widget.icon = value;
    }
  }
  locationSymbolWatcher(value) {
    if (this.widget) {
      this.widget.locationSymbol = value;
    }
  }
  modeWatcher(value) {
    if (this.widget) {
      this.widget.mode = value;
    }
  }
  multipleConversionsWatcher(value) {
    if (this.widget) {
      this.widget.multipleConversions = value;
    }
  }
  orientationWatcher(value) {
    if (this.widget) {
      this.widget.orientation = value;
    }
  }
  storageEnabledWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.storageEnabled = value;
    }
  }
  storageTypeWatcher(value) {
    if (this.widget) {
      this.widget.storageType = value;
    }
  }
  visibleElementsSettingsButtonWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        settingsButton: value
      };
    }
  }
  visibleElementsEditButtonWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        editButton: value
      };
    }
  }
  visibleElementsExpandButtonWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        expandButton: value
      };
    }
  }
  visibleElementsCaptureButtonWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        captureButton: value
      };
    }
  }
  positionWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.view.ui.move(this.childElem, value);
    }
  }
  viewWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.view = value;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Methods
  //
  //--------------------------------------------------------------------------
  async reverseConvert(coordinate, format) {
    var _a;
    return await ((_a = this.widget) == null ? void 0 : _a.reverseConvert(coordinate, format));
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = this._createParams();
    const widget = await newWidgetsCoordinateConversion(params);
    this.widget = widget;
    await this._addWatchers();
    this._addContainer();
    this.arcgisCoordinateConversionReady.emit();
    checkForView(this);
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    return h("div", { ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  _addContainer() {
    this.widget.container = this.childElem;
  }
  async _addWatchers() {
    const { watch, whenOnce } = await importCoreReactiveUtils();
    addHandles(this, watch(() => this.widget.currentLocation, (value) => {
      this.currentLocation = value;
      this.arcgisPropertyChange.emit({ name: "currentLocation" });
    }, {
      initial: true
    }));
    await whenOnce(() => this.widget.formats);
    this.formats = this.widget.formats;
  }
  _createParams() {
    const params = {};
    params.visibleElements = {
      settingsButton: this.visibleElementsSettingsButton,
      editButton: this.visibleElementsEditButton,
      expandButton: this.visibleElementsExpandButton,
      captureButton: this.visibleElementsCaptureButton
    };
    if (this.conversions) {
      params.conversions = this.conversions;
    }
    if (this.icon) {
      params.icon = this.icon;
    }
    if (this.formats) {
      params.formats = this.formats;
    }
    if (this.locationSymbol) {
      params.locationSymbol = this.locationSymbol;
    }
    if (this.mode) {
      params.mode = this.mode;
    }
    if (this.multipleConversions) {
      params.multipleConversions = this.multipleConversions;
    }
    if (this.orientation) {
      params.orientation = this.orientation;
    }
    if (this.storageEnabled !== void 0) {
      params.storageEnabled = this.storageEnabled;
    }
    if (this.storageType) {
      params.storageType = this.storageType;
    }
    if (this.view) {
      params.view = this.view;
    }
    return params;
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "referenceElement": ["referenceElementWatcher"],
      "conversions": ["conversionsWatcher"],
      "formats": ["formatsWatcher"],
      "icon": ["iconWatcher"],
      "locationSymbol": ["locationSymbolWatcher"],
      "mode": ["modeWatcher"],
      "multipleConversions": ["multipleConversionsWatcher"],
      "orientation": ["orientationWatcher"],
      "storageEnabled": ["storageEnabledWatcher"],
      "storageType": ["storageTypeWatcher"],
      "visibleElementsSettingsButton": ["visibleElementsSettingsButtonWatcher"],
      "visibleElementsEditButton": ["visibleElementsEditButtonWatcher"],
      "visibleElementsExpandButton": ["visibleElementsExpandButtonWatcher"],
      "visibleElementsCaptureButton": ["visibleElementsCaptureButtonWatcher"],
      "position": ["positionWatcher"],
      "view": ["viewWatcher"]
    };
  }
};
ArcgisCoordinateConversion.style = coordinateConversionCss;
export {
  ArcgisCoordinateConversion as arcgis_coordinate_conversion
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-coordinate-conversion.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-coordinate-conversion.entry-PLLBOOYT.js.map
