import {
  L
} from "./chunk-3U6VZTOQ.js";
import {
  i as i6
} from "./chunk-2G4FVFG2.js";
import {
  C as C3,
  F as F2,
  O as O4,
  y as y3
} from "./chunk-PISHMHPI.js";
import "./chunk-OZCCH2YL.js";
import {
  A as A3
} from "./chunk-XPABJ7YF.js";
import {
  s as s4
} from "./chunk-ARNGZTAW.js";
import {
  m
} from "./chunk-YWPIIZFL.js";
import {
  i as i4
} from "./chunk-QFYJUFUK.js";
import "./chunk-V7IF2KNH.js";
import "./chunk-V7NVRGBC.js";
import "./chunk-KCZGCTYM.js";
import "./chunk-3YZBQBZ5.js";
import {
  r as r7
} from "./chunk-RFBA77K3.js";
import {
  G,
  e as e8,
  i as i5
} from "./chunk-46T3D2EU.js";
import "./chunk-RYF27IO3.js";
import {
  t as t9
} from "./chunk-BMTOVJNA.js";
import {
  t as t8
} from "./chunk-CMLG62TA.js";
import {
  n as n3
} from "./chunk-SPU25K6A.js";
import "./chunk-P257AUOX.js";
import {
  u as u6
} from "./chunk-NGAYW4TW.js";
import "./chunk-7E37N35O.js";
import {
  c as c2,
  t as t7,
  u as u5
} from "./chunk-BEXFYHUM.js";
import "./chunk-BHOYA5LV.js";
import "./chunk-KWLN46JY.js";
import {
  e as e7,
  f as f2
} from "./chunk-J5F4VILS.js";
import {
  t as t6
} from "./chunk-KSBIR2KG.js";
import {
  d as d2
} from "./chunk-GL5TSVQL.js";
import {
  r as r4,
  r2 as r5,
  t as t5
} from "./chunk-ZPC74XHC.js";
import {
  A as A2
} from "./chunk-IVGJRGD2.js";
import "./chunk-XIWETS2Q.js";
import "./chunk-LANUNBDP.js";
import {
  r as r6
} from "./chunk-JBF6CULO.js";
import "./chunk-DRCNNCTI.js";
import "./chunk-4BCSYJOQ.js";
import {
  O as O3
} from "./chunk-GMUCR2DJ.js";
import "./chunk-FV43HSGW.js";
import "./chunk-ZR7OV2EH.js";
import "./chunk-U76EZJUZ.js";
import {
  S,
  _ as _3,
  o as o2
} from "./chunk-MEEG7XMI.js";
import {
  h as h2
} from "./chunk-MUMDKJ7Y.js";
import "./chunk-R2MAAYED.js";
import "./chunk-QR7J3YDY.js";
import "./chunk-GO2OGJDG.js";
import "./chunk-UYMREM3D.js";
import {
  h
} from "./chunk-4YGBWYMD.js";
import "./chunk-UNTQATE2.js";
import "./chunk-5YY6NZNY.js";
import {
  a as a4,
  c,
  u as u4
} from "./chunk-ABB5QLHO.js";
import {
  t as t4
} from "./chunk-YUWVLORR.js";
import "./chunk-DJI5O7V7.js";
import {
  t as t3
} from "./chunk-FFG7BDAP.js";
import "./chunk-I4SHZ6P5.js";
import {
  I as I2,
  i as i3
} from "./chunk-QYDOVVH7.js";
import "./chunk-YSXT2SWC.js";
import "./chunk-YH3SFFF7.js";
import "./chunk-JBU54P54.js";
import {
  C as C2,
  E as E2,
  F,
  O as O2
} from "./chunk-WKVHVZW2.js";
import {
  r as r3
} from "./chunk-5P74D2TG.js";
import "./chunk-YT66FIGM.js";
import "./chunk-3IDXRFXE.js";
import "./chunk-RLZYC2LS.js";
import {
  t as t2
} from "./chunk-TXLJQAAN.js";
import "./chunk-3AIILHI5.js";
import "./chunk-J6T3FJLS.js";
import {
  v as v3
} from "./chunk-SA77Z3WI.js";
import {
  ae,
  se
} from "./chunk-676ANOCK.js";
import "./chunk-6K2UNRXT.js";
import "./chunk-WTKV7W5Z.js";
import "./chunk-D4Y7YHG7.js";
import "./chunk-AL5NKCU5.js";
import "./chunk-6MBDB46F.js";
import "./chunk-D56W4LPT.js";
import {
  e as e5
} from "./chunk-BKOYOJBG.js";
import "./chunk-7JR6S3WL.js";
import "./chunk-CSSLIU64.js";
import "./chunk-CJNDQ2LH.js";
import "./chunk-B4E4X2TN.js";
import "./chunk-HS6YI5DU.js";
import {
  o
} from "./chunk-CDBOQCLE.js";
import "./chunk-RSRUEM5U.js";
import "./chunk-HFJMEXIX.js";
import "./chunk-VYSGSKHB.js";
import "./chunk-DGJJJ2DD.js";
import "./chunk-UAFQMHYI.js";
import "./chunk-IDPLBNJX.js";
import "./chunk-ZHAZR5C3.js";
import "./chunk-P4MNTMCZ.js";
import "./chunk-YH2IYJYF.js";
import "./chunk-BSPKLAHD.js";
import "./chunk-GGHKH3LP.js";
import "./chunk-VS6AHHIY.js";
import "./chunk-5DH2QVPW.js";
import {
  I
} from "./chunk-GPWQGIYV.js";
import "./chunk-WZJNHZ6H.js";
import "./chunk-XMYPMIYH.js";
import {
  l as l2
} from "./chunk-FQLGRQKL.js";
import "./chunk-YBPOKK6D.js";
import "./chunk-H6NTWZSO.js";
import "./chunk-W5ALAOW2.js";
import "./chunk-FHDHOWK5.js";
import "./chunk-LQBHIBXV.js";
import "./chunk-42DUJ2CX.js";
import "./chunk-B35SNV2V.js";
import {
  E,
  _ as _2
} from "./chunk-Z2F5OKVA.js";
import "./chunk-UQA6M3KF.js";
import {
  e as e6
} from "./chunk-GLF3KRAL.js";
import "./chunk-ZLQTPFTL.js";
import "./chunk-WIVZ7SMV.js";
import {
  a as a3
} from "./chunk-O76UVYOO.js";
import "./chunk-QCMUK3QA.js";
import "./chunk-HZSGATFT.js";
import "./chunk-KNMQQRV7.js";
import "./chunk-N5GQOIDP.js";
import "./chunk-NFB6O77E.js";
import "./chunk-AKEHDP75.js";
import {
  s as s3
} from "./chunk-5MMGIT64.js";
import "./chunk-ERD6I7QP.js";
import "./chunk-Z3NX5DTX.js";
import {
  i2 as i,
  p
} from "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import "./chunk-SCHTG6ZQ.js";
import {
  f
} from "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import {
  B,
  O,
  Y,
  b as b3,
  i as i2,
  v as v2,
  y as y2,
  z
} from "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import {
  x
} from "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import {
  u as u3
} from "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-VTH4DAHQ.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import {
  b as b2,
  u as u2
} from "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import {
  P as P2,
  e as e4,
  g as g2,
  j,
  r as r2,
  s as s2,
  v
} from "./chunk-JZBR4X6W.js";
import {
  n as n2
} from "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  C,
  P,
  d
} from "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import {
  _,
  a as a2
} from "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import {
  l
} from "./chunk-C26KUZ46.js";
import {
  b,
  e as e3,
  g,
  s
} from "./chunk-JGDJR5EV.js";
import {
  e as e2,
  r,
  u
} from "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n
} from "./chunk-7RBRCL6S.js";
import {
  A2 as A,
  k,
  t4 as t
} from "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/views/3d/layers/PointCloudLayerViewPerformanceInfo.js
var e9 = class extends t8 {
  constructor(s6, e12, o7, r13, i8) {
    super(s6, e12, -1, o7, r13), this.queue = i8;
  }
};
var o3 = class {
  constructor(s6, e12, o7, r13) {
    this.loading = s6, this.indexLoading = e12, this.processing = o7, this.idleProcessing = r13;
  }
};

// node_modules/@arcgis/core/views/3d/layers/PointCloudWorkerHandle.js
var r8 = class extends h2 {
  constructor(t12) {
    super("PointCloudWorker", "transform", { transform: (t13) => u7(t13) }, t12);
  }
};
function u7(t12) {
  const r13 = [t12.geometryBuffer];
  if (null != t12.primaryAttributeData && t12.primaryAttributeData.buffer && r13.push(t12.primaryAttributeData.buffer), null != t12.modulationAttributeData && t12.modulationAttributeData.buffer && r13.push(t12.modulationAttributeData.buffer), null != t12.filterAttributesData)
    for (const u10 of t12.filterAttributesData)
      null != u10 && u10.buffer && r13.push(u10.buffer);
  for (const u10 of t12.userAttributesData)
    u10.buffer && r13.push(u10.buffer);
  return r13;
}

// node_modules/@arcgis/core/views/3d/layers/i3s/LoDUtil.js
function t10(e12, t12, g4) {
  for (let n6 = 0; n6 < t12.length; n6++)
    r9[n6] = false, o4[n6] = null;
  for (let r13 = 0; r13 < e12.length; r13++)
    n4[r13] = false, l3[r13] = null;
  for (let n6 = 0; n6 < t12.length; n6++) {
    const o7 = h3(t12[n6], e12, g4);
    o7 >= 0 && (r9[n6] = true, null != l3[o7] ? l3[o7].push(t12[n6]) : l3[o7] = [t12[n6]]);
  }
  for (let l5 = 0; l5 < e12.length; l5++) {
    const r13 = h3(e12[l5], t12, g4);
    r13 >= 0 && (n4[l5] = true, null != o4[r13] ? o4[r13].push(e12[l5]) : o4[r13] = [e12[l5]]);
  }
  const u10 = [];
  for (let r13 = 0; r13 < e12.length; r13++)
    null != l3[r13] || n4[r13] || u10.push({ load: [], remove: [e12[r13]] });
  for (let n6 = 0; n6 < t12.length; n6++)
    null != o4[n6] || r9[n6] || u10.push({ load: [t12[n6]], remove: [] });
  for (let n6 = 0; n6 < t12.length; n6++)
    null != o4[n6] && (o4[n6].length > 1 || o4[n6][0] !== t12[n6]) && u10.push({ load: [t12[n6]], remove: o4[n6] });
  for (let n6 = 0; n6 < e12.length; n6++)
    null != l3[n6] && (l3[n6].length > 1 || l3[n6][0] !== e12[n6]) && u10.push({ load: l3[n6], remove: [e12[n6]] });
  return u10;
}
var n4 = [false];
var l3 = [null];
var r9 = [false];
var o4 = [null];
function h3(e12, t12, n6) {
  let l5 = e12;
  for (; l5 > 0; ) {
    const e13 = t12.indexOf(l5);
    if (e13 >= 0)
      return e13;
    l5 = n6.getParentId(l5);
  }
  return t12.indexOf(l5);
}
function g3(t12, n6, l5) {
  return t12.sort((t13, r13) => {
    if (0 === t13.load.length && 0 === r13.load.length)
      return 0;
    if (0 === t13.load.length)
      return -1;
    if (0 === r13.load.length)
      return 1;
    if (0 === t13.remove.length && 0 === r13.remove.length) {
      const o7 = l5.getRenderObb(t13.load[0]).center, h6 = l5.getRenderObb(r13.load[0]).center;
      return P2(o7, n6) - P2(h6, n6);
    }
    if (0 === t13.remove.length)
      return -1;
    if (0 === r13.remove.length)
      return 1;
    if (1 === t13.load.length && 1 === r13.load.length) {
      const o7 = l5.getRenderObb(t13.load[0]).center, h6 = l5.getRenderObb(r13.load[0]).center;
      return P2(o7, n6) - P2(h6, n6);
    }
    if (1 === t13.load.length)
      return -1;
    if (1 === r13.load.length)
      return 1;
    {
      const o7 = l5.getRenderObb(t13.remove[0]).center, h6 = l5.getRenderObb(r13.remove[0]).center;
      return P2(o7, n6) - P2(h6, n6);
    }
  });
}
function u8(e12, t12, n6) {
  for (let l5 = 0; l5 < e12.length; ++l5) {
    const r13 = e12[l5];
    r13.load.length > t12 && 1 === r13.remove.length && d3(e12, r13, n6);
  }
}
function d3(e12, t12, n6) {
  const l5 = [t12.remove[0]], r13 = [];
  for (; 1 === l5.length; ) {
    const e13 = l5.pop();
    r13.length = 0;
    for (let o7 = 0; o7 < t12.load.length; o7++) {
      let h6 = t12.load[o7], g4 = n6.getParentId(h6);
      for (; g4 !== e13; )
        h6 = g4, g4 = n6.getParentId(h6);
      let u10 = l5.indexOf(h6);
      u10 < 0 && (u10 = l5.length, l5.push(h6), r13.push([])), r13[u10].push(t12.load[o7]);
    }
  }
  t12.load = l5;
  for (let o7 = 0; o7 < l5.length; o7++)
    r13[o7].length > 1 ? e12.push({ remove: [l5[o7]], load: r13[o7] }) : l5[o7] = r13[o7][0];
}

// node_modules/@arcgis/core/views/3d/layers/i3s/PagedNodeIndex.js
var i7 = class {
  constructor(t12, s6, n6) {
    this._pages = [], this.pageSize = 0, this._nodeSR = t12, this._renderSR = s6, this._renderSRSphericalPCPF = a3(s6), this.pageSize = n6;
  }
  addPage(e12, t12, s6 = 0) {
    for (; this._pages.length < e12; )
      this._pages.push(null);
    r10(t12, this._nodeSR, this._renderSR, s6, this._renderSRSphericalPCPF), this._pages[e12] = { nodes: t12, parents: new Uint32Array(this.pageSize) }, p2(this._pages, this.pageSize);
  }
  hasPage(e12) {
    return !!this._pages[e12];
  }
  getNode(e12) {
    const t12 = this.pageSize;
    return this._pages[a5(e12, t12)].nodes[h4(e12, t12)];
  }
  getRenderObb(e12) {
    const t12 = this.pageSize;
    return this._pages[a5(e12, t12)].nodes[h4(e12, t12)].obbInRenderSR;
  }
  setRenderObb(e12, t12) {
    const s6 = this.pageSize;
    this._pages[a5(e12, s6)].nodes[h4(e12, s6)].obbInRenderSR.copy(t12);
  }
  getParentId(e12) {
    const t12 = this.pageSize;
    return this._pages[a5(e12, t12)].parents[h4(e12, t12)];
  }
  hasNodes(e12, t12) {
    const s6 = a5(e12, this.pageSize), n6 = a5(e12 + t12 - 1, this.pageSize);
    for (let i8 = s6; i8 <= n6; i8++)
      if (null == this._pages[i8])
        return false;
    return true;
  }
  forEachNodeId(e12) {
    for (let t12 = 0; t12 < this._pages.length; t12++) {
      const s6 = this._pages[t12];
      if (s6)
        for (let n6 = 0; n6 < s6.nodes.length; n6++)
          e12(t12 * this.pageSize + n6);
    }
  }
  createVisibilityTraverse() {
    const e12 = { index: this, queue: [], masks: [], tempAabb: i2() };
    return (t12, s6) => o5(e12, t12, s6);
  }
};
function o5(e12, t12, i8) {
  const o7 = e12.index;
  if (!o7.hasNodes(0, 1))
    return;
  const r13 = e12.queue;
  r13.length = 0, r13.push(0);
  const p3 = e12.masks;
  for (p3.length = 0, p3.push(0); r13.length > 0; ) {
    const h6 = r13.pop();
    let g4 = p3.pop();
    const l5 = o7.getNode(h6), c3 = o7.getRenderObb(h6);
    let u10 = true;
    if (null != t12.clippingBox) {
      const i9 = 1 << t12.frustum.length;
      g4 & i9 || (c3.toAaBoundingBox(e12.tempAabb), b3(t12.clippingBox, e12.tempAabb) ? g4 |= i9 : z(t12.clippingBox, e12.tempAabb) || (u10 = false));
    }
    for (let e13 = 0; e13 < t12.frustum.length && u10; e13++) {
      const s6 = 1 << e13;
      if (!(g4 & s6)) {
        const n6 = c3.intersectPlane(t12.frustum[e13]);
        n6 > 0 ? u10 = false : n6 < 0 && (g4 |= s6);
      }
    }
    if (i8.predicate(h6, l5, u10)) {
      const e13 = l5.firstChild, t13 = l5.childCount;
      let s6 = false;
      const n6 = a5(e13, o7.pageSize), c4 = a5(e13 + t13 - 1, o7.pageSize);
      for (let r14 = n6; r14 <= c4; r14++)
        if (!o7.hasPage(r14)) {
          i8.pageMiss(h6, r14), s6 = true;
          break;
        }
      if (!s6)
        for (let i9 = 0; i9 < t13; i9++)
          r13.push(e13 + i9), p3.push(g4);
    }
  }
}
function r10(e12, t12, s6, n6, i8) {
  for (let o7 = 0; o7 < e12.length; o7++) {
    const r13 = e12[o7];
    r13.obb.transform(r13.obbInRenderSR, t12, s6, n6, i8);
  }
}
function p2(e12, t12) {
  const s6 = [0];
  for (; s6.length; ) {
    const n6 = s6.pop(), i8 = e12[a5(n6, t12)].nodes[h4(n6, t12)];
    for (let o7 = 0; o7 < i8.childCount; o7++) {
      const r13 = i8.firstChild + o7;
      null != e12[a5(r13, t12)] && (e12[a5(r13, t12)].parents[h4(r13, t12)] = n6, s6.push(r13));
    }
  }
}
function a5(e12, t12) {
  return e12 / t12 | 0;
}
function h4(e12, t12) {
  return e12 % t12;
}

// node_modules/@arcgis/core/views/3d/layers/i3s/PointCloudRendererUtil.js
function t11(t12) {
  const e12 = t12.renderer, n6 = e12 == null ? void 0 : e12.type, o7 = (e12 == null ? void 0 : e12.toJSON()) ?? null;
  let l5 = null, i8 = false;
  const a6 = t12.attributeStorageInfo;
  "point-cloud-unique-value" === n6 || "point-cloud-stretch" === n6 || "point-cloud-class-breaks" === n6 ? l5 = u9(a6, e12.field) : "point-cloud-rgb" === n6 ? (l5 = r11(a6, e12.field), i8 = null != l5) : (l5 = r11(a6, "RGB"), i8 = null != l5);
  let s6 = null;
  return (e12 == null ? void 0 : e12.colorModulation) && (s6 = u9(a6, e12.colorModulation.field)), { rendererJSON: o7, isRGBRenderer: i8, primaryAttribute: l5, modulationAttribute: s6 };
}
function e10(t12) {
  const e12 = t12.filters;
  return e12 ? e12.map((e13) => ({ filterJSON: e13.toJSON(), attributeInfo: u9(t12.attributeStorageInfo, e13.field) })) : [];
}
function n5(t12) {
  const e12 = t12 == null ? void 0 : t12.pointSizeAlgorithm;
  return e12 && "splat" === e12.type ? e12 : null;
}
function o6(t12) {
  const e12 = t12 == null ? void 0 : t12.pointSizeAlgorithm;
  return e12 && "fixed-size" === e12.type ? e12 : null;
}
function l4(t12) {
  const e12 = t12 == null ? void 0 : t12.pointSizeAlgorithm;
  return !!(e12 == null ? void 0 : e12.type) && "fixed-size" === e12.type;
}
function r11(t12, e12) {
  for (const n6 of t12 ?? [])
    if (n6.name === e12 && null != n6.attributeValues && "UInt8" === n6.attributeValues.valueType && 3 === n6.attributeValues.valuesPerElement)
      return { name: e12, storageInfo: n6, useElevation: false };
  return null;
}
function u9(t12, e12) {
  for (const n6 of t12 ?? [])
    if (n6.name === e12) {
      const t13 = "embedded-elevation" === n6.encoding;
      return t13 ? { name: e12, storageInfo: null, useElevation: t13 } : { name: e12, storageInfo: n6, useElevation: t13 };
    }
  return "elevation" === (e12 == null ? void 0 : e12.toLowerCase()) ? { name: e12, storageInfo: null, useElevation: true } : null;
}

// node_modules/@arcgis/core/views/3d/layers/i3s/PointGraphic.js
var e11 = class extends f {
  constructor(o7) {
    super(o7), this.pointCloudMetadata = null;
  }
};
e([y({ constructOnly: true, clonable: "reference" })], e11.prototype, "pointCloudMetadata", void 0), e11 = e([a("esri.views.3d.layers.i3s.PointGraphic")], e11);

// node_modules/@arcgis/core/views/3d/layers/i3s/PointHighlights.js
var h5 = class {
  constructor(e12) {
    this._context = e12, this._highlights = /* @__PURE__ */ new Set();
  }
  get empty() {
    return 0 === this._highlights.size;
  }
  destroy() {
    this._highlights = null;
  }
  add(t12) {
    const i8 = new s5(t12);
    return this._highlights.add(i8), this._enableSet(i8), e3(() => this._removeSet(i8));
  }
  _removeSet(e12) {
    this._disableSet(e12), this._highlights.delete(e12);
  }
  _enableSet(e12) {
    e12.enabled || (e12.enabled = true, this._context.forEachNode((t12) => this._enableSetForNode(e12, t12)));
  }
  _enableSetForNode(e12, t12) {
    if (!e12.enabled)
      return;
    const i8 = e12.ids.get(t12.id);
    i8 && i8.forEach((i9) => this._context.addHighlight(t12, i9, e12.id));
  }
  _disableSet(e12) {
    e12.enabled && (e12.enabled = false, this._context.forEachNode((t12) => this._disableSetForNode(e12, t12)));
  }
  _disableSetForNode(e12, t12) {
    e12.enabled || this._context.removeHighlight(t12, e12.id);
  }
  nodeAdded(e12) {
    this._highlights.forEach((t12) => this._enableSetForNode(t12, e12));
  }
  nodeRemoved(e12) {
    this._highlights.forEach((t12) => this._disableSetForNode(t12, e12));
  }
  removeAll() {
    this._highlights.forEach((e12) => this._disableSet(e12));
  }
};
var s5 = class {
  constructor(e12) {
    this.id = new r3(t2.Highlight), this.ids = /* @__PURE__ */ new Map(), this.enabled = false;
    for (const t12 of e12)
      null != t12 && this._add(t12.nodeId, t12.pointId);
  }
  _add(e12, t12) {
    const i8 = this.ids.get(e12);
    i8 ? i8.add(t12) : this.ids.set(e12, /* @__PURE__ */ new Set([t12]));
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/PointRendererTechnique.js
var m2 = class _m extends r4 {
  constructor(e12, r13, i8) {
    super(e12, r13, i8);
  }
  initializeProgram(e12) {
    return new r5(e12.rctx, _m.shader.get().build(this.configuration), O3);
  }
  initializePipeline() {
    return S({ depthTest: { func: O2.LESS }, depthWrite: o2, colorWrite: _3, stencilWrite: this.configuration.hasOccludees ? e7 : null, stencilTest: this.configuration.hasOccludees ? f2 : null });
  }
};
m2.shader = new t5(C3, () => import("./PointRenderer.glsl-IAYM4W3Y.js"));

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/PointRendererTechniqueConfiguration.js
var r12 = class extends t6 {
  constructor() {
    super(...arguments), this.output = o.Color, this.hasSlicePlane = false, this.drawScreenSize = false, this.useFixedSizes = false, this.hasOccludees = false, this.clippingEnabled = false;
  }
};
e([r6({ count: o.COUNT })], r12.prototype, "output", void 0), e([r6()], r12.prototype, "hasSlicePlane", void 0), e([r6()], r12.prototype, "drawScreenSize", void 0), e([r6()], r12.prototype, "useFixedSizes", void 0), e([r6()], r12.prototype, "hasOccludees", void 0), e([r6()], r12.prototype, "clippingEnabled", void 0), e([r6({ constValue: true })], r12.prototype, "hasSliceInVertexProgram", void 0);

// node_modules/@arcgis/core/views/3d/layers/i3s/PointRenderer.js
var V2 = { positions: [new t3(e6.POSITION, 3, C2.FLOAT, 0, 12)], colors: [new t3(e6.COLOR, 3, C2.UNSIGNED_BYTE, 0, 3, true)] };
var W = class extends d2 {
  constructor(e12) {
    super(e12), this.type = i5.PCL, this.isGround = false, this._passParameters = new y3(), this._highlights = new h5({ forEachNode: (e13) => this.forEachNode(e13), addHighlight: (e13, t12, s6) => this._addHighlight(e13, t12, s6), removeHighlight: (e13, t12) => this._removeHighlight(e13, t12) }), this.produces = /* @__PURE__ */ new Map([[A2.OPAQUE_MATERIAL, (e13) => e13 !== o.LinearDepth && (e13 !== o.Highlight || !this._highlights.empty)], [A2.OPAQUE_NO_SSAO_DEPTH, (e13) => e13 === o.LinearDepth]]), this.layerUid = "", this._slicePlaneEnabled = false, this._techniqueConfig = new r12(), this._nodes = new l();
  }
  initializeRenderContext(e12) {
    this._context = e12, e12.requestRender();
  }
  uninitializeRenderContext() {
  }
  intersect(e12, t12, s6, i8) {
    const r13 = n2(), f3 = n2(), P3 = n2(), b4 = n2(), R = E(), w = e12.camera.perScreenPixelRatio / 2, A4 = e12.camera.near;
    e4(f3, i8, s6);
    const j2 = 1 / s2(f3);
    g2(f3, f3, j2), j(P3, f3), s3(R, f3[0], f3[1], f3[2], -P2(f3, s6));
    const q = new $(), E3 = new $(), I3 = new Array(), L2 = i2(), v4 = i2(this._passParameters.clipBox);
    Y(v4, -s6[0], -s6[1], -s6[2], v4), this._nodes.forAll((o7) => {
      const a6 = o7.splatSize * this._passParameters.scaleFactor;
      let l5 = o7.obb.minimumDistancePlane(R), d4 = o7.obb.maximumDistancePlane(R);
      l5 -= Y2(a6, l5 + A4, this._passParameters, w, o7.isLeaf), d4 -= Y2(a6, d4 + A4, this._passParameters, w, o7.isLeaf);
      const u10 = d4 < 0, p3 = null != q.dist && null != E3.dist && q.dist < l5 * j2 && E3.dist > d4 * j2;
      if (u10 || p3)
        return;
      const S2 = Q(a6, d4 + A4, this._passParameters, w, o7.isLeaf);
      if (!o7.obb.intersectRay(s6, f3, S2))
        return;
      const x2 = S2 * S2;
      o7.obb.toAaBoundingBox(L2), Y(L2, -s6[0], -s6[1], -s6[2], L2);
      const z2 = !b3(v4, L2);
      e4(b4, o7.origin, s6);
      const y4 = o7.coordinates.length / 3;
      for (let n6 = 0; n6 < y4; n6++) {
        if (r13[0] = b4[0] + o7.coordinates[3 * n6], r13[1] = b4[1] + o7.coordinates[3 * n6 + 1], r13[2] = b4[2] + o7.coordinates[3 * n6 + 2], z2 && !y2(v4, r13))
          continue;
        const l6 = P2(r13, f3), d5 = v(r13) - l6 * l6;
        if (d5 > x2)
          continue;
        let u11 = l6 + A4;
        const p4 = Y2(a6, u11, this._passParameters, w, o7.isLeaf);
        if (l6 - p4 < 0)
          continue;
        u11 -= p4;
        const m3 = Q(a6, u11, this._passParameters, w, o7.isLeaf);
        if (d5 > m3 * m3)
          continue;
        const g4 = (l6 - p4) * j2, S3 = (e13) => (e13.point = J(o7, n6, e13.point), e13.dist = g4, e13.normal = P3, e13.node = o7, e13.pointId = n6, e13.layerUid = this.layerUid, e13);
        if ((null == q.dist || g4 < q.dist) && (null == t12 || t12(s6, i8, g4)) && S3(q), e12.options.store !== e8.MIN && (null == E3.dist || g4 > E3.dist) && (null == t12 || t12(s6, i8, g4)) && S3(E3), e12.options.store === e8.ALL && (null == t12 || t12(s6, i8, g4))) {
          const e13 = new $();
          I3.push(S3(e13));
        }
      }
    });
    const F3 = (e13) => {
      const { layerUid: t13, node: s7, pointId: i9 } = e13;
      return new s4(e13.point, t13, i9, () => this.createGraphic(s7, i9, e13.point));
    }, N = (e13, t13) => {
      const s7 = F3(t13);
      e13.set(this.type, s7, t13.dist, t13.normal);
    };
    if (ee(q)) {
      const t13 = e12.results.min;
      (null == t13.dist || q.dist < t13.dist) && N(t13, q);
    }
    if (ee(E3) && e12.options.store !== e8.MIN) {
      const t13 = e12.results.max;
      (null == t13.dist || E3.dist > t13.dist) && N(t13, E3);
    }
    if (e12.options.store === e8.ALL) {
      const t13 = l2(s6, i8);
      for (const s7 of I3) {
        const i9 = G(t13);
        N(i9, s7), e12.results.all.push(i9);
      }
    }
  }
  prepareTechnique(e12) {
    return 0 === this._nodes.length || e12.output !== o.Color && (e12.output !== o.LinearDepth || e12.bindParameters.slot !== A2.OPAQUE_NO_SSAO_DEPTH) && e12.output !== o.Highlight ? null : (this._nodes.forAll((t12) => {
      null == t12.vao && this._initNode(e12, t12);
    }), this._techniqueConfig.drawScreenSize = this._passParameters.drawScreenSpace, this._techniqueConfig.useFixedSizes = this._passParameters.useFixedSizes, this._techniqueConfig.hasSlicePlane = this._slicePlaneEnabled, this._techniqueConfig.hasOccludees = e12.bindParameters.hasOccludees, this._techniqueConfig.clippingEnabled = this._clippingEnabled, this._techniqueConfig.output = e12.output, this._context.techniqueRepository.releaseAndAcquire(m2, this._techniqueConfig, this._technique));
  }
  renderNode(e12, t12) {
    const s6 = e12.rctx, i8 = s6.bindTechnique(t12, e12.bindParameters, this._passParameters), r13 = e12.output === o.Highlight;
    this._nodes.forAll((t13) => {
      0 === t13.coordinates.length || r13 && !t13.highlights || (i8.bindDraw(t13, e12.bindParameters, this._passParameters), s6.bindVAO(t13.vao), r13 ? this._renderHighlightFragments(s6, t13) : s6.drawArrays(E2.POINTS, 0, t13.coordinates.length / 3));
    });
  }
  _renderHighlightFragments(e12, t12) {
    const s6 = t12.highlights;
    if (null == s6)
      return;
    let i8 = s6[0].component, r13 = i8 + 1;
    for (let o7 = 1; o7 < s6.length; o7++) {
      const t13 = s6[o7].component;
      if (t13 !== r13) {
        const s7 = r13 - i8;
        s7 > 0 && e12.drawArrays(E2.POINTS, i8, s7), i8 = t13;
      }
      r13 = t13 + 1;
    }
    const n6 = r13 - i8;
    n6 > 0 && e12.drawArrays(E2.POINTS, i8, n6);
  }
  set useFixedSizes(e12) {
    this._passParameters.useFixedSizes !== e12 && (this._passParameters.useFixedSizes = e12, this._requestRender());
  }
  get useFixedSizes() {
    return this._passParameters.useFixedSizes;
  }
  set scaleFactor(e12) {
    this._passParameters.scaleFactor !== e12 && (this._passParameters.scaleFactor = e12, this._requestRender());
  }
  get scaleFactor() {
    return this._passParameters.scaleFactor;
  }
  set minSizePx(e12) {
    this._passParameters.minSizePx !== e12 && (this._passParameters.minSizePx = e12, this._requestRender());
  }
  get minSizePx() {
    return this._passParameters.minSizePx;
  }
  set useRealWorldSymbolSizes(e12) {
    this._passParameters.useRealWorldSymbolSizes !== e12 && (this._passParameters.useRealWorldSymbolSizes = e12, this._requestRender());
  }
  get useRealWorldSymbolSizes() {
    return this._passParameters.useRealWorldSymbolSizes;
  }
  set size(e12) {
    this._passParameters.size !== e12 && (this._passParameters.size = e12, this._requestRender());
  }
  get size() {
    return this._passParameters.size;
  }
  set sizePx(e12) {
    this._passParameters.sizePx !== e12 && (this._passParameters.sizePx = e12, this._requestRender());
  }
  get sizePx() {
    return this._passParameters.sizePx;
  }
  set clippingBox(e12) {
    O(this._passParameters.clipBox, e12 || v2);
  }
  get _clippingEnabled() {
    return !B(this._passParameters.clipBox, v2, (e12, t12) => e12 === t12);
  }
  get slicePlaneEnabled() {
    return this._slicePlaneEnabled;
  }
  set slicePlaneEnabled(e12) {
    this._slicePlaneEnabled !== e12 && (this._slicePlaneEnabled = e12, this._requestRender());
  }
  addNode(e12) {
    this._nodes.push(e12), this._highlights.nodeAdded(e12), this._requestRender();
  }
  removeNode(e12) {
    let s6 = null;
    return this._nodes.filterInPlace((i8) => i8.id !== e12 || (s6 = i8, i8.vao = r(i8.vao), this._highlights.nodeRemoved(i8), false)), this._requestRender(), s6;
  }
  forEachNode(e12) {
    this._nodes.forAll(e12);
  }
  removeAll() {
    this._nodes.forAll((e12) => e12.vao = r(e12.vao)), this._highlights.removeAll(), this._nodes.clear(), this._requestRender();
  }
  highlight(e12) {
    return this._highlights.add(e12);
  }
  _addHighlight(e12, t12, s6) {
    e12.highlights = X(e12.highlights, t12, s6), this._requestRender();
  }
  _removeHighlight(e12, t12) {
    e12.highlights = Z(e12.highlights, t12), this._requestRender();
  }
  _initNode(e12, t12) {
    const s6 = e12.rctx;
    t12.vao = new r7(s6, O3, V2, { positions: h.createVertex(s6, F.STATIC_DRAW, t12.coordinates), colors: h.createVertex(s6, F.STATIC_DRAW, t12.rgb) });
  }
  _requestRender() {
    this._context && this._context.requestRender();
  }
};
e([y({ constructOnly: true })], W.prototype, "createGraphic", void 0), W = e([a("esri.views.3d.layers.i3s.PointRenderer")], W);
var k2 = class extends O4 {
  constructor(e12, t12, s6, i8, r13, n6, o7, a6, l5 = null, h6 = null) {
    super(s6, r13, t12), this.id = e12, this.obb = i8, this.coordinates = n6, this.rgb = o7, this.attributes = a6, this.pointIdFilterMap = l5, this.highlights = h6;
  }
};
function G2(e12) {
  return e12.hasOwnProperty("splatSize");
}
function Q(e12, t12, s6, i8, r13) {
  if (s6.drawScreenSpace)
    return s6.fixedSize * t12 * i8;
  const n6 = F2(r13) * t12 * i8;
  return s6.useFixedSizes ? Math.min(s6.fixedSize / 2, n6) : s6.screenMinSize > 0 ? Math.min(Math.max(s6.screenMinSize * t12 * i8, e12 / 2), n6) : Math.min(e12 / 2, n6);
}
function Y2(e12, t12, s6, i8, r13) {
  return s6.drawScreenSpace ? 0 : Q(e12, t12, s6, i8, r13);
}
function J(e12, t12, s6) {
  return null == s6 && (s6 = n2()), s6[0] = e12.origin[0] + e12.coordinates[3 * t12], s6[1] = e12.origin[1] + e12.coordinates[3 * t12 + 1], s6[2] = e12.origin[2] + e12.coordinates[3 * t12 + 2], s6;
}
function K(e12) {
  return null != e12.component ? e12.component : -1;
}
function X(e12, t12, s6) {
  null == e12 && (e12 = []);
  const i8 = { component: t12, id: s6 };
  e12.push(i8);
  const r13 = K(i8);
  let n6 = e12.length - 1;
  for (; n6 > 0 && r13 < K(e12[n6 - 1]); )
    [e12[n6 - 1], e12[n6]] = [e12[n6], e12[n6 - 1]], --n6;
  return e12;
}
function Z(e12, t12) {
  if (null == e12)
    return e12;
  const s6 = e12.filter((e13) => e13.id !== t12);
  return 0 === s6.length ? null : s6;
}
var $ = class {
  constructor() {
    this.node = null, this.pointId = null, this.point = null, this.dist = null, this.normal = null, this.layerUid = "";
  }
};
function ee(e12) {
  return null != e12.dist && null != e12.point && null != e12.pointId && null != e12.node;
}

// node_modules/@arcgis/core/views/3d/layers/PointCloudLayerView3D.js
var me = 8;
var ge = E();
var fe = class extends i6(n3(u6)) {
  constructor() {
    super(...arguments), this.type = "point-cloud-3d", this.maximumPointCount = 4e6, this.slicePlaneEnabled = false, this._renderer = null, this._rendererAdded = false, this._renderedNodes = /* @__PURE__ */ new Set(), this._nodeScales = /* @__PURE__ */ new Map(), this._updateViewNeeded = true, this._lodFactor = 1, this._maxLoggedBoxWarnings = 5, this._pageMultiplier = 1, this._nodeLoadEpoch = 0, this._indexQueue = [], this._workQueue = new Array(), this._idleQueue = new i3(), this._indexPagesLoading = /* @__PURE__ */ new Map(), this._loadingNodes = /* @__PURE__ */ new Map(), this._recalcWork = true, this._layerIsVisible = false, this._codedDomainPopulationPromise = null, this._codedDomainPopulationAbortController = null, this._totalWork = 0, this._index = null, this._loadingInitNodePage = false, this._nodeIdArray = [], this.ignoresMemoryFactor = false;
  }
  get baseUrl() {
    return this.layer.parsedUrl.path;
  }
  get pointScale() {
    var _a;
    const e12 = n5((_a = this.layer) == null ? void 0 : _a.renderer), t12 = 1;
    return null != (e12 == null ? void 0 : e12.scaleFactor) ? e12.scaleFactor : t12;
  }
  get useRealWorldSymbolSizes() {
    var _a;
    const e12 = o6((_a = this.layer) == null ? void 0 : _a.renderer), t12 = false;
    return null != (e12 == null ? void 0 : e12.useRealWorldSymbolSizes) ? e12.useRealWorldSymbolSizes : t12;
  }
  get pointSize() {
    var _a;
    const e12 = o6((_a = this.layer) == null ? void 0 : _a.renderer), t12 = 0;
    return null != (e12 == null ? void 0 : e12.size) ? e12.size : t12;
  }
  get inverseDensity() {
    var _a;
    const e12 = 96;
    return ((_a = this.layer) == null ? void 0 : _a.renderer) ? 1 * e12 / this.layer.renderer.pointsPerInch : 5;
  }
  get availableFields() {
    const e12 = t11(this.layer), t12 = /* @__PURE__ */ new Set();
    e12.primaryAttribute && t12.add(e12.primaryAttribute.name), e12.modulationAttribute && t12.add(e12.modulationAttribute.name);
    const i8 = e10(this.layer);
    if (i8)
      for (const r13 of i8)
        r13.attributeInfo && t12.add(r13.attributeInfo.name);
    if (this.layer.outFields)
      for (const r13 of x(this.layer.fieldsIndex, this.layer.outFields))
        t12.add(r13);
    return Array.from(t12);
  }
  get _clippingBox() {
    if (!this.view || !this.view.clippingArea)
      return null;
    const e12 = i2(), t12 = this.view.renderSpatialReference;
    return m(this.view.clippingArea, e12, t12) ? e12 : null;
  }
  get _elevationOffset() {
    const e12 = this.layer && this.layer.elevationInfo;
    return e12 && "absolute-height" === e12.mode ? v3(e12, this.layer.spatialReference) : 0;
  }
  initialize() {
    const e12 = this.view.resourceController, t12 = Ne(e12);
    this._worker = new r8(t12), this.addResolvingPromise(this._worker.promise), this._tmpPoint = e5(0, 0, 0, this.layer.spatialReference), ae(this.layer), se(this.layer, this.view), this._indexRequester = e12.createStreamDataRequester(A3.I3S_INDEX), this._dataRequester = e12.createStreamDataRequester(A3.I3S_DATA), this._initRenderer();
    const i8 = this._initNodePages(), r13 = this.view.resourceController.memoryController;
    this._memCache = r13.newCache(`pcl-${this.layer.uid}`), this._updatingHandles.add(() => this._clippingBox, () => this._setUpdateViewNeeded(), P), this._updatingHandles.add(() => this._elevationOffset, () => this._elevationOffsetChanged(), P), this._updatingHandles.add(() => this.layer.renderer, () => this._rendererChanged(), P), this._updatingHandles.add(() => this.layer.filters, () => this._reload(), P), this._updatingHandles.add(() => this.layer.outFields, () => this._reload(), P), this._updatingHandles.add(() => this.layer.effectiveScaleRange, () => this._setUpdateViewNeeded()), this._updatingHandles.add(() => this.view.state.contentCamera, () => this._setUpdateViewNeeded()), this.addHandles([this.view.basemapTerrain.on("scale-change", (e13) => this._scaleUpdateHandler(e13)), d(() => this.view.quality, () => this._setUpdateViewNeeded(), C)]), this.addResolvingPromise(i8), this.when(() => {
      this.addHandles([e12.scheduler.registerTask(I2.POINT_CLOUD_LAYER, this), e12.scheduler.registerIdleStateCallbacks(() => this._idleBegin(), () => this._idleEnd()), this._updatingHandles.add(() => this.suspended, (e13) => {
        e13 ? this._clearNodeState() : this._setUpdateViewNeeded();
      }, P)]);
    }, () => {
      this._updatingHandles.removeAll(), this.removeAllHandles();
    });
  }
  _setUpdateViewNeeded() {
    this._updateViewNeeded = true, this._updateLoading();
  }
  destroy() {
    this.cancelLoading(), this._worker = u(this._worker), this._destroyRenderer(), this._memCache = u(this._memCache), this._codedDomainPopulationAbortController = e2(this._codedDomainPopulationAbortController), this._codedDomainPopulationPromise = null;
  }
  _initRenderer() {
    this._renderer = new W({ createGraphic: (e12, t12, i8) => this._createGraphic(e12, t12, i8) }), this._renderer.layerUid = this.layer.uid, this._updatingHandles.add(() => this._clippingBox, (e12) => this._renderer.clippingBox = e12, P), this._updatingHandles.add(() => this.suspended, (e12) => this._setPointsVisible(!e12), P), this._updatingHandles.add(() => this.pointScale, (e12) => this._renderer.scaleFactor = e12, P), this._renderer.minSizePx = Math.sqrt(2), this._updatingHandles.add(() => this.useRealWorldSymbolSizes, (e12) => this._renderer.useRealWorldSymbolSizes = e12, P), this._updatingHandles.add(() => this.pointSize, (e12) => {
      const t12 = u3(e12);
      this._renderer.size = e12, this._renderer.sizePx = t12;
    }, P), this._updatingHandles.add(() => this.slicePlaneEnabled, (e12) => this._renderer.slicePlaneEnabled = e12, P), this._updatingHandles.add(() => this.inverseDensity, () => this._setUpdateViewNeeded(), P), this._updatingHandles.add(() => this.maximumPointCount, () => this._setUpdateViewNeeded(), P), this._updatingHandles.add(() => this.view.qualitySettings.sceneService.pointCloud.lodFactor, (e12) => {
      this._lodFactor = e12, this._setUpdateViewNeeded();
    }, P);
  }
  _destroyRenderer() {
    this._renderer.removeAll(), this._setPointsVisible(false);
  }
  _createGraphic(e12, t12, i8) {
    const r13 = null != e12.pointIdFilterMap ? e12.pointIdFilterMap[t12] : t12, s6 = L(this.view, i8), o7 = this._createGraphicAttributes(e12, r13);
    return new e11({ pointCloudMetadata: { nodeId: e12.id, pointIndexInNode: t12, attributePointIndexInNode: r13, epoch: this._nodeLoadEpoch }, geometry: s6, attributes: o7, layer: this.layer, sourceLayer: this.layer });
  }
  _createGraphicAttributes(e12, t12) {
    const i8 = {};
    for (const r13 of e12.attributes)
      this._encodeGraphicAttribute(r13.attributeInfo, r13.values, t12, i8);
    return i8;
  }
  _encodeGraphicAttribute(e12, t12, i8, r13) {
    var _a;
    const s6 = (_a = e12.storageInfo) == null ? void 0 : _a.attributeValues, o7 = (s6 == null ? void 0 : s6.valuesPerElement) ?? 1;
    if (1 === o7)
      r13[e12.name] = t12[i8];
    else if ("UInt8" === (s6 == null ? void 0 : s6.valueType) && o7 <= 4) {
      let s7 = 0;
      const n6 = i8 * o7;
      for (let e13 = n6; e13 < n6 + o7; e13++)
        s7 = (s7 << 8) + t12[e13];
      r13[e12.name] = s7;
    } else
      r13[e12.name] = void 0;
  }
  _setPointsVisible(e12) {
    e12 && !this._rendererAdded ? (this.view._stage.addRenderPlugin(this._renderer), this._rendererAdded = true) : !e12 && this._rendererAdded && (this.view._stage.removeRenderPlugin(this._renderer), this._rendererAdded = false);
  }
  _rendererChanged() {
    this._renderer.useFixedSizes = l4(this.layer.renderer), this._reload();
  }
  _reload() {
    this._clearNodeState(), this._memCache.clear(), this._setUpdateViewNeeded();
  }
  _elevationOffsetChanged() {
    this._clearNodeState(), this._memCache.clear(), this._initNodePages();
  }
  _scaleUpdateHandler(e12) {
    const t12 = this.layer.effectiveScaleRange;
    u5(t12.minScale, t12.maxScale) ? i4(e12.extent, e12.spatialReference, we, this.layer.spatialReference) && (this._nodeScales.forEach((t13, i8) => {
      if (!this._renderedNodes.has(i8))
        return void this._nodeScales.delete(i8);
      const r13 = this._index.getNode(i8);
      b2(we, r13.obb.center) && this._nodeScales.set(i8, e12.scale);
    }), this._setUpdateViewNeeded()) : this._nodeScales.clear();
  }
  _displayNodes(e12) {
    this._workQueue = t10([...this._renderedNodes], e12, this._index), g3(this._workQueue, this.view.state.contentCamera.viewForward, this._index), u8(this._workQueue, me, this._index), this._updateQueues(), this._totalWork = this._computeWork(), this._updateLoading(), this._layerIsVisible = e12.length > 0 || this._loadingInitNodePage, this.notifyChange("suspended");
  }
  cancelLoading() {
    this._cancelNodeLoading(), this._cancelIndexLoading();
  }
  _cancelNodeLoading() {
    const e12 = new Array();
    this._loadingNodes.forEach(({ abortController: t12 }) => e12.push(t12)), this._loadingNodes.clear();
    for (const t12 of e12)
      t12.abort();
    this._workQueue = [], this._idleQueue.cancelAll(), this._totalWork = this._computeWork(), this._updateLoading();
  }
  _updateQueues() {
    const e12 = /* @__PURE__ */ new Set();
    this._workQueue.forEach((t13) => t13.load.forEach((t14) => e12.add(t14)));
    const t12 = new Array(), i8 = /* @__PURE__ */ new Map();
    this._loadingNodes.forEach((r13, s6) => {
      e12.has(s6) ? i8.set(s6, r13) : t12.push(r13);
    }), this._loadingNodes = i8;
    for (const { abortController: r13 } of t12)
      r13.abort();
    this._workQueue = this._workQueue.filter((e13) => {
      for (const t13 of e13.load)
        if (this._loadingNodes.has(t13))
          return this._recalcWork = true, false;
      return true;
    }), this._totalWork = this._computeWork(), this._updateLoading();
  }
  _cancelIndexLoading() {
    this._indexQueue = [], this._indexPagesLoading.forEach(({ abortController: e12 }) => e12.abort()), this._indexPagesLoading.clear(), this._totalWork = this._computeWork(), this._updateLoading();
  }
  _clearNodeState() {
    this._nodeLoadEpoch++, this._renderedNodes.forEach((e12) => this._removeFromRenderer(e12)), this._cancelNodeLoading();
  }
  _idleBegin() {
    this._setUpdateViewNeeded();
  }
  _idleEnd() {
    this._setUpdateViewNeeded();
  }
  get running() {
    return this.suspended ? this._updateViewNeeded : this._updateViewNeeded || this._indexQueue.length > 0 || this._workQueue.length > 0 || this._idleQueue.running;
  }
  runTask(e12) {
    if (this.suspended) {
      if (this._updateViewNeeded) {
        this._updateViewNeeded = false;
        const e13 = this._isRootNodeVisible();
        e13 !== this._layerIsVisible && (this._layerIsVisible = e13, this.notifyChange("suspended")), this._updateLoading();
      }
    } else {
      for (e12.run(() => this._updateWorkQueues()); this._indexQueue.length > 0 && e12.run(() => this._processIndexQueue()); )
        ;
      this._processWorkQueue(e12), this._idleQueue.runTask(e12);
    }
  }
  _processIndexQueue() {
    const e12 = this._indexQueue.shift(), t12 = this._loadNodePage(e12);
    return this._indexPagesLoading.set(e12, t12), t12.promise.then((t13) => {
      this._index.addPage(e12, t13, this._elevationOffset), this._setUpdateViewNeeded();
    }).then(() => {
      this._indexPagesLoading.delete(e12);
    }, () => {
      this._indexPagesLoading.delete(e12);
    }), true;
  }
  _processWorkQueue(e12) {
    for (; !e12.done; ) {
      const t12 = this._scheduleWorkEntry();
      if (null == t12)
        return void e12.madeProgress();
      this._processWorkEntry(t12), e12.madeProgress();
    }
  }
  _scheduleWorkEntry() {
    let e12 = this._workQueue.length;
    for (; e12--; ) {
      const e13 = this._workQueue.shift();
      if (!e13.remove.find((e14) => !this._renderedNodes.has(e14)))
        return e13;
      this._workQueue.push(e13);
    }
    return null;
  }
  _processWorkEntry(e12) {
    if (0 !== e12.load.length)
      Promise.all(e12.load.map((e13) => {
        const t12 = new AbortController(), i8 = this._memCache.pop(e13.toString());
        return null != i8 ? this._loadingNodes.set(e13, { abortController: t12, promise: Promise.resolve(i8) }) : this._loadingNodes.has(e13) || this._loadingNodes.set(e13, { abortController: t12, promise: this._loadNode(e13, t12.signal) }), this._loadingNodes.get(e13).promise;
      })).then((t12) => {
        for (let i8 = 0; i8 < e12.load.length; i8++)
          if (t12[i8]) {
            const r13 = this._setupRendererData(e12.load[i8], t12[i8]);
            this._addToRenderer(r13);
          }
        for (const i8 of e12.remove)
          this._removeFromRenderer(i8);
      }).catch(() => {
      }).then(() => {
        for (const t12 of e12.load)
          this._loadingNodes.delete(t12);
        this._updateLoading(), this._recalcWork && !this._idleQueue.running && 0 === this._indexQueue.length && 0 === this._loadingNodes.size && (this._recalcWork = false, this._setUpdateViewNeeded());
      }), this._updateLoading();
    else
      for (const t12 of e12.remove)
        this._removeFromRenderer(t12);
  }
  async _populateClassCodeCodedDomain(e12, t12) {
    var _a, _b, _c;
    const r13 = "CLASS_CODE", s6 = this.layer.fieldsIndex.get(r13);
    if (!s6 || s6.domain)
      return;
    if (!e12.includes(s6.name))
      return;
    const o7 = await _(this.layer.queryCachedStatistics(r13, { signal: t12 }));
    if (false === o7.ok)
      return;
    const n6 = (_c = (_b = (_a = o7.value) == null ? void 0 : _a.stats) == null ? void 0 : _b.labels) == null ? void 0 : _c.labels;
    n6 && Array.isArray(n6) && (s6.domain = new i({ name: "CLASS_CODE", codedValues: n6.map((e13) => new p({ code: e13.value, name: e13.label })) }));
  }
  async prepareFetchPopupFeatures(e12) {
    return this._codedDomainPopulationPromise || (this._codedDomainPopulationAbortController = new AbortController(), this._codedDomainPopulationPromise = this._populateClassCodeCodedDomain(e12, this._codedDomainPopulationAbortController.signal).then(() => {
      this._codedDomainPopulationAbortController = null;
    })), this._codedDomainPopulationPromise;
  }
  async whenGraphicAttributes(e12, i8) {
    const s6 = this._splitGraphicsPerNode(e12), o7 = this.layer.attributeStorageInfo, n6 = i8.map((e13) => u9(o7, e13)).filter(k), a6 = async (e13, t12) => {
      const i9 = this._index.getNode(t12);
      await a2(n6, async (t13) => {
        const r13 = t13.useElevation ? await this._loadElevationAttributeFromGeometry(i9.resourceId) : await this._loadAndParseAttribute(i9, t13);
        if (r13) {
          for (const i10 of e13)
            if (this._isValidPointGraphic(i10)) {
              const e14 = i10.pointCloudMetadata.attributePointIndexInNode;
              this._encodeGraphicAttribute(t13, r13, e14, i10.attributes);
            }
        }
      });
    }, d4 = [];
    return s6.forEach((e13, t12) => {
      d4.push(a6(e13, t12));
    }), await Promise.allSettled(d4), e12;
  }
  _isValidPointGraphic(e12) {
    var _a;
    return e12 instanceof e11 && ((_a = e12.pointCloudMetadata) == null ? void 0 : _a.epoch) === this._nodeLoadEpoch;
  }
  _splitGraphicsPerNode(e12) {
    const t12 = /* @__PURE__ */ new Map();
    for (const i8 of e12) {
      if (!this._isValidPointGraphic(i8))
        continue;
      const e13 = i8.pointCloudMetadata, r13 = t12.get(e13.nodeId);
      r13 ? r13.push(i8) : t12.set(e13.nodeId, [i8]);
    }
    return t12;
  }
  async _loadAndParseAttribute(e12, t12) {
    const i8 = await this._loadAttribute(e12.resourceId, t12, null);
    return null != i8 ? c({ attributeInfo: t12, buffer: i8 }, null, e12.vertexCount) : null;
  }
  async _loadElevationAttributeFromGeometry(e12) {
    const t12 = this.layer.store.defaultGeometrySchema, i8 = u4(t12, await this._loadGeometry(e12, null));
    return a4(i8, i8.length / 3);
  }
  highlight(e12) {
    if (!e12)
      return e3();
    const t12 = V.isCollection(e12) ? e12.toArray() : Array.isArray(e12) ? e12 : [e12];
    return this._renderer.highlight(t12.map((e13) => this._graphicToPointDefinition(e13)));
  }
  _graphicToPointDefinition(e12) {
    if (!this._isValidPointGraphic(e12))
      return null;
    const { nodeId: t12, pointIndexInNode: i8 } = e12.pointCloudMetadata;
    return null != t12 && null != i8 ? { nodeId: t12, pointId: i8 } : null;
  }
  _computeWork() {
    let e12 = 0;
    for (const t12 of this._workQueue)
      e12 += t12.load.length + t12.remove.length;
    return e12 += this._loadingNodes.size, e12 += (this._indexQueue.length + this._indexPagesLoading.size) * this._index.pageSize, e12 += this._loadingInitNodePage ? 100 : 0, e12 += this._updateViewNeeded ? 100 : 0, e12;
  }
  get updatingProgressValue() {
    if (this.suspended)
      return this._updateViewNeeded ? 0 : 1;
    const e12 = this._computeWork();
    return 1 - Math.min(this._totalWork, e12) / this._totalWork;
  }
  _updateLoading() {
    this.notifyChange("updating"), this.notifyChange("updatingProgressValue");
  }
  canResume() {
    return super.canResume() && this._layerIsVisible;
  }
  isUpdating() {
    return this.suspended ? this._updateViewNeeded : this._computeWork() > 0;
  }
  _initNodePages() {
    const e12 = this.layer.store.index, t12 = e12.nodesPerPage || e12.nodePerIndexBlock;
    return this._index = new i7(this.layer.spatialReference, this.view.renderCoordsHelper.spatialReference, t12), this._cancelIndexLoading(), this._traverseVisible = this._index.createVisibilityTraverse(), this._loadingInitNodePage = true, this._layerIsVisible = true, this.notifyChange("suspended"), this._updateLoading(), this._pageMultiplier = null != e12.nodesPerPage ? 1 : e12.nodePerIndexBlock, this._loadNodePage(0).promise.then((e13) => {
      this._index.addPage(0, e13, this._elevationOffset), this._loadingInitNodePage = false, this._setUpdateViewNeeded();
    });
  }
  _loadNodePage(e12) {
    const t12 = new AbortController(), i8 = `${this.baseUrl}/nodepages/${e12 * this._pageMultiplier}`;
    return { promise: this._requestNodePage(i8, t12.signal).then((t13) => t13.nodes.map((t14, i9) => ({ resourceId: null != t14.resourceId ? t14.resourceId : e12 * this._index.pageSize + i9, obb: I.fromJSON(t14.obb), obbInRenderSR: new I(), firstChild: t14.firstChild, childCount: t14.childCount, vertexCount: t14.vertexCount ?? t14.pointCount, lodThreshold: t14.lodThreshold ?? t14.effectiveArea }))), abortController: t12 };
  }
  _updateWorkQueues() {
    if (!this._updateViewNeeded)
      return false;
    const e12 = this.view.quality;
    let t12 = this.inverseDensity / this._lodFactor * e12;
    const i8 = this.maximumPointCount * this._lodFactor * e12;
    let r13 = this._computeNodesForMinimumDensity(t12), s6 = this._computePointCount(r13), o7 = Math.sqrt(s6 / (0.75 * i8));
    for (; s6 > i8; )
      t12 *= o7, r13 = this._computeNodesForMinimumDensity(t12), s6 = this._computePointCount(r13), o7 = Math.sqrt(2);
    return this._displayNodes(r13), this._updateViewNeeded = false, this._updateLoading(), true;
  }
  _computePointCount(e12) {
    let t12 = 0;
    for (let i8 = 0; i8 < e12.length; i8++) {
      const r13 = this._index.getNode(e12[i8]);
      r13 && (t12 += r13.vertexCount);
    }
    return t12;
  }
  _isRootNodeVisible() {
    let e12 = false;
    return this._traverseVisible({ frustum: this.view.state.contentCamera.frustum, clippingBox: this._clippingBox }, { predicate: (t12, i8, r13) => (e12 = r13, false), pageMiss: () => {
    } }), e12;
  }
  _computeNodesForMinimumDensity(e12) {
    const t12 = this.view.state.contentCamera, i8 = t12.frustum, r13 = this._clippingBox, s6 = t12.viewForward, o7 = P2(s6, t12.eye), n6 = _2(s6, -o7, ge), a6 = t12.perScreenPixelRatio / 2, d4 = e12 * e12, l5 = this._nodeIdArray;
    l5.length = 0;
    const { minScale: h6, maxScale: u10 } = c2(this.layer), p3 = 0 === h6 && 0 === u10 ? (e13) => l5.push(e13) : (e13) => {
      const t13 = this._getScale(e13);
      t7(t13, h6, u10) && l5.push(e13);
    };
    return this._traverseVisible({ frustum: i8, clippingBox: r13 }, { predicate: (e13, t13, i9) => {
      if (!i9)
        return false;
      if (0 === t13.childCount)
        return p3(e13), false;
      const r14 = this._index.getRenderObb(e13);
      return !(this._computeAveragePixelArea(r14, t13.lodThreshold, t13.vertexCount, n6, a6) <= d4) || (p3(e13), false);
    }, pageMiss: (e13, t13) => {
      p3(e13), this._indexQueue.includes(t13) || this._indexQueue.push(t13);
    } }), l5;
  }
  _getScale(e12) {
    let t12 = this._nodeScales.get(e12);
    if (null == t12) {
      const i8 = this._index.getNode(e12).obb.center;
      this._tmpPoint.x = i8[0], this._tmpPoint.y = i8[1], this._tmpPoint.z = i8[2], t12 = this.view.basemapTerrain.getScale(this._tmpPoint), this._nodeScales.set(e12, t12);
    }
    return t12;
  }
  _computeAveragePixelArea(e12, t12, i8, r13, s6) {
    const o7 = 1e-7, n6 = Math.max(o7, e12.minimumDistancePlane(r13));
    return t12 / (n6 * n6) / (4 * s6 * s6) / i8;
  }
  _loadNode(e12, t12) {
    try {
      return this._loadNodeAsync(e12, t12);
    } catch (i8) {
      throw b(i8) || n.getLogger(this).error(i8), i8;
    }
  }
  async _loadAdditionalUserAttributes(e12, i8, r13) {
    const s6 = this.layer.outFields;
    if (!s6)
      return [];
    const o7 = x(this.layer.fieldsIndex, s6), n6 = new Set(e12.map((e13) => null != e13 ? e13.name : null)), a6 = this.layer.attributeStorageInfo, d4 = [];
    for (const t12 of o7) {
      if (n6.has(t12))
        continue;
      const e13 = u9(a6, t12);
      e13 && d4.push(i8(e13));
    }
    const l5 = await g(d4);
    return s(r13), l5.filter(k);
  }
  async _loadNodeAsync(e12, t12) {
    const i8 = this._index.getNode(e12), r13 = t11(this.layer), s6 = e10(this.layer), o7 = i8.resourceId, n6 = async (e13) => {
      if (!e13)
        return null;
      if (e13.useElevation)
        return { attributeInfo: e13, buffer: null };
      const i9 = await this._loadAttribute(o7, e13, t12);
      return null != i9 ? { attributeInfo: e13, buffer: i9 } : null;
    };
    return this._idleQueue.push(async () => {
      const i9 = this._loadGeometry(o7, t12), { primaryAttribute: a6, modulationAttribute: d4 } = r13, l5 = n6(a6), h6 = n6(d4), p3 = s6.map((e13) => e13.attributeInfo), c3 = p3.map((e13) => n6(e13)), _4 = this._loadAdditionalUserAttributes([a6, d4, ...p3], n6, t12), [m3, g4, f3, y4, b4] = await Promise.all([i9, l5, h6, Promise.all(c3), _4]);
      s(t12);
      const w = { geometryBuffer: m3, primaryAttributeData: g4, modulationAttributeData: f3, filterAttributesData: y4, userAttributesData: b4, schema: this.layer.store.defaultGeometrySchema, rendererInfo: r13, filterInfo: s6, obbData: this._index.getRenderObb(e12).data, elevationOffset: this._elevationOffset, inSR: this.layer.spatialReference.toJSON(), outSR: this.view.renderCoordsHelper.spatialReference.toJSON() };
      return this._worker.invoke(w, t12);
    }, t12);
  }
  async _loadGeometry(e12, t12) {
    return this._requestData(`${this.baseUrl}/nodes/${e12}/geometries/0`, t12);
  }
  async _loadAttribute(e12, t12, i8) {
    if (!(t12 == null ? void 0 : t12.storageInfo))
      return null;
    const r13 = t12.storageInfo.key;
    return this._requestData(`${this.baseUrl}/nodes/${e12}/attributes/${r13}`, i8);
  }
  _requestNodePage(e12, t12) {
    const i8 = { f: "json", ...this.layer.customParameters, token: this.layer.apiKey };
    return this._indexRequester.request(e12, "json", { query: i8, signal: t12 });
  }
  _requestData(e12, t12) {
    return this._dataRequester.request(e12, "binary", { query: { ...this.layer.customParameters, token: this.layer.apiKey }, signal: t12 });
  }
  _removeFromRenderer(e12) {
    if (this._renderedNodes.has(e12)) {
      const t12 = this._renderer.removeNode(e12);
      this._renderedNodes.delete(e12), this._nodeScales.delete(e12), this._memCache.put(t12.id.toString(), t12, be(t12));
    }
  }
  _addToRenderer(e12) {
    this._renderedNodes.has(e12.id) || (this._renderedNodes.add(e12.id), this._renderer.addNode(e12));
  }
  _setupRendererData(e12, t12) {
    const i8 = this._index.getNode(e12), r13 = Math.sqrt(i8.lodThreshold / i8.vertexCount), s6 = this._index.getRenderObb(e12);
    if (G2(t12))
      return t12.splatSize = r13, t12.obb = s6, r2(t12.origin, t12.obb.center), t12;
    const o7 = I.fromData(t12.obbData), a6 = o7.halfSize, d4 = s6.halfSize, l5 = 0.01 * Math.max(d4[0], d4[1], d4[2]);
    if (a6[0] > d4[0] + l5 || a6[1] > d4[1] + l5 || a6[2] > d4[2] + l5) {
      if (this._maxLoggedBoxWarnings > 0) {
        const t13 = (e13) => `[${e13.halfSize[0]}, ${e13.halfSize[1]}, ${e13.halfSize[2]}]`;
        n.getLogger(this).warn(`Node ${e12} reported bounding box too small. got ${t13(s6)} but points cover ${t13(o7)}`), 0 == --this._maxLoggedBoxWarnings && n.getLogger(this).warn("  Too many bounding box errors, stopping reporting for this layer.");
      }
      this._index.setRenderObb(e12, o7);
    }
    return new k2(e12, r13, t4(s6.center), s6, 0 === i8.childCount, t12.points, t12.rgb, t12.attributes, t12.pointIdFilterMap);
  }
  get usedMemory() {
    let e12 = 0;
    return this._renderer.forEachNode((t12) => {
      e12 += Pe, e12 += A(t12.coordinates);
      for (const i8 of t12.attributes) {
        const t13 = i8.values;
        t(t13.buffer) && (e12 += A(t13));
      }
    }), e12;
  }
  get unloadedMemory() {
    const e12 = this._renderedNodes.size;
    if (e12 < 4)
      return 0;
    const t12 = [...this._renderedNodes].reduce((e13, t13) => e13 + this._index.getNode(t13).vertexCount);
    let i8 = this._loadingNodes.size;
    for (let r13 = 0; r13 < this._workQueue.length; r13++)
      i8 += this._workQueue[r13].load.length, i8 -= this._workQueue[r13].remove.length;
    if (i8 < 0)
      return 0;
    return i8 * t12 / e12 * ((this.usedMemory - e12 * Pe) / t12) + i8 * Pe;
  }
  get performanceInfo() {
    return new e9(this.usedMemory, this._renderedNodes.size, [...this._renderedNodes].reduce((e12, t12) => e12 + this._index.getNode(t12).vertexCount, 0), this.maximumPointCount, new o3(this._loadingNodes.size, this._indexQueue.length, this._workQueue.length, this._idleQueue.length));
  }
  get test() {
    return { index: this._index, visibleNodes: this._renderedNodes };
  }
};
e([y()], fe.prototype, "layer", void 0), e([y()], fe.prototype, "baseUrl", null), e([y()], fe.prototype, "pointScale", null), e([y()], fe.prototype, "useRealWorldSymbolSizes", null), e([y()], fe.prototype, "pointSize", null), e([y()], fe.prototype, "inverseDensity", null), e([y()], fe.prototype, "maximumPointCount", void 0), e([y({ readOnly: true })], fe.prototype, "availableFields", null), e([y({ readOnly: true })], fe.prototype, "_clippingBox", null), e([y({ readOnly: true })], fe.prototype, "_elevationOffset", null), e([y({ type: Boolean })], fe.prototype, "slicePlaneEnabled", void 0), e([y()], fe.prototype, "updating", void 0), e([y(t9)], fe.prototype, "updatingProgress", void 0), e([y({ readOnly: true })], fe.prototype, "updatingProgressValue", null), fe = e([a("esri.views.3d.layers.PointCloudLayerView3D")], fe);
var ye = fe;
function be(e12) {
  return 5 * e12.coordinates.length + 128;
}
var we = u2();
var Pe = 160;
function Ne(e12) {
  return (t12) => e12.immediate.schedule(t12);
}
export {
  ye as default
};
//# sourceMappingURL=PointCloudLayerView3D-ZVJJT6ZL.js.map
