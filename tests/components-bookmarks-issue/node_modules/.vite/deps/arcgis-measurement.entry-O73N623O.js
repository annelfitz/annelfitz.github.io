import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  importCoreReactiveUtils,
  newWidgetsMeasurement
} from "./chunk-YXW2SI4L.js";
import {
  addHandles,
  checkForView,
  referenceElementHelper
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-measurement.entry.js
var measurementCss = "arcgis-measurement{}";
var ArcgisMeasurement = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.arcgisMeasurementReady = createEvent(this, "arcgisMeasurementReady", 7);
    this._watchHandles = [];
    this.referenceElement = void 0;
    this.activeTool = void 0;
    this.activeComponent = void 0;
    this.areaUnit = void 0;
    this.icon = void 0;
    this.linearUnit = void 0;
    this.position = "bottom-left";
    this.view = void 0;
    this.widget = void 0;
  }
  referenceElementWatcher(value) {
    void referenceElementHelper(this, value);
  }
  activeToolWatcher(value) {
    if (this.widget) {
      this.widget.activeTool = value;
    }
  }
  areaUnitWatcher(value) {
    if (this.widget) {
      this.widget.areaUnit = value;
    }
  }
  iconWatcher(value) {
    if (this.widget) {
      this.widget.icon = value;
    }
  }
  linearUnitWatcher(value) {
    if (this.widget) {
      this.widget.linearUnit = value;
    }
  }
  positionWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.view.ui.move(this.childElem, value);
    }
  }
  viewWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.view = value;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Methods
  //
  //--------------------------------------------------------------------------
  async clear() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.clear();
  }
  async startMeasurement() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.startMeasurement();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = this._createParams();
    const widget = await newWidgetsMeasurement(params);
    this.widget = widget;
    await this._addWatchers();
    this._addContainer();
    this.arcgisMeasurementReady.emit();
    checkForView(this);
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    return h("div", { ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  _addContainer() {
    this.widget.container = this.childElem;
  }
  async _addWatchers() {
    const { watch } = await importCoreReactiveUtils();
    addHandles(this, watch(() => this.widget.activeWidget, (value) => this.activeComponent = value, {
      initial: true
    }));
  }
  _createParams() {
    const params = {};
    if (this.activeTool) {
      params.activeTool = this.activeTool;
    }
    if (this.areaUnit) {
      params.areaUnit = this.areaUnit;
    }
    if (this.linearUnit) {
      params.linearUnit = this.linearUnit;
    }
    if (this.view) {
      params.view = this.view;
    }
    return params;
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "referenceElement": ["referenceElementWatcher"],
      "activeTool": ["activeToolWatcher"],
      "areaUnit": ["areaUnitWatcher"],
      "icon": ["iconWatcher"],
      "linearUnit": ["linearUnitWatcher"],
      "position": ["positionWatcher"],
      "view": ["viewWatcher"]
    };
  }
};
ArcgisMeasurement.style = measurementCss;
export {
  ArcgisMeasurement as arcgis_measurement
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-measurement.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-measurement.entry-O73N623O.js.map
