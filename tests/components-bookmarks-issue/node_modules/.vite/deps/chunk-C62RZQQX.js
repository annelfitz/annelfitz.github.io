import {
  f,
  u
} from "./chunk-6Z6C6JVV.js";
import {
  j
} from "./chunk-QLL2YG25.js";
import {
  n as n2
} from "./chunk-BPRXWDBO.js";
import {
  c,
  h
} from "./chunk-7MT4ACA4.js";
import {
  U
} from "./chunk-SAYWXQVM.js";
import {
  n2 as n,
  r2 as r,
  s,
  t
} from "./chunk-7RBRCL6S.js";

// node_modules/@arcgis/core/intl/number.js
var r2 = { ar: "ar-u-nu-latn" };
var a = /* @__PURE__ */ new WeakMap();
var e = {};
function i(t2) {
  const i4 = t2 || e;
  if (!a.has(i4)) {
    const e2 = c(), o3 = r2[c()] || e2;
    a.set(i4, new Intl.NumberFormat(o3, t2));
  }
  return a.get(i4);
}
function o(t2 = {}) {
  const n3 = {};
  return null != t2.digitSeparator && (n3.useGrouping = t2.digitSeparator), null != t2.places && (n3.minimumFractionDigits = n3.maximumFractionDigits = t2.places), n3;
}
function u2(t2, n3) {
  return Object.is(t2, -0) && (t2 = 0), i(n3).format(t2);
}
h(() => {
  a = /* @__PURE__ */ new WeakMap(), e = {};
});

// node_modules/@arcgis/core/intl/substitute.js
var i2 = () => n.getLogger("esri.intl.substitute");
function s2(t2, r5, n3 = {}) {
  const { format: o3 = {} } = n3;
  return r(t2, (t3) => u3(t3, r5, o3));
}
function u3(t2, e2, n3) {
  let o3, i4;
  const s4 = t2.indexOf(":");
  if (-1 === s4 ? o3 = t2.trim() : (o3 = t2.slice(0, s4).trim(), i4 = t2.slice(s4 + 1).trim()), !o3)
    return "";
  const u4 = t(o3, e2);
  if (null == u4)
    return "";
  const m = (i4 ? n3 == null ? void 0 : n3[i4] : null) ?? (n3 == null ? void 0 : n3[o3]);
  return m ? c2(u4, m) : i4 ? a2(u4, i4) : f2(u4);
}
function c2(t2, r5) {
  switch (r5.type) {
    case "date":
      return j(t2, r5.intlOptions);
    case "number":
      return u2(t2, r5.intlOptions);
    default:
      return i2().warn("missing format descriptor for key {key}"), f2(t2);
  }
}
function a2(t2, r5) {
  switch (r5.toLowerCase()) {
    case "dateformat":
      return j(t2);
    case "numberformat":
      return u2(t2);
    default:
      return i2().warn(`inline format is unsupported since 4.12: ${r5}`), /^(dateformat|datestring)/i.test(r5) ? j(t2) : /^numberformat/i.test(r5) ? u2(t2) : f2(t2);
  }
}
function f2(t2) {
  switch (typeof t2) {
    case "string":
      return t2;
    case "number":
      return u2(t2);
    case "boolean":
      return "" + t2;
    default:
      return t2 instanceof Date ? j(t2) : "";
  }
}

// node_modules/@arcgis/core/intl/t9n.js
async function r3(e2, r5, s4, i4) {
  const a4 = r5.exec(s4);
  if (!a4)
    throw new s("esri-intl:invalid-bundle", `Bundle id "${s4}" is not compatible with the pattern "${r5}"`);
  const c3 = a4[1] ? `${a4[1]}/` : "", l2 = a4[2], w = f(i4), h3 = `${c3}${l2}.json`, u4 = w ? `${c3}${l2}_${w}.json` : h3;
  let d;
  try {
    d = await o2(e2(u4));
  } catch (f4) {
    if (u4 === h3)
      throw new s("intl:unknown-bundle", `Bundle "${s4}" cannot be loaded`, { error: f4 });
    try {
      d = await o2(e2(h3));
    } catch (f5) {
      throw new s("intl:unknown-bundle", `Bundle "${s4}" cannot be loaded`, { error: f5 });
    }
  }
  return d;
}
async function o2(t2) {
  if (null != a3.fetchBundleAsset)
    return a3.fetchBundleAsset(t2);
  const n3 = await U(t2, { responseType: "text" });
  return JSON.parse(n3.data);
}
var s3 = class {
  constructor({ base: e2 = "", pattern: t2, location: n3 = new URL(window.location.href) }) {
    let r5;
    r5 = "string" == typeof n3 ? (e3) => new URL(e3, new URL(n3, window.location.href)).href : n3 instanceof URL ? (e3) => new URL(e3, n3).href : n3, this.pattern = "string" == typeof t2 ? new RegExp(`^${t2}`) : t2, this.getAssetUrl = r5, e2 = e2 ? e2.endsWith("/") ? e2 : e2 + "/" : "", this.matcher = new RegExp(`^${e2}(?:(.*)/)?(.*)$`);
  }
  fetchMessageBundle(e2, t2) {
    return r3(this.getAssetUrl, this.matcher, e2, t2);
  }
};
function i3(e2) {
  return new s3(e2);
}
var a3 = {};

// node_modules/@arcgis/core/intl.js
u(i3({ pattern: "esri/", location: n2 }));

export {
  o,
  u2 as u,
  s2 as s
};
//# sourceMappingURL=chunk-C62RZQQX.js.map
