import {
  F,
  I
} from "./chunk-QYDOVVH7.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import {
  k
} from "./chunk-JGDJR5EV.js";
import {
  e as e2,
  l
} from "./chunk-QHK5ZYFW.js";

// node_modules/@arcgis/core/views/interactive/snapping/SnappingOperation.js
var p = class extends S {
  constructor(t) {
    super(t), this.constrainResult = (t2) => t2, this._snapPoints = null, this._frameTask = null, this._abortController = null, this._stagedPoint = null, this._snap = k(async (t2, s, o, n) => {
      const i = this._frameTask;
      if (null == i)
        return;
      const r = await i.schedule(() => s.snap({ ...t2, context: o, signal: n }), n);
      r.valid && await i.schedule(() => {
        this.stagedPoint = r.apply(), t2 !== this._snapPoints && null != this._snapPoints && (this.stagedPoint = s.update({ ...this._snapPoints, context: o }));
      }, n);
    });
  }
  get stagedPoint() {
    return this._stagedPoint;
  }
  set stagedPoint(t) {
    this._stagedPoint = this.constrainResult(t);
  }
  initialize() {
    var _a, _b;
    const t = "3d" === this.view.type ? (_b = (_a = this.view) == null ? void 0 : _a.resourceController) == null ? void 0 : _b.scheduler : null;
    this._frameTask = null != t ? t.registerTask(I.SNAPPING) : F;
  }
  destroy() {
    this._abortController = e2(this._abortController), this._frameTask = l(this._frameTask);
  }
  update(t, s, o) {
    this._snapPoints = t;
    const { point: n, scenePoint: i } = t, r = s.update({ point: n, scenePoint: i, context: o });
    return this.stagedPoint = r, r;
  }
  async snap(t, s, o) {
    const { point: n, scenePoint: i } = t;
    return this.stagedPoint = s.update({ point: n, scenePoint: i, context: o }), this._snapPoints = t, null == this._abortController && (this._abortController = new AbortController()), this._snap(t, s, o, this._abortController.signal);
  }
  async snapAgainNearPreviousMapPoint(t, s) {
    null != this._snapPoints && await this.snap(this._snapPoints, t, s);
  }
  abort() {
    this._abortController = e2(this._abortController), this._snapPoints = null;
  }
};
e([y({ constructOnly: true })], p.prototype, "view", void 0), e([y()], p.prototype, "stagedPoint", null), e([y()], p.prototype, "constrainResult", void 0), e([y()], p.prototype, "_stagedPoint", void 0), p = e([a("esri.views.interactive.snapping.SnappingOperation")], p);

export {
  p
};
//# sourceMappingURL=chunk-CTJKH5VV.js.map
