import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  importCoreReactiveUtils,
  newWidgetsFeature
} from "./chunk-YXW2SI4L.js";
import {
  addHandles,
  checkForView,
  referenceElementHelper
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-feature.entry.js
var featureCss = "";
var ArcgisFeature = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.arcgisFeatureReady = createEvent(this, "arcgisFeatureReady", 7);
    this._watchHandles = [];
    this.referenceElement = void 0;
    this.defaultPopupTemplateEnabled = false;
    this.graphic = void 0;
    this.location = void 0;
    this.map = void 0;
    this.spatialReference = void 0;
    this.visibleElementsTitle = true;
    this.visibleElementsContentAttachments = true;
    this.visibleElementsContentFields = true;
    this.visibleElementsContentMedia = true;
    this.visibleElementsContentText = true;
    this.visibleElementsContentExpression = true;
    this.visibleElementsLastEditInfo = true;
    this.position = "bottom-left";
    this.view = void 0;
    this.widget = void 0;
  }
  referenceElementWatcher(value) {
    void referenceElementHelper(this, value);
  }
  defaultPopupTemplateEnabledWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.defaultPopupTemplateEnabled = value;
    }
  }
  graphicWatcher(value) {
    if (this.widget) {
      this.widget.graphic = value;
    }
  }
  locationWatcher(value) {
    if (this.widget) {
      this.widget.viewModel.location = value;
    }
  }
  spatialReferenceWatcher(value) {
    if (this.widget) {
      this.widget.spatialReference = value;
    }
  }
  visibleElementsTitleWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        title: value
      };
    }
  }
  visibleElementsContentAttachmentsWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        content: {
          ...this.widget.visibleElements.content,
          attachments: value
        }
      };
    }
  }
  visibleElementsContentFieldsWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        content: {
          ...this.widget.visibleElements.content,
          fields: value
        }
      };
    }
  }
  visibleElementsContentMediaWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        content: {
          ...this.widget.visibleElements.content,
          media: value
        }
      };
    }
  }
  visibleElementsContentTextWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        content: {
          ...this.widget.visibleElements.content,
          text: value
        }
      };
    }
  }
  visibleElementsContentExpressionWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        content: {
          ...this.widget.visibleElements.content,
          expression: value
        }
      };
    }
  }
  visibleElementsLastEditInfoWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        lastEditInfo: value
      };
    }
  }
  positionWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.view.ui.move(this.childElem, value);
    }
  }
  viewWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.view = value;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Methods
  //
  //--------------------------------------------------------------------------
  async nextMedia(contentElementIndex) {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.nextMedia(contentElementIndex);
  }
  async previousMedia(contentElementIndex) {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.previousMedia(contentElementIndex);
  }
  async setActiveMedia(contentElementIndex, mediaInfoIndex) {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.setActiveMedia(contentElementIndex, mediaInfoIndex);
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = this._createParams();
    const widget = await newWidgetsFeature(params);
    this.widget = widget;
    this._addContainer();
    this._setViewModelParams();
    await this._addWatchers();
    this.arcgisFeatureReady.emit();
    checkForView(this);
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    return h("div", { ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  _addContainer() {
    this.widget.container = this.childElem;
  }
  async _addWatchers() {
    const { watch } = await importCoreReactiveUtils();
    addHandles(this, watch(() => {
      var _a;
      return (_a = this.widget.view) == null ? void 0 : _a.map;
    }, (value) => this.map = value));
  }
  _createParams() {
    const params = {};
    params.visibleElements = {
      title: this.visibleElementsTitle,
      content: {
        attachments: this.visibleElementsContentAttachments,
        fields: this.visibleElementsContentFields,
        media: this.visibleElementsContentMedia,
        text: this.visibleElementsContentText,
        expression: this.visibleElementsContentExpression
      },
      lastEditInfo: this.visibleElementsLastEditInfo
    };
    if (this.defaultPopupTemplateEnabled !== void 0) {
      params.defaultPopupTemplateEnabled = this.defaultPopupTemplateEnabled;
    }
    if (this.graphic) {
      params.graphic = this.graphic;
    }
    if (this.view) {
      params.view = this.view;
    }
    if (this.spatialReference) {
      params.spatialReference = this.spatialReference;
    }
    return params;
  }
  _setViewModelParams() {
    const params = {};
    if (this.location) {
      params.location = this.location;
    }
    this.widget.viewModel.set(params);
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "referenceElement": ["referenceElementWatcher"],
      "defaultPopupTemplateEnabled": ["defaultPopupTemplateEnabledWatcher"],
      "graphic": ["graphicWatcher"],
      "location": ["locationWatcher"],
      "spatialReference": ["spatialReferenceWatcher"],
      "visibleElementsTitle": ["visibleElementsTitleWatcher"],
      "visibleElementsContentAttachments": ["visibleElementsContentAttachmentsWatcher"],
      "visibleElementsContentFields": ["visibleElementsContentFieldsWatcher"],
      "visibleElementsContentMedia": ["visibleElementsContentMediaWatcher"],
      "visibleElementsContentText": ["visibleElementsContentTextWatcher"],
      "visibleElementsContentExpression": ["visibleElementsContentExpressionWatcher"],
      "visibleElementsLastEditInfo": ["visibleElementsLastEditInfoWatcher"],
      "position": ["positionWatcher"],
      "view": ["viewWatcher"]
    };
  }
};
ArcgisFeature.style = featureCss;
export {
  ArcgisFeature as arcgis_feature
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-feature.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-feature.entry-F233GV2X.js.map
