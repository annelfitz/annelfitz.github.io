import {
  _
} from "./chunk-7ZELJY3T.js";
import {
  u as u3
} from "./chunk-BSG4F4MT.js";
import "./chunk-PE5CJM6H.js";
import {
  M
} from "./chunk-IZ6ZAGHW.js";
import {
  e as e6
} from "./chunk-EPOP3OQ6.js";
import "./chunk-QKSE6KAV.js";
import {
  a as a2
} from "./chunk-XWTZSPU2.js";
import "./chunk-YSRCOU2A.js";
import {
  t as t2
} from "./chunk-3XPYGI2Z.js";
import {
  O
} from "./chunk-53QTUAOU.js";
import "./chunk-UAITPI2I.js";
import {
  p as p3
} from "./chunk-CTJKH5VV.js";
import {
  f as f2
} from "./chunk-FKMPOIQR.js";
import "./chunk-FQUIQQYI.js";
import {
  e as e5
} from "./chunk-CTY3WTET.js";
import "./chunk-EZMIPVQL.js";
import "./chunk-7IFMSG3H.js";
import {
  A as A2,
  F as F2
} from "./chunk-RYDZOUU4.js";
import "./chunk-5SOMZZNP.js";
import "./chunk-7G5NQR7Q.js";
import "./chunk-CA3XJ2RX.js";
import "./chunk-JASPUPTW.js";
import "./chunk-HWBFFWYY.js";
import {
  o
} from "./chunk-23GKO7D7.js";
import "./chunk-E22EEEDE.js";
import {
  c as c2
} from "./chunk-KDHW2KXU.js";
import {
  e as e4,
  ee
} from "./chunk-6FMD7BOV.js";
import {
  f
} from "./chunk-TKMRXVLK.js";
import {
  i,
  p as p2
} from "./chunk-6SB3EFZU.js";
import "./chunk-WOKVMRAD.js";
import "./chunk-3W2U3CD4.js";
import "./chunk-3ENNELTC.js";
import {
  E2 as E,
  P,
  p
} from "./chunk-LEFES6LS.js";
import "./chunk-AEAYH74I.js";
import "./chunk-ZKV5BWYX.js";
import "./chunk-E6JAHJ2A.js";
import "./chunk-SVNPPUZN.js";
import "./chunk-6BCJJDKK.js";
import {
  t
} from "./chunk-UANQJYHL.js";
import "./chunk-DNFHDQRJ.js";
import {
  N
} from "./chunk-TO6UIATU.js";
import "./chunk-IB7OUIEK.js";
import "./chunk-WCBCYPOZ.js";
import "./chunk-3FTSPLRV.js";
import "./chunk-OMRW2J7M.js";
import "./chunk-UXQH3C5A.js";
import "./chunk-YYI7TRI3.js";
import "./chunk-RQW2N53A.js";
import "./chunk-LHVWC4RW.js";
import "./chunk-GN2OLKIL.js";
import "./chunk-LMCIQOBX.js";
import "./chunk-4VVENLLF.js";
import "./chunk-VUHMQQ6M.js";
import {
  x as x2
} from "./chunk-6GQQIJM7.js";
import "./chunk-PAH4PVZY.js";
import "./chunk-5WKN6K5Z.js";
import "./chunk-WCBHO6BH.js";
import "./chunk-V7NVRGBC.js";
import "./chunk-KCZGCTYM.js";
import "./chunk-3YZBQBZ5.js";
import "./chunk-RFBA77K3.js";
import "./chunk-46T3D2EU.js";
import "./chunk-RYF27IO3.js";
import "./chunk-2GT6KC2O.js";
import "./chunk-5MKTGTC4.js";
import "./chunk-7UDCRD5C.js";
import "./chunk-B3GKRGWX.js";
import "./chunk-FN7LLNVA.js";
import "./chunk-BR3PF5YD.js";
import "./chunk-QCUK7T7Y.js";
import "./chunk-2NDIVJST.js";
import {
  st
} from "./chunk-SPYHZ6ZW.js";
import "./chunk-637XZX4A.js";
import "./chunk-PMFQ2A2V.js";
import "./chunk-HHAESKQ6.js";
import "./chunk-5INQRMFY.js";
import "./chunk-XP3ABGGF.js";
import "./chunk-TACIE3AK.js";
import "./chunk-6LT23NJG.js";
import "./chunk-4FXZDEEP.js";
import "./chunk-KYKKN5I4.js";
import "./chunk-4MJOJUFR.js";
import {
  n as n4
} from "./chunk-PTIWH4S7.js";
import "./chunk-L3GUCBXG.js";
import "./chunk-BEXFYHUM.js";
import "./chunk-K3DEHPDR.js";
import "./chunk-I6RS7YIS.js";
import "./chunk-XTY645DH.js";
import "./chunk-BHOYA5LV.js";
import "./chunk-PMQ5HDZI.js";
import {
  e as e3
} from "./chunk-EAAEPSBY.js";
import "./chunk-I7LDU4W6.js";
import "./chunk-KWLN46JY.js";
import "./chunk-7KNPDPFB.js";
import "./chunk-M6P775BS.js";
import "./chunk-J5F4VILS.js";
import "./chunk-KSBIR2KG.js";
import "./chunk-XVQGALI7.js";
import "./chunk-XFQIXBHG.js";
import "./chunk-MVSN2HAN.js";
import "./chunk-7A5N7G2Z.js";
import "./chunk-J54I3TB7.js";
import "./chunk-OE52KVBM.js";
import "./chunk-L577YNYZ.js";
import "./chunk-GL5TSVQL.js";
import "./chunk-FD7NY4JS.js";
import "./chunk-TYYN3C37.js";
import "./chunk-OBABKQ6S.js";
import "./chunk-4GGEQMYI.js";
import "./chunk-A47N2JLN.js";
import "./chunk-ZPC74XHC.js";
import "./chunk-IVGJRGD2.js";
import "./chunk-JA2AO4PC.js";
import "./chunk-MTLWPXQD.js";
import "./chunk-ZEMG7GKC.js";
import "./chunk-ECIXBYOQ.js";
import "./chunk-5MQ4HAUX.js";
import "./chunk-XIWETS2Q.js";
import "./chunk-FOCTPJDR.js";
import "./chunk-2DATALUO.js";
import "./chunk-QFKFOAJ6.js";
import "./chunk-LOPMLCHC.js";
import "./chunk-JIR2YP6A.js";
import "./chunk-LANUNBDP.js";
import "./chunk-JBF6CULO.js";
import "./chunk-DRCNNCTI.js";
import "./chunk-MKOOEINB.js";
import "./chunk-JKOHBDRD.js";
import "./chunk-MDSRD3WV.js";
import "./chunk-3DFMDDMO.js";
import "./chunk-4BCSYJOQ.js";
import "./chunk-GMUCR2DJ.js";
import "./chunk-HBRJJENW.js";
import "./chunk-VHY5K2VE.js";
import "./chunk-6ENXMQPD.js";
import "./chunk-FV43HSGW.js";
import "./chunk-ZR7OV2EH.js";
import "./chunk-U76EZJUZ.js";
import "./chunk-MEEG7XMI.js";
import "./chunk-LJULTBAY.js";
import "./chunk-FD4DXBZA.js";
import "./chunk-LO5UMUY4.js";
import "./chunk-YKIGDW5O.js";
import {
  c
} from "./chunk-XDDNM6BM.js";
import "./chunk-7QHIE4SQ.js";
import "./chunk-6MGK5WBT.js";
import "./chunk-HSOVRETF.js";
import "./chunk-CPZW2LMK.js";
import "./chunk-QR7J3YDY.js";
import "./chunk-GO2OGJDG.js";
import "./chunk-UYMREM3D.js";
import "./chunk-4YGBWYMD.js";
import "./chunk-JTUYA5FE.js";
import "./chunk-UNTQATE2.js";
import "./chunk-5YY6NZNY.js";
import "./chunk-YUWVLORR.js";
import "./chunk-7MYYCSEB.js";
import "./chunk-ESK2YRQM.js";
import "./chunk-QIEXJLRX.js";
import "./chunk-UNTPHF5R.js";
import "./chunk-YJFPDMSR.js";
import "./chunk-FFG7BDAP.js";
import {
  h as h2
} from "./chunk-I4SHZ6P5.js";
import "./chunk-QYDOVVH7.js";
import "./chunk-YSXT2SWC.js";
import "./chunk-YH3SFFF7.js";
import "./chunk-JBU54P54.js";
import "./chunk-FMS3CZY7.js";
import "./chunk-H7T5AB2S.js";
import "./chunk-WKVHVZW2.js";
import "./chunk-KSZESDGM.js";
import "./chunk-CHJMCUAV.js";
import "./chunk-5P74D2TG.js";
import "./chunk-33LWZO2E.js";
import "./chunk-YT66FIGM.js";
import "./chunk-3IDXRFXE.js";
import "./chunk-RLZYC2LS.js";
import "./chunk-WEER6QME.js";
import "./chunk-TXLJQAAN.js";
import "./chunk-YF5E2R37.js";
import "./chunk-R4SGP2EA.js";
import "./chunk-IRL6OOVK.js";
import "./chunk-3AIILHI5.js";
import "./chunk-QJRGTKPN.js";
import "./chunk-VIH3KDZO.js";
import "./chunk-LA365FE7.js";
import "./chunk-SA77Z3WI.js";
import "./chunk-6MBDB46F.js";
import "./chunk-D56W4LPT.js";
import "./chunk-BKOYOJBG.js";
import "./chunk-7JR6S3WL.js";
import "./chunk-CJNDQ2LH.js";
import "./chunk-B4E4X2TN.js";
import "./chunk-HS6YI5DU.js";
import "./chunk-CDBOQCLE.js";
import "./chunk-RSRUEM5U.js";
import "./chunk-HFJMEXIX.js";
import "./chunk-VYSGSKHB.js";
import "./chunk-DGJJJ2DD.js";
import "./chunk-UAFQMHYI.js";
import "./chunk-IDPLBNJX.js";
import "./chunk-ZHAZR5C3.js";
import "./chunk-P4MNTMCZ.js";
import "./chunk-BSPKLAHD.js";
import "./chunk-VS6AHHIY.js";
import "./chunk-GPWQGIYV.js";
import "./chunk-WZJNHZ6H.js";
import "./chunk-XMYPMIYH.js";
import "./chunk-FQLGRQKL.js";
import "./chunk-DRC4XSYG.js";
import {
  F,
  G,
  I
} from "./chunk-XGTCDM4C.js";
import "./chunk-LGMX4E7L.js";
import "./chunk-W5ALAOW2.js";
import "./chunk-FHDHOWK5.js";
import "./chunk-LQBHIBXV.js";
import "./chunk-42DUJ2CX.js";
import "./chunk-B35SNV2V.js";
import "./chunk-Z2F5OKVA.js";
import "./chunk-UQA6M3KF.js";
import "./chunk-GLF3KRAL.js";
import "./chunk-ZLQTPFTL.js";
import "./chunk-WIVZ7SMV.js";
import "./chunk-O76UVYOO.js";
import "./chunk-QCMUK3QA.js";
import "./chunk-HZSGATFT.js";
import "./chunk-KNMQQRV7.js";
import "./chunk-N5GQOIDP.js";
import "./chunk-NFB6O77E.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-ERD6I7QP.js";
import "./chunk-Z3NX5DTX.js";
import "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import "./chunk-SCHTG6ZQ.js";
import "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import {
  u as u2
} from "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import {
  d as d3
} from "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-WMUEII2O.js";
import "./chunk-6QNF7OHN.js";
import "./chunk-6AQIVLDN.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import {
  j
} from "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import {
  n as n3
} from "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import {
  D,
  e2
} from "./chunk-RGCWZ2KZ.js";
import {
  n as n2
} from "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import "./chunk-2SDMYJDE.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import {
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import {
  w2 as w
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  A,
  C,
  d as d2
} from "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  r2 as r,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  d
} from "./chunk-JGDJR5EV.js";
import {
  u
} from "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n
} from "./chunk-7RBRCL6S.js";
import {
  h
} from "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/analysis/AreaMeasurementAnalysis.js
var p4 = class extends c {
  constructor(e7) {
    super(e7), this.type = "area-measurement", this.unit = null;
  }
  set geometry(e7) {
    null != e7 ? (e7.rings.length > 1 && n.getLogger(this).warn("Measuring polygons with multiple rings is not supported."), this._set("geometry", e7.clone())) : this._set("geometry", null);
  }
  get requiredPropertiesForEditing() {
    if (null != this.geometry && 1 === this.geometry.rings.length) {
      const e7 = this.geometry.rings[0];
      if (e7.length <= 2 || !h(e7[0], e7[e7.length - 1]))
        return [null];
    }
    return [this.geometry];
  }
  clear() {
    this.geometry = null;
  }
};
e([y({ type: ["area-measurement"] })], p4.prototype, "type", void 0), e([y({ value: null, type: j })], p4.prototype, "geometry", null), e([y({ type: w, value: null })], p4.prototype, "unit", void 0), e([y({ readOnly: true })], p4.prototype, "requiredPropertiesForEditing", null), p4 = e([a("esri.analysis.AreaMeasurementAnalysis")], p4);
var m = p4;

// node_modules/@arcgis/core/views/3d/interactive/measurementTools/support/PickRequest.js
var s = class {
  constructor(s2, t4 = null) {
    this.screenPoint = s2, this.result = t4;
  }
};
var t3 = class {
  constructor(s2, t4) {
    this.scenePoint = s2, this.mapPoint = t4;
  }
};

// node_modules/@arcgis/core/views/3d/interactive/measurementTools/areaMeasurement3D/AreaMeasurement3DView.js
var f3 = class {
  constructor(t4) {
    this.vertexManipulators = [], this._destroyed = false, this._isManipulatorsOwner = true, this._visible = true, this._listenerHandles = null, this._tempHandlePosition = n3();
    const { analysisViewData: e7, manipulators: i2, toolState: s2, view: a3, visible: r2 } = t4;
    this._analysisViewData = e7, this._toolState = s2, null != i2 ? (this._manipulators = i2, this._isManipulatorsOwner = false) : this._manipulators = new i(), this._view = a3, this._intersector = t2(a3.state.viewingMode);
    const n5 = f(this._handleColor), o2 = [new e4(st(n5, 1, 32, 32))], l = new ee({ view: a3, renderObjects: o2 });
    l.available = false, l.radius = M2, l.interactive = false, this._manipulators.add(l), this._cursorManipulator = l, this._cursorManipulatorMaterial = n5, this._laserLine = new c2({ view: a3, attached: true, style: { glowWidth: V, glowFalloff: b, innerWidth: D2 }, isDecoration: true }), this._updateVisibility(r2 ?? true);
  }
  destroy() {
    this._listenerHandles = u(this._listenerHandles), this._isManipulatorsOwner ? this._manipulators = u(this._manipulators) : this._manipulators = null, this._laserLine = u(this._laserLine), this._destroyed = true;
  }
  get destroyed() {
    return this._destroyed;
  }
  get visible() {
    return this._visible;
  }
  set visible(t4) {
    t4 ? this.show() : this.hide();
  }
  get testData() {
    const t4 = this._laserLine.testData;
    return { laserLineRenderer: null != t4 ? { heightManifoldEnabled: t4.heightManifoldEnabled, heightManifoldTarget: t4.heightManifoldTarget, pointDistanceEnabled: t4.pointDistanceEnabled, pointDistanceOrigin: t4.pointDistanceOrigin, pointDistanceTarget: t4.pointDistanceTarget, lineVerticalPlaneEnabled: t4.lineVerticalPlaneEnabled } : { heightManifoldEnabled: false, heightManifoldTarget: null, pointDistanceEnabled: false, pointDistanceOrigin: null, pointDistanceTarget: null, lineVerticalPlaneEnabled: false } };
  }
  show() {
    this._setVisibility(true);
  }
  hide() {
    this._setVisibility(false);
  }
  _setVisibility(t4) {
    this._destroyed || this._visible === t4 || this._updateVisibility(t4);
  }
  _updateVisibility(t4) {
    this._visible = t4, this._laserLine.visible = t4, t4 ? (this._initializeListeners(), this._updateAll()) : (this._destroyListeners(), this.vertexManipulators.forEach(({ manipulator: t5 }) => this._removeVertexManipulator(t5)), this.vertexManipulators = [], this._view.cursor = null);
  }
  vertexHandleAt(t4, e7) {
    const i2 = this._manipulators.intersect(t4, e7);
    return i2 == null ? void 0 : i2.metadata;
  }
  pick(t4) {
    const e7 = this._view.spatialReference, i2 = d3(t4.screenPoint);
    this._view.sceneIntersectionHelper.intersectToolIntersectorScreen(i2, this._intersector);
    const s2 = this._intersector.results.min, a3 = n3();
    if (!s2.getIntersectionPoint(a3))
      return null;
    const r2 = this._view.renderCoordsHelper.fromRenderCoords(a3, new x({ spatialReference: e7 }));
    return null == r2 ? null : new t3(a3, r2);
  }
  _updateAll() {
    this._visible && (this._updateVertexManipulators(), this._updateLaserLine());
  }
  _createVertexManipulator() {
    const t4 = f(this._handleColor), e7 = [new e4(st(t4, 1, 32, 32))], i2 = new ee({ view: this._view, renderObjects: e7 });
    return i2.radius = M2, this._manipulators.add(i2), { manipulator: i2, material: t4 };
  }
  _removeVertexManipulator(t4) {
    this._manipulators.remove(t4);
  }
  _updateVertexManipulators() {
    const { viewData: t4 } = this._analysisViewData, e7 = this._analysisViewData.path ? this._analysisViewData.path.vertices : [], i2 = this.vertexManipulators;
    y2(i2, e7.length, () => this._createVertexManipulator(), ({ manipulator: t5 }) => this._removeVertexManipulator(t5)), i2.forEach(({ manipulator: i3 }, s2) => {
      i3.metadata = e7[s2], i3.renderLocation = t4.positionsRender[s2], i3.cursor = 0 === s2 && "drawing" === this._toolState.polygonState ? "crosshair" : null;
    }), "drawing" === this._toolState.polygonState && null != this._analysisViewData.stagedPoint ? (this._cursorManipulator.available = true, this._cursorManipulator.location = this._analysisViewData.stagedPoint) : this._cursorManipulator.available = false;
  }
  get _handleColor() {
    return F(this._view.effectiveTheme.accentColor, 0.5);
  }
  _getFocusPoint() {
    const { lastDraggedVertex: t4 } = this._analysisViewData;
    switch (this._toolState.polygonState) {
      case "drawing":
        return null != this._analysisViewData.stagedPoint ? this._analysisViewData.stagedPoint : null != t4 ? this._analysisViewData.path.getVertexPositionAsPoint(t4) : this._analysisViewData.path.lastPoint;
      case "editing":
        return null != t4 ? this._analysisViewData.path.getVertexPositionAsPoint(t4) : null;
      default:
        return this._analysisViewData.stagedPoint;
    }
  }
  _updateLaserLine() {
    const t4 = "measured" !== this._toolState.polygonState && this._toolState.active, e7 = this._getFocusPoint();
    if (t4 && null != e7) {
      const t5 = this._tempHandlePosition;
      this._view.renderCoordsHelper.toRenderCoords(e7, t5), this._laserLine.heightManifoldTarget = t5;
    } else
      this._laserLine.heightManifoldTarget = null;
  }
  _initializeListeners() {
    this._listenerHandles = new r(), this._listenerHandles.add([d2(() => this._toolState.polygonState, () => this._updateLaserLine()), d2(() => this._analysisViewData.viewData, () => this._updateAll(), C), d2(() => ({ lastDraggedVertex: this._analysisViewData.lastDraggedVertex, cursorPoint: this._analysisViewData.stagedPoint }), () => this._updateLaserLine()), d2(() => this._toolState.active, () => this._updateAll()), d2(() => this._view.effectiveTheme.accentColor, (i2) => {
      const a3 = F(i2, 0.5);
      for (const { material: t4 } of this.vertexManipulators)
        t4.setParameters({ color: a3 });
      this._cursorManipulatorMaterial.setParameters({ color: a3 });
      const r2 = u2.toUnitRGB(i2), n5 = u2.toUnitRGB(G(i2)), o2 = 0.75 * i2.a, l = this._laserLine, h3 = l.style;
      l.style = { ...h3, glowColor: r2, innerColor: n5, globalAlpha: o2 };
    }, { initial: true, equals: I })]);
  }
  _destroyListeners() {
    this._listenerHandles = u(this._listenerHandles);
  }
};
function y2(t4, e7, i2, s2) {
  for (; t4.length < e7; )
    t4.push(i2());
  if (s2)
    for (; t4.length > e7; ) {
      s2(t4.pop());
    }
  else
    t4.length = e7;
}
var V = 8;
var b = 8;
var D2 = 1;
var M2 = 5;

// node_modules/@arcgis/core/views/3d/interactive/measurementTools/areaMeasurement3D/AreaMeasurement3DTool.js
var b2 = class extends o {
  constructor(t4) {
    super(t4), this._updatingHandles = new h2(), this.polygonState = "initial", this.manipulators = new i(), this._getSnappingContext = t((t5) => new e5({ elevationInfo: { mode: "absolute-height", offset: 0 }, pointer: t5, editGeometryOperations: new E(new p("point", P(true, false, this.view.spatialReference)), this.view.state.viewingMode), visualizer: new O() }));
  }
  initialize() {
    const { view: t4, analysisViewData: e7, manipulators: i2, visible: o2 } = this;
    this.measurementView = new f3({ view: t4, analysisViewData: e7, toolState: this, manipulators: i2, visible: o2 });
    const r2 = a2(t4);
    this._snappingManagerResult = r2, this.addHandles(r2), this._snappingOperation = new p3({ view: t4 }), this._updatingHandles.add(() => this.stagedPoint, (t5) => {
      this.analysisViewData.stagedPoint = null != t5 ? x2(t5, new x()) : null;
    }, A), N(this, () => {
      const t5 = this.view.inputManager.latestPointerType ?? "mouse", e8 = this._getSnappingContext(t5);
      this._updatingHandles.addPromise(d(this._snappingOperation.snapAgainNearPreviousMapPoint(this._snappingManager, e8)));
    }), this._setupManipulators(), this.addHandles([d2(() => this.state, (t5) => {
      "measured" === t5 && this.finishToolCreation();
    }, A), this.analysisViewData.path.on("change", () => {
      const t5 = this.analysisViewData.path;
      "initial" !== this.polygonState || t5.isEmptyPolygon || (t5.isValidPolygon ? this.polygonState = "measured" : this.polygonState = "drawing");
    })]);
  }
  destroy() {
    this.measurementView.destroy(), this._set("measurementView", null), this._updatingHandles = u(this._updatingHandles);
  }
  get _snappingManager() {
    return this._snappingManagerResult.snappingManager;
  }
  get state() {
    return 0 === this.analysisViewData.path.numVertices ? "ready" : this.analysisViewData.path.isValidPolygon && "editing" !== this.polygonState ? "measured" : "measuring";
  }
  get cursor() {
    return "ready" === this.state || "drawing" === this.polygonState ? "crosshair" : null;
  }
  get updating() {
    return this._updatingHandles.updating || this._snappingManager.updating;
  }
  get stagedPoint() {
    return this._snappingOperation.stagedPoint;
  }
  set stagedPoint(t4) {
    this._snappingOperation.stagedPoint = t4;
  }
  get snappingOptions() {
    return this._snappingManager.options;
  }
  finishMeasurement() {
    const { path: t4 } = this.analysisViewData;
    t4.numVertices < 3 ? (t4.clear(), this.polygonState = "initial") : (t4.close(), this.polygonState = "measured"), this._resetSnappingState();
  }
  onShow() {
    this.measurementView.show();
  }
  onHide() {
    this.measurementView.hide();
  }
  onDeactivate() {
    this._resetSnappingState();
  }
  onInputEvent(t4) {
    switch (t4.type) {
      case "immediate-double-click":
        this._handleImmediateDoubleClick(t4);
        break;
      case "immediate-click":
        this._handleImmediateClick(t4);
        break;
      case "pointer-move":
        this._handlePointerMove(t4);
        break;
      case "drag":
        this._handleDrag(t4);
        break;
      case "key-down":
        this._handleKeyDown(t4);
    }
  }
  _setupManipulators() {
    const t4 = (t5) => t5.events.on("grab-changed", () => {
      if (this.analysisViewData.path.isValidPolygon) {
        const t6 = this.manipulators.some((t7) => t7.manipulator.grabbing);
        this.polygonState = t6 ? "editing" : "measured";
      }
    }), e7 = (e8) => {
      this.addHandles([p2(e8, (t5, e9, i2, a3) => {
        const n5 = A2(t5), s2 = t5.metadata, o2 = this._snappingManager, r2 = this._getSnappingContext(a3), p6 = this._updatingHandles, { snappingStep: l, cancelSnapping: h3 } = f2({ snappingManager: o2, snappingContext: r2, updatingHandles: p6 });
        i2 = i2.next(n5).next((e10) => (this.analysisViewData.lastDraggedVertex = null, this.analysisViewData.path.setVertexPosition(s2, d6), t5.location = d6, e10)).next(h3), e9.next(n5).next(F2(this.view)).next(...l).next((e10) => {
          t5.location = e10.mapEnd, this.analysisViewData.lastDraggedVertex = "end" === e10.action ? null : s2, this.analysisViewData.path.setVertexPosition(s2, x2(e10.mapEnd));
        });
        const d6 = x2(this.analysisViewData.path.getVertexPositionAsPoint(s2));
      }), t4(e8)], e8);
    };
    this.manipulators.forEach(({ manipulator: t5 }) => {
      e7(t5);
    }), this.addHandles([this.manipulators.on("after-add", ({ item: { manipulator: t5 } }) => {
      e7(t5);
    }), this.manipulators.on("after-remove", ({ item: { manipulator: t5 } }) => this.removeHandles(t5))]);
  }
  _handleImmediateDoubleClick(t4) {
    M(t4) && ("drawing" === this.polygonState && this.finishMeasurement(), t4.stopPropagation());
  }
  _handleDrag(t4) {
    "editing" === this.polygonState && t4.stopPropagation();
  }
  _handleImmediateClick(t4) {
    if (!M(t4))
      return;
    const e7 = n4(t4), { pointerType: i2 } = t4;
    if (this.active)
      switch (this.polygonState) {
        case "initial":
          if (this._addVertexAt(e7, i2))
            return this.stagedPoint = null, this.polygonState = "drawing", void t4.stopPropagation();
          break;
        case "drawing": {
          const a3 = this.measurementView.vertexHandleAt(e7, i2);
          if (null == a3) {
            if (this._addVertexAt(e7, i2))
              return this.stagedPoint = null, void t4.stopPropagation();
          } else
            0 === a3.index && (this.finishMeasurement(), t4.stopPropagation());
          break;
        }
      }
    "mouse" === t4.pointerType && this._hoverAt(e7);
  }
  _handlePointerMove(t4) {
    if ("mouse" === t4.pointerType) {
      const e7 = n4(t4);
      this._hoverAt(e7);
    }
  }
  _handleKeyDown(t4) {
    const { path: e7 } = this.analysisViewData;
    "Enter" === t4.key && "drawing" === this.polygonState && e7.numVertices >= 3 && (this.stagedPoint = null, this.finishMeasurement(), t4.stopPropagation());
  }
  _hoverAt(t4) {
    const { polygonState: e7 } = this;
    if (this.active && ("initial" === e7 || "drawing" === e7)) {
      const e8 = this._pick(t4);
      if (null != (e8 == null ? void 0 : e8.mapPoint)) {
        const t5 = this._getSnappingContext("mouse");
        this._updatingHandles.addPromise(d(this._snappingOperation.snap({ point: e8.mapPoint }, this._snappingManager, t5)));
      }
    } else
      this.stagedPoint = null;
  }
  _addVertexAt(t4, e7) {
    const i2 = this._pick(t4);
    if (null != (i2 == null ? void 0 : i2.mapPoint)) {
      const { mapPoint: t5 } = i2, a3 = this._getSnappingContext(e7), n5 = this._snappingOperation.update({ point: t5 }, this._snappingManager, a3), s2 = x2(n5, new x());
      return this.analysisViewData.path.add(s2), true;
    }
    return false;
  }
  _pick(t4) {
    const e7 = new s(t4);
    return this.measurementView.pick(e7);
  }
  _resetSnappingState() {
    this._snappingManager.doneSnapping(), this._snappingOperation.abort(), this._snappingOperation.stagedPoint = null;
  }
  get test() {
    return { snappingManager: this._snappingManager };
  }
};
e([y({ readOnly: true })], b2.prototype, "state", null), e([y()], b2.prototype, "polygonState", void 0), e([y({ readOnly: true })], b2.prototype, "cursor", null), e([y()], b2.prototype, "measurementView", void 0), e([y({ constructOnly: true })], b2.prototype, "view", void 0), e([y({ constructOnly: true })], b2.prototype, "analysis", void 0), e([y({ constructOnly: true })], b2.prototype, "analysisViewData", void 0), e([y({ readOnly: true })], b2.prototype, "manipulators", void 0), e([y()], b2.prototype, "updating", null), e([y()], b2.prototype, "stagedPoint", null), e([y()], b2.prototype, "snappingOptions", null), b2 = e([a("esri.views.3d.interactive.measurementTools.areaMeasurement3D.AreaMeasurement3DTool")], b2);
var O2 = b2;

// node_modules/@arcgis/core/widgets/AreaMeasurement3D/AreaMeasurement3DViewModel.js
var p5 = class extends _ {
  constructor(t4) {
    super(t4), this.analysis = null, this.supportedViewType = "3d", this.unsupportedErrorMessage = "AreaMeasurement3DViewModel is only supported in 3D views.", this._userUnitOptions = null, this._userUnit = null;
  }
  initialize() {
    this.addHandles(d2(() => ({ analysis: this.analysis, unit: this.unit }), ({ analysis: t4, unit: e7 }) => {
      null != t4 && (t4.unit = e7);
    }, A));
  }
  get state() {
    return this.disabled || !this.ready ? "disabled" : null == this.tool ? "ready" : this.tool.state;
  }
  get measurement() {
    if (null == this.tool || this.disabled || this.tool.destroyed)
      return null;
    const { analysisView: t4 } = this;
    if (null == t4)
      return null;
    const e7 = t4.analysisVisualization, i2 = e7.viewData, s2 = i2.validMeasurement, n5 = "euclidean" === i2.mode, r2 = 0 === i2.intersectingSegments.size, l = r2 ? s2 ? "available" : "unavailable" : "invalid";
    return { mode: n5 ? "euclidean" : "geodesic", area: { text: r2 && s2 ? e7.areaLabel : null, state: l }, perimeterLength: { text: r2 && s2 ? e7.perimeterLengthLabel : null, state: l } };
  }
  set unitOptions(t4) {
    this._userUnitOptions = t4, this._set("unitOptions", this._filteredOrAllUnits(this._userUnitOptions));
  }
  get unitOptions() {
    return this._filteredOrAllUnits(this._userUnitOptions);
  }
  set unit(t4) {
    this._userUnit = t4 ? this._findSelectableUnit(t4, this._userUnit) : null;
  }
  get unit() {
    return null != this._userUnit ? (this._userUnit = this._findSelectableUnit(this._userUnit, this.defaultUnit), this._userUnit) : this._findSelectableUnit(this.defaultUnit);
  }
  constructAnalysis() {
    return new m();
  }
  constructTool() {
    return new O2({ view: this.view, analysis: this.analysis, analysisViewData: this.analysisView, visible: this.visible });
  }
  _findSelectableUnit(t4, e7) {
    const { unitOptions: i2 } = this;
    return i2.includes(t4) ? t4 : null != e7 ? this._findSelectableUnit(e7) : i2[0];
  }
  _filteredOrAllUnits(t4) {
    if (null == t4)
      return w.slice();
    const e7 = t4.filter((t5) => w.includes(t5));
    return 0 === e7.length ? w.slice() : e7;
  }
};
e([y({ type: m })], p5.prototype, "analysis", void 0), e([y({ readOnly: true })], p5.prototype, "state", null), e([y({ readOnly: true })], p5.prototype, "measurement", null), e([y()], p5.prototype, "unitOptions", null), e([y()], p5.prototype, "unit", null), e([y(e6)], p5.prototype, "defaultUnit", void 0), e([y()], p5.prototype, "_userUnit", void 0), p5 = e([a("esri.widgets.AreaMeasurement3D.AreaMeasurement3DViewModel")], p5);
var d4 = p5;

// node_modules/@arcgis/core/widgets/AreaMeasurement3D.js
var u4 = "esri-area-measurement-3d";
var m2 = { base: u4, newMeasurementButton: `${u4}__clear-button` };
var d5 = class extends D {
  constructor(e7, t4) {
    super(e7, t4), this.messages = null, this.messagesCommon = null, this.messagesUnits = null, this.viewModel = new d4();
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e7) {
    this.viewModel.view = e7;
  }
  get visible() {
    return this.viewModel.visible;
  }
  set visible(e7) {
    this.viewModel.visible = e7;
  }
  get active() {
    return this.viewModel.active;
  }
  get analysis() {
    return this.viewModel.analysis;
  }
  set analysis(e7) {
    this.viewModel.analysis = e7;
  }
  get icon() {
    return "measure-area";
  }
  set icon(e7) {
    this._overrideIfSome("icon", e7);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e7) {
    this._overrideIfSome("label", e7);
  }
  get unitOptions() {
    return this.viewModel.unitOptions;
  }
  set unitOptions(e7) {
    this.viewModel.unitOptions = e7;
  }
  get unit() {
    return this.viewModel.unit;
  }
  set unit(e7) {
    this.viewModel.unit = e7;
  }
  render() {
    const { messages: e7, messagesCommon: s2, messagesUnits: i2, unit: o2, unitOptions: r2, viewModel: l } = this, { active: u5, measurement: d6, state: v2, supported: g } = l;
    return n2("div", { "aria-label": this.messages.widgetLabel, class: this.classes(m2.base, e3.widget, e3.panel), key: this, role: "presentation" }, this.visible ? n2(u3, { active: u5, measurementItems: [{ key: "direct", title: i2.measures.area, value: c3(d6 == null ? void 0 : d6.area) }, { key: "perimeter", title: e7.perimeterLength, value: c3(d6 == null ? void 0 : d6.perimeterLength) }], messages: { ...e7, notApplicable: s2.notApplicable }, newMeasurementButtonClass: m2.newMeasurementButton, state: v2, supported: g, unit: o2, unitOptions: r2, onNewMeasurementClick: () => {
      d(this.viewModel.start());
    }, onUnitChange: (e8) => {
      this.unit = e8;
    } }) : null);
  }
};
function c3(e7) {
  return "available" === (e7 == null ? void 0 : e7.state) ? e7.text : null;
}
e([y()], d5.prototype, "view", null), e([y()], d5.prototype, "visible", null), e([y()], d5.prototype, "active", null), e([y({ constructOnly: true, nonNullable: true })], d5.prototype, "analysis", null), e([y()], d5.prototype, "icon", null), e([y()], d5.prototype, "label", null), e([y(), e2("esri/widgets/AreaMeasurement3D/t9n/AreaMeasurement3D")], d5.prototype, "messages", void 0), e([y(), e2("esri/t9n/common")], d5.prototype, "messagesCommon", void 0), e([y(), e2("esri/core/t9n/Units")], d5.prototype, "messagesUnits", void 0), e([y()], d5.prototype, "uiStrings", void 0), e([y({ type: d4 })], d5.prototype, "viewModel", void 0), e([y()], d5.prototype, "unitOptions", null), e([y()], d5.prototype, "unit", null), d5 = e([a("esri.widgets.AreaMeasurement3D")], d5);
var v = d5;
export {
  v as default
};
//# sourceMappingURL=AreaMeasurement3D-VTG5QAYO.js.map
