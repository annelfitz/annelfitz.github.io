import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  importCoreReactiveUtils,
  newWidgetsTableList
} from "./chunk-YXW2SI4L.js";
import {
  addHandles,
  checkForView,
  referenceElementHelper
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-table-list.entry.js
var tableListCss = "arcgis-table-list{}";
var ArcgisTableList = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.arcgisTableListReady = createEvent(this, "arcgisTableListReady", 7);
    this.tableListTriggerAction = createEvent(this, "tableListTriggerAction", 7);
    this._watchHandles = [];
    this.referenceElement = void 0;
    this.collapsed = false;
    this.dragEnabled = false;
    this.filterPlaceholder = "";
    this.filterText = "";
    this.icon = void 0;
    this.minDragEnabledItems = 2;
    this.minFilterItems = 10;
    this.selectedItems = void 0;
    this.selectionMode = "none";
    this.listItemCreatedFunction = void 0;
    this.visibleElementsCloseButton = false;
    this.visibleElementsCollapseButton = false;
    this.visibleElementsErrors = false;
    this.visibleElementsFilter = false;
    this.visibleElementsFlow = true;
    this.visibleElementsHeading = false;
    this.visibleElementsStatusIndicators = true;
    this.visibleElementsTemporaryTableIndicators = false;
    this.position = "bottom-left";
    this.view = void 0;
    this.widget = void 0;
  }
  referenceElementWatcher(newValue) {
    void referenceElementHelper(this, newValue);
  }
  collapsedWatcher(value) {
    if (this.widget && this.widget.collapsed !== value) {
      this.widget.collapsed = value;
    }
  }
  dragEnabledWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.dragEnabled = value;
    }
  }
  filterPlaceholderWatcher(value) {
    if (this.widget) {
      this.widget.filterPlaceholder = value;
    }
  }
  filterTextWatcher(value) {
    if (this.widget) {
      this.widget.filterText = value;
    }
  }
  iconWatcher(value) {
    if (this.widget) {
      this.widget.icon = value;
    }
  }
  minDragEnabledItemsWatcher(value) {
    if (this.widget) {
      this.widget.minDragEnabledItems = value;
    }
  }
  minFilterItemsWatcher(value) {
    if (this.widget) {
      this.widget.minFilterItems = value;
    }
  }
  selectedItemsWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.selectedItems = value;
    }
  }
  selectionModeWatcher(value) {
    if (this.widget) {
      this.widget.selectionMode = value;
    }
  }
  listItemCreatedFunctionWatcher(newValue) {
    if (this.widget) {
      this.widget.listItemCreatedFunction = newValue;
    }
  }
  visibleElementsCloseButtonWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        closeButton: value
      };
    }
  }
  visibleElementsCollapseButtonWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        collapseButton: value
      };
    }
  }
  visibleElementsErrorsWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        errors: value
      };
    }
  }
  visibleElementsFilterWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        filter: value
      };
    }
  }
  visibleElementsFlowWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        flow: value
      };
    }
  }
  visibleElementsHeadingWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        heading: value
      };
    }
  }
  visibleElementsStatusIndicatorsWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        statusIndicators: value
      };
    }
  }
  visibleElementsTemporaryTableIndicatorsWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        temporaryTableIndicators: value
      };
    }
  }
  positionWatcher(newValue) {
    if (newValue !== void 0 && this.widget) {
      this.view.ui.move(this.childElem, newValue);
    }
  }
  viewWatcher(newValue) {
    if (newValue !== void 0 && this.widget) {
      this.widget.map = newValue.map;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = this._createParams();
    const widget = await newWidgetsTableList(params);
    this.widget = widget;
    await this._addWatchers();
    this._proxyEvents();
    this._addContainer();
    this.arcgisTableListReady.emit();
    checkForView(this);
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    return h("div", { ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  _addContainer() {
    this.widget.container = this.childElem;
  }
  async _addWatchers() {
    const { watch } = await importCoreReactiveUtils();
    addHandles(this, [
      watch(() => this.widget.selectedItems, (value) => this.selectedItems = value),
      watch(() => this.widget.collapsed, (value) => this.collapsed = value)
    ]);
  }
  _createParams() {
    const params = {};
    params.visibleElements = {
      closeButton: this.visibleElementsCloseButton,
      collapseButton: this.visibleElementsCollapseButton,
      errors: this.visibleElementsErrors,
      filter: this.visibleElementsFilter,
      flow: this.visibleElementsFlow,
      heading: this.visibleElementsHeading,
      statusIndicators: this.visibleElementsStatusIndicators,
      temporaryTableIndicators: this.visibleElementsTemporaryTableIndicators
    };
    if (this.collapsed !== void 0) {
      params.collapsed = this.collapsed;
    }
    if (this.dragEnabled !== void 0) {
      params.dragEnabled = this.dragEnabled;
    }
    if (this.filterPlaceholder) {
      params.filterPlaceholder = this.filterPlaceholder;
    }
    if (this.filterText) {
      params.filterText = this.filterText;
    }
    if (this.icon) {
      params.icon = this.icon;
    }
    if (this.listItemCreatedFunction) {
      params.listItemCreatedFunction = this.listItemCreatedFunction;
    }
    if (this.minDragEnabledItems !== void 0) {
      params.minDragEnabledItems = this.minDragEnabledItems;
    }
    if (this.minFilterItems !== void 0) {
      params.minFilterItems = this.minFilterItems;
    }
    if (this.selectedItems) {
      params.selectedItems = this.selectedItems;
    }
    if (this.selectionMode) {
      params.selectionMode = this.selectionMode;
    }
    if (this.view) {
      params.map = this.view.map;
    }
    return params;
  }
  _proxyEvents() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.on("trigger-action", (e) => this.tableListTriggerAction.emit(e));
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "referenceElement": ["referenceElementWatcher"],
      "collapsed": ["collapsedWatcher"],
      "dragEnabled": ["dragEnabledWatcher"],
      "filterPlaceholder": ["filterPlaceholderWatcher"],
      "filterText": ["filterTextWatcher"],
      "icon": ["iconWatcher"],
      "minDragEnabledItems": ["minDragEnabledItemsWatcher"],
      "minFilterItems": ["minFilterItemsWatcher"],
      "selectedItems": ["selectedItemsWatcher"],
      "selectionMode": ["selectionModeWatcher"],
      "listItemCreatedFunction": ["listItemCreatedFunctionWatcher"],
      "visibleElementsCloseButton": ["visibleElementsCloseButtonWatcher"],
      "visibleElementsCollapseButton": ["visibleElementsCollapseButtonWatcher"],
      "visibleElementsErrors": ["visibleElementsErrorsWatcher"],
      "visibleElementsFilter": ["visibleElementsFilterWatcher"],
      "visibleElementsFlow": ["visibleElementsFlowWatcher"],
      "visibleElementsHeading": ["visibleElementsHeadingWatcher"],
      "visibleElementsStatusIndicators": ["visibleElementsStatusIndicatorsWatcher"],
      "visibleElementsTemporaryTableIndicators": ["visibleElementsTemporaryTableIndicatorsWatcher"],
      "position": ["positionWatcher"],
      "view": ["viewWatcher"]
    };
  }
};
ArcgisTableList.style = tableListCss;
export {
  ArcgisTableList as arcgis_table_list
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-table-list.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-table-list.entry-A6N4RUPA.js.map
