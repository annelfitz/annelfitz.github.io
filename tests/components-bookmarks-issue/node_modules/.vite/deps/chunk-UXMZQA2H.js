import {
  p as p2,
  p2 as p3
} from "./chunk-V2LOXBCS.js";
import {
  h2 as h
} from "./chunk-HRDKP7QO.js";
import {
  d as d2
} from "./chunk-SCRCLNT5.js";
import {
  p
} from "./chunk-JL4LXZGM.js";
import {
  n as n2
} from "./chunk-HTKSTTSR.js";
import {
  y as y2
} from "./chunk-J7AMTUNG.js";
import {
  j
} from "./chunk-HV6S3GY2.js";
import {
  w
} from "./chunk-IZKCZQUY.js";
import {
  n
} from "./chunk-M5ZB5S5C.js";
import {
  A,
  d,
  v
} from "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import {
  s
} from "./chunk-7RBRCL6S.js";

// node_modules/@arcgis/core/views/layers/support/Geometry.js
var y3;
var c = { base: n, key: "type", typeMap: { extent: w, polygon: j } };
var n3 = y3 = class extends p2 {
  constructor(o) {
    super(o), this.type = "geometry", this.geometry = null;
  }
  clone() {
    var _a;
    return new y3({ geometry: ((_a = this.geometry) == null ? void 0 : _a.clone()) ?? null });
  }
  commitVersionProperties() {
    this.commitProperty("geometry");
  }
};
e([y({ types: c, json: { read: y2, write: true } })], n3.prototype, "geometry", void 0), n3 = y3 = e([a("esri.views.layers.support.Geometry")], n3);
var a2 = n3;

// node_modules/@arcgis/core/views/layers/support/Path.js
var e2 = class extends p2 {
  constructor(r) {
    super(r), this.type = "path", this.path = [];
  }
  commitVersionProperties() {
    this.commitProperty("path");
  }
};
e([y({ type: [[[Number]]], json: { write: true } })], e2.prototype, "path", void 0), e2 = e([a("esri.views.layers.support.Path")], e2);
var p4 = e2;

// node_modules/@arcgis/core/views/2d/layers/LayerView2D.js
var f = V.ofType({ key: "type", base: null, typeMap: { rect: p3, path: p4, geometry: a2 } });
var m = (t) => {
  let d3 = class extends t {
    constructor() {
      super(...arguments), this.attached = false, this.clips = new f(), this.lastUpdateId = -1, this.moving = false, this.updateRequested = false, this.visibleAtCurrentScale = false, this.highlightOptions = null;
    }
    initialize() {
      var _a, _b, _c;
      const e3 = ((_a = this.view) == null ? void 0 : _a.spatialReferenceLocked) ?? true, t2 = (_b = this.view) == null ? void 0 : _b.spatialReference;
      t2 && e3 && !this.spatialReferenceSupported ? this.addResolvingPromise(Promise.reject(new s("layerview:spatial-reference-incompatible", "The spatial reference of this layer does not meet the requirements of the view", { layer: this.layer }))) : (this.container || (this.container = new h()), this.container.fadeTransitionEnabled = true, this.container.visible = false, this.container.endTransitions(), this.addHandles([d(() => this.suspended, (e4) => {
        this.container && (this.container.visible = !e4);
      }, A), d(() => this.updateSuspended, (e4) => {
        this.view && !e4 && this.updateRequested && this.view.requestUpdate();
      }, A), d(() => {
        var _a2;
        return ((_a2 = this.layer) == null ? void 0 : _a2.opacity) ?? 1;
      }, (e4) => {
        this.container && (this.container.opacity = e4);
      }, A), d(() => this.layer && "blendMode" in this.layer ? this.layer.blendMode : "normal", (e4) => {
        this.container && (this.container.blendMode = e4);
      }, A), d(() => this.layer && "effect" in this.layer ? this.layer.effect : null, (e4) => {
        this.container && (this.container.effect = e4);
      }, A), d(() => this.highlightOptions, (e4) => this.container.highlightOptions = e4, A), v(() => this.clips, "change", () => {
        this.container && (this.container.clips = this.clips);
      }, A), d(() => {
        var _a2;
        return { scale: (_a2 = this.view) == null ? void 0 : _a2.scale, scaleRange: this.layer && "effectiveScaleRange" in this.layer ? this.layer.effectiveScaleRange : null };
      }, ({ scale: e4 }) => {
        const t3 = null != e4 && this.isVisibleAtScale(e4);
        t3 !== this.visibleAtCurrentScale && this._set("visibleAtCurrentScale", t3);
      }, A)], "constructor"), ((_c = this.view) == null ? void 0 : _c.whenLayerView) ? this.view.whenLayerView(this.layer).then((e4) => {
        e4 === this && this.processAttach();
      }, () => {
      }) : this.when().then(() => {
        this.processAttach();
      }, () => {
      }));
    }
    destroy() {
      this.processDetach(), this.updateRequested = false;
    }
    get spatialReferenceSupported() {
      var _a;
      const e3 = (_a = this.view) == null ? void 0 : _a.spatialReference;
      return null == e3 || this.supportsSpatialReference(e3);
    }
    get updateSuspended() {
      return this.suspended;
    }
    get updating() {
      var _a;
      return this.spatialReferenceSupported && (!this.attached || !this.suspended && (this.updateRequested || this.isUpdating()) || !!((_a = this._updatingHandles) == null ? void 0 : _a.updating));
    }
    processAttach() {
      this.isResolved() && !this.attached && !this.destroyed && this.spatialReferenceSupported && (this.attach(), this.attached = true, this.requestUpdate());
    }
    processDetach() {
      this.attached && (this.attached = false, this.removeHandles("attach"), this.detach(), this.updateRequested = false);
    }
    isVisibleAtScale(e3) {
      const t2 = this.layer && "effectiveScaleRange" in this.layer ? this.layer.effectiveScaleRange : null;
      if (!t2)
        return true;
      const { minScale: s2, maxScale: i } = t2;
      return d2(e3, s2, i);
    }
    requestUpdate() {
      this.destroyed || this.updateRequested || (this.updateRequested = true, this.updateSuspended || this.view.requestUpdate());
    }
    processUpdate(e3) {
      !this.isFulfilled() || this.isResolved() ? (this._set("updateParameters", e3), this.updateRequested && !this.updateSuspended && (this.updateRequested = false, this.update(e3))) : this.updateRequested = false;
    }
    hitTest(e3, t2) {
      return Promise.resolve(null);
    }
    supportsSpatialReference(e3) {
      return true;
    }
    canResume() {
      return !!this.spatialReferenceSupported && (!!super.canResume() && this.visibleAtCurrentScale);
    }
    getSuspendInfo() {
      const e3 = super.getSuspendInfo(), t2 = !this.spatialReferenceSupported, s2 = this.visibleAtCurrentScale;
      return t2 && (e3.spatialReferenceNotSupported = t2), s2 && (e3.outsideScaleRange = s2), e3;
    }
    addAttachHandles(e3) {
      this.addHandles(e3, "attach");
    }
  };
  return e([y()], d3.prototype, "attached", void 0), e([y({ type: f, set(e3) {
    const t2 = n2(e3, this._get("clips"), f);
    this._set("clips", t2);
  } })], d3.prototype, "clips", void 0), e([y()], d3.prototype, "container", void 0), e([y()], d3.prototype, "moving", void 0), e([y({ readOnly: true })], d3.prototype, "spatialReferenceSupported", null), e([y({ readOnly: true })], d3.prototype, "updateParameters", void 0), e([y()], d3.prototype, "updateRequested", void 0), e([y()], d3.prototype, "updateSuspended", null), e([y()], d3.prototype, "updating", null), e([y()], d3.prototype, "view", void 0), e([y({ readOnly: true })], d3.prototype, "visibleAtCurrentScale", void 0), e([y({ type: p })], d3.prototype, "highlightOptions", void 0), d3 = e([a("esri.views.2d.layers.LayerView2D")], d3), d3;
};

export {
  a2 as a,
  m
};
//# sourceMappingURL=chunk-UXMZQA2H.js.map
