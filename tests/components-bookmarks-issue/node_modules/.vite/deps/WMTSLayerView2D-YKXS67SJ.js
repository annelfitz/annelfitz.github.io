import {
  n as n2,
  r as r2
} from "./chunk-653TPCXC.js";
import "./chunk-SQGFMYIT.js";
import {
  i
} from "./chunk-SWNHB34O.js";
import {
  m as m2
} from "./chunk-UXMZQA2H.js";
import "./chunk-V2LOXBCS.js";
import {
  u
} from "./chunk-NGAYW4TW.js";
import "./chunk-2WUPZJUL.js";
import "./chunk-KN52PCW4.js";
import "./chunk-SFKZ25SS.js";
import "./chunk-NCZU5DB4.js";
import "./chunk-SMDSNUU2.js";
import "./chunk-XTY645DH.js";
import "./chunk-UIOX7MPV.js";
import "./chunk-HRDKP7QO.js";
import "./chunk-4UOHLZKX.js";
import "./chunk-VJ2I4VSQ.js";
import "./chunk-MCZ4QOSQ.js";
import "./chunk-6XTKBOD7.js";
import "./chunk-IUY6HBLC.js";
import "./chunk-BHOYA5LV.js";
import "./chunk-SCRCLNT5.js";
import "./chunk-7FQYGAVT.js";
import "./chunk-QRQWG4D3.js";
import {
  m,
  r
} from "./chunk-5JXZHN2A.js";
import {
  h
} from "./chunk-KTQIY334.js";
import "./chunk-C5EJV3NW.js";
import "./chunk-XXIDOBRO.js";
import "./chunk-JL4LXZGM.js";
import "./chunk-O556EBAK.js";
import "./chunk-IJD65EMQ.js";
import "./chunk-4YGBWYMD.js";
import "./chunk-TNR6E67I.js";
import "./chunk-QREUCRQ4.js";
import "./chunk-YK3UMVCY.js";
import {
  e as e2
} from "./chunk-IQFWVTUJ.js";
import "./chunk-GB4RVOXH.js";
import "./chunk-JTUYA5FE.js";
import "./chunk-UNTQATE2.js";
import "./chunk-5YY6NZNY.js";
import "./chunk-DCBZOZ54.js";
import "./chunk-5IT6RVBX.js";
import "./chunk-IWO6JXL2.js";
import "./chunk-AVR3LWTZ.js";
import "./chunk-FFG7BDAP.js";
import "./chunk-I4SHZ6P5.js";
import "./chunk-JBU54P54.js";
import "./chunk-TLTAGTBA.js";
import "./chunk-2QPP5AGU.js";
import "./chunk-2C26DRKK.js";
import "./chunk-M4RFJU4F.js";
import "./chunk-WKVHVZW2.js";
import "./chunk-VIKID44H.js";
import "./chunk-3AIILHI5.js";
import "./chunk-VS6AHHIY.js";
import "./chunk-ZLQTPFTL.js";
import "./chunk-HZSGATFT.js";
import "./chunk-5JYVZQZR.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-QX66UTIR.js";
import "./chunk-326OSIM5.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import {
  G
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  b
} from "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/views/2d/layers/WMTSLayerView2D.js
var m3 = /* @__PURE__ */ new Set([102113, 102100, 3857, 3785, 900913]);
var y2 = [0, 0];
var _ = class extends i(r2(m2(u))) {
  constructor() {
    super(...arguments), this._tileStrategy = null, this._fetchQueue = null, this.layer = null;
  }
  get tileMatrixSet() {
    const e3 = this._getTileMatrixSetBySpatialReference(this.layer.activeLayer);
    return e3 ? (e3.id !== this.layer.activeLayer.tileMatrixSetId && (this.layer.activeLayer.tileMatrixSetId = e3.id), e3) : null;
  }
  update(e3) {
    this._fetchQueue.pause(), this._fetchQueue.state = e3.state, this._tileStrategy.update(e3), this._fetchQueue.resume();
  }
  attach() {
    var _a;
    const e3 = (_a = this.tileMatrixSet) == null ? void 0 : _a.tileInfo;
    e3 && (this._tileInfoView = new h(e3), this._fetchQueue = new m({ tileInfoView: this._tileInfoView, concurrency: 16, process: (e4, t) => this.fetchTile(e4, t) }), this._tileStrategy = new r({ cachePolicy: "keep", resampling: true, acquireTile: (e4) => this.acquireTile(e4), releaseTile: (e4) => this.releaseTile(e4), tileInfoView: this._tileInfoView }), this.addAttachHandles(this._updatingHandles.add(() => {
      var _a2, _b;
      return [(_b = (_a2 = this.layer) == null ? void 0 : _a2.activeLayer) == null ? void 0 : _b.styleId, this.tileMatrixSet];
    }, () => this.doRefresh())), super.attach());
  }
  detach() {
    var _a, _b;
    super.detach(), (_a = this._tileStrategy) == null ? void 0 : _a.destroy(), (_b = this._fetchQueue) == null ? void 0 : _b.destroy(), this._fetchQueue = this._tileStrategy = this._tileInfoView = null;
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  supportsSpatialReference(e3) {
    var _a;
    return ((_a = this.layer.activeLayer.tileMatrixSets) == null ? void 0 : _a.some((t) => {
      var _a2;
      return G((_a2 = t.tileInfo) == null ? void 0 : _a2.spatialReference, e3);
    })) ?? false;
  }
  async doRefresh() {
    if (this.attached) {
      if (this.suspended)
        return this._tileStrategy.clear(), void this.requestUpdate();
      this._fetchQueue.reset(), this._tileStrategy.refresh((e3) => this._updatingHandles.addPromise(this._enqueueTileFetch(e3)));
    }
  }
  acquireTile(e3) {
    const t = this._bitmapView.createTile(e3), i2 = t.bitmap;
    return [i2.x, i2.y] = this._tileInfoView.getTileCoords(y2, t.key), i2.resolution = this._tileInfoView.getTileResolution(t.key), [i2.width, i2.height] = this._tileInfoView.tileInfo.size, this._updatingHandles.addPromise(this._enqueueTileFetch(t)), this._bitmapView.addChild(t), this.requestUpdate(), t;
  }
  releaseTile(e3) {
    this._fetchQueue.abort(e3.key.id), this._bitmapView.removeChild(e3), e3.once("detach", () => e3.destroy()), this.requestUpdate();
  }
  async fetchTile(e3, t = {}) {
    const s = "tilemapCache" in this.layer ? this.layer.tilemapCache : null, { signal: r3, resamplingLevel: a2 = 0 } = t;
    if (!s)
      return this._fetchImage(e3, r3);
    const l = new e2(0, 0, 0, 0);
    let o;
    try {
      await s.fetchAvailabilityUpsample(e3.level, e3.row, e3.col, l, { signal: r3 }), o = await this._fetchImage(l, r3);
    } catch (n3) {
      if (b(n3))
        throw n3;
      if (a2 < 3) {
        const i2 = this._tileInfoView.getTileParentId(e3.id);
        if (i2) {
          const s2 = new e2(i2), r4 = await this.fetchTile(s2, { ...t, resamplingLevel: a2 + 1 });
          return n2(this._tileInfoView, r4, s2, e3);
        }
      }
      throw n3;
    }
    return n2(this._tileInfoView, o, l, e3);
  }
  canResume() {
    const e3 = super.canResume();
    return e3 ? null !== this.tileMatrixSet : e3;
  }
  async _enqueueTileFetch(e3) {
    if (!this._fetchQueue.has(e3.key.id)) {
      try {
        const t = await this._fetchQueue.push(e3.key);
        e3.bitmap.source = t, e3.bitmap.width = this._tileInfoView.tileInfo.size[0], e3.bitmap.height = this._tileInfoView.tileInfo.size[1], e3.once("attach", () => this.requestUpdate());
      } catch (s) {
        b(s) || n.getLogger(this).error(s);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e3, t) {
    return this.layer.fetchImageBitmapTile(e3.level, e3.row, e3.col, { signal: t });
  }
  _getTileMatrixSetBySpatialReference(e3) {
    const t = this.view.spatialReference;
    if (!e3.tileMatrixSets)
      return null;
    let i2 = e3.tileMatrixSets.find((e4) => {
      var _a;
      return G((_a = e4.tileInfo) == null ? void 0 : _a.spatialReference, t);
    });
    return !i2 && t.isWebMercator && (i2 = e3.tileMatrixSets.find((e4) => {
      var _a;
      return m3.has(((_a = e4.tileInfo) == null ? void 0 : _a.spatialReference.wkid) ?? -1);
    })), i2;
  }
};
e([y({ readOnly: true })], _.prototype, "tileMatrixSet", null), _ = e([a("esri.views.2d.layers.WMTSLayerView2D")], _);
var w = _;
export {
  w as default
};
//# sourceMappingURL=WMTSLayerView2D-YKXS67SJ.js.map
