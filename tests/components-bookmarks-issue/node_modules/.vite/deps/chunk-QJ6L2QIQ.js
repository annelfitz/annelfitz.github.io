import {
  j as j2
} from "./chunk-VXM3PR7E.js";
import {
  F,
  en
} from "./chunk-2ICUS4HL.js";
import {
  j
} from "./chunk-HV6S3GY2.js";
import {
  r
} from "./chunk-VIN55KNF.js";
import {
  f
} from "./chunk-SBL4URUW.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a2,
  s3 as s
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import {
  a
} from "./chunk-7RBRCL6S.js";

// node_modules/@arcgis/core/layers/support/SceneModification.js
var l;
var y2 = l = class extends f {
  constructor(e2) {
    super(e2), this.geometry = null, this.type = "clip";
  }
  writeGeometry(e2, r2, o, s2) {
    var _a;
    if (((_a = s2.layer) == null ? void 0 : _a.spatialReference) && !s2.layer.spatialReference.equals(this.geometry.spatialReference)) {
      if (!F(e2.spatialReference, s2.layer.spatialReference))
        return void ((s2 == null ? void 0 : s2.messages) && s2.messages.push(new s("scenemodification:unsupported", "Scene modifications with incompatible spatial references are not supported", { modification: this, spatialReference: s2.layer.spatialReference, context: s2 })));
      const p = new j();
      en(e2, p, s2.layer.spatialReference), r2[o] = p.toJSON(s2);
    } else
      r2[o] = e2.toJSON(s2);
    delete r2[o].spatialReference;
  }
  clone() {
    return new l({ geometry: a(this.geometry), type: this.type });
  }
};
e([y({ type: j }), j2()], y2.prototype, "geometry", void 0), e([r(["web-scene", "portal-item"], "geometry")], y2.prototype, "writeGeometry", null), e([y({ type: ["clip", "mask", "replace"], nonNullable: true }), j2()], y2.prototype, "type", void 0), y2 = l = e([a2("esri.layers.support.SceneModification")], y2);
var f2 = y2;

export {
  f2 as f
};
//# sourceMappingURL=chunk-QJ6L2QIQ.js.map
