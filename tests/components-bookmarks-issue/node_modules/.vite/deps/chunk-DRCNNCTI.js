import {
  e as e7
} from "./chunk-QR7J3YDY.js";
import {
  c,
  o as o4
} from "./chunk-B4E4X2TN.js";
import {
  e as e5
} from "./chunk-HS6YI5DU.js";
import {
  o as o2
} from "./chunk-CDBOQCLE.js";
import {
  o as o3
} from "./chunk-RSRUEM5U.js";
import {
  e as e6
} from "./chunk-HFJMEXIX.js";
import {
  e as e4
} from "./chunk-VYSGSKHB.js";
import {
  n as n2,
  o
} from "./chunk-P4MNTMCZ.js";
import {
  e as e3
} from "./chunk-GLF3KRAL.js";
import {
  e
} from "./chunk-N5GQOIDP.js";
import {
  e as e2
} from "./chunk-NFB6O77E.js";
import {
  n
} from "./chunk-OIJCMME5.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js
function o5(o6) {
  o6.attributes.add(e3.POSITION, "vec3"), o6.vertex.code.add(o`vec3 positionModel() { return position; }`);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/VertexPosition.glsl.js
function v(r, o6) {
  r.include(o5);
  const e8 = r.vertex;
  e8.include(c, o6), r.varyings.add("vPositionWorldCameraRelative", "vec3"), r.varyings.add("vPosition_view", "vec3"), e8.uniforms.add(new e4("transformWorldFromViewTH", (r2) => r2.transformWorldFromViewTH), new e4("transformWorldFromViewTL", (r2) => r2.transformWorldFromViewTL), new e5("transformViewFromCameraRelativeRS", (r2) => r2.transformViewFromCameraRelativeRS), new e6("transformProjFromView", (r2) => r2.transformProjFromView), new o4("transformWorldFromModelRS", (r2) => r2.transformWorldFromModelRS), new o3("transformWorldFromModelTH", (r2) => r2.transformWorldFromModelTH), new o3("transformWorldFromModelTL", (r2) => r2.transformWorldFromModelTL)), e8.code.add(o`vec3 positionWorldCameraRelative() {
vec3 rotatedModelPosition = transformWorldFromModelRS * positionModel();
vec3 transform_CameraRelativeFromModel = dpAdd(
transformWorldFromModelTL,
transformWorldFromModelTH,
-transformWorldFromViewTL,
-transformWorldFromViewTH
);
return transform_CameraRelativeFromModel + rotatedModelPosition;
}`), e8.code.add(o`
    void forwardPosition(float fOffset) {
      vPositionWorldCameraRelative = positionWorldCameraRelative();
      if (fOffset != 0.0) {
        vPositionWorldCameraRelative += fOffset * ${o6.spherical ? o`normalize(transformWorldFromViewTL + vPositionWorldCameraRelative)` : o`vec3(0.0, 0.0, 1.0)`};
      }

      vPosition_view = transformViewFromCameraRelativeRS * vPositionWorldCameraRelative;
      gl_Position = transformProjFromView * vec4(vPosition_view, 1.0);
    }
  `), r.fragment.uniforms.add(new e4("transformWorldFromViewTL", (r2) => r2.transformWorldFromViewTL)), e8.code.add(o`vec3 positionWorld() {
return transformWorldFromViewTL + vPositionWorldCameraRelative;
}`), r.fragment.code.add(o`vec3 positionWorld() {
return transformWorldFromViewTL + vPositionWorldCameraRelative;
}`);
}
var F = class extends n2 {
  constructor() {
    super(...arguments), this.transformWorldFromViewTH = n(), this.transformWorldFromViewTL = n(), this.transformViewFromCameraRelativeRS = e2(), this.transformProjFromView = e();
  }
};
var W = class extends n2 {
  constructor() {
    super(...arguments), this.transformWorldFromModelRS = e2(), this.transformWorldFromModelTH = n(), this.transformWorldFromModelTL = n();
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js
function t(e8) {
  e8.varyings.add("linearDepth", "float");
}
function i(e8) {
  e8.vertex.uniforms.add(new e7("nearFar", (e9, r) => r.camera.nearFar));
}
function n3(e8) {
  e8.vertex.code.add(o`float calculateLinearDepth(vec2 nearFar,float z) {
return (-z - nearFar[0]) / (nearFar[1] - nearFar[0]);
}`);
}
function d(a, d2) {
  const { vertex: s } = a;
  switch (d2.output) {
    case o2.Color:
      if (d2.receiveShadows)
        return t(a), void s.code.add(o`void forwardLinearDepth() { linearDepth = gl_Position.w; }`);
      break;
    case o2.LinearDepth:
    case o2.Shadow:
    case o2.ShadowHighlight:
    case o2.ShadowExcludeHighlight:
      return a.include(v, d2), t(a), i(a), n3(a), void s.code.add(o`void forwardLinearDepth() {
linearDepth = calculateLinearDepth(nearFar, vPosition_view.z);
}`);
  }
  s.code.add(o`void forwardLinearDepth() {}`);
}

export {
  o5 as o,
  v,
  F,
  W,
  t,
  i,
  n3 as n,
  d
};
//# sourceMappingURL=chunk-DRCNNCTI.js.map
