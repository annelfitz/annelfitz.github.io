import {
  P
} from "./chunk-ETHGDNE6.js";
import {
  j2 as j
} from "./chunk-ZIJHDTB7.js";
import {
  i
} from "./chunk-R4CJB3GP.js";
import {
  n
} from "./chunk-B647DRFJ.js";
import {
  y as y2
} from "./chunk-J7AMTUNG.js";
import {
  a as a2,
  f
} from "./chunk-SBL4URUW.js";
import {
  p
} from "./chunk-Z4Y53NDM.js";
import {
  e3 as e2,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";

// node_modules/@arcgis/core/Graphic.js
var m;
function g(t) {
  if (!t)
    return null;
  const e3 = {};
  for (const r in t) {
    const s = y2(t[r]);
    s && (e3[r] = s);
  }
  return 0 !== Object.keys(e3).length ? e3 : null;
}
function y3(t) {
  if (null == t)
    return null;
  const e3 = {};
  for (const r in t) {
    const s = t[r];
    s && (e3[r] = s.toJSON());
  }
  return 0 !== Object.keys(e3).length ? e3 : null;
}
var c = m = class extends i(f) {
  constructor(...t) {
    super(...t), this.isAggregate = false, this.layer = null, this.origin = null, this.popupTemplate = null, this.sourceLayer = null, Object.defineProperty(this, "uid", { value: e2(), configurable: true }), Object.defineProperty(this, "_lastMeshTransform", { value: {}, configurable: true, writable: true, enumerable: false });
  }
  normalizeCtorArgs(t, e3, r, s) {
    return t && !t.declaredClass ? t : { geometry: t, symbol: e3, attributes: r, popupTemplate: s };
  }
  initialize() {
    this._watchMeshGeometryChanges();
  }
  set aggregateGeometries(t) {
    const e3 = this._get("aggregateGeometries");
    JSON.stringify(e3) !== JSON.stringify(t) && this._set("aggregateGeometries", t);
  }
  set attributes(t) {
    const e3 = this._get("attributes");
    e3 !== t && (this._set("attributes", t), this._notifyLayer("attributes", e3, t));
  }
  set geometry(t) {
    const e3 = this._get("geometry");
    e3 !== t && (this._set("geometry", t), "mesh" !== (t == null ? void 0 : t.type) && this._notifyLayer("geometry", e3, t));
  }
  set symbol(t) {
    const e3 = this._get("symbol");
    e3 !== t && (this._set("symbol", t), this._notifyLayer("symbol", e3, t));
  }
  set visible(t) {
    const e3 = this._get("visible");
    e3 !== t && (this._set("visible", t), this._notifyLayer("visible", e3, t));
  }
  cloneShallow() {
    return new m({ aggregateGeometries: this.aggregateGeometries, attributes: this.attributes, geometry: this.geometry, isAggregate: this.isAggregate, layer: this.layer, popupTemplate: this.popupTemplate, sourceLayer: this.sourceLayer, symbol: this.symbol, visible: this.visible, origin: this.origin });
  }
  getEffectivePopupTemplate(t = false) {
    if (this.popupTemplate)
      return this.popupTemplate;
    const e3 = this.origin && "layer" in this.origin ? this.origin.layer : null;
    for (const r of [e3, this.sourceLayer, this.layer])
      if (r) {
        if ("popupTemplate" in r && r.popupTemplate)
          return r.popupTemplate;
        if (t && "defaultPopupTemplate" in r && null != r.defaultPopupTemplate)
          return r.defaultPopupTemplate;
      }
    return null;
  }
  getAttribute(t) {
    var _a;
    return (_a = this.attributes) == null ? void 0 : _a[t];
  }
  setAttribute(t, e3) {
    if (this.attributes) {
      const r = this.getAttribute(t);
      this.attributes[t] = e3, this._notifyLayer("attributes", r, e3, t);
    } else
      this.attributes = { [t]: e3 }, this._notifyLayer("attributes", void 0, e3, t);
  }
  getObjectId() {
    return this.sourceLayer && "objectIdField" in this.sourceLayer && this.sourceLayer.objectIdField ? this.getAttribute(this.sourceLayer.objectIdField) : null;
  }
  toJSON() {
    var _a;
    return { aggregateGeometries: y3(this.aggregateGeometries), geometry: null != this.geometry ? this.geometry.toJSON() : null, symbol: null != this.symbol ? this.symbol.toJSON() : null, attributes: a2(this.attributes) ? this.attributes.toJSON() : { ...this.attributes }, popupTemplate: ((_a = this.popupTemplate) == null ? void 0 : _a.toJSON()) ?? null };
  }
  notifyMeshTransformChanged(t = {}) {
    const { geometry: e3 } = this;
    if ("mesh" === (e3 == null ? void 0 : e3.type)) {
      const r = { origin: e3.origin, transform: e3.transform };
      this._notifyLayer("origin-transform", r, r, t.action);
    }
  }
  _notifyLayer(t, e3, r, s) {
    if (!this.layer || !("graphicChanged" in this.layer))
      return;
    const i2 = { graphic: this, property: t, oldValue: e3, newValue: r };
    "origin-transform" === t && (i2.action = s), "attributes" === t && (i2.attributeName = s), this.layer.graphicChanged(i2);
  }
  _watchMeshGeometryChanges() {
    this.addHandles([p(() => {
      var _a, _b;
      return "mesh" === ((_a = this.geometry) == null ? void 0 : _a.type) && this.geometry.vertexSpace.origin ? { localMatrix: (_b = this.geometry.transform) == null ? void 0 : _b.localMatrix, origin: this.geometry.vertexSpace.origin } : void 0;
    }, ({ localMatrix: t, origin: e3 }) => {
      this._lastMeshTransform.localMatrix === t && this._lastMeshTransform.origin === e3 || (this._lastMeshTransform.localMatrix = t, this._lastMeshTransform.origin = e3, this.notifyMeshTransformChanged());
    }), p(() => {
      var _a;
      return "mesh" === ((_a = this.geometry) == null ? void 0 : _a.type) ? { vertexAttributes: this.geometry.vertexAttributes } : void 0;
    }, () => {
      var _a;
      const t = this.geometry;
      "mesh" === (t == null ? void 0 : t.type) && t.vertexSpace.origin ? (this._lastMeshTransform.localMatrix = (_a = t.transform) == null ? void 0 : _a.localMatrix, this._lastMeshTransform.origin = t.vertexSpace.origin) : (this._lastMeshTransform.localMatrix = void 0, this._lastMeshTransform.origin = void 0), this._notifyLayer("geometry", this.geometry, this.geometry);
    }, { equals: (t, e3) => t === e3, sync: true })]);
  }
};
e([y({ value: null, json: { read: g } })], c.prototype, "aggregateGeometries", null), e([y({ value: null })], c.prototype, "attributes", null), e([y({ value: null, types: n, json: { read: y2 } })], c.prototype, "geometry", null), e([y({ type: Boolean })], c.prototype, "isAggregate", void 0), e([y({ clonable: "reference" })], c.prototype, "layer", void 0), e([y({ clonable: "reference" })], c.prototype, "origin", void 0), e([y({ type: P })], c.prototype, "popupTemplate", void 0), e([y({ clonable: "reference" })], c.prototype, "sourceLayer", void 0), e([y({ value: null, types: j })], c.prototype, "symbol", null), e([y({ type: Boolean, value: true })], c.prototype, "visible", null), c = m = e([a("esri.Graphic")], c), function(t) {
  t.generateUID = e2;
}(c || (c = {}));
var f2 = c;

export {
  f2 as f
};
//# sourceMappingURL=chunk-QYC3GV65.js.map
