import {
  p
} from "./chunk-5ZOEO6IY.js";
import {
  A,
  l
} from "./chunk-BJMVCX7I.js";
import {
  a as a2,
  r,
  s
} from "./chunk-RXFNUTNO.js";
import "./chunk-2IUCAJMQ.js";
import {
  e as e3
} from "./chunk-EAAEPSBY.js";
import "./chunk-6H6AEMQY.js";
import "./chunk-DTQH7ECI.js";
import "./chunk-54XXLVAD.js";
import "./chunk-KO7QNSNZ.js";
import "./chunk-RK2U53CD.js";
import "./chunk-YPY24RRU.js";
import "./chunk-O7RKI2QW.js";
import "./chunk-5S637BGW.js";
import "./chunk-GKMVTGGM.js";
import "./chunk-RW5QMWE6.js";
import "./chunk-LGMX4E7L.js";
import "./chunk-PC66NY33.js";
import "./chunk-YY2VB3AE.js";
import "./chunk-H6NTWZSO.js";
import "./chunk-LMO6NZJA.js";
import "./chunk-A5QTLE4Y.js";
import "./chunk-SCHTG6ZQ.js";
import "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-HV2SFSJW.js";
import "./chunk-SBARCIDP.js";
import "./chunk-3KPZ3BQR.js";
import "./chunk-5JYVZQZR.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import {
  u
} from "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-SLQA5YBV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import {
  D,
  e2
} from "./chunk-RGCWZ2KZ.js";
import {
  n
} from "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import "./chunk-2SDMYJDE.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  d
} from "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  T,
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/widgets/HistogramRangeSlider/HistogramRangeSliderViewModel.js
var n2 = class extends l {
  constructor(e4) {
    super(e4), this.average = null, this.bins = null, this.hasTimeData = false, this.labelFormatFunction = (e5) => {
      if (this.hasTimeData)
        return r(e5);
      const { max: t, min: r2, precision: s2 } = this, n3 = t - r2 > 10 ? 2 : s2;
      return s(parseFloat(e5.toFixed(n3)));
    }, this.rangeType = "equal", this.standardDeviation = null;
  }
  generateWhereClause(e4) {
    const { rangeType: t, state: r2, values: s2 } = this;
    if ("ready" !== r2 || !(s2 == null ? void 0 : s2.length) || null == e4)
      return null;
    const o = s2[0], a3 = s2.length > 1 ? s2[s2.length - 1] : null;
    switch (t) {
      case "equal":
        return `${e4} = ${o}`;
      case "not-equal":
        return `${e4} <> ${o}`;
      case "less-than":
        return `${e4} < ${o}`;
      case "greater-than":
        return `${e4} > ${o}`;
      case "at-least":
        return `${e4} >= ${o}`;
      case "at-most":
        return `${e4} <= ${o}`;
      case "between":
        return `${e4} BETWEEN ${o} AND ${a3}`;
      case "not-between":
        return `${e4} NOT BETWEEN ${o} AND ${a3}`;
      default:
        return null;
    }
  }
};
e([y()], n2.prototype, "average", void 0), e([y()], n2.prototype, "bins", void 0), e([y()], n2.prototype, "hasTimeData", void 0), e([y()], n2.prototype, "labelFormatFunction", void 0), e([y()], n2.prototype, "rangeType", void 0), e([y()], n2.prototype, "standardDeviation", void 0), n2 = e([a("esri.widgets.HistogramRangeSlider.HistogramRangeSliderViewModel")], n2);
var i = n2;

// node_modules/@arcgis/core/widgets/HistogramRangeSlider.js
var g = "esri-histogram-range-slider";
var c = { base: g, sliderContainer: `${g}__slider-container`, histogramContainer: `${g}__histogram-container`, rangeTypePrefix: `${g}__range-type--` };
var v = class extends D {
  constructor(e4, i2) {
    super(e4, i2), this._barElements = [], this._histogram = null, this._slider = null, this.barCreatedFunction = null, this.dataLines = null, this.dataLineCreatedFunction = null, this.excludedBarColor = new u("#d7e5f0"), this.includedBarColor = new u("#599dd4"), this.messages = null, this.standardDeviationCount = 1, this.viewModel = new i();
  }
  initialize() {
    const { average: e4, bins: t, hasTimeData: r2, max: s2, min: a3, viewModel: l2 } = this;
    this._updateBarFill = this._updateBarFill.bind(this), this._histogram = new p({ average: e4, bins: t, barCreatedFunction: (e5, t2) => {
      0 === e5 && (this._barElements = []), this._barElements.push(t2), this._updateBarFill(e5, t2), this.barCreatedFunction && this.barCreatedFunction(e5, t2);
    }, dataLines: this._getDataLines(), dataLineCreatedFunction: (e5, t2) => {
      this.dataLineCreatedFunction && this.dataLineCreatedFunction(e5, t2);
    }, labelFormatFunction: this.labelFormatFunction, layout: "horizontal", max: s2, min: a3 }), this._slider = new A({ labelFormatFunction: this.labelFormatFunction, layout: "horizontal", visibleElements: { labels: true, rangeLabels: true }, rangeLabelInputsEnabled: !r2, viewModel: l2 }), this.addHandles([this._slider.on("max-change", (e5) => this.emit("max-change", e5)), this._slider.on("min-change", (e5) => this.emit("min-change", e5)), this._slider.on("segment-drag", (e5) => {
      this._updateBarFills(), this.emit("segment-drag", e5);
    }), this._slider.on("thumb-change", (e5) => {
      this._updateBarFills(), this.emit("thumb-change", e5);
    }), this._slider.on("thumb-drag", (e5) => {
      this._updateBarFills(), this.emit("thumb-drag", e5);
    }), d(() => this.bins, (e5) => {
      if (e5 && this._histogram.bins) {
        const t2 = this._histogram.bins.length - e5.length;
        this._barElements.splice(-t2, t2);
      } else
        this._barElements = [];
      this._histogram.set({ bins: e5 }), this._updateBarFills(), this.scheduleRender();
    }), d(() => [this.max, this.min, this.rangeType, this.values], ([e5, t2]) => {
      this._histogram.set({ max: e5, min: t2 }), this._updateBarFills(), this.scheduleRender();
    }), d(() => [this.average, this.dataLines, this.standardDeviation, this.standardDeviationCount], ([e5]) => {
      this._histogram.set({ average: e5, dataLines: this._getDataLines() });
    }), d(() => this.labelFormatFunction, (e5) => {
      this._histogram.set({ labelFormatFunction: e5 });
    }), d(() => this.hasTimeData, (e5) => {
      this._slider.set({ rangeLabelInputsEnabled: !e5 });
    })]);
  }
  get average() {
    return this.viewModel.average;
  }
  set average(e4) {
    this.viewModel.average = e4;
  }
  get bins() {
    return this.viewModel.bins;
  }
  set bins(e4) {
    this.viewModel.bins = e4;
  }
  get hasTimeData() {
    return this.viewModel.hasTimeData;
  }
  set hasTimeData(e4) {
    this.viewModel.hasTimeData = e4;
  }
  get icon() {
    return "arrow-double-horizontal";
  }
  set icon(e4) {
    this._overrideIfSome("icon", e4);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e4) {
    this._overrideIfSome("label", e4);
  }
  get labelFormatFunction() {
    return this.viewModel.labelFormatFunction;
  }
  set labelFormatFunction(e4) {
    this.viewModel.labelFormatFunction = e4;
  }
  get max() {
    return this.viewModel.max;
  }
  set max(e4) {
    this.viewModel.max = e4;
  }
  get min() {
    return this.viewModel.min;
  }
  set min(e4) {
    this.viewModel.min = e4;
  }
  get precision() {
    return this.viewModel.precision;
  }
  set precision(e4) {
    this.viewModel.precision = e4;
  }
  get rangeType() {
    return this.viewModel.rangeType;
  }
  set rangeType(e4) {
    this.viewModel.rangeType = e4;
  }
  get standardDeviation() {
    return this.viewModel.standardDeviation;
  }
  set standardDeviation(e4) {
    this.viewModel.standardDeviation = e4;
  }
  get values() {
    return this.viewModel.values;
  }
  set values(e4) {
    this.viewModel.values = e4;
  }
  generateWhereClause(e4) {
    return this.viewModel.generateWhereClause(e4);
  }
  render() {
    const { rangeType: e4, viewModel: t, label: i2 } = this, r2 = this.classes(c.base, e3.widget, `${c.rangeTypePrefix}${e4}`, "disabled" === t.state ? e3.disabled : null);
    return n("div", { "aria-label": i2, class: r2 }, "disabled" === t.state ? null : this._renderContent());
  }
  _renderContent() {
    return [this._renderHistogram(), this._renderSlider()];
  }
  _renderSlider() {
    return n("div", { class: c.sliderContainer, key: `${this.id}-slider-container` }, this._slider.render());
  }
  _renderHistogram() {
    return n("div", { class: c.histogramContainer }, this._histogram.render());
  }
  _getDataLines() {
    return [...this._getStandardDeviationDataLines(), ...this.dataLines || []];
  }
  _getStandardDeviationDataLines() {
    const { average: e4, standardDeviation: t, standardDeviationCount: i2 } = this;
    return a2(t, e4, i2).map((e5) => ({ value: e5 }));
  }
  _updateBarFills() {
    this._barElements.forEach((e4, t) => this._updateBarFill(t, e4));
  }
  _updateBarFill(e4, t) {
    var _a;
    t.setAttribute("fill", ((_a = this._getFillForBar(e4)) == null ? void 0 : _a.toHex()) ?? "");
  }
  _getFillForBar(e4) {
    const { bins: t, rangeType: i2, values: r2 } = this;
    if (-1 === e4 || !(t == null ? void 0 : t.length) || !i2 || !(r2 == null ? void 0 : r2.length))
      return null;
    const s2 = t[e4];
    if (!s2)
      return null;
    const { maxValue: a3, minValue: o } = s2, n3 = a3 - o, l2 = r2[0] > o && r2[0] < a3;
    switch (i2) {
      case "equal":
      case "not-equal":
        return this.includedBarColor;
      case "less-than":
      case "at-most":
        return l2 ? this._getBlendedColor((r2[0] - o) / n3) : a3 <= r2[0] ? this.includedBarColor : this.excludedBarColor;
      case "greater-than":
      case "at-least":
        return l2 ? this._getBlendedColor(1 - (r2[0] - o) / n3) : o >= r2[0] ? this.includedBarColor : this.excludedBarColor;
      case "between":
        if (2 === r2.length)
          return r2[0] > o && r2[0] < a3 ? this._getBlendedColor(1 - (r2[0] - o) / n3) : r2[1] > o && r2[1] < a3 ? this._getBlendedColor((r2[1] - o) / n3) : o >= r2[0] && a3 <= r2[1] ? this.includedBarColor : this.excludedBarColor;
        break;
      case "not-between":
        if (2 === r2.length)
          return r2[0] > o && r2[0] < a3 ? this._getBlendedColor((r2[0] - o) / n3) : r2[1] > o && r2[1] < a3 ? this._getBlendedColor(1 - (r2[1] - o) / n3) : o > r2[0] && a3 < r2[1] ? this.excludedBarColor : this.includedBarColor;
    }
    return this.includedBarColor;
  }
  _getBlendedColor(e4) {
    return u.blendColors(this.excludedBarColor, this.includedBarColor, e4);
  }
};
e([y()], v.prototype, "average", null), e([y()], v.prototype, "barCreatedFunction", void 0), e([y()], v.prototype, "bins", null), e([y()], v.prototype, "dataLines", void 0), e([y()], v.prototype, "dataLineCreatedFunction", void 0), e([y({ type: u, json: { type: [T], write: true } })], v.prototype, "excludedBarColor", void 0), e([y()], v.prototype, "hasTimeData", null), e([y({ type: u, json: { type: [T], write: true } })], v.prototype, "includedBarColor", void 0), e([y()], v.prototype, "icon", null), e([y()], v.prototype, "label", null), e([y()], v.prototype, "labelFormatFunction", null), e([y()], v.prototype, "max", null), e([y(), e2("esri/widgets/HistogramRangeSlider/t9n/HistogramRangeSlider")], v.prototype, "messages", void 0), e([y()], v.prototype, "min", null), e([y()], v.prototype, "precision", null), e([y()], v.prototype, "rangeType", null), e([y()], v.prototype, "standardDeviation", null), e([y()], v.prototype, "standardDeviationCount", void 0), e([y()], v.prototype, "values", null), e([y()], v.prototype, "viewModel", void 0), v = e([a("esri.widgets.HistogramRangeSlider")], v);
var b = v;
export {
  b as default
};
//# sourceMappingURL=HistogramRangeSlider-JEMTGCGI.js.map
