import {
  r as r2
} from "./chunk-JZMK5M5U.js";
import {
  b as b3,
  j
} from "./chunk-B5IJN7OM.js";
import {
  f as f2
} from "./chunk-F7X3QPMY.js";
import {
  e as e4
} from "./chunk-HLKM6YBE.js";
import {
  t
} from "./chunk-CDYT7KXF.js";
import {
  e as e3
} from "./chunk-EAAEPSBY.js";
import "./chunk-QYDOVVH7.js";
import "./chunk-YSXT2SWC.js";
import "./chunk-YH3SFFF7.js";
import "./chunk-JBU54P54.js";
import {
  L,
  O,
  R,
  U,
  d as d2
} from "./chunk-YPY24RRU.js";
import {
  F as F2
} from "./chunk-O7RKI2QW.js";
import "./chunk-RLZYC2LS.js";
import {
  a as a2,
  l
} from "./chunk-WZJNHZ6H.js";
import "./chunk-ZLQTPFTL.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-HV2SFSJW.js";
import "./chunk-SBARCIDP.js";
import "./chunk-2SYXH2R7.js";
import "./chunk-7JNXJYRU.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import {
  s as s4
} from "./chunk-QX66UTIR.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import {
  f,
  n as n5,
  y as y2
} from "./chunk-HLDUDRTD.js";
import "./chunk-SLQA5YBV.js";
import {
  Q
} from "./chunk-UMXV3EBO.js";
import {
  m
} from "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import {
  F,
  b as b2,
  k as k2
} from "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import {
  D,
  e2,
  r
} from "./chunk-RGCWZ2KZ.js";
import {
  n as n3
} from "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import {
  h
} from "./chunk-2SDMYJDE.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import {
  n as n2
} from "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import {
  G
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import {
  s as s3
} from "./chunk-IOB3DJMR.js";
import {
  n as n4
} from "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  P,
  d,
  p,
  v,
  w
} from "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  b,
  s as s2
} from "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n,
  s
} from "./chunk-7RBRCL6S.js";
import {
  k
} from "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/widgets/BasemapGallery/support/basemapCompatibilityUtils.js
async function f3(e6, t3 = {}) {
  const { basemap: i, view: r3 } = e6;
  await i.load(t3), y3(i), await h2(i, r3, t3), s2(t3);
}
async function u(t3, r3 = {}) {
  var _a, _b;
  const { basemap: n6, view: s5 } = t3;
  s2(r3);
  const l2 = (_a = n6.baseLayers.find((e6) => "unknown" === e6.type)) == null ? void 0 : _a.loadError;
  if (null != l2)
    throw l2;
  if (!s5 || "spatialReferenceLocked" in s5 && !s5.spatialReferenceLocked)
    return;
  if (await n6.load(r3), s2(r3), 0 === n6.baseLayers.length)
    return;
  const o = n6.baseLayers.at(0);
  if (!y2(o))
    return;
  if (n6.spatialReference) {
    if (s5.spatialReference.equals(n6.spatialReference))
      return;
    w2();
  }
  await o.load(r3), s2(r3);
  const p3 = (("supportedSpatialReferences" in o ? o.supportedSpatialReferences : null) || ["tileInfo" in o ? (_b = o.tileInfo) == null ? void 0 : _b.spatialReference : null]).filter(k);
  0 !== p3.length && p3.every((e6) => !s5.spatialReference.equals(e6)) && w2();
}
function w2() {
  throw new s("basemap-compatibility:incompatible-spatial-reference", "Basemap spatial reference is not compatible with the view");
}
function y3(e6) {
  if (0 === e6.baseLayers.length && 0 === e6.referenceLayers.length)
    return;
  const t3 = e6.baseLayers.concat(e6.referenceLayers).toArray().filter((e7) => !n5(e7)).map((e7) => b4(e7));
  if (t3.length)
    throw t3[0];
}
function b4(e6) {
  return new s("basemap-compatibility:unsupported-basemap-layer-type", "Unsupported basemap layer type ${operationalLayerType}", { layer: e6, operationalLayerType: e6.operationalLayerType || "unknown" });
}
async function h2(e6, a4, i) {
  if (0 === e6.baseLayers.length)
    return;
  const r3 = e6.baseLayers.at(0);
  if (f(r3)) {
    try {
      await r3.load(i);
    } catch (s5) {
      const e7 = "basemap-compatibility:unknown-error", a5 = "Unknown basemap compatibility error", { name: i2 = e7, message: r4 = a5, details: n6 } = s5;
      throw new s(i2, r4, n6);
    }
    g(r3, a4);
  }
}
function g(e6, a4) {
  var _a;
  const i = a4.state.viewingMode;
  if (!i)
    return;
  let r3, n6;
  if ("wmts" === (e6 == null ? void 0 : e6.type)) {
    const s5 = b3(e6, a4.spatialReference, i);
    if (null == s5.tileInfo)
      throw new s("basemapgalleryitem:tiling-scheme-incompatible", "Basemap tiling scheme is incompatible with the view");
    r3 = s5.tileInfo, n6 = s5.fullExtent;
  } else
    r3 = e6.tileInfo, n6 = e6.fullExtent;
  if (null == r3)
    return;
  if (!r2(r3.spatialReference, i))
    throw new s(`basemapgalleryitem:spatial-reference-unsupported-${a2(i)}`, `Basemap spatial reference is unsupported in ${a2(i)} mode`);
  const f5 = "vector-tile" === (e6 == null ? void 0 : e6.type) ? r3.getCompatibleForVTL(256) : null;
  if (i === l.Global) {
    let a5 = j(r3, n6, null, i);
    if (a5 && "vector-tile" === (e6 == null ? void 0 : e6.type) && null != n6 && f5 && !j(f5, n6, null, i) && (a5 = null), a5) {
      const e7 = r3.spatialReference.isWebMercator ? "web-mercator" : "wgs84";
      throw new s(`basemapgalleryitem:tiling-scheme-unsupported-${e7}-global`, "Basemap tiling scheme is unsupported in global mode", { error: a5 });
    }
  } else if (f2.checkUnsupported(r3))
    throw new s("basemapgalleryitem:tiling-scheme-unsupported-local", "Basemap tiling scheme is unsupported in local mode");
  const u2 = (_a = a4.basemapTerrain) == null ? void 0 : _a.tilingScheme;
  if (u2 && !u2.compatibleWith(r3) && ("vector-tile" !== (e6 == null ? void 0 : e6.type) || !f5 || !u2.compatibleWith(f5)))
    throw new s("basemapgalleryitem:tiling-scheme-incompatible", "Basemap tiling scheme is incompatible with the view");
}

// node_modules/@arcgis/core/widgets/BasemapGallery/support/BasemapGalleryItem.js
var p2 = class extends s4(S) {
  constructor(e6) {
    super(e6), this.compatibilityFunction = null, this.error = null, this.state = "loading", this.view = null;
  }
  initialize() {
    const e6 = () => this.refresh();
    this.addHandles([d(() => {
      var _a;
      return (_a = this.basemap) == null ? void 0 : _a.loadStatus;
    }, e6), d(() => this.compatibilityFunction, e6), d(() => {
      var _a;
      return this.view && "basemapTerrain" in this.view && ((_a = this.view.basemapTerrain) == null ? void 0 : _a.tilingScheme);
    }, e6), d(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.ready;
    }, e6), d(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.spatialReference;
    }, e6)]), this.refresh();
  }
  destroy() {
    this._cancelRefresh(), this.basemap = null, this.compatibilityFunction = null, this.view = null;
  }
  get _spatialReferenceTask() {
    return U(this.view, this.basemap);
  }
  set basemap(e6) {
    e6 && e6.load().catch(() => {
    }), this._set("basemap", e6);
  }
  get spatialReference() {
    return this._spatialReferenceTask.spatialReference;
  }
  refresh() {
    var _a;
    this._cancelRefresh(), this._set("state", "loading");
    const e6 = (_a = this.basemap) == null ? void 0 : _a.loadStatus;
    if ("loaded" !== e6 && "failed" !== e6)
      return;
    if (!this.compatibilityFunction)
      return void ("loaded" === e6 ? (this._set("state", "ready"), this._set("error", null)) : (this._set("state", "error"), this._set("error", this.basemap.loadError)));
    const t3 = new AbortController(), { signal: s5 } = t3;
    this.compatibilityFunction(this, { signal: s5 }).then(() => w(() => !this._spatialReferenceTask.updating, s5)).then(() => {
      this._set("state", "ready"), this._set("error", null);
    }).catch((e7) => {
      b(e7) || (this._set("state", "error"), this._set("error", e7));
    }), this._refreshController = t3;
  }
  _cancelRefresh() {
    this._refreshController && (this._refreshController.abort(), this._refreshController = null);
  }
};
e([y({ readOnly: true })], p2.prototype, "_spatialReferenceTask", null), e([y()], p2.prototype, "basemap", null), e([y()], p2.prototype, "compatibilityFunction", void 0), e([y({ readOnly: true })], p2.prototype, "error", void 0), e([y({ readOnly: true })], p2.prototype, "spatialReference", null), e([y({ readOnly: true })], p2.prototype, "state", void 0), e([y()], p2.prototype, "view", void 0), p2 = e([a("esri.widgets.BasemapGallery.support.BasemapGalleryItem")], p2);
var h3 = p2;

// node_modules/@arcgis/core/widgets/BasemapGallery/support/LocalBasemapsSource.js
var a3 = V.ofType(F2);
var c = class extends S {
  constructor(o) {
    super(o), this.basemaps = new a3();
  }
  destroy() {
    this.basemaps.forEach((o) => o.destroy());
  }
  get state() {
    return "ready";
  }
  refresh() {
  }
};
e([y({ type: a3 })], c.prototype, "basemaps", void 0), e([y({ readOnly: true })], c.prototype, "state", null), c = e([a("esri.widgets.BasemapGallery.support.LocalBasemapsSource")], c);
var m2 = c;

// node_modules/@arcgis/core/widgets/BasemapGallery/support/PortalBasemapsSource.js
var d3 = V.ofType(F2);
var y4 = class extends m.LoadableMixin(n2(m2)) {
  constructor(t3) {
    super(t3), this._lastPortalBasemapFetchController = null, this.basemaps = new d3(), this.filterFunction = null, this.portal = Q.getDefault(), this.query = null, this.updateBasemapsCallback = null, this.viewType = null;
  }
  initialize() {
    this.addHandles(d(() => {
      var _a, _b, _c;
      return [this.filterFunction, this.loadStatus, (_a = this.portal) == null ? void 0 : _a.basemapGalleryGroupQuery, (_b = this.portal) == null ? void 0 : _b.basemapGalleryGroupQuery3D, (_c = this.portal) == null ? void 0 : _c.user, this.query, this.updateBasemapsCallback];
    }, () => this.refresh(), P));
  }
  destroy() {
    this.filterFunction = null, this.portal = null, this.basemaps.forEach((t3) => t3.destroy());
  }
  get state() {
    return "not-loaded" === this.loadStatus ? "not-loaded" : "loading" === this.loadStatus || this._lastPortalBasemapFetchController ? "loading" : "ready";
  }
  load(t3) {
    return this.addResolvingPromise(this.portal.load(t3)), Promise.resolve(this);
  }
  async refresh() {
    if ("loaded" !== this.loadStatus)
      return;
    this._lastPortalBasemapFetchController && (this._lastPortalBasemapFetchController.abort(), this._lastPortalBasemapFetchController = null);
    const t3 = this.portal, a4 = new AbortController();
    this._lastPortalBasemapFetchController = a4, this.notifyChange("state");
    try {
      const e6 = await t3.fetchBasemaps(this._toQueryString(this.query), { signal: a4.signal, include3d: "3d" === this.viewType || void 0 });
      await this._updateBasemaps(e6);
    } catch (e6) {
      if (b(e6))
        throw e6;
      n.getLogger(this).warn(new s("basemap-source:fetch-basemaps-error", "Could not fetch basemaps from portal.", { error: e6 })), await this._updateBasemaps();
    }
    this._lastPortalBasemapFetchController = null, this.notifyChange("state");
  }
  _toQueryString(t3) {
    return t3 && "string" != typeof t3 ? Object.keys(t3).map((a4) => `${a4}:${t3[a4]}`).join(" AND ") : t3;
  }
  async _updateBasemaps(t3 = []) {
    let a4 = await this._filterBasemaps(t3);
    a4 = this.updateBasemapsCallback ? await this.updateBasemapsCallback(a4) : a4, this.basemaps.removeAll(), this.basemaps.addMany(a4);
  }
  async _filterBasemaps(t3) {
    if (!this.filterFunction)
      return t3;
    const a4 = t3.map(this.filterFunction), e6 = await Promise.all(a4);
    return t3.filter((t4, a5) => e6[a5]);
  }
};
e([y({ readOnly: true, type: d3 })], y4.prototype, "basemaps", void 0), e([y()], y4.prototype, "filterFunction", void 0), e([y({ type: Q })], y4.prototype, "portal", void 0), e([y()], y4.prototype, "query", void 0), e([y({ readOnly: true })], y4.prototype, "state", null), e([y()], y4.prototype, "updateBasemapsCallback", void 0), e([y()], y4.prototype, "viewType", void 0), y4 = e([a("esri.widgets.BasemapGallery.support.PortalBasemapsSource")], y4);
var f4 = y4;

// node_modules/@arcgis/core/widgets/BasemapGallery/BasemapGalleryViewModel.js
var j2 = V.ofType(h3);
function w3(e6) {
  return e6 && "esri.portal.Portal" === e6.declaredClass;
}
function B(e6) {
  return e6 && !(e6 instanceof f4) && (!!e6.portal || !!e6.query);
}
function _(e6) {
  return e6 && "basemaps" in e6 && "state" in e6 && "refresh" in e6;
}
var I = class extends m {
  constructor(e6) {
    super(e6), this._loadingProjectionEngine = false, this.items = new j2(), this.source = new f4(), this.view = null;
  }
  initialize() {
    const e6 = () => this._recreateItems();
    this.addHandles([d(() => "ready" === this.state ? this.compatibilityFunction : null, () => this._updateItems()), v(() => {
      var _a;
      return (_a = this.source) == null ? void 0 : _a.basemaps;
    }, "change", e6, { onListenerAdd: e6 }), p(() => this.view, () => {
      var _a;
      this.source instanceof f4 && (this.source.viewType = (_a = this.view) == null ? void 0 : _a.type);
    }, { once: true })]);
  }
  destroy() {
    var _a;
    const e6 = this.source.basemaps.find((e7) => e7 === this.activeBasemap);
    e6 && this.source.basemaps.remove(e6), (_a = this.source) == null ? void 0 : _a.destroy();
  }
  get activeBasemap() {
    var _a, _b;
    return ((_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.basemap) ?? null;
  }
  set activeBasemap(e6) {
    var _a, _b;
    const s5 = this.view;
    if (!(s5 == null ? void 0 : s5.map))
      return;
    const i = "string" == typeof e6 ? F2.fromId(e6) : e6;
    if (!i || !s5.ready)
      return s5.map.basemap = i, void this._clearOverride("activeBasemap");
    const a4 = i.spatialReference || ((_b = (_a = this.items) == null ? void 0 : _a.find((e7) => this.basemapEquals(i, e7.basemap))) == null ? void 0 : _b.spatialReference);
    if (a4 && "spatialReferenceLocked" in s5 && !s5.spatialReferenceLocked) {
      const t3 = s5.spatialReference;
      if (null != a4 && !G(t3, a4) && !F(s5.spatialReference, a4) && !b2())
        return this._override("activeBasemap", i), this._loadingProjectionEngine = true, void k2().then(() => {
          this._get("activeBasemap") === e6 && (s5.map.basemap = e6, s5.spatialReference = a4, this._clearOverride("activeBasemap"));
        }, () => {
        }).then(() => {
          this._loadingProjectionEngine = false;
        });
      s5.map.basemap = i, this._clearOverride("activeBasemap"), null == a4 || G(s5.spatialReference, a4) || (s5.spatialReference = a4);
    } else
      s5.map.basemap = i, this._clearOverride("activeBasemap");
  }
  get activeBasemapIndex() {
    const { state: e6, activeBasemap: t3 } = this;
    return "ready" !== e6 ? -1 : this._findBasemapIndex(t3);
  }
  get compatibilityFunction() {
    var _a;
    return "3d" === ((_a = this.view) == null ? void 0 : _a.type) ? f3 : u;
  }
  set compatibilityFunction(e6) {
    this._overrideIfSome("compatibilityFunction", e6);
  }
  castSource(e6) {
    return Array.isArray(e6) || V.isCollection(e6) ? new m2({ basemaps: e6 }) : w3(e6) ? new f4({ portal: e6 }) : B(e6) ? new f4(e6) : _(e6) ? e6 : null;
  }
  get state() {
    var _a;
    return ((_a = this.view) == null ? void 0 : _a.ready) && this.source ? this._loadingProjectionEngine ? "loading" : "ready" : "disabled";
  }
  basemapEquals(e6, t3) {
    return R(e6, t3);
  }
  refresh() {
    this._recreateItems();
  }
  load() {
    return this.loadSource();
  }
  loadSource(e6) {
    return this.addResolvingPromise(m.isLoadable(this.source) ? this.source.load(e6) : null), Promise.resolve(this);
  }
  _findBasemapIndex(e6) {
    const { items: t3 } = this, s5 = t3.findIndex((t4) => t4.basemap === e6);
    return -1 === s5 ? t3.findIndex((t4) => this.basemapEquals(t4.basemap, e6)) : s5;
  }
  _recreateItems() {
    var _a;
    const e6 = ((_a = this.source) == null ? void 0 : _a.basemaps) ?? [], { view: t3, compatibilityFunction: s5 } = this, i = new Map(this.items.map((e7) => [e7.basemap, e7])), a4 = e6.map((e7) => {
      const a5 = i.get(e7);
      return a5 ? (i.delete(e7), a5) : new h3({ basemap: e7, compatibilityFunction: s5, view: t3 });
    });
    this.items.removeAll(), this.items.addMany(a4), i.forEach((e7) => e7.destroy());
  }
  _updateItems() {
    for (const e6 of this.items)
      e6.compatibilityFunction = this.compatibilityFunction, e6.view = this.view;
  }
};
e([y()], I.prototype, "_loadingProjectionEngine", void 0), e([y()], I.prototype, "activeBasemap", null), e([y({ readOnly: true })], I.prototype, "activeBasemapIndex", null), e([y()], I.prototype, "compatibilityFunction", null), e([y({ readOnly: true, type: j2 })], I.prototype, "items", void 0), e([y()], I.prototype, "source", void 0), e([s3("source")], I.prototype, "castSource", null), e([y({ readOnly: true })], I.prototype, "state", null), e([y()], I.prototype, "view", void 0), I = e([a("esri.widgets.BasemapGallery.BasemapGalleryViewModel")], I);
var R2 = I;

// node_modules/@arcgis/core/widgets/BasemapGallery/css.js
var e5 = "esri-basemap-gallery";
var t2 = { base: e5, sourceLoading: `${e5}--source-loading`, layoutGrid: `${e5}--grid`, narrowItems: `${e5}--narrow-items`, loader: `${e5}__loader`, item: `${e5}__item`, itemContainer: `${e5}__item-container`, itemContent: `${e5}__item-content`, itemTitle: `${e5}__item-title`, itemTagsContainer: `${e5}__item-tags-container`, itemThumbnail: `${e5}__item-thumbnail`, selectedItem: `${e5}__item--selected`, itemError: `${e5}__item--error` };

// node_modules/@arcgis/core/widgets/BasemapGallery.js
var y5 = { small: 200, default: 280, wide: 420 };
var w4 = class extends D {
  constructor(e6, t3) {
    super(e6, t3), this.disabled = false, this.headingLevel = 2, this.messages = null, this.viewModel = new R2(), this._focusBasemapItemEnabled = false, this._container = null, this._width = 0, this._onContainerCreated = (e7) => {
      this._container = e7;
    };
  }
  initialize() {
    this.addHandles([h(() => this._container, ({ contentRect: e6 }) => {
      this._width = e6.width;
    }), p(() => this.source, () => this.viewModel.loadSource(), { sync: true, initial: true })]);
  }
  loadDependencies() {
    return r({ scrim: () => import("./calcite-scrim-Z45AYPZE.js"), chip: () => import("./calcite-chip-372HQ7XZ.js") });
  }
  get activeBasemap() {
    return this.viewModel.activeBasemap;
  }
  set activeBasemap(e6) {
    this.viewModel.activeBasemap = e6;
  }
  get icon() {
    return "basemap";
  }
  set icon(e6) {
    this._overrideIfSome("icon", e6);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e6) {
    this._overrideIfSome("label", e6);
  }
  get source() {
    return this.viewModel.source;
  }
  set source(e6) {
    this.viewModel.source = e6;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e6) {
    this.viewModel.view = e6;
  }
  render() {
    const e6 = "loading" === this.source.state, t3 = this.disabled || "disabled" === this.viewModel.state, s5 = this.viewModel.items, a4 = { [t2.sourceLoading]: e6, [e3.disabled]: t3 }, i = this._width;
    i <= y5.small || i >= y5.wide ? a4[t2.layoutGrid] = true : i < y5.default && (a4[t2.narrowItems] = true);
    const o = e6 ? n3("div", { class: t2.loader, key: "loader" }) : null, r3 = e6 ? null : s5.length > 0 ? n3("ul", { "aria-disabled": this.disabled, "aria-label": this.label, bind: this, class: t2.itemContainer, key: "item-container", onkeydown: this._handleKeyDown, role: "radiogroup" }, s5.map((e7, t4) => this._renderBasemapGalleryItem(e7, t4)).toArray()) : n3("div", { class: e3.empty, key: "empty-message" }, n3(e4, { level: this.headingLevel }, this.messages.noBasemaps));
    return n3("div", { afterCreate: this._onContainerCreated, class: this.classes(t2.base, e3.widget, e3.panelHeightOnly, a4), key: "container" }, 0 === this._width ? null : [o, r3]);
  }
  _getRoundRobinIndex(e6, t3) {
    return (e6 + t3) % t3;
  }
  _handleKeyDown(e6) {
    const { key: t3 } = e6;
    if (!["ArrowUp", "ArrowDown", "ArrowRight", "ArrowLeft"].includes(t3))
      return;
    e6.preventDefault();
    const { items: s5, activeBasemapIndex: a4 } = this.viewModel, i = "ArrowUp" === t3 || "ArrowLeft" === t3 ? this._getRoundRobinIndex(Math.max(a4 - 1, -1), s5.length) : this._getRoundRobinIndex(a4 + 1, s5.length), o = s5.at(i);
    "ready" === (o == null ? void 0 : o.state) && (this.viewModel.activeBasemap = o.basemap), this._focusBasemapItemEnabled = true;
  }
  _focusBasemapItem(e6) {
    this._focusBasemapItemEnabled && 0 === e6.tabIndex && (e6.focus(), this._focusBasemapItemEnabled = false);
  }
  _handleClick(e6) {
    const t3 = e6.currentTarget["data-item"];
    "ready" === t3.state && (this.viewModel.activeBasemap = t3.basemap);
  }
  _renderBasemapGalleryItem(e6, s5) {
    var _a, _b;
    const a4 = O(e6.basemap) || n4("esri/themes/base/images/basemap-toggle-64.svg"), i = e6.basemap.title, l2 = (_a = e6.basemap.portalItem) == null ? void 0 : _a.snippet, n6 = ((_b = e6.error) == null ? void 0 : _b.message) || l2 || i, { viewModel: { state: d4, activeBasemapIndex: m3 } } = this, h4 = this.disabled || "disabled" === d4, u2 = m3 === s5, g2 = u2 || -1 === m3 && 0 === s5 ? 0 : -1, b5 = "loading" === d4, y6 = { [t2.selectedItem]: u2, [t2.itemError]: "error" === e6.state }, w5 = `basemapgallery-item-${e6.uid}`;
    return n3("li", { afterUpdate: this._focusBasemapItem, "aria-checked": u2.toString(), "aria-disabled": h4.toString(), "aria-labelledby": w5, bind: this, class: this.classes(t2.item, y6), "data-item": e6, key: e6.uid, onclick: this._handleClick, onkeydown: this._handleClick, role: "radio", tabIndex: g2, title: n6 }, n3("img", { alt: "", class: t2.itemThumbnail, src: a4 }), n3("div", { class: t2.itemContent, key: "content" }, n3("div", { class: t2.itemTitle, key: "title" }, n3("span", { id: w5 }, i)), d2(e6.basemap) ? this._renderTags(e6.basemap) : null), "loading" === e6.state || u2 && b5 ? n3("calcite-scrim", null, n3("span", { "aria-hidden": "true", class: e3.loaderAnimation, key: "loader", role: "presentation" })) : null);
  }
  _renderTags(e6) {
    return n3("div", { class: t2.itemTagsContainer, key: "tag" }, this._render3DTag(), L(e6) ? this._renderBetaTag() : null);
  }
  _render3DTag() {
    const { messages: e6 } = this;
    return n3("calcite-chip", { key: "tag-3d", scale: "s", value: e6.tag3D }, this.messages.tag3D);
  }
  _renderBetaTag() {
    const { messages: e6 } = this;
    return n3("calcite-chip", { appearance: "outline-fill", key: "tag-beta", scale: "s", value: e6.tagBeta }, this.messages.tagBeta);
  }
};
e([y()], w4.prototype, "activeBasemap", null), e([y()], w4.prototype, "disabled", void 0), e([y()], w4.prototype, "headingLevel", void 0), e([y()], w4.prototype, "icon", null), e([y()], w4.prototype, "label", null), e([y(), e2("esri/widgets/BasemapGallery/t9n/BasemapGallery")], w4.prototype, "messages", void 0), e([y()], w4.prototype, "source", null), e([y()], w4.prototype, "view", null), e([y()], w4.prototype, "viewModel", void 0), e([y()], w4.prototype, "_focusBasemapItemEnabled", void 0), e([y()], w4.prototype, "_container", void 0), e([y()], w4.prototype, "_width", void 0), e([t()], w4.prototype, "_handleClick", null), w4 = e([a("esri.widgets.BasemapGallery")], w4);
var _2 = w4;
export {
  _2 as default
};
//# sourceMappingURL=BasemapGallery-XGJWXNV7.js.map
