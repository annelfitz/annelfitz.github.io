import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  importCoreReactiveUtils,
  newWidgetsUtilityNetworkTrace
} from "./chunk-YXW2SI4L.js";
import {
  addHandles,
  checkForView,
  referenceElementHelper
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-utility-network-trace.entry.js
var utilityNetworkTraceCss = "";
var ArcgisUtilityNetworkTrace = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.arcgisUtilityNetworkTraceReady = createEvent(this, "arcgisUtilityNetworkTraceReady", 7);
    this.utilityNetworkTraceAddFlag = createEvent(this, "utilityNetworkTraceAddFlag", 7);
    this.utilityNetworkTraceAddFlagComplete = createEvent(this, "utilityNetworkTraceAddFlagComplete", 7);
    this.utilityNetworkTraceAddFlagError = createEvent(this, "utilityNetworkTraceAddFlagError", 7);
    this.utilityNetworkTraceAddResultArea = createEvent(this, "utilityNetworkTraceAddResultArea", 7);
    this.utilityNetworkTraceRemoveResultArea = createEvent(this, "utilityNetworkTraceRemoveResultArea", 7);
    this._watchHandles = [];
    this.referenceElement = void 0;
    this.enableResultArea = false;
    this.defaultGraphicColor = {
      color: [255, 255, 0, 0.6],
      haloOpacity: 0.9,
      fillOpacity: 0.2,
      hex: "#FFFF00"
    };
    this.disabled = false;
    this.flags = [];
    this.gdbVersion = "sde.DEFAULT";
    this.inputSettings = [];
    this.resultAreaProperties = void 0;
    this.selectedTraces = [];
    this.selectOnComplete = true;
    this.showGraphicsOnComplete = true;
    this.showSelectionAttributes = true;
    this.position = "bottom-left";
    this.view = void 0;
    this.widget = void 0;
  }
  referenceElementWatcher(value) {
    void referenceElementHelper(this, value);
  }
  enableResultAreaWatcher(value) {
    if (this.widget) {
      this.widget.enableResultArea = value;
    }
  }
  defaultGraphicColorWatcher(value) {
    if (this.widget) {
      this.widget.defaultGraphicColor = value;
    }
  }
  disabledWatcher(value, old) {
    if (this.widget && value !== old) {
      this.widget.disabled = value;
    }
  }
  flagsWatcher(value) {
    if (this.widget) {
      this.widget.flags = value;
    }
  }
  gdbVersionWatcher(value) {
    if (this.widget) {
      this.widget.gdbVersion = value;
    }
  }
  inputSettingsWatcher(value) {
    if (this.widget) {
      this.widget.inputSettings = value;
    }
  }
  resultAreaPropertiesWatcher(value) {
    if (this.widget) {
      this.widget.resultAreaProperties = value;
    }
  }
  selectedTracesWatcher(value) {
    if (this.widget) {
      this.widget.selectedTraces = value;
    }
  }
  selectOnCompleteWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.selectOnComplete = value;
    }
  }
  showGraphicsOnCompleteWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.showGraphicsOnComplete = value;
    }
  }
  showSelectionAttributesWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.showSelectionAttributes = value;
    }
  }
  positionWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.view.ui.move(this.childElem, value);
    }
  }
  viewWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.view = value;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Methods
  //
  //--------------------------------------------------------------------------
  async checkCanTrace() {
    var _a;
    await ((_a = this.widget) == null ? void 0 : _a.checkCanTrace());
  }
  async confirmReset() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.confirmReset();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = this._createParams();
    const widget = await newWidgetsUtilityNetworkTrace(params);
    this.widget = widget;
    await this._addWatchers();
    this._proxyEvents();
    this._addContainer();
    this.arcgisUtilityNetworkTraceReady.emit();
    checkForView(this);
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    return h("div", { ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  _addContainer() {
    this.widget.container = this.childElem;
  }
  async _addWatchers() {
    const { watch } = await importCoreReactiveUtils();
    addHandles(this, watch(() => this.widget.disabled, (value) => this.disabled = value));
  }
  _createParams() {
    const params = {};
    if (this.defaultGraphicColor) {
      params.defaultGraphicColor = this.defaultGraphicColor;
    }
    if (this.enableResultArea !== void 0) {
      params.enableResultArea = this.enableResultArea;
    }
    if (this.flags) {
      params.flags = this.flags;
    }
    if (this.gdbVersion) {
      params.gdbVersion = this.gdbVersion;
    }
    if (this.inputSettings) {
      params.inputSettings = this.inputSettings;
    }
    if (this.resultAreaProperties) {
      params.resultAreaProperties = this.resultAreaProperties;
    }
    if (this.selectedTraces) {
      params.selectedTraces = this.selectedTraces;
    }
    if (this.selectOnComplete !== void 0) {
      params.selectOnComplete = this.selectOnComplete;
    }
    if (this.showGraphicsOnComplete !== void 0) {
      params.showGraphicsOnComplete = this.showGraphicsOnComplete;
    }
    if (this.showSelectionAttributes !== void 0) {
      params.showSelectionAttributes = this.showSelectionAttributes;
    }
    if (this.view) {
      params.view = this.view;
    }
    return params;
  }
  _proxyEvents() {
    this.widget.on("add-flag", (e) => this.utilityNetworkTraceAddFlag.emit(e));
    this.widget.on("add-flag-complete", (e) => this.utilityNetworkTraceAddFlagComplete.emit(e));
    this.widget.on("add-flag-error", (e) => this.utilityNetworkTraceAddFlagError.emit(e));
    this.widget.on("add-result-area", (e) => this.utilityNetworkTraceAddResultArea.emit(e));
    this.widget.on("remove-result-area", (e) => this.utilityNetworkTraceRemoveResultArea.emit(e));
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "referenceElement": ["referenceElementWatcher"],
      "enableResultArea": ["enableResultAreaWatcher"],
      "defaultGraphicColor": ["defaultGraphicColorWatcher"],
      "disabled": ["disabledWatcher"],
      "flags": ["flagsWatcher"],
      "gdbVersion": ["gdbVersionWatcher"],
      "inputSettings": ["inputSettingsWatcher"],
      "resultAreaProperties": ["resultAreaPropertiesWatcher"],
      "selectedTraces": ["selectedTracesWatcher"],
      "selectOnComplete": ["selectOnCompleteWatcher"],
      "showGraphicsOnComplete": ["showGraphicsOnCompleteWatcher"],
      "showSelectionAttributes": ["showSelectionAttributesWatcher"],
      "position": ["positionWatcher"],
      "view": ["viewWatcher"]
    };
  }
};
ArcgisUtilityNetworkTrace.style = utilityNetworkTraceCss;
export {
  ArcgisUtilityNetworkTrace as arcgis_utility_network_trace
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-utility-network-trace.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-utility-network-trace.entry-NUIWJQFS.js.map
