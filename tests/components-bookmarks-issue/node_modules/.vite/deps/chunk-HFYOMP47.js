import {
  n,
  r
} from "./chunk-TOKUWZQG.js";
import {
  p,
  w
} from "./chunk-VTH4DAHQ.js";
import {
  has
} from "./chunk-J2EGIWT6.js";

// node_modules/@arcgis/core/layers/support/serviceCapabilitiesUtils.js
var p2 = { name: "supportsName", size: "supportsSize", contentType: "supportsContentType", keywords: "supportsKeywords", exifInfo: "supportsExifInfo" };
function o(t) {
  var _a;
  const s = (_a = t == null ? void 0 : t.supportedSpatialAggregationStatistics) == null ? void 0 : _a.map((t2) => t2.toLowerCase());
  return { envelope: !!(s == null ? void 0 : s.includes("envelopeaggregate")), centroid: !!(s == null ? void 0 : s.includes("centroidaggregate")), convexHull: !!(s == null ? void 0 : s.includes("convexhullaggregate")) };
}
function u(t, s) {
  var _a;
  const e = (_a = t == null ? void 0 : t.supportedOperationsWithCacheHint) == null ? void 0 : _a.map((t2) => t2.toLowerCase());
  return !!(e == null ? void 0 : e.includes(s.toLowerCase()));
}
function a(t, s) {
  return { analytics: n2(t), attachment: i(t), data: c(t), metadata: d(t), operations: l(t.capabilities, t, s), query: y(t, s), queryRelated: m(t), queryTopFeatures: C(t), editing: h(t) };
}
function n2(t) {
  return { supportsCacheHint: u(t.advancedQueryCapabilities, "queryAnalytics") };
}
function i(t) {
  const s = t.attachmentProperties, r2 = { supportsName: false, supportsSize: false, supportsContentType: false, supportsKeywords: false, supportsExifInfo: false, supportsCacheHint: u(t.advancedQueryCapabilities, "queryAttachments"), supportsResize: n(t, "supportsAttachmentsResizing", false) };
  return s && Array.isArray(s) && s.forEach((t2) => {
    const s2 = p2[t2.name];
    s2 && (r2[s2] = !!t2.isEnabled);
  }), r2;
}
function c(t) {
  return { isVersioned: n(t, "isDataVersioned", false), supportsAttachment: n(t, "hasAttachments", false), supportsM: n(t, "hasM", false), supportsZ: n(t, "hasZ", false) };
}
function d(t) {
  return { supportsAdvancedFieldProperties: n(t, "supportsFieldDescriptionProperty", false) };
}
function l(s, r2, p3) {
  const o2 = s ? s.toLowerCase().split(",").map((t) => t.trim()) : [], u2 = p3 ? p(p3) : null, a2 = o2.includes(null != u2 && "MapServer" === u2.serverType ? "data" : "query"), n3 = o2.includes("editing") && !r2.datesInUnknownTimezone;
  let i2 = n3 && o2.includes("create"), c2 = n3 && o2.includes("delete"), d2 = n3 && o2.includes("update");
  const l2 = o2.includes("changetracking"), y2 = r2.advancedQueryCapabilities;
  return n3 && !(i2 || c2 || d2) && (i2 = c2 = d2 = true), { supportsCalculate: n(r2, "supportsCalculate", false), supportsTruncate: n(r2, "supportsTruncate", false), supportsValidateSql: n(r2, "supportsValidateSql", false), supportsAdd: i2, supportsDelete: c2, supportsEditing: n3, supportsChangeTracking: l2, supportsQuery: a2, supportsQueryAnalytics: n(y2, "supportsQueryAnalytic", false), supportsQueryAttachments: n(y2, "supportsQueryAttachments", false), supportsQueryTopFeatures: n(y2, "supportsTopFeaturesQuery", false), supportsResizeAttachments: n(r2, "supportsAttachmentsResizing", false), supportsSync: o2.includes("sync"), supportsUpdate: d2, supportsExceedsLimitStatistics: n(r2, "supportsExceedsLimitStatistics", false), supportsAsyncConvert3D: n(r2, "supportsAsyncConvert3D", false) };
}
function y(t, p3) {
  const a2 = t.advancedQueryCapabilities, n3 = t.ownershipBasedAccessControlForFeatures, i2 = t.archivingInfo, c2 = t.currentVersion, d2 = p3 == null ? void 0 : p3.includes("MapServer"), l2 = !d2 || c2 >= has("mapserver-pbf-version-support"), y2 = w(p3), m2 = new Set((t.supportedQueryFormats ?? "").split(",").map((t2) => t2.toLowerCase().trim()));
  return { supportsStatistics: n(a2, "supportsStatistics", t.supportsStatistics), supportsPercentileStatistics: n(a2, "supportsPercentileStatistics", false), supportsSpatialAggregationStatistics: n(a2, "supportsSpatialAggregationStatistics", false), supportedSpatialAggregationStatistics: o(a2), supportsCentroid: n(a2, "supportsReturningGeometryCentroid", false), supportsDistance: n(a2, "supportsQueryWithDistance", false), supportsDistinct: n(a2, "supportsDistinct", t.supportsAdvancedQueries), supportsExtent: n(a2, "supportsReturningQueryExtent", false), supportsGeometryProperties: n(a2, "supportsReturningGeometryProperties", false), supportsHavingClause: n(a2, "supportsHavingClause", false), supportsOrderBy: n(a2, "supportsOrderBy", t.supportsAdvancedQueries), supportsPagination: n(a2, "supportsPagination", false), supportsQuantization: n(t, "supportsCoordinatesQuantization", false), supportsQuantizationEditMode: n(t, "supportsQuantizationEditMode", false), supportsQueryGeometry: n(t, "supportsReturningQueryGeometry", false), supportsResultType: n(a2, "supportsQueryWithResultType", false), supportsMaxRecordCountFactor: n(a2, "supportsMaxRecordCountFactor", false), supportsSqlExpression: n(a2, "supportsSqlExpression", false), supportsStandardizedQueriesOnly: n(t, "useStandardizedQueries", false), supportsTopFeaturesQuery: n(a2, "supportsTopFeaturesQuery", false), supportsQueryByAnonymous: n(n3, "allowAnonymousToQuery", true), supportsQueryByOthers: n(n3, "allowOthersToQuery", true), supportsHistoricMoment: n(i2, "supportsQueryWithHistoricMoment", false), supportsFormatPBF: l2 && m2.has("pbf"), supportsDisjointSpatialRelationship: n(a2, "supportsDisjointSpatialRel", false), supportsCacheHint: n(a2, "supportsQueryWithCacheHint", false) || u(a2, "query"), supportsDefaultSpatialReference: n(a2, "supportsDefaultSR", false), supportsCompactGeometry: y2, supportsFullTextSearch: n(a2, "supportsFullTextSearch", false), maxRecordCountFactor: r(t, "maxRecordCountFactor", void 0), maxRecordCount: r(t, "maxRecordCount", void 0), standardMaxRecordCount: r(t, "standardMaxRecordCount", void 0), tileMaxRecordCount: r(t, "tileMaxRecordCount", void 0) };
}
function m(t) {
  const s = t.advancedQueryCapabilities, r2 = n(s, "supportsAdvancedQueryRelated", false);
  return { supportsPagination: n(s, "supportsQueryRelatedPagination", false), supportsCount: r2, supportsOrderBy: r2, supportsCacheHint: u(s, "queryRelated") };
}
function C(t) {
  return { supportsCacheHint: u(t.advancedQueryCapabilities, "queryTopFilter") };
}
function h(t) {
  const s = t.ownershipBasedAccessControlForFeatures, p3 = t ? t.advancedEditingCapabilities : void 0;
  return { supportsGeometryUpdate: n(t, "allowGeometryUpdates", true), supportsGlobalId: n(t, "supportsApplyEditsWithGlobalIds", false), supportsReturnServiceEditsInSourceSpatialReference: n(t, "supportsReturnServiceEditsInSourceSR", false), supportsRollbackOnFailure: n(t, "supportsRollbackOnFailureParameter", false), supportsUpdateWithoutM: n(t, "allowUpdateWithoutMValues", false), supportsUploadWithItemId: n(t, "supportsAttachmentsByUploadId", false), supportsDeleteByAnonymous: n(s, "allowAnonymousToDelete", true), supportsDeleteByOthers: n(s, "allowOthersToDelete", true), supportsUpdateByAnonymous: n(s, "allowAnonymousToUpdate", true), supportsUpdateByOthers: n(s, "allowOthersToUpdate", true), supportsAsyncApplyEdits: n(p3, "supportsAsyncApplyEdits", false), zDefault: r(t, "zDefault", void 0) };
}

export {
  a
};
//# sourceMappingURL=chunk-HFYOMP47.js.map
