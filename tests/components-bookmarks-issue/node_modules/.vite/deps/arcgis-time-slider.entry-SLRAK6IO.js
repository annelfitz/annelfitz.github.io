import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  importCoreReactiveUtils,
  newWidgetsTimeSlider
} from "./chunk-YXW2SI4L.js";
import {
  addHandles,
  checkForView,
  referenceElementHelper
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-time-slider.entry.js
var timeSliderCss = "arcgis-time-slider{}";
var ArcgisTimeSlider = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.arcgisTimeSliderReady = createEvent(this, "arcgisTimeSliderReady", 7);
    this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
    this.timeSliderTriggerAction = createEvent(this, "timeSliderTriggerAction", 7);
    this._watchHandles = [];
    this.referenceElement = void 0;
    this.actions = void 0;
    this.disabled = false;
    this.effectiveStops = void 0;
    this.fullTimeExtent = void 0;
    this.layout = "auto";
    this.loop = false;
    this.mode = "time-window";
    this.playRate = 1e3;
    this.stops = { count: 10 };
    this.tickConfigs = void 0;
    this.timeExtent = void 0;
    this.timeVisible = false;
    this.timeZone = void 0;
    this.position = "bottom-left";
    this.view = void 0;
    this.widget = void 0;
  }
  referenceElementWatcher(value) {
    void referenceElementHelper(this, value);
  }
  actionsWatcher(value) {
    if (this.widget) {
      this.widget.actions = value;
    }
  }
  disabledWatcher(value, old) {
    if (this.widget && value !== old) {
      this.widget.disabled = value;
    }
  }
  fullTimeExtentWatcher(value) {
    if (this.widget) {
      this.widget.fullTimeExtent = value;
    }
  }
  layoutWatcher(value) {
    if (this.widget) {
      this.widget.layout = value;
    }
  }
  loopWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.loop = value;
    }
  }
  modeWatcher(value) {
    if (this.widget) {
      this.widget.mode = value;
    }
  }
  playRateWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.playRate = value;
    }
  }
  stopsWatcher(value) {
    if (this.widget) {
      this.widget.stops = value;
    }
  }
  tickConfigsWatcher(value) {
    if (this.widget) {
      this.widget.tickConfigs = value;
    }
  }
  timeExtentWatcher(value) {
    if (this.widget) {
      this.widget.timeExtent = value;
    }
  }
  timeVisibleWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.timeVisible = value;
    }
  }
  timeZoneWatcher(value) {
    if (this.widget) {
      this.widget.timeZone = value;
    }
  }
  positionWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.view.ui.move(this.childElem, value);
    }
  }
  viewWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.view = value;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Methods
  //
  //--------------------------------------------------------------------------
  async next() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.next();
  }
  async play() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.play();
  }
  async previous() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.previous();
  }
  async stop() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.stop();
  }
  async updateWebDocument(webmap) {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.updateWebDocument(webmap);
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = this._createParams();
    const widget = await newWidgetsTimeSlider(params);
    this.widget = widget;
    await this._addWatchers();
    this._proxyEvents();
    this._addContainer();
    this.arcgisTimeSliderReady.emit();
    checkForView(this);
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    return h("div", { ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  _addContainer() {
    this.widget.container = this.childElem;
  }
  async _addWatchers() {
    const { watch } = await importCoreReactiveUtils();
    addHandles(this, [
      watch(() => this.widget.effectiveStops, (value) => {
        this.effectiveStops = value;
        this.arcgisPropertyChange.emit({ name: "effectiveStops" });
      }, {
        initial: true
      }),
      watch(() => this.widget.disabled, (value) => this.disabled = value),
      watch(() => this.widget.fullTimeExtent, (value) => {
        this.fullTimeExtent = value;
        this.arcgisPropertyChange.emit({ name: "fullTimeExtent" });
      }),
      watch(() => this.widget.timeExtent, (value) => {
        this.timeExtent = value;
        this.arcgisPropertyChange.emit({ name: "timeExtent" });
      })
    ]);
  }
  _createParams() {
    const params = {};
    if (this.actions !== void 0) {
      params.actions = this.actions;
    }
    if (this.fullTimeExtent !== void 0) {
      params.fullTimeExtent = this.fullTimeExtent;
    }
    if (this.layout !== void 0) {
      params.layout = this.layout;
    }
    if (this.loop !== void 0) {
      params.loop = this.loop;
    }
    if (this.mode !== void 0) {
      params.mode = this.mode;
    }
    if (this.playRate !== void 0) {
      params.playRate = this.playRate;
    }
    if (this.stops !== void 0) {
      params.stops = this.stops;
    }
    if (this.tickConfigs !== void 0) {
      params.tickConfigs = this.tickConfigs;
    }
    if (this.timeExtent !== void 0) {
      params.timeExtent = this.timeExtent;
    }
    if (this.timeVisible !== void 0) {
      params.timeVisible = this.timeVisible;
    }
    if (this.timeZone) {
      params.timeZone = this.timeZone;
    }
    if (this.view) {
      params.view = this.view;
    }
    return params;
  }
  _proxyEvents() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.on("trigger-action", (e) => this.timeSliderTriggerAction.emit(e));
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "referenceElement": ["referenceElementWatcher"],
      "actions": ["actionsWatcher"],
      "disabled": ["disabledWatcher"],
      "fullTimeExtent": ["fullTimeExtentWatcher"],
      "layout": ["layoutWatcher"],
      "loop": ["loopWatcher"],
      "mode": ["modeWatcher"],
      "playRate": ["playRateWatcher"],
      "stops": ["stopsWatcher"],
      "tickConfigs": ["tickConfigsWatcher"],
      "timeExtent": ["timeExtentWatcher"],
      "timeVisible": ["timeVisibleWatcher"],
      "timeZone": ["timeZoneWatcher"],
      "position": ["positionWatcher"],
      "view": ["viewWatcher"]
    };
  }
};
ArcgisTimeSlider.style = timeSliderCss;
export {
  ArcgisTimeSlider as arcgis_time_slider
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-time-slider.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-time-slider.entry-SLRAK6IO.js.map
