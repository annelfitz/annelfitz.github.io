import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  importCoreReactiveUtils,
  newWidgetsValuePicker
} from "./chunk-YXW2SI4L.js";
import {
  addHandles,
  checkForView
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-value-picker.entry.js
var valuePickerCss = "arcgis-value-picker{}";
var ArcgisValuePicker = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.arcgisValuePickerReady = createEvent(this, "arcgisValuePickerReady", 7);
    this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
    this.valuePickerAnimate = createEvent(this, "valuePickerAnimate", 7);
    this.valuePickerNext = createEvent(this, "valuePickerNext", 7);
    this.valuePickerPause = createEvent(this, "valuePickerPause", 7);
    this.valuePickerPlay = createEvent(this, "valuePickerPlay", 7);
    this.valuePickerPrevious = createEvent(this, "valuePickerPrevious", 7);
    this._watchHandles = [];
    this.referenceElement = void 0;
    this.view = void 0;
    this.position = "bottom-left";
    this.widget = void 0;
    this.canNext = void 0;
    this.canPlay = void 0;
    this.canPrevious = void 0;
    this.caption = void 0;
    this.component = void 0;
    this.layout = void 0;
    this.loop = void 0;
    this.playRate = void 0;
    this.visibleElements = void 0;
    this.values = void 0;
  }
  positionWatcher(newValue) {
    if (newValue !== void 0 && this.widget) {
      this.view.ui.move(this.childElem, newValue);
    }
  }
  captionWatcher(newValue) {
    this.widget.caption = newValue;
  }
  componentWatcher(newValue) {
    if (this.widget) {
      this.widget.component = newValue;
    }
  }
  layoutWatcher(newValue) {
    if (this.widget) {
      this.widget.layout = newValue;
    }
  }
  loopWatcher(newValue) {
    if (newValue !== void 0 && this.widget) {
      this.widget.loop = newValue;
    }
  }
  playRateWatcher(newValue) {
    if (newValue !== void 0 && this.widget) {
      this.widget.playRate = newValue;
    }
  }
  visibleElementsWatcher(newValue) {
    if (this.widget) {
      this.widget.visibleElements = newValue;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Methods
  //
  //--------------------------------------------------------------------------
  async next() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.next();
  }
  async pause() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.pause();
  }
  async play() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.play();
  }
  async previous() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.previous();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = this._createParams();
    const widget = await newWidgetsValuePicker(params);
    this.widget = widget;
    await this._addWatchers();
    this._proxyEvents();
    this.arcgisValuePickerReady.emit();
    checkForView(this);
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    return h("div", { ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Interal Methods
  //
  //--------------------------------------------------------------------------
  async _addWatchers() {
    const { watch } = await importCoreReactiveUtils();
    addHandles(this, watch(() => this.widget.canNext, (value) => this.canNext = value, {
      initial: true
    }));
    addHandles(this, watch(() => this.widget.canPlay, (value) => this.canPlay = value, {
      initial: true
    }));
    addHandles(this, watch(() => this.widget.canPrevious, (value) => this.canPrevious = value, {
      initial: true
    }));
    addHandles(this, watch(() => this.widget.values, (value) => {
      this.values = value;
      this.arcgisPropertyChange.emit({ name: "values" });
    }, {
      initial: true
    }));
  }
  _createParams() {
    const params = {
      container: this.childElem
    };
    if (this.caption) {
      params.caption = this.caption;
    }
    if (this.component) {
      params.component = this.component;
    }
    if (this.layout) {
      params.layout = this.layout;
    }
    if (this.loop !== void 0) {
      params.loop = this.loop;
    }
    if (this.playRate !== void 0) {
      params.playRate = this.playRate;
    }
    if (this.visibleElements) {
      params.visibleElements = this.visibleElements;
    }
    return params;
  }
  _proxyEvents() {
    this.widget.on("animate", (e) => this.valuePickerAnimate.emit(e));
    this.widget.on("next", (e) => this.valuePickerNext.emit(e));
    this.widget.on("pause", (e) => this.valuePickerPause.emit(e));
    this.widget.on("play", (e) => this.valuePickerPlay.emit(e));
    this.widget.on("previous", (e) => this.valuePickerPrevious.emit(e));
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "position": ["positionWatcher"],
      "caption": ["captionWatcher"],
      "component": ["componentWatcher"],
      "layout": ["layoutWatcher"],
      "loop": ["loopWatcher"],
      "playRate": ["playRateWatcher"],
      "visibleElements": ["visibleElementsWatcher"]
    };
  }
};
ArcgisValuePicker.style = valuePickerCss;
export {
  ArcgisValuePicker as arcgis_value_picker
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-value-picker.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-value-picker.entry-4U5P4WOM.js.map
