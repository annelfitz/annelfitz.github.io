import {
  N
} from "./chunk-PMK5VFGV.js";
import {
  B,
  Be,
  De,
  Ee,
  H,
  He,
  Te,
  Ue,
  Ve,
  Y,
  a,
  ae,
  k,
  ke,
  me,
  pe,
  qe,
  r
} from "./chunk-YGY4RCQM.js";
import "./chunk-GEMKWQ3Q.js";
import "./chunk-QD3CP3I4.js";
import "./chunk-Z3NX5DTX.js";
import "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-545NO6M2.js";
import "./chunk-5LSHHVQ5.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import "./chunk-NDIXNREV.js";
import "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/arcade/functions/featuresetstring.js
function T(a2, e) {
  return a2 && a2.domain ? "coded-value" === a2.domain.type || "codedValue" === a2.domain.type ? N.convertObjectToArcadeDictionary({ type: "codedValue", name: a2.domain.name, dataType: k[a2.field.type], codedValues: a2.domain.codedValues.map((n) => ({ name: n.name, code: n.code })) }, He(e)) : N.convertObjectToArcadeDictionary({ type: "range", name: a2.domain.name, dataType: k[a2.field.type], min: a2.domain.minValue, max: a2.domain.maxValue }, He(e)) : null;
}
function b(h) {
  "async" === h.mode && (h.functions.domain = function(n, d) {
    return h.standardFunctionAsync(n, d, async (u, m, f) => {
      if (ae(f, 2, 3, n, d), H(f[0])) {
        return T(Ee(f[0], me(f[1]), void 0 === f[2] ? void 0 : f[2]), n);
      }
      if (B(f[0])) {
        await f[0]._ensureLoaded();
        return T(ke(me(f[1]), f[0], null, void 0 === f[2] ? void 0 : f[2]), n);
      }
      throw new a(n, r.InvalidParameter, d);
    });
  }, h.functions.subtypes = function(o, i) {
    return h.standardFunctionAsync(o, i, async (s, m, f) => {
      if (ae(f, 1, 1, o, i), H(f[0])) {
        const a2 = Ve(f[0]);
        return a2 ? N.convertObjectToArcadeDictionary(a2, He(o)) : null;
      }
      if (B(f[0])) {
        await f[0]._ensureLoaded();
        const a2 = f[0].subtypeMetaData();
        return a2 ? N.convertObjectToArcadeDictionary(a2, He(o)) : null;
      }
      throw new a(o, r.InvalidParameter, i);
    });
  }, h.functions.domainname = function(n, o) {
    return h.standardFunctionAsync(n, o, async (d, u, l) => {
      if (ae(l, 2, 4, n, o), H(l[0]))
        return qe(l[0], me(l[1]), l[2], void 0 === l[3] ? void 0 : l[3]);
      if (B(l[0])) {
        await l[0]._ensureLoaded();
        const n2 = ke(me(l[1]), l[0], null, void 0 === l[3] ? void 0 : l[3]);
        return Te(n2, l[2]);
      }
      throw new a(n, r.InvalidParameter, o);
    });
  }, h.signatures.push({ name: "domainname", min: 2, max: 4 }), h.functions.domaincode = function(n, o) {
    return h.standardFunctionAsync(n, o, async (d, u, m) => {
      if (ae(m, 2, 4, n, o), H(m[0]))
        return Ue(m[0], me(m[1]), m[2], void 0 === m[3] ? void 0 : m[3]);
      if (B(m[0])) {
        await m[0]._ensureLoaded();
        const n2 = ke(me(m[1]), m[0], null, void 0 === m[3] ? void 0 : m[3]);
        return De(n2, m[2]);
      }
      throw new a(n, r.InvalidParameter, o);
    });
  }, h.signatures.push({ name: "domaincode", min: 2, max: 4 }), h.functions.text = function(n, r2) {
    return h.standardFunctionAsync(n, r2, async (o, i, s) => {
      if (ae(s, 1, 2, n, r2), B(s[0])) {
        const t = Y(s[1], "");
        if ("" === t)
          return s[0].castToText();
        if ("schema" === t.toLowerCase())
          return s[0].convertToText("schema", o.abortSignal);
        if ("featureset" === t.toLowerCase())
          return s[0].convertToText("featureset", o.abortSignal);
        throw new a(n, r.InvalidParameter, r2);
      }
      return pe(s[0], s[1]);
    });
  }, h.functions.gdbversion = function(n, o) {
    return h.standardFunctionAsync(n, o, async (i, s, d) => {
      if (ae(d, 1, 1, n, o), H(d[0]))
        return d[0].gdbVersion();
      if (B(d[0])) {
        return (await d[0].load()).gdbVersion;
      }
      throw new a(n, r.InvalidParameter, o);
    });
  }, h.functions.schema = function(o, i) {
    return h.standardFunctionAsync(o, i, async (s, d, m) => {
      if (ae(m, 1, 1, o, i), B(m[0]))
        return await m[0].load(), N.convertObjectToArcadeDictionary(m[0].schema(), He(o));
      if (H(m[0])) {
        const a2 = Be(m[0]);
        return a2 ? N.convertObjectToArcadeDictionary(a2, He(o)) : null;
      }
      throw new a(o, r.InvalidParameter, i);
    });
  });
}
export {
  b as registerFunctions
};
//# sourceMappingURL=featuresetstring-2ZPYDOFO.js.map
