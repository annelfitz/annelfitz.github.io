import {
  d
} from "./chunk-SVNPPUZN.js";
import {
  e as e4
} from "./chunk-QR7J3YDY.js";
import {
  o as o4
} from "./chunk-UYMREM3D.js";
import {
  o as o3
} from "./chunk-3AIILHI5.js";
import {
  e as e3
} from "./chunk-HFJMEXIX.js";
import {
  o as o2
} from "./chunk-IDPLBNJX.js";
import {
  o
} from "./chunk-P4MNTMCZ.js";
import {
  e as e2
} from "./chunk-GLF3KRAL.js";
import {
  n
} from "./chunk-ZLQTPFTL.js";
import {
  e
} from "./chunk-N5GQOIDP.js";
import {
  i
} from "./chunk-HWHMO3CO.js";

// node_modules/@arcgis/core/chunks/LaserlinePath.glsl.js
function v(i2) {
  const r = new o4();
  r.include(d, i2);
  const { vertex: v2, fragment: w2 } = r;
  return v2.uniforms.add(new e3("modelView", (i3, o5) => i(p, o5.camera.viewMatrix, i3.origin)), new e3("proj", (e5, i3) => i3.camera.projectionMatrix), new o2("glowWidth", (e5, i3) => e5.glowWidth * i3.camera.pixelRatio), new e4("pixelToNDC", (e5, i3) => o3(m, 2 / i3.camera.fullViewport[2], 2 / i3.camera.fullViewport[3]))), r.attributes.add(e2.START, "vec3"), r.attributes.add(e2.END, "vec3"), r.attributes.add(e2.UP, "vec3"), r.attributes.add(e2.EXTRUDE, "vec2"), r.varyings.add("uv", "vec2"), r.varyings.add("vViewStart", "vec3"), r.varyings.add("vViewEnd", "vec3"), r.varyings.add("vViewPlane", "vec4"), v2.code.add(o`void main() {
vec3 pos = mix(start, end, extrude.x);
vec4 viewPos = modelView * vec4(pos, 1);
vec4 projPos = proj * viewPos;
vec2 ndcPos = projPos.xy / projPos.w;
vec3 viewUp = (modelView * vec4(extrude.y * up, 0)).xyz;
vec4 projPosUp = proj * vec4(viewPos.xyz + viewUp, 1);
vec2 projExtrudeDir = normalize(projPosUp.xy / projPosUp.w - ndcPos);
vec2 lxy = abs(sign(projExtrudeDir) - ndcPos);
ndcPos += length(lxy) * projExtrudeDir;
vec3 worldPlaneNormal = normalize(cross(up, normalize(end - start)));
vec3 viewPlaneNormal = (modelView * vec4(worldPlaneNormal, 0)).xyz;
vViewStart = (modelView * vec4(start, 1)).xyz;
vViewEnd = (modelView * vec4(end, 1)).xyz;
vViewPlane = vec4(viewPlaneNormal, -dot(viewPlaneNormal, vViewStart));
float xPaddingPixels = sign(dot(viewPlaneNormal, viewPos.xyz)) * (extrude.x * 2.0 - 1.0) * glowWidth;
ndcPos.x += xPaddingPixels * pixelToNDC.x;
uv = ndcPos * 0.5 + 0.5;
gl_Position = vec4(ndcPos, 0, 1);
}`), w2.uniforms.add(new o2("perScreenPixelRatio", (e5, i3) => i3.camera.perScreenPixelRatio)), w2.code.add(o`float planeDistancePixels(vec4 plane, vec3 pos, vec3 start, vec3 end) {
vec3 origin = mix(start, end, 0.5);
vec3 basis = end - origin;
vec3 posAtOrigin = pos - origin;
float x = dot(normalize(basis), posAtOrigin);
float y = dot(plane.xyz, posAtOrigin);
float dx = max(abs(x) - length(basis), 0.0);
float dy = y;
float dist = length(vec2(dx, dy));
float width = fwidth(y);
float maxPixelDistance = length(pos) * perScreenPixelRatio * 2.0;
float pixelDist = dist / min(width, maxPixelDistance);
return abs(pixelDist);
}
void main() {
vec3 pos;
vec3 normal;
float depthDiscontinuityAlpha;
vec3 dEndStart = vViewEnd - vViewStart;
if (dot(dEndStart, dEndStart) < 1e-5) {
discard;
}
if (!laserlineReconstructFromDepth(pos, normal, depthDiscontinuityAlpha)) {
discard;
}
float distance = planeDistancePixels(vViewPlane, pos, vViewStart, vViewEnd);
vec4 color = laserlineProfile(distance);
float alpha = 1.0 - smoothstep(0.995, 0.999, abs(dot(normal, vViewPlane.xyz)));
fragColor = laserlineOutput(color * alpha * depthDiscontinuityAlpha);
}`), r;
}
var m = n();
var p = e();
var w = Object.freeze(Object.defineProperty({ __proto__: null, build: v }, Symbol.toStringTag, { value: "Module" }));

export {
  v,
  w
};
//# sourceMappingURL=chunk-ZKV5BWYX.js.map
