import {
  componentFocusable,
  setComponentLoaded,
  setUpLoadableComponent
} from "./chunk-HYC423SM.js";
import {
  slotChangeHasAssignedElement
} from "./chunk-BUS2XAMG.js";
import "./chunk-L553G5FP.js";
import "./chunk-PJLSVRBA.js";
import {
  Fragment,
  Host,
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-FNA2PYJM.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@esri/calcite-components/dist/esm/calcite-navigation_3.entry.js
var CSS$2 = {
  container: "container",
  containerContent: "container-content",
  hasProgress: "progress-bar",
  hide: "hide",
  primary: "primary",
  secondary: "secondary",
  tertiary: "tertiary"
};
var SLOTS = {
  logo: "logo",
  user: "user",
  progress: "progress",
  navigationAction: "navigation-action",
  contentStart: "content-start",
  contentEnd: "content-end",
  contentCenter: "content-center",
  navSecondary: "navigation-secondary",
  navTertiary: "navigation-tertiary"
};
var ICONS = {
  hamburger: "hamburger"
};
var navigationCss = ":host([hidden]){display:none}[hidden]{display:none}.container{margin-inline:auto;display:flex;inline-size:100%;flex-direction:column;margin-block:0;margin-inline:auto;background-color:var(--calcite-navigation-background, var(--calcite-color-foreground-1))}.container.primary,.container.secondary,.container.tertiary{border-block-end:1px solid;border-block-end-color:var(--calcite-navigation-border-color, var(--calcite-color-border-3))}.user,.logo{display:flex}.hide{display:none}.primary{block-size:4rem}.secondary{block-size:3rem}.tertiary{block-size:3rem}.container-content{margin-inline:auto;display:flex;block-size:100%;inline-size:100%;margin-block:0;inline-size:var(--calcite-navigation-width, 100%);max-inline-size:100%}.container-content.progress-bar{margin-block-start:0.125rem}slot[name]{display:flex;flex-direction:row}slot[name=navigation-secondary]::slotted(calcite-navigation),slot[name=navigation-tertiary]::slotted(calcite-navigation){inline-size:100%}slot[name=content-start]::slotted(*),slot[name=content-center]::slotted(*),slot[name=content-end]::slotted(*){display:flex;flex-direction:row;align-items:center}slot[name=progress],slot[name=progress] calcite-progress{inset-block-start:0;inset-inline:0}slot[name=content-end]{margin-inline-start:auto}slot[name=content-start]{margin-inline-end:auto}slot[name=content-end],slot[name=logo]~slot[name=user],slot[name=user]:only-child{margin-inline-start:auto}slot[name=content-center]{margin-inline-start:auto;margin-inline-end:auto}slot[name=content-start]~slot[name=content-center]{margin-inline-start:0px}slot[name=content-start]~slot[name=content-end],slot[name=content-center]~slot[name=content-end],slot[name=content-center]~slot[name=user],slot[name=content-end]~slot[name=user]{margin:0px}";
var CalciteNavigation = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.calciteNavigationActionSelect = createEvent(this, "calciteNavigationActionSelect", 6);
    this.actionClickHandler = () => {
      this.calciteNavigationActionSelect.emit();
    };
    this.handleUserSlotChange = (event) => {
      if (this.isPrimaryLevel()) {
        this.userSlotHasElements = slotChangeHasAssignedElement(event);
      }
    };
    this.handleLogoSlotChange = (event) => {
      if (this.isPrimaryLevel()) {
        this.logoSlotHasElements = slotChangeHasAssignedElement(event);
      }
    };
    this.handleContentStartSlotChange = (event) => {
      if (this.isPrimaryLevel()) {
        this.primaryContentStartSlotHasElements = slotChangeHasAssignedElement(event);
      }
    };
    this.handleContentEndSlotChange = (event) => {
      if (this.isPrimaryLevel()) {
        this.primaryContentEndSlotHasElements = slotChangeHasAssignedElement(event);
      }
    };
    this.handleContentCenterSlotChange = (event) => {
      if (this.isPrimaryLevel()) {
        this.primaryContentCenterSlotHasElements = slotChangeHasAssignedElement(event);
      }
    };
    this.handleSecondarySlotChange = (event) => {
      this.secondarySlotHasElements = slotChangeHasAssignedElement(event);
    };
    this.handleTertiarySlotChange = (event) => {
      this.tertiarySlotHasElements = slotChangeHasAssignedElement(event);
    };
    this.handleMenuActionSlotChange = (event) => {
      if (this.isPrimaryLevel()) {
        this.navigationActionSlotHasElements = slotChangeHasAssignedElement(event);
        if (this.navigationActionSlotHasElements) {
          this.navigationAction = false;
        }
      }
    };
    this.handleProgressSlotChange = (event) => {
      if (this.isPrimaryLevel()) {
        this.progressSlotHasElement = slotChangeHasAssignedElement(event);
      }
    };
    this.label = void 0;
    this.navigationAction = false;
    this.logoSlotHasElements = void 0;
    this.navigationActionSlotHasElements = void 0;
    this.primaryContentCenterSlotHasElements = void 0;
    this.primaryContentEndSlotHasElements = void 0;
    this.primaryContentStartSlotHasElements = void 0;
    this.progressSlotHasElement = void 0;
    this.secondarySlotHasElements = void 0;
    this.tertiarySlotHasElements = void 0;
    this.userSlotHasElements = void 0;
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  /** When `navigationAction` is `true`, sets focus on the component's action element. */
  async setFocus() {
    var _a;
    await componentFocusable(this);
    return (_a = this.navigationActionEl) == null ? void 0 : _a.setFocus();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  componentWillLoad() {
    setUpLoadableComponent(this);
  }
  componentDidLoad() {
    setComponentLoaded(this);
  }
  isPrimaryLevel() {
    return this.el.slot !== SLOTS.navSecondary && this.el.slot !== SLOTS.navTertiary;
  }
  //--------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  renderMenuAction() {
    return h("slot", { name: SLOTS.navigationAction, onSlotchange: this.handleMenuActionSlotChange }, this.navigationAction && h("calcite-action", {
      icon: ICONS.hamburger,
      onClick: this.actionClickHandler,
      text: this.label,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: (el) => this.navigationActionEl = el
    }));
  }
  render() {
    const primaryLevelHasElements = this.logoSlotHasElements || this.userSlotHasElements || this.navigationActionSlotHasElements || this.primaryContentCenterSlotHasElements || this.primaryContentEndSlotHasElements || this.primaryContentStartSlotHasElements || this.navigationAction;
    const slotName = this.el.slot;
    return h(Host, null, h("div", { class: {
      [CSS$2.container]: true,
      [CSS$2.secondary]: slotName === SLOTS.navSecondary,
      [CSS$2.tertiary]: slotName === SLOTS.navTertiary,
      [CSS$2.primary]: primaryLevelHasElements
    } }, h("div", { class: { [CSS$2.hide]: !this.progressSlotHasElement, [SLOTS.progress]: true } }, h("slot", { name: SLOTS.progress, onSlotchange: this.handleProgressSlotChange })), h("div", { class: { [CSS$2.containerContent]: true, [CSS$2.hasProgress]: this.progressSlotHasElement } }, this.renderMenuAction(), h("div", { class: { [CSS$2.hide]: !this.logoSlotHasElements, [SLOTS.logo]: true } }, h("slot", { name: SLOTS.logo, onSlotchange: this.handleLogoSlotChange })), h("slot", { name: SLOTS.contentStart, onSlotchange: this.handleContentStartSlotChange }), h("slot", { name: SLOTS.contentCenter, onSlotchange: this.handleContentCenterSlotChange }), h("slot", { name: SLOTS.contentEnd, onSlotchange: this.handleContentEndSlotChange }), h("div", { class: { [CSS$2.hide]: !this.userSlotHasElements, [SLOTS.user]: true } }, h("slot", { name: SLOTS.user, onSlotchange: this.handleUserSlotChange })))), h(Fragment, null, h("slot", { name: SLOTS.navSecondary, onSlotchange: this.handleSecondarySlotChange }), h("slot", { name: SLOTS.navTertiary, onSlotchange: this.handleTertiarySlotChange })));
  }
  get el() {
    return getElement(this);
  }
};
CalciteNavigation.style = navigationCss;
var CSS$1 = {
  container: "container",
  heading: "heading",
  description: "description",
  anchor: "anchor",
  image: "image",
  standalone: "standalone",
  icon: "icon"
};
var navigationLogoCss = ":host{display:inline-flex;outline:2px solid transparent;outline-offset:2px}.anchor{margin:0px;display:flex;cursor:pointer;align-items:center;justify-content:center;font-size:var(--calcite-font-size-0);line-height:1.25rem;text-decoration-line:none;outline-color:transparent;transition:all var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;color:inherit;border-block-end:2px solid transparent}.anchor:hover,.anchor:focus{background-color:var(--calcite-color-foreground-2)}.anchor:focus{outline:2px solid var(--calcite-ui-focus-color, var(--calcite-color-brand-hover, var(--calcite-color-brand)));outline-offset:calc(\n            -2px *\n            calc(\n              1 -\n              2 * clamp(\n                0,\n                var(--calcite-offset-invert-focus),\n                1\n              )\n            )\n          )}.anchor:active{background-color:var(--calcite-color-foreground-3)}.image,.icon{margin:0px;display:flex;block-size:1.75rem;padding-inline:1rem}.image~.icon{padding-inline-start:0px}.image~.container,.icon~.container{padding-inline-start:0px}:host(:active) .anchor{color:var(--calcite-color-text-1)}:host([active]) .anchor{color:var(--calcite-color-text-1);border-color:var(--calcite-color-brand);--calcite-ui-icon-color:var(--calcite-color-brand)}.container{margin-block-start:0.125rem;display:flex;flex-direction:column;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;padding-inline:1rem;text-align:start}.heading{margin-inline-start:0px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;font-size:var(--calcite-font-size-0);font-weight:var(--calcite-font-weight-medium);color:var(--calcite-color-text-1)}.standalone{font-size:var(--calcite-font-size-1)}.description{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;color:var(--calcite-color-text-2);font-size:var(--calcite-font-size--1)}:host([hidden]){display:none}[hidden]{display:none}";
var CalciteNavigationLogo = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.active = void 0;
    this.href = void 0;
    this.icon = void 0;
    this.iconFlipRtl = false;
    this.label = void 0;
    this.rel = void 0;
    this.description = void 0;
    this.target = void 0;
    this.heading = void 0;
    this.thumbnail = void 0;
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  /** Sets focus on the component. */
  async setFocus() {
    await componentFocusable(this);
    if (this.href) {
      this.el.focus();
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  componentWillLoad() {
    setUpLoadableComponent(this);
  }
  componentDidLoad() {
    setComponentLoaded(this);
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  // --------------------------------------------------------------------------
  renderIcon() {
    return h("calcite-icon", { class: CSS$1.icon, flipRtl: this.iconFlipRtl, icon: this.icon, scale: "l" });
  }
  render() {
    const { heading, description, thumbnail } = this;
    return h(Host, null, h("a", { class: CSS$1.anchor, href: this.href, rel: this.rel, target: this.target }, thumbnail && h("img", { alt: this.label || "", class: CSS$1.image, src: thumbnail }), this.icon && this.renderIcon(), (heading || description) && h("div", { class: CSS$1.container }, heading && h("span", { "aria-label": this.heading, class: {
      [CSS$1.heading]: true,
      [CSS$1.standalone]: !this.description
    }, key: CSS$1.heading }, heading), description && h("span", { "aria-label": this.description, class: CSS$1.description, key: CSS$1.description }, description))));
  }
  static get delegatesFocus() {
    return true;
  }
  get el() {
    return getElement(this);
  }
};
CalciteNavigationLogo.style = navigationLogoCss;
var CSS = {
  textContainer: "text-container",
  fullName: "full-name",
  username: "username",
  button: "button"
};
var navigationUserCss = ":host{display:inline-flex;outline:2px solid transparent;outline-offset:2px}:host .button{background-color:transparent;border:none;margin:0px;display:flex;cursor:pointer;align-items:center;justify-content:center;font-family:var(--calcite-sans-family);font-size:var(--calcite-font-size-0);line-height:1.25rem;outline-color:transparent;transition:all var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;border-block-end:2px solid transparent}:host(:hover) .button,:host(:focus) .button{background-color:var(--calcite-color-foreground-2)}:host(:focus) .button{outline:2px solid var(--calcite-ui-focus-color, var(--calcite-color-brand-hover, var(--calcite-color-brand)));outline-offset:calc(\n            -2px *\n            calc(\n              1 -\n              2 * clamp(\n                0,\n                var(--calcite-offset-invert-focus),\n                1\n              )\n            )\n          )}:host(:active) .button{background-color:var(--calcite-color-foreground-3);color:var(--calcite-color-text-1)}calcite-avatar{padding-inline:1rem}calcite-avatar~.text-container{padding-inline-start:0px}:host([active]) .button{border-color:var(--calcite-color-brand);color:var(--calcite-color-text-1);--calcite-ui-icon-color:var(--calcite-color-brand)}.text-container{margin-block-start:0.125rem;display:flex;flex-direction:column;padding-inline:1rem;text-align:start}.full-name{margin-inline-start:0px;font-size:var(--calcite-font-size-0);font-weight:var(--calcite-font-weight-medium);color:var(--calcite-color-text-1)}.username{color:var(--calcite-color-text-2);font-size:var(--calcite-font-size--1)}:host([hidden]){display:none}[hidden]{display:none}";
var CalciteNavigationUser = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.active = void 0;
    this.fullName = void 0;
    this.label = void 0;
    this.textDisabled = false;
    this.thumbnail = void 0;
    this.userId = void 0;
    this.username = void 0;
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  /** Sets focus on the component. */
  async setFocus() {
    await componentFocusable(this);
    this.el.focus();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  componentWillLoad() {
    setUpLoadableComponent(this);
  }
  componentDidLoad() {
    setComponentLoaded(this);
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  // --------------------------------------------------------------------------
  render() {
    return h(Host, null, h("button", { "aria-label": this.label, class: CSS.button }, h("calcite-avatar", { "full-name": this.fullName, label: this.label, thumbnail: this.thumbnail, "user-id": this.userId, username: this.username }), (this.fullName || this.username) && !this.textDisabled && h("div", { class: CSS.textContainer }, this.fullName && h("span", { class: CSS.fullName, key: CSS.fullName }, this.fullName), this.username && h("span", { class: CSS.username, key: CSS.username }, this.username))));
  }
  static get delegatesFocus() {
    return true;
  }
  get el() {
    return getElement(this);
  }
};
CalciteNavigationUser.style = navigationUserCss;
export {
  CalciteNavigation as calcite_navigation,
  CalciteNavigationLogo as calcite_navigation_logo,
  CalciteNavigationUser as calcite_navigation_user
};
/*! Bundled license information:

@esri/calcite-components/dist/esm/calcite-navigation_3.entry.js:
  (*!
   * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
   * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
   * v2.6.0
   *)
*/
//# sourceMappingURL=calcite-navigation_3.entry-GYZM2SOX.js.map
