import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  importCoreReactiveUtils,
  newWidgetsTrack
} from "./chunk-YXW2SI4L.js";
import {
  addHandles,
  checkForView,
  referenceElementHelper
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-track.entry.js
var trackCss = "";
var ArcgisTrack = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.arcgisTrackReady = createEvent(this, "arcgisTrackReady", 7);
    this.trackComplete = createEvent(this, "trackComplete", 7);
    this.trackError = createEvent(this, "trackError", 7);
    this._watchHandles = [];
    this.referenceElement = void 0;
    this.error = void 0;
    this.geolocationOptions = void 0;
    this.goToLocationEnabled = true;
    this.graphic = void 0;
    this.icon = void 0;
    this.positionFilterFunction = void 0;
    this.rotationEnabled = true;
    this.scale = void 0;
    this.state = "disabled";
    this.tracking = false;
    this.position = "bottom-left";
    this.view = void 0;
    this.widget = void 0;
  }
  referenceElementWatcher(value) {
    void referenceElementHelper(this, value);
  }
  geolocationOptionsWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.geolocationOptions = value;
    }
  }
  goToLocationEnabledWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.goToLocationEnabled = value;
    }
  }
  graphicWatcher(value) {
    if (this.widget) {
      this.widget.graphic = value;
    }
  }
  iconWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.icon = value;
    }
  }
  positionFilterFunctionWatcher(value) {
    if (this.widget) {
      this.widget.viewModel.positionFilterFunction = value;
    }
  }
  rotationEnabledWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.rotationEnabled = value;
    }
  }
  scaleWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.scale = value;
    }
  }
  positionWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.view.ui.move(this.childElem, value);
    }
  }
  viewWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.view = value;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Methods
  //
  //--------------------------------------------------------------------------
  async start() {
    this.widget.start();
  }
  async stop() {
    this.widget.stop();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = this._createParams();
    const widget = await newWidgetsTrack(params);
    this.widget = widget;
    await this._addWatchers();
    this._proxyEvents();
    this._addContainer();
    this.arcgisTrackReady.emit();
    checkForView(this);
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    return h("div", { ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  _addContainer() {
    this.widget.container = this.childElem;
  }
  async _addWatchers() {
    const { watch } = await importCoreReactiveUtils();
    addHandles(this, [
      watch(() => this.widget.viewModel.error, (value) => this.error = value),
      watch(() => this.widget.viewModel.state, (value) => this.state = value),
      watch(() => this.widget.tracking, (value) => this.tracking = value, {
        initial: true
      })
    ]);
  }
  _createParams() {
    const params = {};
    if (this.geolocationOptions !== void 0) {
      params.geolocationOptions = this.geolocationOptions;
    }
    if (this.goToLocationEnabled !== void 0) {
      params.goToLocationEnabled = this.goToLocationEnabled;
    }
    if (this.graphic !== void 0) {
      params.graphic = this.graphic;
    }
    if (this.icon !== void 0) {
      params.icon = this.icon;
    }
    if (this.positionFilterFunction !== void 0) {
      params.viewModel = {
        positionFilterFunction: this.positionFilterFunction
      };
    }
    if (this.rotationEnabled !== void 0) {
      params.rotationEnabled = this.rotationEnabled;
    }
    if (this.scale !== void 0) {
      params.scale = this.scale;
    }
    if (this.view) {
      params.view = this.view;
    }
    return params;
  }
  _proxyEvents() {
    this.widget.on("track", (e) => this.trackComplete.emit(e));
    this.widget.on("track-error", (e) => this.trackError.emit(e));
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "referenceElement": ["referenceElementWatcher"],
      "geolocationOptions": ["geolocationOptionsWatcher"],
      "goToLocationEnabled": ["goToLocationEnabledWatcher"],
      "graphic": ["graphicWatcher"],
      "icon": ["iconWatcher"],
      "positionFilterFunction": ["positionFilterFunctionWatcher"],
      "rotationEnabled": ["rotationEnabledWatcher"],
      "scale": ["scaleWatcher"],
      "position": ["positionWatcher"],
      "view": ["viewWatcher"]
    };
  }
};
ArcgisTrack.style = trackCss;
export {
  ArcgisTrack as arcgis_track
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-track.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-track.entry-UJT3D6BB.js.map
