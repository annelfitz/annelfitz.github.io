import {
  y
} from "./chunk-5JYVZQZR.js";
import {
  l2 as l
} from "./chunk-LSM34QAB.js";
import {
  o,
  s
} from "./chunk-7RBRCL6S.js";

// node_modules/@arcgis/core/layers/effects/jsonUtils.js
function n(e, t, r) {
  var _a;
  try {
    return c(e);
  } catch (s2) {
    (_a = r == null ? void 0 : r.messages) == null ? void 0 : _a.push(s2);
  }
  return null;
}
function a(e, r, s2, n2) {
  try {
    const n3 = o2(e);
    o(s2, n3, r);
  } catch (a2) {
    n2.messages && n2.messages.push(a2);
  }
}
function o2(e) {
  const t = y(e);
  return t ? l(t) ? t.map((e2) => e2.toJSON()) : t.map(({ scale: e2, effects: t2 }) => ({ scale: e2, value: t2.map((e3) => e3.toJSON()) })) : null;
}
function c(e) {
  if (!e || 0 === e.length)
    return null;
  if (f(e)) {
    const t = [];
    for (const r of e)
      t.push({ scale: r.scale, value: i(r.value) });
    return t;
  }
  return i(e);
}
function f(e) {
  const t = e[0];
  return !!t && "scale" in t;
}
function i(e) {
  if (!(e == null ? void 0 : e.length))
    return "";
  const t = [];
  for (const s2 of e) {
    let e2 = [];
    switch (s2.type) {
      case "grayscale":
      case "sepia":
      case "saturate":
      case "invert":
      case "brightness":
      case "contrast":
      case "opacity":
        e2 = [u(s2, "amount")];
        break;
      case "blur":
        e2 = [u(s2, "radius", "pt")];
        break;
      case "hue-rotate":
        e2 = [u(s2, "angle", "deg")];
        break;
      case "drop-shadow":
        e2 = [u(s2, "xoffset", "pt"), u(s2, "yoffset", "pt"), u(s2, "blurRadius", "pt"), l2(s2, "color")];
        break;
      case "bloom":
        e2 = [u(s2, "strength"), u(s2, "radius", "pt"), u(s2, "threshold")];
    }
    const n2 = `${s2.type}(${e2.filter(Boolean).join(" ")})`;
    y(n2), t.push(n2);
  }
  return t.join(" ");
}
function u(t, r, s2) {
  if (null == t[r])
    throw new s("effect:missing-parameter", `Missing parameter '${r}' in ${t.type} effect`, { effect: t });
  return s2 ? t[r] + s2 : "" + t[r];
}
function l2(t, r) {
  if (null == t[r])
    throw new s("effect:missing-parameter", `Missing parameter '${r}' in ${t.type} effect`, { effect: t });
  const s2 = t[r];
  return `rgba(${s2[0] || 0}, ${s2[1] || 0}, ${s2[2] || 0}, ${s2[3] / 255 || 0})`;
}

export {
  n,
  a,
  i
};
//# sourceMappingURL=chunk-3KPZ3BQR.js.map
