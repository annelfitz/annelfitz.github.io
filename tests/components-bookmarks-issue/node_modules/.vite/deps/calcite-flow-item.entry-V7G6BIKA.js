import {
  SLOTS
} from "./chunk-L42XEOOY.js";
import {
  InteractiveContainer,
  connectInteractive,
  disconnectInteractive,
  updateHostInteraction
} from "./chunk-66JQNCB7.js";
import "./chunk-OUKAB5XV.js";
import {
  connectMessages,
  disconnectMessages,
  setUpMessages,
  updateMessages
} from "./chunk-IF3MPWQI.js";
import {
  connectLocalized,
  disconnectLocalized
} from "./chunk-AXCPOXSP.js";
import "./chunk-CTALGNVI.js";
import "./chunk-7QCRXUYY.js";
import {
  componentFocusable,
  setComponentLoaded,
  setUpLoadableComponent
} from "./chunk-HYC423SM.js";
import {
  getElementDir
} from "./chunk-BUS2XAMG.js";
import "./chunk-L553G5FP.js";
import "./chunk-PJLSVRBA.js";
import {
  Host,
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-FNA2PYJM.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@esri/calcite-components/dist/esm/calcite-flow-item.entry.js
var CSS = {
  backButton: "back-button"
};
var ICONS = {
  backLeft: "chevron-left",
  backRight: "chevron-right"
};
var SLOTS2 = {
  actionBar: "action-bar",
  headerActionsStart: "header-actions-start",
  headerActionsEnd: "header-actions-end",
  headerMenuActions: "header-menu-actions",
  headerContent: "header-content",
  fab: "fab",
  footer: "footer",
  footerActions: "footer-actions"
};
var flowItemCss = ":host{box-sizing:border-box;background-color:var(--calcite-color-foreground-1);color:var(--calcite-color-text-2);font-size:var(--calcite-font-size--1)}:host *{box-sizing:border-box}:host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{position:relative;display:flex;inline-size:100%;flex:1 1 auto;overflow:hidden}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}.interaction-container{display:contents}.back-button{border-width:0px;border-style:solid;border-color:var(--calcite-color-border-3);border-inline-end-width:1px}calcite-panel{--calcite-panel-footer-padding:var(--calcite-flow-item-footer-padding);--calcite-panel-header-border-block-end:var(--calcite-flow-item-header-border-block-end)}:host([hidden]){display:none}[hidden]{display:none}";
var FlowItem = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.calciteFlowItemBack = createEvent(this, "calciteFlowItemBack", 7);
    this.calciteFlowItemScroll = createEvent(this, "calciteFlowItemScroll", 6);
    this.calciteFlowItemClose = createEvent(this, "calciteFlowItemClose", 6);
    this.calciteFlowItemToggle = createEvent(this, "calciteFlowItemToggle", 6);
    this.handlePanelScroll = (event) => {
      event.stopPropagation();
      this.calciteFlowItemScroll.emit();
    };
    this.handlePanelClose = (event) => {
      event.stopPropagation();
      this.calciteFlowItemClose.emit();
    };
    this.handlePanelToggle = (event) => {
      event.stopPropagation();
      this.collapsed = event.target.collapsed;
      this.calciteFlowItemToggle.emit();
    };
    this.backButtonClick = () => {
      this.calciteFlowItemBack.emit();
    };
    this.setBackRef = (node) => {
      this.backButtonEl = node;
    };
    this.setContainerRef = (node) => {
      this.containerEl = node;
    };
    this.closable = false;
    this.closed = false;
    this.collapsed = false;
    this.collapseDirection = "down";
    this.collapsible = false;
    this.beforeBack = void 0;
    this.description = void 0;
    this.disabled = false;
    this.heading = void 0;
    this.headingLevel = void 0;
    this.loading = false;
    this.menuOpen = false;
    this.messageOverrides = void 0;
    this.messages = void 0;
    this.overlayPositioning = "absolute";
    this.showBackButton = false;
    this.defaultMessages = void 0;
    this.effectiveLocale = "";
  }
  onMessagesChange() {
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  connectedCallback() {
    connectInteractive(this);
    connectLocalized(this);
    connectMessages(this);
  }
  async componentWillLoad() {
    await setUpMessages(this);
    setUpLoadableComponent(this);
  }
  componentDidRender() {
    updateHostInteraction(this);
  }
  disconnectedCallback() {
    disconnectInteractive(this);
    disconnectLocalized(this);
    disconnectMessages(this);
  }
  componentDidLoad() {
    setComponentLoaded(this);
  }
  effectiveLocaleChange() {
    updateMessages(this, this.effectiveLocale);
  }
  // --------------------------------------------------------------------------
  //
  //  Methods
  //
  // --------------------------------------------------------------------------
  /**
   * Sets focus on the component.
   *
   * @returns promise.
   */
  async setFocus() {
    await componentFocusable(this);
    const { backButtonEl, containerEl } = this;
    if (backButtonEl) {
      return backButtonEl.setFocus();
    } else if (containerEl) {
      return containerEl.setFocus();
    }
  }
  /**
   * Scrolls the component's content to a specified set of coordinates.
   *
   * @example
   * myCalciteFlowItem.scrollContentTo({
   *   left: 0, // Specifies the number of pixels along the X axis to scroll the window or element.
   *   top: 0, // Specifies the number of pixels along the Y axis to scroll the window or element
   *   behavior: "auto" // Specifies whether the scrolling should animate smoothly (smooth), or happen instantly in a single jump (auto, the default value).
   * });
   * @param options - allows specific coordinates to be defined.
   * @returns - promise that resolves once the content is scrolled to.
   */
  async scrollContentTo(options) {
    var _a;
    await ((_a = this.containerEl) == null ? void 0 : _a.scrollContentTo(options));
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  // --------------------------------------------------------------------------
  renderBackButton() {
    const { el } = this;
    const rtl = getElementDir(el) === "rtl";
    const { showBackButton, backButtonClick, messages } = this;
    const label = messages.back;
    const icon = rtl ? ICONS.backRight : ICONS.backLeft;
    return showBackButton ? h("calcite-action", {
      "aria-label": label,
      class: CSS.backButton,
      icon,
      key: "flow-back-button",
      onClick: backButtonClick,
      scale: "s",
      slot: "header-actions-start",
      text: label,
      title: label,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.setBackRef
    }) : null;
  }
  render() {
    const { collapsed, collapseDirection, collapsible, closable, closed, description, disabled, heading, headingLevel, loading, menuOpen, messages, overlayPositioning } = this;
    return h(Host, null, h(InteractiveContainer, { disabled }, h("calcite-panel", {
      closable,
      closed,
      collapseDirection,
      collapsed,
      collapsible,
      description,
      disabled,
      heading,
      headingLevel,
      loading,
      menuOpen,
      messageOverrides: messages,
      onCalcitePanelClose: this.handlePanelClose,
      onCalcitePanelScroll: this.handlePanelScroll,
      onCalcitePanelToggle: this.handlePanelToggle,
      overlayPositioning,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.setContainerRef
    }, this.renderBackButton(), h("slot", { name: SLOTS2.actionBar, slot: SLOTS.actionBar }), h("slot", { name: SLOTS2.headerActionsStart, slot: SLOTS.headerActionsStart }), h("slot", { name: SLOTS2.headerActionsEnd, slot: SLOTS.headerActionsEnd }), h("slot", { name: SLOTS2.headerContent, slot: SLOTS.headerContent }), h("slot", { name: SLOTS2.headerMenuActions, slot: SLOTS.headerMenuActions }), h("slot", { name: SLOTS2.fab, slot: SLOTS.fab }), h("slot", { name: SLOTS2.footerActions, slot: SLOTS.footerActions }), h("slot", { name: SLOTS2.footer, slot: SLOTS.footer }), h("slot", null))));
  }
  static get assetsDirs() {
    return ["assets"];
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "messageOverrides": ["onMessagesChange"],
      "effectiveLocale": ["effectiveLocaleChange"]
    };
  }
};
FlowItem.style = flowItemCss;
export {
  FlowItem as calcite_flow_item
};
/*! Bundled license information:

@esri/calcite-components/dist/esm/calcite-flow-item.entry.js:
  (*!
   * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
   * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
   * v2.6.0
   *)
*/
//# sourceMappingURL=calcite-flow-item.entry-V7G6BIKA.js.map
