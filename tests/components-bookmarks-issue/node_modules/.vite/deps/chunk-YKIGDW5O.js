import {
  e
} from "./chunk-OCF7OAES.js";

// node_modules/@arcgis/core/core/Cyclical.js
var n = class {
  constructor(t, n2) {
    this.min = t, this.max = n2, this.range = n2 - t;
  }
  normalize(t, n2 = 0, o2 = false) {
    return i(this.range, this.min, this.max, t, n2, o2);
  }
  clamp(n2, i2 = 0) {
    return e(n2 - i2, this.min, this.max) + i2;
  }
  monotonic(t, n2, i2) {
    return t < n2 ? n2 : n2 + o(this.range, t - n2, i2);
  }
  minimalMonotonic(t, n2, o2) {
    return i(this.range, t, t + this.range, n2, o2);
  }
  center(t, n2, i2) {
    return n2 = this.monotonic(t, n2, i2), this.normalize((t + n2) / 2, i2);
  }
  diff(t, n2, i2) {
    return this.monotonic(t, n2, i2) - t;
  }
  shortestSignedDiff(t, n2) {
    t = this.normalize(t);
    const i2 = (n2 = this.normalize(n2)) - t, o2 = n2 < t ? this.minimalMonotonic(t, n2) - t : n2 - this.minimalMonotonic(n2, t);
    return Math.abs(i2) < Math.abs(o2) ? i2 : o2;
  }
  contains(t, n2, i2) {
    return n2 = this.minimalMonotonic(t, n2), (i2 = this.minimalMonotonic(t, i2)) > t && i2 < n2;
  }
};
function i(t, n2, i2, r2, s2 = 0, a2 = false) {
  return (r2 -= s2) < n2 ? r2 += o(t, n2 - r2) : r2 > i2 && (r2 -= o(t, r2 - i2)), a2 && r2 === i2 && (r2 = n2), r2 + s2;
}
function o(t, n2, i2 = 0) {
  return Math.ceil((n2 - i2) / t) * t + i2;
}
var r = new n(0, 2 * Math.PI);
var s = new n(-Math.PI, Math.PI);
var a = new n(0, 360);

export {
  n,
  r,
  s,
  a
};
//# sourceMappingURL=chunk-YKIGDW5O.js.map
