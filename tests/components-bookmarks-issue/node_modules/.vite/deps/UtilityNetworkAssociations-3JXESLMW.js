import {
  e as e3
} from "./chunk-5HWGOVOV.js";
import {
  h as h3
} from "./chunk-NAWP2ZCR.js";
import "./chunk-M5DWZKDJ.js";
import {
  h as h2
} from "./chunk-I4SHZ6P5.js";
import {
  f as f2
} from "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-6PMFOUWZ.js";
import "./chunk-3KPZ3BQR.js";
import "./chunk-5JYVZQZR.js";
import "./chunk-UUG4W2PI.js";
import "./chunk-G7FOE26O.js";
import "./chunk-USOPZ2Q6.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import {
  d as d2,
  u as u2
} from "./chunk-C24MEKSO.js";
import {
  u
} from "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import {
  B,
  b,
  k
} from "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import {
  D,
  e2,
  r
} from "./chunk-RGCWZ2KZ.js";
import {
  n as n2
} from "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import "./chunk-2SDMYJDE.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import {
  h
} from "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import {
  w
} from "./chunk-IZKCZQUY.js";
import {
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import {
  n as n3
} from "./chunk-BPRXWDBO.js";
import {
  f
} from "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  d
} from "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n,
  s
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/widgets/UtilityNetworkAssociations/VisibleElementsSettingsPane.js
var s2 = class extends S {
  constructor(o) {
    super(o), this.arrowsToggle = false, this.capSelect = false, this.colorPicker = true, this.stylePicker = true, this.widthInput = true;
  }
};
e([y({ type: Boolean, nonNullable: true })], s2.prototype, "arrowsToggle", void 0), e([y({ type: Boolean, nonNullable: true })], s2.prototype, "capSelect", void 0), e([y({ type: Boolean, nonNullable: true })], s2.prototype, "colorPicker", void 0), e([y({ type: Boolean, nonNullable: true })], s2.prototype, "stylePicker", void 0), e([y({ type: Boolean, nonNullable: true })], s2.prototype, "widthInput", void 0), s2 = e([a("esri.widgets.UtilityNetworkAssociations.VisibleElementsSettingsPane")], s2);
var l = s2;

// node_modules/@arcgis/core/widgets/UtilityNetworkAssociations/UtilityNetworkAssociationsLineSymbolPicker.js
var m = "esri-un-associations";
var u3 = { divControlsSymbolPicker: `${m}__div-controls-symbol-picker`, dropdown: `${m}__dropdown`, dropdownItemLineCap: `${m}__dropdown-item-line-cap`, dropdownItemLinePattern: `${m}__dropdown-item-line-pattern`, dropdownSelectedItemLineCap: `${m}__dropdown-selected-item-line-cap`, dropdownSelectedItemLinePattern: `${m}__dropdown-selected-item-line-pattern`, dropdownTrigger: `${m}__dropdown-trigger`, labelAndToggle: `${m}__label-and-toggle` };
var w2 = class extends D {
  constructor(e4, t) {
    super(e4, t), this._lineCapTypes = ["butt", "round", "square"], this._lineStyleTypes = ["solid", "dash", "dash-dot", "dot", "long-dash", "long-dash-dot", "long-dash-dot-dot", "short-dash", "short-dash-dot", "short-dash-dot-dot", "short-dot"], this.lineSymbol = new d2(), this.messages = null, this.showArrows = false, this.visibleElements = new l(), this._afterComponentCreate = this._afterComponentCreate.bind(this);
  }
  render() {
    const { messages: { input: { lineCap: e4, lineColor: t, lineStyle: o, lineWidth: s3, showArrows: r3 } }, visibleElements: i } = this, n4 = this.lineSymbol;
    return n2("div", { class: u3.divControlsSymbolPicker }, i.arrowsToggle ? this._renderToggle(r3, this.showArrows, n4, "marker") : void 0, i.capSelect ? this._renderLineStylePicker(e4, this._lineCapTypes, n4, "cap") : void 0, i.colorPicker && n4.color ? this._renderColorPicker(t, n4.color.toHex(), n4, "color") : void 0, i.stylePicker ? this._renderLineStylePicker(o, this._lineStyleTypes, n4, "style") : void 0, i.widthInput ? this._renderNumberInput(s3, n4.width.toString(), n4, "width") : void 0);
  }
  loadDependencies() {
    return r({ dropdown: () => import("./calcite-dropdown-4KYIVSVI.js"), "dropdown-group": () => import("./calcite-dropdown-group-P5PY6RML.js"), "dropdown-item": () => import("./calcite-dropdown-item-J3TR6MXT.js"), input: () => import("./calcite-input-CHG5BNQ7.js"), "input-number": () => import("./calcite-input-number-IGQXKZWP.js"), label: () => import("./calcite-label-W4VTHQAF.js"), switch: () => import("./calcite-switch-RMLANBR4.js") });
  }
  _afterComponentCreate(e4) {
    "value" in e4 && null != e4.value && "setNumberValue" in e4 && e4.setNumberValue({ committing: false, value: e4.value, origin: "direct" });
  }
  _renderColorPicker(e4, t, s3, r3) {
    return n2("calcite-label", { scale: "s" }, e4, n2("calcite-input", { scale: "s", type: "color", value: t, onCalciteInputInput: (e5) => {
      const t2 = e5.target;
      s3.set(r3, new u(t2.value));
    } }));
  }
  _renderLineStylePicker(e4, o, s3, r3) {
    const i = "style" === r3, n4 = "esri/widgets/UtilityNetworkAssociations/assets/img";
    function l2(e5, o2) {
      return n2("calcite-dropdown-item", { label: e5, selected: s3[o2] === e5 }, n2("div", { class: i ? u3.dropdownItemLinePattern : u3.dropdownItemLineCap, style: `background-image:url(${n3(`${n4}/line-${i ? "patterns" : "caps"}/${e5}.png`)})` }));
    }
    return n2("calcite-label", { scale: "s" }, e4, n2("calcite-dropdown", { class: u3.dropdown, onCalciteDropdownSelect: (e5) => {
      const t = e5.target;
      s3.set(r3, t.selectedItems[0].label);
    } }, n2("div", { class: u3.dropdownTrigger, role: "button", slot: "trigger" }, n2("div", { class: i ? u3.dropdownSelectedItemLinePattern : u3.dropdownSelectedItemLineCap, style: `background-image:url(${n3(`${n4}/line-${i ? "patterns" : "caps"}/${s3[r3]}.png`)})` })), n2("calcite-dropdown-group", null, o.map((e5) => l2(e5, r3)))));
  }
  _renderNumberInput(e4, t, o, s3) {
    return n2("calcite-label", { scale: "s" }, e4, n2("calcite-input-number", { afterCreate: this._afterComponentCreate, max: 10, min: 1, scale: "s", step: 1, type: "number", value: t, onCalciteInputNumberChange: (e5) => {
      const t2 = e5.target;
      o.set(s3, t2.value);
    } }));
  }
  _renderToggle(e4, t, o, s3) {
    return n2("div", { class: u3.labelAndToggle }, n2("calcite-label", { scale: "s" }, e4), n2("calcite-switch", { bind: this, checked: t, onCalciteSwitchChange: (e5) => {
      e5.target.checked ? o.set(s3, new u2({ style: "arrow" })) : o.set(s3, null);
    } }));
  }
};
e([y()], w2.prototype, "lineSymbol", void 0), e([y(), e2("esri/widgets/UtilityNetworkAssociations/t9n/UtilityNetworkAssociations")], w2.prototype, "messages", void 0), e([y()], w2.prototype, "showArrows", void 0), e([y({ type: l, nonNullable: true })], w2.prototype, "visibleElements", void 0), w2 = e([a("esri.widgets.UtilityNetworkAssociations.UtilityNetworkAssociationsLineSymbolPicker")], w2);
var g = w2;

// node_modules/@arcgis/core/widgets/UtilityNetworkAssociations/UtilityNetworkAssociationsViewModel.js
var b2 = class extends S {
  constructor(t) {
    super(t), this._internalGraphicsLayerConnectivity = this._createInternalGraphicsLayer("Connectivity Associations (Internal)"), this._internalGraphicsLayerStructuralAttachment = this._createInternalGraphicsLayer("Structural Attachment Associations (Internal)"), this._initialValidationsFinished = false, this._updatingHandles = new h2(), this.autoRefreshAssociations = false, this.connectivityAssociationsLineSymbol = new d2({ style: "short-dash", width: 2, color: [190, 159, 159, 1] }), this.executionError = "", this.loadErrors = new V(), this.maxAllowableAssociations = 250, this.showAssociationsEnabled = false, this.showArrowsConnectivity = false, this.showArrowsStructuralAttachment = false, this.structuralAttachmentAssociationsLineSymbol = new d2({ style: "short-dash", width: 2, color: [159, 190, 159, 1] });
  }
  initialize() {
    const t = async () => {
      this.messages || (this.messages = await h("esri/widgets/UtilityNetworkAssociations/t9n/UtilityNetworkAssociations"));
    };
    t().then(() => {
      this.view || (this.view = null), this.utilityNetwork || (this.utilityNetwork = null), this.addHandles([d(() => [this.view, this.utilityNetwork], async () => {
        var _a, _b;
        const { loadErrors: t2, messages: { info: { noUtilityNetwork: i, noView: s3 } } } = this;
        this._initialValidationsFinished = false, t2.removeAll();
        let o = false, n4 = false;
        this.removeAssociations(), "utility" !== ((_a = this.utilityNetwork) == null ? void 0 : _a.type) ? (this.loadErrors.push(i), n.getLogger(this).error(new s("utilityNetworkAssociations:missing-property", i))) : (this.utilityNetwork.loaded || await this.utilityNetwork.load(), o = true), "2d" !== ((_b = this.view) == null ? void 0 : _b.type) ? (this.loadErrors.push(s3), n.getLogger(this).error(new s("utilityNetworkAssociations:missing-property", s3))) : (e3(this.view, this._internalGraphicsLayerConnectivity), e3(this.view, this._internalGraphicsLayerStructuralAttachment), n4 = true), o && n4 && this.showAssociationsEnabled && await this.showAssociations(), this._internalGraphicsLayerConnectivity.visible = this.includeConnectivityAssociations, this._internalGraphicsLayerStructuralAttachment.visible = this.includeStructuralAttachmentAssociations, this._initialValidationsFinished = true;
      }, { initial: true }), d(() => {
        var _a;
        return [(_a = this.view) == null ? void 0 : _a.stationary, this.showAssociationsEnabled, this.maxAllowableAssociations];
      }, async () => {
        var _a;
        ((_a = this.view) == null ? void 0 : _a.stationary) && this.showAssociationsEnabled && (this.includeConnectivityAssociations || this.includeStructuralAttachmentAssociations) && await this.showAssociations();
      }), d(() => [this.showArrowsConnectivity], () => {
        const t2 = this.connectivityAssociationsLineSymbol.clone();
        t2.marker = null, this.showArrowsConnectivity && (t2.marker = new u2({ color: this.connectivityAssociationsLineSymbol.color, placement: "end", style: "arrow" }));
        for (const i of this._internalGraphicsLayerConnectivity.graphics)
          i.symbol = t2;
      }), d(() => [this.showArrowsStructuralAttachment], () => {
        const t2 = this.structuralAttachmentAssociationsLineSymbol.clone();
        t2.marker = null, this.showArrowsStructuralAttachment && (t2.marker = new u2({ color: this.structuralAttachmentAssociationsLineSymbol.color, placement: "end", style: "arrow" }));
        for (const i of this._internalGraphicsLayerStructuralAttachment.graphics)
          i.symbol = t2;
      }), d(() => {
        const { cap: t2, color: i, style: s3, width: o, marker: e4 } = this.connectivityAssociationsLineSymbol;
        return [t2, i, s3, o, e4];
      }, () => {
        const t2 = this.connectivityAssociationsLineSymbol.clone();
        for (const i of this._internalGraphicsLayerConnectivity.graphics)
          i.symbol = t2;
        this.showArrowsConnectivity = false, t2.marker = null, this.connectivityAssociationsLineSymbol.marker && (this.showArrowsConnectivity = true, t2.marker = new u2({ color: this.connectivityAssociationsLineSymbol.color, placement: "end", style: "arrow" }));
      }), d(() => {
        const { cap: t2, color: i, style: s3, width: o, marker: e4 } = this.structuralAttachmentAssociationsLineSymbol;
        return [t2, i, s3, o, e4];
      }, () => {
        const t2 = this.structuralAttachmentAssociationsLineSymbol.clone();
        for (const i of this._internalGraphicsLayerStructuralAttachment.graphics)
          i.symbol = t2;
        this.showArrowsStructuralAttachment = false, t2.marker = null, this.structuralAttachmentAssociationsLineSymbol.marker && (this.showArrowsStructuralAttachment = true, t2.marker = new u2({ color: this.structuralAttachmentAssociationsLineSymbol.color, placement: "end", style: "arrow" }));
      }), f(t)]);
    });
  }
  destroy() {
    this._updatingHandles.destroy(), this.view = null, this._removeInternalGraphicsLayers();
  }
  set includeConnectivityAssociations(t) {
    this._set("includeConnectivityAssociations", t), this._internalGraphicsLayerConnectivity.visible = t;
  }
  set includeStructuralAttachmentAssociations(t) {
    this._set("includeStructuralAttachmentAssociations", t), this._internalGraphicsLayerStructuralAttachment.visible = t;
  }
  get state() {
    return this.loadErrors.length ? "disabled" : this._updatingHandles.updating ? "executing" : "" !== this.executionError ? "warning" : this._initialValidationsFinished ? "ready" : "loading";
  }
  set utilityNetwork(t) {
    this._get("utilityNetwork") !== t && this._set("utilityNetwork", t);
  }
  set view(t) {
    this._get("view") !== t && this._set("view", t);
  }
  removeAssociations() {
    this._internalGraphicsLayerConnectivity.removeAll(), this._internalGraphicsLayerStructuralAttachment.removeAll();
  }
  async showAssociations() {
    const { messages: { info: { maxAllowableAssociationsExceeded: t, noAssociationsFound: s3 } }, utilityNetwork: o } = this, { spatialReference: e4, extent: { xmin: r3, ymin: n4, xmax: a2, ymax: c2 } } = this.view, l2 = o == null ? void 0 : o.spatialReference;
    b() || await k();
    const A2 = B(new x({ x: r3, y: n4, spatialReference: e4 }), l2), d3 = B(new x({ x: a2, y: c2, spatialReference: e4 }), l2), v = new w({ xmin: A2.x, ymin: A2.y, xmax: d3.x, ymax: d3.y, spatialReference: l2 });
    this._set("executionError", ""), this.removeAssociations(), this._updatingHandles.addPromise(o == null ? void 0 : o.synthesizeAssociationGeometries({ returnConnectivityAssociations: this.includeConnectivityAssociations, returnAttachmentAssociations: this.includeStructuralAttachmentAssociations, extent: v, outSpatialReference: l2, maxGeometryCount: this.maxAllowableAssociations }).then((o2) => {
      let e5 = [], r4 = [];
      (o2 == null ? void 0 : o2.maxGeometryCountExceeded) ? this._set("executionError", t) : 0 !== (o2 == null ? void 0 : o2.associations.length) ? o2 && (e5 = o2 == null ? void 0 : o2.associations.filter(({ associationType: t2 }) => "connectivity" === t2).map((t2) => (this.connectivityAssociationsLineSymbol.marker = null, this.showArrowsConnectivity && (this.connectivityAssociationsLineSymbol.marker = new u2({ color: this.connectivityAssociationsLineSymbol.color, placement: "end", style: "arrow" })), new f2({ geometry: t2.geometry.clone(), symbol: this.connectivityAssociationsLineSymbol }))), r4 = o2.associations.filter(({ associationType: t2 }) => "attachment" === t2).map((t2) => (this.structuralAttachmentAssociationsLineSymbol.marker = null, this.showArrowsStructuralAttachment && (this.structuralAttachmentAssociationsLineSymbol.marker = new u2({ color: this.structuralAttachmentAssociationsLineSymbol.color, placement: "end", style: "arrow" })), new f2({ geometry: t2.geometry.clone(), symbol: this.structuralAttachmentAssociationsLineSymbol }))), e5.length > 0 && this._internalGraphicsLayerConnectivity.addMany(e5), r4.length > 0 && this._internalGraphicsLayerStructuralAttachment.addMany(r4)) : this._set("executionError", s3);
    }, ({ message: t2 }) => {
      this._set("executionError", t2);
    }));
  }
  _createInternalGraphicsLayer(t) {
    return new h3({ listMode: "hide", internal: true, title: t });
  }
  _removeInternalGraphicsLayers() {
    var _a;
    this._internalGraphicsLayerConnectivity && this._internalGraphicsLayerStructuralAttachment && ((_a = this.view) == null ? void 0 : _a.map) && (this.view.map.remove(this._internalGraphicsLayerConnectivity), this.view.map.remove(this._internalGraphicsLayerStructuralAttachment));
  }
};
e([y()], b2.prototype, "_initialValidationsFinished", void 0), e([y()], b2.prototype, "autoRefreshAssociations", void 0), e([y({ type: d2, nonNullable: true })], b2.prototype, "connectivityAssociationsLineSymbol", void 0), e([y({ readOnly: true })], b2.prototype, "executionError", void 0), e([y({ type: Boolean, value: true })], b2.prototype, "includeConnectivityAssociations", null), e([y({ type: Boolean, value: true })], b2.prototype, "includeStructuralAttachmentAssociations", null), e([y()], b2.prototype, "loadErrors", void 0), e([y()], b2.prototype, "maxAllowableAssociations", void 0), e([y()], b2.prototype, "messages", void 0), e([y()], b2.prototype, "showAssociationsEnabled", void 0), e([y()], b2.prototype, "showArrowsConnectivity", void 0), e([y()], b2.prototype, "showArrowsStructuralAttachment", void 0), e([y({ readOnly: true })], b2.prototype, "state", null), e([y({ type: d2, nonNullable: true })], b2.prototype, "structuralAttachmentAssociationsLineSymbol", void 0), e([y()], b2.prototype, "utilityNetwork", null), e([y()], b2.prototype, "view", null), b2 = e([a("esri.widgets.UtilityNetworkAssociations.UtilityNetworkAssociationsViewModel")], b2);
var g2 = b2;

// node_modules/@arcgis/core/widgets/UtilityNetworkAssociations/VisibleElements.js
var r2 = class extends S {
  constructor(t) {
    super(t), this.maxAllowableAssociationsSlider = false, this.connectivityAssociationsSettings = null, this.structuralAttachmentAssociationsSettings = null;
  }
};
e([y({ type: Boolean, nonNullable: true })], r2.prototype, "maxAllowableAssociationsSlider", void 0), e([y({ type: l, nonNullable: true })], r2.prototype, "connectivityAssociationsSettings", void 0), e([y({ type: l, nonNullable: true })], r2.prototype, "structuralAttachmentAssociationsSettings", void 0), r2 = e([a("esri.widgets.UtilityNetworkAssociations.VisibleElements")], r2);
var c = r2;

// node_modules/@arcgis/core/widgets/UtilityNetworkAssociations.js
var h4 = "esri-un-associations";
var A = { action: `${h4}__action`, actionRefresh: `${h4}__action-refresh`, blockContent: `${h4}__block-content`, blockSectionSettings: `${h4}__block-section-settings`, divControlsMain: `${h4}__div-controls-main`, label: `${h4}__label`, labelAndSlider: `${h4}__label-and-slider`, labelAndToggle: `${h4}__label-and-toggle`, slider: `${h4}__slider`, statusIconContainer: `${h4}__status-icon-container`, statusIconWarning: `${h4}__status-icon-warning`, switch: `${h4}__switch`, switchContainer: `${h4}__switch-container`, widgetContainer: `${h4}__widget-container` };
var m2 = class extends D {
  constructor(t, s3) {
    super(t, s3), this._autoRefreshAssociations = true, this._associationsOptionsEnabled = false, this._maxAllowableAssociationsSliderMax = 1e3, this._maxAllowableAssociationsSliderMin = 250, this._maxAllowableAssociationsSliderStep = 250, this.messages = null, this.messagesCommon = null, this.viewModel = new g2(), this.visibleElements = new c();
  }
  initialize() {
    this.addHandles([d(() => {
      var _a;
      return [(_a = this.view) == null ? void 0 : _a.stationary, this.showAssociationsEnabled, this.includeConnectivityAssociations, this.includeStructuralAttachmentAssociations, this.maxAllowableAssociations];
    }, () => {
      true === this.autoRefreshAssociations && (true === this.showAssociationsEnabled ? this.viewModel.showAssociations() : this.viewModel.removeAssociations());
    })]);
  }
  get autoRefreshAssociations() {
    return this._autoRefreshAssociations;
  }
  set autoRefreshAssociations(t) {
    this._autoRefreshAssociations = t;
  }
  get connectivityAssociationsLineSymbol() {
    return this.viewModel.connectivityAssociationsLineSymbol;
  }
  set connectivityAssociationsLineSymbol(t) {
    this.viewModel.connectivityAssociationsLineSymbol = t;
  }
  get icon() {
    return "view-associations";
  }
  set icon(t) {
    this._overrideIfSome("icon", t);
  }
  get includeConnectivityAssociations() {
    return this.viewModel.includeConnectivityAssociations;
  }
  set includeConnectivityAssociations(t) {
    this.viewModel.includeConnectivityAssociations = t;
  }
  get includeStructuralAttachmentAssociations() {
    return this.viewModel.includeStructuralAttachmentAssociations;
  }
  set includeStructuralAttachmentAssociations(t) {
    this.viewModel.includeStructuralAttachmentAssociations = t;
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(t) {
    this._overrideIfSome("label", t);
  }
  get maxAllowableAssociations() {
    return this.viewModel.maxAllowableAssociations;
  }
  set maxAllowableAssociations(t) {
    this.viewModel.maxAllowableAssociations = t;
  }
  get maxAllowableAssociationsSliderMax() {
    return this._maxAllowableAssociationsSliderMax;
  }
  set maxAllowableAssociationsSliderMax(t) {
    t <= this.maxAllowableAssociationsSliderMin || (this._maxAllowableAssociationsSliderMax = t);
  }
  get maxAllowableAssociationsSliderMin() {
    return this._maxAllowableAssociationsSliderMin;
  }
  set maxAllowableAssociationsSliderMin(t) {
    t < 0 || t >= this.maxAllowableAssociationsSliderMax || (this._maxAllowableAssociationsSliderMin = t);
  }
  get maxAllowableAssociationsSliderStep() {
    return this._maxAllowableAssociationsSliderStep;
  }
  set maxAllowableAssociationsSliderStep(t) {
    this._maxAllowableAssociationsSliderStep = t;
  }
  get showArrowsConnectivity() {
    return this.viewModel.showArrowsConnectivity;
  }
  set showArrowsConnectivity(t) {
    this.viewModel.showArrowsConnectivity = t;
  }
  get showArrowsStructuralAttachment() {
    return this.viewModel.showArrowsStructuralAttachment;
  }
  set showArrowsStructuralAttachment(t) {
    this.viewModel.showArrowsStructuralAttachment = t;
  }
  get showAssociationsEnabled() {
    return this.viewModel.showAssociationsEnabled;
  }
  set showAssociationsEnabled(t) {
    this.viewModel.showAssociationsEnabled = t;
  }
  get structuralAttachmentAssociationsLineSymbol() {
    return this.viewModel.structuralAttachmentAssociationsLineSymbol;
  }
  set structuralAttachmentAssociationsLineSymbol(t) {
    this.viewModel.structuralAttachmentAssociationsLineSymbol = t;
  }
  get utilityNetwork() {
    return this.viewModel.utilityNetwork;
  }
  set utilityNetwork(t) {
    this.viewModel.utilityNetwork = t;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(t) {
    this.viewModel.view = t;
  }
  render() {
    const { label: t } = this;
    return n2("div", { class: A.widgetContainer }, n2("calcite-block", { class: A.blockContent, collapsible: true, heading: t }, this._renderStatusIcon(), this.autoRefreshAssociations ? this._renderShowAssociationsSwitch() : this._renderRefreshAssociationsAction(), this._renderContent()));
  }
  loadDependencies() {
    return r({ action: () => import("./calcite-action-P2CTRNG2.js"), block: () => import("./calcite-block-GV6ZWM4U.js"), "block-section": () => import("./calcite-block-section-7OPBFZGI.js"), icon: () => import("./calcite-icon-25XWA6H7.js"), label: () => import("./calcite-label-W4VTHQAF.js"), notice: () => import("./calcite-notice-Q2MN4Y4I.js"), panel: () => import("./calcite-panel-MK7QTGYZ.js"), slider: () => import("./calcite-slider-B5VATPUT.js"), switch: () => import("./calcite-switch-RMLANBR4.js"), tooltip: () => import("./calcite-tooltip-TDDUGVK4.js") });
  }
  _connectivityAssociationsSwitchChange(t) {
    this.includeConnectivityAssociations = t.target.checked;
  }
  _getLoadErrorMessagesAsNotices(t, s3) {
    return n2("calcite-notice", { closable: false, key: `error-notice-${s3}`, kind: "warning", open: true, scale: "s" }, n2("div", { slot: "message" }, t));
  }
  _maxAllowableAssociationsSliderChange(t) {
    this.maxAllowableAssociations = Number(t.target.value);
  }
  _refreshAssociations() {
    const { viewModel: t, viewModel: { state: s3 } } = this;
    "ready" !== s3 && "warning" !== s3 || t.showAssociations();
  }
  _renderConnectivityAssociationsSettings() {
    const { messages: { input: { enableConnectivity: t } }, visibleElements: { connectivityAssociationsSettings: s3 } } = this;
    if (s3)
      return n2("calcite-block-section", { class: A.blockSectionSettings, text: t }, n2(g, { id: `${this.id}-symbol-picker-connectivity`, lineSymbol: this.connectivityAssociationsLineSymbol, showArrows: this.showArrowsConnectivity, visibleElements: s3 }));
  }
  _renderConnectivityAssociationsToggle() {
    const { messages: { input: { enableConnectivity: t } } } = this;
    return n2("div", { class: A.labelAndToggle, key: "connectivityAssociationsToggleDiv" }, n2("calcite-label", { class: A.label }, t), n2("calcite-switch", { bind: this, checked: this.includeConnectivityAssociations, disabled: !this._associationsOptionsEnabled && this.autoRefreshAssociations, onCalciteSwitchChange: this._connectivityAssociationsSwitchChange }));
  }
  _renderContent() {
    const { viewModel: { loadErrors: t, state: s3 } } = this;
    return "disabled" === s3 ? n2("div", { class: A.divControlsMain, key: "loadErrorsDiv" }, t.items.map(this._getLoadErrorMessagesAsNotices)) : n2("calcite-panel", { disabled: "loading" === s3 }, n2("div", { class: A.divControlsMain }, this._renderConnectivityAssociationsToggle(), this._renderStructuralAttachmentAssociationsToggle(), this._renderSettingsPane()));
  }
  _renderLoadingAction(t, s3, i) {
    return n2("div", { key: t, slot: "control" }, n2("calcite-action", { id: s3, loading: true, text: i }), n2("calcite-tooltip", { referenceElement: s3 }, n2("span", null, i)));
  }
  _renderMaxAllowableAssociationsSlider() {
    const { messages: { input: { maxAllowableAssociations: t } }, visibleElements: { maxAllowableAssociationsSlider: s3 } } = this;
    if (s3)
      return n2("div", { class: A.labelAndSlider }, n2("calcite-label", { class: A.label }, t), n2("calcite-slider", { bind: this, class: A.slider, labelTicks: true, max: this.maxAllowableAssociationsSliderMax, min: this.maxAllowableAssociationsSliderMin, scale: "s", snap: true, step: this.maxAllowableAssociationsSliderStep, ticks: this.maxAllowableAssociationsSliderStep, value: this.maxAllowableAssociations, onCalciteSliderChange: this._maxAllowableAssociationsSliderChange }));
  }
  _renderRefreshAssociationsAction() {
    const { messages: { input: { refreshAssociations: t } }, messagesCommon: { loading: s3 }, viewModel: { state: i } } = this, e4 = `${this.id}-refresh-action`;
    if ("disabled" !== i)
      return n2("div", { class: A.actionRefresh, slot: "control" }, n2("calcite-action", { bind: this, class: A.action, icon: "refresh-f", id: e4, loading: "loading" === i, onclick: this._refreshAssociations, text: t }), n2("calcite-tooltip", { referenceElement: e4 }, n2("span", null, "loading" === i ? s3 : t)));
  }
  _renderSettingsPane() {
    const { messagesCommon: { settings: t }, visibleElements: { maxAllowableAssociationsSlider: s3, connectivityAssociationsSettings: i, structuralAttachmentAssociationsSettings: e4 } } = this;
    if (s3 || i || e4)
      return n2("calcite-block", { class: A.blockContent, collapsible: true, heading: t }, this._renderMaxAllowableAssociationsSlider(), this._renderConnectivityAssociationsSettings(), this._renderStructuralAttachmentAssociationsSettings());
  }
  _renderShowAssociationsSwitch() {
    const { messages: { input: { enableAssociations: t } }, messagesCommon: { loading: s3 }, viewModel: { state: i } } = this, e4 = `${this.id}-show-associations-switch`;
    if ("disabled" !== i)
      return "loading" === i ? this._renderLoadingAction("loadingActionDiv", `${this.id}-loading-action`, s3) : n2("div", { class: A.switchContainer, key: "switchDiv", slot: "control" }, n2("calcite-switch", { bind: this, checked: this.showAssociationsEnabled, class: A.switch, id: e4, onCalciteSwitchChange: this._showAssociationsSwitchChange }), n2("calcite-tooltip", { referenceElement: e4 }, n2("span", null, t)));
  }
  _renderStatusIcon() {
    const { messagesCommon: { executing: t }, viewModel: { executionError: s3, state: i } } = this;
    switch (i) {
      case "disabled":
        return this._renderWarningIcon("statusDiv", `${this.id}-disabled-icon`, null);
      case "warning":
        return this._renderWarningIcon("statusDiv", `${this.id}-warning-icon`, s3);
      case "executing":
        return this._renderLoadingAction("executingActionDiv", `${this.id}-executing-action`, t);
      default:
        return;
    }
  }
  _renderStructuralAttachmentAssociationsSettings() {
    const { messages: { input: { enableStructuralAttachment: t } }, visibleElements: { structuralAttachmentAssociationsSettings: s3 } } = this;
    if (s3)
      return n2("calcite-block-section", { class: A.blockSectionSettings, text: t }, n2(g, { id: `${this.id}-symbol-picker-structural-attachment`, lineSymbol: this.structuralAttachmentAssociationsLineSymbol, showArrows: this.showArrowsStructuralAttachment, visibleElements: s3 }));
  }
  _renderStructuralAttachmentAssociationsToggle() {
    const { messages: { input: { enableStructuralAttachment: t } } } = this;
    return n2("div", { class: A.labelAndToggle, key: "structuralAttachmentAssociationsToggleDiv" }, n2("calcite-label", { class: A.label }, t), n2("calcite-switch", { bind: this, checked: this.includeStructuralAttachmentAssociations, disabled: !this._associationsOptionsEnabled && this.autoRefreshAssociations, onCalciteSwitchChange: this._structuralAttAssociationsSwitchChange }));
  }
  _showAssociationsSwitchChange(t) {
    const { viewModel: s3 } = this;
    this.showAssociationsEnabled = t.target.checked, this._associationsOptionsEnabled = t.target.checked, this.showAssociationsEnabled || s3.removeAssociations();
  }
  _structuralAttAssociationsSwitchChange(t) {
    this.includeStructuralAttachmentAssociations = t.target.checked;
  }
  _renderWarningIcon(t, s3, i) {
    return i ? n2("div", { class: A.statusIconContainer, key: t, slot: "control" }, n2("calcite-icon", { class: A.statusIconWarning, icon: "exclamation-mark-triangle", id: s3, scale: "s" }), n2("calcite-tooltip", { referenceElement: s3 }, n2("span", null, i))) : n2("div", { class: A.statusIconContainer, key: t, slot: "control" }, n2("calcite-icon", { class: A.statusIconWarning, icon: "exclamation-mark-triangle", id: s3, scale: "s" }));
  }
};
e([y()], m2.prototype, "autoRefreshAssociations", null), e([y()], m2.prototype, "connectivityAssociationsLineSymbol", null), e([y()], m2.prototype, "icon", null), e([y()], m2.prototype, "includeConnectivityAssociations", null), e([y()], m2.prototype, "includeStructuralAttachmentAssociations", null), e([y()], m2.prototype, "label", null), e([y()], m2.prototype, "maxAllowableAssociations", null), e([y()], m2.prototype, "maxAllowableAssociationsSliderMax", null), e([y()], m2.prototype, "maxAllowableAssociationsSliderMin", null), e([y()], m2.prototype, "maxAllowableAssociationsSliderStep", null), e([y(), e2("esri/widgets/UtilityNetworkAssociations/t9n/UtilityNetworkAssociations")], m2.prototype, "messages", void 0), e([y(), e2("esri/t9n/common")], m2.prototype, "messagesCommon", void 0), e([y()], m2.prototype, "showArrowsConnectivity", null), e([y()], m2.prototype, "showArrowsStructuralAttachment", null), e([y()], m2.prototype, "showAssociationsEnabled", null), e([y()], m2.prototype, "structuralAttachmentAssociationsLineSymbol", null), e([y()], m2.prototype, "utilityNetwork", null), e([y()], m2.prototype, "view", null), e([y({ type: g2 })], m2.prototype, "viewModel", void 0), e([y({ type: c, nonNullable: true })], m2.prototype, "visibleElements", void 0), m2 = e([a("esri.widgets.UtilityNetworkAssociations")], m2);
var u4 = m2;
export {
  u4 as default
};
//# sourceMappingURL=UtilityNetworkAssociations-3JXESLMW.js.map
