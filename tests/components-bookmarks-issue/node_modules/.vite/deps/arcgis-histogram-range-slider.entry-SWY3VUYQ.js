import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  newWidgetsHistogramRangeSlider
} from "./chunk-YXW2SI4L.js";
import {
  checkForView
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-histogram-range-slider.entry.js
var histogramRangeSliderCss = "arcgis-histogram-range-slider{}";
var ArcgisHistogramRangeSlider = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.widgetReady = createEvent(this, "widgetReady", 7);
    this._watchHandles = [];
    this.referenceElement = void 0;
    this.average = void 0;
    this.barCreatedFunction = void 0;
    this.bins = void 0;
    this.dataLineCreatedFunction = void 0;
    this.dataLines = void 0;
    this.excludedBarColor = void 0;
    this.includedBarColor = void 0;
    this.labelFormatFunction = void 0;
    this.max = 0;
    this.min = 0;
    this.precision = void 0;
    this.rangeType = void 0;
    this.standardDeviation = void 0;
    this.standardDeviationCount = void 0;
    this.values = void 0;
    this.position = "bottom-left";
    this.expandable = false;
    this.widget = void 0;
  }
  averageWatcher(newValue) {
    if (this.widget) {
      this.widget.average = newValue;
    }
  }
  barCreatedFunctionWatcher(newValue) {
    if (this.widget) {
      this.widget.barCreatedFunction = newValue;
    }
  }
  binsWatcher(newValue) {
    if (this.widget) {
      this.widget.bins = newValue;
    }
  }
  dataLineCreatedFunctionWatcher(newValue) {
    if (this.widget) {
      this.widget.dataLineCreatedFunction = newValue;
    }
  }
  dataLinesWatcher(newValue) {
    if (this.widget) {
      this.widget.dataLines = newValue;
    }
  }
  excludedBarColorWatcher(newValue) {
    if (this.widget) {
      this.widget.excludedBarColor = newValue;
    }
  }
  includedBarColorWatcher(newValue) {
    if (this.widget) {
      this.widget.includedBarColor = newValue;
    }
  }
  labelFormatFunctionWatcher(newValue) {
    if (this.widget) {
      this.widget.labelFormatFunction = newValue;
    }
  }
  maxWatcher(newValue) {
    if (this.widget) {
      this.widget.max = Number(newValue);
    }
  }
  minWatcher(newValue) {
    if (this.widget) {
      this.widget.min = Number(newValue);
    }
  }
  precisionWatcher(newValue) {
    if (this.widget) {
      this.widget.precision = newValue;
    }
  }
  rangeTypeWatcher(newValue) {
    if (this.widget) {
      this.widget.rangeType = newValue;
    }
  }
  standardDeviationWatcher(newValue) {
    if (this.widget) {
      this.widget.standardDeviation = newValue;
    }
  }
  standardDeviationCountWatcher(newValue) {
    if (this.widget) {
      this.widget.standardDeviationCount = newValue;
    }
  }
  valuesWatcher(newValue) {
    if (this.widget) {
      this.widget.values = newValue;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = this._createParams();
    const widget = await newWidgetsHistogramRangeSlider(params);
    this.widget = widget;
    this.widgetReady.emit({ widget: this.widget });
    checkForView(this);
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    if (this.expandable) {
      return h("arcgis-expand", { position: this.position, ref: (el) => this.expandElem = el }, h("div", { ref: (el) => this.childElem = el }));
    }
    return h("div", { ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  _createParams() {
    const params = {
      container: this.childElem,
      min: this.min,
      max: this.max
    };
    if (this.average !== void 0) {
      params.average = this.average;
    }
    if (this.barCreatedFunction) {
      params.barCreatedFunction = this.barCreatedFunction;
    }
    if (this.bins !== void 0) {
      params.bins = this.bins;
    }
    if (this.dataLineCreatedFunction) {
      params.dataLineCreatedFunction = this.dataLineCreatedFunction;
    }
    if (this.dataLines !== void 0) {
      params.dataLines = this.dataLines;
    }
    if (this.excludedBarColor) {
      params.excludedBarColor = this.excludedBarColor;
    }
    if (this.includedBarColor) {
      params.includedBarColor = this.includedBarColor;
    }
    if (this.labelFormatFunction) {
      params.labelFormatFunction = this.labelFormatFunction;
    }
    if (this.precision !== void 0) {
      params.precision = this.precision;
    }
    if (this.rangeType) {
      params.rangeType = this.rangeType;
    }
    if (this.standardDeviation !== void 0) {
      params.standardDeviation = this.standardDeviation;
    }
    if (this.standardDeviationCount !== void 0) {
      params.standardDeviationCount = this.standardDeviationCount;
    }
    if (this.values !== void 0) {
      params.values = this.values;
    }
    return params;
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "average": ["averageWatcher"],
      "barCreatedFunction": ["barCreatedFunctionWatcher"],
      "bins": ["binsWatcher"],
      "dataLineCreatedFunction": ["dataLineCreatedFunctionWatcher"],
      "dataLines": ["dataLinesWatcher"],
      "excludedBarColor": ["excludedBarColorWatcher"],
      "includedBarColor": ["includedBarColorWatcher"],
      "labelFormatFunction": ["labelFormatFunctionWatcher"],
      "max": ["maxWatcher"],
      "min": ["minWatcher"],
      "precision": ["precisionWatcher"],
      "rangeType": ["rangeTypeWatcher"],
      "standardDeviation": ["standardDeviationWatcher"],
      "standardDeviationCount": ["standardDeviationCountWatcher"],
      "values": ["valuesWatcher"]
    };
  }
};
ArcgisHistogramRangeSlider.style = histogramRangeSliderCss;
export {
  ArcgisHistogramRangeSlider as arcgis_histogram_range_slider
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-histogram-range-slider.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-histogram-range-slider.entry-SWY3VUYQ.js.map
