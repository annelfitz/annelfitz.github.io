import {
  a as a2,
  g
} from "./chunk-P257AUOX.js";
import {
  w
} from "./chunk-Z4Y53NDM.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import {
  e as e2,
  s
} from "./chunk-JGDJR5EV.js";

// node_modules/@arcgis/core/views/3d/layers/LayerView3D.js
var n = (n2) => {
  let c = class extends n2 {
    constructor() {
      super(...arguments), this.slicePlaneEnabled = false, this.supportsHeightUnitConversion = false;
    }
    postscript(e3) {
      super.postscript(e3), g(this.layer) && this.addResolvingPromise(this._validateHeightModelInfo());
    }
    async _validateHeightModelInfo() {
      const e3 = new AbortController(), r = e3.signal;
      this.addHandles(e2(() => e3.abort())), await w(() => {
        var _a;
        return (_a = this.view.defaultsFromMap) == null ? void 0 : _a.heightModelInfoReady;
      }, r), s(r);
      const i = a2(this.layer, this.view.heightModelInfo, this.supportsHeightUnitConversion);
      if (i)
        throw i;
    }
    canResume() {
      const e3 = this.layer && "effectiveScaleRange" in this.layer ? this.layer.effectiveScaleRange : null;
      return super.canResume() && (!(e3 == null ? void 0 : e3.minScale) || !e3.maxScale || e3.minScale >= e3.maxScale);
    }
    getSuspendInfo() {
      const e3 = super.getSuspendInfo(), t = this.layer && "effectiveScaleRange" in this.layer ? this.layer.effectiveScaleRange : null;
      return t && t.minScale && t.maxScale && t.minScale < t.maxScale && (e3.outsideScaleRange = true), e3;
    }
  };
  return e([y()], c.prototype, "view", void 0), e([y()], c.prototype, "slicePlaneEnabled", void 0), c = e([a("esri.views.3d.layers.LayerView3D")], c), c;
};

export {
  n
};
//# sourceMappingURL=chunk-SPU25K6A.js.map
