import {
  n2 as n
} from "./chunk-7RBRCL6S.js";

// node_modules/@arcgis/core/geometry/support/buffer/math/common.js
var e = () => n.getLogger("esri.views.3d.support.buffer.math");

// node_modules/@arcgis/core/chunks/vec3.js
function e2(t, e3, f2) {
  r(t.typedBuffer, e3.typedBuffer, f2, t.typedBufferStride, e3.typedBufferStride);
}
function r(t, e3, r2, f2 = 3, n3 = f2) {
  if (t.length / f2 !== Math.ceil(e3.length / n3))
    return t;
  const o2 = t.length / f2, u2 = r2[0], i2 = r2[1], a2 = r2[2], s2 = r2[4], d2 = r2[5], l2 = r2[6], c = r2[8], p = r2[9], h = r2[10], y = r2[12], m = r2[13], B = r2[14];
  let g = 0, M = 0;
  for (let S = 0; S < o2; S++) {
    const r3 = e3[g], o3 = e3[g + 1], S2 = e3[g + 2];
    t[M] = u2 * r3 + s2 * o3 + c * S2 + y, t[M + 1] = i2 * r3 + d2 * o3 + p * S2 + m, t[M + 2] = a2 * r3 + l2 * o3 + h * S2 + B, g += n3, M += f2;
  }
  return t;
}
function f(t, e3, r2) {
  n2(t.typedBuffer, e3.typedBuffer, r2, t.typedBufferStride, e3.typedBufferStride);
}
function n2(e3, r2, f2, n3 = 3, o2 = n3) {
  if (e3.length / n3 !== Math.ceil(r2.length / o2))
    return void e().error("source and destination buffers need to have the same number of elements");
  const u2 = e3.length / n3, i2 = f2[0], a2 = f2[1], s2 = f2[2], d2 = f2[3], l2 = f2[4], c = f2[5], p = f2[6], h = f2[7], y = f2[8];
  let m = 0, B = 0;
  for (let t = 0; t < u2; t++) {
    const t2 = r2[m], f3 = r2[m + 1], u3 = r2[m + 2];
    e3[B] = i2 * t2 + d2 * f3 + p * u3, e3[B + 1] = a2 * t2 + l2 * f3 + h * u3, e3[B + 2] = s2 * t2 + c * f3 + y * u3, m += o2, B += n3;
  }
}
function o(t, e3, r2) {
  u(t.typedBuffer, e3, r2, t.typedBufferStride);
}
function u(t, e3, r2, f2 = 3) {
  const n3 = Math.min(t.length / f2, e3.count), o2 = e3.typedBuffer, u2 = e3.typedBufferStride;
  let i2 = 0, a2 = 0;
  for (let s2 = 0; s2 < n3; s2++)
    t[a2] = r2 * o2[i2], t[a2 + 1] = r2 * o2[i2 + 1], t[a2 + 2] = r2 * o2[i2 + 2], i2 += u2, a2 += f2;
}
function i(t, e3, r2, f2 = 3, n3 = f2) {
  const o2 = t.length / f2;
  if (o2 !== Math.ceil(e3.length / n3))
    return t;
  let u2 = 0, i2 = 0;
  for (let a2 = 0; a2 < o2; a2++)
    t[i2] = e3[u2] + r2[0], t[i2 + 1] = e3[u2 + 1] + r2[1], t[i2 + 2] = e3[u2 + 2] + r2[2], u2 += n3, i2 += f2;
  return t;
}
function a(t, e3) {
  s(t.typedBuffer, e3.typedBuffer, t.typedBufferStride, e3.typedBufferStride);
}
function s(t, e3, r2 = 3, f2 = r2) {
  const n3 = Math.min(t.length / r2, e3.length / f2);
  let o2 = 0, u2 = 0;
  for (let i2 = 0; i2 < n3; i2++) {
    const n4 = e3[o2], i3 = e3[o2 + 1], a2 = e3[o2 + 2], s2 = n4 * n4 + i3 * i3 + a2 * a2;
    if (s2 > 0) {
      const e4 = 1 / Math.sqrt(s2);
      t[u2] = e4 * n4, t[u2 + 1] = e4 * i3, t[u2 + 2] = e4 * a2;
    }
    o2 += f2, u2 += r2;
  }
}
function d(t, e3, r2) {
  const f2 = Math.min(t.count, e3.count), n3 = t.typedBuffer, o2 = t.typedBufferStride, u2 = e3.typedBuffer, i2 = e3.typedBufferStride;
  let a2 = 0, s2 = 0;
  for (let d2 = 0; d2 < f2; d2++)
    n3[s2] = u2[a2] >> r2, n3[s2 + 1] = u2[a2 + 1] >> r2, n3[s2 + 2] = u2[a2 + 2] >> r2, a2 += i2, s2 += o2;
}
var l = Object.freeze(Object.defineProperty({ __proto__: null, normalize: s, normalizeView: a, scale: u, scaleView: o, shiftRight: d, transformMat3: n2, transformMat3View: f, transformMat4: r, transformMat4View: e2, translate: i }, Symbol.toStringTag, { value: "Module" }));

export {
  e,
  e2,
  r,
  f,
  n2 as n,
  o,
  u,
  i,
  a,
  s
};
//# sourceMappingURL=chunk-LA365FE7.js.map
