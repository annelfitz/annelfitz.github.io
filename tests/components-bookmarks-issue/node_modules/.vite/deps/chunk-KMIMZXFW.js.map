{
  "version": 3,
  "sources": ["../../@arcgis/map-components/dist/esm/index-2198b48c.js"],
  "sourcesContent": ["/*!\n * All material copyright Esri, All Rights Reserved, unless otherwise specified.\n * See https://js.arcgis.com/4.30/esri/copyright.txt for details.\n * v4.30.0-next.13\n */\nconst NAMESPACE = 'arcgis-map-components';\nconst BUILD = /* arcgis-map-components */ { allRenderFn: true, appendChildSlotFix: false, asyncLoading: true, asyncQueue: false, attachStyles: true, cloneNodeFix: false, cmpDidLoad: true, cmpDidRender: true, cmpDidUnload: false, cmpDidUpdate: false, cmpShouldUpdate: false, cmpWillLoad: true, cmpWillRender: false, cmpWillUpdate: false, connectedCallback: false, constructableCSS: true, cssAnnotations: true, devTools: false, disconnectedCallback: true, element: false, event: true, experimentalSlotFixes: false, formAssociated: false, hasRenderFn: true, hostListener: false, hostListenerTarget: false, hostListenerTargetBody: false, hostListenerTargetDocument: false, hostListenerTargetParent: false, hostListenerTargetWindow: false, hotModuleReplacement: false, hydrateClientSide: false, hydrateServerSide: false, hydratedAttribute: true, hydratedClass: false, initializeNextTick: false, invisiblePrehydration: true, isDebug: false, isDev: false, isTesting: false, lazyLoad: true, lifecycle: true, lifecycleDOMEvents: false, member: true, method: true, mode: false, observeAttribute: true, profile: false, prop: true, propBoolean: true, propMutable: true, propNumber: true, propString: true, reflect: true, scoped: false, scopedSlotTextContentFix: false, scriptDataOpts: false, shadowDelegatesFocus: false, shadowDom: true, slot: true, slotChildNodesFix: false, slotRelocation: true, state: true, style: true, svg: false, taskQueue: true, transformTagName: false, updatable: true, vdomAttribute: true, vdomClass: true, vdomFunctional: false, vdomKey: false, vdomListener: true, vdomPropOrAttr: true, vdomRef: true, vdomRender: true, vdomStyle: false, vdomText: true, vdomXlink: false, watchCallback: true };\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/snabbdom/snabbdom/blob/master/LICENSE\n *\n * Modified for Stencil's renderer and slot projection\n */\nlet scopeId;\nlet contentRef;\nlet hostTagName;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet queuePending = false;\nconst getAssetPath = (path) => {\n    const assetUrl = new URL(path, plt.$resourcesUrl$);\n    return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\nconst createTime = (fnName, tagName = '') => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst HYDRATED_CSS = '{visibility:hidden}[hydrated]{visibility:inherit}';\n/**\n * Constant for styles to be globally applied to `slot-fb` elements for pseudo-slot behavior.\n *\n * Two cascading rules must be used instead of a `:not()` selector due to Stencil browser\n * support as of Stencil v4.\n */\nconst SLOT_FB_CSS = 'slot-fb{display:contents}slot-fb[hidden]{display:none}';\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\nconst isDef = (v) => v != null;\n/**\n * Check whether a value is a 'complex type', defined here as an object or a\n * function.\n *\n * @param o the value to check\n * @returns whether it's a complex type or not\n */\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Helper method for querying a `meta` tag that contains a nonce value\n * out of a DOM's head.\n *\n * @param doc The DOM containing the `head` to query against\n * @returns The content of the meta tag representing the nonce value, or `undefined` if no tag\n * exists or the tag has no content.\n */\nfunction queryNonceMetaTagContent(doc) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = doc.head) === null || _a === void 0 ? void 0 : _a.querySelector('meta[name=\"csp-nonce\"]')) === null || _b === void 0 ? void 0 : _b.getAttribute('content')) !== null && _c !== void 0 ? _c : undefined;\n}\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let slotName = null;\n    let simple = false;\n    let lastSimple = false;\n    const vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        if (vnodeData.name) {\n            slotName = vnodeData.name;\n        }\n        // normalize class / className attributes\n        {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    {\n        vnode.$name$ = slotName;\n    }\n    return vnode;\n};\n/**\n * A utility function for creating a virtual DOM node from a tag and some\n * possible text content.\n *\n * @param tag the tag for this element\n * @param text possible text content for the node\n * @returns a newly-minted virtual DOM node\n */\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    {\n        vnode.$attrs$ = null;\n    }\n    {\n        vnode.$name$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\n/**\n * Check whether a given node is a Host node or not\n *\n * @param node the virtual DOM node to check\n * @returns whether it's a Host node or not\n */\nconst isHost = (node) => node && node.$tag$ === Host;\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (propType & 4 /* MEMBER_FLAGS.Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\n        }\n        if (propType & 2 /* MEMBER_FLAGS.Number */) {\n            // force it to be a number\n            return parseFloat(propValue);\n        }\n        if (propType & 1 /* MEMBER_FLAGS.String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getElement = (ref) => (getHostRef(ref).$hostElement$ );\nconst createEvent = (ref, name, flags) => {\n    const elm = getElement(ref);\n    return {\n        emit: (detail) => {\n            return emitEvent(elm, name, {\n                bubbles: !!(flags & 4 /* EVENT_FLAGS.Bubbles */),\n                composed: !!(flags & 2 /* EVENT_FLAGS.Composed */),\n                cancelable: !!(flags & 1 /* EVENT_FLAGS.Cancellable */),\n                detail,\n            });\n        },\n    };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst rootAppliedStyles = /*@__PURE__*/ new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructableStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        if (typeof style === 'string') {\n            style = cssText;\n        }\n        else {\n            style.replaceSync(cssText);\n        }\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode) => {\n    var _a;\n    const scopeId = getScopeId(cmpMeta);\n    const style = styles.get(scopeId);\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* NODE_TYPE.DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                {\n                    styleElm = doc.createElement('style');\n                    styleElm.innerHTML = style;\n                    // Apply CSP nonce to the style tag if it exists\n                    const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n                    if (nonce != null) {\n                        styleElm.setAttribute('nonce', nonce);\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                // Add styles for `slot-fb` elements if we're using slots outside the Shadow DOM\n                if (cmpMeta.$flags$ & 4 /* CMP_FLAGS.hasSlotRelocation */) {\n                    styleElm.innerHTML += SLOT_FB_CSS;\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta);\n    if (flags & 10 /* CMP_FLAGS.needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (cmp.$tagName$);\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n/**\n * When running a VDom render set properties present on a VDom node onto the\n * corresponding HTML element.\n *\n * Note that this function has special functionality for the `class`,\n * `style`, `key`, and `ref` attributes, as well as event handlers (like\n * `onClick`, etc). All others are just passed through as-is.\n *\n * @param elm the HTMLElement onto which attributes should be set\n * @param memberName the name of the attribute to set\n * @param oldValue the old value for the attribute\n * @param newValue the new value for the attribute\n * @param isSvg whether we're in an svg context or not\n * @param flags bitflags for Vdom variables\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else if (memberName === 'ref') {\n            // minifier will clean this up\n            if (newValue) {\n                newValue(elm);\n            }\n        }\n        else if ((!isProp ) &&\n            memberName[0] === 'o' &&\n            memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue || newValue) {\n                // Need to account for \"capture\" events.\n                // If the event name ends with \"Capture\", we'll update the name to remove\n                // the \"Capture\" suffix and make sure the event listener is setup to handle the capture event.\n                const capture = memberName.endsWith(CAPTURE_EVENT_SUFFIX);\n                // Make sure we only replace the last instance of \"Capture\"\n                memberName = memberName.replace(CAPTURE_EVENT_REGEX, '');\n                if (oldValue) {\n                    plt.rel(elm, memberName, oldValue, capture);\n                }\n                if (newValue) {\n                    plt.ael(elm, memberName, newValue, capture);\n                }\n            }\n        }\n        else {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        const n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) {\n                    /**\n                     * in case someone tries to set a read-only property, e.g. \"namespaceURI\", we just ignore it\n                     */\n                }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* VNODE_FLAGS.isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\n/**\n * Parsed a string of classnames into an array\n * @param value className string, e.g. \"foo bar baz\"\n * @returns list of classes, e.g. [\"foo\", \"bar\", \"baz\"]\n */\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst CAPTURE_EVENT_SUFFIX = 'Capture';\nconst CAPTURE_EVENT_REGEX = new RegExp(CAPTURE_EVENT_SUFFIX + '$');\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* NODE_TYPE.DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\n/**\n * Create a DOM Node corresponding to one of the children of a given VNode.\n *\n * @param oldParentVNode the parent VNode from the previous render\n * @param newParentVNode the parent VNode from the current render\n * @param childIndex the index of the VNode, in the _new_ parent node's\n * children, for which we will create a new DOM node\n * @param parentElm the parent DOM node which our new node will be a child of\n * @returns the newly created node\n */\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    var _a;\n    // tslint:disable-next-line: prefer-const\n    const newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    let oldVNode;\n    if (!useNativeShadowDom) {\n        // remember for later we need to check to relocate nodes\n        checkSlotRelocate = true;\n        if (newVNode.$tag$ === 'slot') {\n            if (scopeId) {\n                // scoped css needs to add its scoped id to the parent element\n                parentElm.classList.add(scopeId + '-s');\n            }\n            newVNode.$flags$ |= newVNode.$children$\n                ? // slot element has fallback content\n                    2 /* VNODE_FLAGS.isSlotFallback */\n                : // slot element does not have fallback content\n                    1 /* VNODE_FLAGS.isSlotReference */;\n        }\n    }\n    if (newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else if (newVNode.$flags$ & 1 /* VNODE_FLAGS.isSlotReference */) {\n        // create a slot reference node\n        elm = newVNode.$elm$ =\n            doc.createTextNode('');\n    }\n    else {\n        // create element\n        elm = newVNode.$elm$ = (doc.createElement(newVNode.$flags$ & 2 /* VNODE_FLAGS.isSlotFallback */\n                ? 'slot-fb'\n                : newVNode.$tag$));\n        // add css classes, attrs, props, listeners, etc.\n        {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i, elm);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n    }\n    // This needs to always happen so we can hide nodes that are projected\n    // to another component but don't end up in a slot\n    elm['s-hn'] = hostTagName;\n    {\n        if (newVNode.$flags$ & (2 /* VNODE_FLAGS.isSlotFallback */ | 1 /* VNODE_FLAGS.isSlotReference */)) {\n            // remember the content reference comment\n            elm['s-sr'] = true;\n            // Persist the name of the slot that this slot was going to be projected into.\n            elm['s-fs'] = (_a = newVNode.$attrs$) === null || _a === void 0 ? void 0 : _a.slot;\n            // remember the content reference comment\n            elm['s-cr'] = contentRef;\n            // remember the slot name, or empty string for default slot\n            elm['s-sn'] = newVNode.$name$ || '';\n            // check if we've got an old vnode for this slot\n            oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n            if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n                {\n                    // we've got an old slot vnode and the wrapper is being replaced\n                    // so let's move the old slot content back to its original location\n                    putBackInOriginalLocation(oldParentVNode.$elm$, false);\n                }\n            }\n        }\n    }\n    return elm;\n};\nconst putBackInOriginalLocation = (parentElm, recursive) => {\n    var _a;\n    plt.$flags$ |= 1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n    const oldSlotChildNodes = parentElm.childNodes;\n    for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n        const childNode = oldSlotChildNodes[i];\n        if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n            // and relocate it back to it's original location\n            parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));\n            // remove the old original location comment entirely\n            // later on the patch function will know what to do\n            // and move this to the correct spot if need be\n            childNode['s-ol'].remove();\n            childNode['s-ol'] = undefined;\n            // Reset so we can correctly move the node around again.\n            childNode['s-sh'] = undefined;\n            // When putting an element node back in its original location,\n            // we need to reset the `slot` attribute back to the value it originally had\n            // so we can correctly relocate it again in the future\n            if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n                childNode.setAttribute('slot', (_a = childNode['s-sn']) !== null && _a !== void 0 ? _a : '');\n            }\n            checkSlotRelocate = true;\n        }\n        if (recursive) {\n            putBackInOriginalLocation(childNode, recursive);\n        }\n    }\n    plt.$flags$ &= ~1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n};\n/**\n * Create DOM nodes corresponding to a list of {@link d.Vnode} objects and\n * add them to the DOM in the appropriate place.\n *\n * @param parentElm the DOM node which should be used as a parent for the new\n * DOM nodes\n * @param before a child of the `parentElm` which the new children should be\n * inserted before (optional)\n * @param parentVNode the parent virtual DOM node\n * @param vnodes the new child virtual DOM nodes to produce DOM nodes for\n * @param startIdx the index in the child virtual DOM nodes at which to start\n * creating DOM nodes (inclusive)\n * @param endIdx the index in the child virtual DOM nodes at which to stop\n * creating DOM nodes (inclusive)\n */\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = ((parentElm['s-cr'] && parentElm['s-cr'].parentNode) || parentElm);\n    let childNode;\n    if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx, parentElm);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, referenceNode(before) );\n            }\n        }\n    }\n};\n/**\n * Remove the DOM elements corresponding to a list of {@link d.VNode} objects.\n * This can be used to, for instance, clean up after a list of children which\n * should no longer be shown.\n *\n * This function also handles some of Stencil's slot relocation logic.\n *\n * @param vnodes a list of virtual DOM nodes to remove\n * @param startIdx the index at which to start removing nodes (inclusive)\n * @param endIdx the index at which to stop removing nodes (inclusive)\n */\nconst removeVnodes = (vnodes, startIdx, endIdx) => {\n    for (let index = startIdx; index <= endIdx; ++index) {\n        const vnode = vnodes[index];\n        if (vnode) {\n            const elm = vnode.$elm$;\n            nullifyVNodeRefs(vnode);\n            if (elm) {\n                {\n                    // we're removing this element\n                    // so it's possible we need to show slot fallback content now\n                    checkSlotFallbackVisibility = true;\n                    if (elm['s-ol']) {\n                        // remove the original location comment\n                        elm['s-ol'].remove();\n                    }\n                    else {\n                        // it's possible that child nodes of the node\n                        // that's being removed are slot nodes\n                        putBackInOriginalLocation(elm, true);\n                    }\n                }\n                // remove the vnode's element from the dom\n                elm.remove();\n            }\n        }\n    }\n};\n/**\n * Reconcile the children of a new VNode with the children of an old VNode by\n * traversing the two collections of children, identifying nodes that are\n * conserved or changed, calling out to `patch` to make any necessary\n * updates to the DOM, and rearranging DOM nodes as needed.\n *\n * The algorithm for reconciling children works by analyzing two 'windows' onto\n * the two arrays of children (`oldCh` and `newCh`). We keep track of the\n * 'windows' by storing start and end indices and references to the\n * corresponding array entries. Initially the two 'windows' are basically equal\n * to the entire array, but we progressively narrow the windows until there are\n * no children left to update by doing the following:\n *\n * 1. Skip any `null` entries at the beginning or end of the two arrays, so\n *    that if we have an initial array like the following we'll end up dealing\n *    only with a window bounded by the highlighted elements:\n *\n *    [null, null, VNode1 , ... , VNode2, null, null]\n *                 ^^^^^^         ^^^^^^\n *\n * 2. Check to see if the elements at the head and tail positions are equal\n *    across the windows. This will basically detect elements which haven't\n *    been added, removed, or changed position, i.e. if you had the following\n *    VNode elements (represented as HTML):\n *\n *    oldVNode: `<div><p><span>HEY</span></p></div>`\n *    newVNode: `<div><p><span>THERE</span></p></div>`\n *\n *    Then when comparing the children of the `<div>` tag we check the equality\n *    of the VNodes corresponding to the `<p>` tags and, since they are the\n *    same tag in the same position, we'd be able to avoid completely\n *    re-rendering the subtree under them with a new DOM element and would just\n *    call out to `patch` to handle reconciling their children and so on.\n *\n * 3. Check, for both windows, to see if the element at the beginning of the\n *    window corresponds to the element at the end of the other window. This is\n *    a heuristic which will let us identify _some_ situations in which\n *    elements have changed position, for instance it _should_ detect that the\n *    children nodes themselves have not changed but merely moved in the\n *    following example:\n *\n *    oldVNode: `<div><element-one /><element-two /></div>`\n *    newVNode: `<div><element-two /><element-one /></div>`\n *\n *    If we find cases like this then we also need to move the concrete DOM\n *    elements corresponding to the moved children to write the re-order to the\n *    DOM.\n *\n * 4. Finally, if VNodes have the `key` attribute set on them we check for any\n *    nodes in the old children which have the same key as the first element in\n *    our window on the new children. If we find such a node we handle calling\n *    out to `patch`, moving relevant DOM nodes, and so on, in accordance with\n *    what we find.\n *\n * Finally, once we've narrowed our 'windows' to the point that either of them\n * collapse (i.e. they have length 0) we then handle any remaining VNode\n * insertion or deletion that needs to happen to get a DOM state that correctly\n * reflects the new child VNodes. If, for instance, after our window on the old\n * children has collapsed we still have more nodes on the new children that\n * we haven't dealt with yet then we need to add them, or if the new children\n * collapse but we still have unhandled _old_ children then we need to make\n * sure the corresponding DOM nodes are removed.\n *\n * @param parentElm the node into which the parent VNode is rendered\n * @param oldCh the old children of the parent node\n * @param newVNode the new VNode which will replace the parent\n * @param newCh the new children of the parent node\n * @param isInitialRender whether or not this is the first render of the vdom\n */\nconst updateChildren = (parentElm, oldCh, newVNode, newCh, isInitialRender = false) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // VNode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode, isInitialRender)) {\n            // if the start nodes are the same then we should patch the new VNode\n            // onto the old one, and increment our `newStartIdx` and `oldStartIdx`\n            // indices to reflect that. We don't need to move any DOM Nodes around\n            // since things are matched up in order.\n            patch(oldStartVnode, newStartVnode, isInitialRender);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode, isInitialRender)) {\n            // likewise, if the end nodes are the same we patch new onto old and\n            // decrement our end indices, and also likewise in this case we don't\n            // need to move any DOM Nodes.\n            patch(oldEndVnode, newEndVnode, isInitialRender);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode, isInitialRender)) {\n            // case: \"Vnode moved right\"\n            //\n            // We've found that the last node in our window on the new children is\n            // the same VNode as the _first_ node in our window on the old children\n            // we're dealing with now. Visually, this is the layout of these two\n            // nodes:\n            //\n            // newCh: [..., newStartVnode , ... , newEndVnode , ...]\n            //                                    ^^^^^^^^^^^\n            // oldCh: [..., oldStartVnode , ... , oldEndVnode , ...]\n            //              ^^^^^^^^^^^^^\n            //\n            // In this situation we need to patch `newEndVnode` onto `oldStartVnode`\n            // and move the DOM element for `oldStartVnode`.\n            if ((oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n            }\n            patch(oldStartVnode, newEndVnode, isInitialRender);\n            // We need to move the element for `oldStartVnode` into a position which\n            // will be appropriate for `newEndVnode`. For this we can use\n            // `.insertBefore` and `oldEndVnode.$elm$.nextSibling`. If there is a\n            // sibling for `oldEndVnode.$elm$` then we want to move the DOM node for\n            // `oldStartVnode` between `oldEndVnode` and it's sibling, like so:\n            //\n            // <old-start-node />\n            // <some-intervening-node />\n            // <old-end-node />\n            // <!-- ->              <-- `oldStartVnode.$elm$` should be inserted here\n            // <next-sibling />\n            //\n            // If instead `oldEndVnode.$elm$` has no sibling then we just want to put\n            // the node for `oldStartVnode` at the end of the children of\n            // `parentElm`. Luckily, `Node.nextSibling` will return `null` if there\n            // aren't any siblings, and passing `null` to `Node.insertBefore` will\n            // append it to the children of the parent element.\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode, isInitialRender)) {\n            // case: \"Vnode moved left\"\n            //\n            // We've found that the first node in our window on the new children is\n            // the same VNode as the _last_ node in our window on the old children.\n            // Visually, this is the layout of these two nodes:\n            //\n            // newCh: [..., newStartVnode , ... , newEndVnode , ...]\n            //              ^^^^^^^^^^^^^\n            // oldCh: [..., oldStartVnode , ... , oldEndVnode , ...]\n            //                                    ^^^^^^^^^^^\n            //\n            // In this situation we need to patch `newStartVnode` onto `oldEndVnode`\n            // (which will handle updating any changed attributes, reconciling their\n            // children etc) but we also need to move the DOM node to which\n            // `oldEndVnode` corresponds.\n            if ((oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n            }\n            patch(oldEndVnode, newStartVnode, isInitialRender);\n            // We've already checked above if `oldStartVnode` and `newStartVnode` are\n            // the same node, so since we're here we know that they are not. Thus we\n            // can move the element for `oldEndVnode` _before_ the element for\n            // `oldStartVnode`, leaving `oldStartVnode` to be reconciled in the\n            // future.\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            {\n                // We either didn't find an element in the old children that matches\n                // the key of the first new child OR the build is not using `key`\n                // attributes at all. In either case we need to create a new element\n                // for the new node.\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                // if we created a new node then handle inserting it to the DOM\n                {\n                    parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        // we have some more new nodes to add which don't match up with old nodes\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (newStartIdx > newEndIdx) {\n        // there are nodes in the `oldCh` array which no longer correspond to nodes\n        // in the new array, so lets remove them (which entails cleaning up the\n        // relevant DOM nodes)\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\n/**\n * Compare two VNodes to determine if they are the same\n *\n * **NB**: This function is an equality _heuristic_ based on the available\n * information set on the two VNodes and can be misleading under certain\n * circumstances. In particular, if the two nodes do not have `key` attrs\n * (available under `$key$` on VNodes) then the function falls back on merely\n * checking that they have the same tag.\n *\n * So, in other words, if `key` attrs are not set on VNodes which may be\n * changing order within a `children` array or something along those lines then\n * we could obtain a false negative and then have to do needless re-rendering\n * (i.e. we'd say two VNodes aren't equal when in fact they should be).\n *\n * @param leftVNode the first VNode to check\n * @param rightVNode the second VNode to check\n * @param isInitialRender whether or not this is the first render of the vdom\n * @returns whether they're equal or not\n */\nconst isSameVnode = (leftVNode, rightVNode, isInitialRender = false) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (leftVNode.$tag$ === rightVNode.$tag$) {\n        if (leftVNode.$tag$ === 'slot') {\n            return leftVNode.$name$ === rightVNode.$name$;\n        }\n        return true;\n    }\n    return false;\n};\nconst referenceNode = (node) => {\n    // this node was relocated to a new location in the dom\n    // because of some other component's slot\n    // but we still have an html comment in place of where\n    // it's original location was according to it's original vdom\n    return (node && node['s-ol']) || node;\n};\nconst parentReferenceNode = (node) => (node['s-ol'] ? node['s-ol'] : node).parentNode;\n/**\n * Handle reconciling an outdated VNode with a new one which corresponds to\n * it. This function handles flushing updates to the DOM and reconciling the\n * children of the two nodes (if any).\n *\n * @param oldVNode an old VNode whose DOM element and children we want to update\n * @param newVNode a new VNode representing an updated version of the old one\n * @param isInitialRender whether or not this is the first render of the vdom\n */\nconst patch = (oldVNode, newVNode, isInitialRender = false) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    let defaultHolder;\n    if (text === null) {\n        {\n            if (tag === 'slot')\n                ;\n            else {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            // so we need to call `updateChildren` to reconcile them\n            updateChildren(elm, oldChildren, newVNode, newChildren, isInitialRender);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n    }\n    else if ((defaultHolder = elm['s-cr'])) {\n        // this element has slotted content\n        defaultHolder.parentNode.textContent = text;\n    }\n    else if (oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\n/**\n * Adjust the `.hidden` property as-needed on any nodes in a DOM subtree which\n * are slot fallbacks nodes.\n *\n * A slot fallback node should be visible by default. Then, it should be\n * conditionally hidden if:\n *\n * - it has a sibling with a `slot` property set to its slot name or if\n * - it is a default fallback slot node, in which case we hide if it has any\n *   content\n *\n * @param elm the element of interest\n */\nconst updateFallbackSlotVisibility = (elm) => {\n    const childNodes = elm.childNodes;\n    for (const childNode of childNodes) {\n        if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n            if (childNode['s-sr']) {\n                // this is a slot fallback node\n                // get the slot name for this slot reference node\n                const slotName = childNode['s-sn'];\n                // by default always show a fallback slot node\n                // then hide it if there are other slots in the light dom\n                childNode.hidden = false;\n                // we need to check all of its sibling nodes in order to see if\n                // `childNode` should be hidden\n                for (const siblingNode of childNodes) {\n                    // Don't check the node against itself\n                    if (siblingNode !== childNode) {\n                        if (siblingNode['s-hn'] !== childNode['s-hn'] || slotName !== '') {\n                            // this sibling node is from a different component OR is a named\n                            // fallback slot node\n                            if (siblingNode.nodeType === 1 /* NODE_TYPE.ElementNode */ &&\n                                (slotName === siblingNode.getAttribute('slot') || slotName === siblingNode['s-sn'])) {\n                                childNode.hidden = true;\n                                break;\n                            }\n                        }\n                        else {\n                            // this is a default fallback slot node\n                            // any element or text node (with content)\n                            // should hide the default fallback slot node\n                            if (siblingNode.nodeType === 1 /* NODE_TYPE.ElementNode */ ||\n                                (siblingNode.nodeType === 3 /* NODE_TYPE.TextNode */ && siblingNode.textContent.trim() !== '')) {\n                                childNode.hidden = true;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            // keep drilling down\n            updateFallbackSlotVisibility(childNode);\n        }\n    }\n};\n/**\n * Component-global information about nodes which are either currently being\n * relocated or will be shortly.\n */\nconst relocateNodes = [];\n/**\n * Mark the contents of a slot for relocation via adding references to them to\n * the {@link relocateNodes} data structure. The actual work of relocating them\n * will then be handled in {@link renderVdom}.\n *\n * @param elm a render node whose child nodes need to be relocated\n */\nconst markSlotContentForRelocation = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let node;\n    let hostContentNodes;\n    let j;\n    for (const childNode of elm.childNodes) {\n        // we need to find child nodes which are slot references so we can then try\n        // to match them up with nodes that need to be relocated\n        if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n            // first get the content reference comment node ('s-cr'), then we get\n            // its parent, which is where all the host content is now\n            hostContentNodes = node.parentNode.childNodes;\n            const slotName = childNode['s-sn'];\n            // iterate through all the nodes under the location where the host was\n            // originally rendered\n            for (j = hostContentNodes.length - 1; j >= 0; j--) {\n                node = hostContentNodes[j];\n                // check that the node is not a content reference node or a node\n                // reference and then check that the host name does not match that of\n                // childNode.\n                // In addition, check that the slot either has not already been relocated, or\n                // that its current location's host is not childNode's host. This is essentially\n                // a check so that we don't try to relocate (and then hide) a node that is already\n                // where it should be.\n                if (!node['s-cn'] &&\n                    !node['s-nr'] &&\n                    node['s-hn'] !== childNode['s-hn'] &&\n                    (!BUILD.experimentalSlotFixes  )) {\n                    // if `node` is located in the slot that `childNode` refers to (via the\n                    // `'s-sn'` property) then we need to relocate it from it's current spot\n                    // (under the host element parent) to the right slot location\n                    if (isNodeLocatedInSlot(node, slotName)) {\n                        // it's possible we've already decided to relocate this node\n                        let relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                        // made some changes to slots\n                        // let's make sure we also double check\n                        // fallbacks are correctly hidden or shown\n                        checkSlotFallbackVisibility = true;\n                        // ensure that the slot-name attr is correct\n                        node['s-sn'] = node['s-sn'] || slotName;\n                        if (relocateNodeData) {\n                            relocateNodeData.$nodeToRelocate$['s-sh'] = childNode['s-hn'];\n                            // we marked this node for relocation previously but didn't find\n                            // out the slot reference node to which it needs to be relocated\n                            // so write it down now!\n                            relocateNodeData.$slotRefNode$ = childNode;\n                        }\n                        else {\n                            node['s-sh'] = childNode['s-hn'];\n                            // add to our list of nodes to relocate\n                            relocateNodes.push({\n                                $slotRefNode$: childNode,\n                                $nodeToRelocate$: node,\n                            });\n                        }\n                        if (node['s-sr']) {\n                            relocateNodes.map((relocateNode) => {\n                                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                                    relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                                    if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                                        relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                    else if (!relocateNodes.some((r) => r.$nodeToRelocate$ === node)) {\n                        // the node is not found within the slot (`childNode`) that we're\n                        // currently looking at, so we stick it into `relocateNodes` to\n                        // handle later. If we never find a home for this element then\n                        // we'll need to hide it\n                        relocateNodes.push({\n                            $nodeToRelocate$: node,\n                        });\n                    }\n                }\n            }\n        }\n        // if we're dealing with any type of element (capable of itself being a\n        // slot reference or containing one) then we recur\n        if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n            markSlotContentForRelocation(childNode);\n        }\n    }\n};\n/**\n * Check whether a node is located in a given named slot.\n *\n * @param nodeToRelocate the node of interest\n * @param slotName the slot name to check\n * @returns whether the node is located in the slot or not\n */\nconst isNodeLocatedInSlot = (nodeToRelocate, slotName) => {\n    if (nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        if (nodeToRelocate.getAttribute('slot') === null && slotName === '') {\n            // if the node doesn't have a slot attribute, and the slot we're checking\n            // is not a named slot, then we assume the node should be within the slot\n            return true;\n        }\n        if (nodeToRelocate.getAttribute('slot') === slotName) {\n            return true;\n        }\n        return false;\n    }\n    if (nodeToRelocate['s-sn'] === slotName) {\n        return true;\n    }\n    return slotName === '';\n};\n/**\n * 'Nullify' any VDom `ref` callbacks on a VDom node or its children by calling\n * them with `null`. This signals that the DOM element corresponding to the VDom\n * node has been removed from the DOM.\n *\n * @param vNode a virtual DOM node\n */\nconst nullifyVNodeRefs = (vNode) => {\n    {\n        vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n        vNode.$children$ && vNode.$children$.map(nullifyVNodeRefs);\n    }\n};\n/**\n * The main entry point for Stencil's virtual DOM-based rendering engine\n *\n * Given a {@link d.HostRef} container and some virtual DOM nodes, this\n * function will handle creating a virtual DOM tree with a single root, patching\n * the current virtual DOM tree onto an old one (if any), dealing with slot\n * relocation, and reflecting attributes.\n *\n * @param hostRef data needed to root and render the virtual DOM tree, such as\n * the DOM node into which it should be rendered.\n * @param renderFnResults the virtual DOM nodes to be rendered\n * @param isInitialLoad whether or not this is the first call after page load\n */\nconst renderVdom = (hostRef, renderFnResults, isInitialLoad = false) => {\n    var _a, _b, _c, _d;\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    // if `renderFnResults` is a Host node then we can use it directly. If not,\n    // we need to call `h` again to wrap the children of our component in a\n    // 'dummy' Host node (well, an empty vnode) since `renderVdom` assumes\n    // implicitly that the top-level vdom node is 1) an only child and 2)\n    // contains attrs that need to be set on the host element.\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    if (cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));\n    }\n    // On the first render and *only* on the first render we want to check for\n    // any attributes set on the host element which are also set on the vdom\n    // node. If we find them, we override the value on the VDom node attrs with\n    // the value from the host element, which allows developers building apps\n    // with Stencil components to override e.g. the `role` attribute on a\n    // component even if it's already set on the `Host`.\n    if (isInitialLoad && rootVnode.$attrs$) {\n        for (const key of Object.keys(rootVnode.$attrs$)) {\n            // We have a special implementation in `setAccessor` for `style` and\n            // `class` which reconciles values coming from the VDom with values\n            // already present on the DOM element, so we don't want to override those\n            // attributes on the VDom tree with values from the host element if they\n            // are present.\n            //\n            // Likewise, `ref` and `key` are special internal values for the Stencil\n            // runtime and we don't want to override those either.\n            if (hostElm.hasAttribute(key) && !['key', 'ref', 'style', 'class'].includes(key)) {\n                rootVnode.$attrs$[key] = hostElm[key];\n            }\n        }\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* VNODE_FLAGS.isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (hostElm.shadowRoot || hostElm );\n    {\n        scopeId = hostElm['s-sc'];\n    }\n    {\n        contentRef = hostElm['s-cr'];\n        useNativeShadowDom = (cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) !== 0;\n        // always reset\n        checkSlotFallbackVisibility = false;\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode, isInitialLoad);\n    {\n        // while we're moving nodes around existing nodes, temporarily disable\n        // the disconnectCallback from working\n        plt.$flags$ |= 1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n        if (checkSlotRelocate) {\n            markSlotContentForRelocation(rootVnode.$elm$);\n            for (const relocateData of relocateNodes) {\n                const nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (!nodeToRelocate['s-ol']) {\n                    // add a reference node marking this node's original location\n                    // keep a reference to this node for later lookups\n                    const orgLocationNode = doc.createTextNode('');\n                    orgLocationNode['s-nr'] = nodeToRelocate;\n                    nodeToRelocate.parentNode.insertBefore((nodeToRelocate['s-ol'] = orgLocationNode), nodeToRelocate);\n                }\n            }\n            for (const relocateData of relocateNodes) {\n                const nodeToRelocate = relocateData.$nodeToRelocate$;\n                const slotRefNode = relocateData.$slotRefNode$;\n                if (slotRefNode) {\n                    const parentNodeRef = slotRefNode.parentNode;\n                    // When determining where to insert content, the most simple case would be\n                    // to relocate the node immediately following the slot reference node. We do this\n                    // by getting a reference to the node immediately following the slot reference node\n                    // since we will use `insertBefore` to manipulate the DOM.\n                    //\n                    // If there is no node immediately following the slot reference node, then we will just\n                    // end up appending the node as the last child of the parent.\n                    let insertBeforeNode = slotRefNode.nextSibling;\n                    // If the node we're currently planning on inserting the new node before is an element,\n                    // we need to do some additional checks to make sure we're inserting the node in the correct order.\n                    // The use case here would be that we have multiple nodes being relocated to the same slot. So, we want\n                    // to make sure they get inserted into their new how in the same order they were declared in their original location.\n                    //\n                    // TODO(STENCIL-914): Remove `experimentalSlotFixes` check\n                    {\n                        let orgLocationNode = (_a = nodeToRelocate['s-ol']) === null || _a === void 0 ? void 0 : _a.previousSibling;\n                        while (orgLocationNode) {\n                            let refNode = (_b = orgLocationNode['s-nr']) !== null && _b !== void 0 ? _b : null;\n                            if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n                                refNode = refNode.nextSibling;\n                                if (!refNode || !refNode['s-nr']) {\n                                    insertBeforeNode = refNode;\n                                    break;\n                                }\n                            }\n                            orgLocationNode = orgLocationNode.previousSibling;\n                        }\n                    }\n                    if ((!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode) ||\n                        nodeToRelocate.nextSibling !== insertBeforeNode) {\n                        // we've checked that it's worth while to relocate\n                        // since that the node to relocate\n                        // has a different next sibling or parent relocated\n                        if (nodeToRelocate !== insertBeforeNode) {\n                            if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                                // probably a component in the index.html that doesn't have its hostname set\n                                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n                            }\n                            // Add it back to the dom but in its new home\n                            // If we get to this point and `insertBeforeNode` is `null`, that means\n                            // we're just going to append the node as the last child of the parent. Passing\n                            // `null` as the second arg here will trigger that behavior.\n                            parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n                            // Reset the `hidden` value back to what it was defined as originally\n                            // This solves a problem where a `slot` is dynamically rendered and `hidden` may have\n                            // been set on content originally, but now it has a slot to go to so it should have\n                            // the value it was defined as having in the DOM, not what we overrode it to.\n                            if (nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n                                nodeToRelocate.hidden = (_c = nodeToRelocate['s-ih']) !== null && _c !== void 0 ? _c : false;\n                            }\n                        }\n                    }\n                }\n                else {\n                    // this node doesn't have a slot home to go to, so let's hide it\n                    if (nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n                        // Store the initial value of `hidden` so we can reset it later when\n                        // moving nodes around.\n                        if (isInitialLoad) {\n                            nodeToRelocate['s-ih'] = (_d = nodeToRelocate.hidden) !== null && _d !== void 0 ? _d : false;\n                        }\n                        nodeToRelocate.hidden = true;\n                    }\n                }\n            }\n        }\n        if (checkSlotFallbackVisibility) {\n            updateFallbackSlotVisibility(rootVnode.$elm$);\n        }\n        // done moving nodes around\n        // allow the disconnect callback to work again\n        plt.$flags$ &= ~1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n        // always reset\n        relocateNodes.length = 0;\n    }\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    {\n        hostRef.$flags$ |= 16 /* HOST_FLAGS.isQueuedForUpdate */;\n    }\n    if (hostRef.$flags$ & 4 /* HOST_FLAGS.isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* HOST_FLAGS.needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return writeTask(dispatch) ;\n};\n/**\n * Dispatch initial-render and update lifecycle hooks, enqueuing calls to\n * component lifecycle methods like `componentWillLoad` as well as\n * {@link updateComponent}, which will kick off the virtual DOM re-render.\n *\n * @param hostRef a reference to a host DOM node\n * @param isInitialLoad whether we're on the initial load or not\n * @returns an empty Promise which is used to enqueue a series of operations for\n * the component\n */\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = hostRef.$lazyInstance$ ;\n    // We're going to use this variable together with `enqueue` to implement a\n    // little promise-based queue. We start out with it `undefined`. When we add\n    // the first function to the queue we'll set this variable to be that\n    // function's return value. When we attempt to add subsequent values to the\n    // queue we'll check that value and, if it was a `Promise`, we'll then chain\n    // the new function off of that `Promise` using `.then()`. This will give our\n    // queue two nice properties:\n    //\n    // 1. If all functions added to the queue are synchronous they'll be called\n    //    synchronously right away.\n    // 2. If all functions added to the queue are asynchronous they'll all be\n    //    called in order after `dispatchHooks` exits.\n    let maybePromise;\n    if (isInitialLoad) {\n        {\n            // If `componentWillLoad` returns a `Promise` then we want to wait on\n            // whatever's going on in that `Promise` before we launch into\n            // rendering the component, doing other lifecycle stuff, etc. So\n            // in that case we assign the returned promise to the variable we\n            // declared above to hold a possible 'queueing' Promise\n            maybePromise = safeCall(instance, 'componentWillLoad');\n        }\n    }\n    endSchedule();\n    return enqueue(maybePromise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\n/**\n * This function uses a Promise to implement a simple first-in, first-out queue\n * of functions to be called.\n *\n * The queue is ordered on the basis of the first argument. If it's\n * `undefined`, then nothing is on the queue yet, so the provided function can\n * be called synchronously (although note that this function may return a\n * `Promise`). The idea is that then the return value of that enqueueing\n * operation is kept around, so that if it was a `Promise` then subsequent\n * functions can be enqueued by calling this function again with that `Promise`\n * as the first argument.\n *\n * @param maybePromise either a `Promise` which should resolve before the next function is called or an 'empty' sentinel\n * @param fn a function to enqueue\n * @returns either a `Promise` or the return value of the provided function\n */\nconst enqueue = (maybePromise, fn) => isPromisey(maybePromise) ? maybePromise.then(fn) : fn();\n/**\n * Check that a value is a `Promise`. To check, we first see if the value is an\n * instance of the `Promise` global. In a few circumstances, in particular if\n * the global has been overwritten, this is could be misleading, so we also do\n * a little 'duck typing' check to see if the `.then` property of the value is\n * defined and a function.\n *\n * @param maybePromise it might be a promise!\n * @returns whether it is or not\n */\nconst isPromisey = (maybePromise) => maybePromise instanceof Promise ||\n    (maybePromise && maybePromise.then && typeof maybePromise.then === 'function');\n/**\n * Update a component given reference to its host elements and so on.\n *\n * @param hostRef an object containing references to the element's host node,\n * VDom nodes, and other metadata\n * @param instance a reference to the underlying host element where it will be\n * rendered\n * @param isInitialLoad whether or not this function is being called as part of\n * the first render cycle\n */\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    var _a;\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n        callRender(hostRef, instance, elm, isInitialLoad);\n    }\n    if (rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    {\n        const childrenPromises = (_a = elm['s-p']) !== null && _a !== void 0 ? _a : [];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* HOST_FLAGS.isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n};\n/**\n * Handle making the call to the VDom renderer with the proper context given\n * various build variables\n *\n * @param hostRef an object containing references to the element's host node,\n * VDom nodes, and other metadata\n * @param instance a reference to the underlying host element where it will be\n * rendered\n * @param elm the Host element for the component\n * @param isInitialLoad whether or not this function is being called as part of\n * @returns an empty promise\n */\nconst callRender = (hostRef, instance, elm, isInitialLoad) => {\n    try {\n        /**\n         * minification optimization: `allRenderFn` is `true` if all components have a `render`\n         * method, so we can call the method immediately. If not, check before calling it.\n         */\n        instance = instance.render() ;\n        {\n            hostRef.$flags$ &= ~16 /* HOST_FLAGS.isQueuedForUpdate */;\n        }\n        {\n            hostRef.$flags$ |= 2 /* HOST_FLAGS.hasRendered */;\n        }\n        {\n            {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                {\n                    renderVdom(hostRef, instance, isInitialLoad);\n                }\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    return null;\n};\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const instance = hostRef.$lazyInstance$ ;\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    {\n        safeCall(instance, 'componentDidRender');\n    }\n    if (!(hostRef.$flags$ & 64 /* HOST_FLAGS.hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* HOST_FLAGS.hasLoadedComponent */;\n        {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        {\n            safeCall(instance, 'componentDidLoad');\n        }\n        endPostUpdate();\n        {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad();\n            }\n        }\n    }\n    else {\n        endPostUpdate();\n    }\n    {\n        hostRef.$onInstanceResolve$(elm);\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* HOST_FLAGS.needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* HOST_FLAGS.isWaitingForChildren */ | 512 /* HOST_FLAGS.needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    {\n        addHydratedFlag(doc.documentElement);\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n};\n/**\n * Allows to safely call a method, e.g. `componentDidLoad`, on an instance,\n * e.g. custom element node. If a build figures out that e.g. no component\n * has a `componentDidLoad` method, the instance method gets removed from the\n * output bundle and this function returns `undefined`.\n * @param instance any object that may or may not contain methods\n * @param method method name\n * @param arg single arbitrary argument\n * @returns result of method call if it exists, otherwise `undefined`\n */\nconst safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nconst addHydratedFlag = (elm) => elm.setAttribute('hydrated', '')\n        ;\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const elm = hostRef.$hostElement$ ;\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = hostRef.$lazyInstance$ ;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n    const didValueChange = newVal !== oldVal && !areBothNaN;\n    if ((!(flags & 8 /* HOST_FLAGS.isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (instance) {\n            // get an array of method names of watch functions to call\n            if (cmpMeta.$watchers$ && flags & 128 /* HOST_FLAGS.isWatchReady */) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map((watchMethodName) => {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e, elm);\n                        }\n                    });\n                }\n            }\n            if ((flags & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\n/**\n * Attach a series of runtime constructs to a compiled Stencil component\n * constructor, including getters and setters for the `@Prop` and `@State`\n * decorators, callbacks for when attributes change, and so on.\n *\n * @param Cstr the constructor for a component that we need to process\n * @param cmpMeta metadata collected previously about the component\n * @param flags a number used to store a series of bit flags\n * @returns a reference to the same constructor passed in (but now mutated)\n */\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    var _a;\n    const prototype = Cstr.prototype;\n    if (cmpMeta.$members$) {\n        if (Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        members.map(([memberName, [memberFlags]]) => {\n            if ((memberFlags & 31 /* MEMBER_FLAGS.Prop */ ||\n                    ((flags & 2 /* PROXY_FLAGS.proxyState */) && memberFlags & 32 /* MEMBER_FLAGS.State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n            else if (flags & 1 /* PROXY_FLAGS.isElementConstructor */ &&\n                memberFlags & 64 /* MEMBER_FLAGS.Method */) {\n                // proxyComponent - method\n                Object.defineProperty(prototype, memberName, {\n                    value(...args) {\n                        var _a;\n                        const ref = getHostRef(this);\n                        return (_a = ref === null || ref === void 0 ? void 0 : ref.$onInstancePromise$) === null || _a === void 0 ? void 0 : _a.then(() => { var _a; return (_a = ref.$lazyInstance$) === null || _a === void 0 ? void 0 : _a[memberName](...args); });\n                    },\n                });\n            }\n        });\n        if ((flags & 1 /* PROXY_FLAGS.isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, oldValue, newValue) {\n                plt.jmp(() => {\n                    var _a;\n                    const propName = attrNameToPropName.get(attrName);\n                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n                    //  in the case where an attribute was set inline.\n                    //  ```html\n                    //    <my-component some-attribute=\"some-value\"></my-component>\n                    //  ```\n                    //\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then\n                    //  programmatically changes it before it has been upgraded as shown below:\n                    //\n                    //  ```html\n                    //    <!-- this component has _not_ been upgraded yet -->\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n                    //    <script>\n                    //      // grab non-upgraded component\n                    //      el = document.querySelector(\"#test\");\n                    //      el.someAttribute = \"another-value\";\n                    //      // upgrade component\n                    //      customElements.define('my-component', MyComponent);\n                    //    </script>\n                    //  ```\n                    //  In this case if we do not un-shadow here and use the value of the shadowing property, attributeChangedCallback\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\n                    //  the connectedCallback attempts to un-shadow it will use \"some-value\" as the initial value rather than \"another-value\"\n                    //\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/un-shadowed\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\n                    //\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n                    //\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n                    //  properties here given that this goes against best practices outlined here\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n                    if (this.hasOwnProperty(propName)) {\n                        newValue = this[propName];\n                        delete this[propName];\n                    }\n                    else if (prototype.hasOwnProperty(propName) &&\n                        typeof this[propName] === 'number' &&\n                        this[propName] == newValue) {\n                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n                        return;\n                    }\n                    else if (propName == null) {\n                        // At this point we should know this is not a \"member\", so we can treat it like watching an attribute\n                        // on a vanilla web component\n                        const hostRef = getHostRef(this);\n                        const flags = hostRef === null || hostRef === void 0 ? void 0 : hostRef.$flags$;\n                        // We only want to trigger the callback(s) if:\n                        // 1. The instance is ready\n                        // 2. The watchers are ready\n                        // 3. The value has changed\n                        if (flags &&\n                            !(flags & 8 /* HOST_FLAGS.isConstructingInstance */) &&\n                            flags & 128 /* HOST_FLAGS.isWatchReady */ &&\n                            newValue !== oldValue) {\n                            const instance = hostRef.$lazyInstance$ ;\n                            const entry = (_a = cmpMeta.$watchers$) === null || _a === void 0 ? void 0 : _a[attrName];\n                            entry === null || entry === void 0 ? void 0 : entry.forEach((callbackName) => {\n                                if (instance[callbackName] != null) {\n                                    instance[callbackName].call(instance, newValue, oldValue, attrName);\n                                }\n                            });\n                        }\n                        return;\n                    }\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // Create an array of attributes to observe\n            // This list in comprised of all strings used within a `@Watch()` decorator\n            // on a component as well as any Stencil-specific \"members\" (`@Prop()`s and `@State()`s).\n            // As such, there is no way to guarantee type-safety here that a user hasn't entered\n            // an invalid attribute.\n            Cstr.observedAttributes = Array.from(new Set([\n                ...Object.keys((_a = cmpMeta.$watchers$) !== null && _a !== void 0 ? _a : {}),\n                ...members\n                    .filter(([_, m]) => m[0] & 15 /* MEMBER_FLAGS.HasAttribute */)\n                    .map(([propName, m]) => {\n                    var _a;\n                    const attrName = m[1] || propName;\n                    attrNameToPropName.set(attrName, propName);\n                    if (m[0] & 512 /* MEMBER_FLAGS.ReflectAttr */) {\n                        (_a = cmpMeta.$attrsToReflect$) === null || _a === void 0 ? void 0 : _a.push([propName, attrName]);\n                    }\n                    return attrName;\n                }),\n            ]));\n        }\n    }\n    return Cstr;\n};\n/**\n * Initialize a Stencil component given a reference to its host element, its\n * runtime bookkeeping data structure, runtime metadata about the component,\n * and (optionally) an HMR version ID.\n *\n * @param elm a host element\n * @param hostRef the element's runtime bookkeeping object\n * @param cmpMeta runtime metadata for the Stencil component\n * @param hmrVersionId an (optional) HMR version ID\n */\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId) => {\n    let Cstr;\n    // initializeComponent\n    if ((hostRef.$flags$ & 32 /* HOST_FLAGS.hasInitializedComponent */) === 0) {\n        // Let the runtime know that the component has been initialized\n        hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\n        {\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime();\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if (!Cstr.isProxied) {\n                // we've never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* PROXY_FLAGS.proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            {\n                hostRef.$flags$ |= 8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            {\n                hostRef.$flags$ &= ~8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            {\n                hostRef.$flags$ |= 128 /* HOST_FLAGS.isWatchReady */;\n            }\n            endNewInstance();\n        }\n        if (Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            const scopeId = getScopeId(cmpMeta);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst fireConnectedCallback = (instance) => {\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (!(hostRef.$flags$ & 1 /* HOST_FLAGS.hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* HOST_FLAGS.hasConnected */;\n            {\n                // initUpdate\n                // if the slot polyfill is required we'll need to put some nodes\n                // in here to act as original content anchors as we move nodes around\n                // host element has been connected to the DOM\n                if ((// TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\n                        cmpMeta.$flags$ & (4 /* CMP_FLAGS.hasSlotRelocation */ | 8 /* CMP_FLAGS.needsShadowDomShim */))) {\n                    setContentReference(elm);\n                }\n            }\n            {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if (ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* MEMBER_FLAGS.Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        else {\n            // fire off connectedCallback() on component instance\n            if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$lazyInstance$) ;\n            else if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$onReadyPromise$) {\n                hostRef.$onReadyPromise$.then(() => fireConnectedCallback());\n            }\n        }\n        endConnected();\n    }\n};\nconst setContentReference = (elm) => {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    const contentRefElm = (elm['s-cr'] = doc.createComment(''));\n    contentRefElm['s-cn'] = true;\n    elm.insertBefore(contentRefElm, elm.firstChild);\n};\nconst disconnectInstance = (instance) => {\n    {\n        safeCall(instance, 'disconnectedCallback');\n    }\n};\nconst disconnectedCallback = async (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$lazyInstance$) {\n            disconnectInstance(hostRef.$lazyInstance$);\n        }\n        else if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$onReadyPromise$) {\n            hostRef.$onReadyPromise$.then(() => disconnectInstance(hostRef.$lazyInstance$));\n        }\n    }\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    var _a;\n    const endBootstrap = createTime();\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const dataStyles = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    let appLoadFallback;\n    let isBootstrapping = true;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    let hasSlotRelocation = false;\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            var _a;\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            // Check if we are using slots outside the shadow DOM in this component.\n            // We'll use this information later to add styles for `slot-fb` elements\n            if (cmpMeta.$flags$ & 4 /* CMP_FLAGS.hasSlotRelocation */) {\n                hasSlotRelocation = true;\n            }\n            {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            {\n                cmpMeta.$attrsToReflect$ = [];\n            }\n            {\n                cmpMeta.$watchers$ = (_a = compactMeta[4]) !== null && _a !== void 0 ? _a : {};\n            }\n            const tagName = cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        {\n                            {\n                                self.attachShadow({ mode: 'open' });\n                            }\n                        }\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */));\n            }\n        });\n    });\n    // Add styles for `slot-fb` elements if any of our components are using slots outside the Shadow DOM\n    if (hasSlotRelocation) {\n        dataStyles.innerHTML += SLOT_FB_CSS;\n    }\n    // Add hydration styles\n    {\n        dataStyles.innerHTML += cmpTags + HYDRATED_CSS;\n    }\n    // If we have styles, add them to the DOM\n    if (dataStyles.innerHTML.length) {\n        dataStyles.setAttribute('data-styles', '');\n        // Apply CSP nonce to the style tag if it exists\n        const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n        if (nonce != null) {\n            dataStyles.setAttribute('nonce', nonce);\n        }\n        // Insert the styles into the document head\n        // NOTE: this _needs_ to happen last so we can ensure the nonce (and other attributes) are applied\n        head.insertBefore(dataStyles, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\n/**\n * Assigns the given value to the nonce property on the runtime platform object.\n * During runtime, this value is used to set the nonce attribute on all dynamically created script and style tags.\n * @param nonce The value to be assigned to the platform nonce property.\n * @returns void\n */\nconst setNonce = (nonce) => (plt.$nonce$ = nonce);\n/**\n * A WeakMap mapping runtime component references to their corresponding host reference\n * instances.\n */\nconst hostRefs = /*@__PURE__*/ new WeakMap();\n/**\n * Given a {@link d.RuntimeRef} retrieve the corresponding {@link d.HostRef}\n *\n * @param ref the runtime ref of interest\n * @returns the Host reference (if found) or undefined\n */\nconst getHostRef = (ref) => hostRefs.get(ref);\n/**\n * Register a lazy instance with the {@link hostRefs} object so it's\n * corresponding {@link d.HostRef} can be retrieved later.\n *\n * @param lazyInstance the lazy instance of interest\n * @param hostRef that instances `HostRef` object\n * @returns a reference to the host ref WeakMap\n */\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\n/**\n * Register a host element for a Stencil component, setting up various metadata\n * and callbacks based on {@link BUILD} flags as well as the component's runtime\n * metadata.\n *\n * @param hostElement the host element to register\n * @param cmpMeta runtime metadata for that component\n * @returns a reference to the host ref WeakMap\n */\nconst registerHost = (hostElement, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: hostElement,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    {\n        hostRef.$onInstancePromise$ = new Promise((r) => (hostRef.$onInstanceResolve$ = r));\n    }\n    {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        hostElement['s-p'] = [];\n        hostElement['s-rc'] = [];\n    }\n    return hostRefs.set(hostElement, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (0, console.error)(e, el);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    const module = cmpModules.get(bundleId) ;\n    if (module) {\n        return module[exportName];\n    }\n    \n        if (!hmrVersionId || !BUILD.hotModuleReplacement) {\n          const processMod = importedModule => {\n              cmpModules.set(bundleId, importedModule);\n              return importedModule[exportName];\n          }\n          switch(bundleId) {\n              \n                case 'arcgis-basemap-gallery_2':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-basemap-gallery_2.entry.js').then(processMod, consoleError);\n                case 'arcgis-area-measurement-2d':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-area-measurement-2d.entry.js').then(processMod, consoleError);\n                case 'arcgis-area-measurement-3d':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-area-measurement-3d.entry.js').then(processMod, consoleError);\n                case 'arcgis-attachments':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-attachments.entry.js').then(processMod, consoleError);\n                case 'arcgis-basemap-layer-list':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-basemap-layer-list.entry.js').then(processMod, consoleError);\n                case 'arcgis-basemap-toggle':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-basemap-toggle.entry.js').then(processMod, consoleError);\n                case 'arcgis-bookmarks':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-bookmarks.entry.js').then(processMod, consoleError);\n                case 'arcgis-building-explorer':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-building-explorer.entry.js').then(processMod, consoleError);\n                case 'arcgis-compass':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-compass.entry.js').then(processMod, consoleError);\n                case 'arcgis-coordinate-conversion':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-coordinate-conversion.entry.js').then(processMod, consoleError);\n                case 'arcgis-daylight':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-daylight.entry.js').then(processMod, consoleError);\n                case 'arcgis-directional-pad':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-directional-pad.entry.js').then(processMod, consoleError);\n                case 'arcgis-directions':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-directions.entry.js').then(processMod, consoleError);\n                case 'arcgis-directline-measurement-3d':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-directline-measurement-3d.entry.js').then(processMod, consoleError);\n                case 'arcgis-distance-measurement-2d':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-distance-measurement-2d.entry.js').then(processMod, consoleError);\n                case 'arcgis-editor':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-editor.entry.js').then(processMod, consoleError);\n                case 'arcgis-elevation-profile':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-elevation-profile.entry.js').then(processMod, consoleError);\n                case 'arcgis-feature':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-feature.entry.js').then(processMod, consoleError);\n                case 'arcgis-feature-form':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-feature-form.entry.js').then(processMod, consoleError);\n                case 'arcgis-feature-table':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-feature-table.entry.js').then(processMod, consoleError);\n                case 'arcgis-feature-templates':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-feature-templates.entry.js').then(processMod, consoleError);\n                case 'arcgis-features':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-features.entry.js').then(processMod, consoleError);\n                case 'arcgis-floor-filter':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-floor-filter.entry.js').then(processMod, consoleError);\n                case 'arcgis-fullscreen':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-fullscreen.entry.js').then(processMod, consoleError);\n                case 'arcgis-histogram':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-histogram.entry.js').then(processMod, consoleError);\n                case 'arcgis-histogram-range-slider':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-histogram-range-slider.entry.js').then(processMod, consoleError);\n                case 'arcgis-home':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-home.entry.js').then(processMod, consoleError);\n                case 'arcgis-layer-list':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-layer-list.entry.js').then(processMod, consoleError);\n                case 'arcgis-legend':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-legend.entry.js').then(processMod, consoleError);\n                case 'arcgis-line-of-sight':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-line-of-sight.entry.js').then(processMod, consoleError);\n                case 'arcgis-locate':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-locate.entry.js').then(processMod, consoleError);\n                case 'arcgis-measurement':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-measurement.entry.js').then(processMod, consoleError);\n                case 'arcgis-navigation-toggle':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-navigation-toggle.entry.js').then(processMod, consoleError);\n                case 'arcgis-placement':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-placement.entry.js').then(processMod, consoleError);\n                case 'arcgis-print':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-print.entry.js').then(processMod, consoleError);\n                case 'arcgis-scale-bar':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-scale-bar.entry.js').then(processMod, consoleError);\n                case 'arcgis-scale-range-slider':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-scale-range-slider.entry.js').then(processMod, consoleError);\n                case 'arcgis-scene':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-scene.entry.js').then(processMod, consoleError);\n                case 'arcgis-search':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-search.entry.js').then(processMod, consoleError);\n                case 'arcgis-shadow-cast':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-shadow-cast.entry.js').then(processMod, consoleError);\n                case 'arcgis-sketch':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-sketch.entry.js').then(processMod, consoleError);\n                case 'arcgis-slice':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-slice.entry.js').then(processMod, consoleError);\n                case 'arcgis-slider':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-slider.entry.js').then(processMod, consoleError);\n                case 'arcgis-swipe':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-swipe.entry.js').then(processMod, consoleError);\n                case 'arcgis-table-list':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-table-list.entry.js').then(processMod, consoleError);\n                case 'arcgis-time-slider':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-time-slider.entry.js').then(processMod, consoleError);\n                case 'arcgis-track':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-track.entry.js').then(processMod, consoleError);\n                case 'arcgis-utility-network-associations':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-utility-network-associations.entry.js').then(processMod, consoleError);\n                case 'arcgis-utility-network-trace':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-utility-network-trace.entry.js').then(processMod, consoleError);\n                case 'arcgis-utility-network-validate-topology':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-utility-network-validate-topology.entry.js').then(processMod, consoleError);\n                case 'arcgis-value-picker':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-value-picker.entry.js').then(processMod, consoleError);\n                case 'arcgis-version-management':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-version-management.entry.js').then(processMod, consoleError);\n                case 'arcgis-weather':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-weather.entry.js').then(processMod, consoleError);\n                case 'arcgis-zoom':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-zoom.entry.js').then(processMod, consoleError);\n                case 'arcgis-version-management-service-item_2':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-version-management-service-item_2.entry.js').then(processMod, consoleError);\n                case 'arcgis-version-management-version-item_2':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-version-management-version-item_2.entry.js').then(processMod, consoleError);\n                case 'arcgis-expand':\n                    return import(\n                      /* webpackMode: \"lazy\" */\n                      './arcgis-expand.entry.js').then(processMod, consoleError);\n          }\n      }\n    return import(\n    /* @vite-ignore */\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${''}`).then((importedModule) => {\n        {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = /*@__PURE__*/ new Map();\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || { head: {} };\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructableStylesheets = /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replaceSync === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    ;\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* PLATFORM_FLAGS.queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst flush = () => {\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = (cb) => promiseResolve().then(cb);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\n\nexport { Host as H, getAssetPath as a, bootstrapLazy as b, createEvent as c, getElement as g, h, promiseResolve as p, registerInstance as r, setNonce as s };\n"],
  "mappings": "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",
  "names": ["doc", "scopeId", "isSvgMode", "newVNode", "_a", "flags", "h"]
}
