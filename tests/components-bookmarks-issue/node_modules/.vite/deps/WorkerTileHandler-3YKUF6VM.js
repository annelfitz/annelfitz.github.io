import {
  e as e3,
  s as s2
} from "./chunk-CHCT3UUA.js";
import {
  o as o2
} from "./chunk-7FQYGAVT.js";
import {
  O,
  U,
  l as l2,
  t as t3
} from "./chunk-2IACRN4O.js";
import "./chunk-T3YOCYDS.js";
import {
  E,
  I
} from "./chunk-QO4PGON2.js";
import {
  a as a3,
  l,
  m,
  n as n3,
  o as o3,
  p as p2,
  u
} from "./chunk-QRQWG4D3.js";
import {
  a,
  c as c3,
  i as i2
} from "./chunk-N4HNOQVJ.js";
import {
  C
} from "./chunk-MTQHYT7Y.js";
import {
  t as t2
} from "./chunk-JCP47SOM.js";
import {
  _,
  a as a2,
  d,
  e,
  e2,
  f,
  h,
  h2,
  i as i3,
  o,
  p,
  r,
  s
} from "./chunk-CXCB57TE.js";
import "./chunk-IWO6JXL2.js";
import "./chunk-AVR3LWTZ.js";
import "./chunk-FFG7BDAP.js";
import {
  n as n2
} from "./chunk-252ISA6Z.js";
import "./chunk-WKVHVZW2.js";
import {
  i
} from "./chunk-VIKID44H.js";
import "./chunk-XGTCDM4C.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  t3 as t
} from "./chunk-NDIXNREV.js";
import "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  b,
  c2
} from "./chunk-JGDJR5EV.js";
import {
  n
} from "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  c2 as c
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/ScriptUtils.js
function e4(e5) {
  return 746 === e5 || 747 === e5 || !(e5 < 4352) && (e5 >= 12704 && e5 <= 12735 || (e5 >= 12544 && e5 <= 12591 || (e5 >= 65072 && e5 <= 65103 && !(e5 >= 65097 && e5 <= 65103) || (e5 >= 63744 && e5 <= 64255 || (e5 >= 13056 && e5 <= 13311 || (e5 >= 11904 && e5 <= 12031 || (e5 >= 12736 && e5 <= 12783 || (e5 >= 12288 && e5 <= 12351 && !(e5 >= 12296 && e5 <= 12305 || e5 >= 12308 && e5 <= 12319 || 12336 === e5) || (e5 >= 13312 && e5 <= 19903 || (e5 >= 19968 && e5 <= 40959 || (e5 >= 12800 && e5 <= 13055 || (e5 >= 12592 && e5 <= 12687 || (e5 >= 43360 && e5 <= 43391 || (e5 >= 55216 && e5 <= 55295 || (e5 >= 4352 && e5 <= 4607 || (e5 >= 44032 && e5 <= 55215 || (e5 >= 12352 && e5 <= 12447 || (e5 >= 12272 && e5 <= 12287 || (e5 >= 12688 && e5 <= 12703 || (e5 >= 12032 && e5 <= 12255 || (e5 >= 12784 && e5 <= 12799 || (e5 >= 12448 && e5 <= 12543 && 12540 !== e5 || (e5 >= 65280 && e5 <= 65519 && !(65288 === e5 || 65289 === e5 || 65293 === e5 || e5 >= 65306 && e5 <= 65310 || 65339 === e5 || 65341 === e5 || 65343 === e5 || e5 >= 65371 && e5 <= 65503 || 65507 === e5 || e5 >= 65512 && e5 <= 65519) || (e5 >= 65104 && e5 <= 65135 && !(e5 >= 65112 && e5 <= 65118 || e5 >= 65123 && e5 <= 65126) || (e5 >= 5120 && e5 <= 5759 || (e5 >= 6320 && e5 <= 6399 || (e5 >= 65040 && e5 <= 65055 || (e5 >= 19904 && e5 <= 19967 || (e5 >= 40960 && e5 <= 42127 || e5 >= 42128 && e5 <= 42191)))))))))))))))))))))))))))));
}
function c4(e5) {
  return !(e5 < 11904) && (e5 >= 12704 && e5 <= 12735 || (e5 >= 12544 && e5 <= 12591 || (e5 >= 65072 && e5 <= 65103 || (e5 >= 63744 && e5 <= 64255 || (e5 >= 13056 && e5 <= 13311 || (e5 >= 11904 && e5 <= 12031 || (e5 >= 12736 && e5 <= 12783 || (e5 >= 12288 && e5 <= 12351 || (e5 >= 13312 && e5 <= 19903 || (e5 >= 19968 && e5 <= 40959 || (e5 >= 12800 && e5 <= 13055 || (e5 >= 65280 && e5 <= 65519 || (e5 >= 12352 && e5 <= 12447 || (e5 >= 12272 && e5 <= 12287 || (e5 >= 12032 && e5 <= 12255 || (e5 >= 12784 && e5 <= 12799 || (e5 >= 12448 && e5 <= 12543 || (e5 >= 65040 && e5 <= 65055 || (e5 >= 42128 && e5 <= 42191 || e5 >= 40960 && e5 <= 42127)))))))))))))))))));
}
function s3(e5) {
  switch (e5) {
    case 10:
    case 32:
    case 38:
    case 40:
    case 41:
    case 43:
    case 45:
    case 47:
    case 173:
    case 183:
    case 8203:
    case 8208:
    case 8211:
    case 8231:
      return true;
  }
  return false;
}
function a4(e5) {
  switch (e5) {
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 32:
      return true;
  }
  return false;
}

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/TextShaping.js
var c5 = 24;
var h3 = 17;
var l3 = class {
  constructor(t5, e5, i6, o6, s6, c6, h5) {
    this._glyphItems = t5, this._maxWidth = e5, this._lineHeight = i6, this._letterSpacing = o6, this._hAnchor = s6, this._vAnchor = c6, this._justify = h5;
  }
  getShaping(s6, c6, h5) {
    const l5 = this._letterSpacing, n5 = this._lineHeight, a6 = this._justify, r6 = this._maxWidth, m2 = [];
    let f3 = 0, p4 = 0;
    for (const t5 of s6) {
      const e5 = t5.codePointAt(0);
      if (null == e5)
        continue;
      const i6 = h5 && e4(e5);
      let s7;
      for (const t6 of this._glyphItems)
        if (s7 = t6[e5], s7)
          break;
      m2.push({ codePoint: e5, x: f3, y: p4, vertical: i6, glyphMosaicItem: s7 }), s7 && (f3 += s7.metrics.advance + l5);
    }
    let g2 = f3;
    if (r6 > 0) {
      g2 = f3 / Math.max(1, Math.ceil(f3 / r6));
    }
    const y2 = s6.includes("â€‹"), d2 = [], x2 = m2.length;
    for (let e5 = 0; e5 < x2 - 1; e5++) {
      const o6 = m2[e5].codePoint, s7 = c4(o6);
      if (s3(o6) || s7) {
        let t5 = 0;
        if (10 === o6)
          t5 -= 1e4;
        else if (s7 && y2)
          t5 += 150;
        else {
          40 !== o6 && 65288 !== o6 || (t5 += 50);
          const i6 = m2[e5 + 1].codePoint;
          41 !== i6 && 65289 !== i6 || (t5 += 50);
        }
        d2.push(this._buildBreak(e5 + 1, m2[e5].x, g2, d2, t5, false));
      }
    }
    const u4 = this._optimalBreaks(this._buildBreak(x2, f3, g2, d2, 0, true));
    let M = 0;
    const _2 = c6 ? -n5 : n5;
    let I4 = 0;
    for (let t5 = 0; t5 < u4.length; t5++) {
      const i6 = u4[t5];
      let o6 = I4;
      for (; o6 < i6 && a4(m2[o6].codePoint); )
        m2[o6].glyphMosaicItem = null, ++o6;
      let s7 = i6 - 1;
      for (; s7 > o6 && a4(m2[s7].codePoint); )
        m2[s7].glyphMosaicItem = null, --s7;
      if (o6 <= s7) {
        const t6 = m2[o6].x;
        for (let i7 = o6; i7 <= s7; i7++)
          m2[i7].x -= t6, m2[i7].y = p4;
        let e5 = m2[s7].x;
        m2[s7].glyphMosaicItem && (e5 += m2[s7].glyphMosaicItem.metrics.advance), M = Math.max(e5, M), a6 && this._applyJustification(m2, o6, s7);
      }
      I4 = i6, p4 += _2;
    }
    if (m2.length > 0) {
      const t5 = u4.length - 1, e5 = (a6 - this._hAnchor) * M;
      let i6 = (-this._vAnchor * (t5 + 1) + 0.5) * n5;
      c6 && t5 && (i6 += t5 * n5);
      for (const o6 of m2)
        o6.x += e5, o6.y += i6;
    }
    return m2.filter((t5) => t5.glyphMosaicItem);
  }
  static getTextBox(t5, e5) {
    if (!t5.length)
      return null;
    let i6 = 1 / 0, o6 = 1 / 0, s6 = 0, c6 = 0;
    for (const l5 of t5) {
      const t6 = l5.glyphMosaicItem.metrics.advance, n5 = l5.x, a6 = l5.y - h3, r6 = n5 + t6, m2 = a6 + e5;
      i6 = Math.min(i6, n5), s6 = Math.max(s6, r6), o6 = Math.min(o6, a6), c6 = Math.max(c6, m2);
    }
    return { x: i6, y: o6, width: s6 - i6, height: c6 - o6 };
  }
  static getBox(t5) {
    if (!t5.length)
      return null;
    let e5 = 1 / 0, i6 = 1 / 0, o6 = 0, s6 = 0;
    for (const c6 of t5) {
      const { height: t6, left: h5, top: l5, width: n5 } = c6.glyphMosaicItem.metrics, a6 = c6.x, r6 = c6.y - (t6 - Math.abs(l5)), m2 = a6 + n5 + h5, f3 = r6 + t6;
      e5 = Math.min(e5, a6), o6 = Math.max(o6, m2), i6 = Math.min(i6, r6), s6 = Math.max(s6, f3);
    }
    return { x: e5, y: i6, width: o6 - e5, height: s6 - i6 };
  }
  static addDecoration(t5, e5) {
    const i6 = t5.length;
    if (0 === i6)
      return;
    const o6 = 3;
    let c6 = t5[0].x + t5[0].glyphMosaicItem.metrics.left, h5 = t5[0].y;
    for (let n5 = 1; n5 < i6; n5++) {
      const i7 = t5[n5];
      if (i7.y !== h5) {
        const l6 = t5[n5 - 1].x + t5[n5 - 1].glyphMosaicItem.metrics.left + t5[n5 - 1].glyphMosaicItem.metrics.width;
        t5.push({ codePoint: 0, x: c6, y: h5 + e5 - o6, vertical: false, glyphMosaicItem: { sdf: true, rect: new t2(4, 0, 4, 8), metrics: { width: l6 - c6, height: 2 + 2 * o6, left: 0, top: 0, advance: 0 }, page: 0, code: 0 } }), h5 = i7.y, c6 = i7.x + i7.glyphMosaicItem.metrics.left;
      }
    }
    const l5 = t5[i6 - 1].x + t5[i6 - 1].glyphMosaicItem.metrics.left + t5[i6 - 1].glyphMosaicItem.metrics.width;
    t5.push({ codePoint: 0, x: c6, y: h5 + e5 - o6, vertical: false, glyphMosaicItem: { sdf: true, rect: new t2(4, 0, 4, 8), metrics: { width: l5 - c6, height: 2 + 2 * o6, left: 0, top: 0, advance: 0 }, page: 0, code: 0 } });
  }
  _breakScore(t5, e5, i6, o6) {
    const s6 = (t5 - e5) * (t5 - e5);
    return o6 ? t5 < e5 ? s6 / 2 : 2 * s6 : s6 + Math.abs(i6) * i6;
  }
  _buildBreak(t5, e5, i6, o6, s6, c6) {
    let h5 = null, l5 = this._breakScore(e5, i6, s6, c6);
    for (const n5 of o6) {
      const t6 = e5 - n5.x, o7 = this._breakScore(t6, i6, s6, c6) + n5.score;
      o7 <= l5 && (h5 = n5, l5 = o7);
    }
    return { index: t5, x: e5, score: l5, previousBreak: h5 };
  }
  _optimalBreaks(t5) {
    return t5 ? this._optimalBreaks(t5.previousBreak).concat(t5.index) : [];
  }
  _applyJustification(t5, e5, i6) {
    const o6 = t5[i6], s6 = o6.vertical ? c5 : o6.glyphMosaicItem ? o6.glyphMosaicItem.metrics.advance : 0, h5 = (o6.x + s6) * this._justify;
    for (let c6 = e5; c6 <= i6; c6++)
      t5[c6].x -= h5;
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/Placement.js
var x = 4096;
var p3 = 8;
var w = 0.5;
var T = 2;
var y = class {
  constructor(e5, t5, i6 = 0, n5 = -1, s6 = w) {
    this.x = e5, this.y = t5, this.angle = i6, this.segment = n5, this.minzoom = s6;
  }
};
var f2 = class {
  constructor(e5, t5, i6, s6, o6, a6 = w, l5 = r) {
    this.anchor = e5, this.labelAngle = t5, this.glyphAngle = i6, this.page = s6, this.alternateVerticalGlyph = o6, this.minzoom = a6, this.maxzoom = l5;
  }
};
var I2 = class {
  constructor(e5, t5, i6, n5, s6, o6, a6, l5, h5, r6, c6, g2) {
    this.tl = e5, this.tr = t5, this.bl = i6, this.br = n5, this.mosaicRect = s6, this.labelAngle = o6, this.minAngle = a6, this.maxAngle = l5, this.anchor = h5, this.minzoom = r6, this.maxzoom = c6, this.page = g2;
  }
};
var u2 = class {
  constructor(e5) {
    this.shapes = e5;
  }
};
var b2 = class {
  getIconPlacement(n5, s6, o6) {
    const a6 = new h(n5.x, n5.y), l5 = o6.rotationAlignment === l.MAP, h5 = o6.keepUpright;
    let r6 = o6.rotate * s;
    l5 && (r6 += n5.angle);
    const m2 = new u2([]);
    return o6.allowOverlap && o6.ignorePlacement || !o2 || (m2.iconColliders = []), this._addIconPlacement(m2, a6, s6, o6, r6), l5 && h5 && this._addIconPlacement(m2, a6, s6, o6, r6 + o), m2;
  }
  _addIconPlacement(t5, i6, s6, o6, a6) {
    const l5 = s6.rasterizationScale, h5 = s6.width / l5, r6 = s6.height / l5, g2 = o6.offset;
    let x2 = g2[0], d2 = g2[1];
    switch (o6.anchor) {
      case m.CENTER:
        x2 -= h5 / 2, d2 -= r6 / 2;
        break;
      case m.LEFT:
        d2 -= r6 / 2;
        break;
      case m.RIGHT:
        x2 -= h5, d2 -= r6 / 2;
        break;
      case m.TOP:
        x2 -= h5 / 2;
        break;
      case m.BOTTOM:
        x2 -= h5 / 2, d2 -= r6;
        break;
      case m.TOP_LEFT:
        break;
      case m.BOTTOM_LEFT:
        d2 -= r6;
        break;
      case m.TOP_RIGHT:
        x2 -= h5;
        break;
      case m.BOTTOM_RIGHT:
        x2 -= h5, d2 -= r6;
    }
    const p4 = s6.rect, T2 = 2 / l5, y2 = x2 - T2, f3 = d2 - T2, u4 = y2 + p4.width / l5, b4 = f3 + p4.height / l5, P = new h(y2, f3), O2 = new h(u4, b4), _2 = new h(y2, b4), k = new h(u4, f3);
    if (0 !== a6) {
      const e5 = Math.cos(a6), t6 = Math.sin(a6);
      P.rotate(e5, t6), O2.rotate(e5, t6), _2.rotate(e5, t6), k.rotate(e5, t6);
    }
    const M = new I2(P, k, _2, O2, p4, a6, 0, 256, i6, w, r, 0);
    if (t5.shapes.push(M), (!o6.allowOverlap || !o6.ignorePlacement) && o2) {
      const e5 = o6.size, s7 = o6.padding, l6 = { xTile: i6.x, yTile: i6.y, dxPixels: x2 * e5 - s7, dyPixels: d2 * e5 - s7, hard: !o6.optional, partIndex: 0, width: h5 * e5 + 2 * s7, height: r6 * e5 + 2 * s7, angle: a6, minLod: w, maxLod: r };
      t5.iconColliders.push(l6);
    }
  }
  getTextPlacement(s6, o6, a6, c6) {
    const x2 = new h(s6.x, s6.y), d2 = c6.rotate * s, y2 = c6.rotationAlignment === l.MAP, b4 = c6.keepUpright, P = c6.padding;
    let O2 = w;
    const _2 = !y2 ? 0 : s6.angle, k = s6.segment >= 0 && y2, M = c6.allowOverlap && c6.ignorePlacement ? null : [], E2 = [], G = 4, N = !k;
    let A2 = Number.POSITIVE_INFINITY, L2 = Number.NEGATIVE_INFINITY, z = A2, F = L2;
    const v = (k || y2) && b4, R = c6.size / c5;
    let B = false;
    for (const e5 of o6)
      if (e5.vertical) {
        B = true;
        break;
      }
    let H, V = 0, j = 0;
    if (!k && B) {
      const e5 = l3.getTextBox(o6, c6.lineHeight * c5);
      switch (c6.anchor) {
        case m.LEFT:
          V = e5.height / 2, j = -e5.width / 2;
          break;
        case m.RIGHT:
          V = -e5.height / 2, j = e5.width / 2;
          break;
        case m.TOP:
          V = e5.height / 2, j = e5.width / 2;
          break;
        case m.BOTTOM:
          V = -e5.height / 2, j = -e5.width / 2;
          break;
        case m.TOP_LEFT:
          V = e5.height;
          break;
        case m.BOTTOM_LEFT:
          j = -e5.width;
          break;
        case m.TOP_RIGHT:
          j = e5.width;
          break;
        case m.BOTTOM_RIGHT:
          V = -e5.height;
      }
    }
    V += c6.offset[0] * c5, j += c6.offset[1] * c5;
    for (const t5 of o6) {
      const o7 = t5.glyphMosaicItem;
      if (!o7 || o7.rect.isEmpty)
        continue;
      const l5 = o7.rect, h5 = o7.metrics, g2 = o7.page;
      if (M && N) {
        if (void 0 !== H && H !== t5.y) {
          let e5, t6, i6, o8;
          B ? (e5 = -F + V, t6 = A2 + j, i6 = F - z, o8 = L2 - A2) : (e5 = A2 + V, t6 = z + j, i6 = L2 - A2, o8 = F - z);
          const a7 = { xTile: s6.x, yTile: s6.y, dxPixels: e5 * R - P, dyPixels: t6 * R - P, hard: !c6.optional, partIndex: 1, width: i6 * R + 2 * P, height: o8 * R + 2 * P, angle: d2, minLod: w, maxLod: r };
          M.push(a7), A2 = Number.POSITIVE_INFINITY, L2 = Number.NEGATIVE_INFINITY, z = A2, F = L2;
        }
        H = t5.y;
      }
      const m2 = [];
      if (k) {
        const e5 = 0.5 * o7.metrics.width, i6 = (t5.x + h5.left - G + e5) * R * p3;
        if (O2 = this._placeGlyph(s6, O2, i6, a6, s6.segment, 1, t5.vertical, g2, m2), b4 && (O2 = this._placeGlyph(s6, O2, i6, a6, s6.segment, -1, t5.vertical, g2, m2)), O2 >= T)
          break;
      } else
        m2.push(new f2(x2, _2, _2, g2, false)), y2 && b4 && m2.push(new f2(x2, _2 + o, _2 + o, g2, false));
      const u4 = t5.x + h5.left, C3 = t5.y - h3 - h5.top, S = u4 + h5.width, Y = C3 + h5.height;
      let q, U2, D, J, K, Q, W, X;
      if (!k && B)
        if (t5.vertical) {
          const t6 = (u4 + S) / 2 - h5.height / 2, i6 = (C3 + Y) / 2 + h5.width / 2;
          q = new h(-i6 - G + V, t6 - G + j), U2 = new h(q.x + l5.width, q.y + l5.height), D = new h(q.x, U2.y), J = new h(U2.x, q.y);
        } else
          q = new h(-C3 + G + V, u4 - G + j), U2 = new h(q.x - l5.height, q.y + l5.width), D = new h(U2.x, q.y), J = new h(q.x, U2.y);
      else
        q = new h(u4 - G + V, C3 - G + j), U2 = new h(q.x + l5.width, q.y + l5.height), D = new h(q.x, U2.y), J = new h(U2.x, q.y);
      for (const i6 of m2) {
        let n5, o8, a7, r6;
        if (i6.alternateVerticalGlyph) {
          if (!K) {
            const t6 = (C3 + Y) / 2 + j;
            K = new h((u4 + S) / 2 + V - h5.height / 2 - G, t6 + h5.width / 2 + G), Q = new h(K.x + l5.height, K.y - l5.width), W = new h(Q.x, K.y), X = new h(K.x, Q.y);
          }
          n5 = K, o8 = W, a7 = X, r6 = Q;
        } else
          n5 = q, o8 = D, a7 = J, r6 = U2;
        const g3 = C3, m3 = Y, x3 = i6.glyphAngle + d2;
        if (0 !== x3) {
          const e5 = Math.cos(x3), t6 = Math.sin(x3);
          n5 = n5.clone(), o8 = o8 == null ? void 0 : o8.clone(), a7 = a7 == null ? void 0 : a7.clone(), r6 = r6 == null ? void 0 : r6.clone(), n5.rotate(e5, t6), r6 == null ? void 0 : r6.rotate(e5, t6), o8 == null ? void 0 : o8.rotate(e5, t6), a7 == null ? void 0 : a7.rotate(e5, t6);
        }
        let p4 = 0, w2 = 256;
        if (k && B ? t5.vertical ? i6.alternateVerticalGlyph ? (p4 = 32, w2 = 96) : (p4 = 224, w2 = 32) : (p4 = 224, w2 = 96) : (p4 = 192, w2 = 64), E2.push(new I2(n5, a7, o8, r6, l5, i6.labelAngle, p4, w2, i6.anchor, i6.minzoom, i6.maxzoom, i6.page)), M && (!v || this._legible(i6.labelAngle))) {
          if (N)
            u4 < A2 && (A2 = u4), g3 < z && (z = g3), S > L2 && (L2 = S), m3 > F && (F = m3);
          else if (i6.minzoom < T) {
            const e5 = { xTile: s6.x, yTile: s6.y, dxPixels: (u4 + V) * R - P, dyPixels: (g3 + V) * R - P, hard: !c6.optional, partIndex: 1, width: (S - u4) * R + 2 * P, height: (m3 - g3) * R + 2 * P, angle: x3, minLod: i6.minzoom, maxLod: i6.maxzoom };
            M.push(e5);
          }
        }
      }
    }
    if (O2 >= T)
      return null;
    if (M && N) {
      let e5, t5, i6, o7;
      B ? (e5 = -F + V, t5 = A2 + j, i6 = F - z, o7 = L2 - A2) : (e5 = A2 + V, t5 = z + j, i6 = L2 - A2, o7 = F - z);
      const a7 = { xTile: s6.x, yTile: s6.y, dxPixels: e5 * R - P, dyPixels: t5 * R - P, hard: !c6.optional, partIndex: 1, width: i6 * R + 2 * P, height: o7 * R + 2 * P, angle: d2, minLod: w, maxLod: r };
      M.push(a7);
    }
    const C2 = new u2(E2);
    return M && M.length > 0 && (C2.textColliders = M), C2;
  }
  _legible(e5) {
    const t5 = f(e5);
    return t5 < 65 || t5 >= 193;
  }
  _placeGlyph(t5, s6, l5, h5, r6, c6, g2, m2, x2) {
    let d2 = c6;
    const p4 = d2 < 0 ? a2(t5.angle + o, e2) : t5.angle;
    let w2 = 0;
    l5 < 0 && (d2 *= -1, l5 *= -1, w2 = o), d2 > 0 && ++r6;
    let T2 = new h(t5.x, t5.y), y2 = h5[r6], I4 = r;
    if (h5.length <= r6)
      return I4;
    for (; ; ) {
      const e5 = y2.x - T2.x, t6 = y2.y - T2.y, i6 = Math.sqrt(e5 * e5 + t6 * t6), n5 = Math.max(l5 / i6, s6), c7 = e5 / i6, u4 = t6 / i6, b4 = a2(Math.atan2(u4, c7) + w2, e2);
      if (x2.push(new f2(T2, p4, b4, m2, false, n5, I4)), g2 && x2.push(new f2(T2, p4, b4, m2, true, n5, I4)), n5 <= s6)
        return n5;
      T2 = y2.clone();
      do {
        if (r6 += d2, h5.length <= r6 || r6 < 0)
          return n5;
        y2 = h5[r6];
      } while (T2.isEqual(y2));
      let P = y2.x - T2.x, O2 = y2.y - T2.y;
      const _2 = Math.sqrt(P * P + O2 * O2);
      P *= i6 / _2, O2 *= i6 / _2, T2.x -= P, T2.y -= O2, I4 = n5;
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/IndexMemoryBuffer.js
var r2 = class extends t3 {
  constructor() {
    super(12);
  }
  add(s6, r6, t5) {
    const e5 = this.array;
    e5.push(s6), e5.push(r6), e5.push(t5);
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/VertexMemoryBuffer.js
var o4 = class extends t3 {
  constructor(t5) {
    super(t5);
  }
  add(t5, o6, r6, u4, h5, a6, n5, d2, e5, p4, i6, c6) {
    const M = this.array;
    let l5 = t3.i1616to32(t5, o6);
    M.push(l5);
    const m2 = 31;
    l5 = t3.i8888to32(Math.round(m2 * r6), Math.round(m2 * u4), Math.round(m2 * h5), Math.round(m2 * a6)), M.push(l5), l5 = t3.i8888to32(Math.round(m2 * n5), Math.round(m2 * d2), Math.round(m2 * e5), Math.round(m2 * p4)), M.push(l5), l5 = t3.i1616to32(i6, 0), M.push(l5), c6 && M.push(...c6);
  }
};
var r3 = class extends t3 {
  constructor(t5) {
    super(t5);
  }
  add(t5, o6, r6) {
    const u4 = this.array;
    u4.push(t3.i1616to32(t5, o6)), r6 && u4.push(...r6);
  }
};
var u3 = class extends t3 {
  constructor(t5) {
    super(t5);
  }
  add(t5, o6, r6, u4, h5, a6, n5) {
    const d2 = this.array, e5 = this.index;
    let p4 = t3.i1616to32(t5, o6);
    d2.push(p4);
    const i6 = 15;
    return p4 = t3.i8888to32(Math.round(i6 * r6), Math.round(i6 * u4), h5, a6), d2.push(p4), n5 && d2.push(...n5), e5;
  }
};
var h4 = class extends t3 {
  constructor(t5) {
    super(t5);
  }
  add(o6, r6, u4, h5, a6, n5, d2, e5, p4, i6, c6, M) {
    const l5 = this.array;
    let m2 = t3.i1616to32(o6, r6);
    l5.push(m2), m2 = t3.i1616to32(Math.round(8 * u4), Math.round(8 * h5)), l5.push(m2), m2 = t3.i8888to32(a6 / 4, n5 / 4, e5, p4), l5.push(m2), m2 = t3.i8888to32(0, f(d2), 10 * i6, Math.min(10 * c6, 255)), l5.push(m2), M && l5.push(...M);
  }
};
var a5 = class extends t3 {
  constructor(t5) {
    super(t5);
  }
  add(t5, o6, r6, u4, h5) {
    const a6 = this.array, n5 = t3.i1616to32(2 * t5 + r6, 2 * o6 + u4);
    a6.push(n5), h5 && a6.push(...h5);
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/buckets/BaseBucket.js
var t4 = class {
  constructor(t5, e5, s6) {
    this.layerExtent = 4096, this._features = [], this.layer = t5, this.zoom = e5, this._spriteInfo = s6, this._filter = t5.getFeatureFilter();
  }
  pushFeature(t5) {
    this._filter && !this._filter.filter(t5, this.zoom) || this._features.push(t5);
  }
  hasFeatures() {
    return this._features.length > 0;
  }
  getResources(t5, e5, s6) {
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/buckets/CircleBucket.js
var r4 = class extends t4 {
  constructor(t5, r6, i6, c6, s6) {
    super(t5, r6, i6), this.type = E.CIRCLE, this._circleVertexBuffer = c6, this._circleIndexBuffer = s6;
  }
  get circleIndexStart() {
    return this._circleIndexStart;
  }
  get circleIndexCount() {
    return this._circleIndexCount;
  }
  processFeatures(e5) {
    const t5 = this._circleVertexBuffer, r6 = this._circleIndexBuffer;
    this._circleIndexStart = 3 * r6.index, this._circleIndexCount = 0;
    const i6 = this.layer, c6 = this.zoom;
    e5 && e5.setExtent(this.layerExtent);
    for (const s6 of this._features) {
      const n5 = s6.getGeometry(e5);
      if (!n5)
        continue;
      const l5 = i6.circleMaterial.encodeAttributes(s6, c6, i6);
      for (const e6 of n5)
        if (e6)
          for (const i7 of e6) {
            const e7 = t5.index;
            t5.add(i7.x, i7.y, 0, 0, l5), t5.add(i7.x, i7.y, 0, 1, l5), t5.add(i7.x, i7.y, 1, 0, l5), t5.add(i7.x, i7.y, 1, 1, l5), r6.add(e7, e7 + 1, e7 + 2), r6.add(e7 + 1, e7 + 2, e7 + 3), this._circleIndexCount += 6;
          }
    }
  }
  serialize() {
    let e5 = 6;
    e5 += this.layerUIDs.length, e5 += this._circleVertexBuffer.array.length, e5 += this._circleIndexBuffer.array.length;
    const t5 = new Uint32Array(e5), r6 = new Int32Array(t5.buffer);
    let i6 = 0;
    t5[i6++] = this.type, t5[i6++] = this.layerUIDs.length;
    for (let c6 = 0; c6 < this.layerUIDs.length; c6++)
      t5[i6++] = this.layerUIDs[c6];
    t5[i6++] = this._circleIndexStart, t5[i6++] = this._circleIndexCount, t5[i6++] = this._circleVertexBuffer.array.length;
    for (let c6 = 0; c6 < this._circleVertexBuffer.array.length; c6++)
      r6[i6++] = this._circleVertexBuffer.array[c6];
    t5[i6++] = this._circleIndexBuffer.array.length;
    for (let c6 = 0; c6 < this._circleIndexBuffer.array.length; c6++)
      t5[i6++] = this._circleIndexBuffer.array[c6];
    return t5.buffer;
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/buckets/FillBucket.js
var s4 = class _s extends t4 {
  constructor(t5, e5, i6, r6, n5, s6, o6) {
    super(t5, e5, i6), this.type = E.FILL, this._patternMap = /* @__PURE__ */ new Map(), this._fillVertexBuffer = r6, this._fillIndexBuffer = n5, this._outlineVertexBuffer = s6, this._outlineIndexBuffer = o6;
  }
  get fillIndexStart() {
    return this._fillIndexStart;
  }
  get fillIndexCount() {
    return this._fillIndexCount;
  }
  get outlineIndexStart() {
    return this._outlineIndexStart;
  }
  get outlineIndexCount() {
    return this._outlineIndexCount;
  }
  getResources(t5, e5, i6) {
    const r6 = this.layer, l5 = this.zoom, n5 = r6.getPaintProperty("fill-pattern");
    if (n5)
      if (n5.isDataDriven)
        for (const s6 of this._features)
          e5(n5.getValue(l5, s6), true);
      else
        e5(n5.getValue(l5), true);
  }
  processFeatures(t5) {
    this._fillIndexStart = 3 * this._fillIndexBuffer.index, this._fillIndexCount = 0, this._outlineIndexStart = 3 * this._outlineIndexBuffer.index, this._outlineIndexCount = 0;
    const e5 = this.layer, i6 = this.zoom, { fillMaterial: r6, outlineMaterial: l5, hasDataDrivenFill: n5, hasDataDrivenOutline: s6 } = e5;
    t5 && t5.setExtent(this.layerExtent);
    const o6 = e5.getPaintProperty("fill-pattern"), a6 = o6 == null ? void 0 : o6.isDataDriven;
    let f3 = !o6 && e5.getPaintValue("fill-antialias", i6);
    if (e5.outlineUsesFillColor) {
      if (f3 && !e5.hasDataDrivenOpacity) {
        const t6 = e5.getPaintValue("fill-opacity", i6), r7 = e5.getPaintValue("fill-opacity", i6 + 1);
        t6 < 1 && r7 < 1 && (f3 = false);
      }
      if (f3 && !e5.hasDataDrivenColor) {
        const t6 = e5.getPaintValue("fill-color", i6), r7 = e5.getPaintValue("fill-color", i6 + 1);
        t6[3] < 1 && r7[3] < 1 && (f3 = false);
      }
    }
    const u4 = this._features, d2 = t5 == null ? void 0 : t5.validateTessellation;
    if (a6) {
      const n6 = [];
      for (const a7 of u4) {
        const u5 = o6.getValue(i6, a7), h5 = this._spriteInfo[u5];
        if (!(h5 == null ? void 0 : h5.rect))
          continue;
        const x2 = r6.encodeAttributes(a7, i6, e5, h5), c6 = f3 && s6 ? l5.encodeAttributes(a7, i6, e5) : [], _2 = a7.getGeometry(t5);
        n6.push({ ddFillAttributes: x2, ddOutlineAttributes: c6, page: h5.page, geometry: _2 }), n6.sort((t6, e6) => t6.page - e6.page);
        for (const { ddFillAttributes: t6, ddOutlineAttributes: i7, page: r7, geometry: l6 } of n6)
          this._processFeature(l6, f3, e5.outlineUsesFillColor, t6, i7, d2, r7);
      }
    } else
      for (const h5 of u4) {
        const o7 = n5 ? r6.encodeAttributes(h5, i6, e5) : null, a7 = f3 && s6 ? l5.encodeAttributes(h5, i6, e5) : null, u5 = h5.getGeometry(t5);
        this._processFeature(u5, f3, e5.outlineUsesFillColor, o7, a7, d2);
      }
  }
  serialize() {
    let t5 = 10;
    t5 += this.layerUIDs.length, t5 += this._fillVertexBuffer.array.length, t5 += this._fillIndexBuffer.array.length, t5 += this._outlineVertexBuffer.array.length, t5 += this._outlineIndexBuffer.array.length, t5 += 3 * this._patternMap.size + 1;
    const e5 = new Uint32Array(t5), i6 = new Int32Array(e5.buffer);
    let r6 = 0;
    e5[r6++] = this.type, e5[r6++] = this.layerUIDs.length;
    for (let s6 = 0; s6 < this.layerUIDs.length; s6++)
      e5[r6++] = this.layerUIDs[s6];
    e5[r6++] = this._fillIndexStart, e5[r6++] = this._fillIndexCount, e5[r6++] = this._outlineIndexStart, e5[r6++] = this._outlineIndexCount;
    const l5 = this._patternMap, n5 = l5.size;
    if (e5[r6++] = n5, n5 > 0)
      for (const [s6, [o6, a6]] of l5)
        e5[r6++] = s6, e5[r6++] = o6, e5[r6++] = a6;
    e5[r6++] = this._fillVertexBuffer.array.length;
    for (let s6 = 0; s6 < this._fillVertexBuffer.array.length; s6++)
      i6[r6++] = this._fillVertexBuffer.array[s6];
    e5[r6++] = this._fillIndexBuffer.array.length;
    for (let s6 = 0; s6 < this._fillIndexBuffer.array.length; s6++)
      e5[r6++] = this._fillIndexBuffer.array[s6];
    e5[r6++] = this._outlineVertexBuffer.array.length;
    for (let s6 = 0; s6 < this._outlineVertexBuffer.array.length; s6++)
      i6[r6++] = this._outlineVertexBuffer.array[s6];
    e5[r6++] = this._outlineIndexBuffer.array.length;
    for (let s6 = 0; s6 < this._outlineIndexBuffer.array.length; s6++)
      e5[r6++] = this._outlineIndexBuffer.array[s6];
    return e5.buffer;
  }
  _processFeature(t5, e5, i6, r6, l5, n5, o6) {
    if (!t5)
      return;
    const a6 = t5.length, f3 = !l5 || 0 === l5.length;
    if (e5 && (!i6 || f3))
      for (let s6 = 0; s6 < a6; s6++)
        this._processOutline(t5[s6], l5);
    const u4 = 32;
    let d2;
    for (let h5 = 0; h5 < a6; h5++) {
      const e6 = _s._area(t5[h5]);
      e6 > u4 ? (void 0 !== d2 && this._processFill(t5, d2, r6, n5, o6), d2 = [h5]) : e6 < -u4 && void 0 !== d2 && d2.push(h5);
    }
    void 0 !== d2 && this._processFill(t5, d2, r6, n5, o6);
  }
  _processOutline(t5, e5) {
    const i6 = this._outlineVertexBuffer, l5 = this._outlineIndexBuffer, n5 = l5.index;
    let s6, o6, a6;
    const f3 = new h(0, 0), u4 = new h(0, 0), d2 = new h(0, 0);
    let h5 = -1, x2 = -1, c6 = -1, _2 = -1, y2 = -1, g2 = false;
    const p4 = 0;
    let I4 = t5.length;
    if (I4 < 2)
      return;
    const B = t5[p4];
    let m2 = t5[I4 - 1];
    for (; I4 && m2.isEqual(B); )
      --I4, m2 = t5[I4 - 1];
    if (!(I4 - p4 < 2)) {
      for (let r6 = p4; r6 < I4; ++r6) {
        r6 === p4 ? (s6 = t5[I4 - 1], o6 = t5[p4], a6 = t5[p4 + 1], f3.assignSub(o6, s6), f3.normalize(), f3.rightPerpendicular()) : (s6 = o6, o6 = a6, a6 = r6 !== I4 - 1 ? t5[r6 + 1] : t5[p4], f3.assign(u4));
        const n6 = this._isClipEdge(s6, o6);
        -1 === _2 && (g2 = n6), u4.assignSub(a6, o6), u4.normalize(), u4.rightPerpendicular();
        const B2 = f3.x * u4.y - f3.y * u4.x;
        d2.assignAdd(f3, u4), d2.normalize();
        const m3 = -d2.x * -f3.x + -d2.y * -f3.y;
        let V = Math.abs(0 !== m3 ? 1 / m3 : 1);
        V > 8 && (V = 8), B2 >= 0 ? (c6 = i6.add(o6.x, o6.y, f3.x, f3.y, 0, 1, e5), -1 === _2 && (_2 = c6), h5 >= 0 && x2 >= 0 && c6 >= 0 && !n6 && l5.add(h5, x2, c6), x2 = i6.add(o6.x, o6.y, V * -d2.x, V * -d2.y, 0, -1, e5), -1 === y2 && (y2 = x2), h5 >= 0 && x2 >= 0 && c6 >= 0 && !n6 && l5.add(h5, x2, c6), h5 = x2, x2 = c6, c6 = i6.add(o6.x, o6.y, d2.x, d2.y, 0, 1, e5), h5 >= 0 && x2 >= 0 && c6 >= 0 && !n6 && l5.add(h5, x2, c6), x2 = i6.add(o6.x, o6.y, u4.x, u4.y, 0, 1, e5), h5 >= 0 && x2 >= 0 && c6 >= 0 && !n6 && l5.add(h5, x2, c6)) : (c6 = i6.add(o6.x, o6.y, V * d2.x, V * d2.y, 0, 1, e5), -1 === _2 && (_2 = c6), h5 >= 0 && x2 >= 0 && c6 >= 0 && !n6 && l5.add(h5, x2, c6), x2 = i6.add(o6.x, o6.y, -f3.x, -f3.y, 0, -1, e5), -1 === y2 && (y2 = x2), h5 >= 0 && x2 >= 0 && c6 >= 0 && !n6 && l5.add(h5, x2, c6), h5 = x2, x2 = c6, c6 = i6.add(o6.x, o6.y, -d2.x, -d2.y, 0, -1, e5), h5 >= 0 && x2 >= 0 && c6 >= 0 && !n6 && l5.add(h5, x2, c6), h5 = i6.add(o6.x, o6.y, -u4.x, -u4.y, 0, -1, e5), h5 >= 0 && x2 >= 0 && c6 >= 0 && !n6 && l5.add(h5, x2, c6));
      }
      h5 >= 0 && x2 >= 0 && _2 >= 0 && !g2 && l5.add(h5, x2, _2), h5 >= 0 && _2 >= 0 && y2 >= 0 && !g2 && l5.add(h5, y2, _2), this._outlineIndexCount += 3 * (l5.index - n5);
    }
  }
  _processFill(r6, l5, n5, s6, o6) {
    s6 = true;
    let a6;
    l5.length > 1 && (a6 = []);
    let f3 = 0;
    for (const t5 of l5)
      0 !== f3 && a6.push(f3), f3 += r6[t5].length;
    const u4 = 2 * f3, d2 = t.acquire();
    for (const t5 of l5) {
      const e5 = r6[t5], i6 = e5.length;
      for (let t6 = 0; t6 < i6; ++t6)
        d2.push(e5[t6].x, e5[t6].y);
    }
    const h5 = i(d2, a6, 2);
    if (s6 && i.deviation(d2, a6, 2, h5) > 0) {
      const t5 = l5.map((t6) => r6[t6].length), { buffer: e5, vertexCount: s7 } = a(d2, t5);
      if (s7 > 0) {
        const t6 = this._fillVertexBuffer.index;
        for (let i6 = 0; i6 < s7; i6++)
          this._fillVertexBuffer.add(e5[2 * i6], e5[2 * i6 + 1], n5);
        for (let e6 = 0; e6 < s7; e6 += 3) {
          const i6 = t6 + e6;
          this._fillIndexBuffer.add(i6, i6 + 1, i6 + 2);
        }
        if (void 0 !== o6) {
          const t7 = this._patternMap, e6 = t7.get(o6);
          e6 ? e6[1] += s7 : t7.set(o6, [this._fillIndexStart + this._fillIndexCount, s7]);
        }
        this._fillIndexCount += s7;
      }
    } else {
      const t5 = h5.length;
      if (t5 > 0) {
        const e5 = this._fillVertexBuffer.index;
        let i6 = 0;
        for (; i6 < u4; )
          this._fillVertexBuffer.add(d2[i6++], d2[i6++], n5);
        let r7 = 0;
        for (; r7 < t5; )
          this._fillIndexBuffer.add(e5 + h5[r7++], e5 + h5[r7++], e5 + h5[r7++]);
        if (void 0 !== o6) {
          const e6 = this._patternMap, i7 = e6.get(o6);
          i7 ? i7[1] += t5 : e6.set(o6, [this._fillIndexStart + this._fillIndexCount, t5]);
        }
        this._fillIndexCount += t5;
      }
    }
    t.release(d2);
  }
  _isClipEdge(t5, e5) {
    return t5.x === e5.x ? t5.x <= -64 || t5.x >= 4160 : t5.y === e5.y && (t5.y <= -64 || t5.y >= 4160);
  }
  static _area(t5) {
    let e5 = 0;
    const i6 = t5.length - 1;
    for (let r6 = 0; r6 < i6; r6++)
      e5 += (t5[r6].x - t5[r6 + 1].x) * (t5[r6].y + t5[r6 + 1].y);
    return e5 += (t5[i6].x - t5[0].x) * (t5[i6].y + t5[0].y), 0.5 * e5;
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/buckets/LineBucket.js
var s5 = 65535;
var n4 = class extends t4 {
  constructor(t5, s6, n5, a6, o6) {
    super(t5, s6, n5), this.type = E.LINE, this._tessellationOptions = { pixelCoordRatio: 8, halfWidth: 0, offset: 0 }, this._patternMap = /* @__PURE__ */ new Map(), this.tessellationProperties = { _lineVertexBuffer: null, _lineIndexBuffer: null, _ddValues: null }, this.tessellationProperties._lineVertexBuffer = a6, this.tessellationProperties._lineIndexBuffer = o6, this._lineTessellator = new c3(r5(this.tessellationProperties), l4(this.tessellationProperties), t5.canUseThinTessellation);
  }
  get lineIndexStart() {
    return this._lineIndexStart;
  }
  get lineIndexCount() {
    return this._lineIndexCount;
  }
  getResources(e5, t5, i6) {
    const s6 = this.layer, n5 = this.zoom, r6 = s6.getPaintProperty("line-pattern"), l5 = s6.getPaintProperty("line-dasharray"), a6 = s6.getLayoutProperty("line-cap");
    if (!r6 && !l5)
      return;
    const o6 = (a6 == null ? void 0 : a6.getValue(n5)) || 0, u4 = a6 == null ? void 0 : a6.isDataDriven, f3 = r6 == null ? void 0 : r6.isDataDriven, h5 = l5 == null ? void 0 : l5.isDataDriven;
    if (f3 || h5)
      for (const p4 of this._features)
        t5(f3 ? r6.getValue(n5, p4) : this._getDashArrayKey(p4, n5, s6, l5, u4, a6, o6));
    else if (r6)
      t5(r6.getValue(n5));
    else if (l5) {
      const e6 = l5.getValue(n5);
      t5(s6.getDashKey(e6, o6));
    }
  }
  processFeatures(e5) {
    this._lineIndexStart = 3 * this.tessellationProperties._lineIndexBuffer.index, this._lineIndexCount = 0;
    const t5 = this.layer, i6 = this.zoom, s6 = this._features, n5 = this._tessellationOptions, { hasDataDrivenLine: r6, lineMaterial: l5 } = t5;
    e5 && e5.setExtent(this.layerExtent);
    const a6 = t5.getPaintProperty("line-pattern"), o6 = t5.getPaintProperty("line-dasharray"), u4 = a6 == null ? void 0 : a6.isDataDriven, f3 = o6 == null ? void 0 : o6.isDataDriven;
    let h5;
    h5 = t5.getLayoutProperty("line-cap");
    const p4 = (h5 == null ? void 0 : h5.isDataDriven) ? h5 : null, g2 = p4 ? null : t5.getLayoutValue("line-cap", i6), y2 = g2 || 0, d2 = !!p4;
    h5 = t5.getLayoutProperty("line-join");
    const c6 = (h5 == null ? void 0 : h5.isDataDriven) ? h5 : null, _2 = c6 ? null : t5.getLayoutValue("line-join", i6);
    h5 = t5.getLayoutProperty("line-miter-limit");
    const x2 = (h5 == null ? void 0 : h5.isDataDriven) ? h5 : null, V = x2 ? null : t5.getLayoutValue("line-miter-limit", i6);
    h5 = t5.getLayoutProperty("line-round-limit");
    const m2 = (h5 == null ? void 0 : h5.isDataDriven) ? h5 : null, D = m2 ? null : t5.getLayoutValue("line-round-limit", i6);
    h5 = t5.getPaintProperty("line-width");
    const P = (h5 == null ? void 0 : h5.isDataDriven) ? h5 : null, I4 = P ? null : t5.getPaintValue("line-width", i6);
    h5 = t5.getPaintProperty("line-offset");
    const L2 = (h5 == null ? void 0 : h5.isDataDriven) ? h5 : null, B = L2 ? null : t5.getPaintValue("line-offset", i6);
    if (u4 || f3) {
      const r7 = [];
      for (const n6 of s6) {
        const s7 = u4 ? a6.getValue(i6, n6) : this._getDashArrayKey(n6, i6, t5, o6, d2, p4, y2), f4 = this._spriteInfo[s7];
        if (!(f4 == null ? void 0 : f4.rect))
          continue;
        const h6 = l5.encodeAttributes(n6, i6, t5, f4), v = n6.getGeometry(e5);
        r7.push({ ddAttributes: h6, page: f4.page, cap: p4 ? p4.getValue(i6, n6) : g2, join: c6 ? c6.getValue(i6, n6) : _2, miterLimit: x2 ? x2.getValue(i6, n6) : V, roundLimit: m2 ? m2.getValue(i6, n6) : D, halfWidth: 0.5 * (P ? P.getValue(i6, n6) : I4), offset: L2 ? L2.getValue(i6, n6) : B, geometry: v });
      }
      r7.sort((e6, t6) => e6.page - t6.page), n5.textured = true;
      for (const { ddAttributes: e6, page: t6, cap: i7, join: s7, miterLimit: l6, roundLimit: a7, halfWidth: o7, offset: u5, geometry: f4 } of r7)
        n5.capType = i7, n5.joinType = s7, n5.miterLimit = l6, n5.roundLimit = a7, n5.halfWidth = o7, n5.offset = u5, this._processFeature(f4, e6, t6);
    } else {
      if (a6) {
        const e6 = a6.getValue(i6), t6 = this._spriteInfo[e6];
        if (!(t6 == null ? void 0 : t6.rect))
          return;
      }
      n5.textured = !(!a6 && !o6), n5.capType = g2, n5.joinType = _2, n5.miterLimit = V, n5.roundLimit = D, n5.halfWidth = 0.5 * I4, n5.offset = B;
      for (const a7 of s6) {
        const s7 = r6 ? l5.encodeAttributes(a7, i6, t5) : null;
        p4 && (n5.capType = p4.getValue(i6, a7)), c6 && (n5.joinType = c6.getValue(i6, a7)), x2 && (n5.miterLimit = x2.getValue(i6, a7)), m2 && (n5.roundLimit = m2.getValue(i6, a7)), P && (n5.halfWidth = 0.5 * P.getValue(i6, a7)), L2 && (n5.offset = L2.getValue(i6, a7));
        const o7 = a7.getGeometry(e5);
        this._processFeature(o7, s7);
      }
    }
  }
  serialize() {
    let e5 = 6;
    e5 += this.layerUIDs.length, e5 += this.tessellationProperties._lineVertexBuffer.array.length, e5 += this.tessellationProperties._lineIndexBuffer.array.length, e5 += 3 * this._patternMap.size + 1;
    const t5 = new Uint32Array(e5), i6 = new Int32Array(t5.buffer);
    let s6 = 0;
    t5[s6++] = this.type, t5[s6++] = this.layerUIDs.length;
    for (let l5 = 0; l5 < this.layerUIDs.length; l5++)
      t5[s6++] = this.layerUIDs[l5];
    t5[s6++] = this._lineIndexStart, t5[s6++] = this._lineIndexCount;
    const n5 = this._patternMap, r6 = n5.size;
    if (t5[s6++] = r6, r6 > 0)
      for (const [l5, [a6, o6]] of n5)
        t5[s6++] = l5, t5[s6++] = a6, t5[s6++] = o6;
    t5[s6++] = this.tessellationProperties._lineVertexBuffer.array.length;
    for (let l5 = 0; l5 < this.tessellationProperties._lineVertexBuffer.array.length; l5++)
      i6[s6++] = this.tessellationProperties._lineVertexBuffer.array[l5];
    t5[s6++] = this.tessellationProperties._lineIndexBuffer.array.length;
    for (let l5 = 0; l5 < this.tessellationProperties._lineIndexBuffer.array.length; l5++)
      t5[s6++] = this.tessellationProperties._lineIndexBuffer.array[l5];
    return t5.buffer;
  }
  _processFeature(e5, t5, i6) {
    if (!e5)
      return;
    const s6 = e5.length;
    for (let n5 = 0; n5 < s6; n5++)
      this._processGeometry(e5[n5], t5, i6);
  }
  _processGeometry(e5, t5, i6) {
    if (e5.length < 2)
      return;
    const n5 = 1e-3;
    let r6, l5, a6 = e5[0], o6 = 1;
    for (; o6 < e5.length; )
      r6 = e5[o6].x - a6.x, l5 = e5[o6].y - a6.y, r6 * r6 + l5 * l5 < n5 * n5 ? e5.splice(o6, 1) : (a6 = e5[o6], ++o6);
    if (e5.length < 2)
      return;
    const u4 = this.tessellationProperties._lineIndexBuffer, f3 = 3 * u4.index;
    this._tessellationOptions.initialDistance = 0, this._tessellationOptions.wrapDistance = s5, this.tessellationProperties._ddValues = t5, this._lineTessellator.tessellate(e5, this._tessellationOptions);
    const h5 = 3 * u4.index - f3;
    if (void 0 !== i6) {
      const e6 = this._patternMap, t6 = e6.get(i6);
      t6 ? t6[1] += h5 : e6.set(i6, [f3 + this._lineIndexCount, h5]);
    }
    this._lineIndexCount += h5;
  }
  _getDashArrayKey(e5, t5, i6, s6, n5, r6, l5) {
    const a6 = n5 ? r6.getValue(t5, e5) : l5, o6 = s6.getValue(t5, e5);
    return i6.getDashKey(o6, a6);
  }
};
var r5 = (e5) => (t5, i6, s6, n5, r6, l5, a6, o6, u4, f3, h5) => (e5._lineVertexBuffer.add(t5, i6, a6, o6, s6, n5, r6, l5, u4, f3, h5, e5._ddValues), e5._lineVertexBuffer.index - 1);
var l4 = (e5) => (t5, i6, s6) => {
  e5._lineIndexBuffer.add(t5, i6, s6);
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/buckets/SymbolBucket.js
var b3 = 10;
function A(e5, t5) {
  return e5.iconMosaicItem && t5.iconMosaicItem ? e5.iconMosaicItem.page === t5.iconMosaicItem.page ? 0 : e5.iconMosaicItem.page - t5.iconMosaicItem.page : e5.iconMosaicItem && !t5.iconMosaicItem ? 1 : !e5.iconMosaicItem && t5.iconMosaicItem ? -1 : 0;
}
var L = class _L extends t4 {
  constructor(e5, t5, n5, i6, s6, o6, r6, l5, h5) {
    super(t5, n5, h5.getSpriteItems()), this.type = E.SYMBOL, this._markerMap = /* @__PURE__ */ new Map(), this._glyphMap = /* @__PURE__ */ new Map(), this._glyphBufferDataStorage = /* @__PURE__ */ new Map(), this._isIconSDF = false, this._sourceTileKey = e5, this._iconVertexBuffer = i6, this._iconIndexBuffer = s6, this._textVertexBuffer = o6, this._textIndexBuffer = r6, this._placementEngine = l5, this._workerTileHandler = h5;
  }
  get markerPageMap() {
    return this._markerMap;
  }
  get glyphsPageMap() {
    return this._glyphMap;
  }
  get symbolInstances() {
    return this._symbolInstances;
  }
  getResources(e5, t5, i6) {
    const s6 = this.layer, a6 = this.zoom;
    e5 && e5.setExtent(this.layerExtent);
    const o6 = s6.getLayoutProperty("icon-image"), r6 = s6.getLayoutProperty("text-field");
    let l5 = s6.getLayoutProperty("text-transform"), h5 = s6.getLayoutProperty("text-font");
    const x2 = [];
    let c6, d2, f3, g2;
    o6 && !o6.isDataDriven && (c6 = o6.getValue(a6)), r6 && !r6.isDataDriven && (d2 = r6.getValue(a6)), l5 && l5.isDataDriven || (f3 = s6.getLayoutValue("text-transform", a6), l5 = null), h5 && h5.isDataDriven || (g2 = s6.getLayoutValue("text-font", a6), h5 = null);
    for (const m2 of this._features) {
      const u4 = m2.getGeometry(e5);
      if (!u4 || 0 === u4.length)
        continue;
      let p4, _2;
      o6 && (p4 = o6.isDataDriven ? o6.getValue(a6, m2) : this._replaceKeys(c6, m2.values), p4 && t5(p4));
      let M = false;
      if (r6 && (_2 = r6.isDataDriven ? r6.getValue(a6, m2) : this._replaceKeys(d2, m2.values), _2)) {
        switch (_2 = _2.replaceAll("\\n", "\n"), l5 && (f3 = l5.getValue(a6, m2)), f3) {
          case o3.LOWERCASE:
            _2 = _2.toLowerCase();
            break;
          case o3.UPPERCASE:
            _2 = _2.toUpperCase();
        }
        if (_L._bidiEngine.hasBidiChar(_2)) {
          let e6;
          e6 = "rtl" === _L._bidiEngine.checkContextual(_2) ? "IDNNN" : "ICNNN", _2 = _L._bidiEngine.bidiTransform(_2, e6, "VLYSN"), M = true;
        }
        if (_2.length > 0) {
          h5 && (g2 = h5.getValue(a6, m2));
          for (const e6 of g2) {
            let t6 = i6[e6];
            t6 || (t6 = i6[e6] = /* @__PURE__ */ new Set());
            for (const e7 of _2) {
              const n5 = e7.codePointAt(0);
              null != n5 && t6.add(n5);
            }
          }
        }
      }
      if (!p4 && !_2)
        continue;
      const P = s6.getLayoutValue("symbol-sort-key", a6, m2), I4 = { feature: m2, sprite: p4, label: _2, rtl: M, geometry: u4, hash: (_2 ? c(_2) : 0) ^ (p4 ? c(p4) : 0), priority: P, textFont: g2 };
      x2.push(I4);
    }
    this._symbolFeatures = x2;
  }
  processFeatures(e5) {
    e5 && e5.setExtent(this.layerExtent);
    const n5 = this.layer, s6 = this.zoom, a6 = n5.getLayoutValue("symbol-placement", s6), r6 = a6 !== n3.POINT, l5 = n5.getLayoutValue("symbol-spacing", s6) * p3, g2 = n5.getLayoutProperty("icon-image"), y2 = n5.getLayoutProperty("text-field"), b4 = g2 ? new U(n5, s6, r6) : null, T2 = y2 ? new O(n5, s6, r6) : null, V = this._workerTileHandler;
    let w2;
    g2 && (w2 = V.getSpriteItems()), this._iconIndexStart = 3 * this._iconIndexBuffer.index, this._textIndexStart = 3 * this._textIndexBuffer.index, this._iconIndexCount = 0, this._textIndexCount = 0, this._markerMap.clear(), this._glyphMap.clear();
    const B = [];
    let C2 = 1;
    T2 && T2.size && (C2 = T2.size / c5);
    const R = T2 ? T2.maxAngle * s : 0, D = T2 ? T2.size * p3 : 0;
    for (const o6 of this._symbolFeatures) {
      let e6;
      b4 && w2 && o6.sprite && (e6 = w2[o6.sprite], e6 && e6.sdf && (this._isIconSDF = true));
      let n6;
      !!e6 && b4.update(s6, o6.feature);
      let g3 = 0;
      const y3 = o6.label;
      if (y3) {
        n(T2), T2.update(s6, o6.feature);
        const e7 = r6 && T2.rotationAlignment === l.MAP ? T2.keepUpright : T2.writingMode && T2.writingMode.includes(p2.VERTICAL);
        let i6 = 0.5;
        switch (T2.anchor) {
          case m.TOP_LEFT:
          case m.LEFT:
          case m.BOTTOM_LEFT:
            i6 = 0;
            break;
          case m.TOP_RIGHT:
          case m.RIGHT:
          case m.BOTTOM_RIGHT:
            i6 = 1;
        }
        let a7 = 0.5;
        switch (T2.anchor) {
          case m.TOP_LEFT:
          case m.TOP:
          case m.TOP_RIGHT:
            a7 = 0;
            break;
          case m.BOTTOM_LEFT:
          case m.BOTTOM:
          case m.BOTTOM_RIGHT:
            a7 = 1;
        }
        let l6 = 0.5;
        switch (T2.justify) {
          case u.AUTO:
            l6 = i6;
            break;
          case u.LEFT:
            l6 = 0;
            break;
          case u.RIGHT:
            l6 = 1;
        }
        const x2 = T2.letterSpacing * c5, c6 = r6 ? 0 : T2.maxWidth * c5, m2 = T2.lineHeight * c5, P = o6.textFont.map((e8) => V.getGlyphItems(e8));
        if (n6 = new l3(P, c6, m2, x2, i6, a7, l6).getShaping(y3, o6.rtl, e7), n6 && n6.length > 0) {
          let e8 = 1e30, t5 = -1e30;
          for (const i7 of n6)
            e8 = Math.min(e8, i7.x), t5 = Math.max(t5, i7.x);
          g3 = (t5 - e8 + 2 * c5) * C2 * p3;
        }
      }
      for (let t5 of o6.geometry) {
        const s7 = [];
        if (a6 === n3.LINE) {
          if ((n6 == null ? void 0 : n6.length) && (T2 == null ? void 0 : T2.size)) {
            const e7 = T2.size * p3 * (2 + Math.min(2, 4 * Math.abs(T2.offset[1])));
            t5 = _L._smoothVertices(t5, e7);
          }
          _L._pushAnchors(s7, t5, l5, g3);
        } else
          a6 === n3.LINE_CENTER ? _L._pushCenterAnchor(s7, t5) : o6.feature.type === i3.Polygon ? _L._pushCentroid(s7, t5) : s7.push(new y(t5[0].x, t5[0].y));
        for (const i6 of s7) {
          if (i6.x < 0 || i6.x > x || i6.y < 0 || i6.y > x)
            continue;
          if (r6 && g3 > 0 && (T2 == null ? void 0 : T2.rotationAlignment) === l.MAP && !_L._honorsTextMaxAngle(t5, i6, g3, R, D))
            continue;
          const s8 = { shaping: n6, line: t5, iconMosaicItem: e6, anchor: i6, symbolFeature: o6, textColliders: [], iconColliders: [], textVertexRanges: [], iconVertexRanges: [] };
          B.push(s8), this._processFeature(s8, b4, T2);
        }
      }
    }
    B.sort(A), this._addPlacedGlyphs(), this._symbolInstances = B;
  }
  serialize() {
    let e5 = 14;
    e5 += this.layerUIDs.length, e5 += 3 * this.markerPageMap.size, e5 += 3 * this.glyphsPageMap.size, e5 += _L._symbolsSerializationLength(this._symbolInstances), e5 += this._iconVertexBuffer.array.length, e5 += this._iconIndexBuffer.array.length, e5 += this._textVertexBuffer.array.length, e5 += this._textIndexBuffer.array.length;
    const t5 = new Uint32Array(e5), n5 = new Int32Array(t5.buffer), i6 = new Float32Array(t5.buffer), [s6, a6, o6] = this._sourceTileKey.split("/");
    let r6 = 0;
    t5[r6++] = this.type, t5[r6++] = this.layerUIDs.length;
    for (let l5 = 0; l5 < this.layerUIDs.length; l5++)
      t5[r6++] = this.layerUIDs[l5];
    t5[r6++] = this._isIconSDF ? 1 : 0, t5[r6++] = parseFloat(s6), t5[r6++] = parseFloat(a6), t5[r6++] = parseFloat(o6), t5[r6++] = this.markerPageMap.size;
    for (const [l5, [h5, x2]] of this.markerPageMap)
      t5[r6++] = l5, t5[r6++] = h5, t5[r6++] = x2;
    t5[r6++] = this.glyphsPageMap.size;
    for (const [l5, [h5, x2]] of this.glyphsPageMap)
      t5[r6++] = l5, t5[r6++] = h5, t5[r6++] = x2;
    t5[r6++] = this._iconVertexBuffer.index / 4, t5[r6++] = this._textVertexBuffer.index / 4, r6 = _L.serializeSymbols(t5, n5, i6, r6, this._symbolInstances), t5[r6++] = this._iconVertexBuffer.array.length;
    for (let l5 = 0; l5 < this._iconVertexBuffer.array.length; l5++)
      n5[r6++] = this._iconVertexBuffer.array[l5];
    t5[r6++] = this._iconIndexBuffer.array.length;
    for (let l5 = 0; l5 < this._iconIndexBuffer.array.length; l5++)
      t5[r6++] = this._iconIndexBuffer.array[l5];
    t5[r6++] = this._textVertexBuffer.array.length;
    for (let l5 = 0; l5 < this._textVertexBuffer.array.length; l5++)
      n5[r6++] = this._textVertexBuffer.array[l5];
    t5[r6++] = this._textIndexBuffer.array.length;
    for (let l5 = 0; l5 < this._textIndexBuffer.array.length; l5++)
      t5[r6++] = this._textIndexBuffer.array[l5];
    return t5.buffer;
  }
  static _symbolsSerializationLength(e5) {
    let t5 = 0;
    t5 += 1;
    for (const n5 of e5 || []) {
      t5 += 5, t5 += 1;
      for (const e6 of n5.textColliders)
        t5 += b3;
      for (const e6 of n5.iconColliders)
        t5 += b3;
      t5 += 1, t5 += 2 * n5.textVertexRanges.length, t5 += 1, t5 += 2 * n5.iconVertexRanges.length;
    }
    return t5;
  }
  static serializeSymbols(e5, t5, n5, i6, s6) {
    s6 = s6 || [], t5[i6++] = s6.length;
    for (const a6 of s6) {
      t5[i6++] = a6.anchor.x, t5[i6++] = a6.anchor.y, t5[i6++] = a6.symbolFeature.hash, t5[i6++] = a6.symbolFeature.priority, t5[i6++] = a6.symbolFeature.feature.featureIndex, t5[i6++] = a6.textColliders.length + a6.iconColliders.length;
      for (const e6 of a6.textColliders)
        t5[i6++] = e6.xTile, t5[i6++] = e6.yTile, t5[i6++] = e6.dxPixels, t5[i6++] = e6.dyPixels, t5[i6++] = e6.hard ? 1 : 0, t5[i6++] = e6.partIndex, n5[i6++] = e6.minLod, n5[i6++] = e6.maxLod, t5[i6++] = e6.width, t5[i6++] = e6.height;
      for (const e6 of a6.iconColliders)
        t5[i6++] = e6.xTile, t5[i6++] = e6.yTile, t5[i6++] = e6.dxPixels, t5[i6++] = e6.dyPixels, t5[i6++] = e6.hard ? 1 : 0, t5[i6++] = e6.partIndex, n5[i6++] = e6.minLod, n5[i6++] = e6.maxLod, t5[i6++] = e6.width, t5[i6++] = e6.height;
      t5[i6++] = a6.textVertexRanges.length;
      for (const [e6, n6] of a6.textVertexRanges)
        t5[i6++] = e6, t5[i6++] = n6;
      t5[i6++] = a6.iconVertexRanges.length;
      for (const [e6, n6] of a6.iconVertexRanges)
        t5[i6++] = e6, t5[i6++] = n6;
    }
    return i6;
  }
  _replaceKeys(e5, t5) {
    return e5.replaceAll(/{([^{}]+)}/g, (e6, n5) => n5 in t5 ? t5[n5] : "");
  }
  _processFeature(e5, t5, n5) {
    const { line: i6, iconMosaicItem: s6, shaping: a6, anchor: o6 } = e5, l5 = this.zoom, h5 = this.layer, x2 = !!s6;
    let c6 = true;
    x2 && (c6 = (t5 == null ? void 0 : t5.optional) || !s6);
    const d2 = a6 && a6.length > 0, f3 = !d2 || (n5 == null ? void 0 : n5.optional);
    let g2, y2;
    if (x2 && (g2 = this._placementEngine.getIconPlacement(o6, s6, t5)), (g2 || c6) && (d2 && (y2 = this._placementEngine.getTextPlacement(o6, a6, i6, n5)), y2 || f3)) {
      if (g2 && y2 || (f3 || c6 ? f3 || y2 ? c6 || g2 || (y2 = null) : g2 = null : (g2 = null, y2 = null)), y2) {
        const t6 = h5.hasDataDrivenText ? h5.textMaterial.encodeAttributes(e5.symbolFeature.feature, l5, h5) : null;
        if (this._storePlacedGlyphs(e5, y2.shapes, l5, n5.rotationAlignment, t6), y2.textColliders) {
          e5.textColliders = y2.textColliders;
          for (const e6 of y2.textColliders) {
            e6.minLod = Math.max(l5 + h2(e6.minLod), 0), e6.maxLod = Math.min(l5 + h2(e6.maxLod), 25);
            const t7 = e6.angle;
            if (t7) {
              const n6 = Math.cos(t7), i7 = Math.sin(t7), s7 = e6.dxPixels * n6 - e6.dyPixels * i7, a7 = e6.dxPixels * i7 + e6.dyPixels * n6, o7 = (e6.dxPixels + e6.width) * n6 - e6.dyPixels * i7, r6 = (e6.dxPixels + e6.width) * i7 + e6.dyPixels * n6, l6 = e6.dxPixels * n6 - (e6.dyPixels + e6.height) * i7, h6 = e6.dxPixels * i7 + (e6.dyPixels + e6.height) * n6, x3 = (e6.dxPixels + e6.width) * n6 - (e6.dyPixels + e6.height) * i7, c7 = (e6.dxPixels + e6.width) * i7 + (e6.dyPixels + e6.height) * n6, d3 = Math.min(s7, o7, l6, x3), f4 = Math.max(s7, o7, l6, x3), g3 = Math.min(a7, r6, h6, c7), y3 = Math.max(a7, r6, h6, c7);
              e6.dxPixels = d3, e6.dyPixels = g3, e6.width = f4 - d3, e6.height = y3 - g3;
            }
          }
        }
      }
      if (g2) {
        const n6 = h5.hasDataDrivenIcon ? h5.iconMaterial.encodeAttributes(e5.symbolFeature.feature, l5, h5) : null;
        if (this._addPlacedIcons(e5, g2.shapes, l5, s6.page, t5.rotationAlignment === l.VIEWPORT, n6), g2.iconColliders) {
          e5.iconColliders = g2.iconColliders;
          for (const e6 of g2.iconColliders) {
            e6.minLod = Math.max(l5 + h2(e6.minLod), 0), e6.maxLod = Math.min(l5 + h2(e6.maxLod), 25);
            const t6 = e6.angle;
            if (t6) {
              const n7 = Math.cos(t6), i7 = Math.sin(t6), s7 = e6.dxPixels * n7 - e6.dyPixels * i7, a7 = e6.dxPixels * i7 + e6.dyPixels * n7, o7 = (e6.dxPixels + e6.width) * n7 - e6.dyPixels * i7, r6 = (e6.dxPixels + e6.width) * i7 + e6.dyPixels * n7, l6 = e6.dxPixels * n7 - (e6.dyPixels + e6.height) * i7, h6 = e6.dxPixels * i7 + (e6.dyPixels + e6.height) * n7, x3 = (e6.dxPixels + e6.width) * n7 - (e6.dyPixels + e6.height) * i7, c7 = (e6.dxPixels + e6.width) * i7 + (e6.dyPixels + e6.height) * n7, d3 = Math.min(s7, o7, l6, x3), f4 = Math.max(s7, o7, l6, x3), g3 = Math.min(a7, r6, h6, c7), y3 = Math.max(a7, r6, h6, c7);
              e6.dxPixels = d3, e6.dyPixels = g3, e6.width = f4 - d3, e6.height = y3 - g3;
            }
          }
        }
      }
    }
  }
  _addPlacedIcons(e5, t5, n5, i6, s6, a6) {
    const o6 = Math.max(n5 - 1, 0), l5 = this._iconVertexBuffer, h5 = this._iconIndexBuffer, x2 = this._markerMap;
    for (const c6 of t5) {
      const t6 = s6 ? 0 : Math.max(n5 + h2(c6.minzoom), o6), d2 = s6 ? 25 : Math.min(n5 + h2(c6.maxzoom), 25);
      if (d2 <= t6)
        continue;
      const f3 = c6.tl, g2 = c6.tr, y2 = c6.bl, m2 = c6.br, u4 = c6.mosaicRect, p4 = c6.labelAngle, _2 = c6.minAngle, M = c6.maxAngle, P = c6.anchor, I4 = l5.index, b4 = u4.x, A2 = u4.y, L2 = b4 + u4.width, T2 = A2 + u4.height, V = l5.index;
      l5.add(P.x, P.y, f3.x, f3.y, b4, A2, p4, _2, M, t6, d2, a6), l5.add(P.x, P.y, g2.x, g2.y, L2, A2, p4, _2, M, t6, d2, a6), l5.add(P.x, P.y, y2.x, y2.y, b4, T2, p4, _2, M, t6, d2, a6), l5.add(P.x, P.y, m2.x, m2.y, L2, T2, p4, _2, M, t6, d2, a6), e5.iconVertexRanges.length > 0 && e5.iconVertexRanges[0][0] + e5.iconVertexRanges[0][1] === V ? e5.iconVertexRanges[0][1] += 4 : e5.iconVertexRanges.push([V, 4]), h5.add(I4, I4 + 1, I4 + 2), h5.add(I4 + 1, I4 + 2, I4 + 3), x2.has(i6) ? x2.get(i6)[1] += 6 : x2.set(i6, [this._iconIndexStart + this._iconIndexCount, 6]), this._iconIndexCount += 6;
    }
  }
  _addPlacedGlyphs() {
    const e5 = this._textVertexBuffer, t5 = this._textIndexBuffer, n5 = this._glyphMap;
    for (const [i6, s6] of this._glyphBufferDataStorage)
      for (const a6 of s6) {
        const s7 = e5.index, o6 = a6.symbolInstance, r6 = a6.ddAttributes, l5 = e5.index;
        e5.add(a6.glyphAnchor[0], a6.glyphAnchor[1], a6.tl[0], a6.tl[1], a6.xmin, a6.ymin, a6.labelAngle, a6.minAngle, a6.maxAngle, a6.minLod, a6.maxLod, r6), e5.add(a6.glyphAnchor[0], a6.glyphAnchor[1], a6.tr[0], a6.tr[1], a6.xmax, a6.ymin, a6.labelAngle, a6.minAngle, a6.maxAngle, a6.minLod, a6.maxLod, r6), e5.add(a6.glyphAnchor[0], a6.glyphAnchor[1], a6.bl[0], a6.bl[1], a6.xmin, a6.ymax, a6.labelAngle, a6.minAngle, a6.maxAngle, a6.minLod, a6.maxLod, r6), e5.add(a6.glyphAnchor[0], a6.glyphAnchor[1], a6.br[0], a6.br[1], a6.xmax, a6.ymax, a6.labelAngle, a6.minAngle, a6.maxAngle, a6.minLod, a6.maxLod, r6), o6.textVertexRanges.length > 0 && o6.textVertexRanges[0][0] + o6.textVertexRanges[0][1] === l5 ? o6.textVertexRanges[0][1] += 4 : o6.textVertexRanges.push([l5, 4]), t5.add(s7, s7 + 1, s7 + 2), t5.add(s7 + 1, s7 + 2, s7 + 3), n5.has(i6) ? n5.get(i6)[1] += 6 : n5.set(i6, [this._textIndexStart + this._textIndexCount, 6]), this._textIndexCount += 6;
      }
    this._glyphBufferDataStorage.clear();
  }
  _storePlacedGlyphs(e5, t5, n5, i6, s6) {
    const a6 = Math.max(n5 - 1, 0), o6 = i6 === l.VIEWPORT;
    let l5, h5, x2, c6, d2, f3, g2, y2, m2, p4, _2;
    for (const u4 of t5) {
      if (l5 = o6 ? 0 : Math.max(n5 + h2(u4.minzoom), a6), h5 = o6 ? 25 : Math.min(n5 + h2(u4.maxzoom), 25), h5 <= l5)
        continue;
      x2 = u4.tl, c6 = u4.tr, d2 = u4.bl, f3 = u4.br, g2 = u4.labelAngle, y2 = u4.minAngle, m2 = u4.maxAngle, p4 = u4.anchor, _2 = u4.mosaicRect, this._glyphBufferDataStorage.has(u4.page) || this._glyphBufferDataStorage.set(u4.page, []);
      this._glyphBufferDataStorage.get(u4.page).push({ glyphAnchor: [p4.x, p4.y], tl: [x2.x, x2.y], tr: [c6.x, c6.y], bl: [d2.x, d2.y], br: [f3.x, f3.y], xmin: _2.x, ymin: _2.y, xmax: _2.x + _2.width, ymax: _2.y + _2.height, labelAngle: g2, minAngle: y2, maxAngle: m2, minLod: l5, maxLod: h5, placementLod: a6, symbolInstance: e5, ddAttributes: s6 });
    }
  }
  static _pushAnchors(e5, t5, n5, i6) {
    n5 += i6;
    let a6 = 0;
    const o6 = t5.length - 1;
    for (let l5 = 0; l5 < o6; l5++)
      a6 += h.distance(t5[l5], t5[l5 + 1]);
    let r6 = i6 || n5;
    if (r6 *= 0.5, a6 <= r6)
      return;
    const h5 = r6 / a6;
    let c6 = 0, d2 = -(n5 = a6 / Math.max(Math.round(a6 / n5), 1)) / 2;
    const f3 = t5.length - 1;
    for (let s6 = 0; s6 < f3; s6++) {
      const i7 = t5[s6], a7 = t5[s6 + 1], o7 = a7.x - i7.x, r7 = a7.y - i7.y, f4 = Math.sqrt(o7 * o7 + r7 * r7);
      let g2;
      for (; d2 + n5 < c6 + f4; ) {
        d2 += n5;
        const t6 = (d2 - c6) / f4, y2 = p(i7.x, a7.x, t6), m2 = p(i7.y, a7.y, t6);
        void 0 === g2 && (g2 = Math.atan2(r7, o7)), e5.push(new y(y2, m2, g2, s6, h5));
      }
      c6 += f4;
    }
  }
  static _pushCenterAnchor(e5, t5) {
    let n5 = 0;
    const i6 = t5.length - 1;
    for (let l5 = 0; l5 < i6; l5++)
      n5 += h.distance(t5[l5], t5[l5 + 1]);
    const a6 = n5 / 2;
    let o6 = 0;
    const r6 = t5.length - 1;
    for (let s6 = 0; s6 < r6; s6++) {
      const n6 = t5[s6], i7 = t5[s6 + 1], r7 = i7.x - n6.x, h5 = i7.y - n6.y, c6 = Math.sqrt(r7 * r7 + h5 * h5);
      if (a6 < o6 + c6) {
        const t6 = (a6 - o6) / c6, d2 = p(n6.x, i7.x, t6), f3 = p(n6.y, i7.y, t6), g2 = Math.atan2(h5, r7);
        return void e5.push(new y(d2, f3, g2, s6, 0));
      }
      o6 += c6;
    }
  }
  static _deviation(e5, t5, n5) {
    const i6 = (t5.x - e5.x) * (n5.x - t5.x) + (t5.y - e5.y) * (n5.y - t5.y), s6 = (t5.x - e5.x) * (n5.y - t5.y) - (t5.y - e5.y) * (n5.x - t5.x);
    return Math.atan2(s6, i6);
  }
  static _honorsTextMaxAngle(e5, t5, n5, i6, a6) {
    let o6 = 0;
    const r6 = n5 / 2;
    let l5 = new h(t5.x, t5.y), h5 = t5.segment + 1;
    for (; o6 > -r6; ) {
      if (--h5, h5 < 0)
        return false;
      o6 -= h.distance(e5[h5], l5), l5 = e5[h5];
    }
    o6 += h.distance(e5[h5], e5[h5 + 1]);
    const x2 = [];
    let c6 = 0;
    const d2 = e5.length;
    for (; o6 < r6; ) {
      const t6 = e5[h5];
      let n6, r7 = h5;
      do {
        if (++r7, r7 === d2)
          return false;
        n6 = e5[r7];
      } while (n6.isEqual(t6));
      let l6, f3 = r7;
      do {
        if (++f3, f3 === d2)
          return false;
        l6 = e5[f3];
      } while (l6.isEqual(n6));
      const g2 = this._deviation(t6, n6, l6);
      for (x2.push({ deviation: g2, distToAnchor: o6 }), c6 += g2; o6 - x2[0].distToAnchor > a6; )
        c6 -= x2.shift().deviation;
      if (Math.abs(c6) > i6)
        return false;
      o6 += h.distance(n6, l6), h5 = r7;
    }
    return true;
  }
  static _smoothVertices(e5, t5) {
    if (t5 <= 0)
      return e5;
    let n5 = e5.length;
    if (n5 < 3)
      return e5;
    const i6 = [];
    let a6 = 0, o6 = 0;
    i6.push(0);
    for (let y2 = 1; y2 < n5; y2++) {
      const t6 = h.distance(e5[y2], e5[y2 - 1]);
      t6 > 0 && (a6 += t6, i6.push(a6), o6++, o6 !== y2 && (e5[o6] = e5[y2]));
    }
    if (n5 = o6 + 1, n5 < 3)
      return e5;
    t5 = Math.min(t5, 0.2 * a6);
    const r6 = e5[0].x, l5 = e5[0].y, h5 = e5[n5 - 1].x, x2 = e5[n5 - 1].y, c6 = h.sub(e5[0], e5[1]);
    c6.normalize(), e5[0].x += t5 * c6.x, e5[0].y += t5 * c6.y, c6.assignSub(e5[n5 - 1], e5[n5 - 2]), c6.normalize(), e5[n5 - 1].x += t5 * c6.x, e5[n5 - 1].y += t5 * c6.y, i6[0] -= t5, i6[n5 - 1] += t5;
    const d2 = [];
    d2.push(new h(r6, l5));
    const f3 = 1e-6, g2 = 0.5 * t5;
    for (let y2 = 1; y2 < n5 - 1; y2++) {
      let a7 = 0, o7 = 0, r7 = 0;
      for (let n6 = y2 - 1; n6 >= 0; n6--) {
        const s6 = g2 + i6[n6 + 1] - i6[y2];
        if (s6 < 0)
          break;
        const l6 = i6[n6 + 1] - i6[n6], h6 = i6[y2] - i6[n6] < g2 ? 1 : s6 / l6;
        if (h6 < f3)
          break;
        const x3 = h6 * h6, c7 = h6 * s6 - 0.5 * x3 * l6, d3 = h6 * l6 / t5, m2 = e5[n6 + 1], u4 = e5[n6].x - m2.x, p4 = e5[n6].y - m2.y;
        a7 += d3 / c7 * (m2.x * h6 * s6 + 0.5 * x3 * (s6 * u4 - l6 * m2.x) - x3 * h6 * l6 * u4 / 3), o7 += d3 / c7 * (m2.y * h6 * s6 + 0.5 * x3 * (s6 * p4 - l6 * m2.y) - x3 * h6 * l6 * p4 / 3), r7 += d3;
      }
      for (let s6 = y2 + 1; s6 < n5; s6++) {
        const n6 = g2 - i6[s6 - 1] + i6[y2];
        if (n6 < 0)
          break;
        const l6 = i6[s6] - i6[s6 - 1], h6 = i6[s6] - i6[y2] < g2 ? 1 : n6 / l6;
        if (h6 < f3)
          break;
        const x3 = h6 * h6, c7 = h6 * n6 - 0.5 * x3 * l6, d3 = h6 * l6 / t5, m2 = e5[s6 - 1], u4 = e5[s6].x - m2.x, p4 = e5[s6].y - m2.y;
        a7 += d3 / c7 * (m2.x * h6 * n6 + 0.5 * x3 * (n6 * u4 - l6 * m2.x) - x3 * h6 * l6 * u4 / 3), o7 += d3 / c7 * (m2.y * h6 * n6 + 0.5 * x3 * (n6 * p4 - l6 * m2.y) - x3 * h6 * l6 * p4 / 3), r7 += d3;
      }
      d2.push(new h(a7 / r7, o7 / r7));
    }
    return d2.push(new h(h5, x2)), e5[0].x = r6, e5[0].y = l5, e5[n5 - 1].x = h5, e5[n5 - 1].y = x2, d2;
  }
  static _pushCentroid(e5, t5) {
    const n5 = 0, i6 = 0, s6 = 4096, a6 = 4096, o6 = t5.length - 1;
    let r6 = 0, l5 = 0, h5 = 0, c6 = t5[0].x, d2 = t5[0].y;
    c6 > s6 && (c6 = s6), c6 < n5 && (c6 = n5), d2 > a6 && (d2 = a6), d2 < i6 && (d2 = i6);
    for (let x2 = 1; x2 < o6; x2++) {
      let e6 = t5[x2].x, o7 = t5[x2].y, f3 = t5[x2 + 1].x, g2 = t5[x2 + 1].y;
      e6 > s6 && (e6 = s6), e6 < n5 && (e6 = n5), o7 > a6 && (o7 = a6), o7 < i6 && (o7 = i6), f3 > s6 && (f3 = s6), f3 < n5 && (f3 = n5), g2 > a6 && (g2 = a6), g2 < i6 && (g2 = i6);
      const y2 = (e6 - c6) * (g2 - d2) - (f3 - c6) * (o7 - d2);
      r6 += y2 * (c6 + e6 + f3), l5 += y2 * (d2 + o7 + g2), h5 += y2;
    }
    r6 /= 3 * h5, l5 /= 3 * h5, isNaN(r6) || isNaN(l5) || e5.push(new y(r6, l5));
  }
};
L._bidiEngine = new C();

// node_modules/@arcgis/core/views/2d/tiling/enums.js
var I3;
!function(I4) {
  I4[I4.INITIALIZED = 0] = "INITIALIZED", I4[I4.NO_DATA = 1] = "NO_DATA", I4[I4.READY = 2] = "READY", I4[I4.MODIFIED = 3] = "MODIFIED", I4[I4.INVALID = 4] = "INVALID";
}(I3 || (I3 = {}));

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/TileParser.js
var g = class {
  constructor(t5, r6, o6, n5, l5, a6) {
    var _a;
    if (this._pbfTiles = {}, this._tileClippers = {}, this._client = o6, this._tile = r6, this._sourceDataMaxLOD = n5, a6) {
      this._styleLayerUIDs = /* @__PURE__ */ new Set();
      for (const e5 of a6)
        this._styleLayerUIDs.add(e5);
    }
    this._styleRepository = l5, this._layers = ((_a = this._styleRepository) == null ? void 0 : _a.layers) ?? [];
    const [u4, f3, p4] = r6.tileKey.split("/").map(parseFloat);
    this._level = u4;
    const h5 = d(this._level);
    for (const c6 of Object.keys(t5)) {
      const r7 = t5[c6];
      this._pbfTiles[c6] = new n2(new Uint8Array(r7.protobuff), new DataView(r7.protobuff));
      if (r7.refKey) {
        const [e5] = r7.refKey.split("/").map(parseFloat), t6 = u4 - e5;
        if (t6 > 0) {
          const e6 = (1 << t6) - 1, r8 = f3 & e6, i6 = p4 & e6;
          this._tileClippers[c6] = new e(t6, r8, i6, 8, h5);
        }
      }
      this._tileClippers[c6] || (this._tileClippers[c6] = new _());
    }
  }
  _canParseStyleLayer(e5) {
    return !this._styleLayerUIDs || this._styleLayerUIDs.has(e5);
  }
  async parse(e5) {
    const t5 = i2(), s6 = this._initialize(e5), { returnedBuckets: i6 } = s6;
    this._processLayers(s6), this._linkReferences(s6), this._filterFeatures(s6);
    const o6 = [], c6 = /* @__PURE__ */ new Set(), n5 = (e6, t6) => {
      c6.has(e6) || (o6.push({ name: e6, repeat: t6 }), c6.add(e6));
    }, l5 = {};
    for (const r6 of i6)
      r6.getResources(r6.tileClipper, n5, l5);
    if (this._tile.status === I3.INVALID)
      return [];
    const a6 = this._fetchResources(o6, l5, e5);
    return Promise.all([...a6, t5]).then(() => this._processFeatures(s6.returnedBuckets));
  }
  _initialize(e5) {
    const t5 = e5 == null ? void 0 : e5.signal;
    return { signal: t5, sourceNameToTileData: this._parseTileData(this._pbfTiles), layers: this._layers, zoom: this._level, sourceNameToTileClipper: this._tileClippers, sourceNameToUniqueSourceLayerBuckets: {}, sourceNameToUniqueSourceLayers: {}, returnedBuckets: [], layerIdToBucket: {}, referencerUIDToReferencedId: /* @__PURE__ */ new Map() };
  }
  _processLayers(e5) {
    const { sourceNameToTileData: t5, zoom: r6, layers: s6, sourceNameToTileClipper: i6, sourceNameToUniqueSourceLayerBuckets: o6, sourceNameToUniqueSourceLayers: c6, returnedBuckets: n5, layerIdToBucket: l5, referencerUIDToReferencedId: a6 } = e5, u4 = this._sourceDataMaxLOD;
    for (let f3 = s6.length - 1; f3 >= 0; f3--) {
      const e6 = s6[f3];
      if (r6 < u4) {
        if (e6.minzoom && r6 < Math.floor(e6.minzoom) || e6.maxzoom && r6 >= e6.maxzoom)
          continue;
      } else if (e6.maxzoom && r6 >= e6.maxzoom)
        continue;
      if (e6.type === a3.BACKGROUND || !this._canParseStyleLayer(e6.uid) || !t5[e6.source] || !i6[e6.source])
        continue;
      const p4 = t5[e6.source], h5 = i6[e6.source], m2 = e6.sourceLayer, _2 = p4[m2];
      if (_2) {
        let t6 = c6[e6.source];
        if (t6 || (t6 = c6[e6.source] = /* @__PURE__ */ new Set()), t6.add(e6.sourceLayer), e6.refLayerId)
          a6.set(e6.uid, e6.refLayerId);
        else {
          const t7 = this._createBucket(e6);
          if (t7) {
            t7.layerUIDs = [e6.uid], t7.layerExtent = _2.extent, t7.tileClipper = h5;
            let r7 = o6[e6.source];
            r7 || (r7 = o6[e6.source] = {});
            let s7 = r7[m2];
            s7 || (s7 = r7[m2] = []), s7.push(t7), n5.push(t7), l5[e6.id] = t7;
          }
        }
      }
    }
  }
  _linkReferences(e5) {
    const { layerIdToBucket: t5, referencerUIDToReferencedId: r6 } = e5;
    r6.forEach((e6, r7) => {
      t5[e6] && t5[e6].layerUIDs.push(r7);
    });
  }
  _filterFeatures(e5) {
    const { signal: r6, sourceNameToTileData: s6, sourceNameToUniqueSourceLayerBuckets: i6, sourceNameToUniqueSourceLayers: c6 } = e5, n5 = 10 * this._level, l5 = 10 * (this._level + 1), a6 = [], u4 = [];
    for (const t5 of Object.keys(c6)) {
      c6[t5].forEach((e6) => {
        a6.push(e6), u4.push(t5);
      });
    }
    for (let f3 = 0; f3 < a6.length; f3++) {
      const e6 = u4[f3], c7 = a6[f3];
      if (!s6[e6] || !i6[e6])
        continue;
      const p4 = s6[e6][c7], h5 = i6[e6][c7];
      if (!h5 || 0 === h5.length)
        continue;
      if (c2(r6))
        return;
      let m2 = 0;
      const _2 = p4.getData();
      for (; _2.nextTag(2); ) {
        const e7 = _2.getMessage(), t5 = new s2(e7, p4, m2++);
        e7.release();
        const r7 = t5.values;
        if (r7) {
          const e8 = r7._minzoom;
          if (e8 && e8 >= l5)
            continue;
          const t6 = r7._maxzoom;
          if (t6 && t6 <= n5)
            continue;
        }
        for (const s7 of h5)
          s7.pushFeature(t5);
      }
    }
  }
  _fetchResources(e5, t5, r6) {
    const s6 = [], i6 = this._tile.getWorkerTileHandler();
    let o6, c6;
    e5.length > 0 && (o6 = i6.fetchSprites(e5, this._client, r6), s6.push(o6));
    for (const n5 in t5) {
      const e6 = t5[n5];
      e6.size > 0 && (c6 = i6.fetchGlyphs(this._tile.tileKey, n5, e6, this._client, r6), s6.push(c6));
    }
    return s6;
  }
  _processFeatures(e5) {
    const t5 = e5.filter((e6) => e6.hasFeatures() || this._canParseStyleLayer(e6.layer.uid));
    for (const r6 of t5)
      r6.processFeatures(r6.tileClipper);
    return t5;
  }
  _parseTileData(e5) {
    const t5 = {};
    for (const r6 of Object.keys(e5)) {
      const s6 = e5[r6], i6 = {};
      for (; s6.next(); )
        switch (s6.tag()) {
          case 3: {
            const e6 = s6.getMessage(), t6 = new e3(e6);
            e6.release(), i6[t6.name] = t6;
            break;
          }
          default:
            s6.skip();
        }
      t5[r6] = i6;
    }
    return t5;
  }
  _createBucket(e5) {
    switch (e5.type) {
      case a3.BACKGROUND:
        return null;
      case a3.FILL:
        return this._createFillBucket(e5);
      case a3.LINE:
        return this._createLineBucket(e5);
      case a3.CIRCLE:
        return this._createCircleBucket(e5);
      case a3.SYMBOL:
        return this._createSymbolBucket(e5);
    }
  }
  _createFillBucket(e5) {
    return new s4(e5, this._level, this._tile.getWorkerTileHandler().getSpriteItems(), new r3(e5.fillMaterial.getStride()), new r2(), new u3(e5.outlineMaterial.getStride()), new r2());
  }
  _createLineBucket(e5) {
    return new n4(e5, this._level, this._tile.getWorkerTileHandler().getSpriteItems(), new o4(e5.lineMaterial.getStride()), new r2());
  }
  _createCircleBucket(e5) {
    return new r4(e5, this._level, this._tile.getWorkerTileHandler().getSpriteItems(), new a5(e5.circleMaterial.getStride()), new r2());
  }
  _createSymbolBucket(e5) {
    const t5 = this._tile;
    return new L(t5.tileKey, e5, this._level, new h4(e5.iconMaterial.getStride()), new r2(), new h4(e5.textMaterial.getStride()), new r2(), t5.placementEngine, t5.getWorkerTileHandler());
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/WorkerTile.js
var i4 = class {
  constructor(t5, s6, i6, a6) {
    this.status = I3.INITIALIZED, this.placementEngine = new b2(), this.tileKey = t5, this.refKeys = s6, this._workerTileHandler = i6, this._styleRepository = a6;
  }
  release() {
    this.tileKey = "", this.refKeys = null, this.status = I3.INITIALIZED, this._workerTileHandler = null;
  }
  async parse(e5, s6) {
    const i6 = s6 == null ? void 0 : s6.signal;
    if (null != i6) {
      const t5 = () => {
        i6.removeEventListener("abort", t5), this.status = I3.INVALID;
      };
      i6.addEventListener("abort", t5);
    }
    let a6;
    const n5 = { bucketsWithData: [], emptyBuckets: null };
    try {
      a6 = await this._parse(e5, s6);
    } catch (c6) {
      if (b(c6))
        throw c6;
      return { result: n5, transferList: [] };
    }
    this.status = I3.READY;
    const l5 = n5.bucketsWithData, o6 = [];
    for (const t5 of a6)
      if (t5.hasFeatures()) {
        const e6 = t5.serialize();
        l5.push(e6);
      } else
        o6.push(t5.layer.uid);
    const u4 = [...l5];
    let h5 = null;
    return o6.length > 0 && (h5 = Uint32Array.from(o6), u4.push(h5.buffer)), n5.emptyBuckets = h5, { result: n5, transferList: u4 };
  }
  setObsolete() {
    this.status = I3.INVALID;
  }
  getLayers() {
    return this._workerTileHandler.getLayers();
  }
  getWorkerTileHandler() {
    return this._workerTileHandler;
  }
  async _parse(t5, e5) {
    const i6 = t5.sourceName2DataAndRefKey;
    if (0 === Object.keys(i6).length)
      return [];
    this.status = I3.MODIFIED;
    return new g(i6, this, e5.client, t5.sourceDataMaxLOD, this._styleRepository, t5.styleLayerUIDs).parse(e5);
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/WorkerTileHandler.js
var o5 = 25;
var i5 = class {
  constructor() {
    this._spriteInfo = {}, this._glyphInfo = {}, this._sourceDataMaxLOD = o5;
  }
  reset() {
    return this._spriteInfo = {}, this._glyphInfo = {}, Promise.resolve();
  }
  getLayers() {
    var _a;
    return ((_a = this._styleRepository) == null ? void 0 : _a.layers) ?? [];
  }
  async createTileAndParse(t5, r6) {
    const { key: o6 } = t5, i6 = {};
    for (const e5 of Object.keys(t5.sourceName2DataAndRefKey)) {
      const s6 = t5.sourceName2DataAndRefKey[e5];
      i6[e5] = s6.refKey;
    }
    const a6 = new i4(o6, i6, this, this._styleRepository);
    try {
      return await a6.parse({ ...t5, sourceDataMaxLOD: this._sourceDataMaxLOD }, r6);
    } catch (n5) {
      if (a6.setObsolete(), a6.release(), !b(n5))
        throw n5;
      return null;
    }
  }
  updateStyle(e5) {
    if (!e5 || 0 === e5.length || !this._styleRepository)
      return;
    const s6 = this._styleRepository;
    for (const r6 of e5) {
      const e6 = r6.type, o6 = r6.data;
      switch (e6) {
        case I.PAINTER_CHANGED:
          s6.setPaintProperties(o6.layer, o6.paint);
          break;
        case I.LAYOUT_CHANGED:
          s6.setLayoutProperties(o6.layer, o6.layout);
          break;
        case I.LAYER_REMOVED:
          s6.deleteStyleLayer(o6.layer);
          break;
        case I.LAYER_CHANGED:
          s6.setStyleLayer(o6.layer, o6.index);
          break;
        case I.SPRITES_CHANGED:
          this._spriteInfo = {};
      }
    }
  }
  setStyle(e5) {
    const { style: t5, sourceDataMaxLOD: s6 } = e5;
    this._styleRepository = new l2(t5), this._sourceDataMaxLOD = s6, this._spriteInfo = {}, this._glyphInfo = {};
  }
  fetchSprites(e5, t5, s6) {
    const r6 = [], o6 = this._spriteInfo;
    for (const i6 of e5) {
      void 0 === o6[i6.name] && r6.push(i6);
    }
    return 0 === r6.length ? Promise.resolve() : t5.invoke("getSprites", r6, { signal: s6 == null ? void 0 : s6.signal }).then((e6) => {
      for (const t6 in e6) {
        const s7 = e6[t6];
        o6[t6] = s7;
      }
    });
  }
  getSpriteItems() {
    return this._spriteInfo;
  }
  fetchGlyphs(e5, t5, s6, r6, o6) {
    const i6 = [];
    let a6 = this._glyphInfo[t5];
    return a6 ? s6.forEach((e6) => {
      a6[e6] || i6.push(e6);
    }) : (a6 = this._glyphInfo[t5] = [], s6.forEach((e6) => i6.push(e6))), 0 === i6.length ? Promise.resolve() : r6.invoke("getGlyphs", { tileID: e5, font: t5, codePoints: i6 }, o6).then((e6) => {
      for (let t6 = 0; t6 < e6.length; t6++)
        e6[t6] && (a6[t6] = e6[t6]);
    });
  }
  getGlyphItems(e5) {
    return this._glyphInfo[e5];
  }
};
export {
  i5 as default
};
//# sourceMappingURL=WorkerTileHandler-3YKUF6VM.js.map
