import {
  t as t3
} from "./chunk-6RR3WN7W.js";
import "./chunk-TXCVD3YI.js";
import {
  p as p2
} from "./chunk-7OR5BJ53.js";
import "./chunk-5HSC73OQ.js";
import {
  T
} from "./chunk-G3TGE2VT.js";
import {
  l as l2
} from "./chunk-2IACRN4O.js";
import "./chunk-T3YOCYDS.js";
import "./chunk-QO4PGON2.js";
import "./chunk-QRQWG4D3.js";
import {
  e as e5
} from "./chunk-IQFWVTUJ.js";
import "./chunk-CXCB57TE.js";
import "./chunk-IWO6JXL2.js";
import "./chunk-AVR3LWTZ.js";
import "./chunk-FFG7BDAP.js";
import "./chunk-ECTYMEUP.js";
import "./chunk-WKVHVZW2.js";
import {
  i
} from "./chunk-QMPD4WXY.js";
import {
  l
} from "./chunk-AHEDDTVZ.js";
import {
  e as e4
} from "./chunk-XW3FDKYP.js";
import "./chunk-XGTCDM4C.js";
import "./chunk-RW5QMWE6.js";
import "./chunk-LGMX4E7L.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import {
  j
} from "./chunk-4ZLXDMI5.js";
import {
  j as j2,
  p
} from "./chunk-2SYXH2R7.js";
import "./chunk-7JNXJYRU.js";
import {
  n as n2
} from "./chunk-6PMFOUWZ.js";
import "./chunk-3KPZ3BQR.js";
import "./chunk-5JYVZQZR.js";
import {
  t as t2
} from "./chunk-UUG4W2PI.js";
import {
  u as u2
} from "./chunk-WW22JHXA.js";
import {
  S
} from "./chunk-ZAM62XN5.js";
import "./chunk-RKVEKQ5O.js";
import "./chunk-P7J4JFEH.js";
import {
  b as b2
} from "./chunk-G7FOE26O.js";
import "./chunk-USOPZ2Q6.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-AKLOTDO2.js";
import "./chunk-6AQIVLDN.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import {
  e as e3
} from "./chunk-RDPH36VD.js";
import "./chunk-LBXFRGMS.js";
import "./chunk-VTH4DAHQ.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-SLQA5YBV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import {
  U as U3
} from "./chunk-CZSTCON2.js";
import "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import {
  w
} from "./chunk-IZKCZQUY.js";
import {
  d as d2,
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import {
  f
} from "./chunk-MBGZKT2Z.js";
import {
  U as U2,
  g2 as g
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import {
  o
} from "./chunk-YOPMY6TS.js";
import {
  r as r2
} from "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import {
  Et,
  I,
  K,
  Rt,
  U,
  V,
  Y,
  a as a4,
  pt,
  q,
  qt,
  v
} from "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import {
  d
} from "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3,
  r2 as r
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  a as a2,
  b,
  c2 as c,
  m,
  s as s2
} from "./chunk-JGDJR5EV.js";
import {
  u
} from "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  a,
  n2 as n,
  s
} from "./chunk-7RBRCL6S.js";
import {
  e3 as e2,
  t4 as t
} from "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/layers/support/imageUtils.js
var A = null;
function o2(o4) {
  if (A)
    return A;
  const l6 = { lossy: "UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA", lossless: "UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==", alpha: "UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==", animation: "UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA" };
  return A = new Promise((A3) => {
    const n4 = new Image();
    n4.onload = () => {
      n4.onload = n4.onerror = null, A3(n4.width > 0 && n4.height > 0);
    }, n4.onerror = () => {
      n4.onload = n4.onerror = null, A3(false);
    }, n4.src = "data:image/webp;base64," + l6[o4];
  }), A;
}

// node_modules/@arcgis/core/layers/support/SpriteSource.js
var h = 1.15;
var n3 = class {
  constructor(t4, e6) {
    this._spriteSource = t4, this._maxTextureSize = e6, this.devicePixelRatio = 1, this._spriteImageFormat = "png", this._isRetina = false, this._spritesData = {}, this.image = null, this.width = null, this.height = null, this.loadStatus = "not-loaded", "url" === t4.type && t4.spriteFormat && (this._spriteImageFormat = t4.spriteFormat), t4.pixelRatio && (this.devicePixelRatio = t4.pixelRatio), this.baseURL = t4.spriteUrl;
  }
  get spriteNames() {
    const t4 = [];
    for (const e6 in this._spritesData)
      t4.push(e6);
    return t4.sort(), t4;
  }
  getSpriteInfo(t4) {
    return this._spritesData ? this._spritesData[t4] : null;
  }
  async load(t4) {
    if (this.baseURL) {
      this.loadStatus = "loading";
      try {
        await this._loadSprites(t4), this.loadStatus = "loaded";
      } catch {
        this.loadStatus = "failed";
      }
    } else
      this.loadStatus = "failed";
  }
  async _loadSprites(t4) {
    this._isRetina = this.devicePixelRatio > h;
    const { width: s4, height: r4, data: a6, json: o4 } = await this._getSpriteData(this._spriteSource, t4), n4 = Object.keys(o4);
    if (!n4 || 0 === n4.length || !a6)
      return this._spritesData = this.image = null, void (this.width = this.height = 0);
    this._spritesData = o4, this.width = s4, this.height = r4;
    const d5 = Math.max(this._maxTextureSize, 4096);
    if (s4 > d5 || r4 > d5) {
      const t5 = `Sprite resource for style ${this.baseURL} is bigger than the maximum allowed of ${d5} pixels}`;
      throw n.getLogger("esri.layers.support.SpriteSource").error(t5), new s("SpriteSource", t5);
    }
    let p4;
    for (let e6 = 0; e6 < a6.length; e6 += 4)
      p4 = a6[e6 + 3] / 255, a6[e6] = a6[e6] * p4, a6[e6 + 1] = a6[e6 + 1] * p4, a6[e6 + 2] = a6[e6 + 2] * p4;
    this.image = a6;
  }
  async _getSpriteData(i2, n4) {
    if ("image" === i2.type) {
      let t4, a6;
      if (this.devicePixelRatio < h) {
        if (!i2.spriteSource1x)
          throw new s("SpriteSource", "no image data provided for low resolution sprites!");
        t4 = i2.spriteSource1x.image, a6 = i2.spriteSource1x.json;
      } else {
        if (!i2.spriteSource2x)
          throw new s("SpriteSource", "no image data provided for high resolution sprites!");
        t4 = i2.spriteSource2x.image, a6 = i2.spriteSource2x.json;
      }
      return "width" in t4 && "height" in t4 && "data" in t4 && (t(t4.data) || e2(t4.data)) ? { width: t4.width, height: t4.height, data: new Uint8Array(t4.data), json: a6 } : { ...d3(t4), json: a6 };
    }
    const p4 = I(this.baseURL), l6 = p4.query ? "?" + v(p4.query) : "", g3 = this._isRetina ? "@2x" : "", u4 = `${p4.path}${g3}.${this._spriteImageFormat}${l6}`, c3 = `${p4.path}${g3}.json${l6}`, [m2, S3] = await Promise.all([U(c3, n4), U(u4, { responseType: "image", ...n4 })]);
    return { ...d3(S3.data), json: m2.data };
  }
};
function d3(t4) {
  const e6 = document.createElement("canvas"), i2 = e6.getContext("2d");
  e6.width = t4.width, e6.height = t4.height, i2.drawImage(t4, 0, 0, t4.width, t4.height);
  const s4 = i2.getImageData(0, 0, t4.width, t4.height);
  return { width: t4.width, height: t4.height, data: new Uint8Array(s4.data) };
}

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/TilemapIndex.js
var l3 = class {
  constructor(e6) {
    this.url = e6;
  }
  destroy() {
    this._tileIndexPromise = null;
  }
  async fetchTileIndex() {
    return this._tileIndexPromise || (this._tileIndexPromise = U(this.url).then((e6) => e6.data.index)), this._tileIndexPromise;
  }
  async dataKey(e6, r4) {
    const l6 = await this.fetchTileIndex();
    return s2(r4), this._getIndexedDataKey(l6, e6);
  }
  _getIndexedDataKey(e6, t4) {
    const l6 = [t4];
    if (t4.level < 0 || t4.row < 0 || t4.col < 0 || t4.row >> t4.level > 0 || t4.col >> t4.level > 0)
      return null;
    let i2 = t4;
    for (; 0 !== i2.level; )
      i2 = new e5(i2.level - 1, i2.row >> 1, i2.col >> 1, i2.world), l6.push(i2);
    let o4, s4, n4 = e6, a6 = l6.pop();
    if (1 === n4)
      return a6;
    for (; l6.length; )
      if (o4 = l6.pop(), s4 = (1 & o4.col) + ((1 & o4.row) << 1), n4) {
        if (0 === n4[s4]) {
          a6 = null;
          break;
        }
        if (1 === n4[s4]) {
          a6 = o4;
          break;
        }
        a6 = o4, n4 = n4[s4];
      }
    return a6;
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/TilemapRequest.js
var l4 = class {
  constructor(e6, t4) {
    this._tilemap = e6, this._tileIndexUrl = t4;
  }
  destroy() {
    this._tilemap = u(this._tilemap), this._tileIndexPromise = null;
  }
  async fetchTileIndex(t4) {
    return this._tileIndexPromise || (this._tileIndexPromise = U(this._tileIndexUrl, { query: { ...t4 == null ? void 0 : t4.query } }).then((e6) => e6.data.index)), this._tileIndexPromise;
  }
  dataKey(e6, t4) {
    const { level: l6, row: s4, col: o4 } = e6, n4 = new e5(e6);
    return this._tilemap.fetchAvailabilityUpsample(l6, s4, o4, n4, t4).then(() => (n4.world = e6.world, n4)).catch((e7) => {
      if (b(e7))
        throw e7;
      return null;
    });
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/style/VectorTilesRequestManager.js
var l5 = class {
  constructor(t4) {
    this._tileUrl = t4, this._promise = null, this._abortController = null, this._abortOptions = [];
  }
  getData(t4) {
    var _a;
    (null == this._promise || c((_a = this._abortController) == null ? void 0 : _a.signal)) && (this._promise = this._makeRequest(this._tileUrl));
    const o4 = this._abortOptions;
    return o4.push(t4), m(t4, () => {
      o4.every((t5) => c(t5)) && this._abortController.abort();
    }), this._promise.then((t5) => a(t5));
  }
  async _makeRequest(r4) {
    this._abortController = new AbortController();
    const { data: o4 } = await U(r4, { responseType: "array-buffer", signal: this._abortController.signal });
    return o4;
  }
};
var a5 = /* @__PURE__ */ new Map();
function c2(t4, r4, o4, e6, s4) {
  const l6 = I(t4), a6 = l6.query;
  if (a6)
    for (const [i2, n4] of Object.entries(a6))
      switch (n4) {
        case "{x}":
          a6[i2] = e6.toString();
          break;
        case "{y}":
          a6[i2] = o4.toString();
          break;
        case "{z}":
          a6[i2] = r4.toString();
      }
  const c3 = l6.path;
  return p3(Et(c3.replaceAll(/\{z\}/gi, r4.toString()).replaceAll(/\{y\}/gi, o4.toString()).replaceAll(/\{x\}/gi, e6.toString()), { ...l6.query }), s4);
}
function p3(t4, r4) {
  return r(a5, t4, () => new l5(t4)).getData(r4).finally(() => a5.delete(t4));
}

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/style/VectorTileSource.js
var u3 = class {
  constructor(h3, u4, m2) {
    this.tilemap = null, this.tileInfo = null, this.capabilities = null, this.fullExtent = null, this.initialExtent = null, this.name = h3, this.sourceUrl = u4;
    const f2 = I(this.sourceUrl), c3 = a(m2), x3 = c3.tiles;
    if (f2)
      for (let t4 = 0; t4 < x3.length; t4++) {
        const r4 = I(x3[t4]);
        r4 && (Y(r4.path) || (r4.path = V(f2.path, r4.path)), x3[t4] = Et(r4.path, { ...f2.query, ...r4.query }));
      }
    this.tileServers = x3;
    const d5 = m2.capabilities && m2.capabilities.split(",").map((t4) => t4.toLowerCase().trim()), y2 = true === (m2 == null ? void 0 : m2.exportTilesAllowed), T2 = true === (d5 == null ? void 0 : d5.includes("tilemap")), I2 = y2 && m2.hasOwnProperty("maxExportTilesCount") ? m2.maxExportTilesCount : 0;
    this.capabilities = { operations: { supportsExportTiles: y2, supportsTileMap: T2 }, exportTiles: y2 ? { maxExportTilesCount: +I2 } : null }, this.tileInfo = j2.fromJSON(c3.tileInfo);
    const g3 = m2.tileMap ? Et(V(f2.path, m2.tileMap), f2.query ?? {}) : null;
    T2 ? (this.type = "vector-tile", this.tilemap = new l4(new T({ layer: { parsedUrl: f2, tileInfo: this.tileInfo }, minLOD: c3.minLOD ?? this.tileInfo.lods[0].level, maxLOD: c3.maxLOD ?? this.tileInfo.lods[this.tileInfo.lods.length - 1].level }), g3)) : g3 && (this.tilemap = new l3(g3)), this.fullExtent = w.fromJSON(m2.fullExtent), this.initialExtent = w.fromJSON(m2.initialExtent);
  }
  destroy() {
    var _a;
    (_a = this.tilemap) == null ? void 0 : _a.destroy();
  }
  async getRefKey(t4, e6) {
    var _a;
    return await ((_a = this.tilemap) == null ? void 0 : _a.dataKey(t4, e6)) ?? t4;
  }
  requestTile(t4, e6, i2, l6) {
    const s4 = this.tileServers[e6 % this.tileServers.length];
    return c2(s4, t4, e6, i2, l6);
  }
  isCompatibleWith(t4) {
    const e6 = this.tileInfo, i2 = t4.tileInfo;
    if (!e6.spatialReference.equals(i2.spatialReference))
      return false;
    if (!e6.origin.equals(i2.origin))
      return false;
    if (Math.round(e6.dpi) !== Math.round(i2.dpi))
      return false;
    const l6 = e6.lods, s4 = i2.lods, r4 = Math.min(l6.length, s4.length);
    for (let o4 = 0; o4 < r4; o4++) {
      const t5 = l6[o4], e7 = s4[o4];
      if (t5.level !== e7.level || Math.round(t5.scale) !== Math.round(e7.scale))
        return false;
    }
    return true;
  }
};

// node_modules/@arcgis/core/layers/support/vectorTileLayerLoader.js
async function x2(e6, t4) {
  const r4 = { source: null, sourceBase: null, sourceUrl: null, validatedSource: null, style: null, styleBase: null, styleUrl: null, sourceNameToSource: {}, primarySourceName: "", spriteFormat: "png" }, [s4, o4] = "string" == typeof e6 ? [e6, null] : [null, e6.jsonUrl];
  await S2(r4, "esri", e6, o4, t4);
  return { layerDefinition: r4.validatedSource, url: s4, serviceUrl: r4.sourceUrl, style: r4.style, styleUrl: r4.styleUrl, spriteUrl: r4.style.sprite && d4(r4.styleBase, r4.style.sprite), spriteFormat: r4.spriteFormat, glyphsUrl: r4.style.glyphs && d4(r4.styleBase, r4.style.glyphs), sourceNameToSource: r4.sourceNameToSource, primarySourceName: r4.primarySourceName };
}
function d4(...e6) {
  let t4;
  for (const r4 of e6)
    if (null != r4)
      if (pt(r4)) {
        if (t4) {
          const e7 = t4.split("://")[0];
          t4 = e7 + ":" + r4.trim();
        }
      } else
        t4 = Y(r4) ? r4 : V(t4, r4);
  return t4 ? qt(t4) : void 0;
}
async function S2(t4, s4, o4, l6, n4) {
  let u4, a6, c3;
  if (s2(n4), "string" == typeof o4) {
    const t5 = K(o4);
    c3 = await U(t5, { ...n4, responseType: "json", query: { f: "json", ...n4 == null ? void 0 : n4.query } }), c3.ssl && (u4 && (u4 = u4.replace(/^http:/i, "https:")), a6 && (a6 = a6.replace(/^http:/i, "https:"))), u4 = t5, a6 = t5;
  } else
    null != o4 && (c3 = { data: o4 }, u4 = o4.jsonUrl || null, a6 = l6);
  const f2 = c3 == null ? void 0 : c3.data;
  if (w2(f2))
    return t4.styleUrl = u4 || null, j3(t4, f2, a6, n4);
  if (U4(f2))
    return t4.sourceUrl ? g2(t4, f2, a6, false, s4, n4) : (t4.sourceUrl = u4 || null, g2(t4, f2, a6, true, s4, n4));
  throw new Error("You must specify the URL or the JSON for a service or for a style.");
}
function h2(e6) {
  return "object" == typeof e6 && !!e6 && "tilejson" in e6 && null != e6.tilejson;
}
function w2(e6) {
  return !!e6 && "sources" in e6 && !!e6.sources;
}
function U4(e6) {
  return !w2(e6);
}
async function j3(e6, t4, r4, s4) {
  const o4 = r4 ? Rt(r4) : q();
  e6.styleBase = o4, e6.style = t4, t4["sprite-format"] && "webp" === t4["sprite-format"].toLowerCase() && (e6.spriteFormat = "webp");
  const l6 = [];
  if (t4.sources && t4.sources.esri) {
    const r5 = t4.sources.esri;
    r5.url ? await S2(e6, "esri", d4(o4, r5.url), void 0, s4) : l6.push(S2(e6, "esri", r5, o4, s4));
  }
  for (const n4 of Object.keys(t4.sources))
    "esri" !== n4 && "vector" === t4.sources[n4].type && (t4.sources[n4].url ? l6.push(S2(e6, n4, d4(o4, t4.sources[n4].url), void 0, s4)) : t4.sources[n4].tiles && l6.push(S2(e6, n4, t4.sources[n4], o4, s4)));
  await Promise.all(l6);
}
async function g2(e6, t4, r4, s4, o4, l6) {
  const i2 = r4 ? qt(r4) + "/" : q(), u4 = v2(t4), f2 = new u3(o4, Et(i2, (l6 == null ? void 0 : l6.query) ?? {}), u4);
  if (!s4 && e6.primarySourceName in e6.sourceNameToSource) {
    const t5 = e6.sourceNameToSource[e6.primarySourceName];
    if (!t5.isCompatibleWith(f2))
      return;
    null != f2.fullExtent && (null != t5.fullExtent ? t5.fullExtent.union(f2.fullExtent) : t5.fullExtent = f2.fullExtent.clone()), t5.tileInfo && f2.tileInfo && t5.tileInfo.lods.length < f2.tileInfo.lods.length && (t5.tileInfo = f2.tileInfo);
  }
  if (s4 && (e6.sourceBase = i2, e6.source = t4, e6.validatedSource = u4, e6.primarySourceName = o4), e6.sourceNameToSource[o4] = f2, !h2(e6) && "defaultStyles" in t4 && !e6.style) {
    if (null == t4.defaultStyles)
      throw new Error();
    return "string" == typeof t4.defaultStyles ? S2(e6, "", d4(i2, t4.defaultStyles, "root.json"), void 0, l6) : S2(e6, "", t4.defaultStyles, d4(i2, "root.json"), l6);
  }
}
function v2(e6) {
  if (e6.hasOwnProperty("tileInfo"))
    return e6;
  const r4 = { xmin: -20037507067161843e-9, ymin: -20037507067161843e-9, xmax: 20037507067161843e-9, ymax: 20037507067161843e-9, spatialReference: { wkid: 102100, latestWkid: 3857 } };
  let s4 = null;
  if (h2(e6)) {
    const { bounds: r5 } = e6;
    if (r5) {
      const e7 = d2({ x: r5[0], y: r5[1], spatialReference: a(g) }), o5 = d2({ x: r5[2], y: r5[3], spatialReference: a(g) });
      s4 = { xmin: e7.x, ymin: e7.y, xmax: o5.x, ymax: o5.y, spatialReference: a(U2) };
    }
  }
  null === s4 && (s4 = r4);
  const o4 = 512;
  let l6 = 78271.51696400007, n4 = 2958287637957775e-7;
  const i2 = [], u4 = e6.hasOwnProperty("maxzoom") && null != e6.maxzoom ? +e6.maxzoom : 22, a6 = 0, c3 = 0;
  for (let t4 = 0; t4 <= u4; t4++)
    i2.push({ level: t4, scale: n4, resolution: l6 }), l6 /= 2, n4 /= 2;
  return { capabilities: "TilesOnly", initialExtent: s4, fullExtent: r4, minScale: a6, maxScale: c3, tiles: e6.tiles, tileInfo: { rows: o4, cols: o4, dpi: 96, format: "pbf", origin: { x: -20037508342787e-6, y: 20037508342787e-6 }, lods: i2, spatialReference: a(U2) } };
}

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/tileInfoUtils.js
var s3 = 1e-6;
function r3(l6, e6) {
  if (l6 === e6)
    return true;
  if (null == l6 && null != e6)
    return false;
  if (null != l6 && null == e6)
    return false;
  if (null == l6 || null == e6)
    return false;
  if (!l6.spatialReference.equals(e6.spatialReference) || l6.dpi !== e6.dpi)
    return false;
  const n4 = l6.origin, r4 = e6.origin;
  if (Math.abs(n4.x - r4.x) >= s3 || Math.abs(n4.y - r4.y) >= s3)
    return false;
  let o4, t4;
  l6.lods[0].scale > e6.lods[0].scale ? (o4 = l6, t4 = e6) : (t4 = l6, o4 = e6);
  for (let i2 = o4.lods[0].scale; i2 >= t4.lods[t4.lods.length - 1].scale - s3; i2 /= 2)
    if (Math.abs(i2 - t4.lods[0].scale) < s3)
      return true;
  return false;
}
function o3(s4, r4) {
  if (s4 === r4)
    return s4;
  if (null == s4 && null != r4)
    return r4;
  if (null != s4 && null == r4)
    return s4;
  if (null == s4 || null == r4)
    return null;
  const o4 = s4.size[0], t4 = s4.format, i2 = s4.dpi, u4 = new x({ x: s4.origin.x, y: s4.origin.y }), a6 = s4.spatialReference, f2 = s4.lods[0].scale > r4.lods[0].scale ? s4.lods[0] : r4.lods[0], d5 = s4.lods[s4.lods.length - 1].scale <= r4.lods[r4.lods.length - 1].scale ? s4.lods[s4.lods.length - 1] : r4.lods[r4.lods.length - 1], c3 = f2.scale, p4 = f2.resolution, g3 = d5.scale, h3 = [];
  let m2 = c3, y2 = p4, x3 = 0;
  for (; m2 > g3; )
    h3.push(new p({ level: x3, resolution: y2, scale: m2 })), x3++, m2 /= 2, y2 /= 2;
  return new j2({ size: [o4, o4], dpi: i2, format: t4 || "pbf", origin: u4, lods: h3, spatialReference: a6 });
}

// node_modules/@arcgis/core/layers/VectorTileLayer.js
var N = class extends n2(t2(p2(l(u2(j(e4(i(S(b2))))))))) {
  constructor(...e6) {
    super(...e6), this._spriteSourceMap = /* @__PURE__ */ new Map(), this.currentStyleInfo = null, this.isReference = null, this.operationalLayerType = "VectorTileLayer", this.style = null, this.tilemapCache = null, this.type = "vector-tile", this.url = null, this.path = null;
  }
  normalizeCtorArgs(e6, t4) {
    return "string" == typeof e6 ? { url: e6, ...t4 } : e6;
  }
  destroy() {
    var _a;
    if (this.sourceNameToSource)
      for (const e6 of Object.values(this.sourceNameToSource))
        e6 == null ? void 0 : e6.destroy();
    (_a = this.primarySource) == null ? void 0 : _a.destroy(), this._spriteSourceMap.clear();
  }
  async prefetchResources(e6) {
    await this.loadSpriteSource(globalThis.devicePixelRatio || 1, e6);
  }
  load(e6) {
    const r4 = this.loadFromPortal({ supportedTypes: ["Vector Tile Service"], supportsData: false }, e6).catch(a2).then(async () => {
      var _a;
      if (!((_a = this.portalItem) == null ? void 0 : _a.id))
        return;
      const r5 = `${this.portalItem.itemCdnUrl}/resources/styles/root.json`;
      (await U(r5, { ...e6, query: { f: "json", ...this.customParameters, token: this.apiKey } })).data && this.read({ url: r5 }, e3(this.portalItem, "portal-item"));
    }).catch(a2).then(() => this._loadStyle(e6));
    return this.addResolvingPromise(r4), Promise.resolve(this);
  }
  get attributionDataUrl() {
    const e6 = this.currentStyleInfo, t4 = (e6 == null ? void 0 : e6.serviceUrl) && I(e6.serviceUrl);
    if (!t4)
      return null;
    const r4 = this._getDefaultAttribution(t4.path);
    return r4 ? Et(r4, { ...this.customParameters, token: this.apiKey }) : null;
  }
  get capabilities() {
    const e6 = this.primarySource;
    return e6 ? e6.capabilities : { operations: { supportsExportTiles: false, supportsTileMap: false }, exportTiles: null };
  }
  get fullExtent() {
    var _a;
    return ((_a = this.primarySource) == null ? void 0 : _a.fullExtent) || null;
  }
  get initialExtent() {
    var _a;
    return ((_a = this.primarySource) == null ? void 0 : _a.initialExtent) || null;
  }
  get parsedUrl() {
    return this.serviceUrl ? I(this.serviceUrl) : null;
  }
  get serviceUrl() {
    var _a;
    return ((_a = this.currentStyleInfo) == null ? void 0 : _a.serviceUrl) || null;
  }
  get spatialReference() {
    var _a;
    return ((_a = this.tileInfo) == null ? void 0 : _a.spatialReference) ?? null;
  }
  get styleUrl() {
    var _a;
    return ((_a = this.currentStyleInfo) == null ? void 0 : _a.styleUrl) || null;
  }
  writeStyleUrl(e6, t4) {
    e6 && pt(e6) && (e6 = `https:${e6}`);
    const r4 = a4(e6);
    t4.styleUrl = U3(e6, r4);
  }
  get tileInfo() {
    var _a;
    const e6 = [];
    for (const r4 in this.sourceNameToSource)
      e6.push(this.sourceNameToSource[r4]);
    let t4 = ((_a = this.primarySource) == null ? void 0 : _a.tileInfo) || new j2();
    if (e6.length > 1)
      for (let r4 = 0; r4 < e6.length; r4++)
        r3(t4, e6[r4].tileInfo) && (t4 = o3(t4, e6[r4].tileInfo));
    return t4;
  }
  readTilemapCache(e6, t4) {
    var _a;
    const r4 = (_a = t4.capabilities) == null ? void 0 : _a.includes("Tilemap");
    return r4 ? new T({ layer: this }) : null;
  }
  readVersion(e6, t4) {
    return t4.version ? parseFloat(t4.version) : parseFloat(t4.currentVersion);
  }
  async loadSpriteSource(e6 = 1, t4) {
    var _a, _b;
    if (!this._spriteSourceMap.has(e6)) {
      const r4 = t3().maxTextureSize, i2 = ((_a = this.currentStyleInfo) == null ? void 0 : _a.spriteUrl) ? Et(this.currentStyleInfo.spriteUrl, { ...this.customParameters, token: this.apiKey }) : null, o4 = new n3({ type: "url", spriteUrl: i2, pixelRatio: e6, spriteFormat: (_b = this.currentStyleInfo) == null ? void 0 : _b.spriteFormat }, r4);
      await o4.load(t4), this._spriteSourceMap.set(e6, o4);
    }
    return this._spriteSourceMap.get(e6);
  }
  async setSpriteSource(e6, t4) {
    if (!e6)
      return null;
    const r4 = t3().maxTextureSize, i2 = e6.spriteUrl, o4 = i2 ? Et(i2, { ...this.customParameters, token: this.apiKey }) : null;
    if (!o4 && "url" === e6.type)
      return null;
    const s4 = new n3(e6, r4);
    try {
      await s4.load(t4);
      const r5 = e6.pixelRatio || 1;
      return this._spriteSourceMap.clear(), this._spriteSourceMap.set(r5, s4), o4 && this.currentStyleInfo && (this.currentStyleInfo.spriteUrl = o4), this.emit("spriteSource-change", { spriteSource: s4 }), s4;
    } catch (a6) {
      a2(a6);
    }
    return null;
  }
  async loadStyle(e6, t4) {
    var _a;
    const i2 = e6 || this.style || this.url;
    return this._loadingTask && "string" == typeof i2 && this.url === i2 || ((_a = this._loadingTask) == null ? void 0 : _a.abort(), this._loadingTask = d((e7) => (this._spriteSourceMap.clear(), this._getSourceAndStyle(i2, { signal: e7 })), t4)), this._loadingTask.promise;
  }
  getStyleLayerId(e6) {
    return this.styleRepository.getStyleLayerId(e6);
  }
  getStyleLayerIndex(e6) {
    return this.styleRepository.getStyleLayerIndex(e6);
  }
  getPaintProperties(e6) {
    var _a;
    return a((_a = this.styleRepository) == null ? void 0 : _a.getPaintProperties(e6));
  }
  setPaintProperties(e6, t4) {
    const r4 = this.styleRepository.isPainterDataDriven(e6);
    this.styleRepository.setPaintProperties(e6, t4);
    const i2 = this.styleRepository.isPainterDataDriven(e6);
    this.emit("paint-change", { layer: e6, paint: t4, isDataDriven: r4 || i2 });
  }
  getStyleLayer(e6) {
    return a(this.styleRepository.getStyleLayer(e6));
  }
  setStyleLayer(e6, t4) {
    this.styleRepository.setStyleLayer(e6, t4), this.emit("style-layer-change", { layer: e6, index: t4 });
  }
  deleteStyleLayer(e6) {
    this.styleRepository.deleteStyleLayer(e6), this.emit("delete-style-layer", { layer: e6 });
  }
  getLayoutProperties(e6) {
    return a(this.styleRepository.getLayoutProperties(e6));
  }
  setLayoutProperties(e6, t4) {
    this.styleRepository.setLayoutProperties(e6, t4), this.emit("layout-change", { layer: e6, layout: t4 });
  }
  setStyleLayerVisibility(e6, t4) {
    this.styleRepository.setStyleLayerVisibility(e6, t4), this.emit("style-layer-visibility-change", { layer: e6, visibility: t4 });
  }
  getStyleLayerVisibility(e6) {
    return this.styleRepository.getStyleLayerVisibility(e6);
  }
  write(e6, t4) {
    return (t4 == null ? void 0 : t4.origin) && !this.styleUrl ? (t4.messages && t4.messages.push(new s("vectortilelayer:unsupported", `VectorTileLayer (${this.title}, ${this.id}) with style defined by JSON only are not supported`, { layer: this })), null) : super.write(e6, t4);
  }
  getTileUrl(e6, t4, r4) {
    return null;
  }
  async _getSourceAndStyle(e6, t4) {
    if (!e6)
      throw new Error("invalid style!");
    const r4 = await x2(e6, { ...t4, query: { ...this.customParameters, token: this.apiKey } });
    if ("webp" === r4.spriteFormat) {
      await o2("lossy") || (r4.spriteFormat = "png");
    }
    this._set("currentStyleInfo", { ...r4 }), "string" == typeof e6 ? (this.url = e6, this.style = null) : (this.url = null, this.style = e6), this._set("sourceNameToSource", r4.sourceNameToSource), this._set("primarySource", r4.sourceNameToSource[r4.primarySourceName]), this._set("styleRepository", new l2(r4.style)), this.read(r4.layerDefinition, { origin: "service" }), this.emit("load-style");
  }
  _getDefaultAttribution(e6) {
    const t4 = e6.match(/^https?:\/\/(?:basemaps|basemapsbeta|basemapsdev)(?:-api)?\.arcgis\.com(\/[^\/]+)?\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/vectortileserver/i), r4 = ["OpenStreetMap_v2", "OpenStreetMap_Daylight_v2", "OpenStreetMap_Export_v2", "OpenStreetMap_FTS_v2", "OpenStreetMap_GCS_v2", "World_Basemap", "World_Basemap_v2", "World_Basemap_Export_v2", "World_Basemap_GCS_v2", "World_Basemap_WGS84", "World_Contours_v2"];
    if (!t4)
      return;
    const i2 = t4[2] && t4[2].toLowerCase();
    if (!i2)
      return;
    const o4 = t4[1] || "";
    for (const s4 of r4)
      if (s4.toLowerCase().includes(i2))
        return K(`//static.arcgis.com/attribution/Vector${o4}/${s4}`);
  }
  async _loadStyle(e6) {
    var _a;
    return ((_a = this._loadingTask) == null ? void 0 : _a.promise) ?? this.loadStyle(null, e6);
  }
};
e([y({ readOnly: true })], N.prototype, "attributionDataUrl", null), e([y({ type: ["show", "hide"] })], N.prototype, "listMode", void 0), e([y({ json: { read: true, write: true } })], N.prototype, "blendMode", void 0), e([y({ readOnly: true, json: { read: false } })], N.prototype, "capabilities", null), e([y({ readOnly: true })], N.prototype, "currentStyleInfo", void 0), e([y({ json: { read: false }, readOnly: true, type: w })], N.prototype, "fullExtent", null), e([y({ json: { read: false }, readOnly: true, type: w })], N.prototype, "initialExtent", null), e([y({ type: Boolean, json: { read: false, write: { enabled: true, overridePolicy: () => ({ enabled: false }) } } })], N.prototype, "isReference", void 0), e([y({ type: ["VectorTileLayer"] })], N.prototype, "operationalLayerType", void 0), e([y({ readOnly: true })], N.prototype, "parsedUrl", null), e([y()], N.prototype, "style", void 0), e([y({ readOnly: true })], N.prototype, "serviceUrl", null), e([y({ type: f, readOnly: true })], N.prototype, "spatialReference", null), e([y({ readOnly: true })], N.prototype, "styleRepository", void 0), e([y({ readOnly: true })], N.prototype, "sourceNameToSource", void 0), e([y({ readOnly: true })], N.prototype, "primarySource", void 0), e([y({ type: String, readOnly: true, json: { write: { ignoreOrigin: true }, origins: { "web-document": { write: { ignoreOrigin: true, isRequired: true } } } } })], N.prototype, "styleUrl", null), e([r2(["portal-item", "web-document"], "styleUrl")], N.prototype, "writeStyleUrl", null), e([y({ json: { read: false, origins: { service: { read: false } } }, readOnly: true, type: j2 })], N.prototype, "tileInfo", null), e([y()], N.prototype, "tilemapCache", void 0), e([o("service", "tilemapCache", ["capabilities", "tileInfo"])], N.prototype, "readTilemapCache", null), e([y({ json: { read: false }, readOnly: true, value: "vector-tile" })], N.prototype, "type", void 0), e([y({ json: { origins: { "web-document": { read: { source: "styleUrl" } }, "portal-item": { read: { source: "url" } } }, write: false, read: false } })], N.prototype, "url", void 0), e([y({ readOnly: true })], N.prototype, "version", void 0), e([o("version", ["version", "currentVersion"])], N.prototype, "readVersion", null), e([y({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], N.prototype, "path", void 0), N = e([a3("esri.layers.VectorTileLayer")], N);
var A2 = N;
export {
  A2 as default
};
//# sourceMappingURL=VectorTileLayer-N3GVOQVV.js.map
