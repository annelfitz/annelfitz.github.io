import {
  o
} from "./chunk-S6XC4SOB.js";
import "./chunk-XEXYFKCA.js";
import {
  l
} from "./chunk-WFTDPAWN.js";
import {
  t
} from "./chunk-BVUFFGBR.js";
import "./chunk-54XXLVAD.js";
import "./chunk-KO7QNSNZ.js";
import {
  K2 as K
} from "./chunk-ZPU7GNG4.js";
import "./chunk-TNR6E67I.js";
import "./chunk-7O3VD45U.js";
import "./chunk-QREUCRQ4.js";
import "./chunk-YK3UMVCY.js";
import "./chunk-GB4RVOXH.js";
import "./chunk-MTQHYT7Y.js";
import "./chunk-JCP47SOM.js";
import "./chunk-CXCB57TE.js";
import "./chunk-IWO6JXL2.js";
import "./chunk-AVR3LWTZ.js";
import "./chunk-M4RFJU4F.js";
import "./chunk-L52HB3KV.js";
import "./chunk-3AIILHI5.js";
import {
  f
} from "./chunk-BFOJPIF7.js";
import "./chunk-RO3CTAP7.js";
import {
  V
} from "./chunk-GKMVTGGM.js";
import "./chunk-XGTCDM4C.js";
import "./chunk-RW5QMWE6.js";
import "./chunk-LGMX4E7L.js";
import "./chunk-Y546C2O5.js";
import "./chunk-BDRVHR2K.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-3KPZ3BQR.js";
import "./chunk-5JYVZQZR.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import {
  e,
  u
} from "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import "./chunk-2SDMYJDE.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import "./chunk-NDIXNREV.js";
import "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/symbols/support/previewCIMSymbol.js
var s = new o(null);
var c = e(t.size);
var m = e(t.maxSize);
var u2 = e(t.lineWidth);
var f2 = 1;
async function h(e2, t2, i) {
  const l2 = t2 == null ? void 0 : t2.size;
  let r = null != l2 && "object" == typeof l2 && "width" in l2 ? l2.width : l2, n = null != l2 && "object" == typeof l2 && "height" in l2 ? l2.height : l2;
  if (null == r || null == n)
    if ("esriGeometryPolygon" === i)
      r = c, n = c;
    else {
      const l3 = await y(e2, t2, i);
      l3 && (r = l3.width, n = l3.height), "esriGeometryPolyline" === i && (r = u2), r = null != r && isFinite(r) ? Math.min(r, m) : c, n = null != n && isFinite(n) ? Math.max(Math.min(n, m), f2) : c;
    }
  return "legend" === t2.style && "esriGeometryPolyline" === i && (r = u2), { width: r, height: n };
}
async function y(e2, t2, l2) {
  const { feature: n, fieldMap: a, viewParams: o2 } = t2.cimOptions || t2, c2 = await f.resolveSymbolOverrides(e2.data, n, null, a, l2, null, o2);
  if (!c2)
    return null;
  (e2 = e2.clone()).data = { type: "CIMSymbolReference", symbol: c2 }, e2.data.primitiveOverrides = void 0;
  const m2 = [];
  return K.fetchResources(c2, s.resourceManager, m2), K.fetchFonts(c2, s.resourceManager, m2), m2.length > 0 && await Promise.all(m2), K.getEnvelope(c2, null, s.resourceManager);
}
async function p(e2, i = {}) {
  var _a;
  const { node: l2, opacity: r, symbolConfig: a } = i, c2 = null != a && "object" == typeof a && "isSquareFill" in a && a.isSquareFill, m2 = i.cimOptions || i, u3 = m2.geometryType || V((_a = e2 == null ? void 0 : e2.data) == null ? void 0 : _a.symbol), f3 = await h(e2, i, u3), { feature: y2, fieldMap: p2 } = m2, d = c2 || "esriGeometryPolygon" !== u3 ? "preview" : "legend", g = await s.rasterizeCIMSymbolAsync(e2, y2, f3, d, p2, u3, null, m2.viewParams, m2.allowScalingUp);
  if (!g)
    return null;
  const { width: w, height: b } = g, v = document.createElement("canvas");
  v.width = w, v.height = b;
  v.getContext("2d").putImageData(g, 0, 0);
  const M = u(f3.width), j = u(f3.height), S = new Image(M, j);
  S.src = v.toDataURL(), S.ariaLabel = i.ariaLabel ?? null, S.alt = i.ariaLabel ?? "", null != r && (S.style.opacity = `${r}`);
  let C = S;
  if (null != i.effectView) {
    const e3 = { shape: { type: "image", x: 0, y: 0, width: M, height: j, src: S.src }, fill: null, stroke: null, offset: [0, 0] };
    C = l([[e3]], [M, j], { effectView: i.effectView, ariaLabel: i.ariaLabel });
  }
  return l2 && C && l2.appendChild(C), C;
}
export {
  p as previewCIMSymbol
};
//# sourceMappingURL=previewCIMSymbol-VJNBQSHE.js.map
