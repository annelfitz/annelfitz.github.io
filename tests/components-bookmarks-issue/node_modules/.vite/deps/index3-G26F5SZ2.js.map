{
  "version": 3,
  "sources": ["../../@esri/calcite-components/node_modules/timezone-groups/dist/index.js"],
  "sourcesContent": ["const supportedTimeZones = (() => {\n    const platformTimeZones = Intl.supportedValuesOf('timeZone');\n    // not all browsers include these time zones, so we add them to ensure consistent groups\n    const etcTimeZones = [\n        \"Etc/GMT+1\",\n        \"Etc/GMT+10\",\n        \"Etc/GMT+11\",\n        \"Etc/GMT+12\",\n        \"Etc/GMT+2\",\n        \"Etc/GMT+3\",\n        \"Etc/GMT+4\",\n        \"Etc/GMT+5\",\n        \"Etc/GMT+6\",\n        \"Etc/GMT+7\",\n        \"Etc/GMT+8\",\n        \"Etc/GMT+9\",\n        \"Etc/GMT-1\",\n        \"Etc/GMT-10\",\n        \"Etc/GMT-11\",\n        \"Etc/GMT-12\",\n        \"Etc/GMT-13\",\n        \"Etc/GMT-14\",\n        \"Etc/GMT-2\",\n        \"Etc/GMT-3\",\n        \"Etc/GMT-4\",\n        \"Etc/GMT-5\",\n        \"Etc/GMT-6\",\n        \"Etc/GMT-7\",\n        \"Etc/GMT-8\",\n        \"Etc/GMT-9\"\n    ];\n    return [...new Set([...platformTimeZones, ...etcTimeZones])];\n})();\n\nconst now = new Date();\nconst startDate = now.toISOString();\nconst daysInYear = 365;\nconst groupDateRange = daysInYear;\nconst defaultGroupingOptions = {\n    startDate,\n    groupDateRange,\n    debug: false,\n};\n\nconst continentAllowList = new Set([\n    'Europe',\n    'Asia',\n    'America',\n    'America/Argentina',\n    'Africa',\n    'Australia',\n    'Pacific',\n    'Atlantic',\n    'Antarctica',\n    'Arctic',\n    'Indian',\n]);\nconst _getDates = (startDate, numberDays, dateEngine) => {\n    const dateArray = [];\n    let date = dateEngine.create(startDate);\n    for (let i = 0; i <= numberDays; i++) {\n        date = dateEngine.increase(date);\n        dateArray.push(dateEngine.formatToIsoDateString(date));\n    }\n    return dateArray;\n};\nconst _extractContinent = (label) => {\n    if (label.includes('Istanbul')) {\n        return 'Europe';\n    }\n    const lastIndex = label.lastIndexOf('/');\n    return lastIndex === -1 ? label : label.slice(0, lastIndex);\n};\nconst _isRegularContinent = (continent) => continentAllowList.has(continent);\nconst generateTimeZoneMetadata = (timeZoneItems, startDate, numberDays, dateEngine, debug = false) => {\n    const processedDates = new Map();\n    if (debug) {\n        console.log(`Initializing data starting ${startDate} with ${numberDays} days in the future, comparing ${timeZoneItems.length} timezones`);\n    }\n    const theDates = _getDates(startDate, numberDays, dateEngine);\n    return timeZoneItems.map((tzItem) => {\n        const label = tzItem.label;\n        const continent = _extractContinent(label);\n        const dates = theDates.map((date) => {\n            const key = `${date}-${label}`;\n            let utc = processedDates.get(key);\n            if (utc) {\n                return utc;\n            }\n            utc = dateEngine.isoToTimeZone(date, label);\n            processedDates.set(key, utc);\n            return utc;\n        });\n        return {\n            ...tzItem,\n            continent,\n            isRegularContinent: _isRegularContinent(continent),\n            dates,\n        };\n    });\n};\nconst compareDateArrs = (array1, array2, dateEngine) => array1.length === array2.length &&\n    array1.every((value, index) => dateEngine.same(value, array2[index]));\nconst getGroupLabelTimeZoneIndices = (rawTZs, max = 5) => {\n    const shrinkedTzs = rawTZs.filter(({ label }) => _isRegularContinent(_extractContinent(label)));\n    if (shrinkedTzs.length === 0) {\n        return [0];\n    }\n    const validLabels = shrinkedTzs.map((tz) => rawTZs.indexOf(tz));\n    return equallyDistributedSampling(validLabels, max);\n};\nfunction equallyDistributedSampling(items, maxItems = 5) {\n    const totalItems = items.length;\n    if (totalItems <= maxItems) {\n        return items;\n    }\n    const numberItemsToSelect = Math.min(totalItems - 2, maxItems - 2);\n    const stepSize = (totalItems - 1) / (numberItemsToSelect + 1);\n    return [\n        items[0],\n        ...Array.from({ length: numberItemsToSelect }, (_, i) => items[Math.round((i + 1) * stepSize)]),\n        items[totalItems - 1],\n    ];\n}\n\nasync function groupTimeZones(options) {\n    const { debug, groupDateRange, hooks, startDate, dateEngine } = {\n        ...defaultGroupingOptions,\n        ...options,\n    };\n    const grouping = [];\n    if (!dateEngine) {\n        throw new Error('dateEngine is required');\n    }\n    const timeZoneItems = supportedTimeZones.map((tz) => ({ label: tz }));\n    hooks?.onBeforeTimeZoneMetadataCreate?.(timeZoneItems);\n    const timeZoneMetadata = generateTimeZoneMetadata(timeZoneItems, startDate, groupDateRange, dateEngine, debug);\n    hooks?.onTimeZoneMetadataCreate?.(timeZoneMetadata);\n    // We traverse the mappedDB and see if we find matches by comparing each set\n    // of transformed date for that specific TZ.\n    for (const tzMetadatumI of timeZoneMetadata) {\n        const { label, continent, dates } = tzMetadatumI;\n        // ignore if we visited this element already\n        if (tzMetadatumI.visited) {\n            continue;\n        }\n        // Mark element as already visited\n        tzMetadatumI.visited = true;\n        // The grouped timezone that we want as a result\n        const newGroup = {\n            labelTzIndices: undefined,\n            tzs: [{ label }],\n        };\n        hooks?.onGroupCreate?.(newGroup, tzMetadatumI);\n        for (const tzMetadatumJ of timeZoneMetadata.filter((_) => !_.visited)) {\n            const { label: labelJ, continent: continentJ, isRegularContinent: isRegularContinentJ, dates: datesJ, } = tzMetadatumJ;\n            // We define a matching TZ by:\n            // 1) if both continents match (avoid grouping Antarctica with anything else)\n            // 2) if the transformed dates match in both TZs\n            if ((continent === continentJ || !isRegularContinentJ) &&\n                compareDateArrs(dates, datesJ, dateEngine)) {\n                const tzItem = { label: labelJ };\n                newGroup.tzs.push(tzItem);\n                hooks?.onGroupTimeZoneAdd?.(newGroup, tzItem, tzMetadatumJ);\n                // Mark element as already visited\n                tzMetadatumJ.visited = true;\n            }\n        }\n        grouping.push(newGroup);\n        hooks?.onGroupAdd?.(newGroup);\n    }\n    // Now that we have a group, we want an easy way to find a fitting label for the group\n    // which is defined as the list of the most-common 7 cities, shown in alphabetical order\n    const finalGrouping = grouping\n        .map((group) => {\n        hooks?.onBeforeFinalGroupCreate?.(group);\n        group.tzs = group.tzs.sort((a, b) => a.label.localeCompare(b.label));\n        const finalGrouping = {\n            labelTzIndices: getGroupLabelTimeZoneIndices(group.tzs, 7),\n            tzs: group.tzs.map((_) => _.label),\n        };\n        hooks?.onFinalGroupCreate?.(finalGrouping, group);\n        return finalGrouping;\n    })\n        .sort((a, b) => b.tzs.length - a.tzs.length);\n    if (debug) {\n        const missingTzs = supportedTimeZones\n            .map((tz) => (finalGrouping.some((y) => y.tzs.includes(tz)) ? null : tz))\n            .filter(Boolean);\n        if (missingTzs.length > 0) {\n            throw new Error(`There are ${missingTzs.length} missing timezones: ${missingTzs.toString()}`);\n        }\n    }\n    return hooks?.onFinalGroupingCreate\n        ? hooks.onFinalGroupingCreate(finalGrouping)\n        : finalGrouping;\n}\n\nexport { groupTimeZones };\n"],
  "mappings": "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",
  "names": ["startDate", "groupDateRange", "_a", "finalGrouping", "_b"]
}
