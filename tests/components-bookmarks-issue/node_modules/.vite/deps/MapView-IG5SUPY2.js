import {
  m as m5
} from "./chunk-BQ5JBA3I.js";
import {
  N,
  U,
  a as a2,
  a2 as a4,
  b,
  e as e6,
  e2 as e7,
  i as i4,
  l as l4,
  m as m4,
  n as n5,
  o as o4,
  r2 as r7,
  r3 as r8,
  s as s10,
  s2 as s11,
  t2 as t4,
  t3 as t5,
  t4 as t6,
  t5 as t7,
  u as u3,
  u2 as u4,
  y as y2
} from "./chunk-PZYSOG4K.js";
import "./chunk-QHWIMHBR.js";
import "./chunk-7PVGO24P.js";
import "./chunk-EL74TSJT.js";
import "./chunk-OOS2G3OW.js";
import "./chunk-XKMZJHKM.js";
import "./chunk-DRUZYZGP.js";
import {
  o as o5,
  r as r5
} from "./chunk-PTIWH4S7.js";
import "./chunk-L3GUCBXG.js";
import "./chunk-NLXTDFZC.js";
import "./chunk-GMO4JSSI.js";
import "./chunk-O3PC6BW5.js";
import "./chunk-BU5WMCML.js";
import "./chunk-P257AUOX.js";
import "./chunk-IKON42NH.js";
import {
  e as e5
} from "./chunk-3PAQL7YW.js";
import {
  a as a3,
  c as c2,
  r as r6,
  s as s9
} from "./chunk-6GHUHFYG.js";
import {
  _,
  d as d2,
  i as i3
} from "./chunk-K3DEHPDR.js";
import "./chunk-I6RS7YIS.js";
import {
  Gt,
  H,
  Y,
  Z,
  gt,
  ht,
  jt,
  kt,
  pt,
  tt,
  wt,
  xt
} from "./chunk-FZI7RNDL.js";
import {
  l as l3
} from "./chunk-BSYULFZQ.js";
import "./chunk-YGP7UFWC.js";
import {
  m as m3
} from "./chunk-UIOX7MPV.js";
import "./chunk-MCZ4QOSQ.js";
import "./chunk-CDYT7KXF.js";
import "./chunk-EAAEPSBY.js";
import "./chunk-6RR3WN7W.js";
import "./chunk-TXCVD3YI.js";
import "./chunk-M5DWZKDJ.js";
import "./chunk-YKIGDW5O.js";
import {
  r as r4,
  t as t3
} from "./chunk-T3YOCYDS.js";
import {
  n as n4
} from "./chunk-H7MCWZPK.js";
import "./chunk-5JXZHN2A.js";
import {
  h as h2,
  s as s8
} from "./chunk-KTQIY334.js";
import {
  i as i2
} from "./chunk-32X2FZ3S.js";
import {
  p as p3
} from "./chunk-JL4LXZGM.js";
import "./chunk-QREUCRQ4.js";
import "./chunk-YK3UMVCY.js";
import {
  e as e4
} from "./chunk-IQFWVTUJ.js";
import "./chunk-GB4RVOXH.js";
import "./chunk-DCBZOZ54.js";
import "./chunk-5IT6RVBX.js";
import "./chunk-I4SHZ6P5.js";
import "./chunk-JBU54P54.js";
import "./chunk-5LIYYE75.js";
import "./chunk-YPY24RRU.js";
import "./chunk-O7RKI2QW.js";
import "./chunk-L52HB3KV.js";
import {
  e as e3,
  m,
  o as o3,
  r as r3
} from "./chunk-3AIILHI5.js";
import {
  m as m2
} from "./chunk-YH2IYJYF.js";
import "./chunk-GGHKH3LP.js";
import "./chunk-VS6AHHIY.js";
import "./chunk-WZJNHZ6H.js";
import "./chunk-YBPOKK6D.js";
import "./chunk-W5ALAOW2.js";
import "./chunk-FHDHOWK5.js";
import {
  n as n3
} from "./chunk-ZLQTPFTL.js";
import "./chunk-HZSGATFT.js";
import "./chunk-ERD6I7QP.js";
import "./chunk-Z3NX5DTX.js";
import "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import "./chunk-SCHTG6ZQ.js";
import "./chunk-G7YFDDME.js";
import "./chunk-PCKG3UTS.js";
import "./chunk-3VMVD66K.js";
import {
  f as f2
} from "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-I2X6UR6L.js";
import "./chunk-NVYR73RE.js";
import "./chunk-HV2SFSJW.js";
import {
  l as l2
} from "./chunk-CYVKDANA.js";
import "./chunk-SBARCIDP.js";
import {
  j as j2,
  p as p2
} from "./chunk-2SYXH2R7.js";
import "./chunk-7JNXJYRU.js";
import "./chunk-G7FOE26O.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import {
  i
} from "./chunk-QX66UTIR.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import {
  c
} from "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import {
  e as e2
} from "./chunk-6AQIVLDN.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-VTH4DAHQ.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-SLQA5YBV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import {
  B,
  T
} from "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import {
  j
} from "./chunk-HV6S3GY2.js";
import {
  s as s6
} from "./chunk-IGR2BTWR.js";
import {
  M,
  s as s7,
  u as u2
} from "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-CXNX736Z.js";
import "./chunk-RGCWZ2KZ.js";
import "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import "./chunk-2SDMYJDE.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import {
  f,
  t as t2,
  w as w2
} from "./chunk-IZKCZQUY.js";
import {
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import {
  G,
  r as r2,
  s2 as s5
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import {
  s as s4
} from "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  A as A2,
  C,
  P,
  d,
  p,
  w
} from "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import {
  o as o2
} from "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  A,
  S,
  r2 as r,
  t,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a,
  n as n2,
  s3,
  v
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  h,
  o2 as o,
  s as s2
} from "./chunk-JGDJR5EV.js";
import {
  l,
  u
} from "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n,
  s
} from "./chunk-7RBRCL6S.js";
import {
  has,
  k
} from "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/views/2d/AnimationManager.js
var u5 = class {
  constructor(t12, i8, s14, e14) {
    const o10 = t12.targetGeometry, n10 = i8.targetGeometry;
    e14 ? "string" == typeof e14 && (e14 = r4(e14) || t3.ease) : e14 = t3.ease, this.easing = e14, this.duration = s14, this.sCenterX = o10.x, this.sCenterY = o10.y, this.sScale = t12.scale, this.sRotation = t12.rotation, this.tCenterX = n10.x, this.tCenterY = n10.y, this.tScale = i8.scale, this.tRotation = i8.rotation, this.dCenterX = this.tCenterX - this.sCenterX, this.dCenterY = this.tCenterY - this.sCenterY, this.dScale = this.tScale - this.sScale, this.dRotation = this.tRotation - this.sRotation, this.dRotation > 180 ? this.dRotation -= 360 : this.dRotation < -180 && (this.dRotation += 360);
  }
  applyRatio(t12, i8) {
    const s14 = this.easing(i8);
    let e14, o10, n10, a13;
    i8 >= 1 ? (e14 = this.tCenterX, o10 = this.tCenterY, n10 = this.tRotation, a13 = this.tScale) : (e14 = this.sCenterX + s14 * this.dCenterX, o10 = this.sCenterY + s14 * this.dCenterY, n10 = this.sRotation + s14 * this.dRotation, a13 = this.sScale + s14 * this.dScale), t12.targetGeometry.x = e14, t12.targetGeometry.y = o10, t12.scale = a13, t12.rotation = n10;
  }
};
var d3 = class extends S {
  constructor(t12) {
    super(t12), this._animation = null, this.updateFunction = null, this.duration = 200, this.transition = null, this.easing = t3.ease, this.view = null, this.viewpoint = new l3({ targetGeometry: new x(), scale: 0, rotation: 0 }), this._updateTask = A({ postRender: this._postRender.bind(this) }), this._updateTask.pause();
  }
  destroy() {
    this._updateTask = l(this._updateTask);
  }
  get animation() {
    return this._animation;
  }
  set animation(t12) {
    this._animation = t12, this.view && (this.view.animation = t12);
  }
  animate(t12, i8, s14) {
    this.stop();
    const e14 = this.viewpoint;
    Z(e14, i8), this.transition = new u5(this.viewpoint, t12.target, (s14 == null ? void 0 : s14.duration) || this.duration, (s14 == null ? void 0 : s14.easing) || this.easing);
    const o10 = () => {
      var _a, _b;
      this.animation === t12 && this._updateTask && ("finished" === t12.state && ((_a = this.transition) == null ? void 0 : _a.applyRatio(this.viewpoint, 1), ((_b = this.view) == null ? void 0 : _b.state) && (this.view.state.viewpoint = this.viewpoint.clone())), this.animation = null, this.updateFunction = null);
    };
    return t12.when(o10, o10), this._startTime = performance.now(), this._updateTask.resume(), this.animation = t12, t12;
  }
  animateContinuous(t12, i8) {
    this.stop(), this.updateFunction = i8, this.viewpoint = t12;
    const s14 = new a2({ target: t12.clone() }), e14 = () => {
      this.animation === s14 && this._updateTask && (this.animation = null, this.updateFunction = null);
    };
    return s14.when(e14, e14), this._startTime = performance.now(), this._updateTask.resume(), this.animation = s14, s14;
  }
  stop() {
    this.animation && (this.animation.stop(), this.animation = null, this.updateFunction = null);
  }
  _postRender(t12) {
    var _a, _b;
    const i8 = this.animation;
    if (i8 && i8.state !== a2.State.STOPPED) {
      if (this.updateFunction)
        this.updateFunction(this.viewpoint, t12.deltaTime);
      else {
        const t13 = this.transition, i9 = (performance.now() - this._startTime) / t13.duration, s14 = i9 >= 1;
        t13.applyRatio(this.viewpoint, i9), s14 && ((_a = this.animation) == null ? void 0 : _a.finish());
      }
      ((_b = this.view) == null ? void 0 : _b.state) && (this.view.state.viewpoint = this.viewpoint.clone());
    } else
      this._updateTask.pause();
  }
};
e([y()], d3.prototype, "duration", void 0), e([y()], d3.prototype, "transition", void 0), e([y()], d3.prototype, "easing", void 0), e([y()], d3.prototype, "view", void 0), e([y()], d3.prototype, "viewpoint", void 0), d3 = e([a("esri.views.2d.AnimationManager")], d3);
var l5 = d3;

// node_modules/@arcgis/core/views/2d/FrameTask.js
var a5 = class {
  constructor(t12) {
    this.view = t12, this._stationaryHandle = null, this._frameTaskHandle = null, this._updateParameters = null, this._updateRequested = false, this.stationary = true, this.animationInProgress = false, this.prepare = () => {
      this._updateParameters && (this._updateParameters.state = this.view.state, this._updateParameters.stationary = this.view.stationary, this._updateParameters.pixelRatio = window.devicePixelRatio, this._updateParameters.renderingOptions = this.view.renderingOptions);
    }, this.update = () => {
      var _a2, _b;
      if (this._updateRequested = false, (_a2 = this.view) == null ? void 0 : _a2.destroyed)
        return;
      const { allLayerViews: t13, graphicsView: e14, labelManager: a13, state: { id: s14 } } = this.view;
      t13.forEach(this._updateLayerView, this), null != a13 && (a13.lastUpdateId !== s14 && (a13.viewChange(), a13.lastUpdateId = s14), a13.updateRequested && a13.processUpdate(this._updateParameters)), null != e14 && (e14.lastUpdateId !== s14 && (e14.viewChange(), e14.lastUpdateId = s14), e14.updateRequested && e14.processUpdate(this._updateParameters)), this.view.graphicsTileStore.setViewState(this._updateParameters.state), this.animationInProgress || this._updateRequested || ((_b = this._frameTaskHandle) == null ? void 0 : _b.pause());
    };
  }
  destroy() {
    this.stop();
  }
  start() {
    if (this._frameTaskHandle)
      return;
    const a13 = this.view;
    this.stationary = a13.stationary, this._updateParameters = { state: a13.state, pixelRatio: window.devicePixelRatio, stationary: this.stationary, renderingOptions: a13.renderingOptions }, this._stationaryHandle = d(() => a13.stationary, (t12) => {
      this.stationary = t12, this.requestFrame();
    }), this._frameTaskHandle = A(this), this.requestUpdate();
  }
  stop() {
    var _a2;
    this._frameTaskHandle && (this._updateRequested = false, (_a2 = this._stationaryHandle) == null ? void 0 : _a2.remove(), this._frameTaskHandle.remove(), this._updateParameters = this._stationaryHandle = this._frameTaskHandle = null, this.stationary = true, this.animationInProgress = false);
  }
  requestUpdate() {
    this._updateRequested || (this._updateRequested = true, this.requestFrame());
  }
  requestFrame() {
    this._frameTaskHandle && this._frameTaskHandle.resume();
  }
  _updateLayerView(t12) {
    var _a2;
    if (!t12.attached)
      return void this.requestUpdate();
    const e14 = this.view.state, a13 = t12.lastUpdateId;
    null != a13 && (this.stationary || t12.moving) || (t12.moving = true), a13 !== e14.id && t12.viewChange(), this.stationary && t12.moving && (t12.moving = false, t12.moveEnd()), t12.lastUpdateId = e14.id, t12.updateRequested && t12.processUpdate(this._updateParameters), "layerViews" in t12 && ((_a2 = t12.layerViews) == null ? void 0 : _a2.forEach(this._updateLayerView, this));
  }
};

// node_modules/@arcgis/core/views/2d/GoToManager.js
var l6 = class extends S {
  constructor(t12) {
    super(t12), this._gotoTask = null;
  }
  destroy() {
    this._gotoTask = null;
  }
  async goTo(t12, o10) {
    if (!t12)
      return void n.getLogger(this).error("#goTo()", "target cannot be null or undefined");
    const e14 = new a2();
    this.view.animation = e14, await w(() => this.view.ready, o10);
    const r11 = { animate: true, ...o10 }, { extent: s14, spatialReference: a13, size: c8, viewpoint: l12, constraints: h3, padding: g2, allLayerViews: w4 } = this.view, d8 = Y(t12, { extent: s14, spatialReference: a13, size: c8, viewpoint: l12, constraints: h3, padding: g2, allLayerViews: w4, pickClosestTarget: (o10 == null ? void 0 : o10.pickClosestTarget) ?? true });
    return e14 == null ? void 0 : e14.update(d8), this._gotoTask = {}, r11.animate ? this._gotoAnimated(d8, r11) : this._gotoImmediate(d8, r11);
  }
  _gotoImmediate(t12, o10) {
    const i8 = this._gotoTask, s14 = this.view.animation, n10 = t12.then((t13) => {
      if (s2(o10), i8 !== this._gotoTask)
        throw new s("view:goto-interrupted", "Goto was interrupted");
      this.view.viewpoint = s14.target = t13, s14.finish();
    });
    return this._cancellableGoTo(i8, s14, n10, o10);
  }
  _gotoAnimated(t12, o10) {
    const i8 = this._gotoTask, s14 = this.view.animation;
    if (!s14)
      return Promise.resolve();
    const n10 = t12.then((t13) => {
      if (s2(o10), i8 !== this._gotoTask)
        throw new s("view:goto-interrupted", "Goto was interrupted");
      return s14.update(t13), this.view.animationManager.animate(s14, this.view.viewpoint, o10), s14.when().then(() => {
      }, () => {
      });
    });
    return this._cancellableGoTo(i8, s14, n10, o10);
  }
  _cancellableGoTo(t12, o10, e14, i8) {
    const r11 = () => t12 === this._gotoTask;
    return h(e14, i8).finally(() => {
      r11() && (o10.done || o10.stop());
    });
  }
};
e([y({ constructOnly: true })], l6.prototype, "view", void 0), l6 = e([a("esri.views.2d.GoToManager")], l6);

// node_modules/@arcgis/core/views/2d/layerViewModuleImportUtils.js
function r9() {
  return Promise.all([import("./webglDeps-SER3V3VU.js"), import("./mapViewDeps-YP5NRFOP.js")]);
}
var a6 = () => r9().then(() => import("./TileLayerView2D-OT3OFP3Y.js"));
var t8 = () => r9().then(() => import("./FeatureLayerView2D-2PHQS4C6.js"));
var i5 = { "base-dynamic": () => r9().then(() => import("./BaseDynamicLayerView2D-KOP3PXUE.js")), "base-tile": a6, "bing-maps": a6, catalog: () => r9().then(() => import("./CatalogLayerView2D-54BE65JV.js")), "catalog-dynamic-group": () => r9().then(() => import("./CatalogDynamicGroupLayerView2D-TSDMRMW6.js")), "catalog-footprint": () => r9().then(() => import("./CatalogFootprintLayerView2D-R2JWLDAZ.js")), csv: t8, "geo-rss": () => r9().then(() => import("./GeoRSSLayerView2D-NTECX65X.js")), feature: t8, geojson: t8, graphics: () => r9().then(() => import("./GraphicsLayerView2D-EHYMOK3A.js")), group: () => r9().then(() => import("./GroupLayerView2D-T3MVETR6.js")), imagery: () => r9().then(() => import("./ImageryLayerView2D-AERTJ5CR.js")), "imagery-tile": () => r9().then(() => import("./ImageryTileLayerView2D-EZ7LOFSZ.js")), kml: () => r9().then(() => import("./KMLLayerView2D-WUVQAEZJ.js")), "knowledge-graph": () => r9().then(() => import("./KnowledgeGraphLayerView2D-WZVSMR4E.js")), "link-chart": () => r9().then(() => import("./KnowledgeGraphLayerView2D-WZVSMR4E.js")), "knowledge-graph-sublayer": t8, "map-image": () => r9().then(() => import("./MapImageLayerView2D-C6HDILFH.js")), "map-notes": () => r9().then(() => import("./MapNotesLayerView2D-7HTVMTWD.js")), media: () => r9().then(() => import("./MediaLayerView2D-65GI23TZ.js")), "ogc-feature": () => r9().then(() => import("./OGCFeatureLayerView2D-JIENJADB.js")), "open-street-map": a6, "oriented-imagery": t8, route: () => r9().then(() => import("./RouteLayerView2D-HYZO3FNN.js")), stream: () => r9().then(() => import("./StreamLayerView2D-6SGYNLVR.js")), "subtype-group": () => r9().then(() => import("./SubtypeGroupLayerView2D-P5PONZHP.js")), tile: a6, "vector-tile": () => r9().then(() => import("./VectorTileLayerView2D-Q5JW5ABZ.js")), video: () => r9().then(() => import("./VideoLayerView2D-T54CQSXS.js")), wcs: () => r9().then(() => import("./ImageryTileLayerView2D-EZ7LOFSZ.js")), "web-tile": a6, wfs: t8, wms: () => r9().then(() => import("./WMSLayerView2D-MIAPOZEK.js")), wmts: () => r9().then(() => import("./WMTSLayerView2D-YKXS67SJ.js")), "line-of-sight": null, "base-elevation": null, "building-scene": null, dimension: null, elevation: null, "integrated-mesh": null, "integrated-mesh-3dtiles": null, "point-cloud": null, voxel: null, scene: null, unknown: null, unsupported: null };
function s12(r11) {
  const a13 = r11.declaredClass ? r11.declaredClass.slice(r11.declaredClass.lastIndexOf(".") + 1) : "Unknown", t12 = a13.replaceAll(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
  return new s(`${t12}:view-not-supported`, `${a13} is not supported in 2D`);
}
var l7 = { hasLayerViewModule: (e14) => null != i5[e14.type], importLayerView: (e14) => {
  const r11 = i5[e14.type];
  if (null == r11)
    throw s12(e14);
  return r11(e14);
} };

// node_modules/@arcgis/core/geometry/support/near.js
function n6(n10, m9) {
  const { spatialReference: r11 } = m9, i8 = [m9.x, m9.y];
  let s14 = Number.POSITIVE_INFINITY, x2 = 0, a13 = 0;
  const c8 = [0, 0], f5 = "extent" === n10.type ? [[[n10.xmin, n10.ymin], [n10.xmin, n10.ymax], [n10.xmax, n10.ymax], [n10.xmax, n10.ymin], [n10.xmin, n10.ymin]]] : n10.rings;
  for (const o10 of f5)
    for (let n11 = 0; n11 < o10.length - 1; n11++) {
      s6(c8, i8, o10, n11);
      const m10 = m(i8, c8);
      m10 < s14 && (s14 = m10, x2 = c8[0], a13 = c8[1]);
    }
  return { coordinate: new x({ x: x2, y: a13, spatialReference: r11 }), distance: s14 };
}

// node_modules/@arcgis/core/views/2d/constraints/GeometryConstraint.js
var l8;
var p4 = l8 = class extends i(S) {
  constructor(e14) {
    super(e14), this.geometry = null, this.spatialReference = null;
  }
  get normalizedGeometry() {
    if (null == this.geometry || !this.spatialReference)
      return null;
    if (!this.spatialReference.equals(this.geometry.spatialReference))
      try {
        return B(this.geometry, this.spatialReference);
      } catch (e14) {
        return n.getLogger(this).error("#constraints.geometry", "could not project the geometry to the view's spatial reference", { geometry: this.geometry, spatialReference: this.spatialReference, error: e14 }), null;
      }
    return this.geometry;
  }
  constrain(e14, r11) {
    if (null == this.normalizedGeometry)
      return e14;
    const t12 = e14.targetGeometry;
    if ("extent" === this.normalizedGeometry.type ? t2(this.normalizedGeometry, t12) : f(this.normalizedGeometry, t12))
      return e14;
    const { coordinate: o10 } = n6(this.normalizedGeometry, t12);
    return o10 ? (e14.targetGeometry = o10, e14) : e14;
  }
  clone() {
    var _a, _b;
    return new l8({ geometry: (_a = this.geometry) == null ? void 0 : _a.clone(), spatialReference: (_b = this.spatialReference) == null ? void 0 : _b.clone() });
  }
};
e([y({ constructOnly: true })], p4.prototype, "geometry", void 0), e([y({ readOnly: true })], p4.prototype, "normalizedGeometry", null), e([y({ constructOnly: true })], p4.prototype, "spatialReference", void 0), p4 = l8 = e([a("esri.views.2d.constraints.GeometryConstraint")], p4);

// node_modules/@arcgis/core/views/2d/constraints/RotationConstraint.js
var a7;
var n7 = a7 = class extends i(S) {
  constructor() {
    super(...arguments), this.enabled = true, this.rotationEnabled = true;
  }
  constrain(o10, t12) {
    return this.enabled && t12 ? (this.rotationEnabled || (o10.rotation = t12.rotation), o10) : o10;
  }
  clone() {
    return new a7({ enabled: this.enabled, rotationEnabled: this.rotationEnabled });
  }
};
e([y()], n7.prototype, "enabled", void 0), e([y()], n7.prototype, "rotationEnabled", void 0), n7 = a7 = e([a("esri.views.2d.constraints.RotationConstraint")], n7);
var i6 = n7;

// node_modules/@arcgis/core/views/2d/constraints/ZoomConstraint.js
var a8;
var c3 = a8 = class extends i(S) {
  constructor(e14) {
    super(e14), this._lodByScale = {}, this._scales = [], this.effectiveLODs = null, this.effectiveMinZoom = -1, this.effectiveMaxZoom = -1, this.effectiveMinScale = 0, this.effectiveMaxScale = 0, this.lods = null, this.minZoom = -1, this.maxZoom = -1, this.minScale = 0, this.maxScale = 0, this.snapToZoom = true;
  }
  initialize() {
    let e14, { lods: t12, minScale: o10, maxScale: s14, minZoom: i8, maxZoom: a13 } = this, c8 = -1, l12 = -1, r11 = false, n10 = false;
    if (0 !== o10 && 0 !== s14 && o10 < s14 && ([o10, s14] = [s14, o10]), !(t12 == null ? void 0 : t12.length))
      return this._set("effectiveMinScale", o10), void this._set("effectiveMaxScale", s14);
    t12 = t12.map((e15) => e15.clone()), t12.sort((e15, t13) => t13.scale - e15.scale), t12.forEach((e15, t13) => e15.level = t13);
    for (const f5 of t12)
      !r11 && o10 > 0 && o10 >= f5.scale && (c8 = f5.level, r11 = true), !n10 && s14 > 0 && s14 >= f5.scale && (l12 = e14 ? e14.level : -1, n10 = true), e14 = f5;
    -1 === i8 && (i8 = 0 === o10 ? 0 : c8), -1 === a13 && (a13 = 0 === s14 ? t12.length - 1 : l12), i8 = Math.max(i8, 0), i8 = Math.min(i8, t12.length - 1), a13 = Math.max(a13, 0), a13 = Math.min(a13, t12.length - 1), i8 > a13 && ([i8, a13] = [a13, i8]), o10 = t12[i8].scale, s14 = t12[a13].scale, t12.splice(0, i8), t12.splice(a13 - i8 + 1, t12.length), t12.forEach((e15, t13) => {
      this._lodByScale[e15.scale] = e15, this._scales[t13] = e15.scale;
    }), this._set("effectiveLODs", t12), this._set("effectiveMinZoom", i8), this._set("effectiveMaxZoom", a13), this._set("effectiveMinScale", o10), this._set("effectiveMaxScale", s14);
  }
  constrain(e14, t12) {
    if (t12 && e14.scale === t12.scale)
      return e14;
    const o10 = this.effectiveMinScale, s14 = this.effectiveMaxScale, i8 = e14.targetGeometry, a13 = t12 && t12.targetGeometry, c8 = 0 !== s14 && e14.scale < s14, l12 = 0 !== o10 && e14.scale > o10;
    if (c8 || l12) {
      const c9 = l12 ? o10 : s14;
      if (t12 && a13) {
        const o11 = (c9 - t12.scale) / (e14.scale - t12.scale);
        i8.x = a13.x + (i8.x - a13.x) * o11, i8.y = a13.y + (i8.y - a13.y) * o11;
      }
      e14.scale = c9;
    }
    return this.snapToZoom && this.effectiveLODs && (e14.scale = this._getClosestScale(e14.scale)), e14;
  }
  fit(e14) {
    if (!this.effectiveLODs || !this.snapToZoom)
      return this.constrain(e14, null);
    const t12 = this.scaleToZoom(e14.scale), o10 = Math.abs(t12 - Math.floor(t12));
    return e14.scale = this.zoomToScale(o10 > 0.99 ? Math.round(t12) : Math.floor(t12)), e14;
  }
  zoomToScale(e14) {
    if (!this.effectiveLODs)
      return 0;
    e14 -= this.effectiveMinZoom, e14 = Math.max(0, e14);
    const t12 = this._scales;
    if (e14 <= 0)
      return t12[0];
    if (e14 >= t12.length)
      return t12[t12.length - 1];
    const o10 = Math.floor(e14), s14 = Math.ceil(e14);
    return t12[o10] + (e14 - o10) * (t12[s14] - t12[o10]);
  }
  scaleToZoom(e14) {
    if (!this.effectiveLODs)
      return -1;
    const t12 = this._scales;
    let o10, s14;
    if (e14 >= t12[0])
      return this.effectiveMinZoom;
    if (e14 <= t12[t12.length - 1])
      return this.effectiveMaxZoom;
    for (let i8 = 0; i8 < t12.length - 1; i8++) {
      if (o10 = t12[i8], s14 = t12[i8 + 1], s14 === e14) {
        return i8 + this.effectiveMinZoom + 1;
      }
      if (o10 > e14 && s14 < e14) {
        return i8 + this.effectiveMinZoom + 1 - (e14 - s14) / (o10 - s14);
      }
    }
    return -1;
  }
  snapToClosestScale(e14) {
    if (!this.effectiveLODs)
      return e14;
    const t12 = this.scaleToZoom(e14);
    return this.zoomToScale(Math.round(t12));
  }
  snapToNextScale(e14, t12 = 0.5) {
    if (!this.effectiveLODs)
      return e14 * t12;
    const o10 = Math.round(this.scaleToZoom(e14));
    return this.zoomToScale(o10 + 1);
  }
  snapToPreviousScale(e14, t12 = 2) {
    if (!this.effectiveLODs)
      return e14 * t12;
    const o10 = Math.round(this.scaleToZoom(e14));
    return this.zoomToScale(o10 - 1);
  }
  clone() {
    return new a8({ lods: this.lods, minZoom: this.minZoom, maxZoom: this.maxZoom, minScale: this.minScale, maxScale: this.maxScale });
  }
  _getClosestScale(e14) {
    return this._lodByScale[e14] || (e14 = this._scales.reduce((t12, o10) => Math.abs(o10 - e14) <= Math.abs(t12 - e14) ? o10 : t12, this._scales[0])), this._lodByScale[e14].scale;
  }
};
e([y({ readOnly: true })], c3.prototype, "effectiveLODs", void 0), e([y({ readOnly: true })], c3.prototype, "effectiveMinZoom", void 0), e([y({ readOnly: true })], c3.prototype, "effectiveMaxZoom", void 0), e([y({ readOnly: true })], c3.prototype, "effectiveMinScale", void 0), e([y({ readOnly: true })], c3.prototype, "effectiveMaxScale", void 0), e([y()], c3.prototype, "lods", void 0), e([y()], c3.prototype, "minZoom", void 0), e([y()], c3.prototype, "maxZoom", void 0), e([y()], c3.prototype, "minScale", void 0), e([y()], c3.prototype, "maxScale", void 0), e([y()], c3.prototype, "snapToZoom", void 0), c3 = a8 = e([a("esri.views.2d.constraints.ZoomConstraint")], c3);
var l9 = c3;

// node_modules/@arcgis/core/views/2d/MapViewConstraints.js
var p5 = { base: null, key: "type", typeMap: { extent: w2, polygon: j } };
var y3 = class extends S {
  constructor(o10) {
    super(o10), this.lods = null, this.minScale = 0, this.maxScale = 0, this.minZoom = -1, this.maxZoom = -1, this.rotationEnabled = true, this.snapToZoom = true, this.customConstraints = new V();
  }
  destroy() {
    this.view = null;
  }
  get effectiveLODs() {
    return this._zoom.effectiveLODs;
  }
  get effectiveMinScale() {
    return this._zoom.effectiveMinScale;
  }
  get effectiveMaxScale() {
    return this._zoom.effectiveMaxScale;
  }
  get effectiveMinZoom() {
    return this._zoom.effectiveMinZoom;
  }
  get effectiveMaxZoom() {
    return this._zoom.effectiveMaxZoom;
  }
  set geometry(o10) {
    o10 ? this._set("geometry", o10) : this._set("geometry", null);
  }
  get version() {
    var _a, _b, _c;
    return `${(_a = this._zoom) == null ? void 0 : _a.uid}/${(_b = this._rotation) == null ? void 0 : _b.uid}/${(_c = this._geometry) == null ? void 0 : _c.uid}`;
  }
  get _geometry() {
    var _a, _b;
    const o10 = this._get("_geometry");
    return o10 && this.geometry === o10.geometry && ((_a = this.view) == null ? void 0 : _a.constraintsInfo.spatialReference) === o10.spatialReference ? o10 : new p4({ geometry: this.geometry, spatialReference: (_b = this.view) == null ? void 0 : _b.constraintsInfo.spatialReference });
  }
  get _rotation() {
    return new i6({ rotationEnabled: this.rotationEnabled });
  }
  get _zoom() {
    var _a;
    const o10 = this._get("_zoom"), t12 = this.lods || ((_a = this.view) == null ? void 0 : _a.constraintsInfo.lods), e14 = this.minZoom, r11 = this.maxZoom, s14 = this.minScale, i8 = this.maxScale, n10 = this.snapToZoom;
    return o10 && o10.lods === t12 && o10.minZoom === e14 && o10.maxZoom === r11 && o10.minScale === s14 && o10.maxScale === i8 && o10.snapToZoom === n10 ? o10 : new l9({ lods: t12, minZoom: e14, maxZoom: r11, minScale: s14, maxScale: i8, snapToZoom: n10 });
  }
  canZoomInTo(o10) {
    const t12 = this.effectiveMaxScale;
    return 0 === t12 || o10 >= t12;
  }
  canZoomOutTo(o10) {
    const t12 = this.effectiveMinScale;
    return 0 === t12 || o10 <= t12;
  }
  constrain(o10, t12) {
    return this._zoom.constrain(o10, t12), this._rotation.constrain(o10, t12), this._geometry.constrain(o10, t12), this.customConstraints.forEach((e14) => e14.constrain(o10, t12)), o10;
  }
  constrainByGeometry(o10) {
    return this._geometry.constrain(o10), this.customConstraints.forEach((t12) => {
      var _a;
      return (_a = t12.applyPanConstraint) == null ? void 0 : _a.call(t12, o10);
    }), o10;
  }
  fit(o10) {
    return this._zoom.fit(o10);
  }
  zoomToScale(o10) {
    return this._zoom.zoomToScale(o10);
  }
  scaleToZoom(o10) {
    return this._zoom.scaleToZoom(o10);
  }
  snapScale(o10) {
    return this._zoom.snapToClosestScale(o10);
  }
  snapToNextScale(o10) {
    return this._zoom.snapToNextScale(o10);
  }
  snapToPreviousScale(o10) {
    return this._zoom.snapToPreviousScale(o10);
  }
};
e([y({ readOnly: true })], y3.prototype, "effectiveLODs", null), e([y({ readOnly: true })], y3.prototype, "effectiveMinScale", null), e([y({ readOnly: true })], y3.prototype, "effectiveMaxScale", null), e([y({ readOnly: true })], y3.prototype, "effectiveMinZoom", null), e([y({ readOnly: true })], y3.prototype, "effectiveMaxZoom", null), e([y({ types: p5, value: null })], y3.prototype, "geometry", null), e([y({ type: [p2] })], y3.prototype, "lods", void 0), e([y()], y3.prototype, "minScale", void 0), e([y()], y3.prototype, "maxScale", void 0), e([y()], y3.prototype, "minZoom", void 0), e([y()], y3.prototype, "maxZoom", void 0), e([y()], y3.prototype, "rotationEnabled", void 0), e([y()], y3.prototype, "snapToZoom", void 0), e([y({ type: V })], y3.prototype, "customConstraints", void 0), e([y()], y3.prototype, "view", void 0), e([y({ readOnly: true })], y3.prototype, "version", null), e([y({ type: p4, readOnly: true })], y3.prototype, "_geometry", null), e([y({ type: i6 })], y3.prototype, "_rotation", null), e([y({ readOnly: true, type: l9 })], y3.prototype, "_zoom", null), y3 = e([a("esri.views.2d.MapViewConstraints")], y3);
var f3 = y3;

// node_modules/@arcgis/core/views/2d/PaddedViewState.js
var l10;
var m6;
var g = l10 = class extends S {
  constructor() {
    super(...arguments), this.left = 0, this.top = 0, this.right = 0, this.bottom = 0;
  }
  clone() {
    return new l10({ left: this.left, top: this.top, right: this.right, bottom: this.bottom });
  }
};
e([y()], g.prototype, "left", void 0), e([y()], g.prototype, "top", void 0), e([y()], g.prototype, "right", void 0), e([y()], g.prototype, "bottom", void 0), g = l10 = e([a("esri.views.2d.PaddedViewState.Padding")], g);
var w3 = m6 = class extends U {
  constructor(...t12) {
    super(...t12), this.paddedViewState = new U(), this._updateContent = (() => {
      const t13 = n3();
      return () => {
        const e14 = this._get("size"), i8 = this._get("padding");
        if (!e14 || !i8)
          return;
        const o10 = this.paddedViewState;
        o3(t13, i8.left + i8.right, i8.top + i8.bottom), e3(t13, e14, t13), r3(o10.size, t13);
        const s14 = o10.viewpoint;
        s14 && (this.viewpoint = s14);
      };
    })(), this.addHandles(d(() => [this.size, this.padding], () => this._updateContent(), C)), this.padding = new g(), this.size = [0, 0];
  }
  set padding(t12) {
    this._set("padding", t12 || new g());
  }
  set viewpoint(t12) {
    if (t12) {
      const e14 = t12.clone();
      this.paddedViewState.viewpoint = t12, gt(e14, t12, this._get("size"), this._get("padding"));
      const i8 = this._viewpoint2D, o10 = e14.targetGeometry;
      i8.center[0] = o10.x, i8.center[1] = o10.y, i8.rotation = e14.rotation, i8.scale = e14.scale, i8.spatialReference = o10.spatialReference, this._update();
    }
  }
  clone() {
    return new m6({ padding: this.padding.clone(), size: this.size.slice(), viewpoint: this.paddedViewState.viewpoint.clone(), pixelRatio: this.pixelRatio });
  }
};
e([y()], w3.prototype, "paddedViewState", void 0), e([y({ type: g })], w3.prototype, "padding", null), e([y()], w3.prototype, "viewpoint", null), w3 = m6 = e([a("esri.views.2d.PaddedViewState")], w3);
var f4 = w3;

// node_modules/@arcgis/core/views/2d/ViewStateManager.js
var z = class extends S {
  constructor(t12) {
    super(t12), this.constraints = null, this.ready = false, this.resizeAlign = "center", this.addHandles([d(() => {
      var _a;
      return (_a = this.constraints) == null ? void 0 : _a.version;
    }, (t13) => {
      this.constraints && t13 && this.ready && (this.state.viewpoint = this.constraints.fit(this.state.paddedViewState.viewpoint));
    }, C)]);
  }
  get center() {
    if (!this.ready)
      return this._get("center");
    const { center: t12, spatialReference: e14 } = this.state.paddedViewState;
    return this.state.commitProperty("id"), new x({ x: t12[0], y: t12[1], spatialReference: e14 });
  }
  set center(t12) {
    if (null == t12)
      return;
    if (!this.ready)
      return void this._set("center", t12);
    let e14;
    try {
      e14 = this._project(t12, this.state.spatialReference);
    } catch (o10) {
      return void n.getLogger(this).error(new s("mapview:invalid-center", "could not project the value in the view's spatial reference", { input: t12, error: o10 }));
    }
    const i8 = this.viewpoint;
    xt(i8, i8, e14), this.viewpoint = i8;
  }
  get extent() {
    return this.ready ? (this.state.commitProperty("id"), this.state.paddedViewState.extent.clone()) : this._get("extent");
  }
  set extent(t12) {
    if (null == t12)
      return;
    if (!t12.width || !t12.height)
      return void n.getLogger(this).error(new s("mapview:invalid-extent", "invalid extent size"));
    if (!this.ready)
      return this._set("extent", t12), this._set("center", void 0), this._set("viewpoint", void 0), this._set("scale", void 0), void this._set("zoom", void 0);
    let e14;
    try {
      e14 = this._project(t12, this.state.spatialReference);
    } catch (o10) {
      return void n.getLogger(this).error(new s("mapview:invalid-extent", "could not project the value in the view's spatial reference", { error: o10 }));
    }
    const i8 = this.viewpoint;
    tt(i8, i8, e14, this.state.size, { constraints: this.constraints }), this.viewpoint = i8;
  }
  get padding() {
    return this.ready ? this.state.padding : this._get("padding");
  }
  set padding(t12) {
    this.ready ? (this.state.padding = t12, this._set("padding", this.state.padding)) : this._set("padding", t12);
  }
  get resolution() {
    return this.ready ? (this.state.commitProperty("id"), this.state.resolution) : 0;
  }
  get rotation() {
    return this.ready ? (this.state.commitProperty("id"), this.state.rotation) : this._get("rotation");
  }
  set rotation(t12) {
    if (isNaN(t12))
      return;
    if (!this.ready)
      return void this._set("rotation", t12);
    const e14 = this.viewpoint;
    wt(e14, e14, t12), this.viewpoint = e14;
  }
  get scale() {
    return this.ready ? (this.state.commitProperty("id"), this.state.scale) : this._get("scale");
  }
  set scale(t12) {
    if (!t12 || isNaN(t12))
      return;
    if (!this.ready) {
      this._set("scale", t12), this._set("zoom", void 0);
      const e15 = this._get("extent");
      return void (e15 && (this._set("extent", void 0), this._set("center", e15.center)));
    }
    const e14 = this.viewpoint;
    jt(e14, e14, t12), this.viewpoint = e14;
  }
  get viewpoint() {
    if (!this.ready)
      return this._get("viewpoint");
    return this.state.paddedViewState.viewpoint.clone();
  }
  set viewpoint(t12) {
    var _a;
    if (null == t12)
      return;
    if (!this.ready)
      return this._set("viewpoint", t12), this._set("extent", void 0), this._set("center", void 0), this._set("zoom", void 0), void this._set("scale", void 0);
    let i8, o10;
    try {
      i8 = this._project(t12, this.state.spatialReference), !t12.scale || isNaN(t12.scale) ? o10 = new s("mapview:invalid-viewpoint", `invalid scale value of ${t12.scale}`) : null == t12.targetGeometry && (o10 = new s("mapview:invalid-viewpoint", "geometry not defined"));
    } catch (a13) {
      o10 = new s("mapview:invalid-viewpoint", "could not project the value in the view's spatial reference", { error: a13 });
    }
    if (o10)
      return void n.getLogger(this).error(o10);
    this._scaleBeforeChangingSpatialReference = null;
    const n10 = new l3({ targetGeometry: new x(), scale: 0, rotation: 0 });
    Z(n10, i8), (_a = this.constraints) == null ? void 0 : _a.constrain(n10, this.state.paddedViewState.viewpoint), this.state.viewpoint = n10, this._set("viewpoint", n10);
  }
  get zoom() {
    var _a;
    return this.ready ? ((_a = this.constraints) == null ? void 0 : _a.scaleToZoom(this.scale)) ?? -1 : this._get("zoom");
  }
  set zoom(t12) {
    var _a, _b;
    if (!(t12 >= 0))
      return;
    if (!this.ready) {
      this._set("zoom", t12), this._set("scale", void 0);
      const e15 = this._get("extent");
      return void (e15 && (this._set("extent", void 0), this._set("center", e15.center)));
    }
    const e14 = ((_a = this.constraints) == null ? void 0 : _a.zoomToScale(t12)) ?? 0;
    if (!e14)
      return void this._set("zoom", -1);
    const i8 = this.viewpoint;
    jt(i8, i8, e14), this.viewpoint = i8, this._set("zoom", ((_b = this.constraints) == null ? void 0 : _b.scaleToZoom(this.scale)) ?? -1);
  }
  getUserStartupOptions(t12) {
    if (!t12[0] && !t12[1])
      return { center: void 0, rotation: void 0, scale: void 0 };
    const { padding: e14, constraints: i8 } = this, s14 = this._get("center"), r11 = this._get("extent"), o10 = this._get("scale"), n10 = this._get("rotation"), a13 = this._get("viewpoint"), c8 = this._get("zoom"), p8 = null != c8 && null != i8 && i8.zoomToScale(c8) || void 0;
    let h3, l12, d8;
    const v2 = a13 == null ? void 0 : a13.rotation, m9 = a13 == null ? void 0 : a13.targetGeometry;
    "extent" === (m9 == null ? void 0 : m9.type) ? h3 = m9 : "point" === (m9 == null ? void 0 : m9.type) && (l12 = m9, d8 = a13 == null ? void 0 : a13.scale);
    const g2 = r11 ?? h3;
    return { center: s14 ?? l12 ?? (g2 == null ? void 0 : g2.center), rotation: n10 ?? v2, scale: (o10 ?? p8 ?? d8 ?? (g2 && H(g2, [t12[0] - e14.left - e14.right, t12[1] - e14.top - e14.bottom]))) || void 0 };
  }
  startup(t12, e14, i8, s14) {
    var _a;
    const o10 = t12.targetGeometry;
    try {
      this._project(t12, i8);
    } catch (n10) {
      n.getLogger(this).warn(new s3("mapview:startup-projection-error", "projection of initial viewpoint to the view's spatial reference, defaulting to the initial viewpoint.", { center: o10.toJSON(), spatialReference: i8, error: n10 })), t12.targetGeometry = s14 || new x({ x: 0, y: 0, spatialReference: i8 });
    }
    (_a = this.constraints) == null ? void 0 : _a.fit(t12), this._set("state", new f4({ padding: this.padding, size: e14, viewpoint: t12 })), this._set("ready", true);
  }
  teardown() {
    this._set("ready", false);
    const { center: [t12, e14], spatialReference: i8, rotation: s14, scale: r11 } = this.state.paddedViewState, o10 = new x({ x: t12, y: e14, spatialReference: i8 });
    this._set("viewpoint", null), this._set("extent", null), this._set("center", o10), this._set("zoom", -1), this._set("rotation", s14), this._set("scale", r11), this._set("state", null);
  }
  changeSpatialReference(t12) {
    var _a;
    const i8 = this.state.paddedViewState.clone();
    if (null == this._scaleBeforeChangingSpatialReference)
      this._scaleBeforeChangingSpatialReference = i8.scale;
    else {
      const t13 = i8.viewpoint.clone();
      t13.scale = this._scaleBeforeChangingSpatialReference, i8.viewpoint = t13;
    }
    const s14 = i8.clone(), [o10, n10] = i8.center;
    let a13 = null;
    try {
      a13 = this._project(new x({ x: o10, y: n10, spatialReference: i8.spatialReference }), t12);
    } catch (h3) {
      r2() || n.getLogger(this).warn(new s3("mapview:spatial-reference-change", "could not project the view's center to the new spatial reference", { center: a13 == null ? void 0 : a13.toJSON(), spatialReference: t12, error: h3 }));
    }
    a13 || (a13 = new x({ x: 0, y: 0, spatialReference: t12 }));
    const p8 = xt(new l3({ targetGeometry: new x(), scale: 0, rotation: 0 }), i8.viewpoint, a13);
    s14.viewpoint = p8;
    try {
      const e14 = 20, r11 = [i8.size[0] / 2, i8.size[1] / 2], o11 = [r11[0] + e14, r11[1]], n11 = i8.toMap([0, 0], o11), { x: a14, y: c8 } = this._project(new x({ x: n11[0], y: n11[1], spatialReference: i8.spatialReference }), t12);
      n11[0] = a14, n11[1] = c8, s14.toScreen(n11, n11);
      const h3 = pt(r11, n11, o11), l12 = Math.hypot(n11[0] - r11[0], n11[1] - r11[1]) / e14;
      !Number.isFinite(l12) || Math.abs(l12) > 4 ? (p8.rotation = 0, p8.targetGeometry = new x({ x: 0, y: 0, spatialReference: t12 })) : (p8.scale *= l12, p8.scale > has("mapview-srswitch-adjust-rotation-scale-threshold") ? p8.rotation = 0 : p8.rotation += Number.isFinite(h3) ? h3 : 0);
    } catch {
    }
    (_a = this._get("constraints")) == null ? void 0 : _a.constrain(p8, void 0), this._get("state").viewpoint = p8;
  }
  resize(t12, e14) {
    var _a;
    if (!this.ready)
      return;
    const i8 = this.state;
    let s14 = this.state.paddedViewState.viewpoint;
    const r11 = this.state.paddedViewState.size.concat();
    i8.size = [t12, e14], ht(s14, s14, r11, this.state.paddedViewState.size, this.resizeAlign), s14 = ((_a = this.constraints) == null ? void 0 : _a.constrain(s14, void 0)) ?? s14, this.state.viewpoint = s14;
  }
  toMap(t12) {
    if (!this.ready)
      return null;
    const e14 = [0, 0], [i8, s14] = this.state.toMap(e14, [t12.x, t12.y]), r11 = this.state.spatialReference;
    return new x({ x: i8, y: s14, spatialReference: r11 });
  }
  toScreen(t12, e14) {
    if (!this.ready)
      return null;
    const i8 = this._project(t12, this.state.spatialReference), s14 = [i8.x, i8.y];
    return false === (e14 == null ? void 0 : e14.pickClosestTarget) ? this.state.toScreen(s14, s14) : this.state.toScreenClosest(s14, s14), c(s14[0], s14[1]);
  }
  _project(t12, e14) {
    var _a;
    const i8 = (t12 == null ? void 0 : t12.targetGeometry) || t12;
    if (!e14)
      return t12;
    if (!i8)
      return null;
    if (e14.imageCoordinateSystem || ((_a = i8.spatialReference) == null ? void 0 : _a.imageCoordinateSystem))
      return t12;
    if (G(e14, i8.spatialReference))
      return t12;
    const r11 = B(i8, e14);
    if (!r11)
      throw new s("mapview:projection-not-possible", "projecting input geometry to target spatial reference returned a null value", { geometry: i8, spatialReference: e14 });
    return V2(t12) ? (t12.targetGeometry = r11, t12) : r11;
  }
};
function V2(t12) {
  return "esri.Viewpoint" === (t12 == null ? void 0 : t12.declaredClass);
}
e([y({ type: x })], z.prototype, "center", null), e([y()], z.prototype, "constraints", void 0), e([y({ type: w2 })], z.prototype, "extent", null), e([y({ value: { top: 0, right: 0, bottom: 0, left: 0 }, cast: (t12) => ({ top: 0, right: 0, bottom: 0, left: 0, ...t12 }) })], z.prototype, "padding", null), e([y()], z.prototype, "ready", void 0), e([y()], z.prototype, "resizeAlign", void 0), e([y({ readOnly: true })], z.prototype, "resolution", null), e([y({ type: Number })], z.prototype, "rotation", null), e([y({ type: Number })], z.prototype, "scale", null), e([y({ readOnly: true })], z.prototype, "state", void 0), e([y({ type: l3 })], z.prototype, "viewpoint", null), e([y()], z.prototype, "zoom", null), z = e([a("esri.views.2d.ViewStateManager")], z);

// node_modules/@arcgis/core/views/2d/input/handlers/DoubleClickZoom.js
var a9 = class extends i3 {
  constructor(t12, i8) {
    super(true), this._view = t12, this.registerIncoming("double-click", i8, (t13) => this._handleDoubleClick(t13, i8));
  }
  _handleDoubleClick(t12, a13) {
    t4(t12.data, "primary") && (t12.stopPropagation(), a13 ? this._view.mapViewNavigation.zoomOut([t12.data.x, t12.data.y]) : this._view.mapViewNavigation.zoomIn([t12.data.x, t12.data.y]));
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/DoubleTapDragZoom.js
var e8 = class extends i3 {
  constructor(t12, e14, a13) {
    super(true), this.view = t12, this.pointerType = e14, this.registerIncoming("double-tap-drag", a13, (t13) => this._handleDoubleTapDrag(t13));
  }
  _handleDoubleTapDrag(t12) {
    const { data: e14 } = t12, { pointerType: a13 } = e14;
    if (a13 !== this.pointerType)
      return;
    t12.stopPropagation();
    const { action: s14, delta: i8 } = e14, { view: r11 } = this, { mapViewNavigation: n10 } = r11;
    switch (s14) {
      case "begin": {
        const { scale: t13 } = r11;
        this._startScale = t13, this._currentScale = t13, this._previousDelta = i8, n10.begin();
        break;
      }
      case "update": {
        if (this._previousDelta.y === i8.y)
          return;
        this._previousDelta = i8;
        const t13 = 1.015 ** i8.y, e15 = this._startScale * t13, a14 = e15 / this._currentScale;
        n10.setViewpointImmediate(a14), this._currentScale = e15;
        break;
      }
      case "end": {
        const { constraints: t13 } = r11, { effectiveLODs: e15, snapToZoom: a14 } = t13;
        if (!a14 || !e15)
          return void n10.end();
        const s15 = t13.snapScale(this._currentScale), o10 = (i8.y > 0 ? Math.max(s15, t13.snapToPreviousScale(this._startScale)) : Math.min(s15, t13.snapToNextScale(this._startScale))) / this._currentScale;
        n10.zoom(o10);
        break;
      }
    }
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/DragPan.js
var n8 = class extends i3 {
  constructor(t12, i8, a13) {
    super(true), this.view = t12, this.pointerAction = i8, this.registerIncoming("drag", a13, (t13) => this._handleDrag(t13)), this.registerIncoming("pointer-down", () => this.stopMomentumNavigation());
  }
  onInstall(i8) {
    super.onInstall(i8), this._dragEventSeparator = new t5({ start: (t12, i9) => {
      this.view.mapViewNavigation.pan.begin(this.view, i9.data), i9.stopPropagation();
    }, update: (t12, i9) => {
      this.view.mapViewNavigation.pan.update(this.view, i9.data), i9.stopPropagation();
    }, end: (t12, i9) => {
      this.view.mapViewNavigation.pan.end(this.view, i9.data), i9.stopPropagation();
    }, condition: (t12, i9) => 1 === t12 && t4(i9.data, this.pointerAction) });
  }
  _handleDrag(t12) {
    const i8 = this.view.mapViewNavigation;
    i8.pinch.zoomMomentum || i8.pinch.rotateMomentum ? this.stopMomentumNavigation() : this._dragEventSeparator.handle(t12);
  }
  stopMomentumNavigation() {
    this.view.mapViewNavigation.pan.stopMomentumNavigation();
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/DragRotate.js
var o6 = class extends i3 {
  constructor(a13, o10, r11) {
    super(true), this._view = a13, this.pointerAction = o10;
    const e14 = this._view.mapViewNavigation;
    this._dragEventSeparator = new t5({ start: (t12, a14) => {
      e14.rotate.begin(this._view, a14.data), a14.stopPropagation();
    }, update: (t12, a14) => {
      e14.rotate.update(this._view, a14.data), a14.stopPropagation();
    }, end: (t12, a14) => {
      e14.rotate.end(), a14.stopPropagation();
    }, condition: (t12, a14) => 1 === t12 && t4(a14.data, this.pointerAction) }), this.registerIncoming("drag", r11, (t12) => this._dragEventSeparator.handle(t12));
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/GamepadNavigation.js
var d4 = class extends i3 {
  constructor(i8) {
    super(true), this._view = i8, this._frameTask = null, this._watchHandles = new r(), this._currentDevice = null, this._transformation = { translation: [0, 0, 0], heading: 0, tilt: 0, zoom: 0 }, this._handle = this.registerIncoming("gamepad", (t12) => this._handleGamePadEvent(t12)), this._handle.pause();
  }
  onInstall(t12) {
    super.onInstall(t12), this._watchHandles.add([d(() => {
      var _a;
      return (_a = this._view.navigation.gamepad) == null ? void 0 : _a.enabled;
    }, (t13) => {
      t13 ? (this._handle.resume(), this._frameTask || (this._frameTask = A({ update: (t14) => this._frameUpdate(t14.deltaTime) }))) : (this._handle.pause(), this._frameTask && (this._frameTask.remove(), this._frameTask = null));
    }, P)]);
  }
  onUninstall() {
    this._watchHandles.removeAll(), this._frameTask && (this._frameTask.remove(), this._frameTask = null), super.onUninstall();
  }
  _handleGamePadEvent(t12) {
    const i8 = this._view.navigation.gamepad.device;
    i8 && t12.data.device !== i8 || this._currentDevice && this._currentDevice !== t12.data.device || ("end" === t12.data.action ? (this._currentDevice = null, a4(this._transformation)) : (this._currentDevice = t12.data.device, i4(t12.data, this._view.navigation.gamepad, this._transformation)));
  }
  _frameUpdate(t12) {
    const i8 = this._transformation;
    if (s10(i8))
      return;
    const e14 = this._view.viewpoint.clone(), a13 = this._view.navigation.gamepad.velocityFactor, r11 = _2 * a13 * t12;
    kt(e14, e14, [i8.translation[0] * r11, -i8.translation[1] * r11]);
    const o10 = 1 + i8.translation[2] * c4 * t12, h3 = this._view.constraints.rotationEnabled ? -i8.heading * m7 * t12 : 0, d8 = this._view.size, v2 = [d8[0] / 2, d8[1]];
    Gt(e14, e14, o10, h3, v2, d8);
    const p8 = this._view.constraints.constrain(e14, this._view.viewpoint);
    this._view.viewpoint = p8;
  }
};
var m7 = 0.06;
var _2 = 0.7;
var c4 = 6e-4;

// node_modules/@arcgis/core/views/2d/input/handlers/KeyPan.js
var e9 = class extends i3 {
  constructor(i8, e14, s14) {
    super(true), this.view = i8, this.keys = e14, this._isSticky = false, this._pressedKeys = /* @__PURE__ */ new Set(), this._timeout = void 0, this._currentDirection = void 0, this._stickyKeyDuration = 200, this._handleKey = (i9) => {
      const t12 = this._keyMap[i9.data.key];
      if (i9.modifiers.has("Meta") || i9.modifiers.has("Control"))
        return void this._stopMovement();
      if (null == t12)
        return;
      i9.stopPropagation(), i9.preventDefault();
      const e15 = "key-down" === i9.type;
      if (this._pressedKeys[e15 ? "add" : "delete"](t12), e15) {
        if (this._direction === t12)
          return;
        this._direction = t12, this._isSticky = false, this._setTimeout(() => {
          this._isSticky && this._handlePopKey();
        });
      } else {
        const i10 = void 0 === this._timeout, t13 = this._pressedKeys.size > 0;
        i10 || t13 ? this._handlePopKey() : this._isSticky = true;
      }
    }, this._handlePopKey = () => {
      this._direction = Array.from(this._pressedKeys).pop(), null == this._direction && this._stopMovement();
    }, this._stopMovement = () => {
      this._isSticky = false, this._direction = void 0, this._pressedKeys.clear(), this._setTimeout(void 0);
    }, this._keyMap = { [e14.left]: "left", [e14.right]: "right", [e14.up]: "up", [e14.down]: "down" }, this.registerIncoming("key-down", s14, this._handleKey), this.registerIncoming("key-up", s14, this._handleKey), this.registerIncoming("blur", s14, this._stopMovement), this._visibilityHandle = e6((i9) => i9 ? null : this._stopMovement());
  }
  onUninstall() {
    var _a;
    this._stopMovement(), (_a = this._visibilityHandle) == null ? void 0 : _a.remove();
  }
  get _direction() {
    return this._currentDirection;
  }
  set _direction(i8) {
    const t12 = null != this._currentDirection;
    if (null != i8) {
      if (t12 || this.view.mapViewNavigation.begin(), this._currentDirection !== i8)
        switch (i8) {
          case "left":
            this.view.mapViewNavigation.continuousPanLeft();
            break;
          case "right":
            this.view.mapViewNavigation.continuousPanRight();
            break;
          case "up":
            this.view.mapViewNavigation.continuousPanUp();
            break;
          case "down":
            this.view.mapViewNavigation.continuousPanDown();
        }
    } else
      t12 && this.view.mapViewNavigation.stop();
    this._currentDirection = i8;
  }
  _setTimeout(i8) {
    clearTimeout(this._timeout), this._timeout = void 0 === i8 ? void 0 : setTimeout(() => {
      this._timeout = void 0, i8();
    }, this._stickyKeyDuration);
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/KeyRotate.js
var t9 = class extends i3 {
  constructor(e14, t12, s14) {
    super(true), this.view = e14, this.keys = t12, this._pressed = false, this._keyToDirection = { [t12.clockwiseOption1]: "clockwise", [t12.clockwiseOption2]: "clockwise", [t12.counterClockwiseOption1]: "counterClockwise", [t12.counterClockwiseOption2]: "counterClockwise", [t12.resetOption1]: "reset", [t12.resetOption2]: "reset" }, this.registerIncoming("key-down", s14, (e15) => this._handleKeyDown(e15)), this.registerIncoming("key-up", s14, (e15) => this._handleKeyUp(e15)), this.registerIncoming("blur", s14, () => this._handleStop()), this._visibilityHandle = e6((e15) => e15 ? null : this._handleStop());
  }
  onUninstall() {
    var _a;
    (_a = this._visibilityHandle) == null ? void 0 : _a.remove(), this._handleStop();
  }
  _handleKeyDown(e14) {
    e14.data.repeat || this._handleKey(e14, true);
  }
  _handleKeyUp(e14) {
    this._handleKey(e14, false);
  }
  _handleStop() {
    this._pressed && (this._pressed = false, this.view.mapViewNavigation.stop());
  }
  _handleKey(e14, i8) {
    const t12 = e14.modifiers;
    if (t12.size > 0 && !t12.has("Shift") || !this.view.constraints.rotationEnabled)
      return;
    const s14 = this._keyToDirection[e14.data.key];
    if (this._pressed = null != s14, this._pressed) {
      if (e14.preventDefault(), i8)
        switch (this.view.mapViewNavigation.begin(), s14) {
          case "clockwise":
            this.view.mapViewNavigation.continuousRotateClockwise();
            break;
          case "counterClockwise":
            this.view.mapViewNavigation.continuousRotateCounterclockwise();
            break;
          case "reset":
            this.view.mapViewNavigation.resetRotation();
        }
      else
        this._pressed = false, this.view.mapViewNavigation.stop();
      e14.stopPropagation();
    }
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/KeyZoom.js
var t10;
!function(o10) {
  o10[o10.IN = 0] = "IN", o10[o10.OUT = 1] = "OUT";
}(t10 || (t10 = {}));
var e10 = class extends i3 {
  constructor(o10, e14, i8) {
    super(true), this.view = o10, this.keys = e14, this._keysToZoomAction = {}, this.registerIncoming("key-down", i8, (o11) => this._handleKeyDown(o11)), e14.zoomIn.forEach((o11) => this._keysToZoomAction[o11] = t10.IN), e14.zoomOut.forEach((o11) => this._keysToZoomAction[o11] = t10.OUT);
  }
  _handleKeyDown(o10) {
    this._handleKey(o10);
  }
  _handleKey(o10) {
    const e14 = o10.modifiers;
    if (e14.size > 0 && !e14.has("Shift"))
      return;
    const { key: i8 } = o10.data;
    if (!(i8 in this._keysToZoomAction))
      return;
    const n10 = this._keysToZoomAction[i8], { mapViewNavigation: s14 } = this.view;
    let r11 = null;
    switch (n10) {
      case t10.IN:
        r11 = s14.zoomIn();
        break;
      case t10.OUT:
        r11 = s14.zoomOut();
        break;
      default:
        return;
    }
    s14.begin(), r11.then(() => s14.end()), o10.stopPropagation();
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/MouseWheelZoom.js
var t11 = 0.6;
var o7 = class extends i3 {
  constructor(e14, t12) {
    super(true), this._view = e14, this._canZoom = true, this.registerIncoming("mouse-wheel", t12, (e15) => this._handleMouseWheel(e15));
  }
  _handleMouseWheel(e14) {
    if (!this._view.navigation.mouseWheelZoomEnabled)
      return;
    if (e14.preventDefault(), e14.stopPropagation(), !this._canZoom)
      return;
    const o10 = this._view.mapViewNavigation, { x: n10, y: i8, deltaY: s14 } = e14.data, a13 = 1 / t11 ** (1 / 60 * s14), h3 = o10.zoom(a13, [n10, i8]);
    h3 && (this._canZoom = false, h3.catch(() => {
    }).then(() => {
      this._canZoom = true, o10.end();
    }));
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/PinchAction.js
var a10 = class extends i3 {
  constructor(i8) {
    super(true), this.view = i8, this.registerIncoming("drag", (t12) => this._handleDrag(t12)), this.registerIncoming("pointer-down", () => this._stopMomentumNavigation());
    const a13 = this.view.mapViewNavigation;
    this._dragEventSeparator = new t5({ start: (t12, i9) => {
      a13.pinch.begin(this.view, i9.data), i9.stopPropagation();
    }, update: (t12, i9) => {
      a13.pinch.update(this.view, i9.data), i9.stopPropagation();
    }, end: (t12, i9) => {
      a13.pinch.end(this.view), i9.stopPropagation();
    }, condition: (t12) => t12 >= 2 });
  }
  _handleDrag(t12) {
    this._dragEventSeparator.handle(t12);
  }
  _stopMomentumNavigation() {
    this.view.mapViewNavigation.pinch.stopMomentumNavigation();
  }
};

// node_modules/@arcgis/core/views/input/recognizers/DoubleTapDrag.js
var p6 = class extends i3 {
  constructor(e14 = t6.maximumDoubleClickDelay, i8 = t6.maximumDoubleClickDistance, r11 = t6.maximumDoubleTouchDelay, s14 = t6.maximumDoubleTouchDistance, u8 = o) {
    super(false), this._maximumDoubleClickDelay = e14, this._maximumDoubleClickDistance = i8, this._maximumDoubleTouchDelay = r11, this._maximumDoubleTouchDistance = s14, this._clock = u8, this._doubleTapDragReady = false, this._doubleTapDragActive = false, this._dragStartCenter = c(0, 0), this._pointerState = /* @__PURE__ */ new Map(), this._doubleTapDrag = this.registerOutgoing("double-tap-drag"), this._dragEventSeparator = new t5({ start: (t12, e15) => this._dragStart(t12, e15), update: (t12, e15) => this._dragUpdate(e15), end: (t12, e15) => this._dragEnd(e15) }), this.registerIncoming("drag", (t12) => this._dragEventSeparator.handle(t12)), this.registerIncoming("pointer-down", (t12) => this._handlePointerDown(t12)), this.registerIncoming("pointer-up", () => this._handlePointerUp());
  }
  onUninstall() {
    this._pointerState.forEach((t12) => {
      t12.doubleTapTimeout = l(t12.doubleTapTimeout);
    });
  }
  get hasPendingInputs() {
    return n2(this._pointerState, (t12) => null != t12.doubleTapTimeout);
  }
  _clearPointerDown(t12) {
    const e14 = this._pointerState.get(t12);
    e14 && (e14.doubleTapTimeout = l(e14.doubleTapTimeout), this._pointerState.delete(t12), this.refreshHasPendingInputs());
  }
  _dragStart(t12, e14) {
    if (!this._doubleTapDragReady || 1 !== t12)
      return;
    this._doubleTapDragReady = false, this._doubleTapDragActive = true;
    const { data: i8, modifiers: a13 } = e14, { center: r11 } = i8;
    this._dragStartCenter = r11;
    const n10 = d5("begin", c(0, 0), i8);
    this._doubleTapDrag.emit(n10, void 0, a13), e14.stopPropagation();
  }
  _dragUpdate(t12) {
    if (!this._doubleTapDragActive)
      return;
    const { data: e14, modifiers: i8 } = t12, { center: a13 } = e14, r11 = d5("update", c(a13.x - this._dragStartCenter.x, a13.y - this._dragStartCenter.y), e14);
    this._doubleTapDrag.emit(r11, void 0, i8), t12.stopPropagation();
  }
  _dragEnd(t12) {
    if (!this._doubleTapDragActive)
      return;
    const { data: e14, modifiers: i8 } = t12, { center: a13 } = e14, r11 = d5("end", c(a13.x - this._dragStartCenter.x, a13.y - this._dragStartCenter.y), e14);
    this._doubleTapDrag.emit(r11, void 0, i8), this._doubleTapDragActive = false, t12.stopPropagation();
  }
  _handlePointerDown(t12) {
    const { data: e14 } = t12, i8 = u3(e14), o10 = this._pointerState.get(i8), { pointerType: a13 } = e14.native;
    if (o10) {
      const r11 = "touch" === a13 ? this._maximumDoubleTouchDistance : this._maximumDoubleClickDistance;
      this._clearPointerDown(i8), n5(o10.event.data, e14) > r11 ? this._storePointerDown(t12) : this._doubleTapDragReady = true;
    } else
      this._storePointerDown(t12);
  }
  _handlePointerUp() {
    this._doubleTapDragReady = false;
  }
  _storePointerDown(t12) {
    const { data: e14 } = t12, { pointerType: i8 } = e14.native, o10 = u3(e14), a13 = "touch" === i8 ? this._maximumDoubleTouchDelay : this._maximumDoubleClickDelay, r11 = this._clock.setTimeout(() => this._clearPointerDown(o10), a13);
    this._pointerState.set(o10, { event: t12, doubleTapTimeout: r11 }), this.refreshHasPendingInputs();
  }
};
function d5(t12, e14, i8) {
  const { button: o10, buttons: a13, pointer: r11, pointers: n10, pointerType: s14, timestamp: u8 } = i8;
  return { action: t12, delta: e14, button: o10, buttons: a13, pointer: r11, pointers: n10, pointerType: s14, timestamp: u8 };
}

// node_modules/@arcgis/core/views/2d/input/MapViewInputManager.js
var T2 = { counter: "Control", pan: { left: "ArrowLeft", right: "ArrowRight", up: "ArrowUp", down: "ArrowDown" }, zoom: { zoomIn: ["=", "+"], zoomOut: ["-", "_"] }, rotate: { clockwiseOption1: "a", clockwiseOption2: "A", counterClockwiseOption1: "d", counterClockwiseOption2: "D", resetOption1: "n", resetOption2: "N" } };
var z2 = class extends S {
  initialize() {
    const e14 = () => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.ready;
    };
    this.addHandles([p(() => !e14(), () => this._disconnect()), p(e14, () => this._connect())]);
  }
  destroy() {
    this._disconnect();
  }
  get latestPointerType() {
    var _a;
    return (_a = this._inputManager) == null ? void 0 : _a.latestPointerType;
  }
  get latestPointerLocation() {
    var _a;
    return (_a = this._inputManager) == null ? void 0 : _a.latestPointerLocation;
  }
  get multiTouchActive() {
    var _a;
    return ((_a = this._inputManager) == null ? void 0 : _a.multiTouchActive) ?? false;
  }
  isModifierKeyDown(e14) {
    var _a;
    return ((_a = this._inputManager) == null ? void 0 : _a.isModifierKeyDown(e14)) ?? false;
  }
  _disconnect() {
    this.view.viewEvents.disconnect(), this._inputManager = u(this._inputManager);
  }
  _connect() {
    const e14 = this.view.surface, t12 = new l4(e14, this.view.input), o10 = [new m4(), new r7(), new r8(), new s11(this.view.navigation), new p6()], r11 = new d2({ eventSource: t12, recognizers: o10 });
    r11.installHandlers("prevent-context-menu", [new e7()], _.INTERNAL), r11.installHandlers("navigation", [new a10(this.view), new d4(this.view), new o7(this.view), new a9(this.view), new a9(this.view, [T2.counter]), new n8(this.view, "primary"), new e9(this.view, T2.pan), new e10(this.view, T2.zoom), new t9(this.view, T2.rotate), new o6(this.view, "secondary"), new e8(this.view, "touch")], _.INTERNAL), this.view.viewEvents.connect(r11), this._source = t12, this._inputManager = r11, d(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.navigation) == null ? void 0 : _b.browserTouchPanEnabled;
    }, (e15) => {
      this._source && (this._source.browserTouchPanningEnabled = !e15);
    }, P);
  }
  get test() {
    return { inputManager: this._inputManager };
  }
};
e([y()], z2.prototype, "view", void 0), e([y()], z2.prototype, "latestPointerType", null), e([y()], z2.prototype, "latestPointerLocation", null), e([y()], z2.prototype, "multiTouchActive", null), z2 = e([a("esri.views.2d.input.MapViewInputManager")], z2);
var k2 = z2;

// node_modules/@arcgis/core/views/2d/layers/features/support/TileStore.js
var d6 = { added: [], removed: [] };
var a11 = /* @__PURE__ */ new Set();
var c5 = new e4(0, 0, 0, 0);
function m8(e14, t12) {
  const s14 = s5(t12);
  if (!s14)
    return null;
  const [i8, r11] = s14.valid;
  return e14[2] > r11 ? [u2([e14[0], e14[1], r11, e14[3]]), u2([i8, e14[1], i8 + e14[2] - r11, e14[3]])] : e14[0] < i8 ? [u2([i8, e14[1], e14[2], e14[3]]), u2([r11 - (i8 - e14[0]), e14[1], r11, e14[3]])] : null;
}
var u6 = class extends o2 {
  constructor(e14) {
    super(), this._tiles = /* @__PURE__ */ new Map(), this._index = i2(9, has("esri-csp-restrictions") ? (e15) => ({ minX: e15.bounds[0], minY: e15.bounds[1], maxX: e15.bounds[2], maxY: e15.bounds[3] }) : [".bounds[0]", ".bounds[1]", ".bounds[2]", ".bounds[3]"]), this.tiles = [], this.tileScheme = e14;
  }
  destroy() {
    this.clear();
  }
  clear() {
    this.tiles.length = 0, this._tiles.clear(), this._index.clear();
  }
  has(e14) {
    return this._tiles.has(e14);
  }
  get(e14) {
    return this._tiles.get(e14);
  }
  getIntersectingTiles(e14) {
    if (!e14 || 0 === M(e14) || 0 === s7(e14))
      return [];
    const t12 = m8(e14, this.tileScheme.spatialReference);
    return null != t12 ? [.../* @__PURE__ */ new Set([...this.boundsIntersections(t12[0]), ...this.boundsIntersections(t12[1])])] : this.boundsIntersections(e14);
  }
  boundsIntersections(e14) {
    return this._index.search({ minX: e14[0], minY: e14[1], maxX: e14[2], maxY: e14[3] });
  }
  updateTiles(e14) {
    const t12 = { added: [], removed: [] };
    for (const s14 of e14.added)
      if (!this.has(s14)) {
        const e15 = new n4(this.tileScheme, s14);
        this._tiles.set(s14, e15), this._index.insert(e15), t12.added.push(e15);
      }
    for (const s14 of e14.removed)
      if (this.has(s14)) {
        const e15 = this.get(s14);
        this._tiles.delete(s14), this._index.remove(e15), t12.removed.push(e15);
      }
    this.tiles.length = 0, this._tiles.forEach((e15) => this.tiles.push(e15)), (t12.added.length || t12.removed.length) && this.emit("update", t12);
  }
  setViewState(e14) {
    const t12 = this.tileScheme.getTileCoverage(e14, 0);
    if (!t12)
      return;
    const { spans: s14, lodInfo: i8 } = t12, { level: o10 } = i8;
    if (s14.length > 0)
      for (const { row: n10, colFrom: l12, colTo: h3 } of s14)
        for (let e15 = l12; e15 <= h3; e15++) {
          const t13 = c5.set(o10, n10, i8.normalizeCol(e15), i8.getWorldForColumn(e15)).id;
          if (a11.add(t13), !this.has(t13)) {
            const e16 = new n4(this.tileScheme, t13);
            this._tiles.set(t13, e16), this._index.insert(e16), this.tiles.push(e16), d6.added.push(e16);
          }
        }
    for (let n10 = this.tiles.length - 1; n10 >= 0; n10--) {
      const e15 = this.tiles[n10];
      a11.has(e15.id) || (this._tiles.delete(e15.id), this.tiles.splice(n10, 1), this._index.remove(e15), d6.removed.push(e15));
    }
    (d6.added.length || d6.removed.length) && this.emit("update", d6), s8.pool.release(t12), a11.clear(), d6.added.length = 0, d6.removed.length = 0;
  }
};

// node_modules/@arcgis/core/views/2d/support/hitTestUtils.js
async function s13(e14, i8, s14) {
  const f5 = o5(i8) ? r5(e14, i8) : i8;
  if (!e14.ready || isNaN(f5.x) || isNaN(f5.y))
    return { screenPoint: f5, results: [] };
  let d8 = /* @__PURE__ */ new Set();
  const y4 = /* @__PURE__ */ new Set();
  let u8 = false, h3 = null, g2 = null;
  (s14 == null ? void 0 : s14.include) ? o8(s14.include, n9(e14, (e15) => {
    d8.add(e15), p7(e15, (e16) => y4.add(e16));
  }, (e15, r11) => {
    y4.add(e15), d8.add(r11);
  }, (e15) => {
    h3 || (h3 = /* @__PURE__ */ new Set()), h3.add(e15);
  }, (e15) => d8.add(e15), () => u8 = true)) : (u8 = true, d8 = new Set(e14.allLayerViews), d8.forEach((e15) => {
    p7(e15, (e16) => y4.add(e16));
  })), (s14 == null ? void 0 : s14.exclude) && o8(s14.exclude, n9(e14, (e15) => {
    d8.delete(e15), p7(e15, (e16) => y4.delete(e16));
  }, (e15) => y4.delete(e15), (e15) => {
    g2 || (g2 = /* @__PURE__ */ new Set()), g2.add(e15);
  }));
  const m9 = e14.toMap(f5), w4 = e14.allLayerViews.filter((r11) => !r11.suspended && d8.has(r11) && r11.clips.every((r12) => m3(e14, r12, f5, m9))).reverse();
  let V3 = [...u8 ? e14.graphicsView.hitTest(m9).map((e15) => ({ type: "graphic", graphic: e15, layer: null, mapPoint: m9 })) : [], ...await Promise.all(w4.map((e15) => e15.hitTest(m9, f5)).toArray())].filter(k).flat().filter(k);
  return V3 = V3.filter((e15) => {
    var _a;
    return "graphic" !== e15.type || "subtype-group" !== ((_a = e15.layer) == null ? void 0 : _a.type) || y4.has(e15.graphic.layer);
  }), h3 && (V3 = V3.filter((e15) => !("graphic" in e15) || !e15.graphic || (h3 == null ? void 0 : h3.has(c6(e15.graphic))))), g2 && (V3 = V3.filter((e15) => !("graphic" in e15) || !e15.graphic || !(g2 == null ? void 0 : g2.has(c6(e15.graphic))))), { screenPoint: f5, results: V3 };
}
function n9(r11, i8, t12, a13, l12, s14) {
  return (n10) => {
    if (n10 instanceof f2) {
      if (n10.layer === r11)
        s14 == null ? void 0 : s14();
      else {
        const e14 = r11.allLayerViews.find((e15) => e15.layer === n10.layer);
        e14 && (l12 == null ? void 0 : l12(e14));
      }
      a13(c6(n10));
    } else if ("layer" in n10 && "element" in n10)
      ;
    else if ("subtype-sublayer" === n10.type) {
      const e14 = r11.allLayerViews.find((e15) => e15.layer === n10.parent);
      e14 && t12(n10, e14);
    } else {
      const e14 = r11.allLayerViews.find((e15) => e15.layer === n10);
      e14 && i8(e14);
    }
  };
}
function o8(e14, r11) {
  if (e14)
    if (t(e14))
      for (const t12 of e14)
        if (t(t12))
          for (const e15 of t12)
            r11(e15);
        else
          r11(t12);
    else
      r11(e14);
}
function c6(e14) {
  var _a, _b;
  const r11 = e14.getObjectId();
  return r11 ? `${((_a = e14.layer) == null ? void 0 : _a.uid) ?? ((_b = e14.sourceLayer) == null ? void 0 : _b.uid) ?? "MapView"}/${r11}` : `"MapView/${e14.uid}`;
}
function p7({ layer: e14 }, r11) {
  "subtype-group" === e14.type && e14.sublayers.forEach((e15) => {
    r11(e15);
  });
}

// node_modules/@arcgis/core/views/2d/support/screenshotUtils.js
var e11 = { flipY: true, premultipliedAlpha: true };
async function o9(h3, n10) {
  const o10 = await a12(h3, n10), { format: r11, quality: l12 } = c2(n10 == null ? void 0 : n10.format, n10 == null ? void 0 : n10.quality);
  return a3(o10, { format: r11, quality: l12, rotation: 0, disableDecorations: false }, e11);
}
async function r10(t12, i8) {
  const n10 = await a12(t12, i8);
  return r6(n10, e11);
}
function a12(t12, i8) {
  const h3 = d7(i8 || {}, u7(t12.stage, t12.size), t12.size, t12.padding), n10 = l11(i8, t12.allLayerViews);
  return t12.stage.takeScreenshot(h3, n10, t12.backgroundColor, i8 == null ? void 0 : i8.rotation);
}
function l11(t12 = {}, i8) {
  if (!t12.layers)
    return;
  const h3 = [];
  return t12.layers.forEach((t13) => {
    const n10 = i8.find((i9) => i9.layer.id === t13.id);
    (n10 == null ? void 0 : n10.container) && h3.push(n10.container);
  }), h3;
}
function u7(t12, i8) {
  return Math.min(4, s9(i8, Math.min(4096, t12.context.parameters.maxTextureSize)));
}
function d7(t12, i8, h3, n10) {
  t12.ignorePadding && (n10 = { left: 0, right: 0, top: 0, bottom: 0 });
  let e14 = null;
  null != t12.width && null != t12.height ? e14 = [t12.width, t12.height] : null == t12.width && null != t12.height ? e14 = [t12.height, t12.height] : null != t12.width && null == t12.height ? e14 = [t12.width, t12.width] : null == t12.width && null == t12.height && (e14 = null);
  const o10 = h3[0] - (n10.left + n10.right), r11 = h3[1] - (n10.top + n10.bottom);
  let a13, l12, u8 = t12.area || { x: 0, y: 0, width: o10, height: r11 };
  if (e14) {
    const t13 = o10 / r11, i9 = e14[0] / e14[1];
    if (i9 > t13) {
      const t14 = u8.width / i9;
      u8 = { x: u8.x, y: Math.round(u8.y + (u8.height - t14) / 2), width: u8.width, height: Math.round(t14) };
    } else {
      const t14 = u8.height * i9;
      u8 = { x: Math.round(u8.x + (u8.width - t14) / 2), y: u8.y, width: Math.round(t14), height: u8.height };
    }
  } else
    e14 = [u8.width, u8.height];
  return e14[0] > u8.width ? (a13 = Math.min(e14[0] / u8.width, i8), l12 = e14[0] / u8.width / a13) : (a13 = 1, l12 = e14[0] / u8.width), { cropArea: { x: Math.round((u8.x + n10.left) * a13), y: Math.round((u8.y + n10.top) * a13), width: Math.round(u8.width * a13), height: Math.round(u8.height * a13) }, outputScale: l12, resolutionScale: a13 };
}

// node_modules/@arcgis/core/views/2d/support/StationaryManager.js
var e12 = 160;
var i7 = class extends S {
  constructor() {
    super(...arguments), this._timer = void 0;
  }
  get stationary() {
    return !this._timer;
  }
  flip() {
    this._timestamp = performance.now(), null == this._timer && (this._timer = setInterval(() => {
      performance.now() - this._timestamp >= e12 && this.clear();
    }, e12));
  }
  clear() {
    this._timer && (clearInterval(this._timer), this._timer = void 0);
  }
};
e([y()], i7.prototype, "_timer", void 0), e([y()], i7.prototype, "stationary", null), i7 = e([a("esri.views.2d.support.StationaryManager")], i7);

// node_modules/@arcgis/core/views/ui/2d/DefaultUI2D.js
var e13 = class extends u4 {
  constructor(o10) {
    super(o10), this.components = ["attribution", "zoom"];
  }
};
e([y()], e13.prototype, "components", void 0), e13 = e([a("esri.views.ui.2d.DefaultUI2D")], e13);
var c7 = e13;

// node_modules/@arcgis/core/views/MapView.js
var $;
var W;
var H2;
var B2;
var Z2;
var J;
async function K() {
  const [, { GraphicsView2D: e14, GraphicContainer: t12, LabelManager: i8, MapViewNavigation: r11, MagnifierView2D: s14, Stage: a13 }] = await Promise.all([import("./webglDeps-SER3V3VU.js"), import("./mapViewDeps-YP5NRFOP.js")]);
  W = e14, H2 = t12, B2 = i8, Z2 = r11, J = s14, $ = a13;
}
var Q = class extends o4(y2(b(N))) {
  constructor(e14) {
    super(e14), this._magnifierView = null, this.stage = null, this._resolveWhenReady = [], this.rootLayerViews = new l2({ getCollections: () => {
      var _a, _b;
      return [(_a = this.basemapView) == null ? void 0 : _a.baseLayerViews, this.layerViews, (_b = this.basemapView) == null ? void 0 : _b.referenceLayerViews];
    }, getChildrenFunction: () => null }), this.featuresTilingScheme = null, this.fullOpacity = 1, this.goToManager = new l6({ view: this }), this.graphicsView = null, this.stateManager = new z({ constraints: new f3({ view: this }) }), this.stationaryManager = new i7(), this.labelManager = null, this.mapViewNavigation = null, this.renderingOptions = { samplingMode: "dynamic", edgeLabelsVisible: true, labelsAnimationTime: 125, labelCollisionsEnabled: true }, this.supersampleScreenshotsEnabled = true, this.supportsGround = false, this.frameTask = new a5(this), this.floors = new V(), this.highlightOptions = new p3(), this.inputManager = new k2({ view: this }), this.map = null, this.spatialReferenceLocked = false, this.timeline = new e5(), this.type = "2d", this.ui = new c7(), this.test = { takeScreenshot: async (e15) => r10(this._getScreenshotView(e15), e15) }, this.padding = { top: 0, right: 0, bottom: 0, left: 0 }, this.addHandles([d(() => this.viewpoint, () => this.stationaryManager.flip(), C), this.on("resize", (e15) => this.stateManager.resize(e15.width, e15.height))]), m2();
  }
  destroy() {
    this._set("preconditionsReady", false), this.frameTask = u(this.frameTask), this.goToManager.destroy(), this.rootLayerViews.destroy(), this.inputManager.destroy(), this._set("inputManager", null);
  }
  get graphicsTileStore() {
    return new u6(this.featuresTilingScheme);
  }
  get constraintsInfo() {
    var _a, _b;
    const e14 = (_a = this.defaultsFromMap) == null ? void 0 : _a.tileInfo, t12 = this.spatialReference;
    return { lods: ((_b = e14 == null ? void 0 : e14.spatialReference) == null ? void 0 : _b.equals(t12)) ? e14.lods : null, spatialReference: t12 };
  }
  get state() {
    return this.stateManager.state;
  }
  get initialExtentRequired() {
    var _a;
    if (!this.stateManager)
      return false;
    const { scale: e14, constraints: t12, center: i8, viewpoint: r11, extent: s14 } = this;
    let a13 = this.zoom;
    return !(this.map && "initialViewProperties" in this.map && ((_a = this.map.initialViewProperties) == null ? void 0 : _a.viewpoint)) && (!s14 && ((t12 == null ? void 0 : t12.effectiveLODs) || (a13 = -1), (!i8 || 0 === e14 && -1 === a13) && (null == (r11 == null ? void 0 : r11.targetGeometry) || "extent" !== r11.targetGeometry.type && !r11.scale)));
  }
  get _defaultsFromMapSettings() {
    return { required: { tileInfo: true, heightModelInfo: false, extent: false }, requiresExtentInSpatialReference: this.spatialReferenceLocked };
  }
  get typeSpecificPreconditionsReady() {
    const e14 = this._getDefaultViewpoint();
    if (!e14)
      return false;
    const t12 = e14.targetGeometry, i8 = this.spatialReference;
    return T(t12.spatialReference, i8);
  }
  set animation(e14) {
    const t12 = this._get("animation");
    if (e14 === t12)
      return;
    if (t12 && t12.stop(), e14 !== this.animationManager.animation && this.animationManager.stop(), !e14 || e14.isFulfilled())
      return this._set("animation", null), void (this.frameTask.animationInProgress = false);
    this._set("animation", e14), this.frameTask.animationInProgress = true;
    const i8 = () => {
      var _a;
      this.destroyed || (e14 === this._get("animation") && (this._set("animation", null), (_a = this.frameTask) == null ? void 0 : _a.requestFrame()), this.frameTask.animationInProgress = false);
    };
    e14.when(i8, i8);
  }
  get background() {
    return e2(this.map) ? this.map.initialViewProperties.background : null;
  }
  set background(e14) {
    this._override("background", e14);
  }
  get center() {
    var _a;
    return ((_a = this.stateManager) == null ? void 0 : _a.center) ?? null;
  }
  set center(e14) {
    this.stateManager.center = e14;
  }
  get constraints() {
    var _a;
    return (_a = this.stateManager) == null ? void 0 : _a.constraints;
  }
  set constraints(e14) {
    e14.view = this;
    const t12 = this.stateManager.constraints;
    this.stateManager.constraints = e14, t12 == null ? void 0 : t12.destroy();
  }
  get extent() {
    var _a;
    return ((_a = this.stateManager) == null ? void 0 : _a.extent) ?? null;
  }
  set extent(e14) {
    this.stateManager.extent = e14;
  }
  get padding() {
    var _a;
    return (_a = this.stateManager) == null ? void 0 : _a.padding;
  }
  set padding(e14) {
    this.stateManager && (this.stateManager.padding = e14);
  }
  get rendering() {
    var _a;
    return ((_a = this.stage) == null ? void 0 : _a.renderRequested) ?? false;
  }
  get resizeAlign() {
    return this.stateManager.resizeAlign;
  }
  set resizeAlign(e14) {
    this.stateManager.resizeAlign = e14;
  }
  get resolution() {
    return this.stateManager.resolution ?? 0;
  }
  get rotation() {
    return this.stateManager.rotation ?? 0;
  }
  set rotation(e14) {
    const { rotationEnabled: t12 } = this.constraints;
    this.constraints.rotationEnabled = true, this.stateManager.rotation = e14, this.constraints.rotationEnabled = t12;
  }
  get scale() {
    var _a;
    return ((_a = this.stateManager) == null ? void 0 : _a.scale) ?? 0;
  }
  set scale(e14) {
    this.stateManager && (this.stateManager.scale = e14);
  }
  get stationary() {
    return !this.animation && !this.navigating && !this.resizing && this.stationaryManager.stationary;
  }
  get updating() {
    var _a, _b, _c, _d;
    const e14 = !(!this.magnifier.visible || null === this.magnifier.position || !((_a = this._magnifierView) == null ? void 0 : _a.updatingHandles.updating)), t12 = !this.destroyed && (!this.layerViewManager || !this.labelManager || !this.graphicsView || true === this.layerViewManager.updating || true === this.labelManager.updating || true === this.graphicsView.updating || this.allLayerViews.some((e15) => !e15.destroyed && !("layerViews" in e15) && true === e15.updating) || e14);
    if (has("esri-2d-log-updating")) {
      const i8 = this.allLayerViews.reduce((e15, t13) => ({ ...e15, [`${t13.layer.id}(${t13.layer.type})`]: !t13.destroyed && !("layerViews" in t13) && t13.updating }), {});
      console.log(`Updating MapView: ${t12}
-> Null LayerViewManager: ${!this.layerViewManager}
-> Null LabelManager: ${!this.labelManager}
-> Null GraphicsView: ${!this.graphicsView}
-> layerViewManager.updating: ${(_b = this.layerViewManager) == null ? void 0 : _b.updating}
-> labelManager.updating: ${(_c = this.labelManager) == null ? void 0 : _c.updating}
-> graphicsView.updating: ${(_d = this.graphicsView) == null ? void 0 : _d.updating}
-> allLayerViews: ${JSON.stringify(i8)}
-> updatingMagnifier: ${e14}
`);
    }
    return t12;
  }
  get viewpoint() {
    return this.stateManager.viewpoint ?? null;
  }
  set viewpoint(e14) {
    this.stateManager.viewpoint = e14, this.frameTask.requestFrame();
  }
  get zoom() {
    return this.stateManager.zoom ?? -1;
  }
  set zoom(e14) {
    this.stateManager.zoom = e14;
  }
  get navigating() {
    var _a;
    return ((_a = this.mapViewNavigation) == null ? void 0 : _a.interacting) ?? false;
  }
  goTo(e14, t12) {
    return this.goToManager.goTo(e14, t12);
  }
  async hitTest(e14, t12) {
    return s13(this, e14, t12);
  }
  async takeScreenshot(e14) {
    return o9(this._getScreenshotView(e14), e14);
  }
  toMap(e14) {
    if (!this.ready)
      return null;
    const t12 = o5(e14) ? r5(this, e14) : e14;
    return this.stateManager.toMap(t12);
  }
  toScreen(e14, t12) {
    return this.stateManager.toScreen(e14, t12);
  }
  on(e14, t12, i8, r11) {
    const s14 = this.inputManager && this.viewEvents.on(e14, t12, i8, r11);
    return s14 || super.on(e14, t12);
  }
  hasEventListener(e14) {
    return super.hasEventListener(e14) || this.viewEvents.hasHandler(e14);
  }
  whenLayerView(e14) {
    return super.whenLayerView(e14);
  }
  graphicChanged(e14) {
    if (this.graphicsView) {
      this.graphicsView.graphicUpdateHandler(e14);
    }
  }
  whenReady() {
    return new Promise((e14) => {
      this.ready ? e14(this) : this._resolveWhenReady.push(e14);
    });
  }
  forceDOMReadyCycle() {
    this.forceReadyCycle();
  }
  getDefaultSpatialReference() {
    var _a, _b, _c;
    return this.map && "initialViewProperties" in this.map && ((_b = (_a = this.map) == null ? void 0 : _a.initialViewProperties) == null ? void 0 : _b.spatialReference) || ((_c = this.defaultsFromMap) == null ? void 0 : _c.spatialReference) || null;
  }
  getDefaultTimeZone() {
    return e2(this.map) ? this.map.initialViewProperties.timeZone : null;
  }
  hasLayerViewModule(e14) {
    return l7.hasLayerViewModule(e14);
  }
  importLayerView(e14) {
    return l7.importLayerView(e14);
  }
  pixelSizeAt() {
    return this.ready ? this.resolution : (n.getLogger(this).error("#pixelSizeAt()", "Map view cannot be used before it is ready"), null);
  }
  async popupHitTest(e14) {
    var _a;
    const t12 = this.toMap(e14), i8 = await this.hitTest(e14), r11 = this.allLayerViews.toArray().reverse(), s14 = new globalThis.Map(r11.map((e15) => [e15.layer.uid, e15])), a13 = [];
    let n10 = 0, o10 = 0;
    for (; n10 < i8.results.length || o10 < r11.length; ) {
      const e15 = i8.results.at(n10);
      if (e15 && "graphic" !== e15.type) {
        ++n10;
        continue;
      }
      const p8 = s14.get((_a = (e15 == null ? void 0 : e15.layer) ?? (e15 == null ? void 0 : e15.graphic.layer)) == null ? void 0 : _a.uid);
      if ((!e15 || p8) && o10 < r11.length && r11.at(o10) !== p8) {
        const e16 = r11.at(o10);
        "fetchPopupFeaturesAtLocation" in e16 && a13.push({ mapPoint: t12, layerView: e16 }), ++o10;
      } else
        e15 && (a13.push({ graphic: e15.graphic, layerView: p8 }), ++n10);
    }
    return { hits: a13, location: t12 };
  }
  requestUpdate() {
    this.ready && this.frameTask.requestUpdate();
  }
  async validate() {
    let e14 = t7(this.type);
    if (has("safari") && has("safari") < 9 && (e14 = new s("mapview:browser-not-supported", "This browser is not supported by MapView (Safari < 9)", { type: "safari", requiredVersion: 9, detectedVersion: has("safari") })), null != e14)
      throw n.getLogger(this).warn("#validate()", e14.message), e14;
  }
  loadAsyncDependencies() {
    return K();
  }
  _getDefaultViewpoint() {
    var _a;
    const { constraints: e14, initialExtent: i8, map: r11, padding: s14, size: a13 } = this;
    if (!e14)
      return null;
    const n10 = r11 && "initialViewProperties" in r11 ? r11.initialViewProperties : void 0, o10 = this.stateManager.getUserStartupOptions(this.size), p8 = n10 == null ? void 0 : n10.viewpoint, l12 = ((_a = p8 == null ? void 0 : p8.targetGeometry) == null ? void 0 : _a.extent) ?? i8, h3 = l12 == null ? void 0 : l12.center, g2 = (p8 == null ? void 0 : p8.rotation) ?? 0, d8 = (p8 == null ? void 0 : p8.scale) || l12 && H(l12, [a13[0] - s14.left - s14.right, a13[1] - s14.top - s14.bottom]), u8 = o10.center ?? h3, c8 = o10.rotation ?? g2, m9 = o10.scale ?? d8;
    return u8 && m9 ? new l3({ targetGeometry: u8, scale: m9, rotation: c8 }) : null;
  }
  _startup() {
    var _a;
    this.timeline.begin("MapView Startup");
    const e14 = this._getDefaultViewpoint();
    this.stateManager.startup(e14, this.size, this.spatialReference, (_a = this.defaultsFromMap.extent) == null ? void 0 : _a.center), this.graphics.owner = this;
    const t12 = new $(this.surface, { canvas: this.renderCanvas, contextOptions: { disabledExtensions: this.deactivatedWebGLExtensions, debugWebGLExtensions: this.debugWebGLExtensions }, renderingOptions: this.renderingOptions, timeline: this.timeline });
    this.stage = t12, this._magnifierView = new J(), this._magnifierView.magnifier = this.magnifier;
    const i8 = new B2({ view: this });
    this._set("labelManager", i8);
    const r11 = new l5({ view: this });
    this._set("animationManager", r11);
    const s14 = new Z2({ view: this, animationManager: r11 });
    this._set("mapViewNavigation", s14), this._setupSpatialReferenceDependentProperties(), this.addHandles([this.rootLayerViews.on("change", () => this._updateStageChildren()), t12.on("webgl-error", (e15) => this.fatalError = e15.error), d(() => this.stationary, (e15) => t12.stationary = e15, A2), d(() => this.background, (e15) => {
      t12.backgroundColor = e15 == null ? void 0 : e15.color, this._magnifierView.backgroundColor = e15 == null ? void 0 : e15.color;
    }, A2), d(() => this.magnifier, (e15) => this._magnifierView.magnifier = e15, A2), d(() => this.renderingOptions, (e15) => t12.renderingOptions = e15, A2), d(() => this.highlightOptions, (e15) => t12.highlightOptions = e15, A2), d(() => this.state.id, () => t12.state = this.state, A2)], "map-view"), this._updateStageChildren();
    const a13 = this._resolveWhenReady;
    this._resolveWhenReady = [], a13.forEach((e15) => e15(this)), this.timeline.end("MapView Startup"), this.frameTask.start(), this._set("ready", true);
  }
  _teardown() {
    this._destroySpatialReferenceDependentProperties(), this.removeHandles("map-view"), this.mapViewNavigation.destroy(), this._set("mapViewNavigation", null), this.animation = null, this.animationManager.destroy(), this._set("animationManager", null), this.layerViewManager.clear(), this.labelManager.destroy(), this._magnifierView.destroy(), this.stage.destroy(), this.stage = null, this._set("graphicsView", null), this._magnifierView = null, this._set("labelManager", null), this._set("mapViewNavigation", null), this.graphics.owner = null, this.frameTask.stop(), this.stationaryManager.clear(), this._set("ready", false), this.stateManager.teardown();
  }
  _updateStageChildren() {
    this.stage.removeAllChildren(), this.rootLayerViews.forEach((e15) => {
      this.stage.addChild(e15.container);
    });
    const e14 = this.graphicsView;
    this.stage.addChild(e14.container), this.stage.addChild(this._magnifierView);
  }
  _setupSpatialReferenceDependentProperties() {
    const e14 = new h2(j2.create({ spatialReference: this.spatialReference, size: 512, numLODs: 36 }));
    this._set("featuresTilingScheme", e14);
    const t12 = new W({ view: this, graphics: this.graphics, requestUpdateCallback: () => this.requestUpdate(), container: new H2(e14) });
    this._set("graphicsView", t12);
  }
  _destroySpatialReferenceDependentProperties() {
    const e14 = this.graphicsView;
    this._set("graphicsView", null), e14.destroy(), this._set("featuresTilingScheme", null);
  }
  _getScreenshotView(e14) {
    var _a;
    const { allLayerViews: t12, padding: i8, size: r11, stage: s14 } = this;
    return { allLayerViews: t12, backgroundColor: (e14 == null ? void 0 : e14.ignoreBackground) ? null : (_a = this.background) == null ? void 0 : _a.color, padding: i8, size: r11, stage: s14 };
  }
  _spatialReferenceChanged(e14) {
    if (this.ready) {
      this.frameTask.stop();
      for (const e15 of this.allLayerViews)
        e15.processDetach();
      this._destroySpatialReferenceDependentProperties(), this.stateManager.changeSpatialReference(e14), this.stage.state = this.state, this._setupSpatialReferenceDependentProperties();
      for (const e15 of this.allLayerViews)
        e15.processAttach();
      this.frameTask.requestFrame(), this.frameTask.start(), this._updateStageChildren();
    }
  }
};
Q.type = "2d", e([y({ readOnly: true })], Q.prototype, "animationManager", void 0), e([y({ constructOnly: true })], Q.prototype, "deactivatedWebGLExtensions", void 0), e([y({ constructOnly: true })], Q.prototype, "debugWebGLExtensions", void 0), e([y({ readOnly: true })], Q.prototype, "featuresTilingScheme", void 0), e([y({ readOnly: true })], Q.prototype, "fullOpacity", void 0), e([y()], Q.prototype, "goToManager", void 0), e([y({ readOnly: true })], Q.prototype, "graphicsTileStore", null), e([y()], Q.prototype, "graphicsView", void 0), e([y()], Q.prototype, "stateManager", void 0), e([y()], Q.prototype, "constraintsInfo", null), e([y({ readOnly: true })], Q.prototype, "state", null), e([y()], Q.prototype, "initialExtentRequired", null), e([y()], Q.prototype, "labelManager", void 0), e([y({ readOnly: true })], Q.prototype, "mapViewNavigation", void 0), e([y({ constructOnly: true })], Q.prototype, "renderCanvas", void 0), e([y()], Q.prototype, "renderingOptions", void 0), e([y({ constructOnly: true })], Q.prototype, "supersampleScreenshotsEnabled", void 0), e([y({ readOnly: true })], Q.prototype, "supportsGround", void 0), e([y()], Q.prototype, "_defaultsFromMapSettings", null), e([y({ readOnly: true })], Q.prototype, "typeSpecificPreconditionsReady", null), e([y()], Q.prototype, "animation", null), e([y({ type: m5 })], Q.prototype, "background", null), e([y()], Q.prototype, "center", null), e([y({ type: f3 })], Q.prototype, "constraints", null), e([y()], Q.prototype, "extent", null), e([y()], Q.prototype, "floors", void 0), e([y({ type: p3 })], Q.prototype, "highlightOptions", void 0), e([y({ readOnly: true })], Q.prototype, "inputManager", void 0), e([y()], Q.prototype, "map", void 0), e([y()], Q.prototype, "padding", null), e([y({ readOnly: true })], Q.prototype, "rendering", null), e([y()], Q.prototype, "resizeAlign", null), e([y({ readOnly: true })], Q.prototype, "resolution", null), e([y()], Q.prototype, "rotation", null), e([y()], Q.prototype, "scale", null), e([y({ constructOnly: true })], Q.prototype, "spatialReferenceLocked", void 0), e([y()], Q.prototype, "stationary", null), e([y({ type: e5, readOnly: true })], Q.prototype, "timeline", void 0), e([y({ readOnly: true })], Q.prototype, "type", void 0), e([y({ readOnly: true })], Q.prototype, "updating", null), e([y()], Q.prototype, "viewpoint", null), e([y()], Q.prototype, "zoom", null), e([y({ readOnly: true })], Q.prototype, "navigating", null), e([y(), s4((e14) => e14 instanceof u4 ? e14 : v(c7, e14))], Q.prototype, "ui", void 0), Q = e([a("esri.views.MapView")], Q);
var X = Q;
export {
  X as default
};
//# sourceMappingURL=MapView-IG5SUPY2.js.map
