import {
  e as e3
} from "./chunk-EAAEPSBY.js";
import {
  O,
  U,
  b as b2,
  m
} from "./chunk-YPY24RRU.js";
import "./chunk-O7RKI2QW.js";
import "./chunk-HV2SFSJW.js";
import "./chunk-SBARCIDP.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-SLQA5YBV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import {
  F,
  b,
  k
} from "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import {
  D,
  e2,
  r
} from "./chunk-RGCWZ2KZ.js";
import {
  n
} from "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import "./chunk-2SDMYJDE.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import {
  G
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import {
  s
} from "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  P,
  d,
  w
} from "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/widgets/BasemapToggle/BasemapToggleViewModel.js
var g = class extends S {
  constructor(e5) {
    super(e5), this._basemapCache = {}, this._loadingProjectionEngine = false, this.nextBasemap = b2("hybrid", this._basemapCache), this.view = null;
  }
  initialize() {
    d(() => this.nextBasemap, (e5) => {
      e5 && !e5.loaded && e5.load().catch(() => {
      });
    }, P);
  }
  destroy() {
    this.view = null, m(this._basemapCache), this._basemapCache = null;
  }
  get _nextBasemapSpatialReferenceTask() {
    return U(this.view, this.nextBasemap);
  }
  get _viewSpatialReferenceLocked() {
    const { view: e5 } = this;
    return !e5 || !("spatialReferenceLocked" in e5) || e5.spatialReferenceLocked;
  }
  get activeBasemap() {
    var _a, _b;
    return b2(((_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.basemap) ?? "topo-vector", this._basemapCache);
  }
  castNextBasemap(e5) {
    return b2(e5, this._basemapCache);
  }
  get state() {
    const { view: e5 } = this;
    if (!(e5 == null ? void 0 : e5.ready))
      return "disabled";
    if (this._nextBasemapSpatialReferenceTask.updating)
      return "disabled";
    const { spatialReference: a3 } = this._nextBasemapSpatialReferenceTask;
    return this._viewSpatialReferenceLocked && null != a3 && !e5.spatialReference.equals(a3) ? "incompatible-next-basemap" : this._loadingProjectionEngine ? "loading" : "ready";
  }
  async toggle() {
    const { activeBasemap: e5, nextBasemap: a3, state: t, view: s2 } = this;
    if (!s2 || "disabled" === t || "incompatible-next-basemap" === t)
      return;
    const r2 = this._viewSpatialReferenceLocked;
    if (!r2) {
      if (await w(() => !this._nextBasemapSpatialReferenceTask.updating), a3 !== this.nextBasemap || e5 !== this.activeBasemap)
        return;
      const { spatialReference: t2 } = this._nextBasemapSpatialReferenceTask;
      if (null == t2 || G(s2.spatialReference, t2) || b() || F(s2.spatialReference, t2) || (this._loadingProjectionEngine = true, await k(), this._loadingProjectionEngine = false), a3 !== this.nextBasemap || e5 !== this.activeBasemap)
        return;
    }
    s2.map.basemap = a3, r2 || null == this._nextBasemapSpatialReferenceTask.spatialReference || G(s2.spatialReference, this._nextBasemapSpatialReferenceTask.spatialReference) || (s2.spatialReference = this._nextBasemapSpatialReferenceTask.spatialReference), this.nextBasemap = e5;
  }
  static getThumbnailUrl(e5) {
    return O(e5);
  }
};
e([y()], g.prototype, "_loadingProjectionEngine", void 0), e([y({ readOnly: true })], g.prototype, "_nextBasemapSpatialReferenceTask", null), e([y({ readOnly: true })], g.prototype, "_viewSpatialReferenceLocked", null), e([y({ readOnly: true })], g.prototype, "activeBasemap", null), e([y()], g.prototype, "nextBasemap", void 0), e([s("nextBasemap")], g.prototype, "castNextBasemap", null), e([y({ readOnly: true })], g.prototype, "state", null), e([y()], g.prototype, "view", void 0), e([y()], g.prototype, "toggle", null), g = e([a("esri.widgets.BasemapToggle.BasemapToggleViewModel")], g);
var B = g;

// node_modules/@arcgis/core/widgets/BasemapToggle/css.js
var e4 = "esri-basemap-toggle";
var a2 = "esri-basemap-thumbnail";
var _ = { base: e4, secondaryBasemapImage: `${e4}__image--secondary`, container: `${a2} ${e4}__container`, image: `${a2}__image ${e4}__image`, imageLoading: `${e4}__image--loading`, overlay: `${a2}__overlay ${e4}__image-overlay`, title: `${a2}__title ${e4}__title`, overlayScrim: `${a2}__overlay-scrim` };

// node_modules/@arcgis/core/widgets/BasemapToggle.js
function d2(e5) {
  const t = O(e5);
  return t ? { backgroundImage: "url(" + t + ")" } : { backgroundImage: "" };
}
var u = { title: false };
var g2 = class extends D {
  constructor(e5, t) {
    super(e5, t), this.messages = null, this.viewModel = new B(), this.visibleElements = { ...u }, this.toggle = () => this.viewModel.toggle();
  }
  loadDependencies() {
    return r({ button: () => import("./calcite-button-V4T5NPWY.js"), icon: () => import("./calcite-icon-25XWA6H7.js"), scrim: () => import("./calcite-scrim-Z45AYPZE.js") });
  }
  get activeBasemap() {
    return this.viewModel.activeBasemap;
  }
  get icon() {
    return "layer-basemap";
  }
  set icon(e5) {
    this._overrideIfSome("icon", e5);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e5) {
    this._overrideIfSome("label", e5);
  }
  get nextBasemap() {
    return this.viewModel.nextBasemap;
  }
  set nextBasemap(e5) {
    this.viewModel.nextBasemap = e5;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e5) {
    this.viewModel.view = e5;
  }
  castVisibleElements(e5) {
    return { ...u, ...e5 };
  }
  render() {
    const e5 = this.viewModel, t = "disabled" === e5.state ? null : e5.activeBasemap, s2 = "disabled" === e5.state ? null : e5.nextBasemap, i = "loading" === e5.state, o = "incompatible-next-basemap" === e5.state, a3 = (s2 == null ? void 0 : s2.title) ?? "", l = s2 && "loaded" !== s2.loadStatus;
    let n2;
    const p = this.visibleElements.title && a3, u2 = o;
    return (p || u2) && (n2 = n("div", { class: _.overlay, key: "overlay" }, p ? n("span", { class: _.title, title: a3 }, a3) : null, u2 ? n("calcite-scrim", { class: _.overlayScrim, title: this.messages.incompatibleSpatialReference }, n("calcite-icon", { icon: "exclamation-mark-triangle" })) : null)), n("div", { class: this.classes(_.base, e3.widget) }, n("calcite-button", { appearance: "transparent", "data-basemap-id": s2 ? s2.id : "", disabled: o, kind: "neutral", label: this.label, onclick: () => {
      this.toggle();
    }, title: this.label }, n("div", { class: this.classes(_.container, _.secondaryBasemapImage) }, n("div", { class: _.image, styles: d2(t) })), n("div", { class: _.container }, n("div", { class: this.classes(_.image, l ? _.imageLoading : null), styles: d2(s2) }, l || i ? n("calcite-scrim", null, n("span", { "aria-hidden": "true", class: e3.loaderAnimation, role: "presentation" })) : null), n2)));
  }
};
e([y({ readOnly: true })], g2.prototype, "activeBasemap", null), e([y()], g2.prototype, "icon", null), e([y()], g2.prototype, "label", null), e([y(), e2("esri/widgets/BasemapToggle/t9n/BasemapToggle")], g2.prototype, "messages", void 0), e([y()], g2.prototype, "nextBasemap", null), e([y()], g2.prototype, "view", null), e([y({ type: B })], g2.prototype, "viewModel", void 0), e([y()], g2.prototype, "visibleElements", void 0), e([s("visibleElements")], g2.prototype, "castVisibleElements", null), g2 = e([a("esri.widgets.BasemapToggle")], g2);
var v = g2;
export {
  v as default
};
//# sourceMappingURL=BasemapToggle-SKL7QI6B.js.map
