{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/esm/src/components/functional/FloatingArrow.tsx"],
  "sourcesContent": ["import { FunctionalComponent, h } from \"@stencil/core\";\nimport { JSXAttributes } from \"@stencil/core/internal\";\nimport { FloatingLayout } from \"../../utils/floating-ui\";\n\ninterface FloatingArrowProps extends JSXAttributes {\n  floatingLayout: FloatingLayout;\n}\n\nconst CSS = {\n  arrow: \"calcite-floating-ui-arrow\",\n  arrowStroke: \"calcite-floating-ui-arrow__stroke\",\n};\n\nconst DEFAULTS = {\n  width: 12,\n  height: 6,\n  strokeWidth: 1,\n};\n\n/**\n * Renders a SVG element to be used as a floating-ui arrow.\n *\n * This functional component should be rendered inside a `FloatingUIComponent` when it needs an arrow element.\n *\n * @param floatingLayout.floatingLayout\n * @param floatingLayout â€“ The effective floating layout to render the arrow vertically or horizontally. Possible values: `vertical` or `horizontal`.\n *\n * See [floating-ui](https://github.com/Esri/calcite-design-system/blob/main/src/utils/floating-ui.ts)\n * @param floatingLayout.key\n * @param floatingLayout.ref\n */\nexport const FloatingArrow: FunctionalComponent<FloatingArrowProps> = ({\n  floatingLayout,\n  key,\n  ref,\n}) => {\n  const { width, height, strokeWidth } = DEFAULTS;\n  const svgX = width / 2;\n  const isVertical = floatingLayout === \"vertical\";\n\n  const dValue =\n    \"M0,0\" +\n    ` H${width}` +\n    ` L${width - svgX},${height}` +\n    ` Q${svgX},${height} ${svgX},${height}` +\n    \" Z\";\n\n  return (\n    <svg\n      aria-hidden=\"true\"\n      class={CSS.arrow}\n      height={width}\n      key={key}\n      viewBox={`0 0 ${width} ${width + (!isVertical ? strokeWidth : 0)}`}\n      width={width + (isVertical ? strokeWidth : 0)}\n      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n      ref={ref}\n    >\n      {strokeWidth > 0 && (\n        <path\n          class={CSS.arrowStroke}\n          d={dValue}\n          fill=\"none\"\n          // Account for the stroke on the fill path rendered below.\n          stroke-width={strokeWidth + 1}\n        />\n      )}\n      {/* In Firefox, for left/right placements there's a ~0.5px gap where the\n  border can show through. Adding a stroke on the fill removes it. */}\n      <path d={dValue} stroke=\"none\" />\n    </svg>\n  );\n};\n"],
  "mappings": ";;;;;AAQA,IAAM,MAAM;EACV,OAAO;EACP,aAAa;;AAGf,IAAM,WAAW;EACf,OAAO;EACP,QAAQ;EACR,aAAa;;IAeF,gBAAyD,CAAC,EACrE,gBACA,KACA,IAAG,MACJ;AACC,QAAM,EAAE,OAAO,QAAQ,YAAW,IAAK;AACvC,QAAM,OAAO,QAAQ;AACrB,QAAM,aAAa,mBAAmB;AAEtC,QAAM,SACJ,SACK,KAAK,KACL,QAAQ,IAAI,IAAI,MAAM,KACtB,IAAI,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM;AAGvC,SACE;IAAA;IAAA;MAAA,eACc;MACZ,OAAO,IAAI;MACX,QAAQ;MACR;MACA,SAAS,OAAO,KAAK,IAAI,SAAS,CAAC,aAAa,cAAc,EAAE;MAChE,OAAO,SAAS,aAAa,cAAc;;MAE3C;IAAQ;IAEP,cAAc,KACb,EAAA,QAAA,EACE,OAAO,IAAI,aACX,GAAG,QACH,MAAK,QAAM,gBAEG,cAAc,EAAC,CAAA;IAKjC,EAAA,QAAA,EAAM,GAAG,QAAQ,QAAO,OAAM,CAAA;EAAG;AAGvC;",
  "names": []
}
