import {
  m
} from "./chunk-ONK5AE7R.js";
import {
  w
} from "./chunk-IZKCZQUY.js";
import {
  g
} from "./chunk-M5ZB5S5C.js";
import {
  f as f2
} from "./chunk-MBGZKT2Z.js";
import {
  o
} from "./chunk-YOPMY6TS.js";
import {
  c as c2
} from "./chunk-7MT4ACA4.js";
import {
  n
} from "./chunk-RUN6MNXL.js";
import {
  U,
  c as c3,
  t3 as t
} from "./chunk-SAYWXQVM.js";
import {
  f,
  u2 as u3
} from "./chunk-SBL4URUW.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3,
  d
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import {
  a as a2,
  c2 as c,
  s as s2,
  u2
} from "./chunk-JGDJR5EV.js";
import {
  l,
  u
} from "./chunk-QHK5ZYFW.js";
import {
  a,
  r,
  s
} from "./chunk-7RBRCL6S.js";

// node_modules/@arcgis/core/portal/portalDefault.js
var t2;
function n2(e3) {
  return t2 && !t2.destroyed || (t2 = e3()), t2;
}

// node_modules/@arcgis/core/portal/PortalQueryParams.js
var u4;
var m2 = new n({ avgRating: "avg-rating", numRatings: "num-ratings", numComments: "num-comments", numViews: "num-views" });
var p = u4 = class extends S {
  constructor(t3) {
    super(t3), this.categories = null, this.disableExtraQuery = false, this.extent = null, this.filter = null, this.num = 10, this.query = null, this.sortField = null, this.start = 1;
  }
  get sortOrder() {
    return this._get("sortOrder") || "asc";
  }
  set sortOrder(t3) {
    "asc" !== t3 && "desc" !== t3 || this._set("sortOrder", t3);
  }
  clone() {
    return new u4({ categories: this.categories ? a(this.categories) : null, disableExtraQuery: this.disableExtraQuery, extent: this.extent ? this.extent.clone() : null, filter: this.filter, num: this.num, query: this.query, sortField: this.sortField, sortOrder: this.sortOrder, start: this.start });
  }
  toRequestOptions(t3, r2) {
    let e3 = [];
    this.categories && (e3 = this.categories.map((t4) => Array.isArray(t4) ? JSON.stringify(t4) : t4));
    let s3 = "";
    if (this.extent) {
      const t4 = g(this.extent, f2.WGS84);
      null != t4 && (s3 = `${t4.xmin},${t4.ymin},${t4.xmax},${t4.ymax}`);
    }
    let o2 = this.query;
    !this.disableExtraQuery && t3.extraQuery && (o2 = "(" + o2 + ")" + t3.extraQuery);
    const i2 = { categories: e3, bbox: s3, q: o2, filter: this.filter, num: this.num, sortField: null, sortOrder: null, start: this.start };
    return this.sortField && (i2.sortField = this.sortField.split(",").map((t4) => m2.toJSON(t4.trim())).join(","), i2.sortOrder = this.sortOrder), { query: { ...r2, ...i2 } };
  }
};
e([y()], p.prototype, "categories", void 0), e([y()], p.prototype, "disableExtraQuery", void 0), e([y({ type: w })], p.prototype, "extent", void 0), e([y()], p.prototype, "filter", void 0), e([y()], p.prototype, "num", void 0), e([y()], p.prototype, "query", void 0), e([y()], p.prototype, "sortField", void 0), e([y()], p.prototype, "sortOrder", null), e([y()], p.prototype, "start", void 0), p = u4 = e([a3("esri.portal.PortalQueryParams")], p);
var c4 = p;

// node_modules/@arcgis/core/portal/PortalGroup.js
var l2;
var u5 = l2 = class extends f {
  constructor(t3) {
    super(t3), this.access = null, this.created = null, this.description = null, this.id = null, this.isInvitationOnly = false, this.modified = null, this.owner = null, this.portal = null, this.snippet = null, this.sortField = null, this.sortOrder = null, this.sourceJSON = null, this.tags = null, this.title = null;
  }
  get thumbnailUrl() {
    var _a;
    const t3 = this.url, r2 = this.thumbnail;
    return t3 && r2 && this.portal ? (_a = this.portal) == null ? void 0 : _a.normalizeUrl(`${t3}/info/${r2}?f=json`) : null;
  }
  get url() {
    var _a;
    const t3 = (_a = this.portal) == null ? void 0 : _a.restUrl;
    return t3 ? t3 + "/community/groups/" + this.id : null;
  }
  fetchCategorySchema(t3) {
    return this.portal.request(this.url + "/categorySchema", t3).then((r2) => {
      const e3 = r2.categorySchema || [];
      return e3.some((t4) => "contentCategorySetsGroupQuery.LivingAtlas" === t4.source) ? this._fetchCategorySchemaSet("LivingAtlas", t3) : e3;
    });
  }
  fetchMembers(t3) {
    return this.portal.request(this.url + "/users", t3);
  }
  getThumbnailUrl(t3) {
    let r2 = this.thumbnailUrl;
    return r2 && t3 && (r2 += `&w=${t3}`), r2;
  }
  toJSON() {
    throw new s("internal:not-yet-implemented", "PortalGroup.toJSON is not yet implemented");
  }
  static fromJSON(t3) {
    if (!t3)
      return null;
    if (t3.declaredClass)
      throw new Error("JSON object is already hydrated");
    const r2 = new l2({ sourceJSON: t3 });
    return r2.read(t3), r2;
  }
  queryItems(t3, r2) {
    let e3 = d(c4, t3);
    const o2 = this.portal;
    return parseFloat(o2.currentVersion) > 5 ? (e3 = e3 || new c4(), o2.queryPortal(`/content/groups/${this.id}/search`, e3, "PortalItem", r2)) : (e3 = e3 ? e3.clone() : new c4(), e3.query = "group:" + this.id + (e3.query ? " " + e3.query : ""), o2.queryItems(e3, r2));
  }
  _fetchCategorySchemaSet(t3, e3) {
    const o2 = this.portal;
    return o2.fetchSelf(o2.authMode, true, e3).then((t4) => {
      const s3 = t4.contentCategorySetsGroupQuery;
      if (s3) {
        const t5 = new c4({ disableExtraQuery: true, num: 1, query: s3 });
        return o2.queryGroups(t5, e3);
      }
      throw new s("portal-group:fetchCategorySchema", "contentCategorySetsGroupQuery value not found");
    }).then((o3) => {
      if (o3.total) {
        const r2 = o3.results[0], s3 = new c4({ num: 1, query: `typekeywords:"${t3}"` });
        return r2.queryItems(s3, e3);
      }
      throw new s("portal-group:fetchCategorySchema", "contentCategorySetsGroupQuery group not found");
    }).then((t4) => {
      if (t4.total) {
        return t4.results[0].fetchData("json", e3).then((t5) => {
          const r2 = t5 == null ? void 0 : t5.categorySchema;
          return (r2 == null ? void 0 : r2.length) ? r2 : [];
        });
      }
      return [];
    });
  }
};
e([y()], u5.prototype, "access", void 0), e([y({ type: Date })], u5.prototype, "created", void 0), e([y()], u5.prototype, "description", void 0), e([y()], u5.prototype, "id", void 0), e([y()], u5.prototype, "isInvitationOnly", void 0), e([y({ type: Date })], u5.prototype, "modified", void 0), e([y()], u5.prototype, "owner", void 0), e([y()], u5.prototype, "portal", void 0), e([y()], u5.prototype, "snippet", void 0), e([y()], u5.prototype, "sortField", void 0), e([y()], u5.prototype, "sortOrder", void 0), e([y()], u5.prototype, "sourceJSON", void 0), e([y()], u5.prototype, "tags", void 0), e([y()], u5.prototype, "thumbnail", void 0), e([y({ readOnly: true })], u5.prototype, "thumbnailUrl", null), e([y()], u5.prototype, "title", void 0), e([y({ readOnly: true })], u5.prototype, "url", null), u5 = l2 = e([a3("esri.portal.PortalGroup")], u5);
var p2 = u5;

// node_modules/@arcgis/core/portal/PortalQueryResult.js
var e2 = class extends S {
  constructor(r2) {
    super(r2), this.nextQueryParams = null, this.queryParams = null, this.results = null, this.total = null;
  }
};
e([y()], e2.prototype, "nextQueryParams", void 0), e([y()], e2.prototype, "queryParams", void 0), e([y()], e2.prototype, "results", void 0), e([y()], e2.prototype, "total", void 0), e2 = e([a3("esri.portal.PortalQueryResult")], e2);
var p3 = e2;

// node_modules/@arcgis/core/portal/PortalFolder.js
var p4 = class extends f {
  constructor(t3) {
    super(t3), this.created = null, this.id = null, this.portal = null, this.title = null, this.username = null;
  }
  get url() {
    var _a;
    const t3 = (_a = this.portal) == null ? void 0 : _a.restUrl;
    return t3 ? `${t3}/content/users/${this.username}/${this.id}` : null;
  }
  toJSON() {
    throw new s("internal:not-yet-implemented", "PortalFolder.toJSON is not yet implemented");
  }
};
e([y({ type: Date })], p4.prototype, "created", void 0), e([y()], p4.prototype, "id", void 0), e([y()], p4.prototype, "portal", void 0), e([y()], p4.prototype, "title", void 0), e([y({ readOnly: true })], p4.prototype, "url", null), e([y()], p4.prototype, "username", void 0), p4 = e([a3("esri.portal.PortalFolder")], p4);
var l3 = p4;

// node_modules/@arcgis/core/portal/PortalUser.js
var i;
var u6 = i = class extends f {
  constructor(t3) {
    super(t3), this.access = null, this.created = null, this.culture = null, this.description = null, this.email = null, this.fullName = null, this.modified = null, this.orgId = null, this.portal = null, this.preferredView = null, this.privileges = null, this.region = null, this.role = null, this.roleId = null, this.sourceJSON = null, this.units = null, this.username = null, this.userType = null;
  }
  get thumbnailUrl() {
    const t3 = this.url, r2 = this.thumbnail;
    return t3 && r2 ? this.portal.normalizeUrl(`${t3}/info/${r2}?f=json`) : null;
  }
  get userContentUrl() {
    var _a;
    const t3 = (_a = this.portal) == null ? void 0 : _a.restUrl;
    return t3 ? `${t3}/content/users/${this.username}` : null;
  }
  get url() {
    var _a;
    const t3 = (_a = this.portal) == null ? void 0 : _a.restUrl;
    return t3 ? `${t3}/community/users/${this.username}` : null;
  }
  addItem(t3) {
    const r2 = t3 && t3.item, e3 = t3 == null ? void 0 : t3.data, o2 = t3 == null ? void 0 : t3.folder, l4 = { method: "post" };
    r2 && (l4.query = r2.createPostQuery(), null != e3 && ("string" == typeof e3 ? l4.query.text = e3 : "object" == typeof e3 && (l4.query.text = JSON.stringify(e3))));
    let s3 = this.userContentUrl;
    return o2 && (s3 += "/" + ("string" == typeof o2 ? o2 : o2.id)), this.portal.request(s3 + "/addItem", l4).then((t4) => (r2.id = t4.id, r2.portal = this.portal, r2.loaded ? r2.reload() : r2.load()));
  }
  deleteItem(t3) {
    let r2 = this.userContentUrl;
    return t3.ownerFolder && (r2 += "/" + t3.ownerFolder), this.portal.request(r2 + `/items/${t3.id}/delete`, { method: "post" }).then(() => {
      t3.id = null, t3.portal = null;
    });
  }
  deleteItems(t3) {
    const r2 = this.userContentUrl + "/deleteItems", e3 = t3.map((t4) => t4.id);
    if (e3.length) {
      const o2 = { method: "post", query: { items: e3.join(",") } };
      return this.portal.request(r2, o2).then(() => {
        t3.forEach((t4) => {
          t4.id = null, t4.portal = null;
        });
      });
    }
    return Promise.resolve(void 0);
  }
  fetchFolders() {
    const t3 = { query: { num: 1 } };
    return this.portal.request(this.userContentUrl ?? "", t3).then((t4) => {
      let r2;
      return r2 = t4 && t4.folders ? t4.folders.map((t5) => {
        const r3 = l3.fromJSON(t5);
        return r3.portal = this.portal, r3;
      }) : [], r2;
    });
  }
  fetchGroups() {
    return this.portal.request(this.url ?? "").then((t3) => {
      let r2;
      return r2 = t3 && t3.groups ? t3.groups.map((t4) => {
        const r3 = p2.fromJSON(t4);
        return r3.portal = this.portal, r3;
      }) : [], r2;
    });
  }
  fetchItems(t3) {
    const r2 = t3 ?? {};
    let e3, o2 = this.userContentUrl ?? "";
    return r2.folder && (o2 += "/" + r2.folder.id), import("./PortalItem-HDXEBMJW.js").then(({ default: t4 }) => {
      e3 = t4;
      const l4 = { folders: false, num: r2.num || 10, start: r2.start || 1, sortField: r2.sortField || "created", sortOrder: r2.sortOrder || "asc" };
      return this.portal.request(o2, { query: l4 });
    }).then((t4) => {
      let r3;
      return (t4 == null ? void 0 : t4.items) ? (r3 = t4.items.map((t5) => {
        const r4 = e3.fromJSON(t5);
        return r4.portal = this.portal, r4;
      }), Promise.all(r3.map((t5) => t5.load())).catch((t5) => t5).then(() => ({ items: r3, nextStart: t4.nextStart, total: t4.total }))) : { items: [], nextStart: -1, total: 0 };
    });
  }
  fetchTags() {
    return this.portal.request(this.url + "/tags").then((t3) => t3.tags);
  }
  getThumbnailUrl(t3) {
    let r2 = this.thumbnailUrl;
    return r2 && t3 && (r2 += `&w=${t3}`), r2;
  }
  queryFavorites(t3) {
    return this.favGroupId ? (this._favGroup || (this._favGroup = new p2({ id: this.favGroupId, portal: this.portal })), this._favGroup.queryItems(t3)) : Promise.reject(new s("internal:unknown", "Unknown internal error", { internalError: "Unknown favGroupId" }));
  }
  toJSON() {
    throw new s("internal:not-yet-implemented", "PortalUser.toJSON is not yet implemented");
  }
  static fromJSON(t3) {
    if (!t3)
      return null;
    if (t3.declaredClass)
      throw new Error("JSON object is already hydrated");
    const r2 = new i({ sourceJSON: t3 });
    return r2.read(t3), r2;
  }
};
e([y()], u6.prototype, "access", void 0), e([y({ type: Date })], u6.prototype, "created", void 0), e([y()], u6.prototype, "culture", void 0), e([y()], u6.prototype, "description", void 0), e([y()], u6.prototype, "email", void 0), e([y()], u6.prototype, "favGroupId", void 0), e([y()], u6.prototype, "fullName", void 0), e([y({ type: Date })], u6.prototype, "modified", void 0), e([y()], u6.prototype, "orgId", void 0), e([y()], u6.prototype, "portal", void 0), e([y()], u6.prototype, "preferredView", void 0), e([y()], u6.prototype, "privileges", void 0), e([y()], u6.prototype, "region", void 0), e([y()], u6.prototype, "role", void 0), e([y()], u6.prototype, "roleId", void 0), e([y()], u6.prototype, "sourceJSON", void 0), e([y()], u6.prototype, "thumbnail", void 0), e([y({ readOnly: true })], u6.prototype, "thumbnailUrl", null), e([y()], u6.prototype, "units", void 0), e([y({ readOnly: true })], u6.prototype, "userContentUrl", null), e([y({ readOnly: true })], u6.prototype, "url", null), e([y()], u6.prototype, "username", void 0), e([y()], u6.prototype, "userType", void 0), u6 = i = e([a3("esri.portal.PortalUser")], u6);
var p5 = u6;

// node_modules/@arcgis/core/portal/Portal.js
var _;
var M;
var U2 = { PortalGroup: () => Promise.resolve({ default: p2 }), PortalItem: () => import("./PortalItem-HDXEBMJW.js"), PortalUser: () => Promise.resolve({ default: p5 }) };
var C = _ = class extends u3(m) {
  constructor(e3) {
    super(e3), this._esriIdCredentialCreateHandle = null, this.access = null, this.allSSL = false, this.authMode = "auto", this.authorizedCrossOriginDomains = null, this.basemapGalleryGroupQuery = null, this.basemapGalleryGroupQuery3D = null, this.bingKey = null, this.canListApps = false, this.canListData = false, this.canListPreProvisionedItems = false, this.canProvisionDirectPurchase = false, this.canSearchPublic = true, this.canShareBingPublic = false, this.canSharePublic = false, this.canSignInArcGIS = false, this.canSignInIDP = false, this.colorSetsGroupQuery = null, this.commentsEnabled = false, this.created = null, this.culture = null, this.customBaseUrl = null, this.defaultBasemap = null, this.defaultDevBasemap = null, this.defaultExtent = null, this.defaultVectorBasemap = null, this.description = null, this.devBasemapGalleryGroupQuery = null, this.eueiEnabled = null, this.featuredGroups = null, this.featuredItemsGroupQuery = null, this.galleryTemplatesGroupQuery = null, this.layoutGroupQuery = null, this.livingAtlasGroupQuery = null, this.hasCategorySchema = false, this.helperServices = null, this.homePageFeaturedContent = null, this.homePageFeaturedContentCount = null, this.httpPort = null, this.httpsPort = null, this.id = null, this.ipCntryCode = null, this.isPortal = false, this.isReadOnly = false, this.layerTemplatesGroupQuery = null, this.maxTokenExpirationMinutes = null, this.modified = null, this.name = null, this.portalHostname = null, this.portalMode = null, this.portalProperties = null, this.region = null, this.rotatorPanels = null, this.showHomePageDescription = false, this.sourceJSON = null, this.supportsHostedServices = false, this.symbolSetsGroupQuery = null, this.templatesGroupQuery = null, this.units = null, this.url = r.portalUrl, this.urlKey = null, this.user = null, this.use3dBasemaps = true, this.useStandardizedQuery = false, this.useVectorBasemaps = false, this.vectorBasemapGalleryGroupQuery = null;
  }
  normalizeCtorArgs(e3) {
    return "string" == typeof e3 ? { url: e3 } : e3;
  }
  destroy() {
    b.unregister(this), this.defaultBasemap = u(this.defaultBasemap), this.defaultDevBasemap = u(this.defaultDevBasemap), this.defaultVectorBasemap = u(this.defaultVectorBasemap), this._esriIdCredentialCreateHandle = l(this._esriIdCredentialCreateHandle);
  }
  readAuthorizedCrossOriginDomains(e3) {
    if (e3)
      for (const r2 of e3)
        r.request.trustedServers.includes(r2) || r.request.trustedServers.push(r2);
    return e3;
  }
  readDefaultBasemap(e3) {
    return this._readBasemap(e3);
  }
  readDefaultDevBasemap(e3) {
    return this._readBasemap(e3);
  }
  readDefaultVectorBasemap(e3) {
    return this._readBasemap(e3);
  }
  get extraQuery() {
    var _a;
    const e3 = (_a = this.user) == null ? void 0 : _a.orgId, t3 = !e3 || this.canSearchPublic;
    return this.id && !t3 ? ` AND orgid:${this.id}` : null;
  }
  get isOrganization() {
    return !!this.access;
  }
  get itemPageUrl() {
    return this.url ? `${this.url}/home/item.html` : null;
  }
  get restUrl() {
    let e3 = this.url;
    if (e3) {
      const t3 = e3.indexOf("/sharing");
      e3 = t3 > 0 ? e3.substring(0, t3) : this.url.replace(/\/+$/, ""), e3 += "/sharing/rest";
    }
    return e3;
  }
  get thumbnailUrl() {
    const e3 = this.restUrl, t3 = this.thumbnail;
    return e3 && t3 ? this._normalizeSSL(e3 + "/portals/self/resources/" + t3) : null;
  }
  readUrlKey(e3) {
    return e3 ? e3.toLowerCase() : e3;
  }
  readUser(e3) {
    let t3 = null;
    return e3 && (t3 = p5.fromJSON(e3), t3.portal = this), t3;
  }
  load(e3) {
    const t3 = import("./Basemap-22SWPGVA.js").then(({ default: t4 }) => {
      s2(e3), M = t4;
    }).then(() => this.sourceJSON ? this.sourceJSON : this.fetchSelf(this.authMode, false, e3)).then((e4) => {
      var _a;
      if (t) {
        const e5 = t;
        this.credential = e5.findCredential(this.restUrl), this.credential || this.authMode !== _.AUTH_MODE_AUTO && this.authMode !== _.AUTH_MODE_NO_PROMPT || ((_a = this._esriIdCredentialCreateHandle) == null ? void 0 : _a.remove(), this._esriIdCredentialCreateHandle = e5.on("credential-create", w2(new WeakRef(this))), b.register(this, this._esriIdCredentialCreateHandle, this));
      }
      this.sourceJSON = e4, this.read(e4);
    });
    return this.addResolvingPromise(t3), Promise.resolve(this);
  }
  async createElevationLayers() {
    await this.load();
    const e3 = this._getHelperService("defaultElevationLayers"), t3 = (await import("./ElevationLayer-APREQ64V.js")).default;
    return e3 ? e3.map((e4) => new t3({ id: e4.id, url: e4.url })) : [];
  }
  async fetchBasemaps(e3, t3) {
    const r2 = await this._fetchBasemaps(e3, t3);
    if (true === (t3 == null ? void 0 : t3.include3d) && false !== this.use3dBasemaps) {
      const o2 = await this._fetchBasemaps3D(e3, t3);
      r2.unshift(...o2);
    }
    return r2;
  }
  fetchCategorySchema(e3) {
    return this.hasCategorySchema ? this.request(this.restUrl + "/portals/self/categorySchema", e3).then((e4) => e4.categorySchema) : c(e3) ? Promise.reject(u2()) : Promise.resolve([]);
  }
  fetchFeaturedGroups(e3) {
    const t3 = this.featuredGroups, r2 = new c4({ num: 100, sortField: "title" });
    if (t3 && t3.length) {
      const o2 = [];
      for (const e4 of t3)
        o2.push(`(title:"${e4.title}" AND owner:${e4.owner})`);
      return r2.query = o2.join(" OR "), this.queryGroups(r2, e3).then((e4) => e4.results);
    }
    return c(e3) ? Promise.reject(u2()) : Promise.resolve([]);
  }
  fetchRegions(e3) {
    var _a;
    const t3 = ((_a = this.user) == null ? void 0 : _a.culture) || this.culture || c2();
    return this.request(this.restUrl + "/portals/regions", { ...e3, query: { culture: t3 } });
  }
  fetchSettings(e3) {
    var _a;
    const t3 = ((_a = this.user) == null ? void 0 : _a.culture) || this.culture || c2();
    return this.request(this.restUrl + "/portals/self/settings", { ...e3, query: { culture: t3 } });
  }
  static getDefault() {
    return n2(() => new _());
  }
  queryGroups(e3, t3) {
    return this.queryPortal("/community/groups", e3, "PortalGroup", t3);
  }
  queryItems(e3, t3) {
    return this.queryPortal("/search", e3, "PortalItem", t3);
  }
  queryUsers(e3, t3) {
    return e3.sortField || (e3.sortField = "username"), this.queryPortal("/community/users", e3, "PortalUser", t3);
  }
  fetchSelf(e3 = this.authMode, t3 = false, r2) {
    const o2 = this.restUrl + "/portals/self", s3 = { authMode: e3, query: { culture: c2().toLowerCase() }, withCredentials: true, ...r2 };
    return "auto" === s3.authMode && (s3.authMode = "no-prompt"), t3 && (s3.query.default = true), this.request(o2, s3);
  }
  queryPortal(e3, t3, r2, o2) {
    const s3 = d(c4, t3), i2 = (t4) => this.request(this.restUrl + e3, { ...s3.toRequestOptions(this), ...o2 }).then((e4) => {
      const r3 = s3.clone();
      return r3.start = e4.nextStart, new p3({ nextQueryParams: r3, queryParams: s3, total: e4.total, results: _._resultsToTypedArray(t4, { portal: this }, e4, o2) });
    }).then((e4) => Promise.all(e4.results.map((t5) => "function" == typeof t5.when ? t5.when() : e4)).then(() => e4, (t5) => (a2(t5), e4)));
    return r2 && U2[r2] ? U2[r2]().then(({ default: e4 }) => (s2(o2), i2(e4))) : i2();
  }
  signIn() {
    if (this.authMode === _.AUTH_MODE_ANONYMOUS || this.authMode === _.AUTH_MODE_NO_PROMPT && !t)
      return Promise.reject(new s("portal:invalid-auth-mode", `Current "authMode"' is "${this.authMode}"`));
    if ("failed" === this.loadStatus)
      return Promise.reject(this.loadError);
    const e3 = (e4) => Promise.resolve().then(() => "not-loaded" === this.loadStatus ? (e4 || (this.authMode = "immediate"), this.load().then(() => null)) : "loading" === this.loadStatus ? this.load().then(() => this.credential ? null : (this.credential = e4, this.fetchSelf("immediate"))) : this.user && this.credential === e4 ? null : (this.credential = e4, this.fetchSelf("immediate"))).then((e5) => {
      e5 && (this.sourceJSON = e5, this.read(e5));
    });
    return t ? t.getCredential(this.restUrl, { prompt: this.authMode !== _.AUTH_MODE_NO_PROMPT }).then((t3) => e3(t3)) : e3(this.credential);
  }
  normalizeUrl(e3) {
    var _a;
    const t3 = (_a = this.credential) == null ? void 0 : _a.token;
    return this._normalizeSSL(t3 ? e3 + (e3.includes("?") ? "&" : "?") + "token=" + t3 : e3);
  }
  requestToTypedArray(e3, t3, r2) {
    return this.request(e3, t3).then((e4) => {
      const t4 = _._resultsToTypedArray(r2, { portal: this }, e4);
      return Promise.all(t4.map((t5) => "function" == typeof t5.when ? t5.when() : e4)).then(() => t4, () => t4);
    });
  }
  request(e3, t3 = {}) {
    const r2 = { f: "json", ...t3.query }, { authMode: s3 = this.authMode === _.AUTH_MODE_ANONYMOUS || this.authMode === _.AUTH_MODE_NO_PROMPT ? this.authMode : "auto", body: i2 = null, cacheBust: a4 = false, method: l4 = "auto", responseType: u7 = "json", signal: n3 } = t3, p6 = { authMode: s3, body: i2, cacheBust: a4, method: l4, query: r2, responseType: u7, timeout: 0, signal: n3 };
    return t3.withCredentials && (p6.withCredentials = true), U(this._normalizeSSL(e3), p6).then((e4) => e4.data);
  }
  toJSON() {
    throw new s("internal:not-yet-implemented", "Portal.toJSON is not yet implemented");
  }
  static fromJSON(e3) {
    if (!e3)
      return null;
    if (e3.declaredClass)
      throw new Error("JSON object is already hydrated");
    return new _({ sourceJSON: e3 });
  }
  _getHelperService(e3) {
    const t3 = this.helperServices && this.helperServices[e3];
    if (!t3)
      throw new s("portal:service-not-found", `The \`helperServices\` do not include an entry named "${e3}"`);
    return t3;
  }
  async _fetchBasemaps(e3, r2) {
    const o2 = new c4();
    o2.query = e3 || (r.apiKey && c3(this.url) ? this.devBasemapGalleryGroupQuery : this.useVectorBasemaps ? this.vectorBasemapGalleryGroupQuery : this.basemapGalleryGroupQuery), o2.disableExtraQuery = true;
    const s3 = await this.queryGroups(o2, r2);
    if (!s3.total)
      return [];
    const i2 = s3.results[0];
    o2.num = 100, o2.query = 'type:"Web Map" -type:"Web Application"', o2.sortField = i2.sortField || "name", o2.sortOrder = i2.sortOrder || "desc";
    const a4 = await i2.queryItems(o2, r2);
    if (!a4.total)
      return [];
    return a4.results.filter((e4) => "Web Map" === e4.type).map((e4) => new M({ portalItem: e4 }));
  }
  async _fetchBasemaps3D(e3, t3) {
    const r2 = e3 || this.basemapGalleryGroupQuery3D;
    if (!r2)
      return [];
    const o2 = new c4({ query: r2, disableExtraQuery: true }), s3 = await this.queryGroups(o2, t3);
    if (!s3.total)
      return [];
    const i2 = s3.results[0];
    o2.num = 100, o2.query = 'type:"Web Scene"', o2.sortField = i2.sortField || "name", o2.sortOrder = i2.sortOrder || "desc";
    const a4 = await i2.queryItems(o2, t3);
    if (!a4.total)
      return [];
    return a4.results.filter((e4) => "Web Scene" === e4.type).map((e4) => new M({ portalItem: e4 }));
  }
  _normalizeSSL(e3) {
    return e3.replace(/^http:/i, "https:").replace(":7080", ":7443");
  }
  _readBasemap(e3) {
    if (e3) {
      const t3 = M.fromJSON(e3);
      return t3.portalItem = { portal: this }, t3;
    }
    return null;
  }
  static _resultsToTypedArray(e3, t3, r2, o2) {
    let s3 = [];
    if (r2) {
      const i2 = null != o2 ? o2.signal : null;
      s3 = r2.listings || r2.notifications || r2.userInvitations || r2.tags || r2.items || r2.groups || r2.comments || r2.provisions || r2.results || r2.relatedItems || r2, (e3 || t3) && (s3 = s3.map((r3) => {
        const o3 = Object.assign(e3 ? e3.fromJSON(r3) : r3, t3);
        return "function" == typeof o3.load && o3.load(i2), o3;
      }));
    } else
      s3 = [];
    return s3;
  }
};
C.AUTH_MODE_ANONYMOUS = "anonymous", C.AUTH_MODE_AUTO = "auto", C.AUTH_MODE_IMMEDIATE = "immediate", C.AUTH_MODE_NO_PROMPT = "no-prompt", e([y()], C.prototype, "access", void 0), e([y()], C.prototype, "allSSL", void 0), e([y()], C.prototype, "authMode", void 0), e([y()], C.prototype, "authorizedCrossOriginDomains", void 0), e([o("authorizedCrossOriginDomains")], C.prototype, "readAuthorizedCrossOriginDomains", null), e([y()], C.prototype, "basemapGalleryGroupQuery", void 0), e([y({ json: { name: "3DBasemapGalleryGroupQuery" } })], C.prototype, "basemapGalleryGroupQuery3D", void 0), e([y()], C.prototype, "bingKey", void 0), e([y()], C.prototype, "canListApps", void 0), e([y()], C.prototype, "canListData", void 0), e([y()], C.prototype, "canListPreProvisionedItems", void 0), e([y()], C.prototype, "canProvisionDirectPurchase", void 0), e([y()], C.prototype, "canSearchPublic", void 0), e([y()], C.prototype, "canShareBingPublic", void 0), e([y()], C.prototype, "canSharePublic", void 0), e([y()], C.prototype, "canSignInArcGIS", void 0), e([y()], C.prototype, "canSignInIDP", void 0), e([y()], C.prototype, "colorSetsGroupQuery", void 0), e([y()], C.prototype, "commentsEnabled", void 0), e([y({ type: Date })], C.prototype, "created", void 0), e([y()], C.prototype, "credential", void 0), e([y()], C.prototype, "culture", void 0), e([y()], C.prototype, "currentVersion", void 0), e([y()], C.prototype, "customBaseUrl", void 0), e([y()], C.prototype, "defaultBasemap", void 0), e([o("defaultBasemap")], C.prototype, "readDefaultBasemap", null), e([y()], C.prototype, "defaultDevBasemap", void 0), e([o("defaultDevBasemap")], C.prototype, "readDefaultDevBasemap", null), e([y({ type: w })], C.prototype, "defaultExtent", void 0), e([y()], C.prototype, "defaultVectorBasemap", void 0), e([o("defaultVectorBasemap")], C.prototype, "readDefaultVectorBasemap", null), e([y()], C.prototype, "description", void 0), e([y()], C.prototype, "devBasemapGalleryGroupQuery", void 0), e([y()], C.prototype, "eueiEnabled", void 0), e([y({ readOnly: true })], C.prototype, "extraQuery", null), e([y()], C.prototype, "featuredGroups", void 0), e([y()], C.prototype, "featuredItemsGroupQuery", void 0), e([y()], C.prototype, "galleryTemplatesGroupQuery", void 0), e([y()], C.prototype, "layoutGroupQuery", void 0), e([y()], C.prototype, "livingAtlasGroupQuery", void 0), e([y()], C.prototype, "hasCategorySchema", void 0), e([y()], C.prototype, "helpBase", void 0), e([y()], C.prototype, "helperServices", void 0), e([y()], C.prototype, "helpMap", void 0), e([y()], C.prototype, "homePageFeaturedContent", void 0), e([y()], C.prototype, "homePageFeaturedContentCount", void 0), e([y()], C.prototype, "httpPort", void 0), e([y()], C.prototype, "httpsPort", void 0), e([y()], C.prototype, "id", void 0), e([y()], C.prototype, "ipCntryCode", void 0), e([y({ readOnly: true })], C.prototype, "isOrganization", null), e([y()], C.prototype, "isPortal", void 0), e([y()], C.prototype, "isReadOnly", void 0), e([y({ readOnly: true })], C.prototype, "itemPageUrl", null), e([y()], C.prototype, "layerTemplatesGroupQuery", void 0), e([y()], C.prototype, "maxTokenExpirationMinutes", void 0), e([y({ type: Date })], C.prototype, "modified", void 0), e([y()], C.prototype, "name", void 0), e([y()], C.prototype, "portalHostname", void 0), e([y()], C.prototype, "portalMode", void 0), e([y()], C.prototype, "portalProperties", void 0), e([y()], C.prototype, "region", void 0), e([y({ readOnly: true })], C.prototype, "restUrl", null), e([y()], C.prototype, "rotatorPanels", void 0), e([y()], C.prototype, "showHomePageDescription", void 0), e([y()], C.prototype, "sourceJSON", void 0), e([y()], C.prototype, "staticImagesUrl", void 0), e([y({ json: { name: "2DStylesGroupQuery" } })], C.prototype, "stylesGroupQuery2d", void 0), e([y({ json: { name: "stylesGroupQuery" } })], C.prototype, "stylesGroupQuery3d", void 0), e([y()], C.prototype, "supportsHostedServices", void 0), e([y()], C.prototype, "symbolSetsGroupQuery", void 0), e([y()], C.prototype, "templatesGroupQuery", void 0), e([y()], C.prototype, "thumbnail", void 0), e([y({ readOnly: true })], C.prototype, "thumbnailUrl", null), e([y()], C.prototype, "units", void 0), e([y()], C.prototype, "url", void 0), e([y()], C.prototype, "urlKey", void 0), e([o("urlKey")], C.prototype, "readUrlKey", null), e([y()], C.prototype, "user", void 0), e([o("user")], C.prototype, "readUser", null), e([y()], C.prototype, "use3dBasemaps", void 0), e([y()], C.prototype, "useStandardizedQuery", void 0), e([y()], C.prototype, "useVectorBasemaps", void 0), e([y()], C.prototype, "vectorBasemapGalleryGroupQuery", void 0), C = _ = e([a3("esri.portal.Portal")], C);
var Q = C;
var b = new FinalizationRegistry((e3) => {
  e3.remove();
});
function w2(e3) {
  const t3 = t;
  return () => {
    const r2 = e3.deref();
    r2 && t3.findCredential(r2.restUrl) && r2.signIn().catch(() => {
    });
  };
}

export {
  c4 as c,
  p5 as p,
  Q
};
//# sourceMappingURL=chunk-UMXV3EBO.js.map
