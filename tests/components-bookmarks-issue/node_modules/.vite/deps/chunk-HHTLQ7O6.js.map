{
  "version": 3,
  "sources": ["../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{IDENTITY as e}from\"../../../../../../core/libs/gl-matrix-2/factories/mat3f64.js\";import{ONES as t}from\"../../../../../../core/libs/gl-matrix-2/factories/vec2f64.js\";import{TextureCoordinateAttributeType as r}from\"../attributes/TextureCoordinateAttribute.glsl.js\";import{VertexTextureCoordinates as a}from\"../attributes/VertexTextureCoordinates.glsl.js\";import{NormalsDoubleSidedMode as n}from\"./Normals.glsl.js\";import{Float2PassUniform as o}from\"../../shaderModules/Float2PassUniform.js\";import{glsl as s}from\"../../shaderModules/interfaces.js\";import{Matrix3PassUniform as m}from\"../../shaderModules/Matrix3PassUniform.js\";import{Texture2DDrawUniform as d}from\"../../shaderModules/Texture2DDrawUniform.js\";import{Texture2DPassUniform as l}from\"../../shaderModules/Texture2DPassUniform.js\";import{BindType as i}from\"../../shaderTechnique/BindType.js\";import{VertexAttribute as c}from\"../../../lib/VertexAttribute.js\";function T(T,u){const x=T.fragment;u.hasVertexTangents?(T.attributes.add(c.TANGENT,\"vec4\"),T.varyings.add(\"vTangent\",\"vec4\"),u.doubleSidedMode===n.WindingOrder?x.code.add(s`mat3 computeTangentSpace(vec3 normal) {\nfloat tangentHeadedness = gl_FrontFacing ? vTangent.w : -vTangent.w;\nvec3 tangent = normalize(gl_FrontFacing ? vTangent.xyz : -vTangent.xyz);\nvec3 bitangent = cross(normal, tangent) * tangentHeadedness;\nreturn mat3(tangent, bitangent, normal);\n}`):x.code.add(s`mat3 computeTangentSpace(vec3 normal) {\nfloat tangentHeadedness = vTangent.w;\nvec3 tangent = normalize(vTangent.xyz);\nvec3 bitangent = cross(normal, tangent) * tangentHeadedness;\nreturn mat3(tangent, bitangent, normal);\n}`)):x.code.add(s`mat3 computeTangentSpace(vec3 normal, vec3 pos, vec2 st) {\nvec3 Q1 = dFdx(pos);\nvec3 Q2 = dFdy(pos);\nvec2 stx = dFdx(st);\nvec2 sty = dFdy(st);\nfloat det = stx.t * sty.s - sty.t * stx.s;\nvec3 T = stx.t * Q2 - sty.t * Q1;\nT = T - normal * dot(normal, T);\nT *= inversesqrt(max(dot(T,T), 1.e-10));\nvec3 B = sign(det) * cross(normal, T);\nreturn mat3(T, B, normal);\n}`),u.textureCoordinateType!==r.None&&(T.include(a,u),x.uniforms.add(u.pbrTextureBindType===i.Pass?new l(\"normalTexture\",(e=>e.textureNormal)):new d(\"normalTexture\",(e=>e.textureNormal))),u.hasNormalTextureTransform&&(x.uniforms.add(new o(\"scale\",(e=>e.scale??t))),x.uniforms.add(new m(\"normalTextureTransformMatrix\",(t=>t.normalTextureTransformMatrix??e)))),x.code.add(s`vec3 computeTextureNormal(mat3 tangentSpace, vec2 uv) {\nvec3 rawNormal = textureLookup(normalTexture, uv).rgb * 2.0 - 1.0;`),u.hasNormalTextureTransform&&x.code.add(s`mat3 normalTextureRotation = mat3(normalTextureTransformMatrix[0][0]/scale[0], normalTextureTransformMatrix[0][1]/scale[1], 0.0,\nnormalTextureTransformMatrix[1][0]/scale[0], normalTextureTransformMatrix[1][1]/scale[1], 0.0,\n0.0, 0.0, 0.0 );\nrawNormal.xy = (normalTextureRotation * vec3(rawNormal.x, rawNormal.y, 1.0)).xy;`),x.code.add(s`return tangentSpace * rawNormal;\n}`))}export{T as ComputeNormalTexture};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAI65B,SAAS,EAAEA,IAAE,GAAE;AAAC,QAAM,IAAEA,GAAE;AAAS,IAAE,qBAAmBA,GAAE,WAAW,IAAI,EAAE,SAAQ,MAAM,GAAEA,GAAE,SAAS,IAAI,YAAW,MAAM,GAAE,EAAE,oBAAkB,EAAE,eAAa,EAAE,KAAK,IAAIC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKtkC,IAAE,EAAE,KAAK,IAAIA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKb,KAAG,EAAE,KAAK,IAAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWd,GAAE,EAAE,0BAAwB,EAAE,SAAOD,GAAE,QAAQE,IAAE,CAAC,GAAE,EAAE,SAAS,IAAI,EAAE,uBAAqB,EAAE,OAAK,IAAIA,GAAE,iBAAiB,CAAAC,OAAGA,GAAE,aAAc,IAAE,IAAI,EAAE,iBAAiB,CAAAA,OAAGA,GAAE,aAAc,CAAC,GAAE,EAAE,8BAA4B,EAAE,SAAS,IAAI,IAAIA,GAAE,SAAS,CAAAA,OAAGA,GAAE,SAAO,CAAE,CAAC,GAAE,EAAE,SAAS,IAAI,IAAIA,GAAE,gCAAgC,OAAG,EAAE,gCAA8B,CAAE,CAAC,IAAG,EAAE,KAAK,IAAIF;AAAA,mEAC/S,GAAE,EAAE,6BAA2B,EAAE,KAAK,IAAIA;AAAA;AAAA;AAAA,iFAG5B,GAAE,EAAE,KAAK,IAAIA;AAAA,EAC5F;AAAE;",
  "names": ["T", "o", "s", "e"]
}
