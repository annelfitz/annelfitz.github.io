import {
  r
} from "./chunk-S5I4QKJD.js";
import {
  ee,
  j
} from "./chunk-UWQ3OYA5.js";

// node_modules/@arcgis/core/support/elevationInfoUtils.js
function o(e) {
  return e ? $ : R;
}
function r2(e, n) {
  return (n == null ? void 0 : n.mode) ? n.mode : o(e).mode;
}
function u(e, n) {
  return null != n ? n : o(e);
}
function i(e, n) {
  return r2(null != e && e.hasZ, n);
}
function l(e, n) {
  return u(null != e && !!e.hasZ, n);
}
function s(e) {
  const n = d(e);
  return i(e.geometry, n);
}
function a(e) {
  const n = d(e), t = i(e.geometry, n);
  return { mode: t, offset: null != n && "on-the-ground" !== t ? w(n) : 0 };
}
function c(e) {
  return f(a(e));
}
function f(e) {
  if ("on-the-ground" === e.mode)
    return false;
  const n = (e == null ? void 0 : e.featureExpressionInfo) ? e.featureExpressionInfo.expression : null;
  return !(!n || "0" === n);
}
function d(e) {
  return e.layer && "elevationInfo" in e.layer ? e.layer.elevationInfo : null;
}
function v(t, o2) {
  if (!(t == null ? void 0 : t.offset))
    return 0;
  const { offset: r3, unit: u2 } = t;
  if ("decimal-degrees" === u2)
    return 0;
  const i2 = "unknown" !== u2 && u2 ? u2 : "meters", l2 = ee(o2);
  return l2 ? j(r3, i2, l2) : 0;
}
function g(e, n, t) {
  if (!(t == null ? void 0 : t.mode))
    return;
  const o2 = e.hasZ ? e.z : 0, r3 = v(t, e.spatialReference);
  switch (t.mode) {
    case "absolute-height":
      return o2 - r3;
    case "on-the-ground":
      return 0;
    case "relative-to-ground":
      return o2 - ((n.elevationProvider.getElevation(e.x, e.y, o2, e.spatialReference, "ground") ?? 0) + r3);
    case "relative-to-scene":
      return o2 - ((n.elevationProvider.getElevation(e.x, e.y, o2, e.spatialReference, "scene") ?? 0) + r3);
  }
}
function h(e, n, t, o2 = null) {
  return p(e, n.x, n.y, n.hasZ ? n.z : 0, n.spatialReference, t, o2);
}
function m(e, n, t, o2, r3 = null) {
  return p(e, n[0], n[1], n.length > 2 ? n[2] : 0, t, o2, r3);
}
function p(e, n, t, o2, r3, u2, i2 = null) {
  if (null == u2)
    return;
  const l2 = null != i2 ? i2.mode : "absolute-height";
  if ("on-the-ground" === l2)
    return 0;
  const { absoluteZ: s2 } = b(n, t, o2, r3, e, u2);
  return E(s2, n, t, o2, r3, e, i2, l2);
}
function b(e, n, t, o2, r3, u2) {
  const i2 = v(u2, o2);
  switch (u2.mode) {
    case "absolute-height":
      return { absoluteZ: t + i2, elevation: 0 };
    case "on-the-ground": {
      const t2 = r3.elevationProvider.getElevation(e, n, 0, o2, "ground") ?? 0;
      return { absoluteZ: t2, elevation: t2 };
    }
    case "relative-to-ground": {
      const u3 = r3.elevationProvider.getElevation(e, n, t, o2, "ground") ?? 0;
      return { absoluteZ: t + u3 + i2, elevation: u3 };
    }
    case "relative-to-scene": {
      const u3 = r3.elevationProvider.getElevation(e, n, t, o2, "scene") ?? 0;
      return { absoluteZ: t + u3 + i2, elevation: u3 };
    }
  }
}
function E(e, n, t, o2, r3, u2, i2, l2) {
  const s2 = v(i2, r3);
  switch (l2) {
    case "absolute-height":
      return e - s2;
    case "relative-to-ground":
      return e - ((u2.elevationProvider.getElevation(n, t, o2, r3, "ground") ?? 0) + s2);
    case "relative-to-scene":
      return e - ((u2.elevationProvider.getElevation(n, t, o2, r3, "scene") ?? 0) + s2);
  }
}
function x(e, n) {
  if (null == n)
    return false;
  const { mode: t } = n;
  return null != t && ("scene" === e && "relative-to-scene" === t || "ground" === e && "absolute-height" !== t);
}
function y(e, n, t) {
  return t && t.mode !== n ? `${e} only support ${n} elevation mode` : null;
}
function Z(e, n, t) {
  return (t == null ? void 0 : t.mode) === n ? `${e} do not support ${n} elevation mode` : null;
}
function I(e, n) {
  return null != (n == null ? void 0 : n.featureExpressionInfo) && "0" !== n.featureExpressionInfo.expression ? `${e} do not support featureExpressionInfo` : null;
}
function P(e, n) {
  n && e.warn(".elevationInfo=", n);
}
function w(e) {
  return ((e == null ? void 0 : e.offset) ?? 0) * r(e == null ? void 0 : e.unit);
}
var $ = { mode: "absolute-height", offset: 0 };
var R = { mode: "on-the-ground", offset: null };

export {
  r2 as r,
  u,
  i,
  l,
  s,
  a,
  c,
  f,
  v,
  g,
  h,
  m,
  p,
  b,
  x,
  y,
  Z,
  I,
  P,
  w,
  $,
  R
};
//# sourceMappingURL=chunk-SA77Z3WI.js.map
