import {
  e as e3
} from "./chunk-EPOP3OQ6.js";
import "./chunk-HWBFFWYY.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import {
  D,
  e2
} from "./chunk-RGCWZ2KZ.js";
import {
  n
} from "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import "./chunk-2SDMYJDE.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import {
  M,
  w2 as w
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  d as d2
} from "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  d
} from "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/widgets/Measurement/MeasurementViewModel.js
var n2 = class extends S {
  constructor(e4) {
    super(e4), this.activeTool = null, this.activeViewModel = null, this.view = null;
  }
  get areaUnit() {
    return this.defaultUnit;
  }
  set areaUnit(e4) {
    this._overrideIfSome("areaUnit", e4);
  }
  get linearUnit() {
    return this.defaultUnit;
  }
  set linearUnit(e4) {
    this._overrideIfSome("linearUnit", e4);
  }
  get state() {
    const { activeViewModel: e4 } = this;
    return e4 ? e4.state : "disabled";
  }
};
e([y({ type: ["area", "distance", "direct-line"] })], n2.prototype, "activeTool", void 0), e([y()], n2.prototype, "activeViewModel", void 0), e([y({ type: w })], n2.prototype, "areaUnit", null), e([y(e3)], n2.prototype, "defaultUnit", void 0), e([y({ type: M })], n2.prototype, "linearUnit", null), e([y({ readOnly: true })], n2.prototype, "state", null), e([y()], n2.prototype, "view", void 0), n2 = e([a("esri.widgets.Measurement.MeasurementViewModel")], n2);
var p = n2;

// node_modules/@arcgis/core/widgets/Measurement.js
var d3 = { base: "esri-measurement" };
function u(e4) {
  return "esri.widgets.AreaMeasurement2D" === (e4 == null ? void 0 : e4.declaredClass) || "esri.widgets.AreaMeasurement3D" === (e4 == null ? void 0 : e4.declaredClass);
}
var c = class extends D {
  constructor(e4, t) {
    super(e4, t), this._widgets = /* @__PURE__ */ new Map(), this.activeWidget = null, this.messages = null, this.viewModel = new p();
  }
  initialize() {
    this.activeWidget && this.viewModel.set("activeViewModel", this.activeWidget.viewModel), this.view && this.activeTool && this._getActiveWidget().then((e4) => {
      this._set("activeWidget", e4);
    }), this.addHandles([d2(() => [this.view, this.activeTool], async () => {
      this._set("activeWidget", await this._getActiveWidget());
    }), d2(() => this.activeWidget, (e4, t) => {
      this.viewModel.set("activeViewModel", e4 ? e4.viewModel : null), t && (t.visible = false);
    }), d2(() => [this.areaUnit, this.linearUnit, this.uiStrings], () => this._updateSubWidgetProperties())]);
  }
  destroy() {
    this._destroyWidgets();
  }
  get activeTool() {
    return this.viewModel.activeTool;
  }
  set activeTool(e4) {
    this.viewModel.activeTool = e4;
  }
  get areaUnit() {
    return this.viewModel.areaUnit;
  }
  set areaUnit(e4) {
    this.viewModel.areaUnit = e4;
  }
  get icon() {
    return "measure";
  }
  set icon(e4) {
    this._overrideIfSome("icon", e4);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e4) {
    this._overrideIfSome("label", e4);
  }
  get linearUnit() {
    return this.viewModel.linearUnit;
  }
  set linearUnit(e4) {
    this.viewModel.linearUnit = e4;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e4) {
    this.viewModel.view = e4;
  }
  render() {
    const { activeWidget: e4 } = this, t = e4 && !e4.destroyed ? e4.render() : null;
    return n("div", { class: d3.base }, t);
  }
  clear() {
    this.activeTool = null, this._destroyWidgets();
  }
  startMeasurement() {
    const { activeViewModel: e4 } = this.viewModel;
    e4 && d(e4.start());
  }
  async _createWidget(e4) {
    const { areaUnit: t, linearUnit: i, view: s } = this;
    if (!s)
      return null;
    switch (e4) {
      case "area": {
        const { type: i2 } = s;
        switch (i2) {
          case "2d":
            return new (0, (await import("./AreaMeasurement2D-HKM5HL43.js")).default)({ view: s, unit: t, uiStrings: this._createUIStringsForWidget(e4) });
          case "3d":
            return new (0, (await import("./AreaMeasurement3D-VTG5QAYO.js")).default)({ view: s, unit: t, uiStrings: this._createUIStringsForWidget(e4) });
          default:
            return null;
        }
      }
      case "distance": {
        const { type: t2 } = s;
        if ("2d" === t2) {
          return new (0, (await import("./DistanceMeasurement2D-F53NHH4E.js")).default)({ view: s, unit: i, uiStrings: this._createUIStringsForWidget(e4) });
        }
        return null;
      }
      case "direct-line": {
        const { type: t2 } = s;
        if ("3d" === t2) {
          return new (0, (await import("./DirectLineMeasurement3D-YM25WVIL.js")).default)({ view: s, unit: i, uiStrings: this._createUIStringsForWidget(e4) });
        }
        return null;
      }
      default:
        return null;
    }
  }
  _destroyWidgets() {
    this._widgets.forEach((e4) => e4.destroy()), this._widgets.clear();
  }
  async _getActiveWidget() {
    const { activeTool: e4, view: t } = this;
    if (!t || !e4)
      return null;
    let i = null;
    if (this._widgets.has(e4))
      i = this._widgets.get(e4), i.visible = true;
    else {
      if (i = await this._createWidget(e4), !i)
        return null;
      await i.viewModel.start(), this._widgets.set(e4, i);
    }
    return i;
  }
  _createUIStringsForWidget(e4) {
    var _a;
    if (!this.uiStrings)
      return;
    const t = e4 + "-" + ((_a = this.view) == null ? void 0 : _a.type);
    return this.uiStrings[t];
  }
  _updateSubWidgetProperties() {
    this._widgets.forEach((e4, t) => {
      const { areaUnit: i, linearUnit: s } = this;
      e4.unit = u(e4) ? i : s, e4.uiStrings = this._createUIStringsForWidget(t);
    });
  }
};
e([y()], c.prototype, "activeTool", null), e([y({ readOnly: true })], c.prototype, "activeWidget", void 0), e([y()], c.prototype, "areaUnit", null), e([y()], c.prototype, "icon", null), e([y()], c.prototype, "label", null), e([y()], c.prototype, "linearUnit", null), e([y(), e2("esri/widgets/Measurement/t9n/Measurement")], c.prototype, "messages", void 0), e([y()], c.prototype, "uiStrings", void 0), e([y()], c.prototype, "view", null), e([y({ type: p })], c.prototype, "viewModel", void 0), c = e([a("esri.widgets.Measurement")], c);
var g = c;
export {
  g as default
};
//# sourceMappingURL=Measurement-QJHSPGBE.js.map
