import {
  f as f2
} from "./chunk-QYC3GV65.js";
import {
  P
} from "./chunk-ETHGDNE6.js";
import {
  j2 as j
} from "./chunk-ZIJHDTB7.js";
import {
  i
} from "./chunk-R4CJB3GP.js";
import {
  o as o2
} from "./chunk-TGXFDJCS.js";
import {
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import {
  o
} from "./chunk-YOPMY6TS.js";
import {
  r
} from "./chunk-VIN55KNF.js";
import {
  i as i2
} from "./chunk-RUN6MNXL.js";
import {
  f
} from "./chunk-SBL4URUW.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";

// node_modules/@arcgis/core/rest/support/networkEnums.js
var i3 = i2()({ esriCentimeters: "centimeters", esriDecimalDegrees: "decimal-degrees", esriDecimeters: "decimeters", esriFeet: "feet", esriInches: "inches", esriKilometers: "kilometers", esriMeters: "meters", esriMiles: "miles", esriMillimeters: "millimeters", esriNauticalMiles: "nautical-miles", esriPoints: "points", esriUnknownUnits: "unknown", esriYards: "yards" });
var r2 = i2()({ esriNAUCentimeters: "centimeters", esriNAUDecimalDegrees: "decimal-degrees", esriNAUDecimeters: "decimeters", esriNAUFeet: "feet", esriNAUInches: "inches", esriNAUKilometers: "kilometers", esriNAUMeters: "meters", esriNAUMiles: "miles", esriNAUMillimeters: "millimeters", esriNAUNauticalMiles: "nautical-miles", esriNAUPoints: "points", esriNAUYards: "yards" });
var t = i2()({ esriNAUDays: "days", esriNAUHours: "hours", esriNAUMinutes: "minutes", esriNAUSeconds: "seconds" });
var s = i2()({ esriNAUCentimeters: "centimeters", esriNAUDecimalDegrees: "decimal-degrees", esriNAUDecimeters: "decimeters", esriNAUFeet: "feet", esriNAUInches: "inches", esriNAUKilometers: "kilometers", esriNAUMeters: "meters", esriNAUMiles: "miles", esriNAUMillimeters: "millimeters", esriNAUNauticalMiles: "nautical-miles", esriNAUPoints: "points", esriNAUYards: "yards", esriNAUDays: "days", esriNAUHours: "hours", esriNAUMinutes: "minutes", esriNAUSeconds: "seconds", esriNAUKilometersPerHour: "kilometers-per-hour", esriNAUMilesPerHour: "miles-per-hour", esriNAUUnknown: "unknown" });
var a2 = i2()({ esriDOTComplete: "complete", esriDOTCompleteNoEvents: "complete-no-events", esriDOTFeatureSets: "featuresets", esriDOTInstructionsOnly: "instructions-only", esriDOTStandard: "standard", esriDOTSummaryOnly: "summary-only" });
var o3 = i2()({ esriNAOutputLineNone: "none", esriNAOutputLineStraight: "straight", esriNAOutputLineTrueShape: "true-shape", esriNAOutputLineTrueShapeWithMeasure: "true-shape-with-measure" });
var n = i2()({ esriNAOutputPolygonNone: "none", esriNAOutputPolygonSimplified: "simplified", esriNAOutputPolygonDetailed: "detailed" });
var l = i2()({ esriNFSBAllowBacktrack: "allow-backtrack", esriNFSBAtDeadEndsOnly: "at-dead-ends-only", esriNFSBNoBacktrack: "no-backtrack", esriNFSBAtDeadEndsAndIntersections: "at-dead-ends-and-intersections" });
var d = i2()({ esriNATravelDirectionFromFacility: "from-facility", esriNATravelDirectionToFacility: "to-facility" });
var c = i2()({ esriNATimeOfDayNotUsed: "not-used", esriNATimeOfDayUseAsStartTime: "start", esriNATimeOfDayUseAsEndTime: "end" });
var m = i2()({ AUTOMOBILE: "automobile", TRUCK: "truck", WALK: "walk", OTHER: "other" });
var u = i2()({ 0: "either-side-of-vehicle", 1: "right-side-of-vehicle", 2: "left-side-of-vehicle", 3: "no-u-turn" }, { useNumericKeys: true });
var h = i2()({ 0: "stop", 1: "waypoint", 2: "break" }, { useNumericKeys: true });
var p = i2()({ 0: "ok", 1: "not-located", 2: "network-element-not-located", 3: "element-not-traversable", 4: "invalid-field-values", 5: "not-reached", 6: "time-window-violation", 7: "not-located-on-closest" }, { useNumericKeys: true });
var v = i2()({ 1: "right", 2: "left" }, { useNumericKeys: true });
var A = i2()({ 0: "restriction", 1: "scaled-cost", 2: "added-cost" }, { useNumericKeys: true });
var T = i2()({ 0: "permit", 1: "restrict" }, { useNumericKeys: true });
var N = i2()({ 1: "header", 50: "arrive", 51: "depart", 52: "straight", 100: "on-ferry", 101: "off-ferry", 102: "central-fork", 103: "roundabout", 104: "u-turn", 150: "door", 151: "stairs", 152: "elevator", 153: "escalator", 154: "pedestrian-ramp", 200: "left-fork", 201: "left-ramp", 202: "clockwise-roundabout", 203: "left-handed-u-turn", 204: "bear-left", 205: "left-turn", 206: "sharp-left", 207: "left-turn-and-immediate-left-turn", 208: "left-turn-and-immediate-right-turn", 300: "right-fork", 301: "right-ramp", 302: "counter-clockwise-roundabout", 303: "right-handed-u-turn", 304: "bear-right", 305: "right-turn", 306: "sharp-right", 307: "right-turn-and-immediate-left-turn", 308: "right-turn-and-immediate-right-turn", 400: "up-elevator", 401: "up-escalator", 402: "up-stairs", 500: "down-elevator", 501: "down-escalator", 502: "down-stairs", 1e3: "general-event", 1001: "landmark", 1002: "time-zone-change", 1003: "traffic-event", 1004: "scaled-cost-barrier-event", 1005: "boundary-crossing", 1006: "restriction-violation", 1007: "lane" }, { useNumericKeys: true });
var g = i2()({ 0: "unknown", 1: "segment", 2: "maneuver-segment", 3: "restriction-violation", 4: "scaled-cost-barrier", 5: "heavy-traffic", 6: "slow-traffic", 7: "moderate-traffic" }, { useNumericKeys: true });
var k = i2()({ "NA Campus": "campus", "NA Desktop": "desktop", "NA Navigation": "navigation" });
var f3 = i2()({ Kilometers: "kilometers", Miles: "miles", Meters: "meters" }, { ignoreUnknown: false });
var y2 = i2()({ Minutes: "minutes", TimeAt1KPH: "time-at-1-kph", TravelTime: "travel-time", TruckMinutes: "truck-minutes", TruckTravelTime: "truck-travel-time", WalkTime: "walk-time" }, { ignoreUnknown: false });
var U = i2()({ Kilometers: "kilometers", Miles: "miles", Meters: "meters", Minutes: "minutes", TimeAt1KPH: "time-at-1-kph", TravelTime: "travel-time", TruckMinutes: "truck-minutes", TruckTravelTime: "truck-travel-time", WalkTime: "walk-time" }, { ignoreUnknown: false });
var D = i2()({ "Any Hazmat Prohibited": "any-hazmat-prohibited", "Avoid Carpool Roads": "avoid-carpool-roads", "Avoid Express Lanes": "avoid-express-lanes", "Avoid Ferries": "avoid-ferries", "Avoid Gates": "avoid-gates", "Avoid Limited Access Roads": "avoid-limited-access-roads", "Avoid Private Roads": "avoid-private-roads", "Avoid Roads Unsuitable for Pedestrians": "avoid-roads-unsuitable-for-pedestrians", "Avoid Stairways": "avoid-stairways", "Avoid Toll Roads": "avoid-toll-roads", "Avoid Toll Roads for Trucks": "avoid-toll-roads-for-trucks", "Avoid Truck Restricted Roads": "avoid-truck-restricted-roads", "Avoid Unpaved Roads": "avoid-unpaved-roads", "Axle Count Restriction": "axle-count-restriction", "Driving a Bus": "driving-a-bus", "Driving a Taxi": "driving-a-taxi", "Driving a Truck": "driving-a-truck", "Driving an Automobile": "driving-an-automobile", "Driving an Emergency Vehicle": "driving-an-emergency-vehicle", "Height Restriction": "height-restriction", "Kingpin to Rear Axle Length Restriction": "kingpin-to-rear-axle-length-restriction", "Length Restriction": "length-restriction", "Preferred for Pedestrians": "preferred-for-pedestrians", "Riding a Motorcycle": "riding-a-motorcycle", "Roads Under Construction Prohibited": "roads-under-construction-prohibited", "Semi or Tractor with One or More Trailers Prohibited": "semi-or-tractor-with-one-or-more-trailers-prohibited", "Single Axle Vehicles Prohibited": "single-axle-vehicles-prohibited", "Tandem Axle Vehicles Prohibited": "tandem-axle-vehicles-prohibited", "Through Traffic Prohibited": "through-traffic-prohibited", "Truck with Trailers Restriction": "truck-with-trailers-restriction", "Use Preferred Hazmat Routes": "use-preferred-hazmat-routes", "Use Preferred Truck Routes": "use-preferred-truck-routes", Walking: "walking", "Weight Restriction": "weight-restriction" }, { ignoreUnknown: false });
var S = i2()({ esriSpatialRelIntersects: "intersects", esriSpatialRelContains: "contains", esriSpatialRelCrosses: "crosses", esriSpatialRelEnvelopeIntersects: "envelope-intersects", esriSpatialRelIndexIntersects: "index-intersects", esriSpatialRelOverlaps: "overlaps", esriSpatialRelTouches: "touches", esriSpatialRelWithin: "within", esriSpatialRelRelation: "relation" });
var w = i2()({ esriGeometryPoint: "point", esriGeometryPolyline: "polyline", esriGeometryPolygon: "polygon", esriGeometryEnvelope: "envelope", esriGeometryMultipoint: "multipoint" });
var R = i2()({ esriNAUTCost: "cost", esriNAUTDescriptor: "descriptor", esriNAUTRestriction: "restriction", esriNAUTHierarchy: "hierarchy" });
var b = i2()({ esriDSTAltName: "alt-name", esriDSTArrive: "arrive", esriDSTBranch: "branch", esriDSTCrossStreet: "cross-street", esriDSTCumulativeLength: "cumulative-length", esriDSTDepart: "depart", esriDSTEstimatedArrivalTime: "estimated-arrival-time", esriDSTExit: "exit", esriDSTGeneral: "general", esriDSTLength: "length", esriDSTServiceTime: "service-time", esriDSTStreetName: "street-name", esriDSTSummary: "summary", esriDSTTime: "time", esriDSTTimeWindow: "time-window", esriDSTToward: "toward", esriDSTViolationTime: "violation-time", esriDSTWaitTime: "wait-time" });

// node_modules/@arcgis/core/rest/route/utils.js
function r3(r4, i5) {
  if (null == r4)
    return null;
  const e3 = {}, s3 = new RegExp(`^${i5}`, "i");
  for (const n3 of Object.keys(r4))
    if (s3.test(n3)) {
      const s4 = n3.substring(i5.length);
      e3[U.fromJSON(s4)] = r4[n3];
    }
  return e3;
}
function i4(r4, i5, e3) {
  if (null != r4) {
    i5.attributes || (i5.attributes = {});
    for (const s3 in r4) {
      const n3 = U.toJSON(s3);
      i5.attributes[`${e3}${n3}`] = r4[s3];
    }
  }
}
function e2(r4) {
  const i5 = {};
  for (const e3 of Object.keys(r4)) {
    const s3 = e3;
    i5[U.fromJSON(s3)] = r4[e3];
  }
  return i5;
}
function s2(r4) {
  const i5 = {};
  for (const e3 of Object.keys(r4)) {
    const s3 = e3;
    i5[U.toJSON(s3)] = r4[e3];
  }
  return i5;
}
function n2(t2, r4) {
  return null == t2 || null == r4 ? null : Math.round((t2 - r4) / 6e4);
}
function o4(t2) {
  var _a, _b, _c;
  const r4 = t2.toJSON(), i5 = r4;
  return i5.accumulateAttributeNames && (i5.accumulateAttributeNames = (_a = r4.accumulateAttributeNames) == null ? void 0 : _a.join()), i5.attributeParameterValues && (i5.attributeParameterValues = JSON.stringify(r4.attributeParameterValues)), i5.barriers && (i5.barriers = JSON.stringify(r4.barriers)), i5.outSR && (i5.outSR = (_b = r4.outSR) == null ? void 0 : _b.wkid), i5.overrides && (i5.overrides = JSON.stringify(r4.overrides)), i5.polygonBarriers && (i5.polygonBarriers = JSON.stringify(r4.polygonBarriers)), i5.polylineBarriers && (i5.polylineBarriers = JSON.stringify(r4.polylineBarriers)), i5.restrictionAttributeNames && (i5.restrictionAttributeNames = (_c = r4.restrictionAttributeNames) == null ? void 0 : _c.join()), i5.stops && (i5.stops = JSON.stringify(r4.stops)), i5.travelMode && (i5.travelMode = JSON.stringify(r4.travelMode)), i5;
}

// node_modules/@arcgis/core/rest/support/Stop.js
var C;
var S2 = C = class extends i(f) {
  constructor(e3) {
    super(e3), this.arriveCurbApproach = null, this.arriveTime = null, this.arriveTimeOffset = null, this.bearing = null, this.bearingTol = null, this.cumulativeCosts = null, this.cumulativeDistance = null, this.cumulativeDuration = null, this.curbApproach = null, this.departCurbApproach = null, this.departTime = null, this.departTimeOffset = null, this.distanceToNetworkInMeters = null, this.geometry = null, this.lateDuration = null, this.locationType = null, this.name = null, this.navLatency = null, this.objectId = null, this.popupTemplate = null, this.posAlong = null, this.routeName = null, this.serviceCosts = null, this.serviceDistance = null, this.serviceDuration = null, this.sequence = null, this.sideOfEdge = null, this.snapX = null, this.snapY = null, this.snapZ = null, this.sourceId = null, this.sourceOid = null, this.status = null, this.symbol = null, this.timeWindowEnd = null, this.timeWindowEndOffset = null, this.timeWindowStart = null, this.timeWindowStartOffset = null, this.type = "stop", this.violations = null, this.waitDuration = null, this.wait = null;
  }
  readArriveTimeOffset(e3, t2) {
    return n2(t2.attributes.ArriveTime, t2.attributes.ArriveTimeUTC);
  }
  readCumulativeCosts(e3, t2) {
    return r3(t2.attributes, "Cumul_");
  }
  readDepartTimeOffset(e3, t2) {
    return n2(t2.attributes.DepartTime, t2.attributes.DepartTimeUTC);
  }
  readServiceCosts(e3, t2) {
    return r3(t2.attributes, "Attr_");
  }
  writeServiceCosts(e3, t2) {
    i4(e3, t2, "Attr_");
  }
  writeTimeWindowEnd(e3, t2) {
    null != e3 && (t2.attributes || (t2.attributes = {}), t2.attributes.TimeWindowEnd = e3.getTime());
  }
  writeTimeWindowStart(e3, t2) {
    null != e3 && (t2.attributes || (t2.attributes = {}), t2.attributes.TimeWindowStart = e3.getTime());
  }
  readViolations(e3, t2) {
    return r3(t2.attributes, "Violation_");
  }
  readWait(e3, t2) {
    return r3(t2.attributes, "Wait_");
  }
  static fromGraphic(e3) {
    return new C({ arriveCurbApproach: null != e3.attributes.ArrivalCurbApproach ? u.fromJSON(e3.attributes.ArrivalCurbApproach) : null, arriveTime: null != e3.attributes.ArrivalTime ? new Date(e3.attributes.ArrivalTime) : null, arriveTimeOffset: e3.attributes.ArrivalUTCOffset, cumulativeCosts: null != e3.attributes.CumulativeCosts ? e2(JSON.parse(e3.attributes.CumulativeCosts)) : null, cumulativeDistance: e3.attributes.CumulativeMeters ?? null, cumulativeDuration: e3.attributes.CumulativeMinutes ?? null, curbApproach: null != e3.attributes.CurbApproach ? u.fromJSON(e3.attributes.CurbApproach) : null, departCurbApproach: null != e3.attributes.DepartureCurbApproach ? u.fromJSON(e3.attributes.DepartureCurbApproach) : null, departTime: null != e3.attributes.DepartureTime ? new Date(e3.attributes.DepartureTime) : null, departTimeOffset: e3.attributes.DepartureUTCOffset ?? null, geometry: e3.geometry, lateDuration: e3.attributes.LateMinutes ?? null, locationType: null != e3.attributes.LocationType ? h.fromJSON(e3.attributes.LocationType) : null, name: e3.attributes.Name, objectId: e3.attributes.ObjectID ?? e3.attributes.__OBJECTID, popupTemplate: e3.popupTemplate, routeName: e3.attributes.RouteName, sequence: e3.attributes.Sequence ?? null, serviceCosts: null != e3.attributes.ServiceCosts ? e2(JSON.parse(e3.attributes.ServiceCosts)) : null, serviceDistance: e3.attributes.ServiceMeters ?? null, serviceDuration: e3.attributes.ServiceMinutes ?? null, status: null != e3.attributes.Status ? p.fromJSON(e3.attributes.Status) : null, symbol: e3.symbol, timeWindowEnd: null != e3.attributes.TimeWindowEnd ? new Date(e3.attributes.TimeWindowEnd) : null, timeWindowEndOffset: e3.attributes.TimeWindowEndUTCOffset ?? null, timeWindowStart: null != e3.attributes.TimeWindowStart ? new Date(e3.attributes.TimeWindowStart) : null, timeWindowStartOffset: e3.attributes.TimeWindowStartUTCOffset ?? null, waitDuration: e3.attributes.WaitMinutes ?? null });
  }
  toGraphic() {
    const e3 = { ObjectID: this.objectId, ArrivalCurbApproach: null != this.arriveCurbApproach ? u.toJSON(this.arriveCurbApproach) : null, ArrivalTime: null != this.arriveTime ? this.arriveTime.getTime() : null, ArrivalUTCOffset: this.arriveTimeOffset, CumulativeCosts: null != this.cumulativeCosts ? JSON.stringify(s2(this.cumulativeCosts)) : null, CumulativeMeters: this.cumulativeDistance, CumulativeMinutes: this.cumulativeDuration, CurbApproach: null != this.curbApproach ? u.toJSON(this.curbApproach) : null, DepartureCurbApproach: null != this.departCurbApproach ? u.toJSON(this.departCurbApproach) : null, DepartureTime: null != this.departTime ? this.departTime.getTime() : null, DepartureUTCOffset: this.departTimeOffset, LateMinutes: this.lateDuration, LocationType: null != this.locationType ? h.toJSON(this.locationType) : null, Name: this.name, RouteName: this.routeName, Sequence: this.sequence, ServiceCosts: null != this.serviceCosts ? JSON.stringify(s2(this.serviceCosts)) : null, ServiceMeters: this.serviceDistance, ServiceMinutes: this.serviceDuration, Status: null != this.status ? p.toJSON(this.status) : null, TimeWindowEnd: null != this.timeWindowEnd ? this.timeWindowEnd.getTime() : null, TimeWindowEndUTCOffset: this.timeWindowEndOffset ?? this.arriveTimeOffset, TimeWindowStart: null != this.timeWindowStart ? this.timeWindowStart.getTime() : null, TimeWindowStartUTCOffset: this.timeWindowStartOffset ?? this.arriveTimeOffset, WaitMinutes: this.waitDuration };
    return new f2({ geometry: this.geometry, attributes: e3, symbol: this.symbol, popupTemplate: this.popupTemplate });
  }
};
S2.fields = [{ name: "ObjectID", alias: "ObjectID", type: "esriFieldTypeOID", editable: false, nullable: false, domain: null }, { name: "ArrivalCurbApproach", alias: "Arrival Curb Approach", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true, domain: { type: "codedValue", name: "esriNACurbApproachType", codedValues: [{ name: "Either side", code: 0 }, { name: "From the right", code: 1 }, { name: "From the left", code: 2 }, { name: "Depart in the same direction", code: 3 }] } }, { name: "ArrivalTime", alias: "Arrival Time", type: "esriFieldTypeDate", length: 36, editable: true, nullable: true, visible: true }, { name: "ArrivalUTCOffset", alias: "Arrival Time: Offset from UTC in Minutes", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true }, { name: "CumulativeCosts", alias: "Cumulative Costs", type: "esriFieldTypeString", length: 1048576, editable: true, nullable: true, visible: false, domain: null }, { name: "CumulativeMeters", alias: "Cumulative Meters", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: true }, { name: "CumulativeMinutes", alias: "Cumulative Minutes", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: true }, { name: "CurbApproach", alias: "Curb Approach", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: false, domain: { type: "codedValue", name: "esriNACurbApproachType", codedValues: [{ name: "Either side", code: 0 }, { name: "From the right", code: 1 }, { name: "From the left", code: 2 }, { name: "Depart in the same direction", code: 3 }] } }, { name: "DepartureCurbApproach", alias: "Departure Curb Approach", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true, domain: { type: "codedValue", name: "esriNACurbApproachType", codedValues: [{ name: "Either side", code: 0 }, { name: "From the right", code: 1 }, { name: "From the left", code: 2 }, { name: "Depart in the same direction", code: 3 }] } }, { name: "DepartureTime", alias: "Departure Time", type: "esriFieldTypeDate", length: 36, editable: true, nullable: true, visible: true }, { name: "DepartureUTCOffset", alias: "Departure Time: Offset from UTC in Minutes", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true }, { name: "LateMinutes", alias: "Minutes Late", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: false }, { name: "LocationType", alias: "Location Type", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true, domain: { type: "codedValue", name: "esriNALocationType", codedValues: [{ name: "Stop", code: 0 }, { name: "Waypoint", code: 1 }] } }, { name: "Name", alias: "Name", type: "esriFieldTypeString", length: 255, editable: true, nullable: true, visible: true }, { name: "RouteName", alias: "Route Name", type: "esriFieldTypeString", length: 255, editable: true, nullable: true, visible: true }, { name: "Sequence", alias: "Sequence", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true }, { name: "ServiceCosts", alias: "Service Costs", type: "esriFieldTypeString", length: 1048576, editable: true, nullable: true, visible: false, domain: null }, { name: "ServiceMeters", alias: "Service Meters", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: false }, { name: "ServiceMinutes", alias: "Service Minutes", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: false }, { name: "Status", alias: "Status", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true, domain: { type: "codedValue", name: "esriNAObjectStatus", codedValues: [{ name: "OK", code: 0 }, { name: "Not Located on Network", code: 1 }, { name: "Network Unbuilt", code: 2 }, { name: "Prohibited Street", code: 3 }, { name: "Invalid Field Values", code: 4 }, { name: "Cannot Reach", code: 5 }, { name: "Time Window Violation", code: 6 }] } }, { name: "TimeWindowEnd", alias: "Time Window End", type: "esriFieldTypeDate", length: 36, editable: true, nullable: true, visible: false }, { name: "TimeWindowEndUTCOffset", alias: "Time Window End: Offset from UTC in Minutes", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true }, { name: "TimeWindowStart", alias: "Time Window Start", type: "esriFieldTypeDate", length: 36, editable: true, nullable: true, visible: false }, { name: "TimeWindowStartUTCOffset", alias: "Time Window Start: Offset from UTC in Minutes", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true }, { name: "WaitMinutes", alias: "Minutes Early", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: false }], S2.popupInfo = { title: "{Name}", fieldInfos: [{ fieldName: "Name", label: "Name", isEditable: true, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "RouteName", label: "Route Name", isEditable: true, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "Sequence", label: "Sequence", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "ArrivalTime", label: "Arrival Time", isEditable: true, tooltip: "", visible: true, format: { dateFormat: "shortDateShortTime24" }, stringFieldOption: "textbox" }, { fieldName: "ArrivalUTCOffset", label: "Arrival Time: Offset from UTC in Minutes", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "DepartureTime", label: "Departure Time", isEditable: true, tooltip: "", visible: true, format: { dateFormat: "shortDateShortTime24" }, stringFieldOption: "textbox" }, { fieldName: "DepartureUTCOffset", label: "Departure Time: Offset from UTC in Minutes", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "CurbApproach", label: "Curb Approach", isEditable: true, tooltip: "", visible: false, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "ArrivalCurbApproach", label: "Arrival Curb Approach", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "DepartureCurbApproach", label: "Departure Curb Approach", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "Status", label: "Status", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "LocationType", label: "Location Type", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "TimeWindowStart", label: "Time Window Start", isEditable: true, tooltip: "", visible: false, format: { dateFormat: "shortDateShortTime24" }, stringFieldOption: "textbox" }, { fieldName: "TimeWindowStartUTCOffset", label: "Time Window Start: Offset from UTC in Minutes", isEditable: false, tooltip: "", visible: false, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "TimeWindowEnd", label: "Time Window End", isEditable: true, tooltip: "", visible: false, format: { dateFormat: "shortDateShortTime24" }, stringFieldOption: "textbox" }, { fieldName: "TimeWindowEndUTCOffset", label: "Time Window End: Offset from UTC in Minutes", isEditable: false, tooltip: "", visible: false, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "ServiceMinutes", label: "Service Minutes", isEditable: true, tooltip: "", visible: false, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "ServiceMeters", label: "Service Meters", isEditable: true, tooltip: "", visible: false, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "ServiceCosts", label: "Service Costs", isEditable: true, tooltip: "", visible: false, stringFieldOption: "textbox" }, { fieldName: "CumulativeMinutes", label: "Cumulative Minutes", isEditable: false, tooltip: "", visible: true, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "CumulativeMeters", label: "Cumulative Meters", isEditable: false, tooltip: "", visible: true, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "CumulativeCosts", label: "Cumulative Costs", isEditable: true, tooltip: "", visible: false, stringFieldOption: "textbox" }, { fieldName: "LateMinutes", label: "Minutes Late", isEditable: false, tooltip: "", visible: false, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "WaitMinutes", label: "Minutes Early", isEditable: false, tooltip: "", visible: false, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }], description: null, showAttachments: false, mediaInfos: [] }, e([y({ type: u.apiValues, json: { read: { source: "attributes.ArrivalCurbApproach", reader: u.read } } })], S2.prototype, "arriveCurbApproach", void 0), e([y({ type: Date, json: { read: { source: "attributes.ArriveTimeUTC" } } })], S2.prototype, "arriveTime", void 0), e([y()], S2.prototype, "arriveTimeOffset", void 0), e([o("arriveTimeOffset", ["attributes.ArriveTime", "attributes.ArriveTimeUTC"])], S2.prototype, "readArriveTimeOffset", null), e([y({ json: { name: "attributes.Bearing", read: false, write: true } })], S2.prototype, "bearing", void 0), e([y({ json: { name: "attributes.BearingTol", read: false, write: true } })], S2.prototype, "bearingTol", void 0), e([y()], S2.prototype, "cumulativeCosts", void 0), e([o("cumulativeCosts", ["attributes"])], S2.prototype, "readCumulativeCosts", null), e([y()], S2.prototype, "cumulativeDistance", void 0), e([y()], S2.prototype, "cumulativeDuration", void 0), e([y({ type: u.apiValues, json: { name: "attributes.CurbApproach", read: { reader: u.read }, write: { writer: u.write } } })], S2.prototype, "curbApproach", void 0), e([y({ type: u.apiValues, json: { read: { source: "attributes.DepartCurbApproach", reader: u.read } } })], S2.prototype, "departCurbApproach", void 0), e([y({ type: Date, json: { read: { source: "attributes.DepartTimeUTC" } } })], S2.prototype, "departTime", void 0), e([y()], S2.prototype, "departTimeOffset", void 0), e([o("departTimeOffset", ["attributes.DepartTime", "attributes.DepartTimeUTC"])], S2.prototype, "readDepartTimeOffset", null), e([y({ json: { read: { source: "attributes.DistanceToNetworkInMeters" } } })], S2.prototype, "distanceToNetworkInMeters", void 0), e([y({ type: x, json: { write: true } })], S2.prototype, "geometry", void 0), e([y()], S2.prototype, "lateDuration", void 0), e([y({ type: h.apiValues, json: { name: "attributes.LocationType", read: { reader: h.read }, write: { writer: h.write } } })], S2.prototype, "locationType", void 0), e([y({ json: { name: "attributes.Name" } })], S2.prototype, "name", void 0), e([y({ json: { name: "attributes.NavLatency", read: false, write: true } })], S2.prototype, "navLatency", void 0), e([y({ json: { name: "attributes.ObjectID" } })], S2.prototype, "objectId", void 0), e([y({ type: P })], S2.prototype, "popupTemplate", void 0), e([y({ json: { read: { source: "attributes.PosAlong" } } })], S2.prototype, "posAlong", void 0), e([y({ json: { name: "attributes.RouteName" } })], S2.prototype, "routeName", void 0), e([y()], S2.prototype, "serviceCosts", void 0), e([o("serviceCosts", ["attributes"])], S2.prototype, "readServiceCosts", null), e([r("serviceCosts")], S2.prototype, "writeServiceCosts", null), e([y()], S2.prototype, "serviceDistance", void 0), e([y()], S2.prototype, "serviceDuration", void 0), e([y({ json: { name: "attributes.Sequence" } })], S2.prototype, "sequence", void 0), e([y({ type: v.apiValues, json: { read: { source: "attributes.SideOfEdge", reader: v.read } } })], S2.prototype, "sideOfEdge", void 0), e([y({ json: { read: { source: "attributes.SnapX" } } })], S2.prototype, "snapX", void 0), e([y({ json: { read: { source: "attributes.SnapY" } } })], S2.prototype, "snapY", void 0), e([y({ json: { read: { source: "attributes.SnapZ" } } })], S2.prototype, "snapZ", void 0), e([y({ json: { read: { source: "attributes.SourceID" } } })], S2.prototype, "sourceId", void 0), e([y({ json: { read: { source: "attributes.SourceOID" } } })], S2.prototype, "sourceOid", void 0), e([y({ type: p.apiValues, json: { read: { source: "attributes.Status", reader: p.read } } })], S2.prototype, "status", void 0), e([y({ types: j })], S2.prototype, "symbol", void 0), e([y({ type: Date, json: { name: "attributes.TimeWindowEnd" } })], S2.prototype, "timeWindowEnd", void 0), e([r("timeWindowEnd")], S2.prototype, "writeTimeWindowEnd", null), e([y()], S2.prototype, "timeWindowEndOffset", void 0), e([y({ type: Date, json: { name: "attributes.TimeWindowStart" } })], S2.prototype, "timeWindowStart", void 0), e([r("timeWindowStart")], S2.prototype, "writeTimeWindowStart", null), e([y()], S2.prototype, "timeWindowStartOffset", void 0), e([y({ readOnly: true, json: { read: false } })], S2.prototype, "type", void 0), e([y()], S2.prototype, "violations", void 0), e([o("violations", ["attributes"])], S2.prototype, "readViolations", null), e([y()], S2.prototype, "waitDuration", void 0), e([y()], S2.prototype, "wait", void 0), e([o("wait", ["attributes"])], S2.prototype, "readWait", null), S2 = C = e([a("esri.rest.support.Stop")], S2);
var O = S2;

// node_modules/@arcgis/core/rest/support/TravelMode.js
var b2 = class extends i(f) {
  constructor(t2) {
    super(t2), this.attributeParameterValues = null, this.description = null, this.distanceAttributeName = null, this.id = null, this.impedanceAttributeName = null, this.name = null, this.restrictionAttributeNames = null, this.simplificationTolerance = null, this.simplificationToleranceUnits = null, this.timeAttributeName = null, this.type = null, this.useHierarchy = null, this.uturnAtJunctions = null;
  }
  readId(t2, r4) {
    return r4.id ?? r4.itemId ?? null;
  }
  readRestrictionAttributes(t2, r4) {
    const { restrictionAttributeNames: e3 } = r4;
    return null == e3 ? null : e3.map((t3) => D.fromJSON(t3));
  }
  writeRestrictionAttributes(t2, r4, e3) {
    null != t2 && (r4[e3] = t2.map((t3) => D.toJSON(t3)));
  }
};
e([y({ type: [Object], json: { write: true } })], b2.prototype, "attributeParameterValues", void 0), e([y({ type: String, json: { write: true } })], b2.prototype, "description", void 0), e([o2(f3, { ignoreUnknown: false })], b2.prototype, "distanceAttributeName", void 0), e([y({ type: String, json: { write: true } })], b2.prototype, "id", void 0), e([o("id", ["id", "itemId"])], b2.prototype, "readId", null), e([o2(U, { ignoreUnknown: false })], b2.prototype, "impedanceAttributeName", void 0), e([y({ type: String, json: { write: true } })], b2.prototype, "name", void 0), e([y({ type: [String], json: { write: true } })], b2.prototype, "restrictionAttributeNames", void 0), e([o("restrictionAttributeNames")], b2.prototype, "readRestrictionAttributes", null), e([r("restrictionAttributeNames")], b2.prototype, "writeRestrictionAttributes", null), e([y({ type: Number, json: { write: { allowNull: true } } })], b2.prototype, "simplificationTolerance", void 0), e([o2(i3)], b2.prototype, "simplificationToleranceUnits", void 0), e([o2(y2, { ignoreUnknown: false })], b2.prototype, "timeAttributeName", void 0), e([o2(m)], b2.prototype, "type", void 0), e([y({ type: Boolean, json: { write: true } })], b2.prototype, "useHierarchy", void 0), e([o2(l)], b2.prototype, "uturnAtJunctions", void 0), b2 = e([a("esri.rest.support.TravelMode")], b2);
var j2 = b2;

export {
  i3 as i,
  r2 as r,
  s,
  a2 as a,
  o3 as o,
  l,
  u,
  p,
  v,
  A,
  T,
  N,
  g,
  k,
  y2 as y,
  U,
  D,
  S,
  w,
  R,
  b,
  j2 as j,
  r3 as r2,
  i4 as i2,
  e2 as e,
  s2,
  n2 as n,
  o4 as o2,
  O
};
//# sourceMappingURL=chunk-CEUXXR2I.js.map
