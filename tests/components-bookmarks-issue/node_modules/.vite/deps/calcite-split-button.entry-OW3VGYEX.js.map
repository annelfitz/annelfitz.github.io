{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/esm/src/components/split-button/resources.ts", "../../@esri/calcite-components/dist/esm/src/components/split-button/split-button.scss?tag=calcite-split-button&encapsulation=shadow", "../../@esri/calcite-components/dist/esm/src/components/split-button/split-button.tsx"],
  "sourcesContent": ["export const CSS = {\n  container: \"container\",\n  dividerContainer: \"divider-container\",\n  divider: \"divider\",\n  widthAuto: \"width-auto\",\n  widthHalf: \"width-half\",\n  widthFull: \"width-full\",\n};\n", ":host {\n  @apply inline-block;\n}\n\n:host([width=\"auto\"]) {\n  @apply w-auto;\n}\n\n:host([width=\"half\"]) {\n  @apply w-2/4;\n}\n\n:host([width=\"full\"]) {\n  @apply w-full;\n}\n\n:host {\n  &:host([kind=\"brand\"]) {\n    --calcite-split-button-background: theme(\"colors.brand\");\n    --calcite-split-button-divider: theme(\"colors.background.foreground.1\");\n  }\n  &:host([kind=\"danger\"]) {\n    --calcite-split-button-background: theme(\"colors.danger\");\n    --calcite-split-button-divider: theme(\"colors.background.foreground.1\");\n  }\n  &:host([kind=\"neutral\"]) {\n    --calcite-split-button-background: theme(\"colors.background.foreground.3\");\n    --calcite-split-button-divider: theme(\"colors.color.1\");\n  }\n  &:host([kind=\"inverse\"]) {\n    --calcite-split-button-background: var(--calcite-color-inverse);\n    --calcite-split-button-divider: theme(\"colors.background.foreground.1\");\n  }\n}\n\n:host([appearance=\"transparent\"]) {\n  &:host([kind=\"brand\"]) {\n    --calcite-split-button-divider: theme(\"colors.brand\");\n    --calcite-split-button-background: transparent;\n  }\n  &:host([kind=\"danger\"]) {\n    --calcite-split-button-divider: theme(\"colors.danger\");\n    --calcite-split-button-background: transparent;\n  }\n  &:host([kind=\"neutral\"]) {\n    --calcite-split-button-divider: theme(\"colors.color.1\");\n    --calcite-split-button-background: transparent;\n  }\n  &:host([kind=\"inverse\"]) {\n    --calcite-split-button-divider: theme(\"colors.background.foreground.1\");\n    --calcite-split-button-background: transparent;\n  }\n}\n\n:host([appearance=\"outline\"]) {\n  --calcite-split-button-background: transparent;\n}\n\n:host([appearance=\"outline-fill\"]) {\n  --calcite-split-button-background: theme(\"colors.background.foreground.1\");\n}\n\n:host([appearance=\"outline\"]),\n:host([appearance=\"outline-fill\"]) {\n  &:host([kind=\"brand\"]) {\n    --calcite-split-button-divider: theme(\"colors.brand\");\n  }\n  &:host([kind=\"danger\"]) {\n    --calcite-split-button-divider: theme(\"colors.danger\");\n  }\n  &:host([kind=\"neutral\"]) {\n    --calcite-split-button-divider: theme(\"borderColor.color.1\");\n    --calcite-split-button-background: theme(\"borderColor.color.1\");\n  }\n  &:host([kind=\"inverse\"]) {\n    --calcite-split-button-divider: var(--calcite-color-inverse);\n  }\n}\n\n.container {\n  @apply flex items-stretch;\n  > calcite-dropdown > calcite-button {\n    @apply h-full align-top;\n  }\n}\n\n.divider-container {\n  @apply transition-default flex w-px items-stretch;\n  background-color: var(--calcite-split-button-background);\n}\n\n.divider {\n  @apply my-1 inline-block w-px;\n  background-color: var(--calcite-split-button-divider);\n}\n\n:host([appearance=\"outline-fill\"]),\n:host([appearance=\"outline\"]) {\n  .divider-container {\n    border-block: 1px solid var(--calcite-split-button-divider);\n  }\n  &:hover .divider-container {\n    background-color: var(--calcite-split-button-divider);\n  }\n}\n\n:host([appearance=\"outline-fill\"]:hover),\n:host([appearance=\"outline\"]:hover) {\n  .divider-container {\n    background-color: var(--calcite-split-button-divider);\n  }\n}\n\n:host([appearance=\"outline-fill\"]:focus-within),\n:host([appearance=\"outline\"]:focus-within) {\n  &:host([kind=\"brand\"]) {\n    --calcite-split-button-divider: theme(\"colors.brand-press\");\n  }\n  &:host([kind=\"danger\"]) {\n    --calcite-split-button-divider: theme(\"colors.danger-press\");\n  }\n  .divider-container {\n    background-color: var(--calcite-split-button-divider);\n  }\n}\n\n@include disabled() {\n  .divider-container {\n    @apply opacity-disabled;\n  }\n\n  calcite-dropdown > calcite-button {\n    @apply pointer-events-none;\n  }\n}\n\n@include base-component();\n", "import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Method,\n  Prop,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { OverlayPositioning } from \"../../utils/floating-ui\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { DropdownIconType } from \"../button/interfaces\";\nimport { Appearance, FlipContext, Kind, Scale, Width } from \"../interfaces\";\nimport { CSS } from \"./resources\";\n\n/**\n * @slot - A slot for adding `calcite-dropdown` content.\n */\n@Component({\n  tag: \"calcite-split-button\",\n  styleUrl: \"split-button.scss\",\n  shadow: {\n    delegatesFocus: true,\n  },\n})\nexport class SplitButton implements InteractiveComponent, LoadableComponent {\n  //--------------------------------------------------------------------------\n  //\n  //  Public Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** Specifies the appearance style of the component. */\n  @Prop({ reflect: true }) appearance: Extract<\n    \"outline\" | \"outline-fill\" | \"solid\" | \"transparent\",\n    Appearance\n  > = \"solid\";\n\n  /** Specifies the kind of the component, which will apply to border and background, if applicable. */\n  @Prop({ reflect: true }) kind: Extract<\"brand\" | \"danger\" | \"inverse\" | \"neutral\", Kind> =\n    \"brand\";\n\n  /** When `true`, interaction is prevented and the component is displayed with lower opacity. */\n  @Prop({ reflect: true }) disabled = false;\n\n  @Watch(\"disabled\")\n  handleDisabledChange(value: boolean): void {\n    if (!value) {\n      this.active = false;\n    }\n  }\n\n  /**\n   * When `true`, the component is active.\n   *\n   * @internal\n   */\n  @Prop({ mutable: true, reflect: true }) active = false;\n\n  @Watch(\"active\")\n  activeHandler(): void {\n    if (this.disabled) {\n      this.active = false;\n    }\n  }\n\n  /** Specifies the icon used for the dropdown menu. */\n  @Prop({ reflect: true }) dropdownIconType: DropdownIconType = \"chevron\";\n\n  /** Accessible name for the dropdown menu. */\n  @Prop({ reflect: true }) dropdownLabel: string;\n\n  /**\n    When `true`, a busy indicator is displayed on the primary button.\n   */\n  @Prop({ reflect: true }) loading = false;\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  /** Specifies an icon to display at the end of the primary button. */\n  @Prop({ reflect: true }) primaryIconEnd: string;\n\n  /**  Displays the `primaryIconStart` and/or `primaryIconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) primaryIconFlipRtl: FlipContext;\n\n  /** Specifies an icon to display at the start of the primary button. */\n  @Prop({ reflect: true }) primaryIconStart: string;\n\n  /** Accessible name for the primary button. */\n  @Prop({ reflect: true }) primaryLabel: string;\n\n  /** Text displayed in the primary button. */\n  @Prop({ reflect: true }) primaryText: string;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the width of the component. */\n  @Prop({ reflect: true }) width: Width = \"auto\";\n\n  /**\n   * Fires when the primary button is clicked.\n   */\n  @Event({ cancelable: false })\n  calciteSplitButtonPrimaryClick: EventEmitter<void>;\n\n  /**\n   * Fires when the dropdown menu is clicked.\n   */\n  @Event({ cancelable: false })\n  calciteSplitButtonSecondaryClick: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component's first focusable element. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    this.el.focus();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteSplitButtonElement;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectInteractive(this);\n  }\n\n  componentWillLoad(): void {\n    setUpLoadableComponent(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectInteractive(this);\n  }\n\n  render(): VNode {\n    const buttonWidth = this.width === \"auto\" ? \"auto\" : \"full\";\n\n    return (\n      <InteractiveContainer disabled={this.disabled}>\n        <div class={CSS.container}>\n          <calcite-button\n            appearance={this.appearance}\n            disabled={this.disabled}\n            icon-end={this.primaryIconEnd ? this.primaryIconEnd : null}\n            icon-start={this.primaryIconStart ? this.primaryIconStart : null}\n            iconFlipRtl={this.primaryIconFlipRtl ? this.primaryIconFlipRtl : null}\n            kind={this.kind}\n            label={this.primaryLabel}\n            loading={this.loading}\n            onClick={this.calciteSplitButtonPrimaryClickHandler}\n            scale={this.scale}\n            splitChild={\"primary\"}\n            type=\"button\"\n            width={buttonWidth}\n          >\n            {this.primaryText}\n          </calcite-button>\n          <div class={CSS.dividerContainer}>\n            <div class={CSS.divider} />\n          </div>\n          <calcite-dropdown\n            disabled={this.disabled}\n            onClick={this.calciteSplitButtonSecondaryClickHandler}\n            open={this.active}\n            overlayPositioning={this.overlayPositioning}\n            placement=\"bottom-end\"\n            scale={this.scale}\n            width-scale={this.scale}\n          >\n            <calcite-button\n              appearance={this.appearance}\n              disabled={this.disabled}\n              icon-start={this.dropdownIcon}\n              kind={this.kind}\n              label={this.dropdownLabel}\n              scale={this.scale}\n              slot=\"trigger\"\n              splitChild={\"secondary\"}\n              type=\"button\"\n            />\n            <slot />\n          </calcite-dropdown>\n        </div>\n      </InteractiveContainer>\n    );\n  }\n\n  private calciteSplitButtonPrimaryClickHandler = (): CustomEvent =>\n    this.calciteSplitButtonPrimaryClick.emit();\n\n  private calciteSplitButtonSecondaryClickHandler = (): CustomEvent =>\n    this.calciteSplitButtonSecondaryClick.emit();\n\n  private get dropdownIcon(): string {\n    return this.dropdownIconType === \"chevron\"\n      ? \"chevronDown\"\n      : this.dropdownIconType === \"caret\"\n        ? \"caretDown\"\n        : this.dropdownIconType === \"ellipsis\"\n          ? \"ellipsis\"\n          : \"handle-vertical\";\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAO,IAAM,MAAM;EACjB,WAAW;EACX,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,WAAW;EACX,WAAW;;ACNb,IAAM,iBAAiB;ICuCV,cAAW,MAAA;;;;;AAmMd,SAAA,wCAAwC,MAC9C,KAAK,+BAA+B,KAAI;AAElC,SAAA,0CAA0C,MAChD,KAAK,iCAAiC,KAAI;sBA5LxC;gBAIF;oBAGkC;kBAca;4BAUa;;mBAQ3B;8BAU+B;;;;;;iBAkB1B;iBAGA;;EA5DxC,qBAAqB,OAAc;AACjC,QAAI,CAAC,OAAO;AACV,WAAK,SAAS;;;EAYlB,gBAAa;AACX,QAAI,KAAK,UAAU;AACjB,WAAK,SAAS;;;;;;;;;EAkElB,MAAM,WAAQ;AACZ,UAAM,mBAAmB,IAAI;AAC7B,SAAK,GAAG,MAAK;;;;;;;EAiBf,oBAAiB;AACf,uBAAmB,IAAI;;EAGzB,oBAAiB;AACf,2BAAuB,IAAI;;EAG7B,mBAAgB;AACd,uBAAmB,IAAI;;EAGzB,qBAAkB;AAChB,0BAAsB,IAAI;;EAG5B,uBAAoB;AAClB,0BAAsB,IAAI;;EAG5B,SAAM;AACJ,UAAM,cAAc,KAAK,UAAU,SAAS,SAAS;AAErD,WACE,EAAC,sBAAoB,EAAC,UAAU,KAAK,SAAQ,GAC3C,EAAA,OAAA,EAAK,OAAO,IAAI,UAAS,GACvB,EAAA,kBAAA,EACE,YAAY,KAAK,YACjB,UAAU,KAAK,UAAQ,YACb,KAAK,iBAAiB,KAAK,iBAAiB,MAAI,cAC9C,KAAK,mBAAmB,KAAK,mBAAmB,MAC5D,aAAa,KAAK,qBAAqB,KAAK,qBAAqB,MACjE,MAAM,KAAK,MACX,OAAO,KAAK,cACZ,SAAS,KAAK,SACd,SAAS,KAAK,uCACd,OAAO,KAAK,OACZ,YAAY,WACZ,MAAK,UACL,OAAO,YAAW,GAEjB,KAAK,WAAW,GAEnB,EAAA,OAAA,EAAK,OAAO,IAAI,iBAAgB,GAC9B,EAAA,OAAA,EAAK,OAAO,IAAI,QAAO,CAAA,CAAI,GAE7B,EAAA,oBAAA,EACE,UAAU,KAAK,UACf,SAAS,KAAK,yCACd,MAAM,KAAK,QACX,oBAAoB,KAAK,oBACzB,WAAU,cACV,OAAO,KAAK,OAAK,eACJ,KAAK,MAAK,GAEvB,EAAA,kBAAA,EACE,YAAY,KAAK,YACjB,UAAU,KAAK,UAAQ,cACX,KAAK,cACjB,MAAM,KAAK,MACX,OAAO,KAAK,eACZ,OAAO,KAAK,OACZ,MAAK,WACL,YAAY,aACZ,MAAK,SAAQ,CAAA,GAEf,EAAA,QAAA,IAAA,CAAQ,CACS,CACf;;EAWZ,IAAY,eAAY;AACtB,WAAO,KAAK,qBAAqB,YAC7B,gBACA,KAAK,qBAAqB,UACxB,cACA,KAAK,qBAAqB,aACxB,aACA;;;;;;;;;;;;;;;;",
  "names": []
}
