import {
  C
} from "./chunk-DXMBDX2I.js";
import {
  a,
  n2 as n,
  s
} from "./chunk-7RBRCL6S.js";

// node_modules/@arcgis/core/layers/support/labelingInfo.js
var n2 = () => n.getLogger("esri.layers.support.labelingInfo");
var l = /\[([^\[\]]+)\]/gi;
function i(e, r, o) {
  return e ? e.map((e2) => {
    var _a;
    const n3 = new C();
    if (n3.read(e2, o), n3.labelExpression) {
      const e3 = r.fields || ((_a = r.layerDefinition) == null ? void 0 : _a.fields) || this.fields;
      n3.labelExpression = n3.labelExpression.replaceAll(l, (r2, o2) => `[${s2(o2, e3)}]`);
    }
    return n3;
  }) : null;
}
function s2(e, r) {
  if (!r)
    return e;
  const o = e.toLowerCase();
  for (let t = 0; t < r.length; t++) {
    const e2 = r[t].name;
    if (e2.toLowerCase() === o)
      return e2;
  }
  return e;
}
var a2 = { esriGeometryPoint: ["above-right", "above-center", "above-left", "center-center", "center-left", "center-right", "below-center", "below-left", "below-right"], esriGeometryPolygon: ["always-horizontal"], esriGeometryPolyline: ["center-along"], esriGeometryMultipoint: null, esriGeometryEnvelope: null };
function c(e, o) {
  const t = a(e);
  return t.some((e2) => f(e2, o)) ? [] : t;
}
function f(r, o) {
  const t = r.labelPlacement, l2 = a2[o];
  if (!r.symbol)
    return n2().warn("No ILabelClass symbol specified."), true;
  if (!l2)
    return n2().error(new s("labeling:unsupported-geometry-type", `Unable to create labels for layer, geometry type '${o}' is not supported`)), true;
  if (!l2.includes(t)) {
    const e = l2[0];
    t && n2().warn(`Found invalid label placement type ${t} for ${o}. Defaulting to ${e}`), r.labelPlacement = e;
  }
  return false;
}

export {
  i,
  c
};
//# sourceMappingURL=chunk-4IKPTZ53.js.map
