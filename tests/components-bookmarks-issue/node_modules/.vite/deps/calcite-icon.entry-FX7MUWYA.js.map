{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/esm/src/components/icon/resources.ts", "../../@esri/calcite-components/dist/esm/src/components/icon/utils.ts", "../../@esri/calcite-components/dist/esm/src/components/icon/icon.scss?tag=calcite-icon&encapsulation=shadow", "../../@esri/calcite-components/dist/esm/src/components/icon/icon.tsx"],
  "sourcesContent": ["export const CSS = {\n  icon: \"icon\",\n  flipRtl: \"flip-rtl\",\n};\n", "import { CalciteIconPath } from \"@esri/calcite-ui-icons\";\nimport { getAssetPath } from \"@stencil/core\";\nimport { Scale } from \"../interfaces\";\n\nexport interface FetchIconProps {\n  icon: string;\n  scale: Scale;\n}\n\n/**\n * Icon data cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const iconCache: Record<string, CalciteIconPath> = {};\n\n/**\n * Icon request cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const requestCache: Record<string, Promise<CalciteIconPath>> = {};\n\nexport const scaleToPx: Record<Scale, number> = {\n  s: 16,\n  m: 24,\n  l: 32,\n};\n\nexport async function fetchIcon({ icon, scale }: FetchIconProps): Promise<CalciteIconPath> {\n  const size = scaleToPx[scale];\n  const name = normalizeIconName(icon);\n  const filled = name.charAt(name.length - 1) === \"F\";\n  const iconName = filled ? name.substring(0, name.length - 1) : name;\n  const id = `${iconName}${size}${filled ? \"F\" : \"\"}`;\n\n  if (iconCache[id]) {\n    return iconCache[id];\n  }\n  if (!requestCache[id]) {\n    requestCache[id] = fetch(getAssetPath(`./assets/icon/${id}.json`))\n      .then((resp) => resp.json())\n      .catch(() => {\n        console.error(`\"${id}\" is not a valid calcite-ui-icon name`);\n        return \"\";\n      });\n  }\n\n  const path = await requestCache[id];\n  iconCache[id] = path;\n\n  return path;\n}\n\n/**\n * Normalize the icon name to match the path data module exports.\n * Exported for testing purposes.\n *\n * @param name â€“ an icon name that can be either kebab or camel-cased\n * @private\n */\nexport function normalizeIconName(name: string): string {\n  const numberLeadingName = !isNaN(Number(name.charAt(0)));\n  const parts = name.split(\"-\");\n  const kebabCased = parts.length > 0;\n\n  if (kebabCased) {\n    const firstNonDigitInPartPattern = /[a-z]/i;\n\n    name = parts\n      .map((part, partIndex) => {\n        return part.replace(firstNonDigitInPartPattern, function replacer(match, offset) {\n          const isFirstCharInName = partIndex === 0 && offset === 0;\n\n          if (isFirstCharInName) {\n            return match;\n          }\n\n          return match.toUpperCase();\n        });\n      })\n      .join(\"\");\n  }\n\n  return numberLeadingName ? `i${name}` : name;\n}\n", "/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-ui-icon-color: The component's color. Defaults to `currentColor`.\n */\n\n:host {\n  @apply text-color-icon inline-flex;\n}\n\n$icon-size-s: 16px;\n$icon-size-m: 24px;\n$icon-size-l: 32px;\n\n:host([scale=\"s\"]) {\n  inline-size: $icon-size-s;\n  block-size: $icon-size-s;\n  min-inline-size: $icon-size-s;\n  min-block-size: $icon-size-s;\n}\n\n:host([scale=\"m\"]) {\n  inline-size: $icon-size-m;\n  block-size: $icon-size-m;\n  min-inline-size: $icon-size-m;\n  min-block-size: $icon-size-m;\n}\n\n:host([scale=\"l\"]) {\n  inline-size: $icon-size-l;\n  block-size: $icon-size-l;\n  min-inline-size: $icon-size-l;\n  min-block-size: $icon-size-l;\n}\n\n.flip-rtl {\n  transform: scaleX(-1);\n}\n\n.svg {\n  @apply block;\n}\n\n@include base-component();\n", "import { CalciteIconPath, CalciteMultiPathEntry } from \"@esri/calcite-ui-icons\";\nimport { Build, Component, Element, h, Host, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { getElementDir, toAriaBoolean } from \"../../utils/dom\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Scale } from \"../interfaces\";\nimport { CSS } from \"./resources\";\nimport { fetchIcon, scaleToPx } from \"./utils\";\n\n@Component({\n  tag: \"calcite-icon\",\n  styleUrl: \"icon.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Icon {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Displays a specific icon.\n   *\n   * @see [Icons](https://esri.github.io/calcite-ui-icons)\n   */\n  @Prop({\n    reflect: true,\n  })\n  icon: string = null;\n\n  /**\n   * When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).\n   */\n  @Prop({\n    reflect: true,\n  })\n  flipRtl = false;\n\n  /**\n   * Specifies the size of the component.\n   */\n  @Prop({\n    reflect: true,\n  })\n  scale: Scale = \"m\";\n\n  /**\n   * Accessible name for the component.\n   *\n   * It is recommended to set this value if your icon is semantic.\n   */\n  @Prop()\n  textLabel: string;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.waitUntilVisible(() => {\n      this.visible = true;\n      this.loadIconPathData();\n    });\n  }\n\n  disconnectedCallback(): void {\n    this.intersectionObserver?.disconnect();\n    this.intersectionObserver = null;\n  }\n\n  async componentWillLoad(): Promise<void> {\n    this.loadIconPathData();\n  }\n\n  render(): VNode {\n    const { el, flipRtl, pathData, scale, textLabel } = this;\n    const dir = getElementDir(el);\n    const size = scaleToPx[scale];\n    const semantic = !!textLabel;\n    const paths = [].concat(pathData || \"\");\n    return (\n      <Host\n        aria-hidden={toAriaBoolean(!semantic)}\n        aria-label={semantic ? textLabel : null}\n        role={semantic ? \"img\" : null}\n      >\n        <svg\n          aria-hidden=\"true\"\n          class={{\n            [CSS.flipRtl]: dir === \"rtl\" && flipRtl,\n            svg: true,\n          }}\n          fill=\"currentColor\"\n          height=\"100%\"\n          viewBox={`0 0 ${size} ${size}`}\n          width=\"100%\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          {paths.map((path: string | CalciteMultiPathEntry) =>\n            typeof path === \"string\" ? (\n              <path d={path} />\n            ) : (\n              <path d={path.d} opacity={\"opacity\" in path ? path.opacity : 1} />\n            ),\n          )}\n        </svg>\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteIconElement;\n\n  private intersectionObserver: IntersectionObserver;\n\n  @State()\n  private pathData: CalciteIconPath;\n\n  @State()\n  private visible = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  @Watch(\"icon\")\n  @Watch(\"scale\")\n  private async loadIconPathData(): Promise<void> {\n    const { icon, scale, visible } = this;\n\n    if (!Build.isBrowser || !icon || !visible) {\n      return;\n    }\n\n    const pathData = await fetchIcon({ icon, scale });\n\n    // While the fetchIcon method is awaiting response, the icon requested can change. This check is to verify the response received belongs to the current icon.\n    if (icon !== this.icon) {\n      return;\n    }\n\n    this.pathData = pathData;\n  }\n\n  private waitUntilVisible(callback: () => void): void {\n    this.intersectionObserver = createObserver(\n      \"intersection\",\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            this.intersectionObserver.disconnect();\n            this.intersectionObserver = null;\n            callback();\n          }\n        });\n      },\n      { rootMargin: \"50px\" },\n    );\n\n    if (!this.intersectionObserver) {\n      callback();\n      return;\n    }\n\n    this.intersectionObserver.observe(this.el);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
