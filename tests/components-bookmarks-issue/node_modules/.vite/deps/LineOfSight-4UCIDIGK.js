import {
  _
} from "./chunk-QNRX3HFY.js";
import {
  e as e3
} from "./chunk-EAAEPSBY.js";
import {
  v
} from "./chunk-KP6UWH5T.js";
import {
  f as f2,
  u as u2
} from "./chunk-NN47JW6M.js";
import "./chunk-VXM3PR7E.js";
import "./chunk-VE57JPH4.js";
import "./chunk-XDDNM6BM.js";
import {
  $,
  h,
  u
} from "./chunk-SA77Z3WI.js";
import "./chunk-FLBJ53KN.js";
import {
  f
} from "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-CQFVWMFK.js";
import "./chunk-USOPZ2Q6.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import {
  n as n2,
  t
} from "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import {
  D,
  e2,
  r
} from "./chunk-RGCWZ2KZ.js";
import {
  n
} from "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import "./chunk-2SDMYJDE.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import {
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  A,
  C,
  d as d2
} from "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  d,
  o
} from "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/widgets/LineOfSight/LineOfSightTarget.js
var p = class extends S {
  constructor(o2) {
    super(o2), this.location = null, this.intersectedLocation = null, this.intersectedGraphic = null, this.visible = void 0;
  }
};
e([y({ type: x })], p.prototype, "location", void 0), e([y({ type: x })], p.prototype, "intersectedLocation", void 0), e([y({ type: f })], p.prototype, "intersectedGraphic", void 0), e([y({ type: Boolean })], p.prototype, "visible", void 0), p = e([a("esri.widgets.LineOfSight.LineOfSightTarget")], p);
var c = p;

// node_modules/@arcgis/core/widgets/LineOfSight/LineOfSightViewModel.js
var u3 = V.ofType(c);
var f3 = class extends _ {
  constructor(e4) {
    super(e4), this.analysis = null, this.supportedViewType = "3d", this.unsupportedErrorMessage = "LineOfSightViewModel is only supported in 3D views.", this._vmTargetsToConnection = /* @__PURE__ */ new Map(), this._analysisTargetsToConnection = /* @__PURE__ */ new Map();
  }
  initialize() {
    this.addHandles([this.targets.on("after-add", (e4) => this._onViewModelTargetAdded(e4.item)), this.targets.on("after-remove", (e4) => this._onViewModelTargetRemoved(e4.item)), d2(() => this.analysis, (e4) => this._onAnalysisChange(e4), A)]);
  }
  destroy() {
    this._analysisTargetsToConnection.forEach((e4) => e4.remove());
  }
  get state() {
    return this.disabled || !this.ready ? "disabled" : null == this.tool ? "ready" : this.tool.state;
  }
  get observer() {
    const { observer: e4 } = this.analysis;
    return null == (e4 == null ? void 0 : e4.position) ? null : this._convertAnalysisPointToAbsoluteHeight(e4.position, e4.elevationInfo);
  }
  set observer(e4) {
    let t2 = null;
    e4 && (t2 = e4.clone(), t2.hasZ || (t2.z = 0)), this.analysis.observer = new u2({ position: t2 });
  }
  get targets() {
    return this._get("targets") || new u3();
  }
  set targets(e4) {
    this._set("targets", n2(e4, this.targets, u3));
  }
  continue() {
    null != this.tool && this.tool.continue();
  }
  stop() {
    null != this.tool && this.tool.stop();
  }
  get testInfo() {
    return { analysisView: this.analysisView, getAnalysisTargetFromViewModelTarget: (e4) => {
      var _a;
      return (_a = this._vmTargetsToConnection.get(e4)) == null ? void 0 : _a.analysisTarget;
    } };
  }
  constructAnalysis() {
    return new v();
  }
  async onConnectToAnalysisView(e4) {
    this.addHandles([e4.on("result-changed", (e5) => {
      const t2 = this._analysisTargetsToConnection.get(e5.target);
      t2 && (null != e5.result ? (t2.viewModelTarget.intersectedGraphic = e5.result.intersectedGraphic, t2.viewModelTarget.intersectedLocation = e5.result.intersectedLocation, t2.viewModelTarget.visible = e5.result.visible) : (t2.viewModelTarget.intersectedGraphic = null, t2.viewModelTarget.intersectedLocation = null, t2.viewModelTarget.visible = void 0));
    })], "view");
  }
  onDisconnectFromAnalysisView() {
    this.removeHandles("view");
  }
  _onViewModelTargetAdded(e4) {
    if (this._vmTargetsToConnection.get(e4))
      return;
    const t2 = new f2({ position: e4.location });
    this._connectViewModelWithAnalysisTarget(e4, t2), this.analysis.targets.add(t2);
  }
  _onViewModelTargetRemoved(e4) {
    const t2 = this._vmTargetsToConnection.get(e4);
    t2 && (t2.remove(), this.analysis.targets.remove(t2.analysisTarget));
  }
  _onAnalysisTargetAdded(e4) {
    if (this._analysisTargetsToConnection.get(e4))
      return;
    const { position: t2 } = e4, s = new c({ location: t2 ? this._convertAnalysisPointToAbsoluteHeight(t2, e4.elevationInfo) : null });
    this._connectViewModelWithAnalysisTarget(s, e4), this.targets.add(s);
  }
  _onAnalysisTargetRemoved(e4) {
    const t2 = this._analysisTargetsToConnection.get(e4);
    t2 && (t2.remove(), this.targets.remove(t2.viewModelTarget));
  }
  _connectViewModelWithAnalysisTarget(e4, t2) {
    let s = false;
    const o2 = o([d2(() => ({ position: t2.position, elevationInfo: t2.elevationInfo }), ({ position: t3, elevationInfo: o3 }) => {
      s || (s = true, e4.location = t3 ? this._convertAnalysisPointToAbsoluteHeight(t3, o3) : null, s = false);
    }, C), d2(() => e4.location, (e5) => {
      if (!s) {
        s = true;
        let o3 = null;
        e5 && (o3 = e5.clone(), o3.hasZ || (o3.z = 0)), t2.position = o3, t2.elevationInfo = null, s = false;
      }
    }, C)]), i = { analysisTarget: t2, viewModelTarget: e4, remove: () => {
      o2.remove(), this._vmTargetsToConnection.delete(e4), this._analysisTargetsToConnection.delete(t2);
    } };
    this._vmTargetsToConnection.set(e4, i), this._analysisTargetsToConnection.set(t2, i);
  }
  _onAnalysisChange(e4) {
    const t2 = "analysis";
    this.removeHandles(t2), this.addHandles([this.analysis.targets.on("after-add", (e5) => this._onAnalysisTargetAdded(e5.item)), this.analysis.targets.on("after-remove", (e5) => this._onAnalysisTargetRemoved(e5.item))], t2), this.targets.removeAll(), e4.targets.forEach((e5) => {
      this._onAnalysisTargetAdded(e5);
    });
  }
  _convertAnalysisPointToAbsoluteHeight(e4, t2) {
    const s = e4.clone();
    if (null != this.view) {
      const o2 = u(e4.hasZ, t2);
      s.z = h(this.view, e4, o2, $);
    }
    return s;
  }
};
e([y({ type: v })], f3.prototype, "analysis", void 0), e([y({ readOnly: true })], f3.prototype, "state", null), e([y()], f3.prototype, "observer", null), e([y({ type: u3, cast: t, nonNullable: true })], f3.prototype, "targets", null), f3 = e([a("esri.widgets.LineOfSight.LineOfSightViewModel")], f3);
var w = f3;

// node_modules/@arcgis/core/widgets/LineOfSight.js
var d3 = "esri-line-of-sight";
var p2 = { base: d3, actions: `${d3}__actions`, container: `${d3}__container`, error: `${d3}__error`, hint: `${d3}__hint`, hintText: `${d3}__hint-text`, newAnalysisButton: `${d3}__new-analysis-button` };
var c2 = { newAnalysisButton: `${d3}__new-button`, continueButton: `${d3}__continue-button`, doneButton: `${d3}__done-button` };
var h2 = class extends D {
  constructor(e4, s) {
    super(e4, s), this.messages = null, this.viewModel = new w(), this._onNewAnalysis = () => {
      d(this.viewModel.start());
    }, this._onDone = () => {
      this.viewModel.stop();
    }, this._onContinue = () => {
      this.viewModel.continue();
    };
  }
  loadDependencies() {
    return r({ button: () => import("./calcite-button-V4T5NPWY.js") });
  }
  get active() {
    return this.viewModel.active;
  }
  get analysis() {
    return this.viewModel.analysis;
  }
  set analysis(e4) {
    this.viewModel.analysis = e4;
  }
  get icon() {
    return "line-of-sight";
  }
  set icon(e4) {
    this._overrideIfSome("icon", e4);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e4) {
    this._overrideIfSome("label", e4);
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e4) {
    this.viewModel.view = e4;
  }
  get visible() {
    return this.viewModel.visible;
  }
  set visible(e4) {
    this.viewModel.visible = e4;
  }
  render() {
    return n("div", { class: this.classes(p2.base, e3.widget, e3.panel), role: "presentation" }, this._renderContainerNode());
  }
  _renderContainerNode() {
    if (!this.visible)
      return null;
    if (!this.viewModel.supported)
      return this._renderUnsupportedMessage();
    let e4 = null;
    const t2 = [this._renderNewAnalysisButton()];
    return "creating" === this.viewModel.state ? (e4 = this._renderHint(), t2.unshift(this._renderDoneButton())) : "created" === this.viewModel.state && this.viewModel.targets.length > 0 && t2.unshift(this._renderContinueButton()), n("div", { class: p2.container }, e4, n("div", { class: p2.actions }, t2));
  }
  _renderUnsupportedMessage() {
    return n("div", { class: p2.error, key: "esri-line-of-sight__unsupported" }, n("p", null, this.messages.unsupported));
  }
  _renderHint() {
    return n("div", { class: p2.hint, key: "esri-line-of-sight__hint" }, n("p", { class: p2.hintText }, this.messages.hint));
  }
  _renderNewAnalysisButton() {
    return this._renderButton({ className: p2.newAnalysisButton, id: c2.newAnalysisButton, label: this.messages.newAnalysis, onClick: this._onNewAnalysis, primary: true });
  }
  _renderDoneButton() {
    return this._renderButton({ id: c2.doneButton, label: this.messages.done, onClick: this._onDone, primary: false });
  }
  _renderContinueButton() {
    return this._renderButton({ id: c2.newAnalysisButton, label: this.messages.continueAnalysis, onClick: this._onContinue, primary: false });
  }
  _renderButton({ className: e4, id: t2, label: s, onClick: i, primary: n3 }) {
    const o2 = "disabled" === this.viewModel.state;
    return n("calcite-button", { appearance: n3 ? "solid" : "outline-fill", class: e4, "data-id": t2, disabled: o2, key: t2, onclick: i }, s);
  }
  get test() {
    return { IDS: c2 };
  }
};
e([y()], h2.prototype, "active", null), e([y({ constructOnly: true, nonNullable: true })], h2.prototype, "analysis", null), e([y()], h2.prototype, "icon", null), e([y()], h2.prototype, "label", null), e([y(), e2("esri/widgets/LineOfSight/t9n/LineOfSight")], h2.prototype, "messages", void 0), e([y()], h2.prototype, "view", null), e([y({ type: w })], h2.prototype, "viewModel", void 0), e([y()], h2.prototype, "visible", null), h2 = e([a("esri.widgets.LineOfSight")], h2);
var m = h2;
export {
  m as default
};
//# sourceMappingURL=LineOfSight-4UCIDIGK.js.map
