import {
  $,
  v
} from "./chunk-KMK4SMGY.js";
import {
  f
} from "./chunk-QYC3GV65.js";
import {
  y
} from "./chunk-J7AMTUNG.js";
import {
  I
} from "./chunk-2ICUS4HL.js";
import {
  C,
  G,
  w,
  z
} from "./chunk-UWQ3OYA5.js";
import {
  Wt
} from "./chunk-SAYWXQVM.js";
import {
  n2 as n,
  s
} from "./chunk-7RBRCL6S.js";

// node_modules/@arcgis/core/layers/graphics/applyEditsUtils.js
async function p(t, e, a) {
  const { geometry: s2 } = e, n2 = { ...e.attributes };
  if (null != a && "mesh" === (s2 == null ? void 0 : s2.type)) {
    const { transformFieldRoles: e2 } = a, { origin: d, spatialReference: c, transform: p2, vertexSpace: m2 } = s2, f3 = "local" === m2.type, g2 = t.spatialReference, b2 = g2.isGeographic, R2 = G(g2, c), y3 = R2 || C(g2) && (C(c) || w(c));
    if (!(f3 && b2 && y3 || !f3 && !b2 && R2))
      return null;
    const I3 = I(d, c, g2);
    if (null == I3)
      return null;
    if (n2[e2.originX] = I3.x, n2[e2.originY] = I3.y, n2[e2.originZ] = I3.z ?? 0, null != p2) {
      const { translation: t2, scale: a2, rotation: s3 } = p2, o = f3 ? 1 : z(c) / z(g2);
      n2[e2.translationX] = t2[0] * o, n2[e2.translationY] = t2[2] * o, n2[e2.translationZ] = -t2[1] * o, n2[e2.scaleX] = a2[0], n2[e2.scaleY] = a2[2], n2[e2.scaleZ] = a2[1], n2[e2.rotationX] = s3[0], n2[e2.rotationY] = s3[2], n2[e2.rotationZ] = -s3[1], n2[e2.rotationDeg] = s3[3];
    }
    return { attributes: n2 };
  }
  return null == s2 ? { attributes: n2 } : "mesh" === s2.type || "extent" === s2.type ? null : { geometry: s2.toJSON(), attributes: n2 };
}
async function m(t, e) {
  const a = await Promise.all((e.addAttachments ?? []).map((e2) => f2(t, e2))), r = await Promise.all((e.updateAttachments ?? []).map((e2) => f2(t, e2))), s2 = e.deleteAttachments ?? [];
  return a.length || r.length || s2.length ? { adds: a, updates: r, deletes: [...s2] } : null;
}
async function f2(t, e) {
  var _a;
  const { feature: a, attachment: r } = e, { globalId: o, name: n2, contentType: l, data: i, uploadId: u } = r, d = { globalId: o };
  if (a && ("attributes" in a ? d.parentGlobalId = (_a = a.attributes) == null ? void 0 : _a[t.globalIdField] : a.globalId && (d.parentGlobalId = a.globalId)), u)
    d.uploadId = u;
  else if (i) {
    const t2 = await Wt(i);
    t2 && (d.contentType = t2.mediaType, d.data = t2.data), i instanceof File && (d.name = i.name);
  }
  return n2 && (d.name = n2), l && (d.contentType = l), d;
}
function g(t, e, a) {
  if (!e || 0 === e.length)
    return [];
  if (a && $(e))
    return e.map((t2) => t2.globalId);
  if (v(e))
    return e.map((t2) => t2.objectId);
  const r = a ? t.globalIdField : t.objectIdField;
  return r ? e.map((t2) => t2.getAttribute(r)) : [];
}
function b(t) {
  var _a, _b, _c;
  const e = t == null ? void 0 : t.assetMaps;
  if (e) {
    for (const t2 of e.addResults)
      t2.success || n.getLogger("esri.layers.graphics.sources.support.sourceUtils").error(`Failed to map asset to feature with globalId ${t2.globalId}.`);
    for (const t2 of e.updateResults)
      t2.success || n.getLogger("esri.layers.graphics.sources.support.sourceUtils").error(`Failed to map asset to feature with globalId ${t2.globalId}.`);
  }
  const r = t == null ? void 0 : t.attachments, s2 = { addFeatureResults: ((_a = t == null ? void 0 : t.addResults) == null ? void 0 : _a.map(R)) ?? [], updateFeatureResults: ((_b = t == null ? void 0 : t.updateResults) == null ? void 0 : _b.map(R)) ?? [], deleteFeatureResults: ((_c = t == null ? void 0 : t.deleteResults) == null ? void 0 : _c.map(R)) ?? [], addAttachmentResults: (r == null ? void 0 : r.addResults) ? r.addResults.map(R) : [], updateAttachmentResults: (r == null ? void 0 : r.updateResults) ? r.updateResults.map(R) : [], deleteAttachmentResults: (r == null ? void 0 : r.deleteResults) ? r.deleteResults.map(R) : [] };
  return (t == null ? void 0 : t.editMoment) && (s2.editMoment = t.editMoment), s2;
}
function R(t) {
  const a = true === t.success ? null : t.error || { code: void 0, description: void 0 };
  return { objectId: t.objectId, globalId: t.globalId, error: a ? new s("feature-layer-source:edit-failure", a.description, { code: a.code }) : null };
}
function y2(e, a) {
  return new f({ attributes: e.attributes, geometry: y({ ...e.geometry, spatialReference: a }) });
}
function I2(t, e) {
  var _a, _b, _c;
  return { adds: ((_a = t == null ? void 0 : t.adds) == null ? void 0 : _a.map((t2) => y2(t2, e))) || [], updates: ((_b = t == null ? void 0 : t.updates) == null ? void 0 : _b.map((t2) => ({ original: y2(t2[0], e), current: y2(t2[1], e) }))) || [], deletes: ((_c = t == null ? void 0 : t.deletes) == null ? void 0 : _c.map((t2) => y2(t2, e))) || [], spatialReference: e };
}
function h(t) {
  const e = t.details.raw, a = +e.code, r = +e.extendedCode;
  return 500 === a && (-2147217144 === r || -2147467261 === r);
}

export {
  p,
  m,
  g,
  b,
  R,
  I2 as I,
  h
};
//# sourceMappingURL=chunk-QJHIIUXI.js.map
