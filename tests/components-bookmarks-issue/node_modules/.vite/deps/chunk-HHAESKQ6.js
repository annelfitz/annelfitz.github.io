import {
  c,
  n as n3,
  p
} from "./chunk-4MJOJUFR.js";
import {
  t as t4
} from "./chunk-KSBIR2KG.js";
import {
  t as t3
} from "./chunk-ECIXBYOQ.js";
import {
  d as d2
} from "./chunk-QFKFOAJ6.js";
import {
  l
} from "./chunk-LOPMLCHC.js";
import {
  r
} from "./chunk-JBF6CULO.js";
import {
  n as n2,
  t as t2
} from "./chunk-DRCNNCTI.js";
import {
  o as o7
} from "./chunk-HBRJJENW.js";
import {
  e as e8
} from "./chunk-VHY5K2VE.js";
import {
  t
} from "./chunk-6ENXMQPD.js";
import {
  P
} from "./chunk-FV43HSGW.js";
import {
  d,
  f,
  w
} from "./chunk-ZR7OV2EH.js";
import {
  o as o5
} from "./chunk-LJULTBAY.js";
import {
  e as e7
} from "./chunk-6MGK5WBT.js";
import {
  e as e6
} from "./chunk-QR7J3YDY.js";
import {
  s as s2
} from "./chunk-GO2OGJDG.js";
import {
  o as o6
} from "./chunk-UYMREM3D.js";
import {
  e2 as e5,
  m
} from "./chunk-JTUYA5FE.js";
import {
  D,
  G
} from "./chunk-WKVHVZW2.js";
import {
  o
} from "./chunk-7JR6S3WL.js";
import {
  o as o3
} from "./chunk-CDBOQCLE.js";
import {
  e as e4
} from "./chunk-HFJMEXIX.js";
import {
  a
} from "./chunk-UAFQMHYI.js";
import {
  o as o4
} from "./chunk-IDPLBNJX.js";
import {
  o as o2
} from "./chunk-P4MNTMCZ.js";
import {
  e as e3
} from "./chunk-GLF3KRAL.js";
import {
  _,
  n
} from "./chunk-AKEHDP75.js";
import {
  s
} from "./chunk-5MMGIT64.js";
import {
  e3 as e2
} from "./chunk-NDIXNREV.js";
import {
  e
} from "./chunk-2F6FFF5T.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/ProceduralTextureRepository.js
var t5 = class {
  constructor(t6, r4, s6) {
    this._createTexture = t6, this._parametersKey = r4, this._repository = /* @__PURE__ */ new Map(), this._orphanCache = s6.newCache(`procedural-texture-repository:${e2()}`, (e9) => e9.dispose());
  }
  destroy() {
    for (const [e9, { texture: t6 }] of this._repository)
      t6.dispose();
    this._repository.clear(), this._orphanCache.destroy();
  }
  swap(e9, t6 = null) {
    const r4 = this._acquire(e9);
    return this.release(t6), r4;
  }
  release(e9) {
    if (null == e9)
      return;
    const t6 = this._parametersKey(e9), r4 = this._repository.get(t6);
    if (r4 && (r4.refCount--, 0 === r4.refCount)) {
      this._repository.delete(t6);
      const { texture: e10 } = r4, s6 = e10.usedMemory;
      this._orphanCache.put(t6, e10, s6);
    }
  }
  _acquire(e9) {
    if (null == e9)
      return null;
    const t6 = this._parametersKey(e9), s6 = this._repository.get(t6);
    if (s6)
      return s6.refCount++, s6.texture;
    const o8 = this._orphanCache.pop(t6) ?? this._createTexture(e9), i = new r2(o8);
    return this._repository.set(t6, i), o8;
  }
};
var r2 = class {
  constructor(e9) {
    this.texture = e9, this.refCount = 1;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/stippleTextureRepository.js
function u(t6, u3) {
  return new t5((e9) => {
    const { encodedData: u4, textureSize: c5 } = a2(e9), f4 = new e5();
    return f4.internalFormat = G.RGBA, f4.width = c5, f4.height = 1, f4.wrapMode = D.REPEAT, new m(t6, f4, u4);
  }, (t7) => `${t7.pattern.join(",")}-r${t7.pixelRatio}`, u3);
}
function a2(e9) {
  const r4 = c2(e9), o8 = 1 / e9.pixelRatio, n4 = f2(e9), i = s3(e9), u3 = (Math.floor(0.5 * (i - 1)) + 0.5) * o8, a3 = [];
  let l2 = 1;
  for (const t6 of r4) {
    for (let e10 = 0; e10 < t6; e10++) {
      const r5 = l2 * (Math.min(e10, t6 - 1 - e10) + 0.5) * o8 / u3 * 0.5 + 0.5;
      a3.push(r5);
    }
    l2 = -l2;
  }
  const p2 = Math.round(r4[0] / 2), m3 = [...a3.slice(p2), ...a3.slice(0, p2)], d4 = new Uint8Array(4 * n4);
  let x = 0;
  for (const c5 of m3)
    o(c5, d4, x), x += 4;
  return { encodedData: d4, textureSize: n4 };
}
function c2(t6) {
  return t6.pattern.map((e9) => Math.round(e9 * t6.pixelRatio));
}
function f2(t6) {
  if (null == t6)
    return 1;
  const e9 = c2(t6);
  return Math.floor(e9.reduce((t7, e10) => t7 + e10));
}
function s3(t6) {
  return c2(t6).reduce((t7, e9) => Math.max(t7, e9));
}

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/ensureColor4.js
function s4(t6) {
  return null == t6 ? _ : 4 === t6.length ? t6 : s(c3, t6[0], t6[1], t6[2], 1);
}
var c3 = n();

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/LineStipple.glsl.js
function d3(e9, t6) {
  e9.constants.add("stippleAlphaColorDiscard", "float", 1e-3), e9.constants.add("stippleAlphaHighlightDiscard", "float", 0.5), t6.stippleEnabled ? c4(e9, t6) : f3(e9);
}
function c4(p2, n4) {
  const d4 = !(n4.draped && n4.stipplePreferContinuous), { vertex: c5, fragment: f4 } = p2;
  f4.include(a), n4.draped || (f(c5, n4), c5.uniforms.add(new o4("worldToScreenPerDistanceRatio", (e9, t6) => 1 / t6.camera.perScreenPixelRatio)), c5.code.add(o2`float computeWorldToScreenRatio(vec3 segmentCenter) {
float segmentDistanceToCamera = length(segmentCenter - cameraPosition);
return worldToScreenPerDistanceRatio / segmentDistanceToCamera;
}`)), p2.varyings.add("vStippleDistance", "float"), p2.varyings.add("vStippleDistanceLimits", "vec2"), p2.varyings.add("vStipplePatternStretch", "float"), c5.code.add(o2`
    float discretizeWorldToScreenRatio(float worldToScreenRatio) {
      float step = ${u2};

      float discreteWorldToScreenRatio = log(worldToScreenRatio);
      discreteWorldToScreenRatio = ceil(discreteWorldToScreenRatio / step) * step;
      discreteWorldToScreenRatio = exp(discreteWorldToScreenRatio);
      return discreteWorldToScreenRatio;
    }
  `), c5.code.add(o2`vec2 computeStippleDistanceLimits(float startPseudoScreen, float segmentLengthPseudoScreen, float segmentLengthScreen, float patternLength) {`), c5.code.add(o2`
    if (segmentLengthPseudoScreen >= ${d4 ? "patternLength" : "1e4"}) {
  `), w(c5), c5.code.add(o2`float repetitions = segmentLengthScreen / (patternLength * pixelRatio);
float flooredRepetitions = max(1.0, floor(repetitions + 0.5));
float segmentLengthScreenRounded = flooredRepetitions * patternLength;
float stretch = repetitions / flooredRepetitions;
vStipplePatternStretch = max(0.75, stretch);
return vec2(0.0, segmentLengthScreenRounded);
}
return vec2(startPseudoScreen, startPseudoScreen + segmentLengthPseudoScreen);
}`), f4.uniforms.add(new s2("stipplePatternTexture", (e9) => e9.stippleTexture), new o4("stipplePatternSDFNormalizer", (e9) => m2(e9.stipplePattern)), new o4("stipplePatternPixelSizeInv", (e9) => 1 / S(e9))), f4.code.add(o2`float getStippleSDF(out bool isClamped) {
float stippleDistanceClamped = clamp(vStippleDistance, vStippleDistanceLimits.x, vStippleDistanceLimits.y);
vec2 aaCorrectedLimits = vStippleDistanceLimits + vec2(1.0, -1.0) / gl_FragCoord.w;
isClamped = vStippleDistance < aaCorrectedLimits.x || vStippleDistance > aaCorrectedLimits.y;
float u = stippleDistanceClamped * gl_FragCoord.w * stipplePatternPixelSizeInv * vLineSizeInv;
u = fract(u);
float encodedSDF = rgba2float(texture(stipplePatternTexture, vec2(u, 0.5)));
float sdf = (encodedSDF * 2.0 - 1.0) * stipplePatternSDFNormalizer;
return (sdf - 0.5) * vStipplePatternStretch + 0.5;
}
float getStippleSDF() {
bool ignored;
return getStippleSDF(ignored);
}
float getStippleAlpha() {
bool isClamped;
float stippleSDF = getStippleSDF(isClamped);
float antiAliasedResult = clamp(stippleSDF * vLineWidth + 0.5, 0.0, 1.0);
return isClamped ? floor(antiAliasedResult + 0.5) : antiAliasedResult;
}`), n4.stippleOffColorEnabled ? (f4.uniforms.add(new e7("stippleOffColor", (e9) => s4(e9.stippleOffColor))), f4.code.add(o2`#define discardByStippleAlpha(stippleAlpha, threshold) {}
#define blendStipple(color, stippleAlpha) mix(color, stippleOffColor, stippleAlpha)`)) : f4.code.add(o2`#define discardByStippleAlpha(stippleAlpha, threshold) if (stippleAlpha < threshold) { discard; }
#define blendStipple(color, stippleAlpha) vec4(color.rgb, color.a * stippleAlpha)`);
}
function f3(e9) {
  e9.fragment.code.add(o2`float getStippleAlpha() { return 1.0; }
#define discardByStippleAlpha(_stippleAlpha_, _threshold_) {}
#define blendStipple(color, _stippleAlpha_) color`);
}
function m2(e9) {
  return e9 ? (Math.floor(0.5 * (s3(e9) - 1)) + 0.5) / e9.pixelRatio : 1;
}
function S(e9) {
  const t6 = e9.stipplePattern;
  return t6 ? f2(e9.stipplePattern) / t6.pixelRatio : 1;
}
var u2 = o2.float(0.4);

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/RibbonLineTechniqueConfiguration.js
var r3;
!function(o8) {
  o8[o8.BUTT = 0] = "BUTT", o8[o8.SQUARE = 1] = "SQUARE", o8[o8.ROUND = 2] = "ROUND", o8[o8.COUNT = 3] = "COUNT";
}(r3 || (r3 = {}));
var s5 = class extends t4 {
  constructor() {
    super(...arguments), this.output = o3.Color, this.capType = r3.BUTT, this.transparencyPassType = o5.NONE, this.occluder = false, this.hasSlicePlane = false, this.hasPolygonOffset = false, this.writeDepth = false, this.draped = false, this.stippleEnabled = false, this.stippleOffColorEnabled = false, this.stipplePreferContinuous = true, this.roundJoins = false, this.applyMarkerOffset = false, this.vvSize = false, this.vvColor = false, this.vvOpacity = false, this.falloffEnabled = false, this.innerColorEnabled = false, this.hasOccludees = false, this.multipassEnabled = false, this.cullAboveGround = false, this.wireframe = false, this.objectAndLayerIdColorInstanced = false;
  }
};
e([r({ count: o3.COUNT })], s5.prototype, "output", void 0), e([r({ count: r3.COUNT })], s5.prototype, "capType", void 0), e([r({ count: o5.COUNT })], s5.prototype, "transparencyPassType", void 0), e([r()], s5.prototype, "occluder", void 0), e([r()], s5.prototype, "hasSlicePlane", void 0), e([r()], s5.prototype, "hasPolygonOffset", void 0), e([r()], s5.prototype, "writeDepth", void 0), e([r()], s5.prototype, "draped", void 0), e([r()], s5.prototype, "stippleEnabled", void 0), e([r()], s5.prototype, "stippleOffColorEnabled", void 0), e([r()], s5.prototype, "stipplePreferContinuous", void 0), e([r()], s5.prototype, "roundJoins", void 0), e([r()], s5.prototype, "applyMarkerOffset", void 0), e([r()], s5.prototype, "vvSize", void 0), e([r()], s5.prototype, "vvColor", void 0), e([r()], s5.prototype, "vvOpacity", void 0), e([r()], s5.prototype, "falloffEnabled", void 0), e([r()], s5.prototype, "innerColorEnabled", void 0), e([r()], s5.prototype, "hasOccludees", void 0), e([r()], s5.prototype, "multipassEnabled", void 0), e([r()], s5.prototype, "cullAboveGround", void 0), e([r()], s5.prototype, "wireframe", void 0), e([r()], s5.prototype, "objectAndLayerIdColorInstanced", void 0), e([r({ constValue: false })], s5.prototype, "occlusionPass", void 0), e([r({ constValue: true })], s5.prototype, "hasVvInstancing", void 0), e([r({ constValue: true })], s5.prototype, "hasSliceTranslatedView", void 0);

// node_modules/@arcgis/core/chunks/RibbonLine.glsl.js
var j = 1;
function P2(P3) {
  const R2 = new o6(), { attributes: A, varyings: F, constants: E, vertex: T, fragment: z } = R2;
  R2.include(t3), R2.include(c, P3), R2.include(d3, P3);
  const O = P3.applyMarkerOffset && !P3.draped;
  O && (T.uniforms.add(new o4("markerScale", (e9) => e9.markerScale)), R2.include(n3, { space: p.World, draped: false })), P3.output === o3.LinearDepth && R2.include(l, P3), R2.include(d2, P3), d(T, P3), T.uniforms.add(new e4("inverseProjectionMatrix", (e9, i) => i.camera.inverseProjectionMatrix), new e6("nearFar", (e9, i) => i.camera.nearFar), new o4("miterLimit", (e9) => "miter" !== e9.join ? 0 : e9.miterLimit), new e7("viewport", (e9, i) => i.camera.fullViewport)), T.constants.add("LARGE_HALF_FLOAT", "float", 65500), A.add(e3.POSITION, "vec3"), A.add(e3.PREVPOSITION, "vec3"), A.add(e3.NEXTPOSITION, "vec3"), A.add(e3.SUBDIVISIONFACTOR, "float"), A.add(e3.UV0, "vec2"), F.add("vColor", "vec4"), F.add("vpos", "vec3"), F.add("vLineDistance", "float"), F.add("vLineWidth", "float"), t2(R2);
  const V = P3.multipassEnabled && (P3.output === o3.Color || P3.output === o3.Alpha);
  V && F.add("depth", "float");
  const W = P3.stippleEnabled;
  W && F.add("vLineSizeInv", "float"), E.add("aaWidth", "float", P3.stippleEnabled ? 0 : 1);
  const I = P3.capType === r3.ROUND, N = P3.stippleEnabled && I, $ = P3.falloffEnabled || N;
  $ && F.add("vLineDistanceNorm", "float"), I && (F.add("vSegmentSDF", "float"), F.add("vReverseSegmentSDF", "float")), T.code.add(o2`#define PERPENDICULAR(v) vec2(v.y, -v.x);
float interp(float ncp, vec4 a, vec4 b) {
return (-ncp - a.z) / (b.z - a.z);
}
vec2 rotate(vec2 v, float a) {
float s = sin(a);
float c = cos(a);
mat2 m = mat2(c, -s, s, c);
return m * v;
}`), T.code.add(o2`vec4 projectAndScale(vec4 pos) {
vec4 posNdc = proj * pos;
posNdc.xy *= viewport.zw / posNdc.w;
return posNdc;
}`), n2(R2), T.code.add(o2`
    void clipAndTransform(inout vec4 pos, inout vec4 prev, inout vec4 next, in bool isStartVertex) {
      float vnp = nearFar[0] * 0.99;

      if(pos.z > -nearFar[0]) {
        //current pos behind ncp --> we need to clip
        if (!isStartVertex) {
          if(prev.z < -nearFar[0]) {
            //previous in front of ncp
            pos = mix(prev, pos, interp(vnp, prev, pos));
            next = pos;
          } else {
            pos = vec4(0.0, 0.0, 0.0, 1.0);
          }
        } else {
          if(next.z < -nearFar[0]) {
            //next in front of ncp
            pos = mix(pos, next, interp(vnp, pos, next));
            prev = pos;
          } else {
            pos = vec4(0.0, 0.0, 0.0, 1.0);
          }
        }
      } else {
        //current position visible
        if (prev.z > -nearFar[0]) {
          //previous behind ncp
          prev = mix(pos, prev, interp(vnp, pos, prev));
        }
        if (next.z > -nearFar[0]) {
          //next behind ncp
          next = mix(next, pos, interp(vnp, next, pos));
        }
      }

      ${V ? "depth = pos.z;" : ""}
      linearDepth = calculateLinearDepth(nearFar,pos.z);

      pos = projectAndScale(pos);
      next = projectAndScale(next);
      prev = projectAndScale(prev);
    }
  `), w(T), T.code.add(o2`
  void main(void) {
    // unpack values from uv0.y
    bool isStartVertex = abs(abs(uv0.y)-3.0) == 1.0;

    float coverage = 1.0;

    // Check for special value of uv0.y which is used by the Renderer when graphics
    // are removed before the VBO is recompacted. If this is the case, then we just
    // project outside of clip space.
    if (uv0.y == 0.0) {
      // Project out of clip space
      gl_Position = vec4(1e038, 1e038, 1e038, 1.0);
    }
    else {
      bool isJoin = abs(uv0.y) < 3.0;
      float lineSize = getSize();

      if (lineSize < 1.0) {
        coverage = lineSize; // convert sub-pixel coverage to alpha
        lineSize = 1.0;
      }
      lineSize += aaWidth;

      float lineWidth = lineSize * pixelRatio;
      vLineWidth = lineWidth;
      ${W ? o2`vLineSizeInv = 1.0 / lineSize;` : ""}

      vec4 pos  = view * vec4(position, 1.0);
      vec4 prev = view * vec4(prevPosition, 1.0);
      vec4 next = view * vec4(nextPosition, 1.0);
  `), O && T.code.add(o2`vec4 other = isStartVertex ? next : prev;
bool markersHidden = areWorldMarkersHidden(pos, other);
if(!isJoin && !markersHidden) {
pos.xyz += normalize(other.xyz - pos.xyz) * getWorldMarkerSize(pos) * 0.5;
}`), T.code.add(o2`clipAndTransform(pos, prev, next, isStartVertex);
vec2 left = (pos.xy - prev.xy);
vec2 right = (next.xy - pos.xy);
float leftLen = length(left);
float rightLen = length(right);`);
  (P3.stippleEnabled || I) && T.code.add(o2`
      float isEndVertex = float(!isStartVertex);
      vec2 segmentOrigin = mix(pos.xy, prev.xy, isEndVertex);
      vec2 segment = mix(right, left, isEndVertex);
      ${I ? o2`vec2 segmentEnd = mix(next.xy, pos.xy, isEndVertex);` : ""}
    `), T.code.add(o2`left = (leftLen > 0.001) ? left/leftLen : vec2(0.0, 0.0);
right = (rightLen > 0.001) ? right/rightLen : vec2(0.0, 0.0);
vec2 capDisplacementDir = vec2(0, 0);
vec2 joinDisplacementDir = vec2(0, 0);
float displacementLen = lineWidth;
if (isJoin) {
bool isOutside = (left.x * right.y - left.y * right.x) * uv0.y > 0.0;
joinDisplacementDir = normalize(left + right);
joinDisplacementDir = PERPENDICULAR(joinDisplacementDir);
if (leftLen > 0.001 && rightLen > 0.001) {
float nDotSeg = dot(joinDisplacementDir, left);
displacementLen /= length(nDotSeg * left - joinDisplacementDir);
if (!isOutside) {
displacementLen = min(displacementLen, min(leftLen, rightLen)/abs(nDotSeg));
}
}
if (isOutside && (displacementLen > miterLimit * lineWidth)) {`), P3.roundJoins ? T.code.add(o2`
        vec2 startDir = leftLen < 0.001 ? right : left;
        startDir = PERPENDICULAR(startDir);

        vec2 endDir = rightLen < 0.001 ? left : right;
        endDir = PERPENDICULAR(endDir);

        float factor = ${P3.stippleEnabled ? o2`min(1.0, subdivisionFactor * ${o2.float((j + 2) / (j + 1))})` : o2`subdivisionFactor`};

        float rotationAngle = acos(clamp(dot(startDir, endDir), -1.0, 1.0));
        joinDisplacementDir = rotate(startDir, -sign(uv0.y) * factor * rotationAngle);
      `) : T.code.add(o2`if (leftLen < 0.001) {
joinDisplacementDir = right;
}
else if (rightLen < 0.001) {
joinDisplacementDir = left;
}
else {
joinDisplacementDir = (isStartVertex || subdivisionFactor > 0.0) ? right : left;
}
joinDisplacementDir = PERPENDICULAR(joinDisplacementDir);`);
  const M = P3.capType !== r3.BUTT;
  return T.code.add(o2`
        displacementLen = lineWidth;
      }
    } else {
      // CAP handling ---------------------------------------------------
      joinDisplacementDir = isStartVertex ? right : left;
      joinDisplacementDir = PERPENDICULAR(joinDisplacementDir);

      ${M ? o2`capDisplacementDir = isStartVertex ? -right : left;` : ""}
    }
  `), T.code.add(o2`
    // Displacement (in pixels) caused by join/or cap
    vec2 dpos = joinDisplacementDir * sign(uv0.y) * displacementLen + capDisplacementDir * displacementLen;
    float lineDistNorm = sign(uv0.y) * pos.w;

    vLineDistance =  lineWidth * lineDistNorm;
    ${$ ? o2`vLineDistanceNorm = lineDistNorm;` : ""}

    pos.xy += dpos;
  `), I && T.code.add(o2`vec2 segmentDir = normalize(segment);
vSegmentSDF = (isJoin && isStartVertex) ? LARGE_HALF_FLOAT : (dot(pos.xy - segmentOrigin, segmentDir) * pos.w) ;
vReverseSegmentSDF = (isJoin && !isStartVertex) ? LARGE_HALF_FLOAT : (dot(pos.xy - segmentEnd, -segmentDir) * pos.w);`), P3.stippleEnabled && (P3.draped ? T.uniforms.add(new o4("worldToScreenRatio", (e9, i) => 1 / i.screenToPCSRatio)) : T.code.add(o2`vec3 segmentCenter = mix((nextPosition + position) * 0.5, (position + prevPosition) * 0.5, isEndVertex);
float worldToScreenRatio = computeWorldToScreenRatio(segmentCenter);`), T.code.add(o2`float segmentLengthScreenDouble = length(segment);
float segmentLengthScreen = segmentLengthScreenDouble * 0.5;
float discreteWorldToScreenRatio = discretizeWorldToScreenRatio(worldToScreenRatio);
float segmentLengthRender = length(mix(nextPosition - position, position - prevPosition, isEndVertex));
vStipplePatternStretch = worldToScreenRatio / discreteWorldToScreenRatio;`), P3.draped ? T.code.add(o2`float segmentLengthPseudoScreen = segmentLengthScreen / pixelRatio * discreteWorldToScreenRatio / worldToScreenRatio;
float startPseudoScreen = uv0.x * discreteWorldToScreenRatio - mix(0.0, segmentLengthPseudoScreen, isEndVertex);`) : T.code.add(o2`float startPseudoScreen = mix(uv0.x, uv0.x - segmentLengthRender, isEndVertex) * discreteWorldToScreenRatio;
float segmentLengthPseudoScreen = segmentLengthRender * discreteWorldToScreenRatio;`), T.uniforms.add(new o4("stipplePatternPixelSize", (e9) => S(e9))), T.code.add(o2`float patternLength = lineSize * stipplePatternPixelSize;
vStippleDistanceLimits = computeStippleDistanceLimits(startPseudoScreen, segmentLengthPseudoScreen, segmentLengthScreen, patternLength);
vStippleDistance = mix(vStippleDistanceLimits.x, vStippleDistanceLimits.y, isEndVertex);
if (segmentLengthScreenDouble >= 0.001) {
vec2 stippleDisplacement = pos.xy - segmentOrigin;
float stippleDisplacementFactor = dot(segment, stippleDisplacement) / (segmentLengthScreenDouble * segmentLengthScreenDouble);
vStippleDistance += (stippleDisplacementFactor - isEndVertex) * (vStippleDistanceLimits.y - vStippleDistanceLimits.x);
}
vStippleDistanceLimits *= pos.w;
vStippleDistance *= pos.w;
vStippleDistanceLimits = isJoin ?
vStippleDistanceLimits :
isStartVertex ?
vec2(-1e34, vStippleDistanceLimits.y) :
vec2(vStippleDistanceLimits.x, 1e34);`)), T.code.add(o2`
      // Convert back into NDC
      pos.xy = (pos.xy / viewport.zw) * pos.w;

      vColor = getColor();
      vColor.a *= coverage;

      ${P3.wireframe && !P3.draped ? "pos.z -= 0.001 * pos.w;" : ""}

      // transform final position to camera space for slicing
      vpos = (inverseProjectionMatrix * pos).xyz;
      gl_Position = pos;
      forwardObjectAndLayerIdColor();
    }
  }
  `), V && R2.include(o7, P3), R2.include(P, P3), z.include(e8), z.code.add(o2`
  void main() {
    discardBySlice(vpos);
    ${V ? "terrainDepthTest(depth);" : ""}
  `), P3.wireframe ? z.code.add(o2`vec4 finalColor = vec4(1.0, 0.0, 1.0, 1.0);`) : (I && z.code.add(o2`
        float sdf = min(vSegmentSDF, vReverseSegmentSDF);
        vec2 fragmentPosition = vec2(
          min(sdf, 0.0),
          vLineDistance
        ) * gl_FragCoord.w;

        float fragmentRadius = length(fragmentPosition);
        float fragmentCapSDF = (fragmentRadius - vLineWidth) * 0.5; // Divide by 2 to transform from double pixel scale
        float capCoverage = clamp(0.5 - fragmentCapSDF, 0.0, 1.0);

        if (capCoverage < ${o2.float(t)}) {
          discard;
        }
      `), N ? z.code.add(o2`
      vec2 stipplePosition = vec2(
        min(getStippleSDF() * 2.0 - 1.0, 0.0),
        vLineDistanceNorm * gl_FragCoord.w
      );
      float stippleRadius = length(stipplePosition * vLineWidth);
      float stippleCapSDF = (stippleRadius - vLineWidth) * 0.5; // Divide by 2 to transform from double pixel scale
      float stippleCoverage = clamp(0.5 - stippleCapSDF, 0.0, 1.0);
      float stippleAlpha = step(${o2.float(t)}, stippleCoverage);
      `) : z.code.add(o2`float stippleAlpha = getStippleAlpha();`), P3.output !== o3.ObjectAndLayerIdColor && z.code.add(o2`discardByStippleAlpha(stippleAlpha, stippleAlphaColorDiscard);`), z.uniforms.add(new e7("intrinsicColor", (e9) => e9.color)), z.code.add(o2`vec4 color = intrinsicColor * vColor;`), P3.innerColorEnabled && (z.uniforms.add(new e7("innerColor", (e9) => e9.innerColor ?? e9.color), new o4("innerWidth", (e9, i) => e9.innerWidth * i.camera.pixelRatio)), z.code.add(o2`float distToInner = abs(vLineDistance * gl_FragCoord.w) - innerWidth;
float innerAA = clamp(0.5 - distToInner, 0.0, 1.0);
float innerAlpha = innerColor.a + color.a * (1.0 - innerColor.a);
color = mix(color, vec4(innerColor.rgb, innerAlpha), innerAA);`)), z.code.add(o2`vec4 finalColor = blendStipple(color, stippleAlpha);`), P3.falloffEnabled && (z.uniforms.add(new o4("falloff", (e9) => e9.falloff)), z.code.add(o2`finalColor.a *= pow(max(0.0, 1.0 - abs(vLineDistanceNorm * gl_FragCoord.w)), falloff);`)), P3.stippleEnabled || z.code.add(o2`float featherStartDistance = max(vLineWidth - 2.0, 0.0);
float value = abs(vLineDistance) * gl_FragCoord.w;
float feather = (value - featherStartDistance) / (vLineWidth - featherStartDistance);
finalColor.a *= 1.0 - clamp(feather, 0.0, 1.0);`)), z.code.add(o2`
    ${P3.output === o3.ObjectAndLayerIdColor ? o2`finalColor.a = 1.0;` : ""}

    if (finalColor.a < ${o2.float(t)}) {
      discard;
    }

    ${P3.output === o3.Alpha ? o2`fragColor = vec4(finalColor.a);` : ""}
    ${P3.output === o3.Color ? o2`fragColor = highlightSlice(finalColor, vpos);` : ""}
    ${P3.output === o3.Color && P3.transparencyPassType === o5.Color ? "fragColor = premultiplyAlpha(fragColor);" : ""}
    ${P3.output === o3.Highlight ? o2`fragColor = vec4(1.0);` : ""}
    ${P3.output === o3.LinearDepth ? o2`outputDepth(linearDepth);` : ""}
    ${P3.output === o3.ObjectAndLayerIdColor ? o2`outputObjectAndLayerIdColor();` : ""}
  }
  `), R2;
}
var R = Object.freeze(Object.defineProperty({ __proto__: null, build: P2, ribbonlineNumRoundJoinSubdivisions: j }, Symbol.toStringTag, { value: "Module" }));

export {
  t5 as t,
  u,
  r3 as r,
  s5 as s,
  j,
  P2 as P,
  R
};
//# sourceMappingURL=chunk-HHAESKQ6.js.map
