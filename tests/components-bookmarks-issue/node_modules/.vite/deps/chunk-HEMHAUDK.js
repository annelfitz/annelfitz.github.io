import {
  se,
  v
} from "./chunk-QQDXHR2B.js";
import {
  p
} from "./chunk-J6T3FJLS.js";
import {
  f
} from "./chunk-QYC3GV65.js";
import {
  j
} from "./chunk-RKVEKQ5O.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import {
  s
} from "./chunk-7RBRCL6S.js";

// node_modules/@arcgis/core/views/layers/ImageryTileLayerView.js
var p2 = (p3) => {
  let u = class extends p3 {
    constructor() {
      super(...arguments), this._rasterFieldPrefix = "Raster.", this.layer = null, this.view = null, this.tileInfo = null;
    }
    get fullExtent() {
      return this._getfullExtent();
    }
    _getfullExtent() {
      return se(this.layer.serviceRasterInfo, this.view.spatialReference);
    }
    get hasTilingEffects() {
      return !!(this.layer.renderer && "dynamicRangeAdjustment" in this.layer.renderer && this.layer.renderer.dynamicRangeAdjustment);
    }
    get datumTransformation() {
      return v(this.layer.fullExtent, this.view.spatialReference, true);
    }
    supportsSpatialReference(e2) {
      return !!se(this.layer.serviceRasterInfo, e2);
    }
    async fetchPopupFeaturesAtLocation(e2, i) {
      const { layer: o } = this;
      if (!e2)
        throw new s("imageryTileLayerView:fetchPopupFeatures", "Nothing to fetch without area", { layer: o });
      const { popupEnabled: s2 } = o, a2 = p(o, i);
      if (!s2 || null == a2)
        throw new s("imageryTileLayerView:fetchPopupFeatures", "Missing required popupTemplate or popupEnabled", { popupEnabled: s2, popupTemplate: a2 });
      const n = [], { value: p4, magdirValue: u2, processedValue: c } = await o.identify(e2, { timeExtent: this.timeExtent, signal: i == null ? void 0 : i.signal });
      let m = "";
      if (p4 && p4.length) {
        m = "imagery-tile" === o.type && o.hasStandardTime() && null != p4[0] ? p4.map((e4) => o.getStandardTimeValue(e4)).join(", ") : p4.join(", ");
        const e3 = { ObjectId: 0 }, r = "Raster.ServicePixelValue";
        e3[r] = "imagery-tile" === o.type && "Function" === o.raster.datasetFormat ? c == null ? void 0 : c.join(", ") : m, e3[r + ".Raw"] = m;
        const i2 = o.serviceRasterInfo.attributeTable;
        if (null != i2) {
          const { fields: t, features: r2 } = i2, o2 = t.find(({ name: e4 }) => "value" === e4.toLowerCase()), s4 = o2 ? r2.find((e4) => String(e4.attributes[o2.name]) === m) : null;
          if (s4) {
            for (const i3 in s4.attributes)
              if (s4.attributes.hasOwnProperty(i3)) {
                e3[this._rasterFieldPrefix + i3] = s4.attributes[i3];
              }
          }
        }
        const s3 = o.serviceRasterInfo.dataType;
        "vector-magdir" !== s3 && "vector-uv" !== s3 || (e3["Raster.Magnitude"] = u2 == null ? void 0 : u2[0], e3["Raster.Direction"] = u2 == null ? void 0 : u2[1]);
        const a3 = new f({ geometry: this.fullExtent.clone(), attributes: e3, layer: o, sourceLayer: o });
        n.push(a3);
      }
      return n;
    }
  };
  return e([y()], u.prototype, "layer", void 0), e([y(j)], u.prototype, "timeExtent", void 0), e([y()], u.prototype, "view", void 0), e([y()], u.prototype, "fullExtent", null), e([y()], u.prototype, "tileInfo", void 0), e([y({ readOnly: true })], u.prototype, "hasTilingEffects", null), e([y()], u.prototype, "datumTransformation", null), u = e([a("esri.views.layers.ImageryTileLayerView")], u), u;
};

export {
  p2 as p
};
//# sourceMappingURL=chunk-HEMHAUDK.js.map
