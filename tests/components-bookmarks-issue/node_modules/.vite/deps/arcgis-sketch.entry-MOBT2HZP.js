import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  importCoreReactiveUtils,
  newLayersGraphicsLayer,
  newWidgetsSketch
} from "./chunk-YXW2SI4L.js";
import {
  addHandles,
  checkForView,
  referenceElementHelper
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-sketch.entry.js
var sketchCss = "arcgis-sketch{}";
var ArcgisSketch = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.arcgisSketchReady = createEvent(this, "arcgisSketchReady", 7);
    this.sketchCreate = createEvent(this, "sketchCreate", 7);
    this.sketchDelete = createEvent(this, "sketchDelete", 7);
    this.sketchRedo = createEvent(this, "sketchRedo", 7);
    this.sketchUndo = createEvent(this, "sketchUndo", 7);
    this.sketchUpdate = createEvent(this, "sketchUpdate", 7);
    this._watchHandles = [];
    this.referenceElement = void 0;
    this.activeTool = void 0;
    this.availableCreateTools = void 0;
    this.createGraphic = void 0;
    this.creationMode = "continuous";
    this.defaultCreateOptions = void 0;
    this.defaultUpdateOptions = void 0;
    this.icon = void 0;
    this.labelOptions = void 0;
    this.layer = void 0;
    this.layout = "horizontal";
    this.pointSymbol = void 0;
    this.polylineSymbol = void 0;
    this.polygonSymbol = void 0;
    this.snappingOptions = void 0;
    this.tooltipOptions = void 0;
    this.updateGraphics = void 0;
    this.visibleElementsCreateToolsPoint = true;
    this.visibleElementsCreateToolsPolyline = true;
    this.visibleElementsCreateToolsPolygon = true;
    this.visibleElementsCreateToolsRectangle = true;
    this.visibleElementsCreateToolsCircle = true;
    this.visibleElementsDuplicateButton = true;
    this.visibleElementsSelectionToolsRectangle = true;
    this.visibleElementsSelectionToolsLasso = true;
    this.visibleElementsSettingsMenu = true;
    this.visibleElementsLabelsToggle = true;
    this.visibleElementsTooltipsToggle = true;
    this.visibleElementsSnappingControls = true;
    this.visibleElementsSnappingControlsElementsHeader = true;
    this.visibleElementsSnappingControlsElementsEnabledToggle = true;
    this.visibleElementsSnappingControlsElementsSelfEnabledToggle = true;
    this.visibleElementsSnappingControlsElementsFeatureEnabledToggle = true;
    this.visibleElementsSnappingControlsElementsLayerList = true;
    this.visibleElementsUndoRedoMenu = true;
    this.position = "bottom-left";
    this.view = void 0;
    this.widget = void 0;
  }
  referenceElementWatcher(value) {
    void referenceElementHelper(this, value);
  }
  availableCreateToolsWatcher(value) {
    if (this.widget) {
      this.widget.availableCreateTools = value;
    }
  }
  creationModeWatcher(value) {
    if (this.widget) {
      this.widget.creationMode = value;
    }
  }
  defaultCreateOptionsWatcher(value) {
    if (this.widget) {
      this.widget.defaultCreateOptions = value;
    }
  }
  defaultUpdateOptionsWatcher(value) {
    if (this.widget) {
      this.widget.defaultUpdateOptions = value;
    }
  }
  iconWatcher(value) {
    if (this.widget) {
      this.widget.icon = value;
    }
  }
  labelOptionsWatcher(value) {
    if (this.widget) {
      this.widget.labelOptions = value;
    }
  }
  layerWatcher(value) {
    if (this.widget) {
      this.widget.layer = value;
    }
  }
  layoutWatcher(value) {
    if (this.widget) {
      this.widget.layout = value;
    }
  }
  pointSymbolWatcher(value) {
    if (this.widget) {
      this.widget.viewModel.pointSymbol = value;
    }
  }
  polylineSymbolWatcher(value) {
    if (this.widget) {
      this.widget.viewModel.polylineSymbol = value;
    }
  }
  polygonSymbolWatcher(value) {
    if (this.widget) {
      this.widget.viewModel.polygonSymbol = value;
    }
  }
  snappingOptionsWatcher(value) {
    if (this.widget) {
      this.widget.snappingOptions = value;
    }
  }
  tooltipOptionsWatcher(value) {
    if (this.widget) {
      this.widget.tooltipOptions = value;
    }
  }
  visibleElementsCreateToolsPointWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        createTools: {
          ...this.widget.visibleElements.createTools,
          point: value
        }
      };
    }
  }
  visibleElementsCreateToolsPolylineWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        createTools: {
          ...this.widget.visibleElements.createTools,
          polyline: value
        }
      };
    }
  }
  visibleElementsCreateToolsPolygonWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        createTools: {
          ...this.widget.visibleElements.createTools,
          polygon: value
        }
      };
    }
  }
  visibleElementsCreateToolsRectangleWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        createTools: {
          ...this.widget.visibleElements.createTools,
          rectangle: value
        }
      };
    }
  }
  visibleElementsCreateToolsCircleWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        createTools: {
          ...this.widget.visibleElements.createTools,
          circle: value
        }
      };
    }
  }
  visibleElementsDuplicateButtonWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        duplicateButton: value
      };
    }
  }
  visibleElementsSelectionToolsRectangleWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        selectionTools: {
          ...this.widget.visibleElements.selectionTools,
          "rectangle-selection": value
        }
      };
    }
  }
  visibleElementsSelectionToolsLassoWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        selectionTools: {
          ...this.widget.visibleElements.selectionTools,
          "lasso-selection": value
        }
      };
    }
  }
  visibleElementsSettingsMenuWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        settingsMenu: value
      };
    }
  }
  visibleElementsLabelsToggleWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        labelsToggle: value
      };
    }
  }
  visibleElementsTooltipsToggleWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        tooltipsToggle: value
      };
    }
  }
  visibleElementsSnappingControlsWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        snappingControls: value
      };
    }
  }
  visibleElementsSnappingControlsElementsHeaderWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        snappingControlsElements: {
          header: value
        }
      };
    }
  }
  visibleElementsSnappingControlsElementsEnabledToggleWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        snappingControlsElements: {
          enabledToggle: value
        }
      };
    }
  }
  visibleElementsSnappingControlsElementsSelfEnabledToggleWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        snappingControlsElements: {
          selfEnabledToggle: value
        }
      };
    }
  }
  visibleElementsSnappingControlsElementsFeatureEnabledToggleWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        snappingControlsElements: {
          featureEnabledToggle: value
        }
      };
    }
  }
  visibleElementsSnappingControlsElementsLayerListWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        snappingControlsElements: {
          layerList: value
        }
      };
    }
  }
  visibleElementsUndoRedoMenuWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        undoRedoMenu: value
      };
    }
  }
  positionWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.view.ui.move(this.childElem, value);
    }
  }
  viewWatcher(value) {
    var _a;
    if (value !== void 0 && this.widget) {
      this.widget.view = value;
      (_a = this.widget.view.map) == null ? void 0 : _a.add(this.layer);
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Methods
  //
  //--------------------------------------------------------------------------
  async cancel() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.cancel();
  }
  async complete() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.complete();
  }
  async create(tool, createOptions) {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.create(tool, createOptions);
  }
  async delete() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.delete();
  }
  async duplicate() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.duplicate();
  }
  async redo() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.redo();
  }
  async undo() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.undo();
  }
  async update(graphic, updateOptions) {
    var _a;
    return void ((_a = this.widget) == null ? void 0 : _a.update(graphic, updateOptions));
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = await this._createParams();
    const widget = await newWidgetsSketch(params);
    this.widget = widget;
    this._setViewModelParams();
    await this._addWatchers();
    this._proxyEvents();
    this._addContainer();
    this.arcgisSketchReady.emit();
    checkForView(this);
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    return h("div", { ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  _addContainer() {
    this.widget.container = this.childElem;
  }
  async _addWatchers() {
    const { watch } = await importCoreReactiveUtils();
    addHandles(this, watch(() => this.widget.activeTool, (value) => this.activeTool = value, {
      initial: true
    }));
    addHandles(this, watch(() => this.widget.createGraphic, (value) => this.createGraphic = value, {
      initial: true
    }));
    addHandles(this, watch(() => this.widget.updateGraphics, (value) => this.updateGraphics = value, {
      initial: true
    }));
  }
  async _createParams() {
    const graphicsLayerProps = {
      title: "Sketch Layer",
      creationMode: "update"
    };
    this.layer || (this.layer = await newLayersGraphicsLayer(graphicsLayerProps));
    const params = {
      layer: this.layer
    };
    params.visibleElements = {
      createTools: {
        point: this.visibleElementsCreateToolsPoint,
        polyline: this.visibleElementsCreateToolsPolyline,
        polygon: this.visibleElementsCreateToolsPolygon,
        rectangle: this.visibleElementsCreateToolsRectangle,
        circle: this.visibleElementsCreateToolsCircle
      },
      duplicateButton: this.visibleElementsDuplicateButton,
      selectionTools: {
        "rectangle-selection": this.visibleElementsSelectionToolsRectangle,
        "lasso-selection": this.visibleElementsSelectionToolsLasso
      },
      settingsMenu: this.visibleElementsSettingsMenu,
      labelsToggle: this.visibleElementsLabelsToggle,
      tooltipsToggle: this.visibleElementsTooltipsToggle,
      snappingControls: this.visibleElementsSnappingControls,
      snappingControlsElements: {
        header: this.visibleElementsSnappingControlsElementsHeader,
        enabledToggle: this.visibleElementsSnappingControlsElementsEnabledToggle,
        selfEnabledToggle: this.visibleElementsSnappingControlsElementsSelfEnabledToggle,
        featureEnabledToggle: this.visibleElementsSnappingControlsElementsFeatureEnabledToggle,
        layerList: this.visibleElementsSnappingControlsElementsLayerList
      },
      undoRedoMenu: this.visibleElementsUndoRedoMenu
    };
    if (this.view) {
      params.view = this.view;
    }
    if (this.availableCreateTools) {
      params.availableCreateTools = this.availableCreateTools;
    }
    if (this.creationMode) {
      params.creationMode = this.creationMode;
    }
    if (this.defaultCreateOptions) {
      params.defaultCreateOptions = this.defaultCreateOptions;
    }
    if (this.defaultUpdateOptions) {
      params.defaultUpdateOptions = this.defaultUpdateOptions;
    }
    if (this.labelOptions) {
      params.labelOptions = this.labelOptions;
    }
    if (this.layout) {
      params.layout = this.layout;
    }
    if (this.snappingOptions) {
      params.snappingOptions = this.snappingOptions;
    }
    if (this.tooltipOptions) {
      params.tooltipOptions = this.tooltipOptions;
    }
    return params;
  }
  _setViewModelParams() {
    const params = {};
    if (this.pointSymbol) {
      params.pointSymbol = this.pointSymbol;
    }
    if (this.polylineSymbol) {
      params.polylineSymbol = this.polylineSymbol;
    }
    if (this.polygonSymbol) {
      params.polygonSymbol = this.polygonSymbol;
    }
    this.widget.viewModel.set(params);
  }
  _proxyEvents() {
    this.widget.on("create", (e) => this.sketchCreate.emit(e));
    this.widget.on("delete", (e) => this.sketchDelete.emit(e));
    this.widget.on("redo", (e) => this.sketchRedo.emit(e));
    this.widget.on("undo", (e) => this.sketchUndo.emit(e));
    this.widget.on("update", (e) => this.sketchUpdate.emit(e));
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "referenceElement": ["referenceElementWatcher"],
      "availableCreateTools": ["availableCreateToolsWatcher"],
      "creationMode": ["creationModeWatcher"],
      "defaultCreateOptions": ["defaultCreateOptionsWatcher"],
      "defaultUpdateOptions": ["defaultUpdateOptionsWatcher"],
      "icon": ["iconWatcher"],
      "labelOptions": ["labelOptionsWatcher"],
      "layer": ["layerWatcher"],
      "layout": ["layoutWatcher"],
      "pointSymbol": ["pointSymbolWatcher"],
      "polylineSymbol": ["polylineSymbolWatcher"],
      "polygonSymbol": ["polygonSymbolWatcher"],
      "snappingOptions": ["snappingOptionsWatcher"],
      "tooltipOptions": ["tooltipOptionsWatcher"],
      "visibleElementsCreateToolsPoint": ["visibleElementsCreateToolsPointWatcher"],
      "visibleElementsCreateToolsPolyline": ["visibleElementsCreateToolsPolylineWatcher"],
      "visibleElementsCreateToolsPolygon": ["visibleElementsCreateToolsPolygonWatcher"],
      "visibleElementsCreateToolsRectangle": ["visibleElementsCreateToolsRectangleWatcher"],
      "visibleElementsCreateToolsCircle": ["visibleElementsCreateToolsCircleWatcher"],
      "visibleElementsDuplicateButton": ["visibleElementsDuplicateButtonWatcher"],
      "visibleElementsSelectionToolsRectangle": ["visibleElementsSelectionToolsRectangleWatcher"],
      "visibleElementsSelectionToolsLasso": ["visibleElementsSelectionToolsLassoWatcher"],
      "visibleElementsSettingsMenu": ["visibleElementsSettingsMenuWatcher"],
      "visibleElementsLabelsToggle": ["visibleElementsLabelsToggleWatcher"],
      "visibleElementsTooltipsToggle": ["visibleElementsTooltipsToggleWatcher"],
      "visibleElementsSnappingControls": ["visibleElementsSnappingControlsWatcher"],
      "visibleElementsSnappingControlsElementsHeader": ["visibleElementsSnappingControlsElementsHeaderWatcher"],
      "visibleElementsSnappingControlsElementsEnabledToggle": ["visibleElementsSnappingControlsElementsEnabledToggleWatcher"],
      "visibleElementsSnappingControlsElementsSelfEnabledToggle": ["visibleElementsSnappingControlsElementsSelfEnabledToggleWatcher"],
      "visibleElementsSnappingControlsElementsFeatureEnabledToggle": ["visibleElementsSnappingControlsElementsFeatureEnabledToggleWatcher"],
      "visibleElementsSnappingControlsElementsLayerList": ["visibleElementsSnappingControlsElementsLayerListWatcher"],
      "visibleElementsUndoRedoMenu": ["visibleElementsUndoRedoMenuWatcher"],
      "position": ["positionWatcher"],
      "view": ["viewWatcher"]
    };
  }
};
ArcgisSketch.style = sketchCss;
export {
  ArcgisSketch as arcgis_sketch
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-sketch.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-sketch.entry-MOBT2HZP.js.map
