import {
  h as h5
} from "./chunk-AEAYH74I.js";
import {
  b as b2
} from "./chunk-VUHMQQ6M.js";
import {
  u as u3
} from "./chunk-6GQQIJM7.js";
import {
  _ as _5
} from "./chunk-PAH4PVZY.js";
import {
  E as E3,
  b,
  h as h4
} from "./chunk-M6P775BS.js";
import {
  t as t3
} from "./chunk-KSBIR2KG.js";
import {
  A,
  E as E2,
  _ as _4,
  c as c3
} from "./chunk-7A5N7G2Z.js";
import {
  r as r2,
  r2 as r3,
  t as t2
} from "./chunk-ZPC74XHC.js";
import {
  A as A2
} from "./chunk-IVGJRGD2.js";
import {
  t
} from "./chunk-MTLWPXQD.js";
import {
  r as r4
} from "./chunk-JBF6CULO.js";
import {
  c2,
  h as h2,
  u2
} from "./chunk-3DFMDDMO.js";
import {
  S,
  _ as _3,
  h as h3,
  o as o4
} from "./chunk-MEEG7XMI.js";
import {
  o as o3
} from "./chunk-LJULTBAY.js";
import {
  H
} from "./chunk-YJFPDMSR.js";
import {
  O as O2
} from "./chunk-WKVHVZW2.js";
import {
  s
} from "./chunk-RLZYC2LS.js";
import {
  e as e4
} from "./chunk-TXLJQAAN.js";
import {
  i
} from "./chunk-IRL6OOVK.js";
import {
  l,
  o as o2
} from "./chunk-CDBOQCLE.js";
import {
  D
} from "./chunk-XGTCDM4C.js";
import {
  c,
  f
} from "./chunk-Z2F5OKVA.js";
import {
  e as e3
} from "./chunk-GLF3KRAL.js";
import {
  r
} from "./chunk-AKEHDP75.js";
import {
  h
} from "./chunk-HWHMO3CO.js";
import {
  E,
  _ as _2
} from "./chunk-326OSIM5.js";
import {
  O,
  _,
  e as e2,
  g,
  o,
  u,
  z
} from "./chunk-JZBR4X6W.js";
import {
  n
} from "./chunk-OIJCMME5.js";
import {
  e
} from "./chunk-2F6FFF5T.js";

// node_modules/@arcgis/core/views/3d/interactive/editingTools/manipulatedObjectUtils.js
function t4(t5) {
  var _a;
  return (_a = t5 == null ? void 0 : t5.operations) == null ? void 0 : _a.data.geometry;
}

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/ShadedColorMaterialTechnique.js
var T = class _T extends r2 {
  initializeProgram(e5) {
    return new r3(e5.rctx, _T.shader.get().build(this.configuration), v);
  }
  _setPipelineState(e5) {
    const r5 = this.configuration, o5 = e5 === o3.NONE, i2 = e5 === o3.FrontFace;
    return S({ blending: r5.output !== o2.Color && r5.output !== o2.Alpha || !r5.transparent ? null : o5 ? c3 : A(e5), culling: h3(r5.cullFace), depthTest: { func: i2 ? O2.LESS : r5.shadingEnabled ? O2.LEQUAL : O2.LESS }, depthWrite: o5 ? r5.writeDepth ? o4 : null : E2(e5), colorWrite: _3, polygonOffset: o5 || i2 ? null : _4 });
  }
  initializePipeline() {
    return this._setPipelineState(this.configuration.transparencyPassType);
  }
};
T.shader = new t2(h5, () => import("./ShadedColorMaterial.glsl-FY6RMWKW.js"));
var j = class extends t3 {
  constructor() {
    super(...arguments), this.output = o2.Color, this.cullFace = e4.None, this.transparencyPassType = o3.NONE, this.hasSlicePlane = false, this.transparent = false, this.writeDepth = true, this.screenSizeEnabled = true, this.shadingEnabled = true, this.multipassEnabled = false, this.cullAboveGround = false;
  }
};
e([r4({ count: o2.COUNT })], j.prototype, "output", void 0), e([r4({ count: e4.COUNT })], j.prototype, "cullFace", void 0), e([r4({ count: o3.COUNT })], j.prototype, "transparencyPassType", void 0), e([r4()], j.prototype, "hasSlicePlane", void 0), e([r4()], j.prototype, "transparent", void 0), e([r4()], j.prototype, "writeDepth", void 0), e([r4()], j.prototype, "screenSizeEnabled", void 0), e([r4()], j.prototype, "shadingEnabled", void 0), e([r4()], j.prototype, "multipassEnabled", void 0), e([r4()], j.prototype, "cullAboveGround", void 0), e([r4({ constValue: false })], j.prototype, "occlusionPass", void 0);
var v = /* @__PURE__ */ new Map([[e3.POSITION, 0], [e3.NORMAL, 1], [e3.OFFSET, 2]]);

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/ShadedColorMaterial.js
var j2 = class extends c2 {
  constructor(e5) {
    super(e5, new x()), this.supportsEdges = true, this.produces = /* @__PURE__ */ new Map([[A2.OPAQUE_MATERIAL, (e6) => e6 === o2.Highlight || l(e6) && !this._isTransparent], [A2.TRANSPARENT_MATERIAL, (e6) => l(e6) && this._isTransparent && this.parameters.writeDepth], [A2.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL, (e6) => l(e6) && this._isTransparent && !this.parameters.writeDepth]]), this._configuration = new j(), this._vertexAttributeLocations = v;
  }
  getConfiguration(e5, t5) {
    return this._configuration.output = e5, this._configuration.cullFace = this.parameters.cullFace, this._configuration.hasSlicePlane = this.parameters.hasSlicePlane, this._configuration.transparent = this._isTransparent, this._configuration.writeDepth = this.parameters.writeDepth, this._configuration.screenSizeEnabled = this.parameters.screenSizeEnabled, this._configuration.shadingEnabled = this.parameters.shadingEnabled, this._configuration.transparencyPassType = t5.transparencyPassType, this._configuration.multipassEnabled = t5.multipassEnabled, this._configuration.cullAboveGround = t5.multipassTerrain.cullAboveGround, this._configuration;
  }
  intersect(e5, s2, a, c4, l2, h7) {
    if (this.parameters.screenSizeEnabled) {
      const s3 = e5.attributes.get(e3.OFFSET), u4 = { applyToVertex: (e6, n2, o5, c5) => {
        const l3 = o(O3, s3.data[3 * c5], s3.data[3 * c5 + 1], s3.data[3 * c5 + 2]), h8 = o(y, e6, n2, o5);
        return g(l3, l3, this.parameters.screenSizeScale * a.camera.computeScreenPixelSizeAt(l3)), u(h8, h8, l3), [h8[0], h8[1], h8[2]];
      }, applyToAabb: (e6) => {
        const t5 = E(e6, O3);
        return _2(e6, this.parameters.screenSizeScale * a.camera.computeScreenPixelSizeAt(t5));
      } };
      h4(e5, a, c4, l2, u4, h7);
    } else
      h4(e5, a, c4, l2, void 0, h7);
  }
  createGLMaterial(e5) {
    return new v2(e5);
  }
  createBufferWriter() {
    return new z2(this.parameters.screenSizeEnabled);
  }
  get _isTransparent() {
    return this.parameters.color[3] < 1 || this.parameters.forceTransparentMode;
  }
};
var v2 = class extends t {
  beginSlot(e5) {
    return this.ensureTechnique(T, e5);
  }
};
var x = class extends u2 {
  constructor() {
    super(...arguments), this.color = r(1, 1, 1, 1), this.shadingTint = r(0, 0, 0, 0.25), this.shadingDirection = z(n(), [0.5, -0.5, -0.5]), this.screenSizeScale = 14, this.forceTransparentMode = false, this.writeDepth = true, this.hasSlicePlane = false, this.cullFace = e4.None, this.screenSizeEnabled = false, this.shadingEnabled = true;
  }
};
var z2 = class {
  constructor(e5) {
    this.screenSizeEnabled = e5;
    const t5 = H().vec3f(e3.POSITION).vec3f(e3.NORMAL);
    this.screenSizeEnabled && t5.vec3f(e3.OFFSET), this.vertexBufferLayout = t5;
  }
  elementCount(e5) {
    return e5.attributes.get(e3.POSITION).indices.length;
  }
  write(e5, t5, r5, i2, s2) {
    if (E3(r5, this.vertexBufferLayout, e5, t5, i2, s2), this.screenSizeEnabled) {
      if (!r5.attributes.has(e3.OFFSET))
        throw new Error(`${e3.OFFSET} vertex attribute required for screenSizeEnabled ShadedColorMaterial`);
      {
        const e6 = r5.attributes.get(e3.OFFSET);
        s(3 === e6.size);
        const a = i2.getField(e3.OFFSET, i);
        if (!a)
          throw new Error("unable to acquire view for " + e3.OFFSET);
        b(e6, t5, a, s2);
      }
    }
  }
};
var O3 = n();
var y = n();

// node_modules/@arcgis/core/views/3d/interactive/manipulatorUtils.js
function f2(t5, r5 = h2.OccludeAndTransparent, o5 = true) {
  const n2 = D(t5), i2 = !(t5[3] < 1);
  return o5 ? new j2({ color: n2, writeDepth: i2, cullFace: e4.Back, renderOccluded: r5, isDecoration: true }) : new _5({ color: n2, writeDepth: i2, cullFace: e4.Back, renderOccluded: r5, isDecoration: true });
}
function h6(t5, r5 = h2.OccludeAndTransparent) {
  const o5 = D(t5);
  return new _5({ color: o5, writeDepth: true, cullFace: e4.Front, renderOccluded: r5, isDecoration: true });
}
var j3 = Object.freeze({ calloutLength: 40, calloutWidth: 1, discRadius: 27, focusMultiplier: 1.1 });
var b3 = Object.freeze({ autoScaleRenderObjects: false, worldSized: true });
function w(e5, i2, l2, s2) {
  const u4 = e2(c.get(), e5, l2), m = O4(u4, _(c.get(), s2, u4), l2, f.get());
  h(m, m);
  const p = O(c.get(), i2, m);
  return Math.atan2(p[1], p[0]);
}
function O4(e5, t5, r5, n2) {
  const a = z(c.get(), e5), l2 = z(c.get(), t5), s2 = _(c.get(), a, l2);
  return n2[0] = a[0], n2[1] = a[1], n2[2] = a[2], n2[3] = 0, n2[4] = l2[0], n2[5] = l2[1], n2[6] = l2[2], n2[7] = 0, n2[8] = s2[0], n2[9] = s2[1], n2[10] = s2[2], n2[11] = 0, n2[12] = r5[0], n2[13] = r5[1], n2[14] = r5[2], n2[15] = 1, n2;
}
function D2(e5, t5) {
  const r5 = e5.getViewForGraphic(t5);
  return null != r5 && "computeAttachmentOrigin" in r5 ? r5.computeAttachmentOrigin(t5, e5.spatialReference) : null;
}
function F(e5, t5) {
  const r5 = t5.origin;
  null == r5 ? y2(e5, t4(t5)) : e5.elevationAlignedLocation = r5;
}
function y2(e5, t5) {
  if (null == t5)
    return;
  const r5 = "mesh" === t5.type ? t5.anchor : b2(t5);
  null != r5 && (e5.location = u3(r5));
}

export {
  t4 as t,
  j2 as j,
  f2 as f,
  h6 as h,
  j3 as j2,
  b3 as b,
  w,
  O4 as O,
  D2 as D,
  F
};
//# sourceMappingURL=chunk-TKMRXVLK.js.map
