import {
  i as i2
} from "./chunk-67GTVIII.js";
import {
  b
} from "./chunk-3AIILHI5.js";
import {
  s
} from "./chunk-SA77Z3WI.js";
import {
  J
} from "./chunk-RO3CTAP7.js";
import {
  c
} from "./chunk-LQBHIBXV.js";
import {
  h
} from "./chunk-USOPZ2Q6.js";
import {
  d as d2,
  i,
  u
} from "./chunk-BOAEEYBE.js";
import {
  B,
  F
} from "./chunk-2ICUS4HL.js";
import {
  x
} from "./chunk-JZBR4X6W.js";
import {
  n
} from "./chunk-OIJCMME5.js";
import {
  C,
  d
} from "./chunk-Z4Y53NDM.js";
import {
  o
} from "./chunk-TXBMNSNF.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";

// node_modules/@arcgis/core/views/interactive/support/utils.js
function s2(s3) {
  let t = 0, a2 = 0, e2 = 0;
  return s3 ? ("cim" === s3.type && s3.data.symbol && "symbolLayers" in s3.data.symbol && s3.data.symbol.symbolLayers && s3.data.symbol.symbolLayers.map((o2) => {
    "CIMVectorMarker" === o2.type && o2.anchorPoint && (Math.abs(o2.anchorPoint.x) > t && (t = o2.anchorPoint.x), Math.abs(o2.anchorPoint.y) > a2 && (a2 = o2.anchorPoint.y), null != o2.size && o2.size > e2 && (e2 = o2.size));
  }), t = u(t), a2 = u(a2), e2 = u(e2), { offsetX: t, offsetY: a2, size: e2 }) : { offsetX: t, offsetY: a2, size: e2 };
}

// node_modules/@arcgis/core/views/interactive/GraphicManipulator.js
var S2 = class extends S {
  set graphic(t) {
    this._circleCollisionCache = null, this._originalSymbol = t.symbol, this._set("graphic", t), this.attachSymbolChanged();
  }
  get elevationInfo() {
    const { layer: t } = this.graphic, e2 = t && "elevationInfo" in t ? t.elevationInfo : null, o2 = s(this.graphic), i3 = e2 ? e2.offset : 0;
    return new h({ mode: o2, offset: i3 });
  }
  set focusedSymbol(t) {
    t !== this._get("focusedSymbol") && (this._set("focusedSymbol", t), this._updateGraphicSymbol(), this._circleCollisionCache = null);
  }
  grabbableForEvent() {
    return true;
  }
  set grabbing(t) {
    t !== this._get("grabbing") && (this._set("grabbing", t), this._updateGraphicSymbol());
  }
  set hovering(t) {
    t !== this._get("hovering") && (this._set("hovering", t), this._updateGraphicSymbol());
  }
  set selected(t) {
    t !== this._get("selected") && (this._set("selected", t), this._updateGraphicSymbol(), this.events.emit("select-changed", { action: t ? "select" : "deselect" }));
  }
  get _focused() {
    return this._get("hovering") || this._get("grabbing");
  }
  constructor(t) {
    super(t), this.layer = null, this.interactive = true, this.selectable = false, this.grabbable = true, this.dragging = false, this.cursor = null, this.consumesClicks = true, this.events = new o.EventEmitter(), this._circleCollisionCache = null, this._graphicSymbolChangedHandle = null, this._originalSymbol = null;
  }
  destroy() {
    this.detachSymbolChanged(), this._resetGraphicSymbol(), this._set("view", null);
  }
  intersectionDistance(t) {
    const e2 = this.graphic;
    if (false === e2.visible)
      return null;
    const o2 = e2.geometry;
    if (null == o2)
      return null;
    const i3 = this._get("focusedSymbol"), s3 = null != i3 ? i3 : e2.symbol;
    return "2d" === this.view.type ? this._intersectDistance2D(this.view, t, o2, s3) : this._intersectDistance3D(this.view, t, e2);
  }
  attach() {
    this.attachSymbolChanged(), null != this.layer && this.layer.add(this.graphic);
  }
  detach() {
    this.detachSymbolChanged(), this._resetGraphicSymbol(), null != this.layer && this.layer.remove(this.graphic);
  }
  attachSymbolChanged() {
    this.detachSymbolChanged(), this._graphicSymbolChangedHandle = d(() => {
      var _a;
      return (_a = this.graphic) == null ? void 0 : _a.symbol;
    }, (t) => {
      null != t && t !== this.focusedSymbol && t !== this._originalSymbol && (this._originalSymbol = t, this._focused && null != this.focusedSymbol && (this.graphic.symbol = this.focusedSymbol));
    }, C);
  }
  detachSymbolChanged() {
    null != this._graphicSymbolChangedHandle && (this._graphicSymbolChangedHandle.remove(), this._graphicSymbolChangedHandle = null);
  }
  onElevationChange() {
  }
  onViewChange() {
  }
  _updateGraphicSymbol() {
    this.graphic.symbol = this._focused && null != this.focusedSymbol ? this.focusedSymbol : this._originalSymbol;
  }
  _resetGraphicSymbol() {
    this.graphic.symbol = this._originalSymbol;
  }
  _intersectDistance2D(t, e2, o2, i3) {
    var _a, _b;
    if (null == (i3 = i3 || J(o2)))
      return null;
    const s3 = 1;
    let n2 = this._circleCollisionCache;
    if ("point" === o2.type && "cim" === i3.type && "CIMPointSymbol" === ((_a = i3.data.symbol) == null ? void 0 : _a.type) && i3.data.symbol.symbolLayers) {
      const { offsetX: l, offsetY: n3, size: a2 } = s2(i3), c2 = d2(e2, j), p = a2 / 2, m = t.toScreen(o2), u2 = m.x + l, y2 = m.y + n3;
      return b(c2, [u2, y2]) < p * p ? s3 : null;
    }
    if ("point" !== o2.type || "simple-marker" !== i3.type)
      return i2(e2, o2, t) ? s3 : null;
    if (null == n2 || !n2.originalPoint.equals(o2)) {
      const e3 = o2, s4 = t.spatialReference;
      if (F(e3.spatialReference, s4)) {
        const t2 = B(e3, s4);
        n2 = { originalPoint: e3.clone(), mapPoint: t2, radiusPx: u(i3.size) }, this._circleCollisionCache = n2;
      }
    }
    if (null != n2) {
      const o3 = d2(e2, j), a2 = (_b = t.toScreen) == null ? void 0 : _b.call(t, n2.mapPoint);
      if (!a2)
        return null;
      const c2 = n2.radiusPx, p = a2.x + u(i3.xoffset), m = a2.y - u(i3.yoffset);
      return b(o3, [p, m]) < c2 * c2 ? s3 : null;
    }
    return null;
  }
  _intersectDistance3D(t, e2, o2) {
    const i3 = t.toMap(e2, { include: [o2] });
    return i3 && c(i3, C2, t.renderSpatialReference) ? x(C2, t.state.camera.eye) : null;
  }
};
e([y({ constructOnly: true, nonNullable: true })], S2.prototype, "graphic", null), e([y()], S2.prototype, "elevationInfo", null), e([y({ constructOnly: true, nonNullable: true })], S2.prototype, "view", void 0), e([y({ value: null })], S2.prototype, "focusedSymbol", null), e([y({ constructOnly: true })], S2.prototype, "layer", void 0), e([y()], S2.prototype, "interactive", void 0), e([y()], S2.prototype, "selectable", void 0), e([y()], S2.prototype, "grabbable", void 0), e([y({ value: false })], S2.prototype, "grabbing", null), e([y()], S2.prototype, "dragging", void 0), e([y()], S2.prototype, "hovering", null), e([y({ value: false })], S2.prototype, "selected", null), e([y()], S2.prototype, "cursor", void 0), S2 = e([a("esri.views.interactive.GraphicManipulator")], S2);
var C2 = n();
var j = i();

export {
  s2 as s,
  S2 as S
};
//# sourceMappingURL=chunk-CGJEHQM2.js.map
