import {
  M
} from "./chunk-UAITPI2I.js";
import {
  t as t3
} from "./chunk-7G5NQR7Q.js";
import {
  c as c2
} from "./chunk-KDHW2KXU.js";
import {
  l,
  p
} from "./chunk-ID25T22U.js";
import {
  h as h3
} from "./chunk-HBBLDSW6.js";
import {
  o as o3
} from "./chunk-4VVENLLF.js";
import {
  b
} from "./chunk-5T7MASZO.js";
import {
  H
} from "./chunk-WCBHO6BH.js";
import {
  m
} from "./chunk-QCUK7T7Y.js";
import {
  r,
  t as t2
} from "./chunk-XTY645DH.js";
import {
  h as h2
} from "./chunk-3DFMDDMO.js";
import {
  t
} from "./chunk-R4SGP2EA.js";
import {
  i
} from "./chunk-SA77Z3WI.js";
import {
  e as e2
} from "./chunk-BKOYOJBG.js";
import {
  E as E2,
  G,
  R,
  U
} from "./chunk-XGTCDM4C.js";
import {
  e as e3
} from "./chunk-GLF3KRAL.js";
import {
  E,
  a as a2
} from "./chunk-5MMGIT64.js";
import {
  h
} from "./chunk-USOPZ2Q6.js";
import {
  c
} from "./chunk-326OSIM5.js";
import {
  u as u2
} from "./chunk-WDPG5BMO.js";
import {
  n as n2
} from "./chunk-GBF2OQAY.js";
import {
  g,
  o as o2,
  u
} from "./chunk-JZBR4X6W.js";
import {
  n
} from "./chunk-OIJCMME5.js";
import {
  o
} from "./chunk-TXBMNSNF.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";

// node_modules/@arcgis/core/views/3d/interactive/editingTools/settings.js
var d = 0.3;
function u3(o4, t4) {
  t4 && Object.assign(o4, t4);
}
var g2 = class {
  constructor(o4) {
    this.height = 90, this.coneHeight = 40, this.coneWidth = 23, this.width = 3, this.renderOccluded = h2.Opaque, this.color = o4.accent;
  }
};
var f = class {
  constructor({ colors: o4, ...t4 }) {
    this.size = 11, this.outlineSize = 1, this.collisionPadding = 9, this.color = o4.accent, this.outlineColor = o4.outline, this.renderOccluded = h2.Opaque, this.hoverOutlineColor = o4.selectedOutline, u3(this, t4);
  }
  applyColor(o4) {
    this._apply(this.color, o4);
  }
  applyOutline(o4) {
    this._apply(this.outlineColor, o4);
  }
  applyHoverOutline(o4) {
    this._apply(this.hoverOutlineColor, o4);
  }
  _apply(o4, t4) {
    t4.setParameters({ color: E2(o4), renderOccluded: this.renderOccluded });
  }
};
var w = class {
  constructor({ colors: o4, ...t4 }) {
    this.size = 40, this.height = 0.2, this.offset = 0.25, this.collisionPadding = 2, this.renderOccluded = h2.Transparent, this.minSquaredEdgeLength = 900, this.color = R(o4.accent, 0.5), this.hoverColor = o4.accent, u3(this, t4);
  }
  applyColor(o4) {
    this._apply(this.color, o4);
  }
  applyHover(o4) {
    this._apply(this.hoverColor, o4);
  }
  _apply(o4, t4) {
    t4.setParameters({ color: E2(o4), renderOccluded: this.renderOccluded });
  }
};
var C = class {
  constructor(o4) {
    this.vertex = new f({ colors: o4, color: o4.accent, outlineColor: o4.outline }), this.edge = new f({ colors: o4, color: U(R(o4.accent, 2 / 3), 0.5), outlineColor: R(o4.outline, 0.5), size: 8, collisionPadding: 8 }), this.selected = new f({ colors: o4, color: o4.selected, outlineColor: o4.outline }), this.edgeOffset = new w({ colors: o4 });
  }
};
var m2 = class {
  constructor({ colors: o4, ...t4 }) {
    this.width = 1.5, this.stipplePattern = h3(3.3), this.falloff = 0, this.innerWidth = 1.5, this.renderOccluded = h2.OccludeAndTransparent, this.color = o4.selected, this.stippleOffColor = o4.outline, this.innerColor = o4.selected, u3(this, t4);
  }
  apply(o4) {
    o4.color = E2(this.color), o4.width = this.width, o4.stipplePattern = this.stipplePattern, o4.stippleOffColor = E2(this.stippleOffColor), o4.falloff = this.falloff, o4.innerWidth = this.innerWidth, o4.innerColor = E2(this.innerColor), o4.renderOccluded = this.renderOccluded;
  }
};
var O = class {
  constructor({ colors: o4, ...t4 }) {
    this.size = 4, this.outlineSize = 1, this.shape = "square", this.color = o4.selected, this.outlineColor = o4.outline, u3(this, t4);
  }
  apply(o4) {
    o4.color = E2(this.color), o4.size = this.size, o4.outlineSize = this.outlineSize, o4.outlineColor = E2(this.outlineColor), o4.primitive = this.shape;
  }
};
var y2 = class {
  constructor({ colors: o4, ...t4 }) {
    this.innerWidth = 1, this.glowWidth = 8, this.glowFalloff = 8, this.globalAlpha = d, this.globalAlphaContrastBoost = 1.5, this.radius = 3, this.innerColor = o4.selected, this.glowColor = o4.accent, this.heightFillColor = o4.accent, u3(this, t4);
  }
  apply(o4, e4 = 1) {
    const l2 = { glowColor: u2.toUnitRGB(this.glowColor), glowFalloff: this.glowFalloff, glowWidth: this.glowWidth, innerColor: u2.toUnitRGB(this.innerColor), innerWidth: this.innerWidth, globalAlpha: this.globalAlpha * e4 * this.glowColor.a, globalAlphaContrastBoost: this.globalAlphaContrastBoost, intersectsLineRadius: this.radius };
    "style" in o4 ? o4.style = l2 : o4.laserlineStyle = l2;
  }
};
var A = class {
  constructor(o4) {
    this.outline = new m2({ colors: o4, color: o4.stippleOff, renderOccluded: h2.OccludeAndTransparentStencil, stippleOffColor: o4.stippleOn, innerWidth: 0 }), this.staged = new m2({ colors: o4, color: o4.stippleOn, renderOccluded: h2.OccludeAndTransparentStencil, innerColor: o4.stagedSolid, stippleOffColor: o4.stippleOff }), this.shadowStyle = new y2({ colors: o4, globalAlpha: d, glowColor: o4.accent, glowFalloff: 8, glowWidth: 8, innerColor: o4.selected, innerWidth: 1 });
  }
};
var W = class {
  constructor(o4) {
    this.outline = new O({ colors: o4, color: o4.selected, outlineColor: o4.outline, outlineSize: 1, shape: "circle", size: 4 }), this.shadowStyle = new y2({ colors: o4, globalAlpha: d, glowColor: o4.accent, glowFalloff: 1.5, glowWidth: 6, innerColor: o4.selected, innerWidth: 1, radius: 2 });
  }
};
var b2 = class extends m2 {
  constructor({ colors: o4, ...t4 }) {
    super({ colors: o4 }), this.extensionType = M.GROUND_RAY, u3(this, t4);
  }
};
var S2 = class {
  constructor(o4) {
    this.laserlineAlphaMultiplier = 1.5, this.heightPlaneAngleCutoff = 20, this.lineObjects = new A(o4), this.pointObjects = new W(o4), this.heightPlane = new y2({ colors: o4, globalAlpha: d, glowColor: o4.accent, glowFalloff: 8, glowWidth: 8, innerColor: o4.selected, innerWidth: 1 }), this.heightBox = new y2({ colors: o4, globalAlpha: d, glowColor: o4.accent, glowFalloff: 8, glowWidth: 8, innerColor: o4.selected, innerWidth: 0, heightFillColor: o4.accent }), this.zVerticalLine = new b2({ colors: o4, color: R(o4.accent, 5 * d / 3), falloff: 2, innerColor: R(o4.selected, 0), renderOccluded: h2.OccludeAndTransparent, stipplePattern: null, width: 5, extensionType: M.GROUND_RAY });
  }
};
var j = class extends S {
  constructor(o4) {
    super(o4);
  }
  get colors() {
    const o4 = this.getTheme().accentColor, e4 = o4.a;
    return { accent: o4, contrast: G(o4), selected: u2.fromArray([255, 255, 255, e4]), selectedOutline: u2.fromArray([255, 255, 255, e4]), staged: u2.fromArray([12, 207, 255, e4]), stagedSolid: u2.fromArray([12, 207, 255, 1]), outline: u2.fromArray([0, 0, 0, 0.5 * e4]), stippleOn: u2.fromArray([255, 255, 255, 1]), stippleOff: u2.fromArray([0, 0, 0, 0.5]) };
  }
  get visualElements() {
    return new S2(this.colors);
  }
  get manipulators() {
    return new C(this.colors);
  }
  get zManipulator() {
    return new g2(this.colors);
  }
};
e([y()], j.prototype, "colors", null), e([y()], j.prototype, "visualElements", null), e([y()], j.prototype, "manipulators", null), e([y()], j.prototype, "zManipulator", null), e([y()], j.prototype, "getTheme", void 0), j = e([a("esri.views.3d.interactive.editingTools.settings")], j);

// node_modules/@arcgis/core/views/3d/interactive/visualElements/OutlineVisualElement.js
var w2 = class extends t3 {
  constructor(t4) {
    super(t4), this._attachmentOrigin = e2(0, 0, 0, null), this._attachmentOriginDirty = true, this.events = new o(), this._geometry = null, this._width = 1, this._color = r(1, 0, 1, 1), this._innerWidth = 0, this._innerColor = r(1, 1, 1, 1), this._stipplePattern = null, this._stippleOffColor = null, this._falloff = 0, this._elevationInfo = null, this._laserlineStyle = null, this._laserlineEnabled = false, this._renderOccluded = h2.OccludeAndTransparentStencil, this._attachmentOrigin.spatialReference = t4.view.spatialReference, this._laserline = new c2({ view: t4.view, isDecoration: t4.isDecoration }), this.applyProperties(t4), this.attached = t4.attached ?? true;
  }
  destroy() {
    this._laserline.destroy(), super.destroy();
  }
  createObject3DResourceFactory(e4) {
    return { view: e4, createResources: (e5) => this._createObject3DResources(e5), destroyResources: D, recreateGeometry: (e5, t4) => {
      e5.geometries.length = 0, this._recreateGeometry(t4, e5.material, e5.geometries);
    } };
  }
  createDrapedResourceFactory(e4) {
    return { view: e4, createResources: () => this._createDrapedResources(), destroyResources: D, recreateGeometry: (e5) => {
      e5.geometries = this._createRenderGeometriesDraped(e5.material), this._attachmentOriginChanged();
    } };
  }
  get _laserlineAttached() {
    return this.attached && this.visible && null != this._laserlineStyle && !this.isDraped && this.laserlineEnabled;
  }
  onAttachedChange(e4) {
    this._laserline.attached = this._laserlineAttached, e4 && this._attachmentOriginChanged();
  }
  get geometry() {
    return this._geometry;
  }
  set geometry(e4) {
    this._geometry = e4, this.recreateGeometry();
  }
  get width() {
    return this._width;
  }
  set width(e4) {
    e4 !== this._width && (this._width = e4, this._updateMaterial());
  }
  get color() {
    return this._color;
  }
  set color(e4) {
    E(e4, this._color) || (a2(this._color, e4), this._updateMaterial());
  }
  get innerWidth() {
    return this._innerWidth;
  }
  set innerWidth(e4) {
    e4 !== this._innerWidth && (this._innerWidth = e4, this._updateMaterial());
  }
  get innerColor() {
    return this._innerColor;
  }
  set innerColor(e4) {
    E(e4, this._innerColor) || (a2(this._innerColor, e4), this._updateMaterial());
  }
  get stipplePattern() {
    return this._stipplePattern;
  }
  set stipplePattern(e4) {
    const t4 = null != e4 != (null != this._stipplePattern);
    this._stipplePattern = e4, t4 ? this.recreate() : this._updateMaterial();
  }
  get stippleOffColor() {
    return this._stippleOffColor;
  }
  set stippleOffColor(e4) {
    e4 && this._stippleOffColor && E(e4, this._stippleOffColor) || (this._stippleOffColor = e4 ? t2(e4) : null, this._updateMaterial());
  }
  get falloff() {
    return this._falloff;
  }
  set falloff(e4) {
    e4 !== this._falloff && (this._falloff = e4, this._updateMaterial());
  }
  get elevationInfo() {
    return this._elevationInfo;
  }
  set elevationInfo(e4) {
    this._elevationInfo = e4, this.recreateGeometry();
  }
  get laserlineStyle() {
    return this._laserlineStyle;
  }
  set laserlineStyle(e4) {
    this._laserlineStyle = e4, this._laserline.attached = this._laserlineAttached, null != e4 && (this._laserline.style = e4);
  }
  get laserlineEnabled() {
    return this._laserlineEnabled;
  }
  set laserlineEnabled(e4) {
    this._laserlineEnabled !== e4 && (this._laserlineEnabled = e4, this._laserline.attached = this._laserlineAttached);
  }
  get renderOccluded() {
    return this._renderOccluded;
  }
  set renderOccluded(e4) {
    e4 !== this._renderOccluded && (this._renderOccluded = e4, this._updateMaterial());
  }
  get attachmentOrigin() {
    var _a;
    if (!this._attachmentOriginDirty)
      return this._attachmentOrigin;
    const e4 = (_a = this.object3dResources.resources) == null ? void 0 : _a.geometries;
    if (!e4 || 0 === e4.length)
      return null;
    o2(E3, 0, 0, 0);
    let s = 0;
    for (const t4 of e4)
      t4.computeAttachmentOrigin(P) && (u(E3, E3, P), s++);
    return 0 === s ? null : (g(E3, E3, 1 / s), this.view.renderCoordsHelper.fromRenderCoords(E3, this._attachmentOrigin), this._attachmentOriginDirty = false, this._attachmentOrigin);
  }
  _updateMaterial() {
    null != this.object3dResources.resources && this.object3dResources.resources.material.setParameters(this._materialParameters), null != this.drapedResources.resources && this.drapedResources.resources.material.setParameters(this._materialParameters);
  }
  get _isClosed() {
    return null != this.geometry && "polygon" === this.geometry.type;
  }
  get _materialParameters() {
    return { width: this._width, color: this._color, stippleOffColor: this._stippleOffColor, stipplePattern: this._stipplePattern, stipplePreferContinuous: false, isClosed: this._isClosed, falloff: this._falloff, innerColor: this._innerColor, innerWidth: this._innerWidth, join: "round", hasPolygonOffset: true, renderOccluded: this._normalizedRenderOccluded, isDecoration: this.isDecoration };
  }
  get _normalizedRenderOccluded() {
    return this.isDraped && this._renderOccluded === h2.OccludeAndTransparentStencil ? h2.OccludeAndTransparent : this._renderOccluded;
  }
  _recreateGeometry(e4, t4, r2) {
    this._createRenderGeometries(t4, r2);
    for (const i2 of r2)
      e4.addGeometry(i2);
    this._attachmentOriginChanged();
  }
  _attachmentOriginChanged() {
    this._attachmentOriginDirty = true, this.events.emit("attachment-origin-changed");
  }
  _createObject3DResources(e4) {
    const t4 = new H(this._materialParameters), r2 = new Array();
    return this._recreateGeometry(e4, t4, r2), { material: t4, geometries: r2, forEach: (e5) => {
      e5(t4), r2.forEach(e5);
    } };
  }
  _createDrapedResources() {
    const e4 = new H(this._materialParameters);
    return { material: e4, geometries: this._createRenderGeometriesDraped(e4) };
  }
  _createRenderGeometriesDraped(e4) {
    const { geometry: t4, view: r2 } = this, i2 = r2.basemapTerrain.spatialReference;
    if (null == t4 || null == i2)
      return [];
    return l(t4, i2).lines.map(({ position: t5 }) => {
      const s = { overlayInfo: { spatialReference: i2, renderCoordsHelper: r2.renderCoordsHelper }, attributeData: { position: t5 }, removeDuplicateStartEnd: this._isClosed };
      return new m(b(e4, s));
    });
  }
  calculateMapBounds(e4) {
    if (null == this.object3dResources.resources)
      return false;
    const t4 = this.view.renderCoordsHelper;
    for (const r2 of this.object3dResources.resources.geometries) {
      const i2 = r2.attributes.get(e3.POSITION), s = t(i2.data.length);
      n2(i2.data, t4.spatialReference, 0, s, this.view.spatialReference, 0, i2.data.length / 3), c(e4, s);
    }
    return true;
  }
  _createRenderGeometries(e4, t4) {
    const r2 = this.geometry;
    if (null == r2)
      return;
    const i2 = p(r2, this.view.elevationProvider, this.view.renderCoordsHelper, o3.fromElevationInfo(this.elevationInfo ?? new h({ mode: i(r2, null) }))), s = new Array();
    for (const { position: n3, mapPositions: o4 } of i2.lines) {
      const r3 = { mapPositions: o4, attributeData: { position: n3 }, removeDuplicateStartEnd: this._isClosed };
      t4.push(b(e4, r3)), s.push(n3);
    }
    this._laserline.pathVerticalPlane = s;
  }
};
function D(e4) {
  e4.geometries = [];
}
var P = n();
var E3 = n();

export {
  j,
  w2 as w
};
//# sourceMappingURL=chunk-UP44TGUG.js.map
