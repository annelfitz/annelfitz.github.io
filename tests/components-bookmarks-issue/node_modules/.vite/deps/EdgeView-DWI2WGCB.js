import {
  r as r8
} from "./chunk-EHB2WTOQ.js";
import {
  A as A2
} from "./chunk-B2RI7K6T.js";
import {
  e as e8
} from "./chunk-G7RYWCEO.js";
import {
  a as a3
} from "./chunk-RSP7TSD7.js";
import {
  _ as _2
} from "./chunk-RQW2N53A.js";
import {
  O as O2
} from "./chunk-WCBHO6BH.js";
import {
  r as r7
} from "./chunk-RFBA77K3.js";
import "./chunk-PMFQ2A2V.js";
import "./chunk-HHAESKQ6.js";
import "./chunk-4MJOJUFR.js";
import {
  e as e7
} from "./chunk-MCZ4QOSQ.js";
import "./chunk-BHOYA5LV.js";
import "./chunk-J5F4VILS.js";
import {
  t as t7
} from "./chunk-KSBIR2KG.js";
import "./chunk-XVQGALI7.js";
import "./chunk-XFQIXBHG.js";
import "./chunk-MVSN2HAN.js";
import "./chunk-7A5N7G2Z.js";
import "./chunk-OM7WUMCL.js";
import {
  r as r4,
  r2 as r5,
  t as t5
} from "./chunk-ZPC74XHC.js";
import "./chunk-IVGJRGD2.js";
import "./chunk-MTLWPXQD.js";
import "./chunk-ECIXBYOQ.js";
import "./chunk-QFKFOAJ6.js";
import "./chunk-LOPMLCHC.js";
import "./chunk-JIR2YP6A.js";
import "./chunk-LANUNBDP.js";
import {
  r as r6
} from "./chunk-JBF6CULO.js";
import {
  F as F2,
  W
} from "./chunk-DRCNNCTI.js";
import "./chunk-MKOOEINB.js";
import "./chunk-JKOHBDRD.js";
import "./chunk-MDSRD3WV.js";
import "./chunk-3DFMDDMO.js";
import {
  t as t6
} from "./chunk-4BCSYJOQ.js";
import "./chunk-GMUCR2DJ.js";
import "./chunk-HBRJJENW.js";
import "./chunk-VHY5K2VE.js";
import "./chunk-6ENXMQPD.js";
import "./chunk-FV43HSGW.js";
import "./chunk-ZR7OV2EH.js";
import "./chunk-U76EZJUZ.js";
import {
  S as S3,
  _,
  l as l3
} from "./chunk-MEEG7XMI.js";
import "./chunk-LJULTBAY.js";
import "./chunk-MUMDKJ7Y.js";
import "./chunk-6MGK5WBT.js";
import "./chunk-CPZW2LMK.js";
import "./chunk-QR7J3YDY.js";
import "./chunk-GO2OGJDG.js";
import "./chunk-UYMREM3D.js";
import {
  h as h3
} from "./chunk-4YGBWYMD.js";
import {
  e2 as e6,
  m
} from "./chunk-JTUYA5FE.js";
import "./chunk-UNTQATE2.js";
import "./chunk-5YY6NZNY.js";
import "./chunk-YUWVLORR.js";
import "./chunk-7MYYCSEB.js";
import "./chunk-ESK2YRQM.js";
import "./chunk-LOGKJYZD.js";
import {
  E as E2,
  I,
  N,
  S as S2,
  r as r3,
  w as w2
} from "./chunk-L7WI7KB2.js";
import "./chunk-3GY64OYE.js";
import "./chunk-QIEXJLRX.js";
import "./chunk-UNTPHF5R.js";
import "./chunk-YJFPDMSR.js";
import "./chunk-FFG7BDAP.js";
import {
  h as h2
} from "./chunk-I4SHZ6P5.js";
import {
  t as t4
} from "./chunk-BKBB7AOV.js";
import "./chunk-H7T5AB2S.js";
import {
  E,
  F,
  O,
  R,
  T
} from "./chunk-WKVHVZW2.js";
import "./chunk-KSZESDGM.js";
import "./chunk-CHJMCUAV.js";
import "./chunk-5P74D2TG.js";
import "./chunk-33LWZO2E.js";
import "./chunk-YT66FIGM.js";
import "./chunk-3IDXRFXE.js";
import "./chunk-TLU6YG3S.js";
import "./chunk-RLZYC2LS.js";
import "./chunk-WEER6QME.js";
import "./chunk-TXLJQAAN.js";
import "./chunk-IRL6OOVK.js";
import "./chunk-3AIILHI5.js";
import {
  A
} from "./chunk-WTKV7W5Z.js";
import {
  p,
  x as x2
} from "./chunk-D4Y7YHG7.js";
import {
  C
} from "./chunk-AL5NKCU5.js";
import "./chunk-6MBDB46F.js";
import {
  o as o2
} from "./chunk-7JR6S3WL.js";
import "./chunk-CSSLIU64.js";
import {
  a as a2
} from "./chunk-CJNDQ2LH.js";
import "./chunk-B4E4X2TN.js";
import "./chunk-HS6YI5DU.js";
import "./chunk-CDBOQCLE.js";
import "./chunk-RSRUEM5U.js";
import "./chunk-HFJMEXIX.js";
import "./chunk-VYSGSKHB.js";
import "./chunk-DGJJJ2DD.js";
import "./chunk-UAFQMHYI.js";
import "./chunk-IDPLBNJX.js";
import "./chunk-ZHAZR5C3.js";
import "./chunk-P4MNTMCZ.js";
import "./chunk-YH2IYJYF.js";
import "./chunk-BSPKLAHD.js";
import "./chunk-GGHKH3LP.js";
import "./chunk-VS6AHHIY.js";
import {
  l as l2
} from "./chunk-WZJNHZ6H.js";
import {
  V,
  Z
} from "./chunk-XMYPMIYH.js";
import "./chunk-FQLGRQKL.js";
import {
  t as t3
} from "./chunk-42DUJ2CX.js";
import "./chunk-B35SNV2V.js";
import "./chunk-Z2F5OKVA.js";
import "./chunk-UQA6M3KF.js";
import {
  e as e5
} from "./chunk-GLF3KRAL.js";
import "./chunk-ZLQTPFTL.js";
import {
  n as n4,
  s,
  u as u2
} from "./chunk-HZSGATFT.js";
import "./chunk-KNMQQRV7.js";
import {
  e as e3
} from "./chunk-N5GQOIDP.js";
import {
  e as e4
} from "./chunk-NFB6O77E.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-SCHTG6ZQ.js";
import {
  n as n3
} from "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-ZPYA32PH.js";
import {
  e as e2
} from "./chunk-OCF7OAES.js";
import {
  K,
  P,
  o,
  r as r2
} from "./chunk-JZBR4X6W.js";
import {
  n as n2,
  t as t2
} from "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import {
  l
} from "./chunk-C26KUZ46.js";
import {
  b,
  w
} from "./chunk-JGDJR5EV.js";
import {
  r,
  t,
  u
} from "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n
} from "./chunk-7RBRCL6S.js";
import {
  h,
  x
} from "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/localOriginHelper.js
function n5(n8, o7) {
  const t8 = -n8[0], c3 = -n8[1], f3 = -n8[2], i3 = o7[3], s2 = o7[7], u4 = o7[11], e11 = o7[15];
  o7[0] += i3 * t8, o7[1] += i3 * c3, o7[2] += i3 * f3, o7[4] += s2 * t8, o7[5] += s2 * c3, o7[6] += s2 * f3, o7[8] += u4 * t8, o7[9] += u4 * c3, o7[10] += u4 * f3, o7[12] += e11 * t8, o7[13] += e11 * c3, o7[14] += e11 * f3;
}
function o3(n8, o7) {
  const t8 = n8[0], c3 = n8[1], f3 = n8[2];
  o7[12] += t8 * o7[0] + c3 * o7[4] + f3 * o7[8], o7[13] += t8 * o7[1] + c3 * o7[5] + f3 * o7[9], o7[14] += t8 * o7[2] + c3 * o7[6] + f3 * o7[10], o7[14] += t8 * o7[3] + c3 * o7[7] + f3 * o7[11];
}

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/LocalOriginManager.js
var e9 = class {
  constructor(i3) {
    this._factory = i3, this._originData = /* @__PURE__ */ new Map();
  }
  acquire(i3) {
    return this.register(this._factory.getOrigin(i3));
  }
  register(i3) {
    const t8 = this._originData.get(i3.id) || new o4(i3);
    return t8.refCount++, this._originData.has(t8.origin.id) || this._originData.set(t8.origin.id, t8), t8;
  }
  release(i3) {
    i3 && (i3.refCount--, 0 === i3.refCount && this._originData.delete(i3.origin.id));
  }
  updateViewMatrices(t8) {
    this._originData.forEach((e11) => {
      n3(e11.viewMatrix, t8), o3(e11.origin.vec3, e11.viewMatrix);
    });
  }
};
var o4 = class {
  constructor(i3) {
    this.origin = i3, this.refCount = 0, this.viewMatrix = e3();
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/edgeRendering/EdgeShaderParameters.js
var a4 = class extends F2 {
  constructor(o7, s2) {
    super(), this.distanceFalloffFactor = o7, this.transparency = s2, this.transformNormalViewFromGlobal = e4();
  }
};
var e10 = class extends W {
  constructor() {
    super(...arguments), this.transformNormalViewFromGlobal = e4(), this.slicePlaneLocalOrigin = n2(), this.transformNormalGlobalFromModel = e4();
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/edgeRendering/EdgeShaderTechnique.js
var h4 = class _h extends r4 {
  initializeProgram(e11) {
    return new r5(e11.rctx, _h.shader.get().build(this.configuration), r3);
  }
  initializePipeline(e11) {
    return S3({ blending: l3(R.ONE, R.ONE, R.ZERO, R.ONE, T.ADD, e11.rctx.gl.MAX), depthTest: { func: O.LEQUAL }, colorWrite: _ });
  }
};
h4.shader = new t5(A2, () => import("./EdgeShader.glsl-FID7GUPV.js"));

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/edgeRendering/EdgeShaderTechniqueConfiguration.js
var r9 = class extends t7 {
  constructor() {
    super(...arguments), this.type = p.Solid, this.hasSlicePlane = false, this.silhouette = false, this.legacy = false, this.doublePrecisionRequiresObfuscation = false, this.multipassEnabled = false, this.cullAboveGround = false, this.spherical = false;
  }
};
e([r6({ count: p.COUNT })], r9.prototype, "type", void 0), e([r6()], r9.prototype, "hasSlicePlane", void 0), e([r6()], r9.prototype, "silhouette", void 0), e([r6()], r9.prototype, "legacy", void 0), e([r6()], r9.prototype, "doublePrecisionRequiresObfuscation", void 0), e([r6()], r9.prototype, "multipassEnabled", void 0), e([r6()], r9.prototype, "cullAboveGround", void 0), e([r6()], r9.prototype, "spherical", void 0), e([r6({ constValue: false })], r9.prototype, "occlusionPass", void 0), e([r6({ constValue: a2.Compressed })], r9.prototype, "normalType", void 0);

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/edgeRendering/EdgeRenderer.js
var m2 = 8;
var g = 128;
var f = { type: p.Solid, hasSlicePlane: false, strokesTexture: null, legacy: true, spherical: true };
var T2 = class _T {
  constructor(e11, t8, s2) {
    this._rctx = e11, this._shaderTechniqueRepository = t8, this._configuration = new r9(), this.refCount = 0, this._renderables = /* @__PURE__ */ new Set(), this._sortedRenderables = { [A.TRANSPARENT]: { [A.TRANSPARENT]: new l(), [A.OPAQUE]: new l() }, [A.OPAQUE]: { [A.TRANSPARENT]: new l(), [A.OPAQUE]: new l() } }, this._renderablesDirty = false, this._drawParameters = new e10(), this._settings = { ...f, ...s2 }, this.key = _T.getKey(this._settings.type, this._settings.hasSlicePlane, this._settings.legacy);
    const i3 = this._settings.strokesTexture.variants;
    this.writerSettings = { variants: i3, reducedPrecision: t6.TESTS_DISABLE_OPTIMIZATIONS }, this._configuration.legacy = this._settings.legacy, this._configuration.type = this._settings.type, this._configuration.silhouette = false, this._configuration.hasSlicePlane = this._settings.hasSlicePlane, this._configuration.doublePrecisionRequiresObfuscation = e11.driverTest.doublePrecisionRequiresObfuscation.result, this._configuration.spherical = s2.spherical;
  }
  dispose() {
    this._technique = t(this._technique);
  }
  addRenderable(e11) {
    this._renderables.add(e11), this._renderablesDirty = true;
  }
  removeRenderable(e11) {
    this._renderables.delete(e11), this._renderablesDirty = true;
  }
  setRenderablesDirty() {
    this._renderablesDirty = true;
  }
  forEachRenderable(e11, r11) {
    this._renderablesDirty && this._sortRenderables();
    const t8 = this._sortedRenderables[r11];
    t8[A.TRANSPARENT].forAll(e11), t8[A.OPAQUE].forAll(e11);
  }
  updateTechnique(e11, r11) {
    return this._configuration.multipassEnabled = !!e11.multipassEnabled, this._configuration.cullAboveGround = !!e11.multipassTerrain.cullAboveGround, this._configuration.silhouette = r11, this._technique = this._shaderTechniqueRepository.releaseAndAcquire(h4, this._configuration, this._technique), this._technique;
  }
  bindRegularEdges(e11, r11) {
    return this._lastOriginId = null, this._rctx.bindTechnique(this.updateTechnique(r11, false), r11, e11);
  }
  bindSilhouetteEdges(e11, r11) {
    return this._lastOriginId = null, this._rctx.bindTechnique(this.updateTechnique(r11, true), r11, e11);
  }
  renderRegularEdges(e11, r11, t8, s2, i3) {
    this._render(e11, r11, r11.regular.vao, t8, s2, i3);
  }
  renderSilhouetteEdges(e11, r11, t8, s2, i3) {
    this._render(e11, r11, r11.silhouette.vao, t8, s2, i3);
  }
  _render(e11, r11, t8, s2, i3, n8) {
    n8 > 0 && (this._bindDraw(e11, r11, s2, i3), this._rctx.bindVAO(t8), this._rctx.drawArraysInstanced(E.TRIANGLE_FAN, 0, 4, n8));
  }
  _bindDraw(e11, r11, i3, o7) {
    this._drawParameters.componentDataTexture = r11.components.buffer.textureBuffer.texture, this._drawParameters.strokesTexture = this._settings.strokesTexture;
    const d = r11.transform.origin;
    if (d) {
      const t8 = d.origin.id;
      this._lastOriginId !== t8 && (e11.setUniformMatrix4fv("localView", d.viewMatrix), this._lastOriginId = t8), e11.setUniformMatrix4fv("model", r11.transform.modelMatrix), this._drawParameters.slicePlaneLocalOrigin = d.origin.vec3;
    } else {
      const e12 = new e8(r11.transform.position), i4 = u2(b2, s(b2, r11.transform.rotationScale));
      this._drawParameters.transformWorldFromModelTL = e12.low, this._drawParameters.transformWorldFromModelTH = e12.high, this._drawParameters.transformWorldFromModelRS = r11.transform.rotationScale, this._drawParameters.transformNormalGlobalFromModel = i4;
      const d2 = o7.camera.viewInverseTransposeMatrix;
      o(this._drawParameters.slicePlaneLocalOrigin, d2[3], d2[7], d2[11]);
    }
    e11.bindDraw(this._drawParameters, o7, i3);
  }
  _sortRenderables() {
    this._renderablesDirty = false, this._sortedRenderables[A.TRANSPARENT][A.TRANSPARENT].clear(), this._sortedRenderables[A.TRANSPARENT][A.OPAQUE].clear(), this._sortedRenderables[A.OPAQUE][A.TRANSPARENT].clear(), this._sortedRenderables[A.OPAQUE][A.OPAQUE].clear(), this._renderables.forEach((e12) => {
      e12.objectTransparency !== A.INVISIBLE && e12.edgeTransparency !== A.INVISIBLE && this._sortedRenderables[e12.objectTransparency][e12.edgeTransparency].push(e12);
    });
    const e11 = (e12, r11) => e12.transform.origin ? r11.transform.origin ? e12.transform.origin.origin.id < r11.transform.origin.origin.id ? -1 : e12.transform.origin.origin.id > r11.transform.origin.origin.id ? 1 : 0 : 1 : 0;
    this._sortedRenderables[A.TRANSPARENT][A.TRANSPARENT].sort(e11), this._sortedRenderables[A.TRANSPARENT][A.OPAQUE].sort(e11), this._sortedRenderables[A.OPAQUE][A.TRANSPARENT].sort(e11), this._sortedRenderables[A.OPAQUE][A.OPAQUE].sort(e11);
  }
  static getKey(e11, r11, t8) {
    return `edges-t:${e11}:${r11}:${t8}`;
  }
};
var b2 = e7();

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/edgeRendering/strokes.js
function n6(e11) {
  const n8 = 4, u4 = a5.resolution, l5 = u4 / 2, p2 = new Uint8Array(n8 * u4 * u4), h5 = n8 * u4 * l5, m3 = a5.amplitude, f3 = 2 * m3, S4 = n8 * u4, d = Math.log2(u4) + 1, E3 = a5.strokes.length;
  let R2 = (d - 1) * E3 * S4;
  for (const { distance: r11, pressure: s2 } of a5.strokes) {
    let e12 = r11, u5 = s2, l6 = R2;
    for (let r12 = 0; r12 < d; r12++) {
      0 !== r12 && (e12 = o5(e12, i.DISTANCE), u5 = o5(u5, i.PRESSURE));
      for (let r13 = 0; r13 < a5.resolution; r13++) {
        const s3 = 0.5 + (e12 ? e12[r13 % e12.length] / f3 : 0), o7 = u5 ? u5[r13 % u5.length] : 1;
        o2(s3, p2, l6), o2(o7, p2, l6 + h5), l6 += n8;
      }
      l6 -= S4 * (E3 + 1);
    }
    R2 += S4;
  }
  const g2 = new m(e11, new e6(u4), p2);
  return new c(u4, f3, m3, E3, g2);
}
function o5(t8, e11) {
  if (!t8)
    return null;
  const r11 = t8.length / 2, s2 = u3 * r11, n8 = new Array(r11);
  let o7 = 0;
  const c3 = e11 === i.PRESSURE;
  for (let i3 = 0; i3 < t8.length; i3 += 2) {
    const e12 = (t8[i3] + t8[i3 + 1]) / 2;
    n8[o7++] = c3 ? Math.min(s2, 1 - (1 - e12) * l4) : Math.min(s2, e12 * l4);
  }
  return n8;
}
var i;
!function(t8) {
  t8[t8.DISTANCE = 0] = "DISTANCE", t8[t8.PRESSURE = 1] = "PRESSURE";
}(i || (i = {}));
var u3 = 0.1;
var l4 = 0.5;
var c = class {
  constructor(t8, e11, r11, s2, n8) {
    this.resolution = t8, this.normalizationScale = e11, this.amplitude = r11, this.variants = s2, this.texture = n8;
  }
  dispose() {
    this.texture = r(this.texture);
  }
};
var a5 = { amplitude: 8, resolution: 256, strokes: [{ distance: [-1.59027, -1.59426, -1.59674, -1.59766, -1.59702, -1.59479, -1.59095, -1.5855, -1.57843, -1.56973, -1.55942, -1.5475, -1.53398, -1.5189, -1.50226, -1.4841, -1.46446, -1.44337, -1.42088, -1.39703, -1.37188, -1.34547, -1.31786, -1.28912, -1.2593, -1.22847, -1.19668, -1.16402, -1.13053, -1.09629, -1.06137, -1.02582, -0.98972, -0.95313, -0.91611, -0.87872, -0.84102, -0.80306, -0.76488, -0.72654, -0.68807, -0.64952, -0.61092, -0.57232, -0.53375, -0.49527, -0.45692, -0.41874, -0.38078, -0.34309, -0.3057, -0.26867, -0.23204, -0.19585, -0.16015, -0.12497, -0.09036, -0.05634, -0.02296, 977e-5, 0.04183, 0.07321, 0.10389, 0.13386, 0.16313, 0.19169, 0.21956, 0.24672, 0.27321, 0.299, 0.32413, 0.34858, 0.37237, 0.3955, 0.41798, 0.43981, 0.461, 0.48154, 0.50145, 0.52073, 0.53939, 0.55744, 0.57488, 0.5917, 0.6079, 0.62347, 0.63837, 0.65259, 0.66609, 0.67885, 0.69083, 0.70201, 0.71235, 0.72183, 0.73042, 0.73812, 0.7449, 0.75076, 0.7557, 0.75973, 0.76284, 0.76507, 0.76642, 0.76692, 0.76659, 0.76545, 0.76352, 0.76083, 0.7574, 0.75324, 0.74837, 0.74279, 0.73652, 0.72959, 0.72199, 0.71377, 0.70493, 0.69553, 0.68558, 0.67515, 0.66426, 0.65298, 0.64135, 0.62944, 0.6173, 0.60499, 0.59257, 0.58008, 0.56759, 0.55513, 0.54275, 0.5305, 0.51842, 0.50654, 0.4949, 0.48353, 0.47246, 0.4617, 0.45128, 0.44121, 0.43149, 0.42213, 0.41313, 0.40448, 0.39617, 0.38818, 0.3805, 0.37309, 0.36594, 0.35902, 0.35229, 0.34572, 0.33927, 0.33292, 0.32663, 0.32035, 0.31407, 0.30774, 0.30135, 0.29486, 0.28824, 0.28148, 0.27454, 0.26739, 0.26002, 0.25241, 0.24454, 0.23639, 0.22796, 0.21922, 0.21016, 0.20076, 0.19098, 0.18082, 0.17023, 0.1592, 0.14768, 0.13566, 0.1231, 0.10996, 0.09624, 0.08188, 0.06688, 0.05121, 0.03485, 0.01778, 0, -0.0185, -0.03771, -0.05763, -0.07824, -0.09952, -0.12144, -0.14396, -0.16706, -0.19069, -0.21481, -0.23938, -0.26436, -0.28971, -0.31539, -0.34136, -0.36759, -0.39404, -0.42067, -0.44746, -0.47437, -0.50136, -0.52839, -0.55544, -0.58248, -0.60948, -0.63642, -0.66329, -0.6901, -0.71684, -0.74352, -0.77015, -0.79675, -0.82332, -0.84988, -0.87644, -0.90301, -0.92958, -0.95615, -0.98272, -1.00926, -1.03575, -1.06217, -1.08847, -1.11463, -1.1406, -1.16633, -1.19178, -1.2169, -1.24164, -1.26595, -1.28979, -1.31312, -1.3359, -1.35809, -1.37963, -1.4005, -1.42064, -1.44, -1.45853, -1.47616, -1.49285, -1.50853, -1.52313, -1.53659, -1.54886, -1.55986, -1.56955, -1.57788, -1.5848], pressure: [-0.01365, -206e-5, 0.01025, 0.02327, 0.03696, 0.05129, 0.06619, 0.08163, 0.09755, 0.11393, 0.1307, 0.14784, 0.16531, 0.18308, 0.20111, 0.21938, 0.23786, 0.25651, 0.2753, 0.29419, 0.31315, 0.33215, 0.35115, 0.37015, 0.38913, 0.40806, 0.42694, 0.44576, 0.46449, 0.48313, 0.50167, 0.5201, 0.53839, 0.55653, 0.57448, 0.59222, 0.60971, 0.62692, 0.6438, 0.66033, 0.67648, 0.69221, 0.70753, 0.72242, 0.73688, 0.75093, 0.76456, 0.77779, 0.79063, 0.80309, 0.81517, 0.82686, 0.83817, 0.84911, 0.85967, 0.86987, 0.87972, 0.88924, 0.89845, 0.90734, 0.91594, 0.92425, 0.93229, 0.94005, 0.94754, 0.95475, 0.96166, 0.96826, 0.97451, 0.9804, 0.98588, 0.99092, 0.99549, 0.99957, 0.99685, 0.99381, 0.99131, 0.98936, 0.98796, 0.98711, 0.98681, 0.98706, 0.98787, 0.98923, 0.99113, 0.99357, 0.99654, 1, 0.99607, 0.99171, 0.98695, 0.98181, 0.97634, 0.97057, 0.96452, 0.95824, 0.95175, 0.94506, 0.93818, 0.93113, 0.92389, 0.91647, 0.90887, 0.90109, 0.89314, 0.88501, 0.87672, 0.86831, 0.85978, 0.85119, 0.84256, 0.83393, 0.82533, 0.8168, 0.80836, 0.80002, 0.79181, 0.78374, 0.77582, 0.7681, 0.76059, 0.75331, 0.74629, 0.73955, 0.73311, 0.72697, 0.72116, 0.71568, 0.71054, 0.70572, 0.70121, 0.697, 0.69304, 0.68931, 0.68576, 0.68236, 0.67905, 0.67582, 0.67262, 0.66941, 0.66619, 0.66291, 0.65957, 0.65613, 0.65259, 0.64892, 0.6451, 0.6411, 0.6369, 0.63248, 0.62783, 0.62295, 0.61783, 0.61247, 0.60688, 0.60104, 0.59498, 0.58868, 0.58216, 0.57542, 0.56845, 0.56125, 0.5538, 0.5461, 0.53813, 0.52986, 0.52129, 0.51239, 0.50316, 0.49359, 0.4837, 0.47349, 0.46299, 0.45223, 0.44124, 0.43005, 0.41869, 0.40719, 0.39557, 0.38386, 0.37207, 0.36023, 0.34836, 0.33648, 0.32464, 0.31287, 0.30119, 0.28963, 0.27822, 0.26698, 0.25594, 0.2451, 0.23448, 0.22409, 0.21391, 0.20394, 0.19415, 0.18452, 0.17503, 0.16565, 0.15636, 0.14713, 0.13794, 0.1288, 0.11968, 0.11058, 0.10151, 0.09247, 0.08346, 0.07447, 0.06552, 0.05659, 0.0477, 0.03885, 0.03007, 0.02137, 0.01278, 433e-5, -393e-5, -0.012, -0.01983, -0.02738, -0.03463, -0.04155, -0.0481, -0.05429, -0.0601, -0.06553, -0.07057, -0.07524, -0.07954, -0.08347, -0.08703, -0.09022, -0.09303, -0.09544, -0.09744, -0.09898, -0.10004, -0.10059, -0.1006, -0.10005, -0.09892, -0.0972, -0.09487, -0.09192, -0.08833, -0.08409, -0.07918, -0.07357, -0.06724, -0.06019, -0.0524, -0.04386, -0.03455, -0.02448] }, { distance: [-3.46259, -3.47131, -3.47668, -3.47863, -3.47712, -3.4721, -3.46352, -3.45138, -3.43566, -3.41635, -3.39347, -3.36704, -3.33709, -3.30368, -3.26684, -3.22667, -3.18322, -3.1366, -3.08689, -3.0342, -2.97865, -2.92036, -2.85946, -2.79607, -2.73034, -2.66241, -2.59242, -2.52052, -2.44686, -2.37159, -2.29485, -2.2168, -2.13757, -2.05731, -1.97616, -1.89426, -1.81174, -1.72875, -1.64543, -1.56191, -1.47833, -1.39483, -1.3115, -1.22847, -1.14581, -1.06361, -0.98193, -0.90083, -0.82036, -0.74054, -0.66141, -0.583, -0.50532, -0.4284, -0.35228, -0.277, -0.20261, -0.12916, -0.05672, 0.01463, 0.08485, 0.15384, 0.22153, 0.28784, 0.35269, 0.41602, 0.47776, 0.53787, 0.59629, 0.653, 0.70799, 0.76123, 0.81274, 0.86253, 0.9106, 0.95698, 1.0017, 1.04477, 1.0862, 1.126, 1.16415, 1.20065, 1.23546, 1.26857, 1.29994, 1.32953, 1.35731, 1.38321, 1.40719, 1.42921, 1.44922, 1.46719, 1.48309, 1.49691, 1.50862, 1.51825, 1.52581, 1.53133, 1.53486, 1.53644, 1.53616, 1.53409, 1.53031, 1.52493, 1.51803, 1.50972, 1.50009, 1.48924, 1.47725, 1.46421, 1.45019, 1.43527, 1.4195, 1.40295, 1.38568, 1.36778, 1.34929, 1.3303, 1.31087, 1.29108, 1.27099, 1.25066, 1.23018, 1.2096, 1.18898, 1.16838, 1.14785, 1.12745, 1.10721, 1.08719, 1.06741, 1.04791, 1.02871, 1.00986, 0.99136, 0.97324, 0.95551, 0.93819, 0.92127, 0.90476, 0.88866, 0.87296, 0.85767, 0.84277, 0.82823, 0.81406, 0.80022, 0.7867, 0.77346, 0.76049, 0.74774, 0.73519, 0.72278, 0.71049, 0.69827, 0.68606, 0.67381, 0.66145, 0.64893, 0.63618, 0.62313, 0.60973, 0.5959, 0.5816, 0.56675, 0.5513, 0.53516, 0.51826, 0.50053, 0.4819, 0.46231, 0.44169, 0.42002, 0.39725, 0.37336, 0.34834, 0.32219, 0.2949, 0.2665, 0.23698, 0.20638, 0.17469, 0.14193, 0.10809, 0.07316, 0.03714, 0, -0.03827, -0.07772, -0.11836, -0.16022, -0.20332, -0.24768, -0.29332, -0.34024, -0.38844, -0.43788, -0.48854, -0.54036, -0.59329, -0.64724, -0.70211, -0.75782, -0.81425, -0.87128, -0.92881, -0.98674, -1.04498, -1.10346, -1.1621, -1.22086, -1.27969, -1.33854, -1.3974, -1.45625, -1.51511, -1.57396, -1.63283, -1.69173, -1.75067, -1.80968, -1.86875, -1.9279, -1.98712, -2.04639, -2.10568, -2.16495, -2.22416, -2.28322, -2.34208, -2.40063, -2.4588, -2.51647, -2.57354, -2.62989, -2.68543, -2.74002, -2.79357, -2.84597, -2.89711, -2.94689, -2.99521, -3.04195, -3.087, -3.13023, -3.17152, -3.21075, -3.24779, -3.28252, -3.3148, -3.34451, -3.37154, -3.39577, -3.41709, -3.43539, -3.45059], pressure: [0.87183, 0.87151, 0.87129, 0.87118, 0.87117, 0.87128, 0.87149, 0.87182, 0.87225, 0.8728, 0.87347, 0.87424, 0.87513, 0.87613, 0.87723, 0.87845, 0.87978, 0.88122, 0.88276, 0.88441, 0.88616, 0.88801, 0.88996, 0.892, 0.89414, 0.89637, 0.89868, 0.90108, 0.90356, 0.90611, 0.90874, 0.91144, 0.91421, 0.91704, 0.91993, 0.92287, 0.92587, 0.92892, 0.93201, 0.93514, 0.93831, 0.94151, 0.94474, 0.94799, 0.95126, 0.95456, 0.95786, 0.96118, 0.9645, 0.96783, 0.97116, 0.97448, 0.9778, 0.98111, 0.98441, 0.9877, 0.99096, 0.99421, 0.99742, 0.99938, 0.99622, 0.9931, 0.99001, 0.98697, 0.98397, 0.98101, 0.97811, 0.97526, 0.97246, 0.96972, 0.96703, 0.96441, 0.96185, 0.95935, 0.95691, 0.95455, 0.95225, 0.95002, 0.94786, 0.94577, 0.94376, 0.94182, 0.93995, 0.93817, 0.93646, 0.93483, 0.93328, 0.93181, 0.93042, 0.92911, 0.92788, 0.92673, 0.92566, 0.92467, 0.92376, 0.92293, 0.92217, 0.92149, 0.92088, 0.92034, 0.91987, 0.91947, 0.91913, 0.91886, 0.91864, 0.91849, 0.91838, 0.91833, 0.91834, 0.91839, 0.91849, 0.91863, 0.91883, 0.91907, 0.91935, 0.91968, 0.92005, 0.92046, 0.92092, 0.92142, 0.92195, 0.92253, 0.92314, 0.9238, 0.92449, 0.92521, 0.92598, 0.92677, 0.9276, 0.92847, 0.92936, 0.93029, 0.93125, 0.93224, 0.93325, 0.9343, 0.93537, 0.93646, 0.93758, 0.93872, 0.93988, 0.94106, 0.94225, 0.94346, 0.94469, 0.94593, 0.94718, 0.94844, 0.94971, 0.95098, 0.95226, 0.95354, 0.95482, 0.9561, 0.95738, 0.95867, 0.95995, 0.96122, 0.9625, 0.96377, 0.96504, 0.9663, 0.96757, 0.96883, 0.97009, 0.97135, 0.97261, 0.97387, 0.97513, 0.9764, 0.97767, 0.97895, 0.98023, 0.98153, 0.98284, 0.98416, 0.98549, 0.98684, 0.98821, 0.9896, 0.99101, 0.99244, 0.99389, 0.99537, 0.99688, 0.99842, 1, 0.99839, 0.99675, 0.99508, 0.99336, 0.99161, 0.98982, 0.98799, 0.98613, 0.98422, 0.98228, 0.98029, 0.97827, 0.97622, 0.97414, 0.97202, 0.96987, 0.9677, 0.96551, 0.9633, 0.96107, 0.95882, 0.95656, 0.9543, 0.95202, 0.94975, 0.94747, 0.94519, 0.94292, 0.94065, 0.93838, 0.93613, 0.93388, 0.93164, 0.92941, 0.9272, 0.92499, 0.9228, 0.92062, 0.91846, 0.91631, 0.91418, 0.91207, 0.90998, 0.90792, 0.90588, 0.90387, 0.90189, 0.89995, 0.89804, 0.89617, 0.89434, 0.89256, 0.89083, 0.88914, 0.88752, 0.88595, 0.88443, 0.88299, 0.88161, 0.8803, 0.87907, 0.87791, 0.87683, 0.87584, 0.87494, 0.87412, 0.8734, 0.87278, 0.87225] }, { distance: [0.39335, 0.43437, 0.47737, 0.52234, 0.56923, 0.61801, 0.66864, 0.72109, 0.7753, 0.83123, 0.88882, 0.94801, 1.00875, 1.07097, 1.13461, 1.1996, 1.26586, 1.33333, 1.40193, 1.47158, 1.54221, 1.61373, 1.68607, 1.75913, 1.83284, 1.90711, 1.98186, 2.05699, 2.13243, 2.20809, 2.28387, 2.35971, 2.4355, 2.51117, 2.58663, 2.66179, 2.73658, 2.81092, 2.88473, 2.95792, 3.03043, 3.10217, 3.17308, 3.24309, 3.31211, 3.3801, 3.44697, 3.51267, 3.57712, 3.64028, 3.70208, 3.76247, 3.8214, 3.87881, 3.93467, 3.98892, 4.04152, 4.09244, 4.14164, 4.18908, 4.23474, 4.27859, 4.32061, 4.36077, 4.39905, 4.43544, 4.46992, 4.50249, 4.53314, 4.56185, 4.58864, 4.61349, 4.63642, 4.65745, 4.67657, 4.69381, 4.7092, 4.72274, 4.73447, 4.74441, 4.75259, 4.75903, 4.76376, 4.76682, 4.76822, 4.768, 4.76618, 4.76279, 4.75786, 4.75142, 4.74348, 4.73409, 4.72326, 4.71102, 4.69739, 4.68241, 4.6661, 4.64849, 4.6296, 4.60948, 4.58816, 4.56567, 4.54204, 4.51732, 4.49154, 4.46473, 4.43694, 4.4082, 4.37854, 4.348, 4.31662, 4.28443, 4.25145, 4.21773, 4.1833, 4.14819, 4.11243, 4.07606, 4.03912, 4.00162, 3.96361, 3.92512, 3.88618, 3.84683, 3.80708, 3.76697, 3.72653, 3.68579, 3.64478, 3.60351, 3.56202, 3.52033, 3.47845, 3.43642, 3.39425, 3.35196, 3.30957, 3.2671, 3.22455, 3.18196, 3.13933, 3.09668, 3.05402, 3.01136, 2.96873, 2.92613, 2.88357, 2.84108, 2.79865, 2.75631, 2.71407, 2.67195, 2.62994, 2.58807, 2.54634, 2.50477, 2.46338, 2.42216, 2.38114, 2.34032, 2.29971, 2.25933, 2.21916, 2.17923, 2.13954, 2.10008, 2.06087, 2.02189, 1.98316, 1.94468, 1.90644, 1.86845, 1.83069, 1.79316, 1.75586, 1.71877, 1.68189, 1.6452, 1.60868, 1.57232, 1.53611, 1.50004, 1.46407, 1.4282, 1.39241, 1.35668, 1.321, 1.28535, 1.24972, 1.2141, 1.17849, 1.14286, 1.10723, 1.07158, 1.03593, 1.00028, 0.96464, 0.92902, 0.89344, 0.85793, 0.8225, 0.78719, 0.75203, 0.71705, 0.68231, 0.64784, 0.61369, 0.57991, 0.54656, 0.51368, 0.48134, 0.44959, 0.41849, 0.3881, 0.35848, 0.32967, 0.30174, 0.27474, 0.24872, 0.22373, 0.19982, 0.17702, 0.15539, 0.13497, 0.11579, 0.09791, 0.08137, 0.06621, 0.05248, 0.04022, 0.02948, 0.02029, 0.01271, 677e-5, 252e-5, 0, -76e-5, 27e-5, 314e-5, 788e-5, 0.01451, 0.02307, 0.03357, 0.04604, 0.0605, 0.07697, 0.09546, 0.11599, 0.13858, 0.16322, 0.18992, 0.21869, 0.24952, 0.28241, 0.31735, 0.35434], pressure: [0.95248, 0.95236, 0.95228, 0.95223, 0.95222, 0.95224, 0.95231, 0.95241, 0.95256, 0.95274, 0.95296, 0.95322, 0.95352, 0.95385, 0.95423, 0.95465, 0.9551, 0.9556, 0.95613, 0.9567, 0.95731, 0.95796, 0.95864, 0.95936, 0.96012, 0.96091, 0.96173, 0.96259, 0.96348, 0.9644, 0.96535, 0.96633, 0.96734, 0.96838, 0.96944, 0.97053, 0.97164, 0.97277, 0.97393, 0.9751, 0.97629, 0.9775, 0.97873, 0.97997, 0.98122, 0.98249, 0.98376, 0.98505, 0.98634, 0.98763, 0.98893, 0.99023, 0.99154, 0.99284, 0.99414, 0.99544, 0.99673, 0.99802, 0.9993, 0.99942, 0.99816, 0.99691, 0.99568, 0.99445, 0.99324, 0.99205, 0.99087, 0.98972, 0.98858, 0.98746, 0.98636, 0.98528, 0.98423, 0.9832, 0.98219, 0.98121, 0.98025, 0.97931, 0.9784, 0.97752, 0.97666, 0.97582, 0.97501, 0.97423, 0.97347, 0.97274, 0.97203, 0.97135, 0.9707, 0.97007, 0.96948, 0.9689, 0.96836, 0.96784, 0.96735, 0.96689, 0.96646, 0.96605, 0.96567, 0.96533, 0.965, 0.96471, 0.96445, 0.96421, 0.964, 0.96382, 0.96367, 0.96355, 0.96346, 0.96339, 0.96335, 0.96334, 0.96336, 0.9634, 0.96348, 0.96358, 0.9637, 0.96385, 0.96403, 0.96423, 0.96446, 0.96471, 0.96499, 0.96529, 0.96561, 0.96595, 0.96631, 0.96669, 0.96709, 0.96751, 0.96795, 0.9684, 0.96887, 0.96935, 0.96984, 0.97035, 0.97087, 0.9714, 0.97194, 0.97249, 0.97304, 0.97361, 0.97418, 0.97476, 0.97534, 0.97592, 0.97651, 0.97711, 0.9777, 0.9783, 0.9789, 0.9795, 0.9801, 0.9807, 0.9813, 0.9819, 0.9825, 0.98309, 0.98369, 0.98428, 0.98486, 0.98545, 0.98603, 0.98661, 0.98718, 0.98775, 0.98832, 0.98888, 0.98944, 0.99, 0.99056, 0.99112, 0.99167, 0.99223, 0.99279, 0.99335, 0.99392, 0.99449, 0.99507, 0.99565, 0.99624, 0.99684, 0.99745, 0.99807, 0.9987, 0.99934, 1, 0.99933, 0.99866, 0.99797, 0.99727, 0.99656, 0.99583, 0.9951, 0.99435, 0.99359, 0.99283, 0.99205, 0.99126, 0.99046, 0.98966, 0.98885, 0.98803, 0.9872, 0.98637, 0.98554, 0.9847, 0.98387, 0.98303, 0.98219, 0.98134, 0.9805, 0.97967, 0.97883, 0.978, 0.97717, 0.97634, 0.97552, 0.97471, 0.97389, 0.97309, 0.97229, 0.9715, 0.97071, 0.96993, 0.96915, 0.96838, 0.96762, 0.96687, 0.96612, 0.96539, 0.96466, 0.96395, 0.96324, 0.96255, 0.96187, 0.9612, 0.96055, 0.95991, 0.95929, 0.95869, 0.95811, 0.95754, 0.957, 0.95648, 0.95599, 0.95552, 0.95508, 0.95467, 0.95428, 0.95393, 0.9536, 0.95331, 0.95305, 0.95283, 0.95264] }, { distance: [2.85606, 2.86149, 2.86432, 2.8645, 2.862, 2.85686, 2.84912, 2.83886, 2.82618, 2.81117, 2.79393, 2.77456, 2.75314, 2.72975, 2.70447, 2.67734, 2.64844, 2.61784, 2.58564, 2.55196, 2.5169, 2.48057, 2.44305, 2.40438, 2.36462, 2.32383, 2.28208, 2.23943, 2.19591, 2.15153, 2.10628, 2.06016, 2.01321, 1.96548, 1.91702, 1.86793, 1.8183, 1.76829, 1.71803, 1.66767, 1.61737, 1.56726, 1.51746, 1.46803, 1.41902, 1.37044, 1.32228, 1.27452, 1.22716, 1.18023, 1.13376, 1.08781, 1.04244, 0.99769, 0.95357, 0.91003, 0.86701, 0.82447, 0.78238, 0.74069, 0.69938, 0.65836, 0.61758, 0.57699, 0.53656, 0.49627, 0.45611, 0.41611, 0.37632, 0.33683, 0.29776, 0.25924, 0.22141, 0.18441, 0.14839, 0.11346, 0.07972, 0.04727, 0.01619, -0.01348, -0.0417, -0.0684, -0.09351, -0.11698, -0.13875, -0.1588, -0.17713, -0.19381, -0.20889, -0.22242, -0.23444, -0.24501, -0.25421, -0.26216, -0.26897, -0.27473, -0.27951, -0.28336, -0.28631, -0.28836, -0.28948, -0.28963, -0.28873, -0.28673, -0.28355, -0.27916, -0.27354, -0.26673, -0.25878, -0.2498, -0.23992, -0.22929, -0.21802, -0.20623, -0.19398, -0.18134, -0.16836, -0.1551, -0.14163, -0.12809, -0.11461, -0.1013, -0.08826, -0.07557, -0.06335, -0.0517, -0.04077, -0.03065, -0.02143, -0.01321, -606e-5, 0, 496e-5, 888e-5, 0.01181, 0.01385, 0.01511, 0.0157, 0.01574, 0.01533, 0.01458, 0.01358, 0.0124, 0.01112, 979e-5, 851e-5, 738e-5, 65e-4, 6e-3, 596e-5, 646e-5, 754e-5, 924e-5, 0.01161, 0.01471, 0.01858, 0.02323, 0.02865, 0.03481, 0.04169, 0.0493, 0.05765, 0.06677, 0.07671, 0.08754, 0.09934, 0.11222, 0.12628, 0.14159, 0.15823, 0.17624, 0.19561, 0.21632, 0.23828, 0.26142, 0.28563, 0.31083, 0.33696, 0.36397, 0.39185, 0.42057, 0.4501, 0.48036, 0.51125, 0.54264, 0.5744, 0.60646, 0.63871, 0.67105, 0.70337, 0.73556, 0.76751, 0.79918, 0.83048, 0.86139, 0.8919, 0.92202, 0.95184, 0.98144, 1.01094, 1.04045, 1.0701, 1.10002, 1.13029, 1.16103, 1.1923, 1.22416, 1.25664, 1.28979, 1.32364, 1.35824, 1.39363, 1.42985, 1.4669, 1.50475, 1.54332, 1.58252, 1.62227, 1.6625, 1.70312, 1.744, 1.78501, 1.82598, 1.8668, 1.90734, 1.94754, 1.98732, 2.02666, 2.06555, 2.10402, 2.1421, 2.17985, 2.2173, 2.25448, 2.29139, 2.328, 2.36424, 2.4, 2.43515, 2.46955, 2.50309, 2.53565, 2.56717, 2.59761, 2.62692, 2.65505, 2.68191, 2.7074, 2.73138, 2.75375, 2.7744, 2.79324, 2.81017, 2.82504, 2.83772, 2.8481], pressure: [0.22758, 0.23641, 0.24578, 0.25568, 0.26609, 0.27699, 0.28835, 0.30016, 0.31237, 0.32495, 0.33789, 0.35113, 0.36466, 0.37843, 0.39241, 0.40658, 0.4209, 0.43535, 0.44989, 0.4645, 0.47916, 0.49385, 0.50853, 0.5232, 0.53784, 0.55243, 0.56696, 0.58141, 0.59578, 0.61004, 0.62419, 0.63821, 0.65209, 0.6658, 0.67934, 0.69268, 0.70582, 0.71873, 0.73139, 0.7438, 0.75594, 0.76779, 0.77935, 0.79061, 0.80156, 0.81221, 0.82254, 0.83258, 0.84231, 0.85176, 0.86091, 0.86978, 0.87837, 0.88669, 0.89473, 0.9025, 0.91, 0.91725, 0.92425, 0.931, 0.93752, 0.9438, 0.94985, 0.95566, 0.96124, 0.96658, 0.97168, 0.97652, 0.98109, 0.98539, 0.98939, 0.99309, 0.99646, 0.99949, 0.99783, 0.99552, 0.99361, 0.99209, 0.99098, 0.99029, 0.99003, 0.99019, 0.99079, 0.99181, 0.99324, 0.9951, 0.99735, 1, 0.99698, 0.99361, 0.98992, 0.98592, 0.98163, 0.97709, 0.97231, 0.96731, 0.96212, 0.95676, 0.95122, 0.94554, 0.93973, 0.93378, 0.92773, 0.92157, 0.91532, 0.90899, 0.90258, 0.89612, 0.88961, 0.88308, 0.87653, 0.87, 0.8635, 0.85705, 0.85068, 0.8444, 0.83823, 0.83219, 0.82628, 0.82052, 0.81493, 0.80952, 0.8043, 0.79929, 0.7945, 0.78994, 0.78561, 0.78151, 0.77765, 0.77402, 0.77062, 0.76742, 0.76443, 0.76161, 0.75896, 0.75645, 0.75406, 0.75175, 0.74951, 0.7473, 0.74511, 0.74289, 0.74064, 0.73833, 0.73592, 0.73341, 0.73078, 0.728, 0.72507, 0.72197, 0.71869, 0.71522, 0.71156, 0.70769, 0.70363, 0.69936, 0.69489, 0.69021, 0.68533, 0.68023, 0.67492, 0.66939, 0.66363, 0.65765, 0.65145, 0.64501, 0.63833, 0.63143, 0.62428, 0.61691, 0.60931, 0.60148, 0.59344, 0.58521, 0.57679, 0.5682, 0.55948, 0.55063, 0.54167, 0.53264, 0.52354, 0.51439, 0.50522, 0.49603, 0.48686, 0.47773, 0.46865, 0.45964, 0.45072, 0.44192, 0.43324, 0.42469, 0.41629, 0.40804, 0.39994, 0.392, 0.3842, 0.37655, 0.36903, 0.36164, 0.35437, 0.3472, 0.34012, 0.33312, 0.3262, 0.31933, 0.31251, 0.30574, 0.299, 0.2923, 0.28563, 0.27899, 0.27239, 0.26583, 0.25933, 0.25288, 0.24652, 0.24025, 0.2341, 0.22808, 0.22221, 0.21653, 0.21104, 0.20576, 0.20072, 0.19592, 0.19138, 0.18712, 0.18313, 0.17943, 0.17602, 0.17292, 0.17013, 0.16766, 0.16551, 0.16369, 0.16222, 0.1611, 0.16036, 0.16001, 0.16007, 0.16055, 0.16148, 0.16286, 0.16471, 0.16705, 0.16988, 0.17321, 0.17706, 0.18144, 0.18636, 0.19182, 0.19785, 0.20443, 0.21158, 0.2193] }, { distance: [-2.31317, -2.3191, -2.32189, -2.32154, -2.31811, -2.31174, -2.30254, -2.29062, -2.27609, -2.25904, -2.23954, -2.21767, -2.19355, -2.16732, -2.13907, -2.10885, -2.07672, -2.04268, -2.00677, -1.96911, -1.92985, -1.88914, -1.84713, -1.80397, -1.75979, -1.71467, -1.66864, -1.62171, -1.57395, -1.52546, -1.47625, -1.42628, -1.3755, -1.32384, -1.27131, -1.218, -1.16408, -1.10972, -1.05508, -1.00031, -0.94551, -0.89077, -0.83615, -0.7817, -0.72757, -0.6739, -0.62076, -0.56821, -0.51625, -0.46484, -0.41397, -0.36366, -0.314, -0.26506, -0.21689, -0.16957, -0.12316, -0.07766, -0.03301, 0.01085, 0.05399, 0.09643, 0.13827, 0.17967, 0.22079, 0.26176, 0.30265, 0.34342, 0.38397, 0.42414, 0.46381, 0.50285, 0.54115, 0.57863, 0.61524, 0.65093, 0.6856, 0.71914, 0.75153, 0.78275, 0.81283, 0.84182, 0.86972, 0.89651, 0.92208, 0.94634, 0.96919, 0.99052, 1.01025, 1.02835, 1.04484, 1.05976, 1.07309, 1.08479, 1.09492, 1.1036, 1.11096, 1.11714, 1.12224, 1.12627, 1.12916, 1.13083, 1.13125, 1.13036, 1.12816, 1.12466, 1.11992, 1.11397, 1.10677, 1.09827, 1.08849, 1.07746, 1.06527, 1.05203, 1.03786, 1.02283, 1.00695, 0.99025, 0.97279, 0.9546, 0.93573, 0.9163, 0.8965, 0.8765, 0.85647, 0.83652, 0.81687, 0.79775, 0.77939, 0.76199, 0.74568, 0.73049, 0.71635, 0.70316, 0.69082, 0.67925, 0.66834, 0.65804, 0.64831, 0.63911, 0.63032, 0.62184, 0.61363, 0.60564, 0.59788, 0.59036, 0.58308, 0.57597, 0.5689, 0.56177, 0.55447, 0.5469, 0.53896, 0.53062, 0.5219, 0.51283, 0.5034, 0.49355, 0.48335, 0.47287, 0.46223, 0.45154, 0.44085, 0.43012, 0.41923, 0.40805, 0.39648, 0.38441, 0.37176, 0.35849, 0.34458, 0.32999, 0.31461, 0.29833, 0.28109, 0.26288, 0.2437, 0.22361, 0.20265, 0.18082, 0.15807, 0.13434, 0.1096, 0.0838, 0.0569, 0.02894, 0, -0.0298, -0.0604, -0.09173, -0.12364, -0.15594, -0.18843, -0.22092, -0.25331, -0.28559, -0.31781, -0.35006, -0.38244, -0.41502, -0.44785, -0.48098, -0.5144, -0.54811, -0.58218, -0.61666, -0.65153, -0.68677, -0.72232, -0.75807, -0.79397, -0.83002, -0.86628, -0.90281, -0.93968, -0.97693, -1.01465, -1.05282, -1.09139, -1.13031, -1.16956, -1.20917, -1.24905, -1.28907, -1.32908, -1.36891, -1.40844, -1.44765, -1.48658, -1.52527, -1.56376, -1.60206, -1.64016, -1.67801, -1.71552, -1.75264, -1.78936, -1.8257, -1.86161, -1.89702, -1.93182, -1.96584, -1.99894, -2.03102, -2.06203, -2.0919, -2.12056, -2.14794, -2.17397, -2.19852, -2.22138, -2.24235, -2.26129, -2.27805, -2.29243, -2.30422], pressure: [0.9681, 0.97424, 0.98046, 0.98674, 0.99309, 0.9995, 0.99404, 0.98754, 0.981, 0.97444, 0.96785, 0.96124, 0.95462, 0.94801, 0.94139, 0.93479, 0.92822, 0.92167, 0.91515, 0.90868, 0.90225, 0.89589, 0.88959, 0.88336, 0.87722, 0.87115, 0.86519, 0.85932, 0.85356, 0.84792, 0.84239, 0.83699, 0.83173, 0.8266, 0.82162, 0.81679, 0.81211, 0.80759, 0.80324, 0.79906, 0.79505, 0.79121, 0.78756, 0.78409, 0.78081, 0.77771, 0.77481, 0.77211, 0.76959, 0.76728, 0.76516, 0.76324, 0.76153, 0.76001, 0.75869, 0.75757, 0.75665, 0.75593, 0.7554, 0.75507, 0.75493, 0.75498, 0.75523, 0.75565, 0.75627, 0.75706, 0.75803, 0.75917, 0.76049, 0.76197, 0.76361, 0.76541, 0.76737, 0.76947, 0.77172, 0.77409, 0.7766, 0.77923, 0.78198, 0.78484, 0.7878, 0.79086, 0.79401, 0.79724, 0.80055, 0.80394, 0.8074, 0.81092, 0.8145, 0.81813, 0.82182, 0.82556, 0.82934, 0.83317, 0.83703, 0.84093, 0.84487, 0.84884, 0.85284, 0.85687, 0.86094, 0.86503, 0.86915, 0.87329, 0.87746, 0.88166, 0.88587, 0.89011, 0.89436, 0.89863, 0.90291, 0.9072, 0.91149, 0.91579, 0.92009, 0.92438, 0.92867, 0.93295, 0.9372, 0.94144, 0.94566, 0.94985, 0.954, 0.95812, 0.96219, 0.96623, 0.97021, 0.97415, 0.97802, 0.98184, 0.9856, 0.9893, 0.99293, 0.9965, 1, 0.99657, 0.9932, 0.98991, 0.98668, 0.98352, 0.98042, 0.97738, 0.9744, 0.97148, 0.9686, 0.96577, 0.96298, 0.96023, 0.95751, 0.95482, 0.95214, 0.94949, 0.94684, 0.9442, 0.94156, 0.93892, 0.93627, 0.93361, 0.93094, 0.92825, 0.92555, 0.92284, 0.9201, 0.91735, 0.91458, 0.91179, 0.90899, 0.90616, 0.90332, 0.90047, 0.8976, 0.89472, 0.89183, 0.88893, 0.88603, 0.88314, 0.88024, 0.87735, 0.87448, 0.87162, 0.86878, 0.86597, 0.86319, 0.86044, 0.85774, 0.85508, 0.85247, 0.84993, 0.84744, 0.84503, 0.84269, 0.84042, 0.83825, 0.83616, 0.83417, 0.83227, 0.83048, 0.8288, 0.82724, 0.82578, 0.82445, 0.82324, 0.82215, 0.82119, 0.82037, 0.81967, 0.81911, 0.81868, 0.81839, 0.81824, 0.81823, 0.81835, 0.81862, 0.81903, 0.81957, 0.82026, 0.82109, 0.82206, 0.82317, 0.82443, 0.82583, 0.82737, 0.82906, 0.83089, 0.83287, 0.83499, 0.83726, 0.83968, 0.84223, 0.84494, 0.84778, 0.85077, 0.8539, 0.85717, 0.86058, 0.86412, 0.86781, 0.87163, 0.87559, 0.87968, 0.88391, 0.88826, 0.89275, 0.89737, 0.90211, 0.90698, 0.91198, 0.91709, 0.92233, 0.92768, 0.93315, 0.93873, 0.94441, 0.95019, 0.95607, 0.96205] }, { distance: [4.72925, 4.81721, 4.9037, 4.98859, 5.07177, 5.15311, 5.23249, 5.3098, 5.38491, 5.45772, 5.52811, 5.59598, 5.66122, 5.72375, 5.78346, 5.84028, 5.8941, 5.94486, 5.99248, 6.03689, 6.07803, 6.11584, 6.15028, 6.18128, 6.20882, 6.23285, 6.25336, 6.27031, 6.28369, 6.29348, 6.29969, 6.3023, 6.30133, 6.29678, 6.28867, 6.27703, 6.26187, 6.24324, 6.22116, 6.19567, 6.16683, 6.13468, 6.09928, 6.06068, 6.01896, 5.97417, 5.92639, 5.87569, 5.82217, 5.76589, 5.70696, 5.64545, 5.58147, 5.5151, 5.44644, 5.37559, 5.30265, 5.2277, 5.15085, 5.0722, 4.99184, 4.90987, 4.82639, 4.74151, 4.65533, 4.56794, 4.47945, 4.38996, 4.29959, 4.20843, 4.11658, 4.02416, 3.93125, 3.83796, 3.74437, 3.65057, 3.55666, 3.46272, 3.36884, 3.27509, 3.18155, 3.08831, 2.99545, 2.90303, 2.81114, 2.71984, 2.62922, 2.53933, 2.45026, 2.36207, 2.27484, 2.18862, 2.10349, 2.01951, 1.93675, 1.85528, 1.77515, 1.69644, 1.61919, 1.54348, 1.46935, 1.39685, 1.32605, 1.25698, 1.18967, 1.12417, 1.06049, 0.99863, 0.93862, 0.88044, 0.82408, 0.76953, 0.71676, 0.66574, 0.61644, 0.56882, 0.52282, 0.47841, 0.43553, 0.39413, 0.35414, 0.31551, 0.27817, 0.24206, 0.20712, 0.17328, 0.14048, 0.10866, 0.07776, 0.04772, 0.01848, -999e-5, -0.03776, -0.06487, -0.09134, -0.11721, -0.14251, -0.16725, -0.19144, -0.21509, -0.2382, -0.26076, -0.28275, -0.30416, -0.32496, -0.34511, -0.36459, -0.38334, -0.40134, -0.41852, -0.43485, -0.45026, -0.46471, -0.47815, -0.49052, -0.50179, -0.51189, -0.52081, -0.52849, -0.5349, -0.54003, -0.54383, -0.54627, -0.54734, -0.54702, -0.54528, -0.54211, -0.53752, -0.53149, -0.52403, -0.51515, -0.50487, -0.4932, -0.48015, -0.46575, -0.45001, -0.43297, -0.41463, -0.39503, -0.37419, -0.35213, -0.32887, -0.30443, -0.27885, -0.25214, -0.22432, -0.19541, -0.16544, -0.13442, -0.10235, -0.06926, -0.03514, 0, 0.03616, 0.07336, 0.11159, 0.15088, 0.19125, 0.23272, 0.27531, 0.31906, 0.36401, 0.41019, 0.45764, 0.5064, 0.55651, 0.60802, 0.66096, 0.71538, 0.77129, 0.82874, 0.88776, 0.94836, 1.01056, 1.07438, 1.13982, 1.20687, 1.27554, 1.34581, 1.41766, 1.49107, 1.56599, 1.64239, 1.72025, 1.79951, 1.88013, 1.96209, 2.04532, 2.12979, 2.21546, 2.30226, 2.39017, 2.47911, 2.56905, 2.65991, 2.75164, 2.84416, 2.93742, 3.03133, 3.12582, 3.2208, 3.31619, 3.41191, 3.50785, 3.60393, 3.70006, 3.79612, 3.89202, 3.98765, 4.08291, 4.17767, 4.27182, 4.36525, 4.45783, 4.54944, 4.63995], pressure: [0.30942, 0.30838, 0.30765, 0.30724, 0.30715, 0.30738, 0.30795, 0.30884, 0.31007, 0.31164, 0.31354, 0.31578, 0.31837, 0.32129, 0.32455, 0.32815, 0.33209, 0.33636, 0.34097, 0.34591, 0.35117, 0.35675, 0.36265, 0.36887, 0.37539, 0.38221, 0.38933, 0.39674, 0.40442, 0.41238, 0.4206, 0.42907, 0.43779, 0.44675, 0.45593, 0.46533, 0.47493, 0.48473, 0.49471, 0.50486, 0.51517, 0.52563, 0.53623, 0.54694, 0.55777, 0.5687, 0.57971, 0.59079, 0.60194, 0.61313, 0.62435, 0.6356, 0.64686, 0.65811, 0.66935, 0.68056, 0.69174, 0.70286, 0.71391, 0.72489, 0.73579, 0.74659, 0.75728, 0.76785, 0.7783, 0.7886, 0.79876, 0.80877, 0.81861, 0.82827, 0.83776, 0.84706, 0.85617, 0.86507, 0.87378, 0.88227, 0.89056, 0.89863, 0.90649, 0.91412, 0.92153, 0.92872, 0.93568, 0.94241, 0.94892, 0.95519, 0.96122, 0.96702, 0.97258, 0.97791, 0.98299, 0.98783, 0.99242, 0.99677, 0.99911, 0.99525, 0.99164, 0.98827, 0.98515, 0.98228, 0.97966, 0.97728, 0.97514, 0.97324, 0.97159, 0.97017, 0.96898, 0.96801, 0.96727, 0.96674, 0.96641, 0.96629, 0.96635, 0.96661, 0.96703, 0.96762, 0.96838, 0.96928, 0.97032, 0.97149, 0.97279, 0.9742, 0.97572, 0.97734, 0.97905, 0.98085, 0.98273, 0.98468, 0.98669, 0.98877, 0.99091, 0.99311, 0.99535, 0.99765, 1, 0.9976, 0.99516, 0.99267, 0.99014, 0.98755, 0.98491, 0.98222, 0.97947, 0.97666, 0.97378, 0.97083, 0.96781, 0.96471, 0.96153, 0.95826, 0.9549, 0.95144, 0.94787, 0.9442, 0.94042, 0.93651, 0.93249, 0.92834, 0.92407, 0.91966, 0.91512, 0.91045, 0.90564, 0.90069, 0.8956, 0.89037, 0.885, 0.87949, 0.87384, 0.86806, 0.86214, 0.85608, 0.84988, 0.84356, 0.83711, 0.83053, 0.82383, 0.81702, 0.81009, 0.80306, 0.79594, 0.78872, 0.78141, 0.77403, 0.76657, 0.75905, 0.75148, 0.74385, 0.73619, 0.72849, 0.72076, 0.71302, 0.70526, 0.69749, 0.68972, 0.68195, 0.67419, 0.66644, 0.65871, 0.65099, 0.64329, 0.63561, 0.62795, 0.62032, 0.61271, 0.60512, 0.59755, 0.59001, 0.58248, 0.57497, 0.56749, 0.56002, 0.55256, 0.54512, 0.5377, 0.5303, 0.52291, 0.51554, 0.50819, 0.50087, 0.49358, 0.48632, 0.4791, 0.47192, 0.4648, 0.45773, 0.45072, 0.44378, 0.43692, 0.43015, 0.42346, 0.41687, 0.41039, 0.40403, 0.39779, 0.39168, 0.38571, 0.37989, 0.37423, 0.36873, 0.36342, 0.35828, 0.35335, 0.34862, 0.34409, 0.3398, 0.33573, 0.3319, 0.32831, 0.32498, 0.32192, 0.31912, 0.3166, 0.31436, 0.31242, 0.31077] }] };

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/edgeRendering/util.js
function r10(e11) {
  let r11;
  for (const o7 of e11) {
    const e12 = o7.type;
    if (c2(o7)) {
      if (null == r11)
        r11 = e12;
      else if (r11 !== e12)
        return p.Mixed;
    }
  }
  return r11 ?? p.Mixed;
}
function o6(t8) {
  let r11 = A.INVISIBLE;
  for (const { material: o7 } of t8)
    if (i2(o7)) {
      if (o7.color[3] * o7.opacity < 1)
        return A.TRANSPARENT;
      r11 = A.OPAQUE;
    }
  return r11;
}
function n7(t8) {
  let r11 = A.INVISIBLE;
  for (const { material: o7 } of t8)
    if (i2(o7)) {
      switch (o7.objectTransparency) {
        case A.TRANSPARENT:
        case A.INVISIBLE:
          return A.TRANSPARENT;
        case A.OPAQUE:
          if (o7.opacity < 1)
            return A.TRANSPARENT;
      }
      r11 = A.OPAQUE;
    }
  return r11;
}
function i2(e11) {
  return e11.size * e11.color[3] * e11.opacity > 0;
}
function c2(e11) {
  return e11.size * e11.color[3] > 0;
}
function f2(e11, t8, r11, o7) {
  for (let n8 = 0; n8 < e11.length; n8++) {
    const i3 = e11[n8].index, c3 = t8[n8], f3 = t8[n8 + 1];
    if (o7)
      for (let e12 = c3; e12 < f3; e12++) {
        const t9 = o7[e12];
        r11.set(t9, i3);
      }
    else
      for (let e12 = c3; e12 < f3; e12++)
        r11.set(e12, i3);
  }
}

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/edgeRendering/EdgeView.js
var ne = 128;
var oe = class extends S {
  constructor(e11) {
    super(e11), this._updatingHandles = new h2(), this._objectEntries = /* @__PURE__ */ new Map(), this._pendingDeletions = /* @__PURE__ */ new Map(), this._renderers = /* @__PURE__ */ new Map(), this._gpuMemoryUsage = 0, this._workerAbort = new AbortController(), this._tmpModelPosition = n2(), this._localOrigins = new e9(new _2(e11.renderSR));
    const t8 = I.createBuffer(4);
    for (let r11 = 0; r11 < 4; r11++)
      t8.sideness.set(r11, 0, 0 === r11 || 3 === r11 ? 0 : 1), t8.sideness.set(r11, 1, 0 === r11 || 1 === r11 ? 0 : 1);
    this._verticesBufferObject = h3.createVertex(e11.rctx, F.STATIC_DRAW, t8.buffer);
  }
  initialize() {
    this._worker = new a3(this.schedule), this._componentColorManager = new r8(this.rctx, 3);
  }
  destroy() {
    this.destroyed || (this._objectEntries.forEach((e11) => this._discardObjectEntry(e11)), this._objectEntries.clear(), this._pendingDeletions.forEach((e11) => this._discardObjectEntry(e11)), this._pendingDeletions.clear(), this._strokesTexture = r(this._strokesTexture), this._componentColorManager = u(this._componentColorManager), this._workerAbort.abort(), this._worker.destroy(), this._verticesBufferObject.dispose(), this._renderers.clear(), this._updatingHandles.destroy(), this._set("schedule", Ee));
  }
  get updating() {
    return this._updatingHandles.updating;
  }
  get usedMemory() {
    return this._gpuMemoryUsage;
  }
  shouldRender() {
    return this._renderers.size > 0;
  }
  async addComponentObject(e11, t8, r11, s2, n8, o7) {
    if (this.hasObject(e11))
      return this._getObjectMemoryUsage(e11);
    let i3;
    const a6 = new ce(null, new Promise((e12) => i3 = e12), e11.obb.center, e11.obb.radius);
    this._objectEntries.set(e11, a6);
    const c3 = await this._updatingHandles.addPromise(this._addComponentGeometry(e11.transform, a6, t8, r11, s2, n8, o7));
    return this.setNeedsRender(), i3(), c3;
  }
  async addOrUpdateObject3D(e11, t8, r11, s2) {
    if (this.destroyed)
      return void n.getLogger(this).warn("Attempt to add an object to a destroyed instance");
    const o7 = this._objectEntries.get(e11);
    o7 && (this._pendingDeletions.has(e11) ? this._discardObjectEntry(o7) : this._pendingDeletions.set(e11, o7));
    const i3 = new AbortController();
    let a6;
    const l5 = e11.boundingVolumeWorldSpace.bounds, d = new ce(i3, new Promise((e12) => a6 = e12), Z(l5), V(l5));
    this._objectEntries.set(e11, d);
    const h5 = () => {
      this._removePendingDeletion(e11), this.setNeedsRender(), a6();
    };
    try {
      const n8 = new Array();
      if (r11.mergeGeometries && e11.geometries.length > 1 && ae(e11))
        n8.push(this._addObjectMergedGeometries(e11, d, t8, r11, s2));
      else
        for (const o8 of e11.geometries)
          o8.material.supportsEdges && n8.push(this._addGeometry(e11, d, o8, t8[0], r11, s2));
      await this._updatingHandles.addPromise(Promise.all(n8));
    } catch (u4) {
      b(u4) && this._discardObjectEntry(d);
    } finally {
      h5();
    }
  }
  removeObject(e11) {
    const t8 = this._objectEntries.get(e11);
    this._objectEntries.delete(e11), this._discardObjectEntry(t8), this._removePendingDeletion(e11);
  }
  _removePendingDeletion(e11) {
    const t8 = this._pendingDeletions.get(e11);
    this._pendingDeletions.delete(e11), this._discardObjectEntry(t8);
  }
  async _getObjectEntry(e11) {
    const t8 = this._objectEntries.get(e11);
    if (!t8)
      throw new Error("no object");
    return await t8.loaded, null == t8.loaded ? null : t8;
  }
  fastUpdateObject3DEdgesTransform(e11) {
    if (this.destroyed)
      return false;
    const t8 = this._objectEntries.get(e11);
    if (!t8)
      return false;
    const { geometries: r11 } = e11, { renderables: s2 } = t8;
    if (0 === r11.length || 0 === s2.length)
      return true;
    if (s2.length > 1)
      return false;
    const [n8] = s2, o7 = n8.transform;
    if (!(o7 instanceof he))
      return false;
    const [i3] = r11;
    if (i3.localOrigin !== o7.origin.origin)
      return false;
    const a6 = e3(), c3 = this._computeModelTransformWithLocalOrigin(e11, i3, a6);
    return n8.transform = new he(a6, c3), this.setNeedsRender(), true;
  }
  _discardObjectEntry(e11) {
    var _a;
    e11 && ((_a = e11.abort) == null ? void 0 : _a.abort(), e11.renderables.length && (e11.renderables.forEach((e12) => this._removeRenderable(e12)), this.setNeedsRender()), e11.loaded = null);
  }
  hasObject(e11) {
    return this._objectEntries.has(e11);
  }
  async updateAllComponentOpacities(e11, t8) {
    const r11 = await this._updatingHandles.addPromise(this._getObjectEntry(e11));
    if (null == r11)
      return;
    const s2 = Array.isArray(t8) ? (e12) => t8[e12] : () => t8;
    r11.renderables.forEach((e12) => {
      const t9 = e12.components.meta.length;
      for (let r12 = 0; r12 < t9; r12++) {
        const t10 = s2(r12), n8 = e12.components.meta[r12], o7 = n8.index;
        n8.material.opacity = t10, e12.components.buffer.textureBuffer.setDataElement(o7, 1, 3, 255 * t10);
      }
      this._updateTransparency(e12);
    }), this.setNeedsRender();
  }
  async _getObjectMemoryUsage(e11) {
    const t8 = await this._getObjectEntry(e11);
    return t8 ? t8.renderables.reduce((e12, t9) => e12 + t9.statistics.gpuMemoryUsage, 0) : 0;
  }
  async updateAllComponentMaterials(e11, t8, r11, s2) {
    const n8 = e11 instanceof O2, o7 = !!r11.hasSlicePlane, i3 = r10(t8), a6 = T2.getKey(i3, o7, n8), c3 = await this._updatingHandles.addPromise(this._getObjectEntry(e11));
    null != c3 && (c3.renderables.forEach((e12) => {
      if (a6 !== e12.rendererKey) {
        const t9 = this._renderers.get(e12.rendererKey), r12 = this._acquireRenderer(i3, o7, n8);
        t9.removeRenderable(e12), --t9.refCount, e12.rendererKey = a6, r12.addRenderable(e12);
      }
      for (let r12 = 0; r12 < t8.length; r12++)
        e12.components.meta[r12].material = t8[r12];
      s2 && ge(e12.components), this._updateTransparency(e12);
    }), this.setNeedsRender());
  }
  async updateAllVerticalOffsets(e11, t8) {
    const r11 = await this._updatingHandles.addPromise(this._getObjectEntry(e11));
    null != r11 && (r11.renderables.forEach((e12) => {
      const r12 = e12.components.meta;
      for (let s2 = 0; s2 < r12.length; s2++)
        e12.components.meta[s2].verticalOffset = (t8 == null ? void 0 : t8[s2]) ?? 0;
      ge(e12.components);
    }), this.setNeedsRender());
  }
  async updateObjectVisibility(e11, t8) {
    const r11 = await this._updatingHandles.addPromise(this._getObjectEntry(e11));
    r11 && (r11.renderables.forEach((e12) => e12.visible = t8), this.setNeedsRender());
  }
  render(e11, t8) {
    if (null == this._componentColorManager)
      return;
    this._localOrigins.updateViewMatrices(e11.camera.viewMatrix);
    const r11 = e11.camera.viewInverseTransposeMatrix, s2 = n2(), n8 = new e8();
    let o7 = 0, i3 = 0;
    if (this._renderers.forEach((r12) => {
      if (0 === r12.refCount)
        return this._renderers.delete(r12.key), void r12.dispose();
      let s3 = true, n9 = true;
      r12.forEachRenderable((t9) => {
        t9.visible && (o7 += t9.statistics.averageEdgeLength, i3++, s3 && t9.regular && (r12.updateTechnique(e11, false), s3 = false), n9 && t9.silhouette && (r12.updateTechnique(e11, true), n9 = false));
      }, t8);
    }), this._componentColorManager.garbageCollect(), this._componentColorManager.updateTextures(), 0 === i3)
      return;
    const a6 = new a4(40 * o7 / i3, t8);
    o(s2, r11[3], r11[7], r11[11]), n8.set(s2), r2(a6.transformWorldFromViewTH, n8.high), r2(a6.transformWorldFromViewTL, n8.low), n4(a6.transformViewFromCameraRelativeRS, e11.camera.viewMatrix), u2(we, a6.transformViewFromCameraRelativeRS), s(a6.transformNormalViewFromGlobal, we), a6.transformProjFromView = e11.camera.projectionMatrix, this._updateObjectCameraDistances(e11), this._renderers.forEach((t9) => {
      fe(t9, e11, a6), pe(t9, e11, a6);
    });
  }
  _updateTransparency(e11) {
    const t8 = o6(e11.components.meta), r11 = n7(e11.components.meta);
    t8 === e11.edgeTransparency && r11 === e11.objectTransparency || (e11.edgeTransparency = t8, e11.objectTransparency = r11, this._renderers.get(e11.rendererKey).setRenderablesDirty());
  }
  _computeModelTransformWithLocalOrigin(e11, t8, r11) {
    e11.getCombinedShaderTransformation(t8, r11);
    const s2 = null != t8.localOrigin ? this._localOrigins.register(t8.localOrigin) : this._localOrigins.acquire(o(this._tmpModelPosition, r11[12], r11[13], r11[14]));
    return t8.localOrigin = s2.origin, n5(s2.origin.vec3, r11), s2;
  }
  _createComponentBuffers(e11) {
    if (null == this._componentColorManager)
      return null;
    const t8 = new Array(), r11 = this._componentColorManager.getBuffer(e11.length);
    for (let n8 = 0; n8 < e11.length; n8++) {
      const s3 = e11[n8], o7 = r11.acquireIndex();
      t8.push({ index: o7, verticalOffset: 0, material: s3 });
    }
    const s2 = new le(r11, t8);
    return ge(s2), s2;
  }
  _extractEdges(e11, t8, r11, s2, n8, o7, i3 = o7.length) {
    return i3 < ne && (n8 = true), this._worker.process({ data: r11, indices: o7, indicesLength: i3, writerSettings: t8, skipDeduplicate: s2 }, e11, n8);
  }
  _createRenderable(e11, t8, r11, s2, n8) {
    const o7 = (t9) => new de(new r7(this.rctx, r3, { vertices: S2, instances: t9 === x2.REGULAR ? w2.glLayout : N.glLayout }, { vertices: this._verticesBufferObject, instances: h3.createVertex(this.rctx, F.STATIC_DRAW, t9 === x2.REGULAR ? e11.regular.instancesData.buffer : e11.silhouette.instancesData.buffer) }), t9 === x2.REGULAR ? e11.regular.lodInfo : e11.silhouette.lodInfo), i3 = e11.regular.lodInfo.lengths.length > 0 ? o7(x2.REGULAR) : null, a6 = e11.silhouette.lodInfo.lengths.length > 0 ? o7(x2.SILHOUETTE) : null, c3 = ((i3 == null ? void 0 : i3.vao.usedMemory) ?? 0) + ((a6 == null ? void 0 : a6.vao.usedMemory) ?? 0);
    return new ue(i3, a6, { gpuMemoryUsage: c3, externalMemoryUsage: n8, averageEdgeLength: e11.averageEdgeLength }, r11, o6(t8.meta), n7(t8.meta), t8, s2);
  }
  async _addGeometry(e11, t8, r11, s2, n8, o7) {
    if (r11.edgeIndicesLength <= 0)
      return;
    const i3 = r11.attributes.get(e5.POSITION), a6 = e3(), c3 = this._computeModelTransformWithLocalOrigin(e11, r11, a6), l5 = new Oe(i3, a6, c3);
    return this._addPositionData(t8, l5, r11.edgeIndicesLength, s2, n8, o7);
  }
  async _addPositionData(e11, t8, r11, s2, n8, o7 = false) {
    var _a;
    if (null == e11.loaded)
      return;
    const i3 = this._createComponentBuffers([s2]);
    if (null == i3)
      return;
    const a6 = this._acquireRenderer(s2.type, !!n8.hasSlicePlane, true), { modelTransform: c3, origin: l5 } = t8, d = t8.position.indices, h5 = t8.position, u4 = h5.data.length / h5.size, m3 = E2.createBuffer(u4);
    for (let p2 = 0; p2 < u4; p2++)
      m3.position.set(p2, 0, h5.data[p2 * h5.size]), m3.position.set(p2, 1, h5.data[p2 * h5.size + 1]), m3.position.set(p2, 2, h5.data[p2 * h5.size + 2]);
    f2(i3.meta, [0, m3.componentIndex.count], m3.componentIndex);
    const g2 = await this._updatingHandles.addPromise(this._extractEdges(((_a = e11.abort) == null ? void 0 : _a.signal) || this._workerAbort.signal, a6.writerSettings, m3, false, o7, d, r11));
    if (null == e11.loaded)
      return;
    const f3 = this._createRenderable(g2, i3, new he(c3, l5), a6.key, false);
    e11.renderables.push(f3), a6.addRenderable(f3), this._gpuMemoryUsage += f3.statistics.gpuMemoryUsage;
  }
  async _addComponentGeometry(e11, t8, r11, s2, n8, o7, i3) {
    if (null == t8.loaded)
      return 0;
    const a6 = this._createComponentBuffers(o7);
    if (null == a6)
      return 0;
    const c3 = r10(o7), l5 = this._acquireRenderer(c3, i3.hasSlicePlane || false, false), d = E2.createBuffer(r11.length / 3);
    t4(d.position.typedBuffer, r11, d.position.typedBufferStride, 3), f2(a6.meta, n8, d.componentIndex, s2);
    const h5 = true, u4 = l5.writerSettings, m3 = await this._updatingHandles.addPromise(this._extractEdges(this._workerAbort.signal, u4, d, h5, false, s2));
    if (null == t8.loaded)
      return 0;
    const g2 = this._createRenderable(m3, a6, e11, l5.key, true);
    return t8.renderables.push(g2), l5.addRenderable(g2), g2.statistics.gpuMemoryUsage;
  }
  async _addObjectMergedGeometries(e11, t8, r11, s2, n8) {
    const o7 = /* @__PURE__ */ new Map();
    let i3 = 0, a6 = 0, c3 = null;
    const l5 = e11.geometries.filter((e12) => {
      if (e12.edgeIndicesLength <= 0 || !e12.material.supportsEdges)
        return false;
      !c3 && e12.localOrigin && (c3 = e12);
      const t9 = e12.attributes.get(e5.POSITION);
      return a6 += t9.data.length / t9.size, i3 += e12.edgeIndicesLength, true;
    });
    if (0 === l5.length)
      return;
    const d = a6 >= 65536 ? Uint32Array : Uint16Array, h5 = i3 ? new d(i3) : null, u4 = [];
    let m3 = 0;
    l5.forEach((e12) => {
      const t9 = e12.attributes.get(e5.POSITION), r12 = t9.indices;
      let s3 = o7.get(t9.data);
      if (null == s3) {
        s3 = u4.length / 3;
        for (let e13 = 0; e13 < t9.data.length; e13 += t9.size)
          u4.push(t9.data[e13]), u4.push(t9.data[e13 + 1]), u4.push(t9.data[e13 + 2]);
        o7.set(t9.data, s3);
      }
      for (let n9 = 0; n9 < e12.edgeIndicesLength; n9++)
        h5[m3++] = s3 + r12[n9];
    });
    const g2 = c3 || e11.geometries[0], f3 = e3(), b3 = this._computeModelTransformWithLocalOrigin(e11, g2, f3);
    for (let p2 = 0; p2 < e11.geometries.length; p2++)
      e11.geometries[p2].localOrigin = b3.origin;
    const _3 = new Oe(new t3(u4, h5, 3), f3, b3);
    await this._updatingHandles.addPromise(this._addPositionData(t8, _3, h5.length, r11[0], s2, n8));
  }
  _acquireRenderer(e11, t8, r11) {
    const s2 = T2.getKey(e11, t8, r11);
    let n8 = this._renderers.get(s2);
    return null == this._strokesTexture && (this._strokesTexture = n6(this.rctx)), n8 || (n8 = new T2(this.rctx, this.techniqueRepository, { type: e11, hasSlicePlane: t8, strokesTexture: this._strokesTexture, legacy: r11, spherical: this.viewingMode === l2.Global }), this._renderers.set(s2, n8)), ++n8.refCount, n8;
  }
  _removeRenderable(e11) {
    ie(e11.regular), ie(e11.silhouette);
    const t8 = this._renderers.get(e11.rendererKey);
    if (t8) {
      t8.removeRenderable(e11), --t8.refCount, this._localOrigins.release(e11.transform.origin), this._gpuMemoryUsage -= e11.statistics.externalMemoryUsage ? 0 : e11.statistics.gpuMemoryUsage;
      for (const t9 of e11.components.meta)
        e11.components.buffer.releaseIndex(t9.index);
    }
  }
  _updateObjectCameraDistances(e11) {
    const t8 = e11.camera.eye, r11 = e11.camera.viewForward, s2 = n2(), n8 = (e12) => {
      K(s2, e12.center, t8);
      const n9 = P(s2, r11), o7 = e12.radius, i3 = n9 < -o7 ? 1 / 0 : n9 < o7 ? 0 : n9 - o7;
      e12.renderables.forEach((e13) => e13.distanceToCamera = i3);
    };
    this._objectEntries.forEach(n8), this._pendingDeletions.forEach(n8);
  }
  get test() {
    return { hasRenderedPrimitives: (e11) => {
      let t8 = false;
      const r11 = e11.perScreenPixelRatio, s2 = (e12, s3) => e12.forEachRenderable((e13) => {
        e13.visible && !t8 && (be(e13) && (t8 = je(e13.regular.lod.lengths, e13.distanceToCamera, r11) > 0), !t8 && ye(e13) && (t8 = je(e13.silhouette.lod.lengths, e13.distanceToCamera, r11) > 0));
      }, s3);
      return this._renderers.forEach((e12) => {
        t8 || (s2(e12, A.OPAQUE), s2(e12, A.TRANSPARENT));
      }), t8;
    }, getObjectData: (e11) => this._objectEntries.get(e11) };
  }
};
function ie(e11) {
  (e11 == null ? void 0 : e11.vao) && (e11.vao.vertexBuffers.instances.dispose(), e11.vao.disposeVAOOnly(), e11.vao = null);
}
function ae(e11) {
  let t8 = null, s2 = null;
  for (const n8 of e11.geometries) {
    if (n8.material.supportsEdges) {
      if (t8) {
        if (!h(t8, n8.transformation))
          return false;
      } else
        t8 = n8.transformation;
      if (s2 || null == n8.localOrigin) {
        if (null != (s2 == null ? void 0 : s2.localOrigin) && null != n8.localOrigin && s2.localOrigin.id !== n8.localOrigin.id)
          return false;
      } else
        s2 = n8;
    }
  }
  return true;
}
e([y({ constructOnly: true })], oe.prototype, "rctx", void 0), e([y({ constructOnly: true })], oe.prototype, "renderSR", void 0), e([y({ constructOnly: true })], oe.prototype, "viewingMode", void 0), e([y({ constructOnly: true })], oe.prototype, "techniqueRepository", void 0), e([y({ constructOnly: true })], oe.prototype, "setNeedsRender", void 0), e([y({ constructOnly: true })], oe.prototype, "schedule", void 0), e([y({ readOnly: true })], oe.prototype, "_updatingHandles", void 0), e([y({ readOnly: true })], oe.prototype, "updating", null), oe = e([a("esri.views.3d.webgl-engine.lib.edgeRendering.EdgeView")], oe);
var ce = class {
  constructor(e11, t8, r11, s2) {
    this.abort = e11, this.radius = s2, this.renderables = new Array();
    const n8 = e11 ? w(e11.signal, () => e11.abort()) : null;
    this.loaded = t8, this.loaded.then(() => {
      null != this.loaded && (this.loaded = true), this.abort = null, n8 == null ? void 0 : n8.remove();
    }), this.center = t2(r11);
  }
};
var le = class {
  constructor(e11, t8) {
    this.buffer = e11, this.meta = t8;
  }
};
var de = class {
  constructor(e11, t8) {
    this.vao = e11, this.lod = t8;
  }
};
var he = class {
  constructor(e11, t8) {
    this.modelMatrix = e11, this.origin = t8;
  }
};
var ue = class {
  constructor(e11, t8, r11, s2, n8, o7, i3, a6) {
    this.regular = e11, this.silhouette = t8, this.statistics = r11, this.transform = s2, this.edgeTransparency = n8, this.objectTransparency = o7, this.components = i3, this.rendererKey = a6, this.distanceToCamera = 0, this.visible = true;
  }
};
var me = class extends ue {
};
function ge(e11) {
  const { meta: t8, buffer: r11 } = e11, s2 = new Uint8Array(4);
  for (let n8 = 0; n8 < t8.length; n8++) {
    const e12 = t8[n8].material, i3 = t8[n8].index, a6 = e2(Math.round(e12.size * m2), 0, 255), c3 = e2(e12.extensionLength, -g, 255 - g) + g, l5 = 255 * e12.opacity, d = e12.color, h5 = 255 * d[0], u4 = 255 * d[1], m3 = 255 * d[2], g2 = 255 * d[3];
    r11.textureBuffer.setData(i3, 0, h5, u4, m3, g2), r11.textureBuffer.setData(i3, 1, a6, c3, e12.type, l5), C(t8[n8].verticalOffset, s2), r11.textureBuffer.setData(i3, 2, s2[0], s2[1], s2[2], s2[3]);
  }
}
function fe(e11, t8, r11) {
  const s2 = e11.bindRegularEdges(r11, t8), n8 = r11.transparency, o7 = t8.camera.perScreenPixelRatio;
  e11.forEachRenderable((n9) => {
    if (!be(n9) || !n9.visible)
      return;
    const i3 = je(n9.regular.lod.lengths, n9.distanceToCamera, o7);
    e11.renderRegularEdges(s2, n9, r11, t8, i3);
  }, n8);
}
function pe(e11, t8, r11) {
  const s2 = e11.bindSilhouetteEdges(r11, t8), n8 = r11.transparency, o7 = t8.camera.perScreenPixelRatio;
  e11.forEachRenderable((n9) => {
    if (!ye(n9) || !n9.visible)
      return;
    const i3 = je(n9.silhouette.lod.lengths, n9.distanceToCamera, o7);
    e11.renderSilhouetteEdges(s2, n9, r11, t8, i3);
  }, n8);
}
function be(e11) {
  return null != e11.regular;
}
var _e = class extends ue {
};
function ye(e11) {
  return null != e11.silhouette;
}
function je(e11, t8, r11) {
  const n8 = t8 * r11, o7 = x(e11, n8, true);
  return -1 === o7 ? n8 < e11[0] ? e11.length : 0 : e11.length - o7;
}
var Oe = class {
  constructor(e11, t8, r11) {
    this.position = e11, this.modelTransform = t8, this.origin = r11;
  }
};
var we = e4();
var Ee = () => Promise.reject();
export {
  oe as EdgeView,
  he as LegacyTransform,
  me as RegularRenderable,
  ue as Renderable,
  _e as SilhouetteRenderable
};
//# sourceMappingURL=EdgeView-DWI2WGCB.js.map
