import {
  n as n2,
  o,
  r as r2
} from "./chunk-653TPCXC.js";
import {
  S,
  U
} from "./chunk-O7SVQZNW.js";
import {
  r as r3
} from "./chunk-67GTVIII.js";
import {
  h as h2
} from "./chunk-HQBUCT2W.js";
import "./chunk-SQGFMYIT.js";
import {
  i
} from "./chunk-SWNHB34O.js";
import {
  m as m2
} from "./chunk-UXMZQA2H.js";
import "./chunk-V2LOXBCS.js";
import {
  u
} from "./chunk-NGAYW4TW.js";
import "./chunk-I3GWXP7X.js";
import "./chunk-QYYSPD2Q.js";
import "./chunk-K3DEHPDR.js";
import "./chunk-I6RS7YIS.js";
import "./chunk-FZI7RNDL.js";
import "./chunk-BSYULFZQ.js";
import "./chunk-YGP7UFWC.js";
import "./chunk-5IHJU3SQ.js";
import "./chunk-AD6XW3W5.js";
import {
  $
} from "./chunk-ES7G4AF5.js";
import "./chunk-SGCIDT4C.js";
import "./chunk-QXRPUAVL.js";
import "./chunk-M5UX4IRZ.js";
import "./chunk-2WUPZJUL.js";
import "./chunk-KN52PCW4.js";
import "./chunk-SFKZ25SS.js";
import "./chunk-NCZU5DB4.js";
import "./chunk-SMDSNUU2.js";
import "./chunk-XTY645DH.js";
import "./chunk-UIOX7MPV.js";
import "./chunk-HRDKP7QO.js";
import "./chunk-4UOHLZKX.js";
import "./chunk-VJ2I4VSQ.js";
import "./chunk-MCZ4QOSQ.js";
import "./chunk-6XTKBOD7.js";
import "./chunk-IUY6HBLC.js";
import "./chunk-BHOYA5LV.js";
import "./chunk-6RR3WN7W.js";
import "./chunk-TXCVD3YI.js";
import "./chunk-I7LDU4W6.js";
import "./chunk-SCRCLNT5.js";
import "./chunk-7VV4JAZJ.js";
import {
  c
} from "./chunk-M5DWZKDJ.js";
import "./chunk-PGADGS3I.js";
import "./chunk-7A5N7G2Z.js";
import "./chunk-MEEG7XMI.js";
import "./chunk-LJULTBAY.js";
import "./chunk-YKIGDW5O.js";
import "./chunk-7FQYGAVT.js";
import "./chunk-QO4PGON2.js";
import "./chunk-QRQWG4D3.js";
import {
  m,
  r
} from "./chunk-5JXZHN2A.js";
import {
  h
} from "./chunk-KTQIY334.js";
import "./chunk-QWREIIJ5.js";
import "./chunk-6ZDDHEYR.js";
import "./chunk-YQQSFFN3.js";
import "./chunk-32X2FZ3S.js";
import "./chunk-4IJED6JM.js";
import "./chunk-LGIO6OCK.js";
import "./chunk-C5EJV3NW.js";
import "./chunk-XXIDOBRO.js";
import "./chunk-JL4LXZGM.js";
import "./chunk-O556EBAK.js";
import "./chunk-IJD65EMQ.js";
import "./chunk-4YGBWYMD.js";
import "./chunk-ZPU7GNG4.js";
import "./chunk-TNR6E67I.js";
import "./chunk-7O3VD45U.js";
import "./chunk-QREUCRQ4.js";
import "./chunk-YK3UMVCY.js";
import {
  e as e3
} from "./chunk-IQFWVTUJ.js";
import "./chunk-GB4RVOXH.js";
import "./chunk-JTUYA5FE.js";
import "./chunk-UNTQATE2.js";
import "./chunk-5YY6NZNY.js";
import "./chunk-DCBZOZ54.js";
import "./chunk-5IT6RVBX.js";
import "./chunk-N4HNOQVJ.js";
import "./chunk-MTQHYT7Y.js";
import "./chunk-JCP47SOM.js";
import "./chunk-CXCB57TE.js";
import "./chunk-IWO6JXL2.js";
import "./chunk-AVR3LWTZ.js";
import "./chunk-YUWVLORR.js";
import "./chunk-FFG7BDAP.js";
import "./chunk-I4SHZ6P5.js";
import "./chunk-DGRFM5OL.js";
import "./chunk-AOAT6HYL.js";
import "./chunk-JBU54P54.js";
import "./chunk-5LIYYE75.js";
import "./chunk-252ISA6Z.js";
import "./chunk-TLTAGTBA.js";
import "./chunk-2QPP5AGU.js";
import "./chunk-2C26DRKK.js";
import "./chunk-M4RFJU4F.js";
import "./chunk-WKVHVZW2.js";
import "./chunk-VIKID44H.js";
import "./chunk-RLZYC2LS.js";
import "./chunk-TXLJQAAN.js";
import "./chunk-3AIILHI5.js";
import "./chunk-JKLFCJPR.js";
import "./chunk-J6T3FJLS.js";
import "./chunk-7JR6S3WL.js";
import "./chunk-P4MNTMCZ.js";
import "./chunk-BSPKLAHD.js";
import "./chunk-VS6AHHIY.js";
import "./chunk-BFOJPIF7.js";
import "./chunk-3JC3OUNW.js";
import "./chunk-RO3CTAP7.js";
import "./chunk-GKMVTGGM.js";
import "./chunk-XGTCDM4C.js";
import "./chunk-QNG4TY7L.js";
import "./chunk-VEYMN5N3.js";
import "./chunk-W5ALAOW2.js";
import "./chunk-FHDHOWK5.js";
import "./chunk-Y546C2O5.js";
import "./chunk-BDRVHR2K.js";
import "./chunk-ZLQTPFTL.js";
import "./chunk-HZSGATFT.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-ERD6I7QP.js";
import "./chunk-Z3NX5DTX.js";
import "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import "./chunk-G7YFDDME.js";
import "./chunk-PCKG3UTS.js";
import "./chunk-3VMVD66K.js";
import "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-I2X6UR6L.js";
import "./chunk-5JYVZQZR.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-545NO6M2.js";
import "./chunk-5LSHHVQ5.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import {
  G
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  b,
  e as e2
} from "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/views/2d/layers/TileLayerView2D.js
var v = [0, 0];
var T = class extends i(r2(m2(u))) {
  constructor() {
    super(...arguments), this._fetchQueue = null, this._highlightGraphics = new c(), this._highlightView = null, this._popupHighlightHelper = null, this._tileStrategy = null, this.layer = null;
  }
  get resampling() {
    return !("resampling" in this.layer) || false !== this.layer.resampling;
  }
  get tilemapCache() {
    return "tilemapCache" in this.layer ? this.layer.tilemapCache : null;
  }
  update(e4) {
    var _a;
    this._fetchQueue.pause(), this._fetchQueue.state = e4.state, this._tileStrategy.update(e4), this._fetchQueue.resume(), (_a = this._highlightView) == null ? void 0 : _a.processUpdate(e4);
  }
  attach() {
    const e4 = "tileServers" in this.layer ? this.layer.tileServers : null, t = this.tilemapCache;
    if (this._tileInfoView = new h(this.layer.tileInfo, this.layer.fullExtent, t == null ? void 0 : t.effectiveMinLOD, t == null ? void 0 : t.effectiveMaxLOD), this._fetchQueue = new m({ tileInfoView: this._tileInfoView, concurrency: e4 && 10 * e4.length || 10, process: (e5, t2) => this.fetchTile(e5, t2) }), this._tileStrategy = new r({ cachePolicy: "keep", resampling: this.resampling, acquireTile: (e5) => this.acquireTile(e5), releaseTile: (e5) => this.releaseTile(e5), tileInfoView: this._tileInfoView }), S(this, this.layer)) {
      const e5 = this._highlightView = new $({ view: this.view, graphics: this._highlightGraphics, requestUpdateCallback: () => this.requestUpdate(), container: new h2(this.view.featuresTilingScheme), defaultPointSymbolEnabled: false });
      this.container.addChild(this._highlightView.container), this._popupHighlightHelper = new U({ createFetchPopupFeaturesQueryGeometry: (e6, t2) => r3(e6, t2, this.view), highlightGraphics: this._highlightGraphics, highlightGraphicUpdated: (t2, i2) => {
        e5.graphicUpdateHandler({ graphic: t2, property: i2 });
      }, layerView: this, updatingHandles: this._updatingHandles });
    }
    this.requestUpdate(), this.addAttachHandles(this._updatingHandles.add(() => this.resampling, () => {
      this.doRefresh();
    })), super.attach();
  }
  detach() {
    var _a, _b;
    super.detach(), this._tileStrategy.destroy(), this._fetchQueue.clear(), this.container.removeAllChildren(), (_a = this._popupHighlightHelper) == null ? void 0 : _a.destroy(), (_b = this._highlightView) == null ? void 0 : _b.destroy(), this._fetchQueue = this._tileStrategy = this._tileInfoView = this._popupHighlightHelper = null;
  }
  async fetchPopupFeaturesAtLocation(e4, t) {
    return this._popupHighlightHelper ? this._popupHighlightHelper.fetchPopupFeaturesAtLocation(e4, t) : [];
  }
  highlight(e4) {
    return this._popupHighlightHelper ? this._popupHighlightHelper.highlight(e4) : e2();
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  supportsSpatialReference(e4) {
    var _a;
    return G((_a = this.layer.tileInfo) == null ? void 0 : _a.spatialReference, e4);
  }
  async doRefresh() {
    if (this.attached) {
      if (this.suspended)
        return this._tileStrategy.clear(), void this.requestUpdate();
      this._fetchQueue.reset(), this._tileStrategy.refresh((e4) => this._updatingHandles.addPromise(this._enqueueTileFetch(e4)));
    }
  }
  acquireTile(e4) {
    const t = this._bitmapView.createTile(e4), i2 = t.bitmap;
    return [i2.x, i2.y] = this._tileInfoView.getTileCoords(v, t.key), i2.resolution = this._tileInfoView.getTileResolution(t.key), [i2.width, i2.height] = this._tileInfoView.tileInfo.size, this._updatingHandles.addPromise(this._enqueueTileFetch(t)), this._bitmapView.addChild(t), this.requestUpdate(), t;
  }
  releaseTile(e4) {
    this._fetchQueue.abort(e4.key.id), this._bitmapView.removeChild(e4), e4.once("detach", () => e4.destroy()), this.requestUpdate();
  }
  async fetchTile(e4, t = {}) {
    const i2 = this.tilemapCache, { signal: r4, resamplingLevel: o2 = 0 } = t;
    if (!i2)
      try {
        return await this._fetchImage(e4, r4);
      } catch (m3) {
        if (!b(m3) && !this.resampling)
          return o(this._tileInfoView.tileInfo.size);
        if (o2 < 3) {
          const i3 = this._tileInfoView.getTileParentId(e4.id);
          if (i3) {
            const s = new e3(i3), r5 = await this.fetchTile(s, { ...t, resamplingLevel: o2 + 1 });
            return n2(this._tileInfoView, r5, s, e4);
          }
        }
        throw m3;
      }
    const l = new e3(0, 0, 0, 0);
    let p;
    try {
      if (await i2.fetchAvailabilityUpsample(e4.level, e4.row, e4.col, l, { signal: r4 }), l.level !== e4.level && !this.resampling)
        return o(this._tileInfoView.tileInfo.size);
      p = await this._fetchImage(l, r4);
    } catch (m3) {
      if (b(m3))
        throw m3;
      p = await this._fetchImage(e4, r4);
    }
    return this.resampling ? n2(this._tileInfoView, p, l, e4) : p;
  }
  async _enqueueTileFetch(e4) {
    if (!this._fetchQueue.has(e4.key.id)) {
      try {
        const t = await this._fetchQueue.push(e4.key);
        e4.bitmap.source = t, e4.bitmap.width = this._tileInfoView.tileInfo.size[0], e4.bitmap.height = this._tileInfoView.tileInfo.size[1], e4.once("attach", () => this.requestUpdate());
      } catch (t) {
        b(t) || n.getLogger(this).error(t);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e4, t) {
    return this.layer.fetchImageBitmapTile(e4.level, e4.row, e4.col, { signal: t });
  }
};
e([y()], T.prototype, "resampling", null), e([y()], T.prototype, "tilemapCache", null), T = e([a("esri.views.2d.layers.TileLayerView2D")], T);
var I = T;
export {
  I as default
};
//# sourceMappingURL=TileLayerView2D-OT3OFP3Y.js.map
