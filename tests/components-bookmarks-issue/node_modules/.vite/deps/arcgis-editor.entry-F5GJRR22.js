import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  importCoreReactiveUtils,
  newWidgetsEditor
} from "./chunk-YXW2SI4L.js";
import {
  addHandles,
  checkForView,
  referenceElementHelper
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-editor.entry.js
var editorCss = "";
var ArcgisEditor = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.arcgisEditorReady = createEvent(this, "arcgisEditorReady", 7);
    this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
    this._watchHandles = [];
    this.referenceElement = void 0;
    this.activeWorkflow = void 0;
    this.allowedWorkflows = void 0;
    this.icon = void 0;
    this.labelOptions = void 0;
    this.layerInfos = void 0;
    this.snappingOptions = void 0;
    this.supportingWidgetDefaults = void 0;
    this.tooltipOptions = void 0;
    this.visibleElementsCreateFeaturesSection = true;
    this.visibleElementsEditFeaturesSection = true;
    this.visibleElementsLabelsToggle = true;
    this.visibleElementsTooltipsToggle = true;
    this.visibleElementsSnappingControls = true;
    this.visibleElementsSnappingControlsHeader = true;
    this.visibleElementsSnappingControlsEnabledToggle = true;
    this.visibleElementsSnappingControlsSelfEnabledToggle = true;
    this.visibleElementsSnappingControlsFeatureEnabledToggle = true;
    this.visibleElementsSnappingControlsLayerList = true;
    this.position = "bottom-left";
    this.view = void 0;
    this.widget = void 0;
  }
  referenceElementWatcher(value) {
    void referenceElementHelper(this, value);
  }
  allowedWorkflowsWatcher(value) {
    if (this.widget) {
      this.widget.allowedWorkflows = value;
    }
  }
  iconWatcher(value) {
    if (this.widget) {
      this.widget.icon = value;
    }
  }
  labelOptionsWatcher(value) {
    if (this.widget) {
      this.widget.labelOptions = value;
    }
  }
  layerInfosWatcher(value) {
    if (this.widget) {
      this.widget.layerInfos = value;
    }
  }
  snappingOptionsWatcher(value) {
    if (this.widget) {
      this.widget.snappingOptions = value;
    }
  }
  supportingWidgetDefaultsWatcher(value) {
    if (this.widget) {
      this.widget.supportingWidgetDefaults = value;
    }
  }
  tooltipOptionsWatcher(value) {
    if (this.widget) {
      this.widget.tooltipOptions = value;
    }
  }
  visibleElementsCreateFeaturesSectionWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        createFeaturesSection: value
      };
    }
  }
  visibleElementsEditFeaturesSectionWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        editFeaturesSection: value
      };
    }
  }
  visibleElementsLabelsToggleWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        labelsToggle: value
      };
    }
  }
  visibleElementsTooltipsToggleWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        tooltipsToggle: value
      };
    }
  }
  visibleElementsSnappingControlsWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        snappingControls: value
      };
    }
  }
  visibleElementsSnappingControlsHeaderWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        snappingControlsElements: {
          ...this.widget.visibleElements.snappingControlsElements,
          header: value
        }
      };
    }
  }
  visibleElementsSnappingControlsEnabledToggleWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        snappingControlsElements: {
          ...this.widget.visibleElements.snappingControlsElements,
          enabledToggle: value
        }
      };
    }
  }
  visibleElementsSnappingControlsSelfEnabledToggleWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        snappingControlsElements: {
          ...this.widget.visibleElements.snappingControlsElements,
          selfEnabledToggle: value
        }
      };
    }
  }
  visibleElementsSnappingControlsFeatureEnabledToggleWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        snappingControlsElements: {
          ...this.widget.visibleElements.snappingControlsElements,
          featureEnabledToggle: value
        }
      };
    }
  }
  visibleElementsSnappingControlsLayerListWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        snappingControlsElements: {
          ...this.widget.visibleElements.snappingControlsElements,
          layerList: value
        }
      };
    }
  }
  positionWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.view.ui.move(this.childElem, value);
    }
  }
  viewWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.view = value;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Methods
  //
  //--------------------------------------------------------------------------
  async cancelWorkflow() {
    var _a;
    await ((_a = this.widget) == null ? void 0 : _a.cancelWorkflow());
  }
  async deleteFeatureFromWorkflow() {
    var _a;
    await ((_a = this.widget) == null ? void 0 : _a.deleteFeatureFromWorkflow());
  }
  async startCreateFeaturesWorkflowAtFeatureCreation(info) {
    var _a;
    await ((_a = this.widget) == null ? void 0 : _a.startCreateFeaturesWorkflowAtFeatureCreation(info));
  }
  async startCreateFeaturesWorkflowAtFeatureTypeSelection() {
    var _a;
    await ((_a = this.widget) == null ? void 0 : _a.startCreateFeaturesWorkflowAtFeatureTypeSelection());
  }
  async startUpdateWorkflowAtFeatureEdit(feature) {
    var _a;
    await ((_a = this.widget) == null ? void 0 : _a.startUpdateWorkflowAtFeatureEdit(feature));
  }
  async startUpdateWorkflowAtFeatureSelection() {
    var _a;
    await ((_a = this.widget) == null ? void 0 : _a.startUpdateWorkflowAtFeatureSelection());
  }
  async startUpdateWorkflowAtMultipleFeatureSelection(candidates) {
    var _a;
    await ((_a = this.widget) == null ? void 0 : _a.startUpdateWorkflowAtMultipleFeatureSelection(candidates));
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = this._createParams();
    const widget = await newWidgetsEditor(params);
    this.widget = widget;
    await this._addWatchers();
    this._addContainer();
    this.arcgisEditorReady.emit();
    checkForView(this);
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    return h("div", { ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  _addContainer() {
    this.widget.container = this.childElem;
  }
  async _addWatchers() {
    const { watch } = await importCoreReactiveUtils();
    addHandles(this, watch(() => this.widget.activeWorkflow, (value) => {
      this.activeWorkflow = value;
      this.arcgisPropertyChange.emit({ name: "activeWorkflow" });
    }, {
      initial: true
    }));
  }
  _createParams() {
    const params = {};
    params.visibleElements = {
      createFeaturesSection: this.visibleElementsCreateFeaturesSection,
      editFeaturesSection: this.visibleElementsEditFeaturesSection,
      labelsToggle: this.visibleElementsLabelsToggle,
      tooltipsToggle: this.visibleElementsTooltipsToggle,
      snappingControls: this.visibleElementsSnappingControls,
      snappingControlsElements: {
        header: this.visibleElementsSnappingControlsHeader,
        enabledToggle: this.visibleElementsSnappingControlsEnabledToggle,
        selfEnabledToggle: this.visibleElementsSnappingControlsSelfEnabledToggle,
        featureEnabledToggle: this.visibleElementsSnappingControlsFeatureEnabledToggle,
        layerList: this.visibleElementsSnappingControlsLayerList
      }
    };
    if (this.allowedWorkflows) {
      params.allowedWorkflows = this.allowedWorkflows;
    }
    if (this.icon) {
      params.icon = this.icon;
    }
    if (this.labelOptions) {
      params.labelOptions = this.labelOptions;
    }
    if (this.layerInfos) {
      params.layerInfos = this.layerInfos;
    }
    if (this.snappingOptions) {
      params.snappingOptions = this.snappingOptions;
    }
    if (this.supportingWidgetDefaults) {
      params.supportingWidgetDefaults = this.supportingWidgetDefaults;
    }
    if (this.tooltipOptions) {
      params.tooltipOptions = this.tooltipOptions;
    }
    if (this.view) {
      params.view = this.view;
    }
    return params;
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "referenceElement": ["referenceElementWatcher"],
      "allowedWorkflows": ["allowedWorkflowsWatcher"],
      "icon": ["iconWatcher"],
      "labelOptions": ["labelOptionsWatcher"],
      "layerInfos": ["layerInfosWatcher"],
      "snappingOptions": ["snappingOptionsWatcher"],
      "supportingWidgetDefaults": ["supportingWidgetDefaultsWatcher"],
      "tooltipOptions": ["tooltipOptionsWatcher"],
      "visibleElementsCreateFeaturesSection": ["visibleElementsCreateFeaturesSectionWatcher"],
      "visibleElementsEditFeaturesSection": ["visibleElementsEditFeaturesSectionWatcher"],
      "visibleElementsLabelsToggle": ["visibleElementsLabelsToggleWatcher"],
      "visibleElementsTooltipsToggle": ["visibleElementsTooltipsToggleWatcher"],
      "visibleElementsSnappingControls": ["visibleElementsSnappingControlsWatcher"],
      "visibleElementsSnappingControlsHeader": ["visibleElementsSnappingControlsHeaderWatcher"],
      "visibleElementsSnappingControlsEnabledToggle": ["visibleElementsSnappingControlsEnabledToggleWatcher"],
      "visibleElementsSnappingControlsSelfEnabledToggle": ["visibleElementsSnappingControlsSelfEnabledToggleWatcher"],
      "visibleElementsSnappingControlsFeatureEnabledToggle": ["visibleElementsSnappingControlsFeatureEnabledToggleWatcher"],
      "visibleElementsSnappingControlsLayerList": ["visibleElementsSnappingControlsLayerListWatcher"],
      "position": ["positionWatcher"],
      "view": ["viewWatcher"]
    };
  }
};
ArcgisEditor.style = editorCss;
export {
  ArcgisEditor as arcgis_editor
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-editor.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-editor.entry-F5GJRR22.js.map
