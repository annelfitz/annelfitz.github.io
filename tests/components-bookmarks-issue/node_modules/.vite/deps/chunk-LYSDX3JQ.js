import {
  I as I12,
  O as O15,
  j as j9,
  z as z10
} from "./chunk-DUBEFL4F.js";
import {
  t as t44
} from "./chunk-LWKMC2O4.js";
import {
  t as t43
} from "./chunk-MYIS6GAM.js";
import {
  a as a28,
  b as b7,
  i as i19,
  p as p18
} from "./chunk-GJAVIUYF.js";
import {
  s as s41
} from "./chunk-THI3HMUW.js";
import {
  f as f23,
  p as p20
} from "./chunk-D27SL3PU.js";
import {
  r as r32
} from "./chunk-UYZHJ6W5.js";
import {
  f as f22,
  m as m24
} from "./chunk-HMX5RG2W.js";
import {
  r as r31
} from "./chunk-EHB2WTOQ.js";
import {
  i as i24,
  t as t45
} from "./chunk-IV6VLZIW.js";
import {
  c as c19,
  s as s40
} from "./chunk-Z5CSFTR2.js";
import {
  d as d19
} from "./chunk-X25I35MQ.js";
import {
  c as c21,
  d as d20
} from "./chunk-HRXVPBNV.js";
import {
  c as c20,
  n as n36,
  o as o37
} from "./chunk-M7J75LNF.js";
import {
  S as S10
} from "./chunk-EZ6O522Q.js";
import {
  x as x11
} from "./chunk-GNXZHLPA.js";
import {
  f as f21
} from "./chunk-MSZX46OT.js";
import {
  A as A13,
  i as i22,
  t as t42
} from "./chunk-PGT4QNPP.js";
import {
  f as f20
} from "./chunk-ZTBDM4T7.js";
import {
  $ as $2,
  B as B5,
  N as N6,
  Pe,
  Q as Q2,
  Ue,
  W as W3,
  Y as Y5,
  ce,
  dt,
  f as f14,
  g as g6,
  h as h11,
  ht,
  lt as lt2,
  ne,
  u as u12,
  ve,
  we
} from "./chunk-4VZEIAYK.js";
import {
  c as c13
} from "./chunk-LVTZ43ZA.js";
import {
  r as r24
} from "./chunk-JZMK5M5U.js";
import {
  E as E19,
  _ as _13,
  o as o36
} from "./chunk-XGZTEEVU.js";
import {
  l as l20,
  u as u20
} from "./chunk-CDVKS7QW.js";
import {
  d as d18,
  i as i23
} from "./chunk-3LS2J3MO.js";
import {
  e as e35,
  n as n35,
  o as o35,
  z as z9
} from "./chunk-ADQ3WTAH.js";
import {
  a as a29,
  d as d17
} from "./chunk-MLOYGOII.js";
import {
  f as f19
} from "./chunk-TAK4IJZC.js";
import {
  b as b8,
  e as e36,
  i as i20,
  s as s37,
  w as w13
} from "./chunk-KXXPJZB4.js";
import {
  s as s38,
  s2 as s39,
  t as t41,
  v as v10
} from "./chunk-UKC6CQZS.js";
import {
  t as t40
} from "./chunk-UTDIJKDU.js";
import {
  b as b9,
  u as u19
} from "./chunk-F2RCWS7B.js";
import {
  h as h14,
  i as i21,
  p as p19,
  r as r30
} from "./chunk-QC6EDX4D.js";
import {
  c as c18
} from "./chunk-HGJYELD4.js";
import {
  o as o33
} from "./chunk-ANVRI6HX.js";
import {
  m as m23
} from "./chunk-YWTRNCRU.js";
import {
  e as e33,
  t as t38,
  z as z8
} from "./chunk-N5A4ZMGV.js";
import {
  a as a27,
  d2 as d16,
  e as e34,
  n as n34,
  o as o34,
  t as t39,
  u as u18
} from "./chunk-NRRXLBXG.js";
import {
  q as q4,
  v as v9,
  w as w11,
  z as z6
} from "./chunk-MP3BMLR3.js";
import {
  I as I11,
  L as L8,
  U as U7
} from "./chunk-3U6VZTOQ.js";
import {
  E as E18,
  I as I10,
  M as M6,
  R as R6,
  _ as _12
} from "./chunk-5M7PURL4.js";
import {
  e as e32
} from "./chunk-G7RYWCEO.js";
import {
  m as m22
} from "./chunk-B473F3N3.js";
import {
  f as f18,
  g as g8,
  p as p17
} from "./chunk-WOKVMRAD.js";
import {
  V as V3
} from "./chunk-ZJXOOEWD.js";
import {
  l as l16
} from "./chunk-O7GHSWFW.js";
import {
  A as A11,
  E as E17,
  I as I8
} from "./chunk-XPABJ7YF.js";
import {
  o as o32
} from "./chunk-J6WYS6OG.js";
import {
  s as s36,
  t as t37
} from "./chunk-ADU5ETX4.js";
import {
  O as O14,
  a as a26,
  d as d15,
  h as h13,
  i as i18,
  l as l19,
  m as m20,
  m2 as m21,
  n as n33,
  o as o30,
  o2 as o31,
  q as q6,
  r as r29,
  u as u17
} from "./chunk-ZZWM6CET.js";
import {
  A as A12,
  L as L7,
  N as N8,
  a as a25,
  j2 as j8
} from "./chunk-WS5XOTML.js";
import {
  u as u14
} from "./chunk-YWPIIZFL.js";
import {
  e as e31
} from "./chunk-LARO5FBS.js";
import {
  i as i14
} from "./chunk-QFYJUFUK.js";
import {
  $ as $3,
  M as M5,
  R as R5,
  c as c17,
  l as l18,
  m as m18,
  m2 as m19,
  n as n32,
  r as r26,
  r2 as r28,
  s as s34,
  s2 as s35,
  se
} from "./chunk-YYI7TRI3.js";
import {
  _ as _11,
  t as t33
} from "./chunk-RQW2N53A.js";
import {
  P as P7,
  X as X5
} from "./chunk-LHVWC4RW.js";
import {
  c as c16,
  f as f16,
  l as l17,
  n as n29,
  o as o28,
  o2 as o29
} from "./chunk-GN2OLKIL.js";
import {
  Q as Q4,
  t as t36
} from "./chunk-LMCIQOBX.js";
import {
  it,
  n as n28,
  r as r25,
  s as s33,
  t as t34
} from "./chunk-5WKN6K5Z.js";
import {
  n as n31
} from "./chunk-WCBHO6BH.js";
import {
  a as a22
} from "./chunk-V7NVRGBC.js";
import {
  r as r27
} from "./chunk-RFBA77K3.js";
import {
  E as E13,
  G as G6,
  T as T5,
  c as c12,
  e as e29,
  i as i15,
  o2 as o26
} from "./chunk-46T3D2EU.js";
import {
  G as G5,
  W as W2,
  Z as Z2,
  ls,
  ps,
  us
} from "./chunk-RYF27IO3.js";
import {
  O as O13
} from "./chunk-7UDCRD5C.js";
import {
  p as p16
} from "./chunk-B3GKRGWX.js";
import {
  I as I9,
  n as n30,
  u as u15
} from "./chunk-FN7LLNVA.js";
import {
  E as E16,
  I as I7,
  m as m17
} from "./chunk-QCUK7T7Y.js";
import {
  lt
} from "./chunk-SPYHZ6ZW.js";
import {
  C as C8
} from "./chunk-PMFQ2A2V.js";
import {
  t as t35,
  u as u16
} from "./chunk-HHAESKQ6.js";
import {
  A as A10,
  E as E15,
  H as H5,
  O as O12
} from "./chunk-TACIE3AK.js";
import {
  c as c15
} from "./chunk-KYKKN5I4.js";
import {
  f as f17
} from "./chunk-4MJOJUFR.js";
import {
  N as N5,
  U as U5,
  a as a19,
  b as b6,
  e as e27,
  e2 as e28,
  i as i13,
  l as l14,
  m as m14,
  o as o21,
  o2 as o25,
  r as r21,
  r2 as r22,
  r3 as r23,
  s as s29,
  s2 as s30,
  t as t25,
  t2 as t29,
  t3 as t30,
  t5 as t31,
  u2 as u11,
  y as y6
} from "./chunk-PZYSOG4K.js";
import {
  o as o23,
  r as r19
} from "./chunk-PTIWH4S7.js";
import {
  A as A8,
  A2 as A9,
  B as B6,
  C as C7,
  D as D3,
  D2 as D4,
  E as E14,
  F as F5,
  G as G7,
  H as H4,
  J as J2,
  K as K4,
  L as L6,
  N as N7,
  O as O10,
  O2 as O11,
  P as P6,
  Q as Q3,
  R as R4,
  S as S8,
  S2 as S9,
  T as T6,
  T2 as T7,
  U as U6,
  W as W4,
  X as X4,
  Y as Y6,
  _ as _10,
  a as a23,
  a2 as a24,
  c as c14,
  d as d14,
  g as g7,
  h as h12,
  i as i16,
  i2 as i17,
  j as j7,
  k as k4,
  l as l15,
  m as m15,
  m2 as m16,
  n as n27,
  o as o27,
  p as p14,
  p2 as p15,
  q as q5,
  s as s31,
  s2 as s32,
  u as u13,
  v as v8,
  w as w12,
  x as x9,
  x2 as x10,
  y as y8,
  y2 as y9,
  z as z7
} from "./chunk-B5IJN7OM.js";
import {
  f as f15
} from "./chunk-F7X3QPMY.js";
import {
  t as t32
} from "./chunk-BMTOVJNA.js";
import {
  e as e30
} from "./chunk-CMLG62TA.js";
import {
  t as t28
} from "./chunk-WBRPZ7X2.js";
import {
  d as d13,
  u as u10
} from "./chunk-T7GGEMBH.js";
import {
  e as e26
} from "./chunk-BEXFYHUM.js";
import {
  n as n24
} from "./chunk-MDGE56IH.js";
import {
  s as s26,
  s2 as s28
} from "./chunk-47WR7A25.js";
import {
  M as M4,
  a as a20,
  n as n25,
  r as r20,
  w as w10
} from "./chunk-6GHUHFYG.js";
import {
  n as n26,
  y as y7
} from "./chunk-MHIDY6OV.js";
import {
  a as a21,
  c as c11,
  s as s27,
  t as t26,
  t2 as t27
} from "./chunk-QYYSPD2Q.js";
import {
  _ as _9,
  d as d12,
  i as i12
} from "./chunk-K3DEHPDR.js";
import {
  o as o22
} from "./chunk-I6RS7YIS.js";
import {
  d as d11,
  l as l13
} from "./chunk-BSYULFZQ.js";
import {
  E as E12
} from "./chunk-5IHJU3SQ.js";
import {
  o as o24
} from "./chunk-BHOYA5LV.js";
import {
  s as s25
} from "./chunk-PMQ5HDZI.js";
import {
  n as n23,
  p as p13
} from "./chunk-5T2QNVDA.js";
import {
  t as t24
} from "./chunk-TXCVD3YI.js";
import {
  o as o20
} from "./chunk-SCRCLNT5.js";
import {
  l as l12
} from "./chunk-M5DWZKDJ.js";
import {
  A as A7
} from "./chunk-NT7TKMWH.js";
import {
  I as I6,
  L as L5,
  w as w9
} from "./chunk-KWLN46JY.js";
import {
  B as B4,
  k as k3,
  p as p12,
  w as w8,
  x as x8,
  y as y5
} from "./chunk-M6P775BS.js";
import {
  t as t18
} from "./chunk-J5F4VILS.js";
import {
  t as t23
} from "./chunk-KSBIR2KG.js";
import {
  N as N4
} from "./chunk-XVQGALI7.js";
import {
  n as n20
} from "./chunk-XFQIXBHG.js";
import {
  t as t16
} from "./chunk-MVSN2HAN.js";
import {
  c as c8
} from "./chunk-7A5N7G2Z.js";
import {
  C as C6
} from "./chunk-MDXZIVBP.js";
import {
  o as o19,
  t as t22
} from "./chunk-7W5MWPC6.js";
import {
  c as c10,
  i as i11,
  r as r18
} from "./chunk-OE52KVBM.js";
import {
  E as E11,
  R as R3
} from "./chunk-L577YNYZ.js";
import {
  a as a18,
  c as c9,
  d as d10,
  h as h9,
  m as m13,
  n as n22,
  s as s23,
  t as t21,
  u as u9
} from "./chunk-GL5TSVQL.js";
import {
  h as h10
} from "./chunk-ZQTY6DQZ.js";
import {
  c as c7
} from "./chunk-OBABKQ6S.js";
import {
  d as d8
} from "./chunk-4GGEQMYI.js";
import {
  r as r15,
  r2 as r16,
  t as t17
} from "./chunk-ZPC74XHC.js";
import {
  A as A6
} from "./chunk-IVGJRGD2.js";
import {
  s as s24
} from "./chunk-2DATALUO.js";
import {
  r as r17,
  t as t19
} from "./chunk-JBF6CULO.js";
import {
  d as d9,
  e as e24,
  f as f13,
  h as h8,
  i as i10,
  n as n21
} from "./chunk-3DFMDDMO.js";
import {
  t as t20
} from "./chunk-4BCSYJOQ.js";
import {
  O as O9
} from "./chunk-GMUCR2DJ.js";
import {
  S as S7,
  _ as _8,
  l as l11,
  o as o17,
  r as r14,
  s as s22
} from "./chunk-MEEG7XMI.js";
import {
  o as o16
} from "./chunk-LJULTBAY.js";
import {
  t as t15
} from "./chunk-FD4DXBZA.js";
import {
  n as n19,
  s as s19
} from "./chunk-YKIGDW5O.js";
import {
  p as p11,
  t as t14
} from "./chunk-42NBQMXF.js";
import {
  a as a17,
  s as s20
} from "./chunk-YFKU7PPC.js";
import {
  e as e25
} from "./chunk-6MGK5WBT.js";
import {
  s as s21
} from "./chunk-GO2OGJDG.js";
import {
  o as o18
} from "./chunk-UYMREM3D.js";
import {
  e as e23
} from "./chunk-CXP4BHPO.js";
import {
  a as a16
} from "./chunk-QRQWG4D3.js";
import {
  b as b4,
  i as i9,
  s as s17,
  x as x7
} from "./chunk-IJD65EMQ.js";
import {
  h as h7
} from "./chunk-4YGBWYMD.js";
import {
  e as e21
} from "./chunk-IQFWVTUJ.js";
import {
  e2 as e22,
  m as m11
} from "./chunk-JTUYA5FE.js";
import {
  E as E10,
  _ as _7,
  i as i8
} from "./chunk-UNTQATE2.js";
import {
  n as n18
} from "./chunk-5YY6NZNY.js";
import {
  o as o15,
  r as r13
} from "./chunk-YUWVLORR.js";
import {
  Y as Y4
} from "./chunk-7MYYCSEB.js";
import {
  H as H3,
  N as N3,
  b as b5,
  g2 as g5,
  j as j6,
  s as s18
} from "./chunk-ESK2YRQM.js";
import {
  E as E8,
  m as m10
} from "./chunk-L7WI7KB2.js";
import {
  f as f12,
  s as s16
} from "./chunk-3GY64OYE.js";
import {
  t as t12
} from "./chunk-QIEXJLRX.js";
import {
  t as t13
} from "./chunk-UNTPHF5R.js";
import {
  H as H2
} from "./chunk-YJFPDMSR.js";
import {
  E as E9
} from "./chunk-ECTYMEUP.js";
import {
  h as h6
} from "./chunk-I4SHZ6P5.js";
import {
  C as C5,
  F as F4,
  I as I5,
  g as g4,
  o as o14
} from "./chunk-QYDOVVH7.js";
import {
  I as I4
} from "./chunk-YH3SFFF7.js";
import {
  r as r12
} from "./chunk-JBU54P54.js";
import {
  l2 as l10,
  n3 as n17
} from "./chunk-VVAVEXL2.js";
import {
  t as t10
} from "./chunk-BKBB7AOV.js";
import {
  B as B3,
  C as C4,
  D as D2,
  E as E7,
  F as F3,
  G as G4,
  I as I3,
  L as L4,
  M as M3,
  O as O8,
  P as P5,
  R as R2,
  T as T4,
  U as U4,
  X as X3,
  _ as _6,
  t as t11
} from "./chunk-WKVHVZW2.js";
import {
  o as o12
} from "./chunk-KSZESDGM.js";
import {
  S as S6
} from "./chunk-CHJMCUAV.js";
import {
  e as e19
} from "./chunk-33LWZO2E.js";
import {
  a as a15,
  s as s15
} from "./chunk-RLZYC2LS.js";
import {
  l as l9,
  t as t9
} from "./chunk-WEER6QME.js";
import {
  s as s14
} from "./chunk-L52HB3KV.js";
import {
  N as N2,
  O as O7,
  a as a14,
  i as i6
} from "./chunk-TXLJQAAN.js";
import {
  t as t8
} from "./chunk-R4SGP2EA.js";
import {
  i as i7,
  x as x6
} from "./chunk-IRL6OOVK.js";
import {
  T as T3,
  e as e20,
  m as m9,
  o as o13,
  r as r11
} from "./chunk-3AIILHI5.js";
import {
  f as f11
} from "./chunk-LA365FE7.js";
import {
  w as w7
} from "./chunk-SA77Z3WI.js";
import {
  A as A5
} from "./chunk-WTKV7W5Z.js";
import {
  C as C3
} from "./chunk-AL5NKCU5.js";
import {
  n as n12
} from "./chunk-D56W4LPT.js";
import {
  r as r9
} from "./chunk-7JR6S3WL.js";
import {
  n as n14,
  r as r10
} from "./chunk-CSSLIU64.js";
import {
  a as a12
} from "./chunk-CJNDQ2LH.js";
import {
  o as o10
} from "./chunk-CDBOQCLE.js";
import {
  n as n15,
  o as o9
} from "./chunk-P4MNTMCZ.js";
import {
  m as m12
} from "./chunk-YH2IYJYF.js";
import {
  L as L3
} from "./chunk-GPWQGIYV.js";
import {
  a as a13,
  l as l8,
  o as o11
} from "./chunk-WZJNHZ6H.js";
import {
  $,
  K as K3,
  N,
  O as O4,
  T as T2,
  Y as Y3,
  Z,
  ct,
  w as w6
} from "./chunk-XMYPMIYH.js";
import {
  d as d7,
  p as p9
} from "./chunk-FQLGRQKL.js";
import {
  v as v7
} from "./chunk-YBPOKK6D.js";
import {
  E as E5
} from "./chunk-XGTCDM4C.js";
import {
  c as c5
} from "./chunk-LQBHIBXV.js";
import {
  s as s13
} from "./chunk-42DUJ2CX.js";
import {
  E as E6,
  F as F2,
  O as O6,
  Q,
  S as S5,
  V as V2,
  _ as _5,
  b as b3,
  c as c6,
  f as f8,
  f2 as f9,
  j as j5,
  q as q3,
  r as r8,
  u as u7
} from "./chunk-Z2F5OKVA.js";
import {
  j as j4,
  k as k2,
  m as m8,
  q as q2,
  v as v6
} from "./chunk-UQA6M3KF.js";
import {
  e as e18
} from "./chunk-GLF3KRAL.js";
import {
  a as a11,
  n as n13,
  r as r7
} from "./chunk-ZLQTPFTL.js";
import {
  a as a10
} from "./chunk-O76UVYOO.js";
import {
  O as O5
} from "./chunk-QCMUK3QA.js";
import {
  f as f10,
  n as n16,
  p as p10,
  s as s12,
  u as u8
} from "./chunk-HZSGATFT.js";
import {
  e as e17
} from "./chunk-KNMQQRV7.js";
import {
  e as e15,
  o as o8,
  t as t7
} from "./chunk-N5GQOIDP.js";
import {
  e as e16
} from "./chunk-NFB6O77E.js";
import {
  _ as _4,
  n as n11,
  r as r6,
  t as t6
} from "./chunk-AKEHDP75.js";
import {
  E as E4,
  _ as _3,
  a as a9,
  m as m7,
  o as o7,
  s as s11,
  z as z5
} from "./chunk-5MMGIT64.js";
import {
  n as n10
} from "./chunk-SCHTG6ZQ.js";
import {
  f as f7
} from "./chunk-QYC3GV65.js";
import {
  l as l7
} from "./chunk-CYVKDANA.js";
import {
  m as m6
} from "./chunk-EMYOYGGK.js";
import {
  B as B2,
  C as C2,
  X as X2,
  Y as Y2,
  b as b2,
  c as c4,
  e as e14,
  h as h5,
  i as i5,
  n as n9,
  o as o6,
  p as p8,
  x as x5
} from "./chunk-HWHMO3CO.js";
import {
  w as w4,
  w2 as w5,
  z as z4
} from "./chunk-ZIJHDTB7.js";
import {
  O as O3,
  P as P4,
  a as a8,
  i as i3,
  k
} from "./chunk-326OSIM5.js";
import {
  l as l4
} from "./chunk-R4CJB3GP.js";
import {
  u as u6
} from "./chunk-WDPG5BMO.js";
import {
  c as c3,
  d as d6,
  i as i4,
  p as p7,
  s as s10,
  x as x4
} from "./chunk-BOAEEYBE.js";
import {
  d as d5,
  h as h4,
  j as j3,
  m as m5,
  p as p6,
  v as v5,
  y as y4
} from "./chunk-HLDUDRTD.js";
import {
  B,
  F,
  I as I2,
  T,
  _ as _2
} from "./chunk-2ICUS4HL.js";
import {
  En,
  G as G3,
  f as f6,
  ln,
  n as n8
} from "./chunk-GBF2OQAY.js";
import {
  D,
  E as E3,
  I,
  K as K2,
  M as M2,
  R,
  U as U3,
  a as a7,
  c as c2,
  d as d4,
  e as e13,
  f as f5,
  g as g3,
  m as m4,
  o as o5,
  p as p5,
  s as s9,
  u as u5,
  w as w3,
  x as x3,
  z as z3
} from "./chunk-C7NPPGFR.js";
import {
  M,
  a as a6,
  e as e12,
  f as f4,
  h as h3,
  l as l6,
  m as m3,
  p as p4
} from "./chunk-OCF7OAES.js";
import {
  A as A4,
  E as E2,
  G as G2,
  H,
  J,
  K,
  O as O2,
  P as P3,
  S as S4,
  U as U2,
  X,
  Y,
  _,
  e as e11,
  g as g2,
  j as j2,
  o as o4,
  p as p3,
  q,
  r as r5,
  s as s8,
  u as u4,
  v as v4,
  x as x2,
  z as z2
} from "./chunk-JZBR4X6W.js";
import {
  a as a5,
  e as e9,
  l as l5,
  m as m2,
  n as n7,
  r as r4,
  s as s7,
  t as t5,
  y as y3
} from "./chunk-OIJCMME5.js";
import {
  e as e10
} from "./chunk-4KLYOMH2.js";
import {
  e as e7
} from "./chunk-RGCWZ2KZ.js";
import {
  e as e8,
  w as w2
} from "./chunk-IZKCZQUY.js";
import {
  f as f3,
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import {
  f as f2
} from "./chunk-MBGZKT2Z.js";
import {
  G,
  L as L2,
  O,
  P2,
  W2 as W,
  f2 as f,
  p as p2,
  s3 as s6
} from "./chunk-UWQ3OYA5.js";
import {
  s as s5
} from "./chunk-ORO4D3FB.js";
import {
  s as s4
} from "./chunk-IOB3DJMR.js";
import {
  i as i2,
  n as n6
} from "./chunk-BPRXWDBO.js";
import {
  Pt
} from "./chunk-SAYWXQVM.js";
import {
  A as A3,
  C,
  P,
  d as d3,
  p,
  v as v3,
  w
} from "./chunk-Z4Y53NDM.js";
import {
  E,
  V
} from "./chunk-PVUNFEWX.js";
import {
  o as o3
} from "./chunk-TXBMNSNF.js";
import {
  d as d2
} from "./chunk-BVQWKK2V.js";
import {
  A as A2,
  S as S3,
  U,
  e as e5,
  e3 as e6,
  j,
  n4,
  r2 as r,
  s3 as s2,
  v,
  y2
} from "./chunk-NDIXNREV.js";
import {
  S as S2,
  a3 as a4,
  d,
  e2 as e4,
  n as n5,
  t as t3,
  v as v2
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import {
  l as l3
} from "./chunk-C26KUZ46.js";
import {
  A,
  L,
  S,
  a as a3,
  b,
  c2 as c,
  e as e3,
  h as h2,
  l as l2,
  m,
  o,
  o3 as o2,
  s as s3,
  u2
} from "./chunk-JGDJR5EV.js";
import {
  e as e2,
  i,
  l,
  n as n2,
  r as r2,
  t as t2,
  u
} from "./chunk-QHK5ZYFW.js";
import {
  n as n3,
  r as r3,
  t as t4,
  u as u3
} from "./chunk-L65HKN25.js";
import {
  a as a2,
  n2 as n,
  s
} from "./chunk-7RBRCL6S.js";
import {
  a,
  g,
  h,
  has,
  t2 as t,
  y,
  z
} from "./chunk-J2EGIWT6.js";

// node_modules/@arcgis/core/core/accessorSupport/overrideDefaultsFrom.js
function n37(s71, i47) {
  const e68 = t3(s71), c44 = t3(i47), f48 = e68.store, a61 = c44.store, m46 = c44.metadata;
  for (const r55 in m46) {
    const i48 = m46[r55], e69 = f48.originOf(r55), c45 = a61.originOf(r55);
    if (!i48.readOnly && c45 !== e5.DEFAULTS)
      if (e69 === e5.DEFAULTS)
        s71.set(r55, a61.get(r55));
      else {
        const t71 = f48.get(r55), s72 = a61.get(r55);
        t71 && s72 && s72 instanceof S3 && t71 instanceof S3 && t71 instanceof s72.constructor && n37(t71, s72);
      }
  }
}

// node_modules/@arcgis/core/views/support/GroundViewElevationSampler.js
var m25 = class extends o3.EventedAccessor {
  constructor(e68) {
    super(e68), this.demResolution = { min: -1, max: -1 }, this.noDataValue = a23;
  }
  initialize() {
    this.view.basemapTerrain.on("elevation-change", () => this.emit("changed", {}));
  }
  get extent() {
    const e68 = this.view.basemapTerrain;
    if (null == (e68 == null ? void 0 : e68.extent) || null == e68.spatialReference)
      return null;
    const t71 = c2(e68.extent, e68.spatialReference);
    return t71.zmin = e68.visibleElevationBounds.min, t71.zmax = e68.visibleElevationBounds.max, t71;
  }
  get spatialReference() {
    var _a;
    return ((_a = this.view.basemapTerrain) == null ? void 0 : _a.spatialReference) ?? f2.WGS84;
  }
  elevationAt(e68, t71) {
    var _a;
    if (null == this.extent || !e8(this.extent, e68, t71)) {
      const r55 = null != this.extent ? `${this.extent.xmin}, ${this.extent.ymin}, ${this.extent.xmax}, ${this.extent.ymax}` : null;
      return n.getLogger(this).warn("#elevationAt()", `Point used to sample elevation (${e68}, ${t71}) is outside of the sampler extent (${r55})`), this.noDataValue;
    }
    return ((_a = this.view.elevationProvider) == null ? void 0 : _a.getElevation(e68, t71, 0, this.spatialReference, "ground")) ?? this.noDataValue;
  }
  queryElevation(e68) {
    return p11(e68.clone(), this);
  }
};
e([y2({ readOnly: true })], m25.prototype, "demResolution", void 0), e([y2({ readOnly: true })], m25.prototype, "extent", null), e([y2({ readOnly: true })], m25.prototype, "noDataValue", void 0), e([y2()], m25.prototype, "spatialReference", null), e([y2({ constructOnly: true })], m25.prototype, "view", void 0), m25 = e([a4("esri.views.support.GroundViewElevationSampler")], m25);
var u21 = m25;

// node_modules/@arcgis/core/views/GroundView.js
var d21 = class extends S3 {
  constructor(e68) {
    super(e68), this.view = null, this.layerViews = new V();
  }
  initialize() {
    this.addHandles(p(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.ground;
    }, (e68) => e68.load())), this.addHandles(this.layerViews.on("after-changes", () => this._layerViewsAfterChangesHandler()));
  }
  destroy() {
    this._set("view", null);
    for (const e68 of this.layerViews)
      e68.destroy();
    this.layerViews.length = 0;
  }
  get elevationSampler() {
    return this.view ? "2d" === this.view.type ? null : this.view.ready && this.view.basemapTerrain && this.view.basemapTerrain.ready ? new u21({ view: this.view }) : null : null;
  }
  get extent() {
    const e68 = this.view;
    return e68 && "2d" !== e68.type && e68.ready ? we(e68, e68.state.camera, e68.pointsOfInterest.centerOnSurfaceFrequent.renderLocation) : null;
  }
  get updating() {
    return !this.suspended && this.layerViews.some((e68) => e68.updating);
  }
  get suspended() {
    return !this.view || this.view.suspended;
  }
  _layerViewsAfterChangesHandler() {
    this.removeHandles("updating"), this.addHandles(this.layerViews.map((e68) => d3(() => e68.updating, () => this._updateUpdating(), C)).toArray(), "updating"), this._updateUpdating();
  }
  _updateUpdating() {
    this.notifyChange("updating");
  }
};
e([y2({ readOnly: true })], d21.prototype, "elevationSampler", null), e([y2({ readOnly: true })], d21.prototype, "extent", null), e([y2({ type: Boolean, readOnly: true })], d21.prototype, "updating", null), e([y2({ constructOnly: true })], d21.prototype, "view", void 0), e([y2({ type: V, readOnly: true })], d21.prototype, "layerViews", void 0), e([y2({ readOnly: true })], d21.prototype, "suspended", null), d21 = e([a4("esri.views.GroundView")], d21);
var u22 = d21;

// node_modules/@arcgis/core/views/3d/layerViewModuleImportUtils.js
var r33 = () => import("./TileLayerView3D-HDB2USRU.js");
var a30 = () => import("./ElevationLayerView3D-RN43A7T5.js");
var i25 = { "base-dynamic": () => import("./BaseDynamicLayerView3D-JKIHKULC.js"), "base-elevation": a30, "base-tile": r33, "bing-maps": r33, "building-scene": () => import("./BuildingSceneLayerView3D-ZF3URFI2.js"), csv: () => import("./CSVLayerView3D-63XSIVG4.js"), dimension: () => import("./DimensionLayerView3D-YT2YE6D3.js"), elevation: a30, feature: () => import("./FeatureLayerView3D-BZXAWR27.js"), geojson: () => import("./GeoJSONLayerView3D-JT2CQ42Y.js"), graphics: () => import("./GraphicsLayerView3D-TPDTNDCM.js"), group: () => import("./GroupLayerView-OMLBKDYN.js"), imagery: () => import("./ImageryLayerView3D-URBJ453Q.js"), "integrated-mesh": () => import("./IntegratedMeshLayerView3D-CBQUDV2W.js"), "integrated-mesh-3dtiles": () => import("./IntegratedMesh3DTilesLayerView3D-FPGMNT2R.js"), "line-of-sight": () => import("./LineOfSightLayerView3D-J34M7VH6.js"), "map-image": () => import("./MapImageLayerView3D-OZOT7MNW.js"), media: () => import("./MediaLayerView3D-4JDCD4R2.js"), "ogc-feature": () => import("./OGCFeatureLayerView3D-ZZADAEB2.js"), "open-street-map": r33, "oriented-imagery": () => import("./FeatureLayerView3D-BZXAWR27.js"), "point-cloud": () => import("./PointCloudLayerView3D-ZVJJT6ZL.js"), voxel: () => import("./VoxelLayerView3D-ZMN2JTLC.js"), route: () => import("./RouteLayerView3D-ZWPWNT5E.js"), scene: (e68) => null == e68.profile || "mesh-pyramids" === e68.profile ? import("./SceneLayerView3D-QHHJT6I4.js") : import("./SceneLayerGraphicsView3D-367PE7H7.js"), stream: () => import("./StreamLayerView3D-D6HCGZIA.js"), tile: r33, "imagery-tile": () => import("./ImageryTileLayerView3D-SD3RSLSQ.js"), "vector-tile": () => import("./VectorTileLayerView3D-I2LBQTYV.js"), wcs: () => import("./ImageryTileLayerView3D-SD3RSLSQ.js"), "web-tile": r33, wfs: () => import("./WFSLayerView3D-I5ZV5VBC.js"), wms: () => import("./WMSLayerView3D-NJEE3FBU.js"), wmts: () => import("./WMTSLayerView3D-CO3MNIH7.js"), catalog: null, "catalog-dynamic-group": null, "catalog-footprint": null, "geo-rss": null, kml: null, "knowledge-graph": null, "link-chart": null, "knowledge-graph-sublayer": null, "map-notes": null, "subtype-group": null, unknown: null, unsupported: null, video: null };
function s42(r55) {
  const a61 = r55.declaredClass ? r55.declaredClass.slice(r55.declaredClass.lastIndexOf(".") + 1) : "Unknown", i47 = a61.replaceAll(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
  return new s(`${i47}:view-not-supported`, `${a61} is not supported in 3D`);
}
var l21 = { hasLayerViewModule: (e68) => null != i25[e68.type], importLayerView: (e68) => {
  const r55 = i25[e68.type];
  if (null == r55)
    throw s42(e68);
  return r55(e68);
} };

// node_modules/@arcgis/core/views/3d/analysis/AnalysisViewManager3D.js
var _14 = "analyses-owner-handles";
var p21;
var V4;
!function(e68) {
  e68[e68.PENDING = 0] = "PENDING", e68[e68.CREATED = 1] = "CREATED";
}(p21 || (p21 = {})), function(e68) {
  e68[e68.ADDED = 0] = "ADDED", e68[e68.REMOVED = 1] = "REMOVED";
}(V4 || (V4 = {}));
var A14 = class extends S3 {
  constructor(e68) {
    super(e68), this._allAnalysisViews = new V(), this._creatingViewCount = 0, this._items = /* @__PURE__ */ new Map(), this._scheduledUpdateHandle = null, this._attachedToViewResolver = v11(), this._analysisModules = { "area-measurement": { module: null }, dimension: { module: null }, "direct-line-measurement": { module: null }, "line-of-sight": { module: null }, slice: { module: null } };
  }
  destroy() {
    this._disconnectOwners(), this._attachedToViewResolver.reject(u2("AnalysisViewManager was destroyed"));
  }
  attach() {
    this._connectOwners(), this._attachedToViewResolver.resolve();
  }
  detach() {
    this._disconnectOwners(), this._attachedToViewResolver.reject(u2()), this._attachedToViewResolver = v11();
  }
  get updating() {
    return !this.view.ready || 0 !== this._creatingViewCount || this._allAnalysisViews.some((e68) => e68.updating);
  }
  get testInfo() {
    return { allAnalysisViews: this._allAnalysisViews };
  }
  async whenAnalysisView(e68) {
    await this._attachedToViewResolver.promise;
    const s71 = this._items.get(e68);
    if (null == s71 || s71.state.list === V4.REMOVED) {
      throw new s("AnalysisViewManager:no-analysisview-for-analysis", "The analysis has not been added to view.analyses", { analysis: e68 });
    }
    return s71.createAnalysisViewTask.promise;
  }
  _connectOwners() {
    this.addHandles(this._connectAnalysesCollection(this.view.analyses), _14);
  }
  _disconnectOwners() {
    this.removeHandles(_14), this._update(), this._creatingViewCount = 0;
  }
  _connectAnalysesCollection(e68) {
    for (const i47 of e68)
      this._addAnalysis(i47);
    const s71 = e68.on("after-add", (e69) => this._addAnalysis(e69.item)), t71 = e68.on("after-remove", (e69) => this._removeAnalysis(e69.item));
    return e3(() => {
      s71.remove(), t71.remove();
      for (const s72 of e68)
        this._removeAnalysis(s72);
    });
  }
  _addAnalysis(e68) {
    const s71 = this._items.get(e68);
    if (null == s71) {
      const s72 = { state: { view: p21.PENDING, list: V4.ADDED }, analysis: e68, view: null, createAnalysisViewTask: null };
      this._items.set(e68, s72), s72.createAnalysisViewTask = d2((e69) => this._createAnalysisViewPromise(s72, e69));
    } else
      s71.state.list = V4.ADDED;
  }
  _removeAnalysis(e68) {
    const s71 = this._items.get(e68);
    null != s71 ? (s71.state.list = V4.REMOVED, this._scheduleUpdate()) : n.getLogger(this).error("Trying to remove analysis which was not added");
  }
  _scheduleUpdate() {
    null == this._scheduledUpdateHandle && (this._scheduledUpdateHandle = v(() => this._update()));
  }
  _update() {
    this._scheduledUpdateHandle = l(this._scheduledUpdateHandle), this._items.forEach((e68) => {
      if (e68.state.list === V4.REMOVED)
        switch (this._items.delete(e68.analysis), e68.state.view) {
          case p21.PENDING:
            e68.createAnalysisViewTask = e2(e68.createAnalysisViewTask);
            break;
          case p21.CREATED:
            null != e68.view && (this._allAnalysisViews.remove(e68.view), e68.view = u(e68.view), e68.createAnalysisViewTask = null);
        }
    });
  }
  async _createAnalysisViewPromise(e68, s71) {
    const t71 = e68.analysis, i47 = t71.type, a61 = this._analysisModules[i47];
    if (this._creatingViewCount += 1, null == a61.module)
      try {
        a61.module = await this._loadAnalysisModule(i47);
      } catch (o58) {
        throw this._creatingViewCount -= 1, o58;
      }
    if (c(s71))
      throw this._creatingViewCount -= 1, u2("AnalysisView creation aborted");
    const n61 = new a61.module.default({ analysis: t71, view: this.view });
    try {
      await n61.when();
    } catch (o58) {
      throw this._creatingViewCount -= 1, o58;
    }
    if (c(s71))
      throw this._creatingViewCount -= 1, n61.destroy(), u2("AnalysisView creation aborted");
    return e68.view = n61, e68.state.view = p21.CREATED, this._allAnalysisViews.add(n61), this._creatingViewCount -= 1, n61;
  }
  _loadAnalysisModule(e68) {
    switch (e68) {
      case "area-measurement":
        return import("./AreaMeasurementAnalysisView3D-H4SHIM5B.js");
      case "dimension":
        return import("./DimensionAnalysisView3D-63RJXG7E.js");
      case "direct-line-measurement":
        return import("./DirectLineMeasurementAnalysisView3D-5EW3KTJD.js");
      case "line-of-sight":
        return import("./LineOfSightAnalysisView3D-S3MT2D4K.js");
      case "slice":
        return import("./SliceAnalysisView3D-6NF2EOXD.js");
    }
  }
};
function v11() {
  const e68 = L();
  return e68.promise.catch(() => {
  }), e68;
}
e([y2()], A14.prototype, "updating", null), e([y2({ constructOnly: true })], A14.prototype, "view", void 0), e([y2()], A14.prototype, "_allAnalysisViews", void 0), e([y2()], A14.prototype, "_creatingViewCount", void 0), A14 = e([a4("esri.views.3d.analysis.AnalysisViewManager3D")], A14);
var f24 = A14;

// node_modules/@arcgis/core/views/3d/state/Constraints.js
var c22 = class extends S3 {
  constructor(t71) {
    super(t71), this.collision = new f25(), this.distance = 1 / 0, this.minimumPoiDistance = 4, this.tilt = null;
  }
  get altitude() {
    return this.mode === l8.Local ? null : this._get("altitude") || null;
  }
  set altitude(t71) {
    this.mode !== l8.Local ? this._set("altitude", t71) : n.getLogger(this).warn("Altitude constraint is ignored in local scenes");
  }
  clampAltitude(t71) {
    return this.altitude ? e12(t71, this.altitude.min, this.altitude.max) : t71;
  }
  clampTilt(t71, e68) {
    if (!this.tilt)
      return e68;
    const i47 = this.tilt(t71);
    return e12(e68, i47.min, i47.max);
  }
  clampDistance(t71) {
    return Math.min(t71, this.distance);
  }
  createDefaultTilt() {
    return this.mode === l8.Local ? this._createDefaultTiltLocal() : this._createDefaultTiltGlobal();
  }
  createConstantMaxTilt(t71) {
    return (e68, i47 = h15) => (i47.min = d22.min, i47.max = t71, i47);
  }
  _createDefaultTiltLocal() {
    const t71 = this.collision.enabled ? v6([[4e3, d22.max], [1e4, h3(88)], [6e6, h3(88)]]) : () => d22.max;
    return (e68, i47 = h15) => (i47.min = d22.min, i47.max = t71(e68), i47);
  }
  _createDefaultTiltGlobal() {
    const t71 = this.collision.enabled ? v6([[4e3, d22.max], [5e4, h3(88)], [6e6, h3(88)], [2e7, d22.min]]) : v6([[3e5, d22.max], [3e6, h3(88)], [6e6, h3(88)], [2e7, d22.min]]);
    return (e68, i47 = h15) => (i47.min = d22.min, i47.max = t71(e68), i47);
  }
};
function p22(t71) {
  return { min: -2e5, max: 4 * t71.radius };
}
e([y2()], c22.prototype, "altitude", null), e([y2({ readOnly: true })], c22.prototype, "collision", void 0), e([y2()], c22.prototype, "distance", void 0), e([y2({ readOnly: true })], c22.prototype, "minimumPoiDistance", void 0), e([y2()], c22.prototype, "tilt", void 0), e([y2({ constructOnly: true })], c22.prototype, "mode", void 0), c22 = e([a4("esri.views.3d.state.Constraints")], c22);
var u23 = p22(s5);
var d22 = { min: h3(0.5), max: h3(179.5) };
var h15 = { min: 0, max: 0 };
var f25 = class extends S3 {
  constructor() {
    super(...arguments), this.enabled = true, this.elevationMargin = 5;
  }
};
e([y2({ type: Boolean })], f25.prototype, "enabled", void 0), e([y2({ type: Number })], f25.prototype, "elevationMargin", void 0), f25 = e([a4("esri.views.3d.state.Constraints.CollisionConstraint")], f25);

// node_modules/@arcgis/core/views/3d/constraints/AltitudeConstraint.js
var i26 = class extends l4 {
  constructor() {
    super(...arguments), this.min = u23.min, this.max = u23.max;
  }
};
e([y2({ type: Number })], i26.prototype, "min", void 0), e([y2({ type: Number })], i26.prototype, "max", void 0), i26 = e([a4("esri.views.3d.constraints.AltitudeConstraint")], i26);

// node_modules/@arcgis/core/views/3d/constraints/ClipDistanceConstraint.js
var o38 = class extends l4 {
  constructor() {
    super(...arguments), this.mode = "auto";
  }
  get near() {
    return this._get("near");
  }
  set near(t71) {
    this._set("near", t71), t71 >= this._get("far") && (this.far = t71 + 1e-9), this.mode = "manual";
  }
  castNear(t71) {
    return Math.max(1e-8, t71);
  }
  get far() {
    return this._get("far");
  }
  set far(t71) {
    this._set("far", t71), t71 <= this._get("near") && (this.near = t71 - 1e-9), this.mode = "manual";
  }
  castFar(t71) {
    return Math.max(1e-8, t71);
  }
  autoUpdate(t71, r55) {
    "auto" === this.mode && (this._get("near") !== t71 && this._set("near", t71), this._get("far") !== r55 && this._set("far", r55));
  }
};
e([y2({ type: Number, value: 1e-8 })], o38.prototype, "near", null), e([s4("near")], o38.prototype, "castNear", null), e([y2({ type: Number, value: 1e-8 })], o38.prototype, "far", null), e([s4("far")], o38.prototype, "castFar", null), e([y2({ type: ["auto", "manual"] })], o38.prototype, "mode", void 0), o38 = e([a4("esri.views.3d.constraints.ClipDistanceConstraint")], o38);

// node_modules/@arcgis/core/views/3d/constraints/TiltConstraint.js
var p23 = { min: M(d22.min), max: M(d22.max) };
var c23 = class extends l4 {
  constructor(t71) {
    super(t71), this.mode = "auto";
  }
  get max() {
    return this._get("max");
  }
  set max(t71) {
    this._set("max", t71), this.mode = "manual";
  }
  castMax(t71) {
    return e12(t71, p23.min, p23.max);
  }
  autoUpdate(t71) {
    "auto" === this.mode && this._get("max") !== t71 && this._set("max", t71);
  }
};
e([y2({ type: ["auto", "manual"] })], c23.prototype, "mode", void 0), e([y2({ type: Number, value: p23.max })], c23.prototype, "max", null), e([s4("max")], c23.prototype, "castMax", null), c23 = e([a4("esri.views.3d.constraints.TiltConstraint")], c23);

// node_modules/@arcgis/core/views/3d/constraints/Constraints.js
var c24 = class extends l4 {
  constructor() {
    super(...arguments), this.tilt = new c23(), this.altitude = new i26(), this.clipDistance = new o38();
  }
};
e([y2({ type: c23 })], c24.prototype, "tilt", void 0), e([y2({ type: i26 })], c24.prototype, "altitude", void 0), e([y2({ type: o38 })], c24.prototype, "clipDistance", void 0), c24 = e([a4("esri.views.3d.constraints.Constraints")], c24);

// node_modules/@arcgis/core/views/3d/environment/SunLighting.js
var s43;
var a31 = s43 = class extends o3.EventedMixin(p18) {
  constructor(e68) {
    super(e68), this.cameraTrackingEnabled = true, this.positionTimezoneInfo = { hours: 0, minutes: 0, seconds: 0, autoUpdated: true };
    const t71 = (/* @__PURE__ */ new Date()).getFullYear(), o58 = /* @__PURE__ */ new Date("March 15, " + t71 + " 12:00:00 UTC");
    this._set("defaultDate", o58), this._set("date", o58);
  }
  get defaultDate() {
    return new Date(this._get("defaultDate").getTime());
  }
  static fromWebsceneLighting(e68) {
    return new s43(e68.cloneConstructProperties());
  }
  set defaultDate(e68) {
    const t71 = this._get("date") === this._get("defaultDate");
    e68 = new Date(e68.getTime()), this._set("defaultDate", e68), t71 && this._set("date", e68);
  }
  set date(e68) {
    null != e68 && (this.positionTimezoneInfo.autoUpdated = false, this._set("date", new Date(e68.getTime())));
  }
  autoUpdate(e68, t71) {
    const o58 = s43.calculateTimezoneOffset(this.positionTimezoneInfo);
    this.positionTimezoneInfo.hours = t71.hours, this.positionTimezoneInfo.minutes = t71.minutes, this.positionTimezoneInfo.seconds = t71.seconds;
    let i47 = null;
    null != e68 && (this.positionTimezoneInfo.autoUpdated = true, isNaN(e68.getTime()) ? (i47 = this.defaultDate.getTime(), this._set("date", this.defaultDate)) : (i47 = this.date && this.date.getTime(), this._set("date", new Date(e68.getTime()))));
    const n61 = s43.calculateTimezoneOffset(this.positionTimezoneInfo);
    if (o58 !== n61 && (r34.target = this, r34.timezoneOffset = n61, this.emit("timezone-will-change", r34), r34.target = null), null != e68)
      return isNaN(e68.getTime()) || i47 !== e68.getTime();
  }
  clone() {
    const e68 = this._get("date") === this._get("defaultDate"), t71 = new s43({ ...this.cloneConstructProperties(), defaultDate: this.defaultDate, cameraTrackingEnabled: this.cameraTrackingEnabled });
    return e68 && t71._set("date", t71._get("defaultDate")), t71.positionTimezoneInfo.autoUpdated = this.positionTimezoneInfo.autoUpdated, t71.positionTimezoneInfo.hours = this.positionTimezoneInfo.hours, t71.positionTimezoneInfo.minutes = this.positionTimezoneInfo.minutes, t71.positionTimezoneInfo.seconds = this.positionTimezoneInfo.seconds, t71;
  }
  cloneWithWebsceneLighting(e68) {
    const t71 = this.clone();
    return null != e68.date && (t71.date = e68.date), t71.directShadowsEnabled = e68.directShadowsEnabled, t71.displayUTCOffset = e68.displayUTCOffset, t71;
  }
  cloneNonPersistentConstructProperties() {
    return { cameraTrackingEnabled: this.cameraTrackingEnabled };
  }
};
e([y2({ type: Boolean })], a31.prototype, "cameraTrackingEnabled", void 0), e([y2({ type: Date })], a31.prototype, "defaultDate", null), e([y2({ type: Date })], a31.prototype, "date", null), a31 = s43 = e([a4("esri.views.3d.environment.SunLighting")], a31), function(e68) {
  function t71({ hours: e69, minutes: t72, seconds: o58 }) {
    return Math.round(e69 + t72 / 60 + o58 / 3600);
  }
  e68.calculateTimezoneOffset = t71;
}(a31 || (a31 = {}));
var r34 = { target: null, timezoneOffset: 0 };
var d23 = a31;

// node_modules/@arcgis/core/views/3d/environment/VirtualLighting.js
var s44;
var c25 = s44 = class extends o3.EventedMixin(i19) {
  constructor(e68) {
    super(e68), this.cameraTrackingEnabled = true;
  }
  clone() {
    return new s44({ ...this.cloneConstructProperties(), cameraTrackingEnabled: this.cameraTrackingEnabled });
  }
  static fromWebsceneLighting(e68) {
    return new s44(e68.cloneConstructProperties());
  }
  cloneWithWebsceneLighting(e68) {
    const r55 = this.clone();
    return r55.directShadowsEnabled = e68.directShadowsEnabled, r55;
  }
  cloneNonPersistentConstructProperties() {
    return { cameraTrackingEnabled: this.cameraTrackingEnabled };
  }
};
e([y2({ type: Boolean })], c25.prototype, "cameraTrackingEnabled", void 0), c25 = s44 = e([a4("esri.views.3d.environment.VirtualLighting")], c25);
var a32 = c25;

// node_modules/@arcgis/core/views/3d/environment/lightingUtils.js
var i27 = { key: "type", defaultKeyValue: "sun", base: null, typeMap: { sun: d23, virtual: a32 } };

// node_modules/@arcgis/core/views/3d/environment/SceneViewAtmosphere.js
var t46;
var i28 = t46 = class extends S3 {
  set quality(o58) {
    ["low", "high"].includes(o58) && this._set("quality", o58);
  }
  clone() {
    return new t46({ quality: this.quality });
  }
};
e([y2({ type: ["low", "high"], value: "low" })], i28.prototype, "quality", null), i28 = t46 = e([a4("esri.views.3d.environment.SceneViewAtmosphere")], i28);

// node_modules/@arcgis/core/views/3d/environment/SceneViewEnvironment.js
var b10;
var d24 = b10 = class extends b7 {
  constructor(t71) {
    super(t71), this.atmosphere = new i28(), this.lighting = this.castLighting(), this.cachedCameraTrackingEnabled = null;
  }
  destroy() {
    this.atmosphere.destroy();
  }
  static fromWebsceneEnvironment(t71) {
    const i47 = t71.cloneConstructProperties();
    return new b10({ ...i47, lighting: i47.lighting ? "virtual" === i47.lighting.type ? a32.fromWebsceneLighting(i47.lighting) : d23.fromWebsceneLighting(i47.lighting) : void 0 });
  }
  castLighting(t71) {
    return this._convertLightingWithDestroy(t71);
  }
  applyLighting(t71) {
    this.lighting = this._convertLightingWithDestroy(t71);
  }
  _convertLightingWithDestroy(t71) {
    const i47 = this._convertLighting(t71);
    return i47 !== t71 && this.addHandles(l2(i47)), i47;
  }
  _convertLighting(t71) {
    var _a, _b;
    return t71 ? t71 instanceof d23 || t71 instanceof a32 ? t71 : t71 instanceof p18 ? this.lighting && "virtual" !== this.lighting.type ? this.lighting.cloneWithWebsceneLighting(t71) : new d23({ ...t71.cloneConstructProperties(), ...(_a = this.lighting) == null ? void 0 : _a.cloneNonPersistentConstructProperties() }) : t71 instanceof i19 ? this.lighting && "virtual" === this.lighting.type ? this.lighting.cloneWithWebsceneLighting(t71) : new a32({ ...t71.cloneConstructProperties(), ...(_b = this.lighting) == null ? void 0 : _b.cloneNonPersistentConstructProperties() }) : S2(i27, t71) : new d23();
  }
  clone() {
    return new b10({ lighting: this.lighting.clone(), atmosphere: this.atmosphere.clone(), weather: this.weather.clone(), atmosphereEnabled: this.atmosphereEnabled, starsEnabled: this.starsEnabled, background: a2(this.background) });
  }
  cloneWithWebsceneEnvironment(t71) {
    return new b10({ atmosphere: this.atmosphere.clone(), weather: this.weather.clone(), atmosphereEnabled: this.atmosphereEnabled, starsEnabled: this.starsEnabled, background: a2(this.background), ...t71.cloneConstructProperties(), lighting: this._getLighting(t71) });
  }
  _getLighting(t71) {
    switch (t71.lighting.type) {
      case "sun":
        return this.lighting && "sun" === this.lighting.type ? this.lighting.cloneWithWebsceneLighting(t71.lighting) : d23.fromWebsceneLighting(t71.lighting);
      case "virtual":
        return this.lighting && "virtual" === this.lighting.type ? this.lighting.cloneWithWebsceneLighting(t71.lighting) : a32.fromWebsceneLighting(t71.lighting);
      default:
        return n10(t71.lighting), d23.fromWebsceneLighting(t71.lighting);
    }
  }
};
e([y2({ type: i28, json: { read: false }, nonNullable: true })], d24.prototype, "atmosphere", void 0), e([y2({ nonNullable: true })], d24.prototype, "lighting", void 0), e([s4("lighting")], d24.prototype, "castLighting", null), d24 = b10 = e([a4("esri.views.3d.environment.SceneViewEnvironment")], d24);
var f26 = d24;

// node_modules/@arcgis/core/views/3d/environment/AtmosphereType.js
var a33;
!function(a61) {
  a61[a61.Realistic = 0] = "Realistic", a61[a61.Local = 1] = "Local", a61[a61.Mars = 2] = "Mars", a61[a61.None = 3] = "None";
}(a33 || (a33 = {}));

// node_modules/@arcgis/core/views/3d/environment/ChapmanAtmosphereTechnique.js
var u24 = class extends n15 {
  constructor() {
    super(...arguments), this.heightParameters = n11(), this.radii = n13(), this.innerFadeDistance = 0, this.altitudeFade = 0, this.hazeStrength = 1, this.renderScale = n13(), this.backgroundColor = n7();
  }
};
var p24 = class _p extends r15 {
  initializeProgram(e68) {
    return new r16(e68.rctx, _p.shader.get().build(this.configuration), O9);
  }
  initializePipeline() {
    return this.configuration.reduced ? S7({ blending: s22(R2.ONE, R2.ZERO), depthTest: { func: O8.ALWAYS }, colorWrite: _8 }) : this.configuration.haze ? S7({ blending: l11(R2.ONE, R2.ZERO, R2.ONE_MINUS_SRC_COLOR, R2.ONE), colorWrite: _8 }) : S7({ blending: s22(R2.SRC_ALPHA, R2.ONE_MINUS_SRC_ALPHA), depthTest: { func: O8.LEQUAL }, colorWrite: _8 });
  }
};
p24.shader = new t17(z9, () => import("./ChapmanAtmosphere.glsl-IQLGCABU.js"));

// node_modules/@arcgis/core/views/3d/environment/ChapmanAtmosphereTechniqueConfiguration.js
var s45 = class extends t19 {
  constructor() {
    super(...arguments), this.haze = false, this.reduced = false;
  }
};
e([r17()], s45.prototype, "haze", void 0), e([r17()], s45.prototype, "reduced", void 0);

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/AtmosphereCompositingTechnique.js
var p25 = class _p extends r15 {
  initializeProgram(e68) {
    return new r16(e68.rctx, _p.shader.get().build(this.configuration), O9);
  }
  initializePipeline() {
    return this.configuration.haze ? S7({ blending: l11(R2.ONE, R2.ZERO, R2.ONE_MINUS_SRC_COLOR, R2.ONE), depthTest: { func: O8.ALWAYS }, colorWrite: _8 }) : S7({ blending: s22(R2.SRC_ALPHA, R2.ONE_MINUS_SRC_ALPHA), depthTest: { func: O8.ALWAYS }, colorWrite: _8 });
  }
};
p25.shader = new t17(d17, () => import("./AtmosphereCompositing.glsl-OPYXUNSI.js"));

// node_modules/@arcgis/core/views/3d/environment/ChapmanAtmosphere.js
var C9 = class {
  constructor(s71, i47) {
    this._view = s71, this._context = i47, this.type = a33.Realistic, this._handles = new r(), this._compositingPassParameters = new a29(), this._atmosphereConfiguration = new s45(), this._passParameters = new u24(), this._rootTileElevationMin = NaN, this._lowerBoundEarthRadius = s5.radius, this._fadeHaze = 0, this._updateRadius(s5.radius);
    const r55 = this._context.renderContext.rctx;
    this._updateRootTileElevationBounds(), this._handles.add([d3(() => {
      var _a, _b;
      return (_b = (_a = this._view) == null ? void 0 : _a.basemapTerrain) == null ? void 0 : _b.rootTileElevationBounds;
    }, () => {
      var _a;
      return ((_a = this._view) == null ? void 0 : _a.basemapTerrain) ? this._updateRootTileElevationBounds() : null;
    }), d3(() => {
      var _a, _b;
      return (_b = (_a = this._view) == null ? void 0 : _a.basemapTerrain) == null ? void 0 : _b.visibleElevationBounds;
    }, () => {
      var _a;
      return ((_a = this._view) == null ? void 0 : _a.basemapTerrain) ? this._updateVisibleElevationBounds() : null;
    }), d3(() => {
      var _a;
      return (_a = this._view) == null ? void 0 : _a.environment.background;
    }, (t71) => {
      const s72 = t71 instanceof a28 ? E5(t71.color) : _4;
      o4(this._passParameters.backgroundColor, s72[0] * s72[3], s72[1] * s72[3], s72[2] * s72[3]);
    }, A3)]);
    const n61 = new s45();
    n61.haze = false, this._atmosphereTechnique = this._context.techniqueRepository.acquire(p24, n61), n61.haze = true, this._atmosphereHazeTechnique = this._context.techniqueRepository.acquire(p24, n61), n61.reduced = true, n61.haze = false, this._atmosphereReducedTechnique = this._context.techniqueRepository.acquire(p24, n61), n61.haze = true, this._atmosphereHazeReducedTechnique = this._context.techniqueRepository.acquire(p24, n61), this._vao = i18(r55, m21);
  }
  destroy() {
    this._handles.destroy(), this._atmosphereTechnique.release(), this._atmosphereHazeTechnique.release(), this._atmosphereReducedTechnique.release(), this._atmosphereHazeReducedTechnique.release(), this._vao.dispose();
  }
  render(e68, t71) {
    this._render(e68, t71 ? this._atmosphereTechnique : this._atmosphereReducedTechnique, e68.offscreenRenderingHelper.depthTexture, t71, false);
  }
  renderHaze(e68, t71, s71) {
    var _a;
    this._fadeHaze = t71, this._render(e68, s71 ? this._atmosphereHazeTechnique : this._atmosphereHazeReducedTechnique, (_a = e68.bindParameters.linearDepth) == null ? void 0 : _a.getTexture(), s71, true);
  }
  _render(e68, t71, s71, r55, a61) {
    if (null == s71)
      return;
    const o58 = e68.offscreenRenderingHelper;
    this._update(e68.bindParameters.camera), this._passParameters.depthTexture = s71;
    const n61 = e68.rctx.bindTechnique(t71, e68.bindParameters, this._passParameters);
    if (r55)
      o58.renderDepthDetached(() => this._renderCommon(n61, e68));
    else {
      const t72 = e68.rctx.getViewport(), r56 = s8(e68.bindParameters.camera.eye) - s5.radius;
      let h36;
      if (r56 < n35) {
        const e69 = Math.min(1, Math.max(0, r56 / n35));
        h36 = a61 ? f4(0.4, 0.5, e69) : f4(0.2, 0.3, e69);
      } else {
        const e69 = Math.min(1, Math.max(0, (r56 - n35) / (15 * n35)));
        h36 = a61 ? f4(0.5, 1, e69) : f4(0.3, 0.6, e69);
      }
      const d44 = n20(Math.round(h36 * e68.bindParameters.camera.fullViewport[2])), u46 = n20(Math.round(h36 * e68.bindParameters.camera.fullViewport[3]));
      e68.rctx.setViewport(0, 0, d44, u46);
      const c44 = o58.renderToCachedFBO(null, "chapman", () => this._renderCommon(n61, e68), [0, 0, 0, 1], R3.RGBA, null, d44, u46);
      e68.rctx.setViewport(t72.x, t72.y, t72.width, t72.height), this._compositingPassParameters.color = c44.getTexture(), this._compositingPassParameters.depth = s71, this._atmosphereConfiguration.haze = a61;
      const l45 = this._context.techniqueRepository.acquire(p25, this._atmosphereConfiguration);
      e68.rctx.bindTechnique(l45, e68.bindParameters, this._compositingPassParameters), o58.renderDepthDetached(() => e68.rctx.screen.draw()), l45.release(), c44.release();
    }
  }
  _renderCommon(e68, t71) {
    null != this._vao && (t71.rctx.bindVAO(this._vao), e68.assertCompatibleVertexAttributeLocations(this._vao), t71.rctx.drawArrays(E7.TRIANGLE_STRIP, 0, 4));
  }
  _updateRootTileElevationBounds() {
    const e68 = this._view.basemapTerrain.rootTileElevationBounds.min;
    e68 !== this._rootTileElevationMin && (this._rootTileElevationMin = e68, this._lowerBoundEarthRadius = s5.radius, this._updateVisibleElevationBounds());
  }
  _updateVisibleElevationBounds() {
    const e68 = z11(s5.radius + this._view.basemapTerrain.visibleElevationBounds.min);
    e68 < this._lowerBoundEarthRadius && this._updateRadius(e68);
  }
  _updateRadius(e68) {
    this._lowerBoundEarthRadius = e68, o13(this._passParameters.radii, e68, e68 + n35), this._passParameters.innerFadeDistance = 2 * Math.sqrt((2 * e68 - o35) * o35);
  }
  _update(e68) {
    if (!e68)
      return;
    const t71 = v4(e68.eye), a61 = Math.sqrt(t71), o58 = t71 - this._passParameters.radii[1] * this._passParameters.radii[1], n61 = e12((a61 - this._passParameters.radii[0]) / n35, 0, 1);
    s11(this._passParameters.heightParameters, a61, t71, o58, n61), this._passParameters.altitudeFade = e35(a61 - this._lowerBoundEarthRadius), this._passParameters.hazeStrength = f4(f4(0.6, 1, p4(9500, 10500, a61 - s5.radius)), 1, this._fadeHaze);
  }
  static isSupported(e68) {
    return e68.renderContext.rctx.capabilities.depthTexture;
  }
};
function z11(e68) {
  return e68 * Math.cos(Math.PI / 16 / 16);
}

// node_modules/@arcgis/core/views/3d/environment/CloudsCompositionTechnique.js
var u25 = class _u extends r15 {
  constructor(e68) {
    super(e68, new t19(), () => this.destroy());
  }
  initializeProgram(e68) {
    return new r16(e68.rctx, _u.shader.get().build(), O9);
  }
  initializePipeline() {
    return S7({ blending: l11(R2.ONE, R2.ZERO, R2.SRC_ALPHA, R2.ONE), depthTest: { func: O8.LEQUAL }, colorWrite: _8 });
  }
};
u25.shader = new t17(f19, () => import("./CloudsComposition.glsl-3XYKGT6U.js"));

// node_modules/@arcgis/core/views/3d/environment/CloudsComposition.js
var m26 = class extends S3 {
  constructor(o58) {
    super(o58), this._technique = new u25(o58), this._vao = i18(o58.rctx);
  }
  destroy() {
    this._technique = t2(this._technique), this._vao = r2(this._vao);
  }
  render(o58) {
    if (!this._technique.compiled)
      return void this.requestRender();
    const e68 = o58.bindParameters.cloudsFade;
    if (null == this._vao || null == e68.data)
      return;
    const t71 = o58.rctx.bindTechnique(this._technique, o58.bindParameters, u26);
    o58.rctx.bindVAO(this._vao), t71.assertCompatibleVertexAttributeLocations(this._vao), o58.rctx.drawArrays(E7.TRIANGLE_STRIP, 0, 4);
  }
};
e([y2({ constructOnly: true })], m26.prototype, "rctx", void 0), e([y2({ constructOnly: true })], m26.prototype, "viewingMode", void 0), e([y2({ constructOnly: true })], m26.prototype, "planetRadius", void 0), e([y2({ constructOnly: true })], m26.prototype, "requestRender", void 0), m26 = e([a4("esri.views.3d.environment.CloudsComposition")], m26);
var u26 = new n15();

// node_modules/@arcgis/core/views/3d/environment/CloudsTechnique.js
var d25 = class _d extends r15 {
  constructor(e68, r55) {
    super(e68, r55, () => this.destroy());
  }
  initializeProgram(e68) {
    return new r16(e68.rctx, _d.shader.get().build(this.configuration), O9);
  }
  initializePipeline() {
    return S7({ blending: s22(R2.CONSTANT_COLOR, R2.ONE_MINUS_CONSTANT_COLOR, T4.ADD, this.configuration.writeTextureChannels === u15.RG ? [1, 1, 0, 0] : [0, 0, 1, 1]), depthTest: { func: O8.LEQUAL }, colorWrite: _8 });
  }
};
d25.shader = new t17(b8, () => import("./Clouds.glsl-BEKEXHMI.js"));

// node_modules/@arcgis/core/views/3d/environment/NoiseTextureAtlasTechnique.js
var d26 = class _d extends r15 {
  initializeProgram(e68) {
    return new r16(e68.rctx, _d.shader.get().build(this.configuration), O9);
  }
  initializePipeline() {
    return S7({ blending: this.configuration.mode === t41.Full ? s22(R2.ONE, R2.ZERO) : l11(R2.ZERO, R2.ONE, R2.ONE, R2.ZERO), depthTest: { func: O8.ALWAYS }, colorWrite: _8 });
  }
};
d26.shader = new t17(v10, () => import("./NoiseTextureAtlas.glsl-IBC47HP4.js"));

// node_modules/@arcgis/core/views/3d/environment/NoiseTextureAtlas.js
var d27 = class extends S3 {
  constructor(e68) {
    super(e68), this._needsRender = true, this._passParameters = new s39(), this._fbo = new x7(e68.context.renderContext.rctx, new e22(t40)), this._vao = i18(e68.context.renderContext.rctx);
  }
  get _techniqueRepository() {
    return this.context.techniqueRepository;
  }
  get textureAtlas() {
    return null != this._texture ? null != this._weatherMapTechnique && this._weatherMapTechnique.compiled && this._needsRender && (this._texture = this._render(t41.WeatherMap)) : null != this._fullTechnique && this._fullTechnique.compiled && (this._texture = this._render(t41.Full)), this._texture;
  }
  _setDirty() {
    this._needsRender = true;
  }
  updateWeatherMap(e68) {
    this._passParameters.weatherTile[0] === e68[0] && this._passParameters.weatherTile[1] === e68[1] || (r11(this._passParameters.weatherTile, e68), this._setDirty());
  }
  destroy() {
    this._fullTechniqueCached = t2(this._fullTechniqueCached), this._weatherMapTechniqueCached = t2(this._weatherMapTechniqueCached), this._fbo = r2(this._fbo), this._vao = r2(this._vao);
  }
  get _fullTechnique() {
    if (null == this._fullTechniqueCached) {
      const e68 = new s38();
      e68.mode = t41.Full, this._fullTechniqueCached = this._techniqueRepository.acquire(d26, e68);
    }
    return this._fullTechniqueCached;
  }
  get _weatherMapTechnique() {
    if (null == this._weatherMapTechniqueCached) {
      const e68 = new s38();
      e68.mode = t41.WeatherMap, this._weatherMapTechniqueCached = this._techniqueRepository.acquire(d26, e68);
    }
    return this._weatherMapTechniqueCached;
  }
  _render(e68) {
    if (null == this._vao || null == this._fbo)
      return null;
    const t71 = e68 === t41.Full ? this._fullTechnique : this._weatherMapTechnique, r55 = this.context.renderContext.rctx, s71 = r55.getViewport();
    r55.setViewport(0, 0, t40, t40), r55.bindFramebuffer(this._fbo);
    const i47 = r55.bindTechnique(t71, null, this._passParameters);
    return r55.bindVAO(this._vao), i47.assertCompatibleVertexAttributeLocations(this._vao), r55.gl.drawArrays(r55.gl.TRIANGLE_STRIP, 0, 4), r55.setViewport(s71.x, s71.y, s71.width, s71.height), this._needsRender = false, this._fbo.colorTexture;
  }
};
e([y2({ constructOnly: true })], d27.prototype, "context", void 0), e([y2({ readOnly: true })], d27.prototype, "_techniqueRepository", null), d27 = e([a4("esri.views.3d.environment.NoiseTextureAtlas")], d27);

// node_modules/@arcgis/core/views/3d/environment/CloudsGenerator.js
var A15 = class extends S3 {
  constructor(e68) {
    super(e68), this._techniques = new Array(), this._techniqueConfiguration = new i20(), this._bindParameters = new m18(null, null), this._passParameters = new w13(), this._weatherTile = n13(), this._weatherTileCount = 128, this._faceIndex = 0, this._tileIndex = 0, this.coverage = f4(e36.default.coverage[0], e36.default.coverage[1], 0.5), this.density = f4(e36.default.density[0], e36.default.density[1], 0.5), this.absorption = f4(e36.default.absorption[0], e36.default.absorption[1], 0.5), this.cloudSize = f4(e36.default.cloudSize[0], e36.default.cloudSize[1], 0.5), this.detailSize = f4(e36.default.detailSize[0], e36.default.detailSize[1], 0.5), this.smoothness = f4(e36.default.smoothness[0], e36.default.smoothness[1], 0.5), this.cloudHeight = f4(e36.default.cloudHeight[0], e36.default.cloudHeight[1], 0.5), this.raymarchingSteps = e36.default.raymarchingSteps, this._viewMatrix = e15(), this._dirty = false, this.running = false, this._vao = i18(e68.context.renderContext.rctx);
  }
  _getTechnique(e68) {
    const t71 = 1 - this.context.renderContext.bindParameters.cloudsFade.readChannels, s71 = t71 === u15.RG ? 2 * e68 : 2 * e68 + 1, i47 = this._techniques[s71];
    return i47 || (this._techniqueConfiguration.writeTextureChannels = t71, this._techniqueConfiguration.steps = e68, this._techniques[s71] = new d25({ rctx: this.context.renderContext.rctx, viewingMode: this.view.state.viewingMode }, this._techniqueConfiguration), this._techniques[s71]);
  }
  updateWeatherTile() {
    const e68 = this.view.camera.position.latitude, t71 = this.view.camera.position.longitude;
    if (null == e68 || null == t71)
      return;
    o13(this._weatherTile, (e68 + 90) / 180, (t71 + 180) / 360);
    const s71 = Math.floor(this._weatherTileCount * Math.abs(2 * this._weatherTile[0] - 1));
    this._weatherTile[0] = Math.floor(2 * this._weatherTileCount * this._weatherTile[0]), this._weatherTile[1] = Math.floor(4 * (this._weatherTileCount - s71) * this._weatherTile[1]);
    let i47 = 0, r55 = 0;
    if (null != this.view.environment && "virtual" !== this.view.environment.lighting.type && null != this.view.environment.lighting.date) {
      const e69 = new Date(this.view.environment.lighting.date);
      e69.setUTCHours(this.view.environment.lighting.date.getUTCHours() + (this.view.environment.lighting.displayUTCOffset ?? 0)), i47 = 31 * e69.getUTCMonth() + e69.getUTCDate(), r55 = e69.getUTCFullYear();
    }
    this._weatherTile[0] = (this._weatherTile[0] + i47) % (2 * this._weatherTileCount), this._weatherTile[1] = (this._weatherTile[1] + r55 % 100) % (4 * this._weatherTileCount), T3(this._passParameters.weatherTile, this._weatherTile) || this.setDirty();
  }
  initialize() {
    const e68 = s6(this.view.spatialReference);
    this._passParameters.cloudRadius = 0.5 * e68.radius, this.setDirty(), this.updateWeatherTile(), this.addHandles([this.view.resourceController.scheduler.registerTask(I5.CLOUDS_GENERATOR, this), d3(() => [this.coverage, this.density, this.absorption, this.cloudSize, this.detailSize, this.smoothness, this.cloudHeight, this.raymarchingSteps], () => this.setDirty(), P)]);
  }
  destroy() {
    this._techniques.forEach((e68) => t2(e68)), this._frameBufferCube = r2(this._frameBufferCube), this._techniques.length = 0, this._vao.dispose(), this._passParameters.noiseTexture = u(this._passParameters.noiseTexture);
  }
  get _tilesPerFace() {
    switch (this._techniqueConfiguration.steps) {
      case s37.SIXTEEN:
        return 1;
      case s37.HUNDRED:
        return 4;
      case s37.COUNT:
      case s37.TWOHUNDRED:
        return 8;
    }
  }
  get usedMemory() {
    var _a, _b, _c;
    return (((_a = this._frameBufferCube) == null ? void 0 : _a.usedMemory) ?? 0) + (((_c = (_b = this._passParameters.noiseTexture) == null ? void 0 : _b.textureAtlas) == null ? void 0 : _c.usedMemory) ?? 0);
  }
  _ensureNoiseTexture() {
    if (null != this._passParameters.noiseTexture)
      this._passParameters.noiseTexture.updateWeatherMap(this._passParameters.weatherTile);
    else {
      const e68 = this.context;
      this._passParameters.noiseTexture = new d27({ context: e68 }), this._passParameters.noiseTexture.updateWeatherMap(this._passParameters.weatherTile);
    }
    return null != this._passParameters.noiseTexture.textureAtlas;
  }
  _ensureFrameBufferCube(e68) {
    if (null == this._frameBufferCube) {
      const t71 = new e22(e68);
      t71.target = M3.TEXTURE_CUBE_MAP, t71.wrapMode = D2.CLAMP_TO_EDGE, this._frameBufferCube = new x7(this.context.renderContext.rctx, t71);
    }
    return this._frameBufferCube;
  }
  get cubeMap() {
    return this._frameBufferCube;
  }
  destroyFrameBufferCube() {
    this._frameBufferCube = r2(this._frameBufferCube);
  }
  applyPreset(e68, t71) {
    const i47 = e68.median, r55 = (e69) => {
      const r56 = f4(e69[0], e69[1], i47);
      return t71 < 0.5 ? f4(e69[0], r56, 2 * t71) : f4(r56, e69[1], 2 * (t71 - 0.5));
    };
    this.coverage = r55(e68.coverage), this.density = r55(e68.density), this.absorption = r55(e68.absorption), this.cloudSize = r55(e68.cloudSize), this.detailSize = r55(e68.detailSize), this.smoothness = r55(e68.smoothness), this.cloudHeight = r55(e68.cloudHeight), this.raymarchingSteps = e68.raymarchingSteps;
  }
  setDirty() {
    this._dirty = this.running = true;
  }
  runTask(e68) {
    0 === this._faceIndex && 0 === this._tileIndex && (this._passParameters.raymarchingSteps = this.raymarchingSteps, this.updateWeatherTile(), r11(this._passParameters.weatherTile, this._weatherTile));
    const t71 = this._getTechnique(this._passParameters.raymarchingSteps);
    if (!t71.compiled)
      return o14;
    if (this.context.renderContext.bindParameters.cloudsFade.fadeMode === O13.CROSS_FADE || !this._ensureNoiseTexture())
      return o14;
    0 === this._faceIndex && 0 === this._tileIndex && (this.context.renderContext.bindParameters.cloudsFade.renderingStage = n30.RENDERING, this._passParameters.absorption = this.absorption, this._passParameters.density = this.density, this._passParameters.cloudSize = this.cloudSize, this._passParameters.detailSize = this.detailSize, this._passParameters.smoothness = this.smoothness, this._passParameters.cloudHeight = this.cloudHeight, this._passParameters.coverage = this.coverage, this._dirty = false);
    const s71 = B7[this._faceIndex], i47 = H6[this._faceIndex];
    Y2(this._viewMatrix, O16, s71, i47), n16(this._passParameters.viewMatrix, this._viewMatrix);
    const r55 = this.context.renderContext.rctx, o58 = r55.bindTechnique(t71, this._bindParameters, this._passParameters);
    r55.bindVAO(this._vao), o58.assertCompatibleVertexAttributeLocations(this._vao);
    const a61 = r55.getViewport(), n61 = t71.configuration.cubeMapSize, h36 = n61 / this._tilesPerFace, u46 = this._tileIndex * h36;
    r55.setViewport(0, u46, n61, h36);
    const c44 = this._ensureFrameBufferCube(n61);
    r55.bindFramebuffer(c44);
    const m46 = M3.TEXTURE_CUBE_MAP_POSITIVE_X + this._faceIndex;
    return c44.setColorTextureTarget(m46), r55.gl.drawArrays(r55.gl.TRIANGLE_STRIP, 0, 4), r55.gl.flush(), r55.setViewport(a61.x, a61.y, a61.width, a61.height), this.requestRender(), ++this._tileIndex, 4 === this._faceIndex && this._tileIndex === this._tilesPerFace ? (this.running = this._dirty, this._faceIndex = 0, this._tileIndex = 0, this.running || (this.context.renderContext.bindParameters.cloudsFade.renderingStage = n30.FADING)) : this._tileIndex === this._tilesPerFace && (++this._faceIndex, this._tileIndex = 0), e68.madeProgress(), o14;
  }
};
e([y2({ constructOnly: true })], A15.prototype, "context", void 0), e([y2({ constructOnly: true })], A15.prototype, "view", void 0), e([y2({ constructOnly: true })], A15.prototype, "requestRender", void 0), e([y2()], A15.prototype, "coverage", void 0), e([y2()], A15.prototype, "density", void 0), e([y2()], A15.prototype, "absorption", void 0), e([y2()], A15.prototype, "cloudSize", void 0), e([y2()], A15.prototype, "detailSize", void 0), e([y2()], A15.prototype, "smoothness", void 0), e([y2()], A15.prototype, "cloudHeight", void 0), e([y2()], A15.prototype, "raymarchingSteps", void 0), e([y2()], A15.prototype, "running", void 0), A15 = e([a4("esri.views.3d.environment.CloudsGenerator")], A15);
var B7 = [r13(1, 0, 0), r13(-1, 0, 0), r13(0, 1, 0), r13(0, -1, 0), r13(0, 0, 1)];
var H6 = [r13(0, 1, 0), r13(0, 1, 0), r13(0, 0, -1), r13(0, 0, 1), r13(0, 1, 0)];
var O16 = o15();

// node_modules/@arcgis/core/views/3d/environment/FogTechnique.js
var m27 = class _m extends r15 {
  constructor(e68) {
    super(e68, new t19(), () => this.destroy());
  }
  initializeProgram(e68) {
    return new r16(e68.rctx, _m.shader.get().build(), O9);
  }
  initializePipeline() {
    return S7({ blending: l11(R2.SRC_ALPHA, R2.ZERO, R2.ONE_MINUS_SRC_ALPHA, R2.ONE), colorWrite: _8 });
  }
};
m27.shader = new t17(b9, () => import("./Fog.glsl-ASYHHR62.js"));

// node_modules/@arcgis/core/views/3d/environment/Fog.js
var b11 = 0.95;
var x12 = 1;
var v12 = class extends S3 {
  constructor(t71) {
    super(t71), this._passParameters = new u19();
    const e68 = t71.context.renderContext.rctx;
    this._vao = i18(e68, m21), this._technique = new m27(t71);
    const s71 = s6(t71.view.spatialReference);
    this._planetRadius = s71.radius, this._atmosphereRadius = s71.radius + n35;
  }
  destroy() {
    this._technique.release(), this._vao.dispose();
  }
  set strength(t71) {
    this._passParameters.fogStrength = t71;
  }
  get strength() {
    return this._passParameters.fogStrength;
  }
  render(t71, e68) {
    if (this._update(t71, e68), this._passParameters.fogAmount <= 0)
      return;
    const s71 = this._technique;
    if (!s71.compiled)
      return void this.context.requestRender();
    const r55 = t71.offscreenRenderingHelper;
    r55.renderDepthDetached(() => {
      this._passParameters.depthTexture = r55.depthTexture;
      const e69 = t71.rctx.bindTechnique(s71, t71.bindParameters, this._passParameters);
      this._renderFog(e69, t71);
    });
  }
  _renderFog(t71, e68) {
    const s71 = e68.rctx;
    s71.bindVAO(this._vao), t71.assertCompatibleVertexAttributeLocations(this._vao), s71.drawArrays(E7.TRIANGLE_STRIP, 0, 4);
  }
  _update(t71, e68) {
    const r55 = t71.bindParameters.camera;
    z2(P8, r55.eye);
    const o58 = Math.max(0, P3(P8, t71.bindParameters.lighting.mainLight.direction)), p48 = e68.color;
    g2(w14, p48, 0.1), A4(this._passParameters.fogColor, w14, p48, o58);
    const h36 = s8(r55.eye), u46 = h36 * h36;
    this._passParameters.atmosphereC = u46 - this._atmosphereRadius * this._atmosphereRadius, this._passParameters.fogAmount = (1 - p4(b11 * p16, x12 * p16, Math.abs(h36 - this._planetRadius))) * e68.amount, this._passParameters.fogStrength = e68.strength;
  }
  static isSupported(t71) {
    return t71.capabilities.depthTexture;
  }
};
e([y2({ constructOnly: true })], v12.prototype, "context", void 0), e([y2({ constructOnly: true })], v12.prototype, "view", void 0), e([y2({ constructOnly: true })], v12.prototype, "rctx", void 0), e([y2({ constructOnly: true })], v12.prototype, "viewingMode", void 0), v12 = e([a4("esri.views.3d.environment.Fog")], v12);
var y10 = class {
  constructor() {
    this.color = n7(), this.strength = 0, this.amount = 0;
  }
};
var P8 = n7();
var w14 = n7();

// node_modules/@arcgis/core/views/3d/environment/SimpleAtmosphereTechnique.js
var h16 = class _h extends r15 {
  initializeProgram(e68) {
    return new r16(e68.rctx, _h.shader.get().build(this.configuration), O9);
  }
  initializePipeline() {
    return this.configuration.geometry === r30.Cylinder ? S7({ blending: l11(R2.SRC_ALPHA, R2.ONE, R2.ONE_MINUS_SRC_ALPHA, R2.ONE_MINUS_SRC_ALPHA), culling: r14, depthTest: { func: O8.LEQUAL }, colorWrite: _8 }) : S7({ blending: l11(R2.SRC_ALPHA, R2.ONE, R2.ONE_MINUS_SRC_ALPHA, R2.ONE_MINUS_SRC_ALPHA), depthTest: { func: O8.LEQUAL }, colorWrite: _8 });
  }
};
h16.shader = new t17(h14, () => import("./SimpleAtmosphere.glsl-RRXAWB4K.js"));

// node_modules/@arcgis/core/views/3d/environment/resources/SimpleAtmosphereTexture.js
var e37 = new Uint8ClampedArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 9, 0, 0, 0, 9, 0, 0, 0, 9, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 13, 0, 0, 0, 13, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 15, 0, 0, 0, 15, 0, 0, 0, 15, 0, 0, 0, 15, 16, 0, 0, 16, 16, 0, 0, 16, 16, 0, 0, 16, 16, 0, 0, 16, 15, 0, 0, 17, 15, 0, 0, 17, 15, 0, 0, 17, 15, 0, 0, 17, 14, 0, 0, 18, 14, 0, 0, 18, 14, 0, 0, 18, 13, 0, 0, 19, 13, 0, 0, 19, 13, 0, 0, 19, 13, 0, 0, 19, 13, 0, 0, 20, 13, 0, 0, 20, 13, 0, 0, 20, 13, 0, 0, 20, 12, 0, 0, 21, 12, 0, 0, 21, 12, 0, 0, 21, 12, 0, 0, 21, 12, 0, 0, 22, 12, 0, 0, 22, 12, 0, 0, 22, 12, 0, 0, 22, 11, 0, 0, 23, 11, 0, 0, 23, 11, 0, 0, 23, 11, 0, 0, 24, 11, 0, 0, 24, 11, 0, 0, 24, 11, 0, 0, 24, 10, 0, 0, 25, 10, 0, 0, 25, 10, 0, 0, 25, 10, 0, 0, 26, 10, 0, 0, 26, 10, 0, 0, 26, 10, 0, 0, 26, 9, 0, 0, 27, 9, 0, 0, 27, 9, 0, 0, 27, 18, 0, 0, 28, 18, 0, 0, 28, 18, 0, 0, 28, 18, 0, 0, 28, 18, 0, 0, 29, 18, 0, 0, 29, 18, 0, 0, 29, 17, 0, 0, 30, 17, 0, 0, 30, 17, 0, 0, 30, 17, 0, 0, 30, 16, 0, 0, 31, 16, 0, 0, 31, 16, 0, 0, 31, 16, 0, 0, 32, 16, 0, 0, 32, 16, 0, 0, 32, 15, 0, 0, 33, 15, 0, 0, 33, 15, 0, 0, 33, 15, 0, 0, 34, 15, 8, 0, 34, 15, 8, 0, 34, 15, 8, 0, 34, 15, 7, 0, 35, 15, 7, 0, 35, 15, 7, 0, 35, 21, 7, 0, 36, 21, 7, 0, 36, 21, 7, 0, 36, 21, 7, 0, 37, 21, 7, 0, 37, 21, 7, 0, 37, 20, 7, 0, 38, 20, 7, 0, 38, 20, 7, 0, 38, 20, 7, 0, 39, 20, 7, 0, 39, 20, 7, 0, 39, 20, 7, 0, 39, 19, 6, 0, 40, 19, 6, 0, 40, 19, 6, 0, 40, 19, 6, 0, 41, 19, 6, 0, 41, 19, 6, 0, 41, 18, 6, 0, 42, 18, 6, 0, 42, 18, 6, 0, 42, 24, 6, 0, 43, 24, 6, 0, 43, 24, 6, 0, 43, 23, 6, 0, 44, 23, 6, 0, 44, 23, 6, 0, 44, 23, 6, 0, 45, 23, 6, 0, 45, 23, 6, 0, 45, 22, 6, 0, 46, 22, 6, 0, 46, 22, 6, 0, 46, 22, 5, 0, 47, 22, 5, 0, 47, 22, 5, 0, 47, 21, 5, 0, 48, 21, 5, 0, 48, 21, 5, 0, 48, 21, 5, 0, 49, 21, 5, 0, 49, 26, 5, 0, 49, 25, 5, 0, 50, 25, 5, 0, 50, 25, 5, 0, 50, 25, 5, 0, 51, 25, 5, 0, 51, 25, 5, 0, 51, 25, 5, 0, 52, 25, 5, 0, 52, 25, 5, 0, 52, 24, 5, 0, 53, 24, 5, 0, 53, 24, 5, 0, 53, 24, 9, 0, 54, 28, 9, 0, 54, 28, 9, 0, 54, 28, 9, 0, 55, 28, 9, 0, 55, 27, 9, 0, 56, 27, 9, 0, 56, 27, 9, 0, 56, 27, 9, 4, 57, 27, 9, 4, 57, 27, 9, 4, 57, 26, 9, 4, 58, 26, 9, 4, 58, 26, 9, 4, 58, 26, 9, 4, 59, 26, 9, 4, 59, 26, 9, 4, 59, 26, 8, 4, 60, 30, 8, 4, 60, 30, 8, 4, 60, 29, 8, 4, 61, 29, 8, 4, 61, 29, 8, 4, 62, 29, 8, 4, 62, 29, 8, 4, 62, 28, 8, 4, 63, 28, 8, 4, 63, 28, 8, 4, 63, 28, 12, 4, 64, 28, 12, 4, 64, 28, 12, 4, 64, 27, 12, 4, 65, 27, 12, 8, 65, 27, 12, 8, 65, 31, 12, 8, 66, 31, 12, 8, 66, 30, 11, 8, 67, 30, 11, 8, 67, 30, 11, 8, 67, 30, 11, 8, 68, 30, 11, 8, 68, 30, 11, 8, 68, 30, 15, 7, 69, 30, 15, 7, 69, 30, 15, 7, 69, 33, 15, 11, 70, 33, 15, 11, 70, 32, 14, 11, 71, 32, 14, 11, 71, 32, 14, 11, 71, 32, 18, 14, 72, 32, 18, 14, 72, 32, 18, 14, 72, 31, 17, 14, 73, 35, 17, 14, 73, 34, 17, 17, 74, 34, 21, 17, 74, 34, 21, 17, 74, 34, 20, 17, 75, 34, 20, 20, 75, 34, 20, 20, 75, 34, 23, 20, 76, 34, 23, 20, 76, 36, 23, 23, 77, 36, 23, 23, 77, 36, 23, 23, 77, 36, 23, 23, 78, 36, 26, 26, 78, 36, 26, 26, 78, 36, 26, 26, 79, 36, 26, 29, 79, 38, 26, 29, 80, 38, 29, 29, 80, 38, 29, 29, 80, 38, 28, 31, 81, 38, 28, 31, 81, 38, 31, 31, 81, 37, 31, 34, 82, 37, 31, 34, 82, 37, 31, 37, 83, 40, 34, 37, 83, 40, 34, 37, 83, 39, 33, 39, 84, 39, 33, 39, 84, 39, 36, 42, 84, 39, 36, 42, 85, 39, 36, 42, 85, 39, 36, 42, 85, 39, 39, 44, 86, 39, 39, 44, 86, 41, 38, 47, 87, 41, 41, 47, 87, 41, 41, 50, 87, 41, 41, 49, 88, 41, 41, 52, 88, 40, 43, 52, 89, 43, 43, 52, 89, 43, 43, 54, 89, 42, 45, 54, 90, 42, 45, 57, 90, 42, 45, 57, 90, 42, 45, 59, 91, 42, 48, 59, 91, 44, 47, 61, 92, 44, 47, 61, 92, 44, 50, 61, 92, 44, 49, 63, 93, 44, 49, 63, 93, 44, 52, 66, 93, 43, 52, 65, 94, 46, 54, 68, 94, 46, 54, 70, 95, 46, 54, 70, 95, 46, 54, 70, 95, 45, 56, 72, 96, 45, 56, 72, 96, 45, 58, 74, 97, 47, 58, 76, 97, 47, 58, 76, 97, 47, 60, 78, 98, 47, 60, 78, 98, 47, 60, 81, 98, 49, 62, 80, 99, 49, 62, 82, 99, 48, 61, 84, 100, 48, 64, 84, 100, 48, 64, 84, 100, 50, 63, 86, 101, 50, 66, 86, 101, 50, 66, 88, 101, 50, 65, 90, 102, 52, 67, 89, 103, 51, 69, 91, 104, 51, 68, 92, 105, 52, 69, 93, 107, 52, 71, 94, 108, 54, 70, 96, 109, 53, 71, 96, 111, 52, 73, 98, 112, 54, 72, 98, 114, 53, 73, 100, 115, 54, 72, 100, 117, 54, 73, 102, 118, 55, 74, 104, 120, 55, 76, 105, 121, 56, 77, 106, 123, 56, 76, 107, 124, 57, 79, 107, 126, 58, 78, 110, 128, 57, 79, 111, 129, 56, 80, 113, 131, 58, 79, 112, 132, 57, 82, 114, 134, 58, 81, 116, 136, 60, 82, 117, 137, 59, 83, 117, 139, 60, 83, 119, 141, 59, 84, 120, 142, 60, 85, 122, 144, 59, 86, 122, 146, 60, 86, 126, 148, 62, 87, 127, 149, 61, 88, 127, 151, 62, 88, 128, 153, 63, 89, 130, 155, 62, 90, 131, 156, 63, 90, 132, 158, 64, 91, 134, 160, 65, 91, 135, 162, 64, 92, 136, 163, 63, 93, 138, 165, 66, 95, 139, 167, 65, 95, 140, 169, 66, 95, 142, 171, 67, 96, 142, 172, 66, 97, 144, 174, 67, 99, 145, 176, 67, 97, 148, 178, 67, 99, 147, 180, 68, 100, 149, 181, 68, 100, 150, 183, 69, 101, 152, 185, 70, 102, 153, 187, 71, 103, 155, 188, 70, 103, 156, 190, 70, 104, 157, 192, 71, 105, 158, 194, 71, 106, 160, 195, 72, 106, 161, 197, 72, 108, 161, 199, 73, 108, 163, 200, 73, 109, 164, 202, 74, 109, 165, 204, 74, 110, 167, 206, 75, 111, 168, 207, 74, 112, 170, 209, 75, 112, 170, 210, 76, 113, 171, 212, 76, 114, 173, 214, 77, 115, 174, 215, 78, 115, 175, 217, 78, 116, 175, 218, 78, 117, 177, 220, 78, 118, 178, 221, 79, 118, 180, 223, 80, 120, 180, 224, 81, 120, 181, 226, 81, 120, 182, 227, 82, 121, 184, 229, 82, 122, 185, 230, 84, 123, 186, 232, 83, 123, 187, 233, 84, 124, 189, 234, 84, 125, 188, 235, 85, 126, 189, 237, 86, 126, 190, 238, 86, 127, 191, 239, 87, 127, 192, 240, 87, 129, 193, 242, 88, 129, 194, 243, 89, 130, 195, 244, 90, 131, 196, 245, 90, 132, 197, 246, 91, 132, 197, 247, 92, 133, 198, 248, 92, 134, 199, 249, 93, 135, 200, 250, 94, 136, 201, 251, 95, 137, 202, 252, 96, 138, 203, 253, 97, 140, 204, 254, 98, 141, 205, 254, 99, 142, 206, 255, 101, 143, 207, 255, 102, 144, 208, 255, 103, 146, 209, 255, 104, 147, 209, 255, 106, 148, 210, 255, 107, 149, 211, 255, 108, 151, 212, 255, 110, 152, 213, 255, 111, 153, 213, 255, 112, 154, 214, 255, 114, 156, 215, 255, 115, 157, 215, 255, 117, 158, 216, 255, 118, 160, 217, 255, 120, 161, 217, 255, 121, 162, 218, 255, 123, 164, 218, 255, 124, 165, 219, 255, 125, 166, 219, 255, 127, 167, 220, 255, 129, 169, 220, 255, 130, 170, 221, 255, 132, 171, 221, 255, 133, 173, 222, 255, 134, 174, 222, 255, 136, 175, 223, 255, 139, 178, 224, 255, 142, 180, 224, 255, 144, 182, 225, 255, 147, 185, 226, 255, 150, 187, 226, 255, 153, 189, 227, 255, 155, 191, 228, 255, 158, 194, 228, 255, 160, 196, 229, 255, 163, 198, 229, 255, 165, 200, 230, 255, 168, 202, 231, 255, 170, 203, 231, 255, 172, 205, 232, 255, 174, 207, 232, 255, 176, 209, 233, 255, 178, 210, 234, 255, 180, 212, 234, 255, 182, 214, 235, 255, 184, 215, 236, 255, 186, 217, 237, 255, 188, 219, 238, 255, 190, 220, 238, 255, 192, 221, 239, 255, 193, 222, 240, 255, 194, 224, 240, 255, 196, 225, 241, 255, 197, 226, 241, 255, 198, 226, 242, 255, 199, 227, 242, 255, 200, 228, 242, 255, 201, 228, 243, 255, 202, 229, 243, 255, 203, 230, 243, 255, 204, 230, 244, 255, 205, 231, 244, 255, 207, 232, 244, 255, 208, 233, 245, 255, 209, 233, 245, 255, 211, 234, 246, 255, 213, 235, 246, 255, 217, 238, 247, 255, 222, 240, 248, 255, 226, 242, 249, 255, 231, 245, 250, 255, 236, 247, 251, 255, 241, 249, 252, 255, 245, 251, 253, 255, 249, 252, 254, 255, 255, 255, 255, 255]);

// node_modules/@arcgis/core/views/3d/environment/LocalAtmosphere.js
var A16 = class {
  constructor(e68, t71) {
    this.type = a33.Local, this._configuration = new i21(), this._passParameters = new p19(), this._configuration.geometry = r30.Cylinder, this._technique = t71.techniqueRepository.acquire(h16, this._configuration);
    const r55 = t71.renderContext.rctx;
    this._vao = y11(r55), this._vaoCount = i8(this._vao, "geometry");
    const p48 = new e22();
    p48.wrapMode = D2.CLAMP_TO_EDGE, p48.flipped = true, p48.width = 1, p48.height = 512, this._passParameters.texture = new m11(r55, p48, e37);
  }
  destroy() {
    this._passParameters.texture = r2(this._passParameters.texture), this._vao.dispose(), this._technique.release();
  }
  render(e68) {
    const t71 = e68.rctx, r55 = t71.bindTechnique(this._technique, e68.bindParameters, this._passParameters);
    T8(v13, e68.bindParameters.camera.viewMatrix), r55.setUniformMatrix4fv("view", v13), t71.bindVAO(this._vao), r55.assertCompatibleVertexAttributeLocations(this._vao), t71.drawArrays(E7.TRIANGLES, 0, this._vaoCount);
  }
  renderHaze() {
    return false;
  }
};
function y11(e68) {
  const t71 = lt(1, 2, false), { data: r55, indices: i47 } = t71[0][1], o58 = P9.createBuffer(i47.length), s71 = o58.position;
  for (let m46 = 0; m46 < i47.length; ++m46) {
    const e69 = 3 * i47[m46 % 3 == 0 ? m46 + 2 : m46 % 3 == 2 ? m46 - 2 : m46];
    s71.set(m46, 0, r55[e69]), s71.set(m46, 1, r55[e69 + 1]), s71.set(m46, 2, r55[e69 + 2]);
  }
  return new r27(e68, O9, { geometry: t12(P9) }, { geometry: h7.createVertex(e68, F3.STATIC_DRAW, o58.buffer) });
}
function T8(e68, r55) {
  n9(e68, r55), e68[12] = 0, e68[13] = 0, e68[14] = 0, e68[15] = 1;
}
var v13 = e15();
var P9 = H2().vec3f(e18.POSITION);

// node_modules/@arcgis/core/views/3d/environment/resources/MarsAtmosphereTexture.js
var e38 = new Uint8ClampedArray([0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 9, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 19, 0, 0, 0, 19, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 22, 0, 0, 0, 22, 11, 0, 0, 23, 11, 0, 0, 23, 11, 0, 0, 23, 11, 0, 0, 23, 11, 0, 0, 24, 11, 0, 0, 24, 11, 0, 0, 24, 10, 0, 0, 25, 10, 0, 0, 25, 10, 0, 0, 26, 10, 0, 0, 26, 9, 0, 0, 27, 9, 0, 0, 27, 9, 0, 0, 28, 9, 0, 0, 28, 9, 0, 0, 29, 9, 0, 0, 29, 8, 0, 0, 30, 8, 0, 0, 30, 8, 0, 0, 31, 8, 0, 0, 31, 8, 0, 0, 32, 8, 0, 0, 32, 8, 0, 0, 32, 8, 0, 0, 32, 8, 0, 0, 33, 8, 0, 0, 33, 8, 0, 0, 34, 7, 0, 0, 35, 7, 0, 0, 35, 7, 0, 0, 36, 7, 0, 0, 36, 7, 7, 0, 37, 7, 7, 0, 37, 7, 7, 0, 38, 7, 7, 0, 38, 13, 7, 0, 39, 13, 7, 0, 39, 13, 6, 0, 40, 13, 6, 0, 40, 12, 6, 0, 41, 12, 6, 0, 41, 12, 6, 0, 41, 12, 6, 0, 42, 12, 6, 0, 42, 12, 6, 0, 43, 12, 6, 0, 43, 12, 6, 0, 44, 12, 6, 0, 44, 11, 6, 0, 45, 11, 6, 6, 45, 11, 6, 6, 46, 11, 5, 5, 47, 11, 5, 5, 47, 11, 5, 5, 48, 11, 5, 5, 48, 10, 5, 5, 49, 10, 5, 5, 49, 10, 5, 5, 50, 15, 5, 5, 51, 15, 5, 5, 51, 15, 5, 5, 51, 15, 5, 5, 51, 15, 5, 5, 52, 15, 5, 5, 52, 14, 5, 5, 53, 14, 5, 5, 54, 14, 5, 5, 54, 14, 5, 5, 55, 14, 5, 5, 55, 14, 5, 5, 56, 13, 4, 4, 57, 13, 4, 4, 57, 13, 4, 4, 58, 13, 4, 4, 58, 13, 4, 4, 59, 13, 4, 4, 59, 17, 4, 4, 60, 17, 4, 4, 60, 17, 4, 4, 60, 17, 4, 4, 61, 17, 4, 4, 61, 16, 4, 4, 62, 16, 4, 4, 63, 16, 4, 4, 63, 16, 8, 4, 64, 16, 8, 4, 64, 16, 8, 4, 65, 15, 8, 4, 66, 15, 8, 4, 66, 15, 8, 4, 67, 19, 8, 4, 68, 19, 8, 4, 68, 18, 7, 4, 69, 18, 7, 4, 69, 18, 7, 4, 69, 18, 7, 4, 70, 18, 7, 4, 70, 18, 7, 4, 71, 18, 7, 4, 71, 18, 7, 4, 72, 17, 7, 3, 73, 17, 7, 3, 73, 21, 7, 3, 74, 21, 7, 3, 74, 20, 7, 3, 75, 20, 7, 3, 76, 20, 7, 3, 76, 20, 7, 3, 77, 20, 7, 3, 77, 20, 7, 3, 78, 20, 7, 3, 78, 20, 7, 7, 78, 19, 6, 6, 79, 19, 10, 6, 80, 19, 10, 6, 80, 22, 9, 6, 81, 22, 9, 6, 81, 22, 9, 6, 82, 22, 9, 6, 83, 22, 9, 6, 83, 21, 9, 6, 84, 21, 9, 6, 84, 21, 9, 6, 85, 21, 9, 6, 86, 21, 9, 6, 86, 23, 9, 6, 87, 23, 9, 6, 87, 23, 9, 6, 87, 23, 9, 6, 88, 23, 9, 6, 88, 23, 9, 6, 89, 23, 8, 6, 90, 23, 8, 6, 90, 22, 8, 6, 91, 22, 8, 6, 91, 25, 8, 6, 92, 25, 8, 5, 93, 25, 8, 5, 93, 24, 8, 5, 94, 24, 8, 5, 94, 24, 11, 5, 95, 24, 11, 5, 96, 24, 11, 5, 96, 26, 11, 5, 97, 26, 11, 5, 97, 26, 11, 5, 97, 26, 10, 5, 98, 26, 10, 5, 98, 26, 10, 5, 99, 25, 10, 5, 100, 25, 10, 5, 100, 25, 10, 5, 101, 25, 10, 5, 101, 25, 10, 5, 102, 27, 10, 5, 103, 27, 10, 5, 103, 27, 10, 5, 104, 27, 10, 5, 104, 27, 12, 5, 105, 26, 12, 5, 106, 26, 12, 5, 106, 29, 12, 5, 106, 29, 12, 5, 106, 29, 12, 7, 107, 28, 12, 7, 108, 28, 12, 7, 108, 28, 12, 7, 109, 28, 12, 7, 109, 30, 12, 7, 110, 30, 11, 7, 111, 30, 11, 7, 111, 30, 11, 7, 112, 30, 11, 7, 112, 29, 11, 7, 113, 29, 11, 7, 114, 29, 11, 7, 114, 31, 11, 7, 115, 31, 11, 7, 115, 31, 11, 7, 115, 31, 11, 7, 116, 31, 11, 7, 116, 33, 13, 7, 117, 33, 13, 9, 117, 32, 13, 9, 118, 32, 13, 9, 118, 32, 13, 9, 119, 34, 15, 8, 120, 34, 15, 8, 120, 34, 15, 8, 121, 36, 15, 8, 121, 36, 15, 8, 122, 36, 15, 8, 122, 35, 15, 8, 123, 37, 14, 8, 124, 37, 14, 8, 124, 37, 14, 8, 124, 37, 14, 8, 124, 39, 14, 8, 125, 39, 16, 8, 125, 38, 16, 8, 126, 38, 16, 8, 127, 38, 16, 8, 127, 40, 16, 10, 128, 40, 16, 10, 128, 40, 16, 10, 129, 42, 18, 10, 129, 41, 18, 10, 130, 41, 18, 10, 130, 43, 18, 10, 131, 43, 18, 10, 131, 42, 17, 10, 132, 42, 17, 12, 132, 42, 17, 12, 133, 44, 17, 12, 133, 44, 17, 12, 133, 46, 17, 11, 134, 46, 17, 11, 134, 45, 19, 11, 135, 45, 19, 11, 135, 47, 19, 11, 136, 47, 19, 11, 136, 47, 19, 11, 137, 47, 19, 11, 137, 48, 20, 11, 138, 48, 20, 11, 138, 50, 20, 13, 139, 50, 20, 13, 139, 49, 20, 13, 140, 49, 22, 13, 140, 51, 22, 13, 141, 51, 22, 13, 141, 50, 22, 13, 142, 52, 22, 13, 142, 52, 21, 12, 143, 53, 21, 12, 143, 53, 21, 12, 143, 53, 21, 12, 143, 53, 21, 14, 144, 53, 23, 14, 144, 55, 23, 14, 145, 55, 23, 14, 145, 56, 23, 14, 146, 56, 23, 14, 146, 57, 24, 14, 147, 57, 24, 14, 147, 59, 24, 16, 148, 59, 24, 16, 148, 58, 24, 15, 149, 58, 26, 15, 149, 58, 26, 15, 149, 60, 26, 15, 150, 60, 26, 15, 150, 61, 25, 15, 151, 61, 25, 15, 151, 62, 25, 17, 152, 62, 25, 17, 152, 64, 25, 17, 152, 64, 27, 17, 152, 63, 27, 17, 153, 63, 27, 17, 153, 65, 27, 17, 153, 66, 28, 17, 154, 66, 28, 17, 154, 67, 28, 16, 155, 67, 28, 16, 155, 67, 30, 16, 155, 69, 29, 18, 156, 69, 29, 18, 156, 68, 29, 18, 157, 70, 29, 18, 157, 70, 29, 18, 157, 71, 31, 18, 158, 71, 31, 18, 158, 72, 30, 19, 159, 72, 30, 19, 159, 74, 30, 19, 159, 73, 30, 19, 160, 73, 32, 19, 160, 74, 32, 19, 161, 74, 32, 21, 161, 76, 32, 21, 161, 78, 33, 21, 161, 78, 33, 21, 161, 79, 35, 20, 162, 78, 34, 20, 163, 79, 34, 22, 164, 81, 36, 22, 164, 82, 36, 22, 165, 81, 35, 22, 166, 82, 37, 21, 167, 84, 37, 21, 167, 85, 36, 21, 168, 86, 38, 23, 169, 88, 38, 23, 169, 88, 38, 23, 170, 88, 39, 23, 170, 89, 39, 24, 171, 91, 40, 24, 171, 92, 40, 24, 172, 93, 40, 24, 173, 94, 41, 25, 173, 95, 41, 25, 174, 96, 42, 25, 175, 98, 42, 25, 175, 99, 43, 26, 176, 99, 43, 26, 177, 101, 45, 26, 177, 102, 44, 26, 178, 103, 46, 27, 179, 104, 46, 27, 179, 105, 46, 27, 179, 106, 45, 28, 180, 108, 47, 28, 180, 108, 46, 28, 181, 109, 48, 28, 182, 111, 48, 29, 182, 111, 49, 29, 183, 114, 49, 29, 184, 114, 50, 30, 184, 114, 50, 30, 185, 116, 51, 30, 185, 117, 51, 30, 186, 119, 52, 31, 187, 119, 53, 31, 187, 121, 53, 31, 188, 122, 54, 33, 188, 123, 54, 32, 189, 124, 55, 32, 189, 125, 55, 32, 189, 126, 56, 34, 190, 128, 56, 34, 190, 128, 57, 33, 191, 130, 57, 33, 191, 131, 58, 35, 192, 131, 58, 35, 192, 133, 59, 34, 193, 134, 60, 35, 194, 135, 60, 35, 194, 136, 61, 37, 195, 139, 61, 37, 195, 139, 62, 36, 196, 141, 62, 36, 196, 141, 63, 38, 197, 142, 63, 38, 197, 143, 64, 39, 198, 144, 64, 39, 198, 146, 66, 39, 198, 146, 67, 39, 198, 147, 67, 38, 199, 147, 68, 40, 199, 149, 68, 40, 200, 150, 69, 40, 200, 152, 70, 41, 201, 154, 71, 41, 201, 154, 71, 42, 202, 155, 72, 42, 202, 156, 73, 41, 203, 157, 73, 43, 203, 158, 74, 42, 204, 160, 75, 44, 204, 161, 76, 44, 204, 162, 77, 44, 205, 164, 77, 45, 205, 165, 78, 45, 206, 166, 79, 45, 206, 168, 80, 46, 207, 169, 81, 46, 207, 170, 83, 47, 207, 171, 83, 47, 207, 172, 83, 47, 207, 174, 85, 48, 208, 175, 85, 48, 208, 177, 85, 48, 209, 178, 87, 49, 209, 180, 87, 49, 210, 181, 87, 49, 210, 182, 89, 50, 210, 182, 89, 50, 211, 185, 91, 50, 211, 186, 91, 51, 212, 186, 93, 51, 212, 189, 94, 52, 212, 190, 95, 51, 213, 192, 96, 51, 213, 193, 96, 53, 213, 194, 97, 52, 214, 195, 98, 54, 214, 197, 98, 55, 215, 198, 100, 55, 215, 199, 101, 55, 215, 200, 102, 55, 216, 202, 103, 55, 216, 203, 104, 55, 216, 204, 105, 57, 216, 205, 106, 57, 216, 207, 107, 58, 216, 208, 108, 58, 217, 209, 109, 59, 217, 210, 110, 60, 217, 211, 111, 60, 218, 212, 112, 61, 218, 213, 113, 61, 218, 214, 114, 62, 219, 217, 115, 63, 219, 217, 116, 64, 219, 218, 118, 64, 220, 219, 119, 65, 220, 220, 121, 66, 220, 222, 121, 67, 221, 222, 122, 67, 221, 222, 123, 68, 221, 223, 124, 69, 222, 224, 125, 70, 222, 225, 127, 71, 222, 226, 128, 72, 223, 228, 129, 73, 223, 228, 130, 74, 223, 229, 132, 75, 223, 230, 135, 79, 224, 231, 138, 81, 224, 233, 141, 84, 224, 233, 144, 87, 225, 235, 147, 91, 225, 236, 150, 94, 225, 237, 154, 97, 225, 238, 158, 102, 225, 239, 161, 107, 225, 239, 165, 110, 225, 240, 168, 114, 226, 241, 172, 118, 226, 241, 176, 122, 226, 241, 181, 126, 226, 242, 183, 130, 227, 243, 186, 135, 227, 243, 190, 139, 227, 244, 194, 143, 227, 244, 197, 147, 228, 244, 200, 150, 228, 245, 204, 154, 228, 245, 207, 157, 228, 245, 210, 161, 229, 246, 212, 164, 229, 246, 215, 167, 229, 246, 217, 169, 229, 246, 220, 172, 230, 247, 221, 174, 230]);

// node_modules/@arcgis/core/views/3d/environment/MarsAtmosphere.js
var E20 = 128;
var G8 = -o35;
var H7 = 0;
var N9 = 50;
var k5 = () => 1 - 511 / 512;
var B8 = v6([[50, 0.1015625], [500, 0.21875], [5e3, 1 - 250 / 512], [5e4, 0.4140625]]);
var z12 = class {
  constructor(e68, t71) {
    this.view = e68, this.type = a33.Mars, this._passParameters = new p19(), this._vaoCount = 0, this._texV1 = 1;
    const s71 = s6(e68.spatialReference);
    this._planetRadius = s71.radius, this._outerRimWidth = s71.outerAtmosphereRimWidth, this._innerRimFactor = (this._planetRadius + G8) / this._planetRadius, this._middleRimFactor = (this._planetRadius + H7) / this._planetRadius, this._outerRimFactor = (this._planetRadius + this._outerRimWidth) / this._planetRadius, this._texV0 = H7 / this._outerRimWidth, this._texVScale = this._texV1 - this._texV0, this._techniqueRepository = t71.techniqueRepository;
    const o58 = t71.renderContext.rctx;
    this._cameraChangeHandle = d3(() => {
      var _a;
      return (_a = this.view.state) == null ? void 0 : _a.camera;
    }, () => t71.requestRender(), A3), this._vao = this._createRibbon(o58), this._vaoCount = i8(this._vao, "geometry"), this._fadeVao = i18(o58), this._fadeVaoCount = i8(this._fadeVao, "geometry");
    const a61 = new e22();
    a61.wrapMode = D2.CLAMP_TO_EDGE, a61.flipped = true, a61.width = 1, a61.height = 512, this._passParameters.texture = new m11(o58, a61, e38);
    const h36 = new i21();
    h36.geometry = r30.Cone, this._coneTechnique = this._techniqueRepository.acquire(h16, h36), h36.geometry = r30.Underground, this._undergroundTechnique = this._techniqueRepository.acquire(h16, h36);
  }
  destroy() {
    this._coneTechnique.release(), this._undergroundTechnique.release(), this._cameraChangeHandle.remove(), this._passParameters.texture = r2(this._passParameters.texture), this._fadeVao.dispose(), this._vao.dispose();
  }
  render(e68) {
    const t71 = e68.bindParameters.camera;
    this._update(t71);
    const s71 = e68.rctx;
    this._passParameters.undergroundFadeAlpha < 1 && (s71.bindTechnique(this._coneTechnique, e68.bindParameters, this._passParameters), s71.bindVAO(this._vao), s71.drawArrays(E7.TRIANGLES, 0, this._vaoCount)), this._passParameters.undergroundFadeAlpha > 0 && (s71.bindTechnique(this._undergroundTechnique, e68.bindParameters, this._passParameters), s71.bindVAO(this._fadeVao), s71.drawArrays(E7.TRIANGLE_STRIP, 0, this._fadeVaoCount));
  }
  renderHaze() {
  }
  _update(s71) {
    const r55 = n7(), i47 = this._planetRadius, o58 = s8(s71.eye), a61 = o58 - i47;
    if (a61 < 0) {
      const e68 = Math.min(-a61 / 5e3, 1);
      this._passParameters.undergroundFadeAlpha = e68;
    } else
      this._passParameters.undergroundFadeAlpha = 0;
    const p48 = Math.max(N9, a61), c44 = i47 + G8;
    this._passParameters.innerScale = Y7(i47 + p48, i47, c44) - 1, this._passParameters.altitudeFade = e35(a61), g2(r55, s71.eye, (i47 + N9) / o58), J3(r55, s71.center, s71.up, i47, this._passParameters.silhouette);
    const u46 = this._computeScreenRimWidth(s71, r55, s71.up, this._passParameters.silhouette), l45 = k5(), d44 = B8(a61);
    let f48 = this._texV0 + l45 * this._texVScale, g23 = this._texV0 + u46 * d44 * this._texVScale;
    if (a61 > N9) {
      J3(s71.eye, s71.center, s71.up, i47, this._passParameters.silhouette);
      const r56 = this._computeScreenRimWidth(s71, s71.eye, s71.up, this._passParameters.silhouette), o59 = e12((r56 - 1.5) / (u46 - 1.5), 0, 1);
      f48 = this._texV0 + o59 * l45 * this._texVScale, g23 = this._texV0 + f4(this._texV1, u46 * d44, o59) * this._texVScale;
    }
    o13(this._passParameters.texV, f48, g23);
  }
  _createRibbon(e68) {
    const t71 = t13(3 + 3 * E20 * 3), s71 = new Uint32Array(3 * E20 * 5);
    t71[0] = 0, t71[1] = 0, t71[2] = -1;
    for (let o58 = 0; o58 < E20; o58++) {
      const e69 = 9 * o58 + 3;
      t71[e69] = o58, t71[e69 + 1] = this._innerRimFactor, t71[e69 + 2] = -1, t71[e69 + 3] = o58, t71[e69 + 4] = this._middleRimFactor, t71[e69 + 5] = 0, t71[e69 + 6] = o58, t71[e69 + 7] = this._outerRimFactor, t71[e69 + 8] = 1;
      const r56 = 3 * o58 + 1, i48 = o58 === E20 - 1 ? 1 : r56 + 3, a61 = 15 * o58;
      s71[a61] = r56, s71[a61 + 1] = r56 + 1, s71[a61 + 2] = i48 + 1, s71[a61 + 3] = i48 + 1, s71[a61 + 4] = i48, s71[a61 + 5] = r56, s71[a61 + 6] = r56 + 1, s71[a61 + 7] = r56 + 2, s71[a61 + 8] = i48 + 2, s71[a61 + 9] = i48 + 2, s71[a61 + 10] = i48 + 1, s71[a61 + 11] = r56 + 1, s71[a61 + 12] = r56, s71[a61 + 13] = i48, s71[a61 + 14] = 0;
    }
    const r55 = Z3.createBuffer(s71.length), i47 = r55.position;
    for (let o58 = 0; o58 < s71.length; ++o58) {
      const e69 = 3 * s71[o58];
      i47.set(o58, 0, t71[e69]), i47.set(o58, 1, t71[e69 + 1]), i47.set(o58, 2, t71[e69 + 2]);
    }
    return new r27(e68, O9, { geometry: t12(Z3) }, { geometry: h7.createVertex(e68, F3.STATIC_DRAW, r55.buffer) });
  }
  _computeScreenRimWidth(e68, t71, s71, r55) {
    return u4(Q5, r55.center, r55.v2), g2(X6, Q5, this._outerRimFactor), X2(K5, t71, Q5, s71), a15(Q5, K5, e68.projectionMatrix, e68.viewport, Q5), a15(X6, K5, e68.projectionMatrix, e68.viewport, X6), x2(Q5, X6) / e68.height;
  }
};
function J3(e68, t71, s71, r55, i47) {
  const o58 = s8(e68), a61 = r55 * Math.sqrt(o58 * o58 - r55 * r55) / o58, h36 = Math.sqrt(r55 * r55 - a61 * a61), p48 = i47.v1, c44 = i47.v2;
  return g2(i47.center, e68, h36 / o58), _(p48, e68, t71), v4(p48) < 1 && _(p48, e68, s71), g2(p48, p48, a61 / s8(p48)), _(c44, p48, e68), g2(c44, c44, a61 / s8(c44)), a61;
}
var K5 = e15();
var Q5 = n7();
var X6 = n7();
function Y7(e68, t71, s71) {
  return e68 * e68 / (Math.sqrt(e68 * e68 - t71 * t71) * Math.sqrt(e68 * e68 - s71 * s71) + t71 * s71);
}
var Z3 = H2().vec3f(e18.POSITION);

// node_modules/@arcgis/core/views/3d/environment/PrecipitationTechnique.js
var g9 = class extends n15 {
  constructor() {
    super(...arguments), this.time = 0, this.radius = 1, this.width = 500, this.opacity = 1;
  }
};
var d28 = class _d extends r15 {
  initializeProgram(e68) {
    return new r16(e68.rctx, _d.shader.get().build(this.configuration), h17);
  }
  initializePipeline() {
    return S7({ blending: l11(R2.ONE, R2.ONE, R2.ONE_MINUS_SRC_ALPHA, R2.ONE_MINUS_SRC_ALPHA), depthTest: { func: O8.LEQUAL }, colorWrite: _8 });
  }
};
d28.shader = new t17(A13, () => import("./Precipitation.glsl-ZQOWMFSC.js"));
var h17 = /* @__PURE__ */ new Map([[e18.POSITION, 0], [e18.INSTANCEFEATUREATTRIBUTE, 1]]);

// node_modules/@arcgis/core/views/3d/environment/Precipitation.js
var g10 = class extends S3 {
  constructor(e68) {
    super(e68), this._numParticles = 25e4, this._rainSpeed = 0.1, this._snowSpeed = 0.01, this._passParameters = new g9(), this._animation = new e24(), this._passParameters.time = 0, this._passParameters.radius = s6(e68.view.spatialReference).radius, this._techniqueRepository = e68.context.techniqueRepository;
  }
  destroy() {
    this._numParticles = 0, this._snowTechniqueCached = t2(this._snowTechniqueCached), this._rainTechniqueCached = t2(this._rainTechniqueCached), this._vao = r2(this._vao), this._instanceIdBuffer = r2(this._instanceIdBuffer);
  }
  get _rainTechnique() {
    if (null == this._rainTechniqueCached) {
      const e68 = new i22();
      e68.type = t42.Rain, this._rainTechniqueCached = this._techniqueRepository.acquire(d28, e68);
    }
    return this._rainTechniqueCached;
  }
  get _snowTechnique() {
    if (null == this._snowTechniqueCached) {
      const e68 = new i22();
      e68.type = t42.Snow, this._snowTechniqueCached = this._techniqueRepository.acquire(d28, e68);
    }
    return this._snowTechniqueCached;
  }
  update(e68) {
    return this._animation.advance(e68);
  }
  render(e68, t71, r55) {
    const s71 = "rainy" === r55 ? this._rainTechnique : this._snowTechnique;
    if (!s71.compiled)
      return void this.context.requestRender();
    const o58 = e68.rctx;
    if (this._ensureResources(o58), null == s71 || null == this._vao || null == this._instanceIdBuffer)
      return;
    if (null != e68.bindParameters.cloudsFade.data && (this._passParameters.opacity = e68.bindParameters.cloudsFade.opacity), this._passParameters.opacity <= 0)
      return;
    const a61 = 0.35;
    t71 = t71 < 0.5 ? f4(0, a61, 2 * t71) : f4(a61, 1, 2 * (t71 - 0.5)), this._passParameters.time = ("rainy" === r55 ? this._rainSpeed : this._snowSpeed) * u3(this._animation.time) % 1e5;
    const c44 = o58.bindTechnique(s71, e68.bindParameters, this._passParameters);
    o58.bindVAO(this._vao), c44.assertCompatibleVertexAttributeLocations(this._vao), E10(o58, h17, this._instanceIdBuffer, A17, 0), o58.drawArraysInstanced(E7.TRIANGLES, 0, 3, this._numParticles * t71), _7(o58, h17, this._instanceIdBuffer, A17);
  }
  _ensureResources(e68) {
    null == this._vao && (this._vao = P10(e68)), null == this._instanceIdBuffer && (this._instanceIdBuffer = this._createInstanceIndices(e68));
  }
  _createInstanceIndices(e68) {
    const t71 = [];
    for (let i47 = 0; i47 < this._numParticles; i47++)
      t71.push(i47);
    return h7.createVertex(e68, F3.STATIC_DRAW, new Float32Array(t71));
  }
};
function P10(e68) {
  const t71 = new Float32Array([-1, 0, 1, 1, 0, -1, 1, 0, 1]);
  return new r27(e68, h17, { geometry: t12(v14) }, { geometry: h7.createVertex(e68, F3.STATIC_DRAW, t71) });
}
e([y2({ constructOnly: true })], g10.prototype, "context", void 0), e([y2({ constructOnly: true })], g10.prototype, "view", void 0), g10 = e([a4("esri.views.3d.environment.Precipitation")], g10);
var v14 = H2().vec3f(e18.POSITION);
var A17 = t12(H2().f32(e18.INSTANCEFEATUREATTRIBUTE), 1);

// node_modules/@arcgis/core/views/3d/environment/StarsTechnique.js
var u27 = class extends n15 {
  constructor() {
    super(...arguments), this.modelMatrix = e15();
  }
};
var h18 = class _h extends r15 {
  constructor(e68) {
    super(e68, new t19(), () => this.destroy());
  }
  initializeProgram(e68) {
    return new r16(e68.rctx, _h.shader.get().build(), O9);
  }
  initializePipeline() {
    return S7({ blending: l11(R2.SRC_ALPHA, R2.ONE, R2.ONE_MINUS_SRC_ALPHA, R2.ONE_MINUS_SRC_ALPHA), depthTest: { func: O8.LEQUAL }, colorWrite: _8 });
  }
};
h18.shader = new t17(f20, () => import("./Stars.glsl-P6ORKMVB.js"));

// node_modules/@arcgis/core/views/3d/environment/Stars.js
var x13 = class extends S3 {
  get updating() {
    return this._updatingTracking.updating || this.loading;
  }
  get loading() {
    return null != this._loadDataTask && !this._loadDataTask.finished;
  }
  constructor(t71) {
    super(t71), this._loadDataTask = null, this._numPoints = 0, this._passParameters = new u27(), this._updatingTracking = new h6();
  }
  initialize() {
    this._loadDataTask = this._createLoadDataTask();
  }
  destroy() {
    this._loadDataTask = e2(this._loadDataTask), this._updatingTracking.destroy(), this._numPoints = 0, this._technique = t2(this._technique), this._vao = r2(this._vao), F6 = null;
  }
  render(t71) {
    const { rctx: e68 } = t71;
    if (this._ensureResources(e68), null == this._technique || null == this._vao)
      return;
    if (!this._technique.compiled)
      return void this.requestRender();
    const s71 = e68.bindTechnique(this._technique, t71.bindParameters, this._passParameters);
    e68.bindVAO(this._vao), s71.assertCompatibleVertexAttributeLocations(this._vao), e68.drawArrays(E7.POINTS, 0, this._numPoints);
  }
  _ensureResources(t71) {
    if (null != this._technique || null == F6)
      return;
    this._technique = new h18({ rctx: t71, viewingMode: this.view.state.viewingMode }), this._numPoints = F6.byteLength / V5;
    const e68 = new Float32Array(F6, 0, 2 * this._numPoints), s71 = new Uint8Array(F6, 2 * this._numPoints * 4, this._numPoints);
    this._vao = A18(t71, e68, s71, this._numPoints), this._updatingTracking.add(() => "virtual" !== this.view.environment.lighting.type ? this.view.environment.lighting.date : null, (t72) => this._update(t72), P);
  }
  _update(t71) {
    if (!t71)
      return;
    const e68 = (t71.getHours() / 12 + t71.getMinutes() / 60 * (2 / 24) + t71.getSeconds() / 60 * (2 / 1440) - 0.9972222) % 2, s71 = 2 * I13(t71), r55 = n9(this._passParameters.modelMatrix, U8);
    x5(r55, r55, -s71 * Math.PI), c4(r55, S11, r55), x5(r55, r55, -e68 * Math.PI), this.requestRender();
  }
  _createLoadDataTask() {
    if (null != F6)
      return null;
    const t71 = d2(async (t72) => {
      const { data: s71 } = await i2("esri/views/3d/environment/resources/stars.wsv", { responseType: "array-buffer", signal: t72 });
      L9(s71), F6 = s71;
    });
    return t71.promise.catch((t72) => {
      b(t72) || n.getLogger(this).error(t72);
    }).then(() => {
      this.destroyed || (this.requestRender(), this.notifyChange("updating"));
    }), t71;
  }
};
function A18(t71, e68, s71, r55) {
  const i47 = C10.createBuffer(r55), o58 = i47.position, a61 = i47.color, n61 = i47.size;
  for (let f48 = 0; f48 < r55; f48++) {
    const t72 = e68[2 * f48], r56 = e68[2 * f48 + 1];
    o58.set(f48, 0, -Math.cos(t72) * Math.sin(r56)), o58.set(f48, 1, -Math.sin(t72) * Math.sin(r56)), o58.set(f48, 2, -Math.cos(r56));
    const i48 = O17(s71[f48]), c44 = M7(R7[i48[1]]);
    a61.set(f48, 0, 255 * c44[0]), a61.set(f48, 1, 255 * c44[1]), a61.set(f48, 2, 255 * c44[2]), a61.set(f48, 3, 255), n61.set(f48, i48[0]);
  }
  return new r27(t71, O9, { geometry: t12(C10) }, { geometry: h7.createVertex(t71, F3.STATIC_DRAW, i47.buffer) });
}
function I13(t71) {
  const e68 = t71, s71 = new Date(t71.getFullYear(), 0, 1, 11, 58, 56);
  return (+e68 - +s71) / (+new Date(t71.getFullYear() + 1, 0, 1, 11, 58, 55) - +s71);
}
function L9(t71) {
  if (!t71)
    throw new s("stars:no-data-received", "Failed to create stars because star catalogue is missing");
  const e68 = t71.byteLength / V5;
  if (e68 % 1 != 0 || e68 > 5e4 || e68 < 5e3)
    throw new s("stars:invalid-data", "Failed to create stars because star catalogue data is invalid");
}
function M7(t71) {
  return [parseInt(t71.substring(0, 2), 16), parseInt(t71.substring(2, 4), 16), parseInt(t71.substring(4, 6), 16)];
}
function O17(t71) {
  return t71 >= 192 ? [2.9, t71 - 192] : t71 >= 160 ? [2.5, t71 - 160] : t71 >= 128 ? [2, t71 - 128] : t71 >= 96 ? [1.5, t71 - 96] : t71 >= 64 ? [1, t71 - 64] : t71 >= 32 ? [0.7, t71 - 32] : [0.4, t71];
}
e([y2({ constructOnly: true })], x13.prototype, "view", void 0), e([y2({ constructOnly: true })], x13.prototype, "requestRender", void 0), e([y2({ readOnly: true })], x13.prototype, "updating", null), e([y2()], x13.prototype, "_loadDataTask", void 0), e([y2()], x13.prototype, "_updatingTracking", void 0), x13 = e([a4("esri.views.3d.environment.Stars")], x13);
var R7 = ["9bb2ff", "9eb5ff", "aabfff", "bbccff", "ccd8ff ", "dae2ff", "e4e9ff", "eeefff", "f8f6ff", "fff9fb", "fff5ef", "fff1e5", "ffeddb", "ffe9d2", "ffe6ca", "ffe3c3", "ffe0bb", "ffddb4", "ffdaad", "ffd6a5", "ffd29c", "ffcc8f", "ffc178", "ffa94b", "ff7b00"];
var S11 = t7(1, 0, 0, 0, 0, 0.9174771405229186, 0.39778850739794974, 0, 0, -0.39778850739794974, 0.9174771405229186, 0, 0, 0, 0, 1);
var U8 = t7(1, 0, 0, 0, 0, 0.9174771405229186, -0.39778850739794974, 0, 0, 0.39778850739794974, 0.9174771405229186, 0, 0, 0, 0, 1);
var V5 = 9;
var C10 = H2().vec3f(e18.POSITION).vec4u8(e18.COLOR).f32(e18.SIZE);
var F6 = null;

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/Update.js
var e39;
!function(e68) {
  e68[e68.Immediate = 0] = "Immediate", e68[e68.Faded = 1] = "Faded";
}(e39 || (e39 = {}));

// node_modules/@arcgis/core/views/3d/environment/EnvironmentRenderer.js
var U9;
var I14 = U9 = class extends c9 {
  constructor(e68) {
    super(e68), this.produces = /* @__PURE__ */ new Map([[A6.ENVIRONMENT_OPAQUE, () => !(null === this._atmosphere && null === this._stars)], [A6.ENVIRONMENT_TRANSPARENT, () => !(null === this._atmosphere)]]), this._context = null, this._atmosphere = null, this._oldWeatherParameters = new V6(), this._newWeatherParameters = new V6(), this._fadedWeatherParameters = new V6(), this._weatherParameters = this._newWeatherParameters;
  }
  initialize() {
    this.view._stage.addRenderPlugin(this);
  }
  destroy() {
    var _a;
    this.removeHandles(), this.uninitializeRenderContext(), null != ((_a = this.view) == null ? void 0 : _a._stage) && this.view._stage.removeRenderPlugin(this), this._set("view", null);
  }
  get atmosphere() {
    return this._atmosphere;
  }
  get _atmosphereType() {
    return null != this.atmosphere ? this.atmosphere.type : a33.None;
  }
  consumes() {
    return this._atmosphereType === a33.Realistic ? n22 : t21;
  }
  updateAnimation(e68) {
    return null != this._precipitation && this._precipitation.update(e68);
  }
  get updating() {
    return null != this._stars && this._stars.updating || null != this._clouds && this._clouds.running;
  }
  get weatherVisible() {
    return s8(this.view.state.camera.eye) - s6(this.view.spatialReference).radius <= p16;
  }
  get usedMemory() {
    var _a;
    return ((_a = this._clouds) == null ? void 0 : _a.usedMemory) ?? 0;
  }
  get _stars() {
    var _a;
    const e68 = this.view, t71 = ((_a = e68.environment) == null ? void 0 : _a.starsEnabled) ?? false, r55 = this._get("_stars");
    return t71 && null != this._context ? null != r55 ? r55 : new x13({ view: e68, requestRender: () => this._setNeedsRender() }) : (u(r55), null);
  }
  get _precipitation() {
    const e68 = this._get("_precipitation");
    if (!this._precipitationEnabled || null == this._context)
      return u(e68), null;
    const t71 = this.view, r55 = this._context;
    return null != e68 && e68.context === r55 ? e68 : (u(e68), new g10({ context: r55, view: t71 }));
  }
  get _clouds() {
    const e68 = this._get("_clouds");
    if (!this.weatherEnabled || null == this._context)
      return u(e68), null;
    if (null != e68)
      return e68;
    const t71 = this.view, r55 = this._context;
    return u(e68), new A15({ context: r55, view: t71, requestRender: () => this._setNeedsRender() });
  }
  get _cloudsComposition() {
    const e68 = this._get("_cloudsComposition");
    if (!this.weatherEnabled || null == this._context)
      return u(e68), null;
    const t71 = this.view.state.viewingMode, r55 = this._context.renderContext.rctx, i47 = s6(this.view.spatialReference).radius;
    return null != e68 && e68.viewingMode === t71 && e68.planetRadius === i47 ? e68 : (u(e68), new m26({ rctx: r55, viewingMode: t71, planetRadius: i47, requestRender: () => this._setNeedsRender() }));
  }
  get _fog() {
    const e68 = this._get("_fog");
    if (!this.weatherEnabled || null == this._context)
      return u(e68), null;
    if (null != e68)
      return e68;
    const t71 = this.view, r55 = this._context, i47 = this._context.renderContext.rctx, a61 = this.view.state.viewingMode;
    return new v12({ context: r55, view: t71, rctx: i47, viewingMode: a61 });
  }
  get weatherEnabled() {
    var _a, _b;
    return !!((_b = (_a = this.view) == null ? void 0 : _a.environmentManager) == null ? void 0 : _b.weatherEnabled);
  }
  get _precipitationEnabled() {
    return this.weatherEnabled && ("rainy" === this.view.environment.weather.type || "snowy" === this.view.environment.weather.type);
  }
  initializeRenderContext(e68 = null) {
    this._context = e68;
    const t71 = () => this._setNeedsRender();
    this.addHandles([d3(() => ({ viewingMode: this.view.state.viewingMode, enabled: this.view.environment.atmosphereEnabled }), (e69) => this._updateAtmosphere(e69), A3), d3(() => this._stars, t71), d3(() => this._precipitation, t71), d3(() => this._clouds, () => this._updateWeather(), P), d3(() => this._fog, () => this._updateFogHaze(), P), d3(() => this.view.state.mode, () => {
      this._setNeedsRender();
    }, C), d3(() => this._weatherUpdateParameters, () => {
      this._updateWeather(), this._updateFogHaze();
    }, A3)]);
  }
  uninitializeRenderContext() {
    this._context = null, this._atmosphere = u(this._atmosphere), this._set("_stars", u(this._stars)), this._set("_precipitation", u(this._precipitation)), this._set("_clouds", u(this._clouds)), this._set("_cloudsComposition", u(this._cloudsComposition)), this._set("_fog", u(this._fog));
  }
  prepareRender(e68) {
    var _a;
    e68.bindParameters.cloudsFade.data = I9(this._clouds) ? this._clouds : null, "local" !== this.view.viewingMode && null != ((_a = e68.bindParameters.cloudsFade.data) == null ? void 0 : _a.cubeMap) && (this._updateWeatherFading(e68.bindParameters, e68.time), e68.bindParameters.cloudsFade.renderingStage === n30.FINISHED && null != this._clouds && 0 === this._clouds.coverage && false === this._clouds.running && (this._clouds.destroyFrameBufferCube(), e68.bindParameters.cloudsFade.data = null));
  }
  renderNode(e68) {
    var _a, _b, _c, _d, _e5, _f, _g;
    switch (e68.bindParameters.slot) {
      case A6.ENVIRONMENT_OPAQUE:
        null != this._stars && this._stars.render(e68), null != this.atmosphere && (this.atmosphere.render(e68, (_c = (_b = (_a = this.view) == null ? void 0 : _a._stage) == null ? void 0 : _b.renderer) == null ? void 0 : _c.fullResolutionAtmosphere), null != this._cloudsComposition && null != e68.bindParameters.cloudsFade.data && (this.weatherVisible && null != this._clouds && this._clouds.updateWeatherTile(), this._cloudsComposition.render(e68)), e68.bindParameters.cloudsFade.isFading && null != this._context && null != ((_d = e68.bindParameters.cloudsFade.data) == null ? void 0 : _d.cubeMap) && this._context.requestRender());
        break;
      case A6.ENVIRONMENT_TRANSPARENT:
        if (null != this.atmosphere && (this.atmosphere.renderHaze(e68, this._weatherParameters.hazeAmount, (_g = (_f = (_e5 = this.view) == null ? void 0 : _e5._stage) == null ? void 0 : _f.renderer) == null ? void 0 : _g.fullResolutionAtmosphere), this._weatherParameters.fog.amount > 0 && null != this._fog && this._fog.render(e68, this._weatherParameters.fog), this._precipitation)) {
          const t71 = this.view.environment.weather;
          "rainy" !== t71.type && "snowy" !== t71.type || this._precipitation.render(e68, t71.precipitation, t71.type);
        }
    }
  }
  updateLightSources(e68, t71, s71, r55) {
    if (null != this._context) {
      const i47 = this._context.renderContext;
      i47.bindParameters.oldLighting.copyFrom(i47.bindParameters.lighting), i47.bindParameters.newLighting.noonFactor = t71, i47.bindParameters.newLighting.globalFactor = s71, i47.bindParameters.newLighting.set(e68);
      r55 === e39.Faded || i47.bindParameters.weatherFading ? i47.bindParameters.fadeLighting(0) : i47.bindParameters.fadeLighting(1), this._context.requestRender();
    }
  }
  get _weatherUpdateParameters() {
    const e68 = this.weatherEnabled ? this.view.environment.weather : null;
    return null == e68 ? null : "rainy" === e68.type || "snowy" === e68.type ? { type: e68.type, weatherAdjustment: e68.cloudCover, effect: e68.precipitation } : { type: e68.type, weatherAdjustment: "foggy" === e68.type ? e68.fogStrength : e68.cloudCover };
  }
  _updateWeatherFading(e68, t71) {
    e68.cloudsFade.updateFading(e68.camera, this.view.state.mode, t71, this.view.qualitySettings.fadeDuration), e68.cloudsFade.updateParallax(e68.camera), e68.weatherFading && (q7(e68), this._updateFogAtmoshpere(e68));
  }
  _updateFogAtmoshpere(e68) {
    e68.cloudsFade.fadeMode !== O13.CROSS_FADE && e68.cloudsFade.fadeMode !== O13.FADE_IN ? this._fadeWeather(0) : this._fadeWeather(e68.cloudsFade.fadeFactor);
  }
  _fadeWeather(e68) {
    const { _newWeatherParameters: t71, _oldWeatherParameters: s71 } = this;
    e68 >= 1 ? this._weatherParameters = t71 : (this._fadedWeatherParameters.lerp(s71, t71, e68), this._weatherParameters = this._fadedWeatherParameters);
  }
  _updateWeather() {
    const e68 = this._weatherUpdateParameters;
    null != e68 && null != this._clouds && (this._clouds.applyPreset(e36[e68.type], e68.weatherAdjustment), this._setNeedsRender());
  }
  _setNeedsRender() {
    null != this._context && this._context.requestRender();
  }
  _updateFogHaze() {
    const e68 = this._weatherUpdateParameters;
    if (null == this._fog || null == e68 || null == this._context)
      return;
    const s71 = this._context.renderContext.bindParameters;
    switch (this._oldWeatherParameters.copyFrom(this._weatherParameters), e68.type) {
      case "foggy":
        this._newWeatherParameters.fog.strength = f4(3e-5, 5e-3, e68.weatherAdjustment ** 3), r5(this._newWeatherParameters.fog.color, H8), this._newWeatherParameters.fog.amount = 1, this._newWeatherParameters.hazeAmount = 1, this._setNeedsRender();
        break;
      case "rainy":
        this._newWeatherParameters.fog.strength = f4(4e-6, 2e-4, (e68.effect ?? 0) ** 3), r5(this._newWeatherParameters.fog.color, D5), this._newWeatherParameters.fog.amount = 1, this._newWeatherParameters.hazeAmount = 0, this._setNeedsRender();
        break;
      case "snowy":
        this._newWeatherParameters.fog.strength = f4(4e-6, 2e-4, (e68.effect ?? 0) ** 3), r5(this._newWeatherParameters.fog.color, H8), this._newWeatherParameters.fog.amount = 1, this._newWeatherParameters.hazeAmount = 1, this._setNeedsRender();
        break;
      default:
        this._newWeatherParameters.fog.strength = 0, this._newWeatherParameters.fog.amount = 0, this._newWeatherParameters.hazeAmount = 1, this._setNeedsRender();
    }
    s71.weatherFading ? this._fadeWeather(0) : this._fadeWeather(1);
  }
  _updateAtmosphere(e68) {
    const t71 = this._selectAtmosphereType(e68);
    if (t71 !== a33.None && this._context) {
      if (!this._atmosphere || this._atmosphere.type !== t71) {
        this._atmosphere = u(this._atmosphere);
        const e69 = this._getAtmosphereClass(t71);
        e69 && (this._atmosphere = new e69(this.view, this._context));
      }
    } else
      this._atmosphere = u(this._atmosphere);
    this._setNeedsRender();
  }
  _getAtmosphereClass(e68) {
    switch (e68) {
      case a33.Realistic:
        return C9;
      case a33.Local:
        return A16;
      case a33.Mars:
        return z12;
      default:
      case a33.None:
        return null;
    }
  }
  _selectAtmosphereType(e68) {
    const { enabled: t71, viewingMode: s71 } = e68;
    return !t71 || p2(this.view.spatialReference) ? a33.None : s71 === l8.Local ? a33.Local : null != this._context && C9.isSupported(this._context) && P2(this.view.spatialReference) ? a33.Realistic : f(this.view.spatialReference) ? a33.Mars : a33.None;
  }
  get test() {
    return { atmosphere: this._atmosphere, clouds: this._clouds, selectAtmosphereType: () => this._selectAtmosphereType({ viewingMode: this.view.state.viewingMode, enabled: this.view.environment.atmosphereEnabled }), stubGetAtmosphereClass: (e68) => {
      k6 = U9.prototype._getAtmosphereClass, U9.prototype._getAtmosphereClass = e68;
    }, restoreGetAtmosphereClass: () => {
      U9.prototype._getAtmosphereClass = k6;
    } };
  }
};
e([y2({ constructOnly: true })], I14.prototype, "view", void 0), e([y2({ readOnly: true })], I14.prototype, "atmosphere", null), e([y2({ readOnly: true })], I14.prototype, "_atmosphereType", null), e([y2({ type: Boolean, readOnly: true })], I14.prototype, "updating", null), e([y2({ readOnly: true })], I14.prototype, "weatherVisible", null), e([y2()], I14.prototype, "_context", void 0), e([y2()], I14.prototype, "_atmosphere", void 0), e([y2({ readOnly: true })], I14.prototype, "_stars", null), e([y2({ readOnly: true })], I14.prototype, "_precipitation", null), e([y2({ readOnly: true })], I14.prototype, "_clouds", null), e([y2({ readOnly: true })], I14.prototype, "_cloudsComposition", null), e([y2({ readOnly: true })], I14.prototype, "_fog", null), e([y2({ readOnly: true })], I14.prototype, "weatherEnabled", null), e([y2({ readOnly: true })], I14.prototype, "_precipitationEnabled", null), e([y2({ readOnly: true })], I14.prototype, "_weatherUpdateParameters", null), I14 = U9 = e([a4("esri.views.3d.environment.EnvironmentRenderer")], I14);
var V6 = class {
  constructor() {
    this.fog = new y10(), this.hazeAmount = 1;
  }
  copyFrom(e68) {
    this.fog.amount = e68.fog.amount, this.hazeAmount = e68.hazeAmount, this.fog.strength = e68.fog.strength, r5(this.fog.color, e68.fog.color);
  }
  lerp(e68, s71, r55) {
    this.fog.amount = f4(e68.fog.amount, s71.fog.amount, r55), this.hazeAmount = f4(e68.hazeAmount, s71.hazeAmount, r55), this.fog.strength = f4(e68.fog.strength, s71.fog.strength, r55), A4(this.fog.color, e68.fog.color, s71.fog.color, r55);
  }
};
function q7(e68) {
  e68.cloudsFade.fadeMode !== O13.CROSS_FADE && e68.cloudsFade.fadeMode !== O13.FADE_IN ? e68.fadeLighting(0) : e68.fadeLighting(e68.cloudsFade.fadeFactor);
}
var D5 = r4(0.5, 0.5, 0.5);
var H8 = r4(1.5, 1.5, 1.5);
var k6;

// node_modules/@arcgis/core/views/3d/environment/SceneViewEnvironmentManager.js
var L10 = class extends o3.EventedAccessor {
  constructor() {
    super(), this._referencePointUpdateDelay = 200, this._referencePointUpdateInterval = 3e3, this._referencePointUpdateDistThreshold = 1e6, this._referencePosUpdateQuery = null, this._referencePosMapCoordsRequested = null, this._viewHandlesKey = "viewHandles", this._preserveAbsoluteDateTime = false, this._trackingEnabled = false, this._referencePosResetPreserveAbsoluteTime = false, this._referencePosUpdateTimer = null, this._referencePosMapCoords = null, this._mainLight = new c10(), this._ambientLight = new i11(), this._moonLight = new r18(), this.disableQueries = false, this._disableWeather = false, this._renderer = null, this._referencePositionGeographic = null, this._resetReferencePosition();
  }
  destroy() {
    this.disconnectView();
  }
  get _view() {
    var _a;
    return (_a = this._renderer) == null ? void 0 : _a.view;
  }
  get updating() {
    var _a;
    return !((this.disableQueries || !this._referencePosUpdateQuery && !this._referencePosMapCoordsRequested) && !((_a = this._renderer) == null ? void 0 : _a.updating));
  }
  get weatherEnabled() {
    var _a, _b, _c;
    return ((_a = this._view) == null ? void 0 : _a.environment.atmosphereEnabled) && !this._disableWeather && ((_c = (_b = this._view) == null ? void 0 : _b.state) == null ? void 0 : _c.viewingMode) === l8.Global && P2(this._view.spatialReference);
  }
  get weatherVisible() {
    var _a;
    return this.weatherEnabled && ((_a = this._renderer) == null ? void 0 : _a.weatherVisible);
  }
  get referencePositionGeographic() {
    return this._referencePositionGeographic;
  }
  connectView(e68) {
    if (this._renderer)
      return;
    this._renderer = new I14({ view: e68 });
    const t71 = () => this._updateRenderParameters(), i47 = () => this._cameraHandler();
    this.addHandles([d3(() => e68.environment.lighting, (e69) => this._updateLightingHandler(e69), C), d3(() => "virtual" !== e68.environment.lighting.type ? e68.environment.lighting.date : null, (e69) => this._lightingDateHandler(e69), C), d3(() => e68.stationary, () => this._interactingStationaryHandler()), d3(() => e68.environment.lighting.directShadowsEnabled, t71, C), d3(() => e68.qualitySettings.ambientOcclusion, t71, C), d3(() => e68.qualitySettings.reflections, t71, C), d3(() => e68.spatialReference, () => this._resetReferencePosition(true), C), d3(() => e68.environment.weather.type, () => this._updateLighting(null, e39.Faded), C), d3(() => this.weatherEnabled, () => this._updateLighting(null, e39.Faded), C), d3(() => e68.viewingMode, () => this._resetReferencePosition(true), A3), d3(() => "virtual" !== e68.environment.lighting.type && e68.environment.lighting.cameraTrackingEnabled, (e69) => this._updateCameraTracking(e69), A3), d3(() => e68.state.camera, i47, A3), d3(() => this.disableQueries, i47)], this._viewHandlesKey), this._updateRenderParameters(), this._updateLighting(), this._cameraHandler(), this.notifyChange("updating");
  }
  disconnectView() {
    this.removeHandles(this._viewHandlesKey), this._resetReferencePosition(), this._renderer = u(this._renderer);
  }
  _updateLightingHandler(e68) {
    this._updateCameraTracking("virtual" !== e68.type && e68.cameraTrackingEnabled), this._lightingDateHandler("virtual" !== e68.type ? e68.date : null), this._updateRenderParameters();
  }
  _updateCameraTracking(e68) {
    if (this._trackingEnabled = e68, e68)
      this._cameraHandler();
    else {
      const e69 = this._view.environment.lighting;
      "virtual" !== (e69 == null ? void 0 : e69.type) && (e69.positionTimezoneInfo.autoUpdated = false);
    }
  }
  _lightingDateHandler(e68) {
    const t71 = this._view.environment.lighting;
    if ("virtual" !== (t71 == null ? void 0 : t71.type)) {
      if (e68) {
        if (!t71.positionTimezoneInfo.autoUpdated) {
          this._preserveAbsoluteDateTime = true;
          const i47 = this._view.spatialReference;
          if (!F(i47, f2.WGS84)) {
            const e69 = this._view.camera.position;
            if (!this._referencePosMapCoords || !this._referencePosMapCoords.equals(e69))
              return void this._requestReferencePositionUpdate(e69);
          }
          if (this._preupdateTracking(e68), null != this._referencePositionGeographic) {
            const e69 = c13(this._referencePositionGeographic, D6);
            null != e69 && (t71.autoUpdate(null, e69), this._trackingEnabled && (t71.positionTimezoneInfo.autoUpdated = true));
          }
        }
        this._updateLighting(e68);
      }
    } else
      this._updateLighting();
  }
  _preupdateTracking(e68) {
    !this._trackingEnabled && "virtual" !== this._view.environment.lighting.type && this._view.environment.lighting.cameraTrackingEnabled && this._cameraHandler(e68);
  }
  _cameraHandler(e68 = null) {
    const t71 = this._view;
    if (!t71.ready)
      return;
    const i47 = t71.stateManager.camera;
    i47 && (this._cameraHandlerClientSide(i47, e68) || this._cameraHandlerServerSide(i47));
  }
  _cameraHandlerClientSide(e68, t71) {
    const i47 = P2(this._view.spatialReference);
    if (i47 && !F(this._view.spatialReference, f2.WGS84))
      return "virtual" === this._view.environment.lighting.type && this._updateLighting(), false;
    const r55 = e68.position;
    return this._referencePositionGeographic ?? (this._referencePositionGeographic = n7()), i47 ? c5(r55, this._referencePositionGeographic, f2.WGS84) : o4(this._referencePositionGeographic, r55.longitude ?? 0, r55.latitude ?? 0, r55.z ?? 0), this.notifyChange("referencePositionGeographic"), this._autoUpdateTimezone(this._referencePositionGeographic, t71) || this._updateLighting(t71), true;
  }
  _cameraHandlerServerSide(e68) {
    const t71 = e68.position;
    (!this._referencePosMapCoords || this._referencePosMapCoordsRequested || this._exceedsReferencePosDistThreshold(t71)) && this._requestReferencePositionUpdate(t71, true), this._view.mapCoordsHelper && this._referencePositionGeographic && (this._referencePositionGeographic[2] = (t71.z ?? 0) * this._view.mapCoordsHelper.unitInMeters, this._referencePosChanged());
  }
  _interactingStationaryHandler() {
    this._view.stationary && this._executePendingReferencePositionUpdate();
  }
  _updateLighting(e68, t71 = e39.Immediate) {
    const i47 = this._view;
    e68 = e68 || ("virtual" === i47.environment.lighting.type ? null : i47.environment.lighting.date);
    const r55 = this._referencePositionGeographic, n61 = r55 ? q8 : E21, s71 = this.weatherVisible ? i47.environment.weather.type : "disabled";
    null != r55 ? j9(e68, r55, i47.state.viewingMode, s71, i47.state.camera, n61) : "virtual" === i47.environment.lighting.type && O15(i47.state.camera, i47.state.viewingMode, n61.direct.directionToLightSource);
    const o58 = this._mainLight, a61 = n61.direct;
    g2(o58.intensity, a61.color, a61.intensity * Math.PI), r5(o58.direction, a61.directionToLightSource), o58.specularStrength = n61.specularStrength, o58.environmentStrength = n61.environmentStrength;
    const h36 = this._ambientLight;
    g2(h36.intensity, n61.ambient.color, n61.ambient.intensity);
    const c44 = this._moonLight;
    A4(c44.intensity, k7, I15, n61.globalFactor);
    const d44 = (1 - 0.5 * n61.globalFactor) * (1 - 0.4 * n61.noonFactor * (1 - n61.globalFactor));
    g2(c44.intensity, c44.intensity, d44), r5(c44.direction, a61.directionToLightSource), this._renderer.updateLightSources([o58, h36, c44], n61.noonFactor, n61.globalFactor, t71), this._updateRenderParameters();
  }
  _autoUpdateTimezone(e68, t71 = null) {
    if ("virtual" === this._view.environment.lighting.type || !this._view.environment.lighting.cameraTrackingEnabled || null == e68)
      return false;
    const i47 = Q6;
    i47.setTime((t71 || this._view.environment.lighting.date).getTime());
    const r55 = c13(e68, D6);
    if (null == r55)
      return false;
    let n61 = this._view.environment.lighting.positionTimezoneInfo;
    if (n61.autoUpdated) {
      if (n61.hours === r55.hours && n61.minutes === r55.minutes && n61.seconds === r55.seconds)
        return false;
    } else
      n61 = r55;
    const s71 = i47.getUTCHours() - (r55.hours - n61.hours), o58 = i47.getUTCMinutes() - (r55.minutes - n61.minutes), a61 = i47.getUTCSeconds() - (r55.seconds - n61.seconds);
    return i47.setUTCHours(s71), i47.setUTCMinutes(o58), i47.setUTCSeconds(a61), !t71 && this._view.environment.lighting.autoUpdate(i47, r55);
  }
  _updateRenderParameters() {
    const e68 = this._view._stage;
    if (!e68)
      return;
    const t71 = null == this._referencePositionGeographic || z10(this._referencePositionGeographic[2], this._view.state.viewingMode);
    e68.renderer.setParameters({ shadowMap: this._view.environment.lighting.directShadowsEnabled && t71, environment: this._view.environment, weatherVisible: this._view.environmentManager.weatherVisible, qualitySettings: this._view.qualitySettings });
  }
  _resetReferencePosition(e68 = false) {
    this._cancelReferencePosUpdates(), this._referencePosMapCoords = null, this._referencePosMapCoordsRequested = null, this._referencePosResetPreserveAbsoluteTime = null, this._referencePositionGeographic = null, this.notifyChange("updating"), e68 && this._cameraHandler();
  }
  _requestReferencePositionUpdate(e68, t71 = false) {
    if (!this.disableQueries && (this._referencePosMapCoordsRequested ? this._referencePosMapCoordsRequested.copy(e68) : this._referencePosMapCoordsRequested = e68.clone(), this._referencePosResetPreserveAbsoluteTime = !!t71, !this._referencePosUpdateQuery && !this._referencePosUpdateTimer && this._view.stationary)) {
      const e69 = this._referencePosUpdateQuery = A(this._referencePointUpdateDelay).then(() => {
        if (this._referencePosUpdateQuery === e69) {
          const t73 = () => this._referencePosUpdateQuery !== e69;
          return this._doReferencePositionUpdateQuery(t73);
        }
      }).catch((e70) => {
        "mapcoordshelper:missing-geometry-service" === e70.name && (this.disableQueries = true);
      }).then(() => {
        this._referencePosUpdateQuery === e69 && (this._referencePosUpdateQuery = null, this._referencePosUpdateTimer || this._executePendingReferencePositionUpdate(), this.notifyChange("updating"));
      }), t72 = this._referencePosUpdateTimer = A(this._referencePointUpdateInterval).then(() => {
        this._referencePosUpdateTimer === t72 && (this._referencePosUpdateTimer = null, this._referencePosUpdateQuery || this._executePendingReferencePositionUpdate());
      });
      this.notifyChange("updating");
    }
  }
  async _doReferencePositionUpdateQuery(e68) {
    this._referencePosResetPreserveAbsoluteTime && (this._preserveAbsoluteDateTime = false), this._referencePosMapCoords ? this._referencePosMapCoords.copy(this._referencePosMapCoordsRequested) : this._referencePosMapCoords = this._referencePosMapCoordsRequested.clone(), this._referencePosResetPreserveAbsoluteTime = null, this._referencePosMapCoordsRequested = null;
    const t71 = await this._view.mapCoordsHelper.toGeographic(this._referencePosMapCoords);
    if (!e68() && !isNaN(t71[0]) && !isNaN(t71[1])) {
      const e69 = (this._referencePosMapCoords.z ?? 0) * this._view.mapCoordsHelper.unitInMeters;
      this._referencePositionGeographic ? o4(this._referencePositionGeographic, t71[0], t71[1], e69) : this._referencePositionGeographic = r4(t71[0], t71[1], e69), this._referencePosChanged();
    }
  }
  _executePendingReferencePositionUpdate() {
    const e68 = this._referencePosMapCoordsRequested;
    e68 && this._requestReferencePositionUpdate(e68, this._referencePosResetPreserveAbsoluteTime);
  }
  _referencePosChanged() {
    this._preserveAbsoluteDateTime ? this._updateLighting() : this._autoUpdateTimezone(this._referencePositionGeographic) || this._updateLighting(), this.notifyChange("referencePositionGeographic");
  }
  _exceedsReferencePosDistThreshold(e68) {
    const t71 = this._referencePosMapCoords;
    if (null == t71)
      return true;
    const i47 = m22(t71, e68);
    if (null == i47)
      return true;
    return s25(i47, "meters").value > this._referencePointUpdateDistThreshold;
  }
  _cancelReferencePosUpdates() {
    const e68 = !!this._referencePosUpdateQuery;
    return this._referencePosUpdateQuery = null, this._referencePosUpdateTimer = null, e68;
  }
  get test() {
    const e68 = this;
    return { get renderer() {
      return e68._renderer;
    }, set referencePointUpdateInterval(t71) {
      e68._referencePointUpdateInterval = t71;
    }, set referencePointUpdateDistThreshold(t71) {
      e68._referencePointUpdateDistThreshold = t71;
    }, set referencePosUpdateTimer(t71) {
      e68._referencePosUpdateTimer = t71;
    }, set referencePointUpdateDelay(t71) {
      e68._referencePointUpdateDelay = t71;
    }, set disableWeather(t71) {
      e68._disableWeather = t71;
    } };
  }
};
e([y2({ type: Boolean, readOnly: true })], L10.prototype, "updating", null), e([y2()], L10.prototype, "disableQueries", void 0), e([y2()], L10.prototype, "_disableWeather", void 0), e([y2()], L10.prototype, "weatherEnabled", null), e([y2()], L10.prototype, "weatherVisible", null), e([y2()], L10.prototype, "referencePositionGeographic", null), e([y2()], L10.prototype, "_renderer", void 0), e([y2()], L10.prototype, "_referencePositionGeographic", void 0), L10 = e([a4("esri.views.3d.environment.SceneViewEnvironmentManager")], L10);
var q8 = new I12();
var E21 = new I12();
var Q6 = /* @__PURE__ */ new Date();
var D6 = { hours: 0, minutes: 0, seconds: 0 };
var k7 = r4(0.22, 0.22, 0.33);
var I15 = r4(0.22, 0.22, 0.22);

// node_modules/@arcgis/core/views/3d/camera/constraintUtils/ConstraintTypes.js
var L11;
!function(L24) {
  L24[L24.NONE = 0] = "NONE", L24[L24.TILT = 1] = "TILT", L24[L24.ALTITUDE = 2] = "ALTITUDE", L24[L24.DISTANCE = 4] = "DISTANCE", L24[L24.COLLISION = 8] = "COLLISION", L24[L24.ALL = 15] = "ALL", L24[L24.ALL_EXCEPT_COLLISION = 7] = "ALL_EXCEPT_COLLISION";
}(L11 || (L11 = {}));

// node_modules/@arcgis/core/views/3d/camera/constraintUtils/InteractionType.js
var O18;
!function(O32) {
  O32[O32.NONE = 0] = "NONE", O32[O32.ZOOM = 1] = "ZOOM", O32[O32.TUMBLE = 2] = "TUMBLE", O32[O32.LOOK_AROUND = 3] = "LOOK_AROUND", O32[O32.PAN = 4] = "PAN", O32[O32.ASCEND = 5] = "ASCEND";
}(O18 || (O18 = {}));

// node_modules/@arcgis/core/views/3d/camera/constraintUtils/TiltMode.js
var O19;
!function(O32) {
  O32[O32.TUMBLE = 0] = "TUMBLE", O32[O32.LOOK_AROUND = 1] = "LOOK_AROUND";
}(O19 || (O19 = {}));

// node_modules/@arcgis/core/views/3d/camera/constraintUtils/ConstraintOptions.js
var r35 = class {
  constructor(r55 = L11.ALL, n61 = O18.NONE, e68 = 0, s71 = null, a61 = null, c44 = O19.TUMBLE) {
    this.selection = r55, this.interactionType = n61, this.interactionFactor = e68, this.interactionStartCamera = s71, this.interactionDirection = a61, this.tiltMode = c44;
  }
};

// node_modules/@arcgis/core/views/3d/camera/constraintUtils/common.js
function o39(n61, a61) {
  return !!(n61 & a61);
}
function r36(n61, a61, m46, t71, i47, o58) {
  0 !== n61 && (m46 ? (o58.min = Math.min(o58.min, a61), o58.max = Math.max(o58.max, a61)) : null != t71 ? (o58.min -= Math.max(0, (a61 - o58.min) * (1 - t71)), o58.max += Math.max(0, (a61 - o58.max) * (1 - t71))) : i47 && (o58.min -= Math.max(0, a61 - o58.min - i47), o58.max += Math.max(0, a61 - o58.max - i47)));
}
var s46 = new r35(L11.NONE);
function x14(t71, i47, o58, r55) {
  return i47 = i47 || t71.viewForward, r5(r55, i47), g2(r55, r55, Math.sign(P3(i47, o58))), r55;
}

// node_modules/@arcgis/core/views/3d/camera/constraintUtils/altitude.js
function l22(t71, r55, n61 = s46) {
  const a61 = p26(t71, r55, n61);
  if (0 === a61)
    return false;
  const c44 = t71.renderCoordsHelper, m46 = c44.getAltitude(r55.eye) + a61, u46 = x14(r55, n61.interactionDirection, j10(t71, r55, Math.sign(a61), C11), g11), l45 = r5(M8, r55.viewForward), d44 = c44.intersectInfiniteManifold(p9(r55.eye, u46), m46, h19);
  return r55.eye = null != d44 ? d44 : c44.setAltitude(h19, m46, r55.eye), r55.center = j8(h19, r55.eye, l45, r55.center), true;
}
function p26(e68, r55, n61 = s46) {
  if (!d29(e68, n61) || !e68.state.constraints.altitude)
    return 0;
  const o58 = x15(e68.state.constraints.altitude, T9);
  y12(e68, n61, o58);
  const i47 = e68.renderCoordsHelper.getAltitude(r55.eye), a61 = e12(i47, o58.min, o58.max) - i47;
  return Math.abs(a61) <= 1e-6 ? 0 : a61;
}
function d29(t71, e68) {
  const r55 = t71.state.constraints.altitude;
  return !(!t71.state.isGlobal || !r55) && (e68.interactionType !== O18.TUMBLE || !o39(e68.selection, L11.TILT));
}
function y12(t71, e68, r55) {
  const n61 = e68.interactionType;
  if (n61 === O18.NONE)
    return;
  const { min: o58, max: i47 } = r55, { interactionStartCamera: s71, interactionFactor: a61 } = e68;
  if (!s71)
    return;
  const m46 = n61 === O18.TUMBLE || n61 === O18.ZOOM, f48 = p26(t71, s71), l45 = 0 === f48 ? 0 : t71.renderCoordsHelper.getAltitude(s71.eye);
  r55.min = o58, r55.max = i47;
  r36(f48, l45, m46, a61, 0.05 * l45, r55);
}
function j10(t71, e68, n61, o58) {
  return t71.renderCoordsHelper.worldUpAtPosition(e68.eye, o58), g2(o58, o58, n61), o58;
}
function x15(t71, e68) {
  return e68.min = t71.min, e68.max = t71.max, e68;
}
var T9 = { min: 0, max: 0 };
var g11 = n7();
var C11 = n7();
var M8 = n7();
var h19 = n7();

// node_modules/@arcgis/core/views/3d/camera/constraintUtils/distance.js
function d30(e68, r55, n61 = s46) {
  if (!e68.state.isLocal)
    return 0;
  const t71 = e68.state.constraints.distance;
  if (!e68.pointsOfInterest.surfaceOrigin.renderLocation || t71 === 1 / 0)
    return 0;
  x16.min = 0, x16.max = t71, l23(e68, n61, x16);
  const o58 = O20(e68, r55), i47 = x16.max - o58;
  return i47 >= -1e-6 ? 0 : i47;
}
function y13(t71, o58, i47 = s46) {
  const u46 = d30(t71, o58, i47);
  if (0 === u46)
    return false;
  const p48 = t71.pointsOfInterest.surfaceOrigin;
  if (!p48.renderLocation)
    return false;
  const y26 = O20(t71, o58) + u46, l45 = r5(L12, o58.eye), x31 = x14(o58, i47.interactionDirection, g12(o58, p48.renderLocation, h20), I16);
  if (!Y3(T2(p48.renderLocation, y26), p9(o58.eye, x31), k8))
    return false;
  o58.eye = k8;
  const C28 = e11(j11, o58.eye, l45);
  o58.center = u4(k8, o58.center, C28);
  const N20 = t71.renderCoordsHelper.getAltitude(o58.center), v32 = t71.renderCoordsHelper.intersectInfiniteManifold(o58.ray, N20, k8);
  return null != v32 && (o58.center = v32), true;
}
function l23(e68, r55, n61) {
  const t71 = r55.interactionType;
  if (t71 === O18.NONE)
    return;
  const { min: o58, max: i47 } = n61, { interactionStartCamera: c44, interactionFactor: s71 } = r55;
  if (!c44)
    return;
  const a61 = t71 === O18.ZOOM || t71 === O18.PAN, f48 = d30(e68, c44), m46 = 0 === f48 ? 0 : O20(e68, c44);
  n61.min = o58, n61.max = i47;
  r36(f48, m46, a61, s71, 0.05 * m46, n61);
}
function O20(e68, r55) {
  const n61 = e68.pointsOfInterest.surfaceOrigin;
  return n61.renderLocation ? x2(r55.eye, n61.renderLocation) : 0;
}
function g12(e68, r55, n61) {
  return J(n61, e68.eye, r55);
}
var x16 = { min: 0, max: 0 };
var L12 = n7();
var j11 = n7();
var I16 = n7();
var h20 = n7();
var k8 = n7();

// node_modules/@arcgis/core/views/3d/camera/constraintUtils/surfaceCollision.js
function s47(n61, s71, _26 = i29.EYE) {
  const a61 = n61.state.constraints;
  if (!a61.collision.enabled)
    return false;
  const f48 = f14(n61, s71.eye), N20 = n61.renderCoordsHelper.getAltitude(s71.eye), A32 = f48 + a61.collision.elevationMargin;
  if (N20 >= A32)
    return false;
  const C28 = s8(s71.eye);
  if (e11(c26, s71.center, s71.eye), s71.eye = n61.renderCoordsHelper.setAltitude(l24, A32, s71.eye), _26 === i29.EYE_AND_CENTER)
    s71.center = u4(c26, s71.eye, c26);
  else if (_26 === i29.EYE_AND_CENTER_SCALE) {
    const e68 = (C28 - N20 + A32) / C28;
    s71.center = g2(c26, s71.center, e68);
  }
  return true;
}
var i29;
!function(e68) {
  e68[e68.EYE = 0] = "EYE", e68[e68.EYE_AND_CENTER = 1] = "EYE_AND_CENTER", e68[e68.EYE_AND_CENTER_SCALE = 2] = "EYE_AND_CENTER_SCALE";
}(i29 || (i29 = {}));
var c26 = n7();
var l24 = n7();

// node_modules/@arcgis/core/views/3d/state/utils/viewUtils.js
function c27(i47, c44, f48) {
  i47.worldUpAtPosition(c44, m28), e11(e40, f48, c44);
  const n61 = s8(e40);
  return 0 === n61 ? 0 : m3(P3(e40, m28) / n61);
}
var m28 = n7();
var e40 = n7();

// node_modules/@arcgis/core/views/3d/camera/constraintUtils/tilt.js
function j12(t71, r55, n61, i47 = true) {
  V7.eyeCenterDistance = 0, V7.requiresTwoSteps = false;
  const a61 = U10(t71, r55, n61, s46, V7);
  if (0 === a61)
    return false;
  switch (p8(_15, -a61, r55.viewRight), n61.tiltMode) {
    case O19.LOOK_AROUND:
      O2(K6, r55.viewForward, _15), g2(K6, K6, V7.eyeCenterDistance), r55.center = u4(z13, r55.eye, K6);
      break;
    case O19.TUMBLE:
      e11(K6, r55.center, r55.eye), O2(K6, K6, _15), r55.eye = e11(z13, r55.center, K6);
      break;
    default:
      n10(n61.tiltMode);
  }
  return r55.up = O2(z13, r55.up, _15), !V7.requiresTwoSteps || !i47 || j12(t71, r55, n61, false);
}
function U10(e68, t71, r55, n61 = s46, i47) {
  if (!e68.state.constraints.tilt)
    return 0;
  const s71 = t71.distance, a61 = e68.state.constraints.tilt(s71, J4);
  return N10(e68, r55, a61), n61.interactionType === O18.TUMBLE && o39(n61.selection, L11.ALTITUDE) && B9(e68, n61.interactionStartCamera, a61), r55.tiltMode === O19.LOOK_AROUND || n61.tiltMode === O19.LOOK_AROUND ? L13(e68, t71, a61, i47) : P11(e68, t71, a61);
}
function P11(e68, r55, n61) {
  const i47 = c27(e68.renderCoordsHelper, r55.center, r55.eye), s71 = i47 - e12(i47, n61.min, n61.max);
  return v15(s71) ? s71 : 0;
}
function L13(e68, t71, r55, n61) {
  switch (n61 && (n61.requiresTwoSteps = false), e68.viewingMode) {
    case "global":
      return q9(e68, t71, r55, n61);
    case "local":
      return g13(e68, t71, r55, n61);
  }
}
function g13(e68, r55, n61, i47) {
  const s71 = c27(e68.renderCoordsHelper, r55.center, r55.eye), a61 = e12(s71, n61.min, n61.max), o58 = s71 - a61;
  if (!v15(o58))
    return 0;
  if (i47) {
    const t71 = e68.pointsOfInterest.centerOnSurfaceFrequent.estimatedSurfaceAltitude, n62 = e68.renderCoordsHelper.getAltitude(r55.eye) - t71, s72 = Math.cos(a61);
    Math.abs(s72) > 1e-4 ? i47.eyeCenterDistance = n62 / s72 : i47.eyeCenterDistance = r55.distance;
  }
  return o58;
}
function q9(e68, r55, n61, i47) {
  const s71 = b12(e68, r55, Q7), a61 = e12(s71.tiltAtCenter, n61.min, n61.max);
  if (!v15(s71.tiltAtCenter - a61))
    return 0;
  let o58, c44;
  return s71.centerIsOnSurface ? (o58 = H9(s71), c44 = k9(s71, o58)) : (o58 = s71.constraints.clampTilt(s71.eyeCenterDistance, s71.tiltAtCenter), i47 && o58 < Math.PI / 2 && (i47.requiresTwoSteps = true, o58 = Math.PI / 2 - 1e-5), c44 = F7(s71, o58)), i47 && (i47.eyeCenterDistance = E22(s71, o58)), c44;
}
function b12(e68, t71, n61) {
  const i47 = e68.pointsOfInterest.centerOnSurfaceFrequent.estimatedSurfaceAltitude, s71 = i47 + s6(e68.spatialReference).radius, a61 = e68.renderCoordsHelper.intersectManifold(t71.ray, i47, z13);
  return n61.eyeCenterDistance = t71.distance, n61.centerIsOnSurface = false, null != a61 ? (n61.eyeCenterDistance = x2(t71.eye, a61), n61.tiltAtCenter = c27(e68.renderCoordsHelper, a61, t71.eye), n61.centerIsOnSurface = true) : e68.state.isLocal ? n61.tiltAtCenter = c27(e68.renderCoordsHelper, t71.center, t71.eye) : (K3(N(ct, s71), t71.ray, z13), n61.eyeCenterDistance = x2(t71.eye, z13), n61.tiltAtCenter = m3(-P3(t71.viewForward, z2(z13, z13)))), n61.radius = s71, n61.eyeRadius = s8(t71.eye), n61.constraints = e68.state.constraints, n61;
}
function v15(e68) {
  return Math.abs(e68) > 1e-9;
}
function H9(e68) {
  const { constraints: t71, eyeCenterDistance: r55, tiltAtCenter: n61 } = e68;
  let i47 = n61, s71 = t71.clampTilt(r55, n61);
  const a61 = E22(e68, s71);
  if (t71.clampTilt(a61, n61) === s71)
    return s71;
  let o58 = 0;
  for (; o58 < 10 && v15(s71 - i47); ) {
    const r56 = (i47 + s71) / 2, n62 = E22(e68, r56);
    v15(t71.clampTilt(n62, r56) - r56) ? i47 = r56 : s71 = r56, o58++;
  }
  return s71;
}
function E22(e68, r55) {
  if (!e68.centerIsOnSurface)
    return e68.eyeCenterDistance;
  const i47 = Math.PI - e12(r55, 0, Math.PI), s71 = l6(e68.radius / e68.eyeRadius * Math.sin(i47)), a61 = Math.PI - i47 - s71, o58 = Math.sin(a61) / Math.sin(i47);
  if (e68.eyeRadius < e68.radius && o58 > 1) {
    const t71 = Math.PI - s71, r56 = Math.PI - i47 - t71;
    return Math.sin(r56) / Math.sin(i47) * e68.eyeRadius;
  }
  return o58 * e68.eyeRadius;
}
function k9(e68, t71) {
  const r55 = l6(e68.radius / e68.eyeRadius * Math.sin(e68.tiltAtCenter)), i47 = l6(e68.radius / e68.eyeRadius * Math.sin(t71));
  return e68.eyeRadius > e68.radius ? r55 - i47 : i47 - r55;
}
function F7(e68, t71) {
  return e68.tiltAtCenter - Math.PI / 2 - (t71 - Math.PI / 2);
}
function N10(e68, t71, r55) {
  if (t71.interactionType === O18.NONE)
    return;
  const { interactionStartCamera: n61, interactionFactor: i47 } = t71;
  if (!n61)
    return;
  const { min: s71, max: a61 } = r55, o58 = U10(e68, n61, s46, t71), c44 = 0 === o58 ? 0 : c27(e68.renderCoordsHelper, n61.center, n61.eye);
  r55.min = s71, r55.max = a61, t71.interactionType === O18.TUMBLE ? (o39(t71.selection, L11.ALTITUDE) && B9(e68, n61, r55), r36(o58, c44, true, i47, G9, r55)) : r36(o58, c44, false, i47, G9, r55);
}
function B9(e68, t71, n61) {
  const i47 = e68.state.constraints;
  if (e68.state.isLocal || !i47.altitude || !t71)
    return;
  const s71 = v4(t71.center), a61 = Math.sqrt(s71), o58 = t71.distance, c44 = s6(e68.spatialReference).radius, u46 = i47.altitude.min + c44, l45 = i47.altitude.max + c44, m46 = (u46 * u46 - o58 * o58 - s71) / (-2 * a61 * o58), f48 = (l45 * l45 - o58 * o58 - s71) / (-2 * a61 * o58);
  n61.min = Math.max(n61.min, Math.min(Math.PI - m3(f48), n61.max)), n61.max = Math.min(n61.max, Math.PI - m3(m46));
}
var K6 = n7();
var _15 = e15();
var z13 = n7();
var G9 = h3(5);
var J4 = { min: 0, max: 0 };
var Q7 = { constraints: null, radius: 0, eyeRadius: 0, centerIsOnSurface: true, eyeCenterDistance: 0, tiltAtCenter: 0 };
var V7 = { eyeCenterDistance: 0, requiresTwoSteps: false };

// node_modules/@arcgis/core/views/animation/easing.js
var t47 = (t71) => t71;
var u28 = (t71) => t71 * t71;
var o40 = (t71) => 1 - u28(1 - t71);
var i30 = (t71) => t71 < 0.5 ? u28(2 * t71) / 2 : (o40(2 * (t71 - 0.5)) + 1) / 2;
var n38 = (t71) => t71 * t71 * t71;
var c28 = (t71) => 1 - n38(1 - t71);
var a34 = (t71) => t71 < 0.5 ? n38(2 * t71) / 2 : (c28(2 * (t71 - 0.5)) + 1) / 2;
var s48 = (t71) => t71 * t71 * t71 * t71;
var q10 = (t71) => 1 - s48(1 - t71);
var r37 = (t71) => t71 < 0.5 ? s48(2 * t71) / 2 : (q10(2 * (t71 - 0.5)) + 1) / 2;
var e41 = (t71) => t71 * t71 * t71 * t71 * t71;
var b13 = (t71) => 1 - e41(1 - t71);
var d31 = (t71) => t71 < 0.5 ? e41(2 * t71) / 2 : (b13(2 * (t71 - 0.5)) + 1) / 2;
var h21 = (t71) => 1 - Math.cos(t71 * Math.PI / 2);
var p27 = (t71) => 1 - h21(1 - t71);
var x17 = (t71) => t71 < 0.5 ? h21(2 * t71) / 2 : (p27(2 * (t71 - 0.5)) + 1) / 2;
var M9 = (t71) => 2 ** (10 * (t71 - 1));
var f27 = (t71) => 1 - M9(1 - t71);
var l25 = (t71) => t71 < 0.5 ? M9(2 * t71) / 2 : (f27(2 * (t71 - 0.5)) + 1) / 2;
var I17 = (t71) => -(Math.sqrt(1 - t71 * t71) - 1);
var P12 = (t71) => 1 - I17(1 - t71);
var g14 = (t71) => t71 < 0.5 ? I17(2 * t71) / 2 : (P12(2 * (t71 - 0.5)) + 1) / 2;
function j13(t71) {
  const u46 = 2 * (t71 - Math.sqrt((t71 - 1) * t71)), o58 = u46 / 2 / t71;
  return (i47) => i47 < o58 ? t71 * i47 * i47 : u46 * i47 - u46 + 1;
}
function k10(t71, u46) {
  return (o58, i47) => o58 < u46 ? u46 * t71(o58 / u46, i47) : 1 - t71((1 - o58) / (1 - u46), i47) * (1 - u46);
}
var m29 = k10(j13(1), 1);
var v16 = k10(j13(1), 0);
var w15 = k10(j13(1), 0.5);
var y14 = k10(j13(2), 1);
var z14 = k10(j13(2), 0);
var A19 = k10(j13(2), 0.5);
var B10 = k10(j13(3), 1);
var C12 = k10(j13(3), 0);
var D7 = k10(j13(3), 0.5);
var E23 = k10(j13(4), 1);
var F8 = k10(j13(4), 0);
var G10 = k10(j13(4), 0.5);
var H10 = { linear: t47, "in-quad": u28, "out-quad": o40, "in-out-quad": i30, "in-coast-quad": m29, "out-coast-quad": v16, "in-out-coast-quad": w15, "in-cubic": n38, "out-cubic": c28, "in-out-cubic": a34, "in-coast-cubic": y14, "out-coast-cubic": z14, "in-out-coast-cubic": A19, "in-quart": s48, "out-quart": q10, "in-out-quart": r37, "in-coast-quart": B10, "out-coast-quart": C12, "in-out-coast-quart": D7, "in-quint": e41, "out-quint": b13, "in-out-quint": d31, "in-coast-quint": E23, "out-coast-quint": F8, "in-out-coast-quint": G10, "in-sine": h21, "out-sine": p27, "in-out-sine": x17, "in-expo": M9, "out-expo": f27, "in-out-expo": l25, "in-circ": I17, "out-circ": P12, "in-out-circ": g14 };

// node_modules/@arcgis/core/views/3d/camera/constraintUtils.js
function E24(t71, o58, n61 = C13, s71 = o58) {
  s71 !== o58 && s71.copyFrom(o58), s71.computeUp(t71.state.viewingMode);
  let e68 = false;
  for (let i47 = 0; i47 < N11; i47++) {
    let o59 = 0;
    for (const i48 of U11)
      if (o39(n61.selection, i48.type)) {
        const r55 = Math.abs(i48.error(t71, s71, n61));
        i48.apply(t71, s71, n61) && (e68 = true, o59 += r55);
      }
    if (0 === o59)
      break;
  }
  const a61 = o39(n61.selection, L11.COLLISION), p48 = u29(n61.interactionType, t71);
  return a61 && s47(t71, s71, p48) && (e68 = true), e68 && s71.computeUp(t71.state.viewingMode), e68;
}
function u29(t71, o58) {
  switch (t71) {
    case O18.PAN:
      return i29.EYE_AND_CENTER;
    case O18.ASCEND:
      return o58.state.isGlobal ? i29.EYE_AND_CENTER_SCALE : i29.EYE_AND_CENTER;
    default:
      return i29.EYE;
  }
}
function y15(t71) {
  const o58 = Math.min(1, t71 / 150);
  return a34(o58);
}
function T10(t71, o58, r55) {
  return U10(t71, o58, r55) * o58.distance;
}
var U11 = [{ type: L11.TILT, error: T10, apply: j12 }, { type: L11.ALTITUDE, error: p26, apply: l22 }, { type: L11.DISTANCE, error: d30, apply: y13 }];
var C13 = new r35();
var N11 = 5;

// node_modules/@arcgis/core/views/3d/animation/pointToPoint/Camera.js
var _16 = class {
  constructor(t71) {
    this.viewingMode = t71, this.center = n7(), this.pitch = 0, this.yaw = 0, this.distance = 0, this.direction = t5(F9), this.fov = 55, this.size = 1;
  }
  pixelsPerPanAtZoom(t71) {
    return this.size / 2 / (this._zoomToPanScale * t71);
  }
  zoomAtPixelsPerPan(t71) {
    return this.size / 2 / (this._zoomToPanScale * t71);
  }
  pixelsPerRotateAtZoom() {
    const t71 = Math.max(Math.cos(Math.abs(this.pitch)), 0.5);
    return this.size / 2 / t71;
  }
  compareTo(t71, i47) {
    if (i47 || (i47 = { pan: 0, rotate: 0, sourceZoom: 0, targetZoom: 0 }), this.viewingMode === l8.Global) {
      const e69 = (s8(this.center) + s8(t71.center)) / 2;
      i47.pan = k2(this.center, t71.center) * e69;
    } else
      i47.pan = x2(this.center, t71.center);
    let e68 = Math.abs(t71.yaw - this.yaw);
    e68 >= Math.PI && (e68 = 2 * Math.PI - e68);
    const a61 = Math.abs(t71.pitch - this.pitch);
    return i47.rotate = Math.max(e68, a61), i47.sourceZoom = this.distance, i47.targetZoom = t71.distance, i47;
  }
  interpolate(i47, e68, s71) {
    this.viewingMode === l8.Global ? j4(i47.center, e68.center, s71.pan, this.center) : A4(this.center, i47.center, e68.center, s71.pan), this.distance = isFinite(e68.distance) ? f4(i47.distance, e68.distance, s71.zoom) : i47.distance, this.pitch = f4(i47.pitch, e68.pitch, s71.rotate);
    let o58 = i47.yaw;
    const h36 = e68.yaw;
    Math.abs(h36 - o58) >= Math.PI && (o58 += 2 * (o58 < h36 ? 1 : -1) * Math.PI), this.yaw = f4(o58, h36, s71.rotate);
  }
  copyFrom(t71) {
    r5(this.center, t71.center), this.pitch = t71.pitch, this.yaw = t71.yaw, this.distance = t71.distance, r5(this.direction, t71.direction), this.size = t71.size, this.copyFromCommon(t71), this.viewingMode = t71.viewingMode;
  }
  copyFromRenderCamera(t71) {
    const i47 = this._lookAtOrientation(t71.center, Z4);
    r5(this.center, t71.center), e11(j14, t71.center, t71.eye), S4(j14, j14, i47), S4(k11, t71.up, i47), this.distance = s8(j14), 0 !== this.distance && (j14[0] /= this.distance, j14[1] /= this.distance, j14[2] /= this.distance), this.pitch = this._eyeUpToPitch(j14), this.yaw = x18(j14, k11), this.size = Math.sqrt(t71.width * t71.width + t71.height * t71.height), this.copyFromCommon(t71);
  }
  copyFromCommon(t71) {
    this.fov = t71.fov, this._zoomToPanScale = Math.atan(0.5 * this.fov);
  }
  copyToRenderCamera(t71) {
    const e68 = this._lookAtOrientation(this.center, Z4);
    u8(e68, e68), this._axisAngleVec3(V8, this.pitch - Math.PI / 2, F9, j14), this._axisAngleVec3(T11, this.yaw, j14, j14), this._axisAngleVec3(V8, this.pitch - Math.PI / 2, T11, k11), this._axisAngleVec3(T11, this.yaw, k11, k11), g2(j14, j14, this.distance), S4(j14, j14, e68), S4(k11, k11, e68), t71.center = this.center, t71.eye = e11(j14, this.center, j14), t71.up = k11;
  }
  _axisAngleVec3(t71, i47, e68, s71) {
    const o58 = Math.cos(i47), a61 = Math.sin(i47);
    return g2(v17, e68, o58), _(z15, t71, e68), g2(z15, z15, a61), g2(b14, t71, (1 - o58) * P3(t71, e68)), u4(s71, u4(s71, v17, z15), b14);
  }
  _lookAtOrientation(t71, i47 = e16()) {
    return this._upAtLookAt(t71, b14), _(v17, this.direction, b14), z2(v17, v17), 0 === v17[0] && 0 === v17[1] && 0 === v17[2] && r5(v17, V8), _(z15, b14, v17), z2(z15, z15), i47[0] = v17[0], i47[1] = z15[0], i47[2] = b14[0], i47[3] = v17[1], i47[4] = z15[1], i47[5] = b14[1], i47[6] = v17[2], i47[7] = z15[2], i47[8] = b14[2], i47;
  }
  _upAtLookAt(t71, i47) {
    return this.viewingMode === l8.Local ? r5(i47, T11) : z2(i47, t71);
  }
  _eyeUpToPitch(t71) {
    return Math.PI - k2(T11, t71);
  }
};
function x18(t71, i47) {
  const e68 = I18;
  return Math.abs(i47[2]) < 0.5 ? (r5(e68, i47), t71[2] > 0 && g2(e68, e68, -1)) : r5(e68, t71), _(z15, e68, T11), z2(z15, z15), k2(V8, z15, T11);
}
var v17 = n7();
var z15 = n7();
var b14 = n7();
var j14 = n7();
var k11 = n7();
var I18 = n7();
var T11 = y3;
var F9 = m2;
var V8 = s7;
var Z4 = e16();

// node_modules/@arcgis/core/views/animation/pointToPoint/Settings.js
var o41 = { desiredScreenFlow: 2, minDuration: n3(500), maxDuration: n3(8e3) };

// node_modules/@arcgis/core/views/animation/pointToPoint/Definition.js
var t48 = class _t2 {
  constructor(t71) {
    this._createCamera = t71, this.compared = { sourceZoom: 0, targetZoom: 0, pan: 0, rotate: 0 }, this.settings = { desiredScreenFlow: o41.desiredScreenFlow }, this.source = t71(), this.target = t71();
  }
  clone() {
    const e68 = new _t2(this._createCamera);
    return e68.copyFrom(this), e68;
  }
  copyFrom(e68) {
    this.update(e68.source, e68.target, e68.settings);
  }
  update(t71, r55, s71) {
    this.source !== t71 && this.source.copyFrom(t71), this.target !== r55 && this.target.copyFrom(r55), this.compared = this.source.compareTo(this.target, this.compared), this.settings.desiredScreenFlow = null != s71.desiredScreenFlow ? s71.desiredScreenFlow : o41.desiredScreenFlow, this.desiredPixelFlow = this.settings.desiredScreenFlow * this.target.size, this.halfWindowSize = this.target.size / 2;
  }
  halfWindowPanAtZoom(e68) {
    const t71 = this.target.pixelsPerPanAtZoom(e68);
    return this.halfWindowSize / t71;
  }
  get hasZoom() {
    return Math.abs(this.compared.sourceZoom - this.compared.targetZoom) > 1e-5;
  }
  get hasPan() {
    return this.compared.pan > 1e-9;
  }
  get hasRotate() {
    return this.compared.rotate > 1e-9;
  }
};

// node_modules/@arcgis/core/views/animation/pointToPoint/Path.js
var e42 = class {
  constructor() {
    this.segments = [];
  }
  get time() {
    return this.segments.reduce((e68, o58) => t4(e68 + o58.time), t4(0));
  }
  interpolateComponentsAt(t71, e68) {
    t71 = Math.min(Math.max(t71, 0), 1), t71 *= this.time;
    let o58 = 0, s71 = 0;
    const n61 = this.definition;
    for (let a61 = 0; a61 < this.segments.length; a61++) {
      const m46 = this.segments[a61], i47 = m46.definition;
      if (t71 <= m46.time || a61 === this.segments.length - 1) {
        if (e68 = this.segmentInterpolateComponentsAt(m46, 0 === m46.time ? 0 : t71 / m46.time, e68), n61.hasPan && !isNaN(e68.pan) && isFinite(n61.compared.pan) ? e68.pan = (o58 + i47.compared.pan * e68.pan) / n61.compared.pan : e68.pan = 1, n61.hasRotate && !isNaN(e68.rotate) && isFinite(n61.compared.rotate) ? e68.rotate = (s71 + i47.compared.rotate * e68.rotate) / n61.compared.rotate : e68.rotate = 1, n61.hasZoom && !isNaN(e68.zoom) && isFinite(i47.compared.targetZoom)) {
          const t72 = e68.zoom * (i47.compared.targetZoom - i47.compared.sourceZoom) + i47.compared.sourceZoom, o59 = this.segments[0].definition.compared.sourceZoom, s72 = this.segments[this.segments.length - 1].definition.compared.targetZoom;
          e68.zoom = (t72 - o59) / (s72 - o59);
        } else
          e68.zoom = 1;
        return e68;
      }
      t71 -= m46.time, o58 += i47.compared.pan, s71 += i47.compared.rotate;
    }
  }
  segmentInterpolateComponentsAt(t71, e68, o58) {
    return t71.interpolateComponentsAt(e68, o58);
  }
};

// node_modules/@arcgis/core/views/animation/pointToPoint/Segment.js
var i31 = class {
  get time() {
    return this._time;
  }
  constructor(t71) {
    t71 && this.update(t71);
  }
  update(t71) {
    t71 && (this.definition ? this.definition.copyFrom(t71) : this.definition = t71.clone()), this._updatePrecomputedVariables(), this._updatePixelFlow();
  }
  _updatePrecomputedVariables() {
    const t71 = this.definition, i47 = t71.compared, o58 = i47.sourceZoom, e68 = i47.targetZoom;
    this._zoomSign = o58 > e68 ? 1 : -1, this._panPixelsAtSource = i47.pan * t71.source.pixelsPerPanAtZoom(o58);
    const n61 = (t71.source.pixelsPerRotateAtZoom(o58) + t71.target.pixelsPerRotateAtZoom(e68)) / 2;
    this._rotatePixels = i47.rotate * n61;
  }
  _updatePixelFlow() {
    const i47 = this.definition.compared.sourceZoom, o58 = this.definition.compared.targetZoom, { hasZoom: e68, hasPan: n61, hasRotate: s71 } = this.definition;
    let a61 = 0, h36 = 0;
    e68 && (n61 && (a61 = (o58 / i47 - 1) / (-1 / (this._zoomSign * this.definition.halfWindowSize) * Math.LN2 * this._panPixelsAtSource)), s71 && (h36 = this._zoomSign * (Math.log(i47 / o58) / Math.LN2) * this.definition.halfWindowSize / this._rotatePixels)), this._zoomPixelFlow = 0, this._panPixelFlow = 0, this._rotatePixelFlow = 0;
    const l45 = this.definition.desiredPixelFlow;
    if (e68 && n61 && s71) {
      const t71 = a61 + h36 + a61 * h36;
      this._zoomPixelFlow = a61 * h36 / t71 * l45, this._panPixelFlow = h36 / t71 * l45, this._rotatePixelFlow = a61 / t71 * l45;
    } else if (e68 && n61) {
      const t71 = 1 + a61;
      this._zoomPixelFlow = a61 / t71 * l45, this._panPixelFlow = 1 / t71 * l45;
    } else if (e68 && s71) {
      const t71 = 1 + h36;
      this._zoomPixelFlow = h36 / t71 * l45, this._rotatePixelFlow = 1 / t71 * l45;
    } else if (n61 && s71) {
      const t71 = this._panPixelsAtSource / this._rotatePixels, i48 = 1 + t71;
      this._panPixelFlow = t71 / i48 * l45, this._rotatePixelFlow = 1 / i48 * l45;
    } else
      n61 ? this._panPixelFlow = l45 : e68 ? this._zoomPixelFlow = l45 : s71 && (this._rotatePixelFlow = l45);
    this._time = s71 ? this.rotateTime : e68 ? this.zoomTime : n61 ? this.panTime : t4(0);
  }
  get rotateTime() {
    return this.definition.hasRotate ? t4(this._rotatePixels / this._rotatePixelFlow) : t4(0);
  }
  get zoomTime() {
    return this.definition.hasZoom ? t4(this._zoomSign * (Math.log(this.definition.compared.sourceZoom / this.definition.compared.targetZoom) / Math.LN2) * this.definition.halfWindowSize / this._zoomPixelFlow) : t4(0);
  }
  get panTime() {
    if (this.definition.hasPan) {
      if (this.definition.hasZoom) {
        const i47 = -1 / (this._zoomSign * this.definition.halfWindowSize) * Math.LN2, o58 = i47 * this._panPixelsAtSource;
        return t4(Math.log(o58 * (this._zoomPixelFlow / this._panPixelFlow) + 1) / (i47 * this._zoomPixelFlow));
      }
      return t4(this._panPixelsAtSource / this._panPixelFlow);
    }
    return t4(0);
  }
  _interpolateComponentsZoom(t71) {
    if (0 === t71 || 1 === t71)
      return t71;
    if (this.definition.hasZoom) {
      const i47 = this.definition.compared.sourceZoom, o58 = this.definition.compared.targetZoom;
      return (i47 * (i47 / o58) ** -t71 - i47) / (o58 - i47);
    }
    return t71;
  }
  _interpolateComponentsPan(t71) {
    if (0 === t71 || 1 === t71)
      return t71;
    if (this.definition.hasPan && this.definition.hasZoom) {
      const i47 = -1 / (this._zoomSign * this.definition.halfWindowSize) * this._zoomPixelFlow;
      return 1 / this._panPixelsAtSource * (this._panPixelFlow * (2 ** (i47 * t71 * this._time) - 1)) / (i47 * Math.LN2);
    }
    return t71;
  }
  _interpolateComponentsRotate(t71) {
    return t71;
  }
  interpolateComponentsAt(t71, i47) {
    t71 = Math.min(Math.max(t71, 0), 1);
    const o58 = this._interpolateComponentsZoom(t71), e68 = this._interpolateComponentsPan(t71), n61 = this._interpolateComponentsRotate(t71);
    return i47 ? (i47.zoom = o58, i47.pan = e68, i47.rotate = n61) : i47 = { zoom: o58, pan: e68, rotate: n61 }, i47;
  }
};

// node_modules/@arcgis/core/views/animation/pointToPoint/apex/functions.js
function o42(o58, a61, e68) {
  const n61 = a61 - o58.compared.sourceZoom, t71 = o58.halfWindowPanAtZoom(n61);
  return -o58.halfWindowSize * (e68.ascensionFactor * Math.LN2 * o58.compared.pan + t71) * Math.log(o58.compared.sourceZoom / a61) / (o58.desiredPixelFlow * Math.LN2 * t71);
}
function a35(o58, a61, e68) {
  const n61 = 1 / a61, t71 = Math.log(o58.compared.sourceZoom * n61), i47 = 1 / o58.desiredPixelFlow, r55 = 1 / Math.LN2, d44 = a61 - o58.compared.sourceZoom, c44 = 1 / d44, l45 = (e68.ascensionFactor * Math.LN2 * o58.compared.pan + o58.halfWindowPanAtZoom(d44)) / o58.halfWindowPanAtZoom(1);
  return o58.halfWindowSize * n61 * i47 * r55 * c44 * l45 - o58.halfWindowSize * t71 * i47 * r55 * c44 + o58.halfWindowSize * t71 * i47 * r55 * l45 / (d44 * d44);
}
function e43(o58, a61, e68) {
  const n61 = a61 - o58.compared.sourceZoom, t71 = 1 / n61, i47 = 1 / a61, r55 = Math.log(o58.compared.sourceZoom * i47), d44 = (e68.ascensionFactor * Math.LN2 * o58.compared.pan + o58.halfWindowPanAtZoom(n61)) / o58.halfWindowPanAtZoom(1);
  return o58.halfWindowSize * t71 * (-2 * t71 * i47 * d44 + 2 * t71 * r55 + 2 * i47 - 2 * r55 * d44 / (n61 * n61) - d44 / (a61 * a61)) / (o58.desiredPixelFlow * Math.LN2);
}
function n39(o58, a61) {
  return -o58.halfWindowSize * Math.log(o58.compared.sourceZoom / a61) / (o58.desiredPixelFlow * Math.LN2);
}
function t49(o58, a61) {
  return o58.halfWindowSize / (a61 * o58.desiredPixelFlow * Math.LN2);
}
function i32(o58, a61) {
  return -o58.halfWindowSize / (a61 * a61 * o58.desiredPixelFlow * Math.LN2);
}
function r38(o58, a61, e68) {
  return -o58.compared.pan * o58.halfWindowSize * (e68.ascensionFactor + e68.descensionFactor - 1) / (o58.desiredPixelFlow * o58.halfWindowPanAtZoom(a61));
}
function d32(o58, a61, e68) {
  return o58.compared.pan * o58.halfWindowSize * (e68.ascensionFactor + e68.descensionFactor - 1) / (o58.desiredPixelFlow * o58.halfWindowPanAtZoom(a61 * a61));
}
function c29(o58, a61, e68) {
  return -2 * o58.compared.pan * o58.halfWindowSize * (e68.ascensionFactor + e68.descensionFactor - 1) / (o58.desiredPixelFlow * o58.halfWindowPanAtZoom(a61 * a61 * a61));
}
function l26(o58, a61, e68) {
  return o58.halfWindowSize * (-o58.halfWindowPanAtZoom(a61) - e68.descensionFactor * Math.LN2 * o58.compared.pan + o58.halfWindowPanAtZoom(o58.compared.targetZoom)) * Math.log(a61 / o58.compared.targetZoom) / (o58.desiredPixelFlow * Math.LN2 * o58.halfWindowPanAtZoom(-a61 + o58.compared.targetZoom));
}
function m30(o58, a61, e68) {
  const n61 = Math.log(a61 / o58.compared.targetZoom), t71 = 1 / o58.desiredPixelFlow, i47 = 1 / Math.LN2, r55 = -a61 + o58.compared.targetZoom, d44 = 1 / r55, c44 = (-o58.halfWindowPanAtZoom(a61) - e68.descensionFactor * Math.LN2 * o58.compared.pan + o58.halfWindowPanAtZoom(o58.compared.targetZoom)) / o58.halfWindowPanAtZoom(1);
  return -o58.halfWindowSize * n61 * t71 * i47 * d44 + o58.halfWindowSize * n61 * t71 * i47 * c44 / (r55 * r55) + o58.halfWindowSize * t71 * i47 * d44 * c44 / a61;
}
function h22(o58, a61, e68) {
  const n61 = a61 - o58.compared.targetZoom, t71 = 1 / n61, i47 = 1 / a61, r55 = Math.log(a61 / o58.compared.targetZoom), d44 = (o58.halfWindowPanAtZoom(a61) + e68.descensionFactor * Math.LN2 * o58.compared.pan - o58.halfWindowPanAtZoom(o58.compared.targetZoom)) / o58.halfWindowPanAtZoom(1);
  return o58.halfWindowSize * t71 * (-2 * t71 * i47 * d44 - 2 * t71 * r55 + 2 * i47 + 2 * r55 * d44 / (n61 * n61) - d44 / (a61 * a61)) / (o58.desiredPixelFlow * Math.LN2);
}
function s49(o58, a61) {
  return o58.halfWindowSize * Math.log(a61 / o58.compared.targetZoom) / (o58.desiredPixelFlow * Math.LN2);
}
function f28(o58, a61) {
  return o58.halfWindowSize / (a61 * o58.desiredPixelFlow * Math.LN2);
}
function w16(o58, a61) {
  return -o58.halfWindowSize / (a61 * a61 * o58.desiredPixelFlow * Math.LN2);
}
function p28(o58) {
  const a61 = Math.LN2 * o58.compared.pan, e68 = o58.compared.sourceZoom - o58.compared.targetZoom, n61 = o58.halfWindowPanAtZoom(e68), t71 = o58.halfWindowSize * Math.log(o58.compared.sourceZoom / o58.compared.targetZoom) / (o58.desiredPixelFlow * Math.LN2 * n61);
  return o58.compared.sourceZoom <= o58.compared.targetZoom ? t71 * (a61 - n61) : t71 * (a61 + n61);
}

// node_modules/@arcgis/core/views/animation/pointToPoint/apex/planning.js
function f29(f48, Z11) {
  let P20 = D8(f48, Z11);
  const b22 = { ascensionFactor: null != Z11.ascensionFactor ? Z11.ascensionFactor : 0.5, descensionFactor: null != Z11.descensionFactor ? Z11.descensionFactor : 0.5 }, g23 = 0 === b22.ascensionFactor, h36 = 0 === b22.descensionFactor, M21 = g23 ? n39 : o42, k26 = g23 ? t49 : a35, N20 = g23 ? i32 : e43, j26 = h36 ? s49 : l26, w27 = h36 ? f28 : m30, z24 = h36 ? w16 : h22, A32 = (o58) => M21(f48, o58, b22) + r38(f48, o58, b22) + j26(f48, o58, b22), I27 = (o58) => k26(f48, o58, b22) + d32(f48, o58, b22) + w27(f48, o58, b22), q21 = (o58) => N20(f48, o58, b22) + c29(f48, o58, b22) + z24(f48, o58, b22);
  let v32 = A32(P20);
  const y26 = p28(f48);
  let B18;
  const C28 = Z11.maximumIterations || 20, E38 = null != Z11.maximumDistance ? Z11.maximumDistance : 1 / 0;
  for (B18 = 0; B18 < C28; B18++) {
    const o58 = 1e-6, e68 = (I27(P20) + o58) / q21(P20);
    if (isNaN(e68) || P20 >= E38 && e68 < 0) {
      if (!isFinite(E38))
        return null;
      P20 = E38, v32 = A32(P20);
      break;
    }
    if (P20 -= e68, P20 < f48.compared.sourceZoom || P20 < f48.compared.targetZoom)
      return null;
    const n61 = A32(P20);
    if (Math.abs(n61 - v32) / v32 <= 5e-3)
      break;
    v32 = n61;
  }
  return v32 > y26 * (1 - 0.3) || P20 < f48.compared.sourceZoom || P20 < f48.compared.targetZoom ? null : P20;
}
function D8(o58, e68) {
  const n61 = Math.max(o58.compared.sourceZoom, o58.compared.targetZoom), a61 = o58.source.zoomAtPixelsPerPan(o58.desiredPixelFlow / o58.compared.pan) / 2;
  return a61 < n61 ? null != e68.maximumDistance ? n61 + (e68.maximumDistance - n61) / 2 : 1.5 * n61 : e68.maximumDistance ? Math.min(e68.maximumDistance, a61) : a61;
}

// node_modules/@arcgis/core/views/animation/pointToPoint/apex/Path.js
var s50 = class extends e42 {
  constructor(i47, e68) {
    super(), this._preallocSegments = [new i31(), new i31(), new i31()], this._ascensionSegment = null, this._descensionSegment = null, this.update(i47, e68);
  }
  update(i47, e68) {
    if (!i47)
      return;
    this.definition ? this.definition.copyFrom(i47) : this.definition = i47.clone();
    let n61 = null;
    (e68 == null ? void 0 : e68.apex) && (n61 = f29(i47, e68.apex)), this.segments.length = 0, this._ascensionSegment = null, this._descensionSegment = null, null == n61 ? this._updateWithoutApex() : this._updateWithApex(n61, e68 == null ? void 0 : e68.apex);
  }
  segmentInterpolateComponentsAt(n61, t71, o58) {
    return o58 = n61.interpolateComponentsAt(t71, o58), n61 === this._ascensionSegment ? o58.zoom = o40(o58.zoom) : n61 === this._descensionSegment && (o58.zoom = u28(o58.zoom)), o58;
  }
  _updateWithApex(i47, e68) {
    const [n61, t71, o58] = this._preallocSegments, s71 = (e68 == null ? void 0 : e68.ascensionFactor) ?? 0.5, d44 = Math.min(1 - s71, null != (e68 == null ? void 0 : e68.ascensionFactor) && null != e68.descensionFactor ? e68.descensionFactor : 0.5), a61 = 1 - s71 - d44;
    n61.definition ? n61.definition.copyFrom(this.definition) : n61.definition = this.definition.clone(), n61.definition.compared.targetZoom = i47, n61.definition.compared.pan = this.definition.compared.pan * s71, n61.definition.compared.rotate = this.definition.compared.rotate * s71, n61.update(), this._ascensionSegment = n61, this.segments.push(n61), a61 > 0 && (t71.definition ? t71.definition.copyFrom(this.definition) : t71.definition = this.definition.clone(), t71.definition.copyFrom(this.definition), t71.definition.compared.sourceZoom = i47, t71.definition.compared.targetZoom = i47, t71.definition.compared.pan = this.definition.compared.pan * a61, t71.definition.compared.rotate = this.definition.compared.rotate * a61, t71.update(), this.segments.push(t71)), o58.definition ? o58.definition.copyFrom(this.definition) : o58.definition = this.definition.clone(), o58.definition.compared.sourceZoom = i47, o58.definition.compared.pan = this.definition.compared.pan * d44, o58.definition.compared.rotate = this.definition.compared.rotate * d44, o58.update(), this._descensionSegment = o58, this.segments.push(o58);
  }
  _updateWithoutApex() {
    const [i47] = this._preallocSegments;
    i47.update(this.definition), this.segments.push(i47);
  }
};

// node_modules/@arcgis/core/views/animation/pointToPoint/Animation.js
var m31 = { zoom: 0, pan: 0, rotate: 0 };
var h23 = class {
  get time() {
    return this._time;
  }
  constructor(i47) {
    this._createCamera = i47, this._time = n3(0), this.definition = new t48(i47), this.path = new s50();
  }
  update(t71, s71, o58) {
    this.definition.update(t71, s71, o58), this.path.update(this.definition, o58), this._time = this._applyTimeSettings(r3(isFinite(this.path.time) ? this.path.time : t4(0)), o58), this._easing = o58.easing ?? (this._time >= 1e3 ? w15 : f27);
  }
  cameraAt(t71, i47) {
    i47 = i47 || this._createCamera(), t71 = Math.min(Math.max(0, t71), 1), t71 = this._normalizedEasing(t71);
    const e68 = this.path.interpolateComponentsAt(t71, m31);
    return i47.interpolate(this.definition.source, this.definition.target, e68), i47;
  }
  _normalizedEasing(t71) {
    const i47 = this._easing(0, this._time), e68 = this._easing(1, this._time);
    return (this._easing(t71, this._time) - i47) / (e68 - i47);
  }
  _applyTimeSettings(i47, e68) {
    const n61 = null != e68.speedFactor ? e68.speedFactor : 1;
    null != e68.duration ? i47 = e68.duration : null != e68.speedFactor && (i47 = n3(i47 / n61));
    const a61 = null != e68.minDuration ? e68.minDuration : o41.minDuration / n61, s71 = null != e68.maxDuration ? e68.maxDuration : o41.maxDuration / n61;
    return n3(Math.min(Math.max(a61, i47), s71));
  }
};

// node_modules/@arcgis/core/views/3d/animation/pointToPoint/Animation.js
var c30 = class {
  get finished() {
    return this.currentTime >= this._animation.time;
  }
  get time() {
    return this._animation.time;
  }
  constructor(i47) {
    this.currentTime = n3(0), this._animation = new h23(() => new _16(i47)), this._current = new _16(i47);
  }
  update(i47, m46, s71) {
    const { source: a61, target: o58 } = this._animation.definition, c44 = e11(h24, m46.center, i47.center), u46 = s8(c44);
    u46 >= 1e-5 ? (c44[0] /= u46, c44[1] /= u46, c44[2] /= u46) : (c44[0] = 0, c44[1] = 1, c44[0] = 0), r5(a61.direction, c44), r5(o58.direction, c44), a61.copyFromRenderCamera(i47), o58.copyFromRenderCamera(m46), this._current.copyFrom(a61), this._animation.update(a61, o58, s71), this.currentTime = n3(0), i47.almostEquals(m46) && (this.currentTime = this._animation.time);
  }
  cameraAt(t71, i47) {
    return this._animation.cameraAt(t71, this._current), i47 = i47 || new it(), this._current.copyToRenderCamera(i47), i47;
  }
  step(e68, r55) {
    return this.finished || (this.currentTime = n3(this.currentTime + r3(e68)), this.currentTime >= this.time && (this.currentTime = this.time)), this.cameraAt(this.currentTime / this.time, r55);
  }
};
var h24 = n7();

// node_modules/@arcgis/core/views/3d/state/controllers/CameraController.js
var s51;
!function(t71) {
  t71[t71.Ready = 0] = "Ready", t71[t71.Rejected = 1] = "Rejected", t71[t71.Running = 2] = "Running", t71[t71.Stopped = 3] = "Stopped", t71[t71.Finished = 4] = "Finished";
}(s51 || (s51 = {}));
var n40 = class extends S3 {
  constructor(t71) {
    super(t71), this.state = s51.Ready;
  }
  get active() {
    return this.state === s51.Running;
  }
  get isInteractive() {
    return false;
  }
  get canStop() {
    return false;
  }
  stopController() {
    return !!this.canStop && (this.state = s51.Stopped, true);
  }
  finishController() {
    this.state = s51.Finished;
  }
  get steppingFinished() {
    return false;
  }
};
e([y2({ constructOnly: true })], n40.prototype, "view", void 0), e([y2({ readOnly: true })], n40.prototype, "active", null), e([y2()], n40.prototype, "state", void 0), e([y2({ readOnly: true })], n40.prototype, "isInteractive", null), n40 = e([a4("esri.views.3d.state.controllers.CameraController")], n40);

// node_modules/@arcgis/core/views/3d/state/controllers/AnimationController.js
var a36 = class extends n40 {
  constructor() {
    super(...arguments), this._asyncResult = null;
  }
  get canStop() {
    return true;
  }
  set asyncResult(t71) {
    this._asyncResult && (this._asyncResult.reject(u2()), this._asyncResult = null), this.state === s51.Finished || this.state === s51.Stopped ? (n2(t71), this.state === s51.Finished ? t71.resolve() : t71.reject(u2())) : this._asyncResult = t71;
  }
  get asyncResult() {
    return this._asyncResult;
  }
  onControllerStart() {
    this.state = s51.Running, null != this.viewAnimation && this.viewAnimation.when(() => this.updateStateFromViewAnimation(), () => this.updateStateFromViewAnimation());
  }
  updateStateFromViewAnimation() {
    null == this.viewAnimation || this.state !== s51.Ready && this.state !== s51.Running || (this.viewAnimation.state === a19.State.FINISHED ? this.finish() : this.viewAnimation.state === a19.State.STOPPED && (this.state = s51.Stopped));
  }
  onControllerEnd() {
    null == this.viewAnimation || this.viewAnimation.done || (this.state === s51.Finished ? this.viewAnimation.finish() : this.state === s51.Stopped && this.viewAnimation.stop()), this._asyncResult && (this.state === s51.Finished ? this._asyncResult.resolve() : this._asyncResult.reject(u2()));
  }
  finish() {
    this.finishController();
  }
};
a36 = e([a4("esri.views.3d.state.controllers.AnimationController")], a36);

// node_modules/@arcgis/core/views/3d/state/controllers/PointToPointAnimationController.js
var h25 = class extends a36 {
  get intersectionHelper() {
    return this.view.sceneIntersectionHelper;
  }
  constructor(i47) {
    super(i47), this.mode = "interaction", this._hasTarget = false;
  }
  initialize() {
    this.animation = new c30(this.view.state.viewingMode), this.viewAnimation = "interaction" === this.mode ? null : new a19();
  }
  get isInteractive() {
    return "interaction" === this.mode;
  }
  begin(i47, t71) {
    this._hasTarget = true;
    const e68 = this.animationSettings(t71);
    p29.copyFrom(this.view.state.camera);
    const n61 = T5(this.view.state.viewingMode);
    this.intersectionHelper.intersectRay(p29.ray, n61, l27) && (p29.center = l27), this.animation.update(p29, i47, e68), this.animation.finished && this.finish();
  }
  finish() {
    this.animation.currentTime = this.animation.time, super.finish();
  }
  get steppingFinished() {
    return this._hasTarget && this.animation.finished;
  }
  stepController(i47, t71) {
    this._hasTarget && this.animation.step(i47, t71);
  }
  onControllerEnd(i47) {
    this._hasTarget && (this.animation.cameraAt(this.animation.currentTime / this.animation.time, i47), this.animation.currentTime = this.animation.time), super.onControllerEnd(i47);
  }
  animationSettings(i47 = {}) {
    return { apex: { maximumDistance: this.view.state.constraints.clampAltitude(1 / 0) / 6, ascensionFactor: void 0, descensionFactor: void 0 }, ...i47, easing: "string" == typeof i47.easing ? H10[i47.easing] : i47.easing };
  }
};
e([y2({ constructOnly: true })], h25.prototype, "mode", void 0), e([y2({ readOnly: true })], h25.prototype, "isInteractive", null), h25 = e([a4("esri.views.3d.state.controllers.PointToPointAnimationController")], h25);
var p29 = new it();
var l27 = n7();

// node_modules/@arcgis/core/geometry/support/axisAngle.js
function s52(t71 = k12) {
  return [t71[0], t71[1], t71[2], t71[3]];
}
function m32(t71, r55) {
  return g15(t71[0], t71[1], t71[2], r55, r8.get());
}
function g15(t71, r55, n61, o58, u46 = s52()) {
  return u46[0] = t71, u46[1] = r55, u46[2] = n61, u46[3] = o58, u46;
}
function l28(t71, r55, n61) {
  return _(v19(n61), t71, r55), z2(v19(n61), v19(n61)), n61[3] = f9(t71, r55), n61;
}
function v19(t71) {
  return t71;
}
var k12 = [0, 0, 1, 0];
var q11 = e17();
var S12 = e17();

// node_modules/@arcgis/core/views/3d/support/geometryUtils/sphere.js
function s53(r55, s71, p48, e68) {
  const n61 = p17(s71, p48, m33);
  return Y3(r55, n61, e68);
}
var m33 = d7();

// node_modules/@arcgis/core/views/3d/state/utils/navigationUtils.js
var N12;
!function(t71) {
  t71[t71.Ellipsoid = 0] = "Ellipsoid", t71[t71.Silhouette = 1] = "Silhouette";
}(N12 || (N12 = {}));
var Q8 = 30;
var X7 = [1, 3e8];
var Y8 = 80;
var Z5 = 8;
var $4 = 200;
var _17 = 1508e5;
var tt = 5;
var et = 50;
var nt = 5;
var ot = 10;
var rt = 90;
var at = { exclude: /* @__PURE__ */ new Set([w9]) };
function it2(t71, e68, n61) {
  return n61[0] = e68[0] / (t71.fullWidth / t71.pixelRatio), n61[1] = e68[1] / (t71.fullHeight / t71.pixelRatio), n61;
}
function st(t71) {
  for (; t71 > Math.PI; )
    t71 -= 2 * Math.PI;
  for (; t71 < -Math.PI; )
    t71 += 2 * Math.PI;
  return t71;
}
function ct2(t71, e68, n61) {
  const o58 = p8(f8.get(), n61[3], v19(n61));
  null == o58 || B2(o58, o8) || (e11(oe, t71.eye, e68), O2(oe, oe, o58), t71.eye = u4(oe, oe, e68), e11(oe, t71.center, e68), O2(oe, oe, o58), t71.center = u4(oe, oe, e68), t71.up = O2(oe, t71.up, o58));
}
function lt3(t71, e68, n61, o58) {
  return S5(t71, g8(e68, n61, ce2), o58);
}
function mt(t71, e68, n61, o58) {
  return S5(t71, p17(e68, n61, ce2), o58);
}
function ut(t71, e68, n61, o58) {
  const r55 = c6.get();
  let a61 = 1 - n61;
  e11(r55, e68, t71.eye);
  const i47 = s8(r55);
  let s71 = i47 * (1 - a61);
  a61 >= 0 && s71 < o58 && (s71 = o58, a61 = -(s71 - i47) / i47), Math.abs(i47 - s71) < 1e-6 || (g2(r55, r55, a61), t71.eye = u4(oe, t71.eye, r55), t71.center = A4(oe, t71.center, e68, a61));
}
function ft(t71, e68, n61) {
  e68.getScreenCenter(pt), s53(t71, e68, pt, oe) && (e68.center = oe);
  const o58 = e68.distance, r55 = o58 * n61;
  if (Math.abs(o58 - r55) < 1e-6)
    return;
  const a61 = g2(c6.get(), e68.viewForward, r55);
  e68.eye = e11(oe, e68.center, a61);
}
var pt = i4();
function ht2(t71, e68) {
  o4(e68, 0, 0, 0);
  for (const n61 of t71)
    u4(e68, e68, n61);
  g2(e68, e68, 1 / t71.length);
}
function Mt(t71, e68, n61, o58) {
  return Math.sin(t71 / s8(e68)) * (n61 + o58.radius);
}
function gt(t71, e68, n61, o58) {
  return Mt(Math.PI / 2, e68, n61, o58) + (t71 - Math.PI / 2);
}
var yt;
!function(t71) {
  t71[t71.Vertical = 0] = "Vertical", t71[t71.Horizontal = 1] = "Horizontal";
}(yt || (yt = {}));
var bt = { Elevation: 3e4, Angle: h3(16) };
var dt2 = { Pole: 0.95, Angle: h3(18), Tilt: 45 };
var xt = h3(80);
function vt(t71, e68, n61, o58, r55, a61) {
  const i47 = n7(), s71 = w6();
  let c44 = true, l45 = true;
  return t71.intersectScreen(n61, i47, a61) ? s71[3] = s8(i47) : (l45 = false, e68.aboveGround && r55 !== N12.Ellipsoid ? s71[3] = Math.max(s8(e68.center), 0.9 * o58.radius) : s71[3] = s8(e68.eye) - e68.relativeElevation, r55 === N12.Silhouette ? wt(s71, e68, n61, i47) : c44 = s53(s71, e68, n61, i47)), { sphere: s71, scenePickPoint: c44 ? i47 : null, hasGeometryIntersection: l45 };
}
function jt(t71, e68, n61, o58) {
  const r55 = t71.relativeElevation;
  if (r55 > bt.Elevation && "global" === o58)
    return yt.Horizontal;
  p17(t71, e68, le);
  const a61 = Math.sign(r55), i47 = n61.worldUpAtPosition(t71.eye, oe);
  return -a61 * P3(i47, le.direction) < Math.sin(bt.Angle) * s8(le.direction) ? yt.Vertical : yt.Horizontal;
}
function zt(t71, e68, n61) {
  e11(Pt2, n61, e68), t71.eye = e11(oe, t71.eye, Pt2), t71.center = e11(oe, t71.center, Pt2);
}
var Pt2 = n7();
function wt(t71, e68, n61, o58) {
  const r55 = p17(e68, n61, ce2);
  return null != r55 && (K3(t71, r55, It), Y3(t71, r55, o58) ? !(p3(It, r55.origin) < p3(o58, r55.origin)) || (r5(o58, It), false) : (e11(St, e68.eye, e68.center), z2(St, St), _5(St, -P3(z2(St, St), It), kt), S5(kt, r55, o58), false));
}
var It = n7();
var St = n7();
var kt = E6();
function At(a61, i47, s71, c44, l45, m46) {
  let u46 = 0;
  if (_(ie, a61, i47), e11(re, a61, i47), s8(a61) <= l45 || !c44.aboveGround) {
    _(s71, re, c44.eye);
    const f48 = P3(a61, i47) / (s8(a61) * s8(i47));
    if (f48 < 0.9999)
      u46 = m3(f48);
    else {
      const t71 = s8(_(n7(), a61, i47)) / (s8(a61) * s8(i47));
      u46 = l6(t71);
    }
    const p48 = Math.cos(e12(s19.normalize(h3(m46)), 0, xt));
    u46 = -u46 - Math.max(0, s8(i47) - l45) / (p48 * l45);
  } else
    e11(Et, c44.eye, c44.center), _(s71, re, Et), u46 = -s8(re) / l45;
  return z2(s71, s71), g2(s71, s71, s8(ie)), u46;
}
var Et = n7();
function Ut(r55, a61, i47, s71) {
  let c44, l45;
  const m46 = Math.cos(e12(s19.normalize(h3(s71)), 0, xt));
  return c44 = a61 > i47 ? -(a61 - i47) / (m46 * i47) : a61 < -i47 ? Math.PI - (a61 + i47) / (m46 * i47) : m3(a61 / i47), l45 = r55 > i47 ? -(r55 - i47) / (m46 * i47) : r55 < -i47 ? Math.PI - (r55 + i47) / (m46 * i47) : m3(r55 / i47), (l45 - c44) * i47;
}
function Ht(t71, e68, n61, o58, r55, a61, i47, s71, c44, l45) {
  const m46 = Ut(t71[2], e68[2], a61[3], s71), u46 = c44 ? Ut(t71[0], e68[0], a61[3], 180) : e68[0] - t71[0], p48 = Math.sin(i47) * u46 - Math.cos(i47) * m46, h36 = Math.cos(i47) * u46 + Math.sin(i47) * m46;
  z2(oe, r55);
  const M21 = c44 ? p48 / Math.sqrt(Math.abs(a61[3] ** 2 - P3(n61, oe) ** 2)) : p48 / a61[3], g23 = h36 / Math.sqrt(Math.abs(a61[3] ** 2 - P3(n61, o58) ** 2));
  o13(l45, M21, g23);
}
function Gt(t71, e68, n61, o58, r55, a61, i47, s71, c44, l45) {
  _(ie, t71, e68), w11(a61.up, a61.eye, Lt, Nt, Qt), w11([0, 0, 1], a61.eye, Dt, Jt, Kt), r5(n61, Jt), r5(o58, Dt), z2(n61, n61), g2(n61, n61, s8(ie)), q4(t71, z2(Nt, Nt), z2(Qt, Qt), z2(Lt, Lt), Xt), q4(e68, Nt, Qt, Lt, Yt), Ht(Xt, Yt, t71, Dt, Jt, i47, s71, c44, l45, r55);
}
function Rt(t71, e68, n61, o58, r55, a61, s71) {
  p8(_t, r55, o58), p8(te, s71, a61), c4(ee, _t, te), e11(e68, t71, n61), O2(e68, e68, ee), u4(e68, e68, n61);
}
function qt(t71, e68, n61, o58, r55, a61) {
  p8(_t, o58, n61), p8(te, a61, r55), c4(ee, _t, te), e11(oe, t71.eye, e68), O2(oe, oe, ee), t71.eye = u4(oe, oe, e68), e11(oe, t71.center, e68), O2(oe, oe, ee), t71.center = u4(oe, oe, e68), e11(oe, t71.up, e68), O2(oe, oe, ee), t71.up = u4(oe, oe, e68);
}
function Ct(t71, e68, n61, o58, r55, a61) {
  return (Math.abs(o58) > Math.PI - dt2.Angle || Math.abs(o58) < dt2.Angle) && (Math.abs(t71[2]) < n61 * dt2.Pole || Math.abs(e68) > n61) && a61.aboveGround && r55 < dt2.Tilt;
}
function Ft(t71, e68, n61, o58, r55, a61) {
  if (a61)
    l28(n61, o58, $t), ct2(e68, Z(t71), $t);
  else {
    const a62 = At(n61, o58, se2, e68, t71[3], r55);
    ct2(e68, Z(t71), m32(se2, a62));
  }
}
function Vt(t71, e68, n61, o58, r55, a61, i47) {
  const s71 = i47 ? 20 : 1, c44 = 1e-12;
  let l45, m46;
  r5(ne2, o58), ae.copyFrom(e68);
  for (let u46 = 0; u46 < s71 && p3(n61, ne2) > c44 && (l45 = p3(n61, ne2), Gt(n61, ne2, Jt, Dt, Zt, ae, t71, r55, a61, i47), qt(ae, Z(t71), Dt, Zt[1], Jt, Zt[0]), Rt(ne2, ne2, Z(t71), Dt, Zt[1], Jt, Zt[0]), m46 = p3(n61, ne2), m46 < l45 || 0 === u46); u46++)
    e68.copyFrom(ae);
}
function Tt(n61, o58, r55, a61, i47, s71, c44) {
  Ct(r55, P3(o58.up, r55), n61[3], -s19.normalize(h3(i47)), s71, o58) ? Vt(n61, o58, r55, a61, -s19.normalize(h3(i47)), s71, c44) : Ft(n61, o58, r55, a61, s71, c44);
}
function Ot(t71, e68, n61, o58, r55, a61) {
  const { eye: i47 } = t71;
  w11([0, 0, 1], i47, Dt, Jt, Kt);
  const s71 = e68.translation[0] * n61.pan, c44 = "zoom" === r55.mode ? 0 : e68.translation[1] * n61.pan, m46 = Math.max(Math.sqrt(Math.abs(1 - P3(t71.center, Dt) ** 2 / s8(t71.center) ** 2)), 0.5), u46 = (Math.sin(a61) * c44 + Math.cos(a61) * s71) / m46, f48 = -Math.cos(a61) * c44 + Math.sin(a61) * s71;
  switch (b2(o58.pan.matrix, o58.pan.matrix, u46, Dt), o58.pan.enabled = true, r55.mode) {
    case "pan":
      b2(o58.pan.matrix, o58.pan.matrix, f48, Jt), o58.pan.enabled = true;
      break;
    case "zoom":
      o58.zoom = -e68.translation[1] * n61.zoom;
  }
}
function Wt(t71, e68, n61, o58, r55) {
  const { eye: a61, viewRight: i47 } = t71, s71 = _(c6.get(), i47, a61), c44 = e68.translation[0] * n61.pan;
  switch (0 !== c44 && (b2(o58.pan.matrix, o58.pan.matrix, -c44, s71), o58.pan.enabled = true), r55.mode) {
    case "pan": {
      const t72 = e68.translation[1] * n61.pan;
      0 !== t72 && (b2(o58.pan.matrix, o58.pan.matrix, t72, i47), o58.pan.enabled = true);
      break;
    }
    case "zoom":
      o58.zoom = -e68.translation[1] * n61.zoom;
  }
}
function Bt(n61, o58, r55, a61, i47, s71, c44, l45, m46) {
  Ct(n61.center, P3(n61.up, n61.center), s8(n61.center), -s19.normalize(h3(s71)), c44, o58) ? Ot(o58, r55, a61, l45, m46, -s19.normalize(h3(i47))) : Wt(o58, r55, a61, l45, m46);
}
var Dt = n7();
var Jt = n7();
var Kt = n7();
var Lt = n7();
var Nt = n7();
var Qt = n7();
var Xt = n7();
var Yt = n7();
var Zt = n13();
var $t = s52();
var _t = e15();
var te = e15();
var ee = e15();
var ne2 = n7();
var oe = n7();
var re = n7();
var ae = new it();
var ie = n7();
var se2 = n7();
var ce2 = { origin: n7(), direction: n7() };
var le = { origin: n7(), direction: n7() };

// node_modules/@arcgis/core/views/3d/state/controllers/ZoomStepControllerGlobal.js
var V9 = 0.6;
var H11 = 4;
var k13 = 60;
var x20 = class extends h25 {
  constructor() {
    super(...arguments), this._zoomLocation = n7(), this._tmpCamera = new it(), this._tmpViewDir = n7(), this._tmpRayDir = { origin: n7(), direction: n7() }, this._targetOnSphere = n7(), this._tmpCenter = n7(), this._beginCamera = new it(), this._constraintOptions = new r35(L11.ALL_EXCEPT_COLLISION, O18.ZOOM, null, this._beginCamera), this._sphere = w6();
  }
  initialize() {
    this._intersector = T5(this.view.state.viewingMode);
  }
  zoomStep(t71, i47) {
    if (!this.active)
      return;
    const e68 = this.view.state;
    this.animation.finished ? this._beginCamera.copyFrom(e68.camera) : this.animation.cameraAt(1, this._beginCamera);
    let r55 = false, o58 = false;
    this.intersectionHelper.intersectScreen(i47, this._zoomLocation, 0 === this.view.map.ground.opacity ? at : {}) && (r55 = t71 > 0, o58 = true), this._tmpCamera.copyFrom(e68.camera), r55 ? this.intersectionHelper.intersectRay(this._tmpCamera.ray, this._intersector, this._tmpCenter) && (this._tmpCamera.center = this._tmpCenter) : this.intersectionHelper.intersectRay(this._tmpCamera.ray, this._intersector, this._zoomLocation) ? this._tmpCamera.center = this._zoomLocation : r5(this._zoomLocation, this._tmpCamera.center), this._updateCamera(this._tmpCamera, t71, this._zoomLocation, i47, o58), this.begin(this._tmpCamera);
  }
  animationSettings() {
    return { duration: n3(600), easing: f27 };
  }
  _updateCamera(t71, e68, r55, s71, _26) {
    const l45 = jt(t71, s71, this.view.renderCoordsHelper, this.view.viewingMode), f48 = Math.abs(this.view.camera.position.z);
    z2(F10, t71.eye), g2(F10, F10, -1), p17(t71, s71, this._tmpRayDir), z2(this._tmpRayDir.direction, this._tmpRayDir.direction);
    const g23 = e12(Math.min(Z5, 1 / Math.abs(P3(F10, this._tmpRayDir.direction))) * f48, $4, _17);
    if (l45 === yt.Horizontal) {
      let i47 = V9 ** e68;
      this._sphere[3] = s8(r55), e11(this._tmpViewDir, t71.center, t71.eye);
      const o58 = Math.min(s8(this._tmpViewDir), g23);
      let n61 = o58 * i47;
      if (i47 <= 1 && n61 < H11 && (n61 = H11, i47 = n61 / o58), Math.abs(o58 - n61) < 1e-6)
        return;
      const _27 = s8(t71.center);
      if (this._sphere[3] !== _27) {
        const e69 = this._sphere[3] + i47 * (_27 - this._sphere[3]);
        t71.center = g2(A20, t71.center, e69 / _27);
      }
      g2(this._tmpViewDir, this._tmpViewDir, -i47), t71.eye = u4(A20, t71.center, this._tmpViewDir), E24(this.view, t71, this._constraintOptions), p3(r55, t71.center) > 1e-12 && s53(this._sphere, t71, s71, this._targetOnSphere) && Tt(this._sphere, t71, r55, this._targetOnSphere, this.view.camera.heading, this.view.camera.tilt, true);
    } else {
      let i47 = V9 ** Math.abs(e68);
      const o58 = e68 > 0 ? 1 : -1;
      e11(this._tmpViewDir, r55, t71.eye);
      const n61 = s8(this._tmpViewDir), p48 = this.view._stage.renderView.getMinimalDepthForArea(null, s71[0], s71[1], this.view.state.camera, k13);
      let l46 = null != p48 ? p48 : g23;
      l46 = _26 && e68 > 0 ? Math.min(l46, n61) : l46, g2(this._tmpRayDir.direction, this._tmpRayDir.direction, l46), u4(r55, this._tmpRayDir.origin, this._tmpRayDir.direction);
      let y26 = l46 * i47;
      const f49 = Math.max(H11, 1.01 * t71.nearFar[0]);
      if (e68 > 0 && y26 < f49 && (y26 = f49, i47 = y26 / l46), Math.abs(l46 - y26) < 1e-6)
        return;
      g2(this._tmpRayDir.direction, this._tmpRayDir.direction, o58 * (1 - i47)), t71.eye = u4(A20, t71.eye, this._tmpRayDir.direction), t71.center = u4(A20, t71.center, this._tmpRayDir.direction);
    }
    s47(this.view, t71);
  }
};
x20 = e([a4("esri.views.3d.state.controllers.ZoomStepControllerGlobal")], x20);
var A20 = n7();
var F10 = n7();

// node_modules/@arcgis/core/views/3d/state/controllers/ZoomStepControllerLocal.js
var M10 = 0.6;
var D9 = 4;
var F11 = 60;
var U12 = class extends h25 {
  constructor() {
    super(...arguments), this._zoomLocation = n7(), this._tmpCamera = new it(), this._tmpRayDir = n7(), this._tmpCenter = n7(), this._beginCamera = new it(), this._constraintOptions = new r35(L11.ALL, O18.ZOOM, null, this._beginCamera);
  }
  zoomStep(t71, e68) {
    if (!this.active)
      return;
    const s71 = this.view.state;
    this.animation.finished ? this._beginCamera.copyFrom(s71.camera) : this.animation.cameraAt(1, this._beginCamera), this._tmpCamera.copyFrom(s71.camera);
    const p48 = T5(this.view.state.viewingMode);
    let l45 = false;
    t71 > 0 ? (l45 = this.intersectionHelper.intersectScreenFreePointFallback(e68, this._zoomLocation, 0 === this.view.map.ground.opacity ? at : {}), this.intersectionHelper.intersectRay(this._tmpCamera.ray, p48, this._tmpCenter) && (this._tmpCamera.center = this._tmpCenter)) : this.intersectionHelper.intersectRay(this._tmpCamera.ray, p48, this._zoomLocation) ? this._tmpCamera.center = this._zoomLocation : r5(this._zoomLocation, this._tmpCamera.center);
    const C28 = M10 ** t71;
    let f48 = this.view._stage.renderView.getMinimalDepthForArea(o33(this.view), e68[0], e68[1], this.view.state.camera, F11);
    e11(S13, this._tmpCamera.eye, this._zoomLocation), z2(S13, S13);
    const y26 = e12(Math.min(Z5, 1 / Math.abs(P3(O21, S13))) * Math.abs(this.view.camera.position.z), $4, _17);
    if (f48 = null != f48 ? f48 : y26, f48) {
      const t72 = n7();
      e11(t72, this._zoomLocation, this._tmpCamera.eye), (f48 < s8(t72) || !l45) && (z2(t72, t72), u4(this._zoomLocation, this._tmpCamera.eye, g2(t72, t72, f48)));
    }
    this._updateCamera(this._tmpCamera, C28, this._zoomLocation), this.begin(this._tmpCamera);
  }
  animationSettings() {
    return { duration: n3(600), easing: f27 };
  }
  _updateCamera(t71, i47, e68) {
    e11(this._tmpRayDir, e68, t71.eye);
    const s71 = s8(this._tmpRayDir);
    let o58 = s71 * i47;
    const a61 = i47 <= 1, m46 = Math.max(D9, 1.01 * t71.nearFar[0]);
    0 !== o58 && (a61 && o58 < m46 && (o58 = m46, i47 = o58 / s71), Math.abs(s71 - o58) < 1e-6 || (g2(this._tmpRayDir, this._tmpRayDir, i47), t71.eye = e11(x21, e68, this._tmpRayDir), t71.center = A4(x21, t71.center, e68, 1 - i47), E24(this.view, t71, this._constraintOptions)));
  }
};
U12 = e([a4("esri.views.3d.state.controllers.ZoomStepControllerLocal")], U12);
var x21 = n7();
var O21 = r4(0, 0, 1);
var S13 = n7();

// node_modules/@arcgis/core/views/3d/input/handlers/DoubleClickZoom.js
var s54 = class extends i12 {
  constructor(o58, t71) {
    super(true), this._view = o58, this.registerIncoming("double-click", t71, (o59) => this._handleDoubleClick(o59));
  }
  _handleDoubleClick(i47) {
    const s71 = i47.data;
    if (t29(s71, "primary")) {
      const r55 = this._view.state.isGlobal ? new x20({ view: this._view, mode: "animation" }) : new U12({ view: this._view, mode: "animation" });
      this._view.state.switchCameraController(r55), r55.zoomStep(Math.log(0.5) / Math.log(0.6), i4(s71.x, s71.y)), i47.stopPropagation();
    }
  }
};

// node_modules/@arcgis/core/views/3d/state/NearFarHeuristic.js
function c31(e68, t71, i47) {
  return e68 === l8.Global ? new M11(i47) : new u30(t71, i47);
}
var u30 = class {
  constructor(e68, t71) {
    this._elevationProvider = e68, this._referenceEllipsoid = s6(t71), this._unitInMeters = W(t71, this._referenceEllipsoid.metersPerDegree);
  }
  compute(i47, a61, m46, o58, l45) {
    var _a;
    l45 || (l45 = { near: 0, far: 0 });
    let x31 = i47[2] * this._unitInMeters;
    const c44 = x31, u46 = x31 - o58, M21 = (_a = this._elevationProvider) == null ? void 0 : _a.visibleElevationBounds;
    M21 && (x31 = u46 >= 0 ? c44 - this._unitInMeters * M21.min : this._unitInMeters * M21.max - c44);
    const _26 = { x: (m46 = null != m46 ? m46 : new w2({ xmin: 0, ymin: 0, zmin: 0, xmax: 0, ymax: 0, zmax: 0 })).xmax - m46.xmin, y: m46.ymax - m46.ymin, z: 4 * Math.max(m46.xmax - m46.xmin, m46.ymax - m46.ymin) }, I27 = Math.max(_26.x, _26.y, _26.z);
    e11(E25, a61, i47), v20[0] = E25[0] > 0 ? m46.xmax : m46.xmin, v20[1] = E25[1] > 0 ? m46.ymax : m46.ymin, v20[2] = E25[2] > 0 ? I27 / 2 : -I27 / 2, e11(v20, v20, i47), z2(E25, E25);
    const j26 = 1.1 * P3(v20, E25) * this._unitInMeters, g23 = Math.sqrt(x31 * (x31 + 2 * this._referenceEllipsoid.radius)), b22 = Math.max(m46.xmax - m46.xmin, m46.ymax - m46.ymin), w27 = b22 * d33 * this._unitInMeters, z24 = b22 * y16 * this._unitInMeters, U23 = e12((x31 - z24) / (w27 - z24), 0, 1) ** 3, P20 = Math.min(f4(g23, j26, U23), g23) * Math.max(Math.log(Math.abs(u46)), 1);
    return f30(Math.min(P20, Math.max(34064e4, I27)) / this._unitInMeters, p30, this._unitInMeters, l45);
  }
};
var M11 = class {
  constructor(e68) {
    this._referenceEllipsoid = s6(e68);
  }
  compute(i47, r55, s71, n61, m46) {
    m46 || (m46 = { near: 0, far: 0 });
    const o58 = s8(i47), h36 = o58 - this._referenceEllipsoid.radius, l45 = this._referenceEllipsoid.radius + Math.min(0, n61), c44 = Math.abs(h36 - n61), u46 = Math.max(c44, Math.abs(h36)), M21 = Math.sqrt(u46 * (u46 + 2 * l45)), p48 = o58 + this._referenceEllipsoid.radius;
    return f30(1.2 * f4(M21, p48, e35(u46)), e12(2e4 - (Math.log(u46) - 7.983) / 9.011 * 19e3, 1e3, 2e4), 1, m46);
  }
};
function f30(e68, t71, i47, r55) {
  const s71 = _18 / i47;
  return e68 / t71 > s71 ? (r55.far = e68, r55.near = r55.far / t71) : (r55.near = s71, r55.far = r55.near * t71), r55;
}
var p30 = 2e4;
var _18 = 2;
var d33 = 1e-3;
var y16 = 1e-4;
var v20 = n7();
var E25 = n7();

// node_modules/@arcgis/core/views/3d/state/SurfaceCollisionConstraint.js
var n41 = class extends S3 {
  constructor(e68) {
    super(e68);
  }
  initialize() {
    this.addHandles(this.view.basemapTerrain.on("elevation-change", (e68) => this._handleElevationChangeEvent(e68)));
  }
  _handleElevationChangeEvent(e68) {
    if (this.view.state.cameraController)
      return;
    const t71 = this.view.state.camera;
    null != e68.spatialReference && u12(this.view, t71, e68.extent, e68.spatialReference) && this._applyToCurrentCamera();
  }
  _applyToCurrentCamera() {
    this.view.state.updateCamera((e68) => s47(this.view, e68, i29.EYE_AND_CENTER));
  }
};
e([y2({ constructOnly: true })], n41.prototype, "view", void 0), n41 = e([a4("esri.views.3d.state.SurfaceCollisionConstraint")], n41);

// node_modules/@arcgis/core/views/3d/state/ConstraintsManager.js
var _19 = class extends S3 {
  constructor(t71) {
    super(t71), this.nearFarHeuristic = c31(t71.view.state.viewingMode, t71.view.basemapTerrain, t71.view.renderCoordsHelper.spatialReference);
  }
  initialize() {
    this.addHandles([d3(() => {
      var _a, _b, _c, _d;
      return [(_b = (_a = this.view.constraints) == null ? void 0 : _a.clipDistance) == null ? void 0 : _b.near, (_d = (_c = this.view.constraints) == null ? void 0 : _c.clipDistance) == null ? void 0 : _d.far];
    }, () => this._clipDistanceNearFarChanged()), d3(() => {
      var _a, _b;
      return (_b = (_a = this.view.constraints) == null ? void 0 : _a.clipDistance) == null ? void 0 : _b.mode;
    }, () => this._updateNearFar()), this.view.state.events.on("before-camera-change", (t71) => this._updateCameraNearFar(t71)), d3(() => this.view.renderDataExtent, () => this._updateNearFar(), C), d3(() => {
      var _a, _b, _c, _d;
      return [(_b = (_a = this.view.constraints) == null ? void 0 : _a.altitude) == null ? void 0 : _b.min, (_d = (_c = this.view.constraints) == null ? void 0 : _c.altitude) == null ? void 0 : _d.max];
    }, () => this._updateAltitude(), C), d3(() => {
      var _a, _b;
      return (_b = (_a = this.view.constraints) == null ? void 0 : _a.tilt) == null ? void 0 : _b.max;
    }, () => this._updateTiltMax(), C), d3(() => {
      var _a, _b;
      return (_b = (_a = this.view.constraints) == null ? void 0 : _a.tilt) == null ? void 0 : _b.mode;
    }, () => this._updateTilt(), C), d3(() => {
      var _a;
      return (_a = this.view.state) == null ? void 0 : _a.camera;
    }, () => this._updateTiltAutoMax(), C), d3(() => {
      var _a, _b, _c, _d, _e5, _f;
      return [(_c = (_b = (_a = this.view.map) == null ? void 0 : _a.ground) == null ? void 0 : _b.navigationConstraint) == null ? void 0 : _c.type, (_f = (_e5 = (_d = this.view.state) == null ? void 0 : _d.constraints) == null ? void 0 : _e5.collision) == null ? void 0 : _f.enabled];
    }, () => this._updateCollision(), C)]), this.view.state.isLocal && this.addHandles(d3(() => this.view.renderDataExtent, (t71) => this._updateLocalSurfaceDistance(t71), P)), this._updateNearFar(), this.view.state.viewingMode !== l8.Local && this._updateAltitude(), this._updateTilt(), this._updateCollision(), this._set("surfaceCollisionConstraint", new n41({ view: this.view }));
  }
  destroy() {
    this.surfaceCollisionConstraint && (this.surfaceCollisionConstraint.destroy(), this._set("surfaceCollisionConstraint", null));
  }
  _clipDistanceNearFarChanged() {
    var _a;
    const t71 = (_a = this.view.constraints) == null ? void 0 : _a.clipDistance;
    t71 && "auto" !== t71.mode && this.view.state.updateCamera((i47) => C14(i47, t71));
  }
  _updateNearFar() {
    this.view.state.updateCamera((t71) => this._updateCameraNearFar(t71));
  }
  _updateCameraNearFar(t71) {
    const i47 = this.view.constraints && this.view.constraints.clipDistance;
    "manual" === (i47 ? i47.mode : "auto") ? C14(t71, i47) : this._updateCameraNearFarAuto(t71, i47);
  }
  _updateCameraNearFarAuto(t71, i47) {
    this.nearFarHeuristic.compute(t71.eye, t71.center, this.view.renderDataExtent, f14(this.view, t71.eye), t71), i47 && i47.autoUpdate(t71.near, t71.far);
  }
  _updateCollision() {
    var _a, _b, _c;
    const t71 = (_c = (_b = (_a = this.view.map) == null ? void 0 : _a.ground) == null ? void 0 : _b.navigationConstraint) == null ? void 0 : _c.type, i47 = !t71 || "stay-above" === t71, a61 = this.view.state.constraints.collision;
    if (i47 !== a61.enabled) {
      a61.enabled = i47, i47 && this._reapplyConstraints(L11.COLLISION);
      const t72 = this.view.constraints && this.view.constraints.tilt;
      t72 && "auto" !== t72.mode || this._updateTiltAuto();
    }
  }
  _updateAltitude() {
    const t71 = this.view.constraints && this.view.constraints.altitude;
    t71 && this.view.state.viewingMode !== l8.Local ? this.view.state.constraints.altitude = { min: t71.min, max: t71.max } : this.view.state.constraints.altitude = null, this._reapplyConstraints();
  }
  _updateTiltMax() {
    const t71 = this.view.constraints && this.view.constraints.tilt;
    t71 && "auto" !== t71.mode && (this._updateTiltManual(t71), this._reapplyConstraints());
  }
  _updateTilt() {
    const t71 = this.view.constraints && this.view.constraints.tilt;
    "manual" === (t71 ? t71.mode : "auto") ? this._updateTiltManual(t71) : this._updateTiltAuto(), this._reapplyConstraints();
  }
  _updateTiltManual(t71) {
    const i47 = this.view.state.constraints;
    i47.tilt = i47.createConstantMaxTilt(h3(t71.max));
  }
  _updateTiltAuto() {
    const t71 = this.view.state.constraints;
    t71.tilt = t71.createDefaultTilt(), this._updateTiltAutoMax();
  }
  _updateTiltAutoMax() {
    const t71 = this.view.constraints && this.view.constraints.tilt;
    if (!t71 || "auto" !== t71.mode)
      return;
    const i47 = this.view.state.constraints;
    if (i47.tilt) {
      const a61 = i47.tilt(this.view.state.camera.distance).max;
      t71.autoUpdate(M(a61));
    }
  }
  _updateLocalSurfaceDistance(t71) {
    if (null == t71)
      return;
    let i47 = Math.max(t71.width, t71.height);
    if (i47 <= 0)
      return;
    null != t71.zmax && null != t71.zmin && (i47 = Math.max(i47, t71.zmax - t71.zmin));
    const a61 = this.view.state, s71 = 3 * i47 / Math.atan(a61.camera.fov / 2);
    s71 !== a61.constraints.distance && (a61.constraints.distance = s71);
  }
  _reapplyConstraints(t71 = L11.ALL) {
    this.view.state.updateCamera((i47) => E24(this.view, i47, new r35(t71, O18.NONE, null)));
  }
};
function C14(t71, i47) {
  i47 && (t71.near = i47.near, t71.far = i47.far);
}
e([y2({ constructOnly: true })], _19.prototype, "view", void 0), e([y2({ readOnly: true })], _19.prototype, "surfaceCollisionConstraint", void 0), _19 = e([a4("esri.views.3d.state.ConstraintsManager")], _19);

// node_modules/@arcgis/core/views/3d/state/controllers/SurfaceCollisionCorrectionController.js
var l29 = class extends n40 {
  set desiredCamera(e68) {
    this._set("desiredCamera", e68.clone());
  }
  constructor(e68) {
    super(e68);
  }
  get canStop() {
    return true;
  }
  get constraintEnabled() {
    return this.view.state.constraints.collision.enabled;
  }
  onControllerStart() {
    this.state = s51.Running, this.addHandles(this.view.basemapTerrain.on("elevation-change", (e68) => this._handleElevationChangeEvent(e68))), this._applyCorrection();
  }
  onControllerEnd() {
    this.removeAllHandles();
  }
  stepController() {
  }
  _handleElevationChangeEvent(e68) {
    (null == e68.spatialReference || u12(this.view, this.desiredCamera, e68.extent, e68.spatialReference)) && this._applyCorrection();
  }
  _applyCorrection() {
    this.view.state.updateCamera((e68) => {
      e68.copyViewFrom(this.desiredCamera), s47(this.view, e68, i29.EYE_AND_CENTER) || this.constraintEnabled || (this.state = s51.Stopped);
    });
  }
};
e([y2({ constructOnly: true })], l29.prototype, "desiredCamera", null), l29 = e([a4("esri.views.3d.state.controllers.SurfaceCollisionCorrectionController")], l29);

// node_modules/@arcgis/core/views/3d/state/GoToOperation.js
var f31 = class {
  constructor(t71, i47, e68) {
    this.target = t71, this.options = i47, this.view = e68, this.state = "pending", this._animationController = null, this.promise = new Promise((t72, i48) => {
      this._resolveCallback = t72, this._rejectCallback = i48;
      const e69 = new AbortController();
      null != this.options.signal && m(this.options.signal, () => {
        this.abort();
      }), this._abortController = e69, this.waitForReady();
    });
  }
  resolve(t71) {
    if ("finished" !== this.state)
      return this.state = "finished", this._resolveCallback(t71);
  }
  reject(t71) {
    if ("finished" !== this.state)
      return this.state = "finished", this._rejectCallback(t71);
  }
  abort(t71 = false) {
    if (this._abortController.abort(), "wait-for-animation-finish" === this.state)
      !t71 && null != this._animationController && this.view.state.cameraController === this._animationController && this._animationController.active && this._animationController.stopController();
    this.reject(u2());
  }
  async waitForReady() {
    if (this.state = "wait-for-ready", !this.view.ready)
      try {
        await w(() => this.view.ready, this._abortController.signal);
      } catch (t71) {
        return this.reject(t71);
      }
    this.createViewPoint();
  }
  async createViewPoint() {
    if ("finished" !== this.state) {
      this.state = "wait-for-viewpoint", this._animationController = this.options.animate ? this._getAnimationController() : null;
      try {
        const t71 = await dt(this.view, this.target, this._abortController.signal);
        if ("finished" === this.state)
          return;
        const i47 = t71 ? this._getCameraFromViewpoint(t71) : null;
        if (null == i47)
          return;
        if (this.options.animate) {
          if (null == this._animationController)
            return;
          this.startAnimation(i47, this._animationController);
        } else
          this.view.stateManager.setStateCamera(i47.camera, { applyConstraints: !i47.isFullySpecified, positionAndOrientationOnly: true, doNotCancelGoToOperation: true }), this.resolve();
      } catch (t71) {
        this.reject(t71);
      }
    }
  }
  _getCameraFromViewpoint(a61) {
    var _a;
    const n61 = !!(this.target instanceof l13 && this.target.camera || this.target instanceof d11), o58 = a61.camera;
    if (null == o58)
      return null;
    if (!this.view.stateManager.isCompatible(o58)) {
      const t71 = o58.position, i47 = t71 && t71.spatialReference, a62 = i47 ? i47.wkid : "none", n62 = (_a = this.view.spatialReference) == null ? void 0 : _a.wkid;
      return this.reject(new s("GotoAnimation:incompatible-spatialreference", `Resulting camera has an incompatible spatial reference (camera: ${a62}, view: ${n62})`, { camera: o58 })), null;
    }
    const r55 = N6(this.view, o58);
    return null == r55 ? (this.reject(new s("GotoAnimation:invalid-camera", "Resulting camera is invalid")), null) : { viewpoint: a61, camera: r55, isFullySpecified: n61 };
  }
  startAnimation(t71, i47) {
    this.state = "wait-for-animation-finish";
    const a61 = i47.viewAnimation;
    if (null == a61)
      return void this.reject(new s("GotoAnimation:missing-animation", "Unreachable code in view.stateManager"));
    if (a61.update(t71.viewpoint, "running"), !i47.active || null == i47.viewAnimation || i47.viewAnimation.target !== t71.viewpoint || this.view.state.cameraController !== i47)
      return this.abort();
    let n61;
    t71.isFullySpecified ? (n61 = new l29({ view: this.view, desiredCamera: t71.camera }), s47(this.view, t71.camera, i29.EYE_AND_CENTER)) : E24(this.view, t71.camera), i47.begin(t71.camera, this.options);
    const o58 = () => {
      const e68 = this.view.state.cameraController;
      n61 && (e68 && e68.active ? e68 instanceof h25 && null != e68.viewAnimation && e68.viewAnimation.target === t71.viewpoint && (this.view.state.cameraController = n61) : null != i47.viewAnimation && i47.viewAnimation.target === t71.viewpoint && i47.state === s51.Finished && (this.view.state.cameraController = n61));
    }, w27 = (t72) => {
      if (null != this.view.state)
        switch (i47.state) {
          case s51.Finished:
            switch (this.state) {
              case "pending":
              case "wait-for-ready":
              case "wait-for-viewpoint":
              case "wait-for-animation-finish":
                this.resolve();
            }
            break;
          case s51.Ready:
          case s51.Rejected:
          case s51.Running:
          case s51.Stopped:
            switch (this.state) {
              case "pending":
              case "wait-for-ready":
              case "wait-for-viewpoint":
              case "wait-for-animation-finish":
                this.reject(t72);
            }
        }
    };
    a61.when(o58, (t72) => w27(t72)), i47.asyncResult = { resolve: () => w27(), reject: (t72) => w27(t72) };
  }
  _getAnimationController() {
    let t71 = null, i47 = null;
    const a61 = this.view.state.cameraController;
    return a61 instanceof h25 && (a61.updateStateFromViewAnimation(), a61.active && (t71 = a61, i47 = t71.viewAnimation)), null != t71 || (t71 = new h25({ view: this.view, mode: "animation" }), i47 = t71.viewAnimation, this.view.state.switchCameraController(t71)) ? t71 : (null != i47 && i47.stop(), this.reject(new s("GotoAnimation:goto-cannot-interrupt", "Cannot start an animation while interacting")), null);
  }
};

// node_modules/@arcgis/core/views/3d/state/ViewStateManager.js
var K7 = class extends S3 {
  constructor(e68) {
    super(e68), this.ready = false, this._windowDevicePixelRatio = 1, this._devicePixelRatioOverride = null, this._idleTimeout = ae2, this.test = { viewStateManager: this, contentCameraResetState: /* @__PURE__ */ new Map(), setDevicePixelRatio: (e69) => this._devicePixelRatioOverride = e69, renderState: null, get maximumPixelRatio() {
      return this.viewStateManager.view.qualitySettings.maximumPixelRatio;
    }, get updatingIgnoreRenderState() {
      return null != this.renderState;
    }, get idleTimeoutEnabled() {
      return this.viewStateManager._idleTimeout > 0;
    }, set idleTimeoutEnabled(e69) {
      this.viewStateManager._idleTimeout = e69 ? ae2 : 0;
    } }, this._propertiesPool = new o22({ frustum: c18 }, this), this._cameraSetByUser = false, this._gotoOperation = null, this._cameraChangeTime = 0, this._tmpCanvasSize = new Q9();
  }
  initialize() {
    this._cameraChangeTime = performance.now(), this.addHandles([v3(() => this.view.state.events, "before-camera-change", (e68) => e68 && this._updateElevation(e68)), d3(() => {
      var _a;
      return (_a = this.view.state) == null ? void 0 : _a.camera;
    }, (e68, t71) => this._cameraChangedHandler(e68, t71), C)]), p(() => {
      var _a;
      return (_a = this.view.state) == null ? void 0 : _a.camera;
    }, (e68) => this._updateElevation(e68), { once: true, sync: true }), this.addHandles([A2({ prepare: () => this._prepareFrame() }), d3(() => this.view.state.cameraController, () => {
      this._cameraSetByUser = true, this.removeHandles(ie2);
    }), v3(() => this.view.state.events, "camera-projection-changed", () => this.notifyChange("scale"))]);
  }
  destroy() {
    this.exit(), this._propertiesPool = u(this._propertiesPool);
  }
  get camera() {
    const e68 = this._get("camera");
    if (!this.ready)
      return e68;
    const t71 = B5(this.view, this.view.state.camera, $5);
    return t71 && e68 && t71.equals(e68) ? e68 : t71.clone();
  }
  set camera(e68) {
    var _a, _b;
    this._updatePropertyBeforeReady("camera", e68) || ((_a = this.view.elevationProvider) == null ? void 0 : _a.enableCache(true), this.setStateCamera(N6(this.view, e68), { applyConstraints: false }) || n.getLogger(this).error("#camera=", "Invalid camera", e68), (_b = this.view.elevationProvider) == null ? void 0 : _b.enableCache(false));
  }
  get contentCamera() {
    const e68 = this._get("contentCamera");
    if (!this.ready)
      return e68;
    const t71 = B5(this.view, this.view.state.contentCamera, $5);
    return t71 && e68 && t71.equals(e68) ? e68 : t71.clone();
  }
  set contentCamera(e68) {
    if (this._updatePropertyBeforeReady("contentCamera", e68))
      return;
    const t71 = N6(this.view, e68);
    null != t71 ? (this._updateElevation(t71), this.view.state.contentCamera = t71) : this.view.state.contentCamera = null;
  }
  installContentCameraReset(e68) {
    if (this.removeHandles(re2), this.test.contentCameraResetState.clear(), !this.view.state.fixedContentCamera)
      return false;
    const t71 = this.zoom, i47 = this.view.state.camera.distance ** 2, r55 = e9(this.view.state.camera.center), a61 = e68.sticky ? this.contentCamera.clone() : null;
    return this.addHandles([d3(() => this.contentCamera, () => {
      e68.sticky || (this.removeHandles(re2), this.test.contentCameraResetState.clear());
    }), d3(() => this.zoom, (e69) => {
      void 0 !== e69 && void 0 !== t71 && (this.test.contentCameraResetState.set("view.zoom", Math.abs(e69 - t71) / 2), Math.abs(e69 - t71) > 2 ? this.contentCamera = null : this.view.state.fixedContentCamera || (this.contentCamera = a61));
    }), d3(() => this.view.state.camera, (e69) => {
      const t72 = p3(r55, e69.center);
      this.test.contentCameraResetState.set("camera.center", t72 / i47), t72 > i47 ? this.contentCamera = null : this.view.state.fixedContentCamera || (this.contentCamera = a61);
    })], re2), true;
  }
  get center() {
    return this.ready ? this.view.pointsOfInterest.centerOnContent.location : this._get("center");
  }
  set center(e68) {
    var _a;
    this._updatePropertyBeforeReady("center", e68) || (e68 ? this.isCompatible(e68) ? this.setStateCamera(this._centerToCamera(e68), { applyConstraints: true }) ? this.view.pointsOfInterest.centerOnContent.runTask() : n.getLogger(this).error("#center=", "Invalid center", e68) : n.getLogger(this).error("#center=", "Center has an incompatible spatial reference (center: " + (e68.spatialReference ? e68.spatialReference.wkid : "none") + ", view: " + ((_a = this.view.spatialReference) == null ? void 0 : _a.wkid) + ")", e68) : n.getLogger(this).error("#center=", "Center may not be null or undefined"));
  }
  get extent() {
    if (!this.ready)
      return this._get("extent");
    const e68 = this.view, t71 = we(e68, e68.state.camera, e68.pointsOfInterest.centerOnContent.renderLocation);
    return null != t71 ? t71 : this._get("extent");
  }
  set extent(e68) {
    var _a;
    this._updatePropertyBeforeReady("extent", e68) || (e68 ? this.isCompatible(e68) ? this.setStateCamera(this._extentToCamera(e68), { applyConstraints: true }) || n.getLogger(this).error("#extent=", "Invalid extent", e68) : n.getLogger(this).error("#extent=", "Extent has an incompatible spatial reference (extent: " + (e68.spatialReference ? e68.spatialReference.wkid : "none") + ", view: " + ((_a = this.view.spatialReference) == null ? void 0 : _a.wkid) + ")", e68) : n.getLogger(this).error("#extent=", "Extent may not be null or undefined"));
  }
  get frustum() {
    const e68 = this._propertiesPool.get("frustum");
    return e68.renderCoordsHelper = this.view.renderCoordsHelper, e68.update(this.view.state.camera), e68;
  }
  get constraintsManager() {
    return this._constraintsManager;
  }
  get _initialViewpoint() {
    var _a;
    const e68 = this.view.map;
    return e68 && "initialViewProperties" in e68 ? (_a = e68.initialViewProperties) == null ? void 0 : _a.viewpoint : void 0;
  }
  get hasInitialView() {
    return !!this._initialViewpoint;
  }
  get scale() {
    if (this.ready) {
      const e68 = this.view.pointsOfInterest.centerOnContent;
      return $2(this.view, e68.distance, e68.location.latitude);
    }
    return this._get("scale");
  }
  set scale(e68) {
    this._updatePropertyBeforeReady("scale", e68) || this.setStateCamera(this._scaleToCamera(e68), { applyConstraints: true }) || n.getLogger(this).error("#scale=", "Invalid scale", e68);
  }
  get padding() {
    if (!this.ready)
      return this._get("padding");
    const e68 = this.view.state.camera, t71 = e68.padding, i47 = e68.pixelRatio, r55 = this._get("padding"), a61 = Math.round(t71[t34.TOP] / i47), s71 = Math.round(t71[t34.RIGHT] / i47), n61 = Math.round(t71[t34.BOTTOM] / i47), o58 = Math.round(t71[t34.LEFT] / i47);
    return null != r55 && r55.top === a61 && r55.right === s71 && r55.bottom === n61 && r55.left === o58 ? r55 : { top: a61, right: s71, bottom: n61, left: o58 };
  }
  set padding(e68) {
    this._updatePropertyBeforeReady("padding", e68) || (this._paddingToArray(e68, this.view.state.camera.pixelRatio, te2), this.view.state.updateCamera((e69) => e69.padding = te2));
  }
  _paddingToArray(e68, t71, i47) {
    e68 ? s11(i47, e68.top || 0, e68.right || 0, e68.bottom || 0, e68.left || 0) : s11(i47, 0, 0, 0, 0);
    for (let r55 = 0; r55 < 4; r55++)
      i47[r55] = Math.round(i47[r55] * t71);
  }
  get screenCenter() {
    const e68 = this.padding;
    return c3((this.view.width - (e68.left + e68.right)) / 2 + e68.left, (this.view.height - (e68.top + e68.bottom)) / 2 + e68.top);
  }
  get viewpoint() {
    return this.ready ? ht(this.view, this.camera) : this._get("viewpoint");
  }
  set viewpoint(e68) {
    var _a;
    if (!this._updatePropertyBeforeReady("viewpoint", e68))
      if (e68)
        if (this.isCompatible(e68))
          this.setStateCamera(this._viewpointToCamera(e68), { applyConstraints: !e68.camera }) || n.getLogger(this).error("#viewpoint=", "Invalid viewpoint", e68);
        else {
          const t71 = null != e68.camera ? e68.camera.position : e68.targetGeometry, i47 = null != t71 && t71.spatialReference;
          n.getLogger(this).error("#viewpoint=", "Viewpoint has an incompatible spatial reference (viewpoint: " + (i47 ? i47.wkid : "none") + ", view: " + ((_a = this.view.spatialReference) == null ? void 0 : _a.wkid) + ")", e68);
        }
      else
        n.getLogger(this).error("#viewpoint=", "Viewpoint may not be null or undefined");
  }
  get zoom() {
    return this.ready ? Ue(this.view, this.scale) : this._get("zoom");
  }
  set zoom(e68) {
    this._updatePropertyBeforeReady("zoom", e68) || void 0 === e68 || this.setStateCamera(this._zoomToCamera(e68), { applyConstraints: true }) || n.getLogger(this).error("#zoom=", "Invalid zoom", e68);
  }
  _computeCanvasSize() {
    var _a;
    if (this._devicePixelRatioOverride)
      return this.view.state.contentPixelRatio = this._devicePixelRatioOverride, this._tmpCanvasSize.width = Math.round(this.view.surface.clientWidth * this._devicePixelRatioOverride), this._tmpCanvasSize.height = Math.round(this.view.surface.clientHeight * this._devicePixelRatioOverride), this._tmpCanvasSize.pixelRatio = this._devicePixelRatioOverride, this._tmpCanvasSize;
    const e68 = Math.min(this._windowDevicePixelRatio, this.view.qualitySettings.maximumPixelRatio), t71 = (this._usePhysicalPixelRendering ? this._windowDevicePixelRatio : e68) * this.view.resolutionScale;
    this._tmpCanvasSize.width = Math.round(this.view.surface.clientWidth * t71), this._tmpCanvasSize.height = Math.round(this.view.surface.clientHeight * t71);
    const i47 = (_a = this.view._stage.renderView.renderingContext) == null ? void 0 : _a.parameters.maxTextureSize;
    return i47 && b4(this._tmpCanvasSize, i47), this._tmpCanvasSize.pixelRatio = this._tmpCanvasSize.width > 0 ? this._tmpCanvasSize.width / this.view.surface.clientWidth * 0.5 + this._tmpCanvasSize.height / this.view.surface.clientHeight * 0.5 : t71, this.view.state && (this.view.state.contentPixelRatio = Math.min(this._windowDevicePixelRatio, this.view.qualitySettings.maximumPixelRatio)), this._tmpCanvasSize;
  }
  get _rasterPixelRatio() {
    return null != this._devicePixelRatioOverride ? this._devicePixelRatioOverride : this._usePhysicalPixelRenderingAny ? this._windowDevicePixelRatio : Math.min(this._windowDevicePixelRatio, this.view.qualitySettings.maximumPixelRatio);
  }
  get _usePhysicalPixelRendering() {
    var _a, _b;
    return ((_b = (_a = this.view) == null ? void 0 : _a._stage) == null ? void 0 : _b.renderer.isFeatureEnabled(o19.PhysicalPixelRendering)) ?? false;
  }
  get _usePhysicalPixelRenderingAny() {
    var _a, _b;
    const e68 = (_b = (_a = this.view) == null ? void 0 : _a._stage) == null ? void 0 : _b.renderer;
    return e68 && (e68.isFeatureEnabled(o19.PhysicalPixelRendering, I4.IDLE) || e68.isFeatureEnabled(o19.PhysicalPixelRendering, I4.INTERACTING) || e68.isFeatureEnabled(o19.PhysicalPixelRendering, I4.ANIMATING));
  }
  preinit(e68) {
    var _a, _b, _c;
    return !(this._isOverridden("center") && !T(this.center.spatialReference, e68)) && (!(this._isOverridden("camera") && !T(this.camera.position.spatialReference, e68)) && (!(this._isOverridden("extent") && !T(this.extent.spatialReference, e68)) && !!(!this._isOverridden("viewpoint") || T((_a = this.viewpoint.targetGeometry) == null ? void 0 : _a.spatialReference, e68) && T((_c = (_b = this.viewpoint.camera) == null ? void 0 : _b.position) == null ? void 0 : _c.spatialReference, e68))));
  }
  init() {
    this._constraintsManager = new _19({ view: this.view }), this._prepareFrame();
    const e68 = this._getInitialProperties();
    this._cameraSetByUser = false, this._set("ready", true);
    for (const t71 of e68)
      this.set(t71.name, t71.value);
    if (!this._cameraSetByUser) {
      const e69 = this._initialViewpoint || this.view.initialExtent;
      e69 && this.isCompatible(e69) ? this._setInitialView(e69) : this.view.state.viewingMode === l8.Local && this.addHandles(p(() => this.view.basemapTerrain.ready, () => {
        this.removeHandles(ie2), this._setInitialView(this.view.dataExtent);
      }, { once: true, initial: true }), ie2);
    }
  }
  exit() {
    this._cancelGoToOperation(), this.ready && (this._override("padding", this.padding), this._set("ready", false), this._clearOverride("hasInitialView"), this._cameraSetByUser = false, this.removeHandles(ie2), this._constraintsManager = u(this._constraintsManager));
  }
  async goTo(e68, t71) {
    const i47 = { animate: true, ...t71 };
    return null != this._gotoOperation && this._gotoOperation.abort(i47.animate), this._gotoOperation = new f31(e68, i47, this.view), this.view.resourceController.scheduler.stopFrame(), this._gotoOperation.promise;
  }
  debugSetCameraOnContent() {
    this.setStateCamera(g6(this.view), { applyConstraints: false });
  }
  step(e68) {
    const t71 = this.view.state, i47 = t71 == null ? void 0 : t71.cameraController;
    i47 && (t71.updateCamera((t72) => i47.stepController(e68, t72)), i47.steppingFinished && i47.finishController());
  }
  _cancelGoToOperation() {
    null != this._gotoOperation && (this._gotoOperation.abort(), this._gotoOperation = null);
  }
  _getInitialProperties() {
    const e68 = /* @__PURE__ */ new Set(), t71 = [];
    for (const { propertyName: i47, overrides: r55 } of Y9) {
      const a61 = e68.has(i47), s71 = this._isOverridden(i47);
      !a61 && s71 && t71.push({ name: i47, value: this._get(i47) }), this._clearOverride(i47), (a61 || s71) && r55.forEach((t72) => e68.add(t72));
    }
    return t71;
  }
  _setInitialView(e68) {
    if (null == e68 || this._cameraSetByUser)
      return;
    if (e68 instanceof d11)
      return void this.setStateCamera(N6(this.view, e68), { applyConstraints: false });
    if (e68 instanceof l13) {
      if (e68.targetGeometry instanceof w2) {
        const t72 = ve(this.view, e68.targetGeometry, 0, 0.5, W3.LOCKED);
        return void (null != t72 && this.setStateCamera(N6(this.view, t72), { applyConstraints: true }));
      }
      const t71 = { applyConstraints: !e68.camera }, i47 = this._viewpointToCamera(e68);
      return void this.setStateCamera(i47, t71);
    }
    const r55 = ve(this.view, e68, 0, 0.5, W3.LOCKED);
    null != r55 && this.setStateCamera(N6(this.view, r55), { applyConstraints: true });
  }
  _updatePropertyBeforeReady(e68, t71) {
    return !this.ready && (this._override(e68, t71), t71 && X8.has(e68) && this._override("hasInitialView", true), true);
  }
  isCompatible(e68) {
    return null != e68 && (e68 instanceof l13 ? e68.camera ? this.isCompatible(e68.camera) : this.isCompatible(e68.targetGeometry) : e68 instanceof d11 ? this.isCompatible(e68.position) : e68.spatialReference && !_2(e68.spatialReference, this.view.spatialReference));
  }
  _getPreservingHeadingTilt(e68 = Z6) {
    return this._cameraSetByUser ? (e68.heading = this.camera.heading, e68.tilt = this.camera.tilt) : (e68.heading = 0, e68.tilt = 0.5), e68;
  }
  _centerPointAtDistanceToCamera(e68, t71, i47 = ee2) {
    const { heading: r55, tilt: a61 } = this._getPreservingHeadingTilt(), s71 = ce(this.view, r55, a61, e68, t71, W3.ADJUST);
    return null == s71 ? null : (i47.copyFrom(this.view.state.camera), i47.eye = s71.eye, i47.center = s71.center, i47.up = s71.up, i47);
  }
  _centerToCamera(e68) {
    const t71 = this.view.pointsOfInterest.centerOnContent;
    t71.runTask();
    const i47 = t71.distance;
    return this._centerPointAtDistanceToCamera(e68, i47);
  }
  _extentToCamera(e68) {
    const { heading: t71, tilt: i47 } = this._getPreservingHeadingTilt(), r55 = ve(this.view, e68, t71, i47, W3.ADJUST, $5);
    return r55 ? N6(this.view, r55) : null;
  }
  _scaleToCamera(e68) {
    if (null == e68)
      return null;
    const t71 = this.view.pointsOfInterest.centerOnContent;
    t71.runTask();
    const i47 = t71.renderLocation, r55 = t71.location.latitude, a61 = Q2(this.view, e68, r55);
    return this._centerPointAtDistanceToCamera(i47, a61);
  }
  _zoomToCamera(e68) {
    return this._scaleToCamera(Pe(this.view, e68));
  }
  _viewpointToCamera(e68) {
    return N6(this.view, lt2(this.view, e68));
  }
  setStateCamera(e68, t71) {
    return !(null == e68 || !this.view.state.stopActiveCameraController()) && (this._cameraSetByUser = true, t71.doNotCancelGoToOperation || this._cancelGoToOperation(), this.view.state.updateCamera((i47) => {
      t71.positionAndOrientationOnly ? (i47.eye = e68.eye, i47.center = e68.center, i47.up = e68.up) : i47.copyFrom(e68), t71.applyConstraints && E24(this.view, i47);
    }), t71.applyConstraints || (this.view.state.cameraController = new l29({ view: this.view, desiredCamera: e68 })), true);
  }
  _prepareFrame() {
    const { surface: e68, canvas: t71 } = this.view;
    if (!e68 || !t71)
      return;
    this._windowDevicePixelRatio = window.devicePixelRatio;
    const i47 = this._computeCanvasSize();
    if (0 !== i47.width && 0 !== i47.height && (t71.width === i47.width && t71.height === i47.height || (t71.width = i47.width, t71.height = i47.height), this.view.state)) {
      const e69 = this.view.state.camera;
      e69.fullWidth === i47.width && e69.fullHeight === i47.height && e69.pixelRatio === i47.pixelRatio || (ee2.copyFrom(e69), ee2.pixelRatio !== i47.pixelRatio && (this._paddingToArray(this.padding, i47.pixelRatio, te2), ee2.padding = te2), ee2.fullWidth = i47.width, ee2.fullHeight = i47.height, ee2.pixelRatio = i47.pixelRatio, this.view.state.camera = ee2), this._updateViewState();
    }
  }
  _updateElevation(e68) {
    var _a, _b;
    const t71 = (_a = this.view.basemapTerrain) == null ? void 0 : _a.spatialReference, i47 = ((_b = this.view.renderCoordsHelper) == null ? void 0 : _b.getAltitude(e68.eye)) ?? 0, r55 = t71 ? f14(this.view, e68.eye) : 0;
    e68.relativeElevation = i47 - r55;
  }
  _updateViewState() {
    null != this.test.renderState ? this.view.state.mode = this.test.renderState : this.view.animation ? this.view.state.mode = I4.ANIMATING : this.view.interacting ? this.view.state.mode = I4.INTERACTING : (this.view.state.mode === I4.ANIMATING && (this._cameraChangeTime = 0), performance.now() - this._cameraChangeTime < this._idleTimeout ? this.view.state.mode = I4.INTERACTING : this.view.state.mode = I4.IDLE), this.view.state.rasterPixelRatio = this._rasterPixelRatio;
  }
  _cameraChangedHandler(e68, t71) {
    e68 && t71 && e68.almostEquals(t71) || (this._cameraChangeTime = performance.now(), this._updateViewState());
  }
};
e([y2({ type: d11, dependsOn: ["view.state.camera", "ready"] })], K7.prototype, "camera", null), e([y2({ type: d11, dependsOn: ["view.state.contentCamera", "ready"] })], K7.prototype, "contentCamera", null), e([y2({ type: x })], K7.prototype, "center", null), e([y2({ type: w2 })], K7.prototype, "extent", null), e([y2({ readOnly: true })], K7.prototype, "frustum", null), e([y2()], K7.prototype, "_constraintsManager", void 0), e([y2({ readOnly: true })], K7.prototype, "constraintsManager", null), e([y2()], K7.prototype, "_initialViewpoint", null), e([y2({ readOnly: true })], K7.prototype, "hasInitialView", null), e([y2({ readOnly: true, type: Boolean })], K7.prototype, "ready", void 0), e([y2({ type: Number })], K7.prototype, "scale", null), e([y2()], K7.prototype, "padding", null), e([y2({ readOnly: true })], K7.prototype, "screenCenter", null), e([y2({ constructOnly: true })], K7.prototype, "view", void 0), e([y2({ type: l13 })], K7.prototype, "viewpoint", null), e([y2({ type: Number })], K7.prototype, "zoom", null), e([y2({ readOnly: true })], K7.prototype, "_rasterPixelRatio", null), e([y2({ readOnly: true })], K7.prototype, "_usePhysicalPixelRendering", null), e([y2({ readOnly: true })], K7.prototype, "_usePhysicalPixelRenderingAny", null), e([y2()], K7.prototype, "_windowDevicePixelRatio", void 0), e([y2()], K7.prototype, "_devicePixelRatioOverride", void 0), K7 = e([a4("esri.views.3d.state.ViewStateManager")], K7);
var Q9 = class {
  constructor() {
    this.width = 0, this.height = 0, this.pixelRatio = 1;
  }
};
var X8 = /* @__PURE__ */ new Set(["camera", "viewpoint", "extent", "scale", "center", "zoom"]);
var Y9 = [{ propertyName: "camera", overrides: ["viewpoint"] }, { propertyName: "viewpoint", overrides: ["extent"] }, { propertyName: "extent", overrides: ["center", "scale"] }, { propertyName: "center", overrides: [] }, { propertyName: "scale", overrides: ["zoom"] }, { propertyName: "zoom", overrides: [] }, { propertyName: "padding", overrides: [] }];
var Z6 = { heading: 0, tilt: 0 };
var $5 = new d11();
var ee2 = new it();
var te2 = n11();
var ie2 = "pending-initial-view";
var re2 = "content-camera-reset";
var ae2 = 300;
var se3 = 100;

// node_modules/@arcgis/core/views/3d/state/controllers/InteractiveController.js
var n42 = class extends n40 {
  constructor() {
    super(...arguments), this.startCamera = new it(), this.currentCamera = new it(), this._lastInteraction = 0;
  }
  get isInteractive() {
    return performance.now() - this._lastInteraction < se3;
  }
  stepController(r55, t71) {
    t71.copyViewFrom(this.currentCamera), this.currentCamera.copyFrom(t71);
  }
  onControllerStart(r55) {
    this.state = s51.Running, this.startCamera.copyFrom(r55), this.currentCamera.copyFrom(r55);
  }
  onControllerEnd(r55) {
    r55.copyViewFrom(this.currentCamera);
  }
  commitCamera() {
    this._lastInteraction = performance.now(), setTimeout(() => this.notifyChange("isInteractive"), se3), this.view.state.updateCamera((r55) => this.stepController(0, r55)), this.steppingFinished && this.finishController();
  }
};
e([y2({ readOnly: true })], n42.prototype, "isInteractive", null), e([y2()], n42.prototype, "_lastInteraction", void 0), n42 = e([a4("esri.views.3d.state.controllers.InteractiveController")], n42);

// node_modules/@arcgis/core/views/3d/state/controllers/RotateController.js
var V10;
!function(t71) {
  t71[t71.CENTER = 0] = "CENTER", t71[t71.EYE = 1] = "EYE";
}(V10 || (V10 = {}));
var H12 = class extends n42 {
  get _intersectionHelper() {
    return this.view.sceneIntersectionHelper;
  }
  constructor(t71) {
    super(t71), this.pivot = V10.CENTER, this._rotScale = 0, this._lastPoint = n13(), this._tmpWorldUp = n7(), this._tmpViewDir = n7(), this._tmpRotCurPoint = n13(), this._tmpTransf = e15(), this._tmpAxis = n7(), this._tmpPivotPoint = n7(), this._pivotPos = n7(), this._constraintOptions = new r35(L11.ALL, O18.TUMBLE, 0, this.startCamera);
  }
  initialize() {
    this._rotScale = this.pivot === V10.CENTER ? 3 : 1.5;
  }
  begin(t71) {
    if (this.active) {
      switch (this.pivot) {
        case V10.EYE:
          r5(this._pivotPos, this.startCamera.eye), this._constraintOptions.interactionType = O18.LOOK_AROUND, this._constraintOptions.tiltMode = O19.LOOK_AROUND, this._constraintOptions.selection = L11.NONE;
          break;
        case V10.CENTER: {
          const i47 = this._intersectionHelper.intersectRayFreePointFallback(this.startCamera.ray, this._pivotPos, 0 === this.view.map.ground.opacity ? at : {});
          i47 || r5(this._pivotPos, this.startCamera.center), this._constrainPivotPoint(t71, i47), this.startCamera.center = this._pivotPos, this._constraintOptions.interactionType = O18.TUMBLE, this._constraintOptions.tiltMode = O19.TUMBLE, this._constraintOptions.selection = L11.ALL & ~L11.DISTANCE;
          break;
        }
      }
      it2(this.startCamera, t71, this._lastPoint);
    }
  }
  _constrainPivotPoint(t71, i47) {
    const s71 = this.startCamera, o58 = n7();
    e11(o58, this._pivotPos, s71.eye);
    const e68 = s8(o58), a61 = Math.abs(this.view.camera.position.z);
    this.view.renderCoordsHelper.worldUpAtPosition(s71.eye, S14);
    let n61 = Math.max(Math.min(nt, 1 / Math.abs(P3(S14, s71.viewForward))) * a61, ot);
    i47 && (n61 = Math.min(e68, n61));
    const h36 = i4(s71.width / s71.pixelRatio * 0.5, s71.height / s71.pixelRatio * 0.5), p48 = jt(this.startCamera, h36, this.view.renderCoordsHelper, this.view.viewingMode);
    let m46 = this.view._stage.renderView.getMinimalDepthForArea(o33(this.view), s71.fullWidth / s71.pixelRatio * 0.5, s71.fullHeight / s71.pixelRatio * 0.5, s71, 2.5 * rt, rt), u46 = this.view._stage.renderView.getMinimalDepthForArea(o33(this.view), t71[0], t71[1], s71, rt);
    null == m46 && null == u46 || (m46 = m46 ?? u46 ?? 0, u46 = null == u46 || p48 === yt.Horizontal ? m46 : u46, n61 = m46 > u46 ? u46 : m46, n61 = i47 ? Math.min(n61, e68) : n61), z2(o58, o58), r5(this._pivotPos, u4(this._tmpPivotPoint, s71.eye, g2(this._tmpPivotPoint, o58, n61)));
  }
  update(t71) {
    if (this.active) {
      switch (this.pivot) {
        case V10.EYE:
          this.currentCamera.center = this._applyRotation(this.currentCamera, t71, this.currentCamera.center, this._pivotPos);
          break;
        case V10.CENTER:
          this.currentCamera.center = this._pivotPos, this.currentCamera.eye = this._applyRotation(this.currentCamera, t71, this.currentCamera.eye, this._pivotPos);
      }
      E24(this.view, this.currentCamera, this._constraintOptions), this.commitCamera();
    }
  }
  end() {
    this.active && this.finishController();
  }
  _applyRotation(t71, r55, o58, e68) {
    this.view.renderCoordsHelper.worldUpAtPosition(e68, this._tmpWorldUp), it2(t71, r55, this._tmpRotCurPoint);
    let h36 = (this._lastPoint[1] - this._tmpRotCurPoint[1]) * this._rotScale, m46 = (this._tmpRotCurPoint[0] - this._lastPoint[0]) * this._rotScale;
    e11(this._tmpViewDir, o58, e68);
    const c44 = s8(this._tmpViewDir), f48 = m3(P3(this._tmpViewDir, this._tmpWorldUp) / c44);
    if (this.pivot === V10.EYE) {
      h36 *= -0.5;
      const t72 = 0.5 * Math.PI - f48, i47 = 0.5 * Math.PI * 0.99;
      h36 = t72 - Math.max(-i47, Math.min(i47, t72 + h36));
    }
    return h36 = e12(h36 + f48, d22.min, d22.max) - f48, _(this._tmpAxis, t71.up, this._tmpViewDir), this.pivot === V10.CENTER && (m46 = -m46), p8(this._tmpTransf, m46, this._tmpWorldUp), b2(this._tmpTransf, this._tmpTransf, h36, this._tmpAxis), O2(this._tmpViewDir, this._tmpViewDir, this._tmpTransf), t71.up = O2(k14, t71.up, this._tmpTransf), u4(k14, e68, this._tmpViewDir), r11(this._lastPoint, this._tmpRotCurPoint), k14;
  }
};
e([y2()], H12.prototype, "pivot", void 0), H12 = e([a4("esri.views.3d.state.controllers.RotateController")], H12);
var k14 = n7();
var S14 = n7();

// node_modules/@arcgis/core/views/3d/input/handlers/DragRotate.js
var a37 = class extends i12 {
  constructor(t71, r55, e68, o58) {
    super(true), this._view = t71, this.pointerAction = r55, this._pivot = e68, this.registerIncoming("drag", o58, (t72) => this._handleDrag(t72));
  }
  _handleDrag(e68) {
    const a61 = e68.data;
    if (a61.pointers.size > 1)
      return;
    if (!r21(e68.data, this.pointerAction))
      return;
    const i47 = i4(a61.center.x, a61.center.y);
    switch (a61.action) {
      case "start":
        this._cameraController && (this._cameraController.end(), this._cameraController = null), this._cameraController = new H12({ view: this._view, pivot: this._pivot }), this._view.state.switchCameraController(this._cameraController), this._cameraController.begin(i47);
        break;
      case "update":
        this._cameraController && this._cameraController.update(i47);
        break;
      case "end":
        this._cameraController && (this._cameraController.end(), this._cameraController = null);
    }
    e68.stopPropagation();
  }
};

// node_modules/@arcgis/core/views/3d/state/controllers/ZoomControllerGlobal.js
var B11 = class extends n42 {
  constructor() {
    super(...arguments), this._pickPoint = n7(), this._tmpP0 = n13(), this._panAxisAngle = s52(), this._tmpRayDir = n7(), this._tmpRayDirPick = n7(), this._targetOnSphere = n7(), this._navMode = yt.Horizontal, this._tmpRay = { origin: n7(), direction: n7() }, this.dragBeginPoint = i4(), this._normalizedAnchorPoint = n13(), this._constraintOptions = new r35(L11.ALL_EXCEPT_COLLISION, O18.ZOOM, 0, this.startCamera), this._sphere = w6(), this._hasPickPoint = false;
  }
  get _intersectionHelper() {
    return this.view.sceneIntersectionHelper;
  }
  begin(t71) {
    if (!this.active)
      return;
    r11(this.dragBeginPoint, t71), it2(this.startCamera, t71, this._normalizedAnchorPoint);
    const r55 = s6(this.view.spatialReference), e68 = vt(this._intersectionHelper, this.startCamera, t71, r55, N12.Ellipsoid, 0 === this.view.map.ground.opacity ? at : {});
    if (this._navMode = jt(this.startCamera, t71, this.view.renderCoordsHelper, this.view.viewingMode), this._navMode === yt.Horizontal)
      this._hasPickPoint = !!e68.scenePickPoint, this._pickPoint = e68.scenePickPoint ?? this._pickPoint, this._sphere = e68.sphere;
    else {
      let r56;
      p17(this.startCamera, t71, this._tmpRay), z2(this._tmpRay.direction, this._tmpRay.direction), null != e68.scenePickPoint && (e11(this._tmpRayDirPick, this.startCamera.eye, e68.scenePickPoint), r56 = s8(this._tmpRayDirPick));
      const s71 = Math.abs(this.view.camera.position.z);
      this.view.renderCoordsHelper.worldUpAtPosition(this.startCamera.eye, T12);
      let a61 = e12(Math.min(Q8, 1 / Math.abs(P3(T12, this._tmpRay.direction))) * s71, X7[0], X7[1]);
      const n61 = this.view._stage.renderView.getMinimalDepthForArea(null, t71[0], t71[1], this.view.state.camera, Y8);
      a61 = null != n61 ? n61 : a61, a61 = null != r56 ? Math.min(a61, r56) : a61, this._hasPickPoint = true, g2(this._tmpRay.direction, this._tmpRay.direction, a61), u4(this._pickPoint, this._tmpRay.origin, this._tmpRay.direction);
    }
  }
  update(t71) {
    if (this.active) {
      if (this.currentCamera.eye = this.startCamera.eye, this.currentCamera.center = this.startCamera.center, this.currentCamera.up = this.startCamera.up, this._navMode === yt.Horizontal) {
        e11(this._tmpRayDir, this.currentCamera.center, this.currentCamera.eye);
        const i47 = s8(this._tmpRayDir);
        it2(this.currentCamera, t71, this._tmpP0);
        const r55 = 12 * (this._normalizedAnchorPoint[1] - this._tmpP0[1]);
        let e68 = i47 * 2 ** r55;
        const s71 = this.view.state.constraints.minimumPoiDistance;
        if (r55 < 0 && e68 < s71 && (e68 = s71), Math.abs(i47 - e68) < 1e-6)
          return;
        if (this._hasPickPoint && e68 < i47) {
          const t72 = 1 - (1 - e68 / i47) * (1 - this._sphere[3] / s8(this.currentCamera.center));
          this.currentCamera.center = g2(E26, this.currentCamera.center, t72);
        }
        g2(this._tmpRayDir, this._tmpRayDir, -e68 / i47), this.currentCamera.eye = u4(E26, this.currentCamera.center, this._tmpRayDir), this._constraintOptions.interactionFactor = y15(m9(this.dragBeginPoint, t71)), E24(this.view, this.currentCamera, this._constraintOptions), this._hasPickPoint && (wt(this._sphere, this.currentCamera, this.dragBeginPoint, this._targetOnSphere), l28(this._pickPoint, this._targetOnSphere, this._panAxisAngle), ct2(this.currentCamera, Z(this._sphere), this._panAxisAngle));
      } else {
        const i47 = s8(this._tmpRay.direction);
        it2(this.currentCamera, t71, this._tmpP0);
        const r55 = 12 * (this._normalizedAnchorPoint[1] - this._tmpP0[1]);
        let e68 = i47 * 2 ** r55;
        const s71 = this.view.state.constraints.minimumPoiDistance;
        if (r55 < 0 && e68 < s71 && (e68 = s71), Math.abs(i47 - e68) < 1e-6)
          return;
        g2(this._tmpRayDir, this._tmpRay.direction, 1 - e68 / i47), this.currentCamera.eye = u4(E26, this.currentCamera.eye, this._tmpRayDir), this.currentCamera.center = u4(E26, this.currentCamera.center, this._tmpRayDir);
      }
      s47(this.view, this.currentCamera), this.commitCamera();
    }
  }
  end() {
    this.active && this.finishController();
  }
};
B11 = e([a4("esri.views.3d.state.controllers.ZoomControllerGlobal")], B11);
var E26 = n7();
var T12 = n7();

// node_modules/@arcgis/core/views/3d/state/controllers/ZoomControllerLocal.js
var z16 = class extends n42 {
  constructor() {
    super(...arguments), this._tmpP = n7(), this._tmpDir = n7(), this._tmpN = n7(), this._tmpP0 = n13(), this._tmpPoi = n7(), this._tmpRayDir = n7(), this.dragBeginPoint = i4(), this._normalizedAnchorPoint = n13(), this._constraintOptions = new r35(L11.ALL, O18.ZOOM, 0, this.startCamera, n7()), this._plane = E6();
  }
  get _intersectionHelper() {
    return this.view.sceneIntersectionHelper;
  }
  begin(t71) {
    if (!this.active)
      return;
    r11(this.dragBeginPoint, t71), it2(this.startCamera, t71, this._normalizedAnchorPoint);
    const s71 = this._intersectionHelper.intersectScreenFreePointFallback(t71, this._tmpP, 0 === this.view.map.ground.opacity ? at : {});
    e11(this._tmpDir, this._tmpP, this.startCamera.eye);
    const r55 = s8(this._tmpDir);
    z2(this._tmpDir, this._tmpDir);
    const a61 = Math.abs(this.view.camera.position.z);
    let o58 = e12(Math.min(Q8, 1 / Math.abs(P3(L14, this._tmpDir))) * a61, X7[0], X7[1]);
    const C28 = this.view._stage.renderView.getMinimalDepthForArea(o33(this.view), t71[0], t71[1], this.view.state.camera, Y8);
    o58 = null != C28 ? C28 : o58, o58 = s71 ? Math.min(o58, r55) : o58, g2(this._tmpDir, this._tmpDir, o58), u4(this._tmpP, this.startCamera.eye, this._tmpDir), e11(this._tmpN, this.startCamera.eye, this.startCamera.center), z2(this._tmpN, this._tmpN), this._tmpN[1] < 0 && j2(this._tmpN, this._tmpN), j5(this._tmpP, this._tmpN, this._plane);
  }
  update(t71) {
    if (!this.active)
      return;
    lt3(this._plane, this.currentCamera, this.dragBeginPoint, this._tmpPoi) || r5(this._tmpPoi, this.currentCamera.center), it2(this.currentCamera, t71, this._tmpP0);
    let i47 = 4 * (this._tmpP0[1] - this._normalizedAnchorPoint[1]);
    r11(this._normalizedAnchorPoint, this._tmpP0), e11(this._tmpRayDir, this._tmpPoi, this.currentCamera.eye);
    const s71 = s8(this._tmpRayDir);
    let r55 = s71 * (1 - i47);
    this._constraintOptions.interactionDirection && (r5(this._constraintOptions.interactionDirection, this._tmpRayDir), g2(this._constraintOptions.interactionDirection, this._constraintOptions.interactionDirection, Math.sign(i47) / s71));
    const o58 = this.view.state.constraints.minimumPoiDistance;
    i47 >= 0 && r55 < o58 && (r55 = o58, i47 = -(r55 - s71) / s71), Math.abs(s71 - r55) < 1e-6 || (g2(this._tmpRayDir, this._tmpRayDir, i47), this.currentCamera.eye = u4(F12, this.currentCamera.eye, this._tmpRayDir), A4(F12, this.currentCamera.center, this._tmpPoi, i47), this._tmpPoi[2] > this.startCamera.center[2] ? F12[2] = Math.max(this.startCamera.center[2], F12[2]) : F12[2] = Math.min(this.startCamera.center[2], F12[2]), this.currentCamera.center = F12, this._constraintOptions.interactionFactor = y15(m9(this.dragBeginPoint, t71)), E24(this.view, this.currentCamera, this._constraintOptions), this.commitCamera());
  }
  end() {
    this.active && this.finishController();
  }
};
z16 = e([a4("esri.views.3d.state.controllers.ZoomControllerLocal")], z16);
var F12 = n7();
var L14 = r4(0, 0, 1);

// node_modules/@arcgis/core/views/3d/input/handlers/DragZoom.js
var s55 = class extends i12 {
  constructor(r55, t71, e68) {
    super(true), this._view = r55, this.pointerAction = t71, this.registerIncoming("drag", e68, (r56) => this._handleDrag(r56));
  }
  _handleDrag(o58) {
    const s71 = o58.data;
    if (s71.pointers.size > 1)
      return;
    if (!r21(o58.data, this.pointerAction))
      return;
    const i47 = i4(s71.center.x, s71.center.y);
    switch (s71.action) {
      case "start":
        this._cameraController && (this._cameraController.end(), this._cameraController = null), this._view.state.isGlobal ? this._cameraController = new B11({ view: this._view }) : this._cameraController = new z16({ view: this._view }), this._view.state.switchCameraController(this._cameraController), this._cameraController.begin(i47);
        break;
      case "update":
        this._cameraController && this._cameraController.update(i47);
        break;
      case "end":
        this._cameraController && (this._cameraController.end(), this._cameraController = null);
    }
    o58.stopPropagation();
  }
};

// node_modules/@arcgis/core/views/3d/state/controllers/GamepadKeyboardController.js
var J5 = class extends n42 {
  constructor(t71) {
    super(t71), this._filteredSurfaceElevation = 0, this._transformation = { translation: [0, 0, 0], heading: 0, tilt: 0, zoom: 0 }, this._keysButtonState = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], this._tmpCamera = new it(), this._headingStart = 0, this._constraintOptions = new r35(L11.ALL, O18.NONE, 0, new it(), null, O19.LOOK_AROUND);
  }
  handleEventGamepad(t71) {
    const e68 = i13(t71, this.view.navigation.gamepad, this._transformation);
    ("end" === t71.action || s29(e68)) && this.finishController();
  }
  activateDirection(t71) {
    this._keysButtonState[t71] = 1, o25(this._keysButtonState, this._transformation);
  }
  deactivateDirection(t71) {
    this._keysButtonState[t71] = 0;
    const e68 = o25(this._keysButtonState, this._transformation);
    s29(e68) && this.finishController();
  }
  onControllerStart(t71) {
    this._filteredSurfaceElevation = this.view.pointsOfInterest.cameraOnSurface.location.z, this._headingStart = this.view.camera.heading, super.onControllerStart(t71);
  }
  _updateFilteredSurfaceElevation(t71) {
    const e68 = this.view.pointsOfInterest.cameraOnSurface.location.z, i47 = 1;
    this._filteredSurfaceElevation += i47 * (e68 - this._filteredSurfaceElevation) * t71;
  }
  stepController(t71, e68) {
    var _a;
    this._updateStartHeading(), this._updateFilteredSurfaceElevation(t71), this.currentCamera.copyViewFrom(e68), this._updateCameraCenter(), (_a = this._constraintOptions.interactionStartCamera) == null ? void 0 : _a.copyFrom(this.currentCamera), this._calculateControlTransformation(t71, this.currentCamera, at2), this._applyDisabledMovementTypes(at2), this._applyPan(at2.pan), this._applyRotate(at2.rotate), this._applyZoom(at2.zoom), this._applyAscend(at2.ascend), this._constraintOptions.interactionType = O18.NONE, this._constraintOptions.selection = L11.COLLISION, E24(this.view, this.currentCamera, this._constraintOptions), super.stepController(t71, e68);
  }
  _updateStartHeading() {
    0 !== this._transformation.heading && (this._headingStart = this.view.camera.heading);
  }
  _applyRotate(t71) {
    if (!t71.enabled)
      return;
    const e68 = this.currentCamera;
    e11(rt2, e68.center, e68.eye), O2(rt2, rt2, t71.matrix), e68.center = u4(rt2, rt2, e68.eye), e68.up = O2(rt2, e68.up, t71.matrix), this._constraintOptions.interactionType = O18.LOOK_AROUND, this._constraintOptions.selection = L11.ALL_EXCEPT_COLLISION, E24(this.view, e68, this._constraintOptions);
  }
  _applyPan(t71, e68 = this.currentCamera) {
    if (!t71.enabled)
      return;
    e68.eye = O2(rt2, e68.eye, t71.matrix), e68.center = O2(rt2, e68.center, t71.matrix);
    this.view.state.isGlobal && (e68.up = O2(rt2, e68.up, t71.matrix)), this._constraintOptions.interactionType = O18.PAN, this._constraintOptions.selection = L11.ALL, E24(this.view, e68, this._constraintOptions);
  }
  _applyZoom(t71) {
    if (!t71)
      return;
    const e68 = this.currentCamera.viewForward;
    this.currentCamera.eye = u4(rt2, this.currentCamera.eye, g2(c6.get(), e68, t71)), r5(ot2, e68), j2(ot2, ot2), this._constraintOptions.interactionDirection = ot2, this._constraintOptions.interactionType = O18.ZOOM, this._constraintOptions.selection = L11.ALL_EXCEPT_COLLISION, E24(this.view, this.currentCamera, this._constraintOptions), this._constraintOptions.interactionDirection = null;
  }
  _applyAscend(t71) {
    if (!t71)
      return;
    const e68 = this.view.renderCoordsHelper.worldUpAtPosition(this.currentCamera.eye, c6.get());
    this._constraintOptions.interactionDirection = r5(ot2, e68);
    if (this.view.state.isGlobal) {
      const e69 = s8(this.currentCamera.eye), i47 = (e69 + t71) / e69;
      this.currentCamera.eye = g2(rt2, this.currentCamera.eye, i47), this.currentCamera.center = g2(rt2, this.currentCamera.center, i47);
    } else {
      const i47 = g2(c6.get(), e68, t71);
      this.currentCamera.eye = u4(rt2, this.currentCamera.eye, i47), this.currentCamera.center = u4(rt2, this.currentCamera.center, i47);
    }
    this._updateCameraCenter(), this._constraintOptions.interactionType = O18.ASCEND, this._constraintOptions.selection = L11.COLLISION, E24(this.view, this.currentCamera, this._constraintOptions) && this._updateCameraCenter(), this._constraintOptions.selection = L11.ALL_EXCEPT_COLLISION, E24(this.view, this.currentCamera, this._constraintOptions), this._constraintOptions.interactionDirection = null;
  }
  _calculateControlTransformation(t71, e68, i47) {
    nt2(i47);
    const a61 = this._computeVelocities(t71);
    this.view.state.isLocal ? this._calculateControlTransformationLocal(a61, e68, i47) : this._calculateControlTransformationGlobal(a61, e68, i47);
  }
  _updateCameraCenter() {
    const t71 = this.view.pointsOfInterest.centerOnSurfaceFrequent.estimatedSurfaceAltitude, e68 = this.view.renderCoordsHelper, i47 = this.currentCamera.ray;
    this.currentCamera.center = e68.intersectManifoldClosestSilhouette(i47, t71, rt2);
  }
  _calculateControlTransformationLocal(t71, a61, r55) {
    const { viewRight: o58, viewForward: s71 } = a61, m46 = this._transformation, l45 = this.view.navigation.gamepad, h36 = o4(c6.get(), s71[0], s71[1], 0);
    z2(h36, h36);
    const p48 = m46.translation[0] * t71.pan;
    if (0 !== p48) {
      const t72 = g2(c6.get(), o58, p48);
      i5(r55.pan.matrix, r55.pan.matrix, t72), r55.pan.enabled = true;
    }
    switch (l45.mode) {
      case "pan": {
        const e68 = -m46.translation[1] * t71.pan;
        if (0 !== e68) {
          const t72 = g2(c6.get(), h36, e68);
          i5(r55.pan.matrix, r55.pan.matrix, t72), r55.pan.enabled = true;
        }
        r55.zoom = m46.zoom * t71.zoom;
        break;
      }
      case "zoom":
        r55.zoom = (-m46.translation[1] + m46.zoom) * t71.zoom;
        break;
      default:
        n10(l45.mode);
    }
    const d44 = m46.translation[2] * t71.ascend;
    r55.ascend = d44;
    const _26 = -m46.heading * t71.rotate;
    0 !== _26 && (b2(r55.rotate.matrix, r55.rotate.matrix, _26, this.view.renderCoordsHelper.worldUpAtPosition(a61.eye, c6.get())), r55.rotate.enabled = true);
    const f48 = m46.tilt * t71.rotate, v32 = c27(this.view.renderCoordsHelper, a61.center, a61.eye), y26 = e12(v32 + f48, d22.min, d22.max) - v32;
    y26 && (b2(r55.rotate.matrix, r55.rotate.matrix, y26, o58), r55.rotate.enabled = true);
  }
  _calculateControlTransformationGlobal(t71, e68, i47) {
    const { eye: a61, viewRight: r55 } = e68, o58 = this._transformation, s71 = this.view.navigation.gamepad, n61 = _(c6.get(), r55, a61);
    z2(n61, n61), j2(n61, n61), Bt(this.startCamera, e68, o58, t71, this.view.camera.heading, this._headingStart, this.view.camera.tilt, i47, s71), this._tmpCamera.copyFrom(this.currentCamera), this._applyPan(at2.pan, this._tmpCamera);
    const m46 = this.view.pointsOfInterest.centerOnSurfaceFrequent.estimatedSurfaceAltitude, l45 = o58.translation[2] * t71.ascend;
    i47.ascend = l45;
    const h36 = -o58.heading * t71.rotate;
    0 !== h36 && (b2(i47.rotate.matrix, i47.rotate.matrix, h36, this._tmpCamera.eye), i47.rotate.enabled = true);
    const p48 = o58.tilt * t71.rotate, d44 = this._clampTiltDeltaGlobalToValidRange(p48, e68.ray, m46);
    0 !== d44 && (b2(i47.rotate.matrix, i47.rotate.matrix, d44, this._tmpCamera.viewRight), i47.rotate.enabled = true), i47.zoom += o58.zoom * t71.zoom;
  }
  _clampTiltDeltaGlobalToValidRange(t71, e68, a61) {
    const r55 = s6(this.view.spatialReference), o58 = Mt(d22.min, e68.origin, a61, r55);
    let s71 = 0, n61 = 0;
    const c44 = c6.get();
    if (this.view.renderCoordsHelper.intersectManifold(e68, a61, c44)) {
      const t72 = c27(this.view.renderCoordsHelper, c44, e68.origin);
      s71 = Mt(t72, e68.origin, a61, r55), n61 = Mt(d22.max, e68.origin, a61, r55);
    } else {
      K3(N(ct, a61 + r55.radius), e68, c44);
      const t72 = Math.PI + f9(e68.direction, c44);
      s71 = gt(t72, e68.origin, a61, r55), n61 = gt(d22.max, e68.origin, a61, r55);
    }
    return e12(s71 + t71, o58, n61) - s71;
  }
  _getPointAbsoluteSurfaceElevation(t71, e68, i47) {
    const { renderCoordsHelper: a61 } = this.view, r55 = a61.getAltitude(t71), o58 = e68 + Math.abs(r55 - e68);
    return a61.setAltitude(i47, o58, t71), o58;
  }
  _clampedDistanceToSurface(t71, e68) {
    const { renderCoordsHelper: i47 } = this.view, { camera: a61 } = this.view.state, { direction: r55 } = Y5(this.view, e68, 0, W5, st2), o58 = i47.intersectManifoldClosestSilhouette(p9(e68, r55), t71, c6.get()), s71 = x2(e68, o58), n61 = i47.intersectManifoldClosestSilhouette(p9(e68, J(c6.get(), e68, a61.center)), t71, c6.get()), c44 = x2(e68, n61);
    return Math.min(s71, c44);
  }
  _computeHeadingRotateRadius(t71) {
    const { renderCoordsHelper: e68, state: i47 } = this.view, { camera: r55, isGlobal: o58 } = i47, s71 = e68.intersectManifoldClosestSilhouette(r55.ray, this._filteredSurfaceElevation, c6.get());
    if (o58) {
      const e69 = e11(c6.get(), t71, s71), i48 = s8(e69);
      g2(e69, e69, 1 / i48);
      const r56 = z2(c6.get(), t71), o59 = m3(P3(r56, e69));
      return i48 * Math.sin(Math.min(Y10, o59));
    }
    {
      const i48 = r5(c6.get(), t71);
      return e68.setAltitude(i48, this._filteredSurfaceElevation), x2(s71, i48);
    }
  }
  _minimumAscendVelocity() {
    return this.view.state.constraints.collision.enabled ? 0 : tt2;
  }
  _computeVelocities(t71) {
    const e68 = this._filteredSurfaceElevation, a61 = e68 + s6(this.view.spatialReference).radius, { camera: r55, isGlobal: o58 } = this.view.state, s71 = c6.get(), n61 = this._getPointAbsoluteSurfaceElevation(r55.eye, e68, s71), c44 = this._clampedDistanceToSurface(e68, s71), m46 = r55.width / 2, l45 = $6 * r55.width, h36 = $6 * r55.width, p48 = c44 * Math.tan(0.5 * r55.fovX) / m46, d44 = p48 / a61, u46 = p48 / this._computeHeadingRotateRadius(s71), _26 = n61 - e68;
    return { pan: (o58 ? d44 : p48) * l45 * t71, ascend: Math.max(this._minimumAscendVelocity() * t71, 2 ** (l45 * t71 / m46) * _26 - _26), zoom: 2 ** (l45 * t71 / m46) * c44 - c44, rotate: e12(u46 * h36, et2, it3) * t71 };
  }
  _applyDisabledMovementTypes(t71) {
    null == this.disableMovements || void 0 !== this.disableMovements.mode && this.view.state.viewingMode !== this.disableMovements.mode || (t71.zoom = this.disableMovements.zoom ? 0 : t71.zoom, t71.ascend = this.disableMovements.ascend ? 0 : t71.ascend, t71.pan.enabled = !this.disableMovements.pan, this.disableMovements.pan && o6(t71.pan.matrix), t71.rotate.enabled = !this.disableMovements.rotate, this.disableMovements.rotate && o6(t71.rotate.matrix));
  }
  static activatesFor(t71, e68) {
    const i47 = i13(e68, t71.navigation.gamepad, Q10);
    return !("end" === e68.action || s29(i47));
  }
};
e([y2({ constructOnly: true })], J5.prototype, "gamepadDevice", void 0), e([y2({ constructOnly: true })], J5.prototype, "disableMovements", void 0), J5 = e([a4("esri.views.3d.state.controllers.GamepadKeyboardController")], J5);
var Q10 = { translation: [0, 0, 0], heading: 0, tilt: 0, zoom: 0 };
var W5 = 80;
var Y10 = h3(W5);
var $6 = 0.75;
var tt2 = 5;
var et2 = h3(30);
var it3 = h3(80);
var at2 = { zoom: 0, ascend: 0, pan: { enabled: false, matrix: e15() }, rotate: { enabled: false, matrix: e15() } };
var rt2 = n7();
var ot2 = n7();
var st2 = h11();
function nt2(t71) {
  t71.zoom = 0, t71.ascend = 0, t71.pan.enabled = false, o6(t71.pan.matrix), t71.rotate.enabled = false, o6(t71.rotate.matrix);
}

// node_modules/@arcgis/core/views/3d/input/handlers/GamepadNavigation.js
var l30 = class extends i12 {
  constructor(e68) {
    super(true), this._view = e68, this._watchHandles = new r(), this._handle = this.registerIncoming("gamepad", (a61) => this._handleEventGamepad(a61)), this._handle.pause();
  }
  onInstall(a61) {
    super.onInstall(a61), this._watchHandles.add([d3(() => this._view.navigation.gamepad.enabled, (a62) => {
      a62 ? this._handle.resume() : (this._handle.pause(), this._cameraControllerGamepad && (this._cameraControllerGamepad.finishController(), this._cameraControllerGamepad = null));
    }, P), d3(() => this._view.navigation.gamepad.device, (a62) => {
      this._cameraControllerGamepad && a62 && this._cameraControllerGamepad.gamepadDevice !== a62 && (this._cameraControllerGamepad.finishController(), this._cameraControllerGamepad = null);
    })]);
  }
  onUninstall() {
    this._watchHandles.removeAll(), super.onUninstall();
  }
  _handleEventGamepad(a61) {
    const e68 = this._view.navigation.gamepad.device;
    if (e68 && a61.data.device !== e68)
      return;
    const t71 = this._cameraControllerGamepad && this._cameraControllerGamepad.active;
    if (t71 || J5.activatesFor(this._view, a61.data)) {
      if (!t71) {
        const e69 = new J5({ view: this._view, gamepadDevice: a61.data.device });
        this._view.state.switchCameraController(e69) && (this._cameraControllerGamepad = e69);
      }
      this._cameraControllerGamepad && this._cameraControllerGamepad.active && this._cameraControllerGamepad.gamepadDevice === a61.data.device && this._cameraControllerGamepad.handleEventGamepad(a61.data);
    }
  }
};

// node_modules/@arcgis/core/views/3d/input/handlers/KeyboardNavigation.js
var r39;
!function(e68) {
  e68[e68.LEFT = 0] = "LEFT", e68[e68.RIGHT = 1] = "RIGHT", e68[e68.FORWARD = 2] = "FORWARD", e68[e68.BACKWARD = 3] = "BACKWARD", e68[e68.UP = 4] = "UP", e68[e68.DOWN = 5] = "DOWN", e68[e68.HEADINGLEFT = 6] = "HEADINGLEFT", e68[e68.HEADINGRIGHT = 7] = "HEADINGRIGHT", e68[e68.TILTUP = 8] = "TILTUP", e68[e68.TILTDOWN = 9] = "TILTDOWN", e68[e68.ZOOMIN = 10] = "ZOOMIN", e68[e68.ZOOMOUT = 11] = "ZOOMOUT";
}(r39 || (r39 = {}));
var i33 = class extends i12 {
  constructor(t71, a61) {
    super(true), this._view = t71, this._disableMovements = { pan: true, zoom: false, ascend: true, rotate: false, mode: l8.Local }, this._keyToNumber = { [a61.left]: r39.LEFT, [a61.right]: r39.RIGHT, [a61.forward]: r39.FORWARD, [a61.backward]: r39.BACKWARD, [a61.up]: r39.UP, [a61.down]: r39.DOWN, [a61.headingLeft]: r39.HEADINGLEFT, [a61.headingRight]: r39.HEADINGRIGHT, [a61.tiltUp]: r39.TILTUP, [a61.tiltDown]: r39.TILTDOWN, [a61.zoomIn]: r39.ZOOMIN, [a61.zoomOut]: r39.ZOOMOUT }, this.registerIncoming("key-down", null, (e68) => this._handleKeyDown(e68)), this.registerIncoming("key-up", null, (e68) => this._handleKeyUp(e68)), this.registerIncoming("blur", null, () => this._handleStop()), this._visibilityHandle = e27((e68) => e68 ? null : this._handleStop());
  }
  onUninstall() {
    var _a;
    (_a = this._visibilityHandle) == null ? void 0 : _a.remove(), this._handleStop();
  }
  _handleKeyDown(e68) {
    if (e68.data.native.ctrlKey || e68.data.native.metaKey)
      return;
    const a61 = this._keyToNumber[e68.data.key];
    null != a61 && (this._cameraControllerKeyboard && this._cameraControllerKeyboard.active || (this._cameraControllerKeyboard = new J5({ view: this._view, disableMovements: this._disableMovements }), this._view.state.switchCameraController(this._cameraControllerKeyboard)), this._cameraControllerKeyboard.active && (this._cameraControllerKeyboard.activateDirection(a61), e68.stopPropagation()));
  }
  _handleStop() {
    var _a;
    ((_a = this._cameraControllerKeyboard) == null ? void 0 : _a.active) && (this._cameraControllerKeyboard.finishController(), this._cameraControllerKeyboard = null);
  }
  _handleKeyUp(e68) {
    if (e68.data.native.ctrlKey || e68.data.native.metaKey)
      return;
    const t71 = this._keyToNumber[e68.data.key];
    null != t71 && this._cameraControllerKeyboard && this._cameraControllerKeyboard.active && (this._cameraControllerKeyboard.deactivateDirection(t71), e68.stopPropagation());
  }
};

// node_modules/@arcgis/core/views/3d/input/handlers/MouseWheelZoom.js
var i34 = class extends i12 {
  constructor(e68, t71) {
    super(true), this._view = e68, this.registerIncoming("mouse-wheel", t71, (e69) => this._handleMouseWheel(e69));
  }
  _handleMouseWheel(r55) {
    if (!this._view.navigation.mouseWheelZoomEnabled)
      return;
    const i47 = r55.data;
    this._cameraController && this._cameraController.active || (this._cameraController = this._view.state.isGlobal ? new x20({ view: this._view, mode: "interaction" }) : new U12({ view: this._view, mode: "interaction" }), this._view.state.switchCameraController(this._cameraController)), this._cameraController.zoomStep(-1 / 60 * i47.deltaY, i4(i47.x, i47.y)), r55.preventDefault(), r55.stopPropagation();
  }
};

// node_modules/@arcgis/core/views/3d/input/util.js
var t50 = class {
  constructor(t71) {
    this._gain = t71;
  }
  reset(t71) {
    this._value = t71;
  }
  set gain(t71) {
    this._gain = t71;
  }
  get value() {
    return void 0 === this._value ? 0 : this._value;
  }
  update(t71) {
    void 0 === this._value ? this._value = t71 : this._value = this._gain * t71 + (1 - this._gain) * this._value;
  }
};

// node_modules/@arcgis/core/views/3d/state/controllers/momentum/MomentumController.js
var p31 = class extends a36 {
  constructor() {
    super(...arguments), this._beginCamera = new it(), this._elapsedTimeSec = 0, this.constraintOptions = new r35(L11.ALL, O18.PAN, 0, this._beginCamera);
  }
  initialize() {
    this.constraintOptions.interactionType = this.interactionType, this.viewAnimation = new a19();
  }
  get steppingFinished() {
    return this.momentum.isFinished(this._elapsedTimeSec);
  }
  onControllerStart(t71) {
    this._beginCamera.copyFrom(t71), super.onControllerStart(t71);
  }
  stepController(t71, e68) {
    e68.copyViewFrom(this._beginCamera), this._elapsedTimeSec += t71, this.momentumStep(this._elapsedTimeSec, e68), E24(this.view, e68, this.constraintOptions);
  }
};
p31 = e([a4("esri.views.3d.state.controllers.momentum.MomentumController")], p31);

// node_modules/@arcgis/core/views/3d/state/controllers/momentum/PanPlanarMomentumController.js
var c32 = class extends p31 {
  constructor(t71) {
    super(t71), this.interactionType = O18.PAN, this._tmpPan = n7();
  }
  momentumStep(t71, o58) {
    const r55 = this.momentum.value(t71);
    g2(this._tmpPan, this.momentum.direction, r55), o58.eye = e11(a38, o58.eye, this._tmpPan), o58.center = e11(a38, o58.center, this._tmpPan), this.constraintOptions.interactionDirection = this._tmpPan;
  }
};
e([y2({ constructOnly: true })], c32.prototype, "momentum", void 0), c32 = e([a4("esri.views.3d.state.controllers.momentum.PanPlanarMomentumController")], c32);
var a38 = n7();

// node_modules/@arcgis/core/views/3d/state/controllers/momentum/PanSphericalMomentumController.js
var p32 = n7();
var u31 = n7();
var l31 = class extends p31 {
  constructor(o58) {
    super(o58), this.interactionType = O18.PAN;
  }
  momentumStep(o58, t71) {
    const s71 = this.momentum.value1(o58), i47 = this.momentum.value2(o58);
    r5(u31, t71.eye), z2(u31, u31), _(this.momentum.axis2, u31, this.momentum.axis1), qt(t71, p32, this.momentum.axis1, s71, this.momentum.axis2, i47);
  }
};
e([y2({ constructOnly: true })], l31.prototype, "momentum", void 0), l31 = e([a4("esri.views.3d.state.controllers.momentum.PanSphericalMomentumController")], l31);

// node_modules/@arcgis/core/views/3d/state/controllers/momentum/RotationMomentumController.js
var c33 = class extends p31 {
  set center(t71) {
    this._set("center", t5(t71));
  }
  set axis(t71) {
    this._set("axis", t5(t71));
  }
  constructor(t71) {
    super(t71), this.interactionType = O18.TUMBLE;
  }
  momentumStep(t71, o58) {
    const r55 = this.momentum.value(t71);
    ct2(o58, this.center, m32(this.axis, r55));
  }
};
e([y2({ constructOnly: true })], c33.prototype, "momentum", void 0), e([y2({ constructOnly: true })], c33.prototype, "center", null), e([y2({ constructOnly: true })], c33.prototype, "axis", null), c33 = e([a4("esri.views.3d.state.controllers.momentum.RotationMomentumController")], c33);

// node_modules/@arcgis/core/views/3d/state/controllers/momentum/ZoomPlanarMomentumController.js
var p33 = class extends p31 {
  set zoomCenter(t71) {
    this._set("zoomCenter", t5(t71));
  }
  constructor(t71) {
    super(t71), this.interactionType = O18.ZOOM, this.constraintOptions.interactionDirection = n7();
  }
  momentumStep(t71, o58) {
    const { interactionDirection: r55 } = this.constraintOptions;
    if (!r55)
      return;
    r5(r55, o58.eye);
    const i47 = this.momentum.valueDelta(0, t71);
    ut(o58, this.zoomCenter, i47, this.view.state.constraints.minimumPoiDistance), J(r55, o58.eye, r55);
  }
};
e([y2({ constructOnly: true })], p33.prototype, "momentum", void 0), e([y2({ constructOnly: true })], p33.prototype, "zoomCenter", null), p33 = e([a4("esri.views.3d.state.controllers.momentum.ZoomPlanarMomentumController")], p33);

// node_modules/@arcgis/core/views/3d/state/controllers/momentum/ZoomSphericalMomentumController.js
var C15 = class extends p31 {
  set screenCenter(t71) {
    this._set("screenCenter", i4(t71[0], t71[1]));
  }
  set sceneCenter(t71) {
    this._set("sceneCenter", t5(t71));
  }
  constructor(t71) {
    super(t71), this.interactionType = O18.ZOOM, this.radius = 0, this._tmpSceneCenter = n7(), this._tmpZoomAxisAngle = s52(), this._sphere = w6();
  }
  initialize() {
    this._sphere[3] = this.radius;
  }
  momentumStep(t71, e68) {
    const s71 = this.momentum.valueDelta(0, t71);
    ft(this._sphere, e68, s71), this.constraintOptions.interactionType = O18.ZOOM, E24(this.view, e68, this.constraintOptions), wt(this._sphere, e68, this.screenCenter, this._tmpSceneCenter), l28(this.sceneCenter, this._tmpSceneCenter, this._tmpZoomAxisAngle), ct2(e68, Z(this._sphere), this._tmpZoomAxisAngle), this.constraintOptions.interactionType = O18.PAN;
  }
};
e([y2({ constructOnly: true })], C15.prototype, "momentum", void 0), e([y2({ constructOnly: true })], C15.prototype, "screenCenter", null), e([y2({ constructOnly: true })], C15.prototype, "sceneCenter", null), e([y2({ constructOnly: true })], C15.prototype, "radius", void 0), C15 = e([a4("esri.views.3d.state.controllers.momentum.ZoomSphericalMomentumController")], C15);

// node_modules/@arcgis/core/views/navigation/FilteredValue.js
var e44 = class {
  constructor(e68) {
    this._gain = e68;
  }
  update(e68) {
    void 0 !== this.filteredValue ? this.filteredValue = (1 - this._gain) * this.filteredValue + this._gain * e68 : this.filteredValue = e68;
  }
  reset() {
    this.filteredValue = void 0;
  }
  get hasFilteredValue() {
    return void 0 !== this.filteredValue;
  }
};

// node_modules/@arcgis/core/views/navigation/PanSphericalMomentumEstimator.js
var m34 = 1e-5;
var u32 = class extends t27 {
  constructor(t71, e68, i47, s71, a61, l45 = 0, n61) {
    super(t71, e68, i47), this._angularVelocity1 = s71, this.axis1 = a61, this.angularVelocity2 = l45, this.axis2 = n61;
  }
  value1(t71) {
    return super.valueFromInitialVelocity(this._angularVelocity1, t71);
  }
  value2(t71) {
    return super.valueFromInitialVelocity(this.angularVelocity2, t71);
  }
};
var o43 = class {
  constructor(e68 = 300, i47 = 12, s71 = 0.84) {
    this._minimumInitialVelocity = e68, this._stopVelocity = i47, this._friction = s71, this.enabled = true, this._tmpAxis1 = n7(), this._tmpAxis2 = n7(), this._tmpAngles = n13(), this._time = new t26(0.3), this._screen = [new t26(0.4), new t26(0.4)], this._angle1 = new e44(0.6), this._angle2 = new e44(0.6), this._axis1 = n7(), this._axis2 = n7(), this._lastScene = n7();
  }
  addMomentumDirectRotation(t71, a61, n61, r55, h36, _26) {
    if (this.enabled) {
      if (this._time.hasLastValue()) {
        if (this._time.computeDelta(n61) < 0.01)
          return;
        let t72 = At(this._lastScene, a61, this._tmpAxis2, r55, h36, _26);
        this._angle2.update(0), v4(this._tmpAxis2) < m34 ? t72 = 0 : z2(this._axis1, this._tmpAxis2), this._angle1.update(t72), r5(this._lastScene, a61);
      }
      this._screen[0].update(t71[0]), this._screen[1].update(t71[1]), this._time.update(n61);
    }
  }
  addMomentumPreserveHeading(t71, a61, l45, r55, h36, _26, u46) {
    if (this.enabled) {
      if (this._time.hasLastValue()) {
        if (this._time.computeDelta(l45) < 0.01)
          return;
        Gt(this._lastScene, a61, this._tmpAxis2, this._tmpAxis1, this._tmpAngles, r55, h36, _26, u46, false), v4(this._tmpAxis2) < m34 ? (this._angle1.update(0), this._angle2.update(0)) : (this._angle1.update(this._tmpAngles[1]), this._angle2.update(this._tmpAngles[0]), z2(this._axis1, this._tmpAxis1), z2(this._axis2, this._tmpAxis2)), r5(this._lastScene, a61);
      }
      this._screen[0].update(t71[0]), this._screen[1].update(t71[1]), this._time.update(l45);
    }
  }
  reset() {
    this._screen[0].reset(), this._screen[1].reset(), this._angle1.reset(), this._angle2.reset(), this._time.reset();
  }
  evaluateMomentum() {
    if (!this.enabled || !this._screen[0].hasFilteredDelta())
      return null;
    const t71 = this._screen[0].filteredDelta, e68 = this._screen[1].filteredDelta, i47 = null == t71 || null == e68 ? null : Math.sqrt(t71 * t71 + e68 * e68), s71 = this._time.filteredDelta, a61 = null == i47 || null == s71 ? 0 : i47 / s71;
    return Math.abs(a61) < this._minimumInitialVelocity ? null : this.createMomentum(a61, this._stopVelocity, this._friction);
  }
  createMomentum(t71, e68, i47) {
    const s71 = this._time.filteredDelta, a61 = this._angle1.filteredValue, l45 = this._angle2.filteredValue, n61 = null == s71 || null == l45 ? 0 : l45 / s71;
    return new u32(t71, e68, i47, null == s71 || null == a61 ? 0 : a61 / s71, this._axis1, n61, this._axis2);
  }
};

// node_modules/@arcgis/core/views/3d/state/controllers/PinchAndPanControllerGlobal.js
var rt3 = class extends n42 {
  constructor() {
    super(...arguments), this._smoothRotation = new t50(0.05), this._rotationAxis = n7(), this._beginAngle = 0, this._beginHeading = 0, this._panningPlane = E6(), this._beginRadius = 0, this._smoothScaling = new t50(0.05), this._zoomCenterScreen = i4(), this._zoomMomentumEstimator = new s27(), this._rotationMomentumEstimator = new a21(), this._panSphericalMomentumEstimator = new o43(), this._panPlanarMomentumEstimator = new c11(), this._adjustedSphere = w6(), this._tmp3d = n7(), this._tmpScreenPointArray = i4(), this._beginScreenPoint = i4(), this._beginScenePoint = n7(), this._screenPickPoint = i4(), this._scenePickPoint = n7(), this._navMode = yt.Horizontal, this._sphere = w6(), this._pointerCount = 0, this._tmpInteractionDirection = n7(), this._beginCamera = new it(), this._constraintOptions = new r35(L11.ALL, O18.NONE, 0, this._beginCamera);
  }
  get _intersectionHelper() {
    return this.view.sceneIntersectionHelper;
  }
  begin(t71) {
    if (!this.active)
      return;
    this._zoomMomentumEstimator.enabled = this._rotationMomentumEstimator.enabled = this._panPlanarMomentumEstimator.enabled = this._panSphericalMomentumEstimator.enabled = this.view.navigation.momentumEnabled, this._beginHeading = -s19.normalize(h3(this.view.camera.heading)), this._beginRadius = t71.radius, this._pointerCount = t71.pointers.size, this._beginAngle = t71.angle, this._smoothRotation.reset(), d6(t71.center, this._screenPickPoint), r11(this._beginScreenPoint, this._screenPickPoint);
    const n61 = s6(this.view.spatialReference), o58 = vt(this._intersectionHelper, this.startCamera, this._screenPickPoint, n61, N12.Silhouette, 0 === this.view.map.ground.opacity ? at : {});
    null != o58.scenePickPoint && (this._scenePickPoint = o58.scenePickPoint, this._sphere = o58.sphere, r5(this._beginScenePoint, this._scenePickPoint), this._navMode = jt(this.startCamera, this._screenPickPoint, this.view.renderCoordsHelper, this.view.viewingMode), this._navMode === yt.Vertical && this._preparePlanarPanMode(t71, o58.hasGeometryIntersection), this._beginCamera.copyFrom(this.startCamera));
  }
  update(t71) {
    if (!this.active)
      return;
    this.currentCamera.copyFrom(this.startCamera);
    const i47 = t71.pointers.size > 1;
    this._navMode === yt.Horizontal ? (i47 && this._zoomSpherical(t71), this._panningSpherical(t71), i47 && this._rotateSpherical(t71)) : (i47 && this._zoomPlanar(t71), this._panningPlanar(t71), i47 && this._rotatePlanar(t71)), this.commitCamera();
  }
  end(t71) {
    t71.pointers.size === this._pointerCount && this.update(t71), this.finishController();
    const i47 = this._zoomMomentumEstimator.evaluateMomentum();
    if (i47)
      return this._navMode === yt.Horizontal ? new C15({ view: this.view, momentum: i47, screenCenter: this._zoomCenterScreen, sceneCenter: this._beginScenePoint, radius: this._sphere[3] }) : new p33({ view: this.view, momentum: i47, zoomCenter: this._beginScenePoint });
    const e68 = this._rotationMomentumEstimator.evaluateMomentum();
    if (e68)
      return new c33({ view: this.view, momentum: e68, center: Z(this._sphere), axis: this._rotationAxis });
    if (this._navMode === yt.Horizontal) {
      const t72 = this._panSphericalMomentumEstimator.evaluateMomentum();
      if (t72)
        return new l31({ view: this.view, momentum: t72 });
    } else {
      const t72 = this._panPlanarMomentumEstimator.evaluateMomentum();
      if (t72)
        return new c32({ view: this.view, momentum: t72 });
    }
    return null;
  }
  _preparePlanarPanMode(t71, i47) {
    const e68 = j2(this._tmp3d, this.startCamera.viewForward);
    j5(this._scenePickPoint, e68, this._panningPlane);
    const r55 = i4(this._screenPickPoint[0], 0), a61 = n7(), m46 = s8(this.startCamera.eye);
    this._adjustedSphere[3] = m46 < this._sphere[3] ? m46 - 100 : this._sphere[3], wt(this._adjustedSphere, this.startCamera, r55, a61);
    const v32 = x4();
    this.startCamera.projectToRenderScreen(a61, v32);
    const C28 = n7(), M21 = n7(), b22 = n7();
    e11(C28, this._scenePickPoint, this.currentCamera.eye);
    const f48 = s8(C28);
    z2(C28, C28);
    const j26 = tt * Math.max(Math.abs(this.view.camera.position.z), et), E38 = this.view._stage.renderView.getMinimalDepthForArea(null, this._screenPickPoint[0], this._screenPickPoint[1], this.view.state.camera, Y8);
    let O32 = null != E38 ? E38 : j26;
    O32 = i47 ? Math.min(O32, f48) : O32, r5(b22, u4(M21, this.currentCamera.eye, g2(M21, C28, O32))), this._panningPlane[3] = -P3(F2(this._panningPlane), b22), this.startCamera.center = u4(M21, this.startCamera.eye, g2(M21, this.startCamera.viewForward, O32));
    const y26 = d6(t71.center, this._tmpScreenPointArray);
    mt(this._panningPlane, this.startCamera, y26, this._beginScenePoint);
  }
  _zoomSpherical(t71) {
    const i47 = this._beginRadius / t71.radius, e68 = 1875e-6 * Math.min(Math.max(t71.radius, 40), 120);
    this._smoothScaling.gain = e68, this._smoothScaling.update(i47), ft(this._sphere, this.currentCamera, this._smoothScaling.value), d6(t71.center, this._zoomCenterScreen), this._zoomMomentumEstimator.add(this._smoothScaling.value, 1e-3 * t71.timestamp), this._constraintOptions.interactionType = O18.ZOOM, this._constraintOptions.interactionFactor = y15(t71.radius - this._beginRadius), E24(this.view, this.currentCamera, this._constraintOptions);
  }
  _panningSpherical(t71) {
    const i47 = d6(t71.center, this._tmpScreenPointArray);
    wt(this._sphere, this.currentCamera, i47, this._tmp3d), Ct(this._beginScenePoint, P3(this.currentCamera.up, this._beginScenePoint), this._sphere[3], this._beginHeading, this.view.camera.tilt, this.startCamera) ? (Vt(this._sphere, this.currentCamera, this._beginScenePoint, this._tmp3d, this._beginHeading, this.view.camera.tilt, false), this._panSphericalMomentumEstimator.addMomentumPreserveHeading(i47, this._tmp3d, 1e-3 * t71.timestamp, this.startCamera, this._sphere, this._beginHeading, this.view.camera.tilt)) : (Ft(this._sphere, this.currentCamera, this._beginScenePoint, this._tmp3d, this.view.camera.tilt, false), this._panSphericalMomentumEstimator.addMomentumDirectRotation(i47, this._tmp3d, 1e-3 * t71.timestamp, this.startCamera, this._sphere[3], this.view.camera.tilt)), this._constraintOptions.interactionType = O18.PAN, this._constraintOptions.interactionFactor = y15(m9(this._screenPickPoint, i47)), E24(this.view, this.currentCamera, this._constraintOptions);
  }
  _rotateSpherical(t71) {
    z2(this._rotationAxis, this._scenePickPoint), this.currentCamera.aboveGround || j2(this._rotationAxis, this._rotationAxis);
    const i47 = this._smoothRotation.value, e68 = i47 + st(t71.angle - i47), n61 = 125e-5 * Math.min(Math.max(t71.radius, 40), 120);
    this._smoothRotation.gain = n61, this._smoothRotation.update(e68);
    const s71 = this._smoothRotation.value - this._beginAngle;
    this._rotationMomentumEstimator.add(s71, 1e-3 * t71.timestamp), ct2(this.currentCamera, Z(this._sphere), m32(this._rotationAxis, s71)), this._constraintOptions.interactionType = O18.TUMBLE, this._constraintOptions.interactionFactor = y15(t71.radius * e68), E24(this.view, this.currentCamera, this._constraintOptions);
  }
  _panningPlanar(t71) {
    const i47 = d6(t71.center, this._tmpScreenPointArray);
    mt(this._panningPlane, this.currentCamera, i47, this._tmp3d) && (zt(this.currentCamera, this._beginScenePoint, this._tmp3d), this._panPlanarMomentumEstimator.add(i47, this._tmp3d, 1e-3 * t71.timestamp), this._constraintOptions.interactionType = O18.PAN, this._constraintOptions.interactionFactor = y15(m9(this._beginScreenPoint, i47)), this._constraintOptions.interactionDirection = this.view.renderCoordsHelper.worldUpAtPosition(this.currentCamera.eye, this._tmpInteractionDirection), E24(this.view, this.currentCamera, this._constraintOptions), this._constraintOptions.interactionDirection = null);
  }
  _zoomPlanar(t71) {
    const i47 = this._beginRadius / t71.radius, e68 = 1875e-6 * Math.min(Math.max(t71.radius, 40), 120);
    this._smoothScaling.gain = e68, this._smoothScaling.update(i47), this._zoomMomentumEstimator.add(this._smoothScaling.value, 1e-3 * t71.timestamp), ut(this.currentCamera, this._beginScenePoint, this._smoothScaling.value, this.view.state.constraints.minimumPoiDistance), this._constraintOptions.interactionType = O18.ZOOM, this._constraintOptions.interactionFactor = y15(t71.radius - this._beginRadius), E24(this.view, this.currentCamera, this._constraintOptions);
  }
  _rotatePlanar(t71) {
    r5(this._rotationAxis, this._beginScenePoint), this.currentCamera.aboveGround || j2(this._rotationAxis, this._rotationAxis);
    const i47 = this._smoothRotation.value;
    let e68 = t71.angle - i47;
    e68 = st(e68);
    const n61 = i47 + e68, s71 = 125e-5 * Math.min(Math.max(t71.radius, 40), 120);
    this._smoothRotation.gain = s71, this._smoothRotation.update(n61);
    const o58 = this._smoothRotation.value - this._beginAngle;
    this._rotationMomentumEstimator.add(o58, 1e-3 * t71.timestamp), ct2(this.currentCamera, Z(this._sphere), m32(this._rotationAxis, o58)), this._constraintOptions.interactionType = O18.TUMBLE, this._constraintOptions.interactionFactor = y15(t71.radius * o58), E24(this.view, this.currentCamera, this._constraintOptions);
  }
};
rt3 = e([a4("esri.views.3d.state.controllers.PinchAndPanControllerGlobal")], rt3);

// node_modules/@arcgis/core/views/3d/state/controllers/PinchAndPanControllerLocal.js
var J6 = r4(0, 0, 1);
var K8 = class extends n42 {
  constructor() {
    super(...arguments), this._rotationValueSmooth = new t50(0.05), this._scalingValueSmooth = new t50(0.05), this._planeHorizontal = E6(), this._planeVertical = E6(), this._rotationMomentumEstimator = new a21(), this._panMomentumEstimator = new c11(300, 12, 0.9), this._zoomMomentumEstimator = new s27(), this._beginRadius = 0, this._beginCenter = n7(), this._beginAngle = 0, this._tmpPoints = [], this._navMode = yt.Horizontal, this._beginCenterScreen = i4(), this._tmpCentroid3d = n7(), this._tmpCentroid2d = i4(), this._tmp2d = i4(), this._pointerCount = 0, this._beginCamera = new it(), this._constraintOptions = new r35(L11.ALL, O18.NONE, 0, this._beginCamera);
  }
  begin(t71) {
    if (!this.active)
      return;
    const i47 = this.view.navigation.momentumEnabled;
    this._zoomMomentumEstimator.enabled = i47, this._rotationMomentumEstimator.enabled = i47, this._panMomentumEstimator.enabled = i47, this._beginRadius = t71.radius, this._pointerCount = t71.pointers.size, this._beginAngle = t71.angle, this._rotationValueSmooth.reset(), this._scalingValueSmooth.reset(), d6(t71.center, this._beginCenterScreen), _5(J6, 0, this._planeHorizontal);
    const n61 = n7(), s71 = this._intersectionHelper.intersectScreenFreePointFallback(this._beginCenterScreen, n61, 0 === this.view.map.ground.opacity ? at : {}), u46 = n7();
    j2(u46, this.startCamera.viewForward);
    const d44 = n7();
    r5(d44, J6);
    const C28 = P3(u46, d44);
    this._navMode = jt(this.startCamera, this._beginCenterScreen, this.view.renderCoordsHelper, this.view.viewingMode);
    const w27 = Math.min(tt, 1 / Math.abs(P3(d44, this.startCamera.viewForward))) * Math.max(Math.abs(this.view.camera.position.z), et);
    O6(this._planeHorizontal, this._planeHorizontal, n61), this.startCamera.aboveGround || q3(this._planeHorizontal, this._planeHorizontal);
    const f48 = n7(), j26 = n7(), P20 = n7();
    e11(f48, n61, this.currentCamera.eye);
    const V17 = s8(f48);
    if (z2(f48, f48), this._navMode === yt.Vertical) {
      g2(d44, d44, C28), e11(F2(this._planeVertical), u46, d44), z2(F2(this._planeVertical), F2(this._planeVertical)), O6(this._planeVertical, this._planeVertical, n61);
      const i48 = this.view._stage.renderView.getMinimalDepthForArea(o33(this.view), this._beginCenterScreen[0], this._beginCenterScreen[1], this.view.state.camera, Y8);
      let e68 = null != i48 ? i48 : w27;
      e68 = s71 ? Math.min(e68, V17) : e68, r5(P20, u4(j26, this.currentCamera.eye, g2(j26, f48, e68))), this._planeVertical[3] = -P3(F2(this._planeVertical), P20), this._computePlanePoints(t71.pointers, this._planeVertical, this.startCamera, this._tmpPoints), ht2(this._tmpPoints, this._beginCenter);
    } else {
      const i48 = s71 ? V17 : w27;
      r5(P20, u4(j26, this.currentCamera.eye, g2(j26, f48, i48))), this._planeHorizontal[3] = -P3(F2(this._planeHorizontal), P20), this._computePlanePoints(t71.pointers, this._planeHorizontal, this.startCamera, this._tmpPoints), ht2(this._tmpPoints, this._beginCenter);
    }
    this._beginCamera.copyFrom(this.startCamera);
  }
  update(t71) {
    if (!this.active)
      return;
    this.currentCamera.copyFrom(this.startCamera);
    const i47 = t71.pointers.size > 1, n61 = this._navMode === yt.Horizontal ? this._planeHorizontal : this._planeVertical, o58 = this._beginCenter;
    if (i47) {
      const i48 = this._beginRadius / t71.radius, e68 = 1875e-6 * Math.min(Math.max(t71.radius, 40), 120);
      this._scalingValueSmooth.gain = e68, this._scalingValueSmooth.update(i48), ut(this.currentCamera, o58, this._scalingValueSmooth.value, this.view.state.constraints.minimumPoiDistance), this._zoomMomentumEstimator.add(this._scalingValueSmooth.value, 1e-3 * t71.timestamp), this._constraintOptions.interactionType = O18.ZOOM, this._constraintOptions.interactionFactor = y15(Math.abs(t71.radius - this._beginRadius)), E24(this.view, this.currentCamera, this._constraintOptions);
    }
    if (this._computePlanePoints(t71.pointers, n61, this.currentCamera, this._tmpPoints), ht2(this._tmpPoints, this._tmpCentroid3d), d6(t71.center, this._tmpCentroid2d), zt(this.currentCamera, o58, this._tmpCentroid3d), this._panMomentumEstimator.add(this._tmpCentroid2d, this._tmpCentroid3d, 1e-3 * t71.timestamp), this._constraintOptions.interactionType = O18.PAN, this._constraintOptions.interactionFactor = y15(m9(this._beginCenterScreen, this._tmpCentroid2d)), E24(this.view, this.currentCamera, this._constraintOptions), i47) {
      const i48 = o58, e68 = this._rotationValueSmooth.value, n62 = e68 + st(t71.angle - e68), s71 = 125e-5 * Math.min(Math.max(t71.radius, 40), 120);
      this._rotationValueSmooth.gain = s71, this._rotationValueSmooth.update(n62);
      const r55 = this._rotationValueSmooth.value - this._beginAngle;
      this._rotationMomentumEstimator.add(r55, 1e-3 * t71.timestamp);
      const a61 = F2(this._planeHorizontal);
      ct2(this.currentCamera, i48, m32(a61, r55)), this._constraintOptions.interactionType = O18.TUMBLE, this._constraintOptions.interactionFactor = y15(Math.abs(t71.radius * r55)), E24(this.view, this.currentCamera, this._constraintOptions);
    }
    this.commitCamera();
  }
  end(t71) {
    t71.pointers.size === this._pointerCount && this.update(t71), this.finishController();
    const i47 = this._zoomMomentumEstimator.evaluateMomentum();
    if (i47)
      return new p33({ view: this.view, momentum: i47, zoomCenter: this._beginCenter });
    const e68 = this._rotationMomentumEstimator.evaluateMomentum();
    if (e68)
      return new c33({ view: this.view, momentum: e68, center: this._beginCenter, axis: F2(this._planeHorizontal) });
    const n61 = this._panMomentumEstimator.evaluateMomentum();
    return n61 ? new c32({ view: this.view, momentum: n61 }) : null;
  }
  _computePlanePoints(t71, i47, e68, n61) {
    n61.length = t71.size;
    const s71 = this._tmp2d;
    let o58 = 0;
    return t71.forEach((t72) => {
      s71[0] = t72.x, s71[1] = t72.y, void 0 === n61[o58] && (n61[o58] = n7()), mt(i47, e68, s71, n61[o58]), o58 += 1;
    }), n61;
  }
  get _intersectionHelper() {
    return this.view.sceneIntersectionHelper;
  }
};
K8 = e([a4("esri.views.3d.state.controllers.PinchAndPanControllerLocal")], K8);

// node_modules/@arcgis/core/views/3d/input/handlers/PinchAndPanNavigation.js
var i35 = class extends i12 {
  constructor(t71, e68, s71) {
    super(true), this._view = t71, this.pointerAction = e68, this._lastEndTimestamp = 0, this._lastTimestamp = 0, this.registerIncoming("drag", s71, (t72) => this._handleDrag(t72));
  }
  _handleDrag(t71) {
    if ("mouse" === t71.data.pointerType && !r21(t71.data, this.pointerAction))
      return;
    const e68 = t71.timestamp - this._lastEndTimestamp, s71 = 40, i47 = this._momentum && this._momentum.active && e68 < s71;
    switch (t71.data.action) {
      case "start":
      case "update":
        if (i47)
          break;
        this._controller && this._controller.active ? t71.data.timestamp - this._lastTimestamp > 2 && (this._controller.update(t71.data), this._lastTimestamp = t71.timestamp) : this._startController(t71);
        break;
      case "end":
      case "removed":
        this._endController(t71, true);
        break;
      case "added":
        this._endController(t71, false), this._startController(t71);
    }
    t71.stopPropagation();
  }
  _endController(t71, e68) {
    if (this._controller && this._controller.active) {
      this._lastEndTimestamp = t71.timestamp;
      const s71 = this._controller.end(t71.data);
      e68 && s71 && (this._momentum = s71, this._view.state.switchCameraController(this._momentum));
    }
    this._controller = null;
  }
  _startController(t71) {
    this._controller = this._createController(), this._view.state.switchCameraController(this._controller), this._controller.begin(t71.data), this._lastTimestamp = t71.timestamp;
  }
  _createController() {
    return this._view.state.isGlobal ? new rt3({ view: this._view }) : new K8({ view: this._view });
  }
};

// node_modules/@arcgis/core/views/3d/input/handlers/PointerDownCancelAnimation.js
var e45 = class extends i12 {
  constructor(t71, e68) {
    super(true), this.view = t71, this.registerIncoming("pointer-down", e68, () => this.view.state.stopActiveCameraController());
  }
};

// node_modules/@arcgis/core/views/3d/input/handlers/SingleKey.js
var e46 = class extends i12 {
  constructor(t71, e68) {
    super(true), this.key = t71, this.registerIncoming("key-down", e68, (t72) => this._handleKeyDown(t72));
  }
  _handleKeyDown(t71) {
    t71.data.key === this.key && (this.activate(), t71.stopPropagation());
  }
};

// node_modules/@arcgis/core/views/3d/input/handlers/SingleKeyResetHeading.js
var t51 = class extends e46 {
  constructor(e68, t71, i47) {
    super(t71, i47), this.view = e68;
  }
  activate() {
    this.view.goTo({ heading: 0 }).catch(() => {
    });
  }
};

// node_modules/@arcgis/core/views/3d/input/handlers/SingleKeyResetTilt.js
var e47 = class extends e46 {
  constructor(t71, e68, i47) {
    super(e68, i47), this.view = t71;
  }
  activate() {
    this.view.goTo({ tilt: 0 }).catch(() => {
    });
  }
};

// node_modules/@arcgis/core/views/3d/input/handlers/TwoFingerTilt.js
var o44 = class extends i12 {
  constructor(e68, t71 = false) {
    super(true), this._view = e68, this._invert = t71, this.registerIncoming("vertical-two-finger-drag", (e69) => this._handleTwoFinger(e69));
  }
  _handleTwoFinger(a61) {
    var _a, _b, _c;
    const o58 = this._invert ? -1 : 1, i47 = i4(0, a61.data.delta * o58);
    switch (a61.data.action) {
      case "begin":
        (_a = this._cameraController) == null ? void 0 : _a.end(), this._cameraController = new H12({ view: this._view, pivot: V10.CENTER }), this._view.state.switchCameraController(this._cameraController), this._cameraController.begin(i47);
        break;
      case "update":
        (_b = this._cameraController) == null ? void 0 : _b.update(i47);
        break;
      case "end":
        (_c = this._cameraController) == null ? void 0 : _c.end(), this._cameraController = null;
    }
  }
};

// node_modules/@arcgis/core/views/input/recognizers/VerticalTwoFingerDrag.js
var a39 = class extends i12 {
  constructor(e68 = 20, a61 = 40) {
    super(false), this._threshold = e68, this._maxDelta = a61, this._state = "ready", this._emittedArtificalEnd2 = false, this._vertical = this.registerOutgoing("vertical-two-finger-drag"), this._artificalDrag = this.registerOutgoing("drag"), this._dragEventSeparator = new t30({ start: (t71, e69) => this._observeStart(t71, e69), update: (t71, e69, a62) => this._observeUpdate(t71, e69, a62), end: (t71, e69) => this._observeEnd(e69) }), this.registerIncoming("drag", (t71) => this._dragEventSeparator.handle(t71));
  }
  get failed() {
    return "failed" === this._state;
  }
  _observeStart(t71, e68) {
    1 === t71 && this._emittedArtificalEnd2 && (this._emittedArtificalEnd2 = false, this._artificalDrag.emit({ action: "start", button: e68.data.button, buttons: e68.data.buttons, pointerType: e68.data.pointerType, timestamp: e68.data.timestamp, pointers: e68.data.pointers, pointer: e68.data.pointer, angle: e68.data.angle, radius: e68.data.radius, center: e68.data.center }), e68.stopPropagation()), this._state = 2 === t71 ? "ready" : "failed";
  }
  _observeUpdate(t71, e68, a61) {
    if ("failed" !== this._state && 2 === t71)
      return "active" === this._state ? (this._vertical.emit({ delta: e68.data.center.y - this._thresholdReachedCenter.y, action: "update" }), void e68.stopPropagation()) : void (this._checkMovementWithinLimits(e68.data, a61.data) ? this._checkVerticalThresholdReached(e68.data, a61.data) && (this._state = "active", this._emittedArtificalEnd2 = true, this._thresholdReachedCenter = e68.data.center, this._artificalDrag.emit({ action: "end", button: e68.data.button, buttons: e68.data.buttons, pointerType: e68.data.pointerType, timestamp: e68.data.timestamp, pointers: e68.data.pointers, pointer: e68.data.pointer, angle: e68.data.angle, radius: e68.data.radius, center: e68.data.center }), this._vertical.emit({ delta: e68.data.center.y - this._thresholdReachedCenter.y, action: "begin" }), e68.stopPropagation()) : this._state = "failed");
  }
  _observeEnd(t71) {
    "active" === this._state && (this._vertical.emit({ delta: t71.data.center.y - this._thresholdReachedCenter.y, action: "end" }), this._state = "ready", t71.stopPropagation());
  }
  _checkMovementWithinLimits(t71, e68) {
    let a61 = -1 / 0, i47 = 1 / 0, r55 = -1 / 0, s71 = 1 / 0;
    for (const { x: m46, y: g23 } of e68.pointers.values())
      a61 = Math.max(a61, m46), i47 = Math.min(i47, m46), r55 = Math.max(r55, g23), s71 = Math.min(s71, g23);
    let n61 = -1 / 0, h36 = 1 / 0, d44 = -1 / 0, o58 = 1 / 0;
    for (const { x: m46, y: g23 } of t71.pointers.values())
      n61 = Math.max(n61, m46), h36 = Math.min(h36, m46), d44 = Math.max(d44, g23), o58 = Math.min(o58, g23);
    const c44 = a61 - i47, l45 = r55 - s71, p48 = n61 - h36, _26 = d44 - o58;
    return Math.abs(t71.center.x - e68.center.x) < this._threshold && Math.abs(p48 - c44) <= this._maxDelta && Math.abs(_26 - l45) <= this._maxDelta;
  }
  _checkVerticalThresholdReached(t71, e68) {
    let a61 = Math.abs(t71.center.y - e68.center.y);
    return t71.pointers.forEach((t72, i47) => {
      const r55 = e68.pointers.get(i47);
      a61 = Math.min(a61, Math.abs(t72.y - r55.y));
    }), a61 >= this._threshold;
  }
};

// node_modules/@arcgis/core/views/3d/input/SceneInputManager.js
var b15 = class extends S3 {
  destroy() {
    this.disconnect();
  }
  get primaryDragAction() {
    return this._get("primaryDragAction");
  }
  set primaryDragAction(t71) {
    "pan" !== t71 && "rotate" !== t71 || t71 === this._get("primaryDragAction") || (this._set("primaryDragAction", t71), this._updateMode());
  }
  get mode() {
    return this._get("mode");
  }
  set mode(t71) {
    "default" !== t71 && "pro" !== t71 || t71 === this._get("mode") || (this._set("mode", t71), this._updateMode());
  }
  get updating() {
    var _a;
    return !!((_a = this._inputManager) == null ? void 0 : _a.updating);
  }
  get latestPointerType() {
    var _a;
    return (_a = this._inputManager) == null ? void 0 : _a.latestPointerType;
  }
  get latestPointerLocation() {
    var _a;
    return (_a = this._inputManager) == null ? void 0 : _a.latestPointerLocation;
  }
  get multiTouchActive() {
    var _a;
    return ((_a = this._inputManager) == null ? void 0 : _a.multiTouchActive) ?? false;
  }
  disconnect() {
    this.view.viewEvents.disconnect(), this._inputManager = u(this._inputManager);
  }
  connect() {
    const t71 = this.view;
    this._source = new l14(this.view.surface, t71.input);
    const e68 = [new m14(), new r22(), new r23(), new s30(this.view.navigation), new a39()], o58 = new d12({ eventSource: this._source, recognizers: e68 });
    this._inputManager = o58, o58.installHandlers("prevent-context-menu", [new e28()], _9.INTERNAL), this._modeDragPan = new i35(t71, "primary"), this._modeDragRotate = new a37(t71, "secondary", V10.CENTER), this._modeDragZoom = new s55(t71, "tertiary");
    const i47 = { lookAround: "b", pan: { left: "ArrowLeft", right: "ArrowRight", forward: "ArrowUp", backward: "ArrowDown", up: "u", down: "j", headingLeft: "a", headingRight: "d", tiltUp: "w", tiltDown: "s", zoomIn: "+", zoomOut: "-" }, resetHeading: "n", resetTilt: "p" };
    o58.installHandlers("navigation", [new e45(t71), new s54(t71), new l30(t71), new i33(t71, i47.pan), new i34(t71), new e47(t71, i47.resetTilt), new t51(t71, i47.resetHeading), new a37(t71, "primary", V10.EYE, [i47.lookAround]), new a37(t71, "secondary", V10.CENTER, [i47.lookAround]), new i35(t71, "tertiary", [i47.lookAround]), this._modeDragRotate, this._modeDragZoom, this._modeDragPan, new o44(t71)], _9.INTERNAL), this.view.viewEvents.connect(o58), this._updateMode(), this.addHandles(d3(() => {
      var _a;
      return (_a = this.view.navigation) == null ? void 0 : _a.browserTouchPanEnabled;
    }, (t72) => {
      this._source.browserTouchPanningEnabled = !t72;
    }, P));
  }
  isModifierKeyDown(t71) {
    var _a;
    return ((_a = this._inputManager) == null ? void 0 : _a.isModifierKeyDown(t71)) ?? false;
  }
  _updateMode() {
    var _a;
    const t71 = this.mode, e68 = this.primaryDragAction, o58 = (_a = z17.get(t71)) == null ? void 0 : _a.get(e68);
    o58 && (this._modeDragPan && (this._modeDragPan.pointerAction = o58.pan), this._modeDragRotate && (this._modeDragRotate.pointerAction = o58.rotate), this._modeDragZoom && (this._modeDragZoom.pointerAction = o58.zoom));
  }
  get test() {
    return { inputManager: this._inputManager, modeDragPan: this._modeDragPan, modeDragRotate: this._modeDragRotate, modeDragZoom: this._modeDragZoom };
  }
};
e([y2()], b15.prototype, "view", void 0), e([y2({ value: "pan" })], b15.prototype, "primaryDragAction", null), e([y2({ value: "default" })], b15.prototype, "mode", null), e([y2({ readOnly: true })], b15.prototype, "updating", null), e([y2()], b15.prototype, "latestPointerType", null), e([y2()], b15.prototype, "latestPointerLocation", null), e([y2()], b15.prototype, "multiTouchActive", null), e([y2()], b15.prototype, "_inputManager", void 0), b15 = e([a4("esri.views.3d.input.SceneInputManager")], b15);
var z17 = /* @__PURE__ */ new Map();
var E27 = /* @__PURE__ */ new Map();
var k15 = /* @__PURE__ */ new Map();
E27.set("pan", { pan: "primary", rotate: "secondary", zoom: "tertiary" }), E27.set("rotate", { pan: "secondary", rotate: "primary", zoom: "tertiary" }), k15.set("pan", { pan: "primary", rotate: "tertiary", zoom: "secondary" }), k15.set("rotate", { pan: "tertiary", rotate: "primary", zoom: "secondary" }), z17.set("default", E27), z17.set("pro", k15);
var C16 = b15;

// node_modules/@arcgis/core/views/3d/layers/graphics/deconflictorDebug.js
var e48;
var n43;
var i36 = false;
var l32 = false;
var o45 = false;
var s56 = false;
var a40 = null;
function c34(t71, e68) {
  if (!l32 || !n43)
    return;
  u33();
  const i47 = n43;
  let o58 = 0;
  for (let n61 = 0; n61 < t71.accBinsNumX; n61++)
    for (let e69 = 0; e69 < t71.accBinsNumY; e69++) {
      const l45 = t71.accBins[n61][t71.accBinsNumY - 1 - e69];
      o58 += l45.length;
      const s71 = n61 * t71.accBinsSizeX, a61 = (n61 + 1) * t71.accBinsSizeX, c44 = e69 * t71.accBinsSizeY, r55 = (e69 + 1) * t71.accBinsSizeY;
      i47.fillText(l45.length.toFixed(), s71 + 5, c44 + 15), h26(s71, a61, c44, r55, "blue");
    }
  i47.fillText("total totalShownLabels: " + o58, 70, 40), i47.fillText("total visible labels: " + e68.size, 70, 50), i47.fillText("total numTests: " + t71.accNumTests, 70, 30);
}
function r40(n61) {
  o45 = t20.DECONFLICTOR_SHOW_VISIBLE, s56 = t20.DECONFLICTOR_SHOW_INVISIBLE, i36 = o45 || s56, l32 = t20.DECONFLICTOR_SHOW_GRID, a40 = null, i36 || l32 ? a40 = () => p34(n61) : e48 && (e48.parentElement.removeChild(e48), e48 = null);
}
function u33() {
  a40 && (a40(), a40 = null);
}
function p34(t71) {
  null == e48 && (e48 = document.createElement("canvas"), e48.setAttribute("id", "debugCanvas2d"), t71.surface.parentElement.style.position = "relative", t71.surface.parentElement.appendChild(e48));
  const { state: i47 } = t71, { camera: l45, pixelRatio: o58 } = i47, { width: s71, height: a61 } = l45, c44 = s71 * o58, r55 = a61 * o58;
  e48.setAttribute("width", `${c44}px`), e48.setAttribute("height", `${r55}px`), e48.setAttribute("style", `position:absolute;left:0px;top:0px;display:block;pointer-events:none;width:${s71}px;height:${a61}px`), n43 = e48.getContext("2d"), n43.clearRect(0, 0, s71, a61), n43.font = "12px Arial";
}
function h26(t71, i47, l45, o58, s71) {
  u33();
  const a61 = e48.height, c44 = n43;
  c44.beginPath(), c44.lineWidth = 1, c44.strokeStyle = s71, c44.moveTo(t71, a61 - l45), c44.lineTo(i47, a61 - l45), c44.stroke(), c44.lineTo(i47, a61 - o58), c44.stroke(), c44.lineTo(i47, a61 - l45), c44.stroke(), c44.lineTo(t71, a61 - l45), c44.stroke(), c44.lineTo(t71, a61 - l45), c44.stroke(), c44.closePath();
}
function f32(t71, e68) {
  i36 && (e68 && o45 || !e68 && s56) && h26(t71.aabr[0], t71.aabr[2], t71.aabr[1], t71.aabr[3], e68 ? "green" : "red");
}

// node_modules/@arcgis/core/views/3d/layers/graphics/Deconflictor.js
var U13 = n7();
var k16 = n11();
var H13 = n11();
var q12 = n7();
var J7 = e15();
var K9 = w6();
var Q11 = d7();
var Z7 = n7();
var $7 = u5();
var ii = class {
  constructor() {
    this.aabr = u5(), this.distance = 0, this.culled = false, this.visible = false;
  }
};
var ti = class {
  constructor(i47, t71) {
    this.graphics3DGraphic = i47, this.slicePlaneEnabled = t71, this.info = {};
  }
};
var si;
!function(i47) {
  i47[i47.Idle = 0] = "Idle", i47[i47.Process = 1] = "Process", i47[i47.Sort = 2] = "Sort", i47[i47.Deconflict = 3] = "Deconflict", i47[i47.NumStates = 4] = "NumStates";
}(si || (si = {}));
var ei = class {
  constructor() {
    this.camera = new it(), this.slicePlane = W2(), this.slicePlaneEnabled = false;
  }
  copyFrom(i47) {
    this.camera.copyFrom(i47.camera), Z2(i47.slicePlane, this.slicePlane), this.slicePlaneEnabled = i47.slicePlaneEnabled;
  }
};
var ri = class extends S3 {
  get dirty() {
    return this._dirty;
  }
  get state() {
    return this._state;
  }
  constructor(i47) {
    super(i47), this._dirty = false, this._viewState = new ei(), this._state = si.Idle, this._active = /* @__PURE__ */ new Map(), this._visible = /* @__PURE__ */ new Map(), this._iterators = new li(), this._accBinsNumX = 15, this._accBinsNumY = 20, this._accBinsSizeX = 0, this._accBinsSizeY = 0, this._accBins = null, this.accNumTests = 0;
  }
  destroy() {
    this._active.clear(), this._visible.clear(), this._iterators = null;
  }
  setDirty() {
    !this._dirty && this._active.size > 0 && (this._dirty = true, this.notifyChange("updating"));
  }
  get updating() {
    return this._state !== si.Idle || this._dirty;
  }
  get updatingProgress() {
    if (!this.updating)
      return 1;
    const i47 = this._state / si.NumStates;
    return this._dirty ? 0.5 * i47 : i47;
  }
  get running() {
    return this.view.ready && null != this.view.state && this.updating;
  }
  runTask(i47) {
    switch (this._state) {
      case si.Idle:
        this._startUpdate(), i47.madeProgress();
      case si.Process:
        if (this._state = si.Process, !this._processActiveGraphics(i47))
          return;
      case si.Sort:
        if (this._state = si.Sort, !this._sortVisibleGraphics(i47))
          return;
      case si.Deconflict:
        if (this._state = si.Deconflict, !this._deconflictVisibleGraphics(i47))
          return;
      default:
        c34(this, this._visible), this._state = si.Idle, this.notifyChange("updating");
    }
  }
  modifyGraphics(i47, t71) {
    t71 ? i47.forEach((i48) => this.addToActiveGraphics(i48)) : i47.forEach((i48) => this.removeFromActiveGraphics(i48)), this.setDirty();
  }
  layerSupportsDeconfliction(i47) {
    if (null == i47 || "object3d" !== i47.type)
      return false;
    const t71 = i47.stageObject;
    if (1 !== ((t71 == null ? void 0 : t71.geometries.length) ?? 0))
      return false;
    const s71 = t71 == null ? void 0 : t71.geometries[0], e68 = s71 == null ? void 0 : s71.material;
    return e68 instanceof Q4;
  }
  _startUpdate() {
    r40(this.view), this._dirty = false, this._viewState.copyFrom(this.viewState);
    const { fullWidth: i47, fullHeight: t71 } = this._viewState.camera;
    this._initBins(i47, t71), this._resetIterators();
  }
  addToActiveGraphics(i47) {
    i47.info[this.visibilityGroup] = new ii(), this._active.set(i47.graphics3DGraphic.graphic.uid, i47), this.setDirty();
  }
  removeFromActiveGraphics(i47) {
    this._visible.delete(i47.graphics3DGraphic.graphic.uid), ai(i47, this.visibilityGroup), delete i47.info[this.visibilityGroup], this._active.delete(i47.graphics3DGraphic.graphic.uid), this.setDirty();
  }
  _processActiveGraphics(i47) {
    const t71 = this._ensureActiveGraphicsIterator(), s71 = e14(J7, this._viewState.camera.projectionMatrix), e68 = "global" === this.view.viewingMode && 1 === this.view.map.ground.opacity && this._viewState.camera.relativeElevation > 0 ? K9 : null;
    let r55 = 0;
    for (null != e68 && (O2(Z(e68), l5, this._viewState.camera.viewMatrix), e68[3] = s6(this.view.spatialReference).radius, r55 = $(e68, l5)); !i47.done; ) {
      i47.madeProgress();
      const a61 = t71.next();
      if (true === a61.done)
        return this._resetActiveGraphicsIterator(), true;
      const o58 = a61.value, c44 = o58 == null ? void 0 : o58.info[this.visibilityGroup];
      c44 && (this._collectGraphics3DGraphics(o58, s71, e68, r55), c44.culled ? this._visible.delete(o58.graphics3DGraphic.graphic.uid) : this._visible.set(o58.graphics3DGraphic.graphic.uid, o58));
    }
    return false;
  }
  _sortVisibleGraphics(i47) {
    const t71 = this._ensureSortGraphicsIterator();
    for (; !i47.done; ) {
      const s71 = t71.next();
      if (i47.madeProgress(), true === s71.done)
        return this._resetSortGraphicsIterator(), true;
    }
    return false;
  }
  _deconflictVisibleGraphics(i47) {
    const t71 = this._ensureVisibleGraphicsIterator(), s71 = this.visibilityGroup === A12.LABEL;
    for (; !i47.done; ) {
      i47.madeProgress();
      const e68 = t71.next();
      if (true === e68.done)
        return this._resetVisibleGraphicsIterator(), true;
      const r55 = e68.value, a61 = r55.info[this.visibilityGroup];
      if (!a61 || a61.culled) {
        this._setGraphicVisibility(r55, false);
        continue;
      }
      const o58 = r55.graphics3DGraphic, c44 = !s71 || o58.isVisible();
      a61.visible = c44 && !this._isConflicted(r55), a61.visible && this._addToBins(r55), this._setGraphicVisibility(r55, a61.visible), f32(a61, a61.visible);
    }
    return false;
  }
  _resetIterators() {
    this._iterators.active = null, this._iterators.visible = null, this._iterators.sort = null;
  }
  _ensureActiveGraphicsIterator() {
    return this._iterators.active || (this._iterators.active = oi(this._active)), this._iterators.active;
  }
  _resetActiveGraphicsIterator() {
    this._iterators.active = null;
  }
  _ensureVisibleGraphicsIterator() {
    return this._iterators.visible || (this._iterators.visible = oi(this._visible)), this._iterators.visible;
  }
  _resetVisibleGraphicsIterator() {
    this._iterators.visible = null;
  }
  _ensureSortGraphicsIterator() {
    return this._iterators.sort || (this._iterators.sort = ci(this._visible, this._iterators.sortArray, this.visibilityGroup)), this._iterators.sort;
  }
  _resetSortGraphicsIterator() {
    this._iterators.sort = null;
  }
  _collectGraphics3DGraphics(i47, t71, s71, e68) {
    const r55 = i47.graphics3DGraphic;
    if (r55.destroyed)
      return;
    const a61 = i47.info[this.visibilityGroup];
    if (!r55.isVisible(A12.GRAPHIC, L7.DECONFLICTION))
      return void (a61.culled = true);
    const o58 = this.getGraphicsLayers(r55);
    D(a61.aabr);
    let c44 = null;
    for (const n61 of o58) {
      if (!this.layerSupportsDeconfliction(n61))
        continue;
      const r56 = n61.stageObject.geometries[0].material;
      if (null == c44 && (c44 = di, this._getProjectionInfo(n61, t71, c44), c44.isOutsideScreen || this._isCulledBySlice(i47, U13) || null != s71 && ui(c44, s71, e68)))
        return void (a61.culled = true);
      this._expandBoundingRect(a61, n61, r56, c44);
    }
    null == c44 ? a61.culled = true : (a61.distance = c44.distance, a61.culled = false);
  }
  _getProjectionInfo(i47, t71, s71) {
    const e68 = this._viewState.camera, r55 = i47.stageObject, a61 = r55.geometries[0], o58 = a61.material, c44 = Z(r55.boundingVolumeWorldSpace.bounds);
    O2(U13, c44, e68.viewMatrix);
    const n61 = a61.attributes, u46 = n61.get(e18.NORMAL).data, d44 = n61.get(e18.CENTEROFFSETANDDISTANCE).data;
    o58.applyShaderOffsetsView(U13, u46, r55.transformation, d44, e68, s71.scaleInfo, U13), s11(k16, U13[0], U13[1], U13[2], 1), z5(H13, k16, e68.projectionMatrix), g2(s71.positionNDC, H13, 1 / H13[3]), o58.applyShaderOffsetsNDC(s71.positionNDC, d44, e68, s71.positionNDC, q12), s71.distanceWithoutPolygonOffset = e68.depthNDCToWorld(q12[2]), s71.distance = q12[2] === s71.positionNDC[2] ? s71.distanceWithoutPolygonOffset : e68.depthNDCToWorld(s71.positionNDC[2]), s11(H13, s71.positionNDC[0], s71.positionNDC[1], s71.positionNDC[2], 1), z5(k16, H13, t71), m7(k16, k16, 1 / k16[3]), o4(s71.positionView, U13[0], U13[1], U13[2]);
  }
  _isCulledBySlice(i47, t71) {
    return i47.slicePlaneEnabled && this._viewState.slicePlaneEnabled && us(this._viewState.slicePlane, t71);
  }
  _expandBoundingRect(i47, t71, e68, { positionNDC: r55, scaleInfo: a61 }) {
    const o58 = this._viewState.camera, c44 = t71.getScreenSize(hi);
    f13(c44, a61.factor, c44), c44[0] *= o58.pixelRatio, c44[1] *= o58.pixelRatio;
    const n61 = z3(e68.calculateRelativeScreenBounds(c44, a61.factorAlignment.scale, $7), f4(0, o58.fullWidth, 0.5 + 0.5 * r55[0]), f4(0, o58.fullHeight, 0.5 + 0.5 * r55[1])), l45 = this.marginFactor;
    if (0 !== l45) {
      const i48 = l45 * Math.min(M2(n61), s9(n61));
      n61[0] -= i48, n61[1] -= i48, n61[2] += i48, n61[3] += i48;
    }
    m4(i47.aabr, n61, i47.aabr);
  }
  _isConflicted(i47) {
    const t71 = i47.graphics3DGraphic.graphic.uid, s71 = i47.info[this.visibilityGroup];
    let e68 = true;
    for (let r55 = Math.floor(s71.aabr[0] / this._accBinsSizeX); r55 <= Math.floor(s71.aabr[2] / this._accBinsSizeX); r55++)
      if (!(r55 < 0 || r55 >= this._accBinsNumX))
        for (let i48 = Math.floor(s71.aabr[1] / this._accBinsSizeY); i48 <= Math.floor(s71.aabr[3] / this._accBinsSizeY); i48++) {
          if (i48 < 0 || i48 >= this._accBinsNumY)
            continue;
          e68 = false;
          const a61 = this._accBins[r55][i48];
          for (let i49 = 0; i49 < a61.length; i49++) {
            const e69 = a61.data[i49], r56 = e69.info[this.visibilityGroup];
            if (r56 && r56.visible && e69.graphics3DGraphic.graphic.uid !== t71 && (this.accNumTests++, E3(r56.aabr, s71.aabr)))
              return true;
          }
        }
    return e68;
  }
  _initBins(i47, t71) {
    if (null == this._accBins) {
      this._accBins = [];
      for (let i48 = 0; i48 < this._accBinsNumX; i48++) {
        this._accBins.push([]);
        const i49 = this._accBins[this._accBins.length - 1];
        for (let t72 = 0; t72 < this._accBinsNumY; t72++)
          i49.push(new l3());
      }
    } else
      for (let s71 = 0; s71 < this._accBinsNumX; s71++)
        for (let i48 = 0; i48 < this._accBinsNumY; i48++)
          this._accBins[s71][i48].clear();
    this._accBinsSizeX = i47 / this._accBinsNumX, this._accBinsSizeY = t71 / this._accBinsNumY, this.accNumTests = 0;
  }
  _addToBins(i47) {
    const t71 = i47.info[this.visibilityGroup], s71 = Math.floor(t71.aabr[0] / this._accBinsSizeX), e68 = Math.floor(t71.aabr[2] / this._accBinsSizeX), r55 = Math.floor(t71.aabr[1] / this._accBinsSizeY), a61 = Math.floor(t71.aabr[3] / this._accBinsSizeY);
    for (let o58 = s71; o58 <= e68; o58++)
      if (!(o58 < 0 || o58 >= this._accBinsNumX))
        for (let t72 = r55; t72 <= a61; t72++)
          t72 < 0 || t72 >= this._accBinsNumY || this._accBins[o58][t72].push(i47);
  }
  _setGraphicVisibility(i47, t71) {
    const s71 = i47.graphics3DGraphic;
    s71.destroyed || (s71.setVisibilityFlag(this.visibilityGroup, L7.DECONFLICTION, t71), this.visibilityGroup === A12.LABEL && this.view.labeler.setLabelGraphicVisibility(s71, t71));
  }
};
function ai(i47, t71) {
  const s71 = i47.graphics3DGraphic;
  s71.destroyed || s71.setVisibilityFlag(t71, L7.DECONFLICTION, true);
}
function* oi(i47) {
  if (Map.prototype.entries) {
    const t71 = i47.entries();
    for (let i48 = t71.next(); !i48.done; i48 = t71.next())
      yield i48.value[1];
  } else
    yield* i47.values();
}
function* ci(i47, t71, s71) {
  t71.clear(), i47.forEach((i48, e69) => {
    var _a;
    const r55 = t71.pushNew();
    r55.id = e69, r55.visible = i48.graphics3DGraphic.getVisibilityFlag(s71, L7.DECONFLICTION);
    const a61 = (_a = i48.info) == null ? void 0 : _a[s71];
    r55.prio = i48.graphics3DGraphic.deconflictionPriority, r55.distance = a61 ? a61.distance : Number.MAX_VALUE;
  }), yield;
  const e68 = t71.iterableSort((i48, t72) => i48.prio !== t72.prio ? t72.prio - i48.prio : i48.distance !== t72.distance ? i48.distance - t72.distance : i48.visible !== t72.visible ? i48.visible ? -1 : 1 : i48.id - t72.id);
  for (let r55 = e68.next(); !r55.done; r55 = e68.next())
    yield;
  t71.forAll((t72) => {
    const s72 = i47.get(t72.id);
    s72 && (i47.delete(t72.id), i47.set(t72.id, s72));
  }), t71.clear();
}
e([y2({ constructOnly: true })], ri.prototype, "view", void 0), e([y2({ type: Boolean, readOnly: true })], ri.prototype, "updating", null), ri = e([a4("esri.views.3d.layers.graphics.Deconflictor")], ri);
var ni = class {
  constructor() {
    this.id = 0, this.visible = false, this.prio = 0, this.distance = 0;
  }
};
var li = class {
  constructor(i47 = null, t71 = null, s71 = null) {
    this.active = i47, this.visible = t71, this.sort = s71, this.sortArray = new l3({ allocator: (i48) => i48 || new ni() });
  }
};
var hi = n13();
var pi = class {
  constructor() {
    this.positionView = n7(), this.positionNDC = n7(), this.distance = 0, this.distanceWithoutPolygonOffset = 0, this.scaleInfo = new t36();
  }
  get isOutsideScreen() {
    const i47 = this.positionNDC;
    return i47[0] < -1 || i47[1] < -1 || i47[2] < -1 || i47[0] >= 1 || i47[1] >= 1;
  }
};
function ui(i47, t71, s71) {
  return r5(Q11.direction, i47.positionView), o4(Q11.origin, 0, 0, 0), !!Y3(t71, Q11, Z7) && i47.distanceWithoutPolygonOffset > s71;
}
var di = new pi();

// node_modules/@arcgis/core/views/3d/layers/graphics/LabelDeconflictor.js
var c35 = 2e3;
var p35 = class extends ri {
  constructor(r55) {
    super(r55), this.visibilityGroup = A12.LABEL, this.marginFactor = 0.05, this._lastDeconfliction = 0;
  }
  get viewState() {
    return this.parent.viewState;
  }
  runTask(r55) {
    if (this.parent.running)
      return o14;
    const t71 = performance.now();
    if (r55.state !== I4.IDLE && t71 - this._lastDeconfliction < c35)
      return o14;
    super.runTask(r55), this.state === si.Idle && (this._lastDeconfliction = t71);
  }
  enabledChanged(r55, t71) {
    this.modifyGraphics(t71, r55.labelsEnabled);
  }
  getGraphicsLayers(r55) {
    return r55.labelLayers;
  }
};
e([y2({ constructOnly: true })], p35.prototype, "parent", void 0), p35 = e([a4("esri.views.3d.layers.graphics.LabelDeconflictor")], p35);

// node_modules/@arcgis/core/views/3d/layers/graphics/GraphicsDeconflictor.js
var u34 = class extends ri {
  constructor() {
    super(...arguments), this._contexts = /* @__PURE__ */ new Map(), this.visibilityGroup = A12.GRAPHIC, this._marginFactor = -0.1, this.test = { overrideMarginFactor: (e68) => {
      this._marginFactor = e68, this.setDirty();
    } };
  }
  get labels() {
    return this._labels;
  }
  get viewState() {
    return this._viewState;
  }
  initialize() {
    this.addHandles([d3(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.state) == null ? void 0 : _b.camera;
    }, () => {
      this._updateViewState(), this.setDirty();
    }), d3(() => {
      var _a, _b, _c;
      return (_c = (_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.ground) == null ? void 0 : _c.opacity;
    }, (e68, t71) => {
      1 !== e68 && 1 !== t71 || this.setDirty();
    }), d3(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.slicePlane;
    }, () => {
      this._updateSlicePlane(), this._slicePlaneChanged();
    }, P)]), this._frameTask = this.view.resourceController.scheduler.registerTask(I5.GRAPHICS_DECONFLICTOR, this), this._labels = new p35({ view: this.view, parent: this });
  }
  destroy() {
    this._labels = u(this._labels), this._frameTask = l(this._frameTask);
  }
  get marginFactor() {
    return this._marginFactor;
  }
  setDirty() {
    this._contexts.size > 0 && (super.setDirty(), this._labels.setDirty());
  }
  runTask(e68) {
    super.runTask(e68), this.running || this._labels.setDirty();
  }
  _updateViewState() {
    var _a;
    ((_a = this.view) == null ? void 0 : _a.state) && (this._viewState.camera.copyFrom(this.view.state.camera), this._updateSlicePlane());
  }
  _updateSlicePlane() {
    const e68 = this.view ? this.view.slicePlane : null;
    null != e68 && ls(e68, this._viewState.camera.viewMatrix, this._viewState.slicePlane), this._viewState.slicePlaneEnabled = null != e68;
  }
  _slicePlaneChanged() {
    n5(this._contexts, (e68, t71) => t71.symbolCreationContext.slicePlaneEnabled) && this.setDirty();
  }
  addGraphicsOwner(e68) {
    const t71 = this._getGraphicsContext(e68);
    return { addGraphic: (i47) => this._addGraphic(e68, t71, i47), removeGraphic: (e69) => this._removeGraphic(t71, e69), labelingInfoChange: () => this._labels.enabledChanged(e68, t71), featureReductionChange: () => this.enabledChanged(e68, t71), slicePlaneEnabledChange: () => this._slicePlaneEnabledChanged(e68, t71), clear: () => t71.forEach((e69) => this._removeGraphic(t71, e69.graphics3DGraphic)), remove: () => this._removeGraphicsOwner(e68), setDirty: () => this.setDirty() };
  }
  _removeGraphicsOwner(e68) {
    const t71 = this._contexts.get(e68);
    t71 && (t71.forEach((e69) => this._removeGraphic(t71, e69.graphics3DGraphic)), this._contexts.delete(e68), this.setDirty());
  }
  _addGraphic(e68, t71, i47) {
    const s71 = i47.graphic.uid, r55 = new ti(i47, e68.symbolCreationContext.slicePlaneEnabled);
    t71.set(s71, r55), _20(e68) && this.addToActiveGraphics(r55), e68.labelsEnabled && this._labels.addToActiveGraphics(r55);
    const a61 = !this._graphicSupportsDeconfliction(i47) || !_20(e68);
    i47.setVisibilityFlag(A12.GRAPHIC, L7.DECONFLICTION, a61);
  }
  _removeGraphic(e68, t71) {
    const i47 = t71.graphic.uid, s71 = e68.get(i47);
    s71 && (this.removeFromActiveGraphics(s71), this._labels.removeFromActiveGraphics(s71), e68.delete(i47), this.setDirty());
  }
  enabledChanged(e68, t71) {
    const i47 = _20(e68);
    i47 || g16(e68), this.modifyGraphics(t71, i47);
  }
  _slicePlaneEnabledChanged(e68, t71) {
    const i47 = e68.symbolCreationContext.slicePlaneEnabled;
    t71.forEach((e69) => e69.slicePlaneEnabled = i47), this.setDirty();
  }
  getGraphicsLayers(e68) {
    return e68.layers;
  }
  _graphicSupportsDeconfliction(e68) {
    if (e68.isDraped)
      return false;
    const t71 = e68.layers;
    if (!(t71 == null ? void 0 : t71.length))
      return false;
    for (const i47 of t71)
      if (this.layerSupportsDeconfliction(i47))
        return true;
    return false;
  }
  _getGraphicsContext(e68) {
    const t71 = this._contexts.get(e68);
    if (t71)
      return t71;
    const i47 = /* @__PURE__ */ new Map();
    return this._contexts.set(e68, i47), this.setDirty(), i47;
  }
};
function _20(e68) {
  const t71 = e68.layer;
  return !(!(t71 == null ? void 0 : t71.featureReduction) || "selection" !== t71.featureReduction.type);
}
function g16(e68) {
  const t71 = e68.graphics3DGraphics;
  t71 && t71.forEach((e69) => e69.setVisibilityFlag(A12.GRAPHIC, L7.DECONFLICTION, true));
}
u34 = e([a4("esri.views.3d.layers.graphics.GraphicsDeconflictor")], u34);

// node_modules/@arcgis/core/geometry/projection/projectVec3Array.js
function e49(e68, c44, f48, s71, u46, i47, l45 = 1) {
  const m46 = G3(c44, u46, En);
  if (null == m46)
    return false;
  if (m46 === f6) {
    if (e68 === s71 && f48 === i47)
      return true;
    const t71 = f48 + l45;
    for (let o58 = f48, n61 = i47; o58 < t71; ++o58, ++n61)
      r5(s71[n61], e68[o58]);
    return true;
  }
  const p48 = f48 + l45;
  for (let r55 = f48, t71 = i47; r55 < p48; ++r55, ++t71)
    m46(e68[r55], 0, s71[t71], 0);
  return true;
}

// node_modules/@arcgis/core/views/3d/layers/support/FeatureTileVisibility3D.js
var N13 = class {
  constructor(e68) {
    this._renderCoordsHelper = e68, this._surfaceElevation = 0, this._cache = /* @__PURE__ */ new Map(), this._frustumBoundingSphereCenter = n7(), this._frustumBoundingSphereRadius = 0, this._frustum = new c18(e68), this._extendedFrustum = new c18(e68), this._intersector = new N8({ renderCoordsHelper: e68 }), this._renderSR = e68.spatialReference;
    const t71 = a10(this._renderSR);
    this._renderSREllipsoidRadius = s6(t71).radius, this._renderCoordsHelper = e68;
  }
  begin(e68, t71) {
    this._surfaceElevation = t71, this._aboveGround = this._renderCoordsHelper.getAltitude(e68.eye) > t71, this._frustum.update(e68), k17(this._frustum), this._updateExtendedFrustum(e68), this._updateFrustumBoundingSphere();
  }
  end() {
    this._cache.clear();
  }
  calculate(e68) {
    const t71 = this._renderCoordsHelper.viewingMode === l8.Global && e68.lij[0] >= V11 && e68.lij[0] < G11, s71 = this._getOrCalculateSingleTileVisibility(e68, !t71);
    return s71 !== s36.INVISIBLE && t71 ? this._calculateAggregatedChildrenVisibility(e68) : s71;
  }
  _calculateAggregatedChildrenVisibility(e68) {
    let t71 = s36.INVISIBLE;
    const s71 = this._cache.get(e68.id);
    if (null != s71)
      return s71;
    const i47 = W6.acquire();
    e68.getChildren(i47);
    for (const r55 of i47) {
      const e69 = this.calculate(r55);
      if (e69 !== s36.INVISIBLE && (t71 = e69, e69 === s36.VISIBLE_ON_SURFACE))
        break;
    }
    return W6.release(i47), this._cache.set(e68.id, t71), t71;
  }
  _getOrCalculateSingleTileVisibility(e68, t71) {
    const s71 = this._cache.get(e68.id);
    if (null != s71)
      return s71;
    const i47 = this._calculateSingleTileVisibility(e68);
    return t71 && this._cache.set(e68.id, i47), i47;
  }
  _calculateSingleTileVisibility(e68) {
    if (!this._aboveGround && this._renderCoordsHelper.viewingMode === l8.Global && e68.lij[0] < L15) {
      return this._calculateSingleTileVisibilitySided(e68, false) === s36.INVISIBLE ? this._calculateSingleTileVisibilitySided(e68, true) : void 0;
    }
    return this._calculateSingleTileVisibilitySided(e68, this._aboveGround);
  }
  _isTileVisibleInFrustum(e68) {
    return this._renderCoordsHelper.viewingMode === l8.Local ? this._isTileVisibleInFrustumLocal(e68) : this._isTileVisibleInFrustumGlobal(e68);
  }
  _updateFrustumBoundingSphere() {
    const e68 = this._frustum, t71 = e68.origin, o58 = le2;
    z2(o58, e68.direction);
    const u46 = e68.points, c44 = ae3;
    K(c44, u46[4], t71);
    const l45 = 0.5 * P3(c44, c44) / P3(o58, c44), a61 = this._frustumBoundingSphereCenter;
    q(a61, t71, o58, l45);
    const d44 = 1 + l45;
    this._frustumBoundingSphereRadius = d44;
  }
  _isTileVisibleInFrustumLocal(e68) {
    const t71 = e68.tilingScheme.spatialReference, s71 = e68.extent, c44 = this._renderSR, l45 = $8;
    if (l45[0] = s71[0], l45[1] = s71[1], l45[2] = 0, l45[3] = s71[2], l45[4] = s71[3], l45[5] = 0, !n8(l45, t71, 0, l45, c44, 0, 2))
      return false;
    const a61 = ee3;
    o4(a61[0], l45[0], l45[1], 0), o4(a61[1], l45[3], l45[1], 0), o4(a61[2], l45[3], l45[4], 0), o4(a61[3], l45[0], l45[4], 0);
    const d44 = te3;
    o4(d44, 0.5 * (l45[0] + l45[3]), 0.5 * (l45[1] + l45[4]), 0.5 * (l45[2] + l45[5]));
    const _26 = se4;
    o4(_26, 0, 0, 1);
    const h36 = 0.5 * U2(a61[0], a61[2]), f48 = this._frustum, m46 = this._frustumBoundingSphereRadius, p48 = this._frustumBoundingSphereCenter, T21 = _e;
    K(T21, p48, d44);
    const R18 = P3(_26, T21), g23 = de;
    q(g23, d44, _26, R18);
    if (U2(g23, p48) > h36 + m46)
      return false;
    const F20 = Z8, I27 = R18 + m46, S24 = R18 - m46;
    for (let i47 = 0; i47 < 4; ++i47)
      q(F20[i47], a61[i47], _26, I27), q(F20[i47 + 4], a61[i47], _26, S24);
    return !J8(f48.planes, F20, 8);
  }
  _isTileVisibleInFrustumGlobal(e68) {
    const t71 = e68.tilingScheme.spatialReference, _26 = e68.extent;
    if (e68.lij[0] < K10)
      return true;
    const h36 = ee3, f48 = 0.5 * (_26[0] + _26[2]);
    if (o4(h36[0], _26[0], _26[1], 0), o4(h36[1], _26[2], _26[1], 0), o4(h36[2], _26[2], _26[3], 0), o4(h36[3], _26[0], _26[3], 0), o4(h36[4], f48, _26[1], 0), o4(h36[5], f48, _26[3], 0), !e49(h36, t71, 0, h36, this._renderSR, 0, 6))
      return false;
    const p48 = h36[0][2] > 0, T21 = h36[3][2] < 0, E38 = p48 || T21, g23 = this._renderSREllipsoidRadius;
    if (E38) {
      const e69 = r4(0, 0, 1), t72 = re3;
      q13(t72, e69, h36[0]);
      const s71 = ne3;
      if (q13(s71, e69, h36[1]), p48) {
        const i47 = ie3, r55 = h36[4], n61 = oe2;
        q13(n61, r55, e69), q13(i47, n61, r55);
        const o58 = h36[0];
        _(o58, t72, i47), D10(o58, g23);
        const u46 = h36[1];
        _(u46, s71, i47), D10(u46, g23);
      } else if (T21) {
        const i47 = ie3, r55 = h36[5], n61 = oe2;
        q13(n61, r55, e69), q13(i47, r55, n61);
        const o58 = h36[3];
        _(o58, i47, t72), D10(o58, g23);
        const u46 = h36[2];
        _(u46, i47, s71), D10(u46, g23);
      }
    }
    const F20 = te3;
    {
      const e69 = Te;
      K(e69, h36[3], h36[0]), z2(e69, e69);
      const t72 = Ee;
      u4(t72, h36[0], h36[3]), g2(t72, t72, 0.5);
      const o58 = -P3(t72, e69), u46 = Re, c44 = ge;
      u4(u46, h36[0], h36[1]), g2(u46, u46, 0.5), u4(c44, h36[2], h36[3]), g2(c44, c44, 0.5);
      const d44 = Fe;
      K(d44, c44, u46), z2(d44, d44);
      const _27 = -(o58 + P3(e69, u46)) / P3(e69, d44);
      q(F20, u46, d44, _27), D10(F20, g23);
    }
    const I27 = this._frustumBoundingSphereRadius, S24 = this._frustumBoundingSphereCenter, A32 = this._frustum, O32 = A32.planes, b22 = ue;
    z2(b22, F20);
    let B18 = 1;
    for (let i47 = 0; i47 < 4; ++i47) {
      z2(Ce, h36[i47]);
      const e69 = P3(Ce, b22);
      e69 >= 0 && e69 < B18 && (B18 = e69);
    }
    const P20 = Math.sqrt(1 - B18 * B18);
    if (P20 > 0.9)
      return true;
    {
      const e69 = P3(b22, S24), t72 = Y(S24);
      if (t72 <= I27)
        return true;
      const s71 = e69 / t72;
      if (e69 <= 0) {
        if (-e69 > I27)
          return false;
      }
      const i47 = I27 / t72;
      if (Math.sqrt(1 - s71 * s71) * Math.sqrt(1 - i47 * i47) - i47 * s71 > P20)
        return false;
    }
    if (h36.some((e69) => A32.intersectsPoint(e69)))
      return true;
    if (A32.intersectsPoint(F20))
      return true;
    const j26 = fe;
    K(j26, S24, he);
    const M21 = P3(j26, b22), x31 = ce3;
    g2(x31, b22, M21);
    const H22 = U2(x31, S24), N20 = t71.isWGS84, V17 = e68.lij, G19 = N20 && V17[2] === 2 ** V17[0] - 1, L24 = N20 && 0 === V17[2], y26 = L24 ? xe : G19 ? je : Be, C28 = L24 ? He : G19 ? Me : Pe2, v32 = A32.points;
    {
      const e69 = h36, t72 = Ne, s71 = Ie, i47 = Se, r55 = he;
      for (const n61 of y26) {
        const o58 = e69[n61];
        if (z18(s71, e69[(n61 + 1) % 4], o58), z18(i47, r55, o58), q13(t72, i47, s71), Q12(t72, v32, 1))
          return false;
      }
    }
    let w27 = null;
    if (M21 < 2 * I27) {
      const e69 = 2.5 * I27;
      if (H22 > B18 * e69 + I27)
        return false;
      const t72 = pe, s71 = e69 / B18;
      for (let i47 = 0; i47 < 4; ++i47)
        g2(t72[i47], h36[i47], s71 / g23);
      o4(t72[4], 0, 0, 0), w27 = t72;
    } else {
      const e69 = (M21 + I27) / B18, t72 = (M21 - I27) / B18, s71 = me;
      for (let i47 = 0; i47 < 4; ++i47) {
        const r55 = h36[i47];
        g2(s71[i47 + 4], r55, t72 / g23), g2(s71[i47], r55, e69 / g23);
      }
      w27 = s71;
    }
    if (J8(O32, w27, w27.length))
      return false;
    const U23 = A32.lines, W11 = Ae, k26 = Oe;
    for (const i47 of C28) {
      z2(W11, h36[i47]);
      for (const e69 of U23)
        if (z2(k26, e69.direction), ye(k26, W11, w27, v32))
          return false;
    }
    return true;
  }
  _calculateSingleTileVisibilitySided(e68, t71) {
    return this._isTileVisibleInFrustum(e68) ? (this._intersector.update(e68.extent, e68.tilingScheme.spatialReference, this._surfaceElevation, t71), this._intersector.isVisibleInFrustum(this._frustum, this._renderSREllipsoidRadius, true) ? s36.VISIBLE_ON_SURFACE : s36.VISIBLE_WHEN_EXTENDED) : s36.INVISIBLE;
  }
  _updateExtendedFrustum(t71) {
    this._extendedFrustum.update(t71), k17(this._extendedFrustum);
    const s71 = this._renderCoordsHelper.worldUpAtPosition(t71.eye, v21);
    this._aboveGround || j2(s71, s71);
    const i47 = m3(-P3(s71, t71.viewForward));
    if (this._hasExtendedFrustum = i47 > t71.fovY / 2, !this._hasExtendedFrustum)
      return;
    const n61 = this._extendedFrustumParameters(), o58 = this._extendedFrustum.mutablePoints;
    for (let e68 = 0; e68 < 4; e68++) {
      const t72 = n61.pointIndices[e68], s72 = o58[t72], i48 = this._renderCoordsHelper.getAltitude(s72);
      if (n61.needsAltitudeAdjustment(i48)) {
        switch (this._renderCoordsHelper.worldUpAtPosition(s72, v21), t72) {
          case g5.FAR_BOTTOM_LEFT:
          case g5.FAR_TOP_LEFT:
          case g5.NEAR_BOTTOM_LEFT:
          case g5.NEAR_TOP_LEFT:
            Q(this._extendedFrustum.planes[j6.LEFT], v21, v21);
            break;
          case g5.FAR_BOTTOM_RIGHT:
          case g5.FAR_TOP_RIGHT:
          case g5.NEAR_BOTTOM_RIGHT:
          case g5.NEAR_TOP_RIGHT:
            Q(this._extendedFrustum.planes[j6.RIGHT], v21, v21);
        }
        g2(v21, v21, n61.direction), this._renderCoordsHelper.intersectInfiniteManifold(p9(s72, v21), n61.zWithMargin, s72);
      }
    }
    if (this._extendedFrustum.updatePoints(o58), b3(o58[g5.NEAR_BOTTOM_LEFT], o58[g5.NEAR_BOTTOM_RIGHT], o58[g5.NEAR_TOP_RIGHT], w17), b3(o58[g5.NEAR_BOTTOM_RIGHT], o58[g5.NEAR_TOP_RIGHT], o58[g5.NEAR_TOP_LEFT], U14), P3(F2(w17), F2(U14)) < 0) {
      const e68 = this._extendedFrustum.mutablePoints;
      this._aboveGround ? [e68[g5.NEAR_BOTTOM_LEFT], e68[g5.NEAR_BOTTOM_RIGHT]] = [e68[g5.NEAR_BOTTOM_RIGHT], e68[g5.NEAR_BOTTOM_LEFT]] : [e68[g5.NEAR_TOP_LEFT], e68[g5.NEAR_TOP_RIGHT]] = [e68[g5.NEAR_TOP_RIGHT], e68[g5.NEAR_TOP_LEFT]], this._extendedFrustum.updatePoints(e68);
    }
  }
  _extendedFrustumParameters() {
    return this._aboveGround ? this._extendedFrustumParametersAboveSurface() : this._extendedFrustumParametersBelowSurface();
  }
  _extendedFrustumParametersAboveSurface() {
    const e68 = this._surfaceElevation - C17;
    return { zWithMargin: e68, pointIndices: c18.planePointIndices.bottom, direction: -1, needsAltitudeAdjustment: (t71) => t71 > e68 };
  }
  _extendedFrustumParametersBelowSurface() {
    const e68 = this._surfaceElevation + C17;
    return { zWithMargin: e68, pointIndices: c18.planePointIndices.top, direction: 1, needsAltitudeAdjustment: (t71) => t71 < e68 };
  }
};
var V11 = 2;
var G11 = 6;
var L15 = 12;
var y17 = 0.95;
var C17 = 1;
var v21 = n7();
var w17 = E6();
var U14 = E6();
var W6 = new e4(Array, (e68) => {
  4 !== e68.length && (e68[0] = new t37(), e68[1] = new t37(), e68[2] = new t37(), e68[3] = new t37());
}, (e68) => {
  e68[0].release(), e68[1].release(), e68[2].release(), e68[3].release();
});
function k17(e68) {
  const t71 = c18.nearFarLineIndices, s71 = e68.mutablePoints;
  for (const i47 of t71) {
    const [e69, t72] = i47, r55 = s71[e69], n61 = s71[t72];
    e11(v21, n61, r55), g2(v21, v21, y17), u4(s71[t72], r55, v21);
  }
  e68.updatePoints(s71);
}
function q13(e68, t71, i47) {
  return _(e68, t71, i47), z2(e68, e68), e68;
}
function z18(e68, t71, r55) {
  return K(e68, t71, r55), z2(e68, e68), e68;
}
function D10(e68, t71) {
  return g2(e68, e68, t71 / Y(e68)), e68;
}
var X9 = [j6.LEFT, j6.RIGHT, j6.BOTTOM, j6.TOP, j6.FAR];
function Y11(e68, t71, s71) {
  for (let i47 = 0; i47 < s71; ++i47)
    if (V2(e68, t71[i47]) < 0)
      return false;
  return true;
}
function J8(e68, t71, s71) {
  for (const i47 of X9)
    if (Y11(e68[i47], t71, s71))
      return true;
  return false;
}
var K10 = 3;
function Q12(e68, t71, s71) {
  for (const i47 of t71)
    if (P3(i47, e68) < s71)
      return false;
  return true;
}
var Z8 = [n7(), n7(), n7(), n7(), n7(), n7(), n7(), n7()];
var $8 = [0, 0, 0, 0, 0, 0];
var ee3 = [n7(), n7(), n7(), n7(), n7(), n7()];
var te3 = n7();
var se4 = n7();
var ie3 = n7();
var re3 = n7();
var ne3 = n7();
var oe2 = n7();
var ue = n7();
var ce3 = n7();
var le2 = n7();
var ae3 = n7();
var de = n7();
var _e = n7();
var he = r4(0, 0, 0);
var fe = n7();
var me = [n7(), n7(), n7(), n7(), n7(), n7(), n7(), n7()];
var pe = [n7(), n7(), n7(), n7(), n7()];
var Te = n7();
var Ee = n7();
var Re = n7();
var ge = n7();
var Fe = n7();
var Ie = n7();
var Se = n7();
var Ae = n7();
var Oe = n7();
var be = n7();
var Be = [0, 1, 2, 3];
var Pe2 = [0, 1, 2, 3];
var je = [0, 1, 3];
var Me = [0, 1, 3];
var xe = [1, 2, 3];
var He = [1, 2, 3];
var Ne = n7();
function Ve(e68, t71, s71) {
  let i47 = 1 / 0, n61 = -1 / 0;
  for (const o58 of s71) {
    const e69 = P3(t71, o58);
    i47 = Math.min(i47, e69), n61 = Math.max(n61, e69);
  }
  e68[0] = i47, e68[1] = n61;
}
function Ge(e68, t71, s71, i47) {
  let n61 = 1 / 0, o58 = -1 / 0;
  for (const u46 of i47) {
    const i48 = P3(s71, u46);
    if (n61 = Math.min(n61, i48), o58 = Math.max(o58, i48), n61 <= t71 && o58 >= e68)
      return false;
  }
  return true;
}
var Le = [0, 0];
function ye(e68, t71, s71, i47) {
  const r55 = be;
  q13(r55, e68, t71);
  const n61 = Le;
  return Ve(n61, r55, s71), Ge(n61[0], n61[1], r55, i47);
}
var Ce = n7();

// node_modules/@arcgis/core/views/3d/layers/support/FeatureTileMeasurements3D.js
var R8 = class {
  constructor(e68) {
    this._camera = new it(), this._focusOnMap = [0, 0], this._screenRect = u5(), this._tileSize = e68.tileSize, this._renderCoordsHelper = e68.renderCoordsHelper, this._tilingScheme = e68.tilingScheme, this._visibility = new N13(e68.renderCoordsHelper);
  }
  begin(e68, t71, r55) {
    this._camera.copyFrom(e68), this._surfaceElevation = r55, this._focusOnMap[0] = t71.x, this._focusOnMap[1] = t71.y, a7(0, 0, e68.fullWidth, e68.fullHeight, this._screenRect), this._visibility.begin(this._camera, r55);
  }
  end() {
    this._visibility.end();
  }
  updateTile(e68) {
    e68.measures.visibility = this._visibility.calculate(e68), e68.measures.distance = d4(e68.extent, this._focusOnMap), e68.measures.visibility !== s36.INVISIBLE && this._updateScreenMeasure(e68);
  }
  _updateScreenMeasure(e68) {
    const t71 = T13, r55 = 1 << t71, i47 = e68.measures.screenRect;
    D(i47);
    let s71 = 0;
    const o58 = e68.lij, n61 = o58[0], c44 = n61 + t71, a61 = o58[1] << t71, h36 = o58[2] << t71, u46 = this._tileSizeWithBias(e68), p48 = u46 * u46, _26 = this._camera, { frustum: f48, viewport: S24 } = _26;
    if (this._renderCoordsHelper.viewingMode === l8.Local || n61 > K10) {
      const t72 = C18;
      this._tilingScheme.getExtent(o58[0], o58[1], o58[2], t72);
      const r56 = y18, i48 = H14, s72 = D();
      for (let e69 = 0; e69 < 4; ++e69)
        this._toRenderCoords(t72, w18[e69][0], w18[e69][1], i48[e69]), _26.projectToScreen(i48[e69], r56[e69]), f5(s72, r56[e69]);
      const n62 = J8(f48, i48, 4), c45 = s72[0] > S24[2] || s72[1] > S24[3] || s72[2] < S24[0] || s72[3] < S24[1];
      if (n62 || c45)
        return void (e68.measures.shouldSplit = false);
    }
    for (let l45 = 0; l45 < r55; l45++)
      for (let t72 = 0; t72 < r55; t72++)
        if (s71 += this._computeScreenArea(c44, a61 + l45, h36 + t72, i47), s71 > p48)
          return void (e68.measures.shouldSplit = true);
    e68.measures.shouldSplit = false;
  }
  _tileSizeWithBias(e68) {
    return e68.measures.visibility === s36.VISIBLE_WHEN_EXTENDED ? this._tileSize * j15 : this._tileSize;
  }
  _computeScreenArea(e68, t71, r55, i47) {
    this._tilingScheme.ensureMaxLod(e68);
    const s71 = C18;
    this._tilingScheme.getExtent(e68, t71, r55, s71);
    const o58 = A21;
    this._toRenderCoords(s71, 0, 3, o58[0]), this._toRenderCoords(s71, 2, 3, o58[1]), this._toRenderCoords(s71, 2, 1, o58[2]), this._toRenderCoords(s71, 0, 1, o58[3]);
    return this._computeTriangleScreenArea([o58[0], o58[1], o58[2]], i47) + this._computeTriangleScreenArea([o58[2], o58[1], o58[3]], i47);
  }
  _computeTriangleScreenArea(e68, t71) {
    const i47 = this._camera.frustum[j6.NEAR];
    let s71 = 0, o58 = -1, n61 = -1;
    for (let r55 = 0; r55 < 3; ++r55) {
      V2(i47, e68[r55]) > 0 ? (s71++, -1 === o58 && (o58 = r55)) : -1 === n61 && (n61 = r55);
    }
    if (0 === s71)
      return this._computeTriangleScreenAreaInside(e68, t71);
    if (1 === s71) {
      const s72 = I20, n62 = (o58 + 1) % 3, c44 = (o58 + 2) % 3, a61 = o58;
      r5(s72[0], e68[n62]), r5(s72[1], e68[c44]), x22(s72[2], e68[c44], e68[a61], i47);
      const l45 = this._computeTriangleScreenAreaInside(s72, t71);
      x22(s72[1], e68[n62], e68[a61], i47);
      return l45 + this._computeTriangleScreenAreaInside(s72, t71);
    }
    if (2 === s71) {
      const s72 = I20, o59 = n61;
      r5(s72[0], e68[o59]);
      const c44 = (n61 + 1) % 3, a61 = (n61 + 2) % 3;
      return x22(s72[1], e68[o59], e68[c44], i47), x22(s72[2], e68[o59], e68[a61], i47), this._computeTriangleScreenAreaInside(s72, t71);
    }
    return 0;
  }
  _computeTriangleScreenAreaInside(e68, t71) {
    for (let r55 = 0; r55 < 3; r55++)
      this._camera.projectToRenderScreen(e68[r55], E28), this._camera.renderToScreen(E28, y18[r55]), m4(t71, y18[r55], t71);
    return S6(y18[0], y18[1], y18[2]);
  }
  _toRenderCoords(e68, t71, r55, i47) {
    return M12[0] = e68[t71], M12[1] = e68[r55], M12[2] = this._surfaceElevation, this._renderCoordsHelper.toRenderCoords(M12, this._tilingScheme.spatialReference, i47), i47;
  }
};
var T13 = 2;
var j15 = 5;
var y18 = [i4(), i4(), i4(), i4()];
var C18 = u5();
var M12 = n7();
var A21 = [n7(), n7(), n7(), n7()];
var E28 = x4();
var I20 = [n7(), n7(), n7()];
function x22(e68, t71, r55, o58) {
  const n61 = V2(o58, t71), c44 = V2(o58, r55), a61 = Math.abs(c44 - n61);
  g2(e68, t71, Math.abs(c44) / a61), q(e68, e68, r55, Math.abs(n61) / a61);
}
var H14 = [n7(), n7(), n7(), n7()];
var w18 = [[0, 3], [2, 3], [2, 1], [0, 1]];

// node_modules/@arcgis/core/views/3d/layers/support/FeatureTileTree3D.js
var w19 = class extends S3 {
  get tilingScheme() {
    const e68 = this.tilingSchemeOwner.tilingScheme;
    if (!e68)
      return null;
    return e68.clone();
  }
  set filterExtent(e68) {
    if (null != e68 && !e68.spatialReference.equals(this.viewState.spatialReference))
      return void n.getLogger(this).error("#extent", "extent spatial reference needs to be in the same spatial reference as the view");
    const t71 = this._get("filterExtent");
    if (t71 === e68 || null != t71 && e68 && t71.equals(e68))
      return;
    const i47 = null != e68 ? e68.clone() : null;
    this._set("filterExtent", i47), this._setDirty();
  }
  get _filterExtentRect() {
    if (null == this.filterExtent)
      return null;
    const e68 = u5();
    return u14(this.filterExtent, e68, this.tilingScheme.spatialReference), e68;
  }
  get _rootTileIds() {
    const { tilingScheme: e68 } = this;
    return this._filterExtentRect && e68 ? e68.rootTilesInExtent(this._filterExtentRect) : [[0, 0, 0]];
  }
  set suspended(e68) {
    e68 !== this._get("suspended") && (this._set("suspended", e68), this._setDirty());
  }
  get updating() {
    return this._dirty || !!this._pendingTiles;
  }
  constructor(e68) {
    super(e68), this.tiles = new V(), this.tileSize = 512, this._idToTile = /* @__PURE__ */ new Map(), this._clients = /* @__PURE__ */ new Set(), this._dirty = false, this._pendingTiles = null, this._newTiles = new l3();
  }
  initialize() {
    this.addHandles([d3(() => [this.tilingScheme, this.tileSize], () => this._reset(), C), d3(() => {
      var _a, _b, _c;
      return [this.tileSize, (_a = this.cameraOnSurface) == null ? void 0 : _a.location, this.tilingScheme, (_b = this.viewState) == null ? void 0 : _b.contentCamera, (_c = this.focus) == null ? void 0 : _c.location];
    }, () => this._setDirty(), A3)]), this.scheduler && (this._frameWorker = this.scheduler.registerTask(I5.FEATURE_TILE_TREE, this));
  }
  destroy() {
    this._frameWorker = l(this._frameWorker);
  }
  addClient() {
    const e68 = e6();
    return this._clients.add(e68), 1 === this._clients.size && this._setDirty(), e3(() => this._removeClient(e68));
  }
  _removeClient(e68) {
    this._clients.delete(e68), this._hasClients || this._clear();
  }
  get _hasClients() {
    return this._clients.size > 0;
  }
  _setDirty() {
    !this._hasClients || this.suspended || this._dirty || (this._frameWorker ? (this._dirty = true, this.notifyChange("updating")) : this.runTask(C5));
  }
  _clear() {
    this.tiles.removeAll(), this._idToTile.clear(), this._reset(), this._dirty = false, this.notifyChange("updating");
  }
  get running() {
    return this.updating;
  }
  runTask(e68) {
    this._dirty = false, this._pendingTiles || (this._startUpdate(), null != this._frameWorker && (this._frameWorker.priority = I5.FEATURE_TILE_TREE_ACTIVE)), this._subdivideTilesForView(e68), this._pendingTiles || null == this._frameWorker || (this._frameWorker.priority = I5.FEATURE_TILE_TREE), this.notifyChange("updating");
  }
  _startUpdate() {
    if (this.suspended)
      return;
    if (!this.tilingScheme)
      return void this._clear();
    this._tileMeasurements || (this._tileMeasurements = new R8({ renderCoordsHelper: this.renderCoordsHelper, tilingScheme: this.tilingScheme, tileSize: this.tileSize }));
    const e68 = this.viewState.contentCamera;
    this._tileMeasurements.begin(e68, this.focus.location, this.cameraOnSurface.location.z ?? 0), this._pendingTiles = this._getRootTiles();
  }
  _reset() {
    this._newTiles.clear(), this._tileMeasurements = null, this._pendingTiles = null, this._setDirty();
  }
  _getRootTiles() {
    const { tilingScheme: e68 } = this;
    return this._rootTileIds.map((t71) => new t37(t71[0], t71[1], t71[2], e68));
  }
  _purgeHorizonTiles(e68) {
    e68.sort((e69, t71) => {
      const i47 = e69.measures.screenRect, s71 = t71.measures.screenRect;
      return i47[1] + i47[3] - (s71[1] + s71[3]);
    });
    if (!(e68.length > j16))
      return e68.toArray();
    D(x23);
    for (let t71 = 0; t71 < e68.length; t71++)
      if (m4(x23, e68.data[t71].measures.screenRect, x23), s9(x23) > C19)
        return e68.data.slice(t71, e68.length);
    return [];
  }
  _subdivideTilesForView(e68) {
    if (!this._pendingTiles)
      return;
    const { tilingScheme: t71 } = this;
    for (; this._pendingTiles.length > 0 && !e68.done; ) {
      const i47 = this._pendingTiles.pop();
      e68.madeProgress(), this._filterExtentRect && !E3(this._filterExtentRect, i47.extent) || (this._tileMeasurements.updateTile(i47), i47.measures.visibility !== s36.INVISIBLE && (i47.measures.shouldSplit ? (t71.ensureMaxLod(i47.lij[0] + 1), this._pendingTiles.push(...i47.getChildren())) : this._newTiles.push(i47)));
    }
    0 === this._pendingTiles.length && (this._updateTiles(this._purgeHorizonTiles(this._newTiles)), this._newTiles.clear(), this._tileMeasurements.end(), this._pendingTiles = null);
  }
  _updateTiles(e68) {
    for (const s71 of this.tiles.items)
      s71.used = false;
    const t71 = e68.filter((e69) => {
      const t72 = this._idToTile.get(e69.id);
      return t72 ? (t72.copyMeasurementsFrom(e69), t72.used = true) : this._idToTile.set(e69.id, e69), !t72;
    }), i47 = this.tiles.items.filter((e69) => !e69.used && (this._idToTile.delete(e69.id), true));
    this.tiles.removeMany(i47), this.tiles.addMany(t71), this._sortTiles();
  }
  _sortTiles() {
    this.viewState.fixedContentCamera || this.tiles.sort((e68, t71) => e68.measures.visibility !== t71.measures.visibility ? e68.measures.visibility === s36.VISIBLE_ON_SURFACE ? -1 : 1 : e68.measures.distance - t71.measures.distance), this.tiles.forEach((e68, t71) => e68.loadPriority = t71);
  }
};
e([y2({ constructOnly: true })], w19.prototype, "scheduler", void 0), e([y2({ constructOnly: true })], w19.prototype, "renderCoordsHelper", void 0), e([y2({ constructOnly: true })], w19.prototype, "tilingSchemeOwner", void 0), e([y2({ constructOnly: true })], w19.prototype, "cameraOnSurface", void 0), e([y2({ constructOnly: true })], w19.prototype, "focus", void 0), e([y2({ constructOnly: true })], w19.prototype, "viewState", void 0), e([y2({ constructOnly: true })], w19.prototype, "terrain", void 0), e([y2()], w19.prototype, "tiles", void 0), e([y2()], w19.prototype, "tileSize", void 0), e([y2({ readOnly: true })], w19.prototype, "tilingScheme", null), e([y2()], w19.prototype, "filterExtent", null), e([y2({ readOnly: true })], w19.prototype, "_filterExtentRect", null), e([y2({ readOnly: true })], w19.prototype, "_rootTileIds", null), e([y2({ value: false })], w19.prototype, "suspended", null), e([y2({ readOnly: true })], w19.prototype, "updating", null), w19 = e([a4("esri.views.3d.layers.support.FeatureTileTree3D")], w19);
var x23 = u5();
var C19 = 10;
var j16 = 50;

// node_modules/@arcgis/core/views/3d/state/ViewState.js
var _21 = class extends S3 {
  constructor() {
    super(...arguments), this._propertiesPool = new o22({ camera: it }, this), this._lastSeenCameraProjectionValues = new it(), this.mode = I4.ANIMATING, this._cssCamera = new it(), this._camera = new it(), this.rasterPixelRatio = 1, this.contentPixelRatio = 1, this.events = new o3(), this.viewingMode = l8.Global, this._cameraChanged = false, this._updateQueue = new Array(), this._processingUpdates = false;
  }
  init(e68, t71) {
    this._set("viewingMode", e68), this._set("spatialReference", t71), this._set("constraints", new c22({ mode: this.viewingMode }));
  }
  exit() {
    this.cameraController = null, this._propertiesPool.destroy(), this._propertiesPool = new o22({ camera: it }, this);
  }
  destroy() {
    var _a;
    this.cameraController = null, (_a = this._propertiesPool) == null ? void 0 : _a.destroy(), this._propertiesPool = null;
  }
  createInitialCamera() {
    if (this.viewingMode === l8.Global) {
      const e68 = s6(this.spatialReference).radius;
      this.camera = new it({ eye: r4(4 * e68, 0, 0), center: r4(e68, 0, 0), up: r4(0, 0, 1) });
    } else
      this.camera = new it({ eye: r4(0, 0, 100), center: r4(0, 0, 0), up: r4(0, 1, 0) });
  }
  get animation() {
    return this.cameraController instanceof a36 && null != this.cameraController.viewAnimation ? this.cameraController.viewAnimation : null;
  }
  get cssCamera() {
    const e68 = this._cssCamera.copyFrom(this.camera), { height: t71, width: r55, pixelRatio: o58 } = this.camera;
    return e68.pixelRatio = 1, e68.height = Math.round(t71 / o58), e68.width = Math.round(r55 / o58), e68;
  }
  get camera() {
    return this._camera;
  }
  set camera(e68) {
    e68 !== v22 && v22.copyFrom(e68), v22.computeUp(this.viewingMode), this.events.emit("before-camera-change", v22);
    const t71 = this._camera;
    if (w20(this._lastSeenCameraProjectionValues, v22) && (this._lastSeenCameraProjectionValues.copyFrom(v22), this.events.emit("camera-projection-changed", this._lastSeenCameraProjectionValues)), !t71.equals(v22) && (this._camera = this._propertiesPool.get("camera").copyFrom(v22), this._cameraChanged = !t71.almostEquals(v22), this._cameraChanged)) {
      const e69 = U(() => {
        this._cameraChanged = false, e69.remove();
      });
    }
  }
  get pixelRatio() {
    return this.camera.pixelRatio;
  }
  get alignPixelEnabled() {
    return this.pixelRatio === this.rasterPixelRatio && this.mode === I4.IDLE;
  }
  get updating() {
    return this.mode !== I4.IDLE;
  }
  get contentCamera() {
    return this._contentCamera ?? this.camera;
  }
  set contentCamera(e68) {
    this._contentCamera = null != e68 ? e68.clone() : null;
  }
  get fixedContentCamera() {
    return null != this._contentCamera;
  }
  get isGlobal() {
    return this.viewingMode === l8.Global;
  }
  get isLocal() {
    return this.viewingMode === l8.Local;
  }
  get navigating() {
    return !(!this.cameraController || !this.cameraController.isInteractive);
  }
  get stationary() {
    return !this._cameraChanged && !this.navigating;
  }
  get cameraController() {
    return this._get("cameraController");
  }
  set cameraController(e68) {
    var _a;
    this.stopActiveCameraController() ? ((_a = this.cameraController) == null ? void 0 : _a.destroy(), e68 && (this.removeHandles(j17), this.addHandles(p(() => e68.state === s51.Finished || e68.state === s51.Stopped, () => {
      this._set("cameraController", null), this.updateCamera((t71) => e68.onControllerEnd(t71));
    }, { sync: true, once: true }), j17), e68.onControllerStart(this.camera)), this._set("cameraController", e68)) : e68 && (e68.state = s51.Rejected);
  }
  switchCameraController(e68) {
    return this.cameraController = e68, e68.state !== s51.Rejected;
  }
  stopActiveCameraController() {
    return !(this.cameraController && !this.cameraController.stopController());
  }
  updateCamera(e68) {
    this._updateQueue.push(e68), this._processUpdateQueue();
  }
  _processUpdateQueue() {
    if (0 === this._updateQueue.length || this._processingUpdates)
      return;
    this._processingUpdates = true;
    const e68 = this._updateQueue.shift();
    v22.copyFrom(this._get("camera")), e68(v22), this.camera = v22, this._processingUpdates = false, this._processUpdateQueue();
  }
};
e([y2()], _21.prototype, "mode", void 0), e([y2({ readOnly: true, type: a19 })], _21.prototype, "animation", null), e([y2({ type: it })], _21.prototype, "cssCamera", null), e([y2()], _21.prototype, "_cssCamera", void 0), e([y2({ type: it })], _21.prototype, "camera", null), e([y2()], _21.prototype, "_camera", void 0), e([y2({ readOnly: true })], _21.prototype, "pixelRatio", null), e([y2()], _21.prototype, "rasterPixelRatio", void 0), e([y2()], _21.prototype, "contentPixelRatio", void 0), e([y2({ readOnly: true })], _21.prototype, "alignPixelEnabled", null), e([y2({ readOnly: true })], _21.prototype, "updating", null), e([y2({})], _21.prototype, "_contentCamera", void 0), e([y2({ type: it })], _21.prototype, "contentCamera", null), e([y2({ readOnly: true })], _21.prototype, "fixedContentCamera", null), e([y2({ readOnly: true })], _21.prototype, "constraints", void 0), e([y2({ readOnly: true })], _21.prototype, "events", void 0), e([y2({ readOnly: true })], _21.prototype, "isGlobal", null), e([y2({ readOnly: true })], _21.prototype, "isLocal", null), e([y2({ readOnly: true })], _21.prototype, "viewingMode", void 0), e([y2({ readOnly: true })], _21.prototype, "spatialReference", void 0), e([y2()], _21.prototype, "navigating", null), e([y2()], _21.prototype, "stationary", null), e([y2()], _21.prototype, "_cameraChanged", void 0), e([y2()], _21.prototype, "cameraController", null), _21 = e([a4("esri.views.3d.state.ViewState")], _21);
var f33 = _21;
function w20(e68, t71) {
  return e68.fov !== t71.fov || (e68.fullViewport[0] !== t71.fullViewport[0] || e68.fullViewport[1] !== t71.fullViewport[1] || e68.fullViewport[2] !== t71.fullViewport[2] || e68.fullViewport[3] !== t71.fullViewport[3] || (e68.padding[t34.TOP] !== t71.padding[t34.TOP] || e68.padding[t34.RIGHT] !== t71.padding[t34.RIGHT] || e68.padding[t34.BOTTOM] !== t71.padding[t34.BOTTOM] || e68.padding[t34.LEFT] !== t71.padding[t34.LEFT]));
}
var v22 = new it();
var j17 = "ViewStateHandles";

// node_modules/@arcgis/core/views/3d/state/helpers/SceneIntersectionHelper.js
var U15 = class {
  constructor(t71, r55, n61) {
    this.viewingMode = t71, this._forEachLayer = r55, this._view = n61, this._externalIntersectionHandlers = new l3(), this._tolerance = E13, this._tmpRay = d7(), this._tmpRegion = u5(), this._validateHUDIntersector = T5(this.viewingMode), this._validateHUDIntersector.options.hud = false;
  }
  intersectScreen(e68, t71, r55) {
    return this.intersectRay(this._getPickRay(e68, this._tmpRay), T14(this.viewingMode), t71, r55);
  }
  intersectScreenFreePointFallback(e68, t71, r55) {
    return this.intersectRayFreePointFallback(this._getPickRay(e68, this._tmpRay), t71, r55);
  }
  intersectRayFreePointFallback(e68, t71, r55) {
    return this.intersectRay(e68, T14(this.viewingMode), t71, r55) || this._intersectRayFreePointLocal(e68, t71);
  }
  intersectRay(e68, t71, r55, n61) {
    return t71.options.selectionMode = false, t71.options.store = e29.MIN, this.computeIntersection(e68, t71, n61), !!t71.results.min && t71.results.min.getIntersectionPoint(r55);
  }
  getCenterRayWithSubpixelOffset(e68, t71, r55 = 0.5, n61 = 0.5) {
    return e68.getRenderCenter(D11, r55, n61), D11[0] += 0.0466, D11[1] -= 0.0123, f18(e68, D11, t71);
  }
  intersectIntersectorScreen(e68, t71, r55) {
    this.computeIntersection(this._getPickRay(e68, this._tmpRay), t71, r55);
  }
  intersectToolIntersectorScreen(e68, t71, r55) {
    const n61 = this._getPickRay(e68, this._tmpRay);
    this.intersectToolIntersectorRay(n61, t71, r55);
  }
  intersectToolIntersectorRay(e68, t71, r55) {
    t71.options.selectionMode = true, this.computeIntersection(e68, t71, r55);
    const n61 = t71.results.min;
    !!this._view.basemapTerrain && this._view.basemapTerrain.opaque || o26(n61) && n61.intersector !== i15.TERRAIN || (t71.options.selectionMode = false, this.computeIntersection(e68, t71, r55));
  }
  setTolerance(e68 = E13) {
    this._tolerance = e68;
  }
  addIntersectionHandler(e68) {
    this._externalIntersectionHandlers.push(e68), this._externalIntersectionHandlers.sort((e69, t71) => e69.type === i15.TERRAIN ? 1 : t71.type === i15.TERRAIN ? -1 : 0);
  }
  removeIntersectionHandler(e68) {
    null != this._externalIntersectionHandlers.removeUnordered(e68) && this._externalIntersectionHandlers.sort((e69, t71) => e69.type === i15.TERRAIN ? 1 : t71.type === i15.TERRAIN ? -1 : 0);
  }
  _getPickRay(e68, t71) {
    const r55 = this._view.state.camera;
    return g8(r55, e68, t71);
  }
  _intersectRayFreePointLocal(e68, t71) {
    return this.viewingMode !== l8.Local || null == e68 || u4(t71, e68.origin, z2(c6.get(), e68.direction)), false;
  }
  intersectElevationFromScreen(e68, t71, r55 = 0, n61 = null) {
    return this._intersectElevation(this._getPickRay(e68, this._tmpRay), t71, r55, n61);
  }
  _intersectElevation(e68, r55, l45 = 0, c44 = null) {
    if (null == e68)
      return null;
    const a61 = this._view, { renderCoordsHelper: u46 } = a61, h36 = L2(a61.spatialReference), d44 = null != r55 ? r55.mode : "absolute-height", p48 = w7(r55) / h36, m46 = ("on-the-ground" !== d44 ? p48 + l45 : 0) * h36 / u46.unitInMeters, { camera: g23 } = a61.state;
    if ("absolute-height" === d44) {
      const t71 = u46 == null ? void 0 : u46.getAltitude(g23.eye), r56 = P3(z2(F13, e68.direction), u46.worldUpAtPosition(g23.eye, S15));
      if (t71 < m46 && r56 < 0 || t71 >= m46 && r56 > 0)
        return null;
      if (u46.intersectInfiniteManifold(e68, m46, F13)) {
        const e69 = L8(a61, F13);
        return e69.z ?? (e69.z = 0), e69.z -= p48, e69;
      }
      return null;
    }
    const _26 = p7(c6.get());
    g23.projectToRenderScreen(e68.origin, _26);
    const I27 = new A22(null, this._forEachLayer), { slicePlane: v32 } = a61, j26 = null != v32 ? c12(v32) : null, U23 = T5(this.viewingMode);
    U23.options.store = e29.MIN, U23.options.verticalOffset = m46, U23.options.normalRequired = false;
    const x31 = e68.origin, E38 = u4(c6.get(), x31, e68.direction);
    U23.reset(x31, E38, g23), U23.point = _26;
    const H22 = c44 ? "type" in c44 && "graphics" === c44.type ? (e69) => e69.layerUid !== c44.uid : (e69) => e69.graphicUid !== c44.uid : null;
    switch (d44) {
      case "relative-to-scene": {
        const e69 = (e70) => (!H22 || H22(e70)) && !!e70.lastValidElevationBB;
        U23.intersect(I27.layers, _26, this._tolerance, null, e69), this._externalIntersectionHandlers.forAll((e70) => {
          if (e70.type === i15.I3S || e70.type === i15.TERRAIN || e70.type === i15.TILES3D) {
            const t71 = e70.slicePlaneEnabled ? j26 : null;
            e70.intersect(U23, t71, U23.rayBegin, U23.rayEnd, _26);
          }
        });
        break;
      }
      case "on-the-ground":
      case "relative-to-ground":
        this._externalIntersectionHandlers.forAll((e69) => {
          if (e69.isGround) {
            const t71 = e69.slicePlaneEnabled ? j26 : null;
            e69.intersect(U23, t71, U23.rayBegin, U23.rayEnd, _26);
          }
        });
    }
    if (U23.results.min.getIntersectionPoint(F13)) {
      const e69 = L8(a61, F13);
      return e69.z = l45, e69;
    }
    return null;
  }
  computeIntersection(e68, r55, n61, s71) {
    var _a;
    if (null == e68)
      return;
    const o58 = this._view.state.camera, l45 = p7(c6.get());
    o58.projectToRenderScreen(e68.origin, l45);
    const c44 = new A22(n61, this._forEachLayer);
    r55.options.selectOpaqueTerrainOnly = !n61 || !("include" in n61 || "exclude" in n61);
    const a61 = e68.origin, u46 = u4(c6.get(), e68.origin, e68.direction);
    r55.reset(a61, u46, o58), r55.intersect(c44.layers, l45, this._tolerance);
    const h36 = this._view.slicePlane, d44 = null != h36 ? c12(h36) : null;
    r55.intersect(c44.sliceableLayers, l45, this._tolerance, d44);
    const p48 = n61 && (n61.requiresGroundFeedback || n61.enableDraped);
    this._externalIntersectionHandlers.forAll((e69) => {
      const t71 = e69.layerUid, n62 = Array.isArray(t71), i47 = n62 ? t71 : [t71];
      n62 && (r55.options.filteredLayerUids = []);
      let o59 = false;
      for (const s72 of i47) {
        !c44.filterLayerUid(s72) ? n62 && r55.options.filteredLayerUids.push(s72) : o59 = true;
      }
      if (r55.options.isFiltered = !o59, e69.isGround && p48 || !r55.options.isFiltered) {
        const t72 = e69.slicePlaneEnabled ? d44 : null;
        e69.intersect(r55, t72, a61, u46, l45, s71);
      }
    });
    const m46 = c6.get(), f48 = this._view.basemapTerrain;
    if (n61 && n61.enableDraped && null != f48.spatialReference && r55.results.ground.getIntersectionPoint(m46)) {
      const e69 = f48.overlayManager.renderer, t71 = this._view.renderCoordsHelper.spatialReference, n62 = c6.get();
      this._view.renderCoordsHelper.fromRenderCoords(m46, n62, f48.spatialReference), n62[2] = ((_a = this._view.elevationProvider) == null ? void 0 : _a.getElevation(m46[0], m46[1], m46[2], t71, "ground")) ?? 0, e69.intersect(r55, n62, r55.results.ground, (e70) => c44.filterRenderGeometry(e70));
    }
    r55.sortResults(), this._processHUDResults(r55);
  }
  _processHUDResults(e68) {
    const t71 = e68.results.hud;
    e13(this._tmpRegion, K2);
    const r55 = this._view.state.camera, n61 = [], i47 = this._tmpRegion, s71 = (e69) => {
      const t72 = new H15(e69);
      r55.projectToRenderScreen(e69.target.center, t72.screenPoint), t72.screenPoint[0] = Math.floor(t72.screenPoint[0]), t72.screenPoint[1] = Math.floor(t72.screenPoint[1]), n61.push(t72), f5(i47, t72.screenPoint);
    };
    e68.sortResults(t71.all), null != t71.min.dist && s71(t71.min);
    for (const a61 of t71.all)
      t71.min.target.object !== a61.target.object && t71.max.target.object !== a61.target.object && s71(a61);
    if (null != t71.max.dist && t71.max.target.object !== t71.min.target.object && s71(t71.max), !n61.length)
      return;
    i47[0] === i47[2] && (i47[2] += 1), i47[1] === i47[3] && (i47[3] += 1);
    const o58 = r55.fullWidth, l45 = r55.fullHeight, c44 = Math.max(0, i47[0] - x24), m46 = Math.max(0, i47[1] - x24), y26 = Math.min(M2(i47) + 2 * x24, o58 - c44), f48 = Math.min(s9(i47) + 2 * x24, l45 - m46);
    if (y26 <= 0 || f48 <= 0)
      return;
    const g23 = new Uint8Array(y26 * f48 * 4);
    this._view._stage.renderer.readHUDVisibility(c44, m46, y26, f48, g23);
    let R18 = true;
    const _26 = null == e68.results.max.dist;
    let I27 = 0;
    for (const a61 of n61)
      for (const t72 of E29) {
        const r56 = 4 * (Math.min(a61.screenPoint[0] + t72[0], o58) - i47[0] + (Math.min(a61.screenPoint[1] + t72[1], l45) - i47[1]) * y26);
        if (!(r56 < 0 || r56 >= g23.length) && g23[r56]) {
          R18 && (e68.results.min.copy(a61.result), R18 = false), _26 && e68.results.max.copy(a61.result), e68.options.store === e29.ALL && e68.results.all.splice(I27++, 0, a61.result);
          break;
        }
      }
  }
};
var x24 = 1;
var E29 = (() => {
  const e68 = [], t71 = x24;
  for (let r55 = -t71; r55 <= t71; r55++)
    for (let n61 = -t71; n61 <= t71; n61++)
      e68.push([n61 + t71, r55 + t71]);
  return e68;
})();
var H15 = class {
  constructor(e68) {
    this.result = e68, this.screenPoint = x4();
  }
};
var L16;
function T14(e68) {
  return L16 && L16.viewingMode === e68 || (L16 = T5(e68)), L16;
}
var A22 = class {
  constructor(e68, t71) {
    this.layers = new Array(), this.sliceableLayers = new Array(), this.include = e68 == null ? void 0 : e68.include, this.exclude = e68 == null ? void 0 : e68.exclude, t71((e69) => {
      e69.pickable && this.filterLayerUid(e69.apiLayerUid) && (e69.sliceable ? this.sliceableLayers : this.layers).push(e69);
    });
  }
  filterLayerUid(e68) {
    const { include: t71, exclude: r55 } = this;
    return null == e68 ? null == t71 && null == r55 : (null == t71 || t71.has(e68)) && (null == r55 || !r55.has(e68));
  }
  filterRenderGeometry(e68) {
    return this.filterLayerUid(e68.layerUid);
  }
};
function k18(e68) {
  return "object" == typeof e68 && "intersect" in e68;
}
var F13 = n7();
var S15 = n7();
var D11 = x4();

// node_modules/@arcgis/core/views/3d/support/CombinedElevationProvider.js
var h27 = class extends o3.EventedMixin(S3) {
  get spatialReference() {
    var _a, _b;
    return (_b = (_a = this.view) == null ? void 0 : _a.basemapTerrain) == null ? void 0 : _b.spatialReference;
  }
  constructor(e68) {
    super(e68), this._im = new Array(), this._ground = new Array(), this._scene = new Array(), this.lastElevationQuery = null, this._cacheEnabled = false;
  }
  destroy() {
    this._cachedQuery = u(this._cachedQuery);
  }
  enableCache(e68) {
    e68 || (this.lastElevationQuery = null), this._cacheEnabled = e68;
  }
  getElevation(e68, t71, s71, r55, n61) {
    if (this._cacheEnabled && null != this.lastElevationQuery) {
      const o59 = this.lastElevationQuery;
      if (e68 === o59.x && t71 === o59.y && s71 === o59.z && G(r55, o59.spatialReference) && n61 === o59.queryContext)
        return o59.result;
    }
    let o58 = null;
    return o58 = p36(o58, this._im, e68, t71, s71, r55, n61), null == o58 && (o58 = p36(o58, this._ground, e68, t71, s71, r55, n61)), "scene" === n61 && (o58 = p36(o58, this._scene, e68, t71, s71, r55, n61)), this._cacheEnabled && (this.lastElevationQuery = { x: e68, y: t71, z: s71, spatialReference: r55, queryContext: n61, result: o58 }), o58;
  }
  getSphereElevationBounds(e68, t71, s71) {
    const r55 = new e23();
    function n61(n62) {
      for (const o58 of n62)
        if (o58.getSphereElevationBounds) {
          const n63 = o58.getSphereElevationBounds(e68, t71, s71);
          null != n63 && r55.expandElevationRangeValues(n63.elevationRangeMin, n63.elevationRangeMax);
        }
    }
    return n61(this._ground), n61(this._im), "scene" === s71 && n61(this._scene), r55;
  }
  getRootElevationBounds() {
    const e68 = new e23();
    for (const t71 of [this._im, this._ground, this._scene])
      t71.forEach((t72) => {
        if (t72.getRootElevationBounds) {
          const s71 = t72.getRootElevationBounds();
          null != s71 && e68.expandElevationRangeValues(s71.elevationRangeMin, s71.elevationRangeMax);
        }
      });
    return e68;
  }
  async queryElevation(e68, t71, s71, r55, o58, i47 = null, a61 = 0) {
    const l45 = this._getElevationQuery(r55);
    try {
      const n61 = await l45.queryElevation(e68, t71, i47, a61);
      return "scene" === o58 ? p36(n61, this._scene, e68, t71, s71, r55, o58) : n61;
    } catch (c44) {
      return a3(c44), this.getElevation(e68, t71, s71, r55, o58);
    }
  }
  register(e68, t71) {
    this.addHandles(t71.on("elevation-change", (e69) => this.emit("elevation-change", e69)), t71), this._providersFromContext(e68).push(t71);
  }
  unregister(e68) {
    this.removeHandles(e68);
    for (const t71 of [this._im, this._ground, this._scene]) {
      const s71 = t71.indexOf(e68);
      s71 > -1 && t71.splice(s71, 1);
    }
  }
  _providersFromContext(e68) {
    switch (e68) {
      case "ground":
        return this._ground;
      case "im":
        return this._im;
      case "scene":
        return this._scene;
    }
  }
  _getElevationQuery(e68 = this.view.spatialReference) {
    const t71 = this._cachedQuery;
    if (null != t71 && G(e68, t71.spatialReference))
      return t71;
    t71 == null ? void 0 : t71.destroy({ completeTasks: true });
    const { wkid: s71, wkt: r55, wkt2: n61, latestWkid: o58 } = e68, i47 = new a25(this.view.resourceController.scheduler, new f2({ wkid: s71, wkt: r55, wkt2: n61, latestWkid: o58 }), () => {
      var _a;
      return (_a = this.view.map) == null ? void 0 : _a.ground;
    }, { maximumAutoTileRequests: 4 });
    return this._cachedQuery = i47, i47;
  }
};
function p36(e68, t71, s71, r55, n61, o58, i47) {
  for (const a61 of t71) {
    const t72 = a61.getElevation(s71, r55, n61, o58, i47);
    null != t72 && (e68 = null != e68 ? Math.max(t72, e68) : t72);
  }
  return e68;
}
e([y2({ constructOnly: true })], h27.prototype, "view", void 0), e([y2()], h27.prototype, "spatialReference", null), h27 = e([a4("esri.views.3d.support.CombinedElevationProvider")], h27);

// node_modules/@arcgis/core/views/3d/support/DisplayQualityProfile.js
var a41 = class _a {
  static isValidProfile(e68) {
    return e68 in _a.profiles;
  }
  static getDefaultProfile() {
    return has("esri-iPhone") ? "low" : "medium";
  }
  static apply(e68, i47) {
    const o58 = _a.profiles[e68];
    i47.graphics3D.maxTotalNumberOfFeatures = o58.graphics3D.maxTotalNumberOfFeatures, i47.graphics3D.maxNumberOfDrawCalls = o58.graphics3D.maxNumberOfDrawCalls, i47.graphics3D.maxTotalNumberOfVertices = o58.graphics3D.maxTotalNumberOfVertices, i47.graphics3D.polygonLodFactor = o58.graphics3D.polygonLodFactor, i47.graphics3D.polylineLodFactor = o58.graphics3D.polylineLodFactor, i47.graphics3D.snapshotAvailable = o58.graphics3D.snapshotAvailable, i47.graphics3D.skipHighSymbolLods = o58.graphics3D.skipHighSymbolLods, i47.graphics3D.uncompressedTextureDownsamplingEnabled = o58.graphics3D.uncompressedTextureDownsamplingEnabled;
    const t71 = i47.sceneService.object, l45 = o58.sceneService.object;
    t71.lodFactor = l45.lodFactor, i47.sceneService.point.lodFactor = o58.sceneService.point.lodFactor, i47.sceneService.integratedMesh.lodFactor = o58.sceneService.integratedMesh.lodFactor, i47.sceneService.pointCloud.lodFactor = o58.sceneService.pointCloud.lodFactor, i47.sceneService.uncompressedTextureDownsamplingEnabled = o58.sceneService.uncompressedTextureDownsamplingEnabled, i47.tiledSurface.lodBias = o58.tiledSurface.lodBias, i47.tiledSurface.angledSplitBias = o58.tiledSurface.angledSplitBias, i47.tiledSurface.vtlContentZoom = o58.tiledSurface.vtlContentZoom, i47.tiledSurface.reduceTileLevelDifferences = o58.tiledSurface.reduceTileLevelDifferences, i47.heatmap.pixelRatio = o58.heatmap.pixelRatio, i47.heatmap.maxTotalNumberOfFeatures = o58.heatmap.maxTotalNumberOfFeatures, i47.fadeDuration = o58.fadeDuration, i47.antialiasingEnabled = o58.antialiasingEnabled, i47.physicallyBasedRenderingEnabled = o58.physicalBasedRenderingEnabled, i47.highQualityTransparency = o58.highQualityTransparency, i47.highResolutionAtmosphere = o58.highResolutionAtmosphere, i47.reflections = o58.reflections, i47.ambientOcclusion = o58.ambientOcclusion, i47.memoryLimit = o58.memoryLimit, i47.additionalCacheMemory = o58.additionalCacheMemory, i47.frameRate = o58.frameRate, i47.maximumPixelRatio = o58.maximumPixelRatio;
  }
};
a41.test = { reset() {
  const e68 = o46();
  for (const i47 of Object.keys(e68))
    a41.profiles[i47] = e68[i47];
} };
var i37 = { IPhone12Pro: 120, GalaxyS20: 200, FullHD: 240, SurfacePro7: 300, FullHDRetina: 430 };
function o46() {
  const a61 = !!has("esri-mobile"), o58 = !!has("ios"), t71 = n3(400);
  return { low: { graphics3D: { maxTotalNumberOfFeatures: 25e3, maxNumberOfDrawCalls: 8e3, maxTotalNumberOfVertices: 255e4, polygonLodFactor: 0.5, polylineLodFactor: 1, snapshotAvailable: false, skipHighSymbolLods: true, uncompressedTextureDownsamplingEnabled: true }, heatmap: { pixelRatio: 0.125, maxTotalNumberOfFeatures: 5e4 }, sceneService: { object: { lodFactor: 0.2 }, point: { lodFactor: 1 }, integratedMesh: { lodFactor: 0.6 }, pointCloud: { lodFactor: 0.5 }, uncompressedTextureDownsamplingEnabled: true }, tiledSurface: { lodBias: -1, angledSplitBias: 0.5, vtlContentZoom: 0.75, reduceTileLevelDifferences: true }, fadeDuration: n3(0), antialiasingEnabled: false, physicalBasedRenderingEnabled: false, highQualityTransparency: false, highResolutionAtmosphere: false, reflections: false, ambientOcclusion: false, memoryLimit: 200 + i37.IPhone12Pro, additionalCacheMemory: 0, frameRate: 0, maximumPixelRatio: 1 }, medium: { graphics3D: { maxTotalNumberOfFeatures: 1e5, maxNumberOfDrawCalls: 17e3, maxTotalNumberOfVertices: 625e4, polygonLodFactor: a61 ? 0.8 : 1, polylineLodFactor: a61 ? 1.2 : 1.5, snapshotAvailable: !o58, skipHighSymbolLods: false, uncompressedTextureDownsamplingEnabled: a61 }, heatmap: { pixelRatio: 0.25, maxTotalNumberOfFeatures: 13e4 }, sceneService: { object: { lodFactor: 1 }, point: { lodFactor: 1 }, integratedMesh: { lodFactor: 1 }, pointCloud: { lodFactor: 1 }, uncompressedTextureDownsamplingEnabled: a61 }, tiledSurface: { lodBias: 0, angledSplitBias: 1, vtlContentZoom: 1.5, reduceTileLevelDifferences: !has("disable-feature:reduce-map-tile-levels") }, fadeDuration: t71, antialiasingEnabled: true, physicalBasedRenderingEnabled: true, highQualityTransparency: true, highResolutionAtmosphere: false, reflections: false, ambientOcclusion: false, memoryLimit: a61 ? 600 + i37.GalaxyS20 : 750 + i37.FullHD, additionalCacheMemory: a61 ? -100 : 150, frameRate: 0, maximumPixelRatio: 1 }, high: { graphics3D: { maxTotalNumberOfFeatures: 1e5, maxNumberOfDrawCalls: 17e3, maxTotalNumberOfVertices: 125e5, polygonLodFactor: a61 ? 1.2 : 2, polylineLodFactor: a61 ? 1.2 : 2, snapshotAvailable: !o58, skipHighSymbolLods: false, uncompressedTextureDownsamplingEnabled: false }, heatmap: { pixelRatio: 0.5, maxTotalNumberOfFeatures: 23e4 }, sceneService: { object: { lodFactor: 1 }, point: { lodFactor: 1 }, integratedMesh: { lodFactor: 1 }, pointCloud: { lodFactor: 1 }, uncompressedTextureDownsamplingEnabled: false }, tiledSurface: { lodBias: 0, angledSplitBias: 1, vtlContentZoom: 1.5, reduceTileLevelDifferences: !has("disable-feature:reduce-map-tile-levels") }, fadeDuration: t71, antialiasingEnabled: true, physicalBasedRenderingEnabled: true, highQualityTransparency: true, highResolutionAtmosphere: true, reflections: true, ambientOcclusion: true, memoryLimit: a61 ? 900 + i37.SurfacePro7 : 1500 + i37.FullHDRetina, additionalCacheMemory: a61 ? -150 : 0, frameRate: 0, maximumPixelRatio: a61 ? 1 : 1 / 0 } };
}
!function(e68) {
  e68.profiles = o46();
}(a41 || (a41 = {}));
var t52 = a41;

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/highlight/HighlightDefaults.js
var r41 = new u6([0, 255, 255]);
var e50 = 1;
var n44 = 0.25;
var t53 = new u6([0, 0, 0]);
var m35 = 0.4;
var p37 = 0.2;

// node_modules/@arcgis/core/views/3d/support/HighlightOptions.js
var d34 = class extends S3 {
  constructor() {
    super(...arguments), this.color = r41.clone(), this.haloColor = null, this.haloOpacity = e50, this.fillOpacity = n44, this.shadowOpacity = m35, this.shadowColor = t53.clone(), this.shadowDifference = p37;
  }
};
e([y2({ type: u6 })], d34.prototype, "color", void 0), e([y2({ type: u6 })], d34.prototype, "haloColor", void 0), e([y2()], d34.prototype, "haloOpacity", void 0), e([y2()], d34.prototype, "fillOpacity", void 0), e([y2()], d34.prototype, "shadowOpacity", void 0), e([y2({ type: u6 })], d34.prototype, "shadowColor", void 0), e([y2()], d34.prototype, "shadowDifference", void 0), d34 = e([a4("esri.views.3d.support.HighlightOptions")], d34);
var y19 = d34;

// node_modules/@arcgis/core/views/3d/support/MapCoordsHelper.js
var a42 = class {
  constructor(i47, s71) {
    this.spatialReference = s71, this.unitInMeters = W(this.spatialReference, s6(this.spatialReference).metersPerDegree);
    const m46 = i47 && "portalItem" in i47 ? i47.portalItem : void 0;
    this._geometryServiceURLPromise = n24(m46).catch(() => {
      throw new s("mapcoordshelper:missing-geometry-service", "Must specify geometryService in esri/config");
    });
  }
  async toGeographic(e68) {
    const r55 = await this._geometryServiceURLPromise;
    let t71, o58 = true;
    Array.isArray(e68[0]) && "number" != typeof e68[0] ? t71 = e68 : (t71 = [e68], o58 = false);
    const a61 = t71.map((e69) => e69 instanceof x ? e69 : new x(e69, this.spatialReference)), c44 = new p13({ geometries: a61, outSpatialReference: f2.WGS84 }), n61 = (await n23(r55, c44)).map((e69) => "point" === e69.type ? [e69.x, e69.y] : void 0).filter((e69) => !!e69);
    return o58 ? n61 : n61[0];
  }
};

// node_modules/@arcgis/core/views/3d/terrain/LayerClass.js
var A23;
!function(A32) {
  A32[A32.ELEVATION = 0] = "ELEVATION", A32[A32.MAP = 1] = "MAP";
}(A23 || (A23 = {}));
var E30 = [A23.ELEVATION, A23.MAP];

// node_modules/@arcgis/core/views/3d/support/popupHitTest.js
async function t54(a61, t71) {
  var _a, _b, _c, _d, _e5;
  const { results: o58, ground: l45 } = await t43(a61, t71), p48 = (!l45.layer || !m5(l45.layer.type)) && l45.mapPoint, y26 = [], c44 = i38(a61), u46 = p48 ? s57(a61, c44) : n45;
  let d44 = 0, f48 = 0;
  const m46 = () => {
    const e68 = u46.layerViews[f48];
    p48 && e68 && "fetchPopupFeaturesAtLocation" in e68 && y26.push({ mapPoint: l45.mapPoint, layerView: e68 }), ++f48;
  };
  let h36 = null;
  for (; d44 < o58.length || f48 < u46.layerViews.length; ) {
    const e68 = o58[d44];
    if (e68 && "graphic" !== e68.type)
      ++d44;
    else if ("scene" !== ((_a = e68 == null ? void 0 : e68.layer) == null ? void 0 : _a.type) || ((_b = e68 == null ? void 0 : e68.layer) == null ? void 0 : _b.parent) !== ((_c = a61 == null ? void 0 : a61.map) == null ? void 0 : _c.basemap))
      if (e68) {
        const a62 = (_d = e68.layer) == null ? void 0 : _d.uid, r55 = u46.layerUids.has(a62) && e68.distance === l45.distance, t72 = c44.get((_e5 = e68.layer) == null ? void 0 : _e5.uid);
        if (h36 ?? (h36 = e68.mapPoint), f48 < u46.layerViews.length && (r55 || (e68.distance ?? 0) > l45.distance) && u46.layerViews[f48] !== t72) {
          m46();
          continue;
        }
        y26.push({ graphic: e68.graphic, layerView: t72 }), ++d44;
      } else
        m46();
    else
      ++d44;
  }
  return h36 ?? (h36 = l45.mapPoint), { hits: y26, location: h36 };
}
function s57(e68, r55) {
  const t71 = /* @__PURE__ */ new Set(), s71 = [];
  for (let i47 = e68.basemapTerrain.numLayers(A23.MAP) - 1; i47 >= 0; i47--) {
    const r56 = e68.basemapTerrain.layerViewByIndex(i47, A23.MAP);
    t71.add(r56.layer.uid), s71.push(r56);
  }
  const n61 = e68.basemapTerrain.overlayManager.renderer.layers;
  for (const { uid: a61 } of n61) {
    const e69 = r55.get(a61);
    e69 && (t71.add(a61), s71.push(e69));
  }
  return s71.reverse(), { layerUids: t71, layerViews: s71 };
}
var n45 = { layerUids: /* @__PURE__ */ new Set(), layerViews: [] };
function i38(e68) {
  const a61 = /* @__PURE__ */ new Map();
  for (const r55 of e68.allLayerViews) {
    const e69 = r55.layer.uid;
    a61.set(e69, r55);
  }
  return a61;
}

// node_modules/@arcgis/core/views/3d/support/QualitySettings.js
var r42 = class extends S3 {
  constructor() {
    super(...arguments), this.minTotalNumberOfFeatures = 2e3, this.maxTotalNumberOfFeatures = 5e4, this.maxNumberOfDrawCalls = 17e3, this.maxTotalNumberOfVertices = 17e5, this.snapshotAvailable = true, this.polygonLodFactor = 1, this.polylineLodFactor = 1, this.skipHighSymbolLods = false, this.uncompressedTextureDownsamplingEnabled = false;
  }
};
e([y2()], r42.prototype, "minTotalNumberOfFeatures", void 0), e([y2()], r42.prototype, "maxTotalNumberOfFeatures", void 0), e([y2()], r42.prototype, "maxNumberOfDrawCalls", void 0), e([y2()], r42.prototype, "maxTotalNumberOfVertices", void 0), e([y2()], r42.prototype, "snapshotAvailable", void 0), e([y2()], r42.prototype, "polygonLodFactor", void 0), e([y2()], r42.prototype, "polylineLodFactor", void 0), e([y2()], r42.prototype, "skipHighSymbolLods", void 0), e([y2()], r42.prototype, "uncompressedTextureDownsamplingEnabled", void 0), r42 = e([a4("esri.views.3d.support.QualitySettings.Graphics3DSettings")], r42);
var p38 = class extends S3 {
  constructor() {
    super(...arguments), this.lodFactor = 1;
  }
};
e([y2()], p38.prototype, "lodFactor", void 0), p38 = e([a4("esri.views.3d.support.QualitySettings.LoDFactorSettings")], p38);
var a43 = class extends S3 {
  constructor() {
    super(...arguments), this.object = new p38(), this.point = new p38(), this.integratedMesh = new p38(), this.pointCloud = new p38(), this.uncompressedTextureDownsamplingEnabled = false;
  }
};
e([y2({ type: p38 })], a43.prototype, "object", void 0), e([y2({ type: p38 })], a43.prototype, "point", void 0), e([y2({ type: p38 })], a43.prototype, "integratedMesh", void 0), e([y2({ type: p38 })], a43.prototype, "pointCloud", void 0), e([y2()], a43.prototype, "uncompressedTextureDownsamplingEnabled", void 0), a43 = e([a4("esri.views.3d.support.QualitySettings.SceneServiceSettings")], a43);
var n46 = class extends S3 {
  constructor() {
    super(...arguments), this.lodBias = 0, this.angledSplitBias = 1, this.vtlContentZoom = 1, this.reduceTileLevelDifferences = true;
  }
};
e([y2()], n46.prototype, "lodBias", void 0), e([y2()], n46.prototype, "angledSplitBias", void 0), e([y2()], n46.prototype, "vtlContentZoom", void 0), e([y2()], n46.prototype, "reduceTileLevelDifferences", void 0), n46 = e([a4("esri.views.3d.support.QualitySettings.TiledSurfaceSettings")], n46);
var d35 = class extends S3 {
  constructor() {
    super(...arguments), this.pixelRatio = 1, this.maxTotalNumberOfFeatures = 5e4;
  }
};
e([y2()], d35.prototype, "pixelRatio", void 0), e([y2()], d35.prototype, "maxTotalNumberOfFeatures", void 0), d35 = e([a4("esri.views.3d.support.QualitySettings.HeatmapSettings")], d35);
var l33 = class extends S3 {
  constructor() {
    super(...arguments), this.graphics3D = new r42(), this.sceneService = new a43(), this.tiledSurface = new n46(), this.heatmap = new d35(), this.fadeDuration = n3(400), this.antialiasingEnabled = true, this.physicallyBasedRenderingEnabled = false, this.highQualityTransparency = true, this.highResolutionAtmosphere = false, this.reflections = false, this.ambientOcclusion = false, this.memoryLimit = 750, this.additionalCacheMemory = 0, this.frameRate = void 0, this.maximumPixelRatio = 1 / 0;
  }
};
e([y2({ type: r42 })], l33.prototype, "graphics3D", void 0), e([y2({ type: a43 })], l33.prototype, "sceneService", void 0), e([y2({ type: n46 })], l33.prototype, "tiledSurface", void 0), e([y2({ type: d35 })], l33.prototype, "heatmap", void 0), e([y2()], l33.prototype, "fadeDuration", void 0), e([y2()], l33.prototype, "antialiasingEnabled", void 0), e([y2()], l33.prototype, "physicallyBasedRenderingEnabled", void 0), e([y2()], l33.prototype, "highQualityTransparency", void 0), e([y2()], l33.prototype, "highResolutionAtmosphere", void 0), e([y2()], l33.prototype, "reflections", void 0), e([y2()], l33.prototype, "ambientOcclusion", void 0), e([y2()], l33.prototype, "memoryLimit", void 0), e([y2()], l33.prototype, "additionalCacheMemory", void 0), e([y2()], l33.prototype, "frameRate", void 0), e([y2()], l33.prototype, "maximumPixelRatio", void 0), l33 = e([a4("esri.views.3d.support.QualitySettings")], l33);
var c36 = l33;

// node_modules/@arcgis/core/views/3d/support/ResourceController.js
var f34 = class extends S3 {
  constructor() {
    super(...arguments), this.updating = false;
  }
};
function j18(e68) {
  return new T15({ view: e68 });
}
e([y2({ readOnly: true })], f34.prototype, "updating", void 0), f34 = e([a4("esri.views.3d.support.ResourceController.ResourceControllerMain")], f34);
var T15 = class extends f34 {
  constructor() {
    super(...arguments), this._immediateTask = F4, this._normalTask = F4, this._updatingObjects = r12([]), this._frameTask = null;
  }
  get immediate() {
    return this._immediateTask;
  }
  get normal() {
    return this._normalTask;
  }
  initialize() {
    this._scheduler = g4(), this._memoryController = l16(this.view), this._streamDataLoader = new D3(), this._streamDataLoader.setup(I8, E17, this._scheduler), this.addHandles([d3(() => {
      var _a;
      return (_a = this.view.state) == null ? void 0 : _a.mode;
    }, (e68) => {
      null != e68 && (this._scheduler.state = e68);
    }, C), d3(() => this.view.stationary, () => this._stationaryChangedHandler())]), this._frameTask = A2({ update: (e68) => this._frame(e68) }), this._immediateTask = this._scheduler.registerTask(I5.RESOURCE_CONTROLLER_IMMEDIATE), this._normalTask = this._scheduler.registerTask(I5.RESOURCE_CONTROLLER);
  }
  destroy() {
    this._immediateTask.remove(), this._normalTask.remove(), this._frameTask = l(this._frameTask), this._streamDataLoader = u(this._streamDataLoader), this._memoryController = u(this._memoryController), this._scheduler = u(this._scheduler), this.view = null;
  }
  get updating() {
    var _a, _b, _c, _d;
    return !!(((_a = this._memoryController) == null ? void 0 : _a.updating) || ((_b = this._streamDataLoader) == null ? void 0 : _b.updating) || ((_c = this._immediateTask) == null ? void 0 : _c.updating)) || ((_d = this._updatingObjects) == null ? void 0 : _d.value.some((e68) => e68.updating));
  }
  get scheduler() {
    return this._scheduler;
  }
  get memoryController() {
    return this._memoryController;
  }
  createStreamDataRequester(e68) {
    const t71 = this._streamDataLoader;
    return { request: (r55, s71, o58) => t71.request(r55, s71, e68, o58), get busy() {
      return !t71.hasDownloadSlots(e68);
    } };
  }
  addUpdatingObject(e68) {
    const t71 = this._updatingObjects;
    return t71.value = [...t71.value, e68], e3(() => {
      t71.value = t71.value.filter((t72) => t72 !== e68);
    });
  }
  _frame(e68) {
    this.view.suspended || this.view.stateManager && (this.view.stateManager.step(u3(e68.deltaTime)), !this._scheduler) || (this._memoryController.update(), this._scheduler.updateBudget(e68) && this._scheduler.frame());
  }
  _stationaryChangedHandler() {
    this.memoryController.resetStableQuality();
  }
  get test() {
    return { getQueueStats: (e68) => this._streamDataLoader.test.loadQueue.getStatsForType(e68) };
  }
};
e([y2()], T15.prototype, "view", void 0), e([y2()], T15.prototype, "_scheduler", void 0), e([y2()], T15.prototype, "_memoryController", void 0), e([y2()], T15.prototype, "_streamDataLoader", void 0), e([y2()], T15.prototype, "_immediateTask", void 0), e([y2()], T15.prototype, "_normalTask", void 0), e([y2()], T15.prototype, "_updatingObjects", void 0), e([y2({ readOnly: true })], T15.prototype, "updating", null), T15 = e([a4("esri.views.3d.support.ResourceController")], T15);

// node_modules/@arcgis/core/views/3d/support/LayerPerformanceInfo.js
var e51 = class {
  constructor(e68) {
    this.layer = null, this.memory = 0, this.displayedNumberOfFeatures = 0, this.maximumNumberOfFeatures = null, this.totalNumberOfFeatures = null, this.layer = e68.layer;
    const t71 = e68.performanceInfo;
    this.memory = t71.usedMemory, this.displayedNumberOfFeatures = t71.displayedFeatures, this.maximumNumberOfFeatures = t71.maximumFeatures, this.totalNumberOfFeatures = t71.totalFeatures;
  }
};

// node_modules/@arcgis/core/views/3d/support/SceneViewPerformanceInfo.js
var s58 = class {
  constructor(s71) {
    var _a;
    if (this.totalMemory = 0, this.usedMemory = 0, this.quality = 1, this.load = 0, this.terrainMemory = 0, this.edgesMemory = 0, this.layerPerformanceInfos = new Array(), this.cachedMemory = 0, this.fboMemory = 0, null != s71.resourceController) {
      const r55 = s71.resourceController.memoryController;
      this.totalMemory = (r55.maxMemory ?? 0) * E9.MEGABYTES, this.usedMemory = Math.round(r55.usedMemory * this.totalMemory), this.quality = s71.quality, this.load = s71.resourceController.scheduler.load, this.cachedMemory = r55.usedCacheMemory;
    }
    this.terrainMemory = ((_a = s71.basemapTerrain) == null ? void 0 : _a.usedMemory) ?? 0, this.edgesMemory = s71._stage.renderer.usedMemory.edges ?? 0, this.fboMemory = s71._stage.renderer.usedMemory.fbos ?? 0, s71.allLayerViews.items.forEach((e68) => {
      e30(e68) && this.layerPerformanceInfos.push(new e51(e68));
    }), this.layerPerformanceInfos.sort((e68, r55) => r55.memory - e68.memory);
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/ObjectResourceCache.js
var a44 = class {
  constructor(t71) {
    this._gltfLoading = /* @__PURE__ */ new Map(), this._wosrLoading = /* @__PURE__ */ new Map(), this._gltfMemCache = t71("gltf-resources", () => {
    }), this._wosrMemCache = t71("wosr-resources", () => {
    });
  }
  destroy() {
    this._gltfLoading.forEach((t71) => t71.abortController.abort()), this._wosrLoading.forEach((t71) => t71.abortController.abort()), this._gltfMemCache.destroy(), this._wosrMemCache.destroy();
  }
  loadGLTF(t71, o58, e68) {
    const l45 = e68 ? `gltfPBR:${t71}` : `gltf:${t71}`, a61 = this._gltfMemCache.get(l45);
    return null != a61 ? Promise.resolve(a61) : i39(this._gltfLoading, this._gltfMemCache, l45, (o59) => l10(new n17(o59.streamDataRequester), t71, o59, e68), o58);
  }
  loadWOSR(t71, o58) {
    const e68 = `wosr:${t71}:${o58.disableTextures}`, r55 = this._wosrMemCache.get(e68);
    return null != r55 ? Promise.resolve(r55) : i39(this._wosrLoading, this._wosrMemCache, e68, (o59) => A7(t71, o59), o58);
  }
};
async function i39(r55, s71, l45, a61, i47) {
  s3(i47);
  const f48 = m(i47, () => n47(r55, l45));
  let c44 = r55.get(l45);
  if (c44)
    c44.refCount++;
  else {
    const t71 = new AbortController();
    c44 = { refCount: 1, abortController: t71, promise: a61({ ...i47, signal: t71.signal }) }, r55.set(l45, c44);
  }
  try {
    const t71 = await c44.promise;
    return s71.put(l45, t71, t71.size), r55.delete(l45), s3(i47), t71;
  } finally {
    l(f48);
  }
}
function n47(t71, o58) {
  const e68 = t71.get(o58);
  if (null != e68) {
    if (--e68.refCount > 0)
      return;
  }
  t71.delete(o58), null != e68 && e68.abortController.abort();
}

// node_modules/@arcgis/core/views/3d/support/TextureCollection.js
var i40 = class extends S3 {
  constructor(e68, t71) {
    super({}), this._stage = e68, this._textureRequests = /* @__PURE__ */ new Map(), this._frameTask = (t71 == null ? void 0 : t71.registerTask(I5.TEXTURE_UNLOAD)) ?? F4;
  }
  normalizeCtorArgs() {
    return {};
  }
  destroy() {
    var _a, _b, _c;
    super.destroy(), (_a = this._frameTask) == null ? void 0 : _a.remove(), (_b = this._textureRequests) == null ? void 0 : _b.forEach((e68) => this._releaseTextureRequest(e68)), (_c = this._textureRequests) == null ? void 0 : _c.clear();
  }
  get updating() {
    return this._frameTask.updating;
  }
  fromData(e68, t71) {
    const r55 = this.makeUid(e68);
    let s71 = this._textureRequests.get(r55);
    if (!s71) {
      const e69 = new a45();
      e69.texture = t71(), this._stage && (e69.texture.load(this._stage.renderView.renderingContext), this._stage.add(e69.texture)), this._textureRequests.set(r55, e69), s71 = e69;
    }
    return s71.referenceCount++, new n48(r55, s71.texture, () => this._release(r55));
  }
  _release(e68) {
    const t71 = this._textureRequests.get(e68);
    t71 ? (t71.referenceCount < 1 && console.warn("TextureCollection: reference count is < 1 for " + e68), t71.referenceCount--, t71.referenceCount < 1 && this._frameTask.schedule(() => this._releaseNow(e68))) : console.warn(`TextureCollection: texture doesn't exist: '${e68}'`);
  }
  get test() {
    return { textureRequests: this._textureRequests };
  }
  _releaseNow(e68) {
    var _a;
    if (!this._textureRequests)
      return;
    const t71 = this._textureRequests.get(e68);
    !t71 || t71.referenceCount > 0 || ((_a = t71.texture) == null ? void 0 : _a.unload(), this._releaseTextureRequest(t71), this._textureRequests.delete(e68));
  }
  _releaseTextureRequest(e68) {
    var _a;
    e68.texture ? (_a = this._stage) == null ? void 0 : _a.remove(e68.texture) : e68.abortController && (e68.abortController.abort(), e68.abortController = null);
  }
  makeUid(e68, t71 = null) {
    return null != t71 ? `${e68}.${t71}px` : e68;
  }
};
e([y2()], i40.prototype, "_frameTask", void 0), e([y2()], i40.prototype, "updating", null), i40 = e([a4("esri.views.3d.support.TextureCollection")], i40);
var n48 = class {
  constructor(e68, t71, r55) {
    this.uid = e68, this.texture = t71, this.release = r55;
  }
};
var a45 = class {
  constructor() {
    this.referenceCount = 0;
  }
};

// node_modules/@arcgis/core/views/3d/support/StreamTextureCollection.js
var a46 = class extends i40 {
  constructor(e68, t71, r55) {
    super(t71, r55), this._streamDataRequester = e68;
  }
  async fromUrl(r55, s71, n61) {
    s3(n61);
    const l45 = n61 == null ? void 0 : n61.signal, a61 = this.makeUid(r55, s71);
    let h36 = this._textureRequests.get(a61);
    if (!h36) {
      const e68 = new AbortController(), t71 = this._streamDataRequester.request(r55, "image", { uid: a61, signal: e68.signal });
      h36 = new a45(), h36.abortController = e68;
      const n62 = h36;
      this._textureRequests.set(a61, h36), h36.textureAsync = t71.then(async (e69) => {
        const t72 = this._createTexture(r55, e69, s71);
        return n62.texture = t72, n62.abortController = null, await t72.load(this._stage.renderView.renderingContext), this._stage.add(t72), new n48(a61, t72, () => this._release(a61));
      }, (e69) => {
        throw n62.abortController = null, e69;
      });
    }
    h36.referenceCount++;
    try {
      return await h2(h36.textureAsync, l45);
    } catch (u46) {
      throw this._release(a61), u46;
    }
  }
  _createTexture(e68, t71, s71) {
    var _a2;
    const i47 = { width: t71.width, height: t71.height, wrap: { s: D2.CLAMP_TO_EDGE, t: D2.CLAMP_TO_EDGE }, preMultiplyAlpha: true, reloadable: true };
    if (Pt(e68)) {
      if (s71 || 0 === t71.width && 0 === t71.height) {
        const e69 = t71.width ? t71.height / t71.width : 1;
        s71 = s71 || 64, e69 > 1 ? (t71.width = Math.round(s71 / e69), t71.height = s71) : (t71.width = s71, t71.height = Math.round(s71 * e69));
      }
      ((_a2 = this._stage.renderView) == null ? void 0 : _a2.renderingContext.driverTest.svgPremultipliesAlpha.result) && (i47.preMultiplyAlpha = false);
    }
    return new N4(t71, i47);
  }
};

// node_modules/@arcgis/core/views/3d/support/SharedSymbolResources.js
var S16 = class {
  constructor(e68) {
    this.streamDataRequester = null, this._graphicsOwners = [], this._screenSizePerspectiveHandles = null, this.cimSymbolRasterizer = null, this._viewState = e68.viewState, this._view = e68.view, this._pointsOfInterest = e68.pointsOfInterest, this.streamDataRequester = e68.resourceController.createStreamDataRequester(A11.SYMBOLOGY), this.objectResourceCache = new a44((t72, s71) => e68.resourceController.memoryController.newCache(t72, s71)), this.textures = new a46(this.streamDataRequester, e68.view._stage, e68.resourceController.scheduler);
    const t71 = s6(this._view.spatialReference).radius;
    this.screenSizePerspectiveSettings = n21(e68.viewingMode, t71), this.screenSizePerspectiveSettingsLabels = i10(e68.viewingMode, t71);
  }
  destroy() {
    this.textures.destroy(), this.streamDataRequester = null;
  }
  addGraphicsOwner(t71) {
    if (!t71)
      return e3();
    this._graphicsOwners.push(t71);
    const r55 = d3(() => {
      var _a;
      return (_a = t71.layer) == null ? void 0 : _a.screenSizePerspectiveEnabled;
    }, () => this._updateScreenSizePerspectiveEnabled());
    return this._updateScreenSizePerspectiveEnabled(), e3(() => {
      r55.remove(), z(this._graphicsOwners, t71), this._updateScreenSizePerspectiveEnabled();
    });
  }
  _updateScreenSizePerspectiveEnabled() {
    const e68 = this._graphicsOwners.some((e69) => {
      var _a;
      return true === ((_a = e69.layer) == null ? void 0 : _a.screenSizePerspectiveEnabled);
    });
    if (e68 && !this._screenSizePerspectiveHandles) {
      this._screenSizePerspectiveHandles = new r();
      const e69 = () => this._updateScreenSizePerspectiveSettings();
      this._screenSizePerspectiveHandles.add([d3(() => this._pointsOfInterest.centerOnSurfaceInfrequent.distance, e69, C), this._viewState.events.on("camera-projection-changed", e69)]), this._updateScreenSizePerspectiveSettings();
    } else
      e68 || (this._screenSizePerspectiveHandles = u(this._screenSizePerspectiveHandles));
  }
  _updateScreenSizePerspectiveSettings() {
    const e68 = this._pointsOfInterest;
    d36.distance = e68.centerOnSurfaceInfrequent.distance, d36.fovY = this._viewState.camera.fovY, this.screenSizePerspectiveSettings.update(d36), this.screenSizePerspectiveSettingsLabels.update(d36), this._view._stage.renderView.requestRender();
  }
  get test() {
    return { screenSizePerspectiveHandles: this._screenSizePerspectiveHandles };
  }
};
var d36 = { distance: 0, fovY: 0 };

// node_modules/@arcgis/core/views/3d/support/debugUtils.js
var m36 = class {
  constructor(o58, t71, m46 = "") {
    this.graphics = o58, this._symbol = new w5({ symbolLayers: new V([new w4({ material: { color: t71 }, outline: { color: [255, 255, 255], size: 1 }, resource: { primitive: "circle" } }), new z4({ text: m46, halo: { color: "white", size: 1 / 0.75 }, material: { color: t71 }, size: 12 })]) });
  }
  show(r55, i47) {
    if (null == i47)
      return;
    this.hide();
    const s71 = new x({ x: r55[0], y: r55[1], z: r55[2], spatialReference: i47 });
    this._graphic = new f7({ geometry: s71, symbol: this._symbol }), this.graphics.add(this._graphic);
  }
  hide() {
    null != this._graphic && (this.graphics.remove(this._graphic), this._graphic = null);
  }
};

// node_modules/@arcgis/core/views/3d/support/pointsOfInterest/PointOfInterest.js
var e52 = class extends S3 {
  constructor(o58) {
    super(o58);
  }
};
e([y2({ constructOnly: true })], e52.prototype, "renderCoordsHelper", void 0), e([y2({ constructOnly: true })], e52.prototype, "surface", void 0), e([y2({ constructOnly: true })], e52.prototype, "state", void 0), e52 = e([a4("esri.views.3d.support.pointsOfInterest.PointOfInterest")], e52);

// node_modules/@arcgis/core/views/3d/support/pointsOfInterest/CameraOnSurface.js
var g17 = Array;
var y20 = class extends e52 {
  constructor(t71) {
    super(t71), this._dirty = false, this._propertiesPool = new o22({ location: x, renderLocation: g17 }, this), this._estimatedSurfaceAltitude = 0, this._pendingElevationQueryController = null, this.renderLocation = n7(), this._tmpPoint = new x();
  }
  initialize() {
    if (this.scheduler && this.addHandles(this.scheduler.registerTask(this.task, this)), this.runTask(), this.map) {
      const t71 = () => this._setDirty();
      this.addHandles(v3(() => {
        var _a, _b;
        return (_b = (_a = this.map) == null ? void 0 : _a.ground) == null ? void 0 : _b.layers;
      }, "change", t71, { onListenerAdd: t71, onListenerRemove: t71 }));
    }
    this._updateRenderLocation();
  }
  destroy() {
    this._cancelPendingRequest(), this._propertiesPool = u(this._propertiesPool);
  }
  get _camera() {
    return this.state.contentCamera;
  }
  get location() {
    const t71 = this._propertiesPool.get("location");
    return t71.spatialReference = this.state.spatialReference, this.renderCoordsHelper.fromRenderCoords(this.renderLocation, t71), t71;
  }
  get scale() {
    const t71 = this._camera, e68 = x2(t71.eye, this.renderLocation), r55 = { renderCoordsHelper: this.renderCoordsHelper, state: { camera: t71 } };
    return $2(r55, e68, 0);
  }
  get updating() {
    return this._dirty || null != this._pendingElevationQueryController;
  }
  updateRenderLocation() {
    this._setDirty(), this._updateRenderLocation();
  }
  _setDirty() {
    this._dirty || (this._dirty = true, this.notifyChange("updating"));
  }
  _cancelPendingRequest() {
    const t71 = this._pendingElevationQueryController;
    t71 && (this._pendingElevationQueryController = null, t71.abort(), this.notifyChange("updating"));
  }
  get running() {
    return !this._pendingElevationQueryController && this._dirty;
  }
  runTask() {
    var _a;
    if (this._cancelPendingRequest(), this._dirty = false, this.notifyChange("updating"), !((_a = this.map) == null ? void 0 : _a.ground))
      return this._updateSurfaceAltitude(0), o14;
    const t71 = this.state.spatialReference;
    this._tmpPoint.spatialReference = t71, this.renderCoordsHelper.fromRenderCoords(this._camera.eye, this._tmpPoint);
    const e68 = (this._tmpPoint.z ?? 0) > C20 && this.renderCoordsHelper.viewingMode === l8.Global && (t71.isWGS84 || t71.isWebMercator);
    let o58 = new AbortController();
    return this.map.ground.queryElevation(this._tmpPoint, { signal: o58.signal, cache: this.cache, minDemResolution: e68 ? v23 : 0 }).then((t72) => this._updateSurfaceAltitude(t72.geometry.z ?? 0)).catch((t72) => {
      b(t72) || this._updateSurfaceAltitude(0);
    }).catch(() => {
    }).then(() => {
      this._pendingElevationQueryController === o58 && (this._pendingElevationQueryController = null, this.notifyChange("updating")), o58 = null;
    }), this._pendingElevationQueryController = o58, o14;
  }
  _updateSurfaceAltitude(t71) {
    this._estimatedSurfaceAltitude !== t71 && (this._estimatedSurfaceAltitude = t71, this._updateRenderLocation());
  }
  _updateRenderLocation() {
    this.renderCoordsHelper.setAltitude(f35, this._estimatedSurfaceAltitude, this._camera.eye), G2(this._get("renderLocation"), f35) || (this._set("renderLocation", r5(this._propertiesPool.get("renderLocation"), f35)), this.notifyChange("renderLocation"));
  }
};
e([y2({ constructOnly: true })], y20.prototype, "scheduler", void 0), e([y2({ constructOnly: true })], y20.prototype, "cache", void 0), e([y2({ constructOnly: true })], y20.prototype, "task", void 0), e([y2()], y20.prototype, "location", null), e([y2({ constructOnly: true })], y20.prototype, "map", void 0), e([y2()], y20.prototype, "renderLocation", void 0), e([y2()], y20.prototype, "scale", null), e([y2()], y20.prototype, "updating", null), y20 = e([a4("esri.views.3d.support.pointsOfInterest.CameraOnSurface")], y20);
var f35 = n7();
var C20 = 1e5;
var v23 = 1e6;

// node_modules/@arcgis/core/views/3d/support/pointsOfInterest/CenterOnSurface.js
var j19 = Array;
var L17 = class extends e52 {
  constructor(t71) {
    super(t71), this._propertiesPool = new o22({ location: x, renderLocation: j19 }, this), this._currentSurfaceAltitude = 0, this._latestSurfaceAltitude = 0, this.distance = 0, this.renderLocation = n7(), this.updating = false;
  }
  initialize() {
    this._frameWorker = this.scheduler.registerTask(this.task, this), this.runTask();
  }
  destroy() {
    this._frameWorker = l(this._frameWorker), this._propertiesPool = u(this._propertiesPool);
  }
  get _camera() {
    return this.state.contentCamera;
  }
  get location() {
    const t71 = this._propertiesPool.get("location");
    return t71.spatialReference = this.state.spatialReference, this.renderCoordsHelper.fromRenderCoords(this.renderLocation, t71), t71;
  }
  updateRenderLocation() {
    this.updating = true, this._updateRenderLocation();
  }
  get estimatedSurfaceAltitude() {
    return this._latestSurfaceAltitude;
  }
  get running() {
    return this.updating;
  }
  runTask() {
    return this._latestSurfaceAltitude = this.estimateSurfaceAltitudeAtCenter(), this._updateRenderLocation(), this.updating = false, o14;
  }
  _updateRenderLocation() {
    const t71 = C21;
    let e68 = this._calculateSurfaceIntersection(this._currentSurfaceAltitude, t71);
    const r55 = this._currentSurfaceAltitude !== this._latestSurfaceAltitude;
    !e68 && r55 && (e68 = this._calculateSurfaceIntersection(this._latestSurfaceAltitude, t71), e68 && (this._currentSurfaceAltitude = this._latestSurfaceAltitude));
    const s71 = v24;
    e68 && this._latestSurfaceAltitudeChangesDistanceSignificantly(t71, s71) && (r5(t71, s71), this._currentSurfaceAltitude = this._latestSurfaceAltitude), e68 ? this.distance = x2(this._camera.eye, t71) : (g2(t71, this._camera.viewForward, this._get("distance")), u4(t71, t71, this._camera.eye)), G2(this._get("renderLocation"), t71) || this._set("renderLocation", r5(this._propertiesPool.get("renderLocation"), t71));
  }
  _calculateSurfaceIntersection(t71, r55) {
    var _a, _b;
    const s71 = this._camera;
    if (!this.renderCoordsHelper.intersectInfiniteManifold(s71.ray, t71, r55))
      return false;
    if (this.state.isGlobal) {
      const e68 = s6(this.renderCoordsHelper.spatialReference).radius, i47 = e68 + t71, o58 = v4(s71.eye), a61 = o58 < i47 * i47, l45 = x2(s71.eye, r55);
      if (a61 && l45 > e68 / 4) {
        const t72 = i47 - Math.sqrt(o58);
        return g2(r55, s71.viewForward, t72), u4(r55, r55, s71.eye), true;
      }
    } else {
      const t72 = ((_a = this.surface) == null ? void 0 : _a.ready) ? this.surface.extent : null;
      null != t72 && i14(t72, (_b = this.surface) == null ? void 0 : _b.spatialReference, I21, this.renderCoordsHelper.spatialReference) && (r55[0] = e12(r55[0], I21[0], I21[2]), r55[1] = e12(r55[1], I21[1], I21[3]));
    }
    return true;
  }
  _latestSurfaceAltitudeChangesDistanceSignificantly(t71, e68) {
    if (this._latestSurfaceAltitude === this._currentSurfaceAltitude || null == t71)
      return false;
    if (this._calculateSurfaceIntersection(this._latestSurfaceAltitude, e68)) {
      if (t20.TESTS_DISABLE_OPTIMIZATIONS)
        return true;
      const r55 = this._camera.eye, s71 = x2(r55, t71), i47 = x2(r55, e68);
      if (Math.abs(i47 - s71) / s71 > R9)
        return true;
    }
    return false;
  }
};
e([y2({ constructOnly: true })], L17.prototype, "scheduler", void 0), e([y2({ constructOnly: true })], L17.prototype, "task", void 0), e([y2()], L17.prototype, "distance", void 0), e([y2({ constructOnly: true })], L17.prototype, "estimateSurfaceAltitudeAtCenter", void 0), e([y2({ readOnly: true })], L17.prototype, "location", null), e([y2({ readOnly: true })], L17.prototype, "renderLocation", void 0), e([y2()], L17.prototype, "updating", void 0), L17 = e([a4("esri.views.3d.support.pointsOfInterest.CenterOnSurface")], L17);
var R9 = 0.05;
var C21 = n7();
var v24 = n7();
var I21 = u5();

// node_modules/@arcgis/core/views/3d/support/pointsOfInterest/ContentGeometryUpdates.js
var n49 = class {
  constructor(s71) {
    this._handles = new r(), this.events = new o3(), this._contentLayerViews = s71.contentLayerViews, this._handles.add(this._contentLayerViews.on("change", (e68) => this._layerViewsChanged(e68))), this._layerViewsChanged({ added: this._contentLayerViews.toArray(), removed: [], moved: [], target: this._contentLayerViews });
  }
  destroy() {
    this._handles = u(this._handles), this._contentLayerViews.destroy();
  }
  _layerViewsChanged(e68) {
    e68.added.forEach((e69) => {
      "esri.views.3d.layers.SceneLayerView3D" === e69.declaredClass && this._handles.add(e69.on("visible-geometry-changed", () => this._contentChanged()), e69.uid);
    }), e68.removed.forEach((e69) => this._handles.remove(e69.uid));
  }
  _contentChanged() {
    this.events.emit("request-update", a47);
  }
};
var a47 = {};

// node_modules/@arcgis/core/views/3d/support/pointsOfInterest/Focus.js
var L18 = Array;
var O22 = class extends e52 {
  constructor(e68) {
    super(e68), this._propertiesPool = new o22({ location: x, renderLocation: L18 }, this), this._dirty = true, this.renderLocation = this._propertiesPool.get("renderLocation");
  }
  initialize() {
    this.addHandles([d3(() => this.centerOnSurface.renderLocation, () => this.updateRenderLocation()), d3(() => this.state.contentCamera, () => this.updateRenderLocation())]), this.scheduler && this.addHandles(this.scheduler.registerTask(I5.POINT_OF_INTEREST_FREQUENT, this));
  }
  destroy() {
    this._propertiesPool = u(this._propertiesPool);
  }
  get updating() {
    return this._dirty || this.centerOnSurface.updating;
  }
  get location() {
    const e68 = this._propertiesPool.get("location");
    return e68.spatialReference = this.state.spatialReference, this.renderCoordsHelper.fromRenderCoords(this.renderLocation, e68), e68;
  }
  get worldUnitsPerContentPixel() {
    const { camera: e68, contentPixelRatio: t71 } = this.state;
    return e68.computeRenderPixelSizeAt(this.renderLocation) * (e68.pixelRatio / t71);
  }
  get running() {
    return this._dirty;
  }
  runTask() {
    const e68 = this._get("renderLocation"), r55 = this.centerOnSurface.renderLocation, o58 = this.renderCoordsHelper, i47 = this.state.contentCamera;
    this._dirty = false, o58.worldUpAtPosition(r55, S17);
    const s71 = Math.max(0, (Math.acos(P3(S17, i47.viewForward)) - 0.5 * Math.PI) * (i47.aboveGround ? 1 : -1));
    if (Number.isNaN(s71)) {
      if (!e68 || !H(e68, r55)) {
        const e69 = this._propertiesPool.get("renderLocation");
        r5(e69, r55), this._set("renderLocation", e69);
      }
      return o14;
    }
    const n61 = 1 - e12(s71 / (0.5 * Math.PI), 0, 1), l45 = n61 * n61 * n61;
    this._calculateScreenHorizontalEdgeOnSurface(C22);
    const u46 = this._propertiesPool.get("renderLocation");
    return A4(u46, r55, C22, l45), e68 && H(e68, u46) || this._set("renderLocation", u46), o14;
  }
  _calculateScreenHorizontalEdgeOnSurface(e68) {
    const t71 = this.state.contentCamera, r55 = t71.getRenderCenter(x4());
    if (r55[1] = t71.aboveGround ? t71.padding[t34.BOTTOM] : t71.fullHeight - t71.padding[t34.TOP], this.estimateSurfaceIntersectionAtRenderPoint(r55, e68))
      return e68;
    const o58 = this.renderCoordsHelper.getAltitude(this.centerOnSurface.renderLocation);
    if (t71.unprojectFromRenderScreen(r55, R10)) {
      e11(R10, R10, t71.eye);
      const r56 = z2(R10, R10);
      if (this.renderCoordsHelper.intersectInfiniteManifold(p9(t71.eye, r56), o58, e68))
        return e68;
    }
    return this.renderCoordsHelper.setAltitude(e68, o58, t71.eye);
  }
  updateRenderLocation() {
    this._dirty = true;
  }
};
e([y2()], O22.prototype, "_dirty", void 0), e([y2({ constructOnly: true })], O22.prototype, "scheduler", void 0), e([y2({ constructOnly: true })], O22.prototype, "centerOnSurface", void 0), e([y2({ constructOnly: true })], O22.prototype, "estimateSurfaceIntersectionAtRenderPoint", void 0), e([y2()], O22.prototype, "updating", null), e([y2()], O22.prototype, "location", null), e([y2()], O22.prototype, "renderLocation", void 0), e([y2()], O22.prototype, "worldUnitsPerContentPixel", null), O22 = e([a4("esri.views.3d.support.pointsOfInterest.Focus")], O22);
var S17 = n7();
var R10 = n7();
var C22 = n7();

// node_modules/@arcgis/core/views/3d/support/pointsOfInterest/StableSurfaceCenter.js
var u35 = class extends S3 {
  get surface() {
    var _a;
    return (_a = this.view.map) == null ? void 0 : _a.ground;
  }
  get surfaceView() {
    return this.view.basemapTerrain;
  }
  get renderLocation() {
    if (!this.location)
      return null;
    const e68 = n7();
    return this.view.renderCoordsHelper.toRenderCoords(this.location, e68), e68;
  }
  constructor(e68) {
    super(e68), this.location = null, this._updateController = null;
  }
  initialize() {
    this.view.state.isLocal && (this.addHandles([d3(() => {
      var _a, _b;
      return [(_a = this.surfaceView) == null ? void 0 : _a.spatialReference, (_b = this.surfaceView) == null ? void 0 : _b.extent];
    }, () => this._update()), v3(() => {
      var _a;
      return (_a = this.surface) == null ? void 0 : _a.layers;
    }, "change", () => this._update())]), this._update());
  }
  _update() {
    var _a;
    if (this._updateController && (this._updateController.abort(), this._updateController = null), null == ((_a = this.surfaceView) == null ? void 0 : _a.extent) || null == this.surfaceView.spatialReference)
      return void this._set("location", null);
    const e68 = p5(this.surfaceView.extent), t71 = new x({ x: e68[0], y: e68[1], z: 0, spatialReference: this.surfaceView.spatialReference });
    this.surface && this.surface.layers.length > 0 ? (this._set("location", null), this._updateController = new AbortController(), this.surface.queryElevation(t71, { noDataValue: 0, signal: this._updateController.signal, cache: this.cache }).then((e69) => {
      this._updateController = null, this._set("location", e69.geometry);
    }).catch((e69) => {
      b(e69) || e69 && "elevation-query:invalid-layer" === e69.name || console.error("StableSurfaceCenter failed to update: ", e69);
    })) : this._set("location", t71);
  }
};
e([y2({ constructOnly: true })], u35.prototype, "view", void 0), e([y2({ constructOnly: true })], u35.prototype, "cache", void 0), e([y2()], u35.prototype, "surface", null), e([y2()], u35.prototype, "surfaceView", null), e([y2({ readOnly: true })], u35.prototype, "location", void 0), e([y2({ readOnly: true })], u35.prototype, "renderLocation", null), u35 = e([a4("esri.views.3d.support.pointsOfInterest.StableSurfaceCenter")], u35);

// node_modules/@arcgis/core/views/3d/support/pointsOfInterest/SurfaceGeometryUpdates.js
var u36 = class extends S3 {
  constructor(e68) {
    super(e68), this._tileGeometryUpdateExtent = D(), this._tileGeometryUpdateSpatialReference = null, this.events = new o3(), this.updating = false;
  }
  initialize() {
    this.addHandles([this.surface.on("elevation-change", (e68) => this._tileGeometryChanged(e68)), this.scheduler.registerTask(I5.SURFACE_GEOMETRY_UPDATES, this)]);
  }
  get running() {
    return this.updating;
  }
  runTask() {
    return this.updating ? (this._tileGeometryUpdateSpatialReference && this._centerIntersectsExtent(this._tileGeometryUpdateExtent, this._tileGeometryUpdateSpatialReference) && this.events.emit("request-update", l34), D(this._tileGeometryUpdateExtent), this._set("updating", false), o14) : o14;
  }
  _tileGeometryChanged(e68) {
    this._tileGeometryUpdateSpatialReference = e68.spatialReference, m4(this._tileGeometryUpdateExtent, e68.extent, this._tileGeometryUpdateExtent), this._set("updating", true);
  }
  _furthestCenterOnSurface() {
    let e68 = this.centerOnSurfaces[0];
    for (let t71 = 1; t71 < this.centerOnSurfaces.length; t71++) {
      const r55 = this.centerOnSurfaces[t71];
      r55.distance > e68.distance && (e68 = r55);
    }
    return e68;
  }
  _centerIntersectsExtent(e68, t71) {
    const r55 = this.state.contentCamera.eye, s71 = f36, o58 = this._furthestCenterOnSurface();
    return this.renderCoordsHelper.fromRenderCoords(r55, h28, t71), this.renderCoordsHelper.fromRenderCoords(o58.renderLocation, m37, t71), h28[0] < m37[0] ? (s71[0] = h28[0], s71[2] = m37[0]) : (s71[0] = m37[0], s71[2] = h28[0]), h28[1] < m37[1] ? (s71[1] = h28[1], s71[3] = m37[1]) : (s71[1] = m37[1], s71[3] = h28[1]), E3(s71, e68);
  }
};
e([y2({ constructOnly: true })], u36.prototype, "state", void 0), e([y2({ constructOnly: true })], u36.prototype, "centerOnSurfaces", void 0), e([y2({ constructOnly: true })], u36.prototype, "renderCoordsHelper", void 0), e([y2({ constructOnly: true })], u36.prototype, "scheduler", void 0), e([y2({ constructOnly: true })], u36.prototype, "surface", void 0), e([y2({ readOnly: true })], u36.prototype, "updating", void 0), u36 = e([a4("esri.views.3d.support.pointsOfInterest.SurfaceGeometryUpdates")], u36);
var l34 = {};
var h28 = n7();
var m37 = n7();
var f36 = D();

// node_modules/@arcgis/core/views/3d/support/pointsOfInterest/PointsOfInterest.js
var P13 = class extends S3 {
  constructor(e68) {
    super(e68), this.renderPointOfView = n7(), this._pois = new Array(), this._debugCenters = /* @__PURE__ */ new Map(), this._tmpRay = d7(), this._centerRayDirty = true, this._surfaceAltitudeAtCenter = 0, this._surfaceAltitudeAtCenterDirty = true, this._contentAltitudeAtCenter = 0, this._contentAltitudeAtCenterDirty = true, this._propertiesPool = new o22({ renderPointOfView: T16 }, this);
  }
  initialize() {
    var _a;
    const { state: e68, basemapTerrain: t71, renderCoordsHelper: a61, map: c44 } = this.view;
    this._surfaceIntersector = T5(e68.viewingMode), e68.isGlobal ? this._surfaceIntersector.options.backfacesTerrain = false : this._surfaceIntersector.options.backfacesTerrain = true, this._surfaceIntersector.options.invisibleTerrain = false, this._surfaceIntersector.options.store = e29.MIN, this._contentIntersector = T5(e68.viewingMode);
    const u46 = () => this._estimateSurfaceAltitudeAtCenter(), h36 = this.view.resourceController.scheduler, d44 = (_a = this.view.basemapTerrain) == null ? void 0 : _a.elevationQueryCache, f48 = { state: e68, scheduler: h36, surface: t71, renderCoordsHelper: a61 };
    this._set("centerOnSurfaceInfrequent", new L17({ ...f48, task: I5.POINT_OF_INTEREST_INFREQUENT, estimateSurfaceAltitudeAtCenter: u46 })), this._set("centerOnSurfaceFrequent", new L17({ ...f48, task: I5.POINT_OF_INTEREST_FREQUENT, estimateSurfaceAltitudeAtCenter: u46 })), this._set("centerOnContent", new L17({ ...f48, task: I5.POINT_OF_INTEREST_FREQUENT, estimateSurfaceAltitudeAtCenter: () => this._estimateContentAltitudeAtCenter() })), this._set("cameraOnSurface", new y20({ ...f48, cache: d44, task: I5.POINT_OF_INTEREST_INFREQUENT, map: c44 })), this._set("surfaceGeometryUpdates", new u36({ ...f48, centerOnSurfaces: [this.centerOnSurfaceFrequent, this.centerOnContent, this.centerOnSurfaceInfrequent] })), this._set("contentGeometryUpdates", new n49({ contentLayerViews: this.view.allLayerViews, renderCoordsHelper: a61 })), this._set("surfaceOrigin", new u35({ cache: d44, view: this.view })), this._set("focus", new O22({ state: e68, scheduler: h36, surface: t71, renderCoordsHelper: a61, centerOnSurface: this.centerOnSurfaceFrequent, estimateSurfaceIntersectionAtRenderPoint: (e69, t72) => this._estimateSurfaceIntersectionAtRenderPoint(e69, this.view.state.contentCamera, t72) })), this._pois.push(this.centerOnContent, this.centerOnSurfaceFrequent, this.centerOnSurfaceInfrequent, this.cameraOnSurface, this.focus);
    const p48 = this.view.graphics;
    this._debugCenters.set(this.centerOnContent, new m36(p48, "red", "CenterOnContent")), this._debugCenters.set(this.centerOnSurfaceFrequent, new m36(p48, "red", "CenterOnSurface")), this._debugCenters.set(this.centerOnSurfaceInfrequent, new m36(p48, "red", "CenterOnSurface")), this._debugCenters.set(this.cameraOnSurface, new m36(p48, "blue", "CameraOnSurface")), this._debugCenters.set(this.focus, new m36(p48, "green", "Focus")), this.addHandles([d3(() => e68.contentCamera, (e69) => this._cameraChanged(e69), C), d3(() => t71.extent, () => this._updateCenterPointsOfInterest()), p(() => !t71.updating, () => this._updateCenterPointsOfInterest(), C), v3(() => this.surfaceGeometryUpdates.events, "request-update", () => this._updateCenterPointsOfInterest()), v3(() => this.contentGeometryUpdates.events, "request-update", () => this._updateCenterOnContent()), p(() => t20.SHOW_POI, (e69) => this._setDebug(e69), P)]), this._cameraChanged(this.view.state.contentCamera);
    for (const r55 of this._pois)
      r55.runTask();
  }
  destroy() {
    this._setDebug(false), this._propertiesPool.destroy();
    for (const e68 of this._pois)
      e68.destroy();
    this.surfaceOrigin.destroy();
  }
  get updating() {
    var _a;
    return !(!((_a = this.surfaceGeometryUpdates) == null ? void 0 : _a.updating) && !this._pois.some((e68) => e68.updating));
  }
  get _centerRay() {
    return this._centerRayDirty && (this._centerRayCached = this.view.sceneIntersectionHelper.getCenterRayWithSubpixelOffset(this.view.state.contentCamera, this._tmpRay), this._centerRayDirty = false), this._centerRayCached;
  }
  _estimateContentAltitudeAtCenter() {
    if (!this._contentAltitudeAtCenterDirty)
      return this._contentAltitudeAtCenter;
    this._contentAltitudeAtCenterDirty = false;
    const e68 = this._centerRay;
    return null == e68 || (this.view.sceneIntersectionHelper.intersectRay(e68, this._contentIntersector, j20, E31) ? this._contentAltitudeAtCenter = this.view.renderCoordsHelper.getAltitude(j20) : this._contentAltitudeAtCenter = this._estimateSurfaceAltitudeAtCenter()), this._contentAltitudeAtCenter;
  }
  _estimateSurfaceAltitudeAtCenter() {
    if (!this.view.basemapTerrain)
      return 0;
    if (!this._surfaceAltitudeAtCenterDirty)
      return this._surfaceAltitudeAtCenter;
    this._surfaceAltitudeAtCenterDirty = false;
    const e68 = this._centerRay;
    if (null == e68)
      return this._surfaceAltitudeAtCenter;
    const t71 = e68.origin, r55 = u4(j20, e68.origin, e68.direction);
    return this._surfaceIntersector.resetWithRay(e68, this.view.state.contentCamera), this.view.basemapTerrain.intersect(this._surfaceIntersector, null, t71, r55), this._surfaceIntersector.results.min.getIntersectionPoint(j20) && (this._surfaceAltitudeAtCenter = this.view.renderCoordsHelper.getAltitude(j20)), this._surfaceAltitudeAtCenter;
  }
  _estimateSurfaceIntersectionAtRenderPoint(e68, t71, r55) {
    const s71 = f18(t71, e68, U16);
    if (null == s71)
      return null;
    const n61 = s71.origin, i47 = u4(j20, s71.origin, s71.direction);
    return this._surfaceIntersector.resetWithRay(s71, t71), this.view.basemapTerrain.intersect(this._surfaceIntersector, null, n61, i47), this._surfaceIntersector.results.min.getIntersectionPoint(r55) ? r55 : null;
  }
  _cameraChanged(e68) {
    this._updateCenterPointsOfInterest();
    const t71 = e68.eye;
    G2(this.renderPointOfView, t71) || this._set("renderPointOfView", r5(this._propertiesPool.get("renderPointOfView"), t71));
  }
  _updateCenterPointsOfInterest() {
    this._centerRayDirty = true, this._surfaceAltitudeAtCenterDirty = true, this._contentAltitudeAtCenterDirty = true;
    for (const e68 of this._pois)
      e68.updateRenderLocation();
  }
  _updateCenterOnContent() {
    this._contentAltitudeAtCenterDirty = true, this.centerOnContent.updateRenderLocation();
  }
  _setDebug(e68) {
    if (!e68)
      return this._debugCenters.forEach((e69) => e69.hide()), void this.removeHandles("debug");
    for (const t71 of this._pois)
      this.addHandles(d3(() => t71.renderLocation, (e69) => {
        var _a;
        return (_a = this._debugCenters.get(t71)) == null ? void 0 : _a.show(e69, t71.renderCoordsHelper.spatialReference);
      }, P), "debug");
  }
  get test() {
    return { update: () => {
      this.surfaceGeometryUpdates.runTask();
      for (const e68 of this._pois)
        e68.runTask();
    }, surfaceGeometryUpdates: this.surfaceGeometryUpdates };
  }
};
e([y2()], P13.prototype, "centerOnContent", void 0), e([y2()], P13.prototype, "centerOnSurfaceFrequent", void 0), e([y2()], P13.prototype, "centerOnSurfaceInfrequent", void 0), e([y2()], P13.prototype, "cameraOnSurface", void 0), e([y2()], P13.prototype, "focus", void 0), e([y2()], P13.prototype, "renderPointOfView", void 0), e([y2()], P13.prototype, "surfaceOrigin", void 0), e([y2()], P13.prototype, "contentGeometryUpdates", void 0), e([y2()], P13.prototype, "surfaceGeometryUpdates", void 0), e([y2({ constructOnly: true })], P13.prototype, "view", void 0), e([y2()], P13.prototype, "updating", null), P13 = e([a4("esri.views.3d.support.pointsOfInterest.PointsOfInterest")], P13);
var T16 = Array;
var j20 = n7();
var U16 = d7();
var E31 = { exclude: /* @__PURE__ */ new Set([w9]) };

// node_modules/@arcgis/core/views/3d/terrain/ElevationBounds.js
var s59 = class {
  constructor(s71 = 0, a61 = 0) {
    this.min = s71, this.max = a61, this.level = 0, this.hasNoDataValues = false;
  }
  copyFrom(s71) {
    this.min = s71.min, this.max = s71.max, this.level = s71.level, this.hasNoDataValues = s71.hasNoDataValues;
  }
};

// node_modules/@arcgis/core/views/3d/terrain/ElevationData.js
var r43 = class {
  constructor(t71, o58, s71) {
    this.type = "elevation", this.level = t71[0], this.i = t71[1], this.j = t71[2], this.extent = o58, this.samplerData = new t14(s71, o58);
  }
  computeMinMaxValue(t71, a61, r55, i47) {
    i47.min = 1 / 0, i47.max = -1 / 0, i47.hasNoDataValues = false;
    const e68 = t71 - this.level;
    if (e68 <= 0)
      return i47;
    const l45 = 2 ** e68;
    if (!(Math.floor(a61 / l45) === this.i && Math.floor(r55 / l45) === this.j))
      return i47;
    let n61 = 1 / 0, h36 = -1 / 0;
    const f48 = this.samplerData.data.width, m46 = this.samplerData.data.values, u46 = 0.5 * a23;
    let c44 = (f48 - 1) / l45, p48 = (r55 - this.j * l45) * c44, M21 = (a61 - this.i * l45) * c44;
    if (c44 < 1) {
      const t72 = Math.floor(p48), a62 = Math.floor(M21), s71 = t72 + a62 * f48, r56 = m46[s71], e69 = m46[s71 + 1], l46 = m46[s71 + f48], n62 = m46[s71 + f48 + 1];
      if (r56 + e69 + l46 + n62 < u46) {
        const s72 = p48 - t72, h37 = M21 - a62, f49 = q2(r56, e69, l46, n62, s72, h37), m47 = q2(r56, e69, l46, n62, s72 + c44, h37), u47 = q2(r56, e69, l46, n62, s72, h37 + c44), x31 = q2(r56, e69, l46, n62, s72 + c44, h37 + c44);
        return i47.min = Math.min(f49, m47, u47, x31), i47.max = Math.max(f49, m47, u47, x31), i47;
      }
      p48 = t72, M21 = a62, c44 = 1;
    } else
      p48 = Math.floor(p48), M21 = Math.floor(M21), c44 = Math.ceil(c44);
    for (let o58 = p48; o58 <= p48 + c44; o58++)
      for (let t72 = M21; t72 <= M21 + c44; t72++) {
        const a62 = m46[o58 + t72 * f48];
        a62 < u46 ? (n61 = Math.min(n61, a62), h36 = Math.max(h36, a62)) : i47.hasNoDataValues = true;
      }
    return i47.min = n61, i47.max = h36, i47;
  }
};
var i41 = 0.5 * a23;
function e53(a61, o58, s71) {
  if (null == s71)
    return null;
  for (const r55 of s71) {
    if (!r55)
      continue;
    const s72 = r55.safeWidth;
    let e68 = e12(r55.dy * (r55.y1 - o58), 0, s72), l45 = e12(r55.dx * (a61 - r55.x0), 0, s72);
    const n61 = Math.floor(e68), h36 = Math.floor(l45), f48 = r55.data.width, m46 = n61 * f48 + h36, u46 = r55.data.values, c44 = u46[m46], p48 = u46[m46 + 1], M21 = m46 + f48, x31 = u46[M21], d44 = u46[M21 + 1];
    if (c44 + x31 + p48 + d44 < i41) {
      e68 -= n61, l45 -= h36;
      const t71 = c44 + (p48 - c44) * l45;
      return t71 + (x31 + (d44 - x31) * l45 - t71) * e68;
    }
  }
  return null;
}

// node_modules/@arcgis/core/views/3d/terrain/ExtentHelper.js
var x25 = class extends S3 {
  constructor(e68) {
    super(e68);
  }
  initialize() {
    this.addHandles([this.layerViews.on("change", () => this.notifyChange("stencilEnabledExtents"))]);
  }
  destroy() {
  }
  get layerViewsExtent() {
    return this._computeLayerViewsExtent();
  }
  get tiledLayersExtent() {
    return this._computeTiledLayersExtent();
  }
  get stencilEnabledExtents() {
    return this._computeStencilEnabledExtents();
  }
  _computeStencilEnabledExtents() {
    const e68 = [];
    return this.layerViews.forEach((t71) => {
      const r55 = t71.layer;
      if ("operationalLayerType" in r55 && d5(r55.operationalLayerType) && null != this.viewSpatialReference) {
        const t72 = L19(r55.fullExtent, this.viewSpatialReference);
        null != t72 && e68.push(o5(t72));
      }
    }), e68;
  }
};
function h29(e68, t71) {
  return e68 === l8.Global ? new w21(t71) : new g18(t71);
}
e([y2({ readOnly: true })], x25.prototype, "layerViewsExtent", null), e([y2({ readOnly: true })], x25.prototype, "tiledLayersExtent", null), e([y2({ readOnly: true })], x25.prototype, "stencilEnabledExtents", null), e([y2()], x25.prototype, "viewSpatialReference", void 0), e([y2()], x25.prototype, "tilingScheme", void 0), e([y2()], x25.prototype, "defaultTiledLayersExtent", void 0), e([y2({ constructOnly: true })], x25.prototype, "layers", void 0), e([y2({ constructOnly: true })], x25.prototype, "layerViews", void 0), x25 = e([a4("esri.views.3d.terrain.ExtentHelper")], x25);
var w21 = class extends x25 {
  _computeLayerViewsExtent() {
    return this._globalExtent;
  }
  _computeTiledLayersExtent() {
    return this._globalExtent;
  }
  get _globalExtent() {
    return this.viewSpatialReference.isWebMercator ? c14 : m15;
  }
};
w21 = e([a4("esri.views.3d.terrain.ExtentHelper.ExtentHelperGlobal")], w21);
var g18 = class extends x25 {
  _computeLayerViewsExtent() {
    const e68 = D(), t71 = this.viewSpatialReference;
    this.layerViews.forEach((r56) => {
      const n62 = r56.layer;
      if (r56.isResolved() && ("graphics" !== n62.type || !n62.internal)) {
        const n63 = L19("fullExtentInLocalViewSpatialReference" in r56 && r56.fullExtentInLocalViewSpatialReference || r56.layer.fullExtent, t71);
        m4(e68, n63, e68);
      }
    });
    const r55 = x3(e68) ? e68 : null, n61 = this._get("layerViewsExtent");
    return I(r55, n61) ? n61 : r55;
  }
  _computeTiledLayersExtent() {
    const e68 = this.tilingScheme;
    if (!e68)
      return null;
    const t71 = this.viewSpatialReference, r55 = D();
    this.layers.forEach((n62) => {
      var _a;
      if (n62.loaded && y4(n62)) {
        const i48 = v8(n62, t71, l8.Local);
        if (null == i48)
          return;
        const { tileInfo: l45, fullExtent: s71 } = i48, a61 = "tilemapCache" in n62 ? (_a = n62.tilemapCache) == null ? void 0 : _a.effectiveMaxLOD : void 0;
        null != l45 && null != s71 && (H4(n62) || e68.compatibleWith(l45, a61) && s71.spatialReference.equals(e68.spatialReference)) && m4(r55, s71, r55);
      }
    }), m4(r55, this.defaultTiledLayersExtent, r55);
    const n61 = x3(r55) ? r55 : null, i47 = this._get("tiledLayersExtent");
    return I(n61, i47) ? i47 : n61;
  }
};
function L19(e68, t71) {
  return null == e68 || e68.spatialReference.equals(t71) ? e68 : I2(e68, e68.spatialReference, t71);
}
g18 = e([a4("esri.views.3d.terrain.ExtentHelper.ExtentHelperLocal")], g18);

// node_modules/@arcgis/core/views/3d/webgl-engine/parts/requireUtils.js
function e54() {
  var _a;
  const e68 = (_a = globalThis.require) == null ? void 0 : _a.modules;
  if (e68) {
    const o58 = Object.keys(e68);
    for (const s71 of o58)
      s71.includes(".glsl") && delete e68[s71];
  }
}

// node_modules/@arcgis/core/views/3d/terrain/OverlayManager.js
var se5 = 1.3;
var ie4 = [[-0.1, -2, 3.9, 2], [-0.1, -3.9, 3.9, 0.1], [-2, -3.9, 2, 0.1], [-3.9, -3.9, 0.1, 0.1], [-3.9, -2, 0.1, 2], [-3.9, -0.1, 0.1, 3.9], [-2, -0.1, 2, 3.9], [-0.1, -0.1, 3.9, 3.9]];
var ae4;
var ne4 = class extends S3 {
  constructor(e68) {
    super(e68), this._spatialReference = null, this._renderSR = null, this._overlaySREqualsRenderSR = true, this._drapeSources = /* @__PURE__ */ new Set(), this._drapeTargets = /* @__PURE__ */ new Set(), this._placementDirty = false, this._contentUpdated = false, this._drawTexturesDirty = false, this._drawTexturesAnimateDirty = false, this._longitudeCyclical = null, this._latestOriginId = 0, this._maxResolution = has("esri-mobile") ? 2048 : 4096, this._animationTimeLast = 0;
  }
  initialize() {
    const e68 = this.view;
    this.renderer = new $3({ view: e68, worldToPCSRatio: this._worldToPCSRatio, spatialReference: this._spatialReference }), e68._stage.renderer.plugins.add(this.renderer);
    const t71 = () => this.setDrawTexturesDirty();
    this._groundIntersector = T5(this.view.state.viewingMode), this._groundIntersector.options.backfacesTerrain = true, this._groundIntersector.options.invisibleTerrain = true, this._groundIntersector.options.hud = false, this.addHandles([d3(() => this.renderer.hasHighlights, t71), this.renderer.events.on("has-water", (t72) => {
      var _a;
      return (_a = e68._stage) == null ? void 0 : _a.renderer.setParameters({ hasOverlayWater: t72 });
    }), this.renderer.events.on("content-changed", t71), d3(() => e68.state.camera.pixelRatio, t71), d3(() => e68.state.alignPixelEnabled, t71), this.renderer.events.on("textures-disposed", () => this.surface.requestRender()), d3(() => {
      var _a, _b, _c;
      return [(_a = e68.pointsOfInterest) == null ? void 0 : _a.renderPointOfView, (_c = (_b = e68.pointsOfInterest) == null ? void 0 : _b.centerOnSurfaceFrequent) == null ? void 0 : _c.location];
    }, () => this.setPlacementDirty()), d3(() => {
      var _a, _b;
      return [(_a = e68.state) == null ? void 0 : _a.pixelRatio, (_b = e68.state) == null ? void 0 : _b.contentPixelRatio];
    }, () => this.setPlacementDirty(), C), this.surface.on("elevation-change", () => this.setPlacementDirty()), e68.on("resize", () => this.setPlacementDirty()), e68.resourceController.scheduler.registerTask(I5.OVERLAY, this), e68._stage.renderView.events.on("force-camera-for-screenshot", (e69) => {
      this._updateOverlays(C5, e69.camera, O7.BACKGROUND), this.renderer.hasOverlays && this._drawOverlays(O7.BACKGROUND, e69);
    })]), e68._stage.renderer.renderOverlay = (e69) => this._renderOverlay(e69);
  }
  destroy() {
    var _a;
    ((_a = this.view) == null ? void 0 : _a._stage) && (this.view._stage.renderer.plugins.remove(this.renderer), this.view._stage.renderer.renderOverlay = () => {
    }), ae4 && (ae4.hide(), ae4 = null), this.renderer = u(this.renderer);
  }
  get running() {
    return this._placementDirty && (this._drapeSources.size > 0 || this.view.graphics.length > 0 || t20.OVERLAY_DRAW_DEBUG_TEXTURE) && !!this._spatialReference && !this.suspended && this.surface.ready;
  }
  get _isSpherical() {
    return this.view.state.isGlobal;
  }
  get _worldToPCSRatio() {
    return null != this._spatialReference && this._spatialReference.isGeographic && !this.view.state.isLocal ? s6(this._spatialReference).metersPerDegree : 1;
  }
  get _overlayStretch() {
    return se5 / this.view.resolutionScale;
  }
  get suspended() {
    return this.surface.suspended;
  }
  get updating() {
    return this.running || this.renderer.updating || this._contentUpdated;
  }
  get rendersOccludedDraped() {
    return this.renderer.rendersOccludedDraped;
  }
  _renderOverlay(e68) {
    if (this._contentUpdated = false, this.renderer.processSyncDrapeSources(), this.renderer.hasOverlays)
      return this._dispatchAnimationUpdate(e68), this._drawOverlays(O7.UPDATE, this.view.state);
  }
  get hasOverlays() {
    return this.renderer.hasOverlays;
  }
  setSpatialReference(e68) {
    this._spatialReference = e68, this.renderer.spatialReference = e68, this._longitudeCyclical = null;
    const t71 = this.view.renderSpatialReference;
    null != e68 && null != t71 ? (this._renderSR = t71, this._overlaySREqualsRenderSR = e68.equals(this._renderSR), this._isSpherical && (this._longitudeCyclical = e68.isWebMercator ? new n19(-20037508342787e-6, 20037508342787e-6) : new n19(-180, 180), this.renderer.longitudeCyclical = this._longitudeCyclical), this.renderer && (this.renderer.worldToPCSRatio = this._worldToPCSRatio)) : this.renderer.disposeOverlays();
  }
  registerDrapeSource(e68, t71, r55) {
    this._drapeSources.add(e68), this.renderer.ensureOverlays(this._drapeTargets, this._drapeSources);
    const s71 = this.renderer.createDrapeSourceRenderer(e68, t71, r55);
    return this._updateDrapeSourceExtent(e68), this._setContentDirty(), this.notifyChange("running"), s71;
  }
  registerGeometryDrapeSource(e68) {
    return this.registerDrapeSource(e68, R5);
  }
  _updateDrapeSourceExtent(e68) {
    2 === this.renderer.overlays.length && null != e68.setDrapingExtent && null != this._spatialReference && e68.setDrapingExtent(this.renderer.overlays, this._spatialReference);
  }
  unregisterDrapeSource(e68) {
    this._drapeSources.has(e68) && (this._drapeSources.delete(e68), this.renderer.removeDrapeSourceRenderer(e68), this.renderer.ensureDrapeSources(this._drapeSources), this._setContentDirty(), this.notifyChange("running"));
  }
  registerDrapeTarget(e68) {
    this._drapeTargets.add(e68), this.renderer.ensureOverlays(this._drapeTargets, this._drapeSources);
  }
  unregisterDrapeTarget(e68) {
    this._drapeTargets.delete(e68), this.renderer.ensureDrapeTargets(this._drapeTargets);
  }
  _setContentDirty() {
    this.setPlacementDirty(), this.setDrawTexturesDirty();
  }
  setPlacementDirty() {
    this._placementDirty = true;
  }
  runTask(e68) {
    return this._updateOverlays(e68, this.view.state.contentCamera, O7.UPDATE);
  }
  _updateOverlays(e68, t71, r55) {
    if (!this._spatialReference)
      return o14;
    const s71 = this._computeOverlayResolution(t71);
    this._computeOverlayExtents(t71, s71, de2), this.renderer.ensureOverlays(this._drapeTargets, this._drapeSources, de2.stretch);
    const i47 = this._updateOverlay(E15.INNER, de2.inner, s71, 1 * de2.pixelRatioAdjustment, de2.mapUnitsPerPixel), a61 = M2(de2.inner) / M2(de2.outer), n61 = this._updateOverlay(E15.OUTER, de2.outer, s71, a61 * de2.pixelRatioAdjustment, de2.mapUnitsPerPixel);
    i47 !== _e2.EXTENT && n61 !== _e2.EXTENT || (this._drapeSources.forEach((e69) => this._updateDrapeSourceExtent(e69)), this.surface.updateTileOverlayParams(r55)), i47 === _e2.NONE && n61 === _e2.NONE || this.setDrawTexturesDirty(), this._placementDirty = false, e68.madeProgress();
  }
  _computeOverlayResolution(e68) {
    const t71 = this.view.state.contentPixelRatio * this.view.resolutionScale, r55 = e68.fullWidth / e68.pixelRatio * t71, s71 = e68.fullHeight / e68.pixelRatio * t71, i47 = Math.ceil(1.5 * Math.max(r55, s71));
    return Math.min(n20(i47), this._maxResolution);
  }
  _updateOverlay(e68, t71, r55, s71, i47) {
    if (0 === this.renderer.overlays.length)
      return _e2.NONE;
    const a61 = this.renderer.overlays[e68], n61 = a61.mapUnitsPerPixel;
    if (a61.mapUnitsPerPixel = i47, a61.pixelRatio = s71, oe3(t71, a61.extent) && r55 === a61.resolution)
      return n61 === i47 ? _e2.NONE : _e2.RERENDER_ONLY;
    e13(a61.extent, t71), a61.resolution = r55;
    const o58 = p5(a61.extent);
    return a61.renderLocalOrigin = t33(o58[0], o58[1], 0, "OV_" + this._latestOriginId++), _e2.EXTENT;
  }
  setTileParameters(e68) {
    const t71 = e68.renderData.overlay;
    if (this.renderer.overlays.length > 0) {
      const r55 = this.renderer.overlays[E15.INNER], s71 = this.renderer.overlays[E15.OUTER], i47 = e68.extent;
      this._rectInsideRect(r55.extent, i47) || this._rectanglesOverlap(i47, r55.extent) || this._rectanglesOverlap(i47, s71.extent) ? (this._setTileOverlayData(i47, E15.INNER, t71), this._setTileOverlayData(i47, E15.OUTER, t71)) : (this._clearTileOverlayData(E15.INNER, t71), this._clearTileOverlayData(E15.OUTER, t71));
    } else
      this._clearTileOverlayData(E15.INNER, t71), this._clearTileOverlayData(E15.OUTER, t71);
  }
  overlayPixelSizeInMapUnits(e68, t71) {
    if (0 === this.renderer.overlays.length)
      return t71();
    const r55 = this.renderer.overlays[E15.INNER], s71 = this.renderer.overlays[E15.OUTER], i47 = this._pointIsInExtent(e68, r55.extent) ? r55 : s71;
    return (i47.extent[2] - i47.extent[0]) / i47.resolution;
  }
  _setTileOverlayData(e68, t71, r55) {
    if (0 === this.renderer.overlays.length)
      return;
    const s71 = this.renderer.overlays[t71].extent, i47 = M2(s71), a61 = s9(s71);
    let n61 = e68[0];
    if (this._longitudeCyclical) {
      n61 = this._longitudeCyclical.minimalMonotonic(s71[0], n61);
      const t72 = this._longitudeCyclical.minimalMonotonic(s71[0], e68[2]);
      n61 > t72 && (n61 = t72 - (e68[2] - e68[0]));
    }
    r55.setScale(t71, M2(e68) / i47, s9(e68) / a61), r55.setOffset(t71, (n61 - s71[0]) / i47, (e68[1] - s71[1]) / a61);
  }
  _clearTileOverlayData(e68, t71) {
    t71.setScale(e68, -1, -1), t71.setOffset(e68, -1, -1);
  }
  async reloadShaders() {
    e54(), await this.renderer.reloadShaders(), this.setDrawTexturesDirty(), this.runTask(C5);
  }
  _dispatchAnimationUpdate(e68) {
    const t71 = n3(e68 - this._animationTimeLast);
    if (t71 >= this.surface.view._stage.renderer.animationTimestep || null != this.view.state.forcedAnimationTime || this._drawTexturesDirty || this._drawTexturesAnimateDirty) {
      const r55 = n3(t71 / this.surface.view._stage.renderer.animationTimeDilation), s71 = new d9(this.view.state.camera, r55, this.view.state.forcedAnimationTime);
      this.renderer.updateAnimation(s71) && (this._drawTexturesAnimateDirty = true), this._animationTimeLast = e68;
    }
  }
  setDrawTexturesDirty() {
    this.renderer.hasOverlays ? (this._contentUpdated = true, this._drawTexturesDirty = true, this.view._stage.renderView.requestRender()) : this.setPlacementDirty();
  }
  _intersectGroundFromView(e68, t71, r55, s71) {
    const i47 = this.view.sceneIntersectionHelper.getCenterRayWithSubpixelOffset(e68, me2, t71, r55);
    if (null == i47)
      return false;
    const a61 = i47.origin, n61 = u4(ce4, i47.origin, i47.direction);
    return this._groundIntersector.reset(a61, n61, e68), this._groundIntersector.intersect([]), this.view.basemapTerrain.intersect(this._groundIntersector, null, a61, n61), this._groundIntersector.results.min.getIntersectionPoint(s71);
  }
  _findHorizonBasedPointOfInterest(e68, t71) {
    let r55 = 0.5;
    const a61 = 0.55, n61 = this.view.renderCoordsHelper.getAltitude(e68.eye), o58 = this.view.pointsOfInterest.centerOnSurfaceFrequent, l45 = 1e-5, h36 = e12(o58.estimatedSurfaceAltitude, e68.aboveGround ? -1 / 0 : n61 + l45, e68.aboveGround ? n61 - l45 : 1 / 0), c44 = e68.aboveGround;
    if ("global" === this.view.viewingMode) {
      const t72 = ce4;
      K3(N(ct, s6(this.view.spatialReference).radius + h36), p9(e68.eye, e68.viewForward), t72), e11(t72, t72, e68.eye);
      const i47 = s19.normalize(u7(e68.viewForward, t72, e68.viewRight)) / e68.fovY + 0.5, n62 = i47 <= 0 || i47 >= 1 ? 0.5 : a61;
      r55 = c44 ? n62 * i47 : i47 + n62 * (1 - i47);
    } else {
      const t72 = 0.5 * Math.PI - Math.acos(-e68.viewForward[2]), s71 = Math.tan(t72), n62 = r6(0, s71, 1, 0), o59 = z5(n62, n62, e68.projectionMatrix)[1], l46 = e12(0.5 + 0.5 * o59, 0, 1);
      r55 = 1 === l46 || 0 === l46 ? 0.5 : c44 ? l46 * a61 : 1 - (1 - l46) * a61;
    }
    return !!this._intersectGroundFromView(e68, 0.5, r55, t71) && X(t71, e68.eye) < o58.distance * o58.distance;
  }
  _computeOverlayExtents(e68, t71, r55) {
    const s71 = this.view.pointsOfInterest.centerOnSurfaceFrequent.renderLocation, i47 = n7();
    this._findHorizonBasedPointOfInterest(e68, i47) || r5(i47, s71), t20.OVERLAY_SHOW_CENTER ? (null == ae4 && (ae4 = new m36(this.view.graphics, "red")), ae4.show(i47, this._renderSR)) : null != ae4 && ae4.hide();
    const n61 = Math.max(0.1, x2(e68.eye, i47)), o58 = c27(this.view.renderCoordsHelper, s71, e68.eye);
    this._overlaySREqualsRenderSR || n12(i47, this._renderSR, i47, this._spatialReference);
    const l45 = this.surface.extent, h36 = !this._isSpherical && this._spatialReference && this._spatialReference.isGeographic, c44 = h36 && this._spatialReference ? 1 / s6(this._spatialReference).metersPerDegree : 1, d44 = this.view.state.contentPixelRatio, p48 = e68.perScreenPixelRatio / d44 * n61 * c44;
    r55.mapUnitsPerPixel = p48 / this._worldToPCSRatio, r55.stretch = this._overlayStretch;
    let m46 = t71 * p48 / 2 * r55.stretch, _26 = false, v32 = h36 ? 90 : 1 / 0;
    this._isSpherical && l45 && this._spatialReference && (this._spatialReference.isWebMercator ? (m46 /= Math.cos(f3(i47[1])), v32 = l45[3]) : (_26 = true, m46 /= s6(this._spatialReference).metersPerDegree, v32 = 90), m46 >= v32 && (m46 = v32, i47[1] = 0, this._spatialReference.isWebMercator && (i47[0] = 0)));
    let O32 = 1;
    _26 && (O32 = 1 / Math.max(0.2, Math.cos(Math.abs(h3(i47[1])))), m46 * O32 > 180 && (O32 = 180 / m46), r55.mapUnitsPerPixel *= O32);
    const T21 = Math.log(2) / 12;
    m46 = Math.exp(Math.round(Math.log(m46) / T21) * T21);
    const S24 = m46 * O32, M21 = 32, b22 = 0.5 * t71 / (M21 * S24), C28 = 0.5 * t71 / (M21 * m46);
    i47[0] = Math.round(i47[0] * b22) / b22, i47[1] = Math.round(i47[1] * C28) / C28;
    const U23 = r55.inner;
    U23[0] = i47[0] - S24, U23[1] = i47[1] - m46, U23[2] = i47[0] + S24, U23[3] = i47[1] + m46, this._isSpherical && this._shiftExtentToFitBounds(U23, 1 / 0, v32);
    const N20 = r55.outer;
    if (6 * S24 > M2(l45))
      e13(N20, l45);
    else {
      if (Math.PI / 2 - Math.abs(o58 - Math.PI / 2) <= 0.25 * Math.PI)
        N20[0] = U23[0] - S24, N20[1] = U23[1] - m46, N20[2] = U23[2] + S24, N20[3] = U23[3] + m46;
      else {
        n12(e68.eye, this._renderSR, ce4, this._spatialReference), e20(he2, i47, ce4);
        let t72 = -Math.atan2(he2[1], he2[0]) + 0.125 * Math.PI;
        t72 < 0 && (t72 += 2 * Math.PI);
        const r56 = Math.floor(t72 / (0.25 * Math.PI));
        m7(he2, ie4[r56], 2 * m46), he2[0] *= O32, he2[2] *= O32, o7(N20, U23, he2);
      }
    }
    if (this._isSpherical)
      N20[0] = this._longitudeCyclical.clamp(N20[0]), N20[2] = this._longitudeCyclical.clamp(N20[2]), N20[1] = Math.max(N20[1], -v32), N20[3] = Math.min(N20[3], v32);
    else {
      const e69 = U3(U23, l45, ue2), t72 = U3(N20, l45, pe2);
      R(e69, t72) && (N20[2] = N20[0], N20[3] = N20[1]);
    }
    const A32 = Math.abs(U23[2] - U23[0]) / t71;
    r55.mapUnitsPerPixel = Math.max(r55.mapUnitsPerPixel, A32), r55.pixelRatioAdjustment = r55.mapUnitsPerPixel / A32;
  }
  _drawOverlays(e68, t71) {
    if (!this.renderer.hasOverlays)
      return;
    if (!this._drawTexturesDirty && !this._drawTexturesAnimateDirty)
      return this.renderer;
    const r55 = this._drawTexturesDirty;
    this._drawTexturesDirty = this._drawTexturesAnimateDirty = false;
    const s71 = this.renderer.computeValidity();
    this.renderer.releaseRenderTargets(), this.renderer.drawOverlays(t71);
    return s71 !== this.renderer.computeValidity() && this.surface.updateTileOverlayParams(O7.UPDATE), r55 ? (this.surface.requestRender(e68), e68 === O7.UPDATE && this.surface.requestUpdate()) : this.surface.requestRender(O7.BACKGROUND), this.renderer;
  }
  _rectanglesOverlap(e68, t71) {
    return null != e68 && (this._longitudeCyclical ? (this._longitudeCyclical.contains(t71[0], t71[2], e68[0]) || this._longitudeCyclical.contains(t71[0], t71[2], e68[2]) || this._longitudeCyclical.contains(e68[0], e68[2], t71[0])) && !(e68[1] > t71[3] || e68[3] < t71[1]) : E3(e68, t71));
  }
  _rectInsideRect(e68, t71) {
    return null != t71 && (this._longitudeCyclical ? this._longitudeCyclical.contains(e68[0], e68[2], t71[0]) && this._longitudeCyclical.contains(e68[0], e68[2], t71[2]) && t71[1] > e68[1] && t71[3] < e68[3] : R(e68, t71));
  }
  _pointIsInExtent(e68, t71) {
    if (this._longitudeCyclical)
      return this._longitudeCyclical.contains(t71[0], t71[2], e68.x) && e68.y >= t71[1] && e68.y <= t71[3];
    const r55 = e68.x, s71 = e68.y;
    return r55 > t71[0] && r55 < t71[2] && s71 > t71[1] && s71 < t71[3];
  }
  _shiftExtentToFitBounds(e68, t71, r55) {
    let s71 = 0, i47 = 0;
    e68[0] < -t71 ? s71 = e68[0] + t71 : e68[2] > t71 && (s71 = t71 - e68[2]), e68[1] < -r55 ? i47 = e68[1] + r55 : e68[3] > r55 && (i47 = r55 - e68[3]), z3(e68, s71, i47);
  }
  get test() {
    return { renderer: this.renderer, update: () => this.runTask(C5) };
  }
};
function oe3(e68, t71) {
  const r55 = 1e-5, s71 = t20.TESTS_DISABLE_OPTIMIZATIONS ? 0 : r55 * Math.max(e68[2] - e68[0], e68[3] - e68[1], t71[2] - t71[0], t71[3] - t71[1]);
  return Math.abs(t71[0] - e68[0]) <= s71 && Math.abs(t71[1] - e68[1]) <= s71 && Math.abs(t71[2] - e68[2]) <= s71 && Math.abs(t71[3] - e68[3]) <= s71;
}
e([y2()], ne4.prototype, "_spatialReference", void 0), e([y2({ readOnly: true })], ne4.prototype, "running", null), e([y2()], ne4.prototype, "_placementDirty", void 0), e([y2()], ne4.prototype, "_contentUpdated", void 0), e([y2()], ne4.prototype, "_isSpherical", null), e([y2()], ne4.prototype, "_worldToPCSRatio", null), e([y2()], ne4.prototype, "renderer", void 0), e([y2({ constructOnly: true })], ne4.prototype, "view", void 0), e([y2({ constructOnly: true })], ne4.prototype, "surface", void 0), e([y2()], ne4.prototype, "suspended", null), e([y2()], ne4.prototype, "updating", null), e([y2({ type: Boolean })], ne4.prototype, "rendersOccludedDraped", null), ne4 = e([a4("esri.views.3d.terrain.OverlayManager")], ne4);
var le3 = class {
  constructor() {
    this.inner = u5(), this.outer = u5(), this.mapUnitsPerPixel = 0, this.pixelRatioAdjustment = 1, this.stretch = se5;
  }
};
var he2 = n11();
var ce4 = n7();
var de2 = new le3();
var ue2 = u5();
var pe2 = u5();
var me2 = d7();
var _e2;
!function(e68) {
  e68[e68.NONE = 0] = "NONE", e68[e68.EXTENT = 1] = "EXTENT", e68[e68.RERENDER_ONLY = 2] = "RERENDER_ONLY";
}(_e2 || (_e2 = {}));

// node_modules/@arcgis/core/views/3d/terrain/PatchGeometry.js
var o47 = class {
  constructor() {
    this.indices = null, this.indexCount = 0, this.edgeIndicesStartIndex = 0, this.poleIndicesStartIndex = 0, this.vertexAttributes = null, this.edgeVerticesStartIndex = 0, this.poleVerticesStartIndex = 0, this.maxEdgeVertexCount = 0, this.boundingBox = P4(), this.numVerticesPerSide = 0, this.minu = 0, this.minv = 0, this.maxu = 1, this.maxv = 1, this.outerEdgesOffsetAndLength = [0, 0, 0, 0, 0, 0, 0, 0];
  }
  release() {
    this.vertexAttributes = t2(this.vertexAttributes), this.indices = null;
  }
  reset() {
    this.indices = null, this.vertexAttributes = null, P4(this.boundingBox), this.numVerticesPerSide = 0;
  }
  getEdgeFirstVertexIndex(t71) {
    return this.outerEdgesOffsetAndLength[2 * t71];
  }
  getEdgeCount(t71) {
    return this.outerEdgesOffsetAndLength[2 * t71 + 1];
  }
  getEdgeVertexIndex(t71, e68) {
    return this.getEdgeAttributeIndex(t71, e68);
  }
  getEdgeVertexPosition(t71, s71, i47, r55) {
    this._getEdgeVertexRaw(this.getEdgeAttributeIndex(t71, r55), s71), u4(s71, s71, i47);
  }
  getEdgeNormal(t71, e68, s71) {
    const { typedBuffer: i47, typedBufferStride: n61 } = this.vertexAttributes.normalCompressed;
    f12(e68, i47, this.getEdgeAttributeIndex(t71, s71), n61);
  }
  setEdgeNormalFromValues(t71, e68, s71, i47, r55) {
    this._setNormal(this.getEdgeAttributeIndex(t71, e68), s71, i47, r55);
  }
  setEdgeVertexFromValuesRawPositionUV(t71, e68, s71, i47, r55, n61, o58) {
    const d44 = this.getEdgeAttributeIndex(t71, e68);
    this.vertexAttributes.position.setValues(d44, s71, i47, r55), this._setUV(d44, n61, o58);
  }
  setEdgeVertexFromValuesRawPositionUVNormal(t71, e68, s71, i47, r55, n61, o58, d44, u46, g23) {
    const h36 = this.getEdgeAttributeIndex(t71, e68);
    this.vertexAttributes.position.setValues(h36, s71, i47, r55), this._setUV(h36, n61, o58), this._setNormal(h36, d44, u46, g23);
  }
  _getEdgeVertexRaw(t71, e68) {
    this.vertexAttributes.position.getVec(t71, e68);
  }
  _setNormal(t71, e68, s71, i47) {
    const { typedBuffer: r55, typedBufferStride: o58 } = this.vertexAttributes.normalCompressed;
    s16(r55, t71, e68, s71, i47, o58);
  }
  _setUV(t71, e68, s71) {
    u37(this.vertexAttributes.uv0, t71, e68, s71);
  }
  getEdgeAttributeIndex(t71, e68) {
    return p15(0 <= e68 && e68 < this.getEdgeCount(t71)), this.getEdgeFirstVertexIndex(t71) + e68;
  }
};
var d37 = 16384;
function u37(t71, e68, s71, i47) {
  t71.setValues(e68, s71 * d37, i47 * d37);
}

// node_modules/@arcgis/core/views/3d/terrain/PatchGeometryLUT.js
var t55 = class {
  constructor() {
    this.sinLonLUT = new Array(s31 + 1), this.cosLonLUT = new Array(s31 + 1), this.sinLatLUT = new Array(s31 + 1), this.cosLatLUT = new Array(s31 + 1);
  }
  update(s71, t71, n61) {
    const o58 = t71[0], i47 = t71[2];
    for (let r55 = 0; r55 <= s71; r55++) {
      const t72 = r55 / s71, L24 = o58 * (1 - t72) + i47 * t72;
      this.sinLonLUT[r55] = Math.sin(L24), this.cosLonLUT[r55] = Math.cos(L24);
      const a61 = n61(t72);
      this.sinLatLUT[r55] = Math.sin(a61), this.cosLatLUT[r55] = Math.cos(a61);
    }
  }
};

// node_modules/@arcgis/core/views/3d/terrain/GeometryState.js
var l35 = class {
  constructor() {
    this.numVerticesPerSide = 0, this.samplerData = null, this.samplerDataVersion = 0, this.clippingArea = null, this.wireframe = false, this.cornerPeerNeighbors = [null, null, null, null], this.cornerNeighborCornerTiles = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], this.cornerNeighborCornerTileSamplerVersions = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], this.edgeResolutions = [-1, -1, -1, -1], this.edgePeerNeighbors = [null, null, null, null], this.edgePeerNeighborSamplerVersions = [-1, -1, -1, -1];
  }
};

// node_modules/@arcgis/core/views/3d/terrain/TextureFader.js
var i42 = class _i {
  constructor(t71) {
    this._getFadeDuration = t71, this._fadeStart = 0, this._delayedTime = 0;
  }
  clear() {
    this._current = u(this._current), this._next = u(this._next), this._waiting = u(this._waiting), this._delayed = u(this._delayed);
  }
  get current() {
    if (null == this._current)
      return null;
    if (!this._isFadingEnabled) {
      const t71 = this._delayed || this._waiting || this._next || this._current;
      t71 !== this._current && (this._current = null, this.clear(), this._current = t71);
    }
    let r55 = _i.test.fadeMoment;
    if (null != this._delayed && (r55 = r55 || performance.now(), r55 >= this._delayedTime && (this._push(this._delayed, n50.Immediate), this._delayed = null)), null != this._next) {
      r55 = r55 || performance.now();
      const i47 = this._fadeDuration, n61 = null != this._current && this._next.texture === this._current.texture, s71 = this._next.type !== H5.FADING, a61 = r55 - this._fadeStart >= i47;
      (n61 || s71 || a61) && (u(this._current), this._current = this._next, this._next = this._waiting, this._waiting = null, this._fadeStart = this._alignFadeStart(r55));
    }
    return this._current;
  }
  get next() {
    return this._next;
  }
  get fadeFactor() {
    if (null == this._next)
      return 1;
    const t71 = _i.test.fadeMoment || performance.now(), e68 = Math.max(0, t71 - this._fadeStart), n61 = this._fadeDuration;
    return e68 > n61 ? 0 : 1 - e68 / n61;
  }
  get isFading() {
    return null != this._next || null != this._delayed;
  }
  push(e68, i47 = n50.Immediate) {
    this._delayed = u(this._delayed), this._push(e68, i47);
  }
  _push(e68, r55) {
    if (this._isFadingEnabled || this.clear(), null == this._current)
      return void (this._current = e68);
    const s71 = _i.test.fadeMoment || performance.now();
    return r55 !== n50.Immediate ? (this._delayed = e68, void (this._delayedTime = s71 + r55)) : null == this._next ? (this._next = e68, void (this._fadeStart = this._alignFadeStart(s71))) : void (null != e68 && (u(this._waiting), this._waiting = e68));
  }
  get _fadeDuration() {
    return null == this._waiting ? this._getFadeDuration() : 0.5 * this._getFadeDuration();
  }
  _alignFadeStart(t71) {
    const e68 = this._getFadeDuration();
    return t71 + e68 - t71 % e68;
  }
  get _isFadingEnabled() {
    return this._getFadeDuration() > 0;
  }
};
var n50;
i42.test = { fadeMoment: 0 }, function(t71) {
  t71[t71.Immediate = 0] = "Immediate", t71[t71.Delayed = 5e3] = "Delayed";
}(n50 || (n50 = {}));

// node_modules/@arcgis/core/views/3d/terrain/TileAgent.js
var l36 = class {
  get updating() {
    return !!this._tileRequested;
  }
  init(e68, t71, s71, i47) {
    this.tile = e68, this._layerIdx = t71, this._layerClass = s71, this._suspended = i47, this._tileLayerInfo = e68.getLayerInfo(t71, s71), this._tileRequested = null;
    const l45 = this._findAncestorWithData();
    this._setUpsampleTile(l45);
  }
  startLoading() {
    return this._requestNext();
  }
  dispose() {
    this._tileRequested && (this._tileRequested.unrequestLayerData(this._layerIdx, this._layerClass, this), this._tileRequested = null), this.tile = null, this._tileLayerInfo = null;
  }
  setSuspension(e68) {
    e68 !== this._suspended && (this._suspended = e68, e68 ? this._tileRequested && (this._tileRequested.unrequestLayerData(this._layerIdx, this._layerClass, this), this._tileRequested = null) : this._tileLayerInfo.data || this.update());
  }
  update() {
    const e68 = this._findAncestorWithData();
    return this._setUpsampleTile(e68), this._requestNext();
  }
  dataArrived(t71, s71) {
    this._setUpsampleTile(t71, s71), this._tileRequested = null, t71 === this.tile ? this.tile.updateRenderData(this._layerClass, H5.FADING, s71) : this._requestNext();
  }
  dataMissing() {
    this._tileRequested = null, this._tileLayerInfo.data = null, this._requestNext();
  }
  _agentDone() {
    this.tile.agentDone(this._layerIdx, this._layerClass), this.dispose();
  }
  _requestNext() {
    if (this._suspended)
      return true;
    const e68 = this._findNextDownload();
    if (this._tileRequested) {
      if (e68 === this._tileRequested)
        return true;
      this._tileRequested.unrequestLayerData(this._layerIdx, this._layerClass, this), this._tileRequested = null;
    }
    return null != e68 ? e68.requestLayerData(this._layerIdx, this._layerClass, this) && (this._tileRequested = e68) : this._agentDone(), !!this._tileRequested;
  }
  _findNextDownload() {
    const e68 = this._layerIdx, l45 = this._layerClass, a61 = this.tile.surface.layerViewByIndex(e68, l45), n61 = m16(a61), { minLevel: r55, maxLevel: h36 } = a61.dataLevelRange, d44 = this._desiredMinLevelDelta, o58 = this._progressiveLevelModulo + d44, u46 = this._scaleRangeEnabled ? o30 : () => true;
    let _26 = this.tile;
    const p48 = _26.level;
    let f48;
    const y26 = this._tileLayerInfo.upsampleInfo, v32 = null != y26 ? y26.tile.level : -1, I27 = null != y26 && v32 - p48 >= d44, c44 = n61 == null ? void 0 : n61.tilemapCache, q21 = "vector-tile-3d" === a61.type ? a61.schemaHelper : null;
    for (; _26 && u46(_26, n61, false) && _26.level >= r55; ) {
      const s71 = _26.level, i47 = p48 - s71, a62 = _26.layerInfo[l45][e68];
      if (a62.data && i47 >= d44) {
        (!I27 || s71 > v32) && this._setUpsampleTile(_26), a62.dataInvalidated && (f48 = _26);
        break;
      }
      const n62 = (q21 == null ? void 0 : q21.getLevelRowColumn(_26.lij)) ?? _26.lij;
      if ("unavailable" !== (c44 == null ? void 0 : c44.getAvailability(n62[0], n62[1], _26.lij[2])) && s71 <= h36 && !a62.data && !a62.dataMissing && ((!f48 || _26.level === r55 || s71 % l15 == 0 || p48 - f48.level < d44) && (f48 = _26), i47 >= o58))
        break;
      _26 = _26.parent;
    }
    if (null != f48 && p48 - f48.level < d44)
      if (y26)
        f48 = null;
      else {
        const t71 = this._findAncestorWithData();
        if (null != t71) {
          this._setUpsampleTile(t71);
          f48 = t71.layerInfo[l45][e68].dataInvalidated ? t71 : null;
        }
      }
    return f48;
  }
  _findAncestorWithData() {
    const e68 = this.tile.elevationLevel, t71 = this._desiredMinLevelDelta;
    let s71;
    for (let i47 = this.tile; i47; i47 = i47.parent)
      if (i47.hasLayerData(this._layerIdx, this._layerClass)) {
        if (e68 - i47.level >= t71)
          return i47;
        s71 = i47;
      }
    return s71;
  }
  _setUpsampleTile(t71, s71) {
    this._tileLayerInfo.setUpsampleInfo(this.tile, t71), this.tile.updateRenderData(this._layerClass, H5.FADING, s71);
  }
  get test() {
    return { findNextDownload: () => this._findNextDownload(), tileLayerInfo: this._tileLayerInfo };
  }
};
var a48 = class extends l36 {
  get _desiredMinLevelDelta() {
    throw n51;
  }
  get _progressiveLevelModulo() {
    throw n51;
  }
  dispose() {
  }
};
var n51 = new Error("Abstract method called on TileAgent");
var r44 = new a48();

// node_modules/@arcgis/core/views/3d/terrain/ElevationTileAgent.js
var l37 = class extends l36 {
  constructor() {
    super(...arguments), this._scaleRangeEnabled = false;
  }
  get _desiredMinLevelDelta() {
    return x9(this.tile.level) - (this.tile.elevationLevel - this.tile.level);
  }
  get _progressiveLevelModulo() {
    return 0;
  }
};

// node_modules/@arcgis/core/views/3d/terrain/MapTileAgent.js
var t56 = class extends l36 {
  constructor() {
    super(), this._scaleRangeEnabled = true;
  }
  get _desiredMinLevelDelta() {
    return 0;
  }
  get _progressiveLevelModulo() {
    return l15;
  }
};

// node_modules/@arcgis/core/views/3d/terrain/TilePerLayerInfo.js
var l38 = class {
  constructor() {
    this.waitingAgents = new l3(), this._upsampleInfo = null, this.loadingAgent = null, this.requestPromise = null, this.requestAbort = null, this.pendingUpdates = 0;
  }
  static acquire(t71) {
    const s71 = o48.acquire();
    return s71._init(t71), s71;
  }
  release() {
    this.dispose(), p39.delete(this), o48.release(this);
  }
  dispose() {
    this.loadingAgent = r2(this.loadingAgent), this.abortRequest(), this._unsetUpsampleInfo(), this.pendingUpdates = 0, this._data = w12(this._data);
  }
  static prune() {
    o48.prune(0);
  }
  _init(t71) {
    this.waitingAgents.clear(), this._data = w12(this._data), this.dataMissing = false, this.dataInvalidated = false, this._unsetUpsampleInfo(), this.abortRequest(), this.loadingAgent = null, this.pendingUpdates = 0, this._pool = t71, this.elevationBounds = null;
  }
  invalidateSourceData() {
    this.dataInvalidated = true, this.dataMissing = false, this._unsetUpsampleInfo();
  }
  abortRequest() {
    this.requestAbort = e2(this.requestAbort), this.requestPromise = null;
  }
  get upsampleInfo() {
    return this._upsampleInfo;
  }
  _unsetUpsampleInfo() {
    null != this._upsampleInfo && (this._upsampleInfo.tile.unrefMapData(), this._pool.release(this._upsampleInfo), this._upsampleInfo = null);
  }
  setUpsampleInfo(t71, s71) {
    if (t71 !== s71 && null != s71) {
      if (null == this._upsampleInfo)
        this._upsampleInfo = this._pool.acquire();
      else {
        if (this._upsampleInfo.tile === s71)
          return;
        this._upsampleInfo.tile.unrefMapData();
      }
      s71.refMapData(), m20(t71, s71, this._upsampleInfo);
    } else
      this._unsetUpsampleInfo();
  }
  get data() {
    return this._data;
  }
  set data(t71) {
    w12(this._data), this._data = t71;
  }
};
var o48 = new e4(l38, null, () => {
});
var p39 = /* @__PURE__ */ new Map();
function r45() {
  p39.size > 0 && (console.log(`${p39.size} live TilePerLayerInfo allocations:`), p39.forEach((t71) => console.log(t71, "\n")));
}

// node_modules/@arcgis/core/views/3d/terrain/TileTexture.js
var t57 = class {
  constructor(t71, e68) {
    this._texture = t71, this._cache = e68, this.type = "tile-texture", this._refCount = 1;
  }
  retain() {
    ++this._refCount;
  }
  release() {
    if (--this._refCount, 0 === this._refCount)
      if (this._cache) {
        const t71 = `${this._texture.descriptor.width} ${this._texture.descriptor.pixelFormat}`;
        this._cache.put(t71, this);
      } else
        this.dispose();
  }
  dispose() {
    this._texture.dispose();
  }
  get texture() {
    return this._texture;
  }
  generateMipmap() {
    this._texture.generateMipmap();
  }
  get descriptor() {
    return this._texture.descriptor;
  }
  get usedMemory() {
    return this._texture.usedMemory;
  }
};

// node_modules/@arcgis/core/views/3d/terrain/TileUpdate.js
var E32;
!function(E38) {
  E38[E38.NONE = 0] = "NONE", E38[E38.SPLIT = 1] = "SPLIT", E38[E38.ELEVATION = 2] = "ELEVATION", E38[E38.MERGE = 4] = "MERGE", E38[E38.GEOMETRY = 8] = "GEOMETRY", E38[E38.TEXTURE_NOFADING = 16] = "TEXTURE_NOFADING", E38[E38.TEXTURE_FADING = 32] = "TEXTURE_FADING";
}(E32 || (E32 = {}));

// node_modules/@arcgis/core/views/3d/terrain/Tile.js
var ee4 = 0.1;
var te4 = class {
  constructor() {
    this._lij = [0, 0, 0], this._children = [null, null, null, null], this._pendingUpdates = 0, this.renderData = null, this._dirty = true, this._previouslyRendered = false, this.extent = u5(), this._elevationBoundsMin = NaN, this._elevationBoundsMax = 0, this.layerInfo = [[], []], this.extentInRadians = u5(), this.centerAtSeaLevel = n7(), this._center = [n7(), w6(), n7()], this.up = a5(), this._isWithinClippingArea = true, this._intersectsClippingArea = true, this._maxTesselation = 0, this._usedMemory = null, this._mapTileMemoryInternal = 0, this._mapDataRefCount = 0, this.screenDepth = 0, this.renderOrder = 0, this._edgeLen = 0, this._edgeLen2 = 0, this._curvatureHeight = 0, this.extentMidX = 0, this.extentMidY = 0, this.distanceToPOI = -1, this._lastPOI = n7(), this.maxLevelDeltaNeighborCount = 0, this.unmergableChildCount = 0;
  }
  get lij() {
    return this._lij;
  }
  static prune() {
    ne5.prune(0), re4.prune(0), l38.prune();
  }
  get _isCached() {
    return !this.isLeaf && this._mapDataRefCount <= 0;
  }
  get maxTesselation() {
    return this._maxTesselation;
  }
  get isWithinClippingArea() {
    return this._isWithinClippingArea;
  }
  get intersectsClippingArea() {
    return this._intersectsClippingArea;
  }
  get clippingArea() {
    return this._clippingArea;
  }
  get parent() {
    return this._parent;
  }
  get children() {
    return this._children;
  }
  get surface() {
    return this._surface;
  }
  get elevationBoundsMin() {
    return this._elevationBoundsMin;
  }
  get elevationBoundsMax() {
    return this._elevationBoundsMax;
  }
  get level() {
    return this._lij[0];
  }
  get key() {
    return `${this._lij[0]}/${this._lij[1]}/${this._lij[2]}`;
  }
  get edgeLen() {
    return this._edgeLen;
  }
  get radius() {
    return this._center[oe4.MIDDLE][3];
  }
  get visible() {
    return this._dirty && this.computeVisibility(), this._visible;
  }
  get frustumVisibility() {
    return this._dirty && this.computeVisibility(), this._frustumVisibility;
  }
  computeVisibility() {
    this._dirty = false;
    const e68 = this.parent, t71 = (e68 == null ? void 0 : e68.frustumVisibility) ?? T6.INTERSECTS;
    this._frustumVisibility = t71 === T6.INSIDE ? T6.INSIDE : t71 === T6.OUTSIDE ? T6.OUTSIDE : this._calculateFrustumVisibilityStatus(this.surface.frustum);
    const i47 = this._frustumVisibility !== T6.OUTSIDE && this._intersectsClippingArea;
    i47 !== this._visible && (this._visible = i47, this._surface.emit("tiles-visibility-changed"), this._surface.renderer.setDirty(), this.updateAgentSuspension());
  }
  get loadable() {
    return this.visible || this._surface.view.state.fixedContentCamera;
  }
  get rendered() {
    const e68 = !!this.renderData;
    return e68 !== this._previouslyRendered && (this._surface.emit("tiles-visibility-changed"), this._previouslyRendered = e68, this._surface.renderer.setDirty()), e68;
  }
  init(e68, t71, i47, s71, n61) {
    this._lij[0] = e68, this._lij[1] = t71, this._lij[2] = i47, this.ellipsoid = s6(n61.tilingScheme.spatialReference), n61.tilingScheme.getExtent(e68, t71, i47, this.extent), n61.tilingScheme.convertExtentToRadians(this.extent, this.extentInRadians), this.extentMidX = 0.5 * (this.extent[0] + this.extent[2]), this.extentMidY = 0.5 * (this.extent[1] + this.extent[3]), this._isWithinClippingArea = true, this._intersectsClippingArea = true, this._clippingArea = null, this._mapDataRefCount = 0, n61.upsampleMapCache.pop(this.key), this._edgeLen = 0, this._edgeLen2 = 0, this._center[oe4.MIDDLE][3] = 0, this.elevationLevel = e68, s71 && !Number.isNaN(s71.elevationBoundsMin) ? (this._elevationBoundsMin = s71.elevationBoundsMin, this._elevationBoundsMax = s71.elevationBoundsMax) : (this._elevationBoundsMin = 0, this._elevationBoundsMax = 0), this._pendingUpdates = 0, this.renderData = null, this.screenDepth = 0, this._visible = false, this._previouslyRendered = false, this._parent = s71, this.unsetChildren(), this._surface = n61, this.updateVisibility(), this.maxLevelDeltaNeighborCount = 0, this.unmergableChildCount = 0;
    for (const r55 of E30) {
      const e69 = n61.numLayers(r55), t72 = this.layerInfo[r55];
      for (const i48 of t72)
        i48.release();
      t72.length = e69;
      for (let i48 = 0; i48 < e69; i48++)
        t72[i48] = l38.acquire(this._surface.upsampleInfoPool), r55 === A23.ELEVATION && this.findElevationBoundsForLayer(i48, -1);
    }
    this.computeElevationBounds(), this._maxTesselation = Math.min(n61.tilingScheme.pixelSize, s31);
  }
  dispose() {
    a24(!this.renderData, "tile.renderData was not unloaded"), this._surface.upsampleMapCache.pop(this.key);
    for (const e68 of E30) {
      for (const t71 of this.layerInfo[e68])
        t71.release();
      this.layerInfo[e68].length = 0;
    }
    this._parent = null;
    for (let e68 = 0; e68 < 4; ++e68)
      this._children[e68] = null;
    this._surface = null, this.setMemoryDirty();
  }
  refMapData() {
    ++this._mapDataRefCount, this._isCached || this._surface.upsampleMapCache.pop(this.key);
  }
  unrefMapData() {
    if (--this._mapDataRefCount, this._isCached) {
      this.setMemoryDirty();
      const e68 = this._cachedMemory;
      e68 > 0 && this._surface.upsampleMapCache.put(this.key, this, e68);
    }
  }
  setMemoryDirty() {
    this._usedMemory = null;
  }
  get usedMemory() {
    return this._ensureUsedMemory() + (this._isCached ? 0 : this._mapTileMemoryInternal);
  }
  get _cachedMemory() {
    return this._isCached ? this._mapTileMemory : 0;
  }
  get _mapTileMemory() {
    return this._ensureUsedMemory(), this.layerInfo[A23.MAP].reduce((e68, t71) => e68 + (t71 instanceof d13 ? t71.usedMemory / t71.referenced : 0), this._mapTileMemoryInternal);
  }
  get _cpuImageMemorySize() {
    const e68 = 4, t71 = this._surface.tilingScheme.pixelSize;
    return t71 * t71 * e68;
  }
  _ensureUsedMemory() {
    var _a;
    if (null != this._usedMemory)
      return this._usedMemory;
    this._usedMemory = this._baseUsedMemory, this._mapTileMemoryInternal = 0;
    let e68 = 0;
    for (const { data: i47 } of this.layerInfo[A23.MAP])
      i47 instanceof d13 ? e68 += this._getTerrainDataMemory(i47) : this._mapTileMemoryInternal += this._getTerrainDataMemory(i47);
    const t71 = this._cpuImageMemorySize;
    for (const i47 of this.layerInfo[A23.ELEVATION])
      this._usedMemory += i47.data ? t71 : 0;
    return this.renderData && (this._usedMemory += this.renderData.estimatedGeometryMemoryUsage, this._mapTileMemoryInternal += ((_a = this.renderData.texture) == null ? void 0 : _a.usedMemory) ?? 0), this._isCached && this._surface.upsampleMapCache.updateSize(this.key, this, this._mapTileMemoryInternal + e68), this._usedMemory;
  }
  getUsedMemoryForLayer(e68, t71) {
    const i47 = this.layerInfo[e68][t71];
    return (i47 == null ? void 0 : i47.data) ? e68 === A23.MAP ? this._isCached ? 0 : this._getTerrainDataMemory(i47.data) : e68 === A23.ELEVATION ? this._cpuImageMemorySize : 0 : 0;
  }
  _getTerrainDataMemory(e68) {
    return e68 instanceof t57 ? e68.texture.usedMemory : e68 instanceof HTMLImageElement || e68 instanceof A8 ? this._cpuImageMemorySize : e68 instanceof m23 ? e68.memoryUsage : e68 instanceof d13 ? e68.usedMemory / e68.referenced : 0;
  }
  updateScreenDepth(e68) {
    const t71 = this._center[oe4.MIDDLE], i47 = e68, s71 = t71[0], n61 = t71[1], r55 = t71[2], a61 = i47[2] * s71 + i47[6] * n61 + i47[10] * r55 + i47[14];
    this.screenDepth = a61 < 0 ? 0 : a61 / (i47[3] * s71 + i47[7] * n61 + i47[11] * r55 + i47[15]);
  }
  shouldSplit(e68, t71, i47) {
    if (!this.visible)
      return E32.NONE;
    if (e68.frustum && (!this._intersectsClippingArea || this._calculateFrustumVisibilityStatus(e68.frustum) === T6.OUTSIDE))
      return E32.NONE;
    const h36 = this.level;
    e11(pe3, Z(this._center[oe4.MIDDLE]), t71);
    let u46 = v4(pe3), d44 = pe3, c44 = Z(this._center[oe4.MIDDLE]);
    e11(fe2, this._center[oe4.TOP], t71);
    const g23 = v4(fe2);
    g23 < u46 && (u46 = g23, d44 = fe2, c44 = this._center[oe4.TOP]), e11(_e3, this._center[oe4.BOTTOM], t71);
    const p48 = v4(_e3);
    if (p48 < u46 && (u46 = p48, d44 = _e3, c44 = this._center[oe4.BOTTOM]), this._edgeLen2 > u46 && h36 < e68.maxLod)
      return E32.SPLIT;
    const f48 = Math.sqrt(u46), _26 = e68.fovX * f48 * 2, y26 = this._edgeLen / _26, A32 = () => {
      if (h36 < e68.maxLod)
        return this.elevationLevel = h36, E32.NONE;
      const t72 = h36 + Math.ceil(-Math.log2(e68.relativeWidthLimit / y26));
      return t72 !== this.elevationLevel ? (this.elevationLevel = t72, E32.ELEVATION) : E32.NONE;
    }, M21 = null != i47 ? i47 - h36 : 1 / 0;
    if (M21 <= 0.5)
      return A32();
    const T21 = P3(this.up, pe3), v32 = this._elevationBoundsMax - this._elevationBoundsMin, E38 = v32 / this.edgeLen;
    if (e68.aboveGround && T21 > 0 && E38 < 1e-3) {
      if (T21 / f48 - Math.sin(this._curvatureHeight / (this.edgeLen * Math.SQRT1_2) * Math.PI) - E38 > 0)
        return E32.NONE;
    }
    const D19 = null != i47 ? 3 - Math.min(M21, 2) : 1;
    if (y26 * D19 < e68.relativeWidthLimit || h36 >= e68.maxLod)
      return A32();
    if (h36 < 7)
      return E32.SPLIT;
    g2(me3, this.up, T21), e11(me3, me3, d44);
    const L24 = v4(me3);
    if (L24 <= this.radius * this.radius)
      return E32.SPLIT;
    g2(me3, me3, this.radius / Math.sqrt(L24)), u4(me3, me3, c44), e11(me3, t71, me3);
    const x31 = Math.min(1, (Math.abs(P3(me3, this.up)) + 0.5 * v32 + this._curvatureHeight) / s8(me3)), S24 = ee4 / e68.angledSplitBias, O32 = e68.fovY * f48 * 2;
    return x31 * (this._edgeLen / O32 * D19) < S24 * e68.relativeHeightLimit ? E32.NONE : E32.SPLIT;
  }
  setChildren(e68, t71, i47, s71) {
    a24(!!(e68 && t71 && i47 && s71), "Null child passed");
    const n61 = this._children;
    return n61[0] = e68, n61[1] = t71, n61[2] = i47, n61[3] = s71, n61;
  }
  unsetChildren() {
    this._children[0] = null, this._children[1] = null, this._children[2] = null, this._children[3] = null;
  }
  get isLoaded() {
    var _a;
    return ((_a = this.renderData) == null ? void 0 : _a.hasGeometry) ?? false;
  }
  load() {
    this.refMapData();
    for (const e68 of E30)
      this._createOrUpdateAgents(0, e68);
    this.surface.renderer.loadTile(this);
  }
  unload(e68) {
    e68.unloadTile(this);
    for (const t71 of E30) {
      const e69 = this.layerInfo[t71];
      for (const t72 of e69)
        t72.loadingAgent && t72.loadingAgent !== r44 && (se6(t72.loadingAgent), t72.loadingAgent = null), t72.pendingUpdates = 0;
    }
    this.resetPendingUpdate(E32.GEOMETRY), this.resetPendingUpdate(E32.TEXTURE_NOFADING), this.resetPendingUpdate(E32.TEXTURE_FADING), this.unrefMapData();
  }
  unloadMapData() {
    const e68 = this.layerInfo[A23.MAP];
    for (const t71 of e68)
      t71.loadingAgent && t71.loadingAgent !== r44 && (se6(t71.loadingAgent), t71.loadingAgent = null), t71.pendingUpdates = 0;
    this.renderData && this.renderData.releaseTexture(), this.setMemoryDirty();
  }
  updateClippingStatus(e68) {
    if (I(e68, this._clippingArea))
      return false;
    const t71 = this._intersectsClippingArea, i47 = this._isWithinClippingArea;
    null != e68 ? (this._intersectsClippingArea = this.intersectsExtent(e68), this._isWithinClippingArea = this._isWithinExtent(e68)) : (this._intersectsClippingArea = true, this._isWithinClippingArea = true), this._clippingArea = e68, this.updateVisibility();
    const s71 = i47 && this._isWithinClippingArea, n61 = !(i47 || t71 || this._isWithinClippingArea || this._intersectsClippingArea);
    return !this.renderData || s71 || n61 || this.setPendingUpdate(E32.GEOMETRY), true;
  }
  updateVisibility() {
    this._dirty = true, this._surface.setTileTreeDirty();
  }
  getLayerInfo(e68, t71) {
    return this.layerInfo[t71][e68];
  }
  hasLayerData(e68, t71) {
    const i47 = this.layerInfo[t71][e68];
    return !(!(i47 == null ? void 0 : i47.data) || i47.dataInvalidated);
  }
  get updating() {
    if (this.hasPendingUpdates)
      return true;
    for (const e68 of E30) {
      const t71 = this.layerInfo[e68];
      for (const e69 of t71)
        if (e69.loadingAgent && e69.loadingAgent !== r44 && e69.loadingAgent.updating)
          return true;
    }
    return false;
  }
  _isSuspended(e68) {
    return !!this.hasPendingUpdate(E32.SPLIT) || e68 !== A23.ELEVATION && !this.loadable;
  }
  get hasPendingUpdates() {
    return 0 !== this._pendingUpdates;
  }
  hasPendingUpdate(e68) {
    return (this._pendingUpdates & e68) === e68;
  }
  setPendingUpdate(e68) {
    const t71 = this._pendingUpdates;
    return this._pendingUpdates |= e68, e68 === E32.SPLIT || e68 === E32.MERGE ? this._surface.setTileTreeDirty() : this._surface.requestUpdate(), t71 !== this._pendingUpdates;
  }
  resetPendingUpdate(e68) {
    return !!this.hasPendingUpdate(e68) && (this._pendingUpdates &= ~e68, true);
  }
  requestLayerData(e68, i47, s71) {
    const n61 = this.layerInfo[i47][e68];
    if (n61.waitingAgents.has(s71))
      return console.warn("agent already requested this piece of map data (tile %s, agent tile %s, layer: %d/%d)", this._lij.toString(), s71.tile.lij.toString(), i47, e68), true;
    if (n61.waitingAgents.push(s71), n61.data && !n61.dataInvalidated) {
      console.warn("agent requested existing data (tile %s, agent tile %s, layer: %d/%d)", this._lij.toString(), s71.tile.lij.toString(), i47, e68);
      const t71 = n61.data && "type" in n61.data && "vector-tile" === n61.data.type;
      return s71.dataArrived(this, t71), true;
    }
    if (n61.requestPromise)
      return true;
    e2(n61.requestAbort), n61.requestAbort = new AbortController();
    const r55 = this._surface.requestTileData(this, e68, i47, n61.requestAbort);
    if (!r55)
      return n61.requestAbort = null, false;
    const a61 = () => {
      n61.requestPromise === r55 && (n61.requestPromise = null, n61.requestAbort = null);
    };
    return n61.requestPromise = r55, r55.then(a61, a61), true;
  }
  get isLeaf() {
    return null == this._children[0];
  }
  hasLij(e68) {
    return this._lij[0] === e68[0] && this._lij[1] === e68[1] && this._lij[2] === e68[2];
  }
  findByLij(e68) {
    if (this.hasLij(e68))
      return this;
    const t71 = this._children;
    if (!t71[0])
      return null;
    return t71[0].findByLij(e68) || t71[1].findByLij(e68) || t71[2].findByLij(e68) || t71[3].findByLij(e68);
  }
  distanceToSquared(e68) {
    return v4(e11(me3, Z(this._center[oe4.MIDDLE]), e68));
  }
  containsPoint(e68) {
    const t71 = this.extent;
    return e68[0] >= t71[0] && e68[1] >= t71[1] && e68[0] <= t71[2] && e68[1] <= t71[3];
  }
  containsPointXY(e68, t71) {
    const i47 = this.extent;
    return e68 >= i47[0] && t71 >= i47[1] && e68 <= i47[2] && t71 <= i47[3];
  }
  unrequestLayerData(e68, t71, i47) {
    const s71 = this.layerInfo[t71][e68], n61 = s71.waitingAgents, r55 = null != n61.removeUnordered(i47);
    a24(r55, "agent has not requested this piece of map data"), n61.length < 1 && (s71.abortRequest(), this.setMemoryDirty());
  }
  dataArrived(e68, t71, i47) {
    const s71 = null != i47 && "type" in i47 && "vector-tile" === i47.type, n61 = this.layerInfo[t71][e68];
    n61.data = i47, n61.dataInvalidated = false, n61.waitingAgents.forAll((e69) => e69.dataArrived(this, s71)), n61.waitingAgents.clear(), this.setMemoryDirty();
  }
  dataMissing(e68, t71, i47) {
    i47.notInTilemap || console.error(`Tile ${this._lij.toString()} layer ${t71}/${e68} error ${i47}`);
    const s71 = this.layerInfo[t71][e68];
    s71.dataMissing = true, s71.waitingAgents.forAll((e69) => e69.dataMissing()), s71.waitingAgents.clear(), this.setMemoryDirty();
  }
  updateRenderData(e68, t71, i47) {
    switch (i47 && this.forEachLoadedNeighbor((i48) => i48.updateRenderData(e68, t71)), e68) {
      case A23.MAP:
        return this._updateTexture(t71);
      case A23.ELEVATION:
        return this._updateGeometry();
    }
  }
  _updateTexture(e68) {
    this.renderData && (this.resetPendingUpdate(e68 === H5.FADING ? E32.TEXTURE_NOFADING : E32.TEXTURE_FADING), this.setPendingUpdate(e68 === H5.FADING ? E32.TEXTURE_FADING : E32.TEXTURE_NOFADING));
  }
  _updateGeometry() {
    this.setPendingUpdate(E32.GEOMETRY);
    for (const e68 of this.layerInfo[A23.ELEVATION])
      e68.pendingUpdates |= E32.GEOMETRY;
  }
  invalidateLayerData(e68, t71) {
    this.layerInfo[t71][e68].invalidateSourceData(), this.restartAgents(t71);
  }
  computeElevationBounds() {
    const e68 = this._elevationBoundsMin, t71 = this._elevationBoundsMax;
    let i47 = 1 / 0, s71 = -1 / 0;
    const n61 = this.layerInfo[A23.ELEVATION];
    let r55 = true;
    for (const a61 of n61)
      null != a61.elevationBounds && (i47 = Math.min(i47, a61.elevationBounds.min), s71 = Math.max(s71, a61.elevationBounds.max), a61.elevationBounds.hasNoDataValues || (r55 = false));
    r55 && (i47 = Math.min(i47, 0), s71 = Math.max(s71, 0)), e68 === i47 && t71 === s71 || (this._elevationBoundsMin = i47, this._elevationBoundsMax = s71, this.updateRadiusAndCenter(), this._surface.setTileTreeDirty());
  }
  _updateCenter() {
    const e68 = this._elevationBoundsMin, t71 = this._elevationBoundsMax, i47 = 0.5 * (e68 + t71), s71 = this._center;
    g2(me3, this.up, i47), u4(Z(s71[oe4.MIDDLE]), this.centerAtSeaLevel, me3), g2(me3, this.up, e68), u4(s71[oe4.TOP], this.centerAtSeaLevel, me3), g2(me3, this.up, t71), u4(s71[oe4.BOTTOM], this.centerAtSeaLevel, me3);
  }
  findElevationBoundsForLayer(e68, t71) {
    const i47 = this.layerInfo[A23.ELEVATION][e68], s71 = x9(this.level), n61 = Math.max(this.elevationLevel - s71, 0), r55 = i47.elevationBounds;
    if (null != r55 && r55.level >= t71 && r55.level <= n61)
      return;
    const a61 = this._surface.layerViewByIndex(e68, A23.ELEVATION), o58 = m16(a61);
    if (!o30(this, o58, false))
      return;
    const l45 = ae5;
    let h36 = false;
    const u46 = i47.data;
    if (u46 && u46.level <= n61) {
      const e69 = i47.data;
      l45.min = e69.samplerData.data.minValue, l45.max = e69.samplerData.data.maxValue, l45.hasNoDataValues = e69.samplerData.data.hasNoDataValues, l45.level = this.level, h36 = true;
    } else {
      let t72, i48, r56 = 0;
      for (let a62 = this._parent; a62 && (!i48 || r56 < s71) && (r56 = this.elevationLevel - a62.level, t72 = i48 || t72, i48 = a62.layerInfo[A23.ELEVATION][e68].data, !(!i48 && t72 && a62.level <= n61)); a62 = a62.parent)
        ;
      i48 = i48 || t72, i48 && (i48.computeMinMaxValue(this._lij[0], this._lij[1], this._lij[2], l45), l45.min !== 1 / 0 && (l45.level = i48.level, h36 = true));
    }
    h36 && (null == i47.elevationBounds && (i47.elevationBounds = new s59()), i47.elevationBounds.copyFrom(l45));
  }
  modifyLayers(e68, t71, i47) {
    const s71 = this.layerInfo[i47];
    for (const a61 of s71)
      a61.loadingAgent && a61.loadingAgent !== r44 && (se6(a61.loadingAgent), a61.loadingAgent = null), a61.waitingAgents.clear();
    for (let a61 = 0; a61 < s71.length; ++a61)
      void 0 === e68[a61] && s71[a61].release();
    const n61 = new Array(...s71), r55 = t71.length;
    s71.length = r55;
    for (let a61 = 0; a61 < r55; a61++) {
      const e69 = t71[a61];
      s71[a61] = e69 > -1 ? n61[e69] : l38.acquire(this._surface.upsampleInfoPool);
    }
    this.setMemoryDirty();
  }
  restartAgents(e68) {
    this.renderData && (this._createOrUpdateAgents(0, e68), this.updateRenderData(e68, H5.FADING));
  }
  updateAgents(e68) {
    if (this.renderData) {
      const t71 = this.layerInfo[e68];
      for (const e69 of t71)
        e69.loadingAgent === r44 && (e69.loadingAgent = null);
      this._createOrUpdateAgents(0, e68);
    }
  }
  updateAgentSuspension() {
    for (const e68 of E30) {
      const t71 = this._isSuspended(e68);
      for (const i47 of this.layerInfo[e68])
        i47.loadingAgent && i47.loadingAgent !== r44 && (i47.loadingAgent.setSuspension(t71), i47.loadingAgent === r44 && this.updateRenderData(e68, H5.FADING));
    }
  }
  removeLayerAgent(e68, t71) {
    const i47 = this.layerInfo[t71][e68];
    i47.loadingAgent && i47.loadingAgent !== r44 && i47.loadingAgent.dispose(), i47.loadingAgent = null;
  }
  agentDone(e68, t71) {
    const i47 = this.layerInfo[t71][e68];
    i47.loadingAgent = r44, i47.data || null != i47.upsampleInfo || this._createOrUpdateAgents(e68 + 1, t71);
  }
  _hasBlendableAncestor(e68) {
    return "normal" !== e68.blendMode || p6(e68.parent) && this._hasBlendableAncestor(e68.parent);
  }
  _hasBlendModes(e68, t71, i47) {
    var _a, _b, _c;
    for (let s71 = e68; s71 < t71; ++s71) {
      const e69 = this._surface.layerViewByIndex(s71, i47);
      if (U6(e69) && "normal" !== ((_a = e69 == null ? void 0 : e69.layer) == null ? void 0 : _a.blendMode) || p6((_b = e69 == null ? void 0 : e69.layer) == null ? void 0 : _b.parent) && this._hasBlendableAncestor((_c = e69 == null ? void 0 : e69.layer) == null ? void 0 : _c.parent))
        return true;
    }
    return false;
  }
  _createOrUpdateAgents(e68, t71) {
    const i47 = this.layerInfo[t71];
    if (0 === i47.length)
      return;
    const s71 = this._isSuspended(t71);
    for (let n61 = e68; n61 < i47.length; ++n61) {
      const r55 = i47[n61];
      let a61 = false;
      const o58 = this._surface.layerViewByIndex(n61, t71), l45 = m16(o58);
      if (r55.loadingAgent ? o30(this, l45, false) ? (r55.loadingAgent !== r44 && r55.loadingAgent.setSuspension(s71), r55.loadingAgent !== r44 && (a61 = r55.loadingAgent.update())) : r55.dispose() : o30(this, l45, false) && (r55.loadingAgent = ie5(this, n61, t71, s71), a61 = r55.loadingAgent.startLoading(), a61 ? r55.loadingAgent === r44 && this.setPendingUpdate(E32.GEOMETRY) : (se6(r55.loadingAgent), r55.loadingAgent = r44)), r55.loadingAgent === r44 && this.updateRenderData(t71, H5.FADING), !this._hasBlendModes(e68, i47.length, t71) && a61 && o58.isOpaque)
        return;
    }
  }
  _isWithinExtent(e68) {
    const t71 = this.extent;
    return t71[0] >= e68[0] && e68[2] >= t71[2] && t71[1] >= e68[1] && e68[3] >= t71[3];
  }
  intersectsExtent(e68) {
    const t71 = this.extent;
    return t71[2] >= e68[0] && e68[2] >= t71[0] && t71[3] >= e68[1] && e68[3] >= t71[1];
  }
  getElevationVerticesPerSide(t71) {
    const i47 = this.elevationLevel - this.level, s71 = Math.max(this.level - t71, x9(this.level) - i47), n61 = e12(1 + (this.maxTesselation >> s71), 2, this.maxTesselation + 1), r55 = this.getDefaultVerticesPerSide();
    return Math.max(n61, r55);
  }
  get test() {
    return { cachedMemory: this._cachedMemory };
  }
  _findLIJ(e68, t71) {
    if (!e68)
      return null;
    const i47 = this.surface.rootTiles;
    if (null != i47) {
      for (const s71 of i47)
        if (le4(s71, e68)) {
          let i48 = s71, n61 = e68[0] - i48.level - 1;
          for (; n61 >= 0 && !i48.isLeaf && !t71(i48); ) {
            const t72 = e68[1] >> n61 & 1, s72 = e68[2] >> n61 & 1;
            i48 = i48.children[2 * t72 + s72], n61--;
          }
          return t71(i48) ? i48 : null;
        }
    }
    return null;
  }
  findNeighborTile(e68, t71) {
    const i47 = this._lij, s71 = this.getNeighborLIJ(i47, e68);
    return s71 ? he3(i47, s71) ? t71(this) ? this : null : this._findLIJ(s71, t71) : null;
  }
  findCorner(e68, t71) {
    const i47 = e68 === S8.NORTH_EAST ? 1 : e68 === S8.NORTH_WEST ? 0 : e68 === S8.SOUTH_WEST ? 2 : 3;
    let s71 = this;
    for (; s71.children[0] && (!t71 || !t71(s71)); )
      s71 = s71.children[i47];
    return s71;
  }
  findNeighborCornerTileExact(e68, t71) {
    var _a;
    return ((_a = this.findNeighborTile(e68, (e69) => t71(e69) || e69.level === this.level)) == null ? void 0 : _a.findCorner(G7(e68), t71)) || null;
  }
  forAllSubtreeOnSide(e68, t71) {
    const i47 = e68 === S8.NORTH ? [0, 1] : e68 === S8.NORTH_EAST ? [1] : e68 === S8.EAST ? [1, 3] : e68 === S8.SOUTH_EAST ? [3] : e68 === S8.SOUTH ? [2, 3] : e68 === S8.SOUTH_WEST ? [2] : e68 === S8.WEST ? [0, 2] : [0], s71 = (e69) => {
      const n61 = e69.children;
      !t71(e69) && n61[0] && i47.forEach((e70) => s71(n61[e70]));
    };
    s71(this);
  }
  getNeighborEdgeStartVertexIndex(e68, t71) {
    if (!t71)
      return 0;
    const i47 = this.level - t71.level;
    if (p15(!T7 || i47 >= 0), 0 === i47)
      return 0;
    const s71 = 2 ** i47, n61 = !(1 & ~e68), r55 = n61 ? 0 : 1, a61 = t71.lij[r55 + 1] * s71, o58 = this._lij[r55 + 1], l45 = o58 - a61, h36 = n61 ? s71 - 1 - l45 : l45;
    return T7 && (p15(a61 <= o58 && o58 < a61 + s71), p15(0 <= h36 && h36 < s71)), h36;
  }
  forEachLoadedNeighbor(e68) {
    const t71 = this.level, i47 = (e69) => e69.level === t71 || e69.isLoaded;
    X4.forEach((t72) => {
      const s71 = this.findNeighborTile(t72, i47);
      null != s71 && s71 !== this && s71.forAllSubtreeOnSide(B6(t72), (i48) => !!i48.isLoaded && (e68(i48, t72), true));
    }), Y6.forEach((t72) => {
      var _a;
      const s71 = (_a = this.findNeighborTile(t72, i47)) == null ? void 0 : _a.findCorner(G7(t72), (e69) => e69.isLoaded);
      p15(!s71 || de3(this, s71, t72)), (s71 == null ? void 0 : s71.isLoaded) && e68(s71, t72);
    });
  }
  getNeighborLIJ(e68, t71) {
    const i47 = Q3(t71) ? -1 : K4(t71) ? 1 : 0, s71 = z7(t71) ? -1 : J2(t71) ? 1 : 0, n61 = [e68[0], e68[1] + i47, e68[2] + s71];
    return n61[1] < 0 ? null : this.surface.isGlobal ? this.wrapLIJ(n61) : n61[2] < 0 ? null : n61;
  }
  wrapLIJ(e68) {
    return !e68 || e68[1] < 0 || e68[1] >= 2 ** e68[0] ? null : this.surface.wrapEastWest(e68);
  }
  get westNeighborWestExtent() {
    return this.extent[0] * (this.isWestEnd ? -1 : 1);
  }
  get eastNeighborEastExtent() {
    return this.extent[2] * (this.isEastEnd ? -1 : 1);
  }
  get isEastEnd() {
    return this._lij[2] === this.surface.lijEastEnd(this.level) - 1;
  }
  get isWestEnd() {
    return 0 === this._lij[2];
  }
  get isNorthEnd() {
    return 0 === this._lij[1];
  }
  get isSouthEnd() {
    const e68 = this.surface.extent, t71 = (e68 == null ? void 0 : e68[1]) ?? null;
    return null != t71 && this.extent[1] + e10() >= t71;
  }
  checkGeometryWaterproofness() {
    var _a;
    s32 && (p15(this.isLoaded), (_a = this.renderData) == null ? void 0 : _a.checkGeometryWaterproofness());
  }
  shouldHaveNeighbor(e68) {
    const t71 = this.extent, i47 = this.surface.rootTilesExtent, s71 = 0.25 * (t71[2] - t71[0]);
    if (Q3(e68) && t71[3] + s71 >= i47[3])
      return false;
    if (K4(e68) && t71[1] - s71 <= i47[1])
      return false;
    const n61 = this.surface.isGlobal;
    return !(!n61 && z7(e68) && t71[0] - s71 <= i47[0]) && !(!n61 && J2(e68) && t71[2] + s71 >= i47[2]);
  }
  updateDistanceToPOI(e68) {
    const t71 = this._lastPOI;
    if (this.distanceToPOI >= 0 && t71[0] === e68[0] && t71[1] === e68[1] && t71[2] === e68[2])
      return;
    r5(this._lastPOI, e68);
    const i47 = this._center[oe4.MIDDLE], s71 = e68[0] - i47[0], n61 = e68[1] - i47[1], r55 = e68[2] - i47[2];
    this.distanceToPOI = s71 * s71 + n61 * n61 + r55 * r55;
  }
};
function ie5(e68, t71, i47, s71) {
  const n61 = i47 === A23.ELEVATION ? re4.acquire() : ne5.acquire();
  return n61.init(e68, t71, i47, s71), n61;
}
function se6(e68) {
  e68.dispose(), e68 instanceof l37 ? re4.release(e68) : e68 instanceof t56 && ne5.release(e68);
}
var ne5 = new e4(t56);
var re4 = new e4(l37);
var ae5 = new s59();
var oe4;
function le4(e68, t71) {
  const i47 = e68.lij, s71 = t71[0] - i47[0];
  return !(s71 < 0) && (t71[1] >> s71 === i47[1] && t71[2] >> s71 === i47[2]);
}
function he3(e68, t71) {
  return e68[0] === t71[0] && e68[1] === t71[1] && e68[2] === t71[2];
}
function ue3(e68, t71, i47) {
  if (null == e68 || null == t71)
    return false;
  if (0 === e68.level && 0 === t71.level) {
    if (e68.isEastEnd && t71.isWestEnd && i47 === S8.EAST)
      return true;
    if (e68.isWestEnd && t71.isEastEnd && i47 === S8.WEST)
      return true;
  }
  const s71 = Math.max(1e-6 * (e68.extent[2] - e68.extent[0]), 1);
  switch (i47) {
    case S8.NORTH:
      return D4(e68.extent[3], t71.extent[1], s71);
    case S8.SOUTH:
      return D4(e68.extent[1], t71.extent[3], s71);
    case S8.EAST:
      return D4(e68.extent[2], t71.extent[0], s71) || D4(e68.extent[2], -t71.extent[0], s71);
    case S8.WEST:
      return D4(e68.extent[0], t71.extent[2], s71) || D4(e68.extent[0], -t71.extent[2], s71);
  }
}
function de3(e68, t71, i47) {
  return null != e68 && null != t71 && t71 !== e68 && (e68.level >= t71.level ? ce5(e68, t71, i47) : ce5(t71, e68, G7(i47)));
}
function ce5(e68, t71, i47) {
  p15(e68.level >= t71.level);
  const s71 = P6(i47), n61 = q5(i47), r55 = e68.extent, a61 = t71.extent, o58 = [s71 ? r55[0] : r55[2], n61 ? r55[3] : r55[1]], l45 = [s71 ? a61[2] : a61[0], n61 ? a61[1] : a61[3]], h36 = 1e-5 * (r55[2] - r55[0]), u46 = D4(o58[0], l45[0], h36) || e68.surface.isGlobal && D4(o58[0], -l45[0], h36), d44 = D4(o58[1], l45[1], h36);
  if (u46 && d44)
    return true;
  if (e68.level === t71.level)
    return p15(false), false;
  if (!u46 && !d44)
    return p15(false), false;
  const c44 = u46 ? ge2(a61[1], a61[3], r55[1], r55[3], h36) : ge2(a61[0], a61[2], r55[0], r55[2], h36);
  return p15(c44), c44;
}
function ge2(e68, t71, i47, s71, n61) {
  return e68 - n61 <= i47 && i47 <= s71 && s71 <= t71 + n61;
}
!function(e68) {
  e68[e68.TOP = 0] = "TOP", e68[e68.MIDDLE = 1] = "MIDDLE", e68[e68.BOTTOM = 2] = "BOTTOM";
}(oe4 || (oe4 = {}));
var pe3 = n7();
var fe2 = n7();
var _e3 = n7();
var me3 = n7();

// node_modules/@arcgis/core/views/3d/terrain/TileOverlayData.js
var t58 = class {
  constructor() {
    this._scales = r6(-1, -1, -1, -1), this._offsets = r6(-1, -1, -1, -1);
  }
  clear() {
    this._scales[0] = this._scales[1] = this._scales[2] = this._scales[3] = -1, this._offsets[0] = this._offsets[1] = this._offsets[2] = this._offsets[3] = -1;
  }
  setScale(s71, t71, e68) {
    this._scales[2 * s71] = t71, this._scales[2 * s71 + 1] = e68;
  }
  setOffset(s71, t71, e68) {
    this._offsets[2 * s71] = t71, this._offsets[2 * s71 + 1] = e68;
  }
  get scales() {
    return this._scales;
  }
  get offsets() {
    return this._offsets;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/TerrainTechnique.js
var g19 = class _g extends r15 {
  constructor() {
    super(...arguments), this.useStencil = false;
  }
  initializeConfiguration(i47, r55) {
    r55.spherical = i47.viewingMode === l8.Global;
  }
  initializeProgram(e68) {
    return new r16(e68.rctx, _g.shader.get().build(this.configuration), f37);
  }
  initializePipeline() {
    return this._stencilPipelineState = this._createPipeline(true), this._createPipeline(false);
  }
  _createPipeline(e68) {
    const i47 = this.configuration, r55 = i47.backfaceCullingEnabled && !i47.renderOccluded;
    return S7({ blending: i47.renderOccluded ? s22(R2.ONE, R2.ONE_MINUS_SRC_ALPHA) : null, culling: r55 ? r14 : null, depthTest: i47.renderOccluded ? null : { func: O8.LESS }, depthWrite: i47.renderOccluded ? null : o17, colorWrite: _8, stencilTest: e68 ? t18(N2.IntegratedMeshMaskExcluded) : null });
  }
  getPipeline() {
    return this.useStencil ? this._stencilPipelineState : super.getPipeline();
  }
};
g19.shader = new t17(E19, () => import("./Terrain.glsl-XOHEPB5L.js"));
var f37 = /* @__PURE__ */ new Map([[e18.POSITION, 0], [e18.UV0, 1], [e18.NORMALCOMPRESSED, 2]]);

// node_modules/@arcgis/core/views/3d/terrain/PatchRenderData.js
var G12 = class {
  constructor() {
    this.geometry = new o47(), this.intersectionData = null, this.geometryState = null, this._vao = null, this._texture = null, this._textureRef = new i42(() => this.tile.surface.fadeDuration), this.overlay = new t58(), this._localOrigin = null, this._geometryStateChangedSinceLastUpdate = true, this._hasGeometry = false, this._modifiedFlags = 0;
  }
  get tile() {
    return this._tile;
  }
  get localOrigin() {
    return this._localOrigin;
  }
  init(e68, t71) {
    this.clear(), this._tile = e68, this.geometry.reset(), this.intersectionData = null, this.geometryState = new l35(), this._localOrigin = t71, this.overlay.clear();
  }
  clear() {
    this.releaseGeometry(), this.releaseTexture(), this._textureRef.clear(), this._tile = null, this.intersectionData = null, this.geometryState = null;
  }
  updateGeometryIfNeeded(e68) {
    if ((!this._vao || this._geometryStateChangedSinceLastUpdate || this.wireframeChanged || this.clippingAreaChanged || this.samplerDataChanged || this.numVerticesPerSideChanged || this.dirtyCorners || this.dirtyEdgeResolutions || this.dirtyEdges) && (this._updateGeometry(e68), this._geometryStateChangedSinceLastUpdate = false), T7 && this.tile.intersectsClippingArea)
      for (let t71 = 0; t71 < 4; ++t71)
        p15(this.geometry.getEdgeCount(t71) === this.geometryState.edgeResolutions[t71] + 1);
  }
  _calculateEdgeResolution(e68, t71) {
    var _a;
    const r55 = this.tile, i47 = this.geometryState.numVerticesPerSide - 1;
    if (!r55.surface.isGlobal) {
      const t72 = r55.surface.extent;
      if (null != t72 && (0 === e68 && r55.extent[3] > t72[3] || 1 === e68 && r55.extent[2] > t72[2] || 2 === e68 && r55.extent[1] < t72[1] || 3 === e68 && r55.extent[0] < t72[0]))
        return i47;
    }
    const s71 = r55.level, o58 = X4[e68];
    if (!t71)
      return p15(null == ((_a = r55.surface) == null ? void 0 : _a.rootTiles) || r55.surface.updatingRootTiles || !r55.shouldHaveNeighbor(o58)), i47;
    if (t71.isLoaded) {
      const r56 = t71, o59 = r56.renderData.geometryState, a62 = s71 - r56.level;
      if (p15(a62 >= 0), 0 === a62) {
        const e69 = o59.numVerticesPerSide - 1;
        return Math.max(e69, i47);
      }
      const n61 = 2 ** a62, l45 = o59.edgeResolutions[(e68 + 2) % 4] / n61;
      return Math.max(1, l45);
    }
    p15(!t71.isLeaf);
    let a61 = i47;
    return t71.forAllSubtreeOnSide(B6(o58), (e69) => e69 === r55 || (e69.isLoaded ? (a61 = Math.max(a61, 2 ** (e69.level - s71)), true) : (p15(!e69.isLeaf), false))), a61;
  }
  updateNeighborData() {
    var _a;
    const e68 = this.tile;
    if (!e68.intersectsClippingArea)
      return;
    const r55 = e68.renderData.geometryState, i47 = (t71) => (t71.isLoaded || t71.level === e68.level) && (t71 == null ? void 0 : t71.intersectsClippingArea), s71 = r55.edgePeerNeighbors, o58 = r55.edgePeerNeighborSamplerVersions;
    for (let a61 = 0; a61 < 4; ++a61) {
      const n61 = e68.findNeighborTile(X4[a61], i47), l45 = W7(e68, n61), g23 = ((_a = l45 == null ? void 0 : l45.renderData) == null ? void 0 : _a.geometryState.samplerDataVersion) ?? -1, d44 = s71[a61], h36 = l45 !== W7(e68, d44), m46 = o58[a61] !== g23;
      T7 && n61 && (p15(e68.level >= n61.level), p15(e68.level - n61.level <= y8)), s71[a61] = n61, (h36 || m46) && (o58[a61] = g23, this._markEdgeDirty(a61));
      const u46 = r55.edgeResolutions[a61], c44 = this._calculateEdgeResolution(a61, n61);
      p15(a6(c44)), p15(c44 >= 1), r55.edgeResolutions[a61] = c44, u46 !== c44 && this._markEdgeResolutionDirty(a61);
    }
    for (let t71 = 0; t71 < 4; ++t71) {
      const o59 = e68.findNeighborTile(Y6[t71], i47);
      r55.cornerPeerNeighbors[t71] = o59;
      const a61 = W7(e68, s71[t71]), n61 = W7(e68, s71[(t71 + 1) % 4]), l45 = W7(e68, o59);
      B12[t71] = l45, B12[(t71 + 1) % 4] = n61, B12[(t71 + 2) % 4] = e68, B12[(t71 + 3) % 4] = a61, p15(B12.some((t72) => (t72 == null ? void 0 : t72.isLoaded) || t72 === e68));
      const g23 = B12.reduce((e69, t72) => Math.min(e69, (t72 == null ? void 0 : t72.level) ?? 1 / 0), 1 / 0);
      B12.forEach((e69, t72) => {
        e69 && (e69 == null ? void 0 : e69.level) > g23 && (B12[t72] = null);
      }), p15(B12.some((t72) => (t72 == null ? void 0 : t72.isLoaded) || t72 === e68));
      const d44 = r55.cornerNeighborCornerTiles, h36 = r55.cornerNeighborCornerTileSamplerVersions;
      for (let e69 = 0; e69 < 4; ++e69) {
        const r56 = B12[e69], i48 = (r56 == null ? void 0 : r56.renderData.geometryState.samplerDataVersion) ?? -1, s72 = 4 * t71 + e69, o60 = d44[s72] !== r56, a62 = !o60 && h36[s72] !== i48;
        (o60 || a62) && (d44[s72] = r56, h36[s72] = i48, this._markCornerDirty(t71));
      }
      T7 && p15(ee5.some((r56) => {
        var _a2;
        return ((_a2 = d44[4 * t71 + r56]) == null ? void 0 : _a2.isLoaded) || d44[4 * t71 + r56] === e68;
      }));
    }
    T7 && p15(this.geometryState.edgeResolutions.every((e69) => e69 > 0));
    for (let t71 = 0; t71 < 4; ++t71)
      B12[t71] = null;
  }
  _updateGeometry(e68) {
    if (!this.tile.intersectsClippingArea)
      return;
    T7 && p15(!this.tile.intersectsClippingArea || this.geometryState.edgeResolutions.every((e69) => e69 > 0)), this.intersectionData = null;
    const { tile: t71, _vao: r55, geometry: i47, geometryState: s71 } = this, o58 = !r55 || !{ geometry: i47 } || this.wireframeChanged || this.samplerDataChanged || this.clippingAreaChanged || this.numVerticesPerSideChanged, a61 = 0 !== this.dirtyEdgeResolutions, n61 = s71.edgeResolutions.reduce((e69, t72) => e69 + t72 + 1, 0), l45 = o58 || a61 && n61 > ((i47 == null ? void 0 : i47.maxEdgeVertexCount) ?? 0), g23 = !l45 && a61, d44 = !g23 && (0 !== this.dirtyEdges || a61), h36 = !d44 && 0 !== this.dirtyCorners;
    l45 ? (this.releaseGeometry(), this._createGeometry(e68)) : g23 ? t71.updateEdgeElevationsAndResolutions() : d44 || h36 ? t71.updateEdgeElevations() : h36 ? t71.updateCornerElevations() : console.warn("Update for no reason?"), this._modifiedFlags = 0;
  }
  get hasGeometry() {
    return this._hasGeometry;
  }
  releaseGeometry() {
    return this._hasGeometry = false, this.intersectionData = null, !!this._vao && (this._vao = r2(this._vao), this.geometry.release(), true);
  }
  ensureTexture(e68, t71, r55) {
    const i47 = t71 ? G4.RGBA : G4.RGB;
    return null == this._texture || this._texture.descriptor.width === e68 && this._texture.descriptor.pixelFormat === i47 || this.releaseTexture(), null == this._texture && (this._texture = r55(), this.tile.setMemoryDirty()), this._texture;
  }
  releaseTexture() {
    null != this._texture && (this._texture.release(), this._texture = null, this.tile.setMemoryDirty());
  }
  get numVerticesPerSideChanged() {
    return !!(this._modifiedFlags & q14);
  }
  get samplerDataChanged() {
    return !!(this._modifiedFlags & z19);
  }
  get clippingAreaChanged() {
    return !!(this._modifiedFlags & J9);
  }
  get wireframeChanged() {
    return !!(this._modifiedFlags & K11);
  }
  get dirtyEdges() {
    return this._modifiedFlags >> Q13 & 15;
  }
  get dirtyCorners() {
    return this._modifiedFlags >> Y12 & 15;
  }
  get dirtyEdgeResolutions() {
    return this._modifiedFlags >> Z9 & 15;
  }
  _markCornerDirty(e68) {
    const t71 = 1 << e68 << Y12;
    this._modifiedFlags |= t71;
  }
  _markEdgeDirty(e68) {
    const t71 = 1 << e68 << Q13;
    this._modifiedFlags |= t71, this._markCornerDirty((e68 + 0) % 4), this._markCornerDirty((e68 + 3) % 4);
  }
  _markEdgeResolutionDirty(e68) {
    const t71 = 1 << e68 << Z9;
    this._modifiedFlags |= t71, this._markEdgeDirty(e68);
  }
  _markAllEdgesAndCornersDirty() {
    this._modifiedFlags |= 15 << Y12 | 15 << Q13 | 15 << Z9;
  }
  updateGeometryState() {
    const t71 = this._getElevationInfo(), r55 = this.tile, i47 = t71.samplerData ? r55.getElevationVerticesPerSide(t71.maxTileLevel) : r55.getDefaultVerticesPerSide(), s71 = Math.max(i47, 5);
    let o58 = r55.clippingArea;
    r55.intersectsClippingArea && !r55.isWithinClippingArea || (o58 = null);
    const a61 = this.geometryState;
    let n61 = false;
    a61.numVerticesPerSide !== s71 && (this._modifiedFlags |= 1, a61.numVerticesPerSide = s71, a61.samplerDataVersion++, n61 = true), t71.changed && (this._modifiedFlags |= 2, a61.samplerData = t71.samplerData, a61.samplerDataVersion++, n61 = true), h(a61.clippingArea, o58) || (this._modifiedFlags = 4, a61.clippingArea = o58, n61 = true);
    const l45 = r55.surface.wireframe;
    return a61.wireframe !== l45 && (this._modifiedFlags = 8, a61.wireframe = l45, n61 = true), this._geometryStateChangedSinceLastUpdate || (this._geometryStateChangedSinceLastUpdate = n61), n61 && this._markAllEdgesAndCornersDirty(), this._hasGeometry = true, this._geometryStateChangedSinceLastUpdate;
  }
  _createGeometry(e68) {
    this.tile.createGeometry();
    const t71 = this.geometry.vertexAttributes, r55 = this.geometry.indices, i47 = e68.gl;
    this._vao = new r27(e68, f37, { geometry: t12(t71.layout) }, { geometry: h7.createVertex(e68, i47.STATIC_DRAW, t71.buffer) }, h7.createIndex(e68, i47.STATIC_DRAW, r55)), this._hasGeometry = true;
  }
  get vao() {
    return this._vao;
  }
  setTextureReference(e68, t71 = n50.Immediate) {
    null != e68 && e68.texture !== this._texture && this.releaseTexture(), this._textureRef.push(e68, t71);
  }
  get textureReference() {
    return this._textureRef.current;
  }
  get nextTextureReference() {
    return this._textureRef.next;
  }
  get textureFadeFactor() {
    return this._textureRef.fadeFactor;
  }
  get textureIsFading() {
    return this._textureRef.isFading;
  }
  _getElevationInfo() {
    const e68 = this.geometryState.samplerData, t71 = this.tile.layerInfo[A23.ELEVATION], r55 = t71.length, i47 = new Array(r55);
    let s71 = 0, o58 = 0, a61 = false;
    for (let g23 = 0; g23 < r55; g23++) {
      const r56 = t71[g23];
      if (null != r56.upsampleInfo) {
        const t72 = r56.upsampleInfo.tile, n62 = t72.layerInfo[A23.ELEVATION][g23].data, l46 = n62 && n62.samplerData;
        e68 && e68[s71] === l46 || (a61 = true), i47[s71++] = l46, o58 = Math.max(o58, t72.lij[0]);
      } else if (r56.data) {
        const t72 = this.tile.surface.layerViewByIndex(g23, A23.ELEVATION);
        if (o30(this.tile, t72.layer, false)) {
          const t73 = r56.data;
          e68 && e68[s71] === t73.samplerData || (a61 = true), i47[s71++] = t73.samplerData, o58 = this.tile.level;
        }
      }
    }
    null != e68 && e68.length !== s71 && (a61 = true);
    const n61 = s71 > 0, l45 = n61 ? i47 : null;
    return n61 && (i47.length = s71), { changed: a61, samplerData: l45, maxTileLevel: o58 };
  }
  get estimatedGeometryMemoryUsage() {
    var _a, _b, _c;
    const e68 = ((_a = this.intersectionData) == null ? void 0 : _a.estimatedMemoryUsage) ?? 0;
    return (((_b = this.geometry.indices) == null ? void 0 : _b.byteLength) ?? 0) + (((_c = this.geometry.vertexAttributes) == null ? void 0 : _c.byteLength) ?? 0) + e68;
  }
  get texture() {
    return this._texture;
  }
  get test() {
    return { hasTexture: null != this._texture };
  }
  checkGeometryWaterproofness() {
    if (!T7)
      return;
    const e68 = this.tile;
    if (!e68.isLoaded || !e68.intersectsClippingArea || 0 === e68.level)
      return void p15(e68 == null ? void 0 : e68.isLoaded);
    const r55 = e68.surface.extent;
    if (null != r55 && !e68.intersectsExtent(r55))
      return;
    const f48 = X4.map((t71, i47) => null != r55 && (i47 < 2 ? -1 : 1) * (e68.extent[3 - i47] - r55[3 - i47]) < 0), p48 = e68.level;
    p15(0 === this.dirtyCorners), p15(0 === this.dirtyEdges), p15(0 === this.dirtyEdgeResolutions), p15(!this.numVerticesPerSideChanged), p15(!this.samplerDataChanged), p15(!this.clippingAreaChanged), p15(!this.wireframeChanged);
    const _26 = Y6.map((t71) => e68.findNeighborCornerTileExact(t71, (t72) => !t72.intersectsClippingArea || t72.isLoaded || t72.level === e68.level) ?? null).map((e69) => (e69 == null ? void 0 : e69.intersectsClippingArea) ? e69 : null), x31 = this.geometryState;
    for (let t71 = 0; t71 < 4; ++t71) {
      const r56 = x31.cornerPeerNeighbors[t71], i47 = _26[t71];
      p15(i47 === r56, `Tile[${e68.lij}].corner[${t71}] out of date: cur=[${r56 == null ? void 0 : r56.lij}] exp=[${i47 == null ? void 0 : i47.lij}]`);
    }
    X4.forEach((r56, _27) => {
      if (f48[_27])
        return;
      const x32 = e68.findNeighborTile(r56, (e69) => (e69.level === p48 || (e69 == null ? void 0 : e69.isLoaded)) && (e69 == null ? void 0 : e69.intersectsClippingArea));
      if (!x32) {
        const t71 = !e68.surface.updatingRootTiles && null != e68.surface.rootTiles && e68.surface.rootTiles.length > 0 && e68.shouldHaveNeighbor(r56);
        return void p15(!t71);
      }
      p15(x32.isLoaded || x32.level === e68.level), p15(x32 === this.geometryState.edgePeerNeighbors[_27]);
      const v32 = p48 - x32.level;
      if (!x32.isLoaded)
        return p15(!x32.isLeaf), void p15(0 === v32);
      const E38 = x32.renderData;
      p15(ue3(e68, x32, r56)), p15(v32 >= 0);
      const S24 = 2 ** v32;
      if (v32 < 0)
        return void p15(false);
      const C28 = e68.renderData, D19 = C28.geometry, j26 = C28.localOrigin, A32 = D19.getEdgeCount(_27), R18 = D19.numVerticesPerSide - 1, w27 = E38.geometry;
      if (!w27)
        return void p15(false);
      const L24 = E38.localOrigin, N20 = this.geometryState.edgePeerNeighbors[_27];
      if (N20 == null ? void 0 : N20.isLoaded) {
        const e69 = N20.renderData;
        p15(C28.geometryState.edgePeerNeighborSamplerVersions[_27] === e69.geometryState.samplerDataVersion), p15(this.geometryState.edgePeerNeighborSamplerVersions[_27] === e69.geometryState.samplerDataVersion);
      }
      const P20 = (_27 + 2) % 4, F20 = w27.getEdgeCount(P20), G19 = A32 - 1, B18 = F20 - 1;
      p15(G19 * S24 === B18, `Tile[${e68.lij}]:e${_27},res=${G19} edgeRes mismatch with Neighbor[${x32.lij}]:e${P20},res=${B18} (expected:${G19 * S24})`);
      const W11 = e68.extent, q21 = r56 === S8.NORTH || r56 === S8.SOUTH, z24 = F20 - 1, J12 = z24 >> v32, K14 = A32 - 1;
      if (J12 < 1)
        return void p15(1 === K14);
      p15(J12 === K14), p15(a6(J12));
      const Q16 = w27.numVerticesPerSide - 1;
      p15(v32 > 0 || J12 === Math.max(Q16, R18));
      const Y14 = e68.getNeighborEdgeStartVertexIndex(_27, x32);
      p15(0 <= Y14 && Y14 < S24);
      const Z11 = Y14 * J12;
      p15(0 <= Z11 && Z11 <= z24 - J12);
      let ee7 = 0, te6 = Z11;
      D19.getEdgeVertexPosition(_27, O23, j26, 0), D19.getEdgeVertexPosition(_27, I22, j26, A32 - 1);
      const re6 = x2(O23, I22), ie7 = Math.max(X10, 1e-4 * re6);
      for (let t71 = 0; t71 <= J12; ++t71) {
        D19.getEdgeVertexPosition(_27, O23, j26, ee7), w27.getEdgeVertexPosition(P20, I22, L24, te6);
        const i47 = t71 / J12, f49 = q21 ? W11[0] + i47 * (W11[2] - W11[0]) : r56 === S8.WEST ? W11[0] : W11[2], p49 = q21 ? r56 === S8.SOUTH ? W11[1] : W11[3] : W11[1] + i47 * (W11[3] - W11[1]), v33 = e68.surface.extent;
        if (null == v33 || w3(v33, f49, p49)) {
          const t72 = U2(O23, I22), r57 = Y(O23) - s5.radius, i48 = Y(I22) - s5.radius, u46 = t72 < ie7;
          if (!u46) {
            console.warn(`Tile edge vertex position mismatch: between [${e68.lij}].edge${_27}[${ee7}/${A32}] and [${x32.lij}].edge${P20}[${te6}/${F20}]`), null != v33 && console.warn("  surface extent= ", v33, " x,y=", f49, ",", p49);
            const s71 = n7();
            e11(s71, C28.localOrigin, E38.localOrigin), Y(s71) > 0 && console.warn(`   localOrigins: ${C28.localOrigin} vs ${E38.localOrigin} d=${Y(s71)} [${s71}]`);
            (() => {
              const t73 = t5(O23), r58 = t5(I22);
              e68.updateEdgeElevations(), x32.updateEdgeElevations(), D19.getEdgeVertexPosition(_27, O23, j26, ee7), w27.getEdgeVertexPosition(P20, I22, L24, te6);
              const i49 = n7();
              K(i49, O23, t73), Y(i49) > 0 && console.warn(`  XXX Tile[${e68.lij}] edge out of date: ${t73} vs ${O23} d=${Y(i49)} [${i49}]`), K(i49, I22, r58), Y(i49) > 0 && console.warn(`  XXX Neighbor[${x32.lij}] edge out of date: ${r58} vs ${I22} d=${Y(i49)} [${i49}]`);
            })();
            const n61 = D19.getEdgeCount(_27), l45 = w27.getEdgeCount(F20);
            p15(u46, `Mismatch in tile [${e68.lij}].edge[${_27}][${ee7}/${n61}] vs neighbor [${x32.lij}].edge[${P20}][${te6}/${l45}] ${F5(O23)} vs ${F5(I22)}  dist=${t72} h(t|n|d)=${r57}|${i48}|${i48 - r57}`);
          }
          D19.getEdgeNormal(_27, M13, ee7), w27.getEdgeNormal(P20, U17, te6), z2(k19, M13), z2(H16, U17);
          const y26 = P3(k19, H16), S25 = 1 - y26 < 0.01 || false || e68 === x32;
          if (!S25) {
            const t73 = n7();
            K(t73, M13, U17);
            const r58 = () => `Mismatch in tile edge normal ${k4(e68.lij)} (${ee7}/${A32 - 1}) edge ${_27} vs neighbor ${k4(x32.lij)}  (${te6}/${F20 - 1}) nedge ${P20} :${F5(M13)} vs ${F5(U17)}  dot = ${y26} : ${F5(t73)}`;
            console.warn("Mismatch in tile edge normal: ", r58());
            {
              e68.updateEdgeElevations(), x32.updateEdgeElevations();
              const t74 = n7(), r59 = n7();
              D19.getEdgeNormal(_27, t74, ee7), w27.getEdgeNormal(P20, r59, te6), H(M13, t74) || console.warn("Missing update in tile normal: ", F5(M13), " => ", F5(t74)), H(U17, r59) || console.warn("Missing update in neighbor normal: ", F5(U17), " => ", F5(r59));
            }
            p15(S25, r58());
          }
        }
        ee7 += 1, te6 += 1;
      }
    });
  }
};
var O23 = n7();
var I22 = n7();
var M13 = n7();
var U17 = n7();
var k19 = n7();
var H16 = n7();
var X10 = 1;
var B12 = [null, null, null, null];
function W7(e68, t71) {
  return (t71 == null ? void 0 : t71.isLoaded) || t71 === e68 ? t71 : null;
}
var q14 = 1;
var z19 = 2;
var J9 = 4;
var K11 = 8;
var Q13 = 4;
var Y12 = 8;
var Z9 = 12;
var ee5 = [0, 1, 2, 3];

// node_modules/@arcgis/core/views/3d/terrain/PatchGeometryFactory.js
var M14 = 65536;
function S18(e68, t71) {
  const { tile: o58, geometry: s71, geometryState: i47 } = e68, { extentInRadians: a61, surface: c44 } = o58, { isWebMercator: l45, renderer: u46 } = c44, { numVerticesPerSide: d44, wireframe: f48 } = i47, m46 = d44 - 1, g23 = (d44 - 2) ** 2, p48 = l45 && (t71 === O12.HAS_SOUTH_POLE || t71 === O12.HAS_BOTH_POLES), x31 = l45 && (t71 === O12.HAS_NORTH_POLE || t71 === O12.HAS_BOTH_POLES), h36 = ((p48 ? 1 : 0) + (x31 ? 1 : 0)) * pe4 * d44, M21 = fe3(i47), S24 = g23 + h36 + 4 * M21, L24 = u46.tileGeometryCache.acquire(S24);
  s71.numVerticesPerSide = d44, s71.vertexAttributes = L24, s71.maxEdgeVertexCount = M21;
  const { boundingBox: B18 } = s71;
  P4(B18);
  const I27 = O24(e68);
  re5.update(m46, a61, I27), v25(e68), s71.poleVerticesStartIndex = g23;
  const b22 = y21(e68, p48, x31);
  s71.edgeVerticesStartIndex = g23 + h36, X11(e68), V12(e68), W8(s71, b22, f48), e68.intersectionData = null;
}
function y21(e68, t71, n61) {
  const { tile: o58, localOrigin: s71, geometry: r55 } = e68, { extent: i47, ellipsoid: c44 } = o58, { boundingBox: l45, numVerticesPerSide: u46, vertexAttributes: d44, poleVerticesStartIndex: f48 } = r55, m46 = u46 - 1, g23 = s71[0], p48 = s71[1], x31 = s71[2], M21 = c44.radius, S24 = i47[1], y26 = i47[3], v32 = [];
  let L24 = f48;
  const B18 = (e69, t72) => {
    const n62 = t72 * u46;
    de4(-g23, -p48, e69 * M21 - x31, l45), v32.push(new oe5(1 === e69, n62, 1 === e69 ? 0 : 2, L24, pe4));
    const o59 = P14(-1 === e69 ? S24 : y26, M21), s72 = e69 * Math.PI / 2 - o59, r56 = 0.99 * (1 === e69 ? 1 : -1), i48 = M21 + 0, { position: c45, uv0: f49 } = d44, { typedBuffer: B19, typedBufferStride: I27 } = d44.normalCompressed;
    for (let u47 = 1; u47 <= pe4; ++u47) {
      const e70 = o59 + s72 * (u47 / pe4), t73 = Math.cos(e70), n63 = Math.sin(e70);
      for (let o60 = 0; o60 <= m46; o60++) {
        const e71 = o60 / m46, s73 = re5.sinLonLUT[o60], u48 = re5.cosLonLUT[o60] * t73, d45 = s73 * t73, M22 = n63, S25 = u48 * i48 - g23, y27 = d45 * i48 - p48, v33 = M22 * i48 - x31;
        de4(S25, y27, v33, l45), c45.setValues(L24, S25, y27, v33), u37(f49, L24, e71, r56), s16(B19, L24, u48, d45, M22, I27), ++L24;
      }
    }
  };
  return t71 && B18(-1, 0), n61 && B18(1, m46), v32;
}
function v25(e68) {
  const { tile: t71 } = e68;
  if (!t71.intersectsClippingArea)
    return;
  const { geometry: n61, geometryState: o58, localOrigin: r55 } = e68, { numVerticesPerSide: i47, samplerData: c44 } = o58, l45 = i47 - 2, u46 = i47 - 1, { vertexAttributes: d44, boundingBox: f48 } = n61, m46 = d44.position, g23 = d44.uv0, { typedBuffer: p48, typedBufferStride: x31 } = d44.normalCompressed, { extent: M21 } = t71, S24 = M21[0], y26 = M21[2], v32 = M21[1], L24 = M21[3], B18 = t71.ellipsoid.radius, I27 = r55[0], V17 = r55[1], b22 = r55[2], C28 = m46.typedBuffer, P20 = m46.typedBufferStride, A32 = 1 / u46;
  let E38 = 0;
  if (1 <= l45) {
    const e69 = A32, t72 = v32 * (1 - e69) + L24 * e69, n62 = re5.sinLatLUT[1], o59 = re5.cosLatLUT[1];
    for (let r56 = 1; r56 <= l45; r56++) {
      const i48 = r56 * A32, l46 = S24 * (1 - i48) + y26 * i48, u47 = re5.sinLonLUT[r56], d45 = re5.cosLonLUT[r56], m47 = B18 + e53(l46, t72, c44), p49 = m47 * d45 * o59 - I27, x32 = m47 * u47 * o59 - V17, h36 = m47 * n62 - b22;
      de4(p49, x32, h36, f48);
      const M22 = (r56 - 1) * P20;
      C28[M22] = p49, C28[M22 + 1] = x32, C28[M22 + 2] = h36, u37(g23, r56 - 1, i48, e69);
    }
  }
  for (let O32 = 1; O32 <= l45; O32++) {
    const e69 = O32 * A32, t72 = v32 * (1 - e69) + L24 * e69, n62 = re5.sinLatLUT[O32], o59 = re5.cosLatLUT[O32], r56 = O32 + 1, i48 = r56 * A32, d45 = v32 * (1 - i48) + L24 * i48, m47 = re5.sinLatLUT[r56], M22 = re5.cosLatLUT[r56], T21 = re5.sinLonLUT[0], D19 = re5.cosLonLUT[0], R18 = B18 + e53(S24, t72, c44);
    let U23 = D19 * o59 * R18 - I27, w27 = T21 * o59 * R18 - V17, N20 = n62 * R18 - b22;
    const j26 = E38 * P20;
    let F20 = C28[j26], H22 = C28[j26 + 1], q21 = C28[j26 + 2];
    for (let L25 = 1; L25 <= l45; L25++) {
      const e70 = L25 * A32, r57 = S24 * (1 - e70) + y26 * e70, T22 = re5.sinLonLUT[L25], D20 = re5.cosLonLUT[L25];
      let R19 = 0, j27 = 0, _26 = 0;
      if (L25 < l45) {
        const e71 = (E38 + 1) * P20;
        R19 = C28[e71], j27 = C28[e71 + 1], _26 = C28[e71 + 2];
      } else {
        const e71 = re5.sinLonLUT[u46], r58 = re5.cosLonLUT[u46], i49 = B18 + e53(y26, t72, c44);
        R19 = r58 * o59 * i49 - I27, j27 = e71 * o59 * i49 - V17, _26 = n62 * i49 - b22;
      }
      const W11 = U23, G19 = w27, k26 = N20;
      U23 = F20, w27 = H22, N20 = q21, F20 = R19, H22 = j27, q21 = _26;
      const z24 = R19 - W11, J12 = j27 - G19, K14 = _26 - k26;
      let Q16 = 0, X13 = 0, Y14 = 0;
      if (O32 > 1) {
        const e71 = (E38 - l45) * P20;
        Q16 = C28[e71], X13 = C28[e71 + 1], Y14 = C28[e71 + 2];
      } else {
        const e71 = re5.sinLatLUT[0], t73 = re5.cosLatLUT[0], n63 = B18 + e53(r57, v32, c44);
        Q16 = D20 * t73 * n63 - I27, X13 = T22 * t73 * n63 - V17, Y14 = e71 * n63 - b22;
      }
      const Z11 = B18 + e53(r57, d45, c44), $10 = D20 * M22 * Z11 - I27, ee7 = T22 * M22 * Z11 - V17, te6 = m47 * Z11 - b22;
      if (O32 < l45) {
        const t73 = E38 + l45, n63 = t73 * P20;
        C28[n63] = $10, C28[n63 + 1] = ee7, C28[n63 + 2] = te6, de4($10, ee7, te6, f48), u37(g23, t73, e70, i48);
      }
      const ne7 = Q16 - $10, oe7 = X13 - ee7, se8 = Y14 - te6;
      let ie7 = D20 * o59, ae7 = T22 * o59, ce8 = n62;
      ce8 * ce8 < 0.999 && (ie7 = K14 * oe7 - J12 * se8, ae7 = z24 * se8 - K14 * ne7, ce8 = J12 * ne7 - z24 * oe7);
      const le7 = 1 / Math.sqrt(ie7 * ie7 + ae7 * ae7 + ce8 * ce8);
      s16(p48, E38, ie7 * le7, ae7 * le7, ce8 * le7, x31), ++E38;
    }
  }
}
function L20(e68) {
  e68.tile.intersectsClippingArea && (V12(e68), te5(e68), e68.intersectionData = null);
}
function B13(e68) {
  e68.tile.intersectsClippingArea && (Y13(e68), V12(e68), te5(e68), ne6(e68), e68.intersectionData = null);
}
function I23(e68) {
  e68.tile.intersectsClippingArea && (C23(e68), b16(e68, true), te5(e68), e68.intersectionData = null);
}
function V12(e68) {
  e68.tile.intersectsClippingArea && (C23(e68), b16(e68));
}
function b16(t71, n61 = false) {
  const { geometry: o58, geometryState: r55, tile: i47, localOrigin: c44 } = t71, { level: u46, extent: p48, extentInRadians: h36, ellipsoid: M21 } = i47, S24 = M21.radius, y26 = h36[0], v32 = h36[2], L24 = h36[1], B18 = h36[3], { samplerData: I27 } = r55, V17 = p48[0], b22 = p48[2], C28 = p48[1], P20 = p48[3], A32 = O24(t71), { boundingBox: E38, vertexAttributes: T21 } = o58, D19 = c44[0], R18 = c44[1], U23 = c44[2], w27 = T21.position, N20 = w27.typedBuffer, j26 = w27.typedBufferStride, F20 = T21.uv0;
  for (let O32 = 0; O32 < 4; ++O32) {
    const c45 = 1 === O32 || 3 === O32, h37 = r55.edgeResolutions[O32];
    p15(a6(h37));
    const M22 = h37 + 1, T22 = W7(i47, r55.edgePeerNeighbors[O32]);
    if (ce6(i47, T22, O32)) {
      Z10(t71, O32, T22);
      continue;
    }
    const w28 = null != T22;
    p15(!w28 || T22.level === i47.level), p15(!w28 || u17(i47, T22) <= 0);
    const H22 = T22 == null ? void 0 : T22.renderData, q21 = H22 == null ? void 0 : H22.geometryState;
    if (T7) {
      const e68 = i47.surface;
      if (!T22 && e68 && !e68.updatingRootTiles) {
        const t72 = X4[O32], n62 = i47.findNeighborTile(t72, (e69) => e69.isLoaded || e69.isLeaf || e69.level === i47.level);
        n62 ? n62.intersectsClippingArea && (p15(!n62.isLoaded), p15(!n62.isLeaf), p15(n62.level === u46)) : p15(null == (e68 == null ? void 0 : e68.rootTiles) || !i47.shouldHaveNeighbor(t72));
      }
    }
    const _26 = 1 === O32 ? p48[2] : p48[0], W11 = T22 == null ? void 0 : T22.extent, G19 = W11 && c45 ? 1 === O32 ? W11[0] : W11[2] : _26, k26 = 0 === O32 ? p48[3] : p48[1], z24 = 1 === O32 ? 1 : 0, J12 = 0 === O32 ? 1 : 0, K14 = 1 === O32 ? v32 : y26, Q16 = 0 === O32 ? B18 : L24, X13 = Math.sin(K14), Y14 = Math.cos(K14), $10 = Math.sin(Q16), ee7 = Math.cos(Q16), te6 = q21 == null ? void 0 : q21.samplerData, ne7 = w28 ? (e68, t72, n62) => 0.5 * (e53(e68, t72, I27) + e53(n62, t72, te6)) : (e68, t72, n62) => e53(e68, t72, I27), oe7 = o58.outerEdgesOffsetAndLength[2 * O32 + 0], se8 = n61 && M22 > 3 ? M22 - 3 : 1, re6 = null != I27 && I27.some((e68) => null != e68), ie7 = null != te6 && te6.some((e68) => null != e68), ae7 = re6 || ie7, le7 = 1 / h37, ue6 = oe7;
    p15(!W11 || D4(W11[2] - W11[0], p48[2] - p48[0]));
    (() => {
      const e68 = 1 === O32 ? -1 : 3 === O32 ? 1 : 0, t72 = 0 === O32 ? -1 : 2 === O32 ? 1 : 0, n62 = (p48[2] - p48[0]) * le7, r56 = e68 * n62, i48 = t72 * n62, l45 = c45 ? e68 * ((v32 - y26) * le7) : 0, u47 = c45 ? 0 : t72 * le7, d44 = J12, f48 = c45 ? K14 + l45 : K14, m46 = c45 ? Math.sin(f48) : X13, g23 = c45 ? Math.cos(f48) : Y14, x31 = c45 ? K14 - l45 : K14, h38 = c45 ? Math.sin(x31) : X13, L25 = c45 ? Math.cos(x31) : Y14, B19 = c45 ? Q16 : A32(d44 + u47), T23 = c45 ? $10 : Math.sin(B19), H23 = c45 ? ee7 : Math.cos(B19), q22 = c45 ? Q16 : A32(d44 - u47), W12 = c45 ? $10 : Math.sin(q22), Z11 = c45 ? ee7 : Math.cos(q22);
      let oe8 = 0, re7 = 0, ie8 = 0;
      {
        const e69 = 0 * le7, t73 = c45 ? _26 : V17 * (1 - e69) + b22 * e69, n63 = c45 ? G19 : t73, o59 = c45 ? C28 * (1 - e69) + P20 * e69 : k26, s71 = c45 ? K14 : y26 * (1 - e69) + v32 * e69, r57 = c45 ? X13 : Math.sin(s71), i49 = c45 ? Y14 : Math.cos(s71), a61 = c45 ? A32(e69) : Q16, l46 = c45 ? Math.sin(a61) : $10, u48 = c45 ? Math.cos(a61) : ee7, d45 = S24 + ne7(t73, o59, n63);
        oe8 = i49 * u48 * d45, re7 = r57 * u48 * d45, ie8 = l46 * d45;
      }
      let ce8 = 0, fe5 = 0, me5 = 0;
      {
        const e69 = 1 * le7, t73 = c45 ? _26 : V17 * (1 - e69) + b22 * e69, n63 = c45 ? G19 : t73, o59 = c45 ? C28 * (1 - e69) + P20 * e69 : k26, s71 = c45 ? K14 : y26 * (1 - e69) + v32 * e69, r57 = c45 ? X13 : Math.sin(s71), i49 = c45 ? Y14 : Math.cos(s71), a61 = c45 ? A32(e69) : Q16, l46 = c45 ? Math.sin(a61) : $10, u48 = c45 ? Math.cos(a61) : ee7, d45 = S24 + ne7(t73, o59, n63);
        ce8 = i49 * u48 * d45, fe5 = r57 * u48 * d45, me5 = l46 * d45;
      }
      for (let p49 = 1; p49 < M22 - 1; p49 += se8) {
        let e69 = 0, t73 = 0, n63 = 0;
        {
          const o59 = (p49 + 1) * le7, s71 = c45 ? _26 : V17 * (1 - o59) + b22 * o59, r57 = c45 ? G19 : s71, i49 = c45 ? C28 * (1 - o59) + P20 * o59 : k26, a61 = c45 ? K14 : y26 * (1 - o59) + v32 * o59, l47 = c45 ? X13 : Math.sin(a61), u49 = c45 ? Y14 : Math.cos(a61), d46 = c45 ? A32(o59) : Q16, f50 = c45 ? Math.sin(d46) : $10, m47 = c45 ? Math.cos(d46) : ee7, g24 = S24 + ne7(s71, i49, r57);
          e69 = u49 * m47 * g24, t73 = l47 * m47 * g24, n63 = f50 * g24;
        }
        const l46 = e69, u48 = t73, d45 = n63, f49 = ce8, x32 = fe5, M23 = me5;
        ce8 = l46, fe5 = u48, me5 = d45;
        {
          const e70 = ue6 + p49, t74 = e70 * j26, n64 = f49 - D19, o59 = x32 - R18, s71 = M23 - U23;
          N20[t74] = n64, N20[t74 + 1] = o59, N20[t74 + 2] = s71, de4(n64, o59, s71, E38);
          const r57 = p49 * le7;
          u37(F20, e70, c45 ? z24 : r57, c45 ? r57 : J12);
        }
        const B20 = oe8, q23 = re7, se9 = ie8;
        oe8 = f49, re7 = x32, ie8 = M23;
        const ge4 = f49, pe6 = x32, xe2 = M23, he5 = 1 / Math.sqrt(ge4 * ge4 + pe6 * pe6 + xe2 * xe2), Me2 = xe2 * he5;
        let Se3 = 0, ye2 = 0, ve2 = 0;
        if (ae7 && Me2 * Me2 < 0.999) {
          let e70 = 0, t74 = 0, n64 = 0;
          {
            const o59 = 0 === O32 ? -1 : 1;
            e70 = o59 * (l46 - B20), t74 = o59 * (u48 - q23), n64 = o59 * (d45 - se9);
          }
          {
            const o59 = p49 * le7, a61 = c45 ? _26 : V17 * (1 - o59) + b22 * o59, l47 = c45 ? G19 : a61, u49 = c45 ? C28 * (1 - o59) + P20 * o59 : k26, d46 = c45 ? K14 : y26 * (1 - o59) + v32 * o59, f50 = c45 ? X13 : Math.sin(d46), x33 = c45 ? Y14 : Math.cos(d46), M24 = c45 ? A32(o59) : Q16, B21 = c45 ? Math.sin(M24) : $10, E39 = c45 ? Math.cos(M24) : ee7;
            let D20 = ge4, R19 = pe6, U24 = xe2;
            if (w28) {
              const e71 = S24 + e53(l47 - r56, u49 - i48, te6), t75 = c45 ? E39 : Z11;
              D20 = (c45 ? L25 : x33) * t75 * e71, R19 = (c45 ? h38 : f50) * t75 * e71, U24 = (c45 ? B21 : W12) * e71;
            }
            {
              const o60 = S24 + e53(a61 + r56, u49 + i48, I27), l48 = c45 ? E39 : H23, d47 = (c45 ? g23 : x33) * l48 * o60, p50 = (c45 ? m46 : f50) * l48 * o60, h39 = (c45 ? B21 : T23) * o60;
              w28 || (D20 = 2 * ge4 - d47, R19 = 2 * pe6 - p50, U24 = 2 * xe2 - h39);
              const M25 = 3 === O32 ? -1 : 1, y27 = M25 * (D20 - d47), v33 = M25 * (R19 - p50), L26 = M25 * (U24 - h39);
              Se3 = n64 * v33 - t74 * L26, ye2 = e70 * L26 - n64 * y27, ve2 = t74 * y27 - e70 * v33;
              const V18 = 1 / Math.sqrt(Se3 * Se3 + ye2 * ye2 + ve2 * ve2);
              Se3 *= V18, ye2 *= V18, ve2 *= V18;
            }
          }
        } else
          Se3 = ge4 * he5, ye2 = pe6 * he5, ve2 = xe2 * he5;
        o58.setEdgeNormalFromValues(O32, p49, Se3, ye2, ve2);
      }
    })();
  }
}
function C23(e68) {
  $9(e68);
}
function P14(e68, t71) {
  return Math.PI / 2 - 2 * Math.atan(Math.exp(-e68 / t71));
}
function A24(e68, t71, n61, o58) {
  return P14(e68 * (1 - o58) + t71 * o58, n61);
}
function E33(e68, t71, n61) {
  return e68 * (1 - n61) + t71 * n61;
}
function O24(e68) {
  const { tile: t71 } = e68;
  if (t71.surface.isWebMercator) {
    const e69 = t71.extent, n62 = t71.ellipsoid.radius;
    return (t72) => A24(e69[1], e69[3], n62, t72);
  }
  const n61 = t71.extentInRadians;
  return (e69) => E33(n61[1], n61[3], e69);
}
function T17(e68, t71) {
  const { tile: o58, geometryState: s71, geometry: r55 } = e68, { extent: i47, surface: a61 } = o58, { wireframe: c44 } = s71, l45 = i47[0], u46 = i47[1], d44 = i47[2] - l45, f48 = i47[3] - u46, { numVerticesPerSide: m46, clippingArea: g23 } = s71, p48 = null != g23 ? Math.max(0, (g23[0] - l45) / d44) : 0, x31 = null != g23 ? Math.max(0, (g23[1] - u46) / f48) : 0, h36 = null != g23 ? Math.min(1, (g23[2] - l45) / d44) : 1, M21 = null != g23 ? Math.min(1, (g23[3] - u46) / f48) : 1, S24 = (m46 - 2) ** 2, y26 = fe3(s71), v32 = S24 + 4 * y26, L24 = a61.renderer.tileGeometryCache.acquire(v32), { boundingBox: B18 } = r55;
  P4(B18), r55.numVerticesPerSide = m46, r55.vertexAttributes = L24, r55.maxEdgeVertexCount = y26, r55.minu = p48, r55.minv = x31, r55.maxu = h36, r55.maxv = M21, D12(e68), r55.edgeVerticesStartIndex = S24, X11(e68), N14(e68), W8(r55, [], c44), e68.intersectionData = null;
}
function D12(e68) {
  const { tile: n61 } = e68;
  if (!n61.intersectsClippingArea)
    return;
  const { geometry: o58, geometryState: r55, localOrigin: i47 } = e68, { samplerData: c44, clippingArea: l45, numVerticesPerSide: u46 } = r55, { surface: d44, extent: f48, ellipsoid: m46 } = n61, { isWebMercatorOnPlateCarree: g23 } = d44, p48 = null != l45 ? l45 : ie6, x31 = f48[0], M21 = f48[1], S24 = f48[2], y26 = f48[3], v32 = Math.max(x31, p48[0]), L24 = Math.min(S24, p48[2]), B18 = Math.max(M21, p48[1]), I27 = Math.min(y26, p48[3]), V17 = m46.radius, b22 = n61.horizontalScale, C28 = u46 - 1, P20 = u46 - 2, { minu: A32, minv: E38, maxu: O32, maxv: T21, boundingBox: D19, vertexAttributes: R18 } = o58, U23 = R18.position, w27 = R18.uv0, { typedBuffer: N20, typedBufferStride: j26 } = R18.normalCompressed, F20 = i47[0], H22 = i47[1], q21 = i47[2], _26 = U23.typedBuffer, W11 = U23.typedBufferStride;
  let G19 = 0;
  const k26 = e12(M21, B18, I27), z24 = g23 ? (Math.PI / 2 - 2 * Math.atan(Math.exp(-k26 / V17))) * V17 : k26 * b22, J12 = 1 / C28, K14 = e12(M21 * (1 - J12) + y26 * J12, B18, I27);
  let Q16 = z24, X13 = g23 ? (Math.PI / 2 - 2 * Math.atan(Math.exp(-K14 / V17))) * V17 : K14 * b22;
  for (let Y14 = 1; Y14 <= P20; Y14++) {
    const e69 = Y14 / C28, n62 = e12(M21 * (1 - e69) + y26 * e69, B18, I27), o59 = e12(e69, E38, T21), r56 = X13, i48 = (Y14 - 1) / C28, l46 = e12(M21 * (1 - i48) + y26 * i48, B18, I27), u47 = Q16, d45 = (Y14 + 1) / C28, f49 = e12(M21 * (1 - d45) + y26 * d45, B18, I27), m47 = g23 ? (Math.PI / 2 - 2 * Math.atan(Math.exp(-f49 / V17))) * V17 : f49 * b22, p49 = e12(d45, E38, T21);
    Q16 = X13, X13 = m47;
    const R19 = e12(x31, v32, L24);
    let U24 = R19 * b22, k27 = e53(R19, n62, c44);
    const z25 = 1 / C28, J13 = e12(z25, A32, O32), K15 = e12(x31 * (1 - J13) + S24 * J13, v32, L24);
    let Z11 = J13, $10 = K15, ee7 = K15 * b22, te6 = e53(K15, n62, c44);
    if (1 === Y14) {
      const e70 = ee7 - F20, n63 = Q16 - H22, s71 = te6 - q21, r57 = 0 * W11;
      _26[r57] = e70, _26[r57 + 1] = n63, _26[r57 + 2] = s71, de4(e70, n63, s71, D19);
      const i49 = e12(z25, A32, O32);
      u37(w27, G19, i49, o59);
    }
    for (let g24 = 1; g24 <= P20; g24++) {
      const e70 = ee7, i49 = te6, d46 = (g24 + 1) / C28, M22 = e12(d46, A32, O32), y27 = e12(x31 * (1 - d46) + S24 * d46, v32, L24), B19 = $10;
      $10 = y27;
      {
        const e71 = G19 + 1, t71 = e71 * W11;
        if (1 === Y14 || g24 === P20) {
          const i50 = y27 * b22, l47 = e53(y27, n62, c44);
          if (1 === Y14 && g24 < P20) {
            const n63 = i50 - F20, s71 = r56 - H22, c45 = l47 - q21;
            _26[t71] = n63, _26[t71 + 1] = s71, _26[t71 + 2] = c45, de4(n63, s71, c45, D19), u37(w27, e71, M22, o59);
          }
          ee7 = i50, te6 = l47;
        } else
          ee7 = _26[t71] + F20, te6 = _26[t71 + 2] + q21;
      }
      const I28 = ee7, V18 = te6, E39 = U24, T22 = k27;
      U24 = e70, k27 = i49;
      const R20 = (G19 - P20) * W11, z26 = 1 === Y14 ? e53(B19, l46, c44) : _26[R20 + 2] + q21, J14 = e53(B19, f49, c44);
      if (Y14 < P20) {
        const t71 = G19 + P20, n63 = t71 * W11, o60 = e70 - F20, s71 = m47 - H22, r57 = J14 - q21;
        _26[n63] = o60, _26[n63 + 1] = s71, _26[n63 + 2] = r57, de4(o60, s71, r57, D19);
        const i50 = Z11;
        Z11 = M22, u37(w27, t71, i50, p49);
      }
      {
        const e71 = I28 - E39, t71 = u47 - m47, n63 = t71 * (V18 - T22), o60 = e71 * (z26 - J14), s71 = -t71 * e71, r57 = n63 * n63 + o60 * o60 + s71 * s71;
        if (0 === r57)
          s16(N20, G19, 0, 0, 1, j26);
        else {
          const e72 = 1 / Math.sqrt(r57);
          s16(N20, G19, n63 * e72, o60 * e72, s71 * e72, j26);
        }
      }
      ++G19;
    }
  }
}
function R11(e68, t71) {
  e68.tile.intersectsClippingArea && (F14(e68), j21(e68, true), te5(e68), e68.intersectionData = null);
}
function U18(e68, t71) {
  e68.tile.intersectsClippingArea && (Y13(e68), N14(e68), te5(e68), ne6(e68), e68.intersectionData = null);
}
function w22(e68, t71) {
  e68.tile.intersectsClippingArea && (N14(e68), te5(e68), e68.intersectionData = null);
}
function N14(e68, t71) {
  e68.tile.intersectsClippingArea && (F14(e68), j21(e68, false));
}
function j21(n61, o58) {
  const { geometry: r55, geometryState: i47, tile: a61, localOrigin: c44 } = n61, { surface: u46, extent: g23 } = a61, { clippingArea: p48, samplerData: h36 } = i47, M21 = null != p48 ? p48 : ie6, S24 = g23[0], y26 = g23[2], v32 = g23[1], L24 = g23[3], B18 = [L24 > M21[3], y26 > M21[2], v32 < M21[1], S24 < M21[0]], I27 = a61.horizontalScale, V17 = _22(u46.isWebMercatorOnPlateCarree, a61.ellipsoid.radius, I27), { minu: b22, minv: C28, maxu: P20, maxv: A32, boundingBox: E38 } = r55, O32 = Math.max(S24, M21[0]), T21 = Math.min(y26, M21[2]), D19 = Math.max(v32, M21[1]), R18 = Math.min(L24, M21[3]), U23 = c44[0], w27 = c44[1], N20 = c44[2];
  for (let j26 = 0; j26 < 4; ++j26) {
    const c45 = 1 === j26 || 3 === j26, g24 = i47.edgeResolutions[j26];
    p15(a6(g24));
    const p49 = g24 + 1, M22 = B18[j26], F20 = W7(a61, i47.edgePeerNeighbors[j26]);
    if (!M22 && ce6(a61, F20, j26)) {
      Z10(n61, j26, F20);
      continue;
    }
    const H22 = null != F20 && !M22, q21 = F20 == null ? void 0 : F20.renderData, _26 = q21 == null ? void 0 : q21.geometryState;
    if (T7 && (p15(!H22 || F20.level === a61.level), p15(!H22 || u17(a61, F20) <= 0), a61 && !F20 && !u46.updatingRootTiles)) {
      const e68 = X4[j26], t71 = a61.findNeighborTile(e68, (e69) => e69.isLoaded || e69.isLeaf || e69.level === a61.level);
      u46.updatingRootTiles || (t71 ? t71.intersectsClippingArea && (p15(!t71.isLoaded), p15(!t71.isLeaf), p15(t71.level === a61.level)) : p15(null == (u46 == null ? void 0 : u46.rootTiles) || !a61.shouldHaveNeighbor(e68)));
    }
    const W11 = e12(1 === j26 ? y26 : S24, O32, T21), G19 = e12(0 === j26 ? L24 : v32, D19, R18), k26 = _26 == null ? void 0 : _26.samplerData, z24 = o58 && p49 > 3 ? p49 - 3 : 1, J12 = e12(1 === j26 ? 1 : 0, b22, P20), K14 = e12(0 === j26 ? 1 : 0, C28, A32), Q16 = H22 ? (e68, t71) => 0.5 * (e53(e68, t71, k26) + e53(e68, t71, h36)) : (e68, t71) => e53(e68, t71, h36), X13 = (y26 - S24) / g24, Y14 = c45 ? 1 === j26 ? X13 : -X13 : 0, $10 = c45 ? 0 : 0 === j26 ? X13 : -X13, ee7 = -Y14, te6 = -$10;
    let ne7 = 0, oe7 = 0, se8 = 0;
    {
      const e68 = 0 / g24, n62 = c45 ? W11 : e12(S24 * (1 - e68) + y26 * e68, O32, T21), o59 = c45 ? e12(v32 * (1 - e68) + L24 * e68, D19, R18) : G19, s71 = Q16(n62, o59);
      ne7 = n62 * I27, oe7 = V17(o59), se8 = s71;
    }
    let re6 = 0, ie7 = 0, ae7 = 0;
    {
      const e68 = 1 / g24, n62 = c45 ? W11 : e12(S24 * (1 - e68) + y26 * e68, O32, T21), o59 = c45 ? e12(v32 * (1 - e68) + L24 * e68, D19, R18) : G19, s71 = Q16(n62, o59);
      re6 = n62 * I27, ie7 = V17(o59), ae7 = s71;
    }
    for (let e68 = 1; e68 < p49 - 1; e68 += z24) {
      const n62 = e68 / g24, o59 = re6, i48 = ie7, a62 = ae7;
      {
        const s71 = c45 ? J12 : e12(n62, b22, P20), l46 = c45 ? e12(n62, C28, A32) : K14, u48 = o59 - U23, d45 = i48 - w27, f49 = a62 - N20;
        de4(o59, d45, f49, E38), r55.setEdgeVertexFromValuesRawPositionUV(j26, e68, u48, d45, f49, s71, l46);
      }
      {
        const n63 = (e68 + 1) / g24, o60 = c45 ? W11 : e12(S24 * (1 - n63) + y26 * n63, O32, T21), s71 = c45 ? e12(v32 * (1 - n63) + L24 * n63, D19, R18) : G19, r56 = Q16(o60, s71);
        re6 = o60 * I27, ie7 = V17(s71), ae7 = r56;
      }
      const l45 = re6, u47 = ae7, d44 = ne7, f48 = oe7, m46 = se8;
      ne7 = o59, oe7 = i48, se8 = a62;
      let p50 = 0, x31 = 0, M23 = 0;
      if (c45) {
        const e69 = ie7 - i48, r56 = u47 - a62, c46 = f48 - i48, l46 = m46 - a62, d45 = e12(v32 * (1 - n62) + L24 * n62, D19, R18), g25 = W11 + ee7, S25 = g25 * I27 - o59, y27 = e53(g25, d45, h36) - a62, B20 = 3 === j26 ? -1 : 1;
        if (p50 = B20 * (-c46 + e69) * y27, x31 = B20 * S25 * (-l46 + r56), M23 = -B20 * S25 * (-c46 + e69), H22) {
          const t71 = W11 + Y14, n63 = t71 * I27 - o59;
          p50 = (-c46 + e69) * (y27 - (e53(t71, d45, k26) - a62)), x31 = (S25 - n63) * (-l46 + r56), M23 = -(S25 - n63) * (-c46 + e69);
        }
      } else {
        const e69 = l45 - o59, r56 = u47 - a62, c46 = d44 - o59, f49 = m46 - a62, g25 = e12(S24 * (1 - n62) + y26 * n62, O32, T21), v33 = G19 + te6, L25 = e53(g25, v33, h36) - a62, B20 = V17(v33) - i48, I28 = 2 === j26 ? -1 : 1;
        if (p50 = I28 * B20 * (-f49 + r56), x31 = I28 * (-c46 + e69) * L25, M23 = -I28 * B20 * (-c46 + e69), H22) {
          const t71 = g25, n63 = G19 + $10, o60 = V17(n63) - i48;
          p50 = (-B20 + o60) * (-f49 + r56), x31 = (-c46 + e69) * (-L25 + (e53(t71, n63, k26) - a62)), M23 = -(-B20 + o60) * (-c46 + e69);
        }
      }
      const B19 = 1 / Math.sqrt(p50 * p50 + x31 * x31 + M23 * M23);
      r55.setEdgeNormalFromValues(j26, e68, p50 * B19, x31 * B19, M23 * B19);
    }
  }
}
function F14(e68, t71) {
  $9(e68);
}
function H17(e68, t71) {
  return (Math.PI / 2 - 2 * Math.atan(Math.exp(-e68 / t71))) * t71;
}
function q15(e68, t71) {
  return e68 * t71;
}
function _22(e68, t71, n61) {
  return e68 ? (e69) => H17(e69, t71) : (e69) => q15(e69, n61);
}
function W8(e68, t71, n61) {
  const { numVerticesPerSide: o58, vertexAttributes: s71, maxEdgeVertexCount: r55 } = e68, i47 = o58 - 1, a61 = s71.count, c44 = 2 * (o58 - 3) * (o58 - 3), l45 = 4 * (i47 + r55 - 3), d44 = ee5.reduce((t72, n62) => t72 + (i47 + e68.getEdgeCount(n62) - 3), 0), f48 = t71.reduce((e69, t72) => e69 + i47 * (2 * (t72.latitudeResolution - 1) + 1), 0), m46 = 3 * (n61 ? 2 : 1), g23 = (c44 + l45 + f48) * m46, p48 = a61 >= M14 ? new Uint32Array(g23) : new Uint16Array(g23);
  for (let u46 = 0; u46 < g23; ++u46)
    p48[u46] = 0;
  e68.indices = p48, e68.indexCount = (c44 + d44 + f48) * m46, e68.poleIndicesStartIndex = c44 * m46, e68.edgeIndicesStartIndex = (c44 + f48) * m46, n61 ? (J10(e68), K12(e68, t71), Q14(e68)) : (G13(e68), k20(e68, t71), z20(e68));
}
function G13(e68) {
  const { numVerticesPerSide: t71, indices: n61, vertexAttributes: o58 } = e68, { position: s71 } = o58, { typedBuffer: r55, typedBufferStride: i47 } = s71, a61 = t71 - 2, c44 = t71 - 3, l45 = 0, u46 = t71 - 3;
  let d44 = 0;
  for (let f48 = 0; f48 < c44; ++f48) {
    const e69 = f48 * a61;
    for (let t72 = l45; t72 < u46; ++t72) {
      const o59 = e69 + t72, s72 = o59 + 1, c45 = s72 + a61, l46 = c45 - 1;
      me4(o59, s72, c45, l46, i47, r55) ? (n61[d44] = o59, n61[d44 + 1] = s72, n61[d44 + 2] = c45, n61[d44 + 3] = c45, n61[d44 + 4] = l46, n61[d44 + 5] = o59) : (n61[d44] = o59, n61[d44 + 1] = s72, n61[d44 + 2] = l46, n61[d44 + 3] = l46, n61[d44 + 4] = s72, n61[d44 + 5] = c45), d44 += 6;
    }
  }
}
function k20(e68, t71) {
  const { numVerticesPerSide: n61, indices: o58, poleIndicesStartIndex: s71 } = e68, r55 = n61 - 1;
  let i47 = s71;
  for (const a61 of t71) {
    const t72 = a61.isNorth ? 1 : 2, s72 = a61.isNorth ? 2 : 1, c44 = a61.isNorth ? 3 : 4, l45 = a61.isNorth ? 4 : 3;
    let u46 = e68.getEdgeVertexIndex(a61.connectedOuterEdgeOffset, 0), d44 = 1;
    for (let e69 = 0; e69 < a61.latitudeResolution; ++e69) {
      const f48 = 0 === e69 ? a61.rowOffset : u46 + n61;
      for (let n62 = 0; n62 < r55; n62++) {
        const r56 = f48 + n62;
        o58[i47] = u46, o58[i47 + t72] = u46 + 1, o58[i47 + s72] = r56, e69 < a61.latitudeResolution - 1 ? (o58[i47 + c44] = u46 + 1, o58[i47 + l45] = r56 + 1, o58[i47 + 5] = r56, i47 += 6) : i47 += 3, u46 += d44;
      }
      u46 = f48, d44 = 1;
    }
  }
}
function z20(e68) {
  const { indices: t71, numVerticesPerSide: n61, edgeIndicesStartIndex: o58 } = e68, s71 = n61 - 1, r55 = s71 - 2;
  let i47 = o58;
  for (let a61 = 0; a61 < 4; ++a61) {
    const n62 = ue4[a61];
    let o59 = 0, c44 = 0;
    const l45 = e68.getEdgeCount(a61), u46 = n62.count;
    p15(u46 === s71 - 1);
    const f48 = 1 === a61 || 2 === a61, m46 = f48 ? 1 : 2, g23 = f48 ? 2 : 1, p48 = e68.getEdgeFirstVertexIndex(a61), x31 = 1, h36 = n62.vertex0Index, M21 = n62.stride;
    for (; o59 < l45 - 1 || c44 < u46 - 1; ) {
      const e69 = h36 + c44 * M21, n63 = p48 + o59 * x31, a62 = o59 < l45 - 1, d44 = c44 < u46 - 1, f49 = a62 && (!d44 || (a62 ? 0 + s71 * (o59 + 0.5) / (l45 - 1) : 0) <= (d44 ? 1 + r55 * (c44 + 0.5) / (u46 - 1) : 0));
      f49 ? ++o59 : ++c44;
      const S24 = f49 ? n63 + x31 : e69 + M21;
      t71[i47] = e69, t71[i47 + m46] = n63, t71[i47 + g23] = S24, i47 += 3;
    }
  }
  e68.indexCount = i47;
}
function J10(e68) {
  const { indices: t71, numVerticesPerSide: n61, vertexAttributes: o58 } = e68, { position: s71 } = o58, { typedBuffer: r55, typedBufferStride: i47 } = s71, a61 = n61 - 2;
  let c44 = 0;
  for (let l45 = 0; l45 < n61 - 3; ++l45) {
    const e69 = l45 * a61;
    for (let o59 = 0; o59 < n61 - 3; ++o59) {
      const n62 = l45 * a61 + o59, s72 = n62 + 1, u46 = s72 + a61, d44 = u46 - 1, f48 = e69 + o59, m46 = f48 + 1, g23 = m46 + a61;
      me4(f48, m46, g23, g23 - 1, i47, r55) ? (ge3(t71, c44, n62, s72, u46), c44 += 6, ge3(t71, c44, u46, d44, n62)) : (ge3(t71, c44, n62, s72, d44), c44 += 6, ge3(t71, c44, d44, u46, s72)), c44 += 6;
    }
  }
}
function K12(e68, t71) {
  const { indices: n61, numVerticesPerSide: o58, poleIndicesStartIndex: s71 } = e68, r55 = o58 - 1;
  let i47 = s71;
  for (const a61 of t71) {
    const t72 = a61.connectedOuterEdgeOffset;
    let s72 = e68.getEdgeVertexIndex(t72, 0), c44 = 1;
    for (let e69 = 0; e69 < a61.latitudeResolution; ++e69) {
      const t73 = 0 === e69 ? a61.rowOffset : s72 + o58;
      for (let o59 = 0; o59 < r55; o59++)
        ge3(n61, i47, s72, s72 + 1, t73 + o59), i47 += 6, e69 < a61.latitudeResolution - 1 && (ge3(n61, i47, s72 + 1, t73 + o59 + 1, t73 + o59), i47 += 6), s72 += c44;
      s72 = t73, c44 = 1;
    }
  }
}
function Q14(e68) {
  const { indices: t71, numVerticesPerSide: n61, edgeIndicesStartIndex: o58 } = e68, s71 = n61 - 1, r55 = s71 - 2;
  let i47 = o58;
  for (let a61 = 0; a61 < 4; ++a61) {
    const n62 = ue4[a61];
    let o59 = 0, c44 = 0;
    const l45 = e68.getEdgeCount(a61), u46 = n62.count;
    p15(u46 === s71 - 1);
    const f48 = 1 === a61 || 2 === a61, m46 = f48 ? 1 : 3, g23 = f48 ? 3 : 1, p48 = e68.getEdgeFirstVertexIndex(a61), x31 = 1, h36 = n62.vertex0Index, M21 = n62.stride;
    for (; o59 < l45 - 1 || c44 < u46 - 1; ) {
      const e69 = h36 + c44 * M21, n63 = p48 + o59 * x31, a62 = o59 < l45 - 1, d44 = c44 < u46 - 1, f49 = a62 && (!d44 || (a62 ? 0 + s71 * (o59 + 0.5) / (l45 - 1) : 0) <= (d44 ? 1 + r55 * (c44 + 0.5) / (u46 - 1) : 0));
      f49 ? ++o59 : ++c44;
      const S24 = f49 ? n63 + x31 : e69 + M21;
      t71[i47] = e69, t71[i47 + m46] = n63, t71[i47 + m46 + 1] = n63, t71[i47 + g23] = S24, t71[i47 + g23 + 1] = S24, t71[i47 + 5] = e69, i47 += 6;
    }
  }
  e68.indexCount = i47;
}
function X11(e68) {
  const { geometry: t71, geometryState: n61 } = e68, { edgeResolutions: o58 } = n61, { numVerticesPerSide: s71, edgeVerticesStartIndex: r55 } = t71, i47 = s71 - 2;
  let a61 = r55;
  for (let c44 = 0; c44 < 4; ++c44) {
    {
      const e69 = 0 === c44 || 2 === c44, t72 = (0 === c44 ? i47 - 1 : 0) * i47 + (1 === c44 ? i47 - 1 : 0), n62 = (e69 ? 0 : 1) * i47 + (e69 ? 1 : 0), o59 = ue4[c44];
      o59.vertex0Index = t72, o59.stride = n62, o59.count = i47;
    }
    {
      const e69 = o58[c44] + 1;
      t71.outerEdgesOffsetAndLength[2 * c44 + 0] = a61, t71.outerEdgesOffsetAndLength[2 * c44 + 1] = e69, a61 += e69;
    }
  }
}
function Y13(e68) {
  X11(e68), e68.geometryState.wireframe ? Q14(e68.geometry) : z20(e68.geometry);
}
function Z10(n61, o58, s71) {
  const r55 = (o58 + 2) % 4, { geometryState: i47, geometry: c44, tile: l45, localOrigin: u46 } = n61, f48 = l45.level - s71.level, m46 = 1 === o58 || 3 === o58, g23 = i47.edgeResolutions[o58];
  p15(a6(g23));
  const p48 = g23 + 1, { boundingBox: x31, minu: h36, minv: M21, maxu: S24, maxv: y26, vertexAttributes: v32 } = c44, L24 = e12(1 === o58 ? 1 : 0, h36, S24), B18 = e12(0 === o58 ? 1 : 0, M21, y26), I27 = s71.renderData, V17 = I27.geometryState, b22 = I27.geometry, C28 = b22.getEdgeCount(r55), P20 = l45.getNeighborEdgeStartVertexIndex(o58, s71) * g23, A32 = g23 * 2 ** f48;
  p15(V17.edgeResolutions[r55] === A32), p15(C28 - 1 === A32);
  const E38 = I27.localOrigin[0] - u46[0], O32 = I27.localOrigin[1] - u46[1], T21 = I27.localOrigin[2] - u46[2], D19 = c44.getEdgeFirstVertexIndex(o58), R18 = v32.position, U23 = R18.typedBuffer, w27 = R18.typedBufferStride, N20 = v32.normalCompressed, j26 = N20.typedBuffer, F20 = N20.typedBufferStride, H22 = v32.uv0, q21 = b22.vertexAttributes, _26 = b22.getEdgeFirstVertexIndex(r55), W11 = q21.position.typedBuffer, G19 = q21.position.typedBufferStride, k26 = q21.normalCompressed.typedBuffer, z24 = q21.normalCompressed.typedBufferStride;
  for (let e68 = 1; e68 < p48 - 1; ++e68) {
    const n62 = D19 + e68, o59 = _26 + (P20 + e68), s72 = n62 * w27, r56 = o59 * G19, i48 = W11[r56] + E38, c45 = W11[r56 + 1] + O32, l46 = W11[r56 + 2] + T21;
    U23[s72] = i48, U23[s72 + 1] = c45, U23[s72 + 2] = l46, de4(i48, c45, l46, x31);
    const u47 = n62 * F20, d44 = o59 * z24;
    j26[u47] = k26[d44], j26[u47 + 1] = k26[d44 + 1];
    const f49 = e68 / g23, p49 = m46 ? L24 : e12(f49, h36, S24), v33 = m46 ? e12(f49, M21, y26) : B18;
    u37(H22, n62, p49, v33);
  }
}
function $9(e68) {
  var _a;
  const { geometry: n61, geometryState: o58, localOrigin: r55, tile: i47 } = e68, { clippingArea: c44, samplerData: l45 } = o58, { minu: u46, minv: f48, maxu: m46, maxv: g23, boundingBox: p48, vertexAttributes: h36 } = n61, { surface: M21, ellipsoid: S24, extent: y26, extentInRadians: v32, horizontalScale: L24 } = i47, B18 = "local" === ((_a = M21.view) == null ? void 0 : _a.viewingMode), I27 = S24.radius;
  let V17 = 0, b22 = 0, C28 = 0;
  const P20 = (e69, t71, n62) => {
    const o59 = v32[0 === t71 ? 1 : 3], s71 = v32[0 === e69 ? 0 : 2], r56 = Math.cos(o59), i48 = Math.sin(o59), a61 = Math.sin(s71), c45 = Math.cos(s71), l46 = I27 + n62;
    V17 = c45 * r56 * l46, b22 = a61 * r56 * l46, C28 = i48 * l46;
  }, A32 = B18 ? (() => {
    const e69 = c44, n62 = null != e69 && (y26[3] > e69[3] || y26[2] > e69[2] || y26[1] < e69[1] || y26[0] < e69[0]), o59 = _22(M21.isWebMercatorOnPlateCarree, I27, L24);
    return (s71, r56, i48) => {
      const a61 = 0 === s71 ? y26[0] : y26[2], c45 = 0 === r56 ? y26[1] : y26[3], l46 = n62 ? e12(a61, e69[0], e69[2]) : a61, u47 = n62 ? e12(c45, e69[1], e69[3]) : c45, d44 = i48;
      V17 = l46 * L24, b22 = o59(u47), C28 = d44;
    };
  })() : P20;
  let E38 = 0, T21 = 0, D19 = 0, R18 = 0, U23 = 0, w27 = 0, N20 = 0, j26 = 0, F20 = 0;
  const H22 = B18 && M21.isWebMercatorOnPlateCarree, q21 = (e69, t71, n62, o59, s71) => {
    let r56 = 0, i48 = 0, a61 = 0;
    if (B18) {
      const e70 = t71 * L24, s72 = H22 ? (Math.PI / 2 - 2 * Math.atan(Math.exp(-n62 / I27))) * I27 : n62 * L24;
      r56 = e70 - V17, i48 = s72 - b22, a61 = o59 - C28;
    } else {
      const s72 = O24(e69), c45 = e69.tile, l46 = c45.extent, u47 = c45.extentInRadians, d44 = (t71 - l46[0]) / (l46[2] - l46[0]), f49 = (n62 - l46[1]) / (l46[3] - l46[1]), m47 = u47[0] * (1 - d44) + u47[2] * d44, g24 = s72(f49), p49 = Math.cos(g24), x31 = Math.sin(g24), h37 = Math.sin(m47), M22 = Math.cos(m47), S25 = I27 + o59;
      r56 = M22 * p49 * S25 - V17, i48 = h37 * p49 * S25 - b22, a61 = x31 * S25 - C28;
    }
    switch (s71) {
      case 0:
        N20 += r56, j26 += i48, F20 += a61;
        break;
      case 1:
        R18 -= r56, U23 -= i48, w27 -= a61;
        break;
      case 2:
        N20 -= r56, j26 -= i48, F20 -= a61;
        break;
      case 3:
        R18 += r56, U23 += i48, w27 += a61;
    }
  }, W11 = c44 ?? ie6, G19 = y26[0], k26 = y26[2], z24 = y26[1], J12 = y26[3], K14 = [J12 > W11[3], k26 > W11[2], z24 < W11[1], G19 < W11[0]], Q16 = Math.max(G19, W11[0]), X13 = Math.min(k26, W11[2]), Y14 = Math.max(z24, W11[1]), Z11 = Math.min(J12, W11[3]), $10 = (e69) => Math.max(W11[0], Math.min(W11[2], e69)), te6 = (e69) => Math.max(W11[1], Math.min(W11[3], e69)), ne7 = (e69) => {
    const t71 = o58.cornerNeighborCornerTiles;
    E38 = 0, T21 = 0, D19 = 1, R18 = 0, U23 = 0, w27 = 0, N20 = 0, j26 = 0, F20 = 0;
    let n62 = 1 / 0;
    for (let o59 = 0; o59 < 4; ++o59) {
      const s71 = t71[4 * e69 + o59];
      n62 = Math.min(n62, (s71 == null ? void 0 : s71.level) ?? 1 / 0);
    }
    for (let o59 = 0; o59 < 4; ++o59) {
      const s71 = t71[4 * e69 + o59];
      ae6[o59] = (s71 == null ? void 0 : s71.level) === n62 ? s71 : null;
    }
    let r56 = 1, i48 = 0;
    for (let o59 = 0; o59 < 4; ++o59) {
      const e70 = ae6[o59];
      e70 && (r56 = Math.max(r56, e70 == null ? void 0 : e70.renderData.geometryState.numVerticesPerSide), i48 = e70.extent[2] - e70.extent[0]);
    }
    const a61 = i48, c45 = r56;
    p15(c45 > 1);
    const l46 = a61 / c45;
    for (let o59 = 0; o59 < 4; ++o59) {
      const e70 = ae6[(o59 + 3) % 4], t72 = ae6[o59 % 4];
      if (!e70 && !t72)
        continue;
      const n63 = 0 === o59 ? 1 : 1 === o59 ? 2 : 2 === o59 ? 3 : 0, r57 = 0 === o59 ? 2 : 1 === o59 ? 3 : 2 === o59 ? 0 : 1;
      if (e70 && t72) {
        const i49 = se7[o59][0] * l46, a62 = se7[o59][1] * l46, c46 = e70.extent, u47 = $10(c46[0 === n63 || 1 === n63 ? 2 : 0] + i49), d44 = te6(c46[0 === n63 || 3 === n63 ? 3 : 1] + a62), f49 = t72.extent, m47 = $10(f49[0 === r57 || 1 === r57 ? 2 : 0] + i49), g24 = te6(f49[0 === r57 || 3 === r57 ? 3 : 1] + a62), p49 = e70.renderData, x31 = t72.renderData, h37 = e53(u47, d44, p49.geometryState.samplerData), M22 = e53(m47, g24, x31.geometryState.samplerData);
        q21(p49, u47, d44, 0.5 * (h37 + M22), o59);
      } else {
        const i49 = e70 ?? t72, a62 = e70 ? n63 : r57, c46 = i49.extent, u47 = se7[o59], d44 = $10(c46[0 === a62 || 1 === a62 ? 2 : 0] + u47[0] * l46), f49 = te6(c46[0 === a62 || 3 === a62 ? 3 : 1] + u47[1] * l46), m47 = i49.renderData, g24 = e53(d44, f49, m47.geometryState.samplerData);
        q21(m47, d44, f49, g24, o59);
      }
    }
    if (!B18) {
      const e70 = Math.sqrt(V17 * V17 + b22 * b22 + C28 * C28);
      E38 = V17 / e70, T21 = b22 / e70, D19 = C28 / e70;
    }
    if (B18 || D19 * D19 < 0.999) {
      const e70 = Math.sqrt(R18 * R18 + U23 * U23 + w27 * w27);
      R18 /= e70, U23 /= e70, w27 /= e70;
      const t72 = Math.sqrt(N20 * N20 + j26 * j26 + F20 * F20);
      N20 /= t72, j26 /= t72, F20 /= t72, E38 = w27 * j26 - U23 * F20, T21 = R18 * F20 - w27 * N20, D19 = U23 * N20 - R18 * j26;
      const n63 = 1 / Math.sqrt(E38 * E38 + T21 * T21 + D19 * D19);
      E38 *= n63, T21 *= n63, D19 *= n63;
    }
  }, oe7 = o58.cornerNeighborCornerTiles;
  for (let O32 = 0; O32 < 4; ++O32) {
    const e69 = O32, c45 = (O32 + 1) % 4, M22 = 0 === O32 || 1 === O32 ? 1 : 0, S25 = 0 === O32 || 3 === O32 ? 1 : 0, y27 = e12(M22, u46, m46), v33 = e12(S25, f48, g23), L25 = n61.getEdgeFirstVertexIndex(e69), B19 = n61.getEdgeCount(e69), I28 = 0 === O32 || 3 === O32 ? B19 - 1 : 0, P21 = n61.getEdgeFirstVertexIndex(c45), R19 = n61.getEdgeCount(c45), U24 = 0 === O32 || 1 === O32 ? R19 - 1 : 0;
    let w28 = -1;
    for (let t71 = 0; t71 < 4; ++t71) {
      const e70 = oe7[4 * O32 + t71], n62 = oe7[4 * O32 + w28];
      e70 && (-1 === w28 || u17(n62, e70) > 0) && (w28 = t71);
    }
    const N21 = w28, j27 = oe7[4 * O32 + N21];
    if (j27 !== i47) {
      const e70 = i47.level - j27.level, t71 = 2 ** e70, n62 = [j27.lij[0] + e70, j27.lij[1] * t71, j27.lij[2] * t71], s71 = [n62[1] + t71 === i47.lij[1], 0 === O32 && (1 === N21 || 0 === N21 && j27 !== oe7[4 * O32 + 3]) || 1 === O32 && (0 === N21 || 1 === N21 && j27 !== oe7[4 * O32 + 2]), n62[1] === i47.lij[1] + 1, 2 === O32 && (3 === N21 || 2 === N21 && j27 !== oe7[4 * O32 + 1]) || 3 === O32 && (2 === N21 || 3 === N21 && j27 !== oe7[4 * O32 + 0])], c46 = s71.reduce((e71, t72) => e71 + (t72 ? 1 : 0), 0);
      p15(1 === c46 || 2 === c46);
      let l46 = -1, u47 = -1;
      const f49 = j27.renderData;
      if (1 === c46) {
        const e71 = s71.findIndex((e72) => e72);
        p15(0 <= e71 && e71 <= 3), l46 = (e71 + 2) % 4;
        const t72 = o58.edgeResolutions[e71];
        u47 = i47.getNeighborEdgeStartVertexIndex(e71, j27) * t72 + t72 * (0 === e71 && 0 === O32 || 1 === e71 && 0 === O32 || 2 === e71 && 1 === O32 || 3 === e71 && 3 === O32 ? 1 : 0);
      } else {
        p15(s71[1] || s71[3]), l46 = s71[1] ? 3 : 1;
        const e71 = f49.geometryState.edgeResolutions[l46];
        u47 = 0 === O32 || 3 === O32 ? 0 : e71;
      }
      const m47 = f49.geometry;
      {
        const e71 = L25 + I28, t72 = P21 + U24, n63 = m47.getEdgeFirstVertexIndex(l46) + u47, o59 = m47.vertexAttributes, s72 = f49.localOrigin;
        {
          const i49 = o59.position, a61 = i49.typedBuffer, c47 = n63 * i49.typedBufferStride, l47 = a61[c47] + s72[0] - r55[0], u48 = a61[c47 + 1] + s72[1] - r55[1], d44 = a61[c47 + 2] + s72[2] - r55[2];
          de4(l47, u48, d44, p48);
          const f50 = h36.position, m48 = f50.typedBuffer;
          {
            const t73 = e71 * f50.typedBufferStride;
            m48[t73] = l47, m48[t73 + 1] = u48, m48[t73 + 2] = d44;
          }
          {
            const e72 = t72 * f50.typedBufferStride;
            m48[e72] = l47, m48[e72 + 1] = u48, m48[e72 + 2] = d44;
          }
        }
        const i48 = h36.uv0;
        u37(i48, e71, y27, v33), u37(i48, t72, y27, v33);
        {
          const s73 = o59.normalCompressed.typedBuffer, r56 = n63 * o59.normalCompressed.typedBufferStride, i49 = h36.normalCompressed, a61 = i49.typedBuffer;
          {
            const t73 = e71 * i49.typedBufferStride;
            a61[t73] = s73[r56], a61[t73 + 1] = s73[r56 + 1];
          }
          {
            const e72 = t72 * i49.typedBufferStride;
            a61[e72] = s73[r56], a61[e72 + 1] = s73[r56 + 1];
          }
        }
      }
    } else {
      const o59 = K14[e69], i48 = K14[c45];
      let a61;
      if (o59 || i48) {
        const e70 = e12(G19 * (1 - M22) + k26 * M22, Q16, X13), n62 = e12(z24 * (1 - S25) + J12 * S25, Y14, Z11);
        a61 = e53(e70, n62, l45);
      } else
        a61 = ee6(oe7, O32);
      A32(M22, S25, a61), ne7(O32);
      const u47 = V17 - r55[0], d44 = b22 - r55[1], f49 = C28 - r55[2];
      de4(u47, d44, f49, p48), n61.setEdgeVertexFromValuesRawPositionUVNormal(e69, I28, u47, d44, f49, y27, v33, E38, T21, D19), n61.setEdgeVertexFromValuesRawPositionUVNormal(c45, U24, u47, d44, f49, y27, v33, E38, T21, D19);
    }
  }
  for (let t71 = 0; t71 < 4; ++t71)
    ae6[t71] = null;
}
function ee6(e68, t71) {
  var _a, _b;
  const n61 = 4 * t71, o58 = ee5.reduce((t72, o59) => {
    var _a2;
    return Math.min(t72, ((_a2 = e68[n61 + o59]) == null ? void 0 : _a2.level) ?? 1 / 0);
  }, 1 / 0);
  T7 && (p15(!e68[n61 + 0] || !e68[n61 + 2] || de3(e68[n61 + 0], e68[n61 + 2], S8.SOUTH_WEST)), p15(!e68[n61 + 1] || !e68[n61 + 3] || de3(e68[n61 + 1], e68[n61 + 3], S8.NORTH_WEST)));
  let r55 = 0, a61 = 0;
  for (let i47 = 0; i47 < 4; ++i47) {
    const t72 = e68[n61 + i47];
    if (t72 && t72.level === o58) {
      const e69 = 0 === i47 || 1 === i47, n62 = 0 === i47 || 3 === i47, o59 = t72.extent, c45 = o59[e69 ? 0 : 2], l45 = o59[n62 ? 1 : 3], u46 = (_b = (_a = t72.renderData) == null ? void 0 : _a.geometryState) == null ? void 0 : _b.samplerData;
      a61 += e53(c45, l45, u46), r55++;
    }
  }
  const c44 = r55 ? a61 / r55 : 0;
  return p15(null != c44), c44;
}
function te5(e68) {
  const { vao: t71, geometry: n61 } = e68, { vertexAttributes: o58, edgeVerticesStartIndex: s71 } = n61, r55 = o58.position.typedBuffer;
  t71.vertexBuffers.geometry.setSubData(r55, s71, s71, r55.length);
}
function ne6(e68) {
  const { vao: t71, geometry: n61 } = e68, { indices: o58, indexCount: s71, edgeIndicesStartIndex: r55 } = n61;
  t71.indexBuffer.setSubData(o58, r55, r55, s71);
}
var oe5 = class {
  constructor(e68, t71, n61, o58, s71) {
    this.isNorth = e68, this.connectedRowOffset = t71, this.connectedOuterEdgeOffset = n61, this.rowOffset = o58, this.latitudeResolution = s71;
  }
};
var se7 = [[0, 1], [1, 0], [0, -1], [-1, 0]];
var re5 = new t55();
var ie6 = a7(-1 / 0, -1 / 0, 1 / 0, 1 / 0);
var ae6 = [null, null, null, null];
function ce6(e68, t71, n61) {
  if (!t71)
    return false;
  const o58 = u17(e68, t71);
  return o58 > 0 || 0 === o58 && n61 >= 2;
}
var le5 = class {
  constructor() {
    this.vertex0Index = 0, this.stride = 1, this.count = 0;
  }
  getVertexIndex(e68) {
    return p15(0 <= e68 && e68 < this.count), this.vertex0Index + this.stride * e68;
  }
};
var ue4 = [new le5(), new le5(), new le5(), new le5()];
function de4(e68, t71, n61, o58) {
  e68 < o58[0] ? o58[0] = e68 : e68 > o58[3] && (o58[3] = e68), t71 < o58[1] ? o58[1] = t71 : t71 > o58[4] && (o58[4] = t71), n61 < o58[2] ? o58[2] = n61 : n61 > o58[5] && (o58[5] = n61);
}
function fe3(e68) {
  const { edgeResolutions: t71, numVerticesPerSide: n61 } = e68, o58 = 1 + Math.max(...t71);
  return Math.max(n61, o58);
}
function me4(e68, t71, n61, o58, s71, r55) {
  const i47 = e68 * s71, a61 = r55[i47], c44 = r55[i47 + 1], l45 = r55[i47 + 2], u46 = t71 * s71, d44 = r55[u46], f48 = r55[u46 + 1], m46 = r55[u46 + 2], g23 = n61 * s71, p48 = r55[g23], x31 = r55[g23 + 1], h36 = r55[g23 + 2], M21 = o58 * s71, S24 = r55[M21], y26 = r55[M21 + 1], v32 = r55[M21 + 2];
  return (d44 - S24) * (d44 - S24) + (f48 - y26) * (f48 - y26) + (m46 - v32) * (m46 - v32) > (a61 - p48) * (a61 - p48) + (c44 - x31) * (c44 - x31) + (l45 - h36) * (l45 - h36);
}
function ge3(e68, t71, n61, o58, s71) {
  e68[t71] = n61, e68[t71 + 1] = o58, e68[t71 + 2] = o58, e68[t71 + 3] = s71, e68[t71 + 4] = s71, e68[t71 + 5] = n61;
}
var pe4 = 6;

// node_modules/@arcgis/core/views/3d/terrain/PlanarPatch.js
var _23 = class extends te4 {
  constructor(e68, t71, r55, o58, i47) {
    super(), this._horizontalScaleFactor = 1, this._extentInRenderSR = u5(), this._baseUsedMemory = 900, this._subtreeGeometryElevationBoundMin = 0, this._subtreeGeometryElevationBoundMax = 0, this.init(e68, t71, r55, o58, i47);
  }
  init(t71, i47, s71, a61, l45) {
    super.init(t71, i47, s71, a61, l45);
    const u46 = l45.view.renderSpatialReference, h36 = l45.spatialReference, d44 = null != u46 && O(u46) && null != h36 && h36.isGeographic ? this.ellipsoid.radius * Math.PI / 180 : 1;
    this._horizontalScaleFactor = d44;
    const { isWebMercatorOnPlateCarree: c44 } = l45, m46 = this._extentInRenderSR, p48 = this.extent;
    if (c44) {
      const t72 = r4(p48[0], p48[1], 0);
      n12(t72, f2.WebMercator, t72, f2.PlateCarree);
      const i48 = r4(p48[2], p48[3], 0);
      n12(i48, f2.WebMercator, i48, f2.PlateCarree), m46[0] = t72[0], m46[1] = t72[1], m46[2] = i48[0], m46[3] = i48[1];
    } else
      for (let e68 = 0; e68 < 4; ++e68)
        m46[e68] = p48[e68] * d44;
    this.centerAtSeaLevel[0] = 0.5 * (m46[0] + m46[2]), this.centerAtSeaLevel[1] = 0.5 * (m46[1] + m46[3]), this.centerAtSeaLevel[2] = 0, this._edgeLen = Math.max(m46[2] - m46[0], m46[3] - m46[1]), this._edgeLen2 = this._edgeLen * this._edgeLen, this.updateRadiusAndCenter();
  }
  updateRadiusAndCenter() {
    this._updateCenter();
    const e68 = this._extentInRenderSR, t71 = 0.5 * (e68[2] - e68[0]), r55 = 0.5 * (e68[3] - e68[1]), o58 = Math.sqrt(t71 * t71 + r55 * r55), i47 = 0.5 * (this.elevationBoundsMax - this.elevationBoundsMin), s71 = Math.max(o58, i47);
    this._center[oe4.MIDDLE][3] = s71;
  }
  _calculateFrustumVisibilityStatus(e68) {
    const t71 = this._aabb(), r55 = t71[0], o58 = t71[1], i47 = t71[2], s71 = t71[3], n61 = t71[4], l45 = t71[5];
    let u46 = true;
    for (let h36 = 0; h36 < 6; h36++) {
      const t72 = e68[h36], d44 = t72[0], c44 = t72[1], m46 = t72[2], p48 = t72[3];
      if (d44 * (d44 > 0 ? r55 : s71) + c44 * (c44 > 0 ? o58 : n61) + m46 * (m46 > 0 ? i47 : l45) + p48 >= 0)
        return T6.OUTSIDE;
      u46 = u46 && d44 * (d44 < 0 ? r55 : s71) + c44 * (c44 < 0 ? o58 : n61) + m46 * (m46 < 0 ? i47 : l45) + p48 <= 0;
    }
    return u46 ? T6.INSIDE : T6.INTERSECTS;
  }
  _aabb() {
    const e68 = this._extentInRenderSR;
    return k(e68[0], e68[1], Math.min(this.elevationBoundsMin, this._subtreeGeometryElevationBoundMin), e68[2], e68[3], Math.max(this.elevationBoundsMax, this._subtreeGeometryElevationBoundMax));
  }
  intersectsRay(e68, t71, r55, o58) {
    return b17[0] = 1 / t71[0], b17[1] = 1 / t71[1], b17[2] = 1 / t71[2], w8(this._aabb(), e68, b17, r55, o58);
  }
  createGeometry() {
    T17(this.renderData, this._horizontalScaleFactor), this._updateSubtreeGeometryElevationsBounds(), this.setMemoryDirty();
  }
  _updateSubtreeGeometryElevationsBounds() {
    const e68 = this._subtreeGeometryElevationBoundMin, t71 = this._subtreeGeometryElevationBoundMax, r55 = this.renderData;
    let o58 = e68, i47 = t71;
    if (r55) {
      const e69 = r55.geometry.boundingBox;
      o58 = e69[2], i47 = e69[5];
    } else if (!this.isLeaf) {
      o58 = 1 / 0, i47 = -1 / 0;
      for (const e69 of this.children)
        o58 = Math.min(o58, e69._subtreeGeometryElevationBoundMin), i47 = Math.max(i47, e69._subtreeGeometryElevationBoundMax);
    }
    if (o58 !== this._subtreeGeometryElevationBoundMin || i47 !== this._subtreeGeometryElevationBoundMax) {
      this._subtreeGeometryElevationBoundMin = o58, this._subtreeGeometryElevationBoundMax = i47;
      const e69 = this.parent;
      e69 == null ? void 0 : e69._updateSubtreeGeometryElevationsBounds();
    }
  }
  getDefaultVerticesPerSide() {
    return this.level < 9 ? 3 : 2;
  }
  updateCornerElevations() {
    R11(this.renderData, this._horizontalScaleFactor), this._updateSubtreeGeometryElevationsBounds();
  }
  updateEdgeElevations() {
    w22(this.renderData, this._horizontalScaleFactor), this._updateSubtreeGeometryElevationsBounds();
  }
  updateEdgeElevationsAndResolutions() {
    U18(this.renderData, this._horizontalScaleFactor), this._updateSubtreeGeometryElevationsBounds();
  }
  get horizontalScale() {
    return this._horizontalScaleFactor;
  }
};
var b17 = n7();

// node_modules/@arcgis/core/views/3d/terrain/ScaleRangeQueries.js
var l39 = class {
  constructor() {
    this.extent = n11(), this.minLevel = 0, this.maxLevel = 0, this.callback = null;
  }
};
var a49 = class extends S3 {
  constructor() {
    super(...arguments), this._queries = new l3({ initialSize: 10 }), this._queriesInvPtr = 0, this._queryQueue = new l3({ initialSize: 30 }), this._queryPool = new e4(l39);
  }
  queryVisibleLevelRange(e68, t71, s71, r55) {
    const i47 = this._queryPool.acquire();
    a9(i47.extent, e68), i47.minLevel = t71 ?? -Number.MAX_VALUE, i47.maxLevel = s71 ?? Number.MAX_VALUE, i47.callback = r55, this._queryQueue.push(i47), this.notifyChange("updating");
  }
  get updating() {
    return 0 !== this._queryQueue.length;
  }
  prepare() {
    for (; this._queries.length < this._queries.data.length && this._queryQueue.length > 0; ) {
      const e68 = this._queryQueue.pop();
      this._queries.push(e68);
    }
    this._queriesInvPtr = this._queries.length;
  }
  process() {
    for (let e68 = 0; e68 < this._queries.length; e68++) {
      const t71 = this._queries.data[e68];
      this._queryPool.release(t71), t71.callback(e68 >= this._queriesInvPtr), t71.callback = null;
    }
    this._queries.clear(), this.notifyChange("updating");
  }
  queriesForTile(e68) {
    const t71 = e68.level;
    let s71 = 0;
    for (; s71 < this._queriesInvPtr; ) {
      const r55 = this._queries.data[s71], i47 = r55.extent;
      t71 >= r55.minLevel && t71 <= r55.maxLevel && i47[0] <= e68.extent[2] && i47[2] >= e68.extent[0] && i47[1] <= e68.extent[3] && i47[3] >= e68.extent[1] ? (this._queries.swapElements(s71, this._queriesInvPtr - 1), this._queriesInvPtr--) : s71++;
    }
  }
};
e([y2()], a49.prototype, "updating", null), a49 = e([a4("esri.views.3d.terrain.ScaleRangeQueries")], a49);

// node_modules/@arcgis/core/geometry/projection/lonLatToSphericalPCPF.js
function t59(t71, n61, o58, s71) {
  const a61 = Math.cos(o58);
  t71[0] = Math.cos(n61) * a61 * s71, t71[1] = Math.sin(n61) * a61 * s71, t71[2] = Math.sin(o58) * s71;
}

// node_modules/@arcgis/core/views/3d/terrain/SphericalPatch.js
var D13 = class extends te4 {
  constructor(t71, e68, i47, s71, o58) {
    super(), this._convexHull = new Array(24), this._boundingSphere = w6(), this._baseUsedMemory = 1816, this.init(t71, e68, i47, s71, o58);
  }
  init(i47, s71, o58, n61, r55) {
    super.init(i47, s71, o58, n61, r55);
    const l45 = this.ellipsoid.radius, a61 = this.extentInRadians[0], h36 = this.extentInRadians[1], u46 = this.extentInRadians[2], c44 = this.extentInRadians[3], p48 = f4(h36, c44, 0.5), f48 = f4(a61, u46, 0.5), m46 = 0 === i47 ? 0 : Math.min(Math.abs(h36), Math.abs(c44));
    this._edgeLen = (u46 - a61) * Math.cos(m46) * l45, this._edgeLen2 = this._edgeLen * this._edgeLen, this._curvatureHeight = l45 - Math.sqrt(l45 * l45 - this._edgeLen2 / 4), t59(this.centerAtSeaLevel, f48, p48, this.ellipsoid.radius), z2(this.up, this.centerAtSeaLevel), this.updateRadiusAndCenter();
  }
  updateRadiusAndCenter() {
    this._updateBoundingVolumes();
    const t71 = this._center;
    if (0 === this.lij[0])
      o4(Z(t71[oe4.MIDDLE]), 0, 0, 0), o4(t71[oe4.TOP], 0, 0, 0), o4(t71[oe4.BOTTOM], 0, 0, 0), t71[oe4.MIDDLE][3] = this.ellipsoid.radius + this.elevationBoundsMax;
    else {
      this._updateCenter();
      const e68 = t71[oe4.MIDDLE], i47 = this.convexHull;
      let s71 = 0;
      for (let t72 = 0; t72 < 8; ++t72)
        s71 = Math.max(s71, y22(Z(e68), i47, 3 * t72));
      t71[oe4.MIDDLE][3] = Math.sqrt(s71);
    }
  }
  _calculateFrustumVisibilityStatus(t71) {
    if (!s18(t71, this._boundingSphere))
      return T6.OUTSIDE;
    if (this.lij[0] < 10)
      return T6.INTERSECTS;
    const e68 = this.convexHull, i47 = this.surface.view.state.camera.near;
    let s71 = true;
    for (let o58 = 0; o58 < b5; o58++) {
      const n61 = o58 === j6.NEAR, r55 = t71[o58], l45 = r55[0], a61 = r55[1], h36 = r55[2], u46 = r55[3] - (n61 ? i47 : 0);
      let d44 = false;
      for (let t72 = 0; t72 < 8; ++t72) {
        const i48 = 3 * t72;
        if (l45 * e68[i48] + a61 * e68[i48 + 1] + h36 * e68[i48 + 2] + u46 < 0) {
          if (d44 = true, !s71)
            break;
        } else
          s71 = false;
      }
      if (!d44)
        return T6.OUTSIDE;
    }
    return s71 ? T6.INSIDE : T6.INTERSECTS;
  }
  computeElevationBounds() {
    super.computeElevationBounds(), this._updateBoundingVolumes();
  }
  createGeometry() {
    S18(this.renderData, this._getPatchType()), this._updateBoundingVolumes(), this.setMemoryDirty();
  }
  _updateBoundingVolumes() {
    this._updateConvexHull(), this._updateBoundingSphere(), T7 && this._checkBVs();
  }
  _updateBoundingSphere() {
    const t71 = this._boundingSphere, e68 = Z(t71), r55 = this.elevationBoundsMin, l45 = this.elevationBoundsMax, a61 = this.ellipsoid.radius, h36 = l45;
    if (0 === this.level)
      o4(e68, 0, 0, 0), t71[3] = a61 + h36;
    else {
      const i47 = this.extentInRadians, h37 = 0.5 * (i47[0] + i47[2]), u46 = i47[1], d44 = i47[3];
      O25(A25, h37, u46, a61), O25(V13, h37, d44, a61), u4(e68, A25, V13);
      g2(e68, e68, (a61 + 0.5 * (r55 + l45)) / Y(e68));
      const c44 = this.convexHull;
      let p48 = 0;
      const f48 = (t72, e69) => {
        const i48 = t72[0] - c44[3 * e69], s71 = t72[1] - c44[3 * e69 + 1], o58 = t72[2] - c44[3 * e69 + 2];
        return Math.sqrt(i48 * i48 + s71 * s71 + o58 * o58);
      };
      for (let t72 = 0; t72 < 8; ++t72) {
        const i48 = f48(e68, t72);
        p48 = Math.max(p48, i48);
      }
      const m46 = p48;
      t71[3] = m46 + 2;
    }
  }
  _updateConvexHull() {
    const t71 = this.extentInRadians, i47 = this.ellipsoid.radius;
    if (0 === this.level)
      return;
    const a61 = this.elevationBoundsMin, d44 = this.elevationBoundsMax, c44 = this._getPatchType(), p48 = this.surface.isWebMercator, f48 = p48 && c44 === O12.HAS_NORTH_POLE, m46 = p48 && c44 === O12.HAS_SOUTH_POLE, g23 = m46 || f48, x31 = Math.PI / 2, _26 = t71[0], v32 = t71[2], M21 = m46 ? -x31 : t71[1], S24 = f48 ? x31 : t71[3], b22 = 0.5 * (_26 + v32), j26 = a61, H22 = i47 + (g23 ? Math.min(0, j26 - 1) : j26), I27 = (t72, e68, i48) => O25(t72, e68, i48, H22), B18 = n7(), D19 = n7(), L24 = n7(), y26 = n7();
    I27(B18, _26, M21), I27(D19, _26, S24), I27(L24, v32, S24), I27(y26, v32, M21);
    const R18 = (t72, e68) => {
      for (let i48 = 0; i48 < 3; ++i48)
        this._convexHull[3 * e68 + i48] = t72[i48];
    };
    R18(B18, 0), R18(D19, 1), R18(L24, 2), R18(y26, 3);
    const A32 = d44, V17 = i47 + (g23 ? Math.max(0, A32 + 1) : A32), C28 = n7(), N20 = n7(), U23 = n7();
    O25(N20, b22, S24, H22), O25(U23, b22, M21, H22), u4(C28, N20, U23), z2(C28, C28);
    const k26 = n7(), F20 = n7(), w27 = (t72, i48) => {
      K(F20, t72, i48), z2(F20, F20);
      const n61 = -P3(t72, k26) / P3(F20, k26);
      p15(n61 >= 0), g2(F20, F20, n61), u4(t72, t72, F20);
    };
    if (2 ** this.lij[0] > 2 * this.lij[1]) {
      const t72 = U23, i48 = n7();
      _(i48, P15, t72), z2(i48, i48), _(k26, t72, i48), z2(k26, k26), p15(D4(P3(k26, t72) / Y(t72), 0)), w27(B18, D19), w27(y26, L24), R18(B18, 0), R18(y26, 3);
    } else if (2 ** this.lij[0] !== 2 * this.lij[1]) {
      const t72 = N20, i48 = n7();
      _(i48, P15, t72), z2(i48, i48), _(k26, i48, t72), z2(k26, k26), w27(D19, B18), w27(L24, y26), R18(D19, 1), R18(L24, 2);
    }
    const q21 = (t72, e68) => {
      const i48 = V17 / P3(e68, C28);
      for (let s71 = 0; s71 < 3; ++s71)
        this._convexHull[3 * t72 + s71] = e68[s71] * i48;
    };
    q21(4, B18), q21(5, D19), q21(6, L24), q21(7, y26);
  }
  _getPatchType() {
    const t71 = this.lij[1], e68 = 0 === t71, i47 = t71 === (1 << this.level) - 1;
    return e68 ? i47 ? O12.HAS_BOTH_POLES : O12.HAS_NORTH_POLE : i47 ? O12.HAS_SOUTH_POLE : O12.REGULAR;
  }
  intersectsRay(t71, e68, i47, s71) {
    const o58 = this._boundingSphere, n61 = o58[3] + i47, r55 = e68[0] * e68[0] + e68[1] * e68[1] + e68[2] * e68[2], l45 = o58[0] - t71[0], a61 = o58[1] - t71[1], h36 = o58[2] - t71[2], u46 = (l45 * e68[0] + a61 * e68[1] + h36 * e68[2]) / r55, d44 = e68[0] * u46 - l45, c44 = e68[1] * u46 - a61, p48 = e68[2] * u46 - h36;
    return d44 * d44 + c44 * c44 + p48 * p48 < n61 * n61;
  }
  getDefaultVerticesPerSide() {
    return this.level < L21.length ? L21[this.level] + 1 : 2;
  }
  updateCornerElevations() {
    I23(this.renderData), this._updateBoundingVolumes();
  }
  updateEdgeElevations() {
    L20(this.renderData), this._updateBoundingVolumes();
  }
  updateEdgeElevationsAndResolutions() {
    B13(this.renderData), this._updateBoundingVolumes();
  }
  _checkBVs() {
    var _a;
    if (!T7)
      return;
    if (this.level <= 2)
      return;
    const t71 = this._boundingSphere, i47 = t71[3], o58 = Z(t71), d44 = n7(), p48 = this.ellipsoid.radius, f48 = this.elevationBoundsMin, m46 = this.elevationBoundsMax, g23 = p48 + f48, $10 = 1, _26 = 0, v32 = this._center[oe4.MIDDLE][3], M21 = this.convexHull, S24 = (t72, e68) => {
      for (let i48 = 0; i48 < 3; ++i48)
        t72[i48] = M21[3 * e68 + i48];
    };
    {
      const t72 = n7(), i48 = n7(), s71 = n7(), o59 = n7(), n61 = n7(), a61 = (a62, u46, d45, c44) => {
        S24(i48, a62), S24(s71, u46), S24(o59, d45), K(i48, i48, s71), K(o59, o59, s71), _(t72, i48, o59), z2(t72, t72);
        const p49 = P3(t72, s71);
        S24(n61, c44);
        const f49 = P3(t72, n61), m47 = Math.abs(f49 - p49);
        p15(D4(m47, 0), `Non coplanar ${a62},${u46},${d45},${c44} diff = ${m47}`);
      };
      a61(0, 1, 2, 3), a61(4, 5, 6, 7), a61(0, 1, 4, 5), a61(1, 2, 5, 6), a61(2, 3, 6, 7), a61(3, 0, 7, 4);
    }
    const b22 = t8(24), H22 = (t72, e68, i48) => {
      const s71 = 4 * t72;
      for (let o59 = 0; o59 < 3; ++o59)
        b22[s71 + o59] = e68[o59];
      b22[s71 + 3] = i48;
    }, D19 = n7(), L24 = n7(), y26 = n7(), P20 = n7(), A32 = (t72, i48, s71, o59) => {
      S24(D19, i48), S24(L24, s71), S24(y26, o59), K(D19, D19, L24), z2(D19, D19), K(y26, y26, L24), z2(y26, y26), _(P20, D19, y26), z2(P20, P20);
      const n61 = P3(P20, L24);
      H22(t72, P20, n61);
    };
    A32(0, 0, 1, 2), A32(1, 1, 0, 4), A32(2, 1, 5, 2), A32(3, 3, 2, 6), A32(4, 4, 0, 3), A32(5, 4, 6, 5);
    const V17 = 1, C28 = (t72, e68, i48, s71) => {
      const o59 = 4 * t72;
      return b22[o59] * e68 + b22[o59 + 1] * i48 + b22[o59 + 2] * s71 - b22[o59 + 3];
    }, N20 = (t72, e68, i48, s71) => C28(t72, e68, i48, s71) >= -V17, U23 = (t72, e68) => N20(t72, e68[0], e68[1], e68[2]), k26 = 2 ** this.lij[0] > 2 * this.lij[1], F20 = (t72, e68, s71) => Math.sqrt(R12(t72, e68, s71, o58[0], o58[1], o58[2])) < i47, w27 = (t72) => F20(t72[0], t72[1], t72[2]), q21 = (t72, e68) => F20(t72[e68], t72[e68 + 1], t72[e68 + 2]), G19 = this.extentInRadians, z24 = 0.5 * (G19[0] + G19[2]), W11 = G19[1], J12 = G19[3], K14 = n7(), Q16 = n7();
    O25(K14, z24, J12, g23), O25(Q16, z24, W11, g23);
    const X13 = k26 ? "Upper" : "Lower";
    let Y14 = true;
    for (let e68 = 0; e68 < 6; ++e68) {
      for (let t72 = 0; t72 < 8; ++t72) {
        const i48 = 3 * t72, s71 = N20(e68, M21[i48], M21[i48 + 1], M21[i48 + 2]);
        Y14 && (Y14 = s71), p15(s71, `Tile[${this.lij}] Convex hull point ${t72} outside of plane ${e68}`);
      }
      p15(U23(e68, Q16), `Tile[${this.lij}] (${X13}) bottom mid outside of plane ${e68}`), p15(U23(e68, K14), `Tile[${this.lij}] (${X13}) top mid outside of plane ${e68}`);
    }
    p15(Y14, "Not all convex hull points are inside  convex hull polyhedron"), p15(w27(Q16), `Tile[${this.lij}] (${X13}) bottom mid outside of bounding sphere`), p15(w27(K14), `Tile[${this.lij}] (${X13}) top mid outside of bounding sphere`);
    for (let e68 = 0; e68 < 8; ++e68) {
      const t72 = q21(M21, 3 * e68);
      p15(t72, `Tile[${this.lij}] Convex hull point ${e68} outside of bounding sphere`);
    }
    for (let e68 = 0; e68 < 6; ++e68)
      for (let t72 = 0; t72 < 8; ++t72) {
        const i48 = 3 * t72;
        N20(e68, M21[i48], M21[i48 + 1], M21[i48 + 2]) || console.error(`Tile[${this.lij}] Convex hull point ${t72} outside of plane ${e68}`);
      }
    const { extentInRadians: Z11 } = this, tt4 = Math.max(Z11[2] - Z11[0], Z11[3] - Z11[1]), et3 = Math.round(tt4 * p48), { renderData: it5 } = this;
    if (!it5)
      return;
    const { geometry: st4, geometryState: ot3, localOrigin: nt4 } = it5, rt5 = (_a = st4.vertexAttributes) == null ? void 0 : _a.position;
    if (!rt5)
      return;
    const lt4 = n7(), at4 = st4.numVerticesPerSide - 2, { indices: ht3, indexCount: ut2, edgeVerticesStartIndex: dt3, poleVerticesStartIndex: ct3 } = st4;
    if (!ht3)
      return;
    const pt2 = /* @__PURE__ */ new Set();
    for (let e68 = 0; e68 < ut2; ++e68) {
      const t72 = ht3[e68];
      if (pt2.has(t72))
        continue;
      pt2.add(t72);
      const r55 = t72 < ct3, l45 = t72 >= dt3;
      let h36 = false, u46 = -1;
      if (l45) {
        let e69 = dt3;
        for (let i48 = 0; i48 < 4; ++i48) {
          const s71 = ot3.edgeResolutions[i48];
          if (t72 === e69 || t72 === e69 + s71 - 1) {
            h36 = true;
            break;
          }
          if (e69 += s71, t72 < e69) {
            u46 = i48;
            break;
          }
        }
      }
      const c44 = l45 ? ot3.edgePeerNeighbors[u46] : null, g24 = l45 && c44 && u17(this, c44) > 0;
      rt5.getVec(t72, d44), u4(lt4, d44, nt4);
      const x31 = Y(lt4) - p48;
      let M22 = 0, S25 = false;
      const b23 = f48 - x31, j26 = x31 - m46, T21 = b23 > $10, E38 = j26 > $10, H23 = T21 || E38, I27 = () => {
        const e69 = r55 ? "internal" : l45 && !h36 ? "edge" : h36 ? "corner" : "pole";
        return `Tile[${this.lij}].vertex[${t72}]:${e69}` + (T21 ? "(below)" : E38 ? "(above)" : "") + (g24 ? "(Neighbor)" : "");
      }, D20 = U2(lt4, o58);
      if (D20 >= i47 + _26) {
        const t73 = D20 - i47;
        H23 || (console.error(`${I27()} is out of the bounding sphere by ${t73.toFixed(0)} / ${i47.toFixed(0)}[tol=${_26}] h=${x31.toFixed(0)} / [${f48.toFixed(0)}..${m46.toFixed(0)}] (${(t73 / i47).toFixed(0)})`), S25 = true);
      }
      for (let e69 = 0; e69 < 6; ++e69)
        if (!N20(e69, lt4[0], lt4[1], lt4[2])) {
          const s71 = C28(e69, lt4[0], lt4[1], lt4[2]), o59 = t72 % at4, n61 = (t72 - o59) / at4;
          0 === e69 && b23 || 5 === e69 && j26 || (console.error(`${I27()} (${o59},${n61})|${at4}] is out of the bounding trapezoid plane ${e69} h=${Math.round(x31)} / [${Math.round(f48)}..${Math.round(m46)}] dist=${Math.round(s71)} radii = ${Math.round(i47)}/${Math.round(v32)}} : maxL = ${et3}`), ++M22);
        }
      if (S25 || M22 > 0)
        break;
    }
  }
  get convexHull() {
    return this._convexHull;
  }
};
var L21 = [128, 64, 64, 32, 16, 8, 8, 4];
function y22(t71, e68, i47) {
  return R12(t71[0], t71[1], t71[2], e68[i47], e68[i47 + 1], e68[i47 + 2]);
}
function R12(t71, e68, i47, s71, o58, n61) {
  const r55 = s71 - t71, l45 = o58 - e68, a61 = n61 - i47;
  return r55 * r55 + l45 * l45 + a61 * a61;
}
var O25 = (t71, e68, i47, s71) => {
  const o58 = Math.cos(e68), n61 = Math.sin(e68), r55 = Math.cos(i47), l45 = Math.sin(i47);
  t71[0] = s71 * r55 * o58, t71[1] = s71 * r55 * n61, t71[2] = s71 * l45;
};
var P15 = [0, 0, 1];
var A25 = n7();
var V13 = n7();

// node_modules/@arcgis/core/views/3d/terrain/SplitLimits.js
var e55 = class extends S3 {
  constructor() {
    super(...arguments), this.fovX = 0, this.fovY = 0, this.relativeWidthLimit = 0, this.relativeHeightLimit = 0, this.maxLod = 0, this.angledSplitBias = 0, this.aboveGround = true;
  }
};
e([y2()], e55.prototype, "fovX", void 0), e([y2()], e55.prototype, "fovY", void 0), e([y2()], e55.prototype, "relativeWidthLimit", void 0), e([y2()], e55.prototype, "relativeHeightLimit", void 0), e([y2()], e55.prototype, "maxLod", void 0), e([y2()], e55.prototype, "angledSplitBias", void 0), e([y2()], e55.prototype, "aboveGround", void 0), e([y2()], e55.prototype, "frustum", void 0), e55 = e([a4("esri.views.3d.terrain.SplitLimits")], e55);

// node_modules/@arcgis/core/views/3d/terrain/TerrainAttributes.js
var t60 = H2().vec3f(e18.POSITION).vec2i16(e18.UV0).vec2i16(e18.NORMALCOMPRESSED, { glNormalized: true });

// node_modules/@arcgis/core/views/3d/terrain/TerrainAttributesCache.js
var t61 = class {
  constructor(r55) {
    this._storage = new c17((e68, t71) => r55.newCache(e68, t71), "TileGeometry");
  }
  acquire(e68) {
    const t71 = 4, s71 = Math.ceil(e68 / t71) * t71, a61 = this._storage, c44 = o49(s71), i47 = a61.pop(c44);
    if (i47)
      return i47;
    const n61 = t60.createBuffer(s71);
    return n61.release = () => a61.put(c44, n61), n61;
  }
  clear() {
    this._storage.clear();
  }
  destroy() {
    this._storage.destroy();
  }
};
function o49(e68) {
  return e68.toString();
}

// node_modules/@arcgis/core/views/3d/terrain/BlendModeTechniqueConfiguration.js
var s60 = class extends t19 {
  constructor() {
    super(...arguments), this.blendMode = t39.Normal;
  }
};
e([r17({ count: t39.COUNT })], s60.prototype, "blendMode", void 0);

// node_modules/@arcgis/core/views/3d/terrain/TileBlendTechniqueConfiguration.js
var p40 = class extends s60 {
  constructor() {
    super(...arguments), this.output = u18.Composite, this.baseOpacityMode = n34.NotRequired, this.premultipliedSource = d16.Off;
  }
};
e([r17({ count: u18.COUNT })], p40.prototype, "output", void 0), e([r17({ count: n34.COUNT })], p40.prototype, "baseOpacityMode", void 0), e([r17()], p40.prototype, "premultipliedSource", void 0);

// node_modules/@arcgis/core/views/3d/terrain/BlendLayersTechnique.js
var b18 = class extends a27 {
  constructor() {
    super(...arguments), this.opacity = 1, this.baseOpacity = 1, this.texture = null, this.fboTexture = null, this.backgroundColor = l5;
  }
};
var p41 = class _p extends r15 {
  initializeProgram(e68) {
    return new r16(e68.rctx, _p.shader.get().build(this.configuration), O9);
  }
  initializePipeline() {
    return S7({ blending: s22(R2.ONE, R2.ONE_MINUS_SRC_ALPHA), colorWrite: _8 });
  }
};
p41.shader = new t17(u20, () => import("./BlendLayers.glsl-LOZCE2BN.js"));
var f38 = class extends p40 {
  constructor() {
    super(...arguments), this.background = l20.BelowLayer;
  }
};
e([r17()], f38.prototype, "background", void 0);

// node_modules/@arcgis/core/views/3d/terrain/TextureReference.js
var s61 = class {
  constructor(s71, r55, o58, i47, a61, c44) {
    this.texture = s71, this.type = r55, s71.retain(), this.offsetAndScale = r6(o58.offset[0], o58.offset[1], o58.scale, o58.scale), this.opacities = r4(i47, a61, c44);
  }
  destroy() {
    this.texture.release();
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/VectorTileRendererHelper3D.js
var d38 = 0.125;
var c37 = class {
  constructor() {
    this._renderParams = { reshuffleManager: new s26(), context: null, drawPhase: 1, state: new U5({ viewpoint: new l13({ targetGeometry: new x(0, 0), scale: 1, rotation: 0 }), size: [256, 256] }), stationary: true, pixelRatio: 1, displayLevel: -1, requiredLevel: -1, globalOpacity: 1, renderPass: "background", styleLayer: null, styleLayerUID: -1, painter: null, glyphMosaic: null, spriteMosaic: null, profiler: null, renderingOptions: null, requestRender: null, allowDelayedRender: false, deltaTime: -1, timeline: null, time: 0, hasClipping: false, blendMode: null, dataUploadCounter: 0, effects: null, inFadeTransition: false, requireFBO: false, highlightGradient: null, stencilSymbols: true, is3D: true, backgroundColor: null }, this._backgroundTile = new t28(new e21(0, 0, 0, 0), 0, 0, 0, 512, 512, 4096, 4096);
  }
  dispose() {
    this._renderParams = null;
  }
  renderBackground(e68, t71, s71, i47, r55, n61, l45, a61, o58, d44) {
    const c44 = this._backgroundTile;
    this._updateRenderParameters(e68, t71, c44, s71, r55, n61, l45, a61, o58, d44), this._renderParams.stencilSymbols = false, s71.drawBackground(this._renderParams, c44, i47);
  }
  renderContent(e68, t71, s71, i47, r55, n61, a61, o58, d44, c44, m46, u46) {
    this._stencilSymbols(e68, t71, s71, i47, r55, n61, a61, Math.round(1 / o58), d44, c44, m46, u46);
    let p48 = 1;
    s71.stencilRef = p48++, e68.setStencilFunction(O8.EQUAL, s71.stencilRef, 255), this._render(e68, t71, s71, r55, n61, a61, o58, d44, c44, m46, u46), i47.forAll((t72) => {
      t72.sourceLayerInfo.data.stencilRef = p48++, this._renderSymbols(e68, t72.sourceLod, t72.sourceLayerInfo.data, r55, n61, a61, Math.round(1 / o58), t72.offset, c44, m46, u46);
    });
  }
  _stencilSymbols(e68, t71, s71, i47, r55, n61, o58, d44, c44, m46, u46, p48) {
    let f48 = 1;
    s71.stencilRef = f48++, e68.setDepthTestEnabled(false), e68.setDepthWriteEnabled(false), e68.setStencilTestEnabled(true), e68.setBlendingEnabled(false), e68.setColorMask(false, false, false, false), e68.setStencilOp(I3.KEEP, I3.KEEP, I3.REPLACE), e68.setStencilWriteMask(255), e68.setStencilFunction(O8.ALWAYS, s71.stencilRef, 255), this._stencilTileSymbols(e68, t71, s71, r55, n61, o58, d44, c44, m46, u46, p48);
    for (const a61 of i47.toArray()) {
      const { sourceLod: t72, offset: s72, sourceLayerInfo: i48 } = a61;
      i48.data.stencilRef = f48++, e68.setStencilFunction(O8.ALWAYS, i48.data.stencilRef, 255), this._stencilTileSymbols(e68, t72, i48.data, r55, n61, o58, d44, s72, m46, u46, p48);
    }
    e68.setStencilWriteMask(0), e68.setBlendingEnabled(true), e68.setDepthTestEnabled(true), e68.setColorMask(true, true, true, true);
  }
  _renderSymbols(e68, t71, s71, r55, n61, a61, o58, d44, c44, m46, u46) {
    e68.setStencilFunction(O8.EQUAL, s71.stencilRef, 255), this._render(e68, t71, s71, r55, n61, a61, o58, d44, c44, m46, u46, a16.SYMBOL);
  }
  _render(e68, t71, s71, i47, r55, n61, l45, a61, o58, d44, c44, m46) {
    this._updateRenderParameters(e68, t71, s71, i47, n61, l45, a61, o58, d44, c44), this._renderParams.stencilSymbols = false, i47.drawTile(this._renderParams, s71, r55, m46);
  }
  _stencilTileSymbols(e68, t71, s71, i47, r55, n61, l45, a61, o58, d44, c44) {
    this._updateRenderParameters(e68, t71, s71, i47, n61, l45, a61, o58, d44, c44), this._renderParams.stencilSymbols = true, s71.triangleCount = 0, i47.drawSymbols(this._renderParams, s71, r55);
  }
  _updateRenderParameters(e68, t71, s71, i47, r55, n61, l45, a61, o58, c44) {
    "type" in s71 && "vector-tile" === s71.type && !s71.stage && s71.attachWithContext(e68);
    const m46 = t71[0] - r55.getLevelShift(t71[0]), u46 = this._renderParams;
    u46.context = e68, u46.painter = i47, u46.glyphMosaic = i47.glyphMosaic, u46.spriteMosaic = i47.spriteMosaic, u46.pixelRatio = o58 * c44, u46.displayLevel = m46, u46.requiredLevel = m46;
    const p48 = r55.getScale(t71[0]), [f48, h36] = r55.getOffset(t71, n61 * p48), y26 = d38 * n61 * p48 / a61, g23 = s71.transforms.displayViewScreenMat3;
    g23[0] = y26, g23[4] = -y26, g23[6] = -1 - f48 - l45[0] * n61 * 2, g23[7] = 1 + h36 + (1 - l45[1]) * n61 * 2 - 2, u46.state.size[0] = a61 / c44, u46.state.size[1] = a61 / c44, u46.state.pixelRatio = c44;
  }
};

// node_modules/@arcgis/core/views/3d/terrain/RasterColorizerTechnique.js
var u38 = class _u extends r15 {
  initializeProgram(e68) {
    return new r16(e68.rctx, _u.shader.get().build(this.configuration), O9);
  }
  initializePipeline() {
    return S7({ blending: s22(R2.ONE, R2.ONE_MINUS_SRC_ALPHA), colorWrite: _8 });
  }
};
u38.shader = new t17(z8, () => import("./RasterColorizer.glsl-RLC4TKHC.js"));
var d39 = class extends p40 {
  constructor() {
    super(...arguments), this.colorizerType = t38.Stretch, this.stretchType = e33.Noop, this.applyColormap = true, this.requireBilinearWithNN = false;
  }
};
e([r17({ count: t38.COUNT })], d39.prototype, "colorizerType", void 0), e([r17({ count: e33.COUNT })], d39.prototype, "stretchType", void 0), e([r17()], d39.prototype, "applyColormap", void 0), e([r17()], d39.prototype, "requireBilinearWithNN", void 0);

// node_modules/@arcgis/core/views/3d/terrain/support/MultiSizeFramebuffer.js
var o50 = class {
  constructor(e68) {
    this._rctx = e68, this._fbos = /* @__PURE__ */ new Map();
  }
  get(e68) {
    return this._getPool(e68);
  }
  dispose() {
    this._fbos.forEach((e68) => e68.dispose()), this._fbos.clear();
  }
  _getPool(o58) {
    const i47 = this._fbos.get(o58);
    if (i47)
      return i47;
    const f48 = new x7(this._rctx, new e22(o58), new i9(B3.DEPTH24_STENCIL8, o58));
    return this._fbos.set(o58, f48), f48;
  }
};

// node_modules/@arcgis/core/views/3d/terrain/TileCompositor.js
var O26 = () => n.getLogger("esri.views.3d.terrain");
var I24 = class {
  constructor(e68, t71) {
    this._rctx = e68, this._techniqueRepository = t71, this._fbos = [], this._vectorTileHelper = new c37(), this._bindParameters = new m18(null, null), this._blendLayersTechniqueConfig = new f38(), this._current = 0, this._lastUsedIds = new Array(), this._lastCreatedBufferId = 0, this._onHoldIds = new Array(), this._vaoQuad = i18(this._rctx, m21);
  }
  dispose() {
    this._fbos.forEach(r2), this._fbos = null, this._vtFBO = r2(this._vtFBO), this._vaoQuad = r2(this._vaoQuad), this._vectorTileHelper = r2(this._vectorTileHelper), this._backgroundTechnique = t2(this._backgroundTechnique), this._applyOpacityTechnique = t2(this._applyOpacityTechnique), this._blendLayersTechnique = t2(this._blendLayersTechnique);
  }
  _getBlendLayersTechnique(e68, t71, r55, i47 = d16.Off, s71 = l20.BelowLayer) {
    return this._blendLayersTechniqueConfig.output = t71, this._blendLayersTechniqueConfig.blendMode = e68, this._blendLayersTechniqueConfig.baseOpacityMode = r55, this._blendLayersTechniqueConfig.premultipliedSource = i47, this._blendLayersTechniqueConfig.background = s71, this._blendLayersTechnique = this._techniqueRepository.releaseAndAcquire(p41, this._blendLayersTechniqueConfig, this._blendLayersTechnique), this._blendLayersTechnique;
  }
  drawBackground(e68, t71) {
    const r55 = this._getBlendLayersTechnique(t39.Normal, t71 ? u18.ColorComposite : u18.GridComposite, n34.NotRequired, d16.Off, l20.Only), i47 = this._rctx.bindTechnique(r55, this._bindParameters, e68);
    this._render(i47);
  }
  _render(e68) {
    this._rctx.bindVAO(this._vaoQuad), e68.assertCompatibleVertexAttributeLocations(this._vaoQuad), this._rctx.drawArrays(E7.TRIANGLE_STRIP, 0, i8(this._vaoQuad, "geometry"));
  }
  drawGroup(e68, t71, r55, i47, s71 = d16.On) {
    t71 === u18.Composite && (e68.fboTexture = this._fbos[this.getLastOnHoldId()].get(r55).colorTexture), e68.texture = this.currentFBO(r55).colorTexture, this.closeGroup(r55);
    const o58 = e68.baseOpacity < 1 ? n34.Required : n34.NotRequired, n61 = this._getBlendLayersTechnique(i47, t71, o58, s71), a61 = this._rctx.bindTechnique(n61, this._bindParameters, e68);
    this._render(a61);
  }
  drawRasterData(e68, t71, r55, i47, s71 = d16.Off) {
    if (null == e68.texture)
      return;
    const o58 = e68.baseOpacity < 1 ? n34.Required : n34.NotRequired;
    e68.fboTexture = t71 === u18.GroupBackgroundComposite || i47 === t39.Normal && o58 === n34.NotRequired && s71 === d16.Off ? null : this.switch(r55).colorTexture;
    const n61 = this._getBlendLayersTechnique(i47, t71, o58, s71), a61 = this._rctx.bindTechnique(n61, this._bindParameters, e68);
    this._render(a61);
  }
  drawImageryTileData(e68, t71, r55, i47, s71) {
    const o58 = s71.sourceLayerInfo.data;
    if (!o58.source)
      return;
    if (s71.tile.surface.layerViewByIndex(s71.layerIndex, A23.MAP).ensureSymbolizerParameters(o58), !o58.bind(this._rctx))
      return;
    const n61 = e68.baseOpacity < 1 ? n34.Required : n34.NotRequired;
    e68.fboTexture = i47 === t39.Normal && n61 === n34.NotRequired ? null : this.switch(r55).colorTexture;
    const a61 = this._getRasterColorizerTechnique(o58, t71, i47, n61);
    o58.opacity = e68.opacity;
    const h36 = o58.getUniforms();
    h36.scale = s71.scale, h36.offset = s71.offset, h36.backgroundColor = e68.backgroundColor, h36.fboTexture = e68.fboTexture, h36.baseOpacity = e68.baseOpacity;
    const c44 = this._rctx.bindTechnique(a61, null, h36);
    this._render(c44);
  }
  _getRasterColorizerTechnique(e68, t71, r55, i47) {
    const o58 = e68.symbolizerParameters, n61 = ["stretch", "lut", "hillshade"].indexOf(o58.type);
    return null == this._rasterColorizerConfig && (this._rasterColorizerConfig = new d39(), this._rctx.gl.getExtension("WEBGL_color_buffer_float"), this._rctx.gl.getExtension("OES_texture_float")), this._rasterColorizerConfig.output = t71, this._rasterColorizerConfig.blendMode = r55, this._rasterColorizerConfig.baseOpacityMode = i47, this._rasterColorizerConfig.colorizerType = n61, this._rasterColorizerConfig.applyColormap = !!o58.colormap, this._rasterColorizerConfig.requireBilinearWithNN = e68.isBilinearWithStretchColorRamp, this._rasterColorizerConfig.stretchType = e68.hasStretchTypeNone() ? e33.Noop : e33.PerBand, this._rasterColorizerTechnique = this._techniqueRepository.releaseAndAcquire(u38, this._rasterColorizerConfig, this._rasterColorizerTechnique), this._rasterColorizerTechnique;
  }
  drawVectorData(e68, t71, r55, s71, o58, n61, a61, h36) {
    const c44 = this._rctx, b22 = o58.sourceLayerInfo.data, g23 = o58.tile.surface.layerViewByIndex(o58.layerIndex, A23.MAP), T21 = e68.baseOpacity < 1 ? n34.Required : n34.NotRequired, m46 = T21 === n34.Required || e68.opacity < 1 || s71 !== t39.Normal || t71 !== u18.Composite, y26 = m46 ? d16.On : d16.Off, C28 = this._getBlendLayersTechnique(s71, t71, T21, y26);
    c44.setPipelineState(C28.getPipeline());
    let B18 = null, q21 = null;
    m46 ? (q21 = this.currentFBO(r55), null == this._vtFBO && (this._vtFBO = new o50(this._rctx)), B18 = this._vtFBO.get(r55), c44.bindFramebuffer(B18), this._clearCurrentFBO()) : h36 && c44.clear(_6.DEPTH_BUFFER_BIT);
    try {
      this._vectorTileHelper.renderBackground(c44, o58.sourceLod, g23.painter, g23.layer.styleRepository, g23.schemaHelper, Math.round(1 / o58.scale), o58.offset, a61, n61, g23.contentZoom), b22 && this._vectorTileHelper.renderContent(c44, o58.sourceLod, b22, o58.vtlNeighborInfos, g23.painter, g23.layer.styleRepository, g23.schemaHelper, Math.round(1 / o58.scale), o58.offset, a61, n61, g23.contentZoom);
    } catch (I27) {
      O26().warnOnce("A render call containing vector tiles did not resolve correctly.", I27);
    }
    return null == B18 || (c44.bindFramebuffer(q21), e68.texture = B18.colorTexture, e68.offset = a11, e68.scale = 1, this.drawRasterData(e68, t71, r55, s71, y26), h36);
  }
  copyFBOToTexture(e68) {
    const t71 = this._rctx, r55 = t71.bindTexture(e68.texture, m11.TEXTURE_UNIT_FOR_UPDATES), i47 = e68.descriptor;
    t71.gl.copyTexImage2D(M3.TEXTURE_2D, 0, i47.pixelFormat, 0, 0, i47.width, i47.height, 0), e68.generateMipmap(), t71.bindTexture(r55, m11.TEXTURE_UNIT_FOR_UPDATES);
  }
  _clearCurrentFBO() {
    this._rctx.setStencilWriteMask(255), this._rctx.setClearColor(0, 0, 0, 0), this._rctx.setClearDepth(1), this._rctx.setClearStencil(0), this._rctx.clear(_6.COLOR_BUFFER_BIT | _6.DEPTH_BUFFER_BIT | _6.STENCIL_BUFFER_BIT);
  }
  _initFBO(e68, t71, r55) {
    this._rctx.bindFramebuffer(e68), r55 && (this._rctx.setViewport(0, 0, t71, t71), this._clearCurrentFBO());
  }
  ensureBuffer(e68) {
    this._lastUsedIds.length = 0, this._lastUsedIds.push(1), this._lastCreatedBufferId = 1, this._onHoldIds.length = 0, this.bind(e68);
  }
  bind(e68, t71 = 0, r55 = true) {
    if (this._current = t71, t71 >= this._fbos.length)
      for (let i47 = this._fbos.length; i47 <= t71; i47++)
        this._fbos.push(new o50(this._rctx));
    this._initFBO(this._fbos[t71].get(e68), e68, r55);
  }
  _bindNextFreeBuffer(e68) {
    this._lastUsedIds.length > 0 ? this.bind(e68, this._lastUsedIds.pop()) : (this._lastCreatedBufferId++, this.bind(e68, this._lastCreatedBufferId));
  }
  openGroup(e68) {
    this._onHoldIds.push(this._current), this._bindNextFreeBuffer(e68);
  }
  switch(e68) {
    const t71 = this.currentFBO(e68), r55 = this._current;
    return this._bindNextFreeBuffer(e68), this._lastUsedIds.push(r55), t71;
  }
  getLastOnHoldId() {
    return this._onHoldIds[this._onHoldIds.length - 1];
  }
  closeGroup(e68) {
    const t71 = this._current;
    this._bindNextFreeBuffer(e68), this._lastUsedIds.push(t71), this._lastUsedIds.push(this._onHoldIds.pop());
  }
  unbind() {
    this._rctx.bindFramebuffer(null);
  }
  currentFBO(e68) {
    return this._fbos[this._current].get(e68);
  }
};

// node_modules/@arcgis/core/views/3d/terrain/TileRenderInfo.js
var o51 = class {
  constructor() {
    this.sourceLod = [0, 0, 0], this.offset = [0, 0], this.scale = 1, this.layerIndex = 0, this.isVTLBackground = false, this.vtlNeighborInfos = new l3({ allocator: (s71) => s71 || new t62() });
  }
};
var t62 = class {
  constructor() {
    this.sourceLayerInfo = null, this.sourceLod = [0, 0, 0], this.offset = [-1, 0];
  }
};

// node_modules/@arcgis/core/views/3d/terrain/TileRenderer.js
var j22 = class {
  constructor(e68, t71, r55, s71, o58, a61) {
    this.start = e68, this.end = t71, this.blendMode = r55, this.opacity = s71, this.output = o58, this.baseOpacity = a61;
  }
};
var C24 = class {
  constructor(e68, t71, r55, s71) {
    this._rctx = e68, this.tileSize = t71, this._techniques = r55, this._cache = s71, this._passParameters = new b18(), this._backgroundTexture = null, this._backgroundColor = null, this._backgroundDirty = false, this._maxAnisotropy = this._rctx.parameters.maxMaxAnisotropy, this._composition = new I24(this._rctx, this._techniques), this._ensureBackgroundTexture(this.tileSize);
  }
  dispose() {
    this._composition = r2(this._composition), this._backgroundTexture = t2(this._backgroundTexture);
  }
  get backgroundIsGrid() {
    return null == this._backgroundColor;
  }
  get backgroundColor() {
    return this._backgroundColor;
  }
  updateTileTexture(e68, t71) {
    if (!e68.renderData)
      return;
    const r55 = e68.surface, s71 = r55.baseOpacity;
    let o58 = 0, n61 = 0, c44 = this.tileSize, l45 = false, m46 = false;
    const f48 = r55.view.state.contentPixelRatio;
    let _26 = false;
    q16.clear(), v26.length = 0;
    const y26 = e68.layerInfo[A23.MAP];
    let T21 = 0, g23 = null;
    for (; T21 < y26.length; T21++) {
      const t72 = r55.layerViewByIndex(T21, A23.MAP), u46 = t72.layer.opacity, b23 = t72.fullOpacity;
      if (m46 = m46 || j3(t72.layer), U6(t72)) {
        let e69 = "normal" !== t72.layer.blendMode;
        if (p6(t72.layer.parent)) {
          const r56 = S19(t72.layer.parent);
          null != r56 && "" !== r56 && (e69 = B14(t72.layer.parent) || e69);
        }
        e69 && (_26 = e69, l45 = false);
      }
      if (0 === u46 && !_26) {
        y26[T21].pendingUpdates &= ~(E32.TEXTURE_NOFADING & E32.TEXTURE_FADING);
        continue;
      }
      ++n61;
      const x32 = _10(t72), I27 = N15(e68, T21, x32);
      if (I27) {
        if (y26[T21].pendingUpdates &= ~(E32.TEXTURE_NOFADING & E32.TEXTURE_FADING), p6(t72.layer.parent)) {
          const e69 = S19(t72.layer.parent);
          null != e69 && "" !== e69 && G14(t72.layer.parent, T21);
        }
        x32 ? c44 = Math.max(c44, this.tileSize * f48) : 1 === s71 && 1 === b23 && (t72.isOpaque || this._dataToTexture(I27) && I27.sourceLayerInfo.data.descriptor.isOpaque) && (l45 = true), ++o58, null === g23 && (g23 = T21);
      }
    }
    const b22 = c44 / this.tileSize, x31 = this._ensureBackgroundTexture(this.tileSize);
    0 !== o58 && null !== g23 ? 1 === o58 && !_26 && this._useLayerTexture(e68, g23) || this._composeMapLayers(e68, t71, T21 - 1, m46, c44, b22, !l45 || _26, q16, _26) : F15(e68, n61, x31, t71 !== H5.FADING);
  }
  _ensureBackgroundTexture(e68) {
    return null == this._backgroundTexture && (this._backgroundTexture = this._buildTexture(e68, false), this._backgroundDirty = true), this._backgroundDirty && (this._composition.bind(e68), this._passParameters.offset = a11, this._passParameters.scale = 1, this._passParameters.opacity = 1, this.backgroundColor && (this._passParameters.backgroundColor = this.backgroundColor), this._composition.drawBackground(this._passParameters, null != this.backgroundColor), this._composition.copyFBOToTexture(this._backgroundTexture), this._composition.unbind(), this._backgroundDirty = false), this._backgroundTexture;
  }
  _useLayerTexture(e68, t71) {
    const r55 = e68.surface.layerViewByIndex(t71, A23.MAP), s71 = j3(r55.layer), o58 = s71 ? e68.surface.baseOpacity : 1, i47 = s71 ? 1 : e68.surface.baseOpacity, n61 = r55.fullOpacity, c44 = N15(e68, t71, false);
    return !!this._dataToTexture(c44) && (e68.renderData.setTextureReference(new s61(c44.sourceLayerInfo.data, H5.FADING, c44, o58, i47, n61)), true);
  }
  _composeMapLayers(e68, t71, r55, s71, i47, n61, c44, u46, l45) {
    this._composition.ensureBuffer(i47);
    const _26 = e68.surface.baseOpacity;
    let y26 = false, T21 = L4.LINEAR_MIPMAP_LINEAR, g23 = false, x31 = 0;
    for (let b22 = r55; b22 >= 0; b22--) {
      const t72 = e68.surface.layerViewByIndex(b22, A23.MAP), r56 = _10(t72), I28 = N15(e68, b22, r56), w28 = t72.layer.opacity;
      if (!I28 || 0 === w28 && !l45)
        continue;
      const k27 = !j3(t72.layer) && !y26;
      k27 && (y26 = true);
      let O32 = false;
      u46.forEach((e69) => {
        e69.start === b22 && (e69.output = s71 ? u18.Composite : c44 && k27 ? this.backgroundIsGrid ? u18.GridComposite : u18.ColorComposite : u18.Composite, e69.baseOpacity = k27 ? _26 : 1, v26.push(e69), this._composition.openGroup(i47), O32 = true);
      }), this._passParameters.baseOpacity = k27 && !O32 && _26 < 1 ? _26 : 1;
      const M21 = 0 === x31, D19 = O32 ? u18.GroupBackgroundComposite : c44 && M21 ? this.backgroundIsGrid ? u18.GridComposite : u18.ColorComposite : u18.Composite, L24 = e34[U6(t72) ? t72.layer.blendMode : "normal"];
      for (this._passParameters.opacity = w28, A9(I28) ? g23 = this._composition.drawVectorData(this._passParameters, D19, i47, L24, I28, n61, this.tileSize, g23) : N7(I28) ? (this._composition.drawImageryTileData(this._passParameters, D19, i47, L24, I28), U19(I28) && (T21 = L4.NEAREST)) : this._dataToTexture(I28) && (this._passParameters.texture = I28.sourceLayerInfo.data.texture, this._passParameters.offset = I28.offset, this._passParameters.scale = I28.scale, this._composition.drawRasterData(this._passParameters, D19, i47, L24)); v26.length > 0 && v26[v26.length - 1].end === b22; ) {
        const e69 = v26.pop();
        this._passParameters.baseOpacity = e69.baseOpacity, this._passParameters.opacity = e69.opacity, this._passParameters.offset = a11, this._passParameters.scale = 1, this._composition.drawGroup(this._passParameters, e69.output, i47, e34[e69.blendMode]);
      }
      x31++;
    }
    const I27 = e68.renderData, w27 = l45 || y26 && _26 < 1, k26 = I27.ensureTexture(i47, w27, () => this._buildTexture(i47, w27, T21));
    this._composition.copyFBOToTexture(k26), this._composition.unbind(), I27.setTextureReference(new s61(k26, t71, H18, y26 ? 1 : _26, 0, 1));
  }
  _dataToTexture(e68) {
    if (h12(e68)) {
      const t71 = e68.sourceLayerInfo;
      t71.data = this._buildTexture(t71.data, true), e68.tile.setMemoryDirty();
    }
    return L6(e68);
  }
  setBackground(e68) {
    this._backgroundColor !== e68 && (this._backgroundColor = e68, this._backgroundDirty = true);
  }
  _buildTexture(e68, t71, r55 = L4.LINEAR_MIPMAP_LINEAR) {
    if (null == e68)
      return null;
    const s71 = new e22();
    s71.wrapMode = D2.CLAMP_TO_EDGE, s71.samplingMode = r55, s71.maxAnisotropy = this._maxAnisotropy, s71.preMultiplyAlpha = true, s71.flipped = true, s71.hasMipmap = true, t71 || (s71.pixelFormat = G4.RGB);
    const o58 = this._rctx;
    let a61;
    if ("number" == typeof e68) {
      s71.width = s71.height = e68;
      const t72 = `${e68} ${s71.pixelFormat}`;
      a61 = this._cache.pop(t72), a61 ? a61.retain() : a61 = new t57(new m11(o58, s71), this._cache);
    } else if (O10(e68)) {
      s71.isOpaque = e68.isOpaque, s71.isOpaque && (s71.pixelFormat = G4.RGB);
      const t72 = `${e68} ${s71.pixelFormat}`;
      a61 = this._cache.pop(t72), a61 ? (a61.retain(), a61.texture.setData(e68.image)) : a61 = new t57(new m11(o58, s71, e68.image), this._cache), e68.release();
    } else
      try {
        s71.width = e68.width, s71.height = e68.height, a61 = new t57(new m11(o58, s71, e68));
      } catch (c44) {
        a61 = new t57(a26(o58)), console.warn("TileRenderer: failed to execute 'texImage2D', cross-origin image may not be loaded.");
      }
    const i47 = o58.bindTexture(a61.texture, m11.TEXTURE_UNIT_FOR_UPDATES);
    return a61.generateMipmap(), o58.bindTexture(i47, m11.TEXTURE_UNIT_FOR_UPDATES), a61;
  }
  get test() {
    return { backgroundTexture: this._backgroundTexture };
  }
};
function N15(e68, t71, o58) {
  z21.layerIndex = t71, z21.vtlNeighborInfos.clear();
  const a61 = e68.layerInfo[A23.MAP][t71];
  if (o13(z21.offset, 0, 0), z21.tile = e68, z21.scale = 1, z21.sourceLod = e68.lij, z21.sourceLayerInfo = a61, z21.isVTLBackground = o58, a61.data)
    return o58 && e68.forEachLoadedNeighbor((r55, s71) => {
      if (r55.level !== e68.level)
        return;
      const o59 = r55.layerInfo[A23.MAP][t71];
      if (!g7(o59) || a61.data === o59.data)
        return;
      const i48 = z21.vtlNeighborInfos.pushNew();
      i48.offset = V14[s71], i48.sourceLod = r55.lij, i48.sourceLayerInfo = o59;
    }), z21;
  const i47 = a61.upsampleInfo;
  if (i47) {
    const e69 = i47.tile.layerInfo[A23.MAP][t71];
    return z21.tile = i47.tile, r11(z21.offset, i47.offset), z21.scale = i47.scale, z21.sourceLod = i47.tile.lij, z21.sourceLayerInfo = e69, z21;
  }
  return o58 ? z21 : null;
}
function S19(e68) {
  return e68.uid;
}
function U19(e68) {
  const t71 = e68.sourceLayerInfo.data;
  return !!t71.source && "nearest" === t71.interpolation;
}
function B14(e68) {
  let t71 = "normal" !== e68.blendMode;
  return p6(e68.parent) && (t71 = B14(e68.parent) || t71), t71;
}
function G14(e68, t71) {
  p6(e68.parent) && G14(e68.parent, t71);
  const r55 = S19(e68);
  if (null != r55 && "" !== r55) {
    const s71 = q16.get(r55);
    s71 ? s71.start = t71 : q16.set(r55, new j22(t71, t71, e68.blendMode, e68.opacity, u18.Composite, 1));
  }
}
function F15(e68, t71, r55, s71) {
  const o58 = e68.renderData, a61 = !s71 && null != o58.textureReference && (e68.surface.view.layerViewManager.updating || t71 > 0) ? n50.Delayed : n50.Immediate;
  o58.setTextureReference(new s61(r55, H5.FADING, H18, e68.surface.baseOpacity, 0, 1), a61);
}
var q16 = /* @__PURE__ */ new Map();
var v26 = new Array();
var z21 = new o51();
var H18 = { offset: [0, 0], scale: 1 };
var V14 = new Array();
V14[S8.NORTH] = [0, -1], V14[S8.NORTH_EAST] = [-1, -1], V14[S8.EAST] = [-1, 0], V14[S8.SOUTH_EAST] = [-1, 1], V14[S8.SOUTH] = [0, 1], V14[S8.SOUTH_WEST] = [1, 1], V14[S8.WEST] = [1, 0], V14[S8.NORTH_WEST] = [1, -1];

// node_modules/@arcgis/core/views/3d/webgl-engine/collections/Component/ComponentIntersectionData.js
var s62 = 200;
var o52 = 40;
var a50 = 0.8;
var c38 = 10;
var h30 = 1e-6;
function d40(t71, e68, i47) {
  const n61 = e68, r55 = i47;
  let s71 = 0, o58 = 1 / 0;
  for (let a61 = 0; a61 < 3; ++a61) {
    {
      const e69 = t71[a61];
      if (n61[a61] < e69) {
        if (r55[a61] <= h30)
          return false;
        const t72 = (e69 - n61[a61]) / r55[a61];
        s71 = Math.max(s71, t72);
      } else if (r55[a61] <= -h30) {
        const t72 = (e69 - n61[a61]) / r55[a61];
        o58 = Math.min(o58, t72);
      }
      if (s71 > o58)
        return false;
    }
    {
      const e69 = t71[a61 + 3];
      if (n61[a61] > e69) {
        if (r55[a61] >= -h30)
          return false;
        const t72 = (e69 - n61[a61]) / r55[a61];
        s71 = Math.max(s71, t72);
      } else if (r55[a61] >= h30) {
        const t72 = (e69 - n61[a61]) / r55[a61];
        o58 = Math.min(o58, t72);
      }
      if (s71 > o58)
        return false;
    }
  }
  return true;
}
var l40 = class {
  constructor(t71, e68, i47, n61, r55) {
    this.aabb = t71, this.axis = e68, this.d = i47, this.midStartIndex = n61, this.rightStartIndex = r55;
  }
};
var f39 = class _f {
  constructor(i47, n61, r55, s71) {
    this.globalTriangleVertexIndices = i47, this.firstTriangleIndex = n61, this.positions = s71, this._rayDirection = n7(), this._intersectionOptions = I25, this.bspNodeTree = new Array();
    const h36 = r55 - n61, d44 = new (h36 < N16 ? Uint8Array : h36 < b19 ? Uint16Array : Uint32Array)(h36);
    this.triangleIndexMap = d44;
    for (let t71 = 0; t71 < h36; ++t71)
      d44[t71] = t71;
    {
      const e68 = p42(i47, n61, r55, s71.data, s71.stride), f48 = e12(Math.log2(h36 / o52), 2, c38), m46 = (t71, i48, n62) => {
        const r56 = x26(d44, e68, t71, i48), s72 = i48 - t71;
        if (s72 <= o52) {
          const e69 = new l40(r56, void 0, 0, t71, i48);
          return this.bspNodeTree.push(e69), e69;
        }
        const { axis: c44, midValue: h37 } = y23(r56), u46 = g20(d44, e68, t71, i48, c44, h37), p48 = (t72, e69) => {
          if (n62 > f48)
            return;
          const i49 = e69 - t72;
          return i49 < o52 || i49 >= a50 * s72 ? void 0 : m46(t72, e69, n62 + 1);
        }, N20 = new l40(r56, c44, h37, u46.next, u46.mid);
        return this.bspNodeTree.push(N20), N20.leftNode = p48(t71, u46.next), N20.rightNode = p48(u46.mid, i48), N20;
      };
      m46(0, h36, 0);
    }
  }
  intersectRayTriangleRange(t71, e68) {
    if (t71 >= e68)
      return;
    const i47 = this.positions;
    y5(this._rayFrom, this._rayDirection, t71, e68, this.globalTriangleVertexIndices, i47.data, i47.stride, this._intersectionOptions, this._callback, this.triangleIndexMap, this.firstTriangleIndex), _f.numFacesTested += e68 - t71;
  }
  intersectRay(t71, e68, i47, n61) {
    _f.numFacesTested = 0;
    const r55 = t71, s71 = e68, o58 = s71[0] - r55[0], a61 = s71[1] - r55[1], c44 = s71[2] - r55[2];
    if (o58 * o58 + a61 * a61 + c44 * c44 < h30)
      return;
    this._rayFrom = r55;
    const d44 = this._rayDirection;
    d44[0] = o58, d44[1] = a61, d44[2] = c44;
    const l45 = this.triangleIndexMap.length;
    this._callback = n61, this._intersectionOptions = i47;
    const m46 = this.bspNodeTree[0];
    this.intersectRayBSP(m46, 0, l45);
  }
  intersectRayBSP(t71, e68, i47) {
    const n61 = this._rayFrom, r55 = this._rayDirection;
    if (!d40(t71.aabb, n61, r55))
      return;
    const s71 = t71.axis, o58 = t71.d;
    if (n61[s71] < o58 || r55[s71] < 0) {
      const i48 = e68, n62 = t71.midStartIndex;
      if (i48 < n62) {
        const e69 = t71.leftNode;
        void 0 !== e69 ? this.intersectRayBSP(e69, i48, n62) : this.intersectRayTriangleRange(i48, n62);
      }
    }
    if (this.intersectRayTriangleRange(t71.midStartIndex, t71.rightStartIndex), n61[s71] > o58 || r55[s71] > 0) {
      const e69 = t71.rightStartIndex, n62 = i47;
      if (e69 < n62) {
        const i48 = t71.rightNode;
        void 0 !== i48 ? this.intersectRayBSP(i48, e69, n62) : this.intersectRayTriangleRange(e69, n62);
      }
    }
  }
  get estimatedMemoryUsage() {
    return this.triangleIndexMap.byteLength;
  }
};
f39.numFacesTested = 0;
var m38 = [1 / 0, 1 / 0, 1 / 0];
var u39 = [-1 / 0, -1 / 0, -1 / 0];
function g20(t71, e68, i47, n61, r55, s71) {
  let o58 = i47, a61 = n61;
  for (; o58 < a61; ) {
    const i48 = t71[o58];
    e68[6 * i48 + r55 + 3] <= s71 ? ++o58 : (--a61, t71[o58] = t71[a61], t71[a61] = i48);
  }
  let c44 = o58;
  for (a61 = n61; c44 < a61; ) {
    const i48 = t71[a61 - 1];
    e68[6 * i48 + r55] >= s71 ? --a61 : (t71[a61 - 1] = t71[c44], t71[c44] = i48, ++c44);
  }
  return { next: o58, mid: c44 };
}
function x26(t71, e68, n61, r55) {
  if (r55 <= n61)
    return a8(NaN, NaN, NaN, NaN, NaN, NaN);
  {
    const i47 = 6 * t71[n61];
    for (let t72 = 0; t72 < 3; ++t72)
      m38[t72] = e68[i47 + 0 + t72], u39[t72] = e68[i47 + 3 + t72];
  }
  for (let i47 = n61 + 1; i47 < r55; ++i47) {
    const n62 = 6 * t71[i47];
    for (let t72 = 0; t72 < 3; ++t72)
      m38[t72] = Math.min(m38[t72], e68[n62 + 0 + t72]), u39[t72] = Math.max(u39[t72], e68[n62 + 3 + t72]);
  }
  return a8(m38[0], m38[1], m38[2], u39[0], u39[1], u39[2]);
}
function y23(t71) {
  const e68 = t71[3] - t71[0], i47 = t71[4] - t71[1], n61 = t71[5] - t71[2], r55 = e68 > i47 ? e68 > n61 ? 0 : i47 > n61 ? 1 : 2 : i47 > n61 ? 1 : n61 > e68 ? 2 : 0;
  return { axis: r55, midValue: (t71[r55] + t71[r55 + 3]) / 2 };
}
function p42(t71, e68, i47, n61, r55) {
  const s71 = i47 - e68, o58 = new Float32Array(6 * s71);
  for (let a61 = 0; a61 < s71; ++a61) {
    const i48 = 3 * (a61 + e68), s72 = t71[i48] * r55, c44 = t71[i48 + 1] * r55, h36 = t71[i48 + 2] * r55;
    for (let t72 = 0; t72 < 3; ++t72) {
      const e69 = n61[s72 + t72], i49 = n61[c44 + t72], r56 = n61[h36 + t72];
      o58[6 * a61 + t72] = Math.min(e69, i49, r56), o58[6 * a61 + 3 + t72] = Math.max(e69, i49, r56);
    }
  }
  return o58;
}
var N16 = 255;
var b19 = 65535;
var I25 = new p12();

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/TerrainTechniqueConfiguration.js
var d41 = class extends t23 {
  constructor() {
    super(...arguments), this.output = o10.Color, this.overlayMode = f16.Disabled, this.tileBlendInput = o36.LayerOnly, this.spherical = false, this.doublePrecisionRequiresObfuscation = false, this.receiveShadows = false, this.hasSlicePlane = false, this.backfaceCullingEnabled = false, this.textureFadingEnabled = false, this.renderOccluded = false, this.hasScreenSpaceReflections = false, this.hasCloudsReflections = false, this.invisible = false, this.tileBorders = false, this.visualizeNormals = false, this.screenSizePerspective = false, this.receiveAmbientOcclusion = false, this.pbrMode = c7.Simplified;
  }
};
e([r17({ count: o10.COUNT })], d41.prototype, "output", void 0), e([r17({ count: f16.COUNT })], d41.prototype, "overlayMode", void 0), e([r17({ count: o36.COUNT })], d41.prototype, "tileBlendInput", void 0), e([r17()], d41.prototype, "spherical", void 0), e([r17()], d41.prototype, "doublePrecisionRequiresObfuscation", void 0), e([r17()], d41.prototype, "receiveShadows", void 0), e([r17()], d41.prototype, "hasSlicePlane", void 0), e([r17()], d41.prototype, "backfaceCullingEnabled", void 0), e([r17()], d41.prototype, "textureFadingEnabled", void 0), e([r17()], d41.prototype, "renderOccluded", void 0), e([r17()], d41.prototype, "hasScreenSpaceReflections", void 0), e([r17()], d41.prototype, "hasCloudsReflections", void 0), e([r17()], d41.prototype, "invisible", void 0), e([r17()], d41.prototype, "tileBorders", void 0), e([r17()], d41.prototype, "visualizeNormals", void 0), e([r17()], d41.prototype, "screenSizePerspective", void 0), e([r17()], d41.prototype, "receiveAmbientOcclusion", void 0), e([r17({ count: c7.COUNT })], d41.prototype, "pbrMode", void 0), e([r17({ constValue: a12.Compressed })], d41.prototype, "normalType", void 0), e([r17({ constValue: d8.Compressed })], d41.prototype, "textureCoordinateType", void 0), e([r17({ constValue: false })], d41.prototype, "highStepCount", void 0), e([r17({ constValue: false })], d41.prototype, "useCustomDTRExponentForWater", void 0), e([r17({ constValue: false })], d41.prototype, "useFillLights", void 0), e([r17({ constValue: true })], d41.prototype, "hasColorTexture", void 0);

// node_modules/@arcgis/core/views/3d/terrain/TerrainRenderer.js
var oe6 = 7;
var le6 = 10;
var ce7 = i3();
var he4;
!function(e68) {
  e68[e68.Opaque = 0] = "Opaque", e68[e68.Semitransparent = 1] = "Semitransparent", e68[e68.TransparentWithDraped = 2] = "TransparentWithDraped", e68[e68.Empty = 3] = "Empty";
}(he4 || (he4 = {}));
var de5 = class extends d10 {
  get _isGlobal() {
    return this._stage.viewingMode === l8.Global;
  }
  get _techniques() {
    return this._context.techniqueRepository;
  }
  get _rctx() {
    return this._context.renderContext.rctx;
  }
  constructor(e68, t71, i47, n61, a61) {
    super({}), this._overlayRenderer = e68, this._stage = t71, this._allTiles = i47, this._ellipsoidRadius = n61, this.type = i15.TERRAIN, this.isGround = true, this._tileSize = 256, this._techniqueConfiguration = new d41(), this._passParameters = new _13(), this._drawParameters = new s35(), this._renderDataPool = new e4(G12), this._visiblePatchesByOrigin = /* @__PURE__ */ new Map(), this._allPatchesByOrigin = /* @__PURE__ */ new Map(), this._patchesByOriginDirty = true, this._patchSortingDirty = true, this._tileIterator = new n33(), this._transparencyState = he4.Opaque, this._castShadows = false, this._emptyTex = null, this._tileRenderer = null, this._stencilEnabledLayerExtents = new Array(), this._numTilesRendered = 0, this._numTilesCulled = 0, this._numOriginsRendered = 0, this.renderOccludedFlags = h8.Occlude, this.produces = /* @__PURE__ */ new Map([[A6.OPAQUE_TERRAIN, () => this._produces()], [A6.TRANSPARENT_TERRAIN, () => this._produces()], [A6.OCCLUDED_TERRAIN, () => this._produces()]]), this._tileTextureCache = new c17((e69, t72) => a61.newCache(e69, t72), "TileTexture"), this.tileGeometryCache = new t61(a61);
  }
  normalizeCtorArgs() {
    return {};
  }
  initialize() {
    this._stage.addRenderPlugin(this), this.addHandles(d3(() => this._overlayRenderer.rendersOccludedDraped, (e68) => {
      this.renderOccludedFlags = e68 ? se : h8.Occlude, this.setNeedsRender();
    }, C));
  }
  destroy() {
    this._stage.removeRenderPlugin(this), this._tileTextureCache.destroy(), this.tileGeometryCache.destroy();
  }
  _produces() {
    return this.visible && !!this._rootTiles && !this.renderingDisabled;
  }
  consumes() {
    return this._overlayRenderer.hasWater ? n22 : t21;
  }
  set renderingDisabled(e68) {
    this._set("renderingDisabled", !!e68), this.setDirty();
  }
  set visible(e68) {
    this._set("visible", !!e68), this.setDirty();
  }
  set transparency(e68) {
    this._transparencyState !== e68 && (this._techniqueConfiguration.invisible = e68 === he4.TransparentWithDraped || e68 === he4.Empty, this._transparencyState = e68, this.setNeedsRender());
  }
  get transparency() {
    return this._transparencyState;
  }
  get renderPatchBorders() {
    return !!this._techniqueConfiguration.tileBorders;
  }
  set renderPatchBorders(e68) {
    this._techniqueConfiguration.tileBorders !== e68 && (this._techniqueConfiguration.tileBorders = e68, this.setNeedsRender(), this.notifyChange("renderPatchBorders"));
  }
  get visualizeNormals() {
    return !!this._techniqueConfiguration.visualizeNormals;
  }
  set visualizeNormals(e68) {
    this._techniqueConfiguration.visualizeNormals !== e68 && (this._techniqueConfiguration.visualizeNormals = e68, this.setNeedsRender(), this.notifyChange("visualizeNormals"));
  }
  get cullBackFaces() {
    return this._techniqueConfiguration.backfaceCullingEnabled;
  }
  set cullBackFaces(e68) {
    this._techniqueConfiguration.backfaceCullingEnabled !== e68 && (this._techniqueConfiguration.backfaceCullingEnabled = e68, this.notifyChange("cullBackFaces"), this.setNeedsRender());
  }
  set renderOrder(e68) {
    this._set("renderOrder", e68), this._setSortingDirty();
  }
  get layerUid() {
    return w9;
  }
  get slicePlaneEnabled() {
    return this._techniqueConfiguration.hasSlicePlane;
  }
  set slicePlaneEnabled(e68) {
    this._techniqueConfiguration.hasSlicePlane !== e68 && (this._techniqueConfiguration.hasSlicePlane = e68, this.setNeedsRender());
  }
  set textureFadingEnabled(e68) {
    this._techniqueConfiguration.textureFadingEnabled !== e68 && (this._techniqueConfiguration.textureFadingEnabled = e68, this.setNeedsRender());
  }
  set pbrMode(e68) {
    this._techniqueConfiguration.pbrMode !== e68 && (this._techniqueConfiguration.pbrMode = e68, this.setNeedsRender());
  }
  setDebugScreenSizePerspective(e68) {
    this._techniqueConfiguration.screenSizePerspective !== e68 && (this._techniqueConfiguration.screenSizePerspective = e68, this.setNeedsRender());
  }
  setRootTiles(e68) {
    this._rootTiles = e68, this.setDirty();
  }
  setStencilEnabledLayerExtents(e68) {
    this._stencilEnabledLayerExtents = e68, this._setSortingDirty();
  }
  setTileSize(e68) {
    this._tileSize = e68, null != this._tileRenderer && (this._tileRenderer.tileSize = e68), this.setDirty();
  }
  _prepareTileForLoading(e68) {
    e68.renderData || (e68.renderData = this._renderDataPool.acquire(), e68.renderData.init(e68, this._getLocalOriginOfTile(e68)));
  }
  loadTile(e68) {
    this._prepareTileForLoading(e68), this.updateTileGeometryState(e68), this.updateTileTexture(e68, E32.TEXTURE_FADING);
  }
  updateTileTexture(e68, t71) {
    null != this._tileRenderer && (this._tileRenderer.updateTileTexture(e68, t71 === E32.TEXTURE_FADING ? H5.FADING : H5.UNFADED), this.setNeedsRender(), e68.resetPendingUpdate(t71));
  }
  updateTileGeometryState(e68) {
    for (const i47 of e68.layerInfo[A23.ELEVATION])
      i47.pendingUpdates &= ~E32.GEOMETRY;
    e68.resetPendingUpdate(E32.GEOMETRY);
    const t71 = e68.renderData.updateGeometryState();
    return t71 && this.setDirty(), t71;
  }
  updateGeometryIfNeeded(e68) {
    e68.isLoaded && e68.renderData.updateGeometryIfNeeded(this._rctx);
  }
  unloadTile(e68) {
    const t71 = e68.renderData;
    t71 && (t71.releaseGeometry(), this._renderDataPool.release(t71), t71.clear(), e68.renderData = null, e68.setMemoryDirty(), this.setDirty());
  }
  _getLocalOriginOfTile(e68) {
    const t71 = le6 - oe6, i47 = Math.max(0, Math.floor((e68.level - t71) / oe6) * oe6);
    if (this._isGlobal && 0 === i47)
      return l5;
    for (; e68.parent && e68.level > i47; )
      e68 = e68.parent;
    return e68.centerAtSeaLevel;
  }
  getStats() {
    return { numTilesRendered: this._numTilesRendered, numTilesCulled: this._numTilesCulled, numOriginsRendered: this._numOriginsRendered };
  }
  set wireframe(e68) {
    this._get("wireframe") !== e68 && (this._set("wireframe", e68), this.setNeedsRender());
  }
  setDirty(e68 = O7.UPDATE) {
    this._patchesByOriginDirty = true, this._context.requestRender(e68);
  }
  _setSortingDirty(e68 = O7.UPDATE) {
    this._patchSortingDirty = true, this._context.requestRender(e68);
  }
  setNeedsRender(e68 = O7.UPDATE) {
    this._context.requestRender(e68);
  }
  initializeRenderContext(e68) {
    this._context = e68, this._tileRenderer = new C24(this._rctx, this._tileSize, this._techniques, this._tileTextureCache), this.updateTileBackground(), this._emptyTex = a26(this._rctx);
  }
  uninitializeRenderContext() {
    this._emptyTex = r2(this._emptyTex), this._tileRenderer = r2(this._tileRenderer);
  }
  intersect(e68, t71, i47, r55) {
    if (!this._rootTiles || e68.options.selectOpaqueTerrainOnly && e68.options.selectionMode && this.transparency !== he4.Opaque)
      return;
    const s71 = ue5, n61 = pe5;
    e11(s71, r55, i47), o4(n61, 1 / s71[0], 1 / s71[1], 1 / s71[2]);
    const a61 = e68.results.min, o58 = e68.results.max, l45 = e68.results.ground, p48 = e68.options.store === e29.MIN, _26 = !!e68.results.ground.target, f48 = I6(e68.verticalOffset), m46 = e68.tolerance;
    let g23, T21 = p48 && null != a61.dist ? a61.dist : 1 / 0;
    const O32 = e68.options, R18 = O32.normalRequired || !O32.backfacesTerrain, C28 = new p12(false, R18), x31 = (d44) => {
      const _27 = d44.renderData;
      if (!(_27 == null ? void 0 : _27.vao))
        return;
      const x32 = _27.geometry;
      O3(ce7, x32.boundingBox);
      const P21 = _27.localOrigin;
      null != f48 && (f48.localOrigin = P21, f48.applyToAabb(ce7));
      const v32 = ce7;
      if (_e4[0] = i47[0] - P21[0], _e4[1] = i47[1] - P21[1], _e4[2] = i47[2] - P21[2], !w8(v32, _e4, n61, m46, T21))
        return;
      const D19 = (e69, t72, i48) => {
        e69.set(this.type, d44, t72, i48, o8), T21 = p48 && null != a61.dist ? a61.dist : 1 / 0;
      }, S24 = (n62, c44, h36) => {
        if ((!R18 || null != h36) && n62 >= 0 && (O32.backfacesTerrain || P3(h36, s71) < 0) && (O32.invisibleTerrain || !O32.selectionMode || null == t71 || t71(i47, r55, n62))) {
          if ((null == l45.dist || n62 < l45.dist) && D19(l45, n62, h36), O32.isFiltered)
            return;
          O32.store === e29.ALL && (null == g23 ? (g23 = G6(e68.ray), D19(g23, n62, h36), e68.results.all.push(g23)) : n62 < g23.dist && D19(g23, n62, h36)), (null == a61.dist || n62 < a61.dist) && D19(a61, n62, h36), O32.store !== e29.MIN && (null == o58.dist || n62 > o58.dist) && D19(o58, n62, h36);
        }
      }, w27 = fe4;
      e11(w27, r55, P21);
      const { indices: q21, indexCount: E38 } = x32, A32 = x32.vertexAttributes, N20 = A32.getField(e18.POSITION, i7), I27 = new s13(N20.typedBuffer, 3, A32.stride / 4), L24 = E38 / 3;
      if (!f48 && L24 > s62) {
        const e69 = d44.renderData;
        null == e69.intersectionData && (e69.intersectionData = new f39(q21, 0, L24, I27)), e69.intersectionData.intersectRay(_e4, w27, C28, S24);
      } else
        x8(_e4, w27, 0, L24, q21, I27, f48, C28, S24);
    }, P20 = this._rootTiles;
    if (null != P20) {
      (() => {
        const t72 = this._tileIterator;
        t72.reset(P20);
        const r56 = e68.options.invisibleTerrain;
        for (let e69 = t72.next(); e69; e69 = t72.next())
          !(e69.visible || r56 && e69.intersectsClippingArea) || null == f48 && !e69.intersectsRay(i47, s71, m46, T21) || _26 && this._useStencilForTile(e69) ? t72.skipSubtree() : x31(e69);
      })();
    }
  }
  processScaleRangeQueries(e68, t71) {
    var _a;
    if (!t71.done)
      for (this._updatePatchGroups(); e68.updating && !t71.done; ) {
        e68.prepare();
        for (const t72 of this._visiblePatchesByOrigin.values())
          for (const i47 of t72)
            null != ((_a = i47.renderData) == null ? void 0 : _a.textureReference) && e68.queriesForTile(i47);
        e68.process(), t71.madeProgress();
      }
  }
  prepareTechnique(e68) {
    const t71 = has("enable-feature:terrain-shadows") && e68.bindParameters.shadowMap.enabled;
    if (t71 !== this._castShadows && (this._castShadows = t71, this._patchesByOriginDirty = true), e68.bindParameters.slot === A6.OCCLUDED_TERRAIN) {
      if (!(e68.renderOccludedMask & se))
        return null;
    } else {
      const t72 = this.transparency === he4.Opaque ? A6.OPAQUE_TERRAIN : A6.TRANSPARENT_TERRAIN;
      if (e68.bindParameters.slot !== t72)
        return null;
    }
    if (this.transparency === he4.Empty)
      return null;
    switch (e68.output) {
      case o10.Color:
        return this._techniqueConfiguration.hasScreenSpaceReflections = null != e68.bindParameters.ssr.lastFrameColor, this._techniqueConfiguration.hasCloudsReflections = null != e68.bindParameters.cloudsFade.data, this._techniqueConfiguration.receiveShadows = e68.bindParameters.shadowMap.ready, this._techniqueConfiguration.receiveAmbientOcclusion = null != e68.bindParameters.ssao, this._techniqueConfiguration.overlayMode = this._overlayRenderer.mode, this._updateTechnique(o10.Color, e68.bindParameters.slot === A6.OCCLUDED_TERRAIN);
      case o10.Shadow:
      case o10.ShadowExcludeHighlight:
        return this._castShadows ? (this._techniqueConfiguration.receiveShadows = this._techniqueConfiguration.receiveAmbientOcclusion = false, this._updateTechnique(o10.Shadow, false)) : null;
      case o10.LinearDepth:
        return this._techniqueConfiguration.receiveShadows = this._techniqueConfiguration.receiveAmbientOcclusion = false, this._updateTechnique(o10.LinearDepth, false);
      case o10.Normal:
        return this._techniqueConfiguration.receiveShadows = this._techniqueConfiguration.receiveAmbientOcclusion = false, this._updateTechnique(o10.Normal, false);
      case o10.ObjectAndLayerIdColor:
        return this._updateTechnique(o10.ObjectAndLayerIdColor, false);
      case o10.Highlight:
        return this._overlayRenderer.hasHighlights ? (this._techniqueConfiguration.receiveShadows = this._techniqueConfiguration.receiveAmbientOcclusion = false, this._updateTechnique(o10.Highlight, false)) : null;
    }
    return null;
  }
  renderNode(e68, t71) {
    switch (this._updatePatchGroups(), t71.useStencil = false, e68.output) {
      case o10.Color: {
        const i47 = e68.bindParameters.slot === A6.OCCLUDED_TERRAIN ? o28.Occluded : o28.Color;
        this._renderMaterialPass(e68, t71, i47);
        break;
      }
      case o10.LinearDepth:
      case o10.Normal:
        this._renderAuxiliaryPass(e68, t71, o28.Color, this._visiblePatchesByOrigin);
        break;
      case o10.Highlight:
        this._renderAuxiliaryPass(e68, t71, o28.Highlight, this._visiblePatchesByOrigin);
        break;
      case o10.Shadow:
      case o10.ShadowExcludeHighlight:
        this._renderAuxiliaryPass(e68, t71, null, this._allPatchesByOrigin);
        break;
      case o10.ObjectAndLayerIdColor:
        this._renderAuxiliaryPass(e68, t71, o28.ObjectAndLayerIdColor, this._visiblePatchesByOrigin);
    }
  }
  updateTileBackground(e68) {
    if (null == this._tileRenderer)
      return;
    const i47 = this._tileRenderer;
    let r55;
    if (null != e68) {
      const i48 = u6.toUnitRGBA(e68);
      r55 = r4(i48[0] || 0, i48[1] || 0, i48[2] || 0);
    }
    i47.setBackground(r55), this._allTiles.forAll((e69) => i47.updateTileTexture(e69, H5.FADING)), this._techniqueConfiguration.tileBlendInput = i47.backgroundIsGrid ? o36.GridComposite : null != i47.backgroundColor ? o36.ColorComposite : o36.LayerOnly, this.setNeedsRender();
  }
  _updatePatchGroups() {
    if (this._patchesByOriginDirty && (this._rebuildPatchGroups(), this._patchesByOriginDirty = false, this._patchSortingDirty = true), this._patchSortingDirty && this.renderOrder !== O14.NONE) {
      const e68 = Array.from(this._visiblePatchesByOrigin.values()), t71 = this._stencilEnabledLayerExtents;
      for (const i47 of e68)
        l19(this.renderOrder, i47, t71);
      e68.sort((e69, t72) => h13(e69[0], t72[0], this.renderOrder)), this._visiblePatchesByOrigin = new Map(e68.map((e69) => [e69[0].renderData.localOrigin, e69])), this._patchSortingDirty = false;
    }
  }
  _rebuildPatchGroups() {
    var _a;
    const e68 = this._rootTiles;
    if (null != e68) {
      (_a = e68[0]) == null ? void 0 : _a.surface.checkAllTilesWaterproofness(), this._visiblePatchesByOrigin.clear(), this._allPatchesByOrigin.clear();
      for (const t71 of e68)
        this._rebuildPatchGroupsForRootTile(t71);
    }
  }
  _rebuildPatchGroupsForRootTile(e68) {
    const t71 = this._tileIterator;
    for (t71.resetOne(e68); !t71.done; ) {
      const e69 = t71.next(), i47 = e69.renderData;
      if (!i47) {
        this._numTilesCulled++;
        continue;
      }
      const r55 = i47.localOrigin;
      if (this._castShadows) {
        let t72 = this._allPatchesByOrigin.get(r55);
        t72 || (t72 = [], this._allPatchesByOrigin.set(r55, t72)), t72.push(e69);
      }
      if (!e69.visible) {
        this._numTilesCulled++, t71.skipSubtree();
        continue;
      }
      let s71 = this._visiblePatchesByOrigin.get(r55);
      s71 || (s71 = [], this._visiblePatchesByOrigin.set(r55, s71)), s71.push(e69), t71.skipSubtree();
    }
  }
  _useStencilForTile(e68) {
    for (const t71 of this._stencilEnabledLayerExtents)
      if (e68.intersectsExtent(t71))
        return true;
    return false;
  }
  _renderAuxiliaryPass(e68, t71, i47, r55) {
    const s71 = e68.rctx;
    this._passParameters.overlayContent = i47, s71.bindTechnique(t71, e68.bindParameters, this._passParameters);
    const n61 = this._stencilEnabledLayerExtents.length > 0;
    r55.forEach((r56) => {
      this._drawParameters.origin = r56[0].renderData.localOrigin, t71.program.bindDraw(this._drawParameters, e68.bindParameters, this._passParameters);
      for (let s72 = 0; s72 < r56.length; s72++)
        this._renderPatch(e68, t71, r56[s72], E7.TRIANGLES, n61, i47);
    }), e68.rctx.bindVAO(null);
  }
  _renderMaterialPass(e68, t71, i47) {
    var _a;
    const { rctx: r55 } = e68;
    this._passParameters.overlayContent = i47, r55.bindTechnique(t71, e68.bindParameters, this._passParameters), this._numTilesRendered = 0, this._numTilesCulled = 0, this._numOriginsRendered = 0;
    const s71 = e68.bindParameters.camera, n61 = t71.program;
    if (this._techniqueConfiguration.screenSizePerspective && this.pointsOfInterest) {
      const e69 = n21(this._stage.viewingMode, this._ellipsoidRadius), t72 = this.pointsOfInterest.centerOnSurfaceFrequent.distance;
      e69.update({ distance: t72, fovY: s71.fovY });
    }
    const a61 = this._stencilEnabledLayerExtents.length > 0, o58 = i47 === o28.Occluded;
    o58 && (n61.bindTexture("tex", this._emptyTex), n61.setUniform3fv("textureOpacities", l5), n61.setUniform4fv("texOffsetAndScale", _4));
    const l45 = null != ((_a = this._tileRenderer) == null ? void 0 : _a.backgroundColor) ? this._tileRenderer.backgroundColor : l5;
    this._techniqueConfiguration.tileBlendInput === o36.ColorComposite && n61.setUniform3fv("backgroundColor", l45);
    const c44 = this.wireframe ? E7.LINES : E7.TRIANGLES;
    this._techniqueConfiguration.textureFadingEnabled && n61.bindTexture("texNext", this._emptyTex);
    const h36 = this._visiblePatchesByOrigin;
    for (const d44 of h36.values()) {
      const r56 = d44[0].renderData.localOrigin;
      t71.program.bindDraw(new s35(r56), e68.bindParameters, this._passParameters), this._numOriginsRendered++;
      for (const s72 of d44) {
        const r57 = s72.renderData, l46 = r57.textureReference;
        if (null != l46) {
          if (!o58) {
            n61.setUniform4fv("texOffsetAndScale", l46.offsetAndScale), n61.bindTexture("tex", l46.texture.texture);
            const e69 = r57.textureFadeFactor, t72 = e69 < 1 ? r57.nextTextureReference : null;
            this._techniqueConfiguration.textureFadingEnabled && null != t72 && e69 < 1 ? (n61.setUniform1f("fadeFactor", e69), n61.setUniform4fv("nextTexOffsetAndScale", t72.offsetAndScale), n61.setUniform3fv("nextTexOpacities", t72.opacities), n61.bindTexture("texNext", t72.texture.texture)) : n61.setUniform1f("fadeFactor", 1), r57.textureIsFading && this.setNeedsRender(), n61.setUniform3fv("textureOpacities", l46.opacities);
          }
          this._renderPatch(e68, t71, s72, c44, a61, i47), s72.renderOrder = this._numTilesRendered, this._numTilesRendered++;
        }
      }
    }
    e68.rctx.bindVAO(null);
  }
  _renderPatch(e68, t71, i47, r55, s71, n61) {
    const a61 = i47.renderData, o58 = a61.vao, l45 = o58 == null ? void 0 : o58.indexBuffer;
    if (!o58 || null == l45)
      return void (T7 && console.error("Rendered tile with no indices: ", i47.lij, " : ", a61));
    const c44 = t71.program;
    null == n61 || this._overlayRenderer.isEmpty || this._bindOverlayPatchData(c44, a61.overlay), s71 && (t71.useStencil = this._useStencilForTile(i47), e68.rctx.setPipelineState(t71.getPipeline()));
    const h36 = a61.geometry.indexCount;
    e68.rctx.bindVAO(o58), c44.assertCompatibleVertexAttributeLocations(o58), e68.rctx.drawElements(r55, h36, l45.indexType, 0);
  }
  _bindOverlayPatchData(e68, t71) {
    e68.setUniform4fv("overlayTexOffset", t71.offsets), e68.setUniform4fv("overlayTexScale", t71.scales);
  }
  _updateTechnique(e68, t71) {
    return this._techniqueConfiguration.output = e68, this._techniqueConfiguration.renderOccluded = t71, this._shaderTechnique = this._techniques.releaseAndAcquire(g19, this._techniqueConfiguration, this._shaderTechnique), this._shaderTechnique;
  }
  get test() {
    return { tileRenderer: this._tileRenderer };
  }
};
e([y2({ readOnly: true })], de5.prototype, "_isGlobal", null), e([y2()], de5.prototype, "renderOccludedFlags", void 0), e([y2({ value: false })], de5.prototype, "renderingDisabled", null), e([y2({ value: true })], de5.prototype, "visible", null), e([y2()], de5.prototype, "renderPatchBorders", null), e([y2()], de5.prototype, "visualizeNormals", null), e([y2()], de5.prototype, "cullBackFaces", null), e([y2({ value: O14.FRONT_TO_BACK })], de5.prototype, "renderOrder", null), e([y2()], de5.prototype, "wireframe", null), de5 = e([a4("esri.views.3d.terrain.TerrainRenderer")], de5);
var ue5 = n7();
var pe5 = n7();
var _e4 = n7();
var fe4 = n7();

// node_modules/@arcgis/core/views/3d/terrain/TerrainSurfacePerformanceInfo.js
var e56 = class {
  constructor() {
    this.numNodes = 0, this.numLeaves = 0, this.numVisible = 0, this.numRendered = 0, this.numSplit = 0, this.numMerged = 0, this.numRenderedPerLevel = new Array(), this.numLoadedPerLevel = new Array();
  }
};

// node_modules/@arcgis/core/views/3d/terrain/TilingSchemeLogic.js
var m39 = class extends S3 {
  constructor(e68) {
    super(e68);
  }
  initialize() {
    this.addHandles([this.layers.on("change", () => this._update()), d3(() => this.extentHelper.layerViewsExtent, () => this._setAdHocTilingScheme())]), this._update(), this.tilingSchemeLocked || this._setAdHocTilingScheme();
  }
  destroy() {
    this._waitTask = null, this.layers.destroy();
  }
  _update() {
    if (this._waitTask = null, this.tilingSchemeLocked)
      return;
    let e68;
    if (this.layers.some((t71) => !(!y4(t71) || t71.isRejected()) && (!(t71.isFulfilled() && !u40(t71, this.viewSpatialReference, this.viewingMode)) && (e68 = t71, !("vector-tile" === (t71 == null ? void 0 : t71.type) || H4(t71))))), e68)
      if (e68.isResolved()) {
        const t71 = v8(e68, this.viewSpatialReference, this.viewingMode);
        if (null != t71) {
          const e69 = new f15(t71.tileInfo);
          this._lockTilingScheme(e69);
        }
      } else
        this._updateWhen(e68);
  }
  _updateWhen(e68) {
    const t71 = e68.when().catch(() => {
    }).then(() => {
      t71 !== this._waitTask || this.destroyed || this._update();
    });
    this._waitTask = t71;
  }
  _lockTilingScheme(e68) {
    if (this.viewingMode === l8.Global) {
      const t71 = e68.levels.length - 1, i47 = e68.spatialReference;
      i47.isWebMercator ? e68 = f15.makeWebMercatorAuxiliarySphere(t71) : i17(i47) && (e68 = f15.makeGCSWithTileSize(e68.spatialReference, e68.pixelSize, t71));
    }
    this.tilingSchemeLocked = true, this.tilingScheme = e68, this.extentHelper.tilingScheme = this.tilingScheme, this._updateTiledLayerExtent(), this.removeAllHandles(), this.addHandles(d3(() => this.extentHelper.tiledLayersExtent, () => this._updateTiledLayerExtent()));
  }
  _updateTiledLayerExtent() {
    this._set("extent", this.extentHelper.tiledLayersExtent);
  }
  _setAdHocTilingScheme() {
    if (this.viewingMode === l8.Global) {
      const e68 = this.extentHelper.viewSpatialReference;
      e68.isWebMercator ? this.tilingScheme = f15.WebMercatorAuxiliarySphere : o27(e68) && (this.tilingScheme = f15.makeGCSWithTileSize(e68, 256)), this._set("extent", this.extentHelper.layerViewsExtent);
    } else {
      const e68 = this.extentHelper.layerViewsExtent;
      null == e68 || I(e68, this.extent) || (this.tilingScheme = f15.fromExtent(e68, this.extentHelper.viewSpatialReference), this._set("extent", e68));
    }
  }
  get test() {
    return { lockTilingScheme: (e68) => this._lockTilingScheme(e68), done: !this._waitTask };
  }
};
function u40(e68, t71, i47) {
  return null != v8(e68, t71, i47);
}
e([y2()], m39.prototype, "tilingScheme", void 0), e([y2({ readOnly: true })], m39.prototype, "extent", void 0), e([y2({ value: false })], m39.prototype, "tilingSchemeLocked", void 0), e([y2({ constructOnly: true })], m39.prototype, "viewSpatialReference", void 0), e([y2({ constructOnly: true })], m39.prototype, "layers", void 0), e([y2({ constructOnly: true })], m39.prototype, "extentHelper", void 0), e([y2({ constructOnly: true })], m39.prototype, "viewingMode", void 0), m39 = e([a4("esri.views.3d.terrain.TilingSchemeLogic")], m39);

// node_modules/@arcgis/core/views/3d/terrain/UpsampleInfo.js
var t63 = class {
  constructor() {
    this.offset = n13(), this.scale = 0, this.tile = null;
  }
  init(s71, t71, i47, e68) {
    this.tile = s71, this.offset[0] = t71, this.offset[1] = i47, this.scale = e68;
  }
  dispose() {
    this.tile = null, this.offset[0] = 0, this.offset[1] = 0, this.scale = 0;
  }
};

// node_modules/@arcgis/core/views/3d/terrain/TerrainSurface.js
var mt2;
var ft2 = mt2 = class extends o3.EventedMixin(S3) {
  constructor(e68) {
    var _a, _b, _c;
    super(e68), this._scaleRangeQueries = new a49(), this._iteratorPool = new e4(n33, (e69) => e69.remove = () => this._iteratorPool.release(e69)), this._postorderIterator = new r29(), this._hasPendingUpdates = false, this._pendingUpdates = 0, this._asyncWorkItems = 0, this._allTilesDirty = true, this._allTilesSorted = true, this._usedMemory = null, this._performanceInfo = new e56(), this._viewChanged = false, this._inFrameTask = false, this._viewChangeUpdateDirty = false, this._eyePosRenderSR = n7(), this._eyePosSurfaceSR = n7(), this._splitLimits = new e55(), this._frustum = H3(), this._viewProjectionMatrix = e15(), this._layerViews = [new Array(), new Array()], this._layerIndexByUid = [/* @__PURE__ */ new Map(), /* @__PURE__ */ new Map()], this._basemapLayerViewHandles = /* @__PURE__ */ new Map(), this._watchUpdatingTracking = new h6(), this._frameTask = F4, this._allTiles = new l3(), this._upsampleInfoPool = new e4(t63), this._shouldEmitChangeEvent = false, this._rootTilesExtent = u5(), this.updatingProgress = 0.5, this._maxNumUpdating = 1, this.maxTextureScale = 1.2, this._spatialReference = f2.WebMercator, this._elevationProjectorCache = /* @__PURE__ */ new Map(), this.visibleElevationBounds = new s59(1 / 0, -1 / 0), this.rootTileElevationBounds = new s59(1 / 0, -1 / 0), this._sebProjectorMap = /* @__PURE__ */ new Map(), this._sebProjectorCache = ln(), this._tilingSchemeSpatialReference = null, this._updatingRootTiles = false, this._pendingTilesForElevationUpdateEvent = /* @__PURE__ */ new Set(), this._pendingTilesToUpdate = /* @__PURE__ */ new Set(), this.totalGeometryUpdates = 0, this.totalTileUpdates = 0, this._oneBatchPerFrameTask = true, this._layerViewsDirty = false, this.unloadedMemory = 0, this.ignoresMemoryFactor = false, this._isWebMercator = false, this._isWebMercatorOnPlateCarree = false, this.overlayManager = new ne4({ ...e68, surface: this }), this._isGlobal = !((_b = (_a = e68.view) == null ? void 0 : _a.state) == null ? void 0 : _b.isLocal), this._isGeographic = ((_c = this._spatialReference) == null ? void 0 : _c.isGeographic) ?? false, this._tileConstructor = this._isGlobal ? D13 : _23;
  }
  initialize() {
    const e68 = this.view, t71 = e68.resourceController;
    this._lercDecoder = s20(t71);
    const i47 = t71.memoryController;
    this._tileCache = new c17((e69, t72) => i47.newCache(e69, t72), "terrain-tile"), this._upsampleMapCache = i47.newCache("terrain-upsample", (e69) => e69.unloadMapData()), this._elevationQueryCache = new t44(i47.newCache("elevation-query"));
    const r55 = this.overlayManager;
    this._renderer = new de5(r55.renderer, e68._stage, this._allTiles, s6(e68.spatialReference).radius, i47), this.addHandles([d3(() => r55.renderer.isEmpty, () => this._evaluateTransparency()), d3(() => this.renderer.visible, (e69) => this.suspended = !e69)], "overlayManager"), this.addHandles([d3(() => this.baseOpacity, () => {
      this._handleLayerViewChanges(), this._updateTileTextures(this._evaluateTransparency() ? H5.UNFADED : H5.IMMEDIATE);
    }, A3), d3(() => this.hasCompositeBlendMode, () => this._updateTileTextures(this._evaluateTransparency() ? H5.UNFADED : H5.IMMEDIATE), A3), d3(() => this.backgroundColor, (e69, t72) => {
      (e69 == null ? void 0 : e69.equals(t72)) || (this._handleLayerViewChanges(), this._renderer.updateTileBackground(e69));
    }, C), d3(() => this.snapLevel, () => this._viewChanged = true, C), d3(() => this.view.pointsOfInterest, (e69) => {
      this._renderer.pointsOfInterest = e69, this._watchUpdatingTracking.removeAll(), e69 && this._watchUpdatingTracking.add(() => e69.focus.renderLocation, () => this._allTilesSorted = false);
    }), d3(() => t20.TERRAIN_TILE_TREE_SHOW_TILES, (t72) => {
      t72 && !this._treeDebugger ? import("./TerrainTileTree3DDebugger-C5FNEJIK.js").then(({ TerrainTileTree3DDebugger: t73 }) => {
        !this._treeDebugger && t20.TERRAIN_TILE_TREE_SHOW_TILES && (this._treeDebugger = new t73({ view: e68 }));
      }) : t72 || (this._treeDebugger = u(this._treeDebugger));
    }, P)]);
    const { spatialReference: a61 } = e68;
    this._extentHelper = h29(this.viewingMode, { layers: e68.map.allLayers, layerViews: e68.allLayerViews, viewSpatialReference: a61 });
    const n61 = new l7({ getCollections: () => {
      var _a, _b;
      return (_b = (_a = e68.defaultsFromMap) == null ? void 0 : _a.mapCollections) == null ? void 0 : _b.map(({ layers: e69 }) => e69);
    }, getChildrenFunction: (e69) => e69 && "layers" in e69 ? e69.layers : null }), l45 = new m39({ layers: n61, extentHelper: this._extentHelper, viewingMode: this.viewingMode, viewSpatialReference: a61 });
    this._set("tilingSchemeLogic", l45), this._updateTilingScheme(), this._elevationDataRequester = t71.createStreamDataRequester(A11.ELEVATION), this._mapDataRequester = t71.createStreamDataRequester(A11.BASEMAP);
    const o58 = t71.scheduler;
    this._frameTask = o58.registerTask(I5.TERRAIN_SURFACE, this), this.addHandles([d3(() => this._extentHelper.stencilEnabledExtents, (e69) => this._renderer.setStencilEnabledLayerExtents(e69), P), d3(() => this.tilingSchemeLogic.tilingScheme, () => this._updateTilingScheme(), C), d3(() => this.extent, () => this._updateRootTiles(), P), e68.on("resize", () => this._viewChangeUpdate()), d3(() => {
      const t72 = e68.state;
      return [this._lodBias, this.lodSnapping, e68.quality, t72.camera, t72.contentCamera, t72.fixedContentCamera];
    }, () => this._viewChangeUpdate(), A3), d3(() => {
      var _a;
      return (_a = e68.qualitySettings) == null ? void 0 : _a.fadeDuration;
    }, (e69) => this._renderer.textureFadingEnabled = e69 > 0, P), d3(() => {
      var _a;
      return (_a = e68.qualitySettings) == null ? void 0 : _a.physicallyBasedRenderingEnabled;
    }, (e69) => this._renderer.pbrMode = e69 ? c7.Simplified : c7.Disabled, P), d3(() => this._userClippingExtent, () => this._updateClippingExtent(), C)]), this.addHandles(e68.allLayerViews.on("after-changes", () => this._layerViewsDirty = true)), this._layerViewsDirty = true, this._handleLayerViewChanges(), this._renderer.updateTileBackground(this.backgroundColor);
  }
  destroy() {
    this._frameTask.remove(), this._watchUpdatingTracking.destroy(), this._lercDecoder = t2(this._lercDecoder), this._removeAllTiles(), this._set("tilingSchemeLogic", u(this.tilingSchemeLogic)), this._basemapLayerViewHandles.forEach((e68, t71) => this._unregisterTiledLayerView(t71)), this._elevationDataRequester = null, this._mapDataRequester = null, this._set("overlayManager", u(this.overlayManager)), this._tileCache = u(this._tileCache), te4.prune(), this._treeDebugger = u(this._treeDebugger), this._renderer = u(this._renderer), this._iteratorPool = u(this._iteratorPool), this._upsampleMapCache = u(this._upsampleMapCache), this._elevationQueryCache = u(this._elevationQueryCache), this._set("view", null), this._extentHelper = u(this._extentHelper), this._upsampleInfoPool = u(this._upsampleInfoPool), u10(), r45();
  }
  get renderer() {
    return this._renderer;
  }
  get frustum() {
    return this._frustum;
  }
  get snapLevel() {
    var _a, _b;
    if (this.lodSnapping === A10.ON) {
      const e68 = this.view, t71 = this.tilingScheme, i47 = (_b = (_a = e68.pointsOfInterest) == null ? void 0 : _a.cameraOnSurface) == null ? void 0 : _b.scale;
      if (t71 && i47) {
        const r55 = e68.state.contentCamera;
        let s71 = ne(e68, r55.eye, r55.viewForward, r55.up).tilt;
        s71 > 90 && (s71 = 180 - s71);
        const a61 = 2 * (s71 / 90) ** 2, n61 = t71.levelAtScale(i47) - a61, l45 = Math.min(n61 + e68.qualitySettings.tiledSurface.lodBias, this._splitLimits.maxLod || 1 / 0);
        return l45 <= 0 ? null : l45;
      }
    }
    return null;
  }
  get lodSnapping() {
    return this.view.qualitySettings.tiledSurface.reduceTileLevelDifferences ? A10.ON : A10.OFF;
  }
  get upsampleInfoPool() {
    return this._upsampleInfoPool;
  }
  get upsampleMapCache() {
    return this._upsampleMapCache;
  }
  get elevationQueryCache() {
    return this._elevationQueryCache;
  }
  get mapTileRequester() {
    return this._mapDataRequester;
  }
  get _userClippingExtent() {
    const { spatialReference: e68 } = this, { clippingArea: t71 } = this.view;
    if (null == t71 || null == e68)
      return null;
    const i47 = u5(), r55 = u14(t71, i47, e68) ? i47 : null, s71 = this._get("extent");
    return I(r55, s71) ? s71 : r55;
  }
  get rootTilesExtent() {
    return this._rootTilesExtent;
  }
  get extent() {
    const e68 = U3(this.groundExtent, this._userClippingExtent, u5()), t71 = this._get("extent");
    return I(e68, t71) ? t71 : e68;
  }
  get groundExtent() {
    return null != this._tilingSchemeExtent ? this._tilingSchemeExtent : this._rootTilesExtent;
  }
  get _tilingSchemeExtent() {
    var _a;
    return (_a = this.tilingSchemeLogic) == null ? void 0 : _a.extent;
  }
  get updating() {
    var _a, _b;
    return this._hasPendingUpdates || (this._maxNumUpdating = 1), !!((this.running || ((_a = this._watchUpdatingTracking) == null ? void 0 : _a.updating) || this._asyncWorkItems > 0) && this.ready && !this.suspended || ((_b = this.overlayManager) == null ? void 0 : _b.updating));
  }
  get running() {
    return (this._hasPendingUpdates || this._viewChanged || this._allTilesDirty || !this._allTilesSorted || this._layerViewsDirty || this._scaleRangeQueries.updating || this._frameTask.updating) && this.ready && !this.suspended;
  }
  get updatingProgressValue() {
    return this._maxNumUpdating = Math.max(this._pendingUpdates, this._maxNumUpdating), 1 - this._pendingUpdates / this._maxNumUpdating;
  }
  get baseOpacity() {
    var _a, _b, _c;
    return ((_c = (_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.ground) == null ? void 0 : _c.opacity) ?? 1;
  }
  set baseOpacity(e68) {
    this.view.map.ground.opacity = e68;
  }
  get viewingMode() {
    return this.view.state.viewingMode;
  }
  get ready() {
    return null != this._rootTiles;
  }
  set renderOrder(e68) {
    this._renderer.renderOrder = e68, this._set("renderOrder", e68);
  }
  get rootTiles() {
    return this._rootTiles;
  }
  get spatialReference() {
    var _a;
    return ((_a = this.tilingScheme) == null ? void 0 : _a.spatialReference) ?? null;
  }
  get backgroundColor() {
    var _a, _b, _c;
    return (_c = (_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.ground) == null ? void 0 : _c.surfaceColor;
  }
  set backgroundColor(e68) {
    this.view.map.ground.surfaceColor = e68;
  }
  set slicePlaneEnabled(e68) {
    this._renderer.slicePlaneEnabled = e68, this._set("slicePlaneEnabled", e68), this._evaluateTransparency();
  }
  get tilingSchemeLocked() {
    var _a;
    return ((_a = this.tilingSchemeLogic) == null ? void 0 : _a.tilingSchemeLocked) ?? false;
  }
  get wireframe() {
    var _a;
    return (_a = this._renderer) == null ? void 0 : _a.wireframe;
  }
  set wireframe(e68) {
    e68 !== this._renderer.wireframe && (this._renderer.wireframe = e68, this._updateAllTileGeometries());
  }
  get opaque() {
    return this._renderer.transparency === he4.Opaque;
  }
  set suspended(e68) {
    this._set("suspended", e68), this._viewChangeUpdate();
  }
  get fadeDuration() {
    return this.view.qualitySettings.fadeDuration ?? 0;
  }
  intersect(e68, t71, i47, r55) {
    this._renderer.intersect(e68, t71, i47, r55);
  }
  getElevation(e68, t71, i47, r55) {
    const s71 = this._rootTiles;
    if (!(s71 == null ? void 0 : s71.length))
      return null;
    if (0 === s71[0].layerInfo[A23.ELEVATION].length)
      return null;
    let a61 = this._elevationProjectorCache.get(r55);
    if (void 0 === a61 && (a61 = G3(r55, this._spatialReference) ?? null, this._elevationProjectorCache.set(r55, a61)), null == a61)
      return n.getLogger(this).error("TerrainSurface.getElevation(): could not project given point to tiling scheme coordinate system"), null;
    const l45 = o4(yt2, e68, t71, i47);
    a61(l45, 0, l45, 0);
    return Pt3(s71, l45[0], l45[1]);
  }
  getElevations(e68, t71, i47) {
    const r55 = this._rootTiles, s71 = r55 ? r55[0].layerInfo[A23.ELEVATION].length : 0;
    if ((r55 == null ? void 0 : r55.length) && 0 !== s71)
      for (let a61 = 0; a61 < t71; ++a61) {
        const t72 = 3 * a61;
        i47(a61, Pt3(r55, e68[t72], e68[t72 + 1]));
      }
    else
      for (let a61 = 0; a61 < t71; ++a61)
        i47(a61, null);
  }
  getScale(e68) {
    if (!this.tilingScheme)
      return null;
    if (!c5(e68, yt2, this.spatialReference))
      return n.getLogger(this).error("TerrainSurface.getScale(): could not project given point to tiling scheme coordinate system"), null;
    const t71 = this._rootTiles;
    if (null != t71) {
      for (const i47 of t71)
        if (i47 == null ? void 0 : i47.containsPoint(yt2)) {
          let e69 = i47;
          for (; e69.children[0] && !e69.rendered; ) {
            const t72 = e69.children[0].extent;
            let i48 = 0;
            yt2[0] > t72[2] && (i48 += 1), yt2[1] < t72[1] && (i48 += 2), e69 = e69.children[i48];
          }
          return this._getLodBiasCorrectedScale(e69.level);
        }
    }
    return 1 / 0;
  }
  _ensureSEBProject(e68) {
    const t71 = this._sebProjectorMap.get(e68);
    if (t71)
      return t71;
    const i47 = G3(e68, this._tilingSchemeSpatialReference, this._sebProjectorCache) ?? null;
    return this._sebProjectorMap.set(e68, i47), i47;
  }
  getSphereElevationBounds(e68, t71) {
    const i47 = this._ensureSEBProject(t71);
    if (null == i47)
      return n.getLogger(this).error("TerrainSurface.getSphereElevationBounds(): could not project given point to tiling scheme coordinate system"), null;
    O4(e68, vt2);
    const r55 = Z(vt2);
    i47(r55, 0, r55, 0);
    const s71 = new e23(), a61 = this._rootTiles;
    if (null != a61) {
      const e69 = [];
      for (const i48 of a61)
        e69.push(i48);
      let t72 = 0;
      for (; t72 < e69.length; ) {
        const i48 = e69[t72];
        if (++t72, !g3(i48.extent, vt2))
          continue;
        const r56 = i48.children;
        if (null == r56[0] || i48.rendered)
          s71.expandElevationRangeValues(i48.elevationBoundsMin, i48.elevationBoundsMax);
        else
          for (const t73 of r56)
            e69.push(t73);
      }
    }
    return s71;
  }
  getRootElevationBounds() {
    return new e23(this.rootTileElevationBounds.min, this.rootTileElevationBounds.max);
  }
  getSphereScale(e68, t71) {
    if (!this.tilingScheme)
      return null;
    if (!c5(e68, Z(vt2), this.spatialReference))
      return n.getLogger(this).error("TerrainSurface.getSphereScale(): could not project given point to tiling scheme coordinate system"), null;
    vt2[3] = t71;
    let i47 = null;
    const r55 = (e69) => {
      if (e69 && g3(e69.extent, vt2)) {
        const t72 = e69.children;
        if (t72[0] && !e69.rendered)
          for (const e70 of t72)
            r55(e70);
        else {
          const t73 = this._getLodBiasCorrectedScale(e69.level);
          i47 = null == i47 ? t73 : Math.min(i47, t73);
        }
      }
    }, s71 = this._rootTiles;
    if (null != s71)
      for (const a61 of s71)
        r55(a61);
    return i47;
  }
  queryVisibleScaleRange(e68, t71, i47, r55) {
    const s71 = t71 ? this.tilingScheme.levelAtScale(t71) : 0, a61 = i47 ? this.tilingScheme.levelAtScale(i47) : 1 / 0, n61 = this._lodBias;
    this._scaleRangeQueries.queryVisibleLevelRange(e68, s71 + n61, a61 + n61, r55);
  }
  _evaluateTransparency() {
    var _a, _b;
    const e68 = this.baseOpacity, t71 = this.overlayManager.renderer.isEmpty, i47 = this._renderer.transparency, r55 = this._allSurfaceLayersTransparent() ? t71 ? he4.Empty : he4.TransparentWithDraped : e68 >= 1 && !this.hasCompositeBlendMode && !this._renderer.slicePlaneEnabled ? he4.Opaque : he4.Semitransparent, s71 = i47 !== r55;
    return s71 && (this._renderer.transparency = r55, (_b = (_a = this.view) == null ? void 0 : _a._stage) == null ? void 0 : _b.renderer.setParameters({ terrainTransparency: this._renderer.transparency })), s71;
  }
  _updateTilingScheme() {
    var _a, _b, _c, _d;
    const e68 = this.tilingSchemeLogic.tilingScheme;
    if (!(e68 !== this.tilingScheme))
      return;
    a24(!!e68, "tiling scheme cannot be reset to undefined"), this._isGlobal = !((_b = (_a = this.view) == null ? void 0 : _a.state) == null ? void 0 : _b.isLocal), this.tilingScheme && this._removeAllTiles();
    const t71 = (e68 == null ? void 0 : e68.spatialReference) ?? f2.WebMercator;
    this._spatialReference = t71, this._isWebMercator = !!(t71 == null ? void 0 : t71.isWebMercator), this._isWebMercatorOnPlateCarree = this._isWebMercator && O((_c = this.view) == null ? void 0 : _c.renderSpatialReference), this._isGeographic = (t71 == null ? void 0 : t71.isGeographic) ?? false, this._set("tilingScheme", e68), this._tilingSchemeSpatialReference = (_d = this.tilingScheme) == null ? void 0 : _d.spatialReference, this._sebProjectorMap.clear(), this._updateClippingExtent(), e68 && (this._updateTiledLayers(), this._renderer.setTileSize(e68.pixelSize), this.overlayManager.setSpatialReference(e68.spatialReference), this._updateRootTiles());
  }
  _acquireTile(e68, t71, i47, r55) {
    const s71 = this._tileCache.pop(mt2._tileMemcacheKey);
    return s71 ? (s71.init(e68, t71, i47, r55, this), s71) : new this._tileConstructor(e68, t71, i47, r55, this);
  }
  get updatingRootTiles() {
    return this._updatingRootTiles;
  }
  _updateRootTiles() {
    const { extent: e68, tilingScheme: t71 } = this;
    if (!t71)
      return;
    const i47 = Et2;
    let s71 = t71.rootTilesInExtent(e68, i47, 5 * n27);
    if (null != this._rootTiles) {
      if (s71.length > n27)
        return void n.getLogger(this).warn(u13);
      const e69 = this._rootTiles.map((e70) => e70.lij), t72 = g(e69, s71, he3);
      if (this._updatingRootTiles = true, t72.removed.length > 0 || t72.added.length > 0) {
        const e70 = this._rootTiles.filter((e71) => !(t72.removed.findIndex((t73) => he3(t73, e71.lij)) > -1) || (this._purgeTile(e71), false));
        t72.added.forEach((t73) => e70.push(this._newRootTile(t73))), this._setRootTiles(e70);
      }
    } else
      this._updatingRootTiles = true, s71.length > n27 && (n.getLogger(this).warn(p14), s71 = t71.rootTilesInExtent(e68, i47, n27)), this._setRootTiles(s71.map((e69) => this._newRootTile(e69)));
    I(i47, this._rootTilesExtent) || (this._rootTilesExtent = u5(i47)), this.renderer.visible = true, this._viewChangeUpdate(), this.overlayManager.setPlacementDirty(), this.notifyChange("ready"), this._updateAllTileGeometries(), this._updatingRootTiles = false, this.checkAllTilesWaterproofness();
  }
  _updateAllTileGeometries() {
    const e68 = this._allTiles.filter((e69) => e69.isLoaded && e69.intersectsClippingArea);
    e68.forEach((e69) => this._renderer.updateTileGeometryState(e69)), e68.forEach((e69) => e69.renderData.updateNeighborData()), this._updateTilesGeometries(e68), this._pendingTilesToUpdate.clear();
  }
  _updateTilesGeometries(e68) {
    if (0 === e68.length)
      return;
    e68.sort(u17);
    const t71 = this.renderer;
    e68.forEach((e69) => t71.updateGeometryIfNeeded(e69)), e68.forEach((e69) => this._pendingTilesForElevationUpdateEvent.add(e69));
  }
  _shouldSplit(e68) {
    return e68.shouldSplit(this._splitLimits, this._eyePosRenderSR, this.snapLevel) === E32.SPLIT;
  }
  _newRootTile(e68) {
    const t71 = this._acquireTile(0, e68[1], e68[2], null);
    return this._shouldSplit(t71) && t71.setPendingUpdate(E32.SPLIT), this._loadTile(t71), this._markTileToUpdate(t71), this._updateRootTileElevationBounds(), t71;
  }
  _setRootTiles(e68) {
    if (this._rootTiles = e68, this._allTiles.clear(), null != e68) {
      const t71 = this._iteratorPool.acquire();
      for (t71.reset(e68); !t71.done; )
        this._allTiles.push(t71.next());
      t71.remove();
    }
    this._renderer.setRootTiles(this._rootTiles), this._updateTilesVisibility(e68);
  }
  _runViewChangeUpdateIfDirty() {
    this._viewChangeUpdateDirty && (this._viewChangeUpdateDirty = false, this._viewChangeUpdate());
  }
  _viewChangeUpdate() {
    this.view && !this.suspended && this.tilingScheme && this.renderer.visible && (this._inFrameTask ? this._viewChangeUpdateDirty = true : (this._viewChangeUpdateDirty = false, this._updateViewDependentParameters(), this._updateTilesVisibility(this._rootTiles)));
  }
  _updateClippingStatus(e68) {
    e68.updateClippingStatus(this.extent) && e68.resetPendingUpdate(E32.GEOMETRY) && this._updateTileGeometryState(e68);
  }
  _updateTilesVisibility(e68) {
    if (null == e68)
      return;
    const t71 = q6(e68), i47 = this.visibleElevationBounds;
    let r55 = t71 ? i47.min : 1 / 0, s71 = t71 ? i47.max : -1 / 0;
    const a61 = this.extent, n61 = this._viewProjectionMatrix;
    this.setTileTreeDirty();
    const l45 = this._iteratorPool.acquire();
    for (l45.reset(e68); !l45.done; ) {
      const e69 = l45.next();
      e69.updateClippingStatus(a61) && e69.resetPendingUpdate(E32.GEOMETRY) && this._updateTileGeometryState(e69), e69.computeVisibility(), e69.updateScreenDepth(n61), e69.renderData && (r55 = Math.min(e69.elevationBoundsMin, r55), s71 = Math.max(e69.elevationBoundsMax, s71));
    }
    l45.remove(), this._viewChanged = true, this._allTilesDirty = true, this._updatePendingTileGeometries(), isFinite(r55) && isFinite(s71) && (i47.min !== r55 || i47.max !== s71) && (this.visibleElevationBounds = new s59(r55, s71));
  }
  _updateRootTileElevationBounds() {
    let e68 = 1 / 0, t71 = -1 / 0;
    const i47 = this._rootTiles;
    null != i47 && i47.forEach(({ elevationBoundsMin: i48, elevationBoundsMax: r56 }) => {
      e68 = Math.min(e68, i48), t71 = Math.max(t71, r56);
    });
    const r55 = this.rootTileElevationBounds;
    r55.min === e68 && r55.max === t71 || (this.rootTileElevationBounds = new s59(e68, t71));
  }
  _updateViewDependentParameters() {
    const { camera: e68, contentCamera: t71 } = this.view.state, i47 = Math.tan(0.5 * t71.fovX), r55 = Math.tan(0.5 * t71.fovY), s71 = this.tilingScheme.pixelSize, a61 = 2 ** -this._lodBias * e68.pixelRatio;
    this._splitLimits.aboveGround = e68.aboveGround, this._splitLimits.fovX = i47, this._splitLimits.fovY = r55, this._splitLimits.relativeWidthLimit = s71 / e68.width * this.maxTextureScale * a61, this._splitLimits.relativeHeightLimit = s71 / e68.height * this.maxTextureScale * a61, this._splitLimits.maxLod = this.tilingScheme.getMaxLod(), this._splitLimits.angledSplitBias = this.view.qualitySettings.tiledSurface.angledSplitBias, this.view.state.fixedContentCamera ? this._splitLimits.frustum = N3(this._splitLimits.frustum ?? H3(), t71.frustum) : this._splitLimits.frustum = null, N3(this._frustum, e68.frustum), c4(this._viewProjectionMatrix, t71.projectionMatrix, t71.viewMatrix), r5(this._eyePosRenderSR, t71.eye), n12(e68.eye, this.view.renderSpatialReference, this._eyePosSurfaceSR, this.spatialReference);
  }
  _updateTileGeometryState(e68) {
    e68.updateVisibility();
    this._renderer.updateTileGeometryState(e68) && this._markTileToUpdate(e68), this._usedMemory = null;
  }
  _markAllTileNeighborsForUpdate(e68) {
    e68.forEachLoadedNeighbor((e69) => {
      this._layerViews[A23.MAP].some(_10) && e69.setPendingUpdate(E32.TEXTURE_FADING), this._pendingTilesToUpdate.add(e69);
    });
  }
  _updateTileTexture(e68, t71) {
    const i47 = e68.resetPendingUpdate(E32.TEXTURE_FADING) ? E32.TEXTURE_FADING : !!e68.resetPendingUpdate(E32.TEXTURE_NOFADING) && E32.TEXTURE_NOFADING;
    i47 && (this._renderer.updateTileTexture(e68, i47), this._usedMemory = null, t71.madeProgress());
  }
  _emitElevationUpdateEventForTiles() {
    if (!this._shouldEmitChangeEvent)
      return;
    const e68 = wt2.extent;
    D(e68), this._pendingTilesForElevationUpdateEvent.forEach((t71) => m4(e68, t71.extent, e68)), this._pendingTilesForElevationUpdateEvent.clear(), wt2.spatialReference = this.spatialReference, this.emit("elevation-change", wt2), this._shouldEmitChangeEvent = false;
  }
  runTask(e68) {
    this._handleLayerViewChanges(e68), this._frameTask.processQueue(e68), this.renderer.processScaleRangeQueries(this._scaleRangeQueries, e68), this._inFrameTask = true, this._pendingUpdates = 0, this._hasPendingUpdates = false, this._updateAllTilesStatus(e68), this._sortTiles(e68);
    const t71 = !this.view.state.fixedContentCamera;
    if (this._mergeAndSplit(e68, t71), this._updateElevation(e68), this._updateTextures(e68), t71 || this._mergeAndSplit(e68, true), this._inFrameTask = false, this._runViewChangeUpdateIfDirty(), this._updatePendingTileGeometries(), this._emitElevationUpdateEventForTiles(), e68.done && e68.hasProgressed && this.requestUpdate(), this.notifyChange("updatingProgressValue"), T7 && this._checkTileInvariant(), !e68.hasProgressed)
      return o14;
  }
  _checkTileInvariant() {
    const e68 = /* @__PURE__ */ new Map();
    this._allTiles.forAll((t71) => e68.set(t71, /* @__PURE__ */ new Set())), this._allTiles.forAll((t71) => {
      var _a;
      if (a24(t71.rendered === t71.isLeaf, ` rendered ${t71.rendered} != ${t71.isLeaf} leaf`), !t71.isLeaf) {
        const e69 = (e70) => 0 === e70.unmergableChildCount && 0 === e70.maxLevelDeltaNeighborCount, i47 = t71.children.reduce((t72, i48) => t72 + (e69(i48) ? 0 : 1), 0);
        if (a24(t71.unmergableChildCount === i47, ` Tile[${t71.lij.toString()}] unmergeable child count mismatch: actual ${t71.unmergableChildCount} vs ${i47}`), t71.hasPendingUpdate(E32.MERGE)) {
          a24(!t71.hasPendingUpdate(E32.SPLIT), "Tile can be both split and merge at the same time");
          for (const e70 of t71.children)
            a24(e70.isLeaf || e70.hasPendingUpdate(E32.MERGE), "Child of tile to merge must also merge");
        }
      }
      for (let i47 = 0; i47 < 4; ++i47) {
        if (t71.rendered) {
          const e69 = (_a = t71.renderData) == null ? void 0 : _a.geometryState.edgePeerNeighbors[i47];
          if (null != e69) {
            {
              const r56 = t71.level - e69.level <= y8;
              r56 || (console.log(`tile level delta [${t71.lij.toString()}] vs [${e69.lij.toString()}] > ${y8}  (edge[${i47}])`), a24(r56, `tile level delta [${t71.level}] vs [${e69.level}] > ${y8}`));
            }
            a24(t71.level - e69.level <= y8, `Max tile lod delta exceeded: [${t71.lij.toString()}] vs [${e69.lij.toString()}]`);
          }
        }
        const r55 = t71.level - y8, s71 = (e69) => e69.isLeaf || e69.level === t71.level, a61 = t71.findNeighborTile(X4[i47], s71);
        if (null != a61) {
          if (t71.isLeaf && t71.level >= y8) {
            let i48 = a61;
            for (; t71.level - i48.level < y8; )
              i48 = i48.parent;
            const s72 = [r55, t71.lij[1] >> y8, t71.lij[2] >> y8];
            if (!he3(s72, i48.lij)) {
              const r56 = e68.get(i48);
              a24(!r56.has(t71), "Cannot already have neighbor"), r56.add(t71);
            }
          }
          a24(a61.rendered || a61.level === t71.level, "Non-same-level-neighbor of rendered must be rendered"), a24(t71.level - a61.level <= y8, `Tile level delta [${t71.level}] vs [${a61.level}] > ${y8}`);
        }
      }
    }), this._allTiles.forAll((t71) => {
      const i47 = t71.maxLevelDeltaNeighborCount, r55 = e68.get(t71);
      a24(i47 === r55.size, `Tile[${t71.lij.toString()}] merge-blocker mismatch: actual ${i47} vs ${r55.size}`);
    });
  }
  _updateAllTilesStatus(e68) {
    if (!this._viewChanged || !this._rootTiles || e68.done)
      return;
    this._viewChanged = false;
    const t71 = new bt2(this._allTiles.length);
    t71.pushAll(this._rootTiles);
    const i47 = this.snapLevel, r55 = this._splitLimits, s71 = this._eyePosRenderSR;
    this._allTiles.forAll((e69) => {
      e69.maxLevelDeltaNeighborCount = 0, e69.unmergableChildCount = 0;
    });
    const a61 = this._viewProjectionMatrix;
    for (; !t71.empty; ) {
      const e69 = t71.pop(), n61 = e69.parent, l45 = null != n61 && n61.hasPendingUpdate(E32.MERGE), o58 = l45 ? E32.MERGE : e69.shouldSplit(r55, s71, i47), h36 = o58 === E32.SPLIT;
      e69.isLeaf ? Ct2(e69, h36) : t71.pushAll(e69.children), l45 ? (e69.resetPendingUpdate(E32.SPLIT), e69.isLeaf || e69.setPendingUpdate(E32.MERGE), this._updateClippingStatus(e69), e69.updateVisibility(), e69.updateScreenDepth(a61)) : h36 ? (e69.resetPendingUpdate(E32.MERGE), e69.isLeaf && e69.setPendingUpdate(E32.SPLIT)) : (e69.resetPendingUpdate(E32.SPLIT) && e69.updateAgentSuspension(), o58 === E32.ELEVATION && e69.updateAgents(A23.ELEVATION), e69.isLeaf || (e69.setPendingUpdate(E32.MERGE), e69.resetPendingUpdate(E32.SPLIT)));
    }
    this.requestUpdate(), (this._shortBatches || !this._oneBatchPerFrameTask) && this._updatePendingTileGeometries(), e68.madeProgress();
  }
  _sortTiles(e68) {
    e68.done || this._allTilesSorted || (d15(this._allTiles, this.view.pointsOfInterest.focus.renderLocation), this._allTilesSorted = true, this._treeDebugger && this._treeDebugger.update(), e68.madeProgress());
  }
  _markTileToUpdate(e68) {
    p15(e68.isLoaded), e68.intersectsClippingArea && (this._pendingTilesToUpdate.add(e68), this._markAllTileNeighborsForUpdate(e68));
  }
  _updatePendingTileGeometries() {
    const e68 = this._pendingTilesToUpdate, t71 = Array.from(e68.keys()).filter((e69) => e69.isLoaded && e69.intersectsClippingArea);
    if (0 === t71.length)
      return void e68.clear();
    const i47 = (i48, r56) => {
      !(r56 == null ? void 0 : r56.isLoaded) || !r56.intersectsClippingArea || r56.level < i48.level || e68.has(r56) || (e68.add(r56), t71.push(r56), r56.renderData.updateNeighborData());
    };
    t71.sort(u17);
    const r55 = t71.length;
    for (let s71 = 0; s71 < r55; ++s71) {
      const r56 = t71[s71];
      p15(r56.isLoaded), p15(r56.intersectsClippingArea);
      const a61 = r56.renderData;
      a61.updateNeighborData();
      const n61 = a61.dirtyEdgeResolutions, l45 = a61.geometryState, o58 = (e69) => {
        var _a;
        const t72 = Y6[e69];
        i47(r56, (_a = l45.cornerPeerNeighbors[e69]) == null ? void 0 : _a.findCorner(G7(t72), (e70) => e70.isLoaded));
      };
      for (let t72 = 0; t72 < 4; ++t72)
        if (n61 & 1 << t72) {
          const s72 = a61.geometryState.edgePeerNeighbors[t72];
          s72 && (s72 == null ? void 0 : s72.level) >= r56.level && s72.forAllSubtreeOnSide(B6(X4[t72]), (t73) => !(!t73.isLoaded || !t73.intersectsClippingArea) && (p15(e68.has(t73) || u17(r56, t73) < 0), i47(r56, t73), true)), o58((t72 + 1) % 4), o58(t72);
        }
    }
    e68.clear(), this._updateTilesGeometries(t71), this._shouldEmitChangeEvent = true, T7 && s32 && this.checkAllTilesWaterproofness();
  }
  _mergeAndSplit(e68, t71) {
    if (this.suspended || e68.done || !this._allTilesDirty)
      return;
    this._allTilesDirty = false, this.requestUpdate();
    let i47 = false;
    const r55 = this.view.state.fixedContentCamera;
    let s71 = false;
    for (; !e68.done; ) {
      s71 = true;
      let a61 = false;
      const n61 = !this._allTiles.some((s72) => {
        if (!i47 && !r55 && !s72.visible)
          return e68.done;
        let n62 = s72;
        if (s72.hasPendingUpdate(E32.MERGE)) {
          if (!t71 || s72.unmergableChildCount > 0)
            return e68.done;
          for (s72.resetPendingUpdate(E32.MERGE); null != n62.parent && 0 === n62.parent.unmergableChildCount && n62.parent.resetPendingUpdate(E32.MERGE); )
            n62 = n62.parent;
          this._mergeTile(n62), a61 = true, e68.madeProgress();
        } else if (s72.resetPendingUpdate(E32.SPLIT)) {
          let t72 = true;
          const i48 = s72.level;
          if (i48 >= y8) {
            const e69 = (e70) => e70.isLeaf || i48 - e70.level < y8;
            for (let r56 = 0; r56 < 4; ++r56) {
              const a62 = s72.findNeighborTile(X4[r56], e69);
              null != a62 && i48 - a62.level === y8 && (t72 = false, T7 && (p15(a62.isLeaf), p15(a62.hasPendingUpdate(E32.SPLIT))));
            }
          }
          t72 ? (this._splitTile(s72), e68.madeProgress(), a61 = true) : s72.setPendingUpdate(E32.SPLIT);
        }
        return e68.done;
      });
      if (a61 && (this._allTilesSorted = false, this._allTilesDirty = true, !this._oneBatchPerFrameTask && this._updatePendingTileGeometries()), n61) {
        if (!i47) {
          i47 = true;
          continue;
        }
        if (!a61)
          break;
      } else
        this._allTilesDirty = true;
    }
    s71 ? e68.madeProgress() : this._allTilesDirty = true, !this._oneBatchPerFrameTask && this._updatePendingTileGeometries(), this._sortTiles(e68);
  }
  _updateElevation(e68) {
    e68.done || (this._allTiles.some((t71) => (t71.resetPendingUpdate(E32.GEOMETRY) && (this._updateTileGeometryState(t71), this._shortBatches && this._updatePendingTileGeometries(), e68.madeProgress()), e68.done)), !this._oneBatchPerFrameTask && this._updatePendingTileGeometries());
  }
  _updateTextures(e68) {
    e68.done || this._allTiles.some((t71) => (this._updateTileTexture(t71, e68), e68.done));
  }
  _updateClippingExtent() {
    this.spatialReference && (this.updateTileOverlayParams(O7.UPDATE), this.overlayManager.setPlacementDirty(), this._updateRootTiles());
  }
  get _lodBias() {
    const e68 = this.view.quality;
    return this.view.qualitySettings.tiledSurface.lodBias - (1 - e68) * i16;
  }
  _getLodBiasCorrectedScale(e68) {
    const t71 = this.tilingScheme.levels, i47 = e12(e68 - this._lodBias, 0, t71.length - 1), r55 = i47 - Math.floor(i47);
    return t71[Math.floor(i47)].scale * (1 - r55) + t71[Math.ceil(i47)].scale * r55;
  }
  _removeAllTiles() {
    null != this._rootTiles && (this._rootTiles.forEach((e68) => this._purgeTile(e68)), this._setRootTiles(null), this.notifyChange("ready")), this._allTiles.clear(), this.renderer.visible = false;
  }
  _purgeDescendantTiles(e68) {
    if (!e68.children[0])
      return;
    const t71 = e68.children.slice();
    e68.unsetChildren();
    for (let i47 = 0; i47 < 4; ++i47)
      this._purgeTile(t71[i47]);
  }
  _purgeTile(e68) {
    e68.isLeaf ? jt2(e68) : this._purgeDescendantTiles(e68), this._allTiles.removeUnordered(e68), this._unloadTile(e68), this._tileCache.put(mt2._tileMemcacheKey, e68);
  }
  _unloadTile(e68) {
    this._pendingTilesToUpdate.delete(e68), this._pendingTilesForElevationUpdateEvent.delete(e68), e68.unload(this._renderer);
  }
  _splitTile(e68) {
    a24(e68.isLeaf, "Tile that is already split should not be split again!"), a24(e68.rendered, "Tile marked to split is not rendered"), jt2(e68);
    const t71 = e68.level + 1, i47 = 2 * e68.lij[1], r55 = 2 * e68.lij[2], s71 = e68.setChildren(this._createTile(t71, i47, r55, e68), this._createTile(t71, i47, r55 + 1, e68), this._createTile(t71, i47 + 1, r55, e68), this._createTile(t71, i47 + 1, r55 + 1, e68));
    this._allTiles.pushArray(s71), e68.updateAgentSuspension(), a24(e68.rendered, "parent should be rendered"), this._unloadTile(e68), s71.forEach((e69) => this._loadTile(e69)), s71.forEach((e69) => this._pendingTilesToUpdate.add(e69)), this._markAllTileNeighborsForUpdate(e68), this._emitTileScaleChange(e68, e68.level + 1), this._allTilesDirty = true, this._shortBatches && this._updatePendingTileGeometries(), s71.forEach((e69) => Ct2(e69, e69.hasPendingUpdate(E32.SPLIT))), ++this._performanceInfo.numSplit;
  }
  _emitTileScaleChange(e68, t71 = e68.level) {
    Lt2.spatialReference = this.spatialReference, Lt2.extent = e68.extent, Lt2.scale = this._getLodBiasCorrectedScale(t71), this.emit("scale-change", Lt2);
  }
  _createTile(e68, t71, i47, r55) {
    a24(!!r55, "_createTile sanity check");
    const s71 = this._acquireTile(e68, t71, i47, r55);
    return s71.updateClippingStatus(this.extent), s71.updateScreenDepth(this._viewProjectionMatrix), this._shouldSplit(s71) && s71.setPendingUpdate(E32.SPLIT), s71;
  }
  get _shortBatches() {
    return this.view.state.mode !== I4.IDLE;
  }
  _mergeTile(e68) {
    a24(!e68.hasPendingUpdate(E32.SPLIT), "_mergeTile sanity check"), a24(!e68.isLeaf, "Cannot merge a leaf"), e68.isLeaf || (this._purgeDescendantTiles(e68), a24(!e68.renderData, "_mergeTile sanity check"), this._loadTile(e68), this._markTileToUpdate(e68), this._emitTileScaleChange(e68), this._shortBatches && this._updatePendingTileGeometries(), Ct2(e68, false), this._allTilesDirty = true, ++this._performanceInfo.numMerged);
  }
  _loadTile(e68) {
    e68.load(), this.requestUpdate(), this._allTilesDirty = true, this.overlayManager && this.overlayManager.hasOverlays && this.overlayManager.setTileParameters(e68);
  }
  _elevationDataArrived(e68, t71, i47) {
    const r55 = new r43(e68.lij, e68.extent, i47);
    e68.dataArrived(t71, A23.ELEVATION, r55);
    const s71 = [e68], a61 = e68.level, n61 = this._iteratorPool.acquire();
    for (n61.reset(s71); !n61.done; ) {
      const e69 = n61.next();
      e69.findElevationBoundsForLayer(t71, a61), e69.computeElevationBounds();
    }
    0 === a61 && this._updateRootTileElevationBounds(), n61.remove(), this._updateTilesVisibility(s71);
  }
  _handleLayerViewChanges(e68 = C5) {
    if (!this._layerViewsDirty)
      return;
    this._layerViewsDirty = false;
    let t71 = false;
    const i47 = /* @__PURE__ */ new Set();
    let r55 = -1;
    for (let s71 = this.view.allLayerViews.length - 1; s71 >= 0; s71--) {
      const e69 = this.view.allLayerViews.items[s71];
      if (i47.add(e69.uid), x10(e69) || R4(e69))
        if (this._basemapLayerViewHandles.has(e69.uid) && !R4(e69)) {
          const i48 = this._layerClassFromLayerView(e69), s72 = this._getLayerIdxByUID(i48, e69.uid);
          null != s72 && ((s72 < r55 || null == r55) && (t71 = true), r55 = s72);
        } else
          this._registerTiledLayerView(e69), e69.layer.loaded && (t71 = true);
    }
    this._basemapLayerViewHandles.forEach((e69, r56) => {
      i47.has(r56) || (this._unregisterTiledLayerView(r56), t71 = true);
    }), t71 && this._updateTiledLayers(), this.hasCompositeBlendMode = this._hasCompositeBlendMode(), this._evaluateTransparency(), e68.madeProgress();
  }
  _allSurfaceLayersTransparent() {
    var _a, _b;
    let e68 = 0 === ((_b = (_a = this.view.map) == null ? void 0 : _a.ground) == null ? void 0 : _b.opacity);
    for (const t71 of this.view.allLayerViews.items)
      if (W4(t71) && !j3(t71.layer) && 0 !== t71.fullOpacity)
        return e68 = false, e68;
    return e68;
  }
  _hasCompositeBlendMode() {
    for (const e68 of this.view.allLayerViews.items)
      if ((U6(e68) || R4(e68)) && o34(e34[e68.layer.blendMode]))
        return true;
    return false;
  }
  _layerClassFromLayerView(e68) {
    return d14(e68) ? A23.ELEVATION : A23.MAP;
  }
  _registerTiledLayerView(e68) {
    const t71 = [];
    if ((U6(e68) || R4(e68)) && t71.push(d3(() => e68.layer.blendMode, () => {
      this.hasCompositeBlendMode = this._hasCompositeBlendMode(), this._updateTileTextures(H5.UNFADED);
    })), !R4(e68)) {
      const i47 = this._layerClassFromLayerView(e68);
      t71.push(d3(() => e68.suspended, () => this._updateTiledLayers())), t71.push(d3(() => e68.fullOpacity, () => this._updateTileTextures(H5.UNFADED))), t71.push(d3(() => "effectiveScaleRange" in e68.layer ? e68.layer.effectiveScaleRange : null, () => this._restartAllAgents(i47))), t71.push(e68.on("data-changed", () => {
        const t72 = this._getLayerIdxByUID(i47, e68.uid);
        null != t72 && this._invalidateLayerData(t72, i47);
      }));
    }
    this._unregisterTiledLayerView(e68.uid), this._basemapLayerViewHandles.set(e68.uid, t71);
  }
  _unregisterTiledLayerView(e68) {
    const t71 = this._basemapLayerViewHandles.get(e68);
    if (t71) {
      for (const e69 of t71)
        e69.remove();
      this._basemapLayerViewHandles.delete(e68);
    }
  }
  _updateTiledLayers() {
    if (!this.tilingScheme || this.view.suspended)
      return;
    const e68 = this.view.allLayerViews, t71 = [[], []];
    let i47 = null;
    e68.forEach((e69) => {
      if (!e69.layer || e69.suspended || !x10(e69) || !e69.fullExtent)
        return;
      const r55 = this._layerClassFromLayerView(e69);
      if (r55 === A23.MAP) {
        const t72 = e69.displayLevelRange.maxLevel;
        t72 !== 1 / 0 && (null === i47 || t72 > i47) && (i47 = t72);
      }
      t71[r55].push(e69);
    });
    for (const r55 of E30) {
      const e69 = this._layerViews[r55], i48 = t71[r55];
      i48.reverse();
      const s71 = i48.length;
      let a61 = e69.length !== s71;
      const n61 = new Array(s71), l45 = new Array(e69.length);
      this._layerIndexByUid[r55].clear();
      for (let t72 = 0; t72 < s71; t72++) {
        const s72 = i48[t72].uid;
        this._layerIndexByUid[r55].set(s72, t72);
        const o58 = e69.indexOf(i48[t72]);
        n61[t72] = o58, t72 !== o58 && (a61 = true), o58 > -1 && (l45[o58] = t72);
      }
      if (a61) {
        const e70 = this._postorderIterator;
        for (e70.reset(this._rootTiles); !e70.done; )
          e70.next().modifyLayers(l45, n61, r55);
        this._layerViews[r55] = i48, this._restartAllAgents(r55), this._updateTilesVisibility(this._rootTiles);
      }
    }
    this.tilingScheme.ensureMaxLod(i47) && this._viewChangeUpdate();
  }
  _restartAllAgents(e68) {
    const t71 = this._postorderIterator;
    for (t71.reset(this._rootTiles); !t71.done; ) {
      const i47 = t71.next();
      i47.restartAgents(e68), e68 === A23.ELEVATION && i47.computeElevationBounds();
    }
    this._updateRootTileElevationBounds();
  }
  layerViewByIndex(e68, t71) {
    return this._layerViews[t71][e68];
  }
  numLayers(e68) {
    return this._layerViews[e68].length;
  }
  _updateTileTextures(e68) {
    this._allTiles.forAll((t71) => {
      t71.updateAgents(A23.MAP), e68 === H5.IMMEDIATE ? this.renderer.updateTileTexture(t71, E32.TEXTURE_NOFADING) : t71.updateRenderData(A23.MAP, e68);
    }), this._evaluateTransparency();
  }
  _invalidateLayerData(e68, t71) {
    this._allTiles.forAll((i47) => i47.removeLayerAgent(e68, t71)), this._allTiles.forAll((i47) => i47.invalidateLayerData(e68, t71));
  }
  setTileTreeDirty() {
    this._allTilesDirty = true;
  }
  requestRender(e68 = O7.UPDATE) {
    this.renderer.setNeedsRender(e68);
  }
  requestUpdate() {
    1 == ++this._pendingUpdates && (this._hasPendingUpdates = true);
  }
  requestTileData(e68, t71, i47, r55) {
    const s71 = this.layerViewByIndex(t71, i47), a61 = s71.layer;
    return !a61.tilemapCache || _10(s71) ? this._requestTileData(e68, i47, s71, r55) : (++this._asyncWorkItems, a61.tilemapCache.fetchAvailability(e68.lij[0], e68.lij[1], e68.lij[2], { ...r55, timeout: 6e3 }).then(() => --this._asyncWorkItems).catch((t72) => {
      throw --this._asyncWorkItems, s3(r55), b(t72) || this._dataMissing(e68, i47, s71, { notInTilemap: true }), t72;
    }).then(() => this._frameTask.schedule(() => this._requestTileData(e68, i47, s71, r55), r55.signal)));
  }
  _requestTileData(e68, t71, i47, r55) {
    return t71 === A23.ELEVATION ? d14(i47) ? this._requestElevationTileData(e68, i47, r55) : Promise.reject() : W4(i47) ? this._requestMapTileData(e68, i47, r55) : Promise.reject();
  }
  _requestElevationTileData(e68, t71, i47) {
    ++this._asyncWorkItems;
    const r55 = (r56) => {
      if (c(i47))
        return;
      const s72 = this._layerIndexByUid[A23.ELEVATION].get(t71.uid);
      null != s72 ? (this._usedMemory = null, this.requestUpdate(), this._elevationDataArrived(e68, s72, r56)) : n.getLogger(this).warn("TerrainSurface: received data from unknown layer %d %s", A23.ELEVATION, e68.lij.toString());
    }, s71 = (i48) => {
      b(i48) || (this._dataMissing(e68, A23.ELEVATION, t71, i48), this.requestUpdate());
    };
    if (C7(t71.layer))
      return t71.layer.fetchTile(e68.lij[0], e68.lij[1], e68.lij[2], { noDataValue: a23, signal: i47.signal }).then((e69) => {
        if (!c(i47))
          return this._frameTask.schedule(() => r55(e69), i47.signal, s71);
        n.getLogger(this).warnOnce("A call to fetchTile resolved even though the request was aborted. fetchTile should not resolve if options.signal.aborted is true.");
      }, s71).finally(() => {
        --this._asyncWorkItems;
      });
    const a61 = t71.getTileUrl(e68.lij[0], e68.lij[1], e68.lij[2]);
    return this._elevationDataRequester.request(a61, "binary", i47).then((e69) => this._lercDecoder.decode(e69, { noDataValue: a23 }, i47.signal)).then((e69) => {
      e69 ? r55(new a17(e69)) : s71(new Error("LERC decoding failed"));
    }, s71).finally(() => {
      --this._asyncWorkItems;
    });
  }
  _requestMapTileData(e68, t71, i47) {
    ++this._asyncWorkItems;
    const r55 = (r56, s72) => {
      --this._asyncWorkItems, w12(s72), c(i47) || (this._dataMissing(e68, A23.MAP, t71, r56), this.requestUpdate());
    }, s71 = (e69) => (t72) => r55(t72, e69), a61 = (r56) => this._frameTask.schedule(() => {
      --this._asyncWorkItems, this.requestUpdate(), c(i47) ? w12(r56) : this._mapTileDataArrived(e68, t71, r56);
    }, i47.signal, s71(r56)).catch(s71(r56)), l45 = (e69, t72 = null) => this._frameTask.schedule(() => r55(e69, t72));
    if (_10(t71)) {
      const r56 = t71.schemaHelper.getLevelRowColumn(e68.lij);
      return t71.fetchTile(r56[0], r56[1], r56[2], i47).then(a61, l45);
    }
    if (O11(t71))
      return t71.fetchTile(e68.lij[0], e68.lij[1], e68.lij[2], i47).then(a61, l45);
    if (y9(t71) && C7(t71.layer))
      return t71.layer.fetchTile(e68.lij[0], e68.lij[1], e68.lij[2], i47).then((e69) => {
        if (c(i47))
          return n.getLogger(this).warnOnce("A call to fetchTile resolved even though the request was aborted. fetchTile should not resolve if options.signal.aborted is true."), void l45(u2());
        a61(e69);
      }, l45);
    let o58 = t71.getTileUrl(e68.lij[0], e68.lij[1], e68.lij[2]);
    m6(t71.layer) && t71.layer.refreshTimestamp && (o58 += `${o58.includes("?") ? "&" : "?"}_ts=${t71.layer.refreshTimestamp}`);
    const h36 = t71.hasMixedImageFormats ? "image+type" : "image";
    return this._mapDataRequester.request(o58, h36, i47).then(a61, l45);
  }
  _mapTileDataArrived(e68, t71, i47) {
    const r55 = this._getLayerIdxByUID(A23.MAP, t71.uid);
    null != r55 ? e68.dataArrived(r55, A23.MAP, i47) : (w12(i47), n.getLogger(this).warn("TerrainSurface: received data from unknown layer"));
  }
  _getLayerIdxByUID(e68, t71) {
    return this._layerIndexByUid[e68].get(t71);
  }
  _dataMissing(e68, t71, i47, r55) {
    const s71 = this._getLayerIdxByUID(t71, i47.uid);
    null != s71 ? e68.dataMissing(s71, t71, r55) : n.getLogger(this).warn("TerrainSurface: received data from unknown layer");
  }
  updateTileOverlayParams(e68) {
    this._rootTiles && this.overlayManager && (this._allTiles.forAll((e69) => {
      e69.renderData && this.overlayManager.setTileParameters(e69);
    }), this._renderer.setNeedsRender(e68));
  }
  get performanceInfo() {
    const e68 = this._performanceInfo;
    return e68.numNodes = this._allTiles.length, e68.numLeaves = e68.numVisible = e68.numRendered = e68.numLoadedPerLevel.length = e68.numRenderedPerLevel.length = 0, this._allTiles.forAll((t71) => {
      t71.isLeaf && e68.numLeaves++;
      const i47 = t71.level;
      t71.renderData && (e68.numLoadedPerLevel[i47] = (e68.numLoadedPerLevel[i47] || 0) + 1), t71.visible && (e68.numVisible++, t71.rendered && (e68.numRenderedPerLevel[i47] = (e68.numRenderedPerLevel[i47] || 0) + 1, e68.numRendered++));
    }), e68;
  }
  get usedMemory() {
    return this.tilingScheme ? (null == this._usedMemory && (this._usedMemory = this._recalculateUsedMemory()), this._usedMemory ?? 0) : 0;
  }
  _recalculateUsedMemory() {
    return this.tilingScheme ? Math.round(this._allTiles.reduce((e68, t71) => e68 + t71.usedMemory, 0)) : null;
  }
  getUsedMemoryForLayerView(e68) {
    let t71 = 0;
    const i47 = this._layerClassFromLayerView(e68), r55 = this._getLayerIdxByUID(i47, e68.uid);
    return null != r55 && this._allTiles.forAll((e69) => t71 += e69.getUsedMemoryForLayer(i47, r55)), t71;
  }
  getTile(e68) {
    if (null == e68 || null == this._rootTiles)
      return null;
    const t71 = e68.split("/").map((e69) => +e69);
    if (0 === t71[0])
      return this._rootTiles.find((e69) => e69.lij[1] === t71[1] && e69.lij[2] === t71[2]);
    const i47 = t71[0], r55 = t71[1] >> i47, s71 = t71[2] >> i47;
    let a61;
    if (this._rootTiles.some((e69) => e69.lij[1] === r55 && e69.lij[2] === s71 && (a61 = e69, true)), a61) {
      let e69 = 1 << t71[0] - 1;
      for (; a61.lij[0] < t71[0]; ) {
        let i48 = t71[1] & e69 ? 2 : 0;
        if ((t71[2] & e69) > 0 && i48++, !a61.children[i48])
          return null;
        a61 = a61.children[i48], e69 >>= 1;
      }
      return a24(a61.lij[0] === t71[0] && a61.lij[1] === t71[1] && a61.lij[2] === t71[2], "not the right tile?"), a61;
    }
    return null;
  }
  get renderPatchBorders() {
    return this._renderer.renderPatchBorders;
  }
  set renderPatchBorders(e68) {
    this._renderer.renderPatchBorders = e68;
  }
  get visualizeNormals() {
    return this._renderer.visualizeNormals;
  }
  set visualizeNormals(e68) {
    this._renderer.visualizeNormals = e68;
  }
  get renderingDisabled() {
    return this._renderer.renderingDisabled;
  }
  set renderingDisabled(e68) {
    this._renderer.renderingDisabled = e68;
  }
  get test() {
    const e68 = this;
    return { renderer: e68._renderer, lercDecoder: e68._lercDecoder, forceReload: () => {
      null != e68._rootTiles && e68._rootTiles.length > 0 && (e68._mergeTile(e68._rootTiles[0]), e68._viewChangeUpdate());
    }, getTiles: () => e68._allTiles.toArray(), getRenderedTiles() {
      St2.clear(), e68._allTiles.forAll((e69) => {
        e69.visible && e69.rendered && St2.push(e69);
      });
      const t71 = St2.toArray();
      return l19(e68.renderOrder, t71), t71;
    }, lockTilingScheme(t71, i47) {
      e68._extentHelper.defaultTiledLayersExtent = i47, e68.tilingSchemeLogic.test.lockTilingScheme(t71);
    } };
  }
  checkAllTilesWaterproofness() {
    if (!s32)
      return;
    const e68 = this._rootTiles;
    if (null == e68)
      return;
    const t71 = (e69) => {
      var _a, _b, _c;
      return ((_c = (_b = (_a = e69 == null ? void 0 : e69.renderData) == null ? void 0 : _a.geometry) == null ? void 0 : _b.indices) == null ? void 0 : _c.length) > 0;
    }, i47 = (e69, i48) => {
      t71(e69) && console.error("Tile[", e69.lij, "] has geometry although parent[", i48.lij, "] has geom");
    }, r55 = (e69) => {
      var _a, _b;
      if (e69.intersectsClippingArea)
        if (e69.renderData && !e69.renderData.geometryState && console.error("Tile[", e69.lij, "] has renderData but not geometryState"), e69.renderData && !e69.renderData.geometry && console.error("Tile[", e69.lij, "] has renderData but not geometryInfo"), !((_a = e69.renderData) == null ? void 0 : _a.geometry) || (((_b = e69.renderData.geometry.indices) == null ? void 0 : _b.length) ?? 0) > 0 || console.error("Tile[", e69.lij, "] has renderData but no indices - geometryInfo: ", e69.renderData.geometry), t71(e69)) {
          e69.checkGeometryWaterproofness();
          for (const t72 of e69.children)
            i47(t72, e69);
        } else if (e69.isLeaf)
          console.error("Tile[", e69.lij, "] has no geometry and no children, from root to leaf");
        else
          for (const t72 of e69.children)
            r55(t72);
    }, s71 = (e69) => {
      var _a;
      const t72 = ((_a = e69.parent) == null ? void 0 : _a.visible) ?? true, i48 = e69.visible;
      e69.computeVisibility();
      const r56 = e69.visible;
      if (i48 !== r56 && t72 && console.error(" Tile[", e69.lij, "] has out of date visibility: ", i48, " instead of ", r56), !e69.isLeaf)
        for (const a61 of e69.children)
          s71(a61);
    };
    for (const a61 of e68)
      r55(a61), s71(a61);
  }
  get isGlobal() {
    return this._isGlobal;
  }
  get isGeographic() {
    return this._isGeographic;
  }
  get isWebMercator() {
    return this._isWebMercator;
  }
  get isWebMercatorOnPlateCarree() {
    return this._isWebMercatorOnPlateCarree;
  }
  isEastEndWrap(e68) {
    return this._isGlobal && e68[2] === this.lijEastEnd(e68[0]) - 1;
  }
  isWestEndWrap(e68) {
    return this._isGlobal && 0 === e68[2];
  }
  lijEastEnd(e68) {
    return 1 << e68 + (this._isGeographic ? 1 : 0);
  }
  wrapEastWest(e68) {
    const t71 = this.lijEastEnd(e68[0]), i47 = e68[2];
    if (0 <= i47 && i47 < t71)
      return e68;
    if (!this._isGlobal)
      return null;
    const r55 = (i47 + (i47 < 0 ? t71 : 0)) % t71;
    return [e68[0], e68[1], r55];
  }
  enableInternalChecks(e68) {
    E14(e68);
  }
  enableWaterproofnessChecks(e68) {
    S9(e68);
  }
};
ft2._tileMemcacheKey = "TerrainTileMemcache", e([y2()], ft2.prototype, "_renderer", void 0), e([y2({ constructOnly: true })], ft2.prototype, "_scaleRangeQueries", void 0), e([y2({ constructOnly: true })], ft2.prototype, "view", void 0), e([y2({ constructOnly: true })], ft2.prototype, "overlayManager", void 0), e([y2()], ft2.prototype, "_hasPendingUpdates", void 0), e([y2()], ft2.prototype, "_asyncWorkItems", void 0), e([y2()], ft2.prototype, "_allTilesDirty", void 0), e([y2()], ft2.prototype, "_allTilesSorted", void 0), e([y2()], ft2.prototype, "_viewChanged", void 0), e([y2()], ft2.prototype, "_splitLimits", void 0), e([y2({ readOnly: true })], ft2.prototype, "_watchUpdatingTracking", void 0), e([y2()], ft2.prototype, "_frameTask", void 0), e([y2({ readOnly: true })], ft2.prototype, "snapLevel", null), e([y2({ readOnly: true })], ft2.prototype, "lodSnapping", null), e([y2()], ft2.prototype, "_userClippingExtent", null), e([y2()], ft2.prototype, "_rootTilesExtent", void 0), e([y2({ readOnly: true })], ft2.prototype, "extent", null), e([y2({ readOnly: true })], ft2.prototype, "groundExtent", null), e([y2({ readOnly: true })], ft2.prototype, "_tilingSchemeExtent", null), e([y2({ readOnly: true })], ft2.prototype, "updating", null), e([y2({ readOnly: true })], ft2.prototype, "running", null), e([y2(t32)], ft2.prototype, "updatingProgress", void 0), e([y2({ readOnly: true })], ft2.prototype, "updatingProgressValue", null), e([y2()], ft2.prototype, "_maxNumUpdating", void 0), e([y2()], ft2.prototype, "baseOpacity", null), e([y2()], ft2.prototype, "hasCompositeBlendMode", void 0), e([y2({ readOnly: true })], ft2.prototype, "viewingMode", null), e([y2()], ft2.prototype, "maxTextureScale", void 0), e([y2({ readOnly: true })], ft2.prototype, "ready", null), e([y2({ value: O14.FRONT_TO_BACK })], ft2.prototype, "renderOrder", null), e([y2({ readOnly: true })], ft2.prototype, "rootTiles", null), e([y2()], ft2.prototype, "_rootTiles", void 0), e([y2({ readOnly: true })], ft2.prototype, "spatialReference", null), e([y2({ type: u6 })], ft2.prototype, "backgroundColor", null), e([y2({ value: false })], ft2.prototype, "slicePlaneEnabled", null), e([y2({ readOnly: true })], ft2.prototype, "tilingScheme", void 0), e([y2({ readOnly: true })], ft2.prototype, "tilingSchemeLocked", null), e([y2({ readOnly: true })], ft2.prototype, "tilingSchemeLogic", void 0), e([y2()], ft2.prototype, "wireframe", null), e([y2({ value: false })], ft2.prototype, "suspended", null), e([y2()], ft2.prototype, "fadeDuration", null), e([y2()], ft2.prototype, "visibleElevationBounds", void 0), e([y2()], ft2.prototype, "rootTileElevationBounds", void 0), e([y2()], ft2.prototype, "_layerViewsDirty", void 0), e([y2()], ft2.prototype, "renderPatchBorders", null), e([y2()], ft2.prototype, "visualizeNormals", null), e([y2()], ft2.prototype, "renderingDisabled", null), ft2 = mt2 = e([a4("esri.views.3d.terrain.TerrainSurface")], ft2);
var Tt2 = ft2;
var yt2 = n7();
var vt2 = w6();
var Et2 = u5();
var St2 = new l3();
var wt2 = new e31("ground");
var Lt2 = { spatialReference: null, extent: null, scale: 0 };
function Pt3(e68, t71, i47) {
  var _a;
  for (const r55 of e68) {
    if (!r55.containsPointXY(t71, i47))
      continue;
    let e69 = r55;
    for (; e69 && !e69.renderData; ) {
      const r56 = (t71 > e69.extentMidX ? 1 : 0) + (i47 < e69.extentMidY ? 2 : 0);
      e69 = e69.children[r56];
    }
    const s71 = ((_a = e69 == null ? void 0 : e69.renderData) == null ? void 0 : _a.geometryState.samplerData) ?? null;
    return e53(t71, i47, s71);
  }
  return null;
}
var bt2 = class {
  constructor(e68) {
    this.capacity = e68, this._head = 0, this._tail = 0, this._data = new Array(e68);
  }
  push(e68) {
    const t71 = this._tail;
    if (!(t71 < this.capacity))
      throw new Error("Queue full");
    this._data[t71] = e68, this._tail = t71 + 1;
  }
  pushAll(e68) {
    const t71 = e68.length;
    if (0 === t71)
      return;
    const i47 = this._tail;
    if (!(i47 + t71 <= this.capacity))
      throw new Error("Queue full");
    for (let r55 = 0; r55 < t71; ++r55)
      this._data[i47 + r55] = e68[r55];
    this._tail = i47 + t71;
  }
  pop() {
    const e68 = this._head;
    if (e68 < this._tail) {
      const t71 = this._data[e68];
      return this._head = e68 + 1, t71;
    }
  }
  get empty() {
    return this._head >= this._tail;
  }
  get full() {
    return this._tail >= this._data.length;
  }
};
function Ct2(e68, t71) {
  !e68.isLeaf || e68.level < y8 || xt2(e68, (e69) => {
    t71 && Dt2(e69);
    const i47 = Mt2(e69);
    if (e69.maxLevelDeltaNeighborCount++, i47) {
      let t72 = e69.parent;
      for (; t72; ) {
        const e70 = Mt2(t72);
        if (t72.unmergableChildCount++, !e70)
          break;
        t72 = t72.parent;
      }
    }
  });
}
function Dt2(e68) {
  if (e68.hasPendingUpdate(E32.SPLIT))
    return;
  let t71 = e68.parent;
  for (; t71 && t71.resetPendingUpdate(E32.MERGE); )
    t71 = t71.parent;
  e68.resetPendingUpdate(E32.MERGE), e68.isLeaf && e68.setPendingUpdate(E32.SPLIT), e68.level < y8 || xt2(e68, (e69) => {
    Dt2(e69);
  });
}
function jt2(e68) {
  e68.level < y8 || xt2(e68, (e69) => {
    if (e69.maxLevelDeltaNeighborCount--, 0 === e69.maxLevelDeltaNeighborCount && 0 === e69.unmergableChildCount) {
      let t71 = e69.parent;
      for (; t71 && (t71.unmergableChildCount--, Mt2(t71)); )
        t71 = t71.parent;
    }
  });
}
function Mt2(e68) {
  return 0 === e68.maxLevelDeltaNeighborCount && 0 === e68.unmergableChildCount;
}
function xt2(e68, t71) {
  if (e68.level < y8)
    return;
  const i47 = e68.level - y8, r55 = e68.lij[1] >> y8, s71 = e68.lij[2] >> y8, a61 = (e69) => e69.isLeaf || e69.level === i47;
  for (let n61 = 0; n61 < 4; ++n61) {
    const l45 = e68.findNeighborTile(X4[n61], a61);
    if (!l45 || l45.level !== i47)
      continue;
    const o58 = l45.lij;
    o58[1] === r55 && o58[2] === s71 || t71(l45);
  }
}

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/ModelDirtySet.js
var n52 = class {
  constructor(e68, t71, r55, o58) {
    this.operation = e68, this.geometry = t71, this.states = r55, this.sync = o58;
  }
};
var m40 = class extends S3 {
  constructor(e68) {
    super(e68), this._residentGeomRecords = /* @__PURE__ */ new Map(), this._dirtyGeomRecords = /* @__PURE__ */ new Map(), this.dirty = false;
  }
  commitLayer(e68, t71) {
    const r55 = this._dirtyGeomRecords.get(e68);
    r55 && (r55.forEach((r56, o58) => {
      const s71 = this._ensureGeomRecord(e68, o58);
      r56.forEach(({ geometry: e69, operation: r57, states: d44 }, n61) => {
        let m46 = false;
        if (r57 === E16.UPDATE) {
          const r58 = s71.get(n61);
          if (r58) {
            if (d44 & I7.TRANSFORMATION) {
              const t72 = this.model.getObject(o58);
              this.model.updateRenderGeometryTransformation(t72, e69, r58) && (m46 = true);
            }
            m46 || t71.updates.push({ renderGeometry: r58, updateType: d44 });
          } else
            s15(false, "ModelDirtySet.commitLayer: invalid update");
        }
        if (r57 === E16.REMOVE || m46) {
          const e70 = s71.get(n61);
          e70 ? (t71.removes.push(e70), s71.delete(n61)) : r57 === E16.REMOVE && s15(false, "ModelDirtySet.commitLayer: invalid remove");
        }
        if (r57 === E16.ADD || m46) {
          const r58 = this.model.getObject(o58);
          if (null != r58) {
            const o59 = this.model.getRenderGeometry(r58, e69);
            t71.adds.push(o59), s71.set(n61, o59);
          }
        }
      }), 0 === s71.size && this._residentGeomRecords.get(e68).delete(o58);
    }), 0 === this._residentGeomRecords.get(e68).size && this._residentGeomRecords.delete(e68), this._dirtyGeomRecords.delete(e68), this.dirty = this._hasDirtyGeometryRecords);
  }
  commitSyncUpdates(e68, t71) {
    const r55 = this._dirtyGeomRecords.get(e68);
    r55 && r55.forEach((r56, o58) => {
      const s71 = this._ensureGeomRecord(e68, o58);
      r56.forEach(({ geometry: e69, operation: r57, states: d44, sync: n61 }, m46) => {
        let h36 = false;
        if (r57 === E16.UPDATE && n61) {
          const r58 = s71.get(m46);
          if (r58) {
            if (d44 & I7.TRANSFORMATION) {
              const t72 = this.model.getObject(o58);
              this.model.updateRenderGeometryTransformation(t72, e69, r58) && (h36 = true);
            }
            h36 || t71.updates.push({ renderGeometry: r58, updateType: d44 });
          } else
            s15(false, "ModelDirtySet.commitSyncUpdates: invalid update");
        }
      });
    });
  }
  getResidentRenderGeometries(e68, t71) {
    const r55 = this._residentGeomRecords.get(e68);
    r55 && r55.forEach((e69) => e69.forEach((e70) => t71.push(e70)));
  }
  _objectStateChanged(e68, t71) {
    for (const r55 of t71.geometries)
      this._updateOrCreateDirtyRecord(t71, r55, null, E16.UPDATE, e68);
  }
  visibilityChanged(e68) {
    this._objectStateChanged(I7.VISIBILITY, e68);
  }
  highlightChanged(e68) {
    this._objectStateChanged(I7.HIGHLIGHT, e68);
  }
  occlusionChanged(e68) {
    this._objectStateChanged(I7.OCCLUDEE, e68);
  }
  attributesChanged({ object: e68, geometry: t71, sync: r55 }) {
    this._updateOrCreateDirtyRecord(e68, t71, null, E16.UPDATE, I7.GEOMETRY, r55);
  }
  layerAdded(e68) {
    e68.objects.forAll((t71) => this._layerObjectAdded(e68, t71));
  }
  layerRemoved(e68) {
    e68.objects.forAll((t71) => this._layerObjectRemoved(e68, t71));
  }
  layerObjectAdded(e68) {
    this._layerObjectAdded(e68.layer, e68.object);
  }
  _layerObjectAdded(e68, t71) {
    const r55 = e68.id;
    for (const o58 of t71.geometries)
      this._geometryAdded(t71, o58, r55);
  }
  layerObjectRemoved(e68) {
    this._layerObjectRemoved(e68.layer, e68.object);
  }
  layerObjectsAdded(e68) {
    for (const t71 of e68.objects)
      this._layerObjectAdded(e68.layer, t71);
  }
  layerObjectsRemoved(e68) {
    for (const t71 of e68.objects)
      this._layerObjectRemoved(e68.layer, t71);
  }
  _layerObjectRemoved(e68, t71) {
    const r55 = e68.id;
    for (const o58 of t71.geometries)
      this._geometryRemoved(t71, o58, r55);
  }
  transformationChanged(e68) {
    const t71 = this._getParentLayerId(e68), r55 = e68.id;
    this._ensureGeomRecord(t71, r55).forEach((r56) => {
      this._updateOrCreateDirtyRecord(e68, r56.geometry, t71, E16.UPDATE, I7.TRANSFORMATION);
    });
  }
  shaderTransformationChanged(e68) {
    const t71 = this._getParentLayerId(e68), r55 = e68.id;
    this._ensureGeomRecord(t71, r55).forEach((t72) => {
      t72.objectShaderTransformationChanged(e68.shaderTransformation);
    });
  }
  geometryAdded(e68) {
    this._geometryAdded(e68.object, e68.geometry);
  }
  _geometryAdded(e68, t71, r55 = null) {
    this._updateOrCreateDirtyRecord(e68, t71, r55, E16.ADD);
  }
  geometryRemoved(e68) {
    this._geometryRemoved(e68.object, e68.geometry);
  }
  _geometryRemoved(e68, t71, r55 = null) {
    this._updateOrCreateDirtyRecord(e68, t71, r55, E16.REMOVE);
  }
  _updateOrCreateDirtyRecord(e68, t71, r55, o58, s71 = I7.NONE, d44 = false) {
    r55 = r55 ?? this._getParentLayerId(e68);
    const m46 = e68.id, h36 = t71.id, y26 = this._ensureDirtyRecord(r55, m46), l45 = y26.get(h36);
    if (l45) {
      const e69 = l45.operation;
      e69 === E16.REMOVE && o58 === E16.ADD && l45.states !== I7.NONE ? l45.operation = E16.UPDATE : e69 === E16.REMOVE && o58 === E16.ADD || e69 === E16.ADD && o58 === E16.REMOVE ? y26.delete(h36) : e69 !== E16.UPDATE || o58 !== E16.REMOVE && o58 !== E16.UPDATE ? (s15((e69 === E16.REMOVE || e69 === E16.ADD) && o58 === E16.UPDATE, "ModelDirtySet.objectGeometryAdded: inconsistent state"), l45.states |= s71) : (l45.operation = o58, l45.states |= s71), l45.sync = l45.sync || d44;
    } else
      y26.set(h36, new n52(o58, t71, s71, d44));
    this.dirty = this._hasDirtyGeometryRecords;
  }
  _ensureGeomRecord(e68, t71) {
    let r55 = this._residentGeomRecords.get(e68);
    r55 || (r55 = /* @__PURE__ */ new Map(), this._residentGeomRecords.set(e68, r55));
    let o58 = r55.get(t71);
    return o58 || (o58 = /* @__PURE__ */ new Map(), r55.set(t71, o58)), o58;
  }
  get _hasDirtyGeometryRecords() {
    return n5(this._dirtyGeomRecords, (e68) => n5(e68, (e69) => e69 && e69.size > 0));
  }
  _ensureDirtyRecord(e68, t71) {
    let r55 = this._dirtyGeomRecords.get(e68);
    r55 || (r55 = /* @__PURE__ */ new Map(), this._dirtyGeomRecords.set(e68, r55));
    let o58 = r55.get(t71);
    return o58 || (o58 = /* @__PURE__ */ new Map(), r55.set(t71, o58)), o58;
  }
  _getParentLayerId(e68) {
    return e68.parentLayer ? e68.parentLayer.id : n4;
  }
  formatDebugInfo() {
    const e68 = ["ADD", "UPD", void 0, "REM"];
    let t71 = "";
    return this._dirtyGeomRecords.forEach((r55, o58) => {
      r55.forEach((r56, s71) => {
        t71.length > 0 && (t71 += "\n"), t71 += o58 + "." + s71;
        const d44 = [];
        r56.forEach((e69) => {
          const t72 = e69.operation;
          d44[t72] || (d44[t72] = []), d44[t72].push(e69.geometry.id);
        });
        for (let o59 = 0; o59 < d44.length; o59++)
          if (d44[o59]) {
            t71 += " " + e68[o59 - 1] + ": ";
            for (let e69 = 0; e69 < d44[o59].length; e69++)
              t71 += d44[o59][e69] + ", ";
          }
      });
    }), t71;
  }
  get test() {
    const e68 = this;
    return { get residentLayerCount() {
      return e68._residentGeomRecords.size;
    }, get residentObjectCount() {
      return Array.from(e68._residentGeomRecords.values()).reduce((e69, t71) => e69 + t71.size, 0);
    }, commit: (t71) => e68._dirtyGeomRecords.forEach((r55, o58) => e68.commitLayer(o58, t71)) };
  }
};
e([y2({ constructOnly: true })], m40.prototype, "model", void 0), e([y2()], m40.prototype, "dirty", void 0), m40 = e([a4("esri.views.3d.webgl-engine.lib.ModelDirtySet")], m40);
var h31 = m40;

// node_modules/@arcgis/core/views/3d/webgl-engine/parts/Model.js
var h32 = class extends S3 {
  constructor() {
    super(...arguments), this.dirtySet = new h31({ model: this }), this._content = /* @__PURE__ */ new Map(), this._originFactory = new _11(null);
  }
  getObject(t71) {
    return this._content.get(t71);
  }
  add(t71) {
    const e68 = t71.id;
    s15(!this._content.has(e68), "Model/Stage already contains object to be added"), this._content.set(e68, t71), n31(t71) && this.dirtySet.layerAdded(t71);
  }
  remove(t71) {
    return !!this._content.has(t71.id) && (this._content.delete(t71.id), n31(t71) && this.dirtySet.layerRemoved(t71), true);
  }
  addMany(t71) {
    for (const e68 of t71)
      e68 && (s15(!this._content.has(e68.id), "Model/Stage already contains object to be added"), this._content.set(e68.id, e68));
  }
  removeMany(t71) {
    for (const e68 of t71)
      e68 && (s15(this._content.has(e68.id), "Model/Stage doesn't contain object to be removed"), this._content.delete(e68.id));
  }
  has(t71) {
    return this._content.has(t71.id);
  }
  forEachOfType(t71, e68) {
    this._content.forEach((o58) => {
      o58.type === t71 && e68(o58);
    });
  }
  getRenderGeometry(t71, e68) {
    const o58 = new m17(e68, { castShadow: t71.castShadow, objectShaderTransformation: t71.shaderTransformation });
    o58.transformation = t71.getCombinedStaticTransformation(e68, p43);
    const { localOrigin: r55 } = e68;
    return o58.localOrigin = null != r55 ? r55 : this._originFactory.getOrigin(Z(o58.boundingSphere)), o58;
  }
  updateRenderGeometryTransformation(t71, e68, o58) {
    if (null == t71)
      return false;
    o58.transformation = t71.getCombinedStaticTransformation(e68, p43);
    const r55 = this._originFactory.getOrigin(Z(o58.boundingSphere));
    return o58.localOrigin !== r55;
  }
  getStats() {
    const t71 = {}, e68 = Array.from(this._content.values());
    for (let o58 = 0; o58 < e19.COUNT; ++o58)
      t71[o58] = e68.filter((t72) => t72.type === o58).length;
    return { contentTypes: t71, dirtySet: this.dirtySet.formatDebugInfo() };
  }
  get test() {
    return { content: Array.from(this._content.values()) };
  }
};
e([y2({ constructOnly: true })], h32.prototype, "dirtySet", void 0), h32 = e([a4("esri.views.3d.webgl-engine.parts.Model")], h32);
var p43 = e15();

// node_modules/@arcgis/core/views/3d/webgl-engine/collections/Component/IndexRange/ComponentRangeRunLengthEncoded.js
var t64 = class {
  constructor(t71) {
    this._totalCount = t71, this._componentCountCache = -1, this._indexRanges = [0, t71];
  }
  allVisible() {
    return this.componentCount === this._totalCount;
  }
  allInvisible() {
    return 0 === this._indexRanges.length;
  }
  isVisible(t71) {
    if (t71 < 0 || t71 >= this._totalCount)
      return false;
    if (this.allVisible())
      return true;
    {
      const n61 = this._indexRanges;
      let e68 = 0, o58 = n61.length / 2;
      if (t71 < n61[2 * e68] || t71 > n61[2 * o58] + n61[2 * o58 + 1])
        return false;
      for (; o58 - e68 > 0; ) {
        const s71 = Math.floor(0.5 * (e68 + o58)), i47 = n61[2 * s71];
        if (t71 < i47) {
          if (o58 - e68 == 1)
            return false;
          o58 = s71;
          continue;
        }
        if (t71 < i47 + n61[2 * s71 + 1])
          return true;
        if (o58 - e68 == 1)
          return false;
        e68 = s71 + 1;
      }
      return false;
    }
  }
  get componentCount() {
    if (-1 === this._componentCountCache) {
      const t71 = this._indexRanges;
      let n61 = 0;
      for (let e68 = 0; e68 < t71.length; e68 += 2)
        n61 += t71[e68 + 1];
      this._componentCountCache = n61;
    }
    return this._componentCountCache;
  }
  reset(t71) {
    "all" === t71 || t71.length === this._totalCount ? this._indexRanges = [0, this._totalCount] : this._indexRanges = n53(t71), this._componentCountCache = -1;
  }
  forEachComponent(t71) {
    const n61 = this._indexRanges;
    for (let e68 = 0; e68 < n61.length; e68 += 2) {
      const o58 = n61[e68], s71 = o58 + n61[e68 + 1];
      for (let n62 = o58; n62 < s71; n62++)
        if (!t71(n62))
          return false;
    }
    return true;
  }
  forEachComponentRange(t71) {
    const n61 = this._indexRanges;
    for (let e68 = 0; e68 < n61.length; e68 += 2) {
      const o58 = n61[e68];
      if (!t71(o58, o58 + n61[e68 + 1]))
        return false;
    }
    return true;
  }
  computeOffsetRanges(t71) {
    const n61 = new Array(this._indexRanges.length), e68 = this._indexRanges;
    for (let o58 = 0; o58 < e68.length; o58 += 2) {
      const s71 = e68[o58], i47 = s71 + e68[o58 + 1], r55 = t71[s71], h36 = t71[i47];
      n61[o58] = r55, n61[o58 + 1] = h36 - r55;
    }
    return n61;
  }
};
function n53(t71) {
  const n61 = new Array();
  if (0 === t71.length)
    return n61;
  let e68 = t71[0], o58 = 1;
  for (let s71 = 1; s71 < t71.length; s71++) {
    const i47 = t71[s71];
    e68 + o58 === i47 ? o58 += 1 : (n61.push(e68), n61.push(o58), e68 = i47, o58 = 1);
  }
  return n61.push(e68), n61.push(o58), n61;
}

// node_modules/@arcgis/core/views/3d/webgl-engine/collections/Component/ComponentData.js
var e57 = class {
  constructor(e68, h36) {
    this.offsets = h36, this.pickability = null, this.highlightCounts = null, this.verticalOffsets = null, this.cachedGeometryRanges = null, this.cachedHighlightRanges = null, this.cachedDefaultRanges = null;
    const i47 = this.count;
    this.visibility = new t64(i47), this.materialDataBuffer = e68.getBuffer(i47), this.materialDataIndices = new Uint16Array(i47);
    for (let t71 = 0; t71 < i47; t71++)
      this.materialDataIndices[t71] = this.materialDataBuffer.acquireIndex();
  }
  destroy() {
    for (let t71 = 0; t71 < this.count; t71++)
      this.materialDataBuffer.releaseIndex(this.materialDataIndices[t71]);
  }
  get count() {
    return this.offsets.length - 1;
  }
  get geometryRanges() {
    return null == this.cachedGeometryRanges && (this.cachedGeometryRanges = this.visibility.computeOffsetRanges(this.offsets)), this.cachedGeometryRanges;
  }
  get highlightRanges() {
    return null == this.highlightCounts ? null : (this._updateCachedHighlightRanges(), this.cachedHighlightRanges);
  }
  get defaultShadowMapRanges() {
    return null == this.highlightCounts ? this.geometryRanges : (this._updateCachedHighlightRanges(), this.cachedDefaultRanges);
  }
  highlightsDirty() {
    this.cachedHighlightRanges = null, this.cachedDefaultRanges = null;
  }
  visibilityDirty() {
    this.cachedGeometryRanges = null, this.highlightsDirty();
  }
  _updateCachedHighlightRanges() {
    if ((null == this.cachedHighlightRanges || null == this.cachedDefaultRanges) && null != this.highlightCounts) {
      const { highlightRanges: t71, defaultRanges: e68 } = h33(this.highlightCounts, this.visibility, this.offsets);
      this.cachedHighlightRanges = t71, this.cachedDefaultRanges = e68;
    }
  }
};
function h33(t71, e68, h36) {
  const i47 = [], s71 = [];
  let a61 = h36.length, n61 = h36.length;
  return e68.forEachComponent((e69) => (t71[e69] > 0 ? (a61 !== e69 - 1 && (i47.length && i47.push(h36[a61 + 1] - i47[i47.length - 1]), i47.push(h36[e69])), a61 = e69) : (n61 !== e69 - 1 && (s71.length && s71.push(h36[n61 + 1] - s71[s71.length - 1]), s71.push(h36[e69])), n61 = e69), true)), i47.length && i47.push(h36[a61 + 1] - i47[i47.length - 1]), s71.length && s71.push(h36[n61 + 1] - s71[s71.length - 1]), { highlightRanges: i47, defaultRanges: s71 };
}

// node_modules/@arcgis/core/views/3d/webgl-engine/collections/Component/ComponentObject.js
var e58 = class {
  constructor(t71, e68, s71, i47, o58, r55) {
    this.transform = t71, this.toMapSpace = e68, this.obb = s71, this.components = i47, this.renderable = o58, this.intersectionGeometry = r55, this.visible = false, this.offsetObb = null;
  }
  destroy() {
    this.intersectionGeometry = u(this.intersectionGeometry), this.renderable = u(this.renderable), this.components = u(this.components);
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/ComponentUtils.js
function n54(n61, i47, e68, s71) {
  if (e68 >= i47)
    return n61;
  null == n61 && (n61 = r46());
  const a61 = n61.isVisibleBit;
  let l45 = n61.data;
  const c44 = u41(l45), f48 = e68 / c44 | 0, h36 = e68 - c44 * f48, B18 = (i47 - 1) / c44 | 0, E38 = l45, b22 = s71 === a61;
  if (!(e68 < E38.length * c44) && b22) {
    const n62 = f48 + 1, i48 = Math.ceil(E38.length * t), r55 = B18 + 1;
    let e69 = Math.max(n62, i48);
    e69 = Math.min(e69, r55), l45 = new Uint32Array(e69), l45.set(E38);
  }
  return f48 < l45.length && (l45[f48] = o53(l45[f48], h36, b22)), n61.data = l45, n61;
}
function i43(t71, n61) {
  if (null == t71)
    return true;
  const { isVisibleBit: i47, data: r55 } = t71, o58 = u41(r55);
  return n61 < r55.length * o58 ? e59(i47, r55, n61, o58) : !t71.isVisibleBit;
}
function r46(t71 = true) {
  return { isVisibleBit: !t71, data: new Uint32Array(0) };
}
function e59(t71, n61, i47, r55) {
  const e68 = i47 / r55 | 0, u46 = i47 - e68 * r55;
  return s63(n61[e68], u46) === t71;
}
function u41(t71) {
  const n61 = 8;
  return t71.BYTES_PER_ELEMENT * n61;
}
function o53(t71, n61, i47) {
  return t71 & ~(1 << n61) | (i47 ? 1 : 0) << n61;
}
function s63(t71, n61) {
  return !!(t71 & 1 << n61);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/collections/Component/IntersectionGeometry.js
var B15 = class {
  constructor(t71, n61, o58) {
    this.viewingMode = t71, this.positionData = n61, this._components = o58, this._planetCenter = n7(), this._planetNorth = n7(), this._componentIndicesForBsp = null, this._componentBspNodes = [], this._aabb = [0, 0, 0, 0, 0, 0], this._indices = n61.indices ? t9(n61.indices) : l9(n61.positions.length / 3), this._positions = n61.positions, this._componentIntersectionData = new Array(o58.count);
  }
  destroy() {
    this._positions = null, this._indices = null, this._componentIntersectionData.length = 0, this._perComponentAabbs = null;
  }
  getComponentAabb(t71, n61) {
    const o58 = this._ensureComponentAabbs(), e68 = 6 * t71;
    return n61[0] = o58[e68], n61[1] = o58[e68 + 1], n61[2] = o58[e68 + 2], n61[3] = o58[e68 + 3], n61[4] = o58[e68 + 4], n61[5] = o58[e68 + 5], n61;
  }
  getComponentAabbs() {
    return this._ensureComponentAabbs();
  }
  _ensureComponentAabbs() {
    return this._perComponentAabbs || (this._perComponentAabbs = this._computePerComponentAabbs()), this._perComponentAabbs;
  }
  getComponentPositions(t71, n61) {
    n61.indices = this._indices, n61.data = this._positions, n61.stride = 3, n61.startIndex = this._components.offsets[t71], n61.endIndex = this._components.offsets[t71 + 1];
  }
  intersect(o58, p48, r55, h36, d44, l45, x31, b22) {
    const { position: _26 } = l45, I27 = K(D14, o58, _26), g23 = K(F16, p48, _26), B18 = s12(R13, l45.rotationScale);
    S4(I27, I27, B18), S4(g23, g23, B18);
    const w27 = u8(P16, B18), k26 = new s13(this._positions, 3), z24 = this._indices, E38 = this._components.offsets, G19 = B4(I27, g23, v27);
    if (this.viewingMode === l8.Global) {
      const t71 = this._planetCenter;
      j2(t71, _26), S4(t71, t71, B18);
      const n61 = this._planetNorth;
      o4(n61, 0, 0, 1), S4(n61, n61, B18), z2(n61, n61);
    }
    const L24 = r5(V15, I27), O32 = r5(U20, g23), S24 = K(q17, g23, I27);
    z2(S24, S24);
    const { isVerticalRay: T21 } = x31, H22 = (t71) => {
      const n61 = this.getComponentAabb(t71, N17);
      if (null != d44) {
        const n62 = d44[t71];
        null == h36 || T21 ? (I27[2] = L24[2] - n62, g23[2] = O32[2] - n62) : h36.componentOffset = n62;
      }
      if (null == h36 || T21 || h36.applyToAabb(n61), !k3(n61, I27, G19, r55))
        return;
      const o59 = E38[t71] / 3, e68 = E38[t71 + 1] / 3, i47 = (n62, o60, e69) => b22(t71, n62, e69 ? S4(e69, e69, w27) : null, o60);
      (null == h36 || T21) && e68 - o59 > s62 ? (null == this._componentIntersectionData[t71] && (this._componentIntersectionData[t71] = new f39(this._indices, o59, e68, k26)), this._componentIntersectionData[t71].intersectRay(I27, g23, x31, i47)) : x8(I27, g23, o59, e68, z24, k26, h36, x31, i47);
    };
    this._intersectComponents(H22, T21, I27, g23);
  }
  _intersectComponents(t71, n61, o58, s71) {
    const i47 = this._components.pickability, a61 = this._components.visibility;
    if (this._components.visibility.componentCount < H19) {
      const n62 = (n63) => (i43(i47, n63) && t71(n63), true);
      return void a61.forEachComponent(n62);
    }
    0 === this._componentBspNodes.length && this._generateComponentBspRoot();
    const c44 = this._componentIndicesForBsp, r55 = (n62) => {
      i43(i47, n62) && a61.isVisible(n62) && t71(n62);
    }, h36 = (t72, n62) => {
      for (let o59 = t72; o59 < n62; ++o59)
        r55(c44[o59]);
    };
    if (n61) {
      let t72 = 0;
      for (; t72 >= 0; ) {
        const n62 = this._componentBspNodes[t72], e68 = n62.plane;
        if (!e68 || -1 === n62.child0 && -1 === n62.child1) {
          h36(n62.minComponentIndexIndex, n62.maxComponentIndexIndex);
          break;
        }
        {
          h36(n62.minMidComponentIndexIndex, n62.maxMidComponentIndexIndex);
          const s72 = P3(e68, o58) - e68[3];
          if (s72 < 0) {
            if (-1 === n62.child0) {
              h36(n62.minComponentIndexIndex, n62.minMidComponentIndexIndex);
              break;
            }
            t72 = n62.child0;
          } else {
            if (!(s72 > 0))
              break;
            if (-1 === n62.child1) {
              h36(n62.maxMidComponentIndexIndex, n62.maxComponentIndexIndex);
              break;
            }
            t72 = n62.child1;
          }
        }
      }
    } else {
      const t72 = J11;
      K(t72, s71, o58), z2(t72, t72);
      const n62 = this._componentBspNodes, i48 = (e68) => {
        const s72 = n62[e68], a62 = s72.plane;
        if (!a62 || -1 === s72.child0 && -1 === s72.child1)
          h36(s72.minComponentIndexIndex, s72.maxComponentIndexIndex);
        else {
          const n63 = P3(a62, o58) - a62[3], e69 = P3(a62, t72);
          s72.minComponentIndexIndex < s72.minMidComponentIndexIndex && (n63 <= 0 || e69 < 0) && (-1 !== s72.child0 ? i48(s72.child0) : h36(s72.minComponentIndexIndex, s72.minMidComponentIndexIndex)), h36(s72.minMidComponentIndexIndex, s72.maxMidComponentIndexIndex), s72.maxMidComponentIndexIndex < s72.maxComponentIndexIndex && (n63 >= 0 || e69 > 0) && (-1 !== s72.child1 ? i48(s72.child1) : h36(s72.maxMidComponentIndexIndex, s72.maxComponentIndexIndex));
        }
      };
      i48(0);
    }
  }
  _generateComponentBspRoot() {
    const t71 = this._components.count, n61 = new Uint16Array(t71);
    this._componentIndicesForBsp = n61;
    for (let e68 = 0; e68 < t71; ++e68)
      n61[e68] = e68;
    const o58 = this._ensureComponentAabbs(), s71 = this._planetCenter, d44 = this._planetNorth, x31 = G15;
    j2(x31, s71), z2(x31, x31);
    _(L22, d44, x31);
    const b22 = this._aabb, _26 = b22[2], I27 = [];
    let C28 = 0;
    const u46 = this._componentBspNodes;
    u46.length = 0;
    const M21 = (t72, n62) => {
      const e68 = 6 * t72, s72 = o58[e68], i47 = o58[e68 + 1], m46 = o58[e68 + 2], c44 = o58[e68 + 3], r55 = o58[e68 + 4], h36 = o58[e68 + 5], d45 = o4(O27, 0.5 * (s72 + c44), 0.5 * (i47 + r55), 0.5 * (m46 + h36)), l45 = 0.5 * (c44 - s72), x32 = 0.5 * (r55 - i47), b23 = 0.5 * (h36 - m46), _27 = Math.sqrt(l45 * l45 + x32 * x32 + b23 * b23), I28 = n62, f48 = n62[3], C29 = P3(I28, d45) - f48;
      return Math.abs(C29) > _27 ? Math.sign(C29) : 0;
    }, g23 = (t72, e68, s72) => {
      let i47 = 1 / 0, a61 = 1 / 0, m46 = 1 / 0, c44 = -1 / 0, p48 = -1 / 0, r55 = -1 / 0;
      for (let h36 = e68; h36 < s72; ++h36) {
        const t73 = 6 * n61[h36];
        i47 = Math.min(i47, o58[t73]), c44 = Math.max(c44, o58[t73 + 3]), a61 = Math.min(a61, o58[t73 + 1]), p48 = Math.max(p48, o58[t73 + 4]), m46 = Math.min(m46, o58[t73 + 2]), r55 = Math.max(r55, o58[t73 + 5]);
      }
      t72[0] = i47, t72[1] = a61, t72[2] = m46, t72[3] = c44, t72[4] = p48, t72[5] = r55;
    }, A32 = this.viewingMode === l8.Local;
    let y26 = false;
    if (!A32) {
      const t72 = o4(O27, 0.5 * (b22[0] + b22[3]), 0.5 * (b22[1] + b22[4]), 0.5 * (b22[2] + b22[5])), n62 = U2(s71, t72);
      y26 = _26 > 0.5 * n62;
    }
    const j26 = (t72, o59, i47, h36, x32) => {
      const b23 = u46.length;
      let _27;
      if (y26 || i47 >= T18 || o59 - t72 < S20)
        _27 = new w23(t72, o59, o59, o59, null);
      else {
        g23(k21, t72, o59);
        const h37 = k21[0], x33 = k21[1], f48 = k21[2], C29 = k21[3], u47 = k21[4], y27 = C29 - h37, B18 = u47 - x33, v32 = n11(), N20 = v32;
        if (A32)
          y27 >= B18 ? (o4(N20, 1, 0, 0), v32[3] = -0.5 * (h37 + C29)) : (o4(N20, 0, 1, 0), v32[3] = -0.5 * (x33 + u47));
        else {
          const t73 = z22, n62 = E34;
          o4(t73, 0.5 * (h37 + C29), 0.5 * (x33 + u47), f48), K(t73, t73, s71), z2(t73, t73), _(n62, t73, d44), z2(n62, n62), y27 >= B18 ? r5(N20, n62) : (_(N20, n62, t73), z2(N20, N20)), v32[3] = P3(N20, s71);
        }
        let D19, F20;
        {
          let e68 = t72, s72 = o59;
          for (; e68 < s72; ) {
            const t73 = n61[e68];
            M21(t73, v32) < 0 ? ++e68 : (--s72, n61[e68] = n61[s72], n61[s72] = t73);
          }
          D19 = e68;
          let i48 = e68;
          for (s72 = o59; i48 < s72; ) {
            const t73 = n61[s72 - 1];
            M21(t73, v32) > 0 ? --s72 : (n61[s72 - 1] = n61[i48], n61[i48] = t73, ++i48);
          }
          F20 = s72;
        }
        _27 = new w23(t72, D19, F20, o59, v32), D19 >= t72 + S20 && I27.push(() => j26(t72, D19, i47 + 1, b23, true)), o59 >= F20 + S20 && I27.push(() => j26(F20, o59, i47 + 1, b23, false));
      }
      if (u46.push(_27), -1 !== h36) {
        const t73 = u46[h36];
        x32 ? t73.child0 = b23 : t73.child1 = b23;
      }
    };
    for (I27.push(() => j26(0, t71, 0, -1, false)); C28 < I27.length; ) {
      (0, I27[C28])(), ++C28;
    }
  }
  _computePerComponentAabbs() {
    const t71 = this._components.count, n61 = t13(6 * t71), o58 = this._indices, e68 = this._positions, s71 = this._components.offsets;
    let i47 = 0, a61 = 1 / 0, m46 = 1 / 0, c44 = 1 / 0, p48 = -1 / 0, r55 = -1 / 0, h36 = -1 / 0;
    for (let d44 = 0; d44 < t71; d44++) {
      const t72 = s71[d44], l45 = s71[d44 + 1];
      let x31 = 1 / 0, b22 = 1 / 0, _26 = 1 / 0, I27 = -1 / 0, f48 = -1 / 0, C28 = -1 / 0;
      for (let n62 = t72; n62 < l45; n62++) {
        const t73 = 3 * o58[n62], s72 = e68[t73], i48 = e68[t73 + 1], a62 = e68[t73 + 2];
        x31 = Math.min(x31, s72), b22 = Math.min(b22, i48), _26 = Math.min(_26, a62), I27 = Math.max(I27, s72), f48 = Math.max(f48, i48), C28 = Math.max(C28, a62);
      }
      n61[i47++] = x31, n61[i47++] = b22, n61[i47++] = _26, n61[i47++] = I27, n61[i47++] = f48, n61[i47++] = C28, a61 = Math.min(a61, x31), m46 = Math.min(m46, b22), c44 = Math.min(c44, _26), p48 = Math.max(p48, I27), r55 = Math.max(r55, f48), h36 = Math.max(h36, C28);
    }
    return this._aabb[0] = a61, this._aabb[1] = m46, this._aabb[2] = c44, this._aabb[3] = p48, this._aabb[4] = r55, this._aabb[5] = h36, n61;
  }
  get positions() {
    return this._positions;
  }
  get indices() {
    return this._indices;
  }
  get aabb() {
    return this._ensureComponentAabbs(), this._aabb;
  }
};
var w23 = class {
  constructor(t71, n61, o58, e68, s71) {
    this.minComponentIndexIndex = t71, this.minMidComponentIndexIndex = n61, this.maxMidComponentIndexIndex = o58, this.maxComponentIndexIndex = e68, this.plane = s71, this.child0 = -1, this.child1 = -1;
  }
};
var v27 = n7();
var N17 = i3();
var k21 = [0, 0, 0, 0, 0, 0];
var D14 = n7();
var F16 = n7();
var R13 = e16();
var P16 = e16();
var V15 = n7();
var U20 = n7();
var q17 = n7();
var z22 = n7();
var E34 = n7();
var G15 = n7();
var L22 = n7();
var O27 = n7();
var S20 = 5;
var T18 = 10;
var H19 = 7;
var J11 = n7();

// node_modules/@arcgis/core/views/3d/webgl-engine/collections/Component/Renderable.js
var t65 = class {
  constructor(t71, s71, e68) {
    this.material = t71, this.geometry = s71, this.meta = e68;
  }
  destroy() {
    this.material.dispose(), this.geometry.dispose();
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/collections/Component/RenderGeometry.js
var s64 = class {
  constructor(s71, i47, t71, e68) {
    this.vao = s71, this.primitiveType = i47, this.parameters = t71, this.indexed = e68;
  }
  dispose() {
    this.vao.dispose();
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/depthRange.js
var r47 = class {
  constructor() {
    this.near = Number.MAX_VALUE, this.far = -Number.MAX_VALUE;
  }
};
function n55(r55, n61) {
  return { near: r55, far: n61 };
}
function a51(r55) {
  return r55 ? t66(r55, 1 / 0, -1 / 0) : n55(1 / 0, -1 / 0);
}
function t66(r55, n61, a61) {
  return r55.near = n61, r55.far = a61, r55;
}
function e60(r55, n61) {
  null != n61 && (r55.near = Math.min(r55.near, n61.near), r55.far = Math.max(r55.far, n61.far));
}
function f40(r55, n61) {
  return r55.near <= n61 && n61 <= r55.far;
}
var u42 = { near: 0, far: 0 };

// node_modules/@arcgis/core/views/3d/webgl-engine/collections/Component/DepthRange.js
function w24(t71, e68) {
  const r55 = a51(), { eye: o58, frustum: n61, viewForward: a61 } = t71;
  e68.forAll((t72) => {
    const e69 = null != t72.offsetObb ? t72.offsetObb : t72.obb, l45 = P3(K(C25, e69.center, o58), a61), f48 = e69.projectedRadius(a61);
    if (f40(r55, l45 - f48) && f40(r55, l45 + f48))
      return;
    const i47 = M15(e69, n61);
    if (-1 === i47)
      return;
    if (0 === i47)
      return k22.far = l45 + f48, k22.near = l45 - f48, void e60(r55, k22);
    const u46 = x27.pushNew();
    u46.near = l45 - f48, u46.far = l45 + f48, u46.mask = i47, u46.object = t72;
  });
  for (let l45 = 0; l45 < x27.length; l45++) {
    const t72 = x27.data[l45];
    if (f40(r55, t72.near) && f40(r55, t72.far))
      continue;
    k22.far = t72.far, k22.near = 1 / 0;
    const e69 = R14(null != t72.object.offsetObb ? t72.object.offsetObb : t72.object.obb, o58, y24, (e70) => {
      let r56 = O28;
      for (let o59 = 0; o59 < F17 && e70.length > 0; o59++) {
        if (!(t72.mask & 1 << o59))
          continue;
        z23(n61[o59], e70, r56);
        const a62 = e70;
        e70 = r56, r56 = a62;
      }
      for (let t73 = 0; t73 < e70.length; t73 += 3) {
        o4(q18, e70.data[t73], e70.data[t73 + 1], e70.data[t73 + 2]);
        const r57 = P3(K(q18, q18, o58), a61);
        k22.near = Math.min(k22.near, r57);
      }
    });
    0 === e69 && (k22.near = 0), e60(r55, k22);
  }
  return x27.length = 0, r55;
}
var x27 = new l3({ allocator: (t71) => t71 || { near: 1 / 0, far: -1 / 0, mask: 0, object: null }, deallocator: (t71) => (t71.object = null, t71) });
var k22 = a51();
var q18 = n7();
var v28 = n7();
var y24 = new l3({ deallocator: null });
var O28 = new l3({ deallocator: null });
function z23(t71, e68, r55) {
  r55.length = 0;
  const o58 = e68.length - 3;
  A26(q18, e68, o58);
  const n61 = V2(t71, q18);
  n61 <= 0 && (r55.push(q18[0]), r55.push(q18[1]), r55.push(q18[2]));
  let a61 = 0, s71 = n61;
  for (; a61 < o58; a61 += 3) {
    A26(v28, e68, a61);
    const o59 = V2(t71, v28);
    if (s71 * o59 < 0) {
      A4(q18, v28, q18, o59 / (o59 - s71)), P17(r55, q18);
    }
    o59 <= 0 && P17(r55, v28), s71 = o59, r5(q18, v28);
  }
  if (s71 * n61 < 0) {
    A26(v28, e68, o58);
    A4(q18, v28, q18, n61 / (n61 - s71)), P17(r55, q18);
  }
}
function A26(t71, e68, r55) {
  return o4(t71, e68.data[r55], e68.data[r55 + 1], e68.data[r55 + 2]);
}
function P17(t71, e68) {
  t71.push(e68[0]), t71.push(e68[1]), t71.push(e68[2]);
}
function R14(t71, o58, a61, s71) {
  O5(B16, t71.quaternion), K(C25, o58, t71.center), E2(C25, C25, B16);
  const i47 = t71.halfSize, u46 = 8 * ((C25[0] < -i47[0] ? -1 : C25[0] > i47[0] ? 1 : 0) + 3 * (C25[1] < -i47[1] ? -1 : C25[1] > i47[1] ? 1 : 0) + 9 * (C25[2] < -i47[2] ? -1 : C25[2] > i47[2] ? 1 : 0) + 13), h36 = S21[u46];
  if (0 === h36)
    return h36;
  p10(N18, t71.quaternion), f10(N18, N18, t71.halfSize);
  const p48 = (e68, r55) => {
    const o59 = S21[u46 + r55 + 1];
    return o4(e68, ((1 & o59) << 1) - 1, (2 & o59) - 1, ((4 & o59) >> 1) - 1), S4(e68, e68, N18), u4(e68, t71.center, e68);
  };
  return a61.length = 0, P17(a61, p48(D15, 0)), P17(a61, p48(E35, 1)), P17(a61, p48(C25, 2)), P17(a61, p48(G16, 3)), s71(a61), 1 === h36 ? h36 : (a61.length = 0, P17(a61, D15), P17(a61, G16), P17(a61, p48(C25, 4)), P17(a61, p48(H20, 5)), s71(a61), 2 === h36 || (a61.length = 0, P17(a61, D15), P17(a61, H20), P17(a61, p48(C25, 6)), P17(a61, E35), s71(a61)), h36);
}
var S21 = (() => {
  const t71 = new Array(216);
  let e68 = 0;
  const r55 = (r56) => {
    for (let o58 = 0; o58 < r56.length; o58++)
      t71[e68 + o58] = r56[o58];
    e68 += 8;
  };
  return r55([3, 0, 6, 2, 3, 1, 5, 4]), r55([2, 0, 2, 3, 1, 5, 4, 0]), r55([3, 1, 0, 2, 3, 7, 5, 4]), r55([2, 0, 1, 3, 2, 6, 4, 0]), r55([1, 0, 1, 3, 2, 0, 0, 0]), r55([2, 1, 5, 7, 3, 2, 0, 0]), r55([3, 2, 0, 1, 3, 7, 6, 4]), r55([2, 2, 0, 1, 3, 7, 6, 0]), r55([3, 3, 0, 1, 5, 7, 6, 2]), r55([2, 0, 1, 5, 4, 6, 2, 0]), r55([1, 0, 1, 5, 4, 0, 0, 0]), r55([2, 1, 3, 7, 5, 4, 0, 0]), r55([1, 0, 2, 6, 4, 0, 0, 0]), r55([0, 0, 0, 0, 0, 0, 0, 0]), r55([1, 1, 3, 7, 5, 0, 0, 0]), r55([2, 2, 3, 7, 6, 4, 0, 0]), r55([1, 2, 3, 7, 6, 0, 0, 0]), r55([2, 3, 1, 5, 7, 6, 2, 0]), r55([3, 4, 0, 1, 5, 7, 6, 2]), r55([2, 5, 7, 6, 4, 0, 1, 0]), r55([3, 5, 0, 1, 3, 7, 6, 4]), r55([2, 4, 5, 7, 6, 2, 0, 0]), r55([1, 4, 5, 7, 6, 0, 0, 0]), r55([2, 5, 1, 3, 7, 6, 4, 0]), r55([3, 6, 0, 2, 3, 7, 5, 4]), r55([2, 6, 2, 3, 7, 5, 4, 0]), r55([3, 7, 6, 2, 3, 1, 5, 4]), t71;
})();
var F17 = 4;
function M15(t71, e68) {
  let r55 = 0;
  for (let o58 = 0; o58 < F17; o58++) {
    const n61 = t71.intersectPlane(e68[o58]);
    if (n61 > 0)
      return -1;
    0 === n61 && (r55 |= 1 << o58);
  }
  return r55;
}
var N18 = e16();
var B16 = e17();
var C25 = n7();
var D15 = n7();
var E35 = n7();
var G16 = n7();
var H20 = n7();

// node_modules/@arcgis/core/views/3d/webgl-engine/collections/Component/RenderSubmitSystem.js
var e61 = class {
  constructor(t71) {
    this._objects = t71;
  }
  submit(t71, e68) {
    this._objects.preSubmit(e68), this._objects.visibleObjects.forAll((s71) => s71.renderable.material.submit(t71, e68, s71));
  }
  queryShadowCasterDepthRange(e68) {
    return this._objects.visibleObjects.length ? w24(e68, this._objects.visibleObjects) : null;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/collections/Component/UniformComponentParameters.js
var s65 = class {
  constructor() {
    this.externalColor = n11(), this.externalColorMixMode = n14.Multiply, this.castShadows = true, this.pickable = true, this.elevationOffset = 0;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/collections/Component/ComponentObjectCollection.js
var k23 = () => n.getLogger("esri.views.3d.webgl-engine.collections.Component.ComponentObjectCollection");
var q19 = class {
  constructor(e68, o58) {
    this._renderManager = e68, this._viewingMode = o58, this._elevationRangeCacheVerticalOffset = NaN, this._elevationRangeCacheMin = NaN, this._elevationRangeCacheMax = NaN, this._visible = new l3(), this._hidden = new l3(), this._renderSubmit = new e61(this), this._renderManager.register(this._renderSubmit), this._hasObjectAndLayerId = has("enable-feature:objectAndLayerId-rendering"), this._componentBufferManager = new r31(e68.rctx, 2 + (this._hasObjectAndLayerId ? 1 : 0));
  }
  destroy() {
    s15(0 === this._hidden.length && 0 === this._visible.length, "ObjectCollection should be empty upon disposal"), this._componentBufferManager.destroy(), this._visible.forAll((e68) => e68.destroy()), this._hidden.forAll((e68) => e68.destroy()), this._visible.clear(), this._hidden.clear();
  }
  createObject(e68) {
    const t71 = e68.geometry, o58 = new e57(this._componentBufferManager, t9(t71.componentOffsets)), n61 = this._createRenderable(e68, o58), i47 = new B15(this._viewingMode, t71.positionData, o58), r55 = new e58(e68.transform, e68.toMapSpace, e68.obb.clone(), o58, n61, i47);
    return (r55.visible ? this._visible : this._hidden).push(r55), r55;
  }
  destroyObject(e68) {
    const t71 = e68;
    (t71.visible ? this._visible : this._hidden).removeUnordered(t71), t71.destroy(), this._notifyDirty();
  }
  setObjectVisibility(e68, t71) {
    const o58 = e68;
    t71 !== o58.visible && (t71 ? (this._hidden.removeUnordered(o58), this._visible.push(o58)) : (this._visible.removeUnordered(o58), this._hidden.push(o58)), o58.visible = t71, this._notifyDirty());
  }
  preSubmit(e68) {
    const t71 = e68.camera.eye;
    this.visibleObjects.forAll((e69) => e69.renderable.meta.cameraDepthSquared = p3(t71, e69.obb.center));
  }
  getMaterial(e68) {
    return e68.renderable.material;
  }
  updateMaterial(e68, t71) {
    const o58 = e68.renderable.material;
    t71(o58), o58.dirty && this._notifyDirty();
  }
  setAllComponentVisibilities(e68, t71) {
    const o58 = e68;
    o58.components.visibility.reset(t71), o58.components.visibilityDirty(), this._notifyDirty();
  }
  forEachVisibleComponent(e68, t71) {
    return e68.components.visibility.forEachComponent(t71);
  }
  getComponentCount(e68) {
    const t71 = e68, o58 = t71.components.visibility.componentCount;
    return { visible: o58, invisible: t71.components.count - o58 };
  }
  setComponentData(e68, t71) {
    const o58 = e68, n61 = o58.renderable.material, i47 = o58.components, r55 = i47.materialDataBuffer, s71 = i47.materialDataIndices, a61 = new s65(), l45 = r55.textureBuffer, c44 = new Uint8Array(4), p48 = new Uint32Array(c44.buffer);
    let u46 = 0, d44 = 0, g23 = 0, b22 = i47.verticalOffsets, y26 = 1 / 0, v32 = -1 / 0, C28 = false, _26 = false, w27 = 0;
    for (let f48 = 0; f48 < i47.count; f48++) {
      t71(f48, a61), u46 += +(a61.externalColor[3] < 1), d44 += +(a61.externalColorMixMode === n14.Replace && 1 === a61.externalColor[3]), g23 += +a61.castShadows, r10(a61.externalColor, a61.externalColorMixMode, c44), c44[2] = 254 & c44[2] | +a61.castShadows, l45.setData(s71[f48], 0, c44[0], c44[1], c44[2], c44[3]), C28 || (C28 = f48 > 0 && w27 !== p48[0]), w27 = p48[0], _26 || (_26 = 0 !== a61.elevationOffset), _26 && null == b22 && (b22 = new Array(f48).fill(0)), null != b22 && (b22[f48] = a61.elevationOffset), y26 = Math.min(y26, a61.elevationOffset), v32 = Math.max(v32, a61.elevationOffset), C3(a61.elevationOffset, c44), l45.setData(s71[f48], 1, c44[0], c44[1], c44[2], c44[3]);
      const e69 = a61.objectAndLayerIdColor;
      null != e69 && l45.setData(s71[f48], 2, e69[0], e69[1], e69[2], e69[3]), a61.pickable !== i43(i47.pickability, f48) && (i47.pickability = n54(i47.pickability, i47.count, f48, a61.pickable));
    }
    i47.verticalOffsets = _26 ? b22 : null, o58.offsetObb = _26 ? L3(o58.obb, y26, v32, this._viewingMode, o58.offsetObb ?? o58.obb.clone()) : null, C28 || _26 || this._hasObjectAndLayerId ? (n61.componentParameters = new E18(), n61.componentParameters.castShadows = H21(g23, i47.count), n61.componentParameters.transparent = H21(u46, i47.count), n61.componentParameters.opaqueOverride = H21(d44, i47.count), n61.componentParameters.texture = l45, l45.updateTexture()) : (n61.componentParameters = new _12(), n61.componentParameters.castShadows = a61.castShadows ? I10.All : I10.None, n61.componentParameters.externalColor = a61.externalColor, n61.componentParameters.externalColorMixMode = a61.externalColorMixMode), this._elevationRangeCacheVerticalOffset = NaN, this._notifyDirty();
  }
  getComponentAabb(e68, t71, o58, n61 = false) {
    e68.intersectionGeometry.getComponentAabb(t71, o58);
    const i47 = e68, r55 = i47.components.verticalOffsets;
    if (n61 || null == r55)
      return o58;
    const s71 = r55[t71];
    if (this._viewingMode === l8.Local || 0 === s71)
      return o58[2] += s71, o58[5] += s71, o58;
    const a61 = L5(s71);
    return a61.localOrigin = i47.transform.position, a61.applyToAabb(o58);
  }
  getComponentObb(e68) {
    return e68.obb;
  }
  getObjectTransform(e68) {
    return e68.transform;
  }
  getComponentPositions(e68, t71, o58) {
    return e68.intersectionGeometry.getComponentPositions(t71, o58);
  }
  expandRangeWithComponentObjectElevationRange(e68, t71, o58, n61) {
    Number.isNaN(this._elevationRangeCacheVerticalOffset) || this._elevationRangeCacheVerticalOffset !== t71 || n61.expandElevationRangeValues(this._elevationRangeCacheMin, this._elevationRangeCacheMax);
    const i47 = e68, r55 = i47.components, s71 = r55.count, a61 = r55.verticalOffsets, l45 = i47.intersectionGeometry, m46 = this._viewingMode === l8.Local, h36 = l45.getComponentAabbs(), f48 = X12;
    let p48 = 1 / 0, u46 = -1 / 0;
    for (let c44 = 0; c44 < s71; c44++) {
      const e69 = 6 * c44, r56 = (a61 == null ? void 0 : a61[c44]) ?? 0;
      let s72 = 1 / 0, l46 = -1 / 0;
      if (m46)
        s72 = h36[e69 + 2] + r56 + t71, l46 = h36[e69 + 5] + r56 + t71;
      else {
        if (f48[0] = h36[e69], f48[1] = h36[e69 + 1], f48[2] = h36[e69 + 2], f48[3] = h36[e69 + 3], f48[4] = h36[e69 + 4], f48[5] = h36[e69 + 5], 0 !== r56) {
          const e70 = L5(r56);
          e70.localOrigin = i47.transform.position, e70.applyToAabb(f48);
        }
        const s73 = Math.max(Math.abs(f48[3]), Math.abs(f48[0])), a62 = Math.max(Math.abs(f48[4]), Math.abs(f48[1])), l47 = t71 + f48[5] + o58;
        n61.expandElevationRangeValues(t71 + f48[2], Math.sqrt(s73 * s73 + a62 * a62 + l47 * l47) - o58);
      }
      n61.expandElevationRangeValues(s72, l46), p48 = Math.min(p48, s72), u46 = Math.max(u46, l46);
    }
    this._elevationRangeCacheVerticalOffset = t71, this._elevationRangeCacheMin = p48, this._elevationRangeCacheMax = u46;
  }
  intersect(e68, t71, o58, n61, i47, r55, s71) {
    const a61 = e68, { transform: l45 } = a61, { position: c44 } = l45;
    return null != i47 && (i47.localOrigin = c44), a61.intersectionGeometry.intersect(t71, o58, n61, i47, a61.components.verticalOffsets, l45, r55, s71);
  }
  addEdges(e68, t71, o58, n61) {
    const i47 = e68, { indices: r55, positions: s71 } = i47.intersectionGeometry, a61 = i47.components.offsets;
    return t71.addComponentObject(i47, s71, r55, a61, o58, n61);
  }
  async extractEdgeInformation(e68, t71, o58) {
    const n61 = e68, r55 = n61.components.visibility;
    if (r55.allInvisible())
      return { buffer: m10.createBuffer(0), origin: [0, 0, 0] };
    const { indices: s71, positions: c44 } = n61.intersectionGeometry, m46 = n61.components.offsets, h36 = E8.createBuffer(c44.length / 3);
    t10(h36.position.typedBuffer, c44, h36.position.typedBufferStride, 3), f11(h36.position, h36.position, n61.transform.rotationScale), this._setComponentIndices(h36.componentIndex, s71, m46);
    const f48 = h36.count, p48 = this._computeVisibilityIndices(s71, r55, m46, f48);
    return { origin: t5(n61.transform.position), buffer: await t71.extractComponentsEdgeLocations({ indices: p48, indicesLength: p48.length, skipDeduplicate: true, data: h36, writerSettings: { reducedPrecision: false, variants: 0 } }, o58) };
  }
  _setComponentIndices(e68, t71, o58) {
    let n61 = 0;
    for (let i47 = 0; i47 < o58.length - 1; i47++) {
      const r55 = o58[i47], s71 = o58[i47 + 1];
      for (let o59 = r55; o59 < s71; o59++) {
        const i48 = t71 ? t71[o59] : o59;
        e68.set(i48, n61);
      }
      n61++;
    }
  }
  _computeVisibilityIndices(e68, t71, n61, i47) {
    if (e68 && t71.allVisible())
      return e68;
    let r55 = 0;
    t71.forEachComponentRange((e69, t72) => (r55 += n61[t72] - n61[e69], true));
    const s71 = y(e68) ? new Array(r55) : 2 === (e68 == null ? void 0 : e68.BYTES_PER_ELEMENT) || i47 <= 65536 ? new Uint16Array(r55) : new Uint32Array(r55);
    let a61 = 0;
    return t71.forEachComponentRange((t72, o58) => {
      const i48 = n61[t72], r56 = n61[o58];
      for (let n62 = i48; n62 < r56; n62++)
        s71[a61++] = e68 ? e68[n62] : n62;
      return true;
    }), s71;
  }
  addComponentHighlight(e68, t71) {
    const o58 = e68.components;
    null == o58.highlightCounts && (o58.highlightCounts = new Uint32Array(o58.count + 1));
    0 === o58.highlightCounts[t71]++ && (o58.highlightsDirty(), this._notifyDirty()), o58.highlightCounts[o58.count]++;
  }
  removeComponentHighlight(e68, t71) {
    const o58 = e68.components;
    if (null == o58.highlightCounts)
      return void k23().warn("Removing non-existing highlight.");
    const n61 = o58.highlightCounts[t71], i47 = o58.highlightCounts[o58.count];
    if (0 !== n61) {
      if (n61 > 1)
        return o58.highlightCounts[t71] = n61 - 1, void (o58.highlightCounts[o58.count] = i47 - 1);
      o58.highlightCounts[t71] = 0, o58.highlightsDirty(), this._notifyDirty(), 1 === i47 ? o58.highlightCounts = null : o58.highlightCounts[o58.count] = i47 - 1;
    } else
      k23().warn("Removing non-existing highlight.");
  }
  clearHighlights(e68) {
    const t71 = e68.components;
    null != t71.highlightCounts && (t71.highlightCounts = null, t71.highlightsDirty(), this._notifyDirty());
  }
  getObjectGPUMemoryUsage(e68) {
    return e68.renderable.meta.gpuMemoryEstimate;
  }
  get visibleObjects() {
    return this._visible;
  }
  _createRenderable(e68, t71) {
    const o58 = this._renderManager.rctx, n61 = e68.geometry, i47 = n61.vertices.layoutParameters, r55 = h7.createVertex(o58, F3.STATIC_DRAW, n61.vertices.data), s71 = n61.indices ? h7.createIndex(o58, F3.STATIC_DRAW, n61.indices) : null, a61 = t12(o32(i47)), l45 = new Uint16Array(n61.vertices.count);
    for (let p48 = 0; p48 < t71.count; p48++) {
      const e69 = t71.offsets[p48], o59 = t71.offsets[p48 + 1], i48 = t71.materialDataIndices[p48];
      if (null != n61.indices)
        for (let t72 = e69; t72 < o59; t72++) {
          l45[n61.indices[t72]] = i48;
        }
      else
        for (let t72 = e69; t72 < o59; t72++)
          l45[t72] = i48;
    }
    const c44 = h7.createVertex(o58, F3.STATIC_DRAW, l45.buffer), m46 = new R6(e68.transform, e68.toMapSpace), h36 = new o24(o58, M6, { data: a61, componentIndices: W9 }, { data: r55, componentIndices: c44 }, s71), f48 = new s64(h36, E7.TRIANGLES, i47, null != s71), u46 = { cameraDepthSquared: 0.5, gpuMemoryEstimate: r55.usedMemory + c44.usedMemory + (null != s71 ? s71.usedMemory : 0) };
    return new t65(m46, f48, u46);
  }
  _notifyDirty() {
    this._renderManager.notifyDirty();
  }
};
var W9 = t12(H2().u16(e18.COMPONENTINDEX));
function H21(e68, t71) {
  return e68 === t71 ? I10.All : 0 === e68 ? I10.None : I10.Some;
}
var X12 = i3();

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/CompositingTechniqueConfiguration.js
var a52;
!function(o58) {
  o58[o58.None = 0] = "None", o58[o58.Alpha = 1] = "Alpha", o58[o58.PremultipliedAlpha = 2] = "PremultipliedAlpha", o58[o58.COUNT = 3] = "COUNT";
}(a52 || (a52 = {}));
var r48 = class extends t19 {
  constructor() {
    super(...arguments), this.alphaMode = a52.None, this.hasOpacityFactor = false;
  }
};
e([r17({ count: a52.COUNT })], r48.prototype, "alphaMode", void 0), e([r17()], r48.prototype, "hasOpacityFactor", void 0);

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/CompositingTechnique.js
var p44 = class _p extends r15 {
  initializeProgram(e68) {
    return new r16(e68.rctx, _p.shader.get().build(this.configuration), O9);
  }
  initializePipeline() {
    switch (this.configuration.alphaMode) {
      case a52.None:
        return S7({ colorWrite: _8 });
      case a52.Alpha:
        return S7({ blending: l11(R2.SRC_ALPHA, R2.ONE, R2.ONE_MINUS_SRC_ALPHA, R2.ONE_MINUS_SRC_ALPHA), colorWrite: _8 });
      case a52.PremultipliedAlpha:
      case a52.COUNT:
        return S7({ blending: s22(R2.ONE, R2.ONE_MINUS_SRC_ALPHA), colorWrite: _8 });
    }
  }
};
p44.shader = new t17(d18, () => import("./Compositing.glsl-LBPYEBZU.js"));

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/HUDCompositingTechnique.js
var a53 = class _a extends r15 {
  initializeProgram(e68) {
    return new r16(e68.rctx, _a.shader.get().build(), O9);
  }
  initializePipeline() {
    return S7({ colorWrite: { r: false, g: true, b: false, a: false } });
  }
};
a53.shader = new t17(i24, () => import("./HUDCompositing.glsl-53QXPC3K.js"));

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/OITCompositingTechnique.js
var a54 = class _a extends r15 {
  initializeProgram(e68) {
    return new r16(e68.rctx, _a.shader.get().build(), O9);
  }
  initializePipeline() {
    return S7({ blending: l11(R2.SRC_ALPHA, R2.ONE, R2.ONE_MINUS_SRC_ALPHA, R2.ONE_MINUS_SRC_ALPHA), colorWrite: _8 });
  }
};
a54.shader = new t17(c19, () => import("./OITCompositing.glsl-7FH57MF4.js"));

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/CompositingHelper.js
var n56 = class {
  constructor(t71, i47) {
    this._rctx = t71, this._techniqueRepository = i47, this._configuration = new r48(), this._passParameters = new i23(), this._oitParameters = new s40(), this._hudParameters = new t45();
  }
  compositeOIT(s71, t71, e68, i47) {
    this._oitParameters.colorTexture = t71, this._oitParameters.alphaTexture = e68, this._oitParameters.frontFaceTexture = i47;
    const r55 = this._techniqueRepository.acquire(a54);
    this._rctx.bindTechnique(r55, s71, this._oitParameters), this._rctx.screen.draw(), r55.release();
  }
  compositeHUD(s71, t71) {
    this._hudParameters.texture = t71;
    const e68 = this._techniqueRepository.acquire(a53);
    this._rctx.bindTechnique(e68, s71, this._hudParameters), this._rctx.screen.draw(), e68.release();
  }
  composite(s71, e68, r55 = a52.None, o58 = 1) {
    this._configuration.alphaMode = r55, this._configuration.hasOpacityFactor = 1 !== o58, this._passParameters.texture = e68, this._passParameters.opacity = o58;
    const a61 = this._techniqueRepository.acquire(p44, this._configuration);
    this._rctx.bindTechnique(a61, s71, this._passParameters), this._rctx.screen.draw(), a61.release();
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/depthRangeUtils.js
var v29 = 1e4;
var R15 = 100;
var j23 = 500;
var C26 = 500;
var A27 = 0.1;
function B17(t71, r55, i47) {
  return r9(r55, t71) * (i47[1] - i47[0]) + i47[0];
}
function M16(e68, t71, r55) {
  let i47 = 0;
  if (!t71.some((e69) => !!e69.materialReference && (i47 += e69.numGeometries, i47 >= v29)))
    return Q15.compute(e68, t71);
  const n61 = a51();
  return r55.forAll((t72) => e60(n61, O29(e68, t72))), n61;
}
function O29(e68, t71) {
  if (!t71.visible)
    return;
  const r55 = a51(), i47 = t71.getSpatialQueryAccelerator();
  return i47 ? x28(r55, e68, i47) : D16(r55, e68, t71.objects), r55;
}
function x28(e68, t71, r55) {
  const i47 = t71.eye, n61 = t71.viewForward, s71 = t71.frustum, a61 = (e69) => e69.visible, o58 = r55.objectCount;
  if (o58 < j23)
    t66(G17, t71.near, Math.min(e68.near, t71.far)), r55.forEachInDepthRange(i47, n61, Y4.DepthOrder.FRONT_TO_BACK, G17, (r56, i48) => {
      T19(e68, t71, r56), G17.far = e68.near, i48.setRange(G17);
    }, s71, a61), t66(G17, Math.max(e68.far, t71.near), t71.far), r55.forEachInDepthRange(i47, n61, Y4.DepthOrder.BACK_TO_FRONT, G17, (r56, i48) => {
      T19(e68, t71, r56), G17.near = e68.far, i48.setRange(G17);
    }, s71, a61);
  else {
    const i48 = Math.max(Math.min(o58, C26), Math.ceil(o58 * A27)), h36 = r55.findClosest(n61, Y4.DepthOrder.FRONT_TO_BACK, s71, a61, i48), f48 = r55.findClosest(n61, Y4.DepthOrder.BACK_TO_FRONT, s71, a61, i48);
    h36 && f48 && (I26(e68, t71, h36.boundingVolumeWorldSpace.bounds), I26(e68, t71, f48.boundingVolumeWorldSpace.bounds));
  }
}
function D16(e68, t71, r55) {
  U21.clear(), r55.forAll((e69) => {
    e69.visible && 0 !== e69.geometries.length && U21.add(e69);
  }), U21.empty || (U21.sort(t71), t66(G17, t71.near, Math.min(e68.near, t71.far)), U21.forEachInDepthRange(G17, Y4.DepthOrder.FRONT_TO_BACK, (r56, i47) => {
    i47 < e68.near && T19(e68, t71, r56);
  }), t66(G17, Math.max(e68.far, t71.near), t71.far), U21.forEachInDepthRange(G17, Y4.DepthOrder.BACK_TO_FRONT, (t72, r56, i47) => {
    e68.far = Math.max(e68.far, i47);
  }));
}
function T19(e68, t71, i47) {
  if (!i47.visible)
    return;
  if (!s18(t71.frustum, i47.boundingVolumeWorldSpace.bounds))
    return;
  const n61 = i47.transformation, s71 = k24;
  i47.geometries.forEach((i48) => {
    c4(s71, n61, i48.transformation);
    const a61 = m8(s71);
    F18(e68, t71, i48.boundingInfo, s71, a61);
  });
}
function F18(e68, t71, r55, i47, n61) {
  if (null == r55)
    return;
  O2(Z(V16), r55.center, i47);
  const { eye: a61, viewForward: o58 } = t71, f48 = o58[0] * (V16[0] - a61[0]) + o58[1] * (V16[1] - a61[1]) + o58[2] * (V16[2] - a61[2]);
  if (V16[3] = r55.radius * n61, !(f48 - V16[3] > e68.near && f48 + V16[3] < e68.far) && s18(t71.frustum, V16))
    if (r55.radius > R15 && r55.getChildren())
      for (const s71 of r55.getChildren())
        F18(e68, t71, s71, i47, n61);
    else
      q20.unionDepthRangeWithAABB(e68, t71.viewProjectionMatrix, i47, r55.bbMin, r55.bbMax);
}
function I26(e68, t71, r55) {
  const i47 = t71.eye, n61 = t71.viewForward, s71 = (r55[0] - i47[0]) * n61[0] + (r55[1] - i47[1]) * n61[1] + (r55[2] - i47[2]) * n61[2];
  e68.near = Math.min(e68.near, s71 - r55[3]), e68.far = Math.max(e68.far, s71 + r55[3]);
}
var y25 = class {
  constructor() {
    this._items = new l3({ allocator: (e68) => e68 || { object: null, distance: 0, near: 0, far: 0 }, deallocator: (e68) => (e68.object = null, e68.distance = 0, e68.near = 0, e68.far = 0, e68) });
  }
  get length() {
    return this._items.length;
  }
  get empty() {
    return 0 === this._items.length;
  }
  clear() {
    this._items.clear();
  }
  add(e68) {
    this._items.pushNew().object = e68;
  }
  sort(e68) {
    const t71 = e68.eye, r55 = e68.viewForward;
    this._items.forAll((e69) => {
      const i47 = e69.object.boundingVolumeWorldSpace.bounds, n61 = (i47[0] - t71[0]) * r55[0] + (i47[1] - t71[1]) * r55[1] + (i47[2] - t71[2]) * r55[2];
      e69.distance = n61, e69.near = n61 - i47[3], e69.far = n61 + i47[3];
    }), this._items.sort((e69, t72) => e69.distance - t72.distance);
  }
  forEachInDepthRange(e68, t71, r55) {
    if (t71 === Y4.DepthOrder.FRONT_TO_BACK)
      for (let i47 = 0; i47 < this._items.length; ++i47) {
        const t72 = this._items.data[i47];
        t72.far < e68.near || t72.near > e68.far || r55(t72.object, t72.near, t72.far);
      }
    else
      for (let i47 = this._items.length - 1; i47 >= 0; --i47) {
        const t72 = this._items.data[i47];
        t72.far < e68.near || t72.near > e68.far || r55(t72.object, t72.near, t72.far);
      }
  }
};
var P18 = class {
  constructor() {
    this._view = e15(), this._viewProj = e15(), this._frustum = H3(), this._geometries = new Array(), this._near = [], this._far = [], this._nearCandidates = [], this._farCandidates = [], this._looseRange = { near: 0, far: 0 };
  }
  compute(e68, t71) {
    this._reset(), n9(this._view, e68.viewMatrix), c4(this._viewProj, e68.projectionMatrix, this._view), N3(this._frustum, e68.frustum);
    const n61 = this._view, s71 = n61[2], a61 = n61[6], o58 = n61[10], h36 = n61[14];
    t71.forAll((e69) => {
      e69.materialReference && e69.forEachGeometry && e69.forEachGeometry((e70) => {
        if (!e70.visible || !e70.castShadow)
          return;
        const t72 = e70.boundingSphere, r55 = s71 * t72[0] + a61 * t72[1] + o58 * t72[2] + h36, i47 = r55 - t72[3], n62 = r55 + t72[3];
        this._geometries.push(e70), this._near.push(-n62), this._far.push(-i47);
      });
    });
    const f48 = new r47();
    if (0 === this._geometries.length)
      return f48;
    for (let r55 = 0; r55 < this._geometries.length; ++r55)
      this._near[r55] > f48.far && (f48.far = this._near[r55]), this._near[r55] > 2 && this._far[r55] < f48.near && (f48.near = this._far[r55]);
    const l45 = this._looseRange;
    l45.near = Math.max(0.5 * f48.near, 2), l45.far = 2 * f48.far;
    let u46 = 0, _26 = 0;
    for (let r55 = 0; r55 < this._geometries.length; ++r55)
      this._near[r55] < f48.near && (this._near[r55] >= l45.near ? f48.near = this._near[r55] : this._nearCandidates[u46++] = r55), this._far[r55] > f48.far && (this._far[r55] <= l45.far ? f48.far = this._far[r55] : this._farCandidates[_26++] = r55);
    if (0 === this._nearCandidates.length && 0 === this._farCandidates.length)
      return f48;
    this._nearCandidates.sort((e69, t72) => this._near[e69] < this._near[t72] ? -1 : this._near[e69] > this._near[t72] ? 1 : 0), this._farCandidates.sort((e69, t72) => this._far[e69] < this._far[t72] ? 1 : this._far[e69] > this._far[t72] ? -1 : 0);
    for (let r55 = 0; r55 < this._nearCandidates.length; ++r55) {
      const e69 = this._nearCandidates[r55];
      if (this._near[e69] < f48.near) {
        const t72 = this._geometries[e69], r56 = t72.boundingInfo;
        this._includeNearBoundingInfoRec(r56, t72.shaderTransformation, f48);
      }
    }
    for (let r55 = 0; r55 < this._farCandidates.length; ++r55) {
      const e69 = this._farCandidates[r55];
      if (this._far[e69] > f48.far) {
        const t72 = this._geometries[e69], r56 = t72.boundingInfo;
        this._includeFarBoundingInfoRec(r56, t72.shaderTransformation, f48);
      }
    }
    return this._reset(), f48;
  }
  _reset() {
    this._geometries.length = 0, this._near.length = 0, this._far.length = 0, this._nearCandidates.length = 0, this._farCandidates.length = 0;
  }
  _includeNearBoundingInfoRec(e68, t71, r55) {
    if (null == e68)
      return;
    const i47 = e68.center;
    O2(Z(V16), i47, t71);
    const n61 = m8(t71), a61 = V16[0], o58 = V16[1], h36 = V16[2], f48 = e68.radius * n61, c44 = this._frustum;
    if (c44[0][0] * a61 + c44[0][1] * o58 + c44[0][2] * h36 + c44[0][3] > f48 || c44[1][0] * a61 + c44[1][1] * o58 + c44[1][2] * h36 + c44[1][3] > f48 || c44[2][0] * a61 + c44[2][1] * o58 + c44[2][2] * h36 + c44[2][3] > f48 || c44[3][0] * a61 + c44[3][1] * o58 + c44[3][2] * h36 + c44[3][3] > f48)
      return;
    const u46 = this._view[2] * a61 + this._view[6] * o58 + this._view[10] * h36 + this._view[14], d44 = u46 + f48;
    if (!(-(u46 - f48) < 2 || -d44 >= r55.near))
      if (-d44 > this._looseRange.near)
        r55.near = -d44;
      else {
        if (f48 > R15) {
          const i48 = e68.getChildren();
          if (void 0 !== i48) {
            for (const e69 of i48)
              this._includeNearBoundingInfoRec(e69, t71, r55);
            return;
          }
        }
        q20.unionDepthRangeWithAABB(r55, this._viewProj, t71, e68.bbMin, e68.bbMax);
      }
  }
  _includeFarBoundingInfoRec(e68, t71, r55) {
    if (null == e68)
      return;
    let i47 = e68.radius;
    const n61 = e68.center;
    O2(Z(V16), n61, t71);
    const a61 = m8(t71), o58 = V16[0], h36 = V16[1], f48 = V16[2];
    i47 *= a61;
    const c44 = this._frustum;
    if (c44[0][0] * o58 + c44[0][1] * h36 + c44[0][2] * f48 + c44[0][3] > i47 || c44[1][0] * o58 + c44[1][1] * h36 + c44[1][2] * f48 + c44[1][3] > i47 || c44[2][0] * o58 + c44[2][1] * h36 + c44[2][2] * f48 + c44[2][3] > i47 || c44[3][0] * o58 + c44[3][1] * h36 + c44[3][2] * f48 + c44[3][3] > i47)
      return;
    const u46 = this._view[2] * o58 + this._view[6] * h36 + this._view[10] * f48 + this._view[14] - i47;
    if (!(-u46 <= r55.far))
      if (-u46 < this._looseRange.far)
        r55.far = -u46;
      else {
        if (i47 > R15) {
          const i48 = e68.getChildren();
          if (void 0 !== i48) {
            for (const e69 of i48)
              this._includeFarBoundingInfoRec(e69, t71, r55);
            return;
          }
        }
        q20.unionDepthRangeWithAABB(r55, this._viewProj, t71, e68.bbMin, e68.bbMax);
      }
  }
};
var N19 = class {
  constructor() {
    this._modelViewProj = e15(), this._clipPosition = [n11(), n11(), n11(), n11(), n11(), n11(), n11(), n11()];
  }
  unionDepthRangeWithAABB(e68, t71, i47, n61, s71) {
    const a61 = this._modelViewProj;
    c4(a61, t71, i47);
    let o58 = false;
    for (let r55 = 0; r55 < 8; ++r55) {
      const e69 = this._clipPosition[r55], t72 = 0 === r55 || 3 === r55 || 4 === r55 || 7 === r55 ? n61[0] : s71[0], i48 = 0 === r55 || 1 === r55 || 4 === r55 || 5 === r55 ? n61[1] : s71[1], o59 = r55 < 4 ? n61[2] : s71[2];
      e69[0] = a61[0] * t72 + a61[4] * i48 + a61[8] * o59 + a61[12], e69[1] = a61[1] * t72 + a61[5] * i48 + a61[9] * o59 + a61[13], e69[2] = a61[2] * t72 + a61[6] * i48 + a61[10] * o59 + a61[14], e69[3] = a61[3] * t72 + a61[7] * i48 + a61[11] * o59 + a61[15];
    }
    for (let r55 = 0; r55 < 12; ++r55) {
      const t72 = E36(this._clipPosition[S22[r55][0]], this._clipPosition[S22[r55][1]], this._clipPosition[S22[r55][2]]);
      let i48 = true;
      for (let e69 = 0; e69 < t72.length; ++e69) {
        if (t72[e69][3] >= 2) {
          i48 = false;
          break;
        }
      }
      if (!i48) {
        o58 = true;
        for (let r56 = 0; r56 < t72.length; ++r56) {
          const i49 = t72[r56][3];
          Number.isFinite(i49) && (e68.near = Math.min(i49, e68.near), e68.far = Math.max(i49, e68.far));
        }
      }
    }
    return o58;
  }
};
function E36(e68, t71, r55) {
  let i47 = [e68, t71, r55];
  for (let n61 = 0; n61 < 4; ++n61) {
    const e69 = i47;
    i47 = [];
    for (let t72 = 0; t72 < e69.length; ++t72) {
      const r56 = e69[t72], s71 = e69[(t72 + 1) % e69.length];
      W10(s71, n61) ? (W10(r56, n61) || i47.push(K13(r56, s71, n61)), i47.push(s71)) : W10(r56, n61) && i47.push(K13(r56, s71, n61));
    }
  }
  return i47;
}
function W10(e68, t71) {
  return 0 === t71 ? e68[0] >= -e68[3] : 1 === t71 ? e68[1] >= -e68[3] : 2 === t71 ? e68[0] <= e68[3] : 3 === t71 ? e68[1] <= e68[3] : void s15(false);
}
function K13(e68, t71, r55) {
  let i47 = 0;
  return 0 === r55 ? i47 = (-e68[3] - e68[0]) / (t71[0] - e68[0] + t71[3] - e68[3]) : 1 === r55 ? i47 = (-e68[3] - e68[1]) / (t71[1] - e68[1] + t71[3] - e68[3]) : 2 === r55 ? i47 = (e68[3] - e68[0]) / (t71[0] - e68[0] - t71[3] + e68[3]) : 3 === r55 && (i47 = (e68[3] - e68[1]) / (t71[1] - e68[1] - t71[3] + e68[3])), _3(n11(), e68, t71, i47);
}
var S22 = [[0, 1, 3], [2, 3, 1], [1, 5, 2], [6, 2, 5], [5, 4, 6], [7, 6, 4], [4, 0, 7], [3, 7, 0], [3, 2, 7], [6, 7, 2], [4, 5, 0], [1, 0, 5]];
var V16 = w6();
var k24 = e15();
var G17 = a51();
var U21 = new y25();
var Q15 = new P18();
var q20 = new N19();

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/Magnifier.glsl.js
var c39 = class {
};
var f41 = class extends n15 {
  constructor() {
    super(...arguments), this.textures = new c39();
  }
};
function v30() {
  const e68 = new o18();
  return e68.attributes.add(e18.POSITION, "vec2"), e68.vertex.uniforms.add(new e25("drawPosition", (e69, r55) => x29(e69, r55))), e68.varyings.add("vUV", "vec2"), e68.vertex.code.add(o9`void main(void) {
vUV = position;
gl_Position = vec4(drawPosition.xy + vec2(position - 0.5) * drawPosition.zw, 0.0, 1.0);
}`), e68.fragment.uniforms.add(new s21("textureInput", (e69) => e69.textures.input)), e68.fragment.uniforms.add(new s21("textureMask", (e69) => e69.textures.mask)), e68.fragment.uniforms.add(new s21("textureOverlay", (e69) => e69.textures.overlay)), e68.fragment.uniforms.add(new s24("maskEnabled", (e69) => e69.magnifier.maskEnabled)), e68.fragment.uniforms.add(new s24("overlayEnabled", (e69) => e69.magnifier.overlayEnabled)), e68.fragment.code.add(o9`const float barrelFactor = 1.1;
vec2 barrel(vec2 uv) {
vec2 uvn = uv * 2.0 - 1.0;
if (uvn.x == 0.0 && uvn.y == 0.0) {
return vec2(0.5, 0.5);
}
float theta = atan(uvn.y, uvn.x);
float r = pow(length(uvn), barrelFactor);
return r * vec2(cos(theta), sin(theta)) * 0.5 + 0.5;
}
void main() {
float mask = maskEnabled ? texture(textureMask, vUV).a : 1.0;
vec4 inputColor = texture(textureInput, barrel(vUV)) * mask;
vec4 overlayColor = overlayEnabled ? texture(textureOverlay, vUV) : vec4(0);
fragColor = overlayColor + (1.0 - overlayColor.a) * inputColor;
}`), e68;
}
function x29(r55, t71) {
  const a61 = t71.camera.pixelRatio, n61 = r55.magnifier.offset.x * a61, s71 = r55.magnifier.offset.y * a61;
  d6(r55.magnifier.position, p45);
  const i47 = t71.camera.screenToRender(p45, g21), m46 = Math.ceil(a61 * r55.magnifier.size), u46 = t71.camera.fullWidth, l45 = t71.camera.fullHeight;
  return s11(h34, (i47[0] + n61) / u46 * 2 - 1, (i47[1] - s71) / l45 * 2 - 1, m46 / u46 * 2, m46 / l45 * 2);
}
var p45 = i4();
var g21 = s10();
var h34 = n11();

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/MagnifierHelper.js
var w25 = class extends S3 {
  constructor() {
    super(...arguments), this._magnifier = null, this._imageSources = null, this._imageLoadTask = null, this._resources = null, this._passParameters = new f41(), this.events = new o3(), this.attributeLocations = /* @__PURE__ */ new Map([[e18.POSITION, 0]]), this._tmpScreenPoint = i4(), this._tmpRenderPoint = s10();
  }
  get updating() {
    return null == this._imageSources && null != this._imageLoadTask && !this._imageLoadTask.task.finished;
  }
  get magnifier() {
    return this._magnifier;
  }
  set magnifier(e68) {
    if (e68 === this._magnifier)
      return;
    this.removeAllHandles(), this._magnifier = e68;
    const s71 = () => {
      this._updateResourceLoading(), this.events.emit("request-render");
    };
    null != this._magnifier && this.addHandles(d3(() => {
      var _a;
      return (_a = this._magnifier) == null ? void 0 : _a.version;
    }, s71)), s71();
  }
  get enabled() {
    return null != this._validMagnifier;
  }
  get _validMagnifier() {
    return null != this._magnifier && this._magnifier.visible && null != this._magnifier.position && this._magnifier.size > 0 ? this._magnifier : null;
  }
  get _factor() {
    return null != this._magnifier && this._magnifier.factor || 1;
  }
  destroy() {
    this._magnifier = null, null != this._imageLoadTask && (this._imageLoadTask.task.abort(), this._imageLoadTask = null), this._disposeResources();
  }
  render(e68, s71) {
    const t71 = this._validMagnifier;
    if (null == t71)
      return;
    const r55 = s71.camera.pixelRatio, a61 = Math.ceil(r55 * t71.size);
    if (this._updateResources(e68, a61), null == this._resources)
      return;
    const o58 = this._passParameters.textures, n61 = Math.ceil(1 / this._factor * a61);
    o58.input.resize(n61, n61), d6(t71.position, this._tmpScreenPoint);
    const u46 = s71.camera.screenToRender(this._tmpScreenPoint, this._tmpRenderPoint), m46 = s71.camera.fullWidth, h36 = s71.camera.fullHeight, p48 = 0.5 * n61, c44 = 0.5 * n61;
    u46[0] = e12(u46[0], p48, m46 - p48 - 1), u46[1] = e12(u46[1], c44, h36 - c44 - 1);
    const _26 = Math.floor(u46[0] - p48), g23 = Math.floor(u46[1] - c44), d44 = this._resources.program;
    d44.bindTexture("textureInput", o58.input), e68.gl.copyTexImage2D(o58.input.descriptor.target, 0, o58.input.descriptor.pixelFormat, _26, g23, n61, n61, 0), this._passParameters.magnifier = t71, e68.useProgram(d44), d44.bindPass(this._passParameters, s71), e68.bindVAO(this._resources.vao), e68.setPipelineState(this._resources.pipelineState), e68.drawArrays(E7.TRIANGLE_STRIP, 0, 4);
  }
  _updateResourceLoading() {
    const e68 = this._validMagnifier;
    if (null == e68)
      return;
    const s71 = e68.maskUrl, r55 = e68.overlayUrl;
    null == this._imageLoadTask || this._imageLoadTask.maskUrl === s71 && this._imageLoadTask.overlayUrl === r55 || (this._imageLoadTask.task.abort(), this._imageLoadTask = null, this._imageSources = null), null == this._imageSources && null == this._imageLoadTask && (this._imageLoadTask = { maskUrl: s71, overlayUrl: r55, task: d2(async (e69) => {
      const t71 = null == s71 || null == r55 ? s28(e69) : null, i47 = null != s71 ? t16(s71, { signal: e69 }) : t71.then((e70) => e70.mask), a61 = null != r55 ? t16(r55, { signal: e69 }) : t71.then((e70) => e70.overlay);
      this._imageSources = { mask: await i47, overlay: await a61 }, this._disposeResources(), this.events.emit("request-render");
    }) }, this._imageLoadTask.task.promise.then(() => this.notifyChange("updating"), () => this.notifyChange("updating")));
  }
  _updateResources(e68, s71) {
    if (!this.enabled)
      return void this._disposeResources();
    if (null != this._resources) {
      if (this._passParameters.textures.size !== s71) {
        const t72 = this._createTextureResources(e68, s71);
        if (null == t72)
          return void this._disposeResources();
        A28(this._passParameters.textures), this._passParameters.textures = t72;
      }
      return;
    }
    const t71 = this._createTextureResources(e68, s71);
    null != t71 && (this._resources = { program: this._createProgram(e68), vao: i18(e68, o31, this.attributeLocations, 0, 1), pipelineState: S7({ blending: s22(R2.ONE, R2.ONE_MINUS_SRC_ALPHA), depthTest: null, depthWrite: null, colorWrite: _8 }) }, this._passParameters.textures = t71);
  }
  _disposeResources() {
    null != this._resources && (A28(this._passParameters.textures), this._resources.program.dispose(), this._resources.vao.dispose(), this._resources = null);
  }
  _createTextureResources(e68, s71) {
    if (null == this._imageSources)
      return null;
    this._imageSources.overlay.width = s71, this._imageSources.overlay.height = s71, this._imageSources.mask.width = s71, this._imageSources.mask.height = s71;
    const t71 = new e22();
    t71.internalFormat = G4.RGBA, t71.wrapMode = D2.CLAMP_TO_EDGE, t71.flipped = true, t71.preMultiplyAlpha = !Pt(this._imageSources.overlay.src) || !e68.driverTest.svgPremultipliesAlpha.result;
    const r55 = new m11(e68, t71, this._imageSources.overlay);
    t71.pixelFormat = t71.internalFormat = G4.ALPHA, t71.preMultiplyAlpha = false;
    const i47 = new m11(e68, t71, this._imageSources.mask);
    t71.pixelFormat = t71.internalFormat = G4.RGBA, t71.flipped = false;
    return { input: new m11(e68, t71), mask: i47, overlay: r55, size: s71 };
  }
  _createProgram(e68) {
    return new r16(e68, v30(), this.attributeLocations);
  }
};
function A28(e68) {
  e68.mask.dispose(), e68.overlay.dispose(), e68.input.dispose();
}
e([y2()], w25.prototype, "_imageSources", void 0), e([y2()], w25.prototype, "_imageLoadTask", void 0), e([y2({ readOnly: true })], w25.prototype, "updating", null), w25 = e([a4("esri.views.3d.webgl-engine.lib.MagnifierHelper")], w25);

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/ObjectAndLayerIdRenderHelper.js
var i44 = class {
  constructor() {
    this.declaredClass = "esri.views.3d.webgl-engine.lib.ObjectAndLayerIdRenderHelper", this.colorZero = new x6(new ArrayBuffer(4)), this._layerToOidToColor = new t15(), this._colorToUID = /* @__PURE__ */ new Map(), this._layerUidToGraphicsUidToObjectId = new t15(), this._layerUidToId = /* @__PURE__ */ new Map(), this._layerUidToPopupEnabled = /* @__PURE__ */ new Map();
  }
  setUidToObjectAndLayerId(e68, r55, o58, t71, i47, d44 = null, a61 = null, s71 = null) {
    e68 && r55 && o58 && t71 && (this._layerUidToId.set(t71, o58), this._layerUidToPopupEnabled.set(t71, i47), i47 && this._layerUidToGraphicsUidToObjectId.set(t71, r55, { objectId: e68, attributeNodeId: d44, attributeIndex: a61, subLayerId: s71 }));
  }
  getObjectAndLayerIdColor(e68) {
    const r55 = this.getObjectAndLayerIdColorArray(e68);
    return r6(r55.get(0, 1), r55.get(0, 2), r55.get(0, 3), 255);
  }
  getObjectAndLayerIdColorArray(r55) {
    var _a;
    if (!r55.layerUid || !r55.graphicUid)
      return this.colorZero;
    const o58 = this._layerUidToPopupEnabled.get(r55.layerUid);
    if (void 0 === o58)
      return n.getLogger(this).warn("popupEnabled is undefined for layerUid " + r55.layerUid), this.colorZero;
    if (false === o58)
      return this.colorZero;
    const i47 = (_a = this._layerUidToGraphicsUidToObjectId.get(r55.layerUid, r55.graphicUid)) == null ? void 0 : _a.objectId;
    if (!i47)
      return this.colorZero;
    let d44 = this._layerToOidToColor.get(r55.layerUid, i47);
    if (!d44) {
      for (; !d44; ) {
        const e68 = Math.floor(16777214 * Math.random()) + 1;
        this._colorToUID.has(e68) || (d44 = e68);
      }
      if (d44 > 16777215)
        throw new Error("Object ID Overflow");
      this._layerToOidToColor.set(r55.layerUid, i47, d44), this._colorToUID.set(d44, r55);
    }
    const a61 = new ArrayBuffer(4);
    new DataView(a61).setUint32(0, d44, false);
    return new x6(a61);
  }
  getColorToObjectAndLayerIdMapping() {
    const r55 = /* @__PURE__ */ new Map();
    for (const [o58, t71] of this._colorToUID.entries()) {
      const i47 = this._layerUidToGraphicsUidToObjectId.get(t71.layerUid, t71.graphicUid);
      i47 || n.getLogger(this).warn("getColorMapping: no entry found for graphicsId " + t71.graphicUid);
      const d44 = this._layerUidToId.get(t71.layerUid);
      d44 || n.getLogger(this).warn("no layerId found for uid " + t71.layerUid), i47 && d44 && r55.set(o58, i47.attributeNodeId ? { type: "object-and-layer-and-i3s-id", oid: i47.objectId, lid: d44, attrId: i47.attributeNodeId, attrIdx: i47.attributeIndex, subLayerId: i47.subLayerId } : { type: "object-and-layer-id", oid: i47.objectId, lid: d44 });
    }
    return r55;
  }
};

// node_modules/@arcgis/core/views/3d/webgl/ManagedFBObject.js
var e62 = class {
  constructor(e68, t71) {
    this.key = e68, this.free = t71, this.incarnation = 0, this._refCount = 1;
  }
  retain() {
    ++this._refCount;
  }
  release() {
    return 0 === this._refCount ? (console.log(`Releasing already released FBO attachment in ${new Error().stack}`), true) : (--this._refCount, 0 === this._refCount && (this.free(), true));
  }
};
var t67;
!function(e68) {
  e68[e68.FBO = 0] = "FBO", e68[e68.DEPTH = 1] = "DEPTH", e68[e68.COLOR = 2] = "COLOR";
}(t67 || (t67 = {}));

// node_modules/@arcgis/core/views/3d/webgl/ManagedFBOAttachment.js
var e63 = class extends e62 {
  constructor(t71, e68, s71) {
    super(t71, s71), this.attachment = e68, this.name = "";
  }
  dispose() {
    this.attachment.dispose();
  }
  get usedMemory() {
    return this.attachment.usedMemory;
  }
};

// node_modules/@arcgis/core/views/3d/webgl/ManagedColorAttachment.js
var s66 = class extends e63 {
  constructor(t71, s71, a61) {
    super(t71, s71, a61), this.attachment = s71, this.type = t67.COLOR;
  }
};

// node_modules/@arcgis/core/views/3d/webgl/ManagedDepthAttachment.js
var r49 = class extends e63 {
  constructor() {
    super(...arguments), this.type = t67.DEPTH;
  }
};

// node_modules/@arcgis/core/views/3d/webgl/ManagedFBO.js
var r50 = class extends e62 {
  constructor(t71, e68, s71, o58, r55, i47) {
    super(t71, i47), this.type = t67.FBO, this._colors = /* @__PURE__ */ new Map(), this._name = "composite-color", this.acquireDepth = null, this.acquireColor = null, this._name = e68, this.fbo = s71, this.acquireDepth = o58, this.acquireColor = r55;
  }
  dispose() {
    this.fbo.dispose();
  }
  get usedMemory() {
    return this.fbo.usedMemory;
  }
  get name() {
    return this._name;
  }
  setName(t71) {
    this._name = t71;
  }
  getTexture(t71 = X3.COLOR_ATTACHMENT0) {
    var _a, _b;
    return t71 === t11 ? (_a = this.fbo) == null ? void 0 : _a.depthStencilTexture : (_b = this.fbo) == null ? void 0 : _b.getColorTexture(t71);
  }
  getAttachment(t71 = X3.COLOR_ATTACHMENT0) {
    return t71 === t11 ? this._depth : this._colors.get(t71);
  }
  attachDepth(t71) {
    return t71 == null ? void 0 : t71.retain(), this.detachDepth(), t71 && this.fbo.attachDepthStencil(t71.attachment), this._depth = t71, this;
  }
  detachDepth() {
    this.fbo.detachDepthStencilTexture(), this.fbo.detachDepthStencilBuffer(), this._depth = t2(this._depth);
  }
  attachColor(t71, e68) {
    return t71.retain(), this.detachColor(e68), this.fbo.attachColorTexture(t71.attachment, e68), this._colors.set(e68, t71), this;
  }
  detachColor(t71) {
    this.fbo.detachColorTexture(t71);
    const e68 = this._colors.get(t71);
    this._colors.delete(t71), e68 == null ? void 0 : e68.release();
  }
  detachAll() {
    this._colors.forEach((t71, e68) => this.detachColor(e68)), this.detachDepth();
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/core/FBOPool.js
var i45 = class {
  constructor(i47, e68) {
    this._last = new l3(), this._incarnation = 0, this._cache = new c17(i47, e68);
  }
  destroy() {
    var _a;
    (_a = this._last) == null ? void 0 : _a.forAll((t71) => t71.dispose()), this._last = null, this._cache.destroy();
  }
  set interactive(t71) {
    var _a;
    t71 && !this._last ? this._last = new l3() : t71 || ((_a = this._last) == null ? void 0 : _a.forAll((t72) => t72.dispose()), this._last = null);
  }
  clean() {
    var _a;
    (_a = this._last) == null ? void 0 : _a.filterInPlace((t71) => !(t71.incarnation < this._incarnation) || (this._cache.put(t71.key, t71), false));
  }
  frame() {
    ++this._incarnation;
  }
  pop(t71) {
    if (this._last) {
      const s71 = this._last.find((s72) => s72.key === t71);
      if (s71)
        return this._last.removeUnordered(s71), s71;
    }
    return this._cache.pop(t71);
  }
  put(t71) {
    t71.incarnation = this._incarnation, this._last ? this._last.push(t71) : this._cache.put(t71.key, t71);
  }
  get usedMemory() {
    var _a;
    return ((_a = this._last) == null ? void 0 : _a.reduce((t71, s71) => t71 + s71.usedMemory, 0)) ?? 0;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/core/FBOCache.js
var C27 = class {
  constructor(e68) {
    this.rctx = e68, this._acquired = /* @__PURE__ */ new Set(), this._cache = new i45(e68.newCache, "FBOCache"), this._depthCache = new i45(e68.newCache, "DepthAttachmentCache"), this._colorCache = new i45(e68.newCache, "ColorAttachmentCache");
  }
  destroy() {
    this._cache.destroy(), this._depthCache.destroy(), this._colorCache.destroy();
  }
  clean() {
    this._cache.clean(), this._colorCache.clean(), this._depthCache.clean();
  }
  frameStart() {
    this._cache.frame(), this._colorCache.frame(), this._depthCache.frame(), this.debugCallback && this.debugCallback();
  }
  frameEnd() {
    const e68 = this.debugCallback;
    e68 && this._acquired.forEach((t71) => t71.type === t67.FBO && e68(t71.name, t71.fbo));
  }
  get usedMemory() {
    return Array.from(this._acquired.values()).reduce((e68, t71) => {
      var _a;
      return e68 + ("getTexture" in t71 ? ((_a = t71.getTexture()) == null ? void 0 : _a.usedMemory) ?? 0 : t71.usedMemory);
    }, this._cache.usedMemory + this._colorCache.usedMemory + this._depthCache.usedMemory);
  }
  set interactive(e68) {
    this._cache.interactive = this._colorCache.interactive = this._depthCache.interactive = e68;
  }
  acquire(a61, r55, c44, i47 = R3.RGBA) {
    const o58 = T20(i47, a61, r55);
    let s71 = this._cache.pop(o58);
    return s71 ? (s71.retain(), s71.setName(c44)) : s71 = new r50(o58, c44, new x7(this.rctx, { ...F19[i47], width: a61, height: r55 }), (e68) => {
      e68 ?? (e68 = E11.DEPTH_STENCIL_TEXTURE);
      const a62 = this._acquireDepth(e68, s71.fbo.width, s71.fbo.height, `${s71.name} depth`);
      return s71.attachDepth(a62), a62.release(), s71;
    }, (t71, h36) => {
      h36 ?? (h36 = R3.RGBA);
      const c45 = this._acquireColor(h36, a61, r55, `${s71.name} color ${t71}`);
      return s71.attachColor(c45, t71), c45.release(), s71;
    }, () => {
      this.debugCallback && this.debugCallback(s71.name, s71.fbo), this._acquired.delete(s71), s71.detachAll(), this._cache.put(s71);
    }), this._trackHandle(s71);
  }
  acquireDepth(e68, t71, a61, r55) {
    return this._acquireDepth(e68, t71, a61, r55);
  }
  _acquireDepth(e68, a61, h36, c44) {
    const i47 = T20(e68, a61, h36), o58 = this._depthCache.pop(i47);
    if (o58)
      return o58.retain(), o58.name = c44, this._trackHandle(o58);
    const s71 = e68 === E11.DEPTH_STENCIL_TEXTURE ? new r49(i47, new m11(this.rctx, { ...x30[e68], width: a61, height: h36 }), () => {
      this._acquired.delete(s71), this._depthCache.put(s71);
    }) : new r49(i47, new s17(this.rctx, { ...x30[e68], width: a61, height: h36 }), () => {
      this._acquired.delete(s71), this._depthCache.put(s71);
    });
    return s71.name = c44, this._trackHandle(s71);
  }
  _acquireColor(e68, t71, r55, h36) {
    const c44 = T20(e68, t71, r55), i47 = this._colorCache.pop(c44);
    if (i47)
      return i47.retain(), i47.name = h36, this._trackHandle(i47);
    const o58 = new s66(c44, new m11(this.rctx, { ...F19[e68], width: t71, height: r55 }), () => {
      this._acquired.delete(o58), this._colorCache.put(o58);
    });
    return o58.name = h36, this._trackHandle(o58);
  }
  _trackHandle(e68) {
    return this._acquired.add(e68), e68;
  }
};
function T20(e68, t71, a61) {
  return `${e68}x${t71}x${a61}`;
}
var f42 = new e22();
f42.pixelFormat = G4.RED, f42.internalFormat = P5.R8, f42.wrapMode = D2.CLAMP_TO_EDGE;
var g22 = new e22();
g22.pixelFormat = G4.RG, g22.internalFormat = P5.RG8, g22.wrapMode = D2.CLAMP_TO_EDGE;
var A29 = new e22();
A29.internalFormat = P5.RGBA4, A29.dataType = U4.UNSIGNED_SHORT_4_4_4_4, A29.wrapMode = D2.CLAMP_TO_EDGE;
var M17 = new e22();
M17.wrapMode = D2.CLAMP_TO_EDGE;
var b20 = new e22();
b20.wrapMode = D2.CLAMP_TO_EDGE, b20.samplingMode = L4.LINEAR_MIPMAP_LINEAR, b20.hasMipmap = true, b20.maxAnisotropy = 8;
var R16 = new e22();
R16.pixelFormat = G4.RED, R16.dataType = U4.HALF_FLOAT, R16.internalFormat = P5.R16F, R16.samplingMode = L4.NEAREST;
var D17 = new e22();
D17.dataType = U4.HALF_FLOAT, D17.internalFormat = P5.RGBA16F, D17.samplingMode = L4.NEAREST;
var F19 = { [R3.RED]: f42, [R3.RG]: g22, [R3.RGBA4]: A29, [R3.RGBA]: M17, [R3.RGBA_MIPMAP]: b20, [R3.R16F]: R16, [R3.RGBA16F]: D17 };
var G18 = new e22();
G18.pixelFormat = G4.DEPTH_STENCIL, G18.dataType = U4.UNSIGNED_INT_24_8, G18.samplingMode = L4.NEAREST, G18.wrapMode = D2.CLAMP_TO_EDGE;
var x30 = { [E11.DEPTH_STENCIL_TEXTURE]: G18, [E11.DEPTH16_BUFFER]: new i9(B3.DEPTH_COMPONENT16, 4) };

// node_modules/@arcgis/core/views/3d/webgl-engine/core/renderPasses/RenderPass.js
var i46;
!function(e68) {
  e68[e68.FrontToBack = 0] = "FrontToBack", e68[e68.BackToFront = 1] = "BackToFront";
}(i46 || (i46 = {}));
var a55 = class {
  constructor(t71, r55, a61 = i46.FrontToBack) {
    this._rctx = t71, this._techniqueRepository = r55, this._sorting = a61, this._draws = new l3({ initialSize: 32, allocator: (e68) => e68 || { material: null, geometry: null, geometryRanges: null, bindDrawParams: null, depthSquaredHint: 0, indexType: 0 } }), this._previouslyBoundDraw = /* @__PURE__ */ new Map();
  }
  submitDraw(e68, t71, r55, i47) {
    const a61 = this._draws.pushNew();
    a61.geometry = t71, a61.geometryRanges = r55, a61.material = e68, a61.depthSquaredHint = i47, a61.indexType = (t71.indexed ? t71.vao.indexBuffer.indexType : null) ?? 0;
  }
  prepare(e68, t71) {
    return this._draws.map((r55) => r55.material.prepareTechnique(this._techniqueRepository, e68, t71, r55.geometry.parameters));
  }
  dispatch(e68, r55, i47) {
    const a61 = this._rctx;
    this._previouslyBoundDraw.clear();
    let s71 = null;
    const o58 = this._draws.length;
    for (let p48 = 0; p48 < o58; p48++) {
      const o59 = i47[p48];
      o59 === s71 && o59.configuration.transparencyPassType === o16.NONE || (a61.bindTechnique(o59, r55, e68), s71 = o59);
      const l45 = this._draws.data[p48], d44 = l45.geometry;
      a61.bindVAO(d44.vao), this._previouslyBoundDraw.get(o59) !== l45.material && (o59.program.bindDraw(l45.material, r55, e68), this._previouslyBoundDraw.set(o59, l45.material));
      const c44 = l45.geometryRanges, u46 = c44.length;
      if (0 !== l45.indexType) {
        const e69 = n57.get(l45.indexType);
        for (let t71 = 0; t71 < u46; t71 += 2) {
          const r56 = c44[t71], i48 = c44[t71 + 1];
          a61.drawElements(d44.primitiveType, i48, l45.indexType, r56 * e69);
        }
      } else
        for (let e69 = 0; e69 < u46; e69 += 2) {
          const t71 = c44[e69], r56 = c44[e69 + 1];
          a61.drawArrays(d44.primitiveType, t71, r56);
        }
    }
  }
  prepareSubmit() {
    this._draws.clear();
  }
  finishSubmit() {
    const e68 = this._sorting === i46.FrontToBack ? 1 : -1;
    this._draws.sort((t71, r55) => {
      const i47 = e68 * (t71.depthSquaredHint - r55.depthSquaredHint);
      return 0 !== i47 ? i47 : t71.geometry.vao.byteSize - r55.geometry.vao.byteSize;
    });
  }
  get count() {
    return this._draws.length;
  }
};
var n57 = /* @__PURE__ */ new Map();
n57.set(C4.UNSIGNED_BYTE, 1), n57.set(C4.UNSIGNED_SHORT, 2), n57.set(C4.UNSIGNED_INT, 4);

// node_modules/@arcgis/core/views/3d/webgl-engine/core/renderPasses/RenderPassManager.js
var j24 = class extends a18 {
  constructor() {
    super({}), this._passes = null, this.produces = /* @__PURE__ */ new Map([[A6.OPAQUE_MATERIAL, (s71) => this._produces(s71)], [A6.TRANSPARENT_MATERIAL, (s71) => !!(this._passes && this._passes.materialTransparent.count > 0) && this._produces(s71)], [A6.INTEGRATED_MESH, (s71) => this._produces(s71)]]), this._materialPassParameters = new l17(), this._shadowPassParameters = new n29(), this._highlightPassParameters = new c16(), this._systems = /* @__PURE__ */ new Set();
  }
  initializeRenderContext(s71) {
    this._context = s71;
    const e68 = s71.renderContext.rctx, t71 = s71.techniqueRepository;
    this._passes = { materialOpaque: new a55(e68, t71), materialTransparent: new a55(e68, t71, i46.BackToFront), materialIntegratedMesh: new a55(e68, t71), shadowMap: new a55(e68, t71), highlight: new a55(e68, t71), highlightIntegratedMesh: new a55(e68, t71), highlightShadowMap: new a55(e68, t71), defaultShadowMap: new a55(e68, t71) };
  }
  get rctx() {
    return this._context.renderContext.rctx;
  }
  uninitializeRenderContext() {
  }
  dispose() {
    this._context = null, this._systems.clear();
  }
  register(s71) {
    this._systems.add(s71);
  }
  _produces(s71) {
    return 0 !== this._systems.size && null !== this._passes && (s71 === o10.Highlight ? this._passes.highlight.count > 0 || this._passes.highlightIntegratedMesh.count > 0 : s71 !== o10.ShadowHighlight || this._passes.highlight.count > 0);
  }
  prepareRender(s71) {
    if (0 !== this._systems.size && null !== this._passes) {
      for (const s72 of Object.values(this._passes))
        s72.prepareSubmit();
      this._systems.forEach((e68) => e68.submit(this._passes, s71.bindParameters));
      for (const s72 of Object.values(this._passes))
        s72.finishSubmit();
      this._context.techniqueRepository.frameUpdate();
    }
  }
  prepareTechniques(s71) {
    if (0 === this._systems.size)
      return null;
    const e68 = s71.output === o10.Shadow || s71.output === o10.ShadowHighlight || s71.output === o10.ShadowExcludeHighlight ? this._shadowPassParameters : s71.output === o10.Highlight ? this._highlightPassParameters : this._materialPassParameters, t71 = s71.bindParameters;
    return this._updateParameters(t71.camera, e68, t71.slot === A6.TRANSPARENT_MATERIAL), this._materialPassParameters.output = s71.output, this._invoke(s71, (e69, t72) => e69.prepare(t72, s71.bindParameters));
  }
  renderNode(s71, e68) {
    this._invoke(s71, (t71, r55) => t71.dispatch(r55, s71.bindParameters, e68));
  }
  _invoke(s71, e68) {
    if (null === this._passes)
      return null;
    switch (s71.bindParameters.slot) {
      case A6.OPAQUE_MATERIAL:
        switch (s71.output) {
          case o10.Color:
          case o10.LinearDepth:
          case o10.Normal:
          case o10.ObjectAndLayerIdColor:
            return e68(this._passes.materialOpaque, this._materialPassParameters);
          case o10.Highlight:
            return e68(this._passes.highlight, this._highlightPassParameters);
          case o10.Shadow:
            return e68(this._passes.shadowMap, this._shadowPassParameters);
          case o10.ShadowHighlight:
            return e68(this._passes.highlightShadowMap, this._shadowPassParameters);
          case o10.ShadowExcludeHighlight:
            return e68(this._passes.defaultShadowMap, this._shadowPassParameters);
        }
        break;
      case A6.TRANSPARENT_MATERIAL:
        switch (s71.output) {
          case o10.Color:
          case o10.Alpha:
          case o10.LinearDepth:
          case o10.Normal:
          case o10.ObjectAndLayerIdColor:
            return e68(this._passes.materialTransparent, this._materialPassParameters);
        }
        break;
      case A6.INTEGRATED_MESH:
        switch (s71.output) {
          case o10.Color:
          case o10.LinearDepth:
          case o10.Normal:
          case o10.ObjectAndLayerIdColor:
            return e68(this._passes.materialIntegratedMesh, this._materialPassParameters);
          case o10.Highlight:
            return e68(this._passes.highlightIntegratedMesh, this._highlightPassParameters);
        }
    }
    return null;
  }
  notifyDirty() {
    this._context.requestRender();
  }
  queryDepthRange(s71) {
    const e68 = new r47();
    return this._systems.forEach((t71) => e60(e68, t71.queryShadowCasterDepthRange(s71))), e68;
  }
  _updateParameters(s71, e68, i47) {
    const m46 = s71.viewInverseTransposeMatrix;
    o4(A30, m46[3], m46[7], m46[11]), M18.set(A30), r5(e68.transformWorldFromViewTH, M18.high), r5(e68.transformWorldFromViewTL, M18.low), r5(e68.slicePlaneLocalOrigin, A30), n16(e68.transformViewFromCameraRelativeRS, s71.viewMatrix), n9(e68.transformProjFromView, s71.projectionMatrix), e68.identifier === o29.Material && (this._materialPassParameters.transparent = i47, u8(S23, e68.transformViewFromCameraRelativeRS), s12(e68.transformNormalViewFromGlobal, S23));
  }
};
j24 = e([a4("esri.views.3d.webgl-engine.core.renderPasses.RenderPassManager")], j24);
var A30 = n7();
var S23 = e16();
var M18 = new e32();

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/RenderNodes.js
var r51 = class {
  constructor(e68) {
    this._context = e68, this._nodes = new l3();
  }
  destroy() {
    this._nodes.forEach((e68) => e68.destroy()), this._nodes.clear();
  }
  add(e68) {
    this._nodes.push(e68), n18 && console.log(`Registered render nodes: ${this._nodes.map(({ declaredClass: e69 }) => e69).join(", ")}`);
  }
  remove(e68) {
    this._nodes.remove(e68), n18 && console.log(`Registered render nodes: ${this._nodes.map(({ declaredClass: e69 }) => e69).join(", ")}`);
  }
  produces(e68) {
    return this._nodes.some(({ produces: o58 }) => o58 === e68);
  }
  require(e68, o58) {
    return this._nodes.reduce((s71, { consumes: r55, produces: t71 }) => s71 + (r55.required.includes(e68) && t71 === o58 ? 1 : 0), 0);
  }
  optional(e68, o58) {
    return this._nodes.reduce((s71, { consumes: r55, produces: t71 }) => {
      var _a;
      return s71 + (((_a = r55.optional) == null ? void 0 : _a.includes(e68)) && t71 === o58 ? 1 : 0);
    }, 0);
  }
  updateAnimation() {
    return this._nodes.reduce((e68, o58) => o58.updateAnimation() || e68, false);
  }
  render(o58, s71, r55) {
    const t71 = o58.name, n61 = this._nodes.filter(({ produces: e68 }) => e68 === t71);
    return 0 === n61.length || (n61.forEach((n62) => {
      const c44 = [o58];
      for (const e68 of n62.consumes.required) {
        if (e68 === t71)
          continue;
        const o59 = s71.get(e68);
        if (!o59)
          return void r55(c44);
        c44.push(o59);
      }
      if (n62.consumes.optional)
        for (const e68 of n62.consumes.optional) {
          if (e68 === t71)
            continue;
          const o59 = s71.get(e68);
          o59 && c44.push(o59);
        }
      try {
        const e68 = n62.doRender(c44, this._context);
        e68 && e68 !== o58 && (o58.release(), o58 = e68, s71.set(t71, o58));
      } catch (d44) {
        n.getLogger(n62).errorOnce(d44);
      }
      r55(c44);
    }), this._context.rctx.enforceState()), o58;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/RenderPluginManager.js
var c40 = class {
  constructor(r55) {
    this._context = r55, this._renderPlugins = new l3(), this._slots = new Array(), this._renderVersion = r12(0);
    for (let e68 = 0; e68 < A6.MAX_SLOTS; ++e68)
      this._slots[e68] = [];
  }
  destroy() {
    this._renderPlugins.forEach((e68) => e68.destroy()), this._renderPlugins.clear();
  }
  get plugins() {
    return this._renderPlugins;
  }
  add(e68, n61) {
    const s71 = () => {
      if (n61 == null ? void 0 : n61.aborted)
        throw e68.uninitializeRenderContext(), u2();
      this._renderPlugins.push(e68), e68.produces.forEach((r55, t71) => {
        this._slots[t71].push(e68);
      }), this._context.requestRender(), this._renderVersion.value++;
    }, i47 = e68.initializeRenderContext(this._context, n61);
    if (S(i47))
      return i47.then(s71);
    s71();
  }
  remove(e68) {
    if (null != this._renderPlugins.removeUnordered(e68)) {
      for (let r55 = 0; r55 < this._slots.length; ++r55)
        this._slots[r55] = this._slots[r55].filter((r56) => r56 !== e68);
      e68.uninitializeRenderContext(), this._context.requestRender(), this._renderVersion.value++;
    }
  }
  prepareRender() {
    this._renderPlugins.forAll((e68) => {
      e68.prepareRender && e68.prepareRender(this._context.renderContext);
    });
  }
  updateAnimation(e68) {
    let r55 = false;
    return this._renderPlugins.forAll((t71) => {
      t71.updateAnimation && (r55 = t71.updateAnimation(e68) || r55);
    }), r55;
  }
  renderFeatureChanged() {
    this._renderPlugins.forAll((e68) => {
      e68.renderFeatureChanged && e68.renderFeatureChanged();
    });
  }
  prepare(e68) {
    this._context.renderContext.bindParameters.slot = e68, this._slots[e68].forEach((r55) => {
      const t71 = r55.produces.get(e68);
      t71 && t71(o10.Color) && (m13(r55) && r55.prepareTechnique(this._context.renderContext), h9(r55) && r55.prepareTechniques(this._context.renderContext));
    });
  }
  _getRenderables(e68) {
    this._context.renderContext.bindParameters.slot = e68;
    const r55 = this._context.renderContext.output ?? o10.Color, t71 = /* @__PURE__ */ new Map();
    return this._slots[e68].forEach((n61) => {
      const s71 = n61.produces.get(e68);
      if (s71 && s71(r55) && (!n61.isDecoration || this._context.renderContext.bindParameters.decorations !== i6.OFF))
        if (m13(n61)) {
          const e69 = n61.prepareTechnique(this._context.renderContext);
          null != e69 && t71.set(n61, e69);
        } else if (h9(n61)) {
          const e69 = n61.prepareTechniques(this._context.renderContext);
          null != e69 && t71.set(n61, e69);
        } else
          t71.set(n61, null);
    }), t71;
  }
  render(e68, r55 = null, t71 = null) {
    return this._getRenderables(e68).forEach((e69, n61) => t71 = n61.renderNode(this._context.renderContext, e69, r55, t71)), t71;
  }
  queryDepthRange(e68) {
    const r55 = new r47();
    return this._renderPlugins.forAll((t71) => {
      var _a;
      const n61 = (_a = t71.queryDepthRange) == null ? void 0 : _a.call(t71, e68);
      e60(r55, n61);
    }), r55;
  }
  get updating() {
    return this._renderVersion.value >= 0 && this._renderPlugins.some((e68) => e68.running);
  }
  produces(e68, r55 = o10.Color) {
    return this._slots[e68].some((t71) => {
      const n61 = t71.produces.get(e68);
      return !!n61 && n61(r55);
    });
  }
  consumes(e68) {
    return this._renderPlugins.some((r55) => r55.consumes().required.includes(e68));
  }
  getMaterialRenderer(e68) {
    return this._renderPlugins.find((r55) => r55.materialReference === e68);
  }
  removeEmptyMaterialRenderers() {
    this._renderPlugins.filterInPlace((e68) => !e68.materialReference || 0 !== e68.numGeometries || (e68.destroy(), false));
  }
  get hasDecorations() {
    return this._renderPlugins.some((e68) => e68.isDecoration);
  }
  get hasOccludees() {
    return this._renderPlugins.some((e68) => e68.hasOccludees);
  }
  get renderOccludedFlags() {
    return this._renderPlugins.reduce((e68, r55) => e68 | r55.renderOccludedFlags, h8.None);
  }
  get usedMemory() {
    return this._renderPlugins.reduce((e68, r55) => null !== r55.materialReference ? e68 : e68 + (r55.usedMemory ?? 0), 0);
  }
  get test() {
    return { plugins: this._renderPlugins };
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/blit/Blit.js
var m41 = class extends c9 {
  constructor(t71) {
    super(t71), this._context = null, this.opacity = 1, this.alphaMode = a52.None, this._blitConfiguration = new r48(), this._blitParameters = new i23(), this.produces = /* @__PURE__ */ new Map([[A6.BLIT, () => null != this._context]]);
  }
  consumes() {
    return s23;
  }
  initializeRenderContext(t71) {
    this._context = t71;
  }
  uninitializeRenderContext() {
    this._context = null;
  }
  destroy() {
  }
  renderNode(t71, e68, o58, r55) {
    var _a;
    const i47 = (_a = o58 == null ? void 0 : o58.get("composite-color")) == null ? void 0 : _a.getTexture();
    if (!this._context || !i47)
      return r55;
    const s71 = this._context.techniqueRepository.acquire(p44, this._blitConfiguration);
    return (s71 == null ? void 0 : s71.compiled) ? (t71.rctx.bindFramebuffer(r55 == null ? void 0 : r55.fbo), this._blitParameters.texture = i47, this._blitParameters.opacity = this.opacity, t71.rctx.bindTechnique(s71, t71.bindParameters, this._blitParameters), t71.rctx.screen.draw(), s71.release(), r55) : (this._context.requestRender(), r55);
  }
};
e([y2()], m41.prototype, "_context", void 0), e([y2()], m41.prototype, "opacity", void 0), e([y2()], m41.prototype, "alphaMode", void 0), m41 = e([a4("esri.views.3d.webgl-engine.effects.blit.Blit")], m41);

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/highlight/HighlightApplyTechnique.js
var n58 = class _n extends r15 {
  initializeProgram(e68) {
    return new r16(e68.rctx, _n.shader.get().build(), O9);
  }
  initializePipeline() {
    return S7({ blending: l11(R2.SRC_ALPHA, R2.ONE, R2.ONE_MINUS_SRC_ALPHA, R2.ONE_MINUS_SRC_ALPHA), colorWrite: _8 });
  }
};
n58.shader = new t17(d19, () => import("./HighlightApply.glsl-GOQEJHDI.js"));

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/highlight/HighlightBlurTechnique.js
var a56 = class _a extends r15 {
  initializeProgram(r55) {
    return new r16(r55.rctx, _a.shader.get().build(), O9);
  }
  initializePipeline() {
    return S7({ colorWrite: _8 });
  }
};
a56.shader = new t17(c21, () => import("./HighlightBlur.glsl-I3XWDJWC.js"));

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/highlight/HighlightDownsampleTechnique.js
var l41 = class _l extends r15 {
  initializeProgram(e68) {
    return new r16(e68.rctx, _l.shader.get().build(), O9);
  }
  initializePipeline() {
    return S7({ colorWrite: _8 });
  }
};
l41.shader = new t17(c20, () => import("./HighlightDownsample.glsl-KUHTK64H.js"));

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/highlight/HighlightPassParameters.js
var r52 = class extends n15 {
  constructor() {
    super(...arguments), this.color = r6(1, 0, 1, 1), this.haloColor = r6(1, 0, 1, 1), this.haloOpacity = 1, this.haloOpacityOccluded = 0.25, this.fillOpacity = 0.2, this.fillOpacityOccluded = 0.05, this.coverageRounding = r7(1, 1);
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/highlight/Highlight.js
var D18 = class extends c9 {
  constructor(e68) {
    super(e68), this._context = null, this._passParameters = new r52(), this._downsampleDrawParameters = new o37(), this._blurDrawParameters = new d20(), this._blurColorFormat = has("mac") ? R3.RGBA : R3.RGBA4, this._grid = { coverage: null, vao: null, verticalCellCount: 0, horizontalCellCount: 0, viewportWidth: 0, viewportHeight: 0 }, this.produces = /* @__PURE__ */ new Map([[A6.HIGHLIGHT, () => true]]);
  }
  consumes() {
    return u9;
  }
  initializeRenderContext(e68) {
    this._context = e68, null == this._blurTechnique && (this._blurTechnique = this._context.techniqueRepository.acquire(a56)), null == this._downsampleTechnique && (this._downsampleTechnique = this._context.techniqueRepository.acquire(l41)), null == this._applyTechnique && (this._applyTechnique = this._context.techniqueRepository.acquire(n58)), this.addHandles([d3(() => this.view.highlightOptions.color, (e69) => {
      this._passParameters.color = E5(e69 ?? r41), this.view.highlightOptions.haloColor || (this._passParameters.haloColor = this._passParameters.color), this._context.requestRender();
    }, A3), d3(() => this.view.highlightOptions.haloColor, (e69) => {
      this._passParameters.haloColor = null != e69 ? E5(e69) : this._passParameters.color, this._context.requestRender();
    }, A3), d3(() => this.view.highlightOptions.haloOpacity, (e69) => {
      this._passParameters.haloOpacity = e69 ?? e50, this._passParameters.haloOpacityOccluded = 0.25 * this._passParameters.haloOpacity, this._context.requestRender();
    }, A3), d3(() => this.view.highlightOptions.fillOpacity, (e69) => {
      this._passParameters.fillOpacity = e69 ?? n44, this._passParameters.fillOpacityOccluded = 0.25 * this._passParameters.fillOpacity, this._context.requestRender();
    }, A3)]);
  }
  uninitializeRenderContext() {
    this._context = null;
  }
  dispose() {
    this._blurTechnique = t2(this._blurTechnique), this._downsampleTechnique = t2(this._downsampleTechnique), this._applyTechnique = t2(this._applyTechnique), this._grid.coverage = t2(this._grid.coverage), this._grid.vao = r2(this._grid.vao);
  }
  renderNode(e68, t71, r55, i47) {
    var _a, _b;
    const s71 = (_a = r55 == null ? void 0 : r55.get("highlights")) == null ? void 0 : _a.getTexture();
    if (!this._context || !s71)
      return;
    if (!(this._blurTechnique.compiled && this._downsampleTechnique.compiled && this._applyTechnique.compiled))
      return void this._context.requestRender();
    const o58 = e68.bindParameters.camera, a61 = o58.fullWidth, h36 = o58.fullHeight, n61 = o58.pixelRatio, c44 = Math.ceil(a61 / n61), u46 = Math.ceil(h36 / n61), p48 = this._context.fbos, m46 = p48.rctx;
    this._gridUpdateResources(s71), this._gridComputeCoverage(s71, e68.bindParameters), this._passParameters.highlightTexture = s71, this._passParameters.coverageTexture = (_b = this._grid.coverage) == null ? void 0 : _b.getTexture();
    const { width: g23, height: _26 } = s71.descriptor;
    o13(this._passParameters.coverageRounding, g23 / (Math.ceil(g23 / n36) * n36), _26 / (Math.ceil(_26 / n36) * n36));
    const d44 = this._grid.vao;
    m46.bindVAO(d44);
    const b22 = p48.acquire(c44, u46, "highlight blur", this._blurColorFormat);
    m46.unbindTexture(b22.fbo.colorTexture), m46.bindFramebuffer(b22.fbo), m46.setClearColor(0, 0, 0, 0), m46.clear(_6.COLOR_BUFFER_BIT), m46.setViewport(0, 0, c44, u46), this._blurDrawParameters.blurInputTexture = s71, o13(this._blurDrawParameters.blurSize, 1 / c44, 0);
    const f48 = m46.bindTechnique(this._blurTechnique, e68.bindParameters, this._passParameters, this._blurDrawParameters);
    m46.drawArrays(this._blurTechnique.primitiveType, 0, i8(d44, "geometry"));
    const w27 = p48.acquire(c44, u46, "highlight blur", this._blurColorFormat);
    m46.unbindTexture(w27.fbo.colorTexture), m46.bindFramebuffer(w27.fbo), m46.setClearColor(0, 0, 0, 0), m46.clear(_6.COLOR_BUFFER_BIT), this._blurDrawParameters.blurInputTexture = b22.getTexture(), o13(this._blurDrawParameters.blurSize, 0, 1 / u46), f48.bindDraw(this._blurDrawParameters, e68.bindParameters, this._passParameters), m46.drawArrays(this._blurTechnique.primitiveType, 0, i8(d44, "geometry")), m46.bindFramebuffer(i47 == null ? void 0 : i47.fbo), m46.setViewport4fv(o58.fullViewport), this._passParameters.blurTexture = w27.getTexture(), m46.bindTechnique(this._applyTechnique, e68.bindParameters, this._passParameters), m46.drawArrays(this._applyTechnique.primitiveType, 0, i8(d44, "geometry")), b22.release(), w27.release();
  }
  _gridUpdateResources(e68) {
    var _a;
    if (!this._context)
      return;
    const t71 = this._context.fbos.rctx, r55 = this._grid, i47 = Math.ceil(e68.descriptor.height / n36), s71 = Math.ceil(e68.descriptor.width / n36);
    if (r55.vao && r55.verticalCellCount === i47 && r55.horizontalCellCount === s71)
      return;
    r55.verticalCellCount = i47, r55.horizontalCellCount = s71;
    const o58 = i47 + 1, a61 = s71 + 1, h36 = 1 / i47, l45 = 1 / s71, n61 = new Float32Array(6 * 4 * o58 * a61);
    let c44 = 0;
    for (let u46 = 0; u46 < o58; u46++)
      for (let e69 = 0; e69 < a61; e69++)
        n61[c44++] = (e69 - 0.5) * l45 * 2 - 1, n61[c44++] = (u46 - 0.5) * h36 * 2 - 1, n61[c44++] = e69 * l45, n61[c44++] = u46 * h36, n61[c44++] = (e69 + 0.5) * l45 * 2 - 1, n61[c44++] = (u46 - 0.5) * h36 * 2 - 1, n61[c44++] = e69 * l45, n61[c44++] = u46 * h36, n61[c44++] = (e69 - 0.5) * l45 * 2 - 1, n61[c44++] = (u46 + 0.5) * h36 * 2 - 1, n61[c44++] = e69 * l45, n61[c44++] = u46 * h36, n61[c44++] = (e69 - 0.5) * l45 * 2 - 1, n61[c44++] = (u46 + 0.5) * h36 * 2 - 1, n61[c44++] = e69 * l45, n61[c44++] = u46 * h36, n61[c44++] = (e69 + 0.5) * l45 * 2 - 1, n61[c44++] = (u46 - 0.5) * h36 * 2 - 1, n61[c44++] = e69 * l45, n61[c44++] = u46 * h36, n61[c44++] = (e69 + 0.5) * l45 * 2 - 1, n61[c44++] = (u46 + 0.5) * h36 * 2 - 1, n61[c44++] = e69 * l45, n61[c44++] = u46 * h36;
    (_a = r55.vao) == null ? void 0 : _a.dispose(), r55.vao = new r27(t71, O9, { geometry: m21 }, { geometry: h7.createVertex(t71, F3.STATIC_DRAW, n61) });
  }
  _gridComputeCoverage(e68, t71) {
    var _a;
    if (!this._context)
      return;
    const r55 = this._context.fbos.rctx, i47 = this._grid, s71 = e68.descriptor, o58 = Math.ceil(s71.width / n36), a61 = Math.ceil(s71.height / n36);
    this._downsampleDrawParameters.input = e68, (_a = i47.coverage) == null ? void 0 : _a.release(), i47.coverage = this._context.fbos.acquire(o58, a61, "highlight coverage", R3.RG), r55.unbindTexture(i47.coverage.fbo.colorTexture), r55.bindFramebuffer(i47.coverage.fbo), r55.bindTechnique(this._downsampleTechnique, t71, this._passParameters, this._downsampleDrawParameters), r55.setViewport(0, 0, o58, a61), r55.screen.draw();
  }
  get test() {
    return { coverage: this._grid.coverage };
  }
};
e([y2()], D18.prototype, "_context", void 0), e([y2()], D18.prototype, "view", void 0), D18 = e([a4("esri.views.3d.webgl-engine.effects.highlight.Highlight")], D18);

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/ShadowConfiguration.js
var s67 = class extends t19 {
  constructor() {
    super(...arguments), this.receiveShadows = true;
  }
};
e([r17()], s67.prototype, "receiveShadows", void 0);

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/highlight/ShadowHighlightTechnique.js
var p46 = class extends h10 {
  constructor() {
    super(...arguments), this.shadowColor = r6(1, 0, 1, 1), this.shadowOpacity = 0.2, this.occludedShadowOpacity = 0.1, this.opacityElevation = 1, this.dayNightTerminator = 1;
  }
};
var u43 = class _u extends r15 {
  constructor(r55) {
    super(r55, new s67(), () => this.destroy());
  }
  initializeProgram(r55) {
    return new r16(r55.rctx, _u.shader.get().build(this.configuration), O9);
  }
  initializePipeline() {
    return S7({ blending: l11(R2.SRC_ALPHA, R2.ONE, R2.ONE_MINUS_SRC_ALPHA, R2.ONE_MINUS_SRC_ALPHA), colorWrite: _8, depthTest: null, depthWrite: null });
  }
  get primitiveType() {
    return E7.TRIANGLE_STRIP;
  }
};
u43.shader = new t17(S10, () => import("./ShadowHighlight.glsl-PXS4ARTN.js"));

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/highlight/ShadowHighlight.js
var O30 = 1953125e-9;
var b21 = 4e4;
var v31 = 5e4;
var P19 = class extends c9 {
  constructor(t71) {
    super(t71), this._maxOpacity = 1, this._passParameters = new p46(), this._shadowDifference = 0.2, this._context = null, this.produces = /* @__PURE__ */ new Map([[A6.SHADOW_HIGHLIGHT, () => this._isVisible]]);
  }
  consumes() {
    return u9;
  }
  initializeRenderContext(t71) {
    this._context = t71, this.addHandles([d3(() => this.view.highlightOptions.shadowOpacity, (t72) => {
      this._passParameters.shadowOpacity = t72 ?? m35, this._updateOccludedShadowOpacity(), this._updateMaxOpacity();
    }, A3), d3(() => this.view.highlightOptions.shadowDifference, (t72) => {
      this._shadowDifference = t72 ?? p37, this._updateOccludedShadowOpacity(), this._updateMaxOpacity();
    }, A3), d3(() => this.view.highlightOptions.shadowColor, (t72) => {
      this._passParameters.shadowColor = E5(t72 ?? t53), this._updateMaxOpacity();
    }, A3)]);
  }
  _updateOccludedShadowOpacity() {
    this._passParameters.occludedShadowOpacity = this._passParameters.shadowOpacity * (1 - this._shadowDifference);
  }
  _updateMaxOpacity() {
    const t71 = Math.max(this._passParameters.shadowOpacity, this._passParameters.occludedShadowOpacity);
    this._maxOpacity = t71 * this._passParameters.shadowColor[3];
  }
  uninitializeRenderContext() {
    this._context = null;
  }
  enable() {
    this._context && null == this._technique && (this._technique = this._context.techniqueRepository.acquire(u43));
  }
  renderNode(t71, e68, i47, s71) {
    var _a, _b;
    const a61 = (_a = i47 == null ? void 0 : i47.get("highlights")) == null ? void 0 : _a.getTexture();
    if (!this._context || !a61 || !this._isVisible)
      return;
    if (!((_b = this._technique) == null ? void 0 : _b.compiled))
      return void this._context.requestRender();
    const r55 = t71.bindParameters;
    if (!r55.shadowMap.enabled || !r55.linearDepth)
      return;
    this._passParameters.highlight = a61, this._passParameters.origin = r55.camera.center;
    const o58 = t71.rctx;
    o58.bindFramebuffer(s71 == null ? void 0 : s71.fbo), o58.bindTechnique(this._technique, r55, this._passParameters), o58.screen.draw();
  }
  updateParameters(t71, e68) {
    this._passParameters.opacityElevation = 1 - p4(b21, v31, t71.relativeElevation);
    const a61 = this.viewingMode === l8.Global ? z2(j25, t71.center) : o4(j25, 0, 0, 1), r55 = P3(a61, e68);
    this._passParameters.dayNightTerminator = p4(0, 1, e12(30 * r55, 0, 1)), this._isVisible && this.enable();
  }
  get _isVisible() {
    const { opacityElevation: t71, dayNightTerminator: e68 } = this._passParameters;
    return this._maxOpacity * t71 * e68 >= O30;
  }
};
e([y2()], P19.prototype, "_context", void 0), e([y2()], P19.prototype, "view", void 0), e([y2()], P19.prototype, "viewingMode", void 0), P19 = e([a4("esri.views.3d.webgl-engine.effects.highlight.ShadowHighlight")], P19);
var j25 = n7();

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/smaa/SMAABlendWeightsTechnique.js
var a57 = class _a extends r15 {
  initializeProgram(e68) {
    return new r16(e68.rctx, _a.shader.get().build(), O9);
  }
  initializePipeline() {
    return S7({ colorWrite: _8 });
  }
};
a57.shader = new t17(x11, () => import("./BlendWeights.glsl-TQ2TQKUH.js"));

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/smaa/SMAABlurTechnique.js
var a58 = class _a extends r15 {
  initializeProgram(r55) {
    return new r16(r55.rctx, _a.shader.get().build(), O9);
  }
  initializePipeline() {
    return S7({ colorWrite: _8 });
  }
};
a58.shader = new t17(f21, () => import("./Blur.glsl-VXGPTF63.js"));

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/smaa/SMAAEdgeDetectTechnique.js
var l42 = class _l extends r15 {
  initializeProgram(e68) {
    return new r16(e68.rctx, _l.shader.get().build(), O9);
  }
  initializePipeline() {
    return S7({ colorWrite: _8 });
  }
};
l42.shader = new t17(s41, () => import("./EdgeDetect.glsl-MXZ5BBVE.js"));

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/smaa/SMAAPassParameters.js
var s68 = class extends n15 {
};

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/smaa/SMAA.js
var A31 = class extends c9 {
  constructor(e68) {
    super(e68), this._context = null, this._areaTexture = null, this._searchTexture = null, this._isEnabled = false, this._smaaParameters = new s68(), this.produces = /* @__PURE__ */ new Map([[A6.ANTIALIASING, () => this._isEnabled && null != this._context]]);
  }
  consumes() {
    return s23;
  }
  get updating() {
    return null != this._abortController;
  }
  initializeRenderContext(e68) {
    this._context = e68, this.addHandles([d3(() => this.view.qualitySettings.antialiasingEnabled, () => this.renderFeatureChanged(), A3)]);
  }
  renderFeatureChanged() {
    var _a;
    this.view.qualitySettings.antialiasingEnabled || ((_a = this._context) == null ? void 0 : _a.isFeatureEnabled(o19.Antialiasing)) ? this.enable() : this.disable();
  }
  uninitializeRenderContext() {
    this.disable(), this._context = null;
  }
  async enable() {
    var _a;
    if (this._isEnabled || !this._context || this._abortController)
      return;
    if (this._edgeTechnique ?? (this._edgeTechnique = this._context.techniqueRepository.acquire(l42)), this._blendTechnique ?? (this._blendTechnique = this._context.techniqueRepository.acquire(a57)), this._blurTechnique ?? (this._blurTechnique = this._context.techniqueRepository.acquire(a58)), this._areaTexture && this._searchTexture)
      return void (this._isEnabled = true);
    this._abortController = new AbortController();
    const e68 = this._abortController.signal;
    try {
      const t71 = await import("./SMAAData-BWMIEXYD.js");
      await this._loadTextures(this._context, t71, e68), (_a = this._context) == null ? void 0 : _a.requestRender();
    } catch {
    }
    this._abortController = null;
  }
  async _loadTextures(e68, t71, r55) {
    if (s3(r55), !e68)
      throw u2();
    const [o58, a61] = await Promise.allSettled([t16(t71.areaTexture, { signal: r55 }), t16(t71.searchTexure, { signal: r55 })]);
    s3(r55), "fulfilled" === o58.status && "fulfilled" === a61.status && (this._areaTexture = R17(e68.fbos.rctx, L4.LINEAR, G4.RGB, o58.value), this._searchTexture = R17(e68.fbos.rctx, L4.NEAREST, G4.LUMINANCE, a61.value), this._isEnabled = true);
  }
  _disposeTextures() {
    this._areaTexture = r2(this._areaTexture), this._searchTexture = r2(this._searchTexture);
  }
  disable() {
    this._abortController = e2(this._abortController), this._isEnabled = false;
  }
  destroy() {
    this.disable(), this._disposeTextures();
  }
  renderNode(e68, t71, r55, s71) {
    var _a, _b, _c, _d;
    const i47 = (_a = r55 == null ? void 0 : r55.get("composite-color")) == null ? void 0 : _a.getTexture();
    if (!(this._isEnabled && this._context && r55 && i47))
      return s71;
    if (!(((_b = this._edgeTechnique) == null ? void 0 : _b.compiled) && ((_c = this._blendTechnique) == null ? void 0 : _c.compiled) && ((_d = this._blurTechnique) == null ? void 0 : _d.compiled)))
      return this._context.requestRender(), s71;
    const o58 = i47.descriptor.width, a61 = i47.descriptor.height, n61 = this._context.fbos, l45 = e68.rctx;
    l45.setViewport(0, 0, o58, a61);
    const u46 = n61.acquire(o58, a61, "smaa edges", R3.RG);
    l45.unbindTexture(u46.fbo.colorTexture), l45.bindFramebuffer(u46.fbo), l45.setClearColor(0, 0, 0, 1), l45.clear(_6.COLOR_BUFFER_BIT), this._smaaParameters.color = i47, l45.bindTechnique(this._edgeTechnique, null, this._smaaParameters), l45.screen.draw();
    const c44 = n61.acquire(o58, a61, "smaa blend");
    return l45.unbindTexture(c44.fbo.colorTexture), l45.bindFramebuffer(c44.fbo), l45.setClearColor(0, 0, 1, 1), l45.clear(_6.COLOR_BUFFER_BIT), this._smaaParameters.inputTexture = u46.getTexture(), this._smaaParameters.areaTexture = this._areaTexture, this._smaaParameters.searchTexture = this._searchTexture, l45.bindTechnique(this._blendTechnique, null, this._smaaParameters), l45.screen.draw(), l45.bindFramebuffer(s71 == null ? void 0 : s71.fbo), u46.release(), l45.setClearColor(0, 1, 0, 1), l45.clear(_6.COLOR_BUFFER_BIT), this._smaaParameters.inputTexture = c44.getTexture(), l45.bindTechnique(this._blurTechnique, null, this._smaaParameters), l45.screen.draw(), c44.release(), s71;
  }
};
function R17(e68, t71, r55, s71) {
  const i47 = new e22();
  return i47.pixelFormat = r55, i47.wrapMode = D2.CLAMP_TO_EDGE, i47.width = s71.width, i47.height = s71.height, i47.samplingMode = t71, new m11(e68, i47, s71);
}
e([y2()], A31.prototype, "view", void 0), e([y2()], A31.prototype, "_context", void 0), e([y2()], A31.prototype, "_abortController", void 0), e([y2({ readOnly: true })], A31.prototype, "updating", null), A31 = e([a4("esri.views.3d.webgl-engine.effects.smaa.SMAA")], A31);

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/AnimationTimeStep.js
var e64 = class {
  constructor() {
    this._step = m42, this._dilation = 1, this._firstIdleTime = n3(0);
  }
  frame(e68, _26) {
    _26 ? 0 === this._firstIdleTime && (this._firstIdleTime = n3(performance.now())) : this._firstIdleTime = n3(0);
    if (!has("disable-feature:high-quality-idle")) {
      const t71 = _26 ? performance.now() - this._firstIdleTime : 0;
      if (t71 >= r53 + o54)
        return this._step = n3(1 / 0), void (this._dilation = 1);
      this._dilation = t71 >= r53 ? h35 : 1;
    } else
      this._dilation = 1;
    const n61 = e12(e68 / s69, m42, a59);
    this._step === 1 / 0 ? this._step = n3(n61) : this._step = n3(this._step * l43 + n61 * (1 - l43));
  }
  get value() {
    return this._step;
  }
  get timeDilation() {
    return this._dilation;
  }
  clear() {
    this._step = this._firstIdleTime = n3(0);
  }
};
var s69 = 0.5;
var r53 = n3(12e4);
var o54 = n3(1e4);
var h35 = 10;
var l43 = 0.9;
var _24 = 30;
var m42 = n3(1e3 / 1);
var a59 = n3(1e3 / _24);

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/OffscreenRendering.js
var l44 = class {
  constructor(t71, e68) {
    this._fbos = t71, this.compositingHelper = e68, this._width = 4, this._height = 4, this._clearColor = n11();
  }
  dispose() {
    this._color = t2(this._color), this.releaseBuffers();
  }
  get framebuffer() {
    return this.color.attachDepth(this.depth), this.color.fbo;
  }
  get colorTexture() {
    return this.color.getTexture();
  }
  get depthTexture() {
    return this.depth.attachment;
  }
  initializeFrame(t71, r55, i47) {
    this._fbos.interactive = i47 === r25.Default;
    const s71 = this._fbos.rctx;
    this._width = t71.fullWidth, this._height = t71.fullHeight, b4(this, s71.parameters.maxTextureSize);
    const o58 = this._color;
    return this._color = null, this.releaseBuffers(), a9(this._clearColor, r55), o58;
  }
  releaseBuffers() {
    var _a;
    (_a = this._color) == null ? void 0 : _a.detachDepth(), this._depth = t2(this._depth);
  }
  renderHUDVisibility(t71, e68, r55) {
    return (t71 == null ? void 0 : t71.fbo.width) === this._width && (t71 == null ? void 0 : t71.fbo.height) === this._height || (t71 == null ? void 0 : t71.release(), t71 = this._fbos.acquire(this._width, this._height, "hud visibility", R3.RGBA4)), t71.attachDepth(r55 || this.depth), this._fbos.rctx.bindFramebuffer(t71.fbo), this._fbos.rctx.clearFramebuffer(f43), e68(), t71.detachDepth(), t71;
  }
  compositeToHUDVisibility(t71, e68) {
    var _a;
    this._fbos.rctx.bindFramebuffer((_a = t71.hudVisibility) == null ? void 0 : _a.fbo), this.compositingHelper.compositeHUD(t71, e68);
  }
  renderOITPass(t71, e68, r55) {
    let h36, c44;
    const { _width: a61, _height: l45 } = this;
    switch (e68) {
      case o16.Color:
        h36 = this._fbos.acquire(a61, l45, r55 ? "oit hud color" : "oit color", R3.RGBA16F), c44 = [0, 0, 0, 0];
        break;
      case o16.Alpha:
        h36 = this._fbos.acquire(a61, l45, r55 ? "oit hud alpha" : "oit alpha", R3.R16F), c44 = [1, 1, 1, 1];
        break;
      case o16.FrontFace:
        h36 = this._fbos.acquire(a61, l45, r55 ? "oit hud front" : "oit front"), c44 = [0, 0, 0, 0];
    }
    return r55 ? h36.acquireDepth(E11.DEPTH16_BUFFER) : h36.attachDepth(this.depth), this._fbos.rctx.bindFramebuffer(h36.fbo), this._fbos.rctx.clearFramebuffer(c44, r55, r55), t71(), h36.detachDepth(), h36;
  }
  compositeToFramebuffer(t71, e68, r55, i47) {
    this.bindFbo(), this.compositingHelper.composite(t71, e68, r55, i47);
  }
  compositeTransparentOntoOpaque(t71, e68, r55, i47, s71) {
    s71 ? (this._fbos.rctx.bindFramebuffer(s71.fbo), this._fbos.rctx.setClearColor(0, 0, 0, 1e-13), this._fbos.rctx.clear(_6.COLOR_BUFFER_BIT)) : this.bindFbo(), this.compositingHelper.compositeOIT(t71, e68.getTexture(), r55.getTexture(), i47.getTexture());
  }
  renderDepthDetached(t71) {
    this._bindTarget(this.color), t71(), this._bindTarget(this.color, this.depth);
  }
  renderToCachedFBO(e68, r55, h36, o58, c44 = R3.RGBA, a61 = E11.DEPTH16_BUFFER, l45 = this._width, f48 = this._height, _26 = null) {
    return (e68 == null ? void 0 : e68.fbo.width) === l45 && (e68 == null ? void 0 : e68.fbo.height) === f48 || (e68 = t2(e68)), e68 = e68 ?? this._fbos.acquire(l45, f48, r55, c44), _26 == null ? void 0 : _26.forEach((t71) => e68.acquireColor(t71.attachment, t71.format)), null != a61 && e68.acquireDepth(a61), this._fbos.rctx.bindFramebuffer(e68.fbo), this._fbos.rctx.clearFramebuffer(o58, true, true), h36(), e68;
  }
  renderToTargets(t71, e68, r55, i47, s71 = false, h36 = false) {
    this._bindTarget(e68, r55), this._fbos.rctx.clearFramebuffer(i47, s71, h36), t71(), e68.detachDepth();
  }
  bindFbo() {
    const t71 = null == this._color;
    if (this._bindTarget(this.color, this.depth), t71) {
      const t72 = this._fbos.rctx;
      t72.setClearStencil(0), t72.setClearColor(this._clearColor[0], this._clearColor[1], this._clearColor[2], this._clearColor[3]), t72.clear(_6.COLOR_BUFFER_BIT | _6.DEPTH_BUFFER_BIT | _6.STENCIL_BUFFER_BIT);
    }
  }
  _bindTarget(t71, e68) {
    t71.attachDepth(e68), this._fbos.rctx.bindFramebuffer(t71.fbo);
  }
  get width() {
    return this._width;
  }
  get height() {
    return this._height;
  }
  get color() {
    return this._ensureColor();
  }
  _ensureColor() {
    return this._color || (this._color = this._fbos.acquire(this._width, this._height, "composite-color")), this._color;
  }
  updateColor(t71, e68) {
    const r55 = this._ensureColor();
    r55.attachDepth(this.depth), r55.setName(e68), this._color = t71(r55);
  }
  get depth() {
    return this._depth || (this._depth = this._fbos.acquireDepth(E11.DEPTH_STENCIL_TEXTURE, this._width, this._height, "depth")), this._depth;
  }
};
var f43 = [0, 1, 0, 1];

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/ShadowCastVisualizeTechnique.js
var m43 = class _m extends r15 {
  constructor(e68, r55) {
    super(e68, r55, () => this.destroy());
  }
  initializeProgram(e68) {
    return new r16(e68.rctx, _m.shader.get().build(this.configuration), O9);
  }
  initializePipeline() {
    return S7({ blending: c8, colorWrite: _8, depthTest: null, depthWrite: null });
  }
  get primitiveType() {
    return E7.TRIANGLE_STRIP;
  }
};
m43.shader = new t17(f23, () => import("./ShadowCastVisualize.glsl-F4UTEDAN.js"));

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/ShadowCastRenderer.js
var u44 = 4e4;
var c41 = 5e4;
var p47 = 1 / 512;
var m44 = class extends S3 {
  constructor(e68, t71, s71, i47) {
    super({}), this._techniqueRepository = e68, this._rctx = t71, this._data = s71, this._requestRender = i47, this._passParameters = new p20(this._data), this._techniqueConfig = new r32(), this._enabled = false, this._vao = i18(t71);
  }
  normalizeCtorArgs() {
    return {};
  }
  dispose() {
    this._stop(), this._vao = r2(this._vao), this._techniqueRepository.release(this._technique), this._technique = null;
  }
  get _visualizeShadowCastTechnique() {
    return this._technique = this._techniqueRepository.releaseAndAcquire(m43, this._techniqueConfig, this._technique), this._technique;
  }
  render(e68) {
    if (!this._showVisualization)
      return;
    this._passParameters.sampleScale = 1 / this._data.computedSamples;
    const t71 = this._visualizeShadowCastTechnique;
    this._rctx.bindVAO(this._vao), this._rctx.bindTechnique(t71, e68, this._passParameters), this._rctx.drawArrays(t71.primitiveType, 0, i8(this._vao, "geometry"));
  }
  setOptions(e68) {
    void 0 !== e68.enabled && this._setEnabled(e68.enabled), void 0 !== e68.color && this._setColor(e68.color), void 0 !== e68.threshold && (this._threshold = e68.threshold), void 0 !== e68.visualization && (this._visualization = e68.visualization), void 0 !== e68.bandSize && (this._bandSize = e68.bandSize), void 0 !== e68.bandsEnabled && (this._bandsEnabled = e68.bandsEnabled);
  }
  get opacityFromElevation() {
    return this._passParameters.opacityFromElevation;
  }
  set opacityFromElevation(e68) {
    this._passParameters.opacityFromElevation !== e68 && (this._passParameters.opacityFromElevation = e68, this.notifyChange("opacityFromElevation"));
  }
  get _showVisualization() {
    return this._enabled && this._data.computedSamples > 0 && this.opacityFromElevation > p47;
  }
  get _threshold() {
    return this._passParameters.threshold;
  }
  set _threshold(e68) {
    this._threshold !== e68 && (this._passParameters.threshold = e68, this._requestRenderIfRunning());
  }
  get _visualization() {
    return this._techniqueConfig.visualization;
  }
  set _visualization(e68) {
    e68 !== this._visualization && (this._techniqueConfig.visualization = e68, this._techniqueRepository.release(this._technique), this._technique = null, this._requestRenderIfRunning());
  }
  get _bandSize() {
    return this._passParameters.bandSize;
  }
  set _bandSize(e68) {
    e68 !== this._bandSize && (this._passParameters.bandSize = e68, this._requestRenderIfRunning());
  }
  get _bandsEnabled() {
    return this._techniqueConfig.bandsEnabled;
  }
  set _bandsEnabled(e68) {
    e68 !== this._bandsEnabled && (this._techniqueConfig.bandsEnabled = e68, this._techniqueRepository.release(this._technique), this._technique = null, this._requestRenderIfRunning());
  }
  _setColor(e68) {
    const t71 = this._passParameters.color;
    E4(e68, t71) || (a9(this._passParameters.color, e68), this._requestRenderIfRunning());
  }
  _setEnabled(e68) {
    e68 !== this._enabled && (e68 ? this._start() : this._stop());
  }
  _requestRenderIfRunning() {
    this._enabled && this._requestRender();
  }
  _start() {
    this._enabled = true, this._requestRender();
  }
  _stop() {
    this._enabled = false, this._requestRender();
  }
};
e([y2()], m44.prototype, "opacityFromElevation", null), m44 = e([a4("esri.views.3d.webgl-engine.lib.ShadowCastRenderer")], m44);

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/ShadowCastAccumulateTechnique.js
var d42 = class _d extends r15 {
  constructor(e68) {
    super(e68, new s67(), () => this.destroy());
  }
  initializeProgram(e68) {
    return new r16(e68.rctx, _d.shader.get().build(this.configuration), O9);
  }
  initializePipeline() {
    return S7({ blending: l11(R2.ONE, R2.ONE, R2.ONE, R2.ONE), colorWrite: _8, depthTest: null, depthWrite: null });
  }
  get primitiveType() {
    return E7.TRIANGLE_STRIP;
  }
};
d42.shader = new t17(f22, () => import("./ShadowCastAccumulate.glsl-H3W7DLCA.js"));

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/ShadowAccumulator.js
var M19 = class extends S3 {
  constructor(e68, t71, i47, r55, s71, o58) {
    super({}), this.fbos = e68, this._stage = i47, this._prepareForShadowMapPass = r55, this._renderToShadowMap = s71, this._requestRender = o58, this._progress = 0, this._sampleCount = 0, this._passParameters = new h10(), this._cachedLightDirections = [], this._depthRange = u42, this._previewing = false, this._cameraForcedForScreenshot = false, this._shadowAccumulatorKey = "shadowAccumulator", this._rctx = e68.rctx, this._bindParameters = new m18(new X5(e68, i47.viewingMode), null), this._bindParameters.shadowMap.enabled = true, this._vao = i18(this._rctx), this._accumulationRenderer = new m44(t71, this._rctx, this, o58);
    const c44 = this._stage.view.resourceController.scheduler;
    this.addHandles([c44.registerTask(I5.SHADOW_ACCUMULATOR, this), d3(() => i47.renderView, (e69) => {
      this.removeHandles(L23), null != e69 && this.addHandles(e69.events.on("force-camera-for-screenshot", () => this._cameraForcedForScreenshot = true), L23);
    }, A3), d3(() => this._previewing, () => this._requestRenderIfEnabled(), C)], this._shadowAccumulatorKey);
  }
  normalizeCtorArgs() {
    return {};
  }
  dispose() {
    this._disable(), this.removeHandles(this._shadowAccumulatorKey), this._accumulationRenderer = r2(this._accumulationRenderer), this._bindParameters.shadowMap.dispose(), this._fbo = r2(this._fbo), this._vao = r2(this._vao), this._accumulationTechniqueCached = t2(this._accumulationTechniqueCached), this._cachedLightDirections.length = 0, this._sampleCount = 0;
  }
  get computedSamples() {
    return this._progress;
  }
  get shadowCastTexture() {
    var _a;
    return (_a = this._fbo) == null ? void 0 : _a.colorTexture;
  }
  get isAccumulating() {
    return this._isPreviewing || this._isRefining;
  }
  get _accumulationTechnique() {
    if (null == this._accumulationTechniqueCached) {
      const e68 = { rctx: this._rctx, viewingMode: this._stage.viewingMode };
      this._accumulationTechniqueCached = new d42(e68);
    }
    return this._accumulationTechniqueCached;
  }
  get _isRefining() {
    return this._isActive && !this._isDoneAccumulating && !this._previewing;
  }
  get _isPreviewing() {
    return this._isActive && this._previewing;
  }
  get _isActive() {
    return null != this._fbo && this._sampleCount > 0;
  }
  get canAccumulate() {
    var _a;
    return null !== ((_a = this._bindParameters.linearDepth) == null ? void 0 : _a.getTexture()) && this._depthRange !== u42 && this._opacityFromElevation > p47;
  }
  get _isDoneAccumulating() {
    return this._progress >= this._sampleCount;
  }
  get _lightDirections() {
    return this._cachedLightDirections;
  }
  set _lightDirections(e68) {
    const t71 = this._cachedLightDirections;
    if (h(t71, e68, H))
      return;
    const r55 = Math.min(m24, e68.length);
    t71.length = r55, this._sampleCount = r55;
    for (let i47 = 0; i47 < r55; ++i47)
      t71[i47] = r5(t71[i47] ?? n7(), e68[i47]);
    this._invalidate();
  }
  get _opacityFromElevation() {
    return this._accumulationRenderer.opacityFromElevation;
  }
  set _opacityFromElevation(e68) {
    this._accumulationRenderer.opacityFromElevation = e68;
  }
  get running() {
    return this._isRefining && this.canAccumulate && this._progress > 0;
  }
  runTask(e68) {
    for (this._prepareForShadowMapPass(this._bindParameters); !e68.done && !this._isDoneAccumulating; )
      this._accumulateShadow(), e68.madeProgress();
    this._requestRender();
  }
  renderAccumulation(e68, t71, i47, r55) {
    if (this._depthRange = t71, this._updateCamera(i47), this._bindParameters.contentCamera = r55, this._bindParameters.linearDepth = e68, this._passParameters.origin = this._bindParameters.camera.center, this.notifyChange("canAccumulate"), !this.isAccumulating || !this.canAccumulate)
      return;
    (this._previewing || 0 === this._progress || this._cameraForcedForScreenshot) && this._clear();
    const s71 = this._cameraForcedForScreenshot ? this._sampleCount : Math.min(U22, this._sampleCount - this._progress);
    for (let o58 = 0; o58 < s71; ++o58)
      this._accumulateShadow();
    this._cameraForcedForScreenshot = false, this._requestRender();
  }
  render(e68) {
    this._accumulationRenderer.render(e68);
  }
  setOptions(e68) {
    if (void 0 !== e68.enabled) {
      const t71 = null != this._fbo;
      e68.enabled !== t71 && (e68.enabled ? this._enable() : this._disable());
    }
    void 0 !== e68.previewing && (this._previewing = e68.previewing), void 0 !== e68.lightDirections && (this._lightDirections = e68.lightDirections), this._accumulationRenderer.setOptions(e68);
  }
  readAccumulatedShadow(e68, t71) {
    return !this._isActive || !this._fbo || this._progress < 1 || e68 < 0 || e68 >= this._fbo.width || t71 < 0 || t71 >= this._fbo.height ? 0 : (this._fbo.readPixels(e68, t71, 1, 1, G4.RED, U4.UNSIGNED_BYTE, O31), O31[0] / this._progress);
  }
  _enable() {
    this._progress = 0;
    const e68 = new e22();
    e68.pixelFormat = G4.RED, e68.internalFormat = P5.R8, e68.wrapMode = D2.CLAMP_TO_EDGE, this._fbo = new x7(this._rctx, e68), this._requestRender();
  }
  _disable() {
    this._fbo = r2(this._fbo), this._requestRender();
  }
  _invalidate() {
    this._progress = 0, this._requestRenderIfEnabled();
  }
  _clear() {
    this._rctx.bindFramebuffer(this._fbo), this._rctx.setClearColor(0, 0, 0, 0), this._rctx.clear(_6.COLOR_BUFFER_BIT), this._progress = 0;
  }
  _accumulateShadow() {
    this._renderToShadowMap(this._bindParameters, this._lightDirections[this._progress++], this._depthRange);
    const e68 = this._accumulationTechnique;
    this._rctx.bindFramebuffer(this._fbo), this._rctx.bindTechnique(e68, this._bindParameters, this._passParameters), this._rctx.bindVAO(this._vao), this._rctx.drawArrays(e68.primitiveType, 0, i8(this._vao, "geometry"));
  }
  _updateCamera(e68) {
    const t71 = this._fbo;
    if (null == t71)
      return;
    const i47 = this._bindParameters.camera;
    e68.equals(i47) || i47.copyFrom(e68), t71.resize(e68.fullWidth, e68.fullHeight), this._opacityFromElevation = 1 - p4(u44, c41, e68.relativeElevation);
  }
  _requestRenderIfEnabled() {
    this._fbo && this._requestRender();
  }
  get test() {
    const e68 = this;
    return { lightDirections: this._lightDirections, get isDone() {
      return e68._isDoneAccumulating;
    }, get isActive() {
      return e68._isActive;
    } };
  }
};
e([y2()], M19.prototype, "_progress", void 0), e([y2()], M19.prototype, "_sampleCount", void 0), e([y2()], M19.prototype, "_fbo", void 0), e([y2()], M19.prototype, "_depthRange", void 0), e([y2()], M19.prototype, "_previewing", void 0), e([y2()], M19.prototype, "_accumulationRenderer", void 0), e([y2()], M19.prototype, "_isRefining", null), e([y2()], M19.prototype, "_isActive", null), e([y2()], M19.prototype, "canAccumulate", null), e([y2()], M19.prototype, "_isDoneAccumulating", null), e([y2()], M19.prototype, "_opacityFromElevation", null), e([y2()], M19.prototype, "running", null), M19 = e([a4("esri.views.3d.webgl-engine.lib.ShadowAccumulator")], M19);
var U22 = 6;
var L23 = "renderView";
var O31 = new Uint8Array(1);

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/SliceHelper.js
var t68 = W2();
var n59 = class {
  constructor() {
    this._plane = W2();
  }
  get isEnabled() {
    return !ps(this.plane, t68);
  }
  get plane() {
    return this._plane;
  }
  set plane(e68) {
    Z2(e68 || t68, this._plane);
  }
};

// node_modules/@arcgis/core/views/webgl/TimerPool.js
function e65(t71, e68) {
  const u46 = t71.capabilities.disjointTimerQuery;
  return null == u46 ? null : new r54(u46, e68);
}
var r54 = class {
  constructor(t71, e68) {
    this._timer = t71, this._queryPool = new Array(), this._queryResults = /* @__PURE__ */ new Map(), this._currentQuery = null, e68.forEach((t72) => {
      const e69 = this._timer.createQuery(), r55 = this._timer.createQuery();
      this._queryPool.push(e69, r55), this._queryResults.set(t72, null);
    });
  }
  start() {
    E12 || (this._currentQuery = this._queryPool.pop(), null != this._currentQuery && (this._timer.disjoint(), this._timer.beginTimeElapsed(this._currentQuery)));
  }
  stop(t71) {
    if (this._timer.disjoint() || null == this._currentQuery || !this._queryResults.has(t71))
      return this.abort(), null;
    this._timer.endTimeElapsed();
    const e68 = this._queryResults.get(t71);
    if (null == e68)
      return this._queryResults.set(t71, this._currentQuery), this._currentQuery = null, null;
    if (!this._timer.resultAvailable(e68))
      return this._queryPool.unshift(this._currentQuery), this._currentQuery = null, null;
    const r55 = this._timer.getResult(e68) / 1e6;
    return this._queryPool.unshift(e68), this._queryResults.set(t71, this._currentQuery), this._currentQuery = null, r55;
  }
  abort() {
    null != this._currentQuery && (this._timer.deleteQuery(this._currentQuery), this._queryPool.unshift(this._timer.createQuery()), this._currentQuery = null);
  }
  dispose() {
    null != this._currentQuery && this._timer.deleteQuery(this._currentQuery), this._queryPool.forEach((t71) => {
      this._timer.deleteQuery(t71);
    }), this._queryResults.forEach((t71) => {
      null != t71 && this._timer.deleteQuery(t71);
    });
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/statistics/RendererPerformanceInfo.js
var a60;
!function(e68) {
  e68.OVERLAY = "overlay", e68.PREPARE = "prepare", e68.SHADOW_MAP = "shadow map", e68.LINEAR_DEPTH = "linear depth", e68.ACCUMULATED_SHADOWS = "accumulated shadows", e68.OBJECT_AND_LAYER_ID_COLOR = "object/layer id color", e68.NORMALS = "normals", e68.SSAO = "SSAO", e68.OPAQUE = "opaque", e68.OPAQUE_EDGES = "opaque edges", e68.VOXEL = "voxel", e68.TRANSPARENT = "transparent", e68.TRANSPARENT_EDGES = "transparent edges", e68.HUD_VISIBILITY = "HUD visibility", e68.TRANSPARENT_TERRAIN = "transparent terrain", e68.ENVIRONMENT = "environment", e68.LASER_LINES = "laser lines", e68.OCCLUDED = "occluded", e68.ANTIALIASING = "antialiasing", e68.HIGHLIGHTS = "highlights", e68.HUD = "HUD", e68.HUD_OCCLUDED = "HUD occluded", e68.FINISH = "finish";
}(a60 || (a60 = {}));
var s70 = "Total";
var o55 = class {
  constructor(e68) {
    this._rctx = e68, this._startTimeStampCPU = n3(0), this._lastTimeStampCPU = n3(0), this._totalCPUTime = new s2(s70), this._cpuTimeSamplers = new Map(Object.values(a60).map((e69) => [e69, new s2(e69)])), this._enableGPUTimer = 0, this._totalGPUTime = new s2("GPU"), this._gpuTimeSamplers = new Map(Object.values(a60).map((e69) => [e69, new s2(e69)])), this._totalTime = n3(0), this._totalFrameCount = 0;
  }
  get totalCPUTimeSampler() {
    return this._totalCPUTime;
  }
  get cpuTimeSamplers() {
    return Array.from(this._cpuTimeSamplers.values());
  }
  get totalGPUTimeSampler() {
    return this._totalGPUTime;
  }
  get gpuTimeSamplers() {
    return Array.from(this._gpuTimeSamplers.values());
  }
  get gpuSamplingEnabled() {
    return null != this._gpuTimerPool;
  }
  get totalTime() {
    return this._totalTime;
  }
  get totalFrameCount() {
    return this._totalFrameCount;
  }
  get elapsedTime() {
    return n3(performance.now() - this._startTimeStampCPU);
  }
  enableGPUPerformanceInfo() {
    if (null == this._gpuTimerPool) {
      const e68 = [...Object.values(a60), s70];
      this._gpuTimerPool = e65(this._rctx, e68);
    }
    if (null == this._gpuTimerPool)
      return { hasGPUTimerSupport: false, remove: () => {
      } };
    ++this._enableGPUTimer;
    let t71 = false;
    return { hasGPUTimerSupport: true, remove: () => {
      t71 || (t71 = true, --this._enableGPUTimer, 0 === this._enableGPUTimer && (this._gpuTimerPool = r2(this._gpuTimerPool)));
    } };
  }
  startFrame() {
    this._startTimeStampCPU = this._lastTimeStampCPU = n3(performance.now()), this._gpuTimerPool && this._gpuTimerPool.start();
  }
  advance(e68) {
    const t71 = n3(performance.now());
    if (this._cpuTimeSamplers.get(e68).record(t71 - this._lastTimeStampCPU), this._lastTimeStampCPU = t71, this._gpuTimerPool) {
      const t72 = this._gpuTimerPool.stop(e68);
      this._gpuTimeSamplers.get(e68).record(t72), this._gpuTimerPool.start();
    }
  }
  finishFrame() {
    if (this._gpuTimerPool) {
      const e69 = this._gpuTimerPool.stop(a60.FINISH);
      this._gpuTimeSamplers.get(a60.FINISH).record(e69), this._rctx.gl.flush();
    }
    const e68 = n3(performance.now() - this._startTimeStampCPU);
    this._totalTime = n3(this._totalTime + e68), this._totalCPUTime.record(e68), this._gpuTimerPool && this._totalGPUTime.record(this.gpuTimeSamplers.reduce((e69, t71) => e69 + (t71.last || 0), 0)), ++this._totalFrameCount;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/Renderer.js
var Ee2 = class {
  constructor(e68, r55, t71, i47, a61, n61, h36, o58) {
    this._stage = e68, this._techniqueRepository = i47, this._rctx = a61, this._compositingHelper = n61, this._magnifierHelper = h36, this._requestRender = o58, this._pluginsHas = { hudElements: false, water: false }, this._hasOverlayWater = false, this.renderOverlay = (e69) => {
    }, this._isRendering = false, this._backgroundColor = r6(0, 0, 0, 1), this._sliceHelper = new n59(), this._state = r12(I4.IDLE), this._highQualityTransparencyEnabled = true, this._terrainTransparency = he4.Opaque, this._ssrEnabled = false, this._hasAnimations = false, this._animationTimestep = new e64(), this._loadEdgeViewTask = null, this._edgeViewCallbacks = [], this._reprojectionMatrixVersion = r12(0), this._renderHiddenTransparentEdges = () => {
    }, this._pluginInput = /* @__PURE__ */ new Map(), this._releaseNormals = (e69) => {
      var _a;
      ((_a = e69.find(({ name: e70 }) => "normals" === e70)) == null ? void 0 : _a.release()) && this._pluginInput.delete("normals");
    }, this._debugLinearDepth = false, this.fboCache = new C27(a61), this._renderStateFeatures = r12(t22(!has("disable-feature:high-quality-idle"), e68.view.qualityProfile)), this._offscreen = new l44(this.fboCache, this._compositingHelper), this.performanceInfo = new o55(this._rctx), this._shadowMap = new X5(this.fboCache, e68.viewingMode), this._highlight = new D18({ view: e68.view }), this._shadowHighlight = new P19({ view: e68.view, viewingMode: e68.viewingMode }), this._shadowAccumulator = new M19(this.fboCache, i47, e68, (e69) => {
      const r56 = this.shadowsEnabled;
      this._shadowMap.enabled = true, this._ensureBindParametersCamera(e69.camera, e69.contentCamera), this._plugins.prepareRender(), this._shadowMap.enabled = r56;
    }, (e69, r56, t72) => {
      const s71 = this._stage.view.qualitySettings.maximumPixelRatio;
      e69.shadowMap.start(e69.camera, r56, t72, true, s71), this._renderShadowCascades(o10.Shadow, e69.shadowMap), e69.shadowMap.finish(), e69.camera.setGLViewport(this._rctx), this._ensureBindParametersCamera(e69.camera, e69.contentCamera);
    }, o58), this._ssao = new C6({ view: this._stage.view }), this._renderContext = new n32(this._rctx, this._offscreen, this._shadowMap, this._sliceHelper), this._nodes = new r51(this._renderContext), this._plugins = new c40({ renderContext: this._renderContext, techniqueRepository: i47, textureRepository: t71, materialRepository: r55, requestRender: o58, controller: e68, fbos: this.fboCache, isFeatureEnabled: (e69) => this.isFeatureEnabled(e69) }), this.renderPassManager = new j24(), this._plugins.add(this.renderPassManager), this._smaa = new A31({ view: this._stage.view }), this._plugins.add(this._smaa), this._blit = new m41({ opacity: 1, alphaMode: a52.None }), this._plugins.add(this._blit), this._plugins.add(this._ssao), this._plugins.add(this._highlight), this._plugins.add(this._shadowHighlight), this._handles = [d3(() => this._stage.view.state.camera, () => o58(), A3), d3(() => t20.EDGES_SHOW_HIDDEN_TRANSPARENT_EDGES, (e69) => {
      this._renderHiddenTransparentEdges = e69 ? () => this._renderEdges(A5.TRANSPARENT) : () => {
      }, o58();
    }, P), d3(() => {
      var _a;
      return (_a = this._stage.view.environment.background) == null ? void 0 : _a.color;
    }, (e69) => {
      const r56 = e69 ? E5(e69) : _4;
      s11(this._backgroundColor, r56[0] * r56[3], r56[1] * r56[3], r56[2] * r56[3], r56[3]), o58();
    }, A3)];
  }
  destroy() {
    this._handles.forEach((e68) => e68.remove()), this._gpuTimerHandle = l(this._gpuTimerHandle), this._nodes.destroy(), this._offscreen.dispose(), this._shadowMap.dispose(), this._highlight.dispose(), this._shadowAccumulator.dispose(), this._loadEdgeViewTask = e2(this._loadEdgeViewTask), this._edgeView = u(this._edgeView), this.renderPassManager.dispose(), this._releaseFBOs(), this._disposeOffscreenBuffers(), this.fboCache.destroy(), this._plugins.destroy(), o12.prune();
  }
  get _bindParameters() {
    return this._renderContext.bindParameters;
  }
  updateRenderFeatures(e68 = null, r55 = !has("disable-feature:high-quality-idle")) {
    this._renderStateFeatures.value = t22(r55, e68), this._plugins.renderFeatureChanged(), this._requestRender();
  }
  isFeatureEnabled(e68, r55 = this._state.value) {
    return this._renderStateFeatures.value.get(r55, e68) ?? false;
  }
  setFeatureEnabled(e68, r55, t71) {
    this._renderStateFeatures.mutate((s71) => s71.set(r55, e68, t71)), this._requestRender();
  }
  get _highQualityTransparency() {
    return this._highQualityTransparencyEnabled || this.isFeatureEnabled(o19.HighQualityTransparency);
  }
  get hasReflections() {
    return (this._pluginsHas.water || this._hasOverlayWater) && (this._ssrEnabled || this.isFeatureEnabled(o19.WaterReflection));
  }
  get hasDecorations() {
    return this._plugins.hasDecorations;
  }
  get hasHighlights() {
    return this._plugins.produces(A6.OPAQUE_MATERIAL, o10.Highlight) || this._plugins.produces(A6.TRANSPARENT_MATERIAL, o10.Highlight) || this._plugins.produces(A6.DRAPED_MATERIAL, o10.Highlight);
  }
  get _magnifierEnabled() {
    return this._bindParameters.decorations === i6.ON && this._magnifierHelper.enabled;
  }
  get fullResolutionAtmosphere() {
    return this._stage.view.qualitySettings.highResolutionAtmosphere || this.isFeatureEnabled(o19.HighResolutionAtmosphere);
  }
  _releaseFBOs() {
    this._bindParameters.ssr.lastFrameColor = t2(this._bindParameters.ssr.lastFrameColor), this._bindParameters.multipassTerrain.linearDepth = t2(this._bindParameters.multipassTerrain.linearDepth), this._bindParameters.multipassGeometry.linearDepth = t2(this._bindParameters.multipassGeometry.linearDepth);
  }
  _disposeOffscreenBuffers() {
    this._offscreen.dispose(), this._disposeBindBuffers();
  }
  _disposeBindBuffers() {
    this._shadowMap.disposeOffscreenBuffers(), this._bindParameters.linearDepth = t2(this._bindParameters.linearDepth), this._bindParameters.hudVisibility = t2(this._bindParameters.hudVisibility);
  }
  get updating() {
    return this._smaa.updating || null != this._edgeView && this._edgeView.updating || this._shadowAccumulator.running || this._plugins.updating || !this.isCameraFinal;
  }
  loadEdgeView() {
    return this._loadEdgeViewTask || (this._loadEdgeViewTask = d2(async (e68) => {
      const { EdgeView: r55 } = await import("./EdgeView-DWI2WGCB.js");
      s3(e68);
      const t71 = this._edgeView = new r55({ rctx: this._rctx, renderSR: this._stage.view.renderSpatialReference, viewingMode: this._stage.viewingMode, techniqueRepository: this._techniqueRepository, setNeedsRender: () => this._requestRender(), schedule: Ie2(this._stage.view.resourceController) });
      return this._handles.push(d3(() => t71.updating, () => this._requestRender(), C)), this._requestRender(), this._edgeViewCallbacks.forEach((e69) => e69(t71)), this._edgeViewCallbacks.length = 0, t71;
    })), this._loadEdgeViewTask.promise;
  }
  withEdgeView(e68) {
    this.loadEdgeView(), null == this._edgeView ? this._edgeViewCallbacks.push(e68) : e68(this._edgeView);
  }
  get edgeView() {
    return this._edgeView;
  }
  get isCameraFinal() {
    return this._reprojectionMatrixVersion.value >= 0 && C2(this._bindParameters.ssr.reprojectionMatrix, o8);
  }
  set _reprojectionMatrix(e68) {
    a(this._bindParameters.ssr.reprojectionMatrix, e68) && this._reprojectionMatrixVersion.value++;
  }
  get shadowsEnabled() {
    var _a;
    return !!((_a = this._shadowMap) == null ? void 0 : _a.enabled);
  }
  setParameters(e68) {
    var _a;
    const { _shadowMap: r55, _bindParameters: t71 } = this;
    if (void 0 !== ((_a = e68.qualitySettings) == null ? void 0 : _a.reflections) && this._ssrEnabled !== e68.qualitySettings.reflections && (this._ssrEnabled = e68.qualitySettings.reflections, this._requestRender()), void 0 !== e68.shadowMap && this._shadowMap.enabled !== e68.shadowMap && (this._shadowMap.enabled = e68.shadowMap, this._requestRender()), void 0 !== e68.shadowMapMaxCascades && r55.maxCascades !== e68.shadowMapMaxCascades && (r55.maxCascades = e68.shadowMapMaxCascades, this._requestRender()), null != e68.environment) {
      null != e68.environment.weather && (this._bindParameters.weather = e68.environment.weather, this._bindParameters.weatherVisible = !!e68.weatherVisible);
      const r56 = "virtual" !== e68.environment.lighting.type;
      t71.enableFillLights !== r56 && (t71.enableFillLights = r56, this._requestRender());
    }
    void 0 !== e68.highQualityTransparency && this._highQualityTransparencyEnabled !== e68.highQualityTransparency && (this._highQualityTransparencyEnabled = e68.highQualityTransparency, this._requestRender()), void 0 !== e68.hasOverlayWater && this._hasOverlayWater !== e68.hasOverlayWater && (this._hasOverlayWater = e68.hasOverlayWater, this._requestRender()), void 0 !== e68.slicePlane && this._sliceHelper.plane !== e68.slicePlane && (this._sliceHelper.plane = e68.slicePlane, this._requestRender()), void 0 !== e68.terrainTransparency && this._terrainTransparency !== e68.terrainTransparency && (this._terrainTransparency = e68.terrainTransparency, this._requestRender()), void 0 !== e68.shadowCastOptions && this._shadowAccumulator.setOptions(e68.shadowCastOptions);
  }
  get hasSlicePlane() {
    return !!this._sliceHelper.plane;
  }
  get plugins() {
    return this._plugins;
  }
  get _hasOITSupport() {
    return this._rctx.driverTest.floatBufferBlend.result;
  }
  get _oitEnabled() {
    return this._highQualityTransparency && this._hasOITSupport;
  }
  modify(e68, r55) {
    this._isRendering && console.warn("Renderer.modify called while rendering");
    const { adds: t71, removes: s71, updates: i47 } = e68;
    if (0 === t71.length && 0 === s71.length && 0 === i47.length)
      return;
    const a61 = n28(e68);
    let n61 = false;
    a61.forEach((t72, s72) => {
      if (r55.done)
        return;
      let i48 = this._plugins.getMaterialRenderer(s72);
      if (null == i48 && t72.adds.length > 0) {
        const e69 = new M5({ material: s72 });
        e69.initializeRenderContext(this._plugins._context), i48 = e69, this._plugins.add(i48);
      }
      i48 && (i48.modify(t72), 0 === i48.numGeometries && (n61 = true)), t72.removes.forEach((r56) => e68.removes.removeUnordered(r56)), t72.adds.forEach((r56) => e68.adds.removeUnordered(r56)), t72.updates.forEach((r56) => e68.updates.removeUnordered(r56)), r55.madeProgress();
    }), n61 && this._plugins.removeEmptyMaterialRenderers(), this._updateHasFlags(), this._requestRender();
  }
  _updateHasFlags() {
    const has2 = this._pluginsHas;
    has2.hudElements = this._plugins.produces(A6.LINE_CALLOUTS_HUD_DEPTH) || this._plugins.produces(A6.HUD_MATERIAL) || this._plugins.produces(A6.LABEL_MATERIAL), has2.water = this._plugins.produces(A6.DRAPED_WATER, o10.Normal), this._bindParameters.hasOccludees = this._plugins.hasOccludees;
  }
  updateAnimation(e68) {
    const r55 = this._hasAnimations;
    return this._hasAnimations = this._plugins.updateAnimation(e68), this._hasAnimations = this._nodes.updateAnimation() || this._hasAnimations, this._hasAnimations !== r55 && (this._gpuTimerHandle = r55 ? l(this._gpuTimerHandle) : this.performanceInfo.enableGPUPerformanceInfo()), this._hasAnimations;
  }
  get animationTimestep() {
    return this._animationTimestep.value;
  }
  get animationTimeDilation() {
    return this._animationTimestep.timeDilation;
  }
  resetAnimation() {
    this._animationTimestep.clear();
  }
  tick() {
    this.fboCache.clean();
  }
  render(e68, r55, t71 = r25.Default, s71 = i6.ON) {
    this._isRendering = true, this.performanceInfo.startFrame(), this.fboCache.frameStart(), this._disposeBindBuffers();
    const i47 = this._offscreen, { camera: a61, contentCamera: n61, mode: o58, alignPixelEnabled: d44 } = e68;
    this._state.value = o58, this._bindParameters.overlay = this.renderOverlay(r55), this.performanceInfo.advance(a60.OVERLAY), this._renderContext.time = r55, this._bindParameters.transparencyPassType = o16.NONE, this._bindParameters.alignPixelEnabled = d44, this._bindParameters.decorations = s71, this._bindParameters.mainColor = this._bindParameters.mainDepth = null;
    const l45 = W2(this._sliceHelper.plane);
    s71 === i6.OFF && (this._sliceHelper.plane = null), a61.setGLViewport(this._rctx);
    const _26 = i47.initializeFrame(a61, this._backgroundColor, t71);
    this.hasReflections ? this._bindParameters.ssr.lastFrameColor = _26 : _26 == null ? void 0 : _26.release(), this._ensureBindParametersCamera(a61, n61), this._plugins.prepareRender(), this.performanceInfo.advance(a60.PREPARE);
    const p48 = this._computeDepthRange(a61);
    this._renderShadowMap(a61, this._bindParameters.lighting.mainLight.direction, p48), this.performanceInfo.advance(a60.SHADOW_MAP), this._ensureBindParametersCamera(a61, n61);
    const u46 = this._plugins.produces(A6.OPAQUE_TERRAIN) && (this._terrainTransparency === he4.Semitransparent || this._terrainTransparency === he4.TransparentWithDraped), c44 = this._highQualityTransparency && u46, m46 = this._plugins.produces(A6.TRANSPARENT_MATERIAL, o10.Color);
    this._prepareShaders(c44, m46), this._pluginInput.set("normals", this._renderNormals()), this.performanceInfo.advance(a60.NORMALS), this._renderSSAO(), this.performanceInfo.advance(a60.SSAO), this._renderLinearDepth(), this.performanceInfo.advance(a60.LINEAR_DEPTH), this._renderShadowAccumulation(p48, a61, n61), this.performanceInfo.advance(a60.ACCUMULATED_SHADOWS), this._ensureBindParametersSSR(r55), this._renderContext.output = o10.Color, i47.bindFbo(), this._bindParameters.mainColor = i47.colorTexture, this._bindParameters.mainDepth = i47.depthTexture, this._renderOpaqueGeometry(), this._offscreen.updateColor((e69) => this._invokeRenderNodes(e69), "opaque-color"), this._plugins.render(A6.ENVIRONMENT_OPAQUE), this.performanceInfo.advance(a60.OPAQUE), this.fboCache.debugCallback && this.fboCache.debugCallback("opaque-color", this._offscreen.color.fbo), this._renderTerrainLinearDepth(c44), this._setMultipassTerrain(c44), this._renderEdges(A5.OPAQUE), this.performanceInfo.advance(a60.OPAQUE_EDGES), i47.bindFbo(), this._plugins.render(A6.VOXEL), this.performanceInfo.advance(a60.VOXEL), this._renderHiddenTransparentEdges(), m46 && (this._oitEnabled ? this._renderOITPass(Ae2.Geometry) : this._renderTransparentMaterial()), this._offscreen.updateColor((e69) => this._invokeRenderNodes(e69), "transparent-color"), this.performanceInfo.advance(a60.TRANSPARENT);
    const g23 = this._renderGeometryLinearDepth(c44);
    this._renderHUDVisibility(g23), c44 || this._plugins.render(A6.LINE_CALLOUTS), this.performanceInfo.advance(a60.HUD_VISIBILITY);
    const f48 = t71 === r25.ObjectAndLayerID ? this._renderObjectAndLayerIdColor() : null;
    this.performanceInfo.advance(a60.OBJECT_AND_LAYER_ID_COLOR), this._renderEdges(A5.TRANSPARENT, g23), g23 == null ? void 0 : g23.release(), this.performanceInfo.advance(a60.TRANSPARENT_EDGES);
    const T21 = u46 ? this._renderTransparentTerrain() : null;
    T21 && this._bindParameters.hudVisibility && (c44 ? this._renderLineCallouts(c15.Occluded) : i47.compositeToHUDVisibility(this._bindParameters, T21.getTexture()), this._renderHUD(c15.Occluded, i47.color), this.performanceInfo.advance(a60.HUD_OCCLUDED)), this.performanceInfo.advance(a60.TRANSPARENT_TERRAIN), this._setTerrainCulling(false), T21 && (i47.compositeToFramebuffer(this._bindParameters, T21.getTexture(), a52.PremultipliedAlpha, 1), T21.release(), c44 && (this._renderEdges(A5.OPAQUE), this.performanceInfo.advance(a60.OPAQUE_EDGES), m46 && (this._oitEnabled ? this._renderOITPass(Ae2.Geometry) : this._renderTransparentMaterial()), this.performanceInfo.advance(a60.TRANSPARENT), this._renderEdges(A5.TRANSPARENT), this.performanceInfo.advance(a60.TRANSPARENT_EDGES))), this._bindParameters.ssao = t2(this._bindParameters.ssao), c44 && this._renderLineCallouts(c15.NotOccluded), this._setMultipassEnabled(false), this._shadowAccumulator.render(this._bindParameters), i47.bindFbo(), this._plugins.render(A6.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL), this._plugins.render(A6.ENVIRONMENT_TRANSPARENT), this.performanceInfo.advance(a60.ENVIRONMENT), this._renderLaserlines(), this.performanceInfo.advance(a60.LASER_LINES), this._renderOccluded(), this.performanceInfo.advance(a60.OCCLUDED);
    let E38 = this._renderHighlightPrepass();
    E38 && this._renderShadowHighlights(E38, this._bindParameters);
    const A32 = this._magnifierEnabled && t71 === r25.Default ? this.fboCache.acquire(this._offscreen.width, this._offscreen.height, "magnifier") : null, b22 = t71 !== r25.Default ? this.fboCache.acquire(this._offscreen.width, this._offscreen.height, "screenshot") : null, R18 = this._renderComposite(A32 ?? b22, E38) ?? b22;
    return this.performanceInfo.advance(a60.ANTIALIASING), this._renderHUD(c15.NotOccluded, R18), this.performanceInfo.advance(a60.HUD), E38 && (this._renderHighlights(R18, E38, this._bindParameters), E38 = t2(E38)), this.performanceInfo.advance(a60.HIGHLIGHTS), this._magnifierEnabled && this._magnifierHelper.render(this._rctx, this._bindParameters), R18 !== b22 && (this._rctx.bindFramebuffer(b22 == null ? void 0 : b22.fbo), this._compositingHelper.composite(this._bindParameters, A32 == null ? void 0 : A32.getTexture(), a52.None)), t71 === r25.Default && (A32 == null ? void 0 : A32.release()), this.onPostRender && this.onPostRender(), this._releaseFBOs(), this._offscreen.releaseBuffers(), this._renderContext.lastFrameCamera.copyFrom(this._bindParameters.camera), this._sliceHelper.plane = l45, this._isRendering = false, this.fboCache.frameEnd(), this.performanceInfo.finishFrame(), t71 !== r25.Default && (this._releaseFBOs(), this._disposeOffscreenBuffers()), { screen: b22, oid: f48 };
  }
  _prepareShaders(e68, r55) {
    this._renderContext.output = o10.Color, this._prepareOpaqueGeometry(), this._setMultipassTerrain(e68), this._plugins.prepare(A6.TRANSPARENT_TERRAIN), this._setMultipassTerrain(false), e68 || this._plugins.prepare(A6.LINE_CALLOUTS), r55 && this._prepareTransparencySlots(), this._plugins.prepare(A6.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL), this._plugins.prepare(A6.ENVIRONMENT_TRANSPARENT), this._plugins.prepare(A6.LASERLINES), this._rctx.gl.flush();
  }
  _renderObjectAndLayerIdColor() {
    if (!has("enable-feature:objectAndLayerId-rendering"))
      return;
    const e68 = this._renderContext.output, r55 = this.fboCache.acquire(this._offscreen.width, this._offscreen.height, "oid");
    return r55.acquireDepth(E11.DEPTH_STENCIL_TEXTURE), this._rctx.bindFramebuffer(r55.fbo), this.fboCache.rctx.clearFramebuffer([0, 0, 0, 0], true, true), this._renderAllGeometry(o10.ObjectAndLayerIdColor), this._rctx.bindFramebuffer(r55.fbo), this.fboCache.rctx.clearFramebuffer(void 0, true, true), this._bindParameters.hudRenderStyle = c15.NotOccluded, this._plugins.render(A6.HUD_MATERIAL), this._renderContext.output = e68, r55;
  }
  finish(e68) {
    this._hasAnimations || this._animationTimestep.clear();
    const r55 = this.performanceInfo.gpuSamplingEnabled, t71 = e68 === O7.BACKGROUND;
    if (t71 || r55) {
      const e69 = t71 ? this.performanceInfo.elapsedTime : 0, s71 = r55 ? this.performanceInfo.totalGPUTimeSampler.last : this._rctx.gl.getError(), i47 = Math.max(e69, s71);
      this._animationTimestep.frame(i47, t71);
    }
  }
  readDepthPixels(e68, r55, t71) {
    var _a;
    const s71 = (_a = this._bindParameters.linearDepth) == null ? void 0 : _a.fbo;
    if (s71 == null ? void 0 : s71.colorTexture)
      return void s71.readPixels(r55[0], r55[1], r55[2], r55[3], G4.RGBA, U4.UNSIGNED_BYTE, t71);
    const i47 = this.fboCache.acquire(this._offscreen.width, this._offscreen.height, "depth").acquireDepth(E11.DEPTH16_BUFFER);
    this._rctx.bindFramebuffer(i47.fbo), this._ensureBindParametersCamera(e68, e68), this._bindParameters.camera.setGLViewport(this._rctx), this._rctx.setClearColor(0, 0, 0, 0);
    const a61 = _6.COLOR_BUFFER_BIT | _6.DEPTH_BUFFER_BIT | _6.STENCIL_BUFFER_BIT;
    this._rctx.clear(a61), this._renderAllGeometry(o10.LinearDepth), i47.fbo.readPixels(r55[0], r55[1], r55[2], r55[3], G4.RGBA, U4.UNSIGNED_BYTE, t71), i47.release();
  }
  readHUDVisibility(e68, r55, t71, s71, i47) {
    var _a;
    (_a = this._bindParameters.hudVisibility) == null ? void 0 : _a.fbo.readPixels(e68, r55, t71, s71, G4.RGBA, U4.UNSIGNED_BYTE, i47);
  }
  readAccumulatedShadow(e68) {
    return this._shadowAccumulator.readAccumulatedShadow(e68[0], e68[1]);
  }
  _setMultipassTerrain(e68) {
    this._setMultipassEnabled(e68), this._setTerrainCulling(e68);
  }
  _setMultipassEnabled(e68) {
    this._bindParameters.multipassEnabled = e68;
  }
  _setTerrainCulling(e68) {
    this._bindParameters.multipassTerrain.cullAboveGround = e68;
  }
  _renderEdges(e68, r55) {
    const t71 = this._edgeView;
    if (t71 == null ? void 0 : t71.shouldRender()) {
      const { width: s71, height: i47, depth: a61 } = this._offscreen, n61 = this.fboCache.acquire(s71, i47, "edges"), h36 = () => t71.render(this._bindParameters, e68);
      this._offscreen.renderToTargets(h36, n61, r55 ?? a61, Re2), this._offscreen.compositeToFramebuffer(this._bindParameters, n61.getTexture(), a52.Alpha, 1), n61.release();
    }
  }
  _renderShadowMap(e68, r55, t71) {
    const s71 = this._shadowMap;
    s71.enabled && (s71.start(e68, r55, t71, this.isFeatureEnabled(o19.HighResolutionShadows), this._stage.view.qualitySettings.maximumPixelRatio), this._shadowHighlight.updateParameters(e68, r55), this._needsShadowHighlight ? (this._renderShadowCascades(o10.ShadowHighlight, this._shadowMap), s71.moveSnapshot(P7.Highlight), this._renderShadowCascades(o10.ShadowExcludeHighlight, this._shadowMap), s71.copySnapshot(P7.ExcludeHighlight), this._renderShadowCascades(o10.ShadowHighlight, this._shadowMap)) : this._renderShadowCascades(o10.Shadow), s71.finish(), e68.setGLViewport(this._rctx));
  }
  _renderShadowCascades(e68, r55 = this._shadowMap) {
    for (const t71 of r55.cascades)
      t71.camera.setGLViewport(this._rctx), this._ensureBindParametersCamera(t71.camera, t71.camera), this._renderAllGeometry(e68);
  }
  get _needsLinearDepth() {
    return this._plugins.consumes(o10.LinearDepth) || this.hasReflections || this._needsShadowHighlight || this._needsShadowCast || this._debugLinearDepth;
  }
  _renderLinearDepth() {
    this._needsLinearDepth ? (this._bindParameters.linearDepth = this._offscreen.renderToCachedFBO(this._bindParameters.linearDepth, "linear-depth", () => this._renderAllGeometry(o10.LinearDepth), [0, 0, 0, 0], R3.RGBA, E11.DEPTH_STENCIL_TEXTURE), this._bindParameters.linearDepth.detachDepth()) : this._bindParameters.linearDepth = t2(this._bindParameters.linearDepth);
  }
  _renderTerrainLinearDepth(e68) {
    if (e68) {
      const e69 = this._renderContext.output;
      this._renderContext.output = o10.LinearDepth, this._bindParameters.multipassTerrain.linearDepth = this._offscreen.renderToCachedFBO(this._bindParameters.multipassTerrain.linearDepth, "terrain depth", () => this._renderTransparentTerrain(), [-1e10, -1e10, -1e10, 1]), this._bindParameters.multipassTerrain.linearDepth.detachDepth(), this._renderContext.output = e69;
    } else
      this._bindParameters.multipassTerrain.linearDepth = t2(this._bindParameters.multipassTerrain.linearDepth);
  }
  _renderGeometryLinearDepth(e68) {
    if (!e68)
      return void (this._bindParameters.multipassGeometry.linearDepth = t2(this._bindParameters.multipassGeometry.linearDepth));
    const r55 = this._renderContext.output;
    this._bindParameters.multipassGeometry.linearDepth = this._offscreen.renderToCachedFBO(this._bindParameters.multipassGeometry.linearDepth, "geometry depth", () => this._renderOpaqueGeometryAndTransparentMaterial(o10.LinearDepth), [1, 1, 1, 1]), this._renderContext.output = r55;
    const t71 = this._bindParameters.multipassGeometry.linearDepth.getAttachment(t11);
    return t71 == null ? void 0 : t71.retain(), this._bindParameters.multipassGeometry.linearDepth.detachDepth(), t71;
  }
  get _needsDepthRange() {
    return this._shadowMap.enabled || this._needsShadowCast;
  }
  _computeDepthRange(e68) {
    if (!this._needsDepthRange)
      return u42;
    const r55 = M16(e68, this._plugins.plugins, this._stage.layers);
    return e60(r55, this._plugins.queryDepthRange(e68)), r55.near = Math.max(e68.near, r55.near), r55.far = Math.min(e68.far, r55.far), r55;
  }
  _renderNormals() {
    const e68 = this._plugins.produces(A6.SSAO), r55 = this._nodes.require("normals", "composite-color") + this._nodes.require("normals", "opaque-color") + this._nodes.require("normals", "transparent-color");
    let t71 = (e68 ? 1 : 0) + r55 + (e68 || r55 > 0 ? this._nodes.optional("normals", "composite-color") + this._nodes.optional("normals", "opaque-color") + this._nodes.optional("normals", "transparent-color") : 0);
    if (0 === t71)
      return;
    const s71 = this._offscreen.renderToCachedFBO(null, "normals", () => this._renderGeometryForSSAO(o10.Normal), [0, 0, 0, 0], R3.RGBA, E11.DEPTH_STENCIL_TEXTURE);
    for (; --t71 > 0; )
      s71.retain();
    return s71;
  }
  _renderSSAO() {
    const e68 = this._pluginInput.get("normals");
    this._plugins.produces(A6.SSAO) && e68 && (this._bindParameters.ssao = this._plugins.render(A6.SSAO, this._pluginInput), e68.detachDepth(), e68.release() && this._pluginInput.delete("normals"));
  }
  _renderAllGeometry(e68) {
    this._renderContext.output = e68, this._plugins.prepare(A6.TRANSPARENT_TERRAIN), this._renderOpaqueGeometryAndTransparentMaterial(e68), this._renderTransparentTerrain();
  }
  _renderOpaqueGeometryAndTransparentMaterial(e68) {
    this._renderContext.output = e68, this._plugins.prepare(A6.TRANSPARENT_MATERIAL), this._plugins.prepare(A6.TRANSPARENT_NO_SSAO_DEPTH), this._renderOpaqueGeometry(), this._renderTransparentMaterial();
  }
  _renderGeometryForSSAO(e68) {
    this._renderContext.output = e68, this._plugins.render(A6.INTEGRATED_MESH), this._plugins.render(A6.OPAQUE_TERRAIN), this._plugins.render(A6.OPAQUE_MATERIAL), this._plugins.render(A6.TRANSPARENT_MATERIAL), this._renderTransparentTerrain();
  }
  _prepareOpaqueGeometry() {
    this._plugins.prepare(A6.INTEGRATED_MESH), this._plugins.prepare(A6.OPAQUE_TERRAIN), this._plugins.prepare(A6.OPAQUE_MATERIAL), this._plugins.prepare(A6.OPAQUE_NO_SSAO_DEPTH), this._plugins.prepare(A6.ENVIRONMENT_OPAQUE);
  }
  _renderOpaqueGeometry() {
    this._plugins.render(A6.INTEGRATED_MESH), this._plugins.render(A6.OPAQUE_TERRAIN), this._plugins.render(A6.OPAQUE_MATERIAL), this._plugins.render(A6.OPAQUE_NO_SSAO_DEPTH);
  }
  _renderTransparentMaterial() {
    this._plugins.render(A6.TRANSPARENT_MATERIAL), this._plugins.render(A6.TRANSPARENT_NO_SSAO_DEPTH);
  }
  _renderTransparentTerrain() {
    if (!this._plugins.produces(A6.TRANSPARENT_TERRAIN))
      return;
    const e68 = () => this._plugins.render(A6.TRANSPARENT_TERRAIN, null);
    if (this._renderContext.output !== o10.Color)
      return void e68();
    const { width: r55, height: t71, depth: s71 } = this._offscreen, i47 = this.fboCache.acquire(r55, t71, "transparent terrain");
    return this._offscreen.renderToTargets(e68, i47, s71, [0, 0, 0, 0]), i47;
  }
  _renderHUDVisibility(e68) {
    this._plugins.produces(A6.OCCLUSION_PIXELS) ? (this._bindParameters.hudVisibility = this._offscreen.renderHUDVisibility(this._bindParameters.hudVisibility, () => this._plugins.render(A6.OCCLUSION_PIXELS), e68), this._offscreen.bindFbo()) : this._bindParameters.hudVisibility = t2(this._bindParameters.hudVisibility);
  }
  _renderLineCallouts(e68) {
    if (this._bindParameters.hudRenderStyle = e68, e68 === c15.Occluded) {
      const e69 = () => {
        this._plugins.render(A6.LINE_CALLOUTS);
      }, { width: r55, height: t71, color: s71 } = this._offscreen, i47 = this.fboCache.acquireDepth(E11.DEPTH16_BUFFER, r55, t71, "line callouts");
      this._offscreen.renderToTargets(e69, s71, i47, void 0, true, true), i47.release();
    } else
      this._plugins.render(A6.LINE_CALLOUTS);
  }
  _renderLaserlines() {
    if (this._plugins.render(A6.LASERLINES), this._plugins.produces(A6.LASERLINES_CONTRAST_CONTROL)) {
      const e68 = this._offscreen, { width: r55, height: t71, depth: s71 } = e68, i47 = this.fboCache.acquire(r55, t71, "laser lines"), a61 = () => this._plugins.render(A6.LASERLINES_CONTRAST_CONTROL);
      e68.renderToTargets(a61, i47, s71, Re2), e68.compositeToFramebuffer(this._bindParameters, i47.getTexture(), a52.PremultipliedAlpha, 1), i47.release();
    }
  }
  _renderHUD(e68, r55) {
    if (this._pluginsHas.hudElements)
      if (this._oitEnabled) {
        const t71 = this._renderOITPass(Ae2.HUD, e68);
        this._rctx.bindFramebuffer(r55 == null ? void 0 : r55.fbo), this._compositingHelper.composite(this._bindParameters, t71.getTexture(), a52.PremultipliedAlpha), t71.release();
      } else if (e68 === c15.Occluded) {
        this._renderContext.output = o10.Color;
        const r56 = () => this._renderHUDElements(e68), { width: t71, height: s71, color: i47 } = this._offscreen, a61 = this.fboCache.acquireDepth(E11.DEPTH16_BUFFER, t71, s71, "hud");
        this._offscreen.renderToTargets(r56, i47, a61, void 0, true, true), a61.release();
      } else
        this._renderContext.output = o10.Color, this._rctx.bindFramebuffer(null), r55 == null ? void 0 : r55.acquireDepth(E11.DEPTH16_BUFFER), this._rctx.bindFramebuffer(r55 == null ? void 0 : r55.fbo), this._renderHUDElements(e68), r55 == null ? void 0 : r55.detachDepth();
  }
  _renderHUDElements(e68) {
    this._bindParameters.hudRenderStyle = e68, this._plugins.prepare(A6.LINE_CALLOUTS_HUD_DEPTH), this._plugins.prepare(A6.HUD_MATERIAL), this._plugins.prepare(A6.LABEL_MATERIAL), this._plugins.render(A6.LINE_CALLOUTS_HUD_DEPTH), this._plugins.render(A6.HUD_MATERIAL), this._plugins.render(A6.LABEL_MATERIAL);
  }
  get _needsShadowHighlight() {
    return this._shadowMap.enabled && this._plugins.produces(A6.SHADOW_HIGHLIGHT) && this._plugins.produces(A6.OPAQUE_MATERIAL, o10.ShadowHighlight);
  }
  _renderHighlightPrepass() {
    if (!this.hasHighlights)
      return;
    const e68 = () => {
      this._renderAllGeometry(o10.Highlight), this._rctx.clear(_6.DEPTH_BUFFER_BIT), this._renderHUDElements(c15.Both);
    }, r55 = this._offscreen.renderToCachedFBO(null, "highlights", e68, [0, 0, 0, 0], R3.RGBA4, E11.DEPTH_STENCIL_TEXTURE);
    return r55.detachDepth(), r55;
  }
  _renderShadowHighlights(e68, r55) {
    this.hasHighlights && r55.decorations !== i6.OFF && this._needsShadowHighlight && this._offscreen.updateColor((r56) => (this._pluginInput.set("highlights", e68), this._plugins.render(A6.SHADOW_HIGHLIGHT, this._pluginInput, r56), r56), "transparent-color");
  }
  _renderHighlights(e68, r55, t71) {
    this.hasHighlights && t71.decorations !== i6.OFF && this._plugins.produces(A6.HIGHLIGHT) && (this._pluginInput.set("highlights", r55), this._plugins.render(A6.HIGHLIGHT, this._pluginInput, e68));
  }
  get _needsShadowCast() {
    return this._shadowAccumulator.isAccumulating;
  }
  _renderShadowAccumulation(e68, r55, t71) {
    var _a;
    this._needsShadowCast && ((_a = this._bindParameters.linearDepth) == null ? void 0 : _a.getTexture()) && this._shadowAccumulator.renderAccumulation(this._bindParameters.linearDepth, e68, r55, t71);
  }
  _prepareTransparencySlots() {
    this._renderContext.output = o10.Alpha, this._bindParameters.transparencyPassType = o16.Alpha, this._plugins.prepare(A6.TRANSPARENT_MATERIAL), this._renderContext.output = o10.Color, this._bindParameters.transparencyPassType = o16.Color, this._plugins.prepare(A6.TRANSPARENT_MATERIAL), this._bindParameters.transparencyPassType = o16.FrontFace, this._plugins.prepare(A6.TRANSPARENT_MATERIAL), this._bindParameters.transparencyPassType = o16.NONE;
  }
  _renderOITPass(e68, r55 = c15.Both) {
    const t71 = e68 === Ae2.HUD, s71 = t71 ? this.fboCache.acquire(this._offscreen.width, this._offscreen.height, "oit hud composite") : null, i47 = t71 ? () => this._renderHUDElements(r55) : () => this._renderTransparentMaterial(), a61 = this._renderContext.output;
    this._renderContext.output = o10.Alpha, this._bindParameters.transparencyPassType = o16.Alpha;
    const n61 = this._offscreen.renderOITPass(i47, o16.Alpha, t71);
    this._renderContext.output = o10.Color, this._bindParameters.transparencyPassType = o16.Color;
    const h36 = this._offscreen.renderOITPass(i47, o16.Color, t71);
    this._bindParameters.transparencyPassType = o16.FrontFace;
    const o58 = this._offscreen.renderOITPass(i47, o16.FrontFace, t71);
    return this._offscreen.compositeTransparentOntoOpaque(this._bindParameters, h36, n61, o58, s71), s71 == null ? void 0 : s71.detachDepth(), o58.release(), h36.release(), n61.release(), this._bindParameters.transparencyPassType = o16.NONE, this._renderContext.output = a61, s71;
  }
  _renderOccluded() {
    let e68 = 0;
    Pe3.clear(), this._plugins.plugins.forAll((r56) => {
      if (!r56.materialReference)
        return;
      r56.queryRenderOccludedState(h8.OccludeAndTransparentStencil) && (e68 |= h8.OccludeAndTransparentStencil, Pe3.push(r56));
    });
    const r55 = this._offscreen, t71 = (t72, s72, i48, a62, n61) => {
      if (!(e68 & s72))
        return;
      const { width: h36, height: o58, depth: d44 } = r55, l45 = this.fboCache.acquire(h36, o58, "tmp color");
      r55.renderToTargets(i48, l45, d44, [0, 0, 0, 0], a62, n61), r55.compositeToFramebuffer(this._bindParameters, l45.getTexture(), a52.PremultipliedAlpha, t72), l45.release();
    }, s71 = (e69, r56) => {
      this._bindParameters.slot = e69, r56.forAll((e70) => {
        if (m13(e70)) {
          const r57 = e70.prepareTechnique(this._renderContext);
          r57 && e70.renderNode(this._renderContext, r57);
        }
      });
    };
    0 !== Pe3.length && (s71(A6.OCCLUDER_MATERIAL, Pe3), t71(0.5, h8.OccludeAndTransparentStencil, () => s71(A6.TRANSPARENT_OCCLUDER_MATERIAL, Pe3), false, false)), Pe3.clear(), this._plugins.plugins.forAll((r56) => {
      if (!r56.materialReference)
        return;
      const t72 = r56.queryRenderOccludedState(h8.OccludeAndTransparent), s72 = r56.queryRenderOccludedState(h8.Transparent), i48 = r56.queryRenderOccludedState(h8.Opaque);
      (t72 || s72 || i48) && (e68 |= t72 ? h8.OccludeAndTransparent : s72 ? h8.Transparent : h8.Opaque, Pe3.push(r56));
    });
    const i47 = this._plugins.renderOccludedFlags;
    if (e68 |= i47, !e68)
      return;
    const a61 = (e69) => {
      this._renderContext.renderOccludedMask = e69, i47 > h8.Occlude && this._plugins.render(A6.OCCLUDED_TERRAIN), s71(A6.OPAQUE_MATERIAL, Pe3), s71(A6.TRANSPARENT_MATERIAL, Pe3), s71(A6.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL, Pe3), this._renderContext.renderOccludedMask = l18;
    };
    this._renderContext.output = o10.Color, t71(0.5, h8.OccludeAndTransparent, () => a61(h8.OccludeAndTransparent), true, N2.OutlineVisualElementMask), t71(0.5, h8.Transparent, () => a61(h8.Transparent), true, N2.OutlineVisualElementMask), t71(1, h8.Opaque, () => a61(h8.Opaque), true, N2.OutlineVisualElementMask), Pe3.clear();
  }
  _invokeRenderNodes(e68) {
    return this._nodes.render(e68, this._pluginInput, this._releaseNormals);
  }
  _renderComposite(e68, r55) {
    this._offscreen.updateColor((e69) => (this._pluginInput.set("highlights", r55), e69 = this._nodes.render(e69, this._pluginInput, this._releaseNormals), this._pluginInput.set(e69.name, e69), this._pluginInput.delete("highlights"), e69), "composite-color");
    const t71 = this._plugins.produces(A6.ANTIALIASING);
    return this._plugins.render(t71 ? A6.ANTIALIASING : A6.BLIT, this._pluginInput, e68);
  }
  _ensureBindParametersCamera(e68, r55) {
    this._bindParameters.camera = e68, this._bindParameters.contentCamera = r55;
  }
  _ensureBindParametersSSR(e68) {
    if (this._bindParameters.ssr.lastFrameColor) {
      null == this._ssrEnableTime && (this._ssrEnableTime = e68), this._renderContext.lastFrameCamera.equals(this._bindParameters.camera) ? this._reprojectionMatrix = o8 : (h5(Ce2, this._bindParameters.camera.viewMatrix), h5(Se2, this._bindParameters.camera.projectionMatrix), c4(we2, Ce2, Se2), c4(we2, this._renderContext.lastFrameCamera.viewMatrix, we2), c4(we2, this._renderContext.lastFrameCamera.projectionMatrix, we2), this._reprojectionMatrix = we2);
      const r55 = this._stage.view.qualitySettings.fadeDuration;
      this._bindParameters.ssr.fadeFactor = r55 > 0 ? Math.min(r55, e68 - this._ssrEnableTime) / r55 : 1, this._bindParameters.ssr.fadeFactor < 1 && this._requestRender();
    } else
      this._reprojectionMatrix = o8, this._ssrEnableTime = null;
  }
  addRenderNode(e68) {
    this._nodes.add(e68), this._requestRender();
  }
  removeRenderNode(e68) {
    this._nodes.remove(e68), this._requestRender();
  }
  get usedMemory() {
    var _a;
    return { fbos: this.fboCache.usedMemory, plugins: this._plugins.usedMemory, edges: ((_a = this.edgeView) == null ? void 0 : _a.usedMemory) ?? 0 };
  }
  get test() {
    return { offscreen: this._offscreen, shadowMap: this._shadowMap, highlight: this._highlight, lighting: this._bindParameters.lighting, renderPlugins: this._plugins, shadowAccumulator: this._shadowAccumulator, weatherIsFading: this._bindParameters.cloudsFade.isFading, resetRenderStateFeatures: () => {
      this._renderStateFeatures.value = t22(), this._plugins.renderFeatureChanged(), this._requestRender();
    }, getFramebufferTexture: (e68) => {
      var _a, _b;
      switch (e68) {
        case be2.Color:
          return this._offscreen.colorTexture;
        case be2.LinearDepth:
          return (_a = this._bindParameters.linearDepth) == null ? void 0 : _a.getTexture();
        case be2.ShadowMap:
          return this._shadowMap.depthTexture;
        case be2.HudVisibility:
          return (_b = this._bindParameters.hudVisibility) == null ? void 0 : _b.getTexture();
      }
    }, debugLinearDepth: (e68) => {
      this._debugLinearDepth = e68, this._requestRender();
    } };
  }
};
var Ae2;
var be2;
e([y2({ readOnly: true })], Ee2.prototype, "fullResolutionAtmosphere", null), e([y2()], Ee2.prototype, "_smaa", void 0), e([y2()], Ee2.prototype, "_blit", void 0), e([y2()], Ee2.prototype, "_edgeView", void 0), e([y2()], Ee2.prototype, "updating", null), function(e68) {
  e68[e68.Geometry = 0] = "Geometry", e68[e68.HUD = 1] = "HUD";
}(Ae2 || (Ae2 = {})), function(e68) {
  e68[e68.Color = 0] = "Color", e68[e68.LinearDepth = 1] = "LinearDepth", e68[e68.ShadowMap = 2] = "ShadowMap", e68[e68.HudVisibility = 3] = "HudVisibility";
}(be2 || (be2 = {}));
var Re2 = [0, 0, 0, 0];
var Pe3 = new l3();
var Se2 = e15();
var Ce2 = e15();
var we2 = e15();
function Ie2(e68) {
  return (r55) => e68.immediate.schedule(r55);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/ScreenSpaceGeometry.js
var m45 = class {
  constructor(t71) {
    this._rctx = t71, this._vao = f44(t71);
  }
  destroy() {
    this._vao = r2(this._vao);
  }
  draw() {
    null != this._vao && (this._rctx.bindVAO(this._vao), this._rctx.drawArrays(E7.TRIANGLES, 0, 3));
  }
  get test() {
    var _a, _b, _c, _d;
    return { cachedWebGLObjects: c42((_a = this._vao) == null ? void 0 : _a.glName) + c42((_c = (_b = this._vao) == null ? void 0 : _b.indexBuffer) == null ? void 0 : _c.glName) + c42((_d = this._vao) == null ? void 0 : _d.vertexBuffers.geometry) };
  }
};
function f44(t71, i47 = o31, m46 = O9) {
  const f48 = new Float32Array([-1, -1, 3, -1, -1, 3]);
  return new r27(t71, m46, { geometry: i47 }, { geometry: h7.createVertex(t71, F3.STATIC_DRAW, f48) });
}
function c42(t71) {
  return null != t71 ? 1 : 0;
}

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/RenderingContext.js
var t69 = class extends y7 {
  constructor(r55, s71, t71) {
    super(r55, s71), this.gl = r55, this.newCache = t71, this._appleAmdDriverHelper = null, this._refCount = 1, this.screen = new m45(this);
  }
  destroy() {
    --this._refCount > 0 || this.dispose();
  }
  ref() {
    ++this._refCount;
  }
  dispose() {
    var _a;
    super.dispose(), (_a = this._appleAmdDriverHelper) == null ? void 0 : _a.dispose(), this.screen.destroy();
  }
  bindTechnique(e68, r55, s71, t71, i47) {
    return this.useProgram(e68.program), this.setPipelineState(e68.getPipeline(!!i47)), e68.program.bindPass(s71, r55), t71 && e68.program.bindDraw(t71, r55, s71), e68.program;
  }
  runAppleAmdDriverHelper() {
    this.driverTest.drawArraysRequiresIndicesTypeReset.result && (this._appleAmdDriverHelper ?? (this._appleAmdDriverHelper = new n26(this)), this._appleAmdDriverHelper.run());
  }
  get test() {
    var _a;
    return { cachedWebGLObjects: this.programCache.test.cachedWebGLProgramObjects + this.screen.test.cachedWebGLObjects + (((_a = this._appleAmdDriverHelper) == null ? void 0 : _a.test.cachedWebGLObjects) ?? 0) };
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/ITexture.js
function e66(e68) {
  return !!e68.frameUpdate;
}

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/TextureRepository.js
var _25 = class extends S3 {
  constructor(e68, t71, s71) {
    super({}), this._stage = e68, this._techniqueRepository = t71, this._rctx = s71, this._textures = /* @__PURE__ */ new Map(), this._loadingCount = 0, this._frameUpdates = /* @__PURE__ */ new Map(), this.events = new o3(), this._frameTask = e68.view.resourceController.scheduler.registerTask(I5.TEXTURE_UNLOAD);
  }
  normalizeCtorArgs() {
    return {};
  }
  destroy() {
    this._frameTask.remove(), this._stage.forEachOfType(e19.Texture, (e68) => e68.unload());
  }
  get updating() {
    return this._loadingCount > 0 || this._frameTask.updating;
  }
  get textureTechnique() {
    return null == this._textureTechnique && (this._textureTechnique = this._techniqueRepository.acquire(m19, new r28())), this._textureTechnique;
  }
  acquire(e68) {
    const t71 = this._textures.get(e68);
    return t71 ? (t71.ref(), t71.loadingPromise ?? t71) : this._createNewRef(e68);
  }
  update() {
    let e68 = false;
    this._frameUpdates.forEach((t71) => {
      const r55 = t71.texture.frameUpdate(t71.previousToken);
      r55 >= 0 && r55 !== t71.previousToken && (t71.previousToken = r55, e68 = true);
    }), e68 && this.events.emit("changed", O7.BACKGROUND);
  }
  _createNewRef(e68) {
    const t71 = this._stage.getObject(e68);
    if (null == t71)
      return s15(void 0 !== t71), null;
    const r55 = t71.events.on("unloaded", () => {
      r55.remove(), this._onTextureUnloaded(e68);
    }), n61 = new f45(e68, () => {
      this._frameTask.schedule(() => {
        n61.isUnreferenced && t71.unload();
      });
    });
    return this._textures.set(e68, n61), n61.ref(), t71.glTexture ? (this._updateGLTexture(n61, t71.glTexture), e66(t71) && this._frameUpdates.set(e68, { texture: t71, previousToken: -1 }), n61) : (this._loadingCount++, n61.loadingPromise = this._stage.schedule(() => {
      const r56 = t71.load(this._rctx), u46 = (r57) => (this._loadingCount--, n61.loadingPromise = null, this._updateGLTexture(n61, r57), e66(t71) && this._frameUpdates.set(e68, { texture: t71, previousToken: -1 }), n61), a61 = (e69) => (this._loadingCount--, n61.loadingPromise = null, b(e69) || n.getLogger(this).error(e69), null);
      return S(r56) ? r56.then(u46, a61) : u46(r56);
    }), n61.loadingPromise);
  }
  _updateGLTexture(e68, t71) {
    e68.glTexture = t71, this.events.emit("changed", O7.UPDATE);
  }
  _onTextureUnloaded(e68) {
    this._textures.delete(e68), this._frameUpdates.delete(e68);
  }
};
e([y2()], _25.prototype, "_loadingCount", void 0), e([y2()], _25.prototype, "_frameTask", void 0), e([y2()], _25.prototype, "updating", null), _25 = e([a4("esri.views.3d.webgl-engine.lib.TextureRepository")], _25);
var f45 = class {
  constructor(e68, t71) {
    this.id = e68, this._release = t71, this._refCount = 0;
  }
  get isUnreferenced() {
    return 0 === this._refCount;
  }
  ref() {
    ++this._refCount;
  }
  release() {
    --this._refCount, this._refCount > 0 || (0 !== this._refCount ? (n.getLogger("esri.views.3d.webgl-engine.lib.TextureRepository.RefCountedTextureImpl").error("Cannot dereference texture that has no references!"), this._refCount = 0) : this._release());
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/markerTextureRepository.js
function o56(o58, t71) {
  return new t35((e68) => f17(e68, o58), (r55) => r55, t71);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/internal/WaterTextureRepository.js
var w26 = class extends S3 {
  constructor() {
    super(...arguments), this._passParameters = new f46(), this._resourcesTask = null;
  }
  get passParameters() {
    return this._passParameters;
  }
  destroy() {
    this._resourcesTask = e2(this._resourcesTask), this._passParameters.waveNormal = r2(this._passParameters.waveNormal), this._passParameters.wavePerturbation = r2(this._passParameters.wavePerturbation);
  }
  get updating() {
    return !!this._resourcesTask && !this._resourcesTask.finished;
  }
  ensureResources(s71) {
    return this._resourcesTask || (this._resourcesTask = d2(async (r55) => {
      await Promise.allSettled([this._loadImageResource(s71, n6("esri/images/materials/water/normals.jpg"), (s72) => this._passParameters.waveNormal = s72, r55), this._loadImageResource(s71, n6("esri/images/materials/water/perturbation.jpg"), (s72) => this._passParameters.wavePerturbation = s72, r55)]);
    })), this._resourcesTask.finished ? a14.LOADED : a14.LOADING;
  }
  async _loadImageResource(s71, e68, r55, t71) {
    try {
      const a61 = await t16(e68, { signal: t71 });
      s3(t71);
      const o58 = new e22(a61.width, a61.height);
      o58.pixelFormat = G4.RGB, o58.samplingMode = L4.LINEAR_MIPMAP_LINEAR, o58.hasMipmap = true, o58.maxAnisotropy = 8, r55(new m11(s71, o58, a61));
    } catch (o58) {
      n.getLogger(this).error("Failed to load water material normal texture.", o58);
    }
  }
};
e([y2()], w26.prototype, "_resourcesTask", void 0), e([y2({ type: Boolean, readOnly: true })], w26.prototype, "updating", null), w26 = e([a4("esri.views.3d.webgl-engine.materials.internal.WaterTextureRepository")], w26);
var f46 = class extends n15 {
};

// node_modules/@arcgis/core/views/3d/webgl-engine/parts/contextCache.js
var n60 = /* @__PURE__ */ new Map();
function t70() {
  return n60;
}

// node_modules/@arcgis/core/views/3d/webgl-engine/parts/ScreenshotManager.js
var d43 = class {
  constructor(e68, t71, r55) {
    this.parameters = e68, this.frameHasDecorations = t71, this.fbos = r55;
  }
};
var f47 = class {
  constructor(e68, t71, r55) {
    this._rctx = e68, this._renderFunctions = t71, this._forceCameraHook = r55, this.supersample = true, this._screenshotQueue = new Array();
  }
  destroy() {
    this._rctx = null;
  }
  async takeScreenshot(t71) {
    await this._renderFunctions.prepareOverlay(), this._renderFunctions.requestRenderScene(O7.BACKGROUND);
    const s71 = L();
    return this._screenshotQueue.push({ settings: t71, resolver: s71 }), s71.promise;
  }
  update(e68, t71) {
    for (const r55 of this._screenshotQueue) {
      if (null == this._rctx) {
        r55.resolver.reject();
        continue;
      }
      const s71 = { ...r55.settings, pixelRatio: r55.settings.pixelRatio * e68.parameters.camera.pixelRatio }, i47 = this._renderScreenshot(e68, s71, t71);
      r55.resolver(i47);
    }
    this._screenshotQueue.length = 0;
  }
  _renderScreenshotOverlay(e68, t71, r55) {
    e68.width = t71.width, e68.height = t71.height;
    const i47 = e68.getContext("2d"), o58 = r55.pixelRatio;
    return i47.save(), i47.translate(0, t71.height), i47.scale(1, -1), r55.region && i47.translate(-r55.region.x, -r55.region.y), i47.scale(o58, o58), t71 = this._renderFunctions.renderOverlay(e68, r55.disableDecorations ? i6.OFF : i6.ON, t71), i47.restore(), t71;
  }
  _readbackScreenshot(e68, t71) {
    return e68.resample ? this._readbackScreenshotResampled({ ...e68, resample: e68.resample }, t71) : this._readbackScreenshotImmediate(e68, t71);
  }
  _readbackScreenshotResampled(e68, t71) {
    const { framebufferWidth: r55, framebufferHeight: s71, region: i47, resample: o58 } = e68, h36 = this._ensureScreenshotEncodeCanvas();
    let d44 = s14(r55, s71, h36);
    this._rctx.gl.readPixels(0, 0, r55, s71, G4.RGBA, C4.UNSIGNED_BYTE, new Uint8Array(d44.data.buffer)), t71(), d44 = this._renderScreenshotOverlay(h36, d44, { ...e68, region: void 0 });
    const f48 = s14(i47.width, i47.height, h36);
    return w10(d44, f48, true, o58.region.x, s71 - (o58.region.y + o58.region.height), o58.region.width, o58.region.height);
  }
  _readbackScreenshotImmediate(e68, t71) {
    const { framebufferHeight: r55, region: s71 } = e68, i47 = this._ensureScreenshotEncodeCanvas(), o58 = s14(s71.width, s71.height, i47);
    return this._rctx.gl.readPixels(s71.x, r55 - (s71.y + s71.height), s71.width, s71.height, G4.RGBA, C4.UNSIGNED_BYTE, new Uint8Array(o58.data.buffer)), t71(), this._renderScreenshotOverlay(i47, o58, e68);
  }
  _renderScreenshot(e68, r55, n61) {
    const a61 = e68.parameters.camera, c44 = { width: r55.framebufferWidth, height: r55.framebufferHeight };
    b4(c44, Math.min(this._rctx.parameters.maxTextureSize, this._rctx.parameters.maxRenderbufferSize));
    let l45 = false;
    const d44 = r55.disableDecorations && e68.frameHasDecorations, f48 = c44.width !== a61.fullWidth || c44.height !== a61.fullHeight, m46 = r55.ignorePadding && a61.pixelRatio !== r55.pixelRatio, u46 = f48 || d44 || m46 || r55.objectAndLayerIdColor;
    let p48 = null, g23 = null;
    if (u46) {
      const e69 = a61.clone();
      if (r55.ignorePadding) {
        const s71 = t6(e69.padding);
        for (let t71 = 0; t71 < 4; t71++)
          s71[t71] = Math.round(s71[t71] / e69.pixelRatio * r55.pixelRatio);
        e69.padding = s71;
      }
      e69.fullWidth = c44.width, e69.fullHeight = c44.height, e69.pixelRatio = r55.pixelRatio;
      const h36 = a61.fovX - e69.fovX, d45 = a61.fovY - e69.fovY;
      h36 < 0 && h36 < d45 ? e69.fovX = a61.fovX : d45 < 0 && d45 < h36 && (e69.fovY = a61.fovY);
      const f49 = { camera: e69, contentCamera: e69, mode: I4.IDLE, alignPixelEnabled: true, contentPixelRatio: e69.pixelRatio };
      this._forceCameraHook(f49), l45 = true;
      const m47 = this._renderFunctions.renderScene(f49, n61, r55.objectAndLayerIdColor ? r25.ObjectAndLayerID : r25.Screenshot, r55.disableDecorations ? i6.OFF : i6.ON);
      g23 = m47.screen, p48 = m47.oid;
    }
    const b22 = () => {
      this._rctx.bindFramebuffer(null), g23 == null ? void 0 : g23.release();
    };
    this._rctx.bindFramebuffer(g23 == null ? void 0 : g23.fbo);
    const _26 = this._readbackScreenshot(r55, b22);
    let x31 = null;
    if (r55.objectAndLayerIdColor) {
      const e69 = () => {
        this._rctx.bindFramebuffer(null), p48 == null ? void 0 : p48.release();
      };
      this._rctx.bindFramebuffer(p48 == null ? void 0 : p48.fbo), x31 = this._readbackScreenshot(r55, e69), this._rctx.bindFramebuffer(null);
    }
    if (u46 && !this._rctx.contextAttributes.alpha)
      for (let t71 = 3; t71 < _26.data.length; t71 += 4)
        _26.data[t71] = 255;
    if (x31 && !this._rctx.contextAttributes.alpha)
      for (let t71 = 3; t71 < x31.data.length; t71 += 4)
        x31.data[t71] = 255;
    return l45 && this._forceCameraHook(e68.parameters), [_26, x31];
  }
  _ensureScreenshotEncodeCanvas() {
    return this._screenshotEncodeCanvas || (this._screenshotEncodeCanvas = document.createElement("canvas")), this._screenshotEncodeCanvas;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/parts/testUtils.js
var o57 = { enabled: false, disposeContextCache: () => {
  const o58 = t70();
  o58.forEach((e68) => e68.dispose()), o58.clear();
} };

// node_modules/@arcgis/core/views/3d/webgl-engine/parts/RenderView.js
var k25 = class extends S3 {
  constructor(e68) {
    super({}), this.events = new o3(), this.waterTextures = new w26(), this._magnifierHelper = new w25(), this.objectAndLayerIdRenderHelper = has("enable-feature:objectAndLayerId-rendering") ? new i44() : null, this._needsUpdate = true, this._needsRender = true, this._idleSuspend = true, this._needsWaterReflectionUpdate = false, this._lastAnimationUpdate = 0, this._container = e68.container, this._viewingMode = e68.viewingMode;
    try {
      this._initializeContext(e68);
    } catch (i47) {
      return void console.error("Failed to initialize context", i47);
    }
    this.addHandles([d3(() => {
      var _a;
      return (_a = this.waterTextures) == null ? void 0 : _a.updating;
    }, () => this.requestRender(), P), d3(() => e68.view.qualityProfile, (e69) => {
      var _a;
      return (_a = this.renderer) == null ? void 0 : _a.updateRenderFeatures(e69);
    }, A3), this._magnifierHelper.events.on("request-render", () => this.requestRender())]);
    const { memoryController: t71 } = e68.view.resourceController;
    this.stippleTextures = u16(this._rctx, t71), this.markerTextures = o56(this._rctx, t71), this._shaderTechniques = new r26({ rctx: this._rctx, viewingMode: e68.viewingMode, stippleTextureRepository: this.stippleTextures, waterTextureRepository: this.waterTextures, markerTextureRepository: this.markerTextures }), this._textures = new _25(e68, this._shaderTechniques, this._rctx), this.addHandles(this._textures.events.on("changed", (e69) => this.requestRender(e69))), this._materialRepository = new s34(this._textures, this._shaderTechniques, () => this.requestRender(), () => this.requestRender()), this._compositingHelper = new n56(this._rctx, this._shaderTechniques), this.renderer = new Ee2(e68, this._materialRepository, this._textures, this._shaderTechniques, this._rctx, this._compositingHelper, this._magnifierHelper, (e69) => this.requestRender(e69));
    const s71 = { renderScene: (e69, t72, r55, s72) => this.renderer.render(e69, t72, r55, s72), requestRenderScene: (e69) => this.requestRender(e69), prepareOverlay: () => e68.options.screenshot.prepareOverlay(), renderOverlay: (t72, r55, s72) => e68.options.screenshot.renderOverlay(t72, r55, s72) };
    this._screenshotManager = new f47(this._rctx, s71, (e69) => this.events.emit("force-camera-for-screenshot", e69)), this._registerFrameTask(e68);
  }
  normalizeCtorArgs() {
    return {};
  }
  destroy() {
    this._container.contains(this._canvas) && this._container.removeChild(this._canvas), this._frameTask = l(this._frameTask), this._shaderTechniques = u(this._shaderTechniques), this._componentObjects = u(this._componentObjects), this._screenshotManager = u(this._screenshotManager), u(this.renderer), this._textures = u(this._textures), u(this._magnifierHelper), u(this.waterTextures), u(this.markerTextures), u(this.stippleTextures), this._canvas = null, this._container = null, this._rctx = u(this._rctx);
  }
  requestRender(e68 = O7.UPDATE) {
    this._needsRender = true, e68 === O7.UPDATE && (this._needsUpdate = true);
  }
  get updating() {
    return this._needsUpdate || this._needsWaterReflectionUpdate || this.renderer.updating || this._textures.updating || this.waterTextures.updating || this._magnifierHelper.updating;
  }
  get textureRepository() {
    return this._textures;
  }
  get compositingHelper() {
    return this._compositingHelper;
  }
  set magnifier(e68) {
    this._magnifierHelper.magnifier = e68;
  }
  setIdleSuspend(e68) {
    this._idleSuspend !== e68 && (this._idleSuspend = e68, this.requestRender());
  }
  get renderingContext() {
    return this._rctx;
  }
  get capabilities() {
    return this._rctx.capabilities;
  }
  get canvas() {
    return this._canvas;
  }
  takeScreenshot(e68) {
    return this._screenshotManager.takeScreenshot(e68).then((e69) => e69[0]);
  }
  takeScreenshotWithOID(e68) {
    return e68.objectAndLayerIdColor = true, this._screenshotManager.takeScreenshot(e68);
  }
  getAlpha() {
    return !!this._rctx.contextAttributes.alpha;
  }
  getMinimalDepthForArea(e68, t71, r55, s71, i47, n61 = i47) {
    const o58 = s71.constrainWindowSize(t71, r55, i47 * s71.pixelRatio, n61 * s71.pixelRatio), a61 = this._ensureDepthBuffer(o58);
    this.renderer.readDepthPixels(s71, o58, a61);
    let h36 = Number.MAX_VALUE;
    for (let p48 = 0; p48 < o58[2] * o58[3]; p48++) {
      const e69 = B17(4 * p48, a61, s71.nearFar);
      h36 > e69 && e69 !== s71.nearFar[0] && e69 !== s71.nearFar[1] && (h36 = e69);
    }
    if (e68) {
      const i48 = e68.pickDepth(t71 * s71.pixelRatio, r55 * s71.pixelRatio, s71);
      null != i48 && h36 > i48 && i48 !== s71.nearFar[0] && i48 !== s71.nearFar[1] && (h36 = i48);
    }
    return h36 === Number.MAX_VALUE ? void 0 : h36;
  }
  _ensureDepthBuffer(e68) {
    const t71 = 4 * e68[2] * e68[3];
    return (null == this._tmpDepthBuffer || this._tmpDepthBuffer.byteLength < t71) && (this._tmpDepthBuffer = new Uint8Array(t71)), this._tmpDepthBuffer;
  }
  async reloadShaders() {
    e54(), await this._shaderTechniques.reloadAll(), this.requestRender();
  }
  _registerFrameTask(e68) {
    const t71 = e68.view.state;
    let r55 = false, s71 = O7.BACKGROUND, i47 = false;
    const n61 = { preRender: ({ time: i48 }) => {
      r55 = this.updating, s71 = this._needsUpdate ? O7.UPDATE : O7.BACKGROUND, e68.commitSyncLayers();
      const n62 = n3(i48 - this._lastAnimationUpdate);
      if (n62 > this.renderer.animationTimestep || null != t71.forcedAnimationTime || r55 || this._needsRender) {
        const e69 = n3(n62 / this.renderer.animationTimeDilation), r56 = new d9(t71.camera, e69, t71.forcedAnimationTime);
        this.renderer.updateAnimation(r56) && this.requestRender(O7.BACKGROUND), this._lastAnimationUpdate = i48;
      }
    }, render: ({ time: e69 }) => {
      if ((this._needsRender || !this._idleSuspend || !this.renderer.isCameraFinal || this._needsWaterReflectionUpdate) && t71.camera.fullWidth > 0 && t71.camera.fullHeight > 0) {
        const r56 = this._needsUpdate && this._idleSuspend && this.renderer.isCameraFinal;
        this._needsRender = false, this._needsUpdate = false, this._needsWaterReflectionUpdate = false, this.renderer.render(t71, e69), i47 = true, r56 && this.renderer.hasReflections && (this.requestRender(O7.BACKGROUND), this._needsWaterReflectionUpdate = true);
      }
    }, update: ({ time: e69 }) => {
      const r56 = this.renderer.hasSlicePlane || this._magnifierHelper.enabled || this.renderer.hasDecorations || this.renderer.hasHighlights, s72 = new d43(t71, r56, this.renderer.fboCache);
      this._textures.update(), this._screenshotManager.update(s72, e69);
    }, finish: () => {
      i47 && (this.renderer.finish(t71.mode === I4.IDLE ? s71 : O7.UPDATE), i47 = false);
    } };
    this._frameTask = A2(n61);
  }
  _initializeContext(e68) {
    const t71 = e68.options;
    this._canvas = t71.canvas, this._canvas || (this._canvas = document.createElement("canvas")), this._canvas.setAttribute("style", "width: 100%; height:100%; display:block;");
    const r55 = { alpha: t71.alpha || false, premultipliedAlpha: true, antialias: false, depth: true, stencil: t71.stencil ?? true, powerPreference: "high-performance", preserveDrawingBuffer: t71.preserveDrawingBuffer ?? false }, i47 = t24(this._canvas, r55);
    null != i47 ? (this._rctx = M20(i47, e68), this._loadShaderOnlyExtensions(), !t71.alpha && this._rctx.contextAttributes.alpha && n.getLogger(this).error("WebGL context has alpha channel even though no alpha channel was requested"), !this._rctx.contextAttributes.alpha && has("safari") >= 11 && (this._container.style.backgroundColor = "black"), this._container.appendChild(this._canvas)) : n.getLogger(this).error("A WebGL2 context could not be created.");
  }
  _loadShaderOnlyExtensions() {
    this._rctx.capabilities.enable("textureFloat");
  }
  getObjectAndLayerIdColor(e68) {
    return null != this.objectAndLayerIdRenderHelper ? this.objectAndLayerIdRenderHelper.getObjectAndLayerIdColor(e68) : null;
  }
  get componentObjectCollection() {
    return null == this._componentObjects && (this._componentObjects = new q19(this.renderer.renderPassManager, this._viewingMode)), this._componentObjects;
  }
  set componentObjectCollection(e68) {
    this._componentObjects = e68;
  }
};
function M20(e68, t71) {
  const r55 = { disabledExtensions: t71.options.deactivatedWebGLExtensions || {}, debugWebGLExtensions: t71.options.debugWebGLExtensions || {}, maxAnisotropy: 8 }, s71 = (e69, r56) => t71.view.resourceController.memoryController.newCache(e69, r56);
  if (o57.enabled) {
    let t72 = E37.get(e68);
    return t72 ? (t72.configure(r55), t72.newCache = s71, t72.ref(), t72) : (t72 = new t69(e68, r55, s71), E37.set(e68, t72), t72.ref(), t72);
  }
  return new t69(e68, r55, s71);
}
e([y2({ type: Boolean, readOnly: true })], k25.prototype, "updating", null), e([y2()], k25.prototype, "_rctx", void 0), e([y2()], k25.prototype, "_container", void 0), e([y2()], k25.prototype, "_canvas", void 0), e([y2()], k25.prototype, "stippleTextures", void 0), e([y2()], k25.prototype, "markerTextures", void 0), e([y2()], k25.prototype, "waterTextures", void 0), e([y2()], k25.prototype, "_magnifierHelper", void 0), e([y2({ readOnly: true })], k25.prototype, "objectAndLayerIdRenderHelper", void 0), e([y2()], k25.prototype, "_textures", void 0), e([y2({ readOnly: true })], k25.prototype, "renderer", void 0), e([y2()], k25.prototype, "_screenshotManager", void 0), e([y2()], k25.prototype, "componentObjectCollection", null), e([y2()], k25.prototype, "_componentObjects", void 0), e([y2()], k25.prototype, "_needsUpdate", void 0), e([y2()], k25.prototype, "_needsWaterReflectionUpdate", void 0), k25 = e([a4("esri.views.3d.webgl-engine.parts.RenderView")], k25);
var E37 = t70();

// node_modules/@arcgis/core/views/3d/webgl-engine/Stage.js
var u45 = class extends S3 {
  constructor(e68) {
    super(e68), this._model = new h32(), this._layers = new l3(), this._asyncChangeSet = new s33(), this._syncChangeSet = new s33(), this._layerSyncSet = /* @__PURE__ */ new Set();
  }
  initialize() {
    this._set("renderView", new k25(this)), this._frameTask = this.view.resourceController.scheduler.registerTask(I5.STAGE, this), this.addHandles(this._frameTask);
  }
  destroy() {
    this.renderView.destroy();
  }
  get viewingMode() {
    return this.view.state.viewingMode;
  }
  get updating() {
    return this.running || this.renderView.updating || this._frameTask.updating;
  }
  get renderer() {
    var _a;
    return (_a = this.renderView) == null ? void 0 : _a.renderer;
  }
  add(e68) {
    this._model.add(e68), n31(e68) && this._addLayer(e68), this.renderView.requestRender();
  }
  remove(e68) {
    null != e68 && !this.destroyed && this._model.remove(e68) && (n31(e68) && this._removeLayer(e68), this.renderView.requestRender());
  }
  addMany(e68) {
    null != e68 && (this._model.addMany(e68), this.renderView.requestRender());
  }
  removeMany(e68) {
    var _a, _b;
    null != e68 && ((_a = this._model) == null ? void 0 : _a.removeMany(e68), (_b = this.renderView) == null ? void 0 : _b.requestRender());
  }
  forEachOfType(e68, t71) {
    this._model.forEachOfType(e68, t71);
  }
  handleEvent(e68, t71) {
    this.destroyed || (this._model.dirtySet[e68](t71), this.renderView.requestRender());
  }
  get running() {
    return this._model.dirtySet.dirty || !this._asyncChangeSet.empty;
  }
  runTask(e68) {
    if (this._frameTask.processQueue(e68), this._commit(e68), !e68.hasProgressed)
      return o14;
  }
  _commit(e68) {
    const t71 = this._model.dirtySet;
    this._asyncChangeSet.empty || e68.done || (this.renderer.modify(this._asyncChangeSet, e68), this.renderView.requestRender(), e68.madeProgress()), this._layers.forAll((r55) => {
      if (e68.done)
        return;
      const s71 = this._layerSyncSet.has(r55.id) || r55.updatePolicy === C8.SYNC, i47 = s71 ? this._syncChangeSet : this._asyncChangeSet;
      t71.commitLayer(r55.id, i47), this._layerSyncSet.delete(r55.id), i47.empty || (this.renderer.modify(i47, s71 ? C5 : e68), this.renderView.requestRender(), e68.madeProgress());
    }), this._syncChangeSet.empty || (this.renderer.modify(this._syncChangeSet, C5), this.renderView.requestRender(), e68.madeProgress()), this._layers.forAll((r55) => {
      e68.done || this._layerSyncSet.has(r55.id) || r55.updatePolicy !== C8.ASYNC || (t71.commitLayer(r55.id, this._asyncChangeSet), this._asyncChangeSet.empty || (this.renderer.modify(this._asyncChangeSet, e68), this.renderView.requestRender(), e68.madeProgress()));
    }), this._layerSyncSet.clear(), this.notifyChange("running");
  }
  commitSyncLayers() {
    const e68 = this._model.dirtySet;
    this._layers.forAll((t71) => {
      this._layerSyncSet.has(t71.id) || t71.updatePolicy === C8.SYNC ? (e68.commitLayer(t71.id, this._syncChangeSet), this._layerSyncSet.delete(t71.id)) : e68.commitSyncUpdates(t71.id, this._syncChangeSet);
    });
    for (const t71 of this._layerSyncSet)
      e68.commitLayer(t71, this._syncChangeSet);
    this._layerSyncSet.clear(), this._syncChangeSet.empty || (this.renderer.modify(this._syncChangeSet, C5), this.renderView.requestRender());
  }
  _commitLayer(e68) {
    this._model.dirtySet.commitLayer(e68.id, this._syncChangeSet), this._layerSyncSet.delete(e68.id), this._syncChangeSet.empty || (this.renderer.modify(this._syncChangeSet, C5), this.renderView.requestRender());
  }
  schedule(e68, t71) {
    return this._frameTask.schedule(e68, t71);
  }
  reschedule(e68, t71) {
    return this._frameTask.reschedule(e68, t71);
  }
  syncLayer(e68) {
    this._layerSyncSet.add(e68), this.renderView.requestRender();
  }
  getObject(e68) {
    return this._model.getObject(e68);
  }
  get layers() {
    return this._layers;
  }
  _addLayer(e68) {
    this._layers.includes(e68) || this._layers.push(e68);
  }
  _removeLayer(e68) {
    this._commitLayer(e68), null != this._layers.removeUnordered(e68) && (this._model.dirtySet.getResidentRenderGeometries(e68.id, this._syncChangeSet.removes), this.renderer.modify(this._syncChangeSet, C5));
  }
  addRenderPlugin(e68, t71) {
    const r55 = this.renderer.plugins.add(e68, t71), i47 = () => {
      k18(e68) && this.view.sceneIntersectionHelper.addIntersectionHandler(e68);
    };
    if (S(r55))
      return r55.then(i47);
    i47();
  }
  removeRenderPlugin(e68) {
    this.destroyed || (k18(e68) && this.view.sceneIntersectionHelper.removeIntersectionHandler(e68), this.renderer.plugins.remove(e68));
  }
  get performanceInfo() {
    return this._model.getStats();
  }
  get test() {
    const e68 = this;
    return { getCount: (t71) => e68._model.test.content.filter((e69) => e69.type === t71).length, model: e68._model };
  }
};
u45.DebugSettings = { endFrameContentValidation: false }, e([y2({ constructOnly: true })], u45.prototype, "view", void 0), e([y2({ constructOnly: true })], u45.prototype, "options", void 0), e([y2({ readOnly: true })], u45.prototype, "viewingMode", null), e([y2({ constructOnly: true })], u45.prototype, "container", void 0), e([y2({ readOnly: true })], u45.prototype, "updating", null), e([y2({ constructOnly: true })], u45.prototype, "_model", void 0), e([y2()], u45.prototype, "renderView", void 0), e([y2({ readOnly: true })], u45.prototype, "renderer", null), e([y2({ readOnly: true })], u45.prototype, "running", null), u45 = e([a4("esri.views.3d.webgl-engine.Stage")], u45);

// node_modules/@arcgis/core/views/ui/3d/DefaultUI3D.js
var e67 = class extends u11 {
  constructor(o58) {
    super(o58), this.components = ["attribution", "zoom", "navigation-toggle", "compass"];
  }
};
e([y2()], e67.prototype, "components", void 0), e67 = e([a4("esri.views.ui.3d.DefaultUI3D")], e67);
var c43 = e67;

// node_modules/@arcgis/core/views/SceneView.js
var tt3 = class extends o21(y6(b6(N5))) {
  constructor(e68) {
    super(e68), this._userClippingArea = null, this._clippingArea = null, this._initialDefaultSpatialReference = null, this._createGraphicsViewController = null, this._resolveWhenReady = [], this._propertiesPool = new o22({ slicePlane: G5 }, this), this._resourceController = j18(this), this._defaultToMapOptions = { include: /* @__PURE__ */ new Set() }, this._defaultHitTestOptions = { exclude: /* @__PURE__ */ new Set() }, this.deconflictor = new u34({ view: this }), this.labeler = new V3({ view: this, deconflictor: this.deconflictor.labels }), this.sharedSymbolResources = null, this.analyses = new t25(), this.basemapTerrain = null, this.elevationProvider = null, this.canvas = null, this.constraints = new c24(), this.environment = new f26(), this.environmentManager = new L10(), this.floors = new V(), this.fullOpacity = 1, this.graphicsView = null, this.analysisViewManager = new f24({ view: this }), this.groundView = null, this.map = null, this.screenSizePerspectiveEnabled = true, this.state = new f33(), this.spatialReference = null, this.alphaCompositingEnabled = false, this.preserveDrawingBufferEnabled = false, this.supersampleScreenshotsEnabled = true, this.type = "3d", this.ui = new c43(), this._numUpdating = 0, this._lastUpdateTime = 0, this.updatingProgress = 0.5, this.highlightOptions = new y19(), m12();
    const t71 = (e69 = null) => {
      null != e69 && e69.type === E.MOVE || (this._updatingChanged(), this.map && this.map.allLayers.forEach(async (e70) => {
        try {
          await e70.when();
        } catch {
        }
        this._updatingChanged();
      }));
    };
    this.addHandles([v3(() => {
      var _a;
      return (_a = this.map) == null ? void 0 : _a.allLayers;
    }, "after-changes", (e69) => t71(e69), { onListenerAdd: () => t71(), onListenerRemove: () => t71(), sync: true }), this.allLayerViews.on("after-changes", (e69) => this._updateUpdatingMonitors(e69)), d3(() => this.map, (e69) => {
      e69 && "load" in e69 && e69.load && e69.load().catch(() => {
      });
    })]), this.inputManager = new C16({ view: this }), this.stateManager = new K7({ view: this });
  }
  initialize() {
    this.groundView = new u22({ view: this }), this._updateUpdatingMonitors();
    const e68 = () => this._updateDefaultToMapOptions();
    this.addHandles(v3(() => {
      var _a;
      return (_a = this.map) == null ? void 0 : _a.allLayers;
    }, "after-changes", e68, { onListenerAdd: e68, onListenerRemove: e68 })), this.updatingHandles.add(() => this.qualitySettings.memoryLimit, (e69) => {
      this.resourceController && (this.resourceController.memoryController.maxMemory = e69);
    }, P), this.updatingHandles.add(() => this.qualitySettings.additionalCacheMemory, (e69) => {
      this.resourceController && (this.resourceController.memoryController.additionalCacheMemory = e69);
    }, P), this.updatingHandles.add(() => this.qualitySettings.frameRate ?? 0, (e69) => j(e69 > 0 ? 1e3 / Math.ceil(e69) : 0), P), this.updatingHandles.add(() => {
      var _a;
      return (_a = this.map) == null ? void 0 : _a.ground;
    }, e68, A3), this.updatingHandles.add(() => {
      var _a, _b;
      return (_b = (_a = this.map) == null ? void 0 : _a.ground) == null ? void 0 : _b.opacity;
    }, () => this._updateDefaultHitTestOptions(), A3), this.addHandles(d3(() => this.spatialReference, () => this.notifyChange("clippingArea"), C));
  }
  destroy() {
    var _a;
    this.destroyed || (this.updatingHandles.removeAll(), this.invalidate(), this.activeTool = null, this.layerViewManager.clear(), this._exitSurface(), this._disposeGraphicsView(), this.sharedSymbolResources = u(this.sharedSymbolResources), this._set("labeler", u(this.labeler)), this._set("deconflictor", u(this.deconflictor)), this._resourceController = u(this._resourceController), this._set("stateManager", u(this.stateManager)), this._set("inputManager", u(this.inputManager)), this.state.destroy(), this._propertiesPool.destroy(), this.removeHandles("updatingMonitors"), this._set("environmentManager", u(this.environmentManager)), this._set("environment", u(this.environment)), this.groundView = u(this.groundView), this._exitBasemapTerrain(), (_a = this._stage) == null ? void 0 : _a.destroy());
  }
  get renderSpatialReference() {
    return this.renderCoordsHelper && this.renderCoordsHelper.spatialReference;
  }
  get basemapSpatialReference() {
    var _a;
    return (_a = this.basemapTerrain) == null ? void 0 : _a.spatialReference;
  }
  get animation() {
    var _a;
    return (_a = this.state) == null ? void 0 : _a.animation;
  }
  get camera() {
    var _a;
    return (_a = this.stateManager) == null ? void 0 : _a.camera;
  }
  set camera(e68) {
    this.stateManager && (this.stateManager.camera = e68);
  }
  get contentCamera() {
    var _a;
    return (_a = this.stateManager) == null ? void 0 : _a.contentCamera;
  }
  set contentCamera(e68) {
    this.stateManager && (this.stateManager.contentCamera = e68);
  }
  installContentCameraReset(e68 = { sticky: false }) {
    return this.stateManager.installContentCameraReset(e68);
  }
  get center() {
    var _a;
    return (_a = this.stateManager) == null ? void 0 : _a.center;
  }
  set center(e68) {
    this.stateManager && (this.stateManager.center = e68);
  }
  get clippingArea() {
    if ("global" === this.viewingMode)
      return null;
    const e68 = this.map;
    let t71 = this._userClippingArea || i(e68, "clippingArea");
    return !this._userClippingArea && !i(e68, "clippingEnabled") || null == t71 ? (this._clippingArea = null, null) : t71 instanceof w2 ? this.spatialReference && (t71 = it4(t71, this.spatialReference), null == t71) ? (n.getLogger(this).error("#clippingArea", "setting clippingArea with incompatible SpatialReference"), this._clippingArea) : (t71 = t71.clone(), null == t71.intersection(this._groundAndLayersExtent) && (t71.xmin = t71.xmax, t71.ymin = t71.ymax), t71.zmin = void 0, t71.zmax = void 0, t71.equals(this._clippingArea) || (this._clippingArea = t71), this._clippingArea) : (n.getLogger(this).error("#clippingArea", "only clippingArea geometries of type Extent are supported"), this._clippingArea);
  }
  set clippingArea(e68) {
    this.ready && "global" === this.viewingMode && null != e68 ? n.getLogger(this).error("#clippingArea=", "Clipping area is only supported in local viewingMode") : this._userClippingArea = e68;
  }
  get renderDataExtent() {
    if (this.state.viewingMode === l8.Global)
      return null;
    const e68 = this.renderSpatialReference, t71 = this.dataExtent;
    return null == t71 || null == e68 || t71.spatialReference.equals(e68) ? t71 : it4(t71, e68);
  }
  get dataExtent() {
    let e68 = this._groundAndLayersExtent;
    const t71 = this.spatialReference || f2.WGS84, i47 = it4(this.clippingArea, t71);
    null != i47 && (e68 = null != e68 ? e68.intersection(i47) : i47);
    const r55 = this._get("dataExtent");
    return null != e68 && e68.equals(r55) ? r55 : e68;
  }
  get _groundAndLayersExtent() {
    const e68 = this.spatialReference || f2.WGS84;
    let t71;
    const i47 = (i48) => {
      const r56 = it4(i48, e68);
      null != r56 && (null != t71 ? t71.union(r56) : t71 = r56.clone());
    }, r55 = this.basemapTerrain;
    if (r55 == null ? void 0 : r55.spatialReference) {
      const e69 = r55.groundExtent;
      i47(new w2({ xmin: e69[0], ymin: e69[1], zmin: 0, xmax: e69[2], ymax: e69[3], zmax: 0, spatialReference: r55.spatialReference }));
    }
    if (this.map) {
      const e69 = (e70) => {
        null == e70.fullExtent || "graphics" === e70.type && e70.internal || i47(e70.fullExtent);
      };
      this.map.allLayers.forEach((t72) => e69(t72));
    }
    if (null == t71)
      return null;
    t71.hasZ ? (t71.zmin = Math.min(0, t71.zmin ?? 0), t71.zmax = Math.max(0, t71.zmax ?? 0)) : (t71.zmin = 0, t71.zmax = 0);
    const s71 = this._get("_groundAndLayersExtent");
    return t71.equals(s71) ? s71 : t71;
  }
  castEnvironment(e68) {
    var _a;
    return e68 ? e68 instanceof f26 ? e68 : e68 instanceof b7 ? ((_a = this.environment) == null ? void 0 : _a.cloneWithWebsceneEnvironment(e68)) ?? f26.fromWebsceneEnvironment(e68) : d(f26, e68) : new f26();
  }
  get extent() {
    var _a;
    return (_a = this.stateManager) == null ? void 0 : _a.extent;
  }
  set extent(e68) {
    this.stateManager && (this.stateManager.extent = e68);
  }
  get screenCenter() {
    var _a;
    return (_a = this.stateManager) == null ? void 0 : _a.screenCenter;
  }
  get frustum() {
    var _a;
    return (_a = this.stateManager) == null ? void 0 : _a.frustum;
  }
  get initialExtentRequired() {
    return this.stateManager && !this.stateManager.hasInitialView;
  }
  get _defaultsFromMapSettings() {
    return { required: { tileInfo: false, heightModelInfo: true, extent: false } };
  }
  get interacting() {
    var _a;
    return this.navigating || (((_a = this.toolViewManager) == null ? void 0 : _a.interacting) ?? false);
  }
  get stationary() {
    return !this.animation && !this.resizing && (null == this.state || this.state.stationary);
  }
  get navigating() {
    var _a;
    return ((_a = this.state) == null ? void 0 : _a.navigating) ?? false;
  }
  get padding() {
    var _a;
    return (_a = this.stateManager) == null ? void 0 : _a.padding;
  }
  set padding(e68) {
    this.stateManager && (this.stateManager.padding = e68);
  }
  set qualityProfile(e68) {
    t52.isValidProfile(e68) && (t52.apply(e68, this.qualitySettings), this._set("qualityProfile", e68));
  }
  get qualityProfile() {
    return this._get("qualityProfile") || t52.getDefaultProfile();
  }
  set slicePlane(e68) {
    if (null != this._stage && this._stage.renderer.setParameters({ slicePlane: e68 }), null == e68)
      return void this._set("slicePlane", null);
    const t71 = this._propertiesPool.get("slicePlane");
    Z2(e68, t71), this._set("slicePlane", t71);
  }
  get typeSpecificPreconditionsReady() {
    return !!this.viewingMode && this.stateManager.preinit(this.spatialReference);
  }
  get resolution() {
    return null != this.spatialReference ? o20(this.scale, this.spatialReference) : 0;
  }
  get scale() {
    var _a;
    return (_a = this.stateManager) == null ? void 0 : _a.scale;
  }
  set scale(e68) {
    this.stateManager && (this.stateManager.scale = e68);
  }
  get heightModelInfo() {
    const e68 = this.getDefaultHeightModelInfo();
    return null != e68 ? v7.deriveUnitFromSR(e68, this.spatialReference) : null;
  }
  get updating() {
    var _a, _b, _c, _d;
    if (this.destroyed)
      return false;
    let e68 = 0, t71 = this.layerViewManager.updating, i47 = t71 ? this.layerViewManager.updatingRemaining : 0;
    this.allLayerViews.forEach((r56) => {
      if (r56.isFulfilled()) {
        if (r56.updating) {
          if (t71 = true, r56.suspended || x10(r56))
            return;
          ++i47, e68 += r56.updatingProgress;
        }
      } else
        ++i47;
    });
    for (const s71 of this._updatingObjects)
      if (null != s71 && s71.updating) {
        const t72 = 0.1;
        i47 += t72, e68 += 0.5 * t72;
      }
    for (const s71 of this._updatingObjectsWithProgress)
      null != s71 && s71.updating && (++i47, e68 += s71.updatingProgress);
    const r55 = !this.stateManager.test.updatingIgnoreRenderState && this.state.updating;
    if (t71 = !!(t71 || i47 > 0 || this.updatingHandles.updating || !this.ready || !this.stationary || r55 || this._createGraphicsViewController || ((_a = this.inputManager) == null ? void 0 : _a.updating) || ((_c = (_b = this.map) == null ? void 0 : _b.allLayers) == null ? void 0 : _c.some((e69) => !e69.isFulfilled())) || ((_d = this.textures) == null ? void 0 : _d.updating)), t71 ? (this._numUpdating = Math.max(i47, this._numUpdating), e68 += this._numUpdating - i47) : this._numUpdating = 0, this._numUpdating > 0 ? e68 /= this._numUpdating : e68 = t71 ? 0 : 1, this._get("updatingProgress") !== e68) {
      const i48 = performance.now();
      if (e68 < 1) {
        const t72 = Math.min((i48 - this._lastUpdateTime) / 2e3, 1);
        e68 = this.updatingProgress * (1 - t72) + e68 * t72;
      }
      this._set("updatingProgress", e68), this._lastUpdateTime = t71 && e68 < 1 ? i48 : 0;
    }
    return t71;
  }
  get _updatingObjects() {
    return [this.graphicsView, this.basemapView, this._resourceController, this._stage, this.featureTiles, this.pointsOfInterest, this.environmentManager, this.overlay, this._featureTreeDebugger, this.toolViewManager, this.analysisViewManager];
  }
  get _updatingObjectsWithProgress() {
    return [this.deconflictor, this.labeler, this.basemapTerrain];
  }
  get viewingMode() {
    var _a;
    const e68 = this._predeterminedViewingMode;
    if (null != e68)
      return a13(e68);
    const t71 = this.spatialReference;
    return t71 ? null != ((_a = this.defaultsFromMap) == null ? void 0 : _a.viewingMode) && t71.equals(this.defaultsFromMap.spatialReference) ? a13(this.defaultsFromMap.viewingMode) : r24(t71, l8.Global) ? "global" : "local" : "global";
  }
  set viewingMode(e68) {
    this.ready ? n.getLogger(this).error("#viewingMode", "viewingMode cannot be set once view is ready") : this._overrideIfSome("viewingMode", e68);
  }
  get viewpoint() {
    var _a;
    return (_a = this.stateManager) == null ? void 0 : _a.viewpoint;
  }
  set viewpoint(e68) {
    this.stateManager && (this.stateManager.viewpoint = e68);
  }
  get zoom() {
    return this.stateManager.zoom;
  }
  set zoom(e68) {
    this.stateManager && (this.stateManager.zoom = e68);
  }
  get resourceController() {
    return this._resourceController;
  }
  get quality() {
    var _a, _b;
    return ((_b = (_a = this._resourceController) == null ? void 0 : _a.memoryController) == null ? void 0 : _b.memoryFactor) ?? 1;
  }
  get resolutionScale() {
    return Math.sqrt(Math.min(1, this.quality / 0.75));
  }
  get performanceInfo() {
    return new s58(this);
  }
  on(e68, t71, i47, r55) {
    const s71 = this.viewEvents.on(e68, t71, i47, r55);
    return s71 || super.on(e68, t71);
  }
  hasEventListener(e68) {
    return super.hasEventListener(e68) || this.viewEvents.hasHandler(e68);
  }
  toMap(e68, t71) {
    if (!this.ready)
      return n.getLogger(this).error("#toMap()", "Scene view cannot be used before it is ready"), null;
    const i47 = o23(e68) ? r19(this, e68) : e68;
    return I11(this, i47, t71, this._defaultToMapOptions);
  }
  toScreen(e68) {
    if (!this.ready)
      return n.getLogger(this).error("#toScreen()", "Scene view cannot be used before it is ready"), null;
    const t71 = (null == e68.z ? a22(this.elevationProvider, e68) : null) ?? 0;
    return c5(e68, rt4, this.renderSpatialReference, t71), this.state.camera.projectToScreen(rt4, st3), c3(st3[0], st3[1]);
  }
  pixelSizeAt(e68) {
    return this.ready ? e68 ? (c5(e68, rt4, this.renderSpatialReference), this.state.camera.computeScreenPixelSizeAt(rt4)) : 0 : (n.getLogger(this).error("#pixelSizeAt()", "Scene view cannot be used before it is ready"), null);
  }
  overlayPixelSizeInMapUnits(e68) {
    const t71 = this.basemapTerrain.overlayManager;
    return t71 ? t71.overlayPixelSizeInMapUnits(e68, () => this.pixelSizeAt(e68)) : 1;
  }
  hitTest(e68, t71) {
    if (!this.ready)
      return n.getLogger(this).error("#hitTest()", "Scene view cannot be used before it is ready"), null;
    const i47 = o23(e68) ? r19(this, e68) : e68;
    return U7(this, i47, t71, this._defaultHitTestOptions);
  }
  async popupHitTest(e68) {
    return t54(this, e68);
  }
  goTo(e68, t71) {
    return this.updatingHandles.addPromise(this.stateManager.goTo(e68, t71));
  }
  async whenAnalysisView(e68) {
    if (null == e68.parent)
      throw new s("view:no-analysisview-for-analysis", "The analysis has not been added to view.analyses", { analysis: e68 });
    switch (e68.parent.type) {
      case "line-of-sight":
      case "dimension":
        return (await this.whenLayerView(e68.parent)).whenAnalysisView();
      default:
        return this.analysisViewManager.whenAnalysisView(e68);
    }
  }
  whenLayerView(e68) {
    return super.whenLayerView(e68);
  }
  async takeScreenshot(e68) {
    const t71 = this._completeSettings(e68);
    await this.whenReady();
    const i47 = await this._stage.renderView.takeScreenshot(t71);
    return a20(i47, t71, this._pixelFormat());
  }
  async _takeScreenshot(e68) {
    const t71 = this._completeSettings(e68);
    await this.whenReady();
    const i47 = await this._stage.renderView.takeScreenshot(t71);
    return r20(i47, this._pixelFormat());
  }
  async _takeScreenshotWithObjectAndLayerId(e68) {
    const t71 = this._completeSettings(e68);
    await this.whenReady();
    const i47 = await this._stage.renderView.takeScreenshotWithOID(t71);
    return [r20(i47[0], this._pixelFormat()), r20(i47[1], this._pixelFormat())];
  }
  _completeSettings(e68) {
    const t71 = n25(e68, this);
    return t71.pixelRatio /= this.state.pixelRatio, M4(t71, this.supersampleScreenshotsEnabled, this.padding);
  }
  _pixelFormat() {
    return { flipY: true, premultipliedAlpha: this._stage.renderView.getAlpha() };
  }
  get test() {
    return { takeScreenshot: (e68) => this._takeScreenshot(e68), takeScreenshotWithObjectAndLayerId: (e68) => this._takeScreenshotWithObjectAndLayerId(e68) };
  }
  async takeScreenshotWithObjectAndLayerId(e68) {
    if (!has("enable-feature:objectAndLayerId-rendering"))
      throw new Error("has enable-feature:objectAndLayerId-rendering must be true");
    const t71 = this._completeSettings(e68);
    await this.whenReady();
    const i47 = await this._stage.renderView.takeScreenshotWithOID(t71), r55 = a20(i47[0], t71, this._pixelFormat()), s71 = this._completeSettings(e68);
    s71.format = "png";
    return [r55, a20(i47[1], s71, this._pixelFormat())];
  }
  getColorToObjectAndLayerIdMapping() {
    if (null == this._stage.renderView.objectAndLayerIdRenderHelper)
      throw new Error("has enable-feature:objectAndLayerId-rendering must be true");
    return this._stage.renderView.objectAndLayerIdRenderHelper.getColorToObjectAndLayerIdMapping();
  }
  addUpdatingPromise(e68) {
    return this.updatingHandles.addPromise(e68);
  }
  importLayerView(e68) {
    return l21.importLayerView(e68);
  }
  hasLayerViewModule(e68) {
    return l21.hasLayerViewModule(e68);
  }
  forceDOMReadyCycle() {
    this.forceReadyCycle();
  }
  getDefaultSpatialReference() {
    var _a, _b, _c;
    return this.map && "initialViewProperties" in this.map && ((_a = this.map.initialViewProperties) == null ? void 0 : _a.spatialReference) || ((_b = this.defaultsFromMap) == null ? void 0 : _b.spatialReference) || ((_c = this.defaultsFromMap) == null ? void 0 : _c.ready) && this._initialDefaultSpatialReference || null;
  }
  async validate() {
    let e68 = t31(this.type);
    const t71 = has("safari");
    if (t71 && t71 < 9 && (e68 = new s("sceneview:browser-not-supported", "This browser is not supported by SceneView (Safari < 9)", { type: "safari", requiredVersion: 9, detectedVersion: t71 })), null != e68)
      throw n.getLogger(this).warn("#validate()", e68.message), e68;
  }
  get _predeterminedViewingMode() {
    var _a;
    const e68 = this._isOverridden("viewingMode") ? this._get("viewingMode") : (this.map && "initialViewProperties" in this.map ? (_a = this.map.initialViewProperties) == null ? void 0 : _a.viewingMode : null) ?? null;
    return null != e68 ? o11(e68) : null;
  }
  getSpatialReferenceSupport({ spatialReference: e68, layer: t71 }) {
    const i47 = this._predeterminedViewingMode;
    if (null != i47)
      return this._validateSpatialReferenceForViewingMode(e68, t71, i47) ? { constraints: this._makeSpatialReferenceConstraints(e68, t71, i47) } : null;
    const r55 = this._validateSpatialReferenceForViewingMode(e68, t71, l8.Local), s71 = this._validateSpatialReferenceForViewingMode(e68, t71, l8.Global);
    return r55 || s71 ? r55 && s71 ? { constraints: this._makeSpatialReferenceConstraints(e68, t71, null) } : r55 ? { constraints: this._makeSpatialReferenceConstraints(e68, t71, l8.Local) } : { constraints: this._makeSpatialReferenceConstraints(e68, t71, l8.Global) } : null;
  }
  _validateSpatialReferenceForViewingMode(e68, t71, i47) {
    return !!r24(e68, i47) && (null == t71 || (!!v5(t71) || (!y4(t71) || null != v8(t71, e68, i47)) && (!h4(t71) || i47 !== l8.Global)));
  }
  _makeSpatialReferenceConstraints(e68, t71, i47) {
    if (null == t71)
      return [{ spatialReference: e68, viewingMode: i47 }];
    const r55 = e68.isWebMercator, s71 = e68.isWGS84;
    if (v5(t71) && (r55 || s71)) {
      return !s71 || i47 === l8.Local || null === j7(t71.tileInfo, t71.fullExtent, e68, l8.Global) ? [{ spatialReference: e68, viewingMode: i47 }, { spatialReference: f2.WebMercator, viewingMode: i47 }] : [{ spatialReference: r55 ? f2.WGS84 : f2.WebMercator, viewingMode: i47 }];
    }
    return y4(t71) || h4(t71) || !r55 && !s71 ? y4(t71) && r55 && i47 !== l8.Global ? [{ spatialReference: e68, viewingMode: i47 }, { spatialReference: f2.WGS84, viewingMode: l8.Local }] : [{ spatialReference: e68, viewingMode: i47 }] : [{ spatialReference: e68, viewingMode: i47 }, { spatialReference: r55 ? f2.WGS84 : f2.WebMercator, viewingMode: i47 }];
  }
  _validateSpatialReference(e68) {
    const t71 = null != this.getSpatialReferenceSupport({ spatialReference: e68 }), i47 = this._predeterminedViewingMode;
    return t71 || (null != i47 ? n.getLogger(this).warnOnce(`Spatial reference defined on view not supported in ${a13(i47)} viewing mode.`) : e68.isGeographic && n.getLogger(this).warnOnce("Spatial reference is geographic but not supported.")), t71;
  }
  whenReady() {
    return new Promise((e68) => {
      this.ready ? e68(this) : this._resolveWhenReady.push(e68);
    });
  }
  trackGraphicState(e68) {
    if (!e68.graphic)
      return n.getLogger(this).error("trackGraphicState", "GraphicState.graphic must not be null or undefined to start tracking"), null;
    const t71 = this.getViewForGraphic(e68.graphic);
    let i47 = null, r55 = false;
    const s71 = (t72) => {
      var _a;
      !r55 && null != t72 && "processor" in t72 && "graphics-3d" === ((_a = t72.processor) == null ? void 0 : _a.type) && t72.processor.graphicsCore && (i47 = t72.processor.graphicsCore.trackGraphicState(e68));
    };
    return null != t71 ? s71(t71) : this.whenViewForGraphic(e68.graphic, { waitForLayer: true }).then((e69) => s71(e69), () => {
    }).catch(() => {
    }), e3(() => {
      r55 = true, null != i47 && (i47.remove(), i47 = null);
    });
  }
  highlight(e68) {
    if (Array.isArray(e68))
      return o(e68.map((e69) => this.highlight(e69)));
    if (V.isCollection(e68))
      return o(e68.toArray().map((e69) => this.highlight(e69)));
    const t71 = this.getViewForGraphic(e68);
    return t71 && "highlight" in t71 ? t71.highlight(e68) : e3();
  }
  maskOccludee(e68) {
    if (!e68)
      return n.getLogger(this).error("maskOccludee", "GraphicState.graphic must not be null or undefined to mask an occludee"), null;
    const t71 = this.getViewForGraphic(e68);
    let i47 = null, r55 = false;
    const s71 = (t72) => {
      !r55 && null != t72 && e26(t72) && (i47 = t72.maskOccludee(e68));
    };
    return null != t71 ? s71(t71) : this.whenViewForGraphic(e68, { waitForLayer: true }).then((e69) => s71(e69), () => {
    }).catch(() => {
    }), e3(() => {
      r55 = true, null != i47 && (i47.remove(), i47 = null);
    });
  }
  getViewForGraphic(e68) {
    return e68.layer === this.graphics ? this.graphicsView : e68.layer ? this.allLayerViews.find((t71) => t71.layer === e68.layer) : null;
  }
  graphicChanged(e68) {
    null != this.graphicsView && this.graphicsView.graphicChanged(e68);
  }
  async whenViewForGraphic(e68, t71) {
    if (e68.layer === this)
      return await w(() => this.graphicsView), this.graphicsView;
    if (!e68.layer || !this.map)
      throw new s("no-view-for-graphic");
    return t71 && t71.waitForLayer && !this.map.allLayers.includes(e68.layer) ? new Promise((t72, i47) => {
      const r55 = this.map.allLayers.on("change", (s71) => {
        s71.added.includes(e68.layer) && (r55.remove(), this.whenLayerView(e68.layer).then(t72, i47));
      });
    }) : this.whenLayerView(e68.layer);
  }
  _initBasemapTerrain() {
    this._set("basemapTerrain", new Tt2({ view: this })), this._set("elevationProvider", new h27({ view: this })), this.elevationProvider.register("ground", this.basemapTerrain);
  }
  _exitBasemapTerrain() {
    this.basemapTerrain && (this.elevationProvider.unregister(this.basemapTerrain), this.elevationProvider.destroy(), this._set("elevationProvider", null), this.basemapTerrain.destroy(), this._set("basemapTerrain", null));
  }
  _initGlobe() {
    this._initCoordinateSystem(), this.state.createInitialCamera(), this._initBasemapTerrain(), this._set("pointsOfInterest", new P13({ view: this })), this._set("featureTiles", new w19({ renderCoordsHelper: this.renderCoordsHelper, cameraOnSurface: this.pointsOfInterest.cameraOnSurface, focus: this.pointsOfInterest.focus, tilingSchemeOwner: this.basemapTerrain, viewState: this.state, scheduler: this._resourceController.scheduler, terrain: this.basemapTerrain }));
    const e68 = () => {
      var _a;
      const e69 = (_a = this.basemapTerrain) == null ? void 0 : _a.extent;
      if (this.clippingArea || e69)
        if (e69 && this.basemapTerrain.spatialReference) {
          const e70 = null != this.basemapTerrain.extent && null != this.basemapTerrain.spatialReference ? B(c2(this.basemapTerrain.extent, this.basemapTerrain.spatialReference), this.spatialReference) : null;
          null != this.clippingArea ? this.featureTiles.filterExtent = this.clippingArea.intersection(e70) : this.featureTiles.filterExtent = e70;
        } else
          this.featureTiles.filterExtent = this.clippingArea;
      else
        this.featureTiles.filterExtent = null;
    };
    this.addHandles([this.updatingHandles.add(() => t20.FEATURE_TILE_TREE_SHOW_TILES, (e69) => {
      e69 && this.featureTiles && !this._featureTreeDebugger ? this.updatingHandles.addPromise(import("./FeatureTileTree3DDebugger-3SAVP6DT.js")).then(({ FeatureTileTree3DDebugger: e70 }) => {
        !this._featureTreeDebugger && t20.FEATURE_TILE_TREE_SHOW_TILES && (this._featureTreeDebugger = new e70({ view: this }));
      }) : e69 || !this._featureTreeDebugger || t20.FEATURE_TILE_TREE_SHOW_TILES || (this._featureTreeDebugger.destroy(), this._featureTreeDebugger = null);
    }, A3), this.updatingHandles.add(() => this.clippingArea, e68, A3), this.updatingHandles.add(() => this.basemapTerrain.extent, e68, A3)], "feature-tiles"), this.stateManager.init();
  }
  _exitGlobe() {
    this.state && (this.stateManager.exit(), this.removeHandles("render-coords-helper"), this.removeHandles("feature-tiles"), this.featureTiles.destroy(), this._set("featureTiles", null), this.pointsOfInterest.destroy(), this._set("pointsOfInterest", null), this._exitBasemapTerrain(), this.state.exit(), this._exitCoordinateSystem());
  }
  _initCoordinateSystem() {
    if (this.spatialReference) {
      const e68 = this.spatialReference;
      this.mapCoordsHelper && this.mapCoordsHelper.spatialReference.equals(e68) || this._set("mapCoordsHelper", new a42(this.map, e68));
      const t71 = this.state.isGlobal, i47 = z6(t71, e68);
      i47 !== this.renderSpatialReference && (this._set("renderCoordsHelper", v9.create(this.state.viewingMode, i47)), t71 || this.addHandles(d3(() => {
        var _a;
        return (_a = this.basemapTerrain) == null ? void 0 : _a.extent;
      }, (e69) => {
        const t72 = this.renderCoordsHelper.spatialReference;
        null == e69 || 0 === e69[0] && 0 === e69[1] && 0 === e69[2] && 0 === e69[3] || !i14(e69, this.basemapTerrain.spatialReference, at3, t72) || (this.renderCoordsHelper.extent = at3);
      }, C), "render-coords-helper"), this.sceneIntersectionHelper && this.sceneIntersectionHelper.setTolerance(E13 / this.renderCoordsHelper.unitInMeters));
    } else
      this._set("mapCoordsHelper", null), this._set("renderCoordsHelper", null);
  }
  _exitCoordinateSystem() {
    this.mapCoordsHelper && (this.removeHandles("render-coords-helper"), this._set("renderCoordsHelper", null), this._set("mapCoordsHelper", null));
  }
  _updatingChanged() {
    this.notifyChange("updating");
  }
  _updateUpdatingMonitors(e68 = null) {
    null != e68 && e68.type === E.MOVE || (this.removeHandles("updatingMonitors"), this.allLayerViews.forEach((e69) => {
      e69.destroyed || (this.addHandles(d3(() => [e69.updating, e69.updatingProgress], () => this._updatingChanged(), C), "updatingMonitors"), e69.when(() => this._updatingChanged(), () => this._updatingChanged()));
    }), this._updatingChanged());
  }
  async _prepareScreenshotOverlay() {
    this.overlay && await this.overlay.prepare();
  }
  _renderScreenshotOverlay(e68, t71, i47) {
    if (!this.overlay || !this.overlay.hasVisibleItems)
      return i47;
    const r55 = e68.getContext("2d");
    return r55.putImageData(i47, 0, 0), this.overlay.renderCanvas(e68, { disableDecorations: t71 === i6.OFF }), r55.getImageData(0, 0, i47.width, i47.height);
  }
  _initStage() {
    const e68 = { deactivatedWebGLExtensions: this.deactivatedWebGLExtensions, debugWebGLExtensions: this.debugWebGLExtensions, alpha: this.alphaCompositingEnabled, preserveDrawingBuffer: this.preserveDrawingBufferEnabled, canvas: this.renderCanvas, screenshot: { prepareOverlay: () => this._prepareScreenshotOverlay(), renderOverlay: (e69, t72, i48) => this._renderScreenshotOverlay(e69, t72, i48) } }, t71 = new U15(this.state.viewingMode, (e69) => this._stage.layers.forAll(e69), this);
    this._set("sceneIntersectionHelper", t71);
    const i47 = e7(this.surface);
    this._stage = new u45({ view: this, options: e68, container: i47 }), this._stage.renderer.setParameters({ slicePlane: this.slicePlane }), this.addHandles([this.updatingHandles.add(() => this.qualitySettings.highQualityTransparency, (e69) => this._stage.renderer.setParameters({ highQualityTransparency: e69 }), P), d3(() => this.magnifier, (e69) => this._stage.renderView.magnifier = e69, A3), this.on("pointer-move", () => {
      var _a;
      return (_a = this._stage) == null ? void 0 : _a.renderer.resetAnimation();
    }), o2(this._stage.renderView.canvas, "webglcontextlost", (e69) => {
      this.fatalError = new s("webgl-context-lost", e69.statusMessage);
    })], "stage"), this.renderCoordsHelper && this.sceneIntersectionHelper.setTolerance(E13 / this.renderCoordsHelper.unitInMeters), this._set("canvas", this._stage.renderView.canvas);
  }
  _exitStage() {
    this._set("sceneIntersectionHelper", null), this._stage = u(this._stage), this.removeHandles("stage"), this._set("canvas", null);
  }
  _initSurface(e68) {
    this._exitSurface(), this.state.init(e68, this.spatialReference), this._initStage(), this._initGlobe(), this.sharedSymbolResources = new S16({ view: this, viewingMode: e68, resourceController: this._resourceController, pointsOfInterest: this.pointsOfInterest, viewState: this.state });
  }
  _exitSurface() {
    this.sharedSymbolResources && (this.sharedSymbolResources.objectResourceCache.destroy(), this.sharedSymbolResources.destroy(), this.sharedSymbolResources = null, this._exitGlobe(), this._exitStage());
  }
  _createGraphicsViewIfNeeded() {
    if (this.graphicsView || this._createGraphicsViewController)
      return;
    if (0 === this.graphics.length)
      return;
    this.removeHandles("graphics-view"), this._createGraphicsViewController = new AbortController();
    const e68 = () => {
      this._createGraphicsViewController = null, this._updatingChanged();
    };
    this._createGraphicsViewAsync(this._createGraphicsViewController.signal).then(e68, e68), this._updatingChanged();
  }
  async _createGraphicsViewAsync(e68) {
    const t71 = (await import("./GraphicsView3D-F25KJTNM.js")).default;
    s3(e68), await w(() => {
      var _a;
      return (_a = this.basemapTerrain) == null ? void 0 : _a.ready;
    }, e68), this._set("graphicsView", new t71({ view: this }));
  }
  _disposeGraphicsView() {
    this._createGraphicsViewController && (this._createGraphicsViewController.abort(), this._createGraphicsViewController = null), this.removeHandles("graphics-view"), null != this.graphicsView && (this.removeHandles(this.graphicsView.processor.layer.id), this.graphicsView.destroy(), this._set("graphicsView", null));
  }
  _startup() {
    var _a;
    const e68 = o11(this.viewingMode);
    e68 === l8.Global && (this._clippingArea = null), this._initSurface(e68), this._set("ready", true), this.addHandles(v3(() => this.graphics, "after-changes", () => this._createGraphicsViewIfNeeded()), "graphics-view"), this._createGraphicsViewIfNeeded();
    const t71 = this.map && "initialViewProperties" in this.map ? (_a = this.map.initialViewProperties) == null ? void 0 : _a.environment : void 0;
    t71 && n37(this.environment, t71), this.labeler.setup(), this.environmentManager.connectView(this), this.inputManager.connect(), this._set("textures", new i40(this._stage, this.resourceController.scheduler));
    const i47 = this._resolveWhenReady;
    this._resolveWhenReady = [], i47.forEach((e69) => e69(this));
  }
  _teardown() {
    this._initialDefaultSpatialReference = null, this.inputManager.disconnect(), this.environmentManager.disconnectView(), this.labeler.dispose(), this._disposeGraphicsView(), this.removeHandles("graphics-view"), this._set("textures", u(this.textures)), this._exitSurface(), this._set("ready", false);
  }
  _updateDefaultToMapOptions() {
    if (this._defaultToMapOptions.include.clear(), this.map) {
      this.map.ground && this._defaultToMapOptions.include.add(w9);
      for (const e68 of this.map.allLayers.items)
        m5(e68.type) && this._defaultToMapOptions.include.add(e68.uid);
    }
  }
  _updateDefaultHitTestOptions() {
    if (this._defaultHitTestOptions.exclude.clear(), this.map) {
      this.map.ground && this.map.ground.opacity < 1 && this._defaultHitTestOptions.exclude.add(w9);
      for (const e68 of this.map.allLayers.items)
        m5(e68.type) && e68.opacity < 1 && this._defaultHitTestOptions.exclude.add(e68.uid);
    }
  }
};
function it4(e68, t71) {
  return null != e68 && F(e68.spatialReference, t71) ? B(e68, t71) : null;
}
tt3.type = "3d", e([y2()], tt3.prototype, "_userClippingArea", void 0), e([y2()], tt3.prototype, "_resourceController", void 0), e([y2()], tt3.prototype, "_stage", void 0), e([y2({ readOnly: true })], tt3.prototype, "deconflictor", void 0), e([y2({ readOnly: true })], tt3.prototype, "labeler", void 0), e([y2(l12(t25, "analyses"))], tt3.prototype, "analyses", void 0), e([y2({ type: a19, readOnly: true })], tt3.prototype, "animation", null), e([y2({ readOnly: true })], tt3.prototype, "basemapTerrain", void 0), e([y2({ readOnly: true })], tt3.prototype, "elevationProvider", void 0), e([y2()], tt3.prototype, "camera", null), e([y2({ type: d11 })], tt3.prototype, "contentCamera", null), e([y2({ readOnly: true })], tt3.prototype, "canvas", void 0), e([y2({ type: x })], tt3.prototype, "center", null), e([y2({ type: w2 })], tt3.prototype, "clippingArea", null), e([y2({ type: c24 })], tt3.prototype, "constraints", void 0), e([y2({ type: w2, readOnly: true })], tt3.prototype, "renderDataExtent", null), e([y2({ type: w2, readOnly: true })], tt3.prototype, "dataExtent", null), e([y2({ type: w2, readOnly: true })], tt3.prototype, "_groundAndLayersExtent", null), e([y2({ type: f26 })], tt3.prototype, "environment", void 0), e([s4("environment")], tt3.prototype, "castEnvironment", null), e([y2({ readOnly: true })], tt3.prototype, "environmentManager", void 0), e([y2({ type: w2 })], tt3.prototype, "extent", null), e([y2()], tt3.prototype, "floors", void 0), e([y2()], tt3.prototype, "screenCenter", null), e([y2()], tt3.prototype, "frustum", null), e([y2({ type: Number, readOnly: true })], tt3.prototype, "fullOpacity", void 0), e([y2({ readOnly: true })], tt3.prototype, "graphicsView", void 0), e([y2({ readOnly: true })], tt3.prototype, "analysisViewManager", void 0), e([y2()], tt3.prototype, "groundView", void 0), e([y2({ type: Boolean })], tt3.prototype, "initialExtentRequired", null), e([y2()], tt3.prototype, "_defaultsFromMapSettings", null), e([y2()], tt3.prototype, "interacting", null), e([y2()], tt3.prototype, "stationary", null), e([y2()], tt3.prototype, "navigating", null), e([y2()], tt3.prototype, "map", void 0), e([y2({ readOnly: true })], tt3.prototype, "mapCoordsHelper", void 0), e([y2()], tt3.prototype, "padding", null), e([y2({ type: P13, readOnly: true })], tt3.prototype, "pointsOfInterest", void 0), e([y2({ type: w19, readOnly: true })], tt3.prototype, "featureTiles", void 0), e([y2()], tt3.prototype, "_featureTreeDebugger", void 0), e([y2({ type: Boolean })], tt3.prototype, "screenSizePerspectiveEnabled", void 0), e([y2({ constructOnly: true })], tt3.prototype, "deactivatedWebGLExtensions", void 0), e([y2({ constructOnly: true })], tt3.prototype, "debugWebGLExtensions", void 0), e([y2({ constructOnly: true })], tt3.prototype, "renderCanvas", void 0), e([y2({ constructOnly: true })], tt3.prototype, "state", void 0), e([y2({ readOnly: true })], tt3.prototype, "inputManager", void 0), e([y2({ readOnly: true })], tt3.prototype, "stateManager", void 0), e([y2({ type: ["low", "medium", "high"] })], tt3.prototype, "qualityProfile", null), e([y2({ type: c36, get() {
  let e68 = this._get("qualitySettings");
  return e68 || (e68 = new c36(), t52.apply(this.qualityProfile, e68)), e68;
} })], tt3.prototype, "qualitySettings", void 0), e([y2()], tt3.prototype, "slicePlane", null), e([y2({ readOnly: true })], tt3.prototype, "typeSpecificPreconditionsReady", null), e([y2({ readOnly: true })], tt3.prototype, "renderCoordsHelper", void 0), e([y2({ readOnly: true })], tt3.prototype, "sceneIntersectionHelper", void 0), e([y2({ type: Number, dependsOn: ["scale", "spatialReference"], readOnly: true })], tt3.prototype, "resolution", null), e([y2({ type: Number })], tt3.prototype, "scale", null), e([y2()], tt3.prototype, "heightModelInfo", null), e([y2()], tt3.prototype, "spatialReference", void 0), e([y2({ type: Boolean, constructOnly: true })], tt3.prototype, "alphaCompositingEnabled", void 0), e([y2({ constructOnly: true })], tt3.prototype, "preserveDrawingBufferEnabled", void 0), e([y2({ type: Boolean })], tt3.prototype, "supersampleScreenshotsEnabled", void 0), e([y2({ readOnly: true })], tt3.prototype, "type", void 0), e([y2(), s4((e68) => e68 instanceof u11 ? e68 : v2(c43, e68))], tt3.prototype, "ui", void 0), e([y2({ type: Boolean, readOnly: true, dependsOn: ["graphicsView.updating", "basemapView.updating", "basemapTerrain.updating", "layerViewManager.updating", "layerViewManager.updatingRemaining", "_resourceController.updating", "_stage.updating", "featureTiles.updating", "pointsOfInterest.updating", "environmentManager.updating", "overlay.updating", "updatingHandles.updating", "featureTreeDebugger.updating", "labeler.updating", "deconflictor.updating", "ready", "stationary", "inputManager.updating", "toolViewManager.updating", "analysisViewManager.updating", "state.updating", "textures.updating"] })], tt3.prototype, "updating", null), e([y2()], tt3.prototype, "_updatingObjects", null), e([y2()], tt3.prototype, "_updatingObjectsWithProgress", null), e([y2({ type: Number, readOnly: true, dependsOn: ["updating"] })], tt3.prototype, "updatingProgress", void 0), e([y2({ type: ["global", "local"] })], tt3.prototype, "viewingMode", null), e([y2({ type: l13 })], tt3.prototype, "viewpoint", null), e([y2({ type: Number })], tt3.prototype, "zoom", null), e([y2({ type: y19 })], tt3.prototype, "highlightOptions", void 0), e([y2({ readOnly: true })], tt3.prototype, "quality", null), e([y2({ readOnly: true })], tt3.prototype, "resolutionScale", null), e([y2()], tt3.prototype, "textures", void 0), tt3 = e([a4("esri.views.SceneView")], tt3);
var rt4 = n7();
var st3 = i4();
var at3 = u5();
var nt3 = tt3;

export {
  d23 as d,
  a32 as a,
  nt3 as nt
};
//# sourceMappingURL=chunk-LYSDX3JQ.js.map
