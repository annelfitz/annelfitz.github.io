{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/components/src/utils/t9n.ts"],
  "sourcesContent": ["import { Build, getAssetPath } from \"@stencil/core\";\nimport { getSupportedLocale, LocalizedComponent } from \"./locale\";\n\nexport type MessageBundle = Record<string, string>;\n\nexport const componentLangToMessageBundleCache: Record<string, Promise<MessageBundle>> = {};\n\nasync function getMessageBundle(lang: string, component: string): Promise<MessageBundle> {\n  const key = `${component}_${lang}`;\n\n  if (componentLangToMessageBundleCache[key]) {\n    return componentLangToMessageBundleCache[key];\n  }\n\n  componentLangToMessageBundleCache[key] = fetch(getAssetPath(`./assets/${component}/t9n/messages_${lang}.json`))\n    .then((resp) => {\n      if (!resp.ok) {\n        throwMessageFetchError();\n      }\n      return resp.json();\n    })\n    .catch(() => throwMessageFetchError());\n\n  return componentLangToMessageBundleCache[key];\n}\n\nfunction throwMessageFetchError(): never {\n  throw new Error(\"could not fetch component message bundle\");\n}\n\nfunction mergeMessages(component: T9nComponent): void {\n  component.messages = {\n    ...component.defaultMessages,\n    ...component.messageOverrides,\n  };\n}\n\n/**\n * This utility sets up the messages used by the component. It should be awaited in the `componentWillLoad` lifecycle hook.\n *\n * @param component\n */\nexport async function setUpMessages(component: T9nComponent): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, component.effectiveLocale);\n  mergeMessages(component);\n}\n\nasync function fetchMessages(component: T9nComponent, lang: string): Promise<MessageBundle> {\n  if (!Build.isBrowser) {\n    return {};\n  }\n\n  const { el } = component;\n  const tag = el.tagName.toLowerCase();\n  const componentName = tag.replace(\"calcite-\", \"\");\n\n  return getMessageBundle(getSupportedLocale(lang, \"t9n\"), componentName);\n}\n\n/**\n * This utility must be set up for the component to update its default message bundle if the locale changes.\n *\n * It can be set up in **either** of the following ways:\n *\n * 1. called from `LocalizedComponent`'s `onLocaleChange` method or\n * 2. called from a watcher configured to watch `LocalizedComponent`'s `effectiveLocale` prop\n *\n * @param component\n * @param lang\n */\nexport async function updateMessages(component: T9nComponent, lang: string): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, lang);\n  mergeMessages(component);\n}\n\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback`\n *\n * **Note**: this must be called after `LocalizedComponent`'s `connectLocalized` method.\n *\n * @param component\n */\nexport function connectMessages(component: T9nComponent): void {\n  component.onMessagesChange = defaultOnMessagesChange;\n}\n\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectMessages(component: T9nComponent): void {\n  component.onMessagesChange = undefined;\n}\n\n/**\n * This interface enables components to support built-in translation strings.\n *\n * **Notes**:\n *\n * This requires `LocalizedComponent` to be implemented.\n * To avoid unnecessary lookups, composite components should set `lang` on internal t9n components.\n */\nexport interface T9nComponent extends LocalizedComponent {\n  el: HTMLElement;\n\n  /**\n   * This property holds all messages used by the component's rendering.\n   *\n   * This prop should use the `@Prop` decorator. It uses `@Prop` decorator for testing purpose only.\n   */\n  messages: MessageBundle;\n\n  /**\n   * This property holds the component's default messages.\n   */\n  defaultMessages: MessageBundle;\n\n  /**\n   * This property holds all user message overrides.\n   *\n   * This prop should use the `@Prop` decorator.\n   */\n  messageOverrides: Partial<MessageBundle>;\n\n  /**\n   * This private method ensures messages are kept in sync.\n   *\n   * This method should be empty and configured to watch for changes on  `messageOverrides` property.\n   *\n   * @Watch(\"messageOverrides\")\n   * onMessagesChange(): void {\n   *  \\/* wired up by t9n util *\\/\n   * }\n   */\n  onMessagesChange(): void;\n}\n\nfunction defaultOnMessagesChange(this: T9nComponent): void {\n  mergeMessages(this);\n}\n"],
  "mappings": ";;;;;;;;;AAKO,IAAM,oCAA4E,CAAA;AAEzF,eAAe,iBAAiB,MAAc,WAAiB;AAC7D,QAAM,MAAM,GAAG,SAAS,IAAI,IAAI;AAEhC,MAAI,kCAAkC,GAAG,GAAG;AAC1C,WAAO,kCAAkC,GAAG;;AAG9C,oCAAkC,GAAG,IAAI,MAAM,aAAa,YAAY,SAAS,iBAAiB,IAAI,OAAO,CAAC,EAC3G,KAAK,CAAC,SAAI;AACT,QAAI,CAAC,KAAK,IAAI;AACZ,6BAAsB;;AAExB,WAAO,KAAK,KAAI;GACjB,EACA,MAAM,MAAM,uBAAsB,CAAE;AAEvC,SAAO,kCAAkC,GAAG;AAC9C;AAEA,SAAS,yBAAsB;AAC7B,QAAM,IAAI,MAAM,0CAA0C;AAC5D;AAEA,SAAS,cAAc,WAAuB;AAC5C,YAAU,WAAW;IACnB,GAAG,UAAU;IACb,GAAG,UAAU;;AAEjB;AAOO,eAAe,cAAc,WAAuB;AACzD,YAAU,kBAAkB,MAAM,cAAc,WAAW,UAAU,eAAe;AACpF,gBAAc,SAAS;AACzB;AAEA,eAAe,cAAc,WAAyB,MAAY;AAChE,MAAI,CAAC,MAAM,WAAW;AACpB,WAAO,CAAA;;AAGT,QAAM,EAAE,GAAE,IAAK;AACf,QAAM,MAAM,GAAG,QAAQ,YAAW;AAClC,QAAM,gBAAgB,IAAI,QAAQ,YAAY,EAAE;AAEhD,SAAO,iBAAiB,mBAAmB,MAAM,KAAK,GAAG,aAAa;AACxE;AAaO,eAAe,eAAe,WAAyB,MAAY;AACxE,YAAU,kBAAkB,MAAM,cAAc,WAAW,IAAI;AAC/D,gBAAc,SAAS;AACzB;SAWgB,gBAAgB,WAAuB;AACrD,YAAU,mBAAmB;AAC/B;SASgB,mBAAmB,WAAuB;AACxD,YAAU,mBAAmB;AAC/B;AA6CA,SAAS,0BAAuB;AAC9B,gBAAc,IAAI;AACpB;",
  "names": []
}
