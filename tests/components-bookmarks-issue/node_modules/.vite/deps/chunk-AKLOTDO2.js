import {
  e
} from "./chunk-6AQIVLDN.js";
import {
  c
} from "./chunk-I5RCKVDX.js";
import {
  o
} from "./chunk-6CWL7BCV.js";
import {
  a
} from "./chunk-7RBRCL6S.js";
import {
  k
} from "./chunk-J2EGIWT6.js";

// node_modules/@arcgis/core/support/timeUtils.js
function l(t) {
  return void 0 !== t.timeInfo;
}
async function s(t, e2) {
  var _a;
  const { fullTimeExtent: n } = ((_a = t.widgets) == null ? void 0 : _a.timeSlider) ?? {};
  return n || a2(t.allLayers, e2);
}
function u(t) {
  const e2 = t.numThumbs ?? 2, n = t.currentTimeExtent;
  if (n) {
    const { start: t2, end: i } = n;
    return null != t2 && null != i && t2.getTime() === i.getTime() ? "instant" : 2 === e2 ? "time-window" : null == t2 || 0 === t2.getTime() ? "cumulative-from-start" : "cumulative-from-end";
  }
  return 2 === e2 ? "time-window" : "cumulative-from-start";
}
function o2(t) {
  const { numStops: e2, stopInterval: i, stops: r } = t;
  return r ? { dates: a(r) } : i ? { interval: i.clone() } : { count: e2 ?? 5 };
}
async function a2(n, i) {
  var _a;
  if (0 === n.length)
    return c.allTime;
  const r = n.filter(l);
  await Promise.all(r.map((t) => t.load({ signal: i })));
  const s2 = [], u2 = [];
  for (const t of r)
    "feature" !== (t == null ? void 0 : t.type) && "map-image" !== (t == null ? void 0 : t.type) || !((_a = t.timeInfo) == null ? void 0 : _a.hasLiveData) ? u2.push(t) : s2.push(t);
  const o3 = (t) => null == t || t.isAllTime, a3 = u2.map((t) => {
    var _a2;
    return (_a2 = t.timeInfo) == null ? void 0 : _a2.fullTimeExtent;
  });
  if (a3.some(o3))
    return c.allTime;
  const m2 = s2.map(async (t) => {
    var _a2;
    const { timeExtent: e2 } = await t.fetchRecomputedExtents({ signal: i });
    return e2 || ((_a2 = t.timeInfo) == null ? void 0 : _a2.fullTimeExtent);
  }), f2 = (await Promise.allSettled(m2)).map((t) => "fulfilled" === t.status ? t.value : null);
  if (f2.some(o3))
    return c.allTime;
  return [...f2, ...a3].filter(k).reduce((t, e2) => t.union(e2));
}
function m(e2, n) {
  const i = e2.currentTimeExtent;
  if (!i)
    return null;
  const { start: r, end: l2 } = i, s2 = r ?? l2 ?? null;
  switch (n) {
    case "time-window":
      return new c({ start: r, end: l2 });
    case "cumulative-from-start":
      return new c({ start: null, end: s2 });
    case "cumulative-from-end":
      return new c({ start: s2, end: null });
    case "instant":
      return new c({ start: s2, end: s2 });
  }
}
async function f(t, e2) {
  var _a;
  if (null == t || !e(t))
    return null;
  await t.load({ signal: e2 });
  const n = (_a = t == null ? void 0 : t.widgets) == null ? void 0 : _a.timeSlider;
  if (!n)
    return null;
  const i = await s(t, e2), l2 = n.loop, a3 = u(n);
  return { fullTimeExtent: i, loop: l2, mode: a3, playRate: n.stopDelay ?? 2e3, stops: o2(n), timeExtent: m(n, a3) };
}
function c2(e2) {
  if (!e2)
    return e2;
  const { start: n, end: r } = e2;
  return new c({ start: null != n ? o(n, -n.getTimezoneOffset(), "minutes") : n, end: null != r ? o(r, -r.getTimezoneOffset(), "minutes") : r });
}
function d(e2) {
  if (!e2)
    return e2;
  const { start: n, end: r } = e2;
  return new c({ start: null != n ? o(n, n.getTimezoneOffset(), "minutes") : n, end: null != r ? o(r, r.getTimezoneOffset(), "minutes") : r });
}

export {
  a2 as a,
  f,
  c2 as c,
  d
};
//# sourceMappingURL=chunk-AKLOTDO2.js.map
