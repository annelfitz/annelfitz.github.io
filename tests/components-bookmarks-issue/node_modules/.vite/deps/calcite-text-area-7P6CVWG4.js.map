{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/components/src/components/text-area/resources.ts", "../../@esri/calcite-components/dist/components/src/components/text-area/text-area.scss?tag=calcite-text-area&encapsulation=shadow", "../../@esri/calcite-components/dist/components/src/components/text-area/text-area.tsx"],
  "sourcesContent": ["export const CSS = {\n  assistiveText: \"assistive-text\",\n  characterLimit: \"character-limit\",\n  content: \"content\",\n  container: \"container\",\n  footer: \"footer\",\n  resizeDisabled: \"resize--disabled\",\n  resizeDisabledX: \"resize--disabled-x\",\n  resizeDisabledY: \"resize--disabled-y\",\n  characterOverLimit: \"character--over-limit\",\n  readOnly: \"readonly\",\n  textAreaInvalid: \"text-area--invalid\",\n  footerSlotted: \"footer--slotted\",\n  borderColor: \"border--color\",\n  hide: \"hide\",\n  blockSizeFull: \"block-size--full\",\n  footerEndSlotOnly: \"footer--end-only\",\n};\n\nexport const SLOTS = {\n  footerStart: \"footer-start\",\n  footerEnd: \"footer-end\",\n};\n\nexport const RESIZE_TIMEOUT = 100;\n", ":host {\n  @apply inline-block\n  relative\n  w-full\n  h-full;\n}\n\ntextarea {\n  @apply text-color-1\n  relative\n  block\n  bg-foreground-1\n  box-border\n  border-color-input\n  border\n  font-sans\n  w-full\n  m-0;\n  min-inline-size: theme(\"spacing.48\");\n  border-block-end: 1px solid var(--calcite-color-border-3);\n  @media screen and (max-width: 480px) {\n    @apply resize-none;\n  }\n  &:focus {\n    @apply focus-inset;\n  }\n  &.text-area--invalid {\n    @apply border-color-danger\n    border\n    border-solid\n    border-b;\n    &:focus {\n      @apply focus-inset-danger;\n    }\n  }\n  &.footer--slotted {\n    min-inline-size: theme(\"spacing.72\");\n  }\n}\n\n.footer {\n  @apply flex\n  bg-foreground-1\n  box-border\n  border-color-input\n  border\n  border-solid\n  border-t-0\n  items-center;\n}\n\n.character-limit {\n  @apply flex\n  justify-end\n  text-color-2\n  items-center\n  font-normal\n  whitespace-nowrap;\n}\n\n.character--over-limit {\n  @apply font-bold\n  text-danger;\n}\n\n:host([resize=\"none\"]) textarea {\n  @apply resize-none;\n}\n\n:host([resize=\"horizontal\"]) textarea {\n  @apply resize-x;\n}\n\n:host([resize=\"vertical\"]) textarea {\n  @apply resize-y;\n}\n\n:host([scale=\"s\"]) {\n  @apply text-n2;\n  .footer {\n    @apply py-1\n    px-2;\n    min-block-size: 1.75rem;\n  }\n  textarea {\n    @apply py-1\n    px-2;\n  }\n}\n\n:host([scale=\"s\"]) {\n  textarea,\n  .footer,\n  .character-limit {\n    @apply text-n2\n    pl-2;\n  }\n}\n\n:host([scale=\"m\"]) {\n  textarea {\n    @apply py-2\n    px-3;\n  }\n  .footer {\n    @apply py-2\n    px-3;\n    min-block-size: 2.25rem;\n  }\n}\n\n:host([scale=\"m\"]) {\n  textarea,\n  .footer,\n  .character-limit {\n    @apply text-n1\n    pl-3;\n  }\n}\n\n:host([scale=\"l\"]) {\n  @apply text-0;\n  textarea {\n    @apply py-3\n    px-4;\n  }\n  .footer {\n    @apply py-3\n    px-4;\n    min-block-size: 2.75rem;\n  }\n}\n\n:host([scale=\"l\"]) {\n  textarea,\n  .footer,\n  .character-limit {\n    @apply text-0\n    pl-4;\n  }\n}\n\n:host([status=\"invalid\"]) {\n  textarea {\n    @apply border-color-danger;\n  }\n  textarea:focus {\n    @apply focus-inset-danger;\n  }\n}\n\n.readonly {\n  @apply bg-background font-medium;\n}\n\n:host([disabled]) {\n  textarea,\n  footer {\n    @apply opacity-50;\n  }\n}\n\n.border--color {\n  @apply border-b border-color-input;\n  &:focus {\n    @apply border-b-2;\n  }\n}\n\ntextarea.block-size--full {\n  @apply h-full;\n}\n\n.content,\n.hide {\n  @apply hidden;\n}\n\n.container {\n  @apply flex\n  justify-between\n  w-full;\n}\n\n.footer--end-only {\n  @apply justify-end;\n}\n\n.assistive-text {\n  @apply sr-only;\n}\n\n@include form-validation-message();\n@include hidden-form-input();\n@include disabled();\n@include base-component();\n", "import {\n  Component,\n  h,\n  Prop,\n  Element,\n  Event,\n  EventEmitter,\n  VNode,\n  Watch,\n  Method,\n  Host,\n  State,\n} from \"@stencil/core\";\nimport { connectForm, disconnectForm, FormComponent, HiddenFormInputSlot } from \"../../utils/form\";\nimport { connectLabel, disconnectLabel, getLabelText, LabelableComponent } from \"../../utils/label\";\nimport { slotChangeHasAssignedElement, toAriaBoolean } from \"../../utils/dom\";\nimport { CSS, SLOTS, RESIZE_TIMEOUT } from \"./resources\";\nimport {\n  connectLocalized,\n  disconnectLocalized,\n  LocalizedComponent,\n  NumberingSystem,\n  numberStringFormatter,\n} from \"../../utils/locale\";\nimport { createObserver } from \"../../utils/observers\";\nimport {\n  componentFocusable,\n  componentLoaded,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { TextAreaMessages } from \"./assets/text-area/t9n\";\nimport { throttle } from \"lodash-es\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { CharacterLengthObj } from \"./interfaces\";\nimport { guid } from \"../../utils/guid\";\nimport { Status } from \"../interfaces\";\nimport { Validation } from \"../functional/Validation\";\nimport { syncHiddenFormInput, TextualInputComponent } from \"../input/common/input\";\n\n/**\n * @slot - A slot for adding text.\n * @slot footer-start - A slot for adding content to the start of the component's footer.\n * @slot footer-end - A slot for adding content to the end of the component's footer.\n */\n\n@Component({\n  tag: \"calcite-text-area\",\n  styleUrl: \"text-area.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class TextArea\n  implements\n    FormComponent,\n    LabelableComponent,\n    LocalizedComponent,\n    LoadableComponent,\n    T9nComponent,\n    InteractiveComponent,\n    Omit<TextualInputComponent, \"pattern\">\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, the component is focused on page load. Only one element can contain `autofocus`. If multiple elements have `autofocus`, the first element will receive focus.\n   *\n   * @mdn [autofocus](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus)\n   */\n  @Prop({ reflect: true }) autofocus = false;\n\n  /**\n   * Specifies the component's number of columns.\n   *\n   * @mdn [cols](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-cols)\n   */\n  @Prop({ reflect: true }) columns: number;\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   *\n   * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * The `id` of the form that will be associated with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   */\n  @Prop({ reflect: true })\n  form: string;\n\n  /**\n   * When `true`, number values are displayed with a group separator corresponding to the language and country format.\n   */\n  @Prop({ reflect: true }) groupSeparator = false;\n\n  /**\n   * Accessible name for the component.\n   */\n  @Prop() label: string;\n\n  /**\n   * Specifies the minimum number of characters allowed.\n   *\n   * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-minlength)\n   */\n  @Prop({ reflect: true }) minLength: number;\n\n  /**\n   * Specifies the maximum number of characters allowed.\n   *\n   * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-maxlength)\n   */\n  @Prop({ reflect: true }) maxLength: number;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: TextAreaMessages;\n\n  /** Specifies the validation message to display under the component. */\n  @Prop() validationMessage: string;\n\n  /** Specifies the validation icon to display under the component. */\n  @Prop({ reflect: true }) validationIcon: string | boolean;\n\n  /**\n   * Specifies the name of the component.\n   *\n   * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-name)\n   */\n  @Prop({ reflect: true }) name: string;\n\n  /**\n   * Specifies the Unicode numeral system used by the component for localization.\n   */\n  @Prop() numberingSystem: NumberingSystem;\n\n  /**\n   * Specifies the placeholder text for the component.\n   *\n   * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-placeholder)\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * When `true`, the component's `value` can be read, but cannot be modified.\n   *\n   * @readonly\n   * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)\n   */\n  @Prop({ reflect: true }) readOnly = false;\n\n  /**\n   * When `true`, the component must have a value in order for the form to submit.\n   *\n   * @mdn [required]https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required\n   */\n  @Prop({ reflect: true }) required = false;\n\n  /** Specifies if the component is resizable. */\n  @Prop({ reflect: true }) resize: \"both\" | \"horizontal\" | \"vertical\" | \"none\" = \"both\";\n\n  /**\n   * Specifies the component's number of rows.\n   *\n   * @mdn [rows](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-rows)\n   */\n  @Prop({ reflect: true }) rows: number;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: \"l\" | \"m\" | \"s\" = \"m\";\n\n  /** Specifies the status of the input field, which determines message and icons. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  /** The component's value. */\n  @Prop({ mutable: true }) value = \"\";\n\n  /**\n   * Specifies the wrapping mechanism for the text.\n   *\n   * @mdn [wrap](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-wrap)\n   */\n  @Prop({ reflect: true }) wrap: \"soft\" | \"hard\" = \"soft\";\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<TextAreaMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Event Emitters\n  //\n  //--------------------------------------------------------------------------\n  /**\n   * Fires each time a new `value` is typed.\n   */\n  @Event() calciteTextAreaInput: EventEmitter<void>;\n\n  /**\n   * Fires each time a new `value` is typed and committed.\n   */\n  @Event() calciteTextAreaChange: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectInteractive(this);\n    connectLabel(this);\n    connectForm(this);\n    connectLocalized(this);\n    connectMessages(this);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n    this.setTextAreaHeight();\n  }\n\n  disconnectedCallback(): void {\n    disconnectInteractive(this);\n    disconnectLabel(this);\n    disconnectForm(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    this.resizeObserver?.disconnect();\n  }\n\n  render(): VNode {\n    const hasFooter = this.startSlotHasElements || this.endSlotHasElements || !!this.maxLength;\n    return (\n      <Host>\n        <InteractiveContainer disabled={this.disabled}>\n          <textarea\n            aria-describedby={this.guid}\n            aria-invalid={toAriaBoolean(this.isCharacterLimitExceeded())}\n            aria-label={getLabelText(this)}\n            autofocus={this.autofocus}\n            class={{\n              [CSS.readOnly]: this.readOnly,\n              [CSS.textAreaInvalid]: this.isCharacterLimitExceeded(),\n              [CSS.footerSlotted]: this.endSlotHasElements && this.startSlotHasElements,\n              [CSS.blockSizeFull]: !hasFooter,\n              [CSS.borderColor]: !hasFooter,\n            }}\n            cols={this.columns}\n            disabled={this.disabled}\n            name={this.name}\n            onChange={this.handleChange}\n            onInput={this.handleInput}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            required={this.required}\n            rows={this.rows}\n            value={this.value}\n            wrap={this.wrap}\n            // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n            ref={this.setTextAreaEl}\n          />\n          <span class={{ [CSS.content]: true }}>\n            <slot onSlotchange={this.contentSlotChangeHandler} />\n          </span>\n          <footer\n            class={{\n              [CSS.footer]: true,\n              [CSS.readOnly]: this.readOnly,\n              [CSS.hide]: !hasFooter,\n            }}\n            ref={(el) => (this.footerEl = el as HTMLElement)}\n          >\n            <div\n              class={{\n                [CSS.container]: true,\n                [CSS.footerEndSlotOnly]: !this.startSlotHasElements && this.endSlotHasElements,\n              }}\n            >\n              <slot\n                name={SLOTS.footerStart}\n                onSlotchange={(event) =>\n                  (this.startSlotHasElements = slotChangeHasAssignedElement(event))\n                }\n              />\n              <slot\n                name={SLOTS.footerEnd}\n                onSlotchange={(event) =>\n                  (this.endSlotHasElements = slotChangeHasAssignedElement(event))\n                }\n              />\n            </div>\n            {this.renderCharacterLimit()}\n          </footer>\n          <HiddenFormInputSlot component={this} />\n          {this.isCharacterLimitExceeded() && (\n            <span aria-hidden={true} aria-live=\"polite\" class={CSS.assistiveText} id={this.guid}>\n              {this.replacePlaceHoldersInMessages()}\n            </span>\n          )}\n          {this.validationMessage && this.status === \"invalid\" ? (\n            <Validation\n              icon={this.validationIcon}\n              message={this.validationMessage}\n              scale={this.scale}\n              status={this.status}\n            />\n          ) : null}\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    this.textAreaEl.focus();\n  }\n\n  /** Selects the text of the component's `value`. */\n  @Method()\n  async selectText(): Promise<void> {\n    await componentLoaded(this);\n    this.textAreaEl.select();\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties/ State\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteTextAreaElement;\n\n  defaultValue: TextArea[\"value\"];\n\n  footerEl: HTMLElement;\n\n  formEl: HTMLFormElement;\n\n  labelEl: HTMLCalciteLabelElement;\n\n  textAreaEl: HTMLTextAreaElement;\n\n  @State() defaultMessages: TextAreaMessages;\n\n  @State() endSlotHasElements: boolean;\n\n  @State() startSlotHasElements: boolean;\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  private guid = guid();\n\n  private localizedCharacterLengthObj: CharacterLengthObj;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  onLabelClick(): void {\n    this.setFocus();\n  }\n\n  handleInput = (event: InputEvent): void => {\n    this.value = event.target[\"value\"];\n    this.calciteTextAreaInput.emit();\n  };\n\n  handleChange = (): void => {\n    this.calciteTextAreaChange.emit();\n  };\n\n  contentSlotChangeHandler = (): void => {\n    if (!this.value) {\n      const nodes = this.el.childNodes;\n      nodes.forEach((el) => {\n        if (el.nodeName === \"#text\") {\n          this.value = el.nodeValue.trim();\n        }\n      });\n    }\n  };\n\n  renderCharacterLimit = (): VNode | null => {\n    if (this.maxLength) {\n      this.localizedCharacterLengthObj = this.getLocalizedCharacterLength();\n      return (\n        <span class={CSS.characterLimit}>\n          <span class={{ [CSS.characterOverLimit]: this.isCharacterLimitExceeded() }}>\n            {this.localizedCharacterLengthObj.currentLength}\n          </span>\n          {\"/\"}\n          {this.localizedCharacterLengthObj.maxLength}\n        </span>\n      );\n    }\n    return null;\n  };\n\n  getLocalizedCharacterLength(): CharacterLengthObj {\n    const currentLength = this.value ? this.value.length.toString() : \"0\";\n    const maxLength = this.maxLength.toString();\n    if (this.numberingSystem === \"latn\") {\n      return { currentLength, maxLength };\n    }\n\n    numberStringFormatter.numberFormatOptions = {\n      locale: this.effectiveLocale,\n      numberingSystem: this.numberingSystem,\n      signDisplay: \"never\",\n      useGrouping: this.groupSeparator,\n    };\n    return {\n      currentLength: numberStringFormatter.localize(currentLength),\n      maxLength: numberStringFormatter.localize(maxLength),\n    };\n  }\n\n  resizeObserver = createObserver(\"resize\", async () => {\n    await componentLoaded(this);\n    const { textAreaHeight, textAreaWidth, elHeight, elWidth, footerHeight, footerWidth } =\n      this.getHeightAndWidthOfElements();\n    if (footerWidth > 0 && footerWidth !== textAreaWidth) {\n      this.footerEl.style.width = `${textAreaWidth}px`;\n    }\n    if (elWidth !== textAreaWidth || elHeight !== textAreaHeight + (footerHeight || 0)) {\n      this.setHeightAndWidthToAuto();\n    }\n  });\n\n  syncHiddenFormInput(input: HTMLInputElement): void {\n    input.setCustomValidity(\"\");\n    if (this.isCharacterLimitExceeded()) {\n      input.setCustomValidity(this.replacePlaceHoldersInMessages());\n    }\n\n    syncHiddenFormInput(\"textarea\", this, input);\n  }\n\n  setTextAreaEl = (el: HTMLTextAreaElement): void => {\n    this.textAreaEl = el;\n    this.resizeObserver.observe(el);\n  };\n\n  setTextAreaHeight(): void {\n    const { textAreaHeight, elHeight, footerHeight } = this.getHeightAndWidthOfElements();\n    if (footerHeight > 0 && textAreaHeight + footerHeight != elHeight) {\n      this.textAreaEl.style.height = `${elHeight - footerHeight}px`;\n    }\n  }\n\n  getHeightAndWidthOfElements(): {\n    textAreaHeight: number;\n    textAreaWidth: number;\n    elHeight: number;\n    elWidth: number;\n    footerHeight: number;\n    footerWidth: number;\n  } {\n    const { height: textAreaHeight, width: textAreaWidth } =\n      this.textAreaEl.getBoundingClientRect();\n    const { height: elHeight, width: elWidth } = this.el.getBoundingClientRect();\n    const { height: footerHeight, width: footerWidth } = this.footerEl?.getBoundingClientRect();\n\n    return {\n      textAreaHeight,\n      textAreaWidth,\n      elHeight,\n      elWidth,\n      footerHeight,\n      footerWidth,\n    };\n  }\n\n  private replacePlaceHoldersInMessages(): string {\n    return this.messages.tooLong\n      .replace(\"{maxLength}\", this.localizedCharacterLengthObj.maxLength)\n      .replace(\"{currentLength}\", this.localizedCharacterLengthObj.currentLength);\n  }\n\n  // height and width are set to auto here to avoid overlapping on to neighboring elements in the layout when user starts resizing.\n  // throttle is used to avoid flashing of textarea when user resizes.\n  private setHeightAndWidthToAuto = throttle(\n    (): void => {\n      if (this.resize === \"vertical\" || this.resize === \"both\") {\n        this.el.style.height = \"auto\";\n      }\n      if (this.resize === \"horizontal\" || this.resize === \"both\") {\n        this.el.style.width = \"auto\";\n      }\n    },\n    RESIZE_TIMEOUT,\n    { leading: false },\n  );\n\n  private isCharacterLimitExceeded(): boolean {\n    return this.value?.length > this.maxLength;\n  }\n}\n"],
  "mappings": "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",
  "names": ["TextArea"]
}
