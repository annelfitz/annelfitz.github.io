import {
  m
} from "./chunk-UXMZQA2H.js";
import "./chunk-V2LOXBCS.js";
import {
  u
} from "./chunk-NGAYW4TW.js";
import {
  t as t2
} from "./chunk-MASBINVZ.js";
import "./chunk-AD6XW3W5.js";
import {
  $
} from "./chunk-ES7G4AF5.js";
import "./chunk-SGCIDT4C.js";
import "./chunk-QXRPUAVL.js";
import "./chunk-M5UX4IRZ.js";
import "./chunk-2WUPZJUL.js";
import "./chunk-KN52PCW4.js";
import "./chunk-SFKZ25SS.js";
import "./chunk-NCZU5DB4.js";
import "./chunk-SMDSNUU2.js";
import "./chunk-XTY645DH.js";
import "./chunk-UIOX7MPV.js";
import "./chunk-HRDKP7QO.js";
import "./chunk-4UOHLZKX.js";
import "./chunk-VJ2I4VSQ.js";
import "./chunk-MCZ4QOSQ.js";
import "./chunk-6XTKBOD7.js";
import "./chunk-IUY6HBLC.js";
import "./chunk-BHOYA5LV.js";
import "./chunk-6RR3WN7W.js";
import "./chunk-TXCVD3YI.js";
import "./chunk-SCRCLNT5.js";
import "./chunk-PGADGS3I.js";
import "./chunk-7FQYGAVT.js";
import "./chunk-QRQWG4D3.js";
import "./chunk-6ZDDHEYR.js";
import "./chunk-YQQSFFN3.js";
import "./chunk-32X2FZ3S.js";
import "./chunk-4IJED6JM.js";
import "./chunk-LGIO6OCK.js";
import "./chunk-C5EJV3NW.js";
import {
  t
} from "./chunk-XXIDOBRO.js";
import "./chunk-JL4LXZGM.js";
import "./chunk-O556EBAK.js";
import "./chunk-IJD65EMQ.js";
import "./chunk-4YGBWYMD.js";
import "./chunk-ZPU7GNG4.js";
import "./chunk-TNR6E67I.js";
import "./chunk-7O3VD45U.js";
import "./chunk-QREUCRQ4.js";
import "./chunk-YK3UMVCY.js";
import "./chunk-IQFWVTUJ.js";
import "./chunk-GB4RVOXH.js";
import "./chunk-JTUYA5FE.js";
import "./chunk-UNTQATE2.js";
import "./chunk-5YY6NZNY.js";
import "./chunk-DCBZOZ54.js";
import "./chunk-5IT6RVBX.js";
import "./chunk-N4HNOQVJ.js";
import "./chunk-MTQHYT7Y.js";
import "./chunk-JCP47SOM.js";
import "./chunk-CXCB57TE.js";
import "./chunk-IWO6JXL2.js";
import "./chunk-AVR3LWTZ.js";
import "./chunk-YUWVLORR.js";
import "./chunk-FFG7BDAP.js";
import "./chunk-I4SHZ6P5.js";
import "./chunk-DGRFM5OL.js";
import "./chunk-AOAT6HYL.js";
import "./chunk-JBU54P54.js";
import "./chunk-5LIYYE75.js";
import "./chunk-TLTAGTBA.js";
import "./chunk-2QPP5AGU.js";
import "./chunk-2C26DRKK.js";
import "./chunk-M4RFJU4F.js";
import "./chunk-WKVHVZW2.js";
import "./chunk-VIKID44H.js";
import "./chunk-RLZYC2LS.js";
import "./chunk-3AIILHI5.js";
import "./chunk-JKLFCJPR.js";
import "./chunk-BSPKLAHD.js";
import "./chunk-VS6AHHIY.js";
import "./chunk-BFOJPIF7.js";
import "./chunk-3JC3OUNW.js";
import "./chunk-RO3CTAP7.js";
import "./chunk-GKMVTGGM.js";
import "./chunk-XGTCDM4C.js";
import "./chunk-QNG4TY7L.js";
import "./chunk-VEYMN5N3.js";
import "./chunk-W5ALAOW2.js";
import "./chunk-FHDHOWK5.js";
import "./chunk-Y546C2O5.js";
import "./chunk-BDRVHR2K.js";
import "./chunk-ZLQTPFTL.js";
import "./chunk-HZSGATFT.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-ERD6I7QP.js";
import "./chunk-Z3NX5DTX.js";
import "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import "./chunk-G7YFDDME.js";
import "./chunk-PCKG3UTS.js";
import "./chunk-3VMVD66K.js";
import {
  f
} from "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-I2X6UR6L.js";
import "./chunk-5JYVZQZR.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-545NO6M2.js";
import "./chunk-5LSHHVQ5.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  P,
  d,
  v
} from "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  e as e2
} from "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import "./chunk-7RBRCL6S.js";
import {
  k
} from "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/views/2d/layers/MapNotesLayerView2D.js
var u2 = "sublayers";
var f2 = "layerView";
var m2 = class extends m(u) {
  constructor() {
    super(...arguments), this._highlightIds = /* @__PURE__ */ new Map();
  }
  *graphicsViews() {
    null == this._graphicsViewsFeatureCollectionMap ? null == this._graphicsViews ? yield* [] : yield* this._graphicsViews : yield* this._graphicsViewsFeatureCollectionMap.keys();
  }
  async hitTest(i, e3) {
    return Array.from(this.graphicsViews(), (e4) => {
      const s = e4.hitTest(i);
      if (null != this._graphicsViewsFeatureCollectionMap) {
        const i2 = this._graphicsViewsFeatureCollectionMap.get(e4);
        for (const e5 of s)
          !e5.popupTemplate && i2.popupTemplate && (e5.popupTemplate = i2.popupTemplate), e5.sourceLayer = e5.layer = this.layer;
      }
      return s;
    }).flat().map((e4) => ({ type: "graphic", graphic: e4, layer: this.layer, mapPoint: i }));
  }
  highlight(i) {
    let h;
    "number" == typeof i ? h = [i] : i instanceof f ? h = [i.uid] : Array.isArray(i) && i.length > 0 ? h = "number" == typeof i[0] ? i : i.map((i2) => i2 && i2.uid) : V.isCollection(i) && (h = i.map((i2) => i2 && i2.uid).toArray());
    const a2 = h == null ? void 0 : h.filter(k);
    return (a2 == null ? void 0 : a2.length) ? (this._addHighlight(a2), e2(() => this._removeHighlight(a2))) : e2();
  }
  update(i) {
    for (const e3 of this.graphicsViews())
      e3.processUpdate(i);
  }
  attach() {
    const i = this.view, e3 = () => this.requestUpdate(), s = this.layer.featureCollections;
    if (null != s && s.length) {
      this._graphicsViewsFeatureCollectionMap = /* @__PURE__ */ new Map();
      for (const t3 of s) {
        const s2 = new t2(this.view.featuresTilingScheme), r = new $({ view: i, graphics: t3.source, renderer: t3.renderer, requestUpdateCallback: e3, container: s2 });
        this._graphicsViewsFeatureCollectionMap.set(r, t3), this.container.addChild(r.container), this.addHandles([d(() => t3.visible, (i2) => r.container.visible = i2, P), d(() => r.updating, () => this.notifyChange("updating"), P)], f2);
      }
      this._updateHighlight();
    } else
      null != this.layer.sublayers && this.addHandles(v(() => this.layer.sublayers, "change", () => this._createGraphicsViews(), { onListenerAdd: () => this._createGraphicsViews(), onListenerRemove: () => this._destroyGraphicsViews() }), u2);
  }
  detach() {
    this._destroyGraphicsViews(), this.removeHandles(u2);
  }
  moveEnd() {
  }
  viewChange() {
    for (const i of this.graphicsViews())
      i.viewChange();
  }
  isUpdating() {
    for (const i of this.graphicsViews())
      if (i.updating)
        return true;
    return false;
  }
  _destroyGraphicsViews() {
    this.container.removeAllChildren(), this.removeHandles(f2);
    for (const i of this.graphicsViews())
      i.destroy();
    this._graphicsViews = null, this._graphicsViewsFeatureCollectionMap = null;
  }
  _createGraphicsViews() {
    if (this._destroyGraphicsViews(), null == this.layer.sublayers)
      return;
    const i = [], e3 = this.view, s = () => this.requestUpdate();
    for (const t3 of this.layer.sublayers) {
      const r = new t2(this.view.featuresTilingScheme);
      r.fadeTransitionEnabled = true;
      const a2 = new $({ view: e3, graphics: t3.graphics, requestUpdateCallback: s, container: r });
      this.addHandles([t3.on("graphic-update", a2.graphicUpdateHandler), d(() => t3.visible, (i2) => a2.container.visible = i2, P), d(() => a2.updating, () => this.notifyChange("updating"), P)], f2), this.container.addChild(a2.container), i.push(a2);
    }
    this._graphicsViews = i, this._updateHighlight();
  }
  _addHighlight(i) {
    for (const e3 of i)
      if (this._highlightIds.has(e3)) {
        const i2 = this._highlightIds.get(e3);
        this._highlightIds.set(e3, i2 + 1);
      } else
        this._highlightIds.set(e3, 1);
    this._updateHighlight();
  }
  _removeHighlight(i) {
    for (const e3 of i)
      if (this._highlightIds.has(e3)) {
        const i2 = this._highlightIds.get(e3) - 1;
        0 === i2 ? this._highlightIds.delete(e3) : this._highlightIds.set(e3, i2);
      }
    this._updateHighlight();
  }
  _updateHighlight() {
    const i = Array.from(this._highlightIds.keys()), e3 = t("highlight");
    for (const s of this.graphicsViews())
      s.setHighlight(i.map((i2) => ({ objectId: i2, highlightFlags: e3 })));
  }
};
m2 = e([a("esri.views.2d.layers.MapNotesLayerView2D")], m2);
var w = m2;
export {
  w as default
};
//# sourceMappingURL=MapNotesLayerView2D-7HTVMTWD.js.map
