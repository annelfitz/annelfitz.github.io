{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/components/src/components/table-row/resources.ts", "../../@esri/calcite-components/dist/components/src/components/table-row/table-row.scss?tag=calcite-table-row&encapsulation=shadow", "../../@esri/calcite-components/dist/components/src/components/table-row/table-row.tsx"],
  "sourcesContent": ["export const CSS = {\n  lastVisibleRow: \"last-visible-row\",\n};\n", "/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-table-row-background: Specifies the background color of the component.\n * @prop --calcite-table-row-border-color: Specifies the border color of the component.\n */\n\n:host {\n  --calcite-internal-table-row-background: var(--calcite-table-row-background, var(--calcite-color-foreground-1));\n  --calcite-internal-table-row-border-color: var(--calcite-table-row-border-color, transparent);\n  @apply contents;\n}\n\n@include base-component();\n\n@include disabled() {\n  tr {\n    @apply opacity-disabled pointer-events-none;\n  }\n}\n\ntr {\n  border-block-end: 1px solid var(--calcite-internal-table-row-border-color);\n  background-color: var(--calcite-internal-table-row-background);\n}\n\ntr.last-visible-row {\n  border-block-end: 0;\n}\n", "import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { LocalizedComponent } from \"../../utils/locale\";\nimport { Scale, SelectionMode } from \"../interfaces\";\nimport { focusElementInGroup, FocusElementInGroupDestination } from \"../../utils/dom\";\nimport { RowType, TableInteractionMode, TableRowFocusEvent } from \"../table/interfaces\";\nimport { isActivationKey } from \"../../utils/key\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { getIconScale } from \"../../utils/component\";\nimport { CSS } from \"./resources\";\n\n/**\n * @slot - A slot for adding `calcite-table-cell` or `calcite-table-header` elements.\n */\n\n@Component({\n  tag: \"calcite-table-row\",\n  styleUrl: \"table-row.scss\",\n  shadow: true,\n})\nexport class TableRow implements InteractiveComponent, LocalizedComponent {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** When `true`, interaction is prevented and the component is displayed with lower opacity. */\n  @Prop({ reflect: true }) disabled = false;\n\n  /** When `true`, the component is selected. */\n  @Prop({ reflect: true }) selected = false;\n\n  /** @internal */\n  @Prop({ mutable: true }) cellCount: number;\n\n  /** @internal */\n  @Prop() interactionMode: TableInteractionMode = \"interactive\";\n\n  /** @internal */\n  @Prop() lastVisibleRow: boolean;\n\n  /** @internal */\n  @Prop() rowType: RowType;\n\n  /** @internal */\n  @Prop() numbered = false;\n\n  /** @internal */\n  @Prop() positionSection: number;\n\n  /** @internal */\n  @Prop() positionSectionLocalized: string;\n\n  /** @internal */\n  @Prop() positionAll: number;\n\n  /** @internal */\n  @Prop() readCellContentsToAT: boolean;\n\n  /** @internal */\n  @Prop() scale: Scale;\n\n  /** @internal */\n  @Prop() selectionMode: Extract<\"multiple\" | \"single\" | \"none\", SelectionMode> = \"none\";\n\n  /** @internal */\n  @Prop() selectedRowCount: number;\n\n  /** @internal */\n  @Prop() selectedRowCountLocalized: string;\n\n  /** @internal */\n  @Prop() bodyRowCount: number;\n\n  @Watch(\"bodyRowCount\")\n  @Watch(\"scale\")\n  @Watch(\"selected\")\n  @Watch(\"selectedRowCount\")\n  @Watch(\"interactionMode\")\n  handleCellChanges(): void {\n    if (this.tableRowEl && this.rowCells.length > 0) {\n      this.updateCells();\n    }\n  }\n\n  @Watch(\"numbered\")\n  @Watch(\"selectionMode\")\n  handleDelayedCellChanges(): void {\n    if (this.tableRowEl && this.rowCells.length > 0) {\n      requestAnimationFrame(() => this.updateCells());\n    }\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  componentDidLoad(): void {\n    if (this.tableRowEl && this.rowCells.length > 0) {\n      this.updateCells();\n    }\n  }\n\n  connectedCallback(): void {\n    connectInteractive(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectInteractive(this);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteTableRowElement;\n\n  private rowCells: (HTMLCalciteTableCellElement | HTMLCalciteTableHeaderElement)[] = [];\n\n  private tableRowEl: HTMLTableRowElement;\n\n  private tableRowSlotEl: HTMLSlotElement;\n\n  @State() effectiveLocale = \"\";\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Fires when the selected state of the component changes.\n   */\n  @Event({ cancelable: false }) calciteTableRowSelect: EventEmitter<void>;\n\n  /** @internal */\n  @Event({ cancelable: false })\n  calciteInternalTableRowFocusRequest: EventEmitter<TableRowFocusEvent>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Event Listeners\n  //\n  //--------------------------------------------------------------------------\n\n  @Listen(\"calciteInternalTableRowFocusChange\", { target: \"document\" })\n  calciteInternalTableRowFocusChangeHandler(event: CustomEvent): void {\n    if ((event.target as Element).contains(this.el)) {\n      const position = event.detail.cellPosition;\n      const rowPosition = event.detail.rowPosition;\n      const destination = event.detail.destination;\n      const lastCell = event.detail.lastCell;\n\n      if (rowPosition === this.positionAll) {\n        if (this.disabled) {\n          const deflectDirection =\n            destination === \"last\" ? \"previous\" : destination === \"first\" ? \"next\" : destination;\n          this.emitTableRowFocusRequest(position, this.positionAll, deflectDirection);\n          return;\n        }\n        const cellPosition = lastCell\n          ? this.rowCells[this.rowCells.length - 1]\n          : this.rowCells?.find((_, index) => index + 1 === position);\n\n        if (cellPosition) {\n          cellPosition.setFocus();\n        }\n      }\n    }\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private keyDownHandler = (event: KeyboardEvent): void => {\n    if (this.interactionMode !== \"interactive\") {\n      return;\n    }\n    const el = event.target as HTMLCalciteTableCellElement | HTMLCalciteTableHeaderElement;\n    const key = event.key;\n    const isControl = event.ctrlKey;\n    const cells = this.rowCells;\n    if (el.matches(\"calcite-table-cell\") || el.matches(\"calcite-table-header\")) {\n      switch (key) {\n        case \"ArrowUp\":\n          this.emitTableRowFocusRequest(el.positionInRow, this.positionAll, \"previous\");\n          event.preventDefault();\n          break;\n        case \"ArrowDown\":\n          this.emitTableRowFocusRequest(el.positionInRow, this.positionAll, \"next\");\n          event.preventDefault();\n          break;\n        case \"PageUp\":\n          this.emitTableRowFocusRequest(el.positionInRow, this.positionAll, \"first\");\n          event.preventDefault();\n          break;\n        case \"PageDown\":\n          this.emitTableRowFocusRequest(el.positionInRow, this.positionAll, \"last\");\n          event.preventDefault();\n          break;\n        case \"ArrowLeft\":\n          focusElementInGroup(cells, el, \"previous\", false);\n          event.preventDefault();\n          break;\n        case \"ArrowRight\":\n          focusElementInGroup(cells, el, \"next\", false);\n          event.preventDefault();\n          break;\n        case \"Home\":\n          if (isControl) {\n            this.emitTableRowFocusRequest(1, this.positionAll, \"first\");\n            event.preventDefault();\n          } else {\n            focusElementInGroup(cells, el, \"first\", false);\n            event.preventDefault();\n          }\n          break;\n        case \"End\":\n          if (isControl) {\n            this.emitTableRowFocusRequest(this.rowCells?.length, this.positionAll, \"last\", true);\n            event.preventDefault();\n          } else {\n            focusElementInGroup(cells, el, \"last\", false);\n            event.preventDefault();\n          }\n          break;\n      }\n    }\n  };\n\n  private emitTableRowFocusRequest = (\n    cellPosition: number,\n    rowPosition: number,\n    destination: FocusElementInGroupDestination,\n    lastCell?: boolean,\n  ): void => {\n    this.calciteInternalTableRowFocusRequest.emit({\n      cellPosition,\n      rowPosition,\n      destination,\n      lastCell,\n    });\n  };\n\n  private updateCells = (): void => {\n    const slottedCells = this.tableRowSlotEl\n      ?.assignedElements({ flatten: true })\n      ?.filter(\n        (el: HTMLCalciteTableCellElement | HTMLCalciteTableHeaderElement) =>\n          el.matches(\"calcite-table-cell\") || el.matches(\"calcite-table-header\"),\n      );\n\n    const renderedCells = Array.from(\n      this.tableRowEl?.querySelectorAll(\"calcite-table-header, calcite-table-cell\"),\n    )?.filter(\n      (el: HTMLCalciteTableCellElement | HTMLCalciteTableHeaderElement) =>\n        el.numberCell || el.selectionCell,\n    );\n\n    const cells = renderedCells ? renderedCells.concat(slottedCells) : slottedCells;\n\n    if (cells.length > 0) {\n      cells?.forEach((cell: HTMLCalciteTableCellElement | HTMLCalciteTableHeaderElement, index) => {\n        cell.interactionMode = this.interactionMode;\n        cell.positionInRow = index + 1;\n        cell.parentRowType = this.rowType;\n        cell.parentRowIsSelected = this.selected;\n        cell.scale = this.scale;\n        cell.lastCell = index === cells.length - 1;\n\n        if (cell.nodeName === \"CALCITE-TABLE-CELL\") {\n          (cell as HTMLCalciteTableCellElement).readCellContentsToAT = this.readCellContentsToAT;\n          (cell as HTMLCalciteTableCellElement).disabled = this.disabled;\n        }\n      });\n    }\n\n    this.rowCells =\n      (cells as (HTMLCalciteTableCellElement | HTMLCalciteTableHeaderElement)[]) || [];\n    this.cellCount = cells?.length;\n  };\n\n  private handleSelectionOfRow = (): void => {\n    this.calciteTableRowSelect.emit();\n  };\n\n  private handleKeyboardSelection = (event: KeyboardEvent): void => {\n    if (isActivationKey(event.key)) {\n      if (event.key === \" \") {\n        event.preventDefault();\n      }\n      this.handleSelectionOfRow();\n    }\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  //--------------------------------------------------------------------------\n\n  renderSelectionIcon(): VNode {\n    const icon =\n      this.selectionMode === \"multiple\" && this.selected\n        ? \"check-square-f\"\n        : this.selectionMode === \"multiple\"\n          ? \"square\"\n          : this.selected\n            ? \"circle-f\"\n            : \"circle\";\n\n    return <calcite-icon icon={icon} scale={getIconScale(this.scale)} />;\n  }\n\n  renderSelectableCell(): VNode {\n    return this.rowType === \"head\" ? (\n      <calcite-table-header\n        alignment=\"center\"\n        bodyRowCount={this.bodyRowCount}\n        key=\"selection-head\"\n        onClick={this.selectionMode === \"multiple\" && this.handleSelectionOfRow}\n        onKeyDown={this.selectionMode === \"multiple\" && this.handleKeyboardSelection}\n        selectedRowCount={this.selectedRowCount}\n        selectedRowCountLocalized={this.selectedRowCountLocalized}\n        selectionCell={true}\n        selectionMode={this.selectionMode}\n      />\n    ) : this.rowType === \"body\" ? (\n      <calcite-table-cell\n        alignment=\"center\"\n        key=\"selection-body\"\n        onClick={this.handleSelectionOfRow}\n        onKeyDown={this.handleKeyboardSelection}\n        parentRowIsSelected={this.selected}\n        parentRowPositionLocalized={this.positionSectionLocalized}\n        selectionCell={true}\n      >\n        {this.renderSelectionIcon()}\n      </calcite-table-cell>\n    ) : (\n      <calcite-table-cell alignment=\"center\" key=\"selection-foot\" selectionCell={true} />\n    );\n  }\n\n  renderNumberedCell(): VNode {\n    return this.rowType === \"head\" ? (\n      <calcite-table-header alignment=\"center\" key=\"numbered-head\" numberCell={true} />\n    ) : this.rowType === \"body\" ? (\n      <calcite-table-cell alignment=\"center\" key=\"numbered-body\" numberCell={true}>\n        {this.positionSectionLocalized}\n      </calcite-table-cell>\n    ) : (\n      <calcite-table-cell alignment=\"center\" key=\"numbered-foot\" numberCell={true} />\n    );\n  }\n\n  render(): VNode {\n    return (\n      <Host>\n        <InteractiveContainer disabled={this.disabled}>\n          <tr\n            aria-disabled={this.disabled}\n            aria-rowindex={this.positionAll + 1}\n            aria-selected={this.selected}\n            class={{ [CSS.lastVisibleRow]: this.lastVisibleRow }}\n            onKeyDown={this.keyDownHandler}\n            // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n            ref={(el) => (this.tableRowEl = el)}\n          >\n            {this.numbered && this.renderNumberedCell()}\n            {this.selectionMode !== \"none\" && this.renderSelectableCell()}\n            <slot\n              onSlotchange={this.updateCells}\n              ref={(el) => (this.tableRowSlotEl = el as HTMLSlotElement)}\n            />\n          </tr>\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n}\n"],
  "mappings": "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",
  "names": ["TableRow"]
}
