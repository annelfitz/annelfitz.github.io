import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  newWidgetsShadowCast
} from "./chunk-YXW2SI4L.js";
import {
  checkForView,
  referenceElementHelper
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-shadow-cast.entry.js
var shadowCastCss = "arcgis-shadow-cast{}";
var END_TIME = 16 * 3600 * 1e3;
var START_TIME = 10 * 3600 * 1e3;
var ArcgisShadowCast = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.arcgisShadowCastReady = createEvent(this, "arcgisShadowCastReady", 7);
    this._watchHandles = [];
    this.referenceElement = void 0;
    this.discreteOptions = void 0;
    this.durationOptions = void 0;
    this.endTimeOfDay = END_TIME;
    this.startTimeOfDay = START_TIME;
    this.thresholdOptions = void 0;
    this.utcOffset = void 0;
    this.visualizationType = "threshold";
    this.icon = void 0;
    this.visibleElementsTimeRangeSlider = true;
    this.visibleElementsTimezone = true;
    this.visibleElementsDatePicker = true;
    this.visibleElementsVisualizationOptions = true;
    this.visibleElementsColorPicker = true;
    this.visibleElementsTooltip = true;
    this.position = "bottom-left";
    this.view = void 0;
    this.widget = void 0;
  }
  referenceElementWatcher(value) {
    void referenceElementHelper(this, value);
  }
  discreteOptionsWatcher(value) {
    if (this.widget) {
      this.widget.viewModel.discreteOptions = value;
    }
  }
  durationOptionsWatcher(value) {
    if (this.widget) {
      this.widget.viewModel.durationOptions = value;
    }
  }
  endTimeOfDayWatcher(value) {
    if (this.widget) {
      this.widget.viewModel.endTimeOfDay = value;
    }
  }
  startTimeOfDayWatcher(value) {
    if (this.widget) {
      this.widget.viewModel.startTimeOfDay = value;
    }
  }
  thresholdOptionsWatcher(value) {
    if (this.widget) {
      this.widget.viewModel.thresholdOptions = value;
    }
  }
  utcOffsetWatcher(value) {
    if (this.widget) {
      this.widget.viewModel.utcOffset = value;
    }
  }
  visualizationTypeWatcher(value) {
    if (this.widget) {
      this.widget.viewModel.visualizationType = value;
    }
  }
  iconWatcher(value) {
    if (this.widget) {
      this.widget.icon = value;
    }
  }
  visibleElementsTimeRangeSliderWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        timeRangeSlider: value
      };
    }
  }
  visibleElementsTimezoneWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        timezone: value
      };
    }
  }
  visibleElementsDatePickerWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        datePicker: value
      };
    }
  }
  visibleElementsVisualizationOptionsWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        visualizationOptions: value
      };
    }
  }
  visibleElementsColorPickerWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        colorPicker: value
      };
    }
  }
  visibleElementsTooltipWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        tooltip: value
      };
    }
  }
  positionWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.view.ui.move(this.childElem, value);
    }
  }
  viewWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.view = value;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Methods
  //
  //--------------------------------------------------------------------------
  async getDuration(point) {
    var _a;
    return (_a = this.widget) == null ? void 0 : _a.viewModel.getDuration(point);
  }
  async start() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.viewModel.start();
  }
  async stop() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.viewModel.stop();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = this._createParams();
    const widget = await newWidgetsShadowCast(params);
    this.widget = widget;
    this._setViewModelParams();
    this._addContainer();
    this.arcgisShadowCastReady.emit();
    checkForView(this);
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    return h("div", { ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  _addContainer() {
    this.widget.container = this.childElem;
  }
  _createParams() {
    const params = {};
    params.visibleElements = {
      timeRangeSlider: this.visibleElementsTimeRangeSlider,
      timezone: this.visibleElementsTimezone,
      datePicker: this.visibleElementsDatePicker,
      visualizationOptions: this.visibleElementsVisualizationOptions,
      colorPicker: this.visibleElementsColorPicker,
      tooltip: this.visibleElementsTooltip
    };
    if (this.icon) {
      params.icon = this.icon;
    }
    if (this.view) {
      params.view = this.view;
    }
    return params;
  }
  _setViewModelParams() {
    const params = {
      endTimeOfDay: this.endTimeOfDay,
      startTimeOfDay: this.startTimeOfDay,
      visualizationType: this.visualizationType
    };
    if (this.discreteOptions) {
      params.discreteOptions = this.discreteOptions;
    }
    if (this.durationOptions) {
      params.durationOptions = this.durationOptions;
    }
    if (this.thresholdOptions) {
      params.thresholdOptions = this.thresholdOptions;
    }
    if (this.utcOffset) {
      params.utcOffset = this.utcOffset;
    }
    this.widget.viewModel.set(params);
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "referenceElement": ["referenceElementWatcher"],
      "discreteOptions": ["discreteOptionsWatcher"],
      "durationOptions": ["durationOptionsWatcher"],
      "endTimeOfDay": ["endTimeOfDayWatcher"],
      "startTimeOfDay": ["startTimeOfDayWatcher"],
      "thresholdOptions": ["thresholdOptionsWatcher"],
      "utcOffset": ["utcOffsetWatcher"],
      "visualizationType": ["visualizationTypeWatcher"],
      "icon": ["iconWatcher"],
      "visibleElementsTimeRangeSlider": ["visibleElementsTimeRangeSliderWatcher"],
      "visibleElementsTimezone": ["visibleElementsTimezoneWatcher"],
      "visibleElementsDatePicker": ["visibleElementsDatePickerWatcher"],
      "visibleElementsVisualizationOptions": ["visibleElementsVisualizationOptionsWatcher"],
      "visibleElementsColorPicker": ["visibleElementsColorPickerWatcher"],
      "visibleElementsTooltip": ["visibleElementsTooltipWatcher"],
      "position": ["positionWatcher"],
      "view": ["viewWatcher"]
    };
  }
};
ArcgisShadowCast.style = shadowCastCss;
export {
  ArcgisShadowCast as arcgis_shadow_cast
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-shadow-cast.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-shadow-cast.entry-VWVHDWVV.js.map
