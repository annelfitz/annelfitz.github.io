{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/components/src/components/chip-group/chip-group.scss?tag=calcite-chip-group&encapsulation=shadow", "../../@esri/calcite-components/dist/components/src/components/chip-group/chip-group.tsx"],
  "sourcesContent": [":host {\n  display: flex;\n}\n\n.container {\n  display: flex;\n  inline-size: 100%;\n  flex-wrap: wrap;\n  gap: theme(\"spacing.2\");\n}\n\n::slotted(calcite-chip) {\n  flex: none;\n}\n\n:host([scale=\"s\"]) .container {\n  gap: theme(\"spacing.1\");\n}\n\n:host([scale=\"l\"]) .container {\n  gap: theme(\"spacing.3\");\n}\n\n@include disabled();\n@include base-component();\n", "import {\n  Component,\n  h,\n  VNode,\n  Prop,\n  Element,\n  Listen,\n  EventEmitter,\n  Event,\n  Method,\n  Watch,\n} from \"@stencil/core\";\nimport { focusElementInGroup, toAriaBoolean } from \"../../utils/dom\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Scale, SelectionMode } from \"../interfaces\";\nimport {\n  componentFocusable,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\n/**\n * @slot - A slot for adding one or more `calcite-chip`s.\n */\n@Component({\n  tag: \"calcite-chip-group\",\n  styleUrl: \"chip-group.scss\",\n  shadow: true,\n})\nexport class ChipGroup implements InteractiveComponent {\n  //--------------------------------------------------------------------------\n  //\n  //  Public Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** When `true`, interaction is prevented and the component is displayed with lower opacity. */\n  @Prop({ reflect: true }) disabled = false;\n\n  /** Accessible name for the component. */\n  @Prop() label!: string;\n\n  /** Specifies the size of the component. Child `calcite-chip`s inherit the component's value. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /**\n   * Specifies the selection mode of the component, where:\n   *\n   * `\"multiple\"` allows any number of selections,\n   *\n   * `\"single\"` allows only one selection,\n   *\n   * `\"single-persist\"` allows one selection and prevents de-selection, and\n   *\n   * `\"none\"` does not allow any selections.\n   */\n  @Prop({ reflect: true }) selectionMode: Extract<\n    \"multiple\" | \"single\" | \"single-persist\" | \"none\",\n    SelectionMode\n  > = \"none\";\n\n  @Watch(\"selectionMode\")\n  onSelectionModeChange(): void {\n    this.updateItems();\n  }\n\n  /**\n   * Specifies the component's selected items.\n   *\n   * @readonly\n   */\n  @Prop({ mutable: true }) selectedItems: HTMLCalciteChipElement[] = [];\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteChipGroupElement;\n\n  mutationObserver = createObserver(\"mutation\", () => this.updateItems());\n\n  private items: HTMLCalciteChipElement[] = [];\n\n  private slotRefEl: HTMLSlotElement;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /** Fires when the component's selection changes. */\n  @Event({ cancelable: false }) calciteChipGroupSelect: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectInteractive(this);\n    this.mutationObserver?.observe(this.el, { childList: true, subtree: true });\n  }\n\n  componentDidRender(): void {\n    disconnectInteractive(this);\n    updateHostInteraction(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  disconnectedCallback(): void {\n    this.mutationObserver?.disconnect();\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Event Listeners\n  //\n  //--------------------------------------------------------------------------\n\n  @Listen(\"calciteInternalChipKeyEvent\")\n  calciteInternalChipKeyEventListener(event: CustomEvent): void {\n    if (event.composedPath().includes(this.el)) {\n      const interactiveItems = this.items?.filter((el) => !el.disabled);\n      switch (event.detail.key) {\n        case \"ArrowRight\":\n          focusElementInGroup(interactiveItems, event.detail.target, \"next\");\n          break;\n        case \"ArrowLeft\":\n          focusElementInGroup(interactiveItems, event.detail.target, \"previous\");\n          break;\n        case \"Home\":\n          focusElementInGroup(interactiveItems, event.detail.target, \"first\");\n          break;\n        case \"End\":\n          focusElementInGroup(interactiveItems, event.detail.target, \"last\");\n          break;\n      }\n    }\n  }\n\n  @Listen(\"calciteChipClose\")\n  calciteChipCloseListener(event: CustomEvent): void {\n    const item = event.target as HTMLCalciteChipElement;\n    if (this.items?.includes(item)) {\n      if (this.items?.indexOf(item) > 0) {\n        focusElementInGroup(this.items, item as HTMLCalciteChipElement, \"previous\");\n      } else if (this.items?.indexOf(item) === 0) {\n        focusElementInGroup(this.items, item as HTMLCalciteChipElement, \"next\");\n      } else {\n        focusElementInGroup(this.items, item as HTMLCalciteChipElement, \"first\");\n      }\n    }\n    this.items = this.items?.filter((el) => el !== item);\n  }\n\n  @Listen(\"calciteChipSelect\")\n  calciteChipSelectListener(event: CustomEvent): void {\n    if (event.composedPath().includes(this.el)) {\n      this.setSelectedItems(true, event.target as HTMLCalciteChipElement);\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Sets focus on the component's first focusable element.\n   */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    if (!this.disabled) {\n      return (this.selectedItems[0] || this.items[0])?.setFocus();\n    }\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private updateItems = (event?: Event): void => {\n    const target = event ? (event.target as HTMLSlotElement) : this.slotRefEl;\n    this.items = target\n      ?.assignedElements({ flatten: true })\n      .filter((el) => el?.matches(\"calcite-chip\")) as HTMLCalciteChipElement[];\n\n    this.items?.forEach((el) => {\n      el.interactive = true;\n      el.scale = this.scale;\n      el.selectionMode = this.selectionMode;\n    });\n\n    this.setSelectedItems(false);\n  };\n\n  private setSelectedItems = (emit: boolean, elToMatch?: HTMLCalciteChipElement): void => {\n    if (elToMatch) {\n      this.items?.forEach((el) => {\n        const matchingEl = elToMatch === el;\n        switch (this.selectionMode) {\n          case \"multiple\":\n            if (matchingEl) {\n              el.selected = !el.selected;\n            }\n            break;\n\n          case \"single\":\n            el.selected = matchingEl ? !el.selected : false;\n            break;\n\n          case \"single-persist\":\n            el.selected = !!matchingEl;\n            break;\n        }\n      });\n    }\n\n    this.selectedItems = this.items?.filter((el) => el.selected);\n\n    if (emit) {\n      this.calciteChipGroupSelect.emit();\n    }\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  //--------------------------------------------------------------------------\n\n  render(): VNode {\n    const role =\n      this.selectionMode === \"none\" || this.selectionMode === \"multiple\" ? \"group\" : \"radiogroup\";\n    const { disabled } = this;\n\n    return (\n      <InteractiveContainer disabled={disabled}>\n        <div\n          aria-disabled={toAriaBoolean(disabled)}\n          aria-label={this.label}\n          class=\"container\"\n          role={role}\n        >\n          <slot\n            onSlotchange={this.updateItems}\n            ref={(el) => (this.slotRefEl = el as HTMLSlotElement)}\n          />\n        </div>\n      </InteractiveContainer>\n    );\n  }\n}\n"],
  "mappings": "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",
  "names": ["ChipGroup"]
}
