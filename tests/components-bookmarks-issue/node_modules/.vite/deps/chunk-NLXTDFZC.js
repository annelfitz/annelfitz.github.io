import {
  e as e4
} from "./chunk-GMO4JSSI.js";
import {
  t
} from "./chunk-IKON42NH.js";
import {
  e as e3
} from "./chunk-EAAEPSBY.js";
import {
  D,
  e2,
  r
} from "./chunk-RGCWZ2KZ.js";
import {
  n
} from "./chunk-5VMSFOCB.js";
import {
  P,
  d
} from "./chunk-Z4Y53NDM.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";

// node_modules/@arcgis/core/widgets/Compass/CompassViewModel.js
var p = class extends t(S) {
  constructor(t2) {
    super(t2), this.orientation = { x: 0, y: 0, z: 0 }, this.view = null, this._updateForCamera = this._updateForCamera.bind(this), this._updateForRotation = this._updateForRotation.bind(this), this._updateRotationWatcher = this._updateRotationWatcher.bind(this);
  }
  initialize() {
    this.addHandles(d(() => this.view, this._updateRotationWatcher, P));
  }
  destroy() {
    this.view = null;
  }
  get canShowNorth() {
    return e4(this.view);
  }
  get state() {
    var _a;
    return !((_a = this.view) == null ? void 0 : _a.ready) || "2d" === this.view.type && !this.view.constraints.rotationEnabled ? "disabled" : this.canShowNorth ? "compass" : "rotation";
  }
  reset() {
    var _a, _b;
    if (!((_a = this.view) == null ? void 0 : _a.ready))
      return;
    const t2 = {};
    "2d" === ((_b = this.view) == null ? void 0 : _b.type) ? t2.rotation = 0 : t2.heading = 0, this.callGoTo({ target: t2 });
  }
  _updateForRotation(t2) {
    null != t2 && (this.orientation = { z: t2 });
  }
  _updateForCamera(t2) {
    if (!t2)
      return;
    const o2 = -t2.heading;
    this.orientation = { x: 0, y: 0, z: o2 };
  }
  _updateRotationWatcher(t2) {
    this.removeAllHandles(), t2 && this.addHandles("2d" === t2.type ? d(() => t2 == null ? void 0 : t2.rotation, this._updateForRotation, P) : d(() => t2 == null ? void 0 : t2.camera, this._updateForCamera, P));
  }
};
e([y({ readOnly: true })], p.prototype, "canShowNorth", null), e([y()], p.prototype, "orientation", void 0), e([y({ readOnly: true })], p.prototype, "state", null), e([y()], p.prototype, "view", void 0), p = e([a("esri.widgets.Compass.CompassViewModel")], p);
var d2 = p;

// node_modules/@arcgis/core/widgets/Compass/css.js
var n2 = "esri-compass";
var o = { base: n2, iconContainer: `${n2}__icon-container` };

// node_modules/@arcgis/core/widgets/Compass.js
var c = class extends D {
  constructor(e5, t2) {
    super(e5, t2), this.messages = null, this.viewModel = new d2(), this._reset = () => {
      this.viewModel.reset();
    }, this._toRotationTransform = (e6) => ({ transform: `rotateZ(${e6.z}deg)` });
  }
  loadDependencies() {
    return r({ button: () => import("./calcite-button-V4T5NPWY.js"), icon: () => import("./calcite-icon-25XWA6H7.js") });
  }
  get goToOverride() {
    return this.viewModel.goToOverride;
  }
  set goToOverride(e5) {
    this.viewModel.goToOverride = e5;
  }
  get icon() {
    return "rotation" === this.viewModel.state ? "arrow-up" : "compass-needle";
  }
  set icon(e5) {
    this._overrideIfSome("icon", e5);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e5) {
    this._overrideIfSome("label", e5);
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e5) {
    this.viewModel.view = e5;
  }
  reset() {
    return this.viewModel.reset();
  }
  render() {
    const { orientation: e5, state: t2 } = this.viewModel, { messages: s } = this;
    return n("div", { class: this.classes(o.base, e3.widget) }, n("calcite-button", { class: e3.widgetButton, disabled: "disabled" === t2, kind: "neutral", label: s.reset, onclick: this._reset, round: true, scale: "s", title: s.reset }, n("div", { "aria-hidden": "true", class: o.iconContainer, title: s.reset }, n("calcite-icon", { icon: this.icon, styles: this._toRotationTransform(e5) }))));
  }
};
e([y()], c.prototype, "goToOverride", null), e([y()], c.prototype, "icon", null), e([y()], c.prototype, "label", null), e([y(), e2("esri/widgets/Compass/t9n/Compass")], c.prototype, "messages", void 0), e([y()], c.prototype, "view", null), e([y({ type: d2 })], c.prototype, "viewModel", void 0), c = e([a("esri.widgets.Compass")], c);
var d3 = c;

export {
  d3 as d
};
//# sourceMappingURL=chunk-NLXTDFZC.js.map
