import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  importCoreReactiveUtils,
  newWidgetsFeatures
} from "./chunk-YXW2SI4L.js";
import {
  addHandles,
  checkForView,
  referenceElementHelper
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-features.entry.js
var featuresCss = "arcgis-features{}";
var ArcgisFeatures = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.arcgisFeaturesReady = createEvent(this, "arcgisFeaturesReady", 7);
    this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
    this.featuresTriggerAction = createEvent(this, "featuresTriggerAction", 7);
    this._watchHandles = [];
    this.referenceElement = void 0;
    this.collapsed = false;
    this.content = void 0;
    this.features = void 0;
    this.icon = void 0;
    this.promises = void 0;
    this.selectedFeature = void 0;
    this.selectedFeatureIndex = void 0;
    this.featuresTitle = void 0;
    this.visibleElementsActionBar = true;
    this.visibleElementsCloseButton = true;
    this.visibleElementsCollapseButton = true;
    this.visibleElementsFeatureNavigation = true;
    this.visibleElementsHeading = true;
    this.visibleElementsSpinner = true;
    this.position = "bottom-left";
    this.view = void 0;
    this.widget = void 0;
  }
  referenceElementWatcher(value) {
    void referenceElementHelper(this, value);
  }
  contentWatcher(value) {
    if (this.widget) {
      this.widget.content = value;
    }
  }
  featuresWatcher(value) {
    if (this.widget) {
      this.widget.features = value;
    }
  }
  iconWatcher(value) {
    if (this.widget) {
      this.widget.icon = value;
    }
  }
  featuresTitleWatcher(value) {
    if (this.widget) {
      this.widget.title = value;
    }
  }
  visibleElementsActionBarWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        actionBar: value
      };
    }
  }
  visibleElementsCloseButtonWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        closeButton: value
      };
    }
  }
  visibleElementsCollapseButtonWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        collapseButton: value
      };
    }
  }
  visibleElementsFeatureNavigationWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        featureNavigation: value
      };
    }
  }
  visibleElementsHeadingWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        heading: value
      };
    }
  }
  visibleElementsSpinnerWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = {
        ...this.widget.visibleElements,
        spinner: value
      };
    }
  }
  positionWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.view.ui.move(this.childElem, value);
    }
  }
  viewWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.view = value;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Methods
  //
  //--------------------------------------------------------------------------
  async fetchFeatures(screenPoint, options) {
    var _a;
    return await ((_a = this.widget) == null ? void 0 : _a.fetchFeatures(screenPoint, options));
  }
  async clear() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.clear();
  }
  async close() {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.close();
  }
  async next() {
    var _a;
    return (_a = this.widget) == null ? void 0 : _a.next();
  }
  async open(options) {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.open(options);
  }
  async previous() {
    var _a;
    return (_a = this.widget) == null ? void 0 : _a.previous();
  }
  async triggerAction(actionIndex) {
    var _a;
    (_a = this.widget) == null ? void 0 : _a.triggerAction(actionIndex);
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = this._createParams();
    const widget = await newWidgetsFeatures(params);
    this.widget = widget;
    await this._addWatchers();
    this._proxyEvents();
    this._addContainer();
    this.arcgisFeaturesReady.emit();
    checkForView(this);
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    return h("div", { ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  _addContainer() {
    this.widget.container = this.childElem;
  }
  async _addWatchers() {
    const { watch } = await importCoreReactiveUtils();
    addHandles(this, watch(() => this.widget.collapsed, (value) => this.collapsed = value, {
      initial: true
    }));
    addHandles(this, watch(() => this.widget.promises, (value) => this.promises = value, {
      initial: true
    }));
    addHandles(this, watch(() => this.widget.selectedFeature, (value) => {
      this.selectedFeature = value;
      this.arcgisPropertyChange.emit({ name: "selectedFeature" });
    }, {
      initial: true
    }));
    addHandles(this, watch(() => this.widget.selectedFeatureIndex, (value) => {
      this.selectedFeatureIndex = value;
      this.arcgisPropertyChange.emit({ name: "selectedFeatureIndex" });
    }, {
      initial: true
    }));
  }
  _createParams() {
    const params = {};
    params.visibleElements = {
      actionBar: this.visibleElementsActionBar,
      closeButton: this.visibleElementsCloseButton,
      collapseButton: this.visibleElementsCollapseButton,
      featureNavigation: this.visibleElementsFeatureNavigation,
      heading: this.visibleElementsHeading,
      spinner: this.visibleElementsSpinner
    };
    if (this.icon) {
      params.icon = this.icon;
    }
    if (this.view) {
      params.view = this.view;
    }
    if (this.content) {
      params.content = this.content;
    }
    if (this.features) {
      params.features = this.features;
    }
    if (this.featuresTitle) {
      params.title = this.featuresTitle;
    }
    return params;
  }
  _proxyEvents() {
    this.widget.on("trigger-action", (e) => this.featuresTriggerAction.emit(e));
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "referenceElement": ["referenceElementWatcher"],
      "content": ["contentWatcher"],
      "features": ["featuresWatcher"],
      "icon": ["iconWatcher"],
      "featuresTitle": ["featuresTitleWatcher"],
      "visibleElementsActionBar": ["visibleElementsActionBarWatcher"],
      "visibleElementsCloseButton": ["visibleElementsCloseButtonWatcher"],
      "visibleElementsCollapseButton": ["visibleElementsCollapseButtonWatcher"],
      "visibleElementsFeatureNavigation": ["visibleElementsFeatureNavigationWatcher"],
      "visibleElementsHeading": ["visibleElementsHeadingWatcher"],
      "visibleElementsSpinner": ["visibleElementsSpinnerWatcher"],
      "position": ["positionWatcher"],
      "view": ["viewWatcher"]
    };
  }
};
ArcgisFeatures.style = featuresCss;
export {
  ArcgisFeatures as arcgis_features
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-features.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-features.entry-TKEQ2A4I.js.map
