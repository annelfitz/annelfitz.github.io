import {
  e as e4,
  t
} from "./chunk-4ZRUV2JM.js";
import "./chunk-D5LHX57G.js";
import "./chunk-CDYT7KXF.js";
import {
  e as e3
} from "./chunk-EAAEPSBY.js";
import "./chunk-CXNX736Z.js";
import {
  D,
  e2,
  r
} from "./chunk-RGCWZ2KZ.js";
import {
  n
} from "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import "./chunk-2SDMYJDE.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  U,
  p,
  v
} from "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/widgets/Expand/ExpandViewModel.js
var p2 = class extends S {
  constructor(e5) {
    super(e5), this._viewpointHandle = null, this.group = null;
  }
  initialize() {
    this.addHandles(v(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.ui;
    }, "expand", (e5) => {
      const { target: t2 } = e5;
      t2 && t2 !== this && t2.expanded && t2.group && t2.group === this.group && this._collapse();
    }));
  }
  destroy() {
    this._viewpointHandle = null, this.view = null;
  }
  set autoCollapse(e5) {
    this._set("autoCollapse", e5), this._watchViewpoint();
  }
  set expanded(e5) {
    var _a;
    const t2 = !!e5;
    this._set("expanded", t2);
    const i = (_a = this.view) == null ? void 0 : _a.ui;
    i && i.emit("expand", { target: this }), this._viewpointHandleChange(t2);
  }
  get state() {
    var _a;
    return ((_a = this.view) == null ? void 0 : _a.ready) ? "ready" : "disabled";
  }
  set view(e5) {
    this._get("view") !== e5 && (this._set("view", e5), e5 && p(() => e5.ready, () => {
      this.view === e5 && this._watchViewpoint();
    }, { once: true, initial: true }));
  }
  _viewpointHandleChange(e5) {
    this._viewpointHandle && (e5 ? p(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.stationary;
    }, () => {
      var _a;
      return (_a = this._viewpointHandle) == null ? void 0 : _a.resume();
    }, { once: true, initial: true }) : this._viewpointHandle.pause());
  }
  _watchViewpoint() {
    const e5 = "viewpoint";
    this.removeHandles(e5), this._viewpointHandle = null;
    const { autoCollapse: t2, view: i } = this;
    if (!i || !t2)
      return;
    const s = U(() => "3d" === i.type ? i.camera : i.viewpoint, () => this._collapse());
    this.addHandles(s, e5), this._viewpointHandle = s;
  }
  _collapse() {
    this.expanded = false;
  }
};
e([y({ value: false })], p2.prototype, "autoCollapse", null), e([y({ value: false })], p2.prototype, "expanded", null), e([y()], p2.prototype, "group", void 0), e([y({ readOnly: true })], p2.prototype, "state", null), e([y({ value: null })], p2.prototype, "view", null), p2 = e([a("esri.widgets.Expand.ExpandViewModel")], p2);
var r2 = p2;

// node_modules/@arcgis/core/widgets/Expand.js
var c = "esri-expand";
var u = { base: c, modeAuto: `${c}--auto`, modeDrawer: `${c}--drawer`, modeFloating: `${c}--floating`, container: `${c}__container`, containerExpanded: `${c}__container--expanded`, panel: `${c}__panel`, icon: "esri-collapse__icon", iconFlip: "esri-collapse__icon-flip", iconExpanded: `${c}__icon--expanded`, iconNumber: `${c}__icon-number`, iconNumberExpanded: `${c}__icon-number--expanded`, content: `${c}__content`, contentExpanded: `${c}__content--expanded`, expandMask: `${c}__mask`, expandMaskExpanded: `${c}__mask--expanded` };
var m = "chevrons-left";
var h = "chevrons-right";
var _ = class extends D {
  constructor(e5, t2) {
    super(e5, t2), this.closeOnEsc = true, this.collapseTooltip = "", this.content = "", this.expandTooltip = "", this.iconNumber = 0, this.messages = null, this.messagesCommon = null, this.mode = "auto", this.viewModel = new r2(), this.toggle = () => {
      this.viewModel.expanded = !this.viewModel.expanded;
    }, this._handleKeyDown = (e6) => {
      const { closeOnEsc: t3, _toggleButtonEl: o, expanded: n2 } = this;
      if (!n2 || !t3 || e6.target === o || "Escape" !== e6.key)
        return;
      ("function" == typeof t3 ? t3(e6) : t3) && (this.expanded = false, o == null ? void 0 : o.focus());
    };
  }
  loadDependencies() {
    return r({ button: () => import("./calcite-button-V4T5NPWY.js"), icon: () => import("./calcite-icon-25XWA6H7.js") });
  }
  get contentId() {
    return `${this.id}_controls_content`;
  }
  get expandTitle() {
    const { expanded: e5, messagesCommon: t2, collapseTooltip: o, expandTooltip: n2 } = this;
    return (e5 ? o || (t2 == null ? void 0 : t2.collapse) : n2 || (t2 == null ? void 0 : t2.expand)) ?? "";
  }
  get autoCollapse() {
    return this.viewModel.autoCollapse;
  }
  set autoCollapse(e5) {
    this.viewModel.autoCollapse = e5;
  }
  get collapseIcon() {
    return h;
  }
  set collapseIcon(e5) {
    this._overrideIfSome("collapseIcon", e5);
  }
  get expanded() {
    return this.viewModel.expanded;
  }
  set expanded(e5) {
    this.viewModel.expanded = e5;
  }
  get expandIcon() {
    return e4(this.content) ? this.content.icon : m;
  }
  set expandIcon(e5) {
    this._overrideIfSome("expandIcon", e5);
  }
  get group() {
    return this.viewModel.group;
  }
  set group(e5) {
    this.viewModel.group = e5;
  }
  get icon() {
    return null;
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e5) {
    this._overrideIfSome("label", e5);
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e5) {
    this.viewModel.view = e5;
  }
  expand() {
    this.viewModel.expanded = true;
  }
  collapse() {
    this.viewModel.expanded = false;
  }
  render() {
    const { mode: e5 } = this, t2 = { [u.modeAuto]: "auto" === e5, [u.modeDrawer]: "drawer" === e5, [u.modeFloating]: "floating" === e5 };
    return n("div", { class: this.classes(u.base, e3.widget, t2), onkeydown: this._handleKeyDown }, this._renderMask(), this._renderContainer());
  }
  _renderContainer() {
    const { expanded: e5 } = this, t2 = { [u.containerExpanded]: e5 };
    return n("div", { class: this.classes(u.container, t2) }, this._renderPanel(), this._renderContent());
  }
  _renderMask() {
    const { expanded: e5 } = this, t2 = { [u.expandMaskExpanded]: e5 };
    return n("div", { bind: this, class: this.classes(u.expandMask, t2), onclick: this.toggle });
  }
  _renderBadgeNumber() {
    const { expanded: e5, iconNumber: t2 } = this;
    return t2 && !e5 ? n("span", { class: u.iconNumber, key: "expand__icon-number" }, t2) : null;
  }
  _renderPanelNumber() {
    const { iconNumber: e5, expanded: t2 } = this;
    return e5 && t2 ? n("span", { class: this.classes(u.iconNumber, u.iconNumberExpanded), key: "expand__expand-icon-number" }, e5) : null;
  }
  _renderToggleButton() {
    const { expanded: e5, expandTitle: t2, expandIcon: o, collapseIcon: n2, contentId: s } = this, r3 = e5 ? n2 : o, a2 = r3 === m || r3 === h;
    return n("calcite-button", { afterCreate: this._storeToggleButtonEl, "aria-controls": s, "aria-expanded": e5 ? "true" : "false", class: e3.widgetButton, kind: "neutral", label: t2, onclick: this.toggle, scale: "s", title: t2 }, r3 ? n("calcite-icon", { class: this.classes(u.icon, a2 && u.iconFlip), icon: r3, scale: "s" }) : null);
  }
  _renderPanel() {
    return n("div", { class: u.panel }, this._renderToggleButton(), this._renderBadgeNumber(), this._renderPanelNumber());
  }
  _renderContent() {
    const { expanded: e5, contentId: t2, content: o } = this, n2 = { [u.contentExpanded]: e5 }, s = { id: t2, role: "region", class: this.classes(u.content, n2) };
    return "string" == typeof o ? n("div", { innerHTML: o, key: "content__string", ...s }) : e4(o) ? n("div", { key: "content__widget", ...s }, o.render()) : o instanceof HTMLElement ? n("div", { afterCreate: this._attachToNode, bind: o, key: "content__html-element", ...s }) : t(o) ? n("div", { afterCreate: this._attachToNode, bind: o.domNode, key: "content__node", ...s }) : null;
  }
  _attachToNode(e5) {
    const t2 = this;
    e5.appendChild(t2);
  }
  _storeToggleButtonEl(e5) {
    this._toggleButtonEl = e5;
  }
};
e([y({ readOnly: true })], _.prototype, "contentId", null), e([y({ readOnly: true })], _.prototype, "expandTitle", null), e([y()], _.prototype, "autoCollapse", null), e([y()], _.prototype, "closeOnEsc", void 0), e([y()], _.prototype, "collapseIcon", null), e([y()], _.prototype, "collapseTooltip", void 0), e([y()], _.prototype, "content", void 0), e([y()], _.prototype, "expanded", null), e([y()], _.prototype, "expandIcon", null), e([y()], _.prototype, "expandTooltip", void 0), e([y()], _.prototype, "group", null), e([y()], _.prototype, "icon", null), e([y()], _.prototype, "iconNumber", void 0), e([y()], _.prototype, "label", null), e([y(), e2("esri/widgets/Expand/t9n/Expand")], _.prototype, "messages", void 0), e([y(), e2("esri/t9n/common")], _.prototype, "messagesCommon", void 0), e([y()], _.prototype, "mode", void 0), e([y()], _.prototype, "view", null), e([y({ type: r2 })], _.prototype, "viewModel", void 0), _ = e([a("esri.widgets.Expand")], _);
var g = _;
export {
  g as default
};
//# sourceMappingURL=Expand-ORYI3DW6.js.map
