{
  "version": 3,
  "sources": ["../../@arcgis/core/chunks/RealisticTree.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{ForwardLinearDepth as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{Offset as o}from\"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";import{ShaderOutput as r}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as i}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as a}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{InstancedDoublePrecision as l}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";import{NormalAttribute as t}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";import{PositionAttribute as s}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js\";import{SymbolColor as n}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";import{TextureCoordinateAttribute as d}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";import{VertexColor as c}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{VerticalOffset as g}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";import{DefaultMaterialAuxiliaryPasses as m}from\"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";import{EvaluateAmbientOcclusion as v}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";import{EvaluateSceneLighting as p,addAmbientBoostFactor as b,addLightingGlobalFactor as u}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";import{addMainLightDirection as h,addMainLightIntensity as w}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MainLighting.glsl.js\";import{multipassTerrainTest as f}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";import{PhysicallyBasedRendering as x}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";import{PhysicallyBasedRenderingParameters as y,PBRMode as C}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";import{ReadShadowMapPass as L,ReadShadowMapDraw as j}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";import{VisualVariables as M}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{symbolAlphaCutoff as O}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";import{DiscardOrAdjustAlphaPass as A}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";import{MixExternalColor as E}from\"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";import{addProjViewLocalOrigin as P,addCameraPosition as S}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float3PassUniform as $}from\"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";import{Float4PassUniform as T}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as N}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as F}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as V}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{Texture2DPassUniform as D}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{TransparencyPassType as _}from\"../views/3d/webgl-engine/lib/TransparencyPassType.js\";import{VertexAttribute as B}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";function I(I){const R=new V,{vertex:z,fragment:k,varyings:U}=R;return P(z,I),R.include(s),U.add(\"vpos\",\"vec3\"),R.include(M,I),R.include(l,I),R.include(g,I),I.output!==r.Color&&I.output!==r.Alpha||(S(R.vertex,I),R.include(t,I),R.include(a,I),I.offsetBackfaces&&R.include(o),I.instancedColor&&R.attributes.add(B.INSTANCECOLOR,\"vec4\"),U.add(\"vNormalWorld\",\"vec3\"),U.add(\"localvpos\",\"vec3\"),I.multipassEnabled&&U.add(\"depth\",\"float\"),R.include(d,I),R.include(e,I),R.include(n,I),R.include(c,I),z.uniforms.add(new T(\"externalColor\",(e=>e.externalColor))),U.add(\"vcolorExt\",\"vec4\"),z.code.add(F`\n        void main(void) {\n          forwardNormalizedVertexColor();\n          vcolorExt = externalColor;\n          ${I.instancedColor?\"vcolorExt *= instanceColor * 0.003921568627451;\":\"\"}\n          vcolorExt *= vvColor();\n          vcolorExt *= getSymbolColor();\n          forwardColorMixMode();\n\n          if (vcolorExt.a < ${F.float(O)}) {\n            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n          } else {\n            vpos = getVertexInLocalOriginSpace();\n            localvpos = vpos - view[3].xyz;\n            vpos = subtractOrigin(vpos);\n            vNormalWorld = dpNormal(vvLocalNormal(normalModel()));\n            vpos = addVerticalOffset(vpos, localOrigin);\n            gl_Position = transformPosition(proj, view, vpos);\n            ${I.offsetBackfaces?\"gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, cameraPosition);\":\"\"}\n          }\n          ${I.multipassEnabled?F`depth = (view * vec4(vpos, 1.0)).z;`:\"\"}\n          forwardLinearDepth();\n          forwardTextureCoordinates();\n        }\n      `)),I.output===r.Alpha&&(R.include(i,I),R.include(A,I),R.include(f,I),k.uniforms.add(new N(\"opacity\",(e=>e.opacity)),new N(\"layerOpacity\",(e=>e.layerOpacity))),I.hasColorTexture&&k.uniforms.add(new D(\"tex\",(e=>e.texture))),k.include(E),k.code.add(F`\n      void main() {\n        discardBySlice(vpos);\n        ${I.multipassEnabled?F`terrainDepthTest(depth);`:\"\"}\n        ${I.hasColorTexture?F`\n                vec4 texColor = texture(tex, ${I.hasColorTextureTransform?F`colorUV`:F`vuv0`});\n                ${I.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n                discardOrAdjustAlpha(texColor);`:F`vec4 texColor = vec4(1.0);`}\n        ${I.hasVertexColors?F`float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:F`float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\n\n        fragColor = vec4(opacity_);\n      }\n    `)),I.output===r.Color&&(R.include(i,I),R.include(p,I),R.include(v,I),R.include(A,I),R.include(I.instancedDoublePrecision?L:j,I),R.include(f,I),S(R.fragment,I),h(k),b(k),u(k),k.uniforms.add(z.uniforms.get(\"localOrigin\"),z.uniforms.get(\"view\"),new $(\"ambient\",(e=>e.ambient)),new $(\"diffuse\",(e=>e.diffuse)),new N(\"opacity\",(e=>e.opacity)),new N(\"layerOpacity\",(e=>e.layerOpacity))),I.hasColorTexture&&k.uniforms.add(new D(\"tex\",(e=>e.texture))),R.include(y,I),R.include(x,I),k.include(E),w(k),k.code.add(F`\n      void main() {\n        discardBySlice(vpos);\n        ${I.multipassEnabled?F`terrainDepthTest(depth);`:\"\"}\n        ${I.hasColorTexture?F`\n                vec4 texColor = texture(tex, ${I.hasColorTextureTransform?F`colorUV`:F`vuv0`});\n                ${I.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n                discardOrAdjustAlpha(texColor);`:F`vec4 texColor = vec4(1.0);`}\n        vec3 viewDirection = normalize(vpos - cameraPosition);\n        ${I.pbrMode===C.Normal?\"applyPBRFactors();\":\"\"}\n        float ssao = evaluateAmbientOcclusionInverse();\n        ssao *= getBakedOcclusion();\n\n        float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);\n        vec3 additionalLight = ssao * mainLightIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n        ${I.receiveShadows?\"float shadow = readShadowMap(vpos, linearDepth);\":I.spherical?\"float shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);\":\"float shadow = 0.0;\"}\n        vec3 matColor = max(ambient, diffuse);\n        ${I.hasVertexColors?F`\n                vec3 albedo = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n                float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:F`\n                vec3 albedo = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n                float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\n        ${I.snowCover?F`albedo = mix(albedo, vec3(1), 0.9);`:F``}\n        ${F`\n            vec3 shadingNormal = normalize(vNormalWorld);\n            albedo *= 1.2;\n            vec3 viewForward = vec3(view[0][2], view[1][2], view[2][2]);\n            float alignmentLightView = clamp(dot(viewForward, -mainLightDirection), 0.0, 1.0);\n            float transmittance = 1.0 - clamp(dot(viewForward, shadingNormal), 0.0, 1.0);\n            float treeRadialFalloff = vColor.r;\n            float backLightFactor = 0.5 * treeRadialFalloff * alignmentLightView * transmittance * (1.0 - shadow);\n            additionalLight += backLightFactor * mainLightIntensity;`}\n        ${I.pbrMode===C.Normal||I.pbrMode===C.Schematic?I.spherical?F`vec3 normalGround = normalize(vpos + localOrigin);`:F`vec3 normalGround = vec3(0.0, 0.0, 1.0);`:F``}\n        ${I.pbrMode===C.Normal||I.pbrMode===C.Schematic?F`\n                float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * mainLightIntensity[2];\n                ${I.snowCover?F`\n                        mrr = vec3(0.0, 1.0, 0.04);\n                        emission = vec3(0.0);`:\"\"}\n\n                vec3 shadedColor = evaluateSceneLightingPBR(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight, viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);`:F`vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight);`}\n        fragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);\n        ${I.transparencyPassType===_.Color?F`fragColor = premultiplyAlpha(fragColor);`:F``}\n      }\n    `)),R.include(m,I),R}const R=Object.freeze(Object.defineProperty({__proto__:null,build:I},Symbol.toStringTag,{value:\"Module\"}));export{R,I as b};\n"],
  "mappings": "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",
  "names": ["I", "R", "o", "d", "l", "e", "t", "s", "i", "h", "a"]
}
