import {
  ExpandToggle,
  geActionDimensions,
  getOverflowCount,
  overflowActions,
  overflowActionsDebounceInMs,
  queryActions,
  toggleChildActionText
} from "./chunk-W3PWQHT4.js";
import {
  defineCustomElement as defineCustomElement6
} from "./chunk-MIIXMM6K.js";
import {
  defineCustomElement as defineCustomElement5
} from "./chunk-4GGXR6K6.js";
import "./chunk-UU7CDZWZ.js";
import {
  defineCustomElement as defineCustomElement4
} from "./chunk-CRJWLQM6.js";
import "./chunk-EWVP4JRY.js";
import "./chunk-OISPAEAU.js";
import "./chunk-FO2WQPRU.js";
import {
  debounce
} from "./chunk-T2EEZZPH.js";
import {
  defineCustomElement as defineCustomElement3
} from "./chunk-FGO5BVTP.js";
import "./chunk-DRUONESM.js";
import {
  connectConditionalSlotComponent,
  disconnectConditionalSlotComponent
} from "./chunk-RKCSC2VD.js";
import "./chunk-2PAGK4TW.js";
import "./chunk-PLSR7DZH.js";
import {
  defineCustomElement as defineCustomElement2
} from "./chunk-DSHEDHI3.js";
import {
  connectMessages,
  disconnectMessages,
  setUpMessages,
  updateMessages
} from "./chunk-WJ3GFKCF.js";
import {
  connectLocalized,
  disconnectLocalized
} from "./chunk-XFVJO746.js";
import "./chunk-LZWNHWM7.js";
import {
  componentFocusable,
  setComponentLoaded,
  setUpLoadableComponent
} from "./chunk-CMXPBFJM.js";
import {
  defineCustomElement
} from "./chunk-4OX5426K.js";
import {
  createObserver
} from "./chunk-QFS6X7MQ.js";
import "./chunk-55ID4B42.js";
import {
  focusFirstTabbable,
  slotChangeGetAssignedElements,
  slotChangeHasAssignedElement
} from "./chunk-W3V5A544.js";
import "./chunk-3QIVUTMT.js";
import "./chunk-MDRC3XUT.js";
import {
  H,
  Host,
  createEvent,
  h,
  proxyCustomElement
} from "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@esri/calcite-components/dist/components/calcite-action-bar.js
var CSS = {
  actionGroupEnd: "action-group--end"
};
var SLOTS = {
  actionsEnd: "actions-end",
  bottomActions: "bottom-actions",
  expandTooltip: "expand-tooltip"
};
var actionBarCss = ":host{box-sizing:border-box;background-color:var(--calcite-color-foreground-1);color:var(--calcite-color-text-2);font-size:var(--calcite-font-size--1)}:host *{box-sizing:border-box}:host{pointer-events:auto;display:inline-flex;align-self:stretch;--calcite-action-bar-expanded-max-width:auto}:host([layout=vertical]){flex-direction:column}:host([layout=vertical]) .action-group--end{margin-block-start:auto}:host([layout=horizontal]){flex-direction:row}:host([layout=horizontal]) .action-group--end{margin-inline-start:auto}:host([layout=vertical][overflow-actions-disabled]){overflow-y:auto}:host([layout=horizontal][overflow-actions-disabled]){overflow-x:auto}:host([layout=vertical][expanded]){max-inline-size:var(--calcite-action-bar-expanded-max-width)}::slotted(calcite-action-group){border-block-end:1px solid var(--calcite-color-border-3)}:host([layout=horizontal]) ::slotted(calcite-action-group){border-block-end:0;border-inline-end:1px solid var(--calcite-color-border-3)}:host([layout=horizontal][expand-disabled]) ::slotted(calcite-action-group:last-of-type){border-inline-end:0}::slotted(calcite-action-group:last-child){border-block-end:0;border-inline-end:0}.action-group--end{justify-content:flex-end}:host([hidden]){display:none}[hidden]{display:none}";
var ActionBar = proxyCustomElement(class ActionBar2 extends H {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.calciteActionBarToggle = createEvent(this, "calciteActionBarToggle", 6);
    this.mutationObserver = createObserver("mutation", () => {
      const { el, expanded } = this;
      toggleChildActionText({ el, expanded });
      this.overflowActions();
    });
    this.resizeObserver = createObserver("resize", (entries) => this.resizeHandlerEntries(entries));
    this.actionMenuOpenHandler = (event) => {
      if (event.target.menuOpen) {
        const composedPath = event.composedPath();
        Array.from(this.el.querySelectorAll("calcite-action-group")).forEach((group) => {
          if (!composedPath.includes(group)) {
            group.menuOpen = false;
          }
        });
      }
    };
    this.resizeHandlerEntries = (entries) => {
      entries.forEach(this.resizeHandler);
    };
    this.resizeHandler = (entry) => {
      const { width, height } = entry.contentRect;
      this.resize({ width, height });
    };
    this.resize = debounce(({ width, height }) => {
      const { el, expanded, expandDisabled, layout, overflowActionsDisabled } = this;
      if (overflowActionsDisabled || layout === "vertical" && !height || layout === "horizontal" && !width) {
        return;
      }
      const actions = queryActions(el);
      const actionCount = expandDisabled ? actions.length : actions.length + 1;
      const actionGroups = Array.from(el.querySelectorAll("calcite-action-group"));
      this.setGroupLayout(actionGroups);
      const groupCount = this.hasActionsEnd || this.hasBottomActions || !expandDisabled ? actionGroups.length + 1 : actionGroups.length;
      const { actionHeight, actionWidth } = geActionDimensions(actions);
      const overflowCount = getOverflowCount({
        layout,
        actionCount,
        actionHeight,
        actionWidth,
        height,
        width,
        groupCount
      });
      overflowActions({
        actionGroups,
        expanded,
        overflowCount
      });
    }, overflowActionsDebounceInMs);
    this.toggleExpand = () => {
      this.expanded = !this.expanded;
      this.calciteActionBarToggle.emit();
    };
    this.setExpandToggleRef = (el) => {
      this.expandToggleEl = el;
    };
    this.handleDefaultSlotChange = (event) => {
      const groups = slotChangeGetAssignedElements(event).filter((el) => el.matches("calcite-action-group"));
      this.setGroupLayout(groups);
    };
    this.handleActionsEndSlotChange = (event) => {
      this.hasActionsEnd = slotChangeHasAssignedElement(event);
    };
    this.handleBottomActionsSlotChange = (event) => {
      this.hasBottomActions = slotChangeHasAssignedElement(event);
    };
    this.handleTooltipSlotChange = (event) => {
      const tooltips = slotChangeGetAssignedElements(event).filter((el) => el == null ? void 0 : el.matches("calcite-tooltip"));
      this.expandTooltip = tooltips[0];
    };
    this.actionsEndGroupLabel = void 0;
    this.expandDisabled = false;
    this.expanded = false;
    this.layout = "vertical";
    this.overflowActionsDisabled = false;
    this.overlayPositioning = "absolute";
    this.position = void 0;
    this.scale = void 0;
    this.messages = void 0;
    this.messageOverrides = void 0;
    this.effectiveLocale = void 0;
    this.hasActionsEnd = false;
    this.hasBottomActions = false;
    this.expandTooltip = void 0;
    this.defaultMessages = void 0;
  }
  expandHandler() {
    this.overflowActions();
  }
  expandedHandler() {
    const { el, expanded } = this;
    toggleChildActionText({ el, expanded });
    this.overflowActions();
  }
  layoutHandler() {
    this.updateGroups();
  }
  overflowDisabledHandler(overflowActionsDisabled) {
    var _a, _b;
    if (overflowActionsDisabled) {
      (_a = this.resizeObserver) == null ? void 0 : _a.disconnect();
      return;
    }
    (_b = this.resizeObserver) == null ? void 0 : _b.observe(this.el);
    this.overflowActions();
  }
  onMessagesChange() {
  }
  effectiveLocaleChange() {
    updateMessages(this, this.effectiveLocale);
  }
  // --------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  // --------------------------------------------------------------------------
  componentDidLoad() {
    const { el, expanded } = this;
    setComponentLoaded(this);
    toggleChildActionText({ el, expanded });
    this.overflowActions();
  }
  connectedCallback() {
    var _a, _b;
    const { el, expanded } = this;
    connectLocalized(this);
    connectMessages(this);
    toggleChildActionText({ el, expanded });
    (_a = this.mutationObserver) == null ? void 0 : _a.observe(el, { childList: true, subtree: true });
    if (!this.overflowActionsDisabled) {
      (_b = this.resizeObserver) == null ? void 0 : _b.observe(el);
    }
    this.overflowActions();
    connectConditionalSlotComponent(this);
  }
  async componentWillLoad() {
    setUpLoadableComponent(this);
    await setUpMessages(this);
  }
  disconnectedCallback() {
    var _a, _b;
    (_a = this.mutationObserver) == null ? void 0 : _a.disconnect();
    (_b = this.resizeObserver) == null ? void 0 : _b.disconnect();
    disconnectConditionalSlotComponent(this);
    disconnectLocalized(this);
    disconnectMessages(this);
  }
  // --------------------------------------------------------------------------
  //
  //  Methods
  //
  // --------------------------------------------------------------------------
  /**
   * Overflows actions that won't fit into menus.
   *
   * @internal
   */
  async overflowActions() {
    this.resize({ width: this.el.clientWidth, height: this.el.clientHeight });
  }
  /**
   * Sets focus on the component's first focusable element.
   */
  async setFocus() {
    await componentFocusable(this);
    focusFirstTabbable(this.el);
  }
  updateGroups() {
    this.setGroupLayout(Array.from(this.el.querySelectorAll("calcite-action-group")));
  }
  setGroupLayout(groups) {
    groups.forEach((group) => group.layout = this.layout);
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  // --------------------------------------------------------------------------
  renderBottomActionGroup() {
    const { expanded, expandDisabled, el, position, toggleExpand, scale, layout, messages, actionsEndGroupLabel, overlayPositioning } = this;
    const expandToggleNode = !expandDisabled ? h(ExpandToggle, {
      collapseText: messages.collapse,
      el,
      expandText: messages.expand,
      expanded,
      position,
      scale,
      toggle: toggleExpand,
      tooltip: this.expandTooltip,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.setExpandToggleRef
    }) : null;
    return h("calcite-action-group", { class: CSS.actionGroupEnd, hidden: this.expandDisabled && !(this.hasActionsEnd || this.hasBottomActions), label: actionsEndGroupLabel, layout, overlayPositioning, scale }, h("slot", { name: SLOTS.actionsEnd, onSlotchange: this.handleActionsEndSlotChange }), h("slot", { name: SLOTS.bottomActions, onSlotchange: this.handleBottomActionsSlotChange }), h("slot", { name: SLOTS.expandTooltip, onSlotchange: this.handleTooltipSlotChange }), expandToggleNode);
  }
  render() {
    return h(Host, { onCalciteActionMenuOpen: this.actionMenuOpenHandler }, h("slot", { onSlotchange: this.handleDefaultSlotChange }), this.renderBottomActionGroup());
  }
  static get assetsDirs() {
    return ["assets"];
  }
  get el() {
    return this;
  }
  static get watchers() {
    return {
      "expandDisabled": ["expandHandler"],
      "expanded": ["expandedHandler"],
      "layout": ["layoutHandler"],
      "overflowActionsDisabled": ["overflowDisabledHandler"],
      "messageOverrides": ["onMessagesChange"],
      "effectiveLocale": ["effectiveLocaleChange"]
    };
  }
  static get style() {
    return actionBarCss;
  }
}, [1, "calcite-action-bar", {
  "actionsEndGroupLabel": [1, "actions-end-group-label"],
  "expandDisabled": [516, "expand-disabled"],
  "expanded": [1540],
  "layout": [513],
  "overflowActionsDisabled": [516, "overflow-actions-disabled"],
  "overlayPositioning": [513, "overlay-positioning"],
  "position": [513],
  "scale": [513],
  "messages": [1040],
  "messageOverrides": [1040],
  "effectiveLocale": [32],
  "hasActionsEnd": [32],
  "hasBottomActions": [32],
  "expandTooltip": [32],
  "defaultMessages": [32],
  "overflowActions": [64],
  "setFocus": [64]
}, void 0, {
  "expandDisabled": ["expandHandler"],
  "expanded": ["expandedHandler"],
  "layout": ["layoutHandler"],
  "overflowActionsDisabled": ["overflowDisabledHandler"],
  "messageOverrides": ["onMessagesChange"],
  "effectiveLocale": ["effectiveLocaleChange"]
}]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["calcite-action-bar", "calcite-action", "calcite-action-group", "calcite-action-menu", "calcite-icon", "calcite-loader", "calcite-popover"];
  components.forEach((tagName) => {
    switch (tagName) {
      case "calcite-action-bar":
        if (!customElements.get(tagName)) {
          customElements.define(tagName, ActionBar);
        }
        break;
      case "calcite-action":
        if (!customElements.get(tagName)) {
          defineCustomElement3();
        }
        break;
      case "calcite-action-group":
        if (!customElements.get(tagName)) {
          defineCustomElement6();
        }
        break;
      case "calcite-action-menu":
        if (!customElements.get(tagName)) {
          defineCustomElement5();
        }
        break;
      case "calcite-icon":
        if (!customElements.get(tagName)) {
          defineCustomElement();
        }
        break;
      case "calcite-loader":
        if (!customElements.get(tagName)) {
          defineCustomElement2();
        }
        break;
      case "calcite-popover":
        if (!customElements.get(tagName)) {
          defineCustomElement4();
        }
        break;
    }
  });
}
defineCustomElement$1();
var CalciteActionBar = ActionBar;
var defineCustomElement7 = defineCustomElement$1;
export {
  CalciteActionBar,
  defineCustomElement7 as defineCustomElement
};
/*! Bundled license information:

@esri/calcite-components/dist/components/calcite-action-bar.js:
  (*!
   * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
   * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
   * v2.6.0
   *)
*/
//# sourceMappingURL=calcite-action-bar-Q3254TXK.js.map
