import {
  r
} from "./chunk-FQUIQQYI.js";
import {
  p
} from "./chunk-EZMIPVQL.js";
import {
  f as f2
} from "./chunk-WCBCYPOZ.js";
import {
  U,
  w
} from "./chunk-IWO6JXL2.js";
import {
  e as e3,
  y as y2
} from "./chunk-3AIILHI5.js";
import {
  n as n2
} from "./chunk-ZLQTPFTL.js";
import {
  f
} from "./chunk-QYC3GV65.js";
import {
  d
} from "./chunk-ZIJHDTB7.js";
import {
  y
} from "./chunk-HU5IGOTI.js";
import {
  d as d2
} from "./chunk-C24MEKSO.js";
import {
  e as e2
} from "./chunk-BOAEEYBE.js";
import {
  m2 as m
} from "./chunk-HV6S3GY2.js";
import {
  n
} from "./chunk-OIJCMME5.js";
import {
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import {
  e
} from "./chunk-JGDJR5EV.js";

// node_modules/@arcgis/core/views/2d/interactive/SnappingVisualizer2D.js
var f3 = class extends r {
  constructor(e4) {
    super(), this._graphicsLayer = e4, this._symbolPairingsByType = /* @__PURE__ */ new Map();
  }
  visualizeIntersectionPoint(e4, t) {
    return this._visualizeSnappingIndicator(new x({ x: e4.intersectionPoint[0], y: e4.intersectionPoint[1], spatialReference: t.spatialReference }), this._getOrCreateSymbol("intersectionPoint", t.view.effectiveTheme.accentColor));
  }
  visualizePoint(e4, t) {
    return this._visualizeSnappingIndicator(new x({ x: e4.point[0], y: e4.point[1], spatialReference: t.spatialReference }), this._getOrCreateSymbol("point", t.view.effectiveTheme.accentColor));
  }
  visualizeLine(e4, t) {
    return this._visualizeSnappingIndicator(new m({ paths: [[e4.lineStart, e4.lineEnd]], spatialReference: t.spatialReference }), this._getOrCreateSymbol("line", t.view.effectiveTheme.accentColor));
  }
  visualizeParallelSign(e4, t) {
    return this._visualizeSnappingIndicator(new m({ paths: [[e4.lineStart, e4.lineEnd]], spatialReference: t.spatialReference }), this._getOrCreateSymbol("parallelSign", t.view.effectiveTheme.accentColor));
  }
  visualizeRightAngleQuad(e4, t) {
    const r2 = n2(), l = n2(), s = n();
    e3(r2, f2(e4.centerVertex), f2(e4.previousVertex)), e3(l, f2(e4.nextVertex), f2(e4.previousVertex)), y2(s, r2, l);
    const c = `rightAngleQuad${s[2] < 0 ? 45 : 225}`;
    return this._visualizeSnappingIndicator(new m({ paths: [[e4.previousVertex, e4.centerVertex, e4.nextVertex]], spatialReference: t.spatialReference }), this._getOrCreateSymbol(c, t.view.effectiveTheme.accentColor));
  }
  _visualizeSnappingIndicator(r2, i) {
    const o = new f({ geometry: r2, symbol: i });
    return this._graphicsLayer.add(o), e(() => {
      this._graphicsLayer.remove(o);
    });
  }
  _getOrCreateSymbol(e4, t) {
    var _a;
    const r2 = this._symbolPairingsByType;
    return ((_a = r2.get(e4)) == null ? void 0 : _a.color) !== t && r2.set(e4, { color: t, symbol: u(e4, t) }), r2.get(e4).symbol;
  }
};
function u(e4, t) {
  const i = [...t.toRgb(), 255 * t.a];
  switch (e4) {
    case "point":
      return new y({ outline: { width: 0.5, color: [0, 0, 0, 1] }, size: 10, color: t });
    case "intersectionPoint":
      return new y({ outline: new d2({ width: 1.5, color: t }), size: 15, color: [0, 0, 0, 0] });
    case "line":
      return new d({ data: { type: "CIMSymbolReference", symbol: { type: "CIMLineSymbol", symbolLayers: [{ type: "CIMSolidStroke", enable: true, capStyle: U.Butt, joinStyle: w.Round, miterLimit: 10, width: e2(p.lineHintWidthTarget), color: i }] } } });
    case "parallelSign":
      return new d({ data: { type: "CIMSymbolReference", symbol: { type: "CIMLineSymbol", symbolLayers: [{ type: "CIMVectorMarker", enable: true, anchorPoint: { x: 0, y: -1, z: 0 }, anchorPointUnits: "Relative", size: 5, markerPlacement: { type: "CIMMarkerPlacementOnLine", placePerPart: true, angleToLine: true, relativeTo: "LineMiddle" }, frame: { xmin: -5, ymin: -1.5, xmax: 5, ymax: 1.5 }, markerGraphics: [{ type: "CIMMarkerGraphic", geometry: { rings: [[[7, 0], [-7, 0], [-7, 1.5], [7, 1.5]]] }, symbol: { type: "CIMPolygonSymbol", symbolLayers: [{ type: "CIMSolidFill", enable: true, color: i }] } }], scaleSymbolsProportionally: true, respectFrame: true }, { type: "CIMVectorMarker", enable: true, anchorPoint: { x: 0, y: 1, z: 0 }, anchorPointUnits: "Relative", size: 5, markerPlacement: { type: "CIMMarkerPlacementOnLine", placePerPart: true, angleToLine: true, relativeTo: "LineMiddle" }, frame: { xmin: -5, ymin: -1.5, xmax: 5, ymax: 1.5 }, markerGraphics: [{ type: "CIMMarkerGraphic", geometry: { rings: [[[7, 0], [-7, 0], [-7, -1.5], [7, -1.5]]] }, symbol: { type: "CIMPolygonSymbol", symbolLayers: [{ type: "CIMSolidFill", enable: true, color: i }] } }], scaleSymbolsProportionally: true, respectFrame: true }] } } });
    case "rightAngleQuad45":
    case "rightAngleQuad225": {
      const o = "rightAngleQuad45" === e4 ? 45 : 225;
      return new d({ data: { type: "CIMSymbolReference", symbol: { type: "CIMLineSymbol", symbolLayers: [{ type: "CIMVectorMarker", enable: true, anchorPoint: { x: 0.5, y: 0.5, z: 0 }, anchorPointUnits: "Relative", size: e2(p.rightAngleHintSize), rotation: o, markerPlacement: { type: "CIMMarkerPlacementOnVertices", placePerPart: true, angleToLine: true, placeOnEndPoints: false }, frame: { xmin: -5, ymin: -5, xmax: 5, ymax: 5 }, markerGraphics: [{ type: "CIMMarkerGraphic", geometry: { paths: [[[5, -5], [-5, -5], [-5, 5], [5, 5], [5, -5]]] }, symbol: { type: "CIMLineSymbol", symbolLayers: [{ type: "CIMSolidStroke", enable: true, capStyle: "Butt", joinStyle: "Round", miterLimit: 10, width: e2(p.rightAngleHintOutlineSize), color: i }, { type: "CIMSolidFill", enable: true, color: [...t.toRgb(), 255 * t.a * 0.4] }] } }], scaleSymbolsProportionally: true, respectFrame: true }] } } });
    }
  }
}

export {
  f3 as f
};
//# sourceMappingURL=chunk-IEGGIGRQ.js.map
