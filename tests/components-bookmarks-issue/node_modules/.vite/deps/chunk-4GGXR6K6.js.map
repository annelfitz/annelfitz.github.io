{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/components/src/components/action-menu/resources.ts", "../../@esri/calcite-components/dist/components/src/components/action-menu/action-menu.scss?tag=calcite-action-menu&encapsulation=shadow", "../../@esri/calcite-components/dist/components/src/components/action-menu/action-menu.tsx"],
  "sourcesContent": ["export const CSS = {\n  menu: \"menu\",\n  defaultTrigger: \"default-trigger\",\n};\n\nexport const SLOTS = {\n  tooltip: \"tooltip\",\n  trigger: \"trigger\",\n};\n\nexport const ICONS = {\n  menu: \"ellipsis\",\n};\n\nexport const activeAttr = \"data-active\";\n", ":host {\n  @apply text-color-2\n  text-1\n  box-border\n  flex\n  flex-col;\n}\n\n::slotted(calcite-action-group) {\n  border-block-end: 1px solid var(--calcite-color-border-3);\n}\n\n::slotted(calcite-action-group:last-child) {\n  border-block-end: 0;\n}\n\n.default-trigger {\n  @apply relative\n  h-full\n  flex-initial\n  self-stretch;\n}\n\n@include slotted(\"trigger\", \"calcite-action\") {\n  @apply relative\n  h-full\n  flex-initial\n  self-stretch;\n}\n\n.menu {\n  @apply flex-col\n  flex-nowrap\n  outline-none\n  overflow-y-auto\n  overflow-x-hidden\n  max-h-menu;\n}\n\n@include base-component();\n", "import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from \"@stencil/core\";\nimport { Fragment, VNode } from \"@stencil/core/internal\";\nimport { getRoundRobinIndex } from \"../../utils/array\";\nimport { focusElement, isPrimaryPointerButton, toAriaBoolean } from \"../../utils/dom\";\nimport { EffectivePlacement, LogicalPlacement, OverlayPositioning } from \"../../utils/floating-ui\";\nimport { guid } from \"../../utils/guid\";\nimport { isActivationKey } from \"../../utils/key\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { Appearance, Scale } from \"../interfaces\";\nimport { activeAttr, CSS, ICONS, SLOTS } from \"./resources\";\n\nconst SUPPORTED_MENU_NAV_KEYS = [\"ArrowUp\", \"ArrowDown\", \"End\", \"Home\"];\n\n/**\n * @slot - A slot for adding `calcite-action`s.\n * @slot trigger - A slot for adding a `calcite-action` to trigger opening the menu.\n * @slot tooltip - A slot for adding an tooltip for the menu.\n */\n@Component({\n  tag: \"calcite-action-menu\",\n  styleUrl: \"action-menu.scss\",\n  shadow: true,\n})\nexport class ActionMenu implements LoadableComponent {\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.connectMenuButtonEl();\n  }\n\n  componentWillLoad(): void {\n    setUpLoadableComponent(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  disconnectedCallback(): void {\n    this.disconnectMenuButtonEl();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /** Specifies the appearance of the component. */\n  @Prop({ reflect: true }) appearance: Extract<\"solid\" | \"transparent\", Appearance> = \"solid\";\n\n  /**\n   * When `true`, the component is expanded.\n   */\n  @Prop({ reflect: true }) expanded = false;\n\n  @Watch(\"expanded\")\n  expandedHandler(): void {\n    this.open = false;\n    this.setTooltipReferenceElement();\n  }\n\n  /**\n   * Defines the available placements that can be used when a flip occurs.\n   */\n  @Prop() flipPlacements: EffectivePlacement[];\n\n  /**\n   *  Specifies the text string for the component.\n   */\n  @Prop() label!: string;\n\n  /**\n   * When `true`, the component is open.\n   */\n  @Prop({ reflect: true, mutable: true }) open = false;\n\n  @Watch(\"open\")\n  openHandler(open: boolean): void {\n    this.activeMenuItemIndex = this.open ? 0 : -1;\n    if (this.menuButtonEl) {\n      this.menuButtonEl.active = open;\n    }\n    this.calciteActionMenuOpen.emit();\n\n    this.setTooltipReferenceElement();\n  }\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  /**\n   * Determines where the component will be positioned relative to the `referenceElement`.\n   */\n  @Prop({ reflect: true }) placement: LogicalPlacement = \"auto\";\n\n  /**\n   * Specifies the size of the component's trigger `calcite-action`.\n   */\n  @Prop({ reflect: true }) scale: Scale;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Fires when the `open` property is toggled.\n   *\n   */\n  @Event({ cancelable: false }) calciteActionMenuOpen: EventEmitter<void>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteActionMenuElement;\n\n  @State() menuButtonEl: HTMLCalciteActionElement;\n\n  slottedMenuButtonEl: HTMLCalciteActionElement;\n\n  defaultMenuButtonEl: HTMLCalciteActionElement;\n\n  actionElements: HTMLCalciteActionElement[] = [];\n\n  guid = `calcite-action-menu-${guid()}`;\n\n  menuId = `${this.guid}-menu`;\n\n  menuButtonId = `${this.guid}-menu-button`;\n\n  tooltipEl: HTMLCalciteTooltipElement;\n\n  @State() activeMenuItemIndex = -1;\n\n  @Watch(\"activeMenuItemIndex\")\n  activeMenuItemIndexHandler(): void {\n    this.updateActions(this.actionElements);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    return focusElement(this.menuButtonEl);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Component Methods\n  //\n  // --------------------------------------------------------------------------\n\n  connectMenuButtonEl = (): void => {\n    const { menuButtonId, menuId, open, label } = this;\n    const menuButtonEl = this.slottedMenuButtonEl || this.defaultMenuButtonEl;\n\n    if (this.menuButtonEl === menuButtonEl) {\n      return;\n    }\n\n    this.disconnectMenuButtonEl();\n\n    this.menuButtonEl = menuButtonEl;\n\n    this.setTooltipReferenceElement();\n\n    if (!menuButtonEl) {\n      return;\n    }\n\n    menuButtonEl.active = open;\n    menuButtonEl.setAttribute(\"aria-controls\", menuId);\n    menuButtonEl.setAttribute(\"aria-expanded\", toAriaBoolean(open));\n    menuButtonEl.setAttribute(\"aria-haspopup\", \"true\");\n\n    if (!menuButtonEl.id) {\n      menuButtonEl.id = menuButtonId;\n    }\n\n    if (!menuButtonEl.label) {\n      menuButtonEl.label = label;\n    }\n\n    if (!menuButtonEl.text) {\n      menuButtonEl.text = label;\n    }\n\n    menuButtonEl.addEventListener(\"pointerdown\", this.menuButtonClick);\n    menuButtonEl.addEventListener(\"keydown\", this.menuButtonKeyDown);\n  };\n\n  disconnectMenuButtonEl = (): void => {\n    const { menuButtonEl } = this;\n\n    if (!menuButtonEl) {\n      return;\n    }\n\n    menuButtonEl.removeEventListener(\"pointerdown\", this.menuButtonClick);\n    menuButtonEl.removeEventListener(\"keydown\", this.menuButtonKeyDown);\n  };\n\n  setMenuButtonEl = (event: Event): void => {\n    const actions = (event.target as HTMLSlotElement)\n      .assignedElements({\n        flatten: true,\n      })\n      .filter((el) => el?.matches(\"calcite-action\")) as HTMLCalciteActionElement[];\n\n    this.slottedMenuButtonEl = actions[0];\n    this.connectMenuButtonEl();\n  };\n\n  setDefaultMenuButtonEl = (el: HTMLCalciteActionElement): void => {\n    this.defaultMenuButtonEl = el;\n    this.connectMenuButtonEl();\n  };\n\n  renderMenuButton(): VNode {\n    const { appearance, label, scale, expanded } = this;\n\n    const menuButtonSlot = (\n      <slot name={SLOTS.trigger} onSlotchange={this.setMenuButtonEl}>\n        <calcite-action\n          appearance={appearance}\n          class={CSS.defaultTrigger}\n          icon={ICONS.menu}\n          scale={scale}\n          text={label}\n          textEnabled={expanded}\n          // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n          ref={this.setDefaultMenuButtonEl}\n        />\n      </slot>\n    );\n\n    return menuButtonSlot;\n  }\n\n  renderMenuItems(): VNode {\n    const {\n      actionElements,\n      activeMenuItemIndex,\n      open,\n      menuId,\n      menuButtonEl,\n      label,\n      placement,\n      overlayPositioning,\n      flipPlacements,\n    } = this;\n\n    const activeAction = actionElements[activeMenuItemIndex];\n    const activeDescendantId = activeAction?.id || null;\n\n    return (\n      <calcite-popover\n        autoClose={true}\n        flipPlacements={flipPlacements}\n        focusTrapDisabled={true}\n        label={label}\n        offsetDistance={0}\n        onCalcitePopoverClose={this.handlePopoverClose}\n        onCalcitePopoverOpen={this.handlePopoverOpen}\n        open={open}\n        overlayPositioning={overlayPositioning}\n        placement={placement}\n        pointerDisabled={true}\n        referenceElement={menuButtonEl}\n      >\n        <div\n          aria-activedescendant={activeDescendantId}\n          aria-labelledby={menuButtonEl?.id}\n          class={CSS.menu}\n          id={menuId}\n          onClick={this.handleCalciteActionClick}\n          role=\"menu\"\n          tabIndex={-1}\n        >\n          <slot onSlotchange={this.handleDefaultSlotChange} />\n        </div>\n      </calcite-popover>\n    );\n  }\n\n  render(): VNode {\n    return (\n      <Fragment>\n        {this.renderMenuButton()}\n        {this.renderMenuItems()}\n        <slot name={SLOTS.tooltip} onSlotchange={this.updateTooltip} />\n      </Fragment>\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  handleCalciteActionClick = (): void => {\n    this.open = false;\n    this.setFocus();\n  };\n\n  menuButtonClick = (event: PointerEvent): void => {\n    if (!isPrimaryPointerButton(event)) {\n      return;\n    }\n\n    this.toggleOpen();\n  };\n\n  updateTooltip = (event: Event): void => {\n    const tooltips = (event.target as HTMLSlotElement)\n      .assignedElements({\n        flatten: true,\n      })\n      .filter((el) => el?.matches(\"calcite-tooltip\")) as HTMLCalciteTooltipElement[];\n\n    this.tooltipEl = tooltips[0];\n    this.setTooltipReferenceElement();\n  };\n\n  setTooltipReferenceElement = (): void => {\n    const { tooltipEl, expanded, menuButtonEl, open } = this;\n\n    if (tooltipEl) {\n      tooltipEl.referenceElement = !expanded && !open ? menuButtonEl : null;\n    }\n  };\n\n  updateAction = (action: HTMLCalciteActionElement, index: number): void => {\n    const { guid, activeMenuItemIndex } = this;\n    const id = `${guid}-action-${index}`;\n\n    action.tabIndex = -1;\n    action.setAttribute(\"role\", \"menuitem\");\n\n    if (!action.id) {\n      action.id = id;\n    }\n\n    // data attribute is used to style the \"activeMenuItemIndex\" action using token focus styling.\n    action.toggleAttribute(activeAttr, index === activeMenuItemIndex);\n  };\n\n  updateActions = (actions: HTMLCalciteActionElement[]): void => {\n    actions?.forEach(this.updateAction);\n  };\n\n  handleDefaultSlotChange = (event: Event): void => {\n    const actions = (event.target as HTMLSlotElement)\n      .assignedElements({\n        flatten: true,\n      })\n      .reduce(\n        (previousValue: HTMLCalciteActionElement[], currentValue): HTMLCalciteActionElement[] => {\n          if (currentValue?.matches(\"calcite-action\")) {\n            previousValue.push(currentValue as HTMLCalciteActionElement);\n            return previousValue;\n          }\n\n          if (currentValue?.matches(\"calcite-action-group\")) {\n            return previousValue.concat(\n              Array.from(currentValue.querySelectorAll(\"calcite-action\")),\n            );\n          }\n\n          return previousValue;\n        },\n        [],\n      );\n\n    this.actionElements = actions.filter((action) => !action.disabled && !action.hidden);\n  };\n\n  isValidKey(key: string, supportedKeys: string[]): boolean {\n    return !!supportedKeys.find((k) => k === key);\n  }\n\n  menuButtonKeyDown = (event: KeyboardEvent): void => {\n    const { key } = event;\n    const { actionElements, activeMenuItemIndex, open } = this;\n\n    if (!actionElements.length) {\n      return;\n    }\n\n    if (isActivationKey(key)) {\n      event.preventDefault();\n\n      if (!open) {\n        this.toggleOpen();\n        return;\n      }\n\n      const action = actionElements[activeMenuItemIndex];\n      action ? action.click() : this.toggleOpen(false);\n    }\n\n    if (key === \"Tab\") {\n      this.open = false;\n      return;\n    }\n\n    if (key === \"Escape\") {\n      this.toggleOpen(false);\n      event.preventDefault();\n      return;\n    }\n\n    this.handleActionNavigation(event, key, actionElements);\n  };\n\n  handleActionNavigation = (\n    event: KeyboardEvent,\n    key: string,\n    actions: HTMLCalciteActionElement[],\n  ): void => {\n    if (!this.isValidKey(key, SUPPORTED_MENU_NAV_KEYS)) {\n      return;\n    }\n\n    event.preventDefault();\n\n    if (!this.open) {\n      this.toggleOpen();\n\n      if (key === \"Home\" || key === \"ArrowDown\") {\n        this.activeMenuItemIndex = 0;\n      }\n\n      if (key === \"End\" || key === \"ArrowUp\") {\n        this.activeMenuItemIndex = actions.length - 1;\n      }\n\n      return;\n    }\n\n    if (key === \"Home\") {\n      this.activeMenuItemIndex = 0;\n    }\n\n    if (key === \"End\") {\n      this.activeMenuItemIndex = actions.length - 1;\n    }\n\n    const currentIndex = this.activeMenuItemIndex;\n\n    if (key === \"ArrowUp\") {\n      this.activeMenuItemIndex = getRoundRobinIndex(Math.max(currentIndex - 1, -1), actions.length);\n    }\n\n    if (key === \"ArrowDown\") {\n      this.activeMenuItemIndex = getRoundRobinIndex(currentIndex + 1, actions.length);\n    }\n  };\n\n  toggleOpenEnd = (): void => {\n    this.setFocus();\n    this.el.removeEventListener(\"calcitePopoverOpen\", this.toggleOpenEnd);\n  };\n\n  toggleOpen = (value = !this.open): void => {\n    this.el.addEventListener(\"calcitePopoverOpen\", this.toggleOpenEnd);\n    this.open = value;\n  };\n\n  private handlePopoverOpen = (): void => {\n    this.open = true;\n  };\n\n  private handlePopoverClose = (): void => {\n    this.open = false;\n  };\n}\n"],
  "mappings": "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",
  "names": ["ActionMenu", "guid"]
}
