import {
  r
} from "./chunk-7ZU7J3HL.js";
import {
  f as f2,
  i,
  s as s2
} from "./chunk-I2X6UR6L.js";
import {
  U
} from "./chunk-SAYWXQVM.js";
import {
  f
} from "./chunk-SBL4URUW.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  s
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/rest/versionManagement/gdbVersion/support/PostResult.js
var t = class extends f {
  constructor(o) {
    super(o), this.moment = null, this.success = false;
  }
};
e([y({ type: Date, json: { type: Number, write: { writer: (o, r2) => {
  r2.moment = o ? o.getTime() : null;
} } } })], t.prototype, "moment", void 0), e([y({ type: Boolean, json: { write: true } })], t.prototype, "success", void 0), t = e([a("esri.rest.versionManagement.gdbVersion.support.PostResult")], t);
var p = t;

// node_modules/@arcgis/core/rest/versionManagement/gdbVersion/post.js
var p2 = /* @__PURE__ */ new Map();
async function m(m2, f3, a2, u) {
  p2.has(m2) || await r(p2, m2);
  const c = p2.get(m2);
  if (((c == null ? void 0 : c.serverVersion) ?? 0) <= 11.1)
    throw new s("post:enterprise-version", "versioning API requires ArcGIS Enterprise version 11.2 or higher");
  if (!f3)
    throw new s("post:missing-guid", "guid for version is missing");
  const w = f2(m2), g = a2.toJSON();
  a2.rows && (g.rows = JSON.stringify(a2.rows));
  const h = i(w.query, { query: s2({ ...g, f: "json" }), ...u, method: "post" });
  f3.startsWith("{") && (f3 = f3.slice(1, -1));
  const v = `${w.path}/versions/${f3}/post`, { data: j } = await U(v, h);
  return p.fromJSON(j);
}
export {
  m as post,
  p2 as serverVersionCacheMap
};
//# sourceMappingURL=post-YPBRUGLX.js.map
