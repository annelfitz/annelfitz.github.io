import {
  e as e3
} from "./chunk-EAAEPSBY.js";
import {
  D,
  e2,
  r
} from "./chunk-RGCWZ2KZ.js";
import {
  n as n2
} from "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import "./chunk-2SDMYJDE.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/widgets/Fullscreen/FullscreenViewModel.js
var o = class extends S {
  constructor(e4) {
    super(e4), this._vendorInfo = null, this._fullscreenStyle = "width: 100%; height: 100%;", this.view = null, this._errorHandler = this._errorHandler.bind(this), this._stateHandler = this._stateHandler.bind(this);
  }
  destroy() {
    this._removeFullscreenListeners(), this.view = null;
  }
  get element() {
    var _a;
    return ((_a = this.view) == null ? void 0 : _a.container) ?? null;
  }
  set element(e4) {
    this._override("element", e4);
  }
  get state() {
    return this.element ? this._isSupported() ? this._isActive() ? "active" : "ready" : "feature-unsupported" : "disabled";
  }
  enter() {
    this._enterFullscreen();
  }
  exit() {
    this._exitFullscreen();
  }
  toggle() {
    this._isActive() ? this._exitFullscreen() : this._enterFullscreen();
  }
  _isSupported() {
    this._removeFullscreenListeners();
    const e4 = this._getVendorInfo(this.element);
    return this._addFullscreenListeners(e4), this._vendorInfo = e4, !!e4;
  }
  _isActive() {
    return !!this._vendorInfo && !!document[this._vendorInfo.propertyName];
  }
  _stateHandler() {
    this.notifyChange("state"), "active" === this.state ? this._addStyle() : this._removeStyle();
  }
  _errorHandler(e4) {
    n.getLogger(this).error("fullscreen request failed", e4);
  }
  _getVendorInfo(e4) {
    if (e4)
      return e4.requestFullscreen ? { enterName: "requestFullscreen", exitName: "exitFullscreen", errorEventName: "fullscreenerror", changeEventName: "fullscreenchange", propertyName: "fullscreen" } : e4.webkitRequestFullScreen ? { enterName: "webkitRequestFullscreen", exitName: "webkitCancelFullScreen", errorEventName: "webkitfullscreenerror", changeEventName: "webkitfullscreenchange", propertyName: "webkitIsFullScreen" } : e4.mozRequestFullScreen ? { enterName: "mozRequestFullScreen", exitName: "mozCancelFullScreen", errorEventName: "mozfullscreenerror", changeEventName: "mozfullscreenchange", propertyName: "mozFullScreen" } : void 0;
  }
  _enterFullscreen() {
    if ("feature-unsupported" === this.state)
      return void n.getLogger(this).warn("The fullscreen API is not supported in this browser.");
    const { element: e4 } = this;
    e4 && (this._vendorInfo && e4[this._vendorInfo.enterName].call(e4), this.notifyChange("state"));
  }
  _addStyle() {
    const { element: e4 } = this;
    e4 && e4.setAttribute("style", this._fullscreenStyle);
  }
  _removeStyle() {
    const { element: e4 } = this;
    e4 && e4.removeAttribute("style");
  }
  _exitFullscreen() {
    if ("feature-unsupported" === this.state)
      return;
    const { element: e4 } = this;
    e4 && (this._vendorInfo && document[this._vendorInfo.exitName].call(document), this.notifyChange("state"));
  }
  _addFullscreenListeners(e4) {
    e4 && (document.addEventListener(e4.changeEventName, this._stateHandler), document.addEventListener(e4.errorEventName, this._errorHandler));
  }
  _removeFullscreenListeners() {
    const { _vendorInfo: e4 } = this;
    e4 && (document.removeEventListener(e4.changeEventName, this._stateHandler), document.removeEventListener(e4.errorEventName, this._errorHandler));
  }
};
e([y()], o.prototype, "element", null), e([y({ readOnly: true })], o.prototype, "state", null), e([y()], o.prototype, "view", void 0), e([y()], o.prototype, "enter", null), e([y()], o.prototype, "exit", null), e([y()], o.prototype, "toggle", null), o = e([a("esri.widgets.Fullscreen.FullscreenViewModel")], o);
var l = o;

// node_modules/@arcgis/core/widgets/Fullscreen.js
var c = { base: "esri-fullscreen" };
var a2 = class extends D {
  constructor(e4, t) {
    super(e4, t), this.messages = null, this.viewModel = new l(), this._toggle = () => {
      this.viewModel.toggle();
    };
  }
  loadDependencies() {
    return r({ button: () => import("./calcite-button-V4T5NPWY.js") });
  }
  get element() {
    return this.viewModel.element;
  }
  set element(e4) {
    this.viewModel.element = e4;
  }
  get fullscreenTitle() {
    var _a;
    const e4 = (_a = this.viewModel) == null ? void 0 : _a.state;
    return "active" === e4 ? this.messages.exit : "ready" === e4 ? this.messages.enter : "";
  }
  get icon() {
    return "full-screen";
  }
  set icon(e4) {
    this._overrideIfSome("icon", e4);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e4) {
    this._overrideIfSome("label", e4);
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e4) {
    this.viewModel.view = e4;
  }
  render() {
    var _a;
    const { fullscreenTitle: e4, icon: t } = this, s = (_a = this.viewModel) == null ? void 0 : _a.state, o2 = "feature-unsupported" === s, r2 = "ready" === s || "disabled" === s || "feature-unsupported" === s ? "zoom-out-fixed" : "zoom-in-fixed";
    return n2("div", { class: this.classes(c.base, e3.widget) }, !o2 && n2("calcite-button", { class: e3.widgetButton, disabled: "disabled" === s, iconStart: t ?? r2, kind: "neutral", label: e4, onclick: this._toggle, title: e4 }));
  }
};
e([y()], a2.prototype, "element", null), e([y({ readOnly: true })], a2.prototype, "fullscreenTitle", null), e([y()], a2.prototype, "icon", null), e([y()], a2.prototype, "label", null), e([y(), e2("esri/widgets/Fullscreen/t9n/Fullscreen")], a2.prototype, "messages", void 0), e([y()], a2.prototype, "view", null), e([y({ type: l })], a2.prototype, "viewModel", void 0), a2 = e([a("esri.widgets.Fullscreen")], a2);
var u = a2;
export {
  u as default
};
//# sourceMappingURL=Fullscreen-VMM62ZRL.js.map
