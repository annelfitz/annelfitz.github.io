import {
  onDisconnectedHelper
} from "./chunk-K4WPYNMJ.js";
import {
  importCoreReactiveUtils,
  newWidgetsBasemapToggle
} from "./chunk-YXW2SI4L.js";
import {
  addHandles,
  checkForView,
  referenceElementHelper
} from "./chunk-UXZQL3ZN.js";
import {
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-KMIMZXFW.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/map-components/dist/esm/arcgis-basemap-toggle.entry.js
var basemapToggleCss = "";
var ArcgisBasemapToggle = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.arcgisBasemapToggleReady = createEvent(this, "arcgisBasemapToggleReady", 7);
    this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
    this._watchHandles = [];
    this.referenceElement = void 0;
    this.activeBasemap = void 0;
    this.nextBasemap = void 0;
    this.visibleElementsTitle = void 0;
    this.position = "bottom-left";
    this.view = void 0;
    this.widget = void 0;
  }
  referenceElementWatcher(value) {
    void referenceElementHelper(this, value);
  }
  nextBasemapWatcher(value) {
    if (value && this.widget) {
      this.widget.nextBasemap = value;
    }
  }
  visibleElementsTitleWatcher(value) {
    if (this.widget) {
      this.widget.visibleElements = { ...this.widget.visibleElements, title: value };
    }
  }
  positionWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.view.ui.move(this.childElem, value);
    }
  }
  viewWatcher(value) {
    if (value !== void 0 && this.widget) {
      this.widget.view = value;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Methods
  //
  //--------------------------------------------------------------------------
  async toggle() {
    var _a;
    return await ((_a = this.widget) == null ? void 0 : _a.toggle());
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    const params = this._createParams();
    const widget = await newWidgetsBasemapToggle(params);
    this.widget = widget;
    await this._addWatchers();
    this._addContainer();
    this.arcgisBasemapToggleReady.emit();
    checkForView(this);
  }
  disconnectedCallback() {
    onDisconnectedHelper(this);
  }
  render() {
    return h("div", { ref: (el) => this.childElem = el });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  _addContainer() {
    this.widget.container = this.childElem;
  }
  _createParams() {
    const params = {};
    params.visibleElements = {};
    if (this.nextBasemap) {
      params.nextBasemap = this.nextBasemap;
    }
    if (this.visibleElementsTitle) {
      params.visibleElements.title = this.visibleElementsTitle;
    }
    if (this.view) {
      params.view = this.view;
    }
    return params;
  }
  async _addWatchers() {
    const { watch } = await importCoreReactiveUtils();
    addHandles(this, watch(() => this.widget.activeBasemap, (value) => {
      this.activeBasemap = value;
      this.arcgisPropertyChange.emit({ name: "activeBasemap" });
    }, {
      initial: true
    }));
    addHandles(this, watch(() => this.widget.nextBasemap, (value) => {
      this.nextBasemap = value;
      this.arcgisPropertyChange.emit({ name: "nextBasemap" });
    }, {
      initial: true
    }));
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "referenceElement": ["referenceElementWatcher"],
      "nextBasemap": ["nextBasemapWatcher"],
      "visibleElementsTitle": ["visibleElementsTitleWatcher"],
      "position": ["positionWatcher"],
      "view": ["viewWatcher"]
    };
  }
};
ArcgisBasemapToggle.style = basemapToggleCss;
export {
  ArcgisBasemapToggle as arcgis_basemap_toggle
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/arcgis-basemap-toggle.entry.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=arcgis-basemap-toggle.entry-TUGMGFXM.js.map
