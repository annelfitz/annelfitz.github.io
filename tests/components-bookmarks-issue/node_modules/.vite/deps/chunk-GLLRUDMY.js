import {
  L,
  b as b2,
  b2 as b3,
  c2 as c,
  h2 as h,
  h3 as h2,
  k,
  n,
  w2 as w,
  x
} from "./chunk-ZIJHDTB7.js";
import {
  m3 as m
} from "./chunk-A5Q7MMP6.js";
import {
  S
} from "./chunk-G5EVVNIJ.js";
import {
  y
} from "./chunk-HU5IGOTI.js";
import {
  d
} from "./chunk-C24MEKSO.js";
import {
  b
} from "./chunk-HLDUDRTD.js";
import {
  s
} from "./chunk-7RBRCL6S.js";

// node_modules/@arcgis/core/symbols/support/symbolConversion.js
var a = { retainId: false, ignoreDrivers: false, hasLabelingContext: true };
function S2(S3, c2 = a) {
  var _a, _b;
  if (!S3)
    return { symbol: null };
  const { retainId: u = a.retainId, ignoreDrivers: d2 = a.ignoreDrivers, hasLabelingContext: j = a.hasLabelingContext, retainCIM: D = a.retainCIM } = c2;
  let g = null;
  if (x(S3) || S3 instanceof h2)
    g = S3.clone();
  else if ("cim" === S3.type) {
    const o = (_b = (_a = S3.data) == null ? void 0 : _a.symbol) == null ? void 0 : _b.type;
    if ("CIMPointSymbol" !== o)
      return { error: new s("symbol-conversion:unsupported-cim-symbol", `CIM symbol of type '${o || "unknown"}' is unsupported in 3D`, { symbol: S3 }) };
    g = D ? S3.clone() : w.fromCIMSymbol(S3);
  } else if (S3 instanceof d)
    g = b3.fromSimpleLineSymbol(S3);
  else if (S3 instanceof y)
    g = w.fromSimpleMarkerSymbol(S3);
  else if (S3 instanceof n)
    g = w.fromPictureMarkerSymbol(S3);
  else if (S3 instanceof S)
    g = c2.geometryType && "mesh" === c2.geometryType ? c.fromSimpleFillSymbol(S3) : h.fromSimpleFillSymbol(S3);
  else {
    if (!(S3 instanceof m))
      return { error: new s("symbol-conversion:unsupported-2d-symbol", `2D symbol of type '${S3.type || S3.declaredClass}' is unsupported in 3D`, { symbol: S3 }) };
    g = j ? b2.fromTextSymbol(S3) : w.fromTextSymbol(S3);
  }
  return u && g && "cim" !== g.type && (g.id = S3.id), d2 && x(g) && g.symbolLayers.forEach((o) => o.ignoreDrivers = true), { symbol: g };
}

// node_modules/@arcgis/core/symbols/support/jsonUtils.js
function l(o, e, n2, t) {
  const s2 = a2(o, {}, { context: t, isLabelSymbol: false });
  null != s2 && (e[n2] = s2);
}
function i(o, e, n2, t) {
  const s2 = a2(o, {}, { context: t, isLabelSymbol: true });
  null != s2 && (e[n2] = s2);
}
function m2(o) {
  return o instanceof k || o instanceof h2;
}
function a2(o, t, r) {
  if (null == o)
    return null;
  const { context: l2, isLabelSymbol: i2 } = r, a3 = l2 == null ? void 0 : l2.origin, b5 = l2 == null ? void 0 : l2.messages;
  if ("web-scene" === a3 && !m2(o)) {
    const n2 = S2(o, { retainCIM: true, hasLabelingContext: i2 });
    return null != n2.symbol ? n2.symbol.write(t, l2) : (b5 == null ? void 0 : b5.push(new s("symbol:unsupported", `Symbols of type '${o.declaredClass}' are not supported in scenes. Use 3D symbology instead when working with WebScene and SceneView`, { symbol: o, context: l2, error: n2.error })), null);
  }
  return ("web-map" === a3 || "portal-item" === a3 && !b(l2 == null ? void 0 : l2.layer)) && m2(o) ? (b5 == null ? void 0 : b5.push(new s("symbol:unsupported", `Symbols of type '${o.declaredClass}' are not supported in web maps and portal items. Use 2D symbology and CIMSymbol instead when working with MapView`, { symbol: o, context: l2 })), null) : o.write(t, l2);
}
function b4(e, n2) {
  return L(e, null, n2);
}

export {
  a,
  S2 as S,
  l,
  i,
  b4 as b
};
//# sourceMappingURL=chunk-GLLRUDMY.js.map
