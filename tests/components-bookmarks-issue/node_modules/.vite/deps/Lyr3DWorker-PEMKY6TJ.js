import {
  e
} from "./chunk-QSTDWEUG.js";
import {
  u
} from "./chunk-K2JNKW46.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import "./chunk-NDIXNREV.js";
import "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/views/3d/layers/Lyr3DWorker.js
var e2;
var n;
async function r(t) {
  if (await o(), t.inputs.length < 1)
    return { result: { status: u.Failed, error: "", jobDescJson: "", data: new Uint8Array(0), missingInputUrls: [] }, transferList: [] };
  const e3 = { ptrs: [], sizes: [] };
  for (const s of t.inputs) {
    const t2 = n._malloc(s.byteLength);
    new Uint8Array(n.HEAPU8.buffer, t2, s.byteLength).set(new Uint8Array(s)), e3.ptrs.push(t2), e3.sizes.push(s.byteLength);
  }
  const r2 = n.process(t.jobDescJson, e3, t.isMissingResourceCase), i2 = r2.status === u.Succeeded && r2.data, a = r2.status === u.MissingInputs && r2.missingInputUrls.length > 0;
  if (i2) {
    const s = r2.data.slice();
    r2.data = s;
  } else
    a && (r2.jobDescJson = r2.jobDescJson.slice(0), r2.originalInputs = t.inputs);
  for (let s = 0; s < e3.ptrs.length; ++s)
    n._free(e3.ptrs[s]);
  const u2 = [];
  if (i2)
    u2.push(r2.data.buffer);
  else if (a)
    for (const s of t.inputs)
      u2.push(s);
  return { result: r2, transferList: u2 };
}
function i() {
  n && (n.uninitialize_lyr3d_worker_wasm(), n = null);
}
function o() {
  return n ? Promise.resolve() : (e2 || (e2 = e().then((s) => {
    n = s, n.initialize_lyr3d_worker_wasm(), e2 = null;
  })), e2);
}
export {
  i as destroyWasm,
  o as initialize,
  r as process
};
//# sourceMappingURL=Lyr3DWorker-PEMKY6TJ.js.map
