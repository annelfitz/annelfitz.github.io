import {
  m
} from "./chunk-YWTRNCRU.js";
import "./chunk-N5A4ZMGV.js";
import "./chunk-NRRXLBXG.js";
import "./chunk-ZURX6ZW7.js";
import {
  c
} from "./chunk-BIO7MOBF.js";
import "./chunk-B5IJN7OM.js";
import "./chunk-F7X3QPMY.js";
import "./chunk-BMTOVJNA.js";
import "./chunk-CMLG62TA.js";
import {
  n
} from "./chunk-SPU25K6A.js";
import "./chunk-P257AUOX.js";
import {
  p
} from "./chunk-HEMHAUDK.js";
import "./chunk-HB6ZUQQ2.js";
import {
  r
} from "./chunk-67GTVIII.js";
import {
  i
} from "./chunk-SWNHB34O.js";
import {
  u
} from "./chunk-NGAYW4TW.js";
import {
  t
} from "./chunk-6RR3WN7W.js";
import "./chunk-TXCVD3YI.js";
import "./chunk-5MQ4HAUX.js";
import "./chunk-2DATALUO.js";
import "./chunk-MDSRD3WV.js";
import "./chunk-VHY5K2VE.js";
import "./chunk-QR7J3YDY.js";
import "./chunk-GO2OGJDG.js";
import "./chunk-UYMREM3D.js";
import "./chunk-JTUYA5FE.js";
import "./chunk-UNTQATE2.js";
import "./chunk-5YY6NZNY.js";
import {
  se
} from "./chunk-QQDXHR2B.js";
import "./chunk-I4SHZ6P5.js";
import "./chunk-QYDOVVH7.js";
import "./chunk-YSXT2SWC.js";
import "./chunk-YH3SFFF7.js";
import "./chunk-JBU54P54.js";
import "./chunk-WKVHVZW2.js";
import "./chunk-RLZYC2LS.js";
import "./chunk-J6T3FJLS.js";
import "./chunk-VYSGSKHB.js";
import "./chunk-IDPLBNJX.js";
import "./chunk-ZHAZR5C3.js";
import "./chunk-P4MNTMCZ.js";
import "./chunk-BSPKLAHD.js";
import "./chunk-WZJNHZ6H.js";
import "./chunk-YBPOKK6D.js";
import "./chunk-GLF3KRAL.js";
import "./chunk-ZLQTPFTL.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-2SYXH2R7.js";
import "./chunk-7JNXJYRU.js";
import "./chunk-RKVEKQ5O.js";
import "./chunk-P7J4JFEH.js";
import "./chunk-USOPZ2Q6.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-AKLOTDO2.js";
import "./chunk-6AQIVLDN.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-VTH4DAHQ.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  w
} from "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  s
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/views/3d/layers/ImageryTileLayerView3D.js
var y2 = class extends p(i(c(n(u)))) {
  constructor() {
    super(...arguments), this.type = "imagery-tile-3d", this.isAlignedMapTile = true;
  }
  initialize() {
    this.layer.increaseRasterJobHandlerUsage(), null == this.fullExtent && this.addResolvingPromise(Promise.reject(new s("layerview:spatial-reference-incompatible", "The layer extent cannot be projected to the view's spatial reference", { layer: this.layer })));
    const e2 = w(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.basemapTerrain) == null ? void 0 : _b.tilingSchemeLocked;
    }).then(() => {
      const e3 = this.view.basemapTerrain.tilingScheme, t2 = this.layer.tileInfo, r2 = ["png", "png24", "png32", "jpg", "mixed"].includes(t2.format) && e3.compatibleWith(t2);
      this.isAlignedMapTile = r2;
      const i2 = r2 ? t2 : e3.toTileInfo();
      this.tileInfo = i2, this._updatingHandles.add(() => [this.layer.renderer, this.layer.interpolation, this.layer.bandIds, this.layer.multidimensionalDefinition, this.layer.multidimensionalSubset, this.layer.rasterFunction, this.timeExtent], () => this.refresh());
    });
    this.addResolvingPromise(e2);
  }
  destroy() {
    this.layer.decreaseRasterJobHandlerUsage(), this.view = null;
  }
  get _blankTile() {
    const e2 = document.createElement("canvas"), t2 = e2.getContext("2d"), [r2, i2] = this.tileInfo.size;
    return e2.width = r2, e2.height = i2, t2.clearRect(0, 0, r2, i2), t2.getImageData(0, 0, r2, i2);
  }
  get imageFormatIsOpaque() {
    return "jpg" === this.layer.tileInfo.format;
  }
  get hasMixedImageFormats() {
    return "mixed" === this.layer.tileInfo.format;
  }
  get dataLevelRange() {
    var _a, _b;
    const e2 = this.layer.tileInfo, t2 = (_a = this.tileInfo.lodAt(0)) == null ? void 0 : _a.scale, r2 = (_b = this.layer.tileInfo.lodAt(e2.lods.length - 1)) == null ? void 0 : _b.scale;
    return this.levelRangeFromScaleRange(t2, r2);
  }
  _getfullExtent() {
    var _a;
    return se(this.layer.serviceRasterInfo, null != ((_a = this.view.basemapTerrain) == null ? void 0 : _a.spatialReference) ? this.view.basemapTerrain.spatialReference : this.view.spatialReference);
  }
  async fetchTile(e2, t2, r2, i2) {
    const s2 = this.tileInfo, a2 = this._canSymbolizeInWebGL(), n2 = { tileInfo: s2, requestRawData: a2, signal: i2.signal, timeExtent: this.timeExtent, requestAsImageElement: this.isAlignedMapTile, noClip: false }, { layer: l } = this, m2 = await l.fetchTile(e2, t2, r2, n2);
    if (m2 instanceof HTMLImageElement)
      return m2;
    let p2 = m2 == null ? void 0 : m2.pixelBlock;
    if (null == p2)
      return this._blankTile;
    if (!a2 && (p2 = await l.applyRenderer(m2), null == p2))
      return this._blankTile;
    const h = new m([e2, t2, r2], p2, s2.size[0], s2.size[1]);
    return a2 ? (h.symbolizerRenderer = l.symbolizer.rendererJSON, h.symbolizerParameters = l.symbolizer.generateWebGLParameters(this._getSymbolizerOptions(e2)), h.transformGrid = m2.transformGrid, h.bandIds = l.bandIds) : (h.isRendereredSource = true, h.bandIds = null), h.interpolation = l.interpolation, h;
  }
  _getSymbolizerOptions(e2) {
    var _a;
    const t2 = this.tileInfo.lodAt(e2).resolution;
    return { pixelBlock: null, isGCS: null != ((_a = this.view.basemapTerrain) == null ? void 0 : _a.spatialReference) ? this.view.basemapTerrain.spatialReference.isGeographic : this.view.spatialReference.isGeographic, resolution: { x: t2, y: t2 }, bandIds: this.layer.bandIds };
  }
  ensureSymbolizerParameters(e2) {
    this._canSymbolizeInWebGL() && JSON.stringify(e2.symbolizerRenderer) !== JSON.stringify(this.layer.symbolizer.rendererJSON) && (e2.symbolizerParameters = this.layer.symbolizer.generateWebGLParameters(this._getSymbolizerOptions(e2.lij[0])));
  }
  createFetchPopupFeaturesQueryGeometry(e2, t2) {
    return r(e2, t2, this.view);
  }
  refresh() {
    this.emit("data-changed");
  }
  async doRefresh() {
    this.suspended || this.emit("data-changed");
  }
  _canSymbolizeInWebGL() {
    var _a, _b, _c;
    const e2 = t(), { symbolizer: t2 } = this.layer, r2 = (_b = (_a = t2.lookup) == null ? void 0 : _a.colormapLut) == null ? void 0 : _b.indexedColormap, i2 = !!((_c = this.layer.rasterFunction) == null ? void 0 : _c.hasClipFunction), s2 = r2 && r2.length > 4 * (e2.maxTextureSize || 4906);
    return t2.canRenderInWebGL && !s2 && !i2;
  }
};
e([y({ readOnly: true })], y2.prototype, "_blankTile", null), e([y({ readOnly: true })], y2.prototype, "imageFormatIsOpaque", null), e([y({ readOnly: true })], y2.prototype, "hasMixedImageFormats", null), e([y({ readOnly: true })], y2.prototype, "dataLevelRange", null), y2 = e([a("esri.views.3d.layers.ImageryTileLayerView3D")], y2);
var u2 = y2;
export {
  u2 as default
};
//# sourceMappingURL=ImageryTileLayerView3D-SD3RSLSQ.js.map
