import {
  Y,
  f as f3,
  m
} from "./chunk-ZUGLZCI5.js";
import "./chunk-7VV4JAZJ.js";
import {
  p as p2
} from "./chunk-7OR5BJ53.js";
import "./chunk-5HSC73OQ.js";
import "./chunk-G3TGE2VT.js";
import "./chunk-ECTYMEUP.js";
import "./chunk-3IAZNUQL.js";
import "./chunk-5P57RIA4.js";
import "./chunk-AC67ONZX.js";
import "./chunk-ZOUC7PLM.js";
import "./chunk-F2EHRKUX.js";
import "./chunk-2636VFVY.js";
import "./chunk-252ISA6Z.js";
import "./chunk-TLTAGTBA.js";
import "./chunk-2QPP5AGU.js";
import "./chunk-2C26DRKK.js";
import "./chunk-M4RFJU4F.js";
import "./chunk-ONKWNPIN.js";
import "./chunk-BUEJAM23.js";
import "./chunk-Q5NCQLSM.js";
import "./chunk-HFYOMP47.js";
import "./chunk-TOKUWZQG.js";
import "./chunk-JNGJWHJD.js";
import {
  i
} from "./chunk-QMPD4WXY.js";
import {
  l
} from "./chunk-AHEDDTVZ.js";
import "./chunk-4IKPTZ53.js";
import "./chunk-DXMBDX2I.js";
import "./chunk-TUVEYM7U.js";
import "./chunk-5S637BGW.js";
import "./chunk-BFOJPIF7.js";
import "./chunk-OHYLFFUW.js";
import {
  e as e2
} from "./chunk-XW3FDKYP.js";
import "./chunk-Y7RXGLGH.js";
import "./chunk-3JC3OUNW.js";
import "./chunk-RO3CTAP7.js";
import "./chunk-GKMVTGGM.js";
import "./chunk-XGTCDM4C.js";
import "./chunk-QNG4TY7L.js";
import "./chunk-RW5QMWE6.js";
import "./chunk-LGMX4E7L.js";
import "./chunk-OKRW5W44.js";
import "./chunk-RGAA5Z76.js";
import "./chunk-Q6RZBEZ6.js";
import "./chunk-PC66NY33.js";
import "./chunk-YY2VB3AE.js";
import "./chunk-VEYMN5N3.js";
import "./chunk-H6NTWZSO.js";
import "./chunk-BMT3OVAP.js";
import "./chunk-W5ALAOW2.js";
import "./chunk-FHDHOWK5.js";
import "./chunk-Y546C2O5.js";
import "./chunk-IYKBAIQE.js";
import "./chunk-BDRVHR2K.js";
import "./chunk-DVIGFJWY.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-ERD6I7QP.js";
import "./chunk-EZL4LTMD.js";
import "./chunk-F3BQGS35.js";
import "./chunk-Z3NX5DTX.js";
import "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import "./chunk-LMO6NZJA.js";
import "./chunk-A5QTLE4Y.js";
import "./chunk-SCHTG6ZQ.js";
import "./chunk-YUUTEPX2.js";
import "./chunk-G7YFDDME.js";
import "./chunk-PCKG3UTS.js";
import "./chunk-3VMVD66K.js";
import "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-I2X6UR6L.js";
import "./chunk-CYVKDANA.js";
import {
  j
} from "./chunk-4ZLXDMI5.js";
import {
  t
} from "./chunk-SBARCIDP.js";
import {
  o as o2
} from "./chunk-QG73ZMDG.js";
import "./chunk-2SYXH2R7.js";
import "./chunk-7JNXJYRU.js";
import {
  f as f2
} from "./chunk-EMYOYGGK.js";
import {
  n
} from "./chunk-6PMFOUWZ.js";
import "./chunk-3KPZ3BQR.js";
import "./chunk-5JYVZQZR.js";
import {
  t as t2
} from "./chunk-UUG4W2PI.js";
import {
  u
} from "./chunk-WW22JHXA.js";
import {
  S
} from "./chunk-ZAM62XN5.js";
import {
  d
} from "./chunk-RKVEKQ5O.js";
import "./chunk-P7J4JFEH.js";
import {
  b
} from "./chunk-G7FOE26O.js";
import "./chunk-USOPZ2Q6.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-JW7VBMHD.js";
import "./chunk-GLLRUDMY.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-AKLOTDO2.js";
import "./chunk-6AQIVLDN.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-LBXFRGMS.js";
import {
  p,
  v as v2,
  w
} from "./chunk-VTH4DAHQ.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-SLQA5YBV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-5LSHHVQ5.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import {
  f
} from "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import {
  o
} from "./chunk-YOPMY6TS.js";
import {
  r
} from "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import {
  s as s2
} from "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import {
  I,
  U,
  _,
  v
} from "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a2
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  a
} from "./chunk-JGDJR5EV.js";
import "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  s
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/layers/TileLayer.js
var W;
var I2 = ["Canvas/World_Dark_Gray_Base", "Canvas/World_Dark_Gray_Reference", "Canvas/World_Light_Gray_Base", "Canvas/World_Light_Gray_Reference", "Elevation/World_Hillshade", "Elevation/World_Hillshade_Dark", "Ocean/World_Ocean_Base", "Ocean/World_Ocean_Reference", "Ocean_Basemap", "Reference/World_Boundaries_and_Places", "Reference/World_Boundaries_and_Places_Alternate", "Reference/World_Transportation", "World_Imagery", "World_Street_Map", "World_Topo_Map"];
var B = W = class extends n(t2(m(p2(f3(u(j(l(S(f2(i(e2(b)))))))))))) {
  constructor(...e3) {
    super(...e3), this.listMode = "show", this.isReference = null, this.operationalLayerType = "ArcGISTiledMapServiceLayer", this.resampling = true, this.sourceJSON = null, this.spatialReference = null, this.path = null, this.sublayers = null, this.type = "tile", this.url = null;
  }
  normalizeCtorArgs(e3, r2) {
    return "string" == typeof e3 ? { url: e3, ...r2 } : e3;
  }
  load(e3) {
    const r2 = null != e3 ? e3.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Map Service"] }, e3).catch(a).then(() => this._fetchService(r2))), Promise.resolve(this);
  }
  get attributionDataUrl() {
    var _a;
    const e3 = (_a = this.parsedUrl) == null ? void 0 : _a.path.toLowerCase();
    return e3 ? this._getDefaultAttribution(this._getMapName(e3)) : null;
  }
  readSpatialReference(e3, r2) {
    var _a;
    return (e3 = e3 || ((_a = r2.tileInfo) == null ? void 0 : _a.spatialReference)) && f.fromJSON(e3);
  }
  writeSublayers(e3, r2, t3, s3) {
    if (!this.loaded || !e3)
      return;
    const i2 = e3.slice().reverse().flatten(({ sublayers: e4 }) => e4 && e4.toArray().reverse()).toArray(), o3 = [], a3 = { writeSublayerStructure: false, ...s3 };
    i2.forEach((e4) => {
      const r3 = e4.write({}, a3);
      o3.push(r3);
    });
    o3.some((e4) => Object.keys(e4).length > 1) && (r2.layers = o3);
  }
  get tileServers() {
    var _a;
    return this._getDefaultTileServers((_a = this.parsedUrl) == null ? void 0 : _a.path);
  }
  castTileServers(e3) {
    return Array.isArray(e3) ? e3.map((e4) => I(e4).path) : null;
  }
  fetchTile(e3, t3, s3, i2 = {}) {
    const { signal: o3 } = i2, a3 = this.getTileUrl(e3, t3, s3), l2 = { responseType: "image", signal: o3, query: { ...this.refreshParameters } };
    return U(a3, l2).then((e4) => e4.data);
  }
  async fetchImageBitmapTile(e3, t3, s3, i2 = {}) {
    const { signal: o3 } = i2;
    if (this.fetchTile !== W.prototype.fetchTile) {
      const r2 = await this.fetchTile(e3, t3, s3, i2);
      return o2(r2, e3, t3, s3, o3);
    }
    const a3 = this.getTileUrl(e3, t3, s3), l2 = { responseType: "blob", signal: o3, query: { ...this.refreshParameters } }, { data: n2 } = await U(a3, l2);
    return o2(n2, e3, t3, s3, o3);
  }
  getTileUrl(e3, r2, t3) {
    var _a, _b;
    const s3 = !this.capabilities.operations.supportsTileMap && this.supportsBlankTile, i2 = v({ ...(_a = this.parsedUrl) == null ? void 0 : _a.query, blankTile: !s3 && null, ...this.customParameters, token: this.apiKey }), o3 = this.tileServers;
    return `${o3 && o3.length ? o3[r2 % o3.length] : (_b = this.parsedUrl) == null ? void 0 : _b.path}/tile/${e3}/${r2}/${t3}${i2 ? "?" + i2 : ""}`;
  }
  loadAll() {
    return t(this, (e3) => {
      e3(this.allSublayers);
    });
  }
  _fetchService(e3) {
    return new Promise((s3, i2) => {
      if (this.sourceJSON) {
        if (null != this.sourceJSON.bandCount && null != this.sourceJSON.pixelSizeX)
          throw new s("tile-layer:unsupported-url", "use ImageryTileLayer to open a tiled image service");
        return void s3({ data: this.sourceJSON });
      }
      if (!this.parsedUrl)
        throw new s("tile-layer:undefined-url", "layer's url is not defined");
      const o3 = p(this.parsedUrl.path);
      if (null != o3 && "ImageServer" === o3.serverType)
        throw new s("tile-layer:unsupported-url", "use ImageryTileLayer to open a tiled image service");
      U(this.parsedUrl.path, { query: { f: "json", ...this.parsedUrl.query, ...this.customParameters, token: this.apiKey }, responseType: "json", signal: e3 }).then(s3, i2);
    }).then((r2) => {
      let t3 = this.url;
      if (r2.ssl && (t3 = this.url = t3.replace(/^http:/i, "https:")), this.sourceJSON = r2.data, this.read(r2.data, { origin: "service", url: this.parsedUrl }), 10.1 === this.version && !w(t3))
        return this._fetchServerVersion(t3, e3).then((e4) => {
          this.read({ currentVersion: e4 });
        }).catch(() => {
        });
    });
  }
  _fetchServerVersion(e3, s3) {
    if (!v2(e3))
      return Promise.reject();
    const i2 = e3.replace(/(.*\/rest)\/.*/i, "$1") + "/info";
    return U(i2, { query: { f: "json", ...this.customParameters, token: this.apiKey }, responseType: "json", signal: s3 }).then((e4) => {
      if (e4.data && e4.data.currentVersion)
        return e4.data.currentVersion;
      throw new s("tile-layer:version-not-available");
    });
  }
  _getMapName(e3) {
    const r2 = e3.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/mapserver/i);
    return r2 ? r2[2] : void 0;
  }
  _getDefaultAttribution(e3) {
    if (null == e3)
      return null;
    let r2;
    e3 = e3.toLowerCase();
    for (let t3 = 0, s3 = I2.length; t3 < s3; t3++)
      if (r2 = I2[t3], r2.toLowerCase().includes(e3))
        return _("//static.arcgis.com/attribution/" + r2);
    return null;
  }
  _getDefaultTileServers(e3) {
    if (null == e3)
      return [];
    const r2 = -1 !== e3.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i), t3 = -1 !== e3.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i);
    return r2 || t3 ? [e3, e3.replace(r2 ? /server\.arcgisonline/i : /services\.arcgisonline/i, r2 ? "services.arcgisonline" : "server.arcgisonline")] : [];
  }
  get hasOverriddenFetchTile() {
    return !this.fetchTile[C];
  }
};
e([y({ readOnly: true })], B.prototype, "attributionDataUrl", null), e([y({ type: ["show", "hide", "hide-children"] })], B.prototype, "listMode", void 0), e([y({ json: { read: true, write: true } })], B.prototype, "blendMode", void 0), e([y({ type: Boolean, json: { read: false, write: { enabled: true, overridePolicy: () => ({ enabled: false }) } } })], B.prototype, "isReference", void 0), e([y({ readOnly: true, type: ["ArcGISTiledMapServiceLayer"] })], B.prototype, "operationalLayerType", void 0), e([y({ type: Boolean })], B.prototype, "resampling", void 0), e([y()], B.prototype, "sourceJSON", void 0), e([y({ type: f })], B.prototype, "spatialReference", void 0), e([o("spatialReference", ["spatialReference", "tileInfo"])], B.prototype, "readSpatialReference", null), e([y({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], B.prototype, "path", void 0), e([y({ readOnly: true })], B.prototype, "sublayers", void 0), e([r("sublayers", { layers: { type: [Y] } })], B.prototype, "writeSublayers", null), e([y({ json: { read: false, write: false } })], B.prototype, "popupEnabled", void 0), e([y()], B.prototype, "tileServers", null), e([s2("tileServers")], B.prototype, "castTileServers", null), e([y({ readOnly: true, json: { read: false } })], B.prototype, "type", void 0), e([y(d)], B.prototype, "url", void 0), B = W = e([a2("esri.layers.TileLayer")], B);
var C = Symbol("default-fetch-tile");
B.prototype.fetchTile[C] = true;
var N = B;
export {
  N as default
};
//# sourceMappingURL=TileLayer-GPHOZOGI.js.map
