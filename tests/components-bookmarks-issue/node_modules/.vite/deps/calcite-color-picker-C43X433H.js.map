{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/components/src/components/color-picker/resources.ts", "../../@esri/calcite-components/dist/components/src/components/color-picker-hex-input/resources.ts", "../../@esri/calcite-components/dist/components/src/components/color-picker-hex-input/color-picker-hex-input.scss?tag=calcite-color-picker-hex-input&encapsulation=shadow", "../../@esri/calcite-components/dist/components/src/components/color-picker-hex-input/color-picker-hex-input.tsx", "../../@esri/calcite-components/dist/components/src/components/color-picker/color-picker.scss?tag=calcite-color-picker&encapsulation=shadow", "../../@esri/calcite-components/dist/components/src/components/color-picker/color-picker.tsx"],
  "sourcesContent": ["import Color from \"color\";\n\nexport const CSS = {\n  channel: \"channel\",\n  channels: \"channels\",\n  colorField: \"color-field\",\n  colorFieldScope: \"scope--color-field\",\n  colorMode: \"color-mode\",\n  colorModeContainer: \"color-mode-container\",\n  container: \"container\",\n  control: \"control\",\n  controlAndScope: \"control-and-scope\",\n  controlSection: \"control-section\",\n  deleteColor: \"delete-color\",\n  header: \"header\",\n  hexAndChannelsGroup: \"hex-and-channels-group\",\n  hexOptions: \"color-hex-options\",\n  hueScope: \"scope--hue\",\n  hueSlider: \"hue-slider\",\n  opacityScope: \"scope--opacity\",\n  opacitySlider: \"opacity-slider\",\n  preview: \"preview\",\n  previewAndSliders: \"preview-and-sliders\",\n  saveColor: \"save-color\",\n  savedColor: \"saved-color\",\n  savedColors: \"saved-colors\",\n  savedColorsButtons: \"saved-colors-buttons\",\n  savedColorsSection: \"saved-colors-section\",\n  scope: \"scope\",\n  section: \"section\",\n  slider: \"slider\",\n  sliders: \"sliders\",\n  splitSection: \"section--split\",\n};\n\nexport const DEFAULT_COLOR = Color(\"#007AC2\");\nexport const DEFAULT_STORAGE_KEY_PREFIX = \"calcite-color-\";\n\nexport const RGB_LIMITS = {\n  r: 255,\n  g: 255,\n  b: 255,\n};\n\nexport const HSV_LIMITS = {\n  h: 360,\n  s: 100,\n  v: 100,\n};\n\n// 0 and 360 represent the same value, so we limit the hue to 359\nexport const HUE_LIMIT_CONSTRAINED = HSV_LIMITS.h - 1;\n\nexport const OPACITY_LIMITS = {\n  min: 0,\n  max: 100,\n};\n\nexport const DIMENSIONS = {\n  s: {\n    slider: {\n      height: 12,\n      width: 104,\n    },\n    colorField: {\n      height: 80,\n      width: 160,\n    },\n    thumb: {\n      radius: 10,\n    },\n  },\n  m: {\n    slider: {\n      height: 12,\n      width: 204,\n    },\n    colorField: {\n      height: 150,\n      width: 272,\n    },\n    thumb: {\n      radius: 10,\n    },\n  },\n  l: {\n    slider: {\n      height: 12,\n      width: 384,\n    },\n    colorField: {\n      height: 200,\n      width: 464,\n    },\n    thumb: {\n      radius: 10,\n    },\n  },\n};\n\nexport const SCOPE_SIZE = 1;\n", "export const CSS = {\n  container: \"container\",\n  hexInput: \"hex-input\",\n  opacityInput: \"opacity-input\",\n};\n", ":host {\n  @apply block;\n}\n\n.container {\n  @apply flex w-full items-center flex-nowrap;\n}\n\n.hex-input {\n  @apply grow uppercase;\n}\n\n.opacity-input {\n  inline-size: 68px;\n  margin-inline-start: -1px;\n}\n\n:host([scale=\"s\"]) {\n  .container {\n    @apply flex-wrap gap-y-0.5;\n  }\n\n  .opacity-input {\n    inline-size: unset;\n    margin-inline-start: unset;\n  }\n}\n\n:host([scale=\"l\"]) {\n  .opacity-input {\n    inline-size: 88px;\n  }\n}\n\n@include base-component();\n", "import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport {\n  alphaToOpacity,\n  hexChar,\n  hexify,\n  isLonghandHex,\n  isValidHex,\n  normalizeHex,\n  opacityToAlpha,\n  rgbToHex,\n} from \"../color-picker/utils\";\nimport { CSS } from \"./resources\";\nimport { Scale } from \"../interfaces\";\nimport { Channels, RGB } from \"../color-picker/interfaces\";\nimport Color from \"color\";\nimport { focusElement } from \"../../utils/dom\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { NumberingSystem } from \"../../utils/locale\";\nimport { OPACITY_LIMITS } from \"../color-picker/resources\";\nimport { ColorPickerMessages } from \"../color-picker/assets/color-picker/t9n\";\n\nconst DEFAULT_COLOR = Color();\n\n@Component({\n  tag: \"calcite-color-picker-hex-input\",\n  styleUrl: \"color-picker-hex-input.scss\",\n  shadow: true,\n})\nexport class ColorPickerHexInput implements LoadableComponent {\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    const { allowEmpty, alphaChannel, value } = this;\n\n    if (value) {\n      const normalized = normalizeHex(value, alphaChannel);\n\n      if (isValidHex(normalized, alphaChannel)) {\n        this.internalSetValue(normalized, normalized, false);\n      }\n\n      return;\n    }\n\n    if (allowEmpty) {\n      this.internalSetValue(null, null, false);\n    }\n  }\n\n  componentWillLoad(): void {\n    setUpLoadableComponent(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, an empty color (`null`) will be allowed as a `value`.\n   *\n   * When `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.\n   */\n  @Prop() allowEmpty = false;\n\n  /**\n   * When `true`, the component will allow updates to the color's alpha value.\n   */\n  @Prop() alphaChannel = false;\n\n  /**\n   * Specifies accessible label for the input field.\n   *\n   * @deprecated use `messages` instead\n   */\n  @Prop() hexLabel = \"Hex\";\n\n  /**\n   * Messages are passed by parent component for accessible labels.\n   *\n   * @internal\n   */\n  @Prop() messages: ColorPickerMessages;\n\n  /** Specifies the Unicode numeral system used by the component for localization. */\n  @Prop() numberingSystem?: NumberingSystem;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /**\n   * The hex value.\n   */\n  @Prop({ mutable: true, reflect: true }) value: string = normalizeHex(\n    hexify(DEFAULT_COLOR, this.alphaChannel),\n    this.alphaChannel,\n    true,\n  );\n\n  @Watch(\"value\")\n  handleValueChange(value: string, oldValue: string): void {\n    this.internalSetValue(value, oldValue, false);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Emitted when the hex value changes.\n   */\n  @Event({ cancelable: false }) calciteColorPickerHexInputChange: EventEmitter<void>;\n\n  private onHexInputBlur = (): void => {\n    const node = this.hexInputNode;\n    const inputValue = node.value;\n    const hex = `#${inputValue}`;\n    const { allowEmpty, internalColor } = this;\n    const willClearValue = allowEmpty && !inputValue;\n    const isLonghand = isLonghandHex(hex);\n\n    // ensure modified pasted hex values are committed since we prevent default to remove the # char.\n    this.onHexInputChange();\n\n    if (willClearValue || (isValidHex(hex) && isLonghand)) {\n      return;\n    }\n\n    // manipulating DOM directly since rerender doesn't update input value\n    node.value =\n      allowEmpty && !internalColor\n        ? \"\"\n        : this.formatHexForInternalInput(\n            rgbToHex(\n              // always display hex input in RRGGBB format\n              internalColor.object() as any as RGB,\n            ),\n          );\n  };\n\n  private onOpacityInputBlur = (): void => {\n    const node = this.opacityInputNode;\n    const inputValue = node.value;\n    const { allowEmpty, internalColor } = this;\n    const willClearValue = allowEmpty && !inputValue;\n\n    if (willClearValue) {\n      return;\n    }\n\n    // manipulating DOM directly since rerender doesn't update input value\n    node.value =\n      allowEmpty && !internalColor ? \"\" : this.formatOpacityForInternalInput(internalColor);\n  };\n\n  private onHexInputChange = (): void => {\n    const nodeValue = this.hexInputNode.value;\n    let value = nodeValue;\n\n    if (value) {\n      const normalized = normalizeHex(value, false);\n      const preserveExistingAlpha = isValidHex(normalized) && this.alphaChannel;\n      if (preserveExistingAlpha && this.internalColor) {\n        const alphaHex = normalizeHex(this.internalColor.hexa(), true).slice(-2);\n        value = `${normalized + alphaHex}`;\n      }\n    }\n\n    this.internalSetValue(value, this.value);\n  };\n\n  private onOpacityInputChange = (): void => {\n    const node = this.opacityInputNode;\n    let value: number | string;\n\n    if (!node.value) {\n      value = node.value;\n    } else {\n      const alpha = opacityToAlpha(Number(node.value));\n      value = this.internalColor?.alpha(alpha).hexa();\n    }\n\n    this.internalSetValue(value, this.value);\n  };\n\n  protected onInputKeyDown = (event: KeyboardEvent): void => {\n    const { altKey, ctrlKey, metaKey, shiftKey } = event;\n    const { alphaChannel, hexInputNode, internalColor, value } = this;\n    const { key } = event;\n    const composedPath = event.composedPath();\n\n    if (key === \"Tab\" || key === \"Enter\") {\n      if (composedPath.includes(hexInputNode)) {\n        this.onHexInputChange();\n      } else {\n        this.onOpacityInputChange();\n      }\n\n      if (key === \"Enter\") {\n        event.preventDefault();\n      }\n\n      return;\n    }\n\n    const isNudgeKey = key === \"ArrowDown\" || key === \"ArrowUp\";\n    const oldValue = this.value;\n\n    if (isNudgeKey) {\n      if (!value) {\n        this.internalSetValue(this.previousNonNullValue, oldValue);\n        event.preventDefault();\n        return;\n      }\n\n      const direction = key === \"ArrowUp\" ? 1 : -1;\n      const bump = shiftKey ? 10 : 1;\n\n      this.internalSetValue(\n        hexify(\n          this.nudgeRGBChannels(\n            internalColor,\n            bump * direction,\n            composedPath.includes(hexInputNode) ? \"rgb\" : \"a\",\n          ),\n          alphaChannel,\n        ),\n        oldValue,\n      );\n\n      event.preventDefault();\n      return;\n    }\n\n    const withModifiers = altKey || ctrlKey || metaKey;\n    const singleChar = key.length === 1;\n    const validHexChar = hexChar.test(key);\n\n    if (singleChar && !withModifiers && !validHexChar) {\n      event.preventDefault();\n    }\n  };\n\n  private onHexInputPaste = (event: ClipboardEvent): void => {\n    const hex = event.clipboardData.getData(\"text\");\n\n    if (isValidHex(hex)) {\n      event.preventDefault();\n      this.hexInputNode.value = hex.slice(1);\n    }\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteColorPickerHexInputElement;\n\n  private hexInputNode: HTMLCalciteInputTextElement;\n\n  /**\n   * The last valid/selected color. Used as a fallback if an invalid hex code is entered.\n   */\n  @State() internalColor: Color | null = DEFAULT_COLOR;\n\n  private opacityInputNode: HTMLCalciteInputNumberElement;\n\n  private previousNonNullValue: string = this.value;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  render(): VNode {\n    const { alphaChannel, hexLabel, internalColor, messages, scale, value } = this;\n    const hexInputValue = this.formatHexForInternalInput(value);\n    const opacityInputValue = this.formatOpacityForInternalInput(internalColor);\n    const inputScale = scale === \"l\" ? \"m\" : \"s\";\n\n    return (\n      <div class={CSS.container}>\n        <calcite-input-text\n          class={CSS.hexInput}\n          label={messages?.hex || hexLabel}\n          maxLength={6}\n          onCalciteInputTextChange={this.onHexInputChange}\n          onCalciteInternalInputTextBlur={this.onHexInputBlur}\n          onKeyDown={this.onInputKeyDown}\n          onPaste={this.onHexInputPaste}\n          prefixText=\"#\"\n          scale={inputScale}\n          value={hexInputValue}\n          // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n          ref={this.storeHexInputRef}\n        />\n        {alphaChannel ? (\n          <calcite-input-number\n            class={CSS.opacityInput}\n            key=\"opacity-input\"\n            label={messages?.opacity}\n            max={OPACITY_LIMITS.max}\n            maxLength={3}\n            min={OPACITY_LIMITS.min}\n            numberButtonType=\"none\"\n            numberingSystem={this.numberingSystem}\n            onCalciteInputNumberChange={this.onOpacityInputChange}\n            onCalciteInternalInputNumberBlur={this.onOpacityInputBlur}\n            onKeyDown={this.onInputKeyDown}\n            scale={inputScale}\n            suffixText=\"%\"\n            value={opacityInputValue}\n            // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n            ref={this.storeOpacityInputRef}\n          />\n        ) : null}\n      </div>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    return focusElement(this.hexInputNode);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private internalSetValue(value: string | null, oldValue: string | null, emit = true): void {\n    if (value) {\n      const { alphaChannel } = this;\n      const normalized = normalizeHex(value, alphaChannel, alphaChannel);\n\n      if (isValidHex(normalized, alphaChannel)) {\n        const { internalColor: currentColor } = this;\n        const nextColor = Color(normalized);\n        const normalizedLonghand = normalizeHex(hexify(nextColor, alphaChannel), alphaChannel);\n\n        const changed =\n          !currentColor ||\n          normalizedLonghand !== normalizeHex(hexify(currentColor, alphaChannel), alphaChannel);\n\n        this.internalColor = nextColor;\n        this.previousNonNullValue = normalizedLonghand;\n        this.value = normalizedLonghand;\n\n        if (changed && emit) {\n          this.calciteColorPickerHexInputChange.emit();\n        }\n\n        return;\n      }\n    } else if (this.allowEmpty) {\n      this.internalColor = null;\n      this.value = null;\n\n      if (emit) {\n        this.calciteColorPickerHexInputChange.emit();\n      }\n\n      return;\n    }\n\n    this.value = oldValue;\n  }\n\n  private storeHexInputRef = (node: HTMLCalciteInputTextElement): void => {\n    this.hexInputNode = node;\n  };\n\n  private storeOpacityInputRef = (node: HTMLCalciteInputNumberElement): void => {\n    this.opacityInputNode = node;\n  };\n\n  private formatHexForInternalInput(hex: string): string {\n    return hex ? hex.replace(\"#\", \"\").slice(0, 6) : \"\";\n  }\n\n  private formatOpacityForInternalInput(color: Color): string {\n    return color ? `${alphaToOpacity(color.alpha())}` : \"\";\n  }\n\n  private nudgeRGBChannels(color: Color, amount: number, context: \"rgb\" | \"a\"): Color {\n    let nudgedChannels: Channels;\n    const channels = color.array();\n    const rgbChannels = channels.slice(0, 3);\n\n    if (context === \"rgb\") {\n      const nudgedRGBChannels = rgbChannels.map((channel) => channel + amount);\n      nudgedChannels = [\n        ...nudgedRGBChannels,\n        this.alphaChannel ? channels[3] : undefined,\n      ] as Channels;\n    } else {\n      const nudgedAlpha = opacityToAlpha(alphaToOpacity(color.alpha()) + amount);\n      nudgedChannels = [...rgbChannels, nudgedAlpha] as Channels;\n    }\n\n    return Color(nudgedChannels);\n  }\n}\n", ":host {\n  @apply text-n2h inline-block font-normal;\n}\n\n@include disabled();\n\n:host([scale=\"s\"]) {\n  --calcite-color-picker-spacing: 8px;\n\n  .container {\n    inline-size: 160px;\n  }\n\n  .saved-colors {\n    @apply gap-1;\n    grid-template-columns: repeat(auto-fill, 20px);\n  }\n}\n\n:host([scale=\"m\"]) {\n  --calcite-color-picker-spacing: 12px;\n\n  .container {\n    inline-size: 272px;\n  }\n}\n\n:host([scale=\"l\"]) {\n  --calcite-color-picker-spacing: 16px;\n\n  @apply text-n1h;\n\n  .container {\n    inline-size: 464px;\n  }\n\n  .section {\n    &:first-of-type {\n      padding-block-start: var(--calcite-color-picker-spacing);\n    }\n  }\n\n  .saved-colors {\n    grid-template-columns: repeat(auto-fill, 32px);\n  }\n\n  .control-section {\n    @apply flex-nowrap items-baseline;\n  }\n\n  .control-section {\n    @apply flex-wrap;\n  }\n\n  .color-hex-options {\n    @apply flex\n      flex-shrink\n      flex-col\n      justify-around;\n  }\n\n  .color-mode-container {\n    flex-shrink: 3;\n  }\n}\n\n.container {\n  @apply bg-foreground-1;\n  display: inline-block;\n  border: 1px solid var(--calcite-color-border-1);\n}\n\n.control-and-scope {\n  @apply flex relative cursor-pointer touch-none;\n}\n\n.scope {\n  @apply text-n1\n    focus-base\n    absolute\n    z-default\n    rounded-full\n    bg-transparent\n    w-px\n    h-px\n    pointer-events-none;\n  &:focus {\n    @apply focus-outset;\n    outline-offset: 11px;\n  }\n}\n\n.hex-and-channels-group {\n  @apply w-full;\n}\n\n.hex-and-channels-group,\n.control-section {\n  @apply flex flex-row flex-wrap;\n}\n\n.section {\n  padding-block: 0 var(--calcite-color-picker-spacing);\n  padding-inline: var(--calcite-color-picker-spacing);\n\n  &:first-of-type {\n    padding-block-start: var(--calcite-color-picker-spacing);\n  }\n}\n\n.sliders {\n  @apply flex flex-col justify-between;\n  margin-inline-start: var(--calcite-color-picker-spacing);\n}\n\n.preview-and-sliders {\n  @apply flex items-center;\n  padding: var(--calcite-color-picker-spacing);\n}\n\n.color-hex-options,\n.section--split {\n  flex-grow: 1;\n}\n\n.header {\n  @apply text-color-1\n    flex\n    items-center\n    justify-between;\n}\n\n.color-mode-container {\n  padding-block-start: var(--calcite-color-picker-spacing);\n}\n\n.channels {\n  @apply flex gap-y-0.5;\n}\n\n.channel {\n  &[data-channel-index=\"3\"] {\n    inline-size: 159px;\n  }\n}\n\n:host([scale=\"s\"]) {\n  .channels {\n    @apply flex-wrap;\n  }\n\n  .channel {\n    flex-basis: 30%;\n    flex-grow: 1;\n\n    &[data-channel-index=\"3\"] {\n      inline-size: unset;\n      margin-inline-start: unset;\n    }\n  }\n}\n\n:host([scale=\"l\"]) {\n  .channel {\n    &[data-channel-index=\"3\"] {\n      inline-size: 131px;\n    }\n  }\n}\n\n.saved-colors {\n  @apply grid gap-2;\n  padding-block-start: var(--calcite-color-picker-spacing);\n  grid-template-columns: repeat(auto-fill, 24px);\n}\n\n.saved-colors-buttons {\n  display: flex;\n}\n\n.saved-color {\n  @include focus-style-base();\n\n  cursor: pointer;\n\n  &:focus {\n    @include focus-style-outset();\n  }\n\n  &:hover {\n    transition: outline-color var(--calcite-internal-animation-timing-fast) ease-in-out;\n    outline: 2px solid var(--calcite-color-border-2);\n    outline-offset: 2px;\n  }\n}\n\n@include base-component();\n", "import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Listen,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\n\nimport Color from \"color\";\nimport { Channels, ColorMode, ColorValue, HSLA, HSVA, InternalColor, RGBA } from \"./interfaces\";\nimport { throttle } from \"lodash-es\";\nimport { Direction, getElementDir, isPrimaryPointerButton } from \"../../utils/dom\";\nimport { Scale } from \"../interfaces\";\nimport {\n  CSS,\n  DEFAULT_COLOR,\n  DEFAULT_STORAGE_KEY_PREFIX,\n  DIMENSIONS,\n  HSV_LIMITS,\n  HUE_LIMIT_CONSTRAINED,\n  OPACITY_LIMITS,\n  RGB_LIMITS,\n  SCOPE_SIZE,\n} from \"./resources\";\nimport {\n  alphaCompatible,\n  alphaToOpacity,\n  colorEqual,\n  CSSColorMode,\n  Format,\n  hexify,\n  normalizeAlpha,\n  normalizeColor,\n  normalizeHex,\n  opacityToAlpha,\n  parseMode,\n  SupportedMode,\n  toAlphaMode,\n  toNonAlphaMode,\n} from \"./utils\";\n\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { isActivationKey } from \"../../utils/key\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport {\n  connectLocalized,\n  disconnectLocalized,\n  LocalizedComponent,\n  NumberingSystem,\n} from \"../../utils/locale\";\nimport { clamp, closeToRangeEdge, remap } from \"../../utils/math\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { ColorPickerMessages } from \"./assets/color-picker/t9n\";\n\nconst throttleFor60FpsInMs = 16;\n\n@Component({\n  tag: \"calcite-color-picker\",\n  styleUrl: \"color-picker.scss\",\n  shadow: {\n    delegatesFocus: true,\n  },\n  assetsDirs: [\"assets\"],\n})\nexport class ColorPicker\n  implements InteractiveComponent, LoadableComponent, LocalizedComponent, T9nComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Public properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, an empty color (`null`) will be allowed as a `value`.\n   *\n   * When `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.\n   */\n  @Prop({ reflect: true }) allowEmpty = false;\n\n  /**\n   * When `true`, the component will allow updates to the color's alpha value.\n   */\n  @Prop() alphaChannel = false;\n\n  @Watch(\"alphaChannel\")\n  handleAlphaChannelChange(alphaChannel: boolean): void {\n    const { format } = this;\n\n    if (alphaChannel && format !== \"auto\" && !alphaCompatible(format)) {\n      console.warn(\n        `ignoring alphaChannel as the current format (${format}) does not support alpha`,\n      );\n      this.alphaChannel = false;\n    }\n  }\n\n  /** When `true`, hides the RGB/HSV channel inputs. */\n  @Prop() channelsDisabled = false;\n\n  /**\n   * Internal prop for advanced use-cases.\n   *\n   * @internal\n   */\n  @Prop({ mutable: true }) color: InternalColor | null = DEFAULT_COLOR;\n\n  @Watch(\"color\")\n  handleColorChange(color: Color | null, oldColor: Color | null): void {\n    this.drawColorControls();\n    this.updateChannelsFromColor(color);\n    this.previousColor = oldColor;\n  }\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * The format of `value`.\n   *\n   * When `\"auto\"`, the format will be inferred from `value` when set.\n   *\n   * @default \"auto\"\n   */\n  @Prop({ reflect: true }) format: Format = \"auto\";\n\n  @Watch(\"alphaChannel\")\n  @Watch(\"format\")\n  handleFormatOrAlphaChannelChange(): void {\n    this.setMode(this.format);\n    this.internalColorSet(this.color, false, \"internal\");\n  }\n\n  /**\n   * When `true`, hides the RGB/HSV channel inputs.\n   *\n   * @deprecated use `channelsDisabled` instead\n   */\n  @Prop({ reflect: true }) hideChannels = false;\n\n  /** When `true`, hides the hex input. */\n  @Prop() hexDisabled = false;\n\n  /**\n   * When `true`, hides the hex input.\n   *\n   * @deprecated use `hexDisabled` instead\n   */\n  @Prop({ reflect: true }) hideHex = false;\n\n  /**\n   * When `true`, hides the saved colors section.\n   *\n   * @deprecated use `savedDisabled` instead\n   */\n  @Prop({ reflect: true }) hideSaved = false;\n\n  /** When `true`, hides the saved colors section. */\n  @Prop({ reflect: true }) savedDisabled = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  @Watch(\"scale\")\n  handleScaleChange(scale: Scale = \"m\"): void {\n    this.updateDimensions(scale);\n    this.updateCanvasSize(\"all\");\n    this.drawColorControls();\n  }\n\n  /** Specifies the storage ID for colors. */\n  @Prop({ reflect: true }) storageId: string;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<ColorPickerMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /** Specifies the Unicode numeral system used by the component for localization. */\n  @Prop({ reflect: true }) numberingSystem: NumberingSystem;\n\n  /**\n   * The component's value, where the value can be a CSS color string, or a RGB, HSL or HSV object.\n   *\n   * The type will be preserved as the color is updated.\n   *\n   * @default \"#007ac2\"\n   * @see [CSS Color](https://developer.mozilla.org/en-US/docs/Web/CSS/color)\n   * @see [ColorValue](https://github.com/Esri/calcite-design-system/blob/main/src/components/color-picker/interfaces.ts#L10)\n   */\n  @Prop({ mutable: true }) value: ColorValue | null = normalizeHex(\n    hexify(DEFAULT_COLOR, this.alphaChannel),\n  );\n\n  @Watch(\"value\")\n  handleValueChange(value: ColorValue | null, oldValue: ColorValue | null): void {\n    const { allowEmpty, format } = this;\n    const checkMode = !allowEmpty || value;\n    let modeChanged = false;\n\n    if (checkMode) {\n      const nextMode = parseMode(value);\n\n      if (!nextMode || (format !== \"auto\" && nextMode !== format)) {\n        this.showIncompatibleColorWarning(value, format);\n        this.value = oldValue;\n        return;\n      }\n\n      modeChanged = this.mode !== nextMode;\n      this.setMode(nextMode, this.internalColorUpdateContext === null);\n    }\n\n    const dragging = this.activeCanvasInfo;\n\n    if (this.internalColorUpdateContext === \"initial\") {\n      return;\n    }\n\n    if (this.internalColorUpdateContext === \"user-interaction\") {\n      this.calciteColorPickerInput.emit();\n\n      if (!dragging) {\n        this.calciteColorPickerChange.emit();\n      }\n      return;\n    }\n\n    const color =\n      allowEmpty && !value\n        ? null\n        : Color(\n            value != null && typeof value === \"object\" && alphaCompatible(this.mode)\n              ? normalizeColor(value as RGBA | HSVA | HSLA)\n              : value,\n          );\n    const colorChanged = !colorEqual(color, this.color);\n\n    if (modeChanged || colorChanged) {\n      this.internalColorSet(\n        color,\n        this.alphaChannel && !(this.mode.endsWith(\"a\") || this.mode.endsWith(\"a-css\")),\n        \"internal\",\n      );\n    }\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Internal State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteColorPickerElement;\n\n  private activeCanvasInfo: {\n    context: CanvasRenderingContext2D;\n    bounds: DOMRect;\n  };\n\n  private get baseColorFieldColor(): Color {\n    return this.color || this.previousColor || DEFAULT_COLOR;\n  }\n\n  private checkerPattern: HTMLCanvasElement;\n\n  private colorFieldRenderingContext: CanvasRenderingContext2D;\n\n  private colorFieldScopeNode: HTMLDivElement;\n\n  private hueSliderRenderingContext: CanvasRenderingContext2D;\n\n  private hueScopeNode: HTMLDivElement;\n\n  private internalColorUpdateContext: \"internal\" | \"initial\" | \"user-interaction\" | null = null;\n\n  private mode: SupportedMode = CSSColorMode.HEX;\n\n  private opacityScopeNode: HTMLDivElement;\n\n  private opacitySliderRenderingContext: CanvasRenderingContext2D;\n\n  private previousColor: InternalColor | null;\n\n  private shiftKeyChannelAdjustment = 0;\n\n  @State() defaultMessages: ColorPickerMessages;\n\n  @State() channelMode: ColorMode = \"rgb\";\n\n  @State() channels: Channels = this.toChannels(DEFAULT_COLOR);\n\n  @State() dimensions = DIMENSIONS.m;\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: ColorPickerMessages;\n\n  @State() savedColors: string[] = [];\n\n  @State() colorFieldScopeTop: number;\n\n  @State() colorFieldScopeLeft: number;\n\n  @State() hueScopeLeft: number;\n\n  @State() opacityScopeLeft: number;\n\n  @State() scopeOrientation: \"vertical\" | \"horizontal\";\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Fires when the color value has changed.\n   */\n  @Event({ cancelable: false }) calciteColorPickerChange: EventEmitter<void>;\n\n  /**\n   * Fires as the color value changes.\n   *\n   * Similar to the `calciteColorPickerChange` event with the exception of dragging. When dragging the color field or hue slider thumb, this event fires as the thumb is moved.\n   */\n  @Event({ cancelable: false }) calciteColorPickerInput: EventEmitter<void>;\n\n  private handleTabActivate = (event: Event): void => {\n    this.channelMode = (event.currentTarget as HTMLElement).getAttribute(\n      \"data-color-mode\",\n    ) as ColorMode;\n\n    this.updateChannelsFromColor(this.color);\n  };\n\n  private handleColorFieldScopeKeyDown = (event: KeyboardEvent): void => {\n    const { key } = event;\n    const arrowKeyToXYOffset = {\n      ArrowUp: { x: 0, y: -10 },\n      ArrowRight: { x: 10, y: 0 },\n      ArrowDown: { x: 0, y: 10 },\n      ArrowLeft: { x: -10, y: 0 },\n    };\n\n    if (arrowKeyToXYOffset[key]) {\n      event.preventDefault();\n      this.scopeOrientation = key === \"ArrowDown\" || key === \"ArrowUp\" ? \"vertical\" : \"horizontal\";\n      this.captureColorFieldColor(\n        this.colorFieldScopeLeft + arrowKeyToXYOffset[key].x || 0,\n        this.colorFieldScopeTop + arrowKeyToXYOffset[key].y || 0,\n        false,\n      );\n    }\n  };\n\n  private handleHueScopeKeyDown = (event: KeyboardEvent): void => {\n    const modifier = event.shiftKey ? 10 : 1;\n    const { key } = event;\n    const arrowKeyToXOffset = {\n      ArrowUp: 1,\n      ArrowRight: 1,\n      ArrowDown: -1,\n      ArrowLeft: -1,\n    };\n\n    if (arrowKeyToXOffset[key]) {\n      event.preventDefault();\n      const delta = arrowKeyToXOffset[key] * modifier;\n      const hue = this.baseColorFieldColor.hue();\n      const color = this.baseColorFieldColor.hue(hue + delta);\n      this.internalColorSet(color, false);\n    }\n  };\n\n  private handleHexInputChange = (event: Event): void => {\n    event.stopPropagation();\n    const { allowEmpty, color } = this;\n    const input = event.target as HTMLCalciteColorPickerHexInputElement;\n    const hex = input.value;\n\n    if (allowEmpty && !hex) {\n      this.internalColorSet(null);\n      return;\n    }\n\n    const normalizedHex = color && normalizeHex(hexify(color, alphaCompatible(this.mode)));\n\n    if (hex !== normalizedHex) {\n      this.internalColorSet(Color(hex));\n    }\n  };\n\n  private handleSavedColorSelect = (event: Event): void => {\n    const swatch = event.currentTarget as HTMLCalciteColorPickerSwatchElement;\n    this.internalColorSet(Color(swatch.color));\n  };\n\n  private handleChannelInput = (event: CustomEvent): void => {\n    const input = event.currentTarget as HTMLCalciteInputNumberElement;\n    const channelIndex = Number(input.getAttribute(\"data-channel-index\"));\n    const isAlphaChannel = channelIndex === 3;\n\n    const limit = isAlphaChannel\n      ? OPACITY_LIMITS.max\n      : this.channelMode === \"rgb\"\n        ? RGB_LIMITS[Object.keys(RGB_LIMITS)[channelIndex]]\n        : HSV_LIMITS[Object.keys(HSV_LIMITS)[channelIndex]];\n\n    let inputValue: string;\n\n    if (this.allowEmpty && !input.value) {\n      inputValue = \"\";\n    } else {\n      const value = Number(input.value);\n      const adjustedValue = value + this.shiftKeyChannelAdjustment;\n      const clamped = clamp(adjustedValue, 0, limit);\n\n      inputValue = clamped.toString();\n    }\n\n    input.value = inputValue;\n\n    if (inputValue !== \"\" && this.shiftKeyChannelAdjustment !== 0) {\n      // we treat nudging as a change event since the input won't emit when modifying the value directly\n      this.handleChannelChange(event);\n    }\n  };\n\n  // using @Listen as a workaround for VDOM listener not firing\n  @Listen(\"keydown\", { capture: true })\n  @Listen(\"keyup\", { capture: true })\n  protected handleChannelKeyUpOrDown(event: KeyboardEvent): void {\n    this.shiftKeyChannelAdjustment = 0;\n    const { key } = event;\n\n    if (\n      (key !== \"ArrowUp\" && key !== \"ArrowDown\") ||\n      !event.composedPath().some((node: HTMLElement) => node.classList?.contains(CSS.channel))\n    ) {\n      return;\n    }\n\n    const { shiftKey } = event;\n    event.preventDefault();\n\n    if (!this.color) {\n      this.internalColorSet(this.previousColor);\n      event.stopPropagation();\n      return;\n    }\n\n    // this gets applied to the input's up/down arrow increment/decrement\n    const complementaryBump = 9;\n\n    this.shiftKeyChannelAdjustment =\n      key === \"ArrowUp\" && shiftKey\n        ? complementaryBump\n        : key === \"ArrowDown\" && shiftKey\n          ? -complementaryBump\n          : 0;\n  }\n\n  private handleChannelChange = (event: CustomEvent): void => {\n    const input = event.currentTarget as HTMLCalciteInputNumberElement;\n    const channelIndex = Number(input.getAttribute(\"data-channel-index\"));\n    const channels = [...this.channels] as this[\"channels\"];\n\n    const shouldClearChannels = this.allowEmpty && !input.value;\n\n    if (shouldClearChannels) {\n      this.channels = [null, null, null, null];\n      this.internalColorSet(null);\n      return;\n    }\n\n    const isAlphaChannel = channelIndex === 3;\n    const value = Number(input.value);\n\n    channels[channelIndex] = isAlphaChannel ? opacityToAlpha(value) : value;\n    this.updateColorFromChannels(channels);\n  };\n\n  private handleSavedColorKeyDown = (event: KeyboardEvent): void => {\n    if (isActivationKey(event.key)) {\n      event.preventDefault();\n      this.handleSavedColorSelect(event);\n    }\n  };\n\n  private handleColorFieldPointerDown = (event: PointerEvent): void => {\n    if (!isPrimaryPointerButton(event)) {\n      return;\n    }\n\n    const { offsetX, offsetY } = event;\n\n    window.addEventListener(\"pointermove\", this.globalPointerMoveHandler);\n    window.addEventListener(\"pointerup\", this.globalPointerUpHandler, { once: true });\n\n    this.activeCanvasInfo = {\n      context: this.colorFieldRenderingContext,\n      bounds: this.colorFieldRenderingContext.canvas.getBoundingClientRect(),\n    };\n    this.captureColorFieldColor(offsetX, offsetY);\n    this.colorFieldScopeNode.focus();\n  };\n\n  private handleHueSliderPointerDown = (event: PointerEvent): void => {\n    if (!isPrimaryPointerButton(event)) {\n      return;\n    }\n\n    const { offsetX } = event;\n\n    window.addEventListener(\"pointermove\", this.globalPointerMoveHandler);\n    window.addEventListener(\"pointerup\", this.globalPointerUpHandler, { once: true });\n\n    this.activeCanvasInfo = {\n      context: this.hueSliderRenderingContext,\n      bounds: this.hueSliderRenderingContext.canvas.getBoundingClientRect(),\n    };\n    this.captureHueSliderColor(offsetX);\n    this.hueScopeNode.focus();\n  };\n\n  private handleOpacitySliderPointerDown = (event: PointerEvent): void => {\n    if (!isPrimaryPointerButton(event)) {\n      return;\n    }\n\n    const { offsetX } = event;\n\n    window.addEventListener(\"pointermove\", this.globalPointerMoveHandler);\n    window.addEventListener(\"pointerup\", this.globalPointerUpHandler, { once: true });\n\n    this.activeCanvasInfo = {\n      context: this.opacitySliderRenderingContext,\n      bounds: this.opacitySliderRenderingContext.canvas.getBoundingClientRect(),\n    };\n    this.captureOpacitySliderValue(offsetX);\n    this.opacityScopeNode.focus();\n  };\n\n  private globalPointerUpHandler = (event: PointerEvent): void => {\n    if (!isPrimaryPointerButton(event)) {\n      return;\n    }\n\n    const previouslyDragging = this.activeCanvasInfo;\n    this.activeCanvasInfo = null;\n    this.drawColorControls();\n\n    if (previouslyDragging) {\n      this.calciteColorPickerChange.emit();\n    }\n  };\n\n  private globalPointerMoveHandler = (event: PointerEvent): void => {\n    const { activeCanvasInfo, el } = this;\n\n    if (!el.isConnected || !activeCanvasInfo) {\n      return;\n    }\n\n    const { context, bounds } = activeCanvasInfo;\n\n    let samplingX: number;\n    let samplingY: number;\n\n    const { clientX, clientY } = event;\n\n    if (context.canvas.matches(\":hover\")) {\n      samplingX = clientX - bounds.x;\n      samplingY = clientY - bounds.y;\n    } else {\n      // snap x and y to the closest edge\n\n      if (clientX < bounds.x + bounds.width && clientX > bounds.x) {\n        samplingX = clientX - bounds.x;\n      } else if (clientX < bounds.x) {\n        samplingX = 0;\n      } else {\n        samplingX = bounds.width;\n      }\n\n      if (clientY < bounds.y + bounds.height && clientY > bounds.y) {\n        samplingY = clientY - bounds.y;\n      } else if (clientY < bounds.y) {\n        samplingY = 0;\n      } else {\n        samplingY = bounds.height;\n      }\n    }\n\n    if (context === this.colorFieldRenderingContext) {\n      this.captureColorFieldColor(samplingX, samplingY, false);\n    } else if (context === this.hueSliderRenderingContext) {\n      this.captureHueSliderColor(samplingX);\n    } else if (context === this.opacitySliderRenderingContext) {\n      this.captureOpacitySliderValue(samplingX);\n    }\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component's first focusable element. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    this.el.focus();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n\n    const { allowEmpty, color, format, value } = this;\n\n    const willSetNoColor = allowEmpty && !value;\n    const parsedMode = parseMode(value);\n    const valueIsCompatible =\n      willSetNoColor || (format === \"auto\" && parsedMode) || format === parsedMode;\n    const initialColor = willSetNoColor ? null : valueIsCompatible ? Color(value) : color;\n\n    if (!valueIsCompatible) {\n      this.showIncompatibleColorWarning(value, format);\n    }\n\n    this.setMode(format, false);\n    this.internalColorSet(initialColor, false, \"initial\");\n\n    this.updateDimensions(this.scale);\n\n    const storageKey = `${DEFAULT_STORAGE_KEY_PREFIX}${this.storageId}`;\n\n    if (this.storageId && localStorage.getItem(storageKey)) {\n      this.savedColors = JSON.parse(localStorage.getItem(storageKey));\n    }\n\n    await setUpMessages(this);\n  }\n\n  connectedCallback(): void {\n    connectInteractive(this);\n    connectLocalized(this);\n    connectMessages(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  disconnectedCallback(): void {\n    window.removeEventListener(\"pointermove\", this.globalPointerMoveHandler);\n    window.removeEventListener(\"pointerup\", this.globalPointerUpHandler);\n    disconnectInteractive(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  //--------------------------------------------------------------------------\n\n  render(): VNode {\n    const {\n      allowEmpty,\n      channelsDisabled,\n      color,\n      colorFieldScopeLeft,\n      colorFieldScopeTop,\n      dimensions: {\n        slider: { width: sliderWidth },\n        thumb: { radius: thumbRadius },\n      },\n      hexDisabled,\n      hideChannels,\n      hideHex,\n      hideSaved,\n      hueScopeLeft,\n      messages,\n      alphaChannel,\n      opacityScopeLeft,\n      savedColors,\n      savedDisabled,\n      scale,\n      scopeOrientation,\n    } = this;\n    const selectedColorInHex = color ? hexify(color, alphaChannel) : null;\n    const hueTop = thumbRadius;\n    const hueLeft = hueScopeLeft ?? (sliderWidth * DEFAULT_COLOR.hue()) / HSV_LIMITS.h;\n    const opacityTop = thumbRadius;\n    const opacityLeft =\n      opacityScopeLeft ??\n      (sliderWidth * alphaToOpacity(DEFAULT_COLOR.alpha())) / OPACITY_LIMITS.max;\n    const noColor = color === null;\n    const vertical = scopeOrientation === \"vertical\";\n    const noHex = hexDisabled || hideHex;\n    const noChannels = channelsDisabled || hideChannels;\n    const noSaved = savedDisabled || hideSaved;\n    const [adjustedColorFieldScopeLeft, adjustedColorFieldScopeTop] = this.getAdjustedScopePosition(\n      colorFieldScopeLeft,\n      colorFieldScopeTop,\n    );\n    const [adjustedHueScopeLeft, adjustedHueScopeTop] = this.getAdjustedScopePosition(\n      hueLeft,\n      hueTop,\n    );\n    const [adjustedOpacityScopeLeft, adjustedOpacityScopeTop] = this.getAdjustedScopePosition(\n      opacityLeft,\n      opacityTop,\n    );\n\n    return (\n      <InteractiveContainer disabled={this.disabled}>\n        <div class={CSS.container}>\n          <div class={CSS.controlAndScope}>\n            <canvas\n              class={CSS.colorField}\n              onPointerDown={this.handleColorFieldPointerDown}\n              // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n              ref={this.initColorField}\n            />\n            <div\n              aria-label={vertical ? messages.value : messages.saturation}\n              aria-valuemax={vertical ? HSV_LIMITS.v : HSV_LIMITS.s}\n              aria-valuemin=\"0\"\n              aria-valuenow={(vertical ? color?.saturationv() : color?.value()) || \"0\"}\n              class={{ [CSS.scope]: true, [CSS.colorFieldScope]: true }}\n              onKeyDown={this.handleColorFieldScopeKeyDown}\n              role=\"slider\"\n              style={{\n                top: `${adjustedColorFieldScopeTop || 0}px`,\n                left: `${adjustedColorFieldScopeLeft || 0}px`,\n              }}\n              tabindex=\"0\"\n              // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n              ref={this.storeColorFieldScope}\n            />\n          </div>\n          <div class={CSS.previewAndSliders}>\n            <calcite-color-picker-swatch class={CSS.preview} color={selectedColorInHex} scale=\"l\" />\n            <div class={CSS.sliders}>\n              <div class={CSS.controlAndScope}>\n                <canvas\n                  class={{ [CSS.slider]: true, [CSS.hueSlider]: true }}\n                  onPointerDown={this.handleHueSliderPointerDown}\n                  // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n                  ref={this.initHueSlider}\n                />\n                <div\n                  aria-label={messages.hue}\n                  aria-valuemax={HSV_LIMITS.h}\n                  aria-valuemin=\"0\"\n                  aria-valuenow={color?.round().hue() || DEFAULT_COLOR.round().hue()}\n                  class={{ [CSS.scope]: true, [CSS.hueScope]: true }}\n                  onKeyDown={this.handleHueScopeKeyDown}\n                  role=\"slider\"\n                  style={{\n                    top: `${adjustedHueScopeTop}px`,\n                    left: `${adjustedHueScopeLeft}px`,\n                  }}\n                  tabindex=\"0\"\n                  // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n                  ref={this.storeHueScope}\n                />\n              </div>\n              {alphaChannel ? (\n                <div class={CSS.controlAndScope}>\n                  <canvas\n                    class={{ [CSS.slider]: true, [CSS.opacitySlider]: true }}\n                    onPointerDown={this.handleOpacitySliderPointerDown}\n                    // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n                    ref={this.initOpacitySlider}\n                  />\n                  <div\n                    aria-label={messages.opacity}\n                    aria-valuemax={OPACITY_LIMITS.max}\n                    aria-valuemin={OPACITY_LIMITS.min}\n                    aria-valuenow={(color || DEFAULT_COLOR).round().alpha()}\n                    class={{ [CSS.scope]: true, [CSS.opacityScope]: true }}\n                    onKeyDown={this.handleOpacityScopeKeyDown}\n                    role=\"slider\"\n                    style={{\n                      top: `${adjustedOpacityScopeTop}px`,\n                      left: `${adjustedOpacityScopeLeft}px`,\n                    }}\n                    tabindex=\"0\"\n                    // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n                    ref={this.storeOpacityScope}\n                  />\n                </div>\n              ) : null}\n            </div>\n          </div>\n          {noHex && noChannels ? null : (\n            <div\n              class={{\n                [CSS.controlSection]: true,\n                [CSS.section]: true,\n              }}\n            >\n              <div class={CSS.hexAndChannelsGroup}>\n                {noHex ? null : (\n                  <div class={CSS.hexOptions}>\n                    <calcite-color-picker-hex-input\n                      allowEmpty={allowEmpty}\n                      alphaChannel={alphaChannel}\n                      class={CSS.control}\n                      messages={messages}\n                      numberingSystem={this.numberingSystem}\n                      onCalciteColorPickerHexInputChange={this.handleHexInputChange}\n                      scale={scale}\n                      value={selectedColorInHex}\n                    />\n                  </div>\n                )}\n                {noChannels ? null : (\n                  <calcite-tabs\n                    class={{\n                      [CSS.colorModeContainer]: true,\n                      [CSS.splitSection]: true,\n                    }}\n                    scale={scale === \"l\" ? \"m\" : \"s\"}\n                  >\n                    <calcite-tab-nav slot=\"title-group\">\n                      {this.renderChannelsTabTitle(\"rgb\")}\n                      {this.renderChannelsTabTitle(\"hsv\")}\n                    </calcite-tab-nav>\n                    {this.renderChannelsTab(\"rgb\")}\n                    {this.renderChannelsTab(\"hsv\")}\n                  </calcite-tabs>\n                )}\n              </div>\n            </div>\n          )}\n          {noSaved ? null : (\n            <div class={{ [CSS.savedColorsSection]: true, [CSS.section]: true }}>\n              <div class={CSS.header}>\n                <label>{messages.saved}</label>\n                <div class={CSS.savedColorsButtons}>\n                  <calcite-button\n                    appearance=\"transparent\"\n                    class={CSS.deleteColor}\n                    disabled={noColor}\n                    iconStart=\"minus\"\n                    kind=\"neutral\"\n                    label={messages.deleteColor}\n                    onClick={this.deleteColor}\n                    scale={scale}\n                    type=\"button\"\n                  />\n                  <calcite-button\n                    appearance=\"transparent\"\n                    class={CSS.saveColor}\n                    disabled={noColor}\n                    iconStart=\"plus\"\n                    kind=\"neutral\"\n                    label={messages.saveColor}\n                    onClick={this.saveColor}\n                    scale={scale}\n                    type=\"button\"\n                  />\n                </div>\n              </div>\n              {savedColors.length > 0 ? (\n                <div class={CSS.savedColors}>\n                  {[\n                    ...savedColors.map((color) => (\n                      <calcite-color-picker-swatch\n                        class={CSS.savedColor}\n                        color={color}\n                        key={color}\n                        onClick={this.handleSavedColorSelect}\n                        onKeyDown={this.handleSavedColorKeyDown}\n                        scale={scale}\n                        tabIndex={0}\n                      />\n                    )),\n                  ]}\n                </div>\n              ) : null}\n            </div>\n          )}\n        </div>\n      </InteractiveContainer>\n    );\n  }\n\n  private storeColorFieldScope = (node: HTMLDivElement): void => {\n    this.colorFieldScopeNode = node;\n  };\n\n  private storeHueScope = (node: HTMLDivElement): void => {\n    this.hueScopeNode = node;\n  };\n\n  private renderChannelsTabTitle = (channelMode: this[\"channelMode\"]): VNode => {\n    const { channelMode: activeChannelMode, messages } = this;\n    const selected = channelMode === activeChannelMode;\n    const label = channelMode === \"rgb\" ? messages.rgb : messages.hsv;\n\n    return (\n      <calcite-tab-title\n        class={CSS.colorMode}\n        data-color-mode={channelMode}\n        key={channelMode}\n        onCalciteTabsActivate={this.handleTabActivate}\n        selected={selected}\n      >\n        {label}\n      </calcite-tab-title>\n    );\n  };\n\n  private renderChannelsTab = (channelMode: this[\"channelMode\"]): VNode => {\n    const { allowEmpty, channelMode: activeChannelMode, channels, messages, alphaChannel } = this;\n    const selected = channelMode === activeChannelMode;\n    const isRgb = channelMode === \"rgb\";\n    const channelAriaLabels = isRgb\n      ? [messages.red, messages.green, messages.blue]\n      : [messages.hue, messages.saturation, messages.value];\n    const direction = getElementDir(this.el);\n    const channelsToRender = alphaChannel ? channels : channels.slice(0, 3);\n\n    return (\n      <calcite-tab class={CSS.control} key={channelMode} selected={selected}>\n        {/* channel order should not be mirrored */}\n        <div class={CSS.channels} dir=\"ltr\">\n          {channelsToRender.map((channelValue, index) => {\n            const isAlphaChannel = index === 3;\n\n            if (isAlphaChannel) {\n              channelValue =\n                allowEmpty && !channelValue ? channelValue : alphaToOpacity(channelValue);\n            }\n\n            /* the channel container is ltr, so we apply the host's direction */\n            return this.renderChannel(\n              channelValue,\n              index,\n              channelAriaLabels[index],\n              direction,\n              isAlphaChannel ? \"%\" : \"\",\n            );\n          })}\n        </div>\n      </calcite-tab>\n    );\n  };\n\n  private renderChannel = (\n    value: number | null,\n    index: number,\n    ariaLabel: string,\n    direction: Direction,\n    suffix?: string,\n  ): VNode => {\n    return (\n      <calcite-input-number\n        class={CSS.channel}\n        data-channel-index={index}\n        dir={direction}\n        key={index}\n        label={ariaLabel}\n        lang={this.effectiveLocale}\n        numberButtonType=\"none\"\n        numberingSystem={this.numberingSystem}\n        onCalciteInputNumberChange={this.handleChannelChange}\n        onCalciteInputNumberInput={this.handleChannelInput}\n        onKeyDown={this.handleKeyDown}\n        scale={this.scale === \"l\" ? \"m\" : \"s\"}\n        // workaround to ensure input borders overlap as desired\n        // this is because the build transforms margin-left to its\n        // logical-prop, which is undesired as channels are always ltr\n        style={{\n          marginLeft:\n            index > 0 && !(this.scale === \"s\" && this.alphaChannel && index === 3) ? \"-1px\" : \"\",\n        }}\n        suffixText={suffix}\n        value={value?.toString()}\n      />\n    );\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  handleKeyDown(event: KeyboardEvent): void {\n    if (event.key === \"Enter\") {\n      event.preventDefault();\n    }\n  }\n\n  private showIncompatibleColorWarning(value: ColorValue, format: Format): void {\n    console.warn(\n      `ignoring color value (${value}) as it is not compatible with the current format (${format})`,\n    );\n  }\n\n  private setMode(format: ColorPicker[\"format\"], warn = true): void {\n    const mode = format === \"auto\" ? this.mode : format;\n    this.mode = this.ensureCompatibleMode(mode, warn);\n  }\n\n  private ensureCompatibleMode(mode: SupportedMode, warn): SupportedMode {\n    const { alphaChannel } = this;\n    const isAlphaCompatible = alphaCompatible(mode);\n\n    if (alphaChannel && !isAlphaCompatible) {\n      const alphaMode = toAlphaMode(mode);\n\n      if (warn) {\n        console.warn(\n          `setting format to (${alphaMode}) as the provided one (${mode}) does not support alpha`,\n        );\n      }\n\n      return alphaMode;\n    }\n\n    if (!alphaChannel && isAlphaCompatible) {\n      const nonAlphaMode = toNonAlphaMode(mode);\n\n      if (warn) {\n        console.warn(\n          `setting format to (${nonAlphaMode}) as the provided one (${mode}) does not support alpha`,\n        );\n      }\n\n      return nonAlphaMode;\n    }\n\n    return mode;\n  }\n\n  private captureHueSliderColor(x: number): void {\n    const {\n      dimensions: {\n        slider: { width },\n      },\n    } = this;\n    const hue = (HUE_LIMIT_CONSTRAINED / width) * x;\n\n    this.internalColorSet(this.baseColorFieldColor.hue(hue), false);\n  }\n\n  private captureOpacitySliderValue(x: number): void {\n    const {\n      dimensions: {\n        slider: { width },\n      },\n    } = this;\n    const alpha = opacityToAlpha((OPACITY_LIMITS.max / width) * x);\n\n    this.internalColorSet(this.baseColorFieldColor.alpha(alpha), false);\n  }\n\n  private internalColorSet(\n    color: Color | null,\n    skipEqual = true,\n    context: ColorPicker[\"internalColorUpdateContext\"] = \"user-interaction\",\n  ): void {\n    if (skipEqual && colorEqual(color, this.color)) {\n      return;\n    }\n\n    this.internalColorUpdateContext = context;\n    this.color = color;\n    this.value = this.toValue(color);\n    this.internalColorUpdateContext = null;\n  }\n\n  private toValue(color: Color | null, format: SupportedMode = this.mode): ColorValue | null {\n    if (!color) {\n      return null;\n    }\n\n    const hexMode = \"hex\";\n\n    if (format.includes(hexMode)) {\n      const hasAlpha = format === CSSColorMode.HEXA;\n      return normalizeHex(hexify(color.round(), hasAlpha), hasAlpha);\n    }\n\n    if (format.includes(\"-css\")) {\n      const value = color[format.replace(\"-css\", \"\").replace(\"a\", \"\")]().round().string();\n\n      // Color omits alpha values when alpha is 1\n      const needToInjectAlpha =\n        (format.endsWith(\"a\") || format.endsWith(\"a-css\")) && color.alpha() === 1;\n      if (needToInjectAlpha) {\n        const model = value.slice(0, 3);\n        const values = value.slice(4, -1);\n        return `${model}a(${values}, ${color.alpha()})`;\n      }\n\n      return value;\n    }\n\n    const colorObject =\n      /* Color() does not support hsva, hsla nor rgba, so we use the non-alpha mode */\n      color[toNonAlphaMode(format)]().round().object();\n\n    if (format.endsWith(\"a\")) {\n      return normalizeAlpha(colorObject);\n    }\n\n    return colorObject;\n  }\n\n  private getSliderCapSpacing(): number {\n    const {\n      dimensions: {\n        slider: { height },\n        thumb: { radius },\n      },\n    } = this;\n\n    return radius * 2 - height;\n  }\n\n  private updateDimensions(scale: Scale = \"m\"): void {\n    this.dimensions = DIMENSIONS[scale];\n  }\n\n  private deleteColor = (): void => {\n    const colorToDelete = hexify(this.color, this.alphaChannel);\n    const inStorage = this.savedColors.indexOf(colorToDelete) > -1;\n\n    if (!inStorage) {\n      return;\n    }\n\n    const savedColors = this.savedColors.filter((color) => color !== colorToDelete);\n\n    this.savedColors = savedColors;\n\n    const storageKey = `${DEFAULT_STORAGE_KEY_PREFIX}${this.storageId}`;\n\n    if (this.storageId) {\n      localStorage.setItem(storageKey, JSON.stringify(savedColors));\n    }\n  };\n\n  private saveColor = (): void => {\n    const colorToSave = hexify(this.color, this.alphaChannel);\n    const alreadySaved = this.savedColors.indexOf(colorToSave) > -1;\n\n    if (alreadySaved) {\n      return;\n    }\n\n    const savedColors = [...this.savedColors, colorToSave];\n\n    this.savedColors = savedColors;\n\n    const storageKey = `${DEFAULT_STORAGE_KEY_PREFIX}${this.storageId}`;\n\n    if (this.storageId) {\n      localStorage.setItem(storageKey, JSON.stringify(savedColors));\n    }\n  };\n\n  private drawColorControls = throttle(\n    (type: \"all\" | \"color-field\" | \"hue-slider\" | \"opacity-slider\" = \"all\"): void => {\n      if ((type === \"all\" || type === \"color-field\") && this.colorFieldRenderingContext) {\n        this.drawColorField();\n      }\n\n      if ((type === \"all\" || type === \"hue-slider\") && this.hueSliderRenderingContext) {\n        this.drawHueSlider();\n      }\n\n      if (\n        this.alphaChannel &&\n        (type === \"all\" || type === \"opacity-slider\") &&\n        this.opacitySliderRenderingContext\n      ) {\n        this.drawOpacitySlider();\n      }\n    },\n    throttleFor60FpsInMs,\n  );\n\n  private drawColorField(): void {\n    const context = this.colorFieldRenderingContext;\n    const {\n      dimensions: {\n        colorField: { height, width },\n      },\n    } = this;\n\n    context.fillStyle = this.baseColorFieldColor\n      .hsv()\n      .saturationv(100)\n      .value(100)\n      .alpha(1)\n      .string();\n    context.fillRect(0, 0, width, height);\n\n    const whiteGradient = context.createLinearGradient(0, 0, width, 0);\n    whiteGradient.addColorStop(0, \"rgba(255,255,255,1)\");\n    whiteGradient.addColorStop(1, \"rgba(255,255,255,0)\");\n    context.fillStyle = whiteGradient;\n    context.fillRect(0, 0, width, height);\n\n    const blackGradient = context.createLinearGradient(0, 0, 0, height);\n    blackGradient.addColorStop(0, \"rgba(0,0,0,0)\");\n    blackGradient.addColorStop(1, \"rgba(0,0,0,1)\");\n    context.fillStyle = blackGradient;\n    context.fillRect(0, 0, width, height);\n\n    this.drawActiveColorFieldColor();\n  }\n\n  private setCanvasContextSize(\n    canvas: HTMLCanvasElement,\n    { height, width }: { height: number; width: number },\n  ): void {\n    if (!canvas) {\n      return;\n    }\n\n    const devicePixelRatio = window.devicePixelRatio || 1;\n\n    canvas.width = width * devicePixelRatio;\n    canvas.height = height * devicePixelRatio;\n    canvas.style.height = `${height}px`;\n    canvas.style.width = `${width}px`;\n\n    const context = canvas.getContext(\"2d\");\n    context.scale(devicePixelRatio, devicePixelRatio);\n  }\n\n  private captureColorFieldColor = (x: number, y: number, skipEqual = true): void => {\n    const {\n      dimensions: {\n        colorField: { height, width },\n      },\n    } = this;\n    const saturation = Math.round((HSV_LIMITS.s / width) * x);\n    const value = Math.round((HSV_LIMITS.v / height) * (height - y));\n\n    this.internalColorSet(\n      this.baseColorFieldColor.hsv().saturationv(saturation).value(value),\n      skipEqual,\n    );\n  };\n\n  private initColorField = (canvas: HTMLCanvasElement): void => {\n    this.colorFieldRenderingContext = canvas.getContext(\"2d\");\n    this.updateCanvasSize(\"color-field\");\n    this.drawColorControls();\n  };\n\n  private initHueSlider = (canvas: HTMLCanvasElement): void => {\n    this.hueSliderRenderingContext = canvas.getContext(\"2d\");\n    this.updateCanvasSize(\"hue-slider\");\n    this.drawHueSlider();\n  };\n\n  private initOpacitySlider = (canvas: HTMLCanvasElement): void => {\n    if (!canvas) {\n      return;\n    }\n\n    this.opacitySliderRenderingContext = canvas.getContext(\"2d\");\n    this.updateCanvasSize(\"opacity-slider\");\n    this.drawOpacitySlider();\n  };\n\n  private updateCanvasSize(\n    context: \"all\" | \"color-field\" | \"hue-slider\" | \"opacity-slider\" = \"all\",\n  ): void {\n    const { dimensions } = this;\n\n    if (context === \"all\" || context === \"color-field\") {\n      this.setCanvasContextSize(this.colorFieldRenderingContext?.canvas, dimensions.colorField);\n    }\n\n    const adjustedSliderDimensions = {\n      width: dimensions.slider.width,\n      height:\n        dimensions.slider.height + (dimensions.thumb.radius - dimensions.slider.height / 2) * 2,\n    };\n\n    if (context === \"all\" || context === \"hue-slider\") {\n      this.setCanvasContextSize(this.hueSliderRenderingContext?.canvas, adjustedSliderDimensions);\n    }\n\n    if (context === \"all\" || context === \"opacity-slider\") {\n      this.setCanvasContextSize(\n        this.opacitySliderRenderingContext?.canvas,\n        adjustedSliderDimensions,\n      );\n    }\n  }\n\n  private drawActiveColorFieldColor(): void {\n    const { color } = this;\n\n    if (!color) {\n      return;\n    }\n\n    const hsvColor = color.hsv();\n\n    const {\n      dimensions: {\n        colorField: { height, width },\n        thumb: { radius },\n      },\n    } = this;\n\n    const x = hsvColor.saturationv() / (HSV_LIMITS.s / width);\n    const y = height - hsvColor.value() / (HSV_LIMITS.v / height);\n\n    requestAnimationFrame(() => {\n      this.colorFieldScopeLeft = x;\n      this.colorFieldScopeTop = y;\n    });\n\n    this.drawThumb(this.colorFieldRenderingContext, radius, x, y, hsvColor, false);\n  }\n\n  private drawThumb(\n    context: CanvasRenderingContext2D,\n    radius: number,\n    x: number,\n    y: number,\n    color: Color,\n    applyAlpha: boolean,\n  ): void {\n    const startAngle = 0;\n    const endAngle = 2 * Math.PI;\n    const outlineWidth = 1;\n\n    context.beginPath();\n    context.arc(x, y, radius, startAngle, endAngle);\n    context.fillStyle = \"#fff\";\n    context.fill();\n\n    context.strokeStyle = \"rgba(0,0,0,0.3)\";\n    context.lineWidth = outlineWidth;\n    context.stroke();\n\n    if (applyAlpha && color.alpha() < 1) {\n      const pattern = context.createPattern(this.getCheckeredBackgroundPattern(), \"repeat\");\n      context.beginPath();\n      context.arc(x, y, radius - 3, startAngle, endAngle);\n      context.fillStyle = pattern;\n      context.fill();\n    }\n\n    context.globalCompositeOperation = \"source-atop\";\n\n    context.beginPath();\n    context.arc(x, y, radius - 3, startAngle, endAngle);\n    const alpha = applyAlpha ? color.alpha() : 1;\n    context.fillStyle = color.rgb().alpha(alpha).string();\n    context.fill();\n\n    context.globalCompositeOperation = \"source-over\";\n  }\n\n  private drawActiveHueSliderColor(): void {\n    const { color } = this;\n\n    if (!color) {\n      return;\n    }\n\n    const hsvColor = color.hsv().saturationv(100).value(100);\n\n    const {\n      dimensions: {\n        slider: { width },\n        thumb: { radius },\n      },\n    } = this;\n\n    const x = hsvColor.hue() / (HUE_LIMIT_CONSTRAINED / width);\n    const y = radius;\n    const sliderBoundX = this.getSliderBoundX(x, width, radius);\n\n    requestAnimationFrame(() => {\n      this.hueScopeLeft = sliderBoundX;\n    });\n\n    this.drawThumb(this.hueSliderRenderingContext, radius, sliderBoundX, y, hsvColor, false);\n  }\n\n  private drawHueSlider(): void {\n    const context = this.hueSliderRenderingContext;\n    const {\n      dimensions: {\n        slider: { height, width },\n        thumb: { radius: thumbRadius },\n      },\n    } = this;\n\n    const x = 0;\n    const y = thumbRadius - height / 2;\n\n    const gradient = context.createLinearGradient(0, 0, width, 0);\n\n    const hueSliderColorStopKeywords = [\n      \"red\",\n      \"yellow\",\n      \"lime\",\n      \"cyan\",\n      \"blue\",\n      \"magenta\",\n      \"#ff0004\" /* 1 unit less than #ff0 to avoid duplicate values within range */,\n    ];\n\n    const offset = 1 / (hueSliderColorStopKeywords.length - 1);\n    let currentOffset = 0;\n\n    hueSliderColorStopKeywords.forEach((keyword) => {\n      gradient.addColorStop(currentOffset, Color(keyword).string());\n      currentOffset += offset;\n    });\n\n    context.clearRect(0, 0, width, height + this.getSliderCapSpacing() * 2);\n\n    this.drawSliderPath(context, height, width, x, y);\n\n    context.fillStyle = gradient;\n    context.fill();\n\n    context.strokeStyle = \"rgba(0,0,0,0.3)\";\n    context.lineWidth = 1;\n    context.stroke();\n\n    this.drawActiveHueSliderColor();\n  }\n\n  private drawOpacitySlider(): void {\n    const context = this.opacitySliderRenderingContext;\n    const {\n      baseColorFieldColor: previousColor,\n      dimensions: {\n        slider: { height, width },\n        thumb: { radius: thumbRadius },\n      },\n    } = this;\n\n    const x = 0;\n    const y = thumbRadius - height / 2;\n\n    context.clearRect(0, 0, width, height + this.getSliderCapSpacing() * 2);\n\n    const gradient = context.createLinearGradient(0, y, width, 0);\n    const startColor = previousColor.rgb().alpha(0);\n    const midColor = previousColor.rgb().alpha(0.5);\n    const endColor = previousColor.rgb().alpha(1);\n\n    gradient.addColorStop(0, startColor.string());\n    gradient.addColorStop(0.5, midColor.string());\n    gradient.addColorStop(1, endColor.string());\n\n    this.drawSliderPath(context, height, width, x, y);\n\n    const pattern = context.createPattern(this.getCheckeredBackgroundPattern(), \"repeat\");\n    context.fillStyle = pattern;\n    context.fill();\n\n    context.fillStyle = gradient;\n    context.fill();\n\n    context.strokeStyle = \"rgba(0,0,0,0.3)\";\n    context.lineWidth = 1;\n    context.stroke();\n\n    this.drawActiveOpacitySliderColor();\n  }\n\n  private drawSliderPath(\n    context: CanvasRenderingContext2D,\n    height: number,\n    width: number,\n    x: number,\n    y: number,\n  ): void {\n    const radius = height / 2 + 1;\n    context.beginPath();\n    context.moveTo(x + radius, y);\n    context.lineTo(x + width - radius, y);\n    context.quadraticCurveTo(x + width, y, x + width, y + radius);\n    context.lineTo(x + width, y + height - radius);\n    context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n    context.lineTo(x + radius, y + height);\n    context.quadraticCurveTo(x, y + height, x, y + height - radius);\n    context.lineTo(x, y + radius);\n    context.quadraticCurveTo(x, y, x + radius, y);\n    context.closePath();\n  }\n\n  private getCheckeredBackgroundPattern(): HTMLCanvasElement {\n    if (this.checkerPattern) {\n      return this.checkerPattern;\n    }\n\n    const pattern = document.createElement(\"canvas\");\n    pattern.width = 10;\n    pattern.height = 10;\n    const patternContext = pattern.getContext(\"2d\");\n\n    patternContext.fillStyle = \"#ccc\";\n    patternContext.fillRect(0, 0, 10, 10);\n    patternContext.fillStyle = \"#fff\";\n    patternContext.fillRect(0, 0, 5, 5);\n    patternContext.fillRect(5, 5, 5, 5);\n\n    this.checkerPattern = pattern;\n\n    return pattern;\n  }\n\n  private drawActiveOpacitySliderColor(): void {\n    const { color } = this;\n\n    if (!color) {\n      return;\n    }\n\n    const hsvColor = color;\n\n    const {\n      dimensions: {\n        slider: { width },\n        thumb: { radius },\n      },\n    } = this;\n\n    const x = alphaToOpacity(hsvColor.alpha()) / (OPACITY_LIMITS.max / width);\n    const y = radius;\n    const sliderBoundX = this.getSliderBoundX(x, width, radius);\n\n    requestAnimationFrame(() => {\n      this.opacityScopeLeft = sliderBoundX;\n    });\n\n    this.drawThumb(this.opacitySliderRenderingContext, radius, sliderBoundX, y, hsvColor, true);\n  }\n\n  private getSliderBoundX(x: number, width: number, radius: number): number {\n    const closeToEdge = closeToRangeEdge(x, width, radius);\n\n    return closeToEdge === 0\n      ? x\n      : closeToEdge === -1\n        ? remap(x, 0, width, radius, radius * 2)\n        : remap(x, 0, width, width - radius * 2, width - radius);\n  }\n\n  private storeOpacityScope = (node: HTMLDivElement): void => {\n    this.opacityScopeNode = node;\n  };\n\n  private handleOpacityScopeKeyDown = (event: KeyboardEvent): void => {\n    const modifier = event.shiftKey ? 10 : 1;\n    const { key } = event;\n    const arrowKeyToXOffset = {\n      ArrowUp: 0.01,\n      ArrowRight: 0.01,\n      ArrowDown: -0.01,\n      ArrowLeft: -0.01,\n    };\n\n    if (arrowKeyToXOffset[key]) {\n      event.preventDefault();\n      const delta = arrowKeyToXOffset[key] * modifier;\n      const alpha = this.baseColorFieldColor.alpha();\n      const color = this.baseColorFieldColor.alpha(alpha + delta);\n      this.internalColorSet(color, false);\n    }\n  };\n\n  private updateColorFromChannels(channels: this[\"channels\"]): void {\n    this.internalColorSet(Color(channels, this.channelMode));\n  }\n\n  private updateChannelsFromColor(color: Color | null): void {\n    this.channels = color ? this.toChannels(color) : [null, null, null, null];\n  }\n\n  private toChannels(color: Color): Channels {\n    const { channelMode } = this;\n\n    const channels = color[channelMode]()\n      .array()\n      .map((value, index) => {\n        const isAlpha = index === 3;\n        return isAlpha ? value : Math.floor(value);\n      });\n\n    if (channels.length === 3) {\n      channels.push(1); // Color omits alpha when 1\n    }\n\n    return channels as Channels;\n  }\n\n  private getAdjustedScopePosition(left: number, top: number): [number, number] {\n    return [left - SCOPE_SIZE / 2, top - SCOPE_SIZE / 2];\n  }\n}\n"],
  "mappings": "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",
  "names": ["CSS", "DEFAULT_COLOR", "Color", "ColorPickerHexInput", "color", "ColorPicker", "color", "Color"]
}
