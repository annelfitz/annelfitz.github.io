// node_modules/@arcgis/map-components/dist/esm/component-utils-97b1c3e3.js
function checkForExpand(element) {
  const expandRef = element.el.closest("arcgis-expand") || element.expandElem;
  if (expandRef == null ? void 0 : expandRef.widget) {
    element.view = expandRef.view;
    expandRef.widget.content = element.childElem;
    if (!expandRef.expandIcon) {
      expandRef.widget.expandIcon = element.widget.icon;
    }
    return true;
  }
  if (expandRef) {
    const widgetHandler = () => {
      expandRef.removeEventListener("arcgisExpandReady", widgetHandler, false);
      element.view = expandRef.view;
      expandRef.widget.content = element.childElem;
      if (!expandRef.expandIcon) {
        expandRef.widget.expandIcon = element.widget.icon;
      }
    };
    expandRef.addEventListener("arcgisExpandReady", widgetHandler, false);
    return true;
  }
  return false;
}
function addHandles(element, handle) {
  if (Array.isArray(handle)) {
    element._watchHandles = [...element._watchHandles, ...handle];
  } else {
    element._watchHandles.push(handle);
  }
}
function checkForView(element) {
  let isUsingRefernceElement = false;
  if (!checkForExpand(element)) {
    let viewRef = element.el.closest("arcgis-map") ?? element.el.closest("arcgis-scene");
    if (!viewRef && typeof element.referenceElement === "string") {
      viewRef = document.querySelector(element.referenceElement);
      isUsingRefernceElement = true;
    }
    if (viewRef == null ? void 0 : viewRef.view) {
      element.view = viewRef.view;
      const el = element.childElem ?? element.el;
      if (!isUsingRefernceElement) {
        element.view.ui.add(el, element.position);
      }
    } else if (viewRef) {
      waitForViewHandler(viewRef, element, isUsingRefernceElement);
    }
  } else {
    const viewRef = element.el.closest("arcgis-map") ?? element.el.closest("arcgis-scene");
    if (viewRef == null ? void 0 : viewRef.view) {
      element.view = viewRef.view;
    } else if (viewRef) {
      const handler = () => {
        viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
        element.view = viewRef.view;
      };
      viewRef.addEventListener("arcgisViewReadyChange", handler, false);
    }
  }
}
function isNullOrEmptyString(value) {
  return value === void 0 || value === null || value === "";
}
function isValidInteger(value) {
  return value != null && value % 1 === 0;
}
function isNotSameCamera(camera, camera2) {
  return camera2 === void 0 || camera.position !== camera2.position || camera.heading !== camera2.heading || camera.tilt !== camera2.tilt;
}
function isNotSameEnvironment(environment, environment2) {
  return environment2 === void 0 || environment2.atmosphereEnabled !== environment.atmosphereEnabled || environment2.lighting.date !== environment.lighting.date || environment2.lighting.directShadowsEnabled !== environment.lighting.directShadowsEnabled || environment2.lighting.cameraTrackingEnabled !== environment.lighting.cameraTrackingEnabled || environment2.lighting.date !== environment.lighting.date || environment2.lighting.displayUTCOffset !== environment.lighting.displayUTCOffset;
}
function isNotSameViewpoint(viewpoint, viewpoint2) {
  return viewpoint2 === void 0 || viewpoint.targetGeometry !== viewpoint2.targetGeometry || viewpoint.rotation !== viewpoint2.rotation || viewpoint.scale !== viewpoint2.scale;
}
async function updateForView(viewStr) {
  const viewRef = document.querySelector(viewStr);
  return await new Promise((resolve) => {
    if ((viewRef == null ? void 0 : viewRef.view) !== void 0) {
      resolve(viewRef.view);
    } else if (viewRef) {
      const handler = () => {
        viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
        resolve(viewRef.view);
      };
      viewRef.addEventListener("arcgisViewReadyChange", handler, false);
    }
  });
}
async function referenceElementHelper(element, refElement) {
  if (typeof refElement === "string") {
    element.view = await updateForView(refElement);
  } else if (element.widget) {
    element.view = refElement.view;
  }
}
function waitForViewHandler(viewRef, element, isUsingRefernceElement) {
  const handler = () => {
    viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
    element.view = viewRef.view;
    if (!isUsingRefernceElement) {
      if (element.childElem) {
        element.view.ui.add(element.childElem, element.position);
      } else {
        element.view.ui.add(element.el, element.position);
      }
    }
  };
  viewRef.addEventListener("arcgisViewReadyChange", handler, false);
}

export {
  checkForExpand,
  addHandles,
  checkForView,
  isNullOrEmptyString,
  isValidInteger,
  isNotSameCamera,
  isNotSameEnvironment,
  isNotSameViewpoint,
  referenceElementHelper
};
/*! Bundled license information:

@arcgis/map-components/dist/esm/component-utils-97b1c3e3.js:
  (*!
   * All material copyright Esri, All Rights Reserved, unless otherwise specified.
   * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
   * v4.30.0-next.13
   *)
*/
//# sourceMappingURL=chunk-UXZQL3ZN.js.map
