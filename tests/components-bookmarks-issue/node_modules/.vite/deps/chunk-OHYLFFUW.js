import {
  P,
  c,
  i,
  m,
  m2
} from "./chunk-ETHGDNE6.js";
import {
  B,
  Ge,
  _2 as _,
  q
} from "./chunk-X7VSXJWW.js";

// node_modules/@arcgis/core/support/popupUtils.js
function p({ displayField: t, editFieldsInfo: n, fields: i2, objectIdField: o, title: r }, s) {
  if (!i2)
    return null;
  const l = w({ editFieldsInfo: n, fields: i2, objectIdField: o }, s);
  if (!l.length)
    return null;
  const a = y({ titleBase: r, fields: i2, displayField: t }), p2 = j();
  return new P({ title: a, content: p2, fieldInfos: l });
}
var c2 = (e, t) => t.visibleFieldNames ? t.visibleFieldNames.has(e.name) : B(e, t);
function f(e, t) {
  const n = e;
  return t && (e = e.filter((e2) => !t.includes(e2.type))), e === n && (e = e.slice()), e.sort(d), e;
}
function d(e, t) {
  return "oid" === e.type ? -1 : "oid" === t.type ? 1 : I(e) ? -1 : I(t) ? 1 : (e.alias || e.name).toLocaleLowerCase().localeCompare((t.alias || t.name).toLocaleLowerCase());
}
function w(e, n) {
  const i2 = n == null ? void 0 : n.visibleFieldNames;
  return f(e.fields ?? [], (n == null ? void 0 : n.ignoreFieldTypes) || v).map((n2) => new m2({ fieldName: n2.name, isEditable: q(n2, e), label: n2.alias, format: g(n2), visible: c2(n2, { ...e, visibleFieldNames: i2 }) }));
}
function g(e) {
  switch (e.type) {
    case "small-integer":
    case "integer":
    case "single":
      return new m({ digitSeparator: true, places: 0 });
    case "double":
      return new m({ digitSeparator: true, places: 2 });
    case "string":
      return Ge(e.name) ? new m({ digitSeparator: true, places: 0 }) : null;
    default:
      return null;
  }
}
function j() {
  return [new c(), new i()];
}
function y(e) {
  const t = _(e), { titleBase: n } = e;
  return t ? `${n}: {${t.trim()}}` : n ?? "";
}
function I(e) {
  if ("name" === (e.name && e.name.toLowerCase()))
    return true;
  return "name" === (e.alias && e.alias.toLowerCase());
}
var v = ["geometry", "blob", "raster", "guid", "xml"];

export {
  p
};
//# sourceMappingURL=chunk-OHYLFFUW.js.map
