import {
  c
} from "./chunk-5YY6NZNY.js";
import {
  H,
  V
} from "./chunk-WKVHVZW2.js";
import {
  o
} from "./chunk-BIAXSBMP.js";

// node_modules/@arcgis/core/chunks/builtins.js
var r;
var t = { exports: {} };
void 0 !== (r = ["precision", "highp", "mediump", "lowp", "attribute", "const", "uniform", "varying", "break", "continue", "do", "for", "while", "if", "else", "in", "out", "inout", "float", "int", "void", "bool", "true", "false", "discard", "return", "mat2", "mat3", "mat4", "vec2", "vec3", "vec4", "ivec2", "ivec3", "ivec4", "bvec2", "bvec3", "bvec4", "sampler1D", "sampler2D", "sampler3D", "samplerCube", "sampler1DShadow", "sampler2DShadow", "struct", "asm", "class", "union", "enum", "typedef", "template", "this", "packed", "goto", "switch", "default", "inline", "noinline", "volatile", "public", "static", "extern", "external", "interface", "long", "short", "double", "half", "fixed", "unsigned", "input", "output", "hvec2", "hvec3", "hvec4", "dvec2", "dvec3", "dvec4", "fvec2", "fvec3", "fvec4", "sampler2DRect", "sampler3DRect", "sampler2DRectShadow", "sizeof", "cast", "namespace", "using"]) && (t.exports = r);
var o2 = o(t.exports);
var l;
var a = { exports: {} };
l = a, function(e3) {
  var r3 = ["<<=", ">>=", "++", "--", "<<", ">>", "<=", ">=", "==", "!=", "&&", "||", "+=", "-=", "*=", "/=", "%=", "&=", "^^", "^=", "|=", "(", ")", "[", "]", ".", "!", "~", "*", "/", "%", "+", "-", "<", ">", "&", "^", "|", "?", ":", "=", ",", ";", "{", "}"];
  void 0 !== r3 && (l.exports = r3);
}();
var g = o(a.exports);
var i = { exports: {} };
!function(e3) {
  !function(r3) {
    var t2 = /* @__PURE__ */ function() {
      return ["abs", "acos", "all", "any", "asin", "atan", "ceil", "clamp", "cos", "cross", "dFdx", "dFdy", "degrees", "distance", "dot", "equal", "exp", "exp2", "faceforward", "floor", "fract", "gl_BackColor", "gl_BackLightModelProduct", "gl_BackLightProduct", "gl_BackMaterial", "gl_BackSecondaryColor", "gl_ClipPlane", "gl_ClipVertex", "gl_Color", "gl_DepthRange", "gl_DepthRangeParameters", "gl_EyePlaneQ", "gl_EyePlaneR", "gl_EyePlaneS", "gl_EyePlaneT", "gl_Fog", "gl_FogCoord", "gl_FogFragCoord", "gl_FogParameters", "gl_FragColor", "gl_FragCoord", "gl_FragData", "gl_FragDepth", "gl_FragDepthEXT", "gl_FrontColor", "gl_FrontFacing", "gl_FrontLightModelProduct", "gl_FrontLightProduct", "gl_FrontMaterial", "gl_FrontSecondaryColor", "gl_LightModel", "gl_LightModelParameters", "gl_LightModelProducts", "gl_LightProducts", "gl_LightSource", "gl_LightSourceParameters", "gl_MaterialParameters", "gl_MaxClipPlanes", "gl_MaxCombinedTextureImageUnits", "gl_MaxDrawBuffers", "gl_MaxFragmentUniformComponents", "gl_MaxLights", "gl_MaxTextureCoords", "gl_MaxTextureImageUnits", "gl_MaxTextureUnits", "gl_MaxVaryingFloats", "gl_MaxVertexAttribs", "gl_MaxVertexTextureImageUnits", "gl_MaxVertexUniformComponents", "gl_ModelViewMatrix", "gl_ModelViewMatrixInverse", "gl_ModelViewMatrixInverseTranspose", "gl_ModelViewMatrixTranspose", "gl_ModelViewProjectionMatrix", "gl_ModelViewProjectionMatrixInverse", "gl_ModelViewProjectionMatrixInverseTranspose", "gl_ModelViewProjectionMatrixTranspose", "gl_MultiTexCoord0", "gl_MultiTexCoord1", "gl_MultiTexCoord2", "gl_MultiTexCoord3", "gl_MultiTexCoord4", "gl_MultiTexCoord5", "gl_MultiTexCoord6", "gl_MultiTexCoord7", "gl_Normal", "gl_NormalMatrix", "gl_NormalScale", "gl_ObjectPlaneQ", "gl_ObjectPlaneR", "gl_ObjectPlaneS", "gl_ObjectPlaneT", "gl_Point", "gl_PointCoord", "gl_PointParameters", "gl_PointSize", "gl_Position", "gl_ProjectionMatrix", "gl_ProjectionMatrixInverse", "gl_ProjectionMatrixInverseTranspose", "gl_ProjectionMatrixTranspose", "gl_SecondaryColor", "gl_TexCoord", "gl_TextureEnvColor", "gl_TextureMatrix", "gl_TextureMatrixInverse", "gl_TextureMatrixInverseTranspose", "gl_TextureMatrixTranspose", "gl_Vertex", "greaterThan", "greaterThanEqual", "inversesqrt", "length", "lessThan", "lessThanEqual", "log", "log2", "matrixCompMult", "max", "min", "mix", "mod", "normalize", "not", "notEqual", "pow", "radians", "reflect", "refract", "sign", "sin", "smoothstep", "sqrt", "step", "tan", "texture2D", "texture2DLod", "texture2DProj", "texture2DProjLod", "textureCube", "textureCubeLod", "texture2DLodEXT", "texture2DProjLodEXT", "textureCubeLodEXT", "texture2DGradEXT", "texture2DProjGradEXT", "textureCubeGradEXT", "textureSize", "texelFetch"];
    }();
    void 0 !== t2 && (e3.exports = t2);
  }();
}(i);
var n = o(i.exports);

// node_modules/@arcgis/core/views/webgl/reservedWordsGLSL3.js
var e = ["layout", "centroid", "smooth", "case", "mat2x2", "mat2x3", "mat2x4", "mat3x2", "mat3x3", "mat3x4", "mat4x2", "mat4x3", "mat4x4", "uint", "uvec2", "uvec3", "uvec4", "samplerCubeShadow", "sampler2DArray", "sampler2DArrayShadow", "isampler2D", "isampler3D", "isamplerCube", "isampler2DArray", "usampler2D", "usampler3D", "usamplerCube", "usampler2DArray", "coherent", "restrict", "readonly", "writeonly", "resource", "atomic_uint", "noperspective", "patch", "sample", "subroutine", "common", "partition", "active", "filter", "image1D", "image2D", "image3D", "imageCube", "iimage1D", "iimage2D", "iimage3D", "iimageCube", "uimage1D", "uimage2D", "uimage3D", "uimageCube", "image1DArray", "image2DArray", "iimage1DArray", "iimage2DArray", "uimage1DArray", "uimage2DArray", "image1DShadow", "image2DShadow", "image1DArrayShadow", "image2DArrayShadow", "imageBuffer", "iimageBuffer", "uimageBuffer", "sampler1DArray", "sampler1DArrayShadow", "isampler1D", "isampler1DArray", "usampler1D", "usampler1DArray", "isampler2DRect", "usampler2DRect", "samplerBuffer", "isamplerBuffer", "usamplerBuffer", "sampler2DMS", "isampler2DMS", "usampler2DMS", "sampler2DMSArray", "isampler2DMSArray", "usampler2DMSArray", "trunc", "round", "roundEven", "isnan", "isinf", "floatBitsToInt", "floatBitsToUint", "intBitsToFloat", "uintBitsToFloat", "packSnorm2x16", "unpackSnorm2x16", "packUnorm2x16", "unpackUnorm2x16", "packHalf2x16", "unpackHalf2x16", "outerProduct", "transpose", "determinant", "inverse", "texture", "textureSize", "textureProj", "textureLod", "textureOffset", "texelFetch", "texelFetchOffset", "textureProjOffset", "textureLodOffset", "textureProjLod", "textureProjLodOffset", "textureGrad", "textureGradOffset", "textureProjGrad", "textureProjGradOffset"];

// node_modules/@arcgis/core/views/webgl/testUtils.js
var e2 = { enableCache: false };

// node_modules/@arcgis/core/views/webgl/ShaderTranspiler.js
var i2 = 999;
var s = 9999;
var c2 = 0;
var p = 1;
var u = 2;
var f = 3;
var d = 4;
var l2 = 5;
var h = 6;
var y = 7;
var w = 8;
var g2 = 9;
var m = 10;
var k = 11;
var b = ["block-comment", "line-comment", "preprocessor", "operator", "integer", "float", "ident", "builtin", "keyword", "whitespace", "eof", "integer"];
function E() {
  var t2, e3, a3, E2 = 0, _2 = 0, v2 = i2, j2 = [], A2 = [], x2 = 1, D2 = 0, R2 = 0, T2 = false, S2 = false, G2 = "";
  return function(t3) {
    return A2 = [], null !== t3 ? F2(t3.replace ? t3.replace(/\r\n/g, "\n") : t3) : L2();
  };
  function X2(t3) {
    t3.length && A2.push({ type: b[v2], data: t3, position: R2, line: x2, column: D2 });
  }
  function F2(e4) {
    var r3;
    for (E2 = 0, a3 = (G2 += e4).length; t2 = G2[E2], E2 < a3; ) {
      switch (r3 = E2, v2) {
        case c2:
          E2 = V2();
          break;
        case p:
          E2 = P();
          break;
        case u:
          E2 = M();
          break;
        case f:
          E2 = O();
          break;
        case d:
          E2 = $();
          break;
        case k:
          E2 = W();
          break;
        case l2:
          E2 = z();
          break;
        case s:
          E2 = I();
          break;
        case g2:
          E2 = H3();
          break;
        case i2:
          E2 = C2();
      }
      if (r3 !== E2)
        if ("\n" === G2[r3])
          D2 = 0, ++x2;
        else
          ++D2;
    }
    return _2 += E2, G2 = G2.slice(E2), A2;
  }
  function L2(t3) {
    return j2.length && X2(j2.join("")), v2 = m, X2("(eof)"), A2;
  }
  function C2() {
    return j2 = j2.length ? [] : j2, "/" === e3 && "*" === t2 ? (R2 = _2 + E2 - 1, v2 = c2, e3 = t2, E2 + 1) : "/" === e3 && "/" === t2 ? (R2 = _2 + E2 - 1, v2 = p, e3 = t2, E2 + 1) : "#" === t2 ? (v2 = u, R2 = _2 + E2, E2) : /\s/.test(t2) ? (v2 = g2, R2 = _2 + E2, E2) : (T2 = /\d/.test(t2), S2 = /[^\w_]/.test(t2), R2 = _2 + E2, v2 = T2 ? d : S2 ? f : s, E2);
  }
  function H3() {
    return /[^\s]/g.test(t2) ? (X2(j2.join("")), v2 = i2, E2) : (j2.push(t2), e3 = t2, E2 + 1);
  }
  function M() {
    return "\r" !== t2 && "\n" !== t2 || "\\" === e3 ? (j2.push(t2), e3 = t2, E2 + 1) : (X2(j2.join("")), v2 = i2, E2);
  }
  function P() {
    return M();
  }
  function V2() {
    return "/" === t2 && "*" === e3 ? (j2.push(t2), X2(j2.join("")), v2 = i2, E2 + 1) : (j2.push(t2), e3 = t2, E2 + 1);
  }
  function O() {
    if ("." === e3 && /\d/.test(t2))
      return v2 = l2, E2;
    if ("/" === e3 && "*" === t2)
      return v2 = c2, E2;
    if ("/" === e3 && "/" === t2)
      return v2 = p, E2;
    if ("." === t2 && j2.length) {
      for (; N(j2); )
        ;
      return v2 = l2, E2;
    }
    if (";" === t2 || ")" === t2 || "(" === t2) {
      if (j2.length)
        for (; N(j2); )
          ;
      return X2(t2), v2 = i2, E2 + 1;
    }
    var a4 = 2 === j2.length && "=" !== t2;
    if (/[\w_\d\s]/.test(t2) || a4) {
      for (; N(j2); )
        ;
      return v2 = i2, E2;
    }
    return j2.push(t2), e3 = t2, E2 + 1;
  }
  function N(t3) {
    for (var e4, a4, n2 = 0; ; ) {
      if (e4 = g.indexOf(t3.slice(0, t3.length + n2).join("")), a4 = g[e4], -1 === e4) {
        if (n2-- + t3.length > 0)
          continue;
        a4 = t3.slice(0, 1).join("");
      }
      return X2(a4), R2 += a4.length, (j2 = j2.slice(a4.length)).length;
    }
  }
  function W() {
    return /[^a-fA-F0-9]/.test(t2) ? (X2(j2.join("")), v2 = i2, E2) : (j2.push(t2), e3 = t2, E2 + 1);
  }
  function $() {
    return "." === t2 || /[eE]/.test(t2) ? (j2.push(t2), v2 = l2, e3 = t2, E2 + 1) : "x" === t2 && 1 === j2.length && "0" === j2[0] ? (v2 = k, j2.push(t2), e3 = t2, E2 + 1) : /[^\d]/.test(t2) ? (X2(j2.join("")), v2 = i2, E2) : (j2.push(t2), e3 = t2, E2 + 1);
  }
  function z() {
    return "f" === t2 && (j2.push(t2), e3 = t2, E2 += 1), /[eE]/.test(t2) || "-" === t2 && /[eE]/.test(e3) ? (j2.push(t2), e3 = t2, E2 + 1) : /[^\d]/.test(t2) ? (X2(j2.join("")), v2 = i2, E2) : (j2.push(t2), e3 = t2, E2 + 1);
  }
  function I() {
    if (/[^\d\w_]/.test(t2)) {
      var a4 = j2.join("");
      return v2 = o2.indexOf(a4) > -1 ? w : n.indexOf(a4) > -1 ? y : h, X2(j2.join("")), v2 = i2, E2;
    }
    return j2.push(t2), e3 = t2, E2 + 1;
  }
}
function _(t2) {
  var e3 = E(), a3 = [];
  return a3 = (a3 = a3.concat(e3(t2))).concat(e3(null));
}
function v(t2) {
  return _(t2);
}
function j(t2) {
  return t2.map((t3) => "eof" !== t3.type ? t3.data : "").join("");
}
var A = /* @__PURE__ */ new Set(["GL_OES_standard_derivatives", "GL_EXT_frag_depth", "GL_EXT_draw_buffers", "GL_EXT_shader_texture_lod"]);
function x(t2, e3 = "100", a3 = "300 es") {
  const r3 = /^\s*\#version\s+([0-9]+(\s+[a-zA-Z]+)?)\s*/;
  for (const n2 of t2)
    if ("preprocessor" === n2.type) {
      const t3 = r3.exec(n2.data);
      if (t3) {
        const r4 = t3[1].replaceAll(/\s\s+/g, " ");
        if (r4 === a3)
          return r4;
        if (r4 === e3)
          return n2.data = "#version " + a3, e3;
        throw new Error("unknown glsl version: " + r4);
      }
    }
  return t2.splice(0, 0, { type: "preprocessor", data: "#version " + a3 }, { type: "whitespace", data: "\n" }), null;
}
function D(t2, e3) {
  for (let a3 = e3 - 1; a3 >= 0; a3--) {
    const e4 = t2[a3];
    if ("whitespace" !== e4.type && "block-comment" !== e4.type) {
      if ("keyword" !== e4.type)
        break;
      if ("attribute" === e4.data || "in" === e4.data)
        return true;
    }
  }
  return false;
}
function R(t2, e3, a3, r3) {
  r3 = r3 || a3;
  for (const n2 of t2)
    if ("ident" === n2.type && n2.data === a3) {
      r3 in e3 ? e3[r3]++ : e3[r3] = 0;
      return R(t2, e3, r3 + "_" + e3[r3], r3);
    }
  return a3;
}
function T(t2, e3, a3 = "afterVersion") {
  function r3(t3, e4) {
    for (let a4 = e4; a4 < t3.length; a4++) {
      const e5 = t3[a4];
      if ("operator" === e5.type && ";" === e5.data)
        return a4;
    }
    return null;
  }
  function n2(t3) {
    let e4 = -1, n3 = 0, o5 = -1;
    for (let i4 = 0; i4 < t3.length; i4++) {
      const s4 = t3[i4];
      if ("preprocessor" === s4.type && (/\#(if|ifdef|ifndef)\s+.+/.test(s4.data) ? ++n3 : /\#endif\s*.*/.test(s4.data) && --n3), "afterVersion" !== a3 && "afterPrecision" !== a3 || "preprocessor" === s4.type && s4.data.startsWith("#version") && (o5 = Math.max(o5, i4)), "afterPrecision" === a3 && "keyword" === s4.type && "precision" === s4.data) {
        const e5 = r3(t3, i4);
        if (null === e5)
          throw new Error("precision statement not followed by any semicolons!");
        o5 = Math.max(o5, e5);
      }
      e4 < o5 && 0 === n3 && (e4 = i4);
    }
    return e4 + 1;
  }
  const o4 = { data: "\n", type: "whitespace" }, i3 = (e4) => e4 < t2.length && /[^\r\n]$/.test(t2[e4].data);
  let s3 = n2(t2);
  i3(s3 - 1) && t2.splice(s3++, 0, o4);
  for (const c3 of e3)
    t2.splice(s3++, 0, c3);
  i3(s3 - 1) && i3(s3) && t2.splice(s3, 0, o4);
}
function S(t2, e3, a3, r3 = "lowp") {
  T(t2, [{ type: "keyword", data: "out" }, { type: "whitespace", data: " " }, { type: "keyword", data: r3 }, { type: "whitespace", data: " " }, { type: "keyword", data: a3 }, { type: "whitespace", data: " " }, { type: "ident", data: e3 }, { type: "operator", data: ";" }], "afterPrecision");
}
function G(t2, e3, a3, r3, n2 = "lowp") {
  T(t2, [{ type: "keyword", data: "layout" }, { type: "operator", data: "(" }, { type: "keyword", data: "location" }, { type: "whitespace", data: " " }, { type: "operator", data: "=" }, { type: "whitespace", data: " " }, { type: "integer", data: r3.toString() }, { type: "operator", data: ")" }, { type: "whitespace", data: " " }, { type: "keyword", data: "out" }, { type: "whitespace", data: " " }, { type: "keyword", data: n2 }, { type: "whitespace", data: " " }, { type: "keyword", data: a3 }, { type: "whitespace", data: " " }, { type: "ident", data: e3 }, { type: "operator", data: ";" }], "afterPrecision");
}
function X(t2, e3) {
  let a3, r3, n2 = -1;
  for (let o4 = e3; o4 < t2.length; o4++) {
    const e4 = t2[o4];
    if ("operator" === e4.type && ("[" === e4.data && (a3 = o4), "]" === e4.data)) {
      r3 = o4;
      break;
    }
    "integer" === e4.type && (n2 = parseInt(e4.data, 10));
  }
  return a3 && r3 && t2.splice(a3, r3 - a3 + 1), n2;
}
function F(a3, r3) {
  if (a3.startsWith("#version 300"))
    return a3;
  const n2 = C(a3);
  if (null != n2)
    return n2;
  const o4 = v(a3);
  if ("300 es" === x(o4, "100", "300 es"))
    return a3;
  let i3 = null, s3 = null;
  const c3 = {}, p2 = {};
  for (let u2 = 0; u2 < o4.length; ++u2) {
    const a4 = o4[u2];
    switch (a4.type) {
      case "keyword":
        r3 === H.VERTEX_SHADER && "attribute" === a4.data ? a4.data = "in" : "varying" === a4.data && (a4.data = r3 === H.VERTEX_SHADER ? "out" : "in");
        break;
      case "builtin":
        if (/^texture(2D|Cube)(Proj)?(Lod|Grad)?(EXT)?$/.test(a4.data.trim()) && (a4.data = a4.data.replaceAll(/(2D|Cube|EXT)/g, "")), r3 === H.FRAGMENT_SHADER && "gl_FragColor" === a4.data && (i3 || (i3 = R(o4, c3, "fragColor"), S(o4, i3, "vec4")), a4.data = i3), r3 === H.FRAGMENT_SHADER && "gl_FragData" === a4.data) {
          const t2 = X(o4, u2 + 1), e3 = R(o4, c3, "fragData");
          G(o4, e3, "vec4", t2, "mediump"), a4.data = e3;
        } else
          r3 === H.FRAGMENT_SHADER && "gl_FragDepthEXT" === a4.data && (s3 || (s3 = R(o4, c3, "gl_FragDepth")), a4.data = s3);
        break;
      case "ident":
        if (e.includes(a4.data)) {
          if (r3 === H.VERTEX_SHADER && D(o4, u2))
            throw new Error("attribute in vertex shader uses a name that is a reserved word in glsl 300 es");
          a4.data in p2 || (p2[a4.data] = R(o4, c3, a4.data)), a4.data = p2[a4.data];
        }
    }
  }
  for (let t2 = o4.length - 1; t2 >= 0; --t2) {
    const e3 = o4[t2];
    if ("preprocessor" === e3.type) {
      const a4 = e3.data.match(/\#extension\s+(.*)\:/);
      if (a4 && a4[1] && A.has(a4[1].trim())) {
        const e4 = o4[t2 + 1];
        o4.splice(t2, e4 && "whitespace" === e4.type ? 2 : 1);
      }
      const r4 = e3.data.match(/\#ifdef\s+(.*)/);
      r4 && r4[1] && A.has(r4[1].trim()) && (e3.data = "#if 1");
      const n3 = e3.data.match(/\#ifndef\s+(.*)/);
      n3 && n3[1] && A.has(n3[1].trim()) && (e3.data = "#if 0");
    }
  }
  return H2(a3, j(o4));
}
var L = /* @__PURE__ */ new Map();
function C(t2) {
  return e2.enableCache ? L.get(t2) : null;
}
function H2(t2, e3) {
  return e2.enableCache && L.set(t2, e3), e3;
}

// node_modules/@arcgis/core/views/webgl/Program.js
var o3 = 4294967295;
var r2 = class {
  constructor(r3, a3, h3, m3, c3 = /* @__PURE__ */ new Map(), _2 = []) {
    var _a;
    this._context = r3, this._locations = m3, this._uniformBlockBindings = c3, this._transformFeedbackVaryings = _2, this._refCount = 1, this._compiled = false, this._linesOfCode = 0, this._nameToUniformLocation = /* @__PURE__ */ new Map(), this._nameToUniform1 = /* @__PURE__ */ new Map(), this._nameToUniform1v = /* @__PURE__ */ new Map(), this._nameToUniform2 = /* @__PURE__ */ new Map(), this._nameToUniform3 = /* @__PURE__ */ new Map(), this._nameToUniform4 = /* @__PURE__ */ new Map(), this._nameToUniformMatrix3 = /* @__PURE__ */ new Map(), this._nameToUniformMatrix4 = /* @__PURE__ */ new Map(), r3 || console.error("RenderingContext isn't initialized!"), 0 === a3.length && console.error("Shaders source should not be empty!"), a3 = F(a3, H.VERTEX_SHADER), h3 = F(h3, H.FRAGMENT_SHADER), this._vShader = s2(this._context, H.VERTEX_SHADER, a3), this._fShader = s2(this._context, H.FRAGMENT_SHADER, h3), f2.enabled && (this._linesOfCode = a3.match(/\n/g).length + h3.match(/\n/g).length + 2, this._context.instanceCounter.increment(V.LinesOfCode, this._vShader, this._linesOfCode)), this._vShader && this._fShader || console.error("Error loading shaders!"), this._context.instanceCounter.increment(V.Shader, this), c() && (this.vertexShader = a3, this.fragmentShader = h3), this.usedMemory = a3.length + h3.length;
    const l3 = this._context.gl, g3 = l3.createProgram();
    l3.attachShader(g3, this._vShader), l3.attachShader(g3, this._fShader), this._locations.forEach((t2, e3) => l3.bindAttribLocation(g3, t2, e3)), ((_a = this._transformFeedbackVaryings) == null ? void 0 : _a.length) && l3.transformFeedbackVaryings(g3, this._transformFeedbackVaryings, l3.SEPARATE_ATTRIBS), l3.linkProgram(g3), c() && !l3.getProgramParameter(g3, l3.LINK_STATUS) && console.error(`Could not link shader
validated: ${l3.getProgramParameter(g3, l3.VALIDATE_STATUS)}, gl error ${l3.getError()}, vertex: ${l3.getShaderParameter(this._vShader, l3.COMPILE_STATUS)}, fragment: ${l3.getShaderParameter(this._fShader, l3.COMPILE_STATUS)}, info log: ${l3.getProgramInfoLog(g3)}, vertex source: ${this.vertexShader}, fragment source: ${this.fragmentShader}`);
    for (const [t2, e3] of this._uniformBlockBindings) {
      const n2 = l3.getUniformBlockIndex(g3, t2);
      n2 < o3 && l3.uniformBlockBinding(g3, n2, e3);
    }
    this._glName = g3, this._context.instanceCounter.increment(V.Program, this);
  }
  get glName() {
    return this._glName;
  }
  get hasGLName() {
    return null != this._glName;
  }
  get hasTransformFeedbackVaryings() {
    var _a;
    return !!((_a = this._transformFeedbackVaryings) == null ? void 0 : _a.length);
  }
  get compiled() {
    if (this._compiled)
      return true;
    const t2 = this._context.gl.getExtension("KHR_parallel_shader_compile");
    return null == t2 || null == this.glName ? (this._compiled = true, true) : (this._compiled = !!this._context.gl.getProgramParameter(this.glName, t2.COMPLETION_STATUS_KHR), this._compiled);
  }
  dispose() {
    if (--this._refCount > 0)
      return;
    const t2 = this._context.gl, e3 = this._context.instanceCounter;
    this._nameToUniformLocation.forEach((t3) => t3 && e3.decrement(V.Uniform, t3)), this._nameToUniformLocation.clear(), this._vShader && (this._linesOfCode > 0 && (e3.decrement(V.LinesOfCode, this._vShader, this._linesOfCode), this._linesOfCode = 0), t2.deleteShader(this._vShader), this._vShader = null, e3.decrement(V.Shader, this)), this._fShader && (t2.deleteShader(this._fShader), this._fShader = null), this._glName && (t2.deleteProgram(this._glName), this._glName = null, e3.decrement(V.Program, this));
  }
  ref() {
    ++this._refCount;
  }
  _getUniformLocation(t2) {
    const e3 = this._nameToUniformLocation.get(t2);
    if (void 0 !== e3)
      return e3;
    if (this.glName) {
      const e4 = this._context.gl.getUniformLocation(this.glName, t2);
      return this._nameToUniformLocation.set(t2, e4), e4 && this._context.instanceCounter.increment(V.Uniform, e4), e4;
    }
    return null;
  }
  hasUniform(t2) {
    return null != this._getUniformLocation(t2);
  }
  setUniform1i(t2, e3) {
    const n2 = this._nameToUniform1.get(t2);
    void 0 !== n2 && e3 === n2 || (this._context.gl.uniform1i(this._getUniformLocation(t2), e3), this._nameToUniform1.set(t2, e3));
  }
  setUniform1iv(t2, e3) {
    m2(this._nameToUniform1v, t2, e3) && this._context.gl.uniform1iv(this._getUniformLocation(t2), e3);
  }
  setUniform2iv(t2, e3) {
    m2(this._nameToUniform2, t2, e3) && this._context.gl.uniform2iv(this._getUniformLocation(t2), e3);
  }
  setUniform3iv(t2, e3) {
    m2(this._nameToUniform3, t2, e3) && this._context.gl.uniform3iv(this._getUniformLocation(t2), e3);
  }
  setUniform4iv(t2, e3) {
    m2(this._nameToUniform4, t2, e3) && this._context.gl.uniform4iv(this._getUniformLocation(t2), e3);
  }
  setUniform1f(t2, e3) {
    const n2 = this._nameToUniform1.get(t2);
    void 0 !== n2 && e3 === n2 || (this._context.gl.uniform1f(this._getUniformLocation(t2), e3), this._nameToUniform1.set(t2, e3));
  }
  setUniform1fv(t2, e3) {
    m2(this._nameToUniform1v, t2, e3) && this._context.gl.uniform1fv(this._getUniformLocation(t2), e3);
  }
  setUniform2f(t2, e3, n2) {
    const i3 = this._nameToUniform2.get(t2);
    void 0 === i3 ? (this._context.gl.uniform2f(this._getUniformLocation(t2), e3, n2), this._nameToUniform2.set(t2, [e3, n2])) : e3 === i3[0] && n2 === i3[1] || (this._context.gl.uniform2f(this._getUniformLocation(t2), e3, n2), i3[0] = e3, i3[1] = n2);
  }
  setUniform2fv(t2, e3) {
    m2(this._nameToUniform2, t2, e3) && this._context.gl.uniform2fv(this._getUniformLocation(t2), e3);
  }
  setUniform3f(t2, e3, n2, i3) {
    const o4 = this._nameToUniform3.get(t2);
    void 0 === o4 ? (this._context.gl.uniform3f(this._getUniformLocation(t2), e3, n2, i3), this._nameToUniform3.set(t2, [e3, n2, i3])) : e3 === o4[0] && n2 === o4[1] && i3 === o4[2] || (this._context.gl.uniform3f(this._getUniformLocation(t2), e3, n2, i3), o4[0] = e3, o4[1] = n2, o4[2] = i3);
  }
  setUniform3fv(t2, e3) {
    const n2 = this._getUniformLocation(t2);
    null != n2 && m2(this._nameToUniform3, t2, e3) && this._context.gl.uniform3fv(n2, e3);
  }
  setUniform4f(t2, e3, n2, i3, o4) {
    const r3 = this._nameToUniform4.get(t2);
    void 0 === r3 ? (this._context.gl.uniform4f(this._getUniformLocation(t2), e3, n2, i3, o4), this._nameToUniform4.set(t2, [e3, n2, i3, o4])) : void 0 !== r3 && e3 === r3[0] && n2 === r3[1] && i3 === r3[2] && o4 === r3[3] || (this._context.gl.uniform4f(this._getUniformLocation(t2), e3, n2, i3, o4), r3[0] = e3, r3[1] = n2, r3[2] = i3, r3[3] = o4);
  }
  setUniform4fv(t2, e3) {
    const n2 = this._getUniformLocation(t2);
    null != n2 && m2(this._nameToUniform4, t2, e3) && this._context.gl.uniform4fv(n2, e3);
  }
  setUniformMatrix3fv(t2, e3, n2 = false) {
    const i3 = this._getUniformLocation(t2);
    null != i3 && m2(this._nameToUniformMatrix3, t2, e3) && this._context.gl.uniformMatrix3fv(i3, n2, e3);
  }
  setUniformMatrix4fv(t2, e3, n2 = false) {
    const i3 = this._getUniformLocation(t2);
    null != i3 && m2(this._nameToUniformMatrix4, t2, e3) && this._context.gl.uniformMatrix4fv(i3, n2, e3);
  }
  stop() {
  }
};
function s2(n2, i3, o4) {
  const r3 = n2.gl, s3 = r3.createShader(i3);
  return r3.shaderSource(s3, o4), r3.compileShader(s3), c() && !r3.getShaderParameter(s3, r3.COMPILE_STATUS) && (console.error("Compile error in ".concat(i3 === H.VERTEX_SHADER ? "vertex" : "fragment", " shader")), console.error(r3.getShaderInfoLog(s3)), console.error(a2(o4))), s3;
}
function a2(t2) {
  let e3 = 2;
  return t2.replaceAll("\n", () => "\n" + h2(e3++) + ":");
}
function h2(t2) {
  return t2 >= 1e3 ? t2.toString() : ("  " + t2).slice(-3);
}
function m2(t2, e3, n2) {
  const i3 = t2.get(e3);
  if (!i3)
    return t2.set(e3, Array.from(n2)), true;
  const o4 = n2.length;
  if (i3.length !== o4)
    return t2.set(e3, Array.from(n2)), true;
  for (let r3 = 0; r3 < o4; ++r3) {
    const t3 = n2[r3];
    if (i3[r3] !== t3) {
      for (i3[r3] = t3; r3 < o4; ++r3)
        i3[r3] = n2[r3];
      return true;
    }
  }
  return false;
}
var f2 = { enabled: false };

export {
  r2 as r
};
//# sourceMappingURL=chunk-O556EBAK.js.map
