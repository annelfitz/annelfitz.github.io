import {
  y as y3
} from "./chunk-THQ2DNZA.js";
import {
  L
} from "./chunk-3RT7534N.js";
import {
  c,
  y as y2
} from "./chunk-R5A6POKY.js";
import {
  e as e5
} from "./chunk-AVQM6UNY.js";
import {
  l
} from "./chunk-ZIKY3AX6.js";
import {
  p,
  u as u2
} from "./chunk-YSRCOU2A.js";
import {
  e as e4
} from "./chunk-EAAEPSBY.js";
import {
  D,
  e2 as e3,
  r
} from "./chunk-RGCWZ2KZ.js";
import {
  i,
  n
} from "./chunk-5VMSFOCB.js";
import {
  P,
  d
} from "./chunk-Z4Y53NDM.js";
import {
  V
} from "./chunk-PVUNFEWX.js";
import {
  S,
  e3 as e2,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import {
  u
} from "./chunk-QHK5ZYFW.js";
import {
  s
} from "./chunk-7RBRCL6S.js";
import {
  k
} from "./chunk-J2EGIWT6.js";

// node_modules/@arcgis/core/widgets/support/LabeledSwitch.js
var l2 = () => Promise.all([r({ icon: () => import("./calcite-icon-25XWA6H7.js"), label: () => import("./calcite-label-W4VTHQAF.js"), switch: () => import("./calcite-switch-RMLANBR4.js"), tooltip: () => import("./calcite-tooltip-TDDUGVK4.js") })]);
var i2 = "esri-labeled-switch";
var o = { label: `${i2}__label`, labelContent: `${i2}__label-content`, icon: `${i2}__icon`, tooltip: `${i2}__tooltip` };
function s2({ checked: e6, disabled: l4, hint: i3, key: s6, label: n2, onChange: a4 }) {
  return n("calcite-label", { class: o.label, disabled: l4, key: s6, layout: "inline-space-between", scale: "s" }, n("div", { class: o.labelContent, key: "label-content" }, i3 ? n(i, null, n("div", null, n2), n("calcite-icon", { class: o.icon, icon: "information", id: s6, scale: "s" }), n("calcite-tooltip", { class: o.tooltip, referenceElement: s6 }, i3)) : n2), n("calcite-switch", { checked: e6, disabled: l4, scale: "s", onCalciteSwitchChange: (e7) => a4(e7.target.checked) }));
}

// node_modules/@arcgis/core/widgets/support/SketchTooltipControls/VisibleElements.js
var s3 = class extends S {
  constructor(o2) {
    super(o2), this.directionModePicker = false, this.header = false, this.labelsToggle = true, this.tooltipsToggle = true;
  }
};
e([y({ type: Boolean, nonNullable: true })], s3.prototype, "directionModePicker", void 0), e([y({ type: Boolean, nonNullable: true })], s3.prototype, "header", void 0), e([y({ type: Boolean, nonNullable: true })], s3.prototype, "labelsToggle", void 0), e([y({ type: Boolean, nonNullable: true })], s3.prototype, "tooltipsToggle", void 0), s3 = e([a("esri.widgets.support.SketchTooltipControls.VisibleElements")], s3);
var l3 = s3;

// node_modules/@arcgis/core/widgets/support/SketchTooltipControls.js
var m = "esri-sketch-tooltip-controls";
var g = { base: m, block: `${m}__block`, blockContent: `${m}__block-content`, hintIcon: `${m}__hint-icon`, radioButtonLabelWrapper: `${m}__radio-button-label-wrapper` };
var u3 = class extends D {
  constructor(e6, t2) {
    super(e6, t2), this.viewModel = null, this.visibleElements = new l3(), this.sketchOptions = new l(), this.viewType = void 0, this._onTooltipsEnabledChange = (e7) => {
      this.sketchOptions.tooltips.enabled = e7;
    }, this._onLabelsEnabledChange = (e7) => {
      this.sketchOptions.labels.enabled = e7;
    }, this._onDirectionModeChange = (e7) => {
      this.sketchOptions.values.directionMode = e7.target.selectedItem.value;
    };
  }
  loadDependencies() {
    return Promise.all([r({ block: () => import("./calcite-block-GV6ZWM4U.js"), label: () => import("./calcite-label-W4VTHQAF.js"), icon: () => import("./calcite-icon-25XWA6H7.js"), "radio-button": () => import("./calcite-radio-button-JGCHQ7DQ.js"), "radio-button-group": () => import("./calcite-radio-button-group-IGITYPZQ.js") }), l2()]);
  }
  render() {
    const { label: e6, visibleElements: t2 } = this, o2 = this._renderContent();
    return n("div", { "aria-label": e6, class: this.classes(g.base, e4.widget) }, o2 ? n("calcite-block", { class: g.block, heading: t2.header ? this.label : "", key: "content-block", open: true }, n("div", { class: g.blockContent, key: "content" }, o2)) : void 0);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e6) {
    this._overrideIfSome("label", e6);
  }
  _renderContent() {
    const { visibleElements: e6, viewType: o2 } = this, i3 = [e6.tooltipsToggle ? this._renderTooltipsToggle() : null, e6.labelsToggle && "2d" !== o2 ? this._renderLabelsToggle() : null, e6.directionModePicker ? this._renderDirectionModePicker() : null].filter(k);
    return 0 === i3.length ? null : i3;
  }
  _renderTooltipsToggle() {
    const { messages: e6, sketchOptions: t2 } = this;
    return n(s2, { checked: t2.tooltips.effectiveEnabled, hint: e6.tooltipsToggleHint, key: `${this.id}__tooltips`, label: e6.tooltipsToggle, onChange: this._onTooltipsEnabledChange });
  }
  _renderLabelsToggle() {
    const { messages: e6, sketchOptions: t2 } = this;
    return n(s2, { checked: t2.labels.enabled, hint: e6.labelsToggleHint, key: `${this.id}__labels`, label: e6.labelsToggle, onChange: this._onLabelsEnabledChange });
  }
  _renderDirectionModePicker() {
    const { messages: e6, sketchOptions: t2 } = this, { directionMode: o2 } = t2.values;
    return n("calcite-label", { key: "direction-mode", layout: "default", scale: "s" }, e6.directionModePicker, n("calcite-radio-button-group", { key: "radio-button-group", layout: "horizontal", name: this.id, scale: "s", value: o2, onCalciteRadioButtonGroupChange: this._onDirectionModeChange }, this._renderDirectionModeOption("relative", o2, e6.directionModeRelative), this._renderDirectionModeOption("absolute", o2, e6.directionModeAbsolute)));
  }
  _renderDirectionModeOption(e6, t2, o2) {
    return n("calcite-label", { key: e6, layout: "inline", scale: "s" }, n("calcite-radio-button", { checked: e6 === t2, scale: "s", value: e6 }), n("div", { class: g.radioButtonLabelWrapper, key: "label-wrapper" }, n("calcite-icon", { icon: e5[e6], scale: "s" }), o2));
  }
};
e([y()], u3.prototype, "label", null), e([y({ type: l3, nonNullable: true })], u3.prototype, "visibleElements", void 0), e([y(), e3("esri/widgets/support/SketchTooltipControls/t9n/SketchTooltipControls")], u3.prototype, "messages", void 0), e([y({ nonNullable: true, type: l })], u3.prototype, "sketchOptions", void 0), e([y({ type: String })], u3.prototype, "viewType", void 0), u3 = e([a("esri.widgets.support.SketchTooltipControls")], u3);
var k2 = u3;

// node_modules/@arcgis/core/widgets/support/SnappingControls/snappingLayerListUtils.js
var s4 = (e6) => r2(e6) || t(e6);
var r2 = (e6) => {
  if (!("type" in e6))
    return false;
  switch (e6.type) {
    case "feature":
    case "geojson":
    case "csv":
    case "graphics":
    case "wfs":
    case "map-notes":
    case "oriented-imagery":
    case "scene":
    case "building-scene":
    case "subtype-sublayer":
      return true;
    default:
      return false;
  }
};
var t = (r4) => {
  const t2 = c(r4);
  if (null != t2 && r4.hasOwnProperty(t2) && null != r4[t2]) {
    for (const e6 of r4[t2])
      if (s4(e6))
        return true;
  }
  return false;
};

// node_modules/@arcgis/core/widgets/support/SnappingControls/SnappingListItem.js
var a2;
var p2 = a2 = class extends L {
  constructor(e6) {
    super(e6), this.children = new V(), this.parent = null;
  }
  get allChildrenEnabled() {
    return this.children.every((e6) => e6.enabled) ?? false;
  }
  get childLayerIds() {
    return this.children.map((e6) => e6.layer.id).toArray();
  }
  get enabled() {
    return null != this.featureSource && this.featureSource.enabled;
  }
  get featureSource() {
    const { layer: e6, getFeatureSnappingSources: r4 } = this;
    return r4().find((r5) => r5.layer === e6);
  }
  get hasChildrenEnabled() {
    return this.children.some((e6) => e6.enabled);
  }
  _initializeChildLayers(e6) {
    if (!e6)
      return;
    const r4 = e6.filter(s4);
    super._initializeChildLayers(r4);
  }
  _makeChildren(e6) {
    return e6.map((e7) => y2(e7) ? new a2({ layer: e7, parent: this, view: this.view, getFeatureSnappingSources: this.getFeatureSnappingSources }) : null).filter(k).reverse();
  }
};
e([y()], p2.prototype, "allChildrenEnabled", null), e([y()], p2.prototype, "children", void 0), e([y()], p2.prototype, "childLayerIds", null), e([y()], p2.prototype, "enabled", null), e([y()], p2.prototype, "featureSource", null), e([y({ constructOnly: true })], p2.prototype, "getFeatureSnappingSources", void 0), e([y()], p2.prototype, "hasChildrenEnabled", null), e([y()], p2.prototype, "parent", void 0), p2 = a2 = e([a("esri.widgets.support.SnappingControls.SnappingListItem")], p2);

// node_modules/@arcgis/core/widgets/support/SnappingControls/SnappingLayerListViewModel.js
var a3 = class extends y3 {
  constructor() {
    super(...arguments), this.featureSnappingSources = new V();
  }
  get operationalItemsFlat() {
    return this.operationalItems.flatten((e6) => e6.children);
  }
  get selectableItems() {
    return this.operationalItemsFlat.filter((e6) => {
      var _a;
      return !((_a = e6.children) == null ? void 0 : _a.length);
    });
  }
  _compileList() {
    var _a, _b;
    const e6 = (_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.layers;
    if (!e6)
      return;
    const t2 = e6.filter(s4);
    this._watchLayersListMode(t2);
    const r4 = this._getViewableLayers(t2);
    (r4 == null ? void 0 : r4.length) ? (this._createNewItems(r4), this._removeItems(r4), this._sortItems(r4)) : this._removeAllItems();
  }
  _createListItem(e6) {
    return new p2({ layer: e6, view: this.view, getFeatureSnappingSources: () => this.featureSnappingSources });
  }
};
e([y()], a3.prototype, "featureSnappingSources", void 0), e([y()], a3.prototype, "operationalItems", void 0), e([y()], a3.prototype, "operationalItemsFlat", null), e([y()], a3.prototype, "selectableItems", null), a3 = e([a("esri.widgets.support.SnappingControls.SnappingLayerListViewModel")], a3);

// node_modules/@arcgis/core/widgets/support/SnappingControls/SnappingControlsViewModel.js
var c2 = class extends S {
  constructor(e6) {
    super(e6), this.layerListViewModel = new a3(), this.snappingOptions = new u2(), this.view = null;
  }
  initialize() {
    this.addHandles([d(() => ({ viewModel: this.layerListViewModel, view: this.view }), ({ viewModel: e6, view: r4 }) => {
      e6.view = r4;
    }, P), d(() => {
      var _a;
      return { viewModel: this.layerListViewModel, sources: (_a = this.snappingOptions) == null ? void 0 : _a.featureSources };
    }, ({ viewModel: e6, sources: r4 }) => {
      e6.featureSnappingSources = r4;
    }, P)]);
  }
  get allLayersEnabled() {
    var _a;
    return (((_a = this.layerListViewModel) == null ? void 0 : _a.selectableItems) ?? []).every((e6) => e6.enabled);
  }
  get allLayersDisabled() {
    var _a;
    return (((_a = this.layerListViewModel) == null ? void 0 : _a.selectableItems) ?? []).every((e6) => !e6.enabled);
  }
  get layersEnabledCount() {
    var _a, _b;
    return ((_b = (_a = this.layerListViewModel) == null ? void 0 : _a.selectableItems) == null ? void 0 : _b.filter((e6) => e6.enabled).length) ?? 0;
  }
  get state() {
    return this.snappingOptions ? "ready" : "disabled";
  }
  toggleSnappingForLayers(e6, r4) {
    e6 == null ? void 0 : e6.forEach((e7) => r4 ? this.enableSnappingForLayer(e7) : this.disableSnappingForLayer(e7));
  }
  toggleSnappingForAllLayers(e6) {
    this.layerListViewModel.selectableItems.forEach(({ layer: { id: r4 } }) => {
      e6 ? this.enableSnappingForLayer(r4) : this.disableSnappingForLayer(r4);
    });
  }
  enableSnappingForLayer(e6) {
    (this._findSnappingSourceForLayer(e6) ?? this._makeSnappingSourceForLayer(e6)).enabled = true;
  }
  disableSnappingForLayer(e6) {
    const r4 = this._findSnappingSourceForLayer(e6);
    r4 && (r4.enabled = false);
  }
  updateEnabledFeatureSources(e6) {
    for (const r4 of this.snappingOptions.featureSources)
      y2(r4.layer) && (r4.enabled = e6.includes(r4.layer.id));
  }
  _findSnappingSourceForLayer(e6) {
    return this.snappingOptions.featureSources.find((r4) => r4.layer.id === e6);
  }
  _makeSnappingSourceForLayer(e6) {
    var _a;
    const r4 = (_a = this.layerListViewModel.operationalItemsFlat.find((r5) => r5.layer.id === e6)) == null ? void 0 : _a.layer;
    if (!r4)
      throw new s("snapping-controls:layer-not-found", `cannot enable snapping for layer with id ${e6} because no such layer was found in the view`);
    const t2 = new p({ layer: r4 });
    return this.snappingOptions.featureSources.add(t2), t2;
  }
};
e([y()], c2.prototype, "allLayersEnabled", null), e([y()], c2.prototype, "allLayersDisabled", null), e([y({ constructOnly: true })], c2.prototype, "layerListViewModel", void 0), e([y()], c2.prototype, "layersEnabledCount", null), e([y({ type: u2, nonNullable: true })], c2.prototype, "snappingOptions", void 0), e([y()], c2.prototype, "state", null), e([y()], c2.prototype, "view", void 0), c2 = e([a("esri.widgets.support.SnappingControls.SnappingControlsViewModel")], c2);
var y4 = c2;

// node_modules/@arcgis/core/widgets/support/SnappingControls/VisibleElements.js
var r3 = class extends S {
  constructor(o2) {
    super(o2), this.enabledToggle = true, this.featureEnabledToggle = true, this.header = false, this.layerList = true, this.layerListToggleLayersButton = true, this.selfEnabledToggle = true;
  }
};
e([y({ type: Boolean, nonNullable: true })], r3.prototype, "enabledToggle", void 0), e([y({ type: Boolean, nonNullable: true })], r3.prototype, "featureEnabledToggle", void 0), e([y({ type: Boolean, nonNullable: true })], r3.prototype, "header", void 0), e([y({ type: Boolean, nonNullable: true })], r3.prototype, "layerList", void 0), e([y({ type: Boolean, nonNullable: true })], r3.prototype, "layerListToggleLayersButton", void 0), e([y({ type: Boolean, nonNullable: true })], r3.prototype, "selfEnabledToggle", void 0), r3 = e([a("esri.widgets.support.SnappingControls.VisibleElements")], r3);
var s5 = r3;

// node_modules/@arcgis/core/widgets/support/SnappingControls.js
var u4 = "esri-snapping-controls";
var b = { base: u4, container: `${u4}__container`, item: `${u4}__item`, toggleBlock: `${u4}__toggle-block`, layerListBlock: `${u4}__layer-list-block`, layerList: `${u4}__layer-list`, layerListFilter: `${u4}__layer-list__filter`, layerListButton: `${u4}__layer-list__button`, layerListItem: `${u4}__layer-list__item`, layerListGroup: `${u4}__layer-list__group`, nestedContainer: `${u4}__nested-container` };
var y5 = { checked: "check-square-f", unchecked: "square", indeterminate: "minus-square" };
var _ = class extends D {
  constructor(e6, t2) {
    super(e6, t2), this._defaultViewModel = null, this._layerListFilter = null, this.layerListOpen = true, this.messages = null, this.visibleElements = new s5(), this._enableSnappingSwitchChange = (e7) => {
      this.snappingOptions.enabled = e7;
    }, this._featureEnabledSwitchChange = (e7) => {
      this.snappingOptions.featureEnabled = e7;
    }, this._selfEnabledSwitchChange = (e7) => {
      this.snappingOptions.selfEnabled = e7;
    }, this._onToggleLayersButtonClick = (e7) => {
      this.viewModel.toggleSnappingForAllLayers(!this.viewModel.allLayersEnabled), requestAnimationFrame(() => e7.target.setFocus());
    };
    const { snappingOptions: i3, view: s6, viewModel: l4 } = e6;
    this.viewModel = l4 ?? (this._defaultViewModel = new y4({ snappingOptions: i3, view: s6 }));
  }
  normalizeCtorArgs(e6) {
    const { snappingOptions: t2, view: i3, viewModel: s6, ...l4 } = e6;
    return l4;
  }
  destroy() {
    this.viewModel !== this._defaultViewModel && (this._defaultViewModel = u(this._defaultViewModel));
  }
  loadDependencies() {
    return Promise.all([r({ accordion: () => import("./calcite-accordion-HEFSEF4I.js"), "accordion-item": () => import("./calcite-accordion-item-B7NM2YM3.js"), action: () => import("./calcite-action-P2CTRNG2.js"), block: () => import("./calcite-block-GV6ZWM4U.js"), button: () => import("./calcite-button-V4T5NPWY.js"), icon: () => import("./calcite-icon-25XWA6H7.js"), input: () => import("./calcite-input-CHG5BNQ7.js"), list: () => import("./calcite-list-CC3BA3BY.js"), "list-item": () => import("./calcite-list-item-K4SMX7ZK.js") }), l2()]);
  }
  get icon() {
    return "snap-to-point";
  }
  set icon(e6) {
    this._overrideIfSome("icon", e6);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e6) {
    this._overrideIfSome("label", e6);
  }
  get snappingOptions() {
    return this.viewModel.snappingOptions;
  }
  set snappingOptions(e6) {
    this.viewModel.snappingOptions = e6;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e6) {
    this.viewModel.view = e6;
  }
  set viewModel(e6) {
    e6 !== this._get("viewModel") && (null != this._defaultViewModel && this._defaultViewModel === e6 || (this._defaultViewModel = u(this._defaultViewModel)), this._set("viewModel", e6));
  }
  render() {
    const { label: e6 } = this;
    return n("div", { "aria-label": e6, class: this.classes(b.base, e4.widget) }, n("div", { class: b.container }, this._renderContent()));
  }
  _renderContent() {
    return [this._renderToggles(), this._renderLayerList()];
  }
  _renderToggles() {
    const { visibleElements: e6 } = this, i3 = [e6.selfEnabledToggle ? this._renderSelfEnabledToggle() : null, e6.featureEnabledToggle ? this._renderFeatureEnabledToggle() : null].filter(k), s6 = [e6.enabledToggle ? this._renderEnabledToggle() : null, i3.length > 0 ? n("div", { class: b.nestedContainer }, i3) : null].filter(k);
    return 0 === s6.length ? null : n("calcite-block", { class: b.toggleBlock, heading: e6.header ? this.label : "", key: "toggle-block", open: true }, s6);
  }
  _renderEnabledToggle() {
    const { messages: e6, viewModel: t2 } = this, { snappingOptions: i3 } = t2;
    return n(s2, { checked: i3.enabled, disabled: this._enabledToggleDisabled, key: `${this.id}__enabled-toggle`, label: e6.enableSnapping, onChange: this._enableSnappingSwitchChange });
  }
  _renderSelfEnabledToggle() {
    const { messages: e6, viewModel: t2 } = this, { snappingOptions: i3 } = t2, s6 = i3.enabled && i3.selfEnabled;
    return n(s2, { checked: s6, disabled: this._secondaryElementsDisabled, key: `${this.id}__self-enabled-toggle`, label: e6.geometryGuides, onChange: this._selfEnabledSwitchChange });
  }
  _renderFeatureEnabledToggle() {
    const { messages: e6, viewModel: t2 } = this, { snappingOptions: i3 } = t2, s6 = i3.enabled && i3.featureEnabled;
    return n(s2, { checked: s6, disabled: this._secondaryElementsDisabled, key: `${this.id}__feature-enabled-toggle`, label: e6.featureToFeature, onChange: this._featureEnabledSwitchChange });
  }
  _renderLayerList() {
    if (!this.visibleElements.layerList)
      return null;
    const { messages: e6, viewModel: t2 } = this, i3 = ({ target: { value: e7 } }) => {
      this._layerListFilter = "" === e7 ? null : new RegExp(e7, "i");
    }, s6 = t2.layerListViewModel.operationalItems.length > 9 ? n("calcite-input", { class: b.layerListFilter, clearable: true, placeholder: e6 == null ? void 0 : e6.searchLayers, onCalciteInputInput: i3 }) : null, l4 = this._secondaryElementsDisabled, n2 = this.layerListOpen && !l4;
    return n("calcite-block", { class: b.layerListBlock, collapsible: true, disabled: this._secondaryElementsDisabled, heading: e6.snappingLayers, key: "list-block", open: n2, onCalciteBlockToggle: (e7) => this.layerListOpen = e7.target.open }, s6, this._renderToggleLayersButton(), n("calcite-list", { class: b.layerList }, this._renderLayerListItemCollection(t2.layerListViewModel.operationalItems, this._layerListFilter)));
  }
  _renderLayerListItemCollection(e6, i3) {
    return e6.map((e7) => {
      if (!i3 || this._itemTitleMatchesFilter(e7, i3))
        return e7.children.length > 0 ? this._renderLayerListItemGroup(e7) : this._renderLayerListItem(e7);
      const t2 = e7.children.filter((e8) => this._itemTitleMatchesFilter(e8, i3));
      return t2.length > 0 ? this._renderLayerListItemGroup(e7, t2) : null;
    }).toArray().filter(k);
  }
  _renderToggleLayersButton() {
    if (!this.visibleElements.layerListToggleLayersButton)
      return null;
    const { viewModel: { allLayersEnabled: e6 }, messages: t2 } = this, i3 = e6 ? t2.disableAllLayers : t2.enableAllLayers;
    return n("calcite-button", { appearance: "transparent", class: b.layerListButton, label: i3, name: "layer-toggle", onclick: this._onToggleLayersButtonClick }, i3);
  }
  _renderLayerListItem(e6) {
    const { messages: { untitledLayer: t2 } } = this, i3 = e6.title || t2, s6 = e6.enabled, l4 = () => {
      this._handleLayerListItemChange({ checked: !s6, value: e6.layer.id });
    };
    return n("calcite-list-item", { class: b.layerListItem, key: `${this.id}-list-item-${e6.uid}`, label: i3, onCalciteListItemSelect: l4 }, n("calcite-icon", { icon: s6 ? y5.checked : y5.unchecked, scale: "s", slot: "content-start" }));
  }
  _renderLayerListItemGroup(e6, t2) {
    const { allChildrenEnabled: i3, children: l4, hasChildrenEnabled: n2, title: o2 } = e6, a4 = this.messages, r4 = o2 || a4.untitledLayer, c3 = o2 && "" !== o2 ? o2 : e2(), d2 = !!t2, p3 = t2 ?? l4, h = i3 ? y5.checked : n2 ? y5.indeterminate : y5.unchecked, m2 = i3 ? a4.disableAllLayers : a4.enableAllLayers, u5 = () => {
      this.viewModel.toggleSnappingForLayers(e6.childLayerIds, !i3);
    };
    return n("calcite-list-item", { class: b.layerListItem, key: c3 }, n("calcite-accordion", { appearance: "transparent", class: b.layerListGroup }, n("calcite-accordion-item", { expanded: d2, heading: r4, key: e6.uid }, n("calcite-action", { onclick: u5, slot: "actions-start", text: m2, title: m2 }, n("calcite-icon", { icon: h, scale: "s" })), n("calcite-list", null, this._renderLayerListItemCollection(p3)))));
  }
  _itemTitleMatchesFilter(e6, t2) {
    return null != t2 && t2.test(e6.title);
  }
  async _handleLayerListItemChange(e6) {
    e6.checked ? this.viewModel.enableSnappingForLayer(e6.value) : this.viewModel.disableSnappingForLayer(e6.value);
  }
  get _enabledToggleDisabled() {
    const e6 = this.snappingOptions;
    return e6.enabledToggled || e6.forceDisabled;
  }
  get _secondaryElementsDisabled() {
    return this._enabledToggleDisabled || !this.snappingOptions.enabled;
  }
};
e([y()], _.prototype, "_defaultViewModel", void 0), e([y()], _.prototype, "_layerListFilter", void 0), e([y()], _.prototype, "label", null), e([y({ type: Boolean, nonNullable: true })], _.prototype, "layerListOpen", void 0), e([y(), e3("esri/widgets/support/SnappingControls/t9n/SnappingControls")], _.prototype, "messages", void 0), e([y()], _.prototype, "snappingOptions", null), e([y()], _.prototype, "view", null), e([y()], _.prototype, "viewModel", null), e([y({ type: s5, nonNullable: true })], _.prototype, "visibleElements", void 0), e([y()], _.prototype, "_enabledToggleDisabled", null), e([y()], _.prototype, "_secondaryElementsDisabled", null), _ = e([a("esri.widgets.support.SnappingControls")], _);
var L2 = _;

export {
  s5 as s,
  k2 as k,
  L2 as L
};
//# sourceMappingURL=chunk-V4GNOX5M.js.map
