import {
  l as l3
} from "./chunk-RGNPZZMV.js";
import {
  f as f6
} from "./chunk-IEGGIGRQ.js";
import {
  S as S2
} from "./chunk-CGJEHQM2.js";
import {
  p as p3,
  u as u2
} from "./chunk-BSG4F4MT.js";
import "./chunk-PE5CJM6H.js";
import {
  e as e5
} from "./chunk-EPOP3OQ6.js";
import "./chunk-M4ETSXXR.js";
import "./chunk-VGQTAP4F.js";
import {
  a as a2
} from "./chunk-XWTZSPU2.js";
import "./chunk-YSRCOU2A.js";
import "./chunk-CTJKH5VV.js";
import {
  f as f5
} from "./chunk-FKMPOIQR.js";
import "./chunk-FQUIQQYI.js";
import {
  e as e4
} from "./chunk-CTY3WTET.js";
import "./chunk-EZMIPVQL.js";
import "./chunk-7IFMSG3H.js";
import "./chunk-CA3XJ2RX.js";
import "./chunk-JASPUPTW.js";
import "./chunk-HWBFFWYY.js";
import {
  E as E2,
  f as f4,
  l as l2,
  p as p2
} from "./chunk-6SB3EFZU.js";
import {
  E2 as E,
  P as P2,
  p
} from "./chunk-LEFES6LS.js";
import "./chunk-6BCJJDKK.js";
import "./chunk-UANQJYHL.js";
import "./chunk-DNFHDQRJ.js";
import {
  N
} from "./chunk-TO6UIATU.js";
import "./chunk-IB7OUIEK.js";
import "./chunk-WCBCYPOZ.js";
import {
  R as R2,
  v,
  w as w4,
  y as y3
} from "./chunk-3FTSPLRV.js";
import "./chunk-OMRW2J7M.js";
import "./chunk-UXQH3C5A.js";
import "./chunk-6GQQIJM7.js";
import "./chunk-PTIWH4S7.js";
import "./chunk-L3GUCBXG.js";
import "./chunk-67GTVIII.js";
import "./chunk-BEXFYHUM.js";
import "./chunk-K3DEHPDR.js";
import "./chunk-I6RS7YIS.js";
import "./chunk-YGP7UFWC.js";
import {
  $,
  D as D2,
  d as d4,
  g,
  j as j3
} from "./chunk-G4YIJOSP.js";
import "./chunk-PMQ5HDZI.js";
import {
  e as e3
} from "./chunk-EAAEPSBY.js";
import "./chunk-I7LDU4W6.js";
import {
  h as h3
} from "./chunk-NAWP2ZCR.js";
import "./chunk-M5DWZKDJ.js";
import {
  H,
  I,
  b as b2,
  k as k2,
  q as q2,
  w as w3
} from "./chunk-LO5UMUY4.js";
import "./chunk-YKIGDW5O.js";
import "./chunk-YK3UMVCY.js";
import "./chunk-IWO6JXL2.js";
import "./chunk-ECTYMEUP.js";
import {
  h as h2
} from "./chunk-I4SHZ6P5.js";
import "./chunk-QYDOVVH7.js";
import "./chunk-YSXT2SWC.js";
import "./chunk-YH3SFFF7.js";
import "./chunk-JBU54P54.js";
import "./chunk-FMS3CZY7.js";
import "./chunk-3AIILHI5.js";
import "./chunk-QJRGTKPN.js";
import "./chunk-VIH3KDZO.js";
import "./chunk-LA365FE7.js";
import "./chunk-SA77Z3WI.js";
import "./chunk-D56W4LPT.js";
import "./chunk-BKOYOJBG.js";
import "./chunk-VS6AHHIY.js";
import {
  l
} from "./chunk-WZJNHZ6H.js";
import "./chunk-XMYPMIYH.js";
import "./chunk-FQLGRQKL.js";
import "./chunk-DRC4XSYG.js";
import "./chunk-RO3CTAP7.js";
import {
  G,
  R,
  q
} from "./chunk-XGTCDM4C.js";
import "./chunk-VEYMN5N3.js";
import "./chunk-W5ALAOW2.js";
import "./chunk-FHDHOWK5.js";
import "./chunk-Y546C2O5.js";
import "./chunk-LQBHIBXV.js";
import "./chunk-B35SNV2V.js";
import "./chunk-Z2F5OKVA.js";
import "./chunk-UQA6M3KF.js";
import "./chunk-ZLQTPFTL.js";
import "./chunk-QCMUK3QA.js";
import "./chunk-KNMQQRV7.js";
import "./chunk-N5GQOIDP.js";
import "./chunk-NFB6O77E.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-ERD6I7QP.js";
import "./chunk-Z3NX5DTX.js";
import "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import "./chunk-SCHTG6ZQ.js";
import {
  f as f3
} from "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-6PMFOUWZ.js";
import "./chunk-3KPZ3BQR.js";
import "./chunk-5JYVZQZR.js";
import "./chunk-UUG4W2PI.js";
import "./chunk-G7FOE26O.js";
import "./chunk-USOPZ2Q6.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import {
  m2,
  m3
} from "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import {
  S
} from "./chunk-G5EVVNIJ.js";
import {
  y as y2
} from "./chunk-HU5IGOTI.js";
import {
  d as d3
} from "./chunk-C24MEKSO.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-WMUEII2O.js";
import "./chunk-6QNF7OHN.js";
import "./chunk-6AQIVLDN.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import {
  B,
  b,
  k
} from "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import {
  j as j2,
  m2 as m
} from "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import {
  D,
  e2
} from "./chunk-RGCWZ2KZ.js";
import {
  n as n2
} from "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import "./chunk-2SDMYJDE.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import {
  h
} from "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import {
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import {
  f as f2
} from "./chunk-MBGZKT2Z.js";
import {
  j,
  w2
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import {
  f
} from "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  P,
  d as d2,
  w
} from "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  o,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  d
} from "./chunk-JGDJR5EV.js";
import {
  u
} from "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/widgets/AreaMeasurement2D/AreaMeasurement2DTool.js
var re = 1e5;
var se = class extends l2 {
  constructor(e6) {
    super(e6), this._drawActive = false, this._measurementLayer = new h3({ internal: true, listMode: "hide", visible: false }), this._manipulatorLayer = new h3({ internal: true, listMode: "hide", visible: false }), this._snappingLayer = new h3({ internal: true, listMode: "hide", visible: false }), this._updatingHandles = new h2(), this._vertices = [], this.geodesicDistanceThreshold = null, this.measurement = null, this.measurementLabel = null;
  }
  initialize() {
    h("esri/core/t9n/Units").then((e7) => {
      this.messages = e7;
    });
    const e6 = this.view;
    this._draw = new l3({ view: e6 }), e6.map.addMany([this._measurementLayer, this._manipulatorLayer, this._snappingLayer]), e6.focus(), this._snappingManagerResult = a2(e6), this.addHandles([f(async () => {
      this.messages = await h("esri/core/t9n/Units");
    }), d2(() => [this.unit, this.geodesicDistanceThreshold, this.messages], () => {
      this._updateGraphics();
    }, P), d2(() => [this.view.effectiveTheme.accentColor, this.view.effectiveTheme.textColor], () => {
      if (!this._vertices.length)
        return;
      const e7 = this._vertices.map(({ coord: e8 }) => e8);
      for (const { handle: t } of this._vertices)
        t.remove();
      this._vertices = [], this._measurementLayer.removeAll(), this._manipulatorLayer.removeAll(), this._snappingLayer.removeAll(), this.manipulators.removeAll(), this._updateSketch(e7);
    }), d2(() => this.snappingOptions.featureSources, (e7) => {
      for (const t of e7)
        t.layer !== this._measurementLayer && t.layer !== this._manipulatorLayer || (t.enabled = false);
    }, P), this._snappingManagerResult]), N(this);
  }
  destroy() {
    const { map: e6 } = this.view;
    this._draw.view = null, this._draw = u(this._draw), e6.removeMany([this._measurementLayer, this._manipulatorLayer, this._snappingLayer]), this._measurementLayer.removeAll(), this._manipulatorLayer.removeAll(), this._snappingLayer.removeAll(), this._set("measurement", null), this._set("measurementLabel", null), this._measurementLayer = u(this._measurementLayer), this._manipulatorLayer = u(this._manipulatorLayer), this._snappingLayer = u(this._snappingLayer), this._updatingHandles = u(this._updatingHandles), this._resetVertices();
  }
  get _snappingManager() {
    return this._snappingManagerResult.snappingManager;
  }
  get cursor() {
    return this._drawActive ? "crosshair" : null;
  }
  set editable(e6) {
    this._set("editable", e6), e6 || this._draw.reset();
  }
  get snappingOptions() {
    return this._snappingManager.options;
  }
  get updating() {
    return this._updatingHandles.updating || this._snappingManager.updating;
  }
  onActivate() {
    this._drawActive || 0 !== this._vertices.length || this._startSketch();
  }
  onShow() {
    this._measurementLayer.visible = true, this._manipulatorLayer.visible = true, this._snappingLayer.visible = true;
  }
  onHide() {
    this._measurementLayer.visible = false, this._manipulatorLayer.visible = false, this._snappingLayer.visible = false;
  }
  reset() {
    this.manipulators.removeAll(), this._resetVertices(), this._measurementLayer.removeAll(), this._manipulatorLayer.removeAll(), this._set("measurement", null), this._set("measurementLabel", null), this._draw.reset(), this._drawActive = false;
  }
  _getSnappingContext(e6) {
    return new e4({ elevationInfo: { mode: "on-the-ground", offset: 0 }, pointer: e6, editGeometryOperations: new E(new p("point", P2(false, false, this.view.spatialReference)), l.Local), visualizer: new f6(this._snappingLayer) });
  }
  _resetVertices() {
    for (const { handle: e6 } of this._vertices)
      e6.remove();
    this._vertices = [];
  }
  _startSketch() {
    this._drawActive = true;
    const e6 = this._snappingManager, t = this._draw.create("polyline", { mode: "click", snappingManager: e6 });
    t.on(["vertex-add", "vertex-update", "vertex-remove", "cursor-update", "undo", "redo"], (e7) => this._updateSketch(e7.vertices)), t.on("draw-complete", () => this._stopSketch());
  }
  _stopSketch() {
    if (this._vertices.length < 3)
      return this.reset(), void this._startSketch();
    this.manipulators.forEach(({ manipulator: e6 }) => {
      e6.interactive = true;
    }), this._drawActive = false, this.finishToolCreation();
  }
  _updateSketch(e6) {
    const t = this.view.spatialReference;
    if (t && (!oe(t) || b())) {
      for (; this._vertices.length > e6.length; ) {
        const { handle: e7, manipulator: t2 } = this._vertices.pop();
        e7.remove(), this.manipulators.remove(t2);
      }
      for (let r = this._vertices.length; r < e6.length; r++) {
        const [s, i] = e6[r], a3 = new x({ x: s, y: i, spatialReference: t }), n3 = ie(a3, this.view, this._manipulatorLayer);
        this.manipulators.add(n3);
        const o2 = E.fromGeometry(a3, l.Local);
        o2.on("vertex-update", (e7) => {
          const t2 = e7.vertices.at(0);
          t2 && (this._vertices[r].coord = [t2.pos[0], t2.pos[1]], this._updateGraphics());
        });
        const m5 = p2(n3, (e7, t2, r2, s2) => {
          const i2 = this._getSnappingContext(s2), a4 = this._snappingManager, n4 = this._updatingHandles, { snappingStep: m6 } = f5({ snappingContext: i2, snappingManager: a4, updatingHandles: n4 });
          t2.next(E2(this.view)).next((t3) => {
            if ("start" === t3.action) {
              const r3 = new x(t3.mapStart);
              e7.graphic.geometry = r3, o2.trySetGeometry(r3);
            }
            return t3;
          }).next(...m6).next(f4({ operations: o2 })).next(() => {
            e7.graphic.geometry = o2.data.geometry;
          });
        });
        this._vertices.push({ manipulator: n3, coord: [s, i], handle: m5 });
      }
      if (this._vertices.length) {
        const r = this._vertices.length - 1, s = this._vertices[r], [i, a3] = e6[r];
        s.coord[0] === i && s.coord[1] === a3 || (s.coord = [i, a3], s.manipulator.graphic.geometry = new x({ x: i, y: a3, spatialReference: t }));
        const n3 = this._drawActive ? this._vertices[r].manipulator : null;
        this.manipulators.forEach(({ manipulator: e7 }) => {
          e7.interactive = null == n3 || e7 !== n3;
        });
      }
      this._updateGraphics();
    }
  }
  _updateGraphics() {
    if (this._vertices.length < 2)
      return void this._measurementLayer.removeAll();
    const e6 = ae(this._vertices.map(({ coord: e7 }) => e7), this.view.spatialReference, this.geodesicDistanceThreshold);
    if (!e6)
      return;
    const { measurement: a3, fillGeometry: n3, outlineGeometry: o2 } = e6;
    this._set("measurement", a3);
    const m5 = a3 ? me(this.messages, a3, this.unit) : null;
    if (this._set("measurementLabel", m5), !n3 && !o2)
      return;
    let l4, p4, c2;
    const { graphics: u4 } = this._measurementLayer, h4 = 3 === u4.length, { effectiveTheme: d6 } = this.view;
    h4 ? (l4 = u4.at(0), p4 = u4.at(1), c2 = u4.at(2)) : (l4 = new f3({ symbol: new S({ color: R(d6.accentColor, 0.3), outline: null }) }), p4 = new f3({ symbol: new d3({ color: d6.accentColor, width: 2 }) }), c2 = new f3({ symbol: new m3({ color: d6.textColor, font: new m2({ size: 14, family: "sans-serif" }), haloColor: R(G(d6.textColor, q.Low), 0.5), haloSize: 2 }) }), u4.removeAll(), u4.addMany([l4, p4, c2])), l4.geometry = n3, p4.geometry = o2, c2.geometry = n3 == null ? void 0 : n3.centroid, c2.symbol.text = (m5 == null ? void 0 : m5.area) ?? "";
  }
};
function ie(e6, s, i) {
  const a3 = 8, n3 = { style: "circle", color: R(s.effectiveTheme.accentColor, 0.5), outline: { type: "simple-line", width: 0 } }, o2 = new y2({ ...n3, size: a3 }), m5 = new y2({ ...n3, size: 1.5 * a3 }), l4 = new f3({ geometry: e6, symbol: o2 });
  return new S2({ view: s, layer: i, graphic: l4, focusedSymbol: m5 });
}
function ae(e6, t, r) {
  if (2 === e6.length) {
    const s2 = new m({ paths: e6, spatialReference: t });
    let i2;
    if (t == null ? void 0 : t.isGeographic)
      if (w4(t))
        i2 = R2(s2, re);
      else {
        const e7 = B(s2, f2.WGS84), r2 = R2(e7, re);
        i2 = B(r2, t);
      }
    else if (t == null ? void 0 : t.isWebMercator)
      i2 = H(s2, re, "meters");
    else {
      if (b2(s2, "meters") >= pe(r)) {
        const e7 = B(s2, f2.WGS84), r2 = R2(e7, re);
        i2 = B(r2, t);
      } else
        i2 = s2;
    }
    return { measurement: null, fillGeometry: null, outlineGeometry: i2 };
  }
  e6.push(e6[0]);
  const s = new m({ paths: [e6], spatialReference: t }), i = new j2({ rings: [e6], spatialReference: t });
  let a3, n3, o2 = null, m5 = null;
  if (t == null ? void 0 : t.isGeographic)
    if (w4(t)) {
      if (o2 = R2(s, re), m5 = R2(i, re), m5 = w3(m5), !m5)
        return null;
      a3 = v([s], "meters")[0], n3 = y3([m5], "square-meters")[0];
    } else {
      const e7 = f2.WGS84, r2 = B(s, e7), l4 = B(i, e7);
      if (o2 = R2(r2, re), m5 = R2(l4, re), m5 = w3(m5), !m5)
        return null;
      a3 = v([r2], "meters")[0], n3 = y3([m5], "square-meters")[0], o2 = B(o2, t), m5 = B(m5, t);
    }
  else if (t == null ? void 0 : t.isWebMercator) {
    if (o2 = H(s, re, "meters"), m5 = H(i, re, "meters"), m5 = w3(m5), !m5)
      return null;
    a3 = q2(s, "meters"), n3 = k2(m5, "square-meters");
  } else {
    const e7 = b2(s, "meters");
    if (e7 >= pe(r)) {
      const e8 = f2.WGS84, r2 = B(s, e8), l4 = B(i, e8);
      if (o2 = R2(r2, re), m5 = R2(l4, re), m5 = w3(m5), !m5)
        return null;
      a3 = v([r2], "meters")[0], n3 = y3([m5], "square-meters")[0], o2 = B(o2, t), m5 = B(m5, t);
    } else {
      if (o2 = s, m5 = w3(i), !m5)
        return null;
      a3 = e7, n3 = I(m5, "square-meters");
    }
  }
  return { measurement: { geometry: m5, area: n3, perimeter: a3 }, fillGeometry: m5, outlineGeometry: o2 };
}
function ne(e6) {
  return null != e6;
}
function oe(e6) {
  if (!e6)
    return false;
  const { isGeographic: t, isWebMercator: r, isWGS84: s } = e6;
  return t && !s && !w4(e6) || !t && !r;
}
function me(e6, t, r) {
  if (!t || !e6)
    return null;
  const s = { area: null, perimeter: null }, { area: i, perimeter: a3 } = t;
  switch (r) {
    case "metric":
      s.area = j3(e6, i, "square-meters");
      break;
    case "imperial":
      s.area = $(e6, i, "square-meters");
      break;
    default: {
      const t2 = j(i, "square-meters", r);
      s.area = g(e6, t2, r);
      break;
    }
  }
  const n3 = le(r);
  if (n3)
    switch (n3) {
      case "metric":
        s.perimeter = D2(e6, a3, "meters");
        break;
      case "imperial":
        s.perimeter = d4(e6, a3, "meters");
        break;
      default: {
        const t2 = j(a3, "meters", n3);
        s.perimeter = g(e6, t2, n3);
        break;
      }
    }
  else
    s.perimeter = "";
  return s;
}
function le(e6) {
  switch (e6) {
    case "metric":
    case "ares":
    case "hectares":
      return "metric";
    case "imperial":
    case "acres":
      return "imperial";
    case "square-inches":
      return "inches";
    case "square-feet":
      return "feet";
    case "square-yards":
      return "yards";
    case "square-miles":
      return "miles";
    case "square-us-feet":
      return "us-feet";
    case "square-meters":
      return "meters";
    case "square-kilometers":
      return "kilometers";
    case "square-millimeters":
      return "millimeters";
    case "square-centimeters":
      return "centimeters";
    case "square-decimeters":
      return "decimeters";
    default:
      return null;
  }
}
function pe(e6) {
  return e6 ?? 1 / 0;
}
e([y()], se.prototype, "_drawActive", void 0), e([y({ readOnly: true })], se.prototype, "cursor", null), e([y({ value: true })], se.prototype, "editable", null), e([y({ type: Number })], se.prototype, "geodesicDistanceThreshold", void 0), e([y({ readOnly: true })], se.prototype, "measurement", void 0), e([y({ readOnly: true })], se.prototype, "measurementLabel", void 0), e([y()], se.prototype, "messages", void 0), e([y()], se.prototype, "unit", void 0), e([y()], se.prototype, "updating", null), e([y({ constructOnly: true })], se.prototype, "view", void 0), se = e([a("esri.widgets.AreaMeasurement2D.AreaMeasurement2DTool")], se);

// node_modules/@arcgis/core/widgets/AreaMeasurement2D/AreaMeasurement2DViewModel.js
var g2 = class extends p3 {
  constructor(e6) {
    super(e6), this.supportedViewType = "2d", this.unsupportedErrorMessage = "AreaMeasurement2DViewModel is only supported in 2D views.";
  }
  initialize() {
    this.addHandles([d2(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.spatialReference;
    }, () => this.clear()), d2(() => this.unit, (e6) => {
      null != this.tool && (this.tool.unit = e6);
    }, P), d2(() => this.geodesicDistanceThreshold, (e6) => {
      null != this.tool && (this.tool.geodesicDistanceThreshold = e6);
    }, P)]);
  }
  get geodesicDistanceThreshold() {
    return this._get("geodesicDistanceThreshold");
  }
  set geodesicDistanceThreshold(e6) {
    o(n.getLogger(this), "geodesicDistanceThreshold", { version: "4.29", warnOnce: true }), this._set("geodesicDistanceThreshold", e6);
  }
  get measurement() {
    return null != this.tool ? this.tool.measurement : null;
  }
  get measurementLabel() {
    return null != this.tool ? this.tool.measurementLabel : null;
  }
  get state() {
    var _a;
    return this.disabled || null == this.view || !ne(this.view.spatialReference) ? "disabled" : ((_a = this.tool) == null ? void 0 : _a.measurement) ? this.tool.active ? "measuring" : "measured" : "ready";
  }
  get unit() {
    return this._validateUnit(this.defaultUnit);
  }
  set unit(e6) {
    this._overrideIfSome("unit", this._validateUnit(e6));
  }
  get unitOptions() {
    return w2;
  }
  set unitOptions(e6) {
    this._overrideIfSome("unitOptions", this._validateUnits(e6));
  }
  async start() {
    const e6 = this.view;
    null != e6 && (await w(() => e6.ready), oe(e6.spatialReference) && await k()), this.createTool({ interactive: true });
  }
  clear() {
    this.removeTool();
  }
  constructTool() {
    return new se({ view: this.view, visible: this.visible, geodesicDistanceThreshold: this.geodesicDistanceThreshold, unit: this.unit });
  }
  _validateUnit(e6) {
    const { unitOptions: t, defaultUnit: s } = this;
    return null != e6 && t.includes(e6) ? e6 : t.includes(s) ? s : t.length > 0 ? t[0] : s;
  }
  _validateUnits(e6) {
    if (null == e6)
      return [];
    const t = e6.filter((e7) => w2.includes(e7));
    return 0 === t.length ? w2.slice() : t;
  }
};
e([y(e5)], g2.prototype, "defaultUnit", void 0), e([y()], g2.prototype, "geodesicDistanceThreshold", null), e([y({ readOnly: true })], g2.prototype, "measurement", null), e([y({ readOnly: true })], g2.prototype, "measurementLabel", null), e([y({ readOnly: true })], g2.prototype, "state", null), e([y({ type: String })], g2.prototype, "unit", null), e([y({ type: [String] })], g2.prototype, "unitOptions", null), g2 = e([a("esri.widgets.AreaMeasurement2D.AreaMeasurement2DViewModel")], g2);
var f7 = g2;

// node_modules/@arcgis/core/widgets/AreaMeasurement2D.js
var u3 = "esri-area-measurement-2d";
var m4 = { base: u3, newMeasurementButton: `${u3}__clear-button` };
var d5 = class extends D {
  constructor(e6, t) {
    super(e6, t), this.messages = null, this.messagesUnits = null, this.messagesCommon = null, this.viewModel = new f7();
  }
  get active() {
    return this.viewModel.active;
  }
  get icon() {
    return "measure-area";
  }
  set icon(e6) {
    this._overrideIfSome("icon", e6);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e6) {
    this._overrideIfSome("label", e6);
  }
  get unit() {
    return this.viewModel.unit;
  }
  set unit(e6) {
    this.viewModel.unit = e6;
  }
  get unitOptions() {
    return this.viewModel.unitOptions;
  }
  set unitOptions(e6) {
    this.viewModel.unitOptions = e6;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e6) {
    this.viewModel.view = e6;
  }
  get visible() {
    return this.viewModel.visible;
  }
  set visible(e6) {
    this.viewModel.visible = e6;
  }
  render() {
    const { messages: e6, messagesCommon: s, messagesUnits: o2, unit: i, unitOptions: r, viewModel: l4, visible: u4 } = this, { active: d6, measurementLabel: c2, state: v2, supported: g3 } = l4;
    return n2("div", { "aria-label": e6.widgetLabel, class: this.classes(m4.base, e3.widget, e3.panel), key: this, role: "presentation" }, u4 ? n2(u2, { active: d6, measurementItems: [{ key: "area", title: o2 == null ? void 0 : o2.measures.area, value: c2 == null ? void 0 : c2.area }, { key: "perimeter", title: e6.perimeter, value: c2 == null ? void 0 : c2.perimeter }], messages: { ...e6, notApplicable: s.notApplicable }, newMeasurementButtonClass: m4.newMeasurementButton, state: v2, supported: g3, unit: i, unitOptions: r, onNewMeasurementClick: () => {
      d(l4.start());
    }, onUnitChange: (e7) => {
      this.unit = e7;
    } }) : null);
  }
};
e([y({ readOnly: true })], d5.prototype, "active", null), e([y()], d5.prototype, "icon", null), e([y()], d5.prototype, "label", null), e([y(), e2("esri/widgets/AreaMeasurement2D/t9n/AreaMeasurement2D")], d5.prototype, "messages", void 0), e([y(), e2("esri/core/t9n/Units")], d5.prototype, "messagesUnits", void 0), e([y(), e2("esri/t9n/common")], d5.prototype, "messagesCommon", void 0), e([y()], d5.prototype, "uiStrings", void 0), e([y()], d5.prototype, "unit", null), e([y()], d5.prototype, "unitOptions", null), e([y()], d5.prototype, "view", null), e([y({ type: f7 })], d5.prototype, "viewModel", void 0), e([y({ type: Boolean })], d5.prototype, "visible", null), d5 = e([a("esri.widgets.AreaMeasurement2D")], d5);
var c = d5;
export {
  c as default
};
//# sourceMappingURL=AreaMeasurement2D-HKM5HL43.js.map
