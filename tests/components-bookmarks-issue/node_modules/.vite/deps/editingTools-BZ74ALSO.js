import {
  m
} from "./chunk-PGQVBXGK.js";
import {
  f as f2
} from "./chunk-IEGGIGRQ.js";
import {
  S as S3,
  s as s4
} from "./chunk-CGJEHQM2.js";
import {
  r as r3
} from "./chunk-MYIS6GAM.js";
import {
  $,
  F,
  W as W3,
  d as d4
} from "./chunk-XRMNBR5S.js";
import "./chunk-X5YTZ5V2.js";
import "./chunk-XTC23A5V.js";
import "./chunk-RUJWNMKZ.js";
import "./chunk-EIFRMATR.js";
import "./chunk-AVQM6UNY.js";
import "./chunk-ZIKY3AX6.js";
import {
  L,
  h as h4
} from "./chunk-M4ETSXXR.js";
import "./chunk-VGQTAP4F.js";
import "./chunk-OEXKWOWE.js";
import "./chunk-QKSE6KAV.js";
import "./chunk-BOU46AXG.js";
import "./chunk-CTJKH5VV.js";
import "./chunk-FKMPOIQR.js";
import "./chunk-FQUIQQYI.js";
import "./chunk-CTY3WTET.js";
import "./chunk-EZMIPVQL.js";
import "./chunk-7IFMSG3H.js";
import "./chunk-NIRB3OB6.js";
import "./chunk-JASPUPTW.js";
import "./chunk-HWBFFWYY.js";
import "./chunk-B473F3N3.js";
import {
  E as E3,
  l as l2,
  p as p2,
  w
} from "./chunk-6SB3EFZU.js";
import {
  E,
  E2,
  e as e5,
  p
} from "./chunk-LEFES6LS.js";
import "./chunk-UANQJYHL.js";
import "./chunk-TO6UIATU.js";
import "./chunk-IB7OUIEK.js";
import "./chunk-WCBCYPOZ.js";
import "./chunk-3FTSPLRV.js";
import {
  d as d3,
  h as h3
} from "./chunk-OMRW2J7M.js";
import "./chunk-UXQH3C5A.js";
import "./chunk-6GQQIJM7.js";
import {
  W as W2,
  Z
} from "./chunk-RYF27IO3.js";
import {
  n as n3
} from "./chunk-PTIWH4S7.js";
import "./chunk-L3GUCBXG.js";
import "./chunk-67GTVIII.js";
import {
  t
} from "./chunk-K3DEHPDR.js";
import "./chunk-I6RS7YIS.js";
import "./chunk-YGP7UFWC.js";
import "./chunk-7KPPNEIJ.js";
import "./chunk-G4YIJOSP.js";
import "./chunk-PMQ5HDZI.js";
import {
  h as h2
} from "./chunk-NAWP2ZCR.js";
import "./chunk-M5DWZKDJ.js";
import "./chunk-LO5UMUY4.js";
import {
  I
} from "./chunk-KO7QNSNZ.js";
import "./chunk-YKIGDW5O.js";
import "./chunk-YK3UMVCY.js";
import "./chunk-IWO6JXL2.js";
import "./chunk-QD3CP3I4.js";
import "./chunk-ECTYMEUP.js";
import "./chunk-I4SHZ6P5.js";
import "./chunk-QYDOVVH7.js";
import "./chunk-YSXT2SWC.js";
import "./chunk-YH3SFFF7.js";
import "./chunk-JBU54P54.js";
import "./chunk-FMS3CZY7.js";
import "./chunk-CHJMCUAV.js";
import "./chunk-VIKID44H.js";
import "./chunk-3IDXRFXE.js";
import {
  e as e4,
  o,
  v
} from "./chunk-3AIILHI5.js";
import "./chunk-QJRGTKPN.js";
import "./chunk-VIH3KDZO.js";
import "./chunk-LA365FE7.js";
import "./chunk-SA77Z3WI.js";
import "./chunk-D56W4LPT.js";
import "./chunk-BKOYOJBG.js";
import "./chunk-VS6AHHIY.js";
import {
  l
} from "./chunk-WZJNHZ6H.js";
import "./chunk-XMYPMIYH.js";
import "./chunk-FQLGRQKL.js";
import "./chunk-RO3CTAP7.js";
import "./chunk-GKMVTGGM.js";
import {
  G as G2
} from "./chunk-XGTCDM4C.js";
import "./chunk-VEYMN5N3.js";
import "./chunk-W5ALAOW2.js";
import "./chunk-FHDHOWK5.js";
import "./chunk-Y546C2O5.js";
import "./chunk-LQBHIBXV.js";
import "./chunk-B35SNV2V.js";
import "./chunk-Z2F5OKVA.js";
import "./chunk-UQA6M3KF.js";
import {
  n as n2,
  s as s3
} from "./chunk-ZLQTPFTL.js";
import "./chunk-O76UVYOO.js";
import "./chunk-QCMUK3QA.js";
import "./chunk-KNMQQRV7.js";
import "./chunk-N5GQOIDP.js";
import "./chunk-NFB6O77E.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-ERD6I7QP.js";
import "./chunk-Z3NX5DTX.js";
import "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import "./chunk-SCHTG6ZQ.js";
import {
  f
} from "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-6PMFOUWZ.js";
import "./chunk-3KPZ3BQR.js";
import "./chunk-5JYVZQZR.js";
import "./chunk-UUG4W2PI.js";
import "./chunk-G7FOE26O.js";
import "./chunk-USOPZ2Q6.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import {
  d as d2
} from "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import {
  S as S2
} from "./chunk-G5EVVNIJ.js";
import {
  y as y2
} from "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import {
  u as u4
} from "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-WMUEII2O.js";
import "./chunk-6QNF7OHN.js";
import "./chunk-6AQIVLDN.js";
import "./chunk-I5RCKVDX.js";
import "./chunk-6CWL7BCV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import {
  B,
  H
} from "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import {
  j,
  u as u3
} from "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import {
  M,
  h
} from "./chunk-OCF7OAES.js";
import {
  A,
  P as P2,
  e as e3,
  g,
  q,
  r as r2,
  s as s2,
  u as u2,
  z
} from "./chunk-JZBR4X6W.js";
import {
  n
} from "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-CXNX736Z.js";
import "./chunk-RGCWZ2KZ.js";
import "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import "./chunk-2SDMYJDE.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import {
  x2 as x
} from "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import {
  G,
  N,
  W2 as W,
  s2 as s
} from "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  P,
  d
} from "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S,
  r2 as r,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  e as e2
} from "./chunk-JGDJR5EV.js";
import {
  u
} from "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/views/2d/interactive/editingTools/draw/symbols.js
var t2 = new d2({ data: { type: "CIMSymbolReference", symbol: { type: "CIMLineSymbol", symbolLayers: [{ type: "CIMSolidStroke", effects: [{ type: "CIMGeometricEffectDashes", dashTemplate: [3.75, 3.75], lineDashEnding: "HalfPattern", controlPointEnding: "NoConstraint" }], enable: true, capStyle: "Butt", joinStyle: "Round", miterLimit: 10, width: 1.6, color: [255, 255, 255, 255] }, { type: "CIMSolidStroke", enable: true, capStyle: "Butt", joinStyle: "Round", miterLimit: 10, width: 2, color: [0, 0, 0, 255] }] } } });
var l3 = new y2({ style: "circle", size: 6, color: [127, 127, 127, 1], outline: { color: [50, 50, 50], width: 1 } });
var i = new y2({ style: "circle", size: 6, color: [255, 127, 0, 1], outline: { color: [50, 50, 50], width: 1 } });

// node_modules/@arcgis/core/views/2d/interactive/editingTools/draw/DrawGraphicTool2D.js
var E4 = class extends W3 {
  constructor(e6) {
    super(e6), this._visualElementGraphics = { regularVertices: null, activeVertex: null, activeEdge: null }, this.activeFillSymbol = null, this.type = "draw-2d", this._visualElementSymbols = { outline: e6.activeLineSymbol ?? t2, regularVertices: e6.regularVerticesSymbol ?? l3, activeVertex: e6.activeVertexSymbol ?? i, fill: e6.activeFillSymbol }, e6.activeVertexSymbol || this.addHandles(d(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.effectiveTheme) == null ? void 0 : _b.accentColor;
    }, (e7) => {
      var _a;
      if (!e7)
        return;
      const t4 = this._visualElementSymbols.activeVertex.clone().set({ color: e7 });
      (_a = this._visualElementGraphics.activeVertex) == null ? void 0 : _a.set("symbol", t4), this._visualElementSymbols = { ...this._visualElementSymbols, activeVertex: t4 };
    }, P));
  }
  normalizeCtorArgs(e6) {
    const t4 = { ...e6 };
    return delete t4.activeFillSymbol, delete t4.activeVertexSymbol, delete t4.regularVerticesSymbol, delete t4.activeLineSymbol, t4;
  }
  initializeGraphic(e6) {
    return null != this._visualElementSymbols.fill && (e6.symbol = this._visualElementSymbols.fill), this.internalGraphicsLayer.graphics.sort(G3), e2();
  }
  makeDrawOperation() {
    const { defaultZ: e6, hasZ: t4, view: i2 } = this;
    return this._createOrUpdateGraphic(null), new L({ view: i2, manipulators: this.manipulators, geometryType: $(this.geometryType), drawingMode: this.mode, hasZ: t4, defaultZ: e6, snapToSceneEnabled: this.snapToScene, drawSurface: new h4(i2, t4, e6), hasM: false, snappingManager: this.snappingManager, snappingVisualizer: new f2(this.internalGraphicsLayer), graphic: this.graphic, cursor: this.cursor, constraintsEnabled: true });
  }
  onActiveVertexChanged(e6) {
    if ("point" === this.geometryType)
      return e2();
    const [s7, a2] = e6, l4 = new x({ x: s7, y: a2, spatialReference: this.view.spatialReference });
    return null != this._visualElementGraphics.activeVertex ? (this._visualElementGraphics.activeVertex.geometry = l4, e2()) : (this._visualElementGraphics.activeVertex = new f({ geometry: l4, symbol: this._visualElementSymbols.activeVertex, attributes: { displayOrder: 2 } }), this.internalGraphicsLayer.add(this._visualElementGraphics.activeVertex), this.internalGraphicsLayer.graphics.sort(G3), e2(() => {
      null != this._visualElementGraphics.activeVertex && (this.internalGraphicsLayer.remove(this._visualElementGraphics.activeVertex), this._visualElementGraphics.activeVertex = u(this._visualElementGraphics.activeVertex));
    }));
  }
  onCursorEdgeChanged(e6) {
    return null != this._visualElementGraphics.activeEdge ? (this._visualElementGraphics.activeEdge.geometry = e6, e2()) : (this._visualElementGraphics.activeEdge = new f({ geometry: e6, symbol: this._visualElementSymbols.outline, attributes: { displayOrder: 0 } }), this.internalGraphicsLayer.add(this._visualElementGraphics.activeEdge), this.internalGraphicsLayer.graphics.sort(G3), e2(() => {
      null != this._visualElementGraphics.activeEdge && (this.internalGraphicsLayer.remove(this._visualElementGraphics.activeEdge), this._visualElementGraphics.activeEdge = u(this._visualElementGraphics.activeEdge));
    }));
  }
  onRegularVerticesChanged(e6) {
    const s7 = new u3({ points: e6, spatialReference: this.view.spatialReference });
    return null != this._visualElementGraphics.regularVertices ? (this._visualElementGraphics.regularVertices.geometry = s7, e2()) : (this._visualElementGraphics.regularVertices = new f({ geometry: s7, symbol: this._visualElementSymbols.regularVertices, attributes: { displayOrder: 1 } }), this.internalGraphicsLayer.add(this._visualElementGraphics.regularVertices), this.internalGraphicsLayer.graphics.sort(G3), e2(() => {
      null != this._visualElementGraphics.regularVertices && (this.internalGraphicsLayer.remove(this._visualElementGraphics.regularVertices), this._visualElementGraphics.regularVertices = u(this._visualElementGraphics.regularVertices));
    }));
  }
};
function G3(e6, t4) {
  var _a, _b;
  return (((_a = e6.attributes) == null ? void 0 : _a.displayOrder) ?? -1 / 0) - (((_b = t4.attributes) == null ? void 0 : _b.displayOrder) ?? -1 / 0);
}
e([y()], E4.prototype, "activeFillSymbol", void 0), e([y({ readOnly: true })], E4.prototype, "type", void 0), e([y({ constructOnly: true, nonNullable: true })], E4.prototype, "view", void 0), E4 = e([a("esri.views.2d.interactive.editingTools.draw.DrawGraphicTool2D")], E4);

// node_modules/@arcgis/core/views/2d/interactive/editingTools/manipulations/Manipulation.js
var r4 = class {
  get hovering() {
    return this.someManipulator((r6) => r6.hovering);
  }
  get grabbing() {
    return this.someManipulator((r6) => r6.grabbing);
  }
  get dragging() {
    return this.someManipulator((r6) => r6.dragging);
  }
  hasManipulator(r6) {
    return this.someManipulator((t4) => t4 === r6);
  }
  someManipulator(r6) {
    let t4 = false;
    return this.forEachManipulator((a2) => {
      !t4 && r6(a2) && (t4 = true);
    }), t4;
  }
};
var t3;
!function(r6) {
  r6[r6.TRANSLATE_XY = 0] = "TRANSLATE_XY", r6[r6.SCALE = 1] = "SCALE", r6[r6.ROTATE = 2] = "ROTATE";
}(t3 || (t3 = {}));

// node_modules/@arcgis/core/views/2d/interactive/editingTools/manipulations/DragManipulation.js
var s5 = class extends r4 {
  constructor(t4) {
    super(), this._view = t4.view, this._tool = t4.tool, this._graphic = t4.graphic, this._manipulator = this._createManipulator(), this.forEachManipulator((t5) => this._tool.manipulators.add(t5));
  }
  destroy() {
    this.forEachManipulator((t4) => {
      this._tool.manipulators.remove(t4), t4.destroy();
    }), this._tool = null, this._view = null, this._manipulator = null, this._graphic = null;
  }
  forEachManipulator(t4) {
    t4(this._manipulator, t3.TRANSLATE_XY);
  }
  createDragPipeline(t4, i2) {
    let o2 = null, s7 = null, l4 = 0, p3 = 0, c = 0;
    const { offsetX: m2, offsetY: h5, size: u6 } = s4(this._graphic.symbol);
    return p2(this._manipulator, (r6, n6) => {
      n6.next((i3) => {
        if ("start" === i3.action) {
          const i4 = t4();
          o2 = i4.editGeometryOperations, s7 = i4.constraints;
        }
        return i3;
      }).next(E3(this._view)).next((t5) => {
        const { x: r7, y: a2, z: n7 } = t5.mapEnd;
        if (s7 && (r7 + m2 < s7.xmin || a2 + h5 - u6 < s7.ymin || r7 + m2 > s7.xmax || a2 + h5 - u6 > s7.ymax))
          return t5;
        ("start" === t5.action || 0 === l4 && 0 === p3 && 0 === c) && (l4 = t5.mapStart.x, p3 = t5.mapStart.y, c = t5.mapStart.z);
        const _ = r7 - l4, f3 = a2 - p3, v3 = n7 - c;
        l4 = r7, p3 = a2, c = n7;
        const x2 = "start" === t5.action ? E.NEW_STEP : E.ACCUMULATE_STEPS, E6 = o2.move(_, f3, v3, x2);
        return i2(t5, E6), t5;
      });
    });
  }
  _createManipulator() {
    const t4 = this._view, i2 = this._graphic;
    return new S3({ view: t4, graphic: i2, selectable: true, cursor: "move" });
  }
};

// node_modules/@arcgis/core/views/2d/interactive/editingTools/ControlPointsTransformTool.js
var P3 = { up: "ArrowUp", down: "ArrowDown", left: "ArrowLeft", right: "ArrowRight", toggleOpacity: "t", shift: "Shift", primaryKey: t };
var v2 = 1;
var S4 = 10;
var k = new u4("#009AF2");
var b = class extends l2 {
  constructor(t4) {
    super(t4), this._isOpacityToggled = false, this._isModifierActive = false, this._factor = 1, this._initialControlPoints = null, this._graphicsLayer = new h2({ internal: true, listMode: "hide", visible: false, effect: "drop-shadow(0px, 0px, 3px)" }), this._undoStack = [], this._redoStack = [], this._sharedUndoStack = [], this._sharedRedoStack = [], this._highlightHandle = null, this.activeHandle = 0;
  }
  initialize() {
    this._initialize();
  }
  destroy() {
    const { map: t4 } = this.view;
    this._controlPointManipulations.forEach((t5) => t5.destroy()), this._controlPointEditGeometryOperations.forEach((t5) => t5.destroy()), t4.removeMany([this._graphicsLayer]), this._graphicsLayer.removeAll(), this._graphicsLayer = u(this._graphicsLayer), this._georeference = null, this._controlPointGraphics = null, this._controlPointManipulations = null, this._graphicsLayer = null, this._controlPointEditGeometryOperations = null, this._undoStack = null, this._redoStack = null, this._initialControlPoints = null, this._sharedUndoStack = null, this._sharedRedoStack = null;
  }
  get _hasValidSpatialReference() {
    return N(this.view.spatialReference);
  }
  onActivate() {
    this.visible = true;
  }
  onDeactivate() {
    this.visible = false;
  }
  onShow() {
    this._graphicsLayer.visible = true;
  }
  onHide() {
    this._graphicsLayer.visible = false;
  }
  canUndo() {
    const t4 = this._undoStack[this._undoStack.length - 1];
    return null != t4 && this._controlPointEditGeometryOperations[t4].canUndo;
  }
  canRedo() {
    const t4 = this._redoStack[this._redoStack.length - 1];
    return null != t4 && this._controlPointEditGeometryOperations[t4].canRedo;
  }
  undo() {
    if (this._undoStack.length > 0) {
      const t4 = this._undoStack.pop();
      this._controlPointEditGeometryOperations[t4].undo(), this.updateGraphics(), this._redoStack.push(t4);
    }
  }
  redo() {
    if (this._redoStack.length > 0) {
      const t4 = this._redoStack.pop();
      this._controlPointEditGeometryOperations[t4].redo(), this.updateGraphics(), this._undoStack.push(t4);
    }
  }
  refresh() {
    const { mediaElement: t4 } = this;
    if (null == t4.georeference)
      return;
    const e6 = t4.georeference;
    "control-points" === e6.type && null != e6.coords && (this._georeference = e6, this._georeference.controlPoints.forEach(({ mapPoint: t5 }, e7) => {
      const i2 = this._controlPointEditGeometryOperations[e7], o2 = i2.data.components[0].vertices[0];
      i2.setVertexPosition(o2, i2.data.coordinateHelper.pointToVector(t5));
    }), this.updateGraphics());
  }
  reset() {
    this._georeference.controlPoints = this._initialControlPoints, this.refresh(), this._sharedUndoStack.length = 0, this._sharedRedoStack.length = 0;
  }
  updateGraphics() {
    const t4 = this._georeference, e6 = t4.controlPoints, i2 = e6[0].mapPoint.spatialReference, o2 = this._hasValidSpatialReference;
    this._georeference.controlPoints = this._controlPointEditGeometryOperations.map((r6, s7) => {
      const n6 = r6.data.geometry;
      return this._controlPointGraphics[s7].geometry = n6, { mapPoint: B(n6, i2), sourcePoint: o2 ? e6[s7].sourcePoint : t4.toSource(n6) };
    });
  }
  updateActiveHandle(t4) {
    if (this.activeHandle === t4)
      return;
    const e6 = this._controlPointGraphics[this.activeHandle].symbol.clone();
    I(e6, this.view.effectiveTheme.accentColor), this._controlPointGraphics[this.activeHandle].symbol = e6;
    const i2 = this._controlPointGraphics[t4].symbol.clone();
    I(i2, k), this._controlPointGraphics[t4].symbol = i2, this.activeHandle = t4, this.view.surface === document.activeElement && this.highlightActiveHandle();
  }
  async highlightActiveHandle() {
    this.removeHighlightActiveHandle();
    const t4 = await this.view.whenLayerView(this._graphicsLayer);
    this._highlightHandle = t4.highlight(this._controlPointGraphics[this.activeHandle]);
  }
  removeHighlightActiveHandle() {
    this._highlightHandle && this._highlightHandle.remove();
  }
  setSharedUndoStack(t4) {
    this._sharedUndoStack = t4;
  }
  setSharedRedoStack(t4) {
    this._sharedRedoStack = t4;
  }
  async _initialize() {
    const { view: t4, mediaElement: e6 } = this;
    if (null == e6.georeference)
      return;
    const o2 = e6.georeference;
    "control-points" === o2.type && null != o2.coords && (this._georeference = o2, this._initialControlPoints = this._georeference.controlPoints, t4.map.addMany([this._graphicsLayer]), t4.focus(), this.visible = false, this.finishToolCreation(), await this._loadProjectionEngine(), this._controlPointEditGeometryOperations = this._georeference.controlPoints.map(({ mapPoint: e7 }) => E2.fromGeometry(B(e7, t4.spatialReference), l.Local)), this._controlPointGraphics = this._controlPointEditGeometryOperations.map((t5, e7) => new f({ symbol: new d2({ data: { type: "CIMSymbolReference", symbol: { type: "CIMPointSymbol", symbolLayers: [{ type: "CIMVectorMarker", enable: true, colorLocked: true, anchorPoint: { x: 0, y: -15.75 }, anchorPointUnits: "Absolute", dominantSizeAxis3D: "Y", size: 9, billboardMode3D: "FaceNearPlane", frame: { xmin: 0, ymin: 0, xmax: 84.3, ymax: 84.3 }, markerGraphics: [{ type: "CIMMarkerGraphic", geometry: { rings: [[[83.2, 32.5], [84.3, 40.7], [83.8, 48.9], [81.7, 56.9], [78.1, 64.3], [73, 70.9], [66.9, 76.4], [59.7, 80.5], [51.9, 83.2], [43.7, 84.3], [35.4, 83.8], [27.4, 81.7], [20, 78], [13.4, 73], [7.9, 66.8], [3.8, 59.7], [1.1, 51.9], [0, 43.7], [0.5, 35.4], [2.6, 27.4], [6.3, 20], [11.3, 13.4], [17.5, 7.9], [24.7, 3.8], [32.5, 1.1], [39.8, 0.1], [47.1, 0.3], [54.3, 1.8], [61.1, 4.5], [67.4, 8.4], [72.9, 13.3], [77.4, 19.1], [80.9, 25.5], [83.2, 32.5]]] }, symbol: { type: "CIMPolygonSymbol", symbolLayers: [{ type: "CIMSolidFill", enable: true, color: [255, 255, 255, 255] }] } }], scaleSymbolsProportionally: true, respectFrame: true, clippingPath: { type: "CIMClippingPath", clippingType: "Intersect", path: { rings: [[[0, 0], [84.3, 0], [84.3, 84.3], [0, 84.3], [0, 0]]] } }, rotation: 0 }, { type: "CIMVectorMarker", enable: true, anchorPoint: { x: 0, y: -11.25 }, anchorPointUnits: "Absolute", dominantSizeAxis3D: "Y", size: 22.5, billboardMode3D: "FaceNearPlane", frame: { xmin: 0, ymin: 0, xmax: 197.7, ymax: 294.7 }, markerGraphics: [{ type: "CIMMarkerGraphic", geometry: { rings: [[[98.9, 0], [119.4, 23.2], [139.4, 49.3], [156.8, 75.2], [171.2, 100.8], [182.4, 125.3], [190.6, 148.8], [195.7, 171.4], [197.7, 192.9], [197.7, 195.8], [197.7, 200.3], [197.6, 202.5], [197.5, 204.8], [197.3, 207.1], [197, 209.4], [196.7, 211.7], [196.4, 214.1], [196, 216.4], [195.5, 218.7], [195, 221.1], [194.4, 223.4], [193.7, 225.8], [193, 228.1], [192.2, 230.5], [191.4, 232.8], [190.5, 235.1], [189.5, 237.5], [188.5, 239.7], [187.4, 242], [186.2, 244.3], [185, 246.5], [183.7, 248.7], [182.4, 250.9], [181, 253.1], [179.5, 255.2], [178, 257.3], [176.4, 259.4], [174.7, 261.4], [173.1, 263.3], [171.3, 265.3], [169.5, 267.2], [167.7, 269], [165.8, 270.8], [163.9, 272.5], [161.9, 274.2], [159.9, 275.8], [157.8, 277.4], [155.7, 278.9], [153.6, 280.4], [151.4, 281.7], [149.2, 283.1], [147, 284.4], [144.8, 285.6], [142.5, 286.7], [140.3, 287.8], [138, 288.8], [135.7, 289.8], [133.4, 290.7], [131, 291.5], [128.7, 292.3], [126.4, 293], [124, 293.6], [121.7, 294.2], [119.4, 294.7], [117, 295.2], [114.7, 295.6], [112.4, 296], [110.1, 296.3], [107.8, 296.5], [105.5, 296.7], [103.3, 296.8], [101.1, 296.9], [98.8, 296.9], [83.1, 295.7], [67.8, 292], [53.3, 285.9], [39.9, 277.5], [28.1, 267.2], [18, 255.1], [10, 241.5], [4.2, 226.9], [0.9, 211.5], [0, 195.8], [0.1, 192.9], [2.1, 171.4], [7.2, 148.8], [15.4, 125.3], [26.6, 100.8], [41, 75.2], [58.4, 49.3], [78.4, 23.2], [98.9, 0]]] }, symbol: { type: "CIMPolygonSymbol", symbolLayers: [{ type: "CIMSolidFill", enable: true, color: e7 === this.activeHandle ? k.toArray() : this.view.effectiveTheme.accentColor.toArray() }] } }], scaleSymbolsProportionally: true, respectFrame: true, clippingPath: { type: "CIMClippingPath", clippingType: "Intersect", path: { rings: [[[0, 0], [197.7, 0], [197.7, 294.7], [0, 294.7], [0, 0]]] } }, rotation: 0 }], haloSize: 1, scaleX: 1, angleAlignment: "Display", angle: 0 } } }), geometry: t5.data.geometry })), this._graphicsLayer.graphics.addMany([...this._controlPointGraphics]), this._controlPointManipulations = this._controlPointGraphics.map((e7) => new s5({ tool: this, view: t4, graphic: e7 })), this.addHandles([...this._controlPointManipulations.map((t5, e7) => t5.createDragPipeline(this._getInfo.bind(this, e7), (t6, i2) => {
      "start" === t6.action && (this._undoStack.push(e7), this._redoStack = [], this._sharedUndoStack.push({ tool: this, operation: i2 }), this._sharedRedoStack.length = 0), this.updateGraphics();
    })), d(() => this.view.scale, () => this.active ? this.updateGraphics() : null)]), this._controlPointManipulations.forEach((t5, e7) => {
      const i2 = (t6) => {
        this.addHandles([t6.events.on(["click", "grab-changed"], (t7) => this.updateActiveHandle(e7))]);
      };
      t5.forEachManipulator(i2);
    }), this.addHandles([t4.on("key-down", (i2) => {
      t4.activeTool === this && (i2.key !== P3.shift || i2.repeat || (this._isModifierActive = true, i2.stopPropagation()), i2.key !== P3.toggleOpacity || i2.repeat || (e6.opacity *= this._isOpacityToggled ? 2 : 0.5, this._isOpacityToggled = !this._isOpacityToggled, i2.stopPropagation()), i2.key !== P3.primaryKey || i2.repeat || (this._factor = S4, i2.stopPropagation()), this._isModifierActive && (i2.key === P3.up && (this._move(0, this._factor), i2.stopPropagation()), i2.key === P3.down && (this._move(0, -this._factor), i2.stopPropagation()), i2.key === P3.left && (this._move(-this._factor, 0), i2.stopPropagation()), i2.key === P3.right && (this._move(this._factor, 0), i2.stopPropagation())));
    }), t4.on("key-up", (e7) => {
      t4.activeTool === this && (e7.key === P3.shift && (this._isModifierActive = false, e7.stopPropagation()), e7.key === P3.primaryKey && (this._factor = v2, e7.stopPropagation()));
    })]));
  }
  async _loadProjectionEngine() {
    const t4 = this._georeference.controlPoints[0].mapPoint;
    return H(t4.spatialReference, this.view.spatialReference);
  }
  _getInfo(t4) {
    return { editGeometryOperations: this._controlPointEditGeometryOperations[t4], constraints: this._hasValidSpatialReference ? null : { xmin: 0, ymin: 0, xmax: this._georeference.width, ymax: this._georeference.height } };
  }
  _move(t4, e6) {
    const i2 = this._controlPointEditGeometryOperations[this.activeHandle].move(t4 * this.view.resolution, e6 * this.view.resolution, 0, E.NEW_STEP);
    this._sharedUndoStack.push({ tool: this, operation: i2 }), this._sharedRedoStack.length = 0, this.updateGraphics();
  }
};
e([y()], b.prototype, "_hasValidSpatialReference", null), e([y()], b.prototype, "activeHandle", void 0), e([y({ constructOnly: true, nonNullable: true })], b.prototype, "mediaElement", void 0), e([y({ constructOnly: true })], b.prototype, "view", void 0), b = e([a("esri.views.2d.interactive.editingTools.ControlPointsTransformTool")], b);

// node_modules/@arcgis/core/views/2d/interactive/editingTools/manipulations/utils.js
function n4(t4, e6) {
  "start" === t4.action ? e6.cursor = "grabbing" : e6.cursor = "grab";
}
var s6 = class {
  constructor() {
    this._lastDragEvent = null, this.next = new w(), this._enabled = false;
  }
  get enabled() {
    return this._enabled;
  }
  set enabled(t4) {
    if (this._enabled !== t4 && null != this._lastDragEvent) {
      const e6 = { ...this._lastDragEvent, action: "update" };
      t4 && this._adjustScaleFactors(e6), this.next.execute(e6);
    }
    this._enabled = t4;
  }
  createDragEventPipelineStep() {
    return this._lastDragEvent = null, (t4) => (this._lastDragEvent = "end" !== t4.action ? { ...t4 } : null, this._enabled && this._adjustScaleFactors(t4), t4);
  }
  _adjustScaleFactors(t4) {
    const e6 = 0 !== t4.direction[0] && 0 !== t4.direction[1] ? Math.max(Math.abs(t4.factor1), Math.abs(t4.factor2)) : 0 === t4.direction[0] ? Math.abs(t4.factor2) : Math.abs(t4.factor1);
    t4.factor1 = t4.factor1 < 0 ? -e6 : e6, t4.factor2 = t4.factor2 < 0 ? -e6 : e6;
  }
};
var r5 = class {
  constructor() {
    this._lastDragEvent = null, this.next = new w(), this._enabled = false;
  }
  get enabled() {
    return this._enabled;
  }
  set enabled(t4) {
    if (this._enabled !== t4 && null != this._lastDragEvent) {
      const e6 = { ...this._lastDragEvent, action: "update" };
      t4 && this._adjustRotateAngle(e6), this.next.execute(e6);
    }
    this._enabled = t4;
  }
  createDragEventPipelineStep() {
    return this._lastDragEvent = null, (t4) => (this._lastDragEvent = "end" !== t4.action ? { ...t4 } : null, this._enabled && this._adjustRotateAngle(t4), t4);
  }
  _adjustRotateAngle(a2) {
    const n6 = M(a2.rotateAngle);
    a2.rotateAngle = h(5 * Math.round(n6 / 5));
  }
};

// node_modules/@arcgis/core/views/2d/interactive/editingTools/manipulations/RotateManipulation.js
var u5 = class extends r4 {
  constructor(i2) {
    super(), this._handles = new r(), this._originCache = n(), this._view = i2.view, this._tool = i2.tool, this._graphic = i2.graphic, this._snapRotation = i2.snapRotation, this._manipulator = this._createManipulator(), this._handles.add([this._manipulator.events.on("grab-changed", (t4) => n4(t4, this._manipulator))]), this.forEachManipulator((t4) => this._tool.manipulators.add(t4));
  }
  destroy() {
    this._handles.destroy(), this.forEachManipulator((t4) => {
      this._tool.manipulators.remove(t4), t4.destroy();
    }), this._tool = null, this._view = null, this._manipulator = null, this._snapRotation = null, this._graphic = null, this._handles = null, this._originCache = null;
  }
  forEachManipulator(t4) {
    t4(this._manipulator, t3.ROTATE);
  }
  createDragPipeline(t4, r6) {
    let e6 = null, a2 = null;
    return p2(this._manipulator, (o2, s7) => {
      s7.next((i2) => {
        if ("start" === i2.action) {
          o2.cursor = "grabbing";
          const i3 = t4();
          e6 = i3.plane, a2 = i3.editGeometryOperations;
        }
        return i2;
      }).next(E3(this._view)).next((t5) => ({ ...t5, rotateAngle: m(t5.mapStart, t5.mapEnd, { x: e6.origin[0], y: e6.origin[1] }, true) })).next(this._snapRotation.createDragEventPipelineStep(), this._snapRotation.next).next((t5) => {
        const o3 = r2(this._originCache, e6.origin), n6 = "start" === t5.action ? E.NEW_STEP : E.ACCUMULATE_STEPS, s8 = a2.rotate(o3, t5.rotateAngle, n6, e5.REPLACE);
        return d4(s8, e6), r6(t5, s8), t5;
      }).next((t5) => ("end" === t5.action && (o2.cursor = "grab"), t5));
    });
  }
  _createManipulator() {
    const t4 = this._view, i2 = this._graphic;
    return new S3({ view: t4, graphic: i2, selectable: true, cursor: "grab" });
  }
};

// node_modules/@arcgis/core/views/2d/interactive/editingTools/manipulations/ScaleManipulation.js
var E5 = 10;
var S5 = 1e-6;
var y3 = 0.3;
function j2(t4) {
  const i2 = s2(t4.basis1), e6 = s2(t4.basis2);
  return y3 * Math.min(i2, e6);
}
var w2 = class extends r4 {
  constructor(i2) {
    super(), this._handles = new r(), this._planeStart = W2(), this._displayPlaneStart = W2(), this._originCache = n(), this._axisCache = n2(), this._renderStartCache = n(), this._renderEndCache = n(), this._resizeOriginCache = n(), this._view = i2.view, this._tool = i2.tool, this._graphic = i2.graphic, this._direction = i2.direction, this._preserveAspectRatio = i2.preserveAspectRatio, this._manipulator = this._createManipulator(), this._handles.add([this._manipulator.events.on("grab-changed", (t4) => n4(t4, this._manipulator))]), this.forEachManipulator((t4) => this._tool.manipulators.add(t4));
  }
  destroy() {
    this._handles.destroy(), this.forEachManipulator((t4) => {
      this._tool.manipulators.remove(t4), t4.destroy();
    }), this._tool = null, this._view = null, this._graphic = null, this._manipulator = null, this._direction = null, this._handles = null, this._planeStart = null, this._displayPlaneStart = null, this._originCache = null, this._axisCache = null, this._renderStartCache = null, this._renderEndCache = null, this._resizeOriginCache = null, this._preserveAspectRatio = null;
  }
  forEachManipulator(t4) {
    t4(this._manipulator, t3.SCALE);
  }
  createDragPipeline(t4, r6) {
    let c = null, h5 = null, _ = null, m2 = 0, d6 = null, g2 = null;
    const y4 = this._planeStart, w3 = this._displayPlaneStart, P4 = this._direction;
    return p2(this._manipulator, (f3, M2) => {
      M2.next((i2) => {
        if ("start" === i2.action) {
          f3.cursor = "grabbing";
          const i3 = t4();
          c = i3.plane, h5 = i3.displayPlane, _ = i3.editGeometryOperations, m2 = E5 * this._view.resolution, Z(c, y4), Z(h5, w3);
          const e6 = s(_.data.spatialReference);
          d6 = e6 ? e6.valid[1] - e6.valid[0] - 3 * E5 * this._view.resolution : null;
        }
        return i2;
      }).next(E3(this._view)).next((t5) => {
        const i2 = r2(this._renderStartCache, [t5.mapStart.x, t5.mapStart.y, 0]), e6 = r2(this._renderEndCache, [t5.mapEnd.x, t5.mapEnd.y, 0]), r7 = r2(this._resizeOriginCache, w3.origin);
        q(r7, r7, w3.basis1, -P4[0]), q(r7, r7, w3.basis2, -P4[1]), e3(e6, e6, r7), e3(i2, i2, r7);
        const c2 = 0 !== P4[0] && 0 !== P4[1], p3 = j2(w3), u6 = j2(h5) / p3, _2 = (t6, r8) => {
          if (0 === t6)
            return 1;
          let s7 = s2(r8), n6 = 0.5 * t6 * P2(r8, e6) / s7;
          const o2 = n6 < 0 ? -1 : 1;
          if (c2) {
            n6 += (s7 - 0.5 * t6 * P2(r8, i2) / s7) * o2 * u6;
          }
          const h6 = s7 < 1.5 * m2 ? 1 : S5;
          return s7 = Math.max(s7 - m2, S5), o2 > 0 && (n6 -= E5 * this._view.resolution), o2 * Math.max(o2 * (n6 / s7), h6);
        }, d7 = _2(P4[0], w3.basis1), f4 = _2(P4[1], w3.basis2);
        return { ...t5, direction: P4, factor1: d7, factor2: f4 };
      }).next(this._preserveAspectRatio.createDragEventPipelineStep(), this._preserveAspectRatio.next).next((t5) => {
        const a2 = r2(this._originCache, y4.origin);
        q(a2, a2, y4.basis1, -P4[0]), q(a2, a2, y4.basis2, -P4[1]);
        const o2 = o(this._axisCache, y4.basis1[0], y4.basis1[1]);
        v(o2, o2);
        const l4 = _.data.allVertices, h6 = "start" === t5.action ? E.NEW_STEP : E.ACCUMULATE_STEPS, u6 = _.scaleVertices(l4, a2, o2, t5.factor1, t5.factor2, h6, e5.REPLACE);
        return d6 && d6 < _.data.geometry.extent.width && g2 ? _.updateVertices(l4, g2) : (Z(y4, c), d4(u6, c), g2 = u6.operation, r6(t5, u6)), t5;
      }).next((t5) => ("end" === t5.action && (f3.cursor = "grab"), t5));
    });
  }
  _createManipulator() {
    return new S3({ view: this._view, graphic: this._graphic, selectable: true, cursor: "grab" });
  }
};

// node_modules/@arcgis/core/views/2d/interactive/editingTools/TransformTool.js
var K = 80;
var J = 10;
var Q = 30;
var X = [[1, 1], [1, -1], [-1, -1], [-1, 1], [1, 0], [0, -1], [-1, 0], [0, 1]];
var Y = 1;
var Z2 = 10;
var $2 = class extends l2 {
  constructor(e6) {
    super(e6), this._initialControlPoints = null, this._initialGeometry = null, this._graphic = null, this._planeCache = W2(), this._displayPlaneCache = W2(), this._mainAxisCache = n2(), this._rotationHandleCache = n(), this._cornerA = n(), this._cornerB = n(), this._cornerC = n(), this._cornerD = n(), this._avgAB = n(), this._avgBC = n(), this._avgCD = n(), this._avgDA = n(), this._preserveAspectRatio = new s6(), this._snapRotation = new r5(), this._graphicsLayer = new h2({ internal: true, listMode: "hide", visible: false }), this._sharedUndoStack = [], this._sharedRedoStack = [], this._isOpacityToggled = false, this._factor = Y, this.preserveAspectRatio = null, this.snapRotation = null;
  }
  initialize() {
    this._initialize();
  }
  destroy() {
    const { map: e6 } = this.view;
    this._dragManipulation.destroy(), this._rotateManipulation.destroy(), this._scaleManipulations.forEach((e7) => e7.destroy()), this._editGeometryOperations.destroy(), e6.removeMany([this._graphicsLayer]), this._graphicsLayer.removeAll(), this._graphicsLayer = u(this._graphicsLayer), this._initialControlPoints = null, this._initialGeometry = null, this._graphic = null, this._preserveAspectRatio = null, this._snapRotation = null, this._planeCache = null, this._displayPlaneCache = null, this._rotationHandleCache = null, this._mainAxisCache = null, this._cornerA = null, this._cornerB = null, this._cornerC = null, this._cornerD = null, this._avgAB = null, this._avgBC = null, this._avgCD = null, this._avgDA = null, this._sharedUndoStack = null, this._sharedRedoStack = null;
  }
  get _plane() {
    const e6 = this._graphic.geometry;
    if (null == e6)
      return null;
    const t4 = this._editGeometryOperations.data, i2 = t4.components[0].edges[0], s7 = e4(this._mainAxisCache, i2.leftVertex.pos, i2.rightVertex.pos);
    v(s7, s7);
    let o2 = K * this.view.resolution;
    const a2 = this.view.spatialReference;
    return G(a2, e6.spatialReference) && (o2 *= W(a2) / W(e6.spatialReference)), F(s7, t4, o2, this._planeCache);
  }
  get _displayPlane() {
    const e6 = this._plane;
    if (!e6)
      return null;
    const t4 = this._displayPlaneCache;
    Z(e6, t4);
    const i2 = J * this.view.resolution;
    return g(t4.basis1, t4.basis1, 1 + i2 / s2(t4.basis1)), g(t4.basis2, t4.basis2, 1 + i2 / s2(t4.basis2)), t4;
  }
  get _backgroundGraphicGeometry() {
    const e6 = this._displayPlane;
    if (!e6)
      return null;
    const t4 = this.view.spatialReference;
    return this._updateDisplayPlaneConrers(e6), new j({ spatialReference: t4, rings: [[this._cornerA, this._cornerB, this._cornerC, this._cornerD, this._cornerA]] });
  }
  get _rotateGraphicGeometry() {
    const e6 = this._plane;
    if (!e6)
      return null;
    const t4 = this._rotationHandleCache;
    return z(t4, e6.basis1), g(t4, t4, Q * this.view.resolution), u2(t4, t4, e6.origin), u2(t4, t4, e6.basis1), new x({ x: t4[0], y: t4[1], spatialReference: this.view.spatialReference });
  }
  get _scaleGraphicGeometries() {
    const e6 = this._displayPlane;
    if (!e6)
      return [];
    const t4 = this.view.spatialReference;
    this._updateDisplayPlaneConrers(e6);
    const { _cornerA: i2, _cornerB: s7, _cornerC: o2, _cornerD: r6 } = this, a2 = A(this._avgAB, i2, s7, 0.5), n6 = A(this._avgBC, s7, o2, 0.5), c = A(this._avgCD, o2, r6, 0.5), h5 = A(this._avgDA, r6, i2, 0.5);
    return [new x({ x: i2[0], y: i2[1], spatialReference: t4 }), new x({ x: s7[0], y: s7[1], spatialReference: t4 }), new x({ x: o2[0], y: o2[1], spatialReference: t4 }), new x({ x: r6[0], y: r6[1], spatialReference: t4 }), new x({ x: a2[0], y: a2[1], spatialReference: t4 }), new x({ x: n6[0], y: n6[1], spatialReference: t4 }), new x({ x: c[0], y: c[1], spatialReference: t4 }), new x({ x: h5[0], y: h5[1], spatialReference: t4 })];
  }
  onActivate() {
    this.visible = true;
  }
  onDeactivate() {
    this.visible = false;
  }
  onShow() {
    this._graphicsLayer.visible = true;
  }
  onHide() {
    this._graphicsLayer.visible = false;
  }
  canUndo() {
    return this._editGeometryOperations.canUndo;
  }
  canRedo() {
    return this._editGeometryOperations.canRedo;
  }
  undo() {
    this._editGeometryOperations.undo(), this.updateGraphics();
  }
  redo() {
    this._editGeometryOperations.redo(), this.updateGraphics();
  }
  refresh() {
    const { view: e6, target: t4 } = this, i2 = "georeference" in t4 ? t4.georeference.coords : t4.geometry, s7 = this._editGeometryOperations, o2 = s7.data.components[0].vertices, r6 = p.fromGeometry(B(i2, e6.spatialReference), l.Local).components[0].vertices;
    o2.forEach((e7, t5) => {
      s7.setVertexPosition(e7, r6[t5].pos);
    }), this.updateGraphics();
  }
  reset() {
    const { target: e6 } = this;
    if ("georeference" in e6) {
      const t4 = e6.georeference;
      "control-points" === t4.type && (t4.controlPoints = this._initialControlPoints);
    } else
      e6.geometry = this._initialGeometry;
    this.refresh(), this._sharedUndoStack.length = 0, this._sharedRedoStack.length = 0;
  }
  updateGraphics() {
    const e6 = this._editGeometryOperations.data.geometry;
    if ("georeference" in this.target) {
      this.target.georeference.coords = e6;
    }
    this._graphic.geometry = e6, this._backgroundGraphic.geometry = this._backgroundGraphicGeometry, this._rotateGraphic.geometry = this._rotateGraphicGeometry, this._scaleGraphicGeometries.forEach((e7, t4) => {
      this._scaleGraphics[t4].geometry = e7;
    });
  }
  setSharedUndoStack(e6) {
    this._sharedUndoStack = e6;
  }
  setSharedRedoStack(e6) {
    this._sharedRedoStack = e6;
  }
  async _initialize() {
    const { view: e6, target: s7 } = this;
    if ("georeference" in s7) {
      const e7 = s7.georeference;
      this._graphic = new f({ geometry: e7.coords }), this._initialControlPoints = "control-points" === e7.type ? e7.controlPoints : null;
    } else
      this._graphic = s7, this._initialGeometry = s7.geometry;
    e6.map.addMany([this._graphicsLayer]), e6.focus(), this.visible = false, this.finishToolCreation(), await this._loadProjectionEngine(), this._editGeometryOperations = E2.fromGeometry(B(this._graphic.geometry, e6.spatialReference), l.Local), this._backgroundGraphic = new f({ symbol: new S2({ color: "transparent", outline: { type: "simple-line", color: e6.effectiveTheme.accentColor, width: 2 } }), geometry: this._backgroundGraphicGeometry }), this._rotateGraphic = new f({ symbol: new y2({ color: G2(e6.effectiveTheme.accentColor), outline: { type: "simple-line", color: e6.effectiveTheme.accentColor, width: 1 } }), geometry: this._rotateGraphicGeometry }), this._scaleGraphics = this._scaleGraphicGeometries.map((s8) => new f({ symbol: new y2({ size: 6, style: "square", color: G2(e6.effectiveTheme.accentColor), outline: { type: "simple-line", color: e6.effectiveTheme.accentColor, width: 1 } }), geometry: s8 })), this._graphicsLayer.graphics.addMany([this._backgroundGraphic, this._rotateGraphic, ...this._scaleGraphics]), this._dragManipulation = new s5({ tool: this, view: e6, graphic: this._graphic }), this._rotateManipulation = new u5({ tool: this, view: e6, graphic: this._rotateGraphic, snapRotation: this._snapRotation }), this._scaleManipulations = this._scaleGraphics.map((t4, i2) => new w2({ tool: this, view: e6, graphic: t4, direction: X[i2], preserveAspectRatio: this._preserveAspectRatio })), this.addHandles([this._dragManipulation.createDragPipeline(this._getInfo.bind(this), this._updateGraphics.bind(this)), this._rotateManipulation.createDragPipeline(this._getInfo.bind(this), this._updateGraphics.bind(this)), ...this._scaleManipulations.map((e7) => e7.createDragPipeline(this._getInfo.bind(this), this._updateGraphics.bind(this))), d(() => this.view.scale, () => this.active ? this.updateGraphics() : null), e6.on("click", async (t4) => {
      if (null != e6.activeTool && e6.activeTool !== this)
        return;
      const i2 = n3(t4), o2 = [];
      e6.map.allLayers.forEach((e7) => {
        "vector-tile" !== e7.type && "imagery" !== e7.type || o2.push(e7);
      });
      const r7 = await this.view.hitTest(i2, { exclude: o2 }), a3 = r7.results;
      if (0 === a3.length)
        e6.activeTool = null;
      else {
        const t5 = r3(r7.results), i3 = "georeference" in s7, o3 = a3.map((e7) => "media" === e7.type ? e7.element : null).filter(Boolean), n6 = new Set([...this._graphicsLayer.graphics, i3 ? null : s7].filter(Boolean));
        i3 && o3.includes(s7) || null != t5 && n6.has(t5.graphic) ? null == e6.activeTool && (e6.activeTool = this) : e6.activeTool = null;
      }
    })]);
    const r6 = (e7) => {
      this.addHandles(e7.events.on("grab-changed", (e8) => {
        "georeference" in s7 && ("start" === e8.action ? s7.opacity *= 0.5 : "end" === e8.action && (s7.opacity *= 2));
      }));
    };
    this._dragManipulation.forEachManipulator(r6), this._rotateManipulation.forEachManipulator(r6), this._scaleManipulations.forEach((e7) => e7.forEachManipulator(r6));
    const a2 = new h3();
    a2.addToggle(d3.preserveAspectRatio, () => {
      null == this.preserveAspectRatio && (this._preserveAspectRatio.enabled = !this._preserveAspectRatio.enabled);
    }), a2.addToggle(d3.rotateIncrements, () => {
      null == this.preserveAspectRatio && (this._preserveAspectRatio.enabled = !this._preserveAspectRatio.enabled);
    }), a2.add(d3.toggleOpacity, () => {
      "georeference" in s7 && (s7.opacity *= this._isOpacityToggled ? 2 : 0.5, this._isOpacityToggled = !this._isOpacityToggled);
    }), a2.addToggle(d3.factorModifier, (e7) => this._factor = "key-down" === e7.type ? Z2 : Y), a2.add(d3.scaleUp, () => this._scale(this._factor)), a2.add(d3.scaleDown, () => this._scale(-this._factor)), a2.add(d3.moveUp, () => this._move(0, this._factor)), a2.add(d3.moveDown, () => this._move(0, -this._factor)), a2.add(d3.moveLeft, () => this._move(-this._factor, 0)), a2.add(d3.moveRight, () => this._move(this._factor, 0)), this.addHandles([e6.on("key-down", (t4) => {
      e6.activeTool === this && a2.dispatch(e6.inputManager, t4);
    }), e6.on("key-up", (t4) => {
      e6.activeTool === this && a2.dispatch(e6.inputManager, t4);
    })]);
  }
  async _loadProjectionEngine() {
    const e6 = this._graphic.geometry;
    return H(e6.spatialReference, this.view.spatialReference);
  }
  _updateDisplayPlaneConrers(e6) {
    const { basis1: t4, basis2: i2, origin: s7 } = e6, o2 = this._cornerA;
    u2(o2, s7, t4), u2(o2, o2, i2);
    const r6 = this._cornerB;
    u2(r6, s7, t4), e3(r6, r6, i2);
    const a2 = this._cornerC;
    e3(a2, s7, t4), e3(a2, a2, i2);
    const n6 = this._cornerD;
    e3(n6, s7, t4), u2(n6, n6, i2);
  }
  _getInfo() {
    return { editGeometryOperations: this._editGeometryOperations, plane: this._plane, displayPlane: this._displayPlane };
  }
  _updateGraphics(e6, t4) {
    "start" === e6.action && (this._sharedUndoStack.push({ tool: this, operation: t4 }), this._sharedRedoStack.length = 0), this.updateGraphics();
  }
  _scale(e6) {
    var _a;
    const t4 = this._editGeometryOperations, i2 = (_a = t4.data.geometry.extent) == null ? void 0 : _a.width, s7 = (i2 + e6 * this.view.resolution) / i2, o2 = t4.scale(this._plane.origin, s3, s7, s7, E.NEW_STEP, e5.REPLACE);
    this._sharedUndoStack.push({ tool: this, operation: o2 }), this._sharedRedoStack.length = 0, this.updateGraphics();
  }
  _move(e6, t4) {
    const i2 = this._editGeometryOperations.move(e6 * this.view.resolution, t4 * this.view.resolution, 0, E.NEW_STEP);
    this._sharedUndoStack.push({ tool: this, operation: i2 }), this._sharedRedoStack.length = 0, this.updateGraphics();
  }
};
e([y()], $2.prototype, "_plane", null), e([y()], $2.prototype, "_backgroundGraphicGeometry", null), e([y()], $2.prototype, "_rotateGraphicGeometry", null), e([y()], $2.prototype, "_scaleGraphicGeometries", null), e([y()], $2.prototype, "preserveAspectRatio", void 0), e([y()], $2.prototype, "snapRotation", void 0), e([y({ constructOnly: true, nonNullable: true })], $2.prototype, "target", void 0), e([y({ constructOnly: true })], $2.prototype, "view", void 0), $2 = e([a("esri.views.2d.interactive.editingTools.TransformTool")], $2);

// node_modules/@arcgis/core/views/2d/interactive/editingTools/MediaTransformToolsWrapper.js
var n5 = { redo: "r", undo: "z" };
var d5 = class extends S {
  constructor(o2) {
    super(o2), this._transformTool = null, this._controlPointsTransformTool = null, this._advancedModeTransformTool = null, this._activeTool = null, this._sharedUndoStack = [], this._sharedRedoStack = [], this._originalOpacity = null, this.activeHandle = 0;
  }
  initialize() {
    const { view: o2, mediaElement: t4, preserveAspectRatio: s7, snapRotation: i2, advancedMode: d6 } = this;
    this._originalOpacity = t4.opacity, this._transformTool = new $2({ target: t4, view: o2, preserveAspectRatio: s7, snapRotation: i2 }), this._controlPointsTransformTool = new b({ mediaElement: t4, view: o2 }), this._advancedModeTransformTool = new b({ mediaElement: d6.mediaElement, view: d6.view }), this._transformTool.setSharedUndoStack(this._sharedUndoStack), this._transformTool.setSharedRedoStack(this._sharedRedoStack), this._controlPointsTransformTool.setSharedUndoStack(this._sharedUndoStack), this._controlPointsTransformTool.setSharedRedoStack(this._sharedRedoStack), this._advancedModeTransformTool.setSharedUndoStack(this._sharedUndoStack), this._advancedModeTransformTool.setSharedRedoStack(this._sharedRedoStack);
    const l4 = t4.georeference, c = d6.mediaElement.georeference;
    d6.view.tools.addMany([this._advancedModeTransformTool]), "controlPoints" in c && "controlPoints" in l4 && this.addHandles([d6.view.on("key-down", (o3) => {
      o3.key === n5.undo && this.canUndo() && (this.undo(), o3.stopPropagation()), o3.key === n5.redo && this.canRedo() && (this.redo(), o3.stopPropagation());
    }), d6.view.on("focus", async (o3) => {
      this._controlPointsTransformTool.removeHighlightActiveHandle(), this._advancedModeTransformTool.highlightActiveHandle();
    }), d(() => c.controlPoints, (o3) => {
      var _a;
      l4.controlPoints = o3.map(({ sourcePoint: o4 }, t5) => ({ sourcePoint: o4, mapPoint: l4.controlPoints[t5].mapPoint })), (_a = this._activeTool) == null ? void 0 : _a.refresh();
    }), d(() => this._controlPointsTransformTool.activeHandle, (o3) => {
      this._advancedModeTransformTool.updateActiveHandle(o3), this.activeHandle = o3;
    }), d(() => this._advancedModeTransformTool.activeHandle, (o3) => {
      this._controlPointsTransformTool.updateActiveHandle(o3), this.activeHandle = o3;
    })]), this.addHandles([o2.on("key-down", (o3) => {
      o3.key === n5.undo && this.canUndo() && (this.undo(), o3.stopPropagation()), o3.key === n5.redo && this.canRedo() && (this.redo(), o3.stopPropagation());
    }), o2.on("focus", async (o3) => {
      this._advancedModeTransformTool.removeHighlightActiveHandle(), this._controlPointsTransformTool.highlightActiveHandle();
    })]), o2.tools.addMany([this._transformTool, this._controlPointsTransformTool]), o2.activeTool = this._transformTool, this._activeTool = this._transformTool, o2.focus();
  }
  destroy() {
    var _a, _b;
    (_a = this._transformTool) == null ? void 0 : _a.destroy(), (_b = this._controlPointsTransformTool) == null ? void 0 : _b.destroy(), this._transformTool = null, this._controlPointsTransformTool = null, this._advancedModeTransformTool = null, this._activeTool = null, this._sharedUndoStack = null, this._sharedRedoStack = null;
  }
  canUndo() {
    return this._sharedUndoStack.length > 0;
  }
  canRedo() {
    return this._sharedRedoStack.length > 0;
  }
  undo() {
    var _a;
    if (this._sharedUndoStack.length > 0) {
      const { tool: o2, operation: t4 } = this._sharedUndoStack.pop();
      o2 !== this._activeTool && o2.refresh(), t4.undo(), o2.updateGraphics(), this._sharedRedoStack.push({ tool: o2, operation: t4 }), this._activeTool !== o2 && ((_a = this._activeTool) == null ? void 0 : _a.refresh());
    }
  }
  redo() {
    var _a;
    if (this._sharedRedoStack.length > 0) {
      const { tool: o2, operation: t4 } = this._sharedRedoStack.pop();
      o2 !== this._activeTool && o2.refresh(), t4.apply(), o2.updateGraphics(), this._sharedUndoStack.push({ tool: o2, operation: t4 }), this._activeTool !== o2 && ((_a = this._activeTool) == null ? void 0 : _a.refresh());
    }
  }
  refresh() {
    this._activeTool.refresh();
  }
  reset() {
    this._activeTool.reset(), this._advancedModeTransformTool.reset();
  }
  async enableAdvancedMode() {
    this.view.activeTool = this._controlPointsTransformTool, this._activeTool = this._controlPointsTransformTool, this._activeTool.refresh(), await this.advancedMode.view.when(), this.advancedMode.view.activeTool = this._advancedModeTransformTool, this._originalOpacity = this._controlPointsTransformTool.mediaElement.opacity, this._controlPointsTransformTool.mediaElement.opacity = 0.25 * this._originalOpacity;
  }
  disableAdvancedMode() {
    this.view.activeTool = this._transformTool, this._activeTool = this._transformTool, this._activeTool.refresh(), this.advancedMode.view.activeTool = null, this._controlPointsTransformTool.mediaElement.opacity = this._originalOpacity;
  }
};
e([y()], d5.prototype, "activeHandle", void 0), e([y({ constructOnly: true })], d5.prototype, "advancedMode", void 0), e([y()], d5.prototype, "preserveAspectRatio", void 0), e([y()], d5.prototype, "snapRotation", void 0), e([y({ constructOnly: true, nonNullable: true })], d5.prototype, "mediaElement", void 0), e([y({ constructOnly: true })], d5.prototype, "view", void 0), d5 = e([a("esri.views.2d.interactive.editingTools.MediaTransformToolsWrapper")], d5);
export {
  b as ControlPointsTransformTool,
  E4 as DrawGraphicTool2D,
  d5 as MediaTransformToolsWrapper,
  $2 as TransformTool
};
//# sourceMappingURL=editingTools-BZ74ALSO.js.map
