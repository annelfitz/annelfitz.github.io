import {
  d as d4,
  f as f2,
  l as l4
} from "./chunk-4VAAKQZY.js";
import {
  A as A2,
  l as l3
} from "./chunk-BJMVCX7I.js";
import {
  a as a3,
  d as d3,
  nt
} from "./chunk-LYSDX3JQ.js";
import "./chunk-DUBEFL4F.js";
import "./chunk-LWKMC2O4.js";
import "./chunk-MYIS6GAM.js";
import "./chunk-GJAVIUYF.js";
import "./chunk-THI3HMUW.js";
import "./chunk-D27SL3PU.js";
import "./chunk-UYZHJ6W5.js";
import "./chunk-HMX5RG2W.js";
import "./chunk-EHB2WTOQ.js";
import "./chunk-IV6VLZIW.js";
import "./chunk-Z5CSFTR2.js";
import "./chunk-X25I35MQ.js";
import "./chunk-HRXVPBNV.js";
import "./chunk-M7J75LNF.js";
import "./chunk-EZ6O522Q.js";
import "./chunk-GNXZHLPA.js";
import "./chunk-MSZX46OT.js";
import "./chunk-PGT4QNPP.js";
import "./chunk-ZTBDM4T7.js";
import "./chunk-4VZEIAYK.js";
import {
  c
} from "./chunk-LVTZ43ZA.js";
import "./chunk-JZMK5M5U.js";
import "./chunk-XGZTEEVU.js";
import "./chunk-CDVKS7QW.js";
import "./chunk-3LS2J3MO.js";
import "./chunk-ADQ3WTAH.js";
import "./chunk-MLOYGOII.js";
import "./chunk-TAK4IJZC.js";
import "./chunk-KXXPJZB4.js";
import "./chunk-UKC6CQZS.js";
import "./chunk-UTDIJKDU.js";
import "./chunk-F2RCWS7B.js";
import "./chunk-QC6EDX4D.js";
import "./chunk-HGJYELD4.js";
import "./chunk-ANVRI6HX.js";
import "./chunk-YWTRNCRU.js";
import "./chunk-N5A4ZMGV.js";
import "./chunk-NRRXLBXG.js";
import "./chunk-ZURX6ZW7.js";
import "./chunk-MP3BMLR3.js";
import "./chunk-3U6VZTOQ.js";
import "./chunk-5M7PURL4.js";
import "./chunk-G7RYWCEO.js";
import "./chunk-EVB3GIFQ.js";
import "./chunk-OZCCH2YL.js";
import "./chunk-B473F3N3.js";
import "./chunk-WOKVMRAD.js";
import "./chunk-ZJXOOEWD.js";
import "./chunk-O7GHSWFW.js";
import "./chunk-XPABJ7YF.js";
import "./chunk-J6WYS6OG.js";
import "./chunk-BZ24WJCW.js";
import "./chunk-ARNGZTAW.js";
import "./chunk-ADU5ETX4.js";
import "./chunk-ZZWM6CET.js";
import "./chunk-WS5XOTML.js";
import "./chunk-ID25T22U.js";
import "./chunk-5SYJEI74.js";
import "./chunk-OOISODT4.js";
import "./chunk-YWPIIZFL.js";
import "./chunk-LARO5FBS.js";
import "./chunk-QFYJUFUK.js";
import "./chunk-V7IF2KNH.js";
import "./chunk-AZYURM7A.js";
import "./chunk-HBBLDSW6.js";
import "./chunk-YYI7TRI3.js";
import "./chunk-RQW2N53A.js";
import "./chunk-LHVWC4RW.js";
import "./chunk-GN2OLKIL.js";
import "./chunk-LMCIQOBX.js";
import "./chunk-4VVENLLF.js";
import "./chunk-VUHMQQ6M.js";
import "./chunk-6GQQIJM7.js";
import "./chunk-PAH4PVZY.js";
import "./chunk-5T7MASZO.js";
import "./chunk-5WKN6K5Z.js";
import "./chunk-WCBHO6BH.js";
import "./chunk-V7NVRGBC.js";
import "./chunk-KCZGCTYM.js";
import "./chunk-3YZBQBZ5.js";
import "./chunk-RFBA77K3.js";
import "./chunk-46T3D2EU.js";
import "./chunk-RYF27IO3.js";
import "./chunk-G3J4F5JD.js";
import "./chunk-OFEQM7IB.js";
import "./chunk-2GT6KC2O.js";
import "./chunk-R3RV65RE.js";
import "./chunk-5XOEX7AO.js";
import "./chunk-5MKTGTC4.js";
import "./chunk-7UDCRD5C.js";
import "./chunk-B3GKRGWX.js";
import "./chunk-FN7LLNVA.js";
import "./chunk-BR3PF5YD.js";
import "./chunk-NMKWX7AG.js";
import "./chunk-VIRGWB3Z.js";
import "./chunk-QCUK7T7Y.js";
import "./chunk-2NDIVJST.js";
import "./chunk-SPYHZ6ZW.js";
import "./chunk-637XZX4A.js";
import "./chunk-PMFQ2A2V.js";
import "./chunk-MBLWM4C2.js";
import "./chunk-HHAESKQ6.js";
import "./chunk-5INQRMFY.js";
import "./chunk-XP3ABGGF.js";
import "./chunk-TACIE3AK.js";
import "./chunk-6LT23NJG.js";
import "./chunk-4FXZDEEP.js";
import "./chunk-KYKKN5I4.js";
import "./chunk-PWQTGVPO.js";
import "./chunk-4MJOJUFR.js";
import "./chunk-PZYSOG4K.js";
import "./chunk-QHWIMHBR.js";
import "./chunk-7PVGO24P.js";
import "./chunk-EL74TSJT.js";
import "./chunk-OOS2G3OW.js";
import "./chunk-XKMZJHKM.js";
import "./chunk-DRUZYZGP.js";
import "./chunk-PTIWH4S7.js";
import "./chunk-L3GUCBXG.js";
import "./chunk-NLXTDFZC.js";
import "./chunk-GMO4JSSI.js";
import "./chunk-O3PC6BW5.js";
import "./chunk-BU5WMCML.js";
import "./chunk-B5IJN7OM.js";
import "./chunk-F7X3QPMY.js";
import "./chunk-BMTOVJNA.js";
import "./chunk-CMLG62TA.js";
import "./chunk-P257AUOX.js";
import "./chunk-WBRPZ7X2.js";
import "./chunk-T7GGEMBH.js";
import "./chunk-HB6ZUQQ2.js";
import "./chunk-7E37N35O.js";
import "./chunk-BEXFYHUM.js";
import "./chunk-IKON42NH.js";
import "./chunk-MDGE56IH.js";
import "./chunk-47WR7A25.js";
import "./chunk-6GHUHFYG.js";
import "./chunk-MHIDY6OV.js";
import "./chunk-QYYSPD2Q.js";
import "./chunk-K3DEHPDR.js";
import "./chunk-I6RS7YIS.js";
import "./chunk-FZI7RNDL.js";
import "./chunk-BSYULFZQ.js";
import "./chunk-YGP7UFWC.js";
import "./chunk-5IHJU3SQ.js";
import "./chunk-SFKZ25SS.js";
import "./chunk-SMDSNUU2.js";
import "./chunk-VJ2I4VSQ.js";
import "./chunk-MCZ4QOSQ.js";
import "./chunk-Q23RMXBO.js";
import "./chunk-BHOYA5LV.js";
import {
  e as e5
} from "./chunk-HLKM6YBE.js";
import "./chunk-CDYT7KXF.js";
import "./chunk-PMQ5HDZI.js";
import {
  e as e4
} from "./chunk-EAAEPSBY.js";
import "./chunk-5T2QNVDA.js";
import "./chunk-6RR3WN7W.js";
import "./chunk-TXCVD3YI.js";
import "./chunk-SCRCLNT5.js";
import "./chunk-M5DWZKDJ.js";
import "./chunk-NT7TKMWH.js";
import "./chunk-BQGPMKNK.js";
import "./chunk-KWLN46JY.js";
import "./chunk-7KNPDPFB.js";
import "./chunk-M6P775BS.js";
import "./chunk-J5F4VILS.js";
import "./chunk-KSBIR2KG.js";
import "./chunk-XVQGALI7.js";
import "./chunk-XFQIXBHG.js";
import "./chunk-MVSN2HAN.js";
import "./chunk-7A5N7G2Z.js";
import "./chunk-B4ZPBUH4.js";
import "./chunk-HHTLQ7O6.js";
import "./chunk-FIHLU3LF.js";
import "./chunk-PZEIVZJB.js";
import "./chunk-DXK65EP4.js";
import "./chunk-H6MCGW3O.js";
import "./chunk-OM7WUMCL.js";
import "./chunk-J54I3TB7.js";
import "./chunk-MDXZIVBP.js";
import "./chunk-7W5MWPC6.js";
import "./chunk-OE52KVBM.js";
import "./chunk-L577YNYZ.js";
import "./chunk-GL5TSVQL.js";
import "./chunk-FD7NY4JS.js";
import "./chunk-ZQTY6DQZ.js";
import "./chunk-ITCKUEVD.js";
import "./chunk-TYYN3C37.js";
import "./chunk-OBABKQ6S.js";
import "./chunk-4GGEQMYI.js";
import "./chunk-A47N2JLN.js";
import "./chunk-GQP7H7SM.js";
import "./chunk-ZPC74XHC.js";
import "./chunk-IVGJRGD2.js";
import "./chunk-JA2AO4PC.js";
import "./chunk-MTLWPXQD.js";
import "./chunk-ZEMG7GKC.js";
import "./chunk-ECIXBYOQ.js";
import "./chunk-5MQ4HAUX.js";
import "./chunk-XIWETS2Q.js";
import "./chunk-FOCTPJDR.js";
import "./chunk-2DATALUO.js";
import "./chunk-QFKFOAJ6.js";
import "./chunk-LOPMLCHC.js";
import "./chunk-JIR2YP6A.js";
import "./chunk-LANUNBDP.js";
import "./chunk-JBF6CULO.js";
import "./chunk-DRCNNCTI.js";
import "./chunk-MKOOEINB.js";
import "./chunk-JKOHBDRD.js";
import "./chunk-MDSRD3WV.js";
import "./chunk-3DFMDDMO.js";
import "./chunk-4BCSYJOQ.js";
import "./chunk-GMUCR2DJ.js";
import "./chunk-HBRJJENW.js";
import "./chunk-VHY5K2VE.js";
import "./chunk-6ENXMQPD.js";
import "./chunk-FV43HSGW.js";
import "./chunk-ZR7OV2EH.js";
import "./chunk-U76EZJUZ.js";
import "./chunk-MEEG7XMI.js";
import "./chunk-LJULTBAY.js";
import "./chunk-FD4DXBZA.js";
import "./chunk-54XXLVAD.js";
import "./chunk-KO7QNSNZ.js";
import "./chunk-YKIGDW5O.js";
import "./chunk-42NBQMXF.js";
import "./chunk-YFKU7PPC.js";
import "./chunk-MUMDKJ7Y.js";
import "./chunk-ZFR4QMZ5.js";
import "./chunk-R2MAAYED.js";
import "./chunk-B7M5G3J5.js";
import "./chunk-7QHIE4SQ.js";
import "./chunk-6MGK5WBT.js";
import "./chunk-HSOVRETF.js";
import "./chunk-CPZW2LMK.js";
import "./chunk-QR7J3YDY.js";
import "./chunk-GO2OGJDG.js";
import "./chunk-UYMREM3D.js";
import "./chunk-CXP4BHPO.js";
import "./chunk-7FQYGAVT.js";
import "./chunk-QO4PGON2.js";
import "./chunk-QRQWG4D3.js";
import "./chunk-5JXZHN2A.js";
import "./chunk-KTQIY334.js";
import "./chunk-YQQSFFN3.js";
import "./chunk-O556EBAK.js";
import "./chunk-IJD65EMQ.js";
import "./chunk-4YGBWYMD.js";
import "./chunk-ZPU7GNG4.js";
import "./chunk-TNR6E67I.js";
import "./chunk-7O3VD45U.js";
import "./chunk-QREUCRQ4.js";
import "./chunk-YK3UMVCY.js";
import "./chunk-IQFWVTUJ.js";
import "./chunk-GB4RVOXH.js";
import "./chunk-JTUYA5FE.js";
import "./chunk-UNTQATE2.js";
import "./chunk-5YY6NZNY.js";
import "./chunk-DCBZOZ54.js";
import "./chunk-5IT6RVBX.js";
import "./chunk-MTQHYT7Y.js";
import "./chunk-JCP47SOM.js";
import "./chunk-CXCB57TE.js";
import "./chunk-IWO6JXL2.js";
import "./chunk-AVR3LWTZ.js";
import "./chunk-YUWVLORR.js";
import "./chunk-7MYYCSEB.js";
import "./chunk-ESK2YRQM.js";
import "./chunk-L7WI7KB2.js";
import "./chunk-3GY64OYE.js";
import "./chunk-QIEXJLRX.js";
import "./chunk-UNTPHF5R.js";
import "./chunk-YJFPDMSR.js";
import "./chunk-FFG7BDAP.js";
import "./chunk-ECTYMEUP.js";
import "./chunk-I4SHZ6P5.js";
import "./chunk-S243OWEZ.js";
import "./chunk-QYDOVVH7.js";
import "./chunk-YSXT2SWC.js";
import "./chunk-YH3SFFF7.js";
import "./chunk-JBU54P54.js";
import "./chunk-IWZSAF74.js";
import "./chunk-FMS3CZY7.js";
import "./chunk-TLTAGTBA.js";
import "./chunk-2QPP5AGU.js";
import "./chunk-2C26DRKK.js";
import "./chunk-M4RFJU4F.js";
import "./chunk-YPY24RRU.js";
import "./chunk-O7RKI2QW.js";
import "./chunk-VVAVEXL2.js";
import "./chunk-BKBB7AOV.js";
import "./chunk-H7T5AB2S.js";
import "./chunk-HXYRQKMI.js";
import "./chunk-WKVHVZW2.js";
import "./chunk-DH7BG2VH.js";
import "./chunk-KSZESDGM.js";
import "./chunk-CHJMCUAV.js";
import "./chunk-5P74D2TG.js";
import "./chunk-33LWZO2E.js";
import "./chunk-YT66FIGM.js";
import "./chunk-VIKID44H.js";
import "./chunk-3IDXRFXE.js";
import "./chunk-TLU6YG3S.js";
import "./chunk-RLZYC2LS.js";
import "./chunk-3RIV3ECV.js";
import "./chunk-WEER6QME.js";
import "./chunk-IYU3Q2BA.js";
import "./chunk-L52HB3KV.js";
import "./chunk-TXLJQAAN.js";
import "./chunk-XJICXW6N.js";
import "./chunk-YF5E2R37.js";
import "./chunk-R4SGP2EA.js";
import "./chunk-IRL6OOVK.js";
import "./chunk-3AIILHI5.js";
import "./chunk-QJRGTKPN.js";
import "./chunk-VIH3KDZO.js";
import "./chunk-LA365FE7.js";
import "./chunk-SA77Z3WI.js";
import "./chunk-6K2UNRXT.js";
import "./chunk-WTKV7W5Z.js";
import "./chunk-D4Y7YHG7.js";
import "./chunk-AL5NKCU5.js";
import "./chunk-6MBDB46F.js";
import "./chunk-D56W4LPT.js";
import "./chunk-BKOYOJBG.js";
import "./chunk-7JR6S3WL.js";
import "./chunk-CSSLIU64.js";
import "./chunk-CJNDQ2LH.js";
import "./chunk-B4E4X2TN.js";
import "./chunk-HS6YI5DU.js";
import "./chunk-CDBOQCLE.js";
import "./chunk-RSRUEM5U.js";
import "./chunk-HFJMEXIX.js";
import "./chunk-VYSGSKHB.js";
import "./chunk-DGJJJ2DD.js";
import "./chunk-UAFQMHYI.js";
import "./chunk-IDPLBNJX.js";
import "./chunk-ZHAZR5C3.js";
import "./chunk-P4MNTMCZ.js";
import "./chunk-YH2IYJYF.js";
import "./chunk-BSPKLAHD.js";
import "./chunk-GGHKH3LP.js";
import "./chunk-VS6AHHIY.js";
import "./chunk-GPWQGIYV.js";
import "./chunk-WZJNHZ6H.js";
import "./chunk-XMYPMIYH.js";
import "./chunk-FQLGRQKL.js";
import "./chunk-YBPOKK6D.js";
import "./chunk-BFOJPIF7.js";
import "./chunk-3JC3OUNW.js";
import "./chunk-RO3CTAP7.js";
import "./chunk-GKMVTGGM.js";
import "./chunk-XGTCDM4C.js";
import "./chunk-RW5QMWE6.js";
import "./chunk-LGMX4E7L.js";
import "./chunk-W5ALAOW2.js";
import "./chunk-FHDHOWK5.js";
import "./chunk-Y546C2O5.js";
import "./chunk-BDRVHR2K.js";
import "./chunk-DVIGFJWY.js";
import "./chunk-LQBHIBXV.js";
import "./chunk-42DUJ2CX.js";
import "./chunk-B35SNV2V.js";
import "./chunk-Z2F5OKVA.js";
import "./chunk-UQA6M3KF.js";
import "./chunk-GLF3KRAL.js";
import "./chunk-ZLQTPFTL.js";
import "./chunk-WIVZ7SMV.js";
import "./chunk-O76UVYOO.js";
import "./chunk-QCMUK3QA.js";
import "./chunk-HZSGATFT.js";
import "./chunk-KNMQQRV7.js";
import "./chunk-N5GQOIDP.js";
import "./chunk-NFB6O77E.js";
import "./chunk-AKEHDP75.js";
import "./chunk-5MMGIT64.js";
import "./chunk-ERD6I7QP.js";
import "./chunk-Z3NX5DTX.js";
import "./chunk-J4RP32NG.js";
import "./chunk-6NLHKXEW.js";
import "./chunk-LMO6NZJA.js";
import "./chunk-A5QTLE4Y.js";
import "./chunk-SCHTG6ZQ.js";
import "./chunk-G7YFDDME.js";
import "./chunk-PCKG3UTS.js";
import "./chunk-3VMVD66K.js";
import "./chunk-QYC3GV65.js";
import "./chunk-ETHGDNE6.js";
import "./chunk-X2GCSX3A.js";
import "./chunk-I2X6UR6L.js";
import "./chunk-NVYR73RE.js";
import "./chunk-HV2SFSJW.js";
import "./chunk-CYVKDANA.js";
import "./chunk-SBARCIDP.js";
import "./chunk-2SYXH2R7.js";
import "./chunk-7JNXJYRU.js";
import "./chunk-EMYOYGGK.js";
import "./chunk-3KPZ3BQR.js";
import "./chunk-5JYVZQZR.js";
import "./chunk-P7J4JFEH.js";
import "./chunk-G7FOE26O.js";
import "./chunk-S5I4QKJD.js";
import "./chunk-LSM34QAB.js";
import "./chunk-HWHMO3CO.js";
import "./chunk-NCRCDVOW.js";
import "./chunk-QX66UTIR.js";
import "./chunk-TCRKKQAL.js";
import "./chunk-77YSHEUQ.js";
import "./chunk-JW7VBMHD.js";
import "./chunk-GLLRUDMY.js";
import "./chunk-ZIJHDTB7.js";
import "./chunk-ZU6I4R6T.js";
import "./chunk-JI3AZJ7K.js";
import "./chunk-A5Q7MMP6.js";
import "./chunk-326OSIM5.js";
import "./chunk-R4CJB3GP.js";
import "./chunk-HTKSTTSR.js";
import "./chunk-6IED7TER.js";
import "./chunk-X7VSXJWW.js";
import "./chunk-VEODBKUJ.js";
import "./chunk-AG6JXA4M.js";
import "./chunk-B647DRFJ.js";
import "./chunk-PJNK3TLV.js";
import "./chunk-J7AMTUNG.js";
import "./chunk-G5EVVNIJ.js";
import "./chunk-HU5IGOTI.js";
import "./chunk-C24MEKSO.js";
import "./chunk-WDPG5BMO.js";
import "./chunk-TGXFDJCS.js";
import "./chunk-BOAEEYBE.js";
import "./chunk-VBUVOOM6.js";
import "./chunk-I5RCKVDX.js";
import {
  a as a2,
  d as d2,
  f,
  l as l2,
  o,
  u
} from "./chunk-6CWL7BCV.js";
import "./chunk-VTH4DAHQ.js";
import "./chunk-HLDUDRTD.js";
import "./chunk-SLQA5YBV.js";
import "./chunk-UMXV3EBO.js";
import "./chunk-ONK5AE7R.js";
import "./chunk-CZSTCON2.js";
import "./chunk-2ICUS4HL.js";
import "./chunk-ZXJ6I4RF.js";
import "./chunk-GBF2OQAY.js";
import "./chunk-WNNYD62G.js";
import "./chunk-HV6S3GY2.js";
import "./chunk-IGR2BTWR.js";
import "./chunk-C7NPPGFR.js";
import "./chunk-ZPYA32PH.js";
import "./chunk-OCF7OAES.js";
import "./chunk-JZBR4X6W.js";
import "./chunk-OIJCMME5.js";
import "./chunk-4KLYOMH2.js";
import "./chunk-CXNX736Z.js";
import {
  D,
  e2 as e3,
  r
} from "./chunk-RGCWZ2KZ.js";
import {
  i,
  n as n2
} from "./chunk-5VMSFOCB.js";
import "./chunk-LGQXPGTM.js";
import {
  h
} from "./chunk-2SDMYJDE.js";
import "./chunk-TPLOIZC7.js";
import "./chunk-C62RZQQX.js";
import "./chunk-6Z6C6JVV.js";
import "./chunk-QLL2YG25.js";
import "./chunk-Z2PDA67N.js";
import "./chunk-IZKCZQUY.js";
import "./chunk-M5ZB5S5C.js";
import "./chunk-MBGZKT2Z.js";
import "./chunk-UWQ3OYA5.js";
import "./chunk-ORO4D3FB.js";
import "./chunk-YOPMY6TS.js";
import "./chunk-VIN55KNF.js";
import "./chunk-NIDZ6R4E.js";
import "./chunk-IOB3DJMR.js";
import "./chunk-BPRXWDBO.js";
import "./chunk-7MT4ACA4.js";
import "./chunk-RUN6MNXL.js";
import "./chunk-BIAXSBMP.js";
import "./chunk-SAYWXQVM.js";
import "./chunk-SBL4URUW.js";
import {
  A,
  C,
  P,
  d,
  p,
  v as v2
} from "./chunk-Z4Y53NDM.js";
import "./chunk-PVUNFEWX.js";
import "./chunk-TXBMNSNF.js";
import "./chunk-BVQWKK2V.js";
import "./chunk-D25BO7X7.js";
import {
  S,
  v,
  y2 as y
} from "./chunk-NDIXNREV.js";
import {
  a3 as a
} from "./chunk-I2RC5KWA.js";
import "./chunk-SSFWZSUM.js";
import {
  e
} from "./chunk-2F6FFF5T.js";
import "./chunk-C26KUZ46.js";
import {
  e as e2
} from "./chunk-JGDJR5EV.js";
import {
  l
} from "./chunk-QHK5ZYFW.js";
import "./chunk-L65HKN25.js";
import {
  n2 as n
} from "./chunk-7RBRCL6S.js";
import "./chunk-J2EGIWT6.js";
import "./chunk-MDRC3XUT.js";
import "./chunk-NCF6OYL5.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@arcgis/core/widgets/Daylight/css.js
var e6 = "esri-daylight";
var a4 = `${e6}__container`;
var n3 = "esri-slider";
var o2 = { base: e6, dayContainer: `${a4} ${e6}__day-container`, dateContainer: `${a4} ${e6}__date-container`, containerDisabled: `${a4}--disabled`, slider: n3, sliderShadowOff: `${n3}--shadow-off`, sliderShadowOn: `${n3}--shadow-on`, sliderAmPmOn: `${n3}--ampm-on`, sliderDateOff: `${n3}--date-off`, sliderDateOn: `${n3}--date-on`, playPauseButton: `${e6}__play-pause-button`, datePicker: `${e6}__date-picker`, seasonPicker: `${e6}__season-picker`, panelError: `${e6}__panel--error`, sunLightingCheckbox: `${e6}__sun-lighting-checkbox`, shadowsCheckbox: `${e6}__shadows-checkbox` };

// node_modules/@arcgis/core/widgets/Daylight/support/daylightUtils.js
var e7;
!function(t) {
  t[t.NORTHERN = 0] = "NORTHERN", t[t.SOUTHERN = 1] = "SOUTHERN";
}(e7 || (e7 = {}));
var i2 = { spring: { dayOfMonth: 20, month: 2 }, summer: { dayOfMonth: 21, month: 5 }, fall: { dayOfMonth: 23, month: 8 }, winter: { dayOfMonth: 21, month: 11 } };
var r2 = ["spring", "summer", "fall", "winter"];
function o3(t, n4, e8) {
  const r4 = f3(n4, e8), { dayOfMonth: o4, month: m2 } = i2[r4], u3 = new Date(t.getTime());
  return u3.setMonth(m2, o4), u3;
}
function m(t, n4) {
  return f3(u2(t), n4);
}
function u2(t) {
  const n4 = t.getTime(), i3 = o3(t, "spring", e7.NORTHERN).getTime(), r4 = o3(t, "summer", e7.NORTHERN).getTime(), m2 = o3(t, "fall", e7.NORTHERN).getTime(), u3 = o3(t, "winter", e7.NORTHERN).getTime();
  return n4 >= i3 && n4 < r4 ? "spring" : n4 >= r4 && n4 < m2 ? "summer" : n4 >= m2 && n4 < u3 ? "fall" : "winter";
}
function f3(t, n4) {
  return n4 === e7.NORTHERN ? t : s(t);
}
function s(t) {
  const n4 = r2.indexOf(t);
  return r2[(n4 + 2) % 4];
}
function N(n4, e8) {
  return u(n4, e8, "minutes");
}
function T(t) {
  return a2(t, "minutes");
}
function c2(t, n4, e8) {
  const i3 = 12e5, r4 = i3 / 4, o4 = 18e5, m2 = r4 / 3 * 2, u3 = 72e5;
  if (null == t || null == n4 || isNaN(t.getTime()) && isNaN(n4.getTime()))
    return r4;
  const f4 = e8.getTime(), s3 = t.getTime(), N2 = n4.getTime(), T2 = s3 - u3 / 2, c3 = s3 + u3 / 2, R = N2 - u3 / 3 * 2, g = N2 + u3 / 3;
  let O = r4;
  return f4 >= T2 && f4 <= c3 ? O = f4 - T2 <= i3 ? o4 - (f4 - T2) / i3 * (o4 - m2) : c3 - f4 <= i3 / 2 ? r4 - (c3 - f4) / i3 * 2 * (r4 - m2) : m2 : f4 >= R && f4 <= g ? O = f4 - R <= i3 / 2 ? r4 - (f4 - R) / i3 * 2 * (r4 - m2) : g - f4 <= i3 ? o4 - (g - f4) / i3 * (o4 - m2) : m2 : (f4 < s3 || f4 > N2) && (O = o4), O;
}

// node_modules/@arcgis/core/widgets/Daylight/support/SliderWithDropdownViewModel.js
var s2 = class extends l3 {
  constructor() {
    super(...arguments), this.utcOffset = null, this.timezonePickerOpen = false;
  }
};
e([y()], s2.prototype, "utcOffset", void 0), e([y()], s2.prototype, "timezonePickerOpen", void 0), s2 = e([a("esri.widgets.Daylight.support.SliderWithDropdownViewModel")], s2);

// node_modules/@arcgis/core/widgets/Daylight/DaylightViewModel.js
var V = class extends S {
  constructor(t) {
    super(t), this.view = null, this.timeSliderViewModel = new s2({ min: 0, max: 1439, values: [0], labelFormatFunction: f2, inputFormatFunction: f2 }), this.lightingUpdateInterval = 200, this._oldLighting = null, this.playSpeedMultiplier = 1, this._lastTime = null, this._sunrise = null, this._sunset = null, this._cachedLightingDateUTC = /* @__PURE__ */ new Date(0), this._cachedDisplayUTCOffset = 0, this._firstInteraction = true, this._lastLightingUpdate = 0, this._lightingUpdateHandle = null;
  }
  initialize() {
    this.addHandles([p(() => this.view, (t) => t.when(() => this._updateLighting()), P), d(() => {
      const t = this._lighting;
      return "sun" === (t == null ? void 0 : t.type) ? this._ensureValidDate(t) : null;
    }, (t) => this._scheduleLightingUpdate(t)), v2(() => this._lighting, "timezone-will-change", (t) => this._timezoneWillChange(t), { onListenerAdd: () => this._timezoneWillChange(null) }), d(() => {
      var _a;
      return true === ((_a = this.view) == null ? void 0 : _a.stationary);
    }, () => {
      (this.dayPlaying || this.yearPlaying) && this._updateSunriseAndSunset();
    }, P), d(() => {
      const t = this.timeSliderViewModel;
      return { vm: t, state: t.state, sliderPosition: this.timeSliderPosition };
    }, ({ vm: t, state: e8, sliderPosition: i3 }) => {
      "ready" === e8 && t.setValue(0, i3);
    }), d(() => {
      var _a;
      return (_a = this.timeSliderViewModel) == null ? void 0 : _a.utcOffset;
    }, (t) => {
      null != t && (this.utcOffset = t);
    }), d(() => ({ utcOffset: this.utcOffset, sliderViewModel: this.timeSliderViewModel }), ({ utcOffset: t, sliderViewModel: e8 }) => {
      e8 && (e8.utcOffset = t);
    }, A), d(() => this.timeSliderViewModel.timezonePickerOpen, () => this.stopPlaying()), d(() => this.timeSliderViewModel.values, (t) => this._setTimeSliderPosition((t == null ? void 0 : t[0]) ?? 0, { forceLightingUpdate: false }))]);
  }
  destroy() {
    this._cancelLightingUpdate(), this.view = null;
  }
  get isSupported() {
    return null == this.view || "3d" === this.view.type;
  }
  get utcOffset() {
    return this._cachedDisplayUTCOffset;
  }
  set utcOffset(t) {
    t !== this.utcOffset && null != this._lighting && "virtual" !== this._lighting.type && (this._lighting.displayUTCOffset = t, this._updateLighting());
  }
  get localDate() {
    return d2(this._lightingDateDisplay);
  }
  set localDate(t) {
    var _a;
    ((_a = this.view) == null ? void 0 : _a.ready) ? f(t) && t.getTime() !== this.localDate.getTime() && (this._lightingDateDisplay = l2(this._lightingDateDisplay, t)) : n.getLogger(this).error("The localDate property cannot be set before the view and the widget are ready.");
  }
  get timeSliderPosition() {
    return T(this._lightingDateDisplay);
  }
  set timeSliderPosition(t) {
    var _a, _b;
    ((_a = this.view) == null ? void 0 : _a.ready) && "ready" === ((_b = this.timeSliderViewModel) == null ? void 0 : _b.state) ? this._setTimeSliderPosition(t, { forceLightingUpdate: true }) : n.getLogger(this).error("The timeSliderPosition property cannot be set before the view and the widget are ready.");
  }
  _setTimeSliderPosition(t, e8) {
    Math.abs(t - this.timeSliderPosition) <= 1 / 60 || (this.stopPlaying(), this._enableDirectShadowsIfFirstInteraction(), e8.forceLightingUpdate && (this._cancelLightingUpdate(), this._updateLighting()), this._lightingDateDisplay = N(this._lightingDateDisplay, t));
  }
  _timezoneFromCamera(t, e8) {
    if (null == e8 || !t.cameraTrackingEnabled)
      return 0;
    const i3 = c([e8.longitude, e8.latitude]);
    return null == i3 ? 0 : Math.round(i3.hours + i3.minutes / 60 + i3.seconds / 3600);
  }
  get directShadowsEnabled() {
    var _a;
    return ((_a = this._lighting) == null ? void 0 : _a.directShadowsEnabled) ?? false;
  }
  set directShadowsEnabled(t) {
    const e8 = this._lighting;
    e8 && (e8.directShadowsEnabled = t);
  }
  get sunLightingEnabled() {
    return "sun" === this._lightingType;
  }
  set sunLightingEnabled(t) {
    const e8 = this._environment;
    if (t === this._get("sunLightingEnabled") || null == e8)
      return;
    const i3 = e8.lighting, n4 = this._oldLighting;
    this._oldLighting = i3;
    const s3 = { directShadowsEnabled: i3.directShadowsEnabled, cameraTrackingEnabled: i3.cameraTrackingEnabled }, a6 = t ? "sun" : "virtual";
    let l6;
    l6 = null != n4 && n4.type === a6 ? n4 : t ? new d3() : new a3(), l6.set(s3), e8.lighting = l6, t || (this.stopPlaying(), this.timeSliderViewModel.timezonePickerOpen = false);
  }
  set playingState(t) {
    this.playingState !== t && (this._set("playingState", t), "none" !== t && this.sunLightingEnabled && (this._updateSunriseAndSunset(), this._lastTime = Date.now(), this._play(), this._enableDirectShadowsIfFirstInteraction()));
  }
  get dayPlaying() {
    return "day" === this.playingState;
  }
  set dayPlaying(t) {
    t ? this.playingState = "day" : this.dayPlaying && (this.playingState = "none");
  }
  get yearPlaying() {
    return "year" === this.playingState;
  }
  set yearPlaying(t) {
    t ? this.playingState = "year" : this.yearPlaying && (this.playingState = "none");
  }
  get currentSeason() {
    return m(this.localDate, this._currentHemisphere);
  }
  set currentSeason(t) {
    this.stopPlaying();
    const e8 = f3(t, this._currentHemisphere);
    this.localDate = o3(this.localDate, e8, e7.NORTHERN);
  }
  get _currentHemisphere() {
    var _a, _b, _c;
    const t = (_c = (_b = (_a = this.view) == null ? void 0 : _a.camera) == null ? void 0 : _b.position) == null ? void 0 : _c.latitude;
    return null == t || t >= 0 ? e7.NORTHERN : e7.SOUTHERN;
  }
  get _environment() {
    var _a;
    return (_a = this.view) == null ? void 0 : _a.environment;
  }
  get _lighting() {
    var _a;
    return (_a = this._environment) == null ? void 0 : _a.lighting;
  }
  get _lightingType() {
    var _a;
    return (_a = this._lighting) == null ? void 0 : _a.type;
  }
  get _lightingDateDisplay() {
    return o(this._cachedLightingDateUTC, this._cachedDisplayUTCOffset, "hours");
  }
  set _lightingDateDisplay(t) {
    const e8 = this._lighting;
    if (null == e8 || !this.sunLightingEnabled || "virtual" === e8.type || !f(t))
      return;
    const i3 = this._ensureValidDate(e8), n4 = o(t, -this._cachedDisplayUTCOffset, "hours");
    n4.getTime() !== i3.getTime() && (e8.date = n4, this._updateLighting());
  }
  stopPlaying() {
    this.playingState = "none";
  }
  toggleDayPlaying() {
    this.dayPlaying = !this.dayPlaying;
  }
  toggleYearPlaying() {
    this.yearPlaying = !this.yearPlaying;
  }
  toggleSunLightingEnabled() {
    this.stopPlaying(), this.sunLightingEnabled = !this.sunLightingEnabled;
  }
  toggleDirectShadowsEnabled() {
    this.stopPlaying(), this.directShadowsEnabled = !this.directShadowsEnabled;
  }
  onDateChange(t) {
    this.dayPlaying = false, this.localDate = t;
  }
  _enableDirectShadowsIfFirstInteraction() {
    this._firstInteraction && (this._firstInteraction = false, this.directShadowsEnabled = true);
  }
  _updateLighting(t) {
    var _a;
    const e8 = Date.now();
    this._lastLightingUpdate = e8;
    const { view: i3 } = this, n4 = this._lighting;
    if (null == i3 || null == n4 || "virtual" === n4.type)
      return;
    t ?? (t = this._ensureValidDate(n4));
    const s3 = n4.displayUTCOffset, a6 = null !== s3 ? s3 : this._timezoneFromCamera(n4, (_a = i3.camera) == null ? void 0 : _a.position);
    this._cachedLightingDateUTC.getTime() !== t.getTime() && (this._cachedLightingDateUTC = new Date(t.getTime())), this._cachedDisplayUTCOffset !== a6 && (this._cachedDisplayUTCOffset = a6);
  }
  _timezoneWillChange(t) {
    const e8 = this._lighting;
    if (null == e8 || "virtual" === e8.type || !e8.cameraTrackingEnabled)
      return;
    let i3;
    if (t)
      i3 = t.timezoneOffset;
    else {
      if (null != e8.displayUTCOffset)
        return;
      i3 = d3.calculateTimezoneOffset(e8.positionTimezoneInfo);
    }
    e8.displayUTCOffset = i3, this._scheduleLightingUpdate();
  }
  _scheduleLightingUpdate(t) {
    if (t && (this._lightingUpdateHandle = l(this._lightingUpdateHandle), !f(t)))
      return;
    if (this._lightingUpdateHandle)
      return;
    const e8 = Date.now() - this._lastLightingUpdate, n4 = this.lightingUpdateInterval - e8;
    let a6 = null;
    const l6 = () => {
      this._updateLighting(t), this._lightingUpdateHandle === a6 && (this._lightingUpdateHandle = null);
    };
    if (n4 <= 0)
      this._lightingUpdateHandle = a6 = v(l6);
    else {
      const t2 = setTimeout(l6, n4);
      this._lightingUpdateHandle = a6 = e2(() => clearTimeout(t2));
    }
  }
  _cancelLightingUpdate() {
    this._lightingUpdateHandle = l(this._lightingUpdateHandle);
  }
  _play() {
    const t = this._lighting;
    if (null == t || !this.sunLightingEnabled || "virtual" === t.type)
      return;
    const e8 = this._ensureValidDate(t);
    if (this.dayPlaying || this.yearPlaying) {
      const i3 = Date.now() - (this._lastTime ?? 0);
      if (this.dayPlaying) {
        this._lastTime = Date.now();
        const n4 = c2(this._sunrise, this._sunset, e8) * this.playSpeedMultiplier / 100 * i3;
        if (n4 > 0) {
          let i4 = new Date(e8.getTime() + n4);
          const s3 = t.displayUTCOffset ?? 0;
          if (((i4.getUTCHours() + s3) % 24 + 24) % 24 < ((e8.getUTCHours() + s3) % 24 + 24) % 24) {
            const t2 = 864e5;
            i4 = new Date(e8.getTime() + n4 - t2);
          }
          t.date = i4;
        }
      } else {
        if (i3 > 1e3) {
          this._lastTime = Date.now();
          const i4 = (e8.getUTCMonth() + 1) % 12, n4 = new Date(e8.getTime());
          n4.setUTCMonth(i4), t.date = n4;
        }
      }
      requestAnimationFrame(() => this._play());
    }
  }
  _updateSunriseAndSunset() {
    var _a, _b;
    const t = this._lighting;
    if (null == t || "virtual" === t.type || !this.sunLightingEnabled)
      return;
    const e8 = (_b = (_a = this.view) == null ? void 0 : _a.camera) == null ? void 0 : _b.position;
    if (null == e8)
      return;
    const { latitude: i3, longitude: n4 } = e8, { date: s3, displayUTCOffset: a6 } = t, l6 = l4(s3, i3, n4, a6 ?? 0);
    l6 && (this._sunrise = new Date(l6.sunrise), this._sunset = new Date(l6.sunset));
  }
  _ensureValidDate(t) {
    return f(t.date) || (n.getLogger(this).warn("Invalid date. Reverting to the current date/time."), t.date = /* @__PURE__ */ new Date()), t.date;
  }
};
e([y({ type: nt })], V.prototype, "view", void 0), e([y({ type: s2, nonNullable: true })], V.prototype, "timeSliderViewModel", void 0), e([y()], V.prototype, "isSupported", null), e([y()], V.prototype, "lightingUpdateInterval", void 0), e([y()], V.prototype, "utcOffset", null), e([y()], V.prototype, "localDate", null), e([y()], V.prototype, "timeSliderPosition", null), e([y()], V.prototype, "directShadowsEnabled", null), e([y()], V.prototype, "sunLightingEnabled", null), e([y({ type: ["none", "day", "year"], value: "none" })], V.prototype, "playingState", null), e([y()], V.prototype, "dayPlaying", null), e([y()], V.prototype, "yearPlaying", null), e([y()], V.prototype, "playSpeedMultiplier", void 0), e([y()], V.prototype, "currentSeason", null), e([y()], V.prototype, "_lastTime", void 0), e([y()], V.prototype, "_sunrise", void 0), e([y()], V.prototype, "_sunset", void 0), e([y()], V.prototype, "_cachedLightingDateUTC", void 0), e([y()], V.prototype, "_cachedDisplayUTCOffset", void 0), e([y()], V.prototype, "_firstInteraction", void 0), e([y()], V.prototype, "_currentHemisphere", null), e([y()], V.prototype, "_environment", null), e([y()], V.prototype, "_lighting", null), e([y()], V.prototype, "_lightingType", null), e([y()], V.prototype, "_lightingDateDisplay", null), V = e([a("esri.widgets.Daylight.DaylightViewModel")], V);
var H = V;

// node_modules/@arcgis/core/widgets/Daylight/VisibleElements.js
var r3 = class extends S {
  constructor(o4) {
    super(o4), this.header = true, this.playButtons = true, this.datePicker = true, this.timezone = true, this.sunLightingToggle = true, this.shadowsToggle = true;
  }
};
e([y({ type: Boolean, nonNullable: true })], r3.prototype, "header", void 0), e([y({ type: Boolean, nonNullable: true })], r3.prototype, "playButtons", void 0), e([y({ type: Boolean, nonNullable: true })], r3.prototype, "datePicker", void 0), e([y({ type: Boolean, nonNullable: true })], r3.prototype, "timezone", void 0), e([y({ type: Boolean, nonNullable: true })], r3.prototype, "sunLightingToggle", void 0), e([y({ type: Boolean, nonNullable: true })], r3.prototype, "shadowsToggle", void 0), r3 = e([a("esri.widgets.Daylight.VisibleElements")], r3);
var l5 = r3;

// node_modules/@arcgis/core/widgets/Daylight/support/SliderWithDropdown.js
var p2 = "esri-slider-with-dropdown";
var h2 = { label: "esri-slider__label", box: `${p2}__box`, boxDropDownOn: `${p2}__box--drop-down-on`, boxDropDownOff: `${p2}__box--drop-down-off` };
var a5 = class extends A2 {
  constructor(e8, o4) {
    super(e8, o4), this.viewModel = new s2(), this.showDropDown = true, this._labelWidth = 0, this._onLabelAfterCreate = (e9) => {
      const o5 = "label-size-observer";
      this.removeHandles(o5), this.addHandles(h(e9, ({ contentRect: e10 }) => {
        this._labelWidth = e10.width;
      }), o5);
    }, this._getLabelStyles = () => {
      if (!this.trackElement)
        return;
      const e9 = this._trackWidth, o5 = this._labelWidth / 2, t = this.getCurrentPosition(), r4 = t - o5, s3 = t + o5;
      let i3 = -o5;
      return r4 < 0 ? i3 += -r4 : s3 > e9 && (i3 += e9 - s3), { left: `${i3}px` };
    }, this._onTimezoneChange = (e9) => {
      this.viewModel.utcOffset = e9;
    }, this._onTimezonePickerOpen = () => {
      this.viewModel.timezonePickerOpen = true;
    }, this._onTimezonePickerClose = () => {
      this.viewModel.timezonePickerOpen = false;
    };
  }
  renderThumbLabel(e8) {
    const { showDropDown: o4, viewModel: t } = this;
    return n2("div", { afterCreate: this._onLabelAfterCreate, class: this.classes({ [h2.box]: true, [h2.label]: true, [h2.boxDropDownOn]: o4, [h2.boxDropDownOff]: !o4 }), key: "thumb-label", styles: this._getLabelStyles() }, super.renderThumbLabel(e8), o4 ? n2(d4, { open: t.timezonePickerOpen, value: t.utcOffset, onChange: this._onTimezoneChange, onClose: this._onTimezonePickerClose, onOpen: this._onTimezonePickerOpen }) : null);
  }
};
e([y()], a5.prototype, "viewModel", void 0), e([y()], a5.prototype, "showDropDown", void 0), e([y()], a5.prototype, "_labelWidth", void 0), a5 = e([a("esri.widgets.Daylight.support.SliderWithDropdown")], a5);
var d5 = a5;

// node_modules/@arcgis/core/widgets/Daylight.js
var S2 = /(.*)\s(.*)/;
var w = "date";
var _ = class extends D {
  constructor(e8, t) {
    super(e8, t), this.headingLevel = 3, this.viewModel = new H(), this.visibleElements = new l5(), this.dateOrSeason = w, this._timeSlider = new d5({ viewModel: this.viewModel.timeSliderViewModel, steps: this.timeSliderSteps, labelInputsEnabled: false, visibleElements: { labels: true }, tickConfigs: [{ mode: "position", values: [0, 360, 720, 1080, 1439], labelsVisible: true, tickCreatedFunction: this._onPrimaryTickCreated.bind(this) }, { mode: "position", values: [120, 240, 480, 600, 840, 960, 1200, 1320], tickCreatedFunction: this._onSecondaryTickCreated.bind(this) }] }), this._datePicker = null, this._onPlayDayClick = () => {
      this.viewModel.toggleDayPlaying();
    }, this._onDatePickerAfterCreate = (e9) => {
      this._datePicker = e9;
    }, this._onDateChange = (e9) => {
      const t2 = e9.target.valueAsDate;
      this.viewModel.onDateChange(Array.isArray(t2) ? t2[0] : t2);
    }, this._onYearPlayClick = () => {
      this.viewModel.toggleYearPlaying();
    }, this._onSeasonChange = (e9) => {
      this.viewModel.currentSeason = e9.target.value;
    }, this._onSunLightingCheckboxChange = () => {
      this.viewModel.toggleSunLightingEnabled();
    }, this._onShadowCheckboxChange = () => {
      this.viewModel.toggleDirectShadowsEnabled();
    };
  }
  get icon() {
    return "brightness";
  }
  set icon(e8) {
    this._overrideIfSome("icon", e8);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.title) ?? "";
  }
  set label(e8) {
    this._overrideIfSome("label", e8);
  }
  get playSpeedMultiplier() {
    return this.viewModel.playSpeedMultiplier;
  }
  set playSpeedMultiplier(e8) {
    this.viewModel.playSpeedMultiplier = e8;
  }
  get timeSliderSteps() {
    var _a;
    return ((_a = this._timeSlider) == null ? void 0 : _a.steps) ?? 5;
  }
  set timeSliderSteps(e8) {
    this._timeSlider.steps = e8;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e8) {
    this.viewModel.view = e8;
  }
  get _useAmPm() {
    const e8 = this._timeSlider.viewModel.getLabelForValue(0, "tick");
    return null != e8 && S2.test(e8);
  }
  postInitialize() {
    this.viewModel.isSupported && this.addHandles([d(() => this.viewModel.timeSliderViewModel, (e8) => this._timeSlider.viewModel = e8, A), d(() => {
      var _a;
      return (_a = this.visibleElements) == null ? void 0 : _a.timezone;
    }, (e8) => this._timeSlider.showDropDown = e8, A), d(() => !this.viewModel.sunLightingEnabled, (e8) => {
      this._timeSlider.disabled = e8;
    }, A), p(() => !this.visible, () => {
      this._datePicker && (this._datePicker.open = false);
    }, C)]);
  }
  destroy() {
    this._timeSlider.destroy();
  }
  render() {
    const { messages: e8, viewModel: t, visibleElements: i3 } = this, s3 = t.isSupported;
    return n2("div", { class: this.classes(o2.base, e4.widget) }, s3 ? n2(i, null, i3.header ? n2(e5, { level: this.headingLevel }, e8.title) : null, this._renderTimeOptions(), i3.datePicker ? this._renderDateOrSeason() : null, i3.sunLightingToggle ? this._renderSunLightingToggle() : null, i3.shadowsToggle ? this._renderShadowsToggle() : null) : n2("div", { class: o2.panelError, key: "unsupported" }, n2("p", null, e8.unsupported)));
  }
  loadDependencies() {
    return r({ button: () => import("./calcite-button-V4T5NPWY.js"), checkbox: () => import("./calcite-checkbox-AHETVK7Y.js"), label: () => import("./calcite-label-W4VTHQAF.js"), "input-date-picker": () => import("./calcite-input-date-picker-QVEGEMR6.js"), option: () => import("./calcite-option-TCD47JBL.js"), select: () => import("./calcite-select-DL7WB63T.js") });
  }
  _renderTimeOptions() {
    const { viewModel: e8, visibleElements: t, messages: i3 } = this, { directShadowsEnabled: s3, dayPlaying: o4 } = e8, l6 = !e8.sunLightingEnabled;
    return n2("div", { class: this.classes(o2.dayContainer, { [o2.sliderShadowOn]: s3, [o2.sliderShadowOff]: !s3, [o2.sliderDateOn]: t.datePicker, [o2.sliderDateOff]: !t.datePicker, [o2.sliderAmPmOn]: this._useAmPm, [o2.containerDisabled]: l6 }), key: "daylight-time-options" }, this._timeSlider.render(), t.playButtons ? this._renderPlayPauseButton({ playing: o4, disabled: l6, label: i3.playDay, onClick: this._onPlayDayClick }) : null);
  }
  _renderDateOptions() {
    const { viewModel: e8, visibleElements: t, messages: i3 } = this, { yearPlaying: s3 } = e8, o4 = !e8.sunLightingEnabled;
    return n2("div", { class: this.classes(o2.dateContainer, o4 && o2.containerDisabled), key: o2.dateContainer }, n2("calcite-input-date-picker", { afterCreate: this._onDatePickerAfterCreate, class: o2.datePicker, disabled: o4, key: o2.datePicker, overlayPositioning: "fixed", placement: "bottom", valueAsDate: e8.localDate, onCalciteInputDatePickerChange: this._onDateChange }), t.playButtons ? this._renderPlayPauseButton({ playing: s3, disabled: o4, label: i3.playYear, onClick: this._onYearPlayClick }) : null);
  }
  _renderPlayPauseButton({ playing: e8, disabled: t, label: i3, onClick: s3 }) {
    return n2("calcite-button", { appearance: "solid", class: o2.playPauseButton, disabled: t, iconStart: e8 ? "pause-f" : "play-f", label: i3, onclick: s3, round: true, title: i3, type: "button" });
  }
  _renderSeasonSelect() {
    const { messages: e8, viewModel: t } = this, i3 = !t.sunLightingEnabled;
    return n2("calcite-select", { class: this.classes(o2.seasonPicker), disabled: i3, label: e8.season, onCalciteSelectChange: this._onSeasonChange }, r2.map((i4) => n2("calcite-option", { selected: t.currentSeason === i4, value: i4 }, e8[i4])));
  }
  _renderDateOrSeason() {
    return "date" === this.dateOrSeason ? this._renderDateOptions() : this._renderSeasonSelect();
  }
  _renderSunLightingToggle() {
    var _a;
    const e8 = (_a = this.messages) == null ? void 0 : _a.sunLightingToggle;
    return n2("calcite-label", { key: "date-time-toggle", layout: "inline", scale: "s", title: e8 == null ? void 0 : e8.tooltip }, n2("calcite-checkbox", { checked: this.viewModel.sunLightingEnabled, class: o2.sunLightingCheckbox, onCalciteCheckboxChange: this._onSunLightingCheckboxChange }), e8 == null ? void 0 : e8.label);
  }
  _renderShadowsToggle() {
    const e8 = this.messages.shadowsToggle;
    return n2("calcite-label", { key: "shadow-toggle", layout: "inline", scale: "s", title: e8 == null ? void 0 : e8.tooltip }, n2("calcite-checkbox", { checked: this.viewModel.directShadowsEnabled, class: o2.shadowsCheckbox, onCalciteCheckboxChange: this._onShadowCheckboxChange }), e8.label);
  }
  _onPrimaryTickCreated(e8, t, i3) {
    t.classList.add(...C2, e4.primaryTick), i3.classList.add(...C2, e4.primaryTickLabel), i3.onclick = t.onclick = this._makeGoToTime(e8);
    const s3 = i3.textContent, o4 = null != s3 && S2.exec(s3);
    o4 && (i3.innerHTML = `${o4[1]}<br><div class=${e4.primaryTickAmPm}>${o4[2]}</div>`);
  }
  _onSecondaryTickCreated(e8, t) {
    t.classList.add(...C2, e4.secondaryTick), t.onclick = this._makeGoToTime(e8);
  }
  _makeGoToTime(e8) {
    return () => {
      this.viewModel.timeSliderPosition = e8;
    };
  }
};
e([y(), e3("esri/widgets/Daylight/t9n/Daylight")], _.prototype, "messages", void 0), e([y(), e3("esri/widgets/support/t9n/timezone")], _.prototype, "timezoneMessages", void 0), e([y()], _.prototype, "headingLevel", void 0), e([y()], _.prototype, "icon", null), e([y()], _.prototype, "label", null), e([y()], _.prototype, "playSpeedMultiplier", null), e([y()], _.prototype, "timeSliderSteps", null), e([y()], _.prototype, "view", null), e([y({ type: H })], _.prototype, "viewModel", void 0), e([y({ type: l5, nonNullable: true })], _.prototype, "visibleElements", void 0), e([y({ cast(e8) {
  return "season" === e8 || "date" === e8 ? e8 : (n.getLogger(this).warn(`"${e8}" is not a valid option. Acceptable values are only "date" or "season". Defaulting to "${w}".`), w);
} })], _.prototype, "dateOrSeason", void 0), e([y()], _.prototype, "_timeSlider", void 0), e([y()], _.prototype, "_useAmPm", null), e([y()], _.prototype, "_datePicker", void 0), _ = e([a("esri.widgets.Daylight")], _);
var C2 = [e4.interactive, e4.anchor];
var P2 = _;
export {
  P2 as default
};
//# sourceMappingURL=Daylight-PO4UFTHC.js.map
