import {
  InteractiveContainer,
  connectInteractive,
  disconnectInteractive,
  updateHostInteraction
} from "./chunk-66JQNCB7.js";
import "./chunk-OUKAB5XV.js";
import {
  componentLoaded,
  setComponentLoaded,
  setUpLoadableComponent
} from "./chunk-HYC423SM.js";
import {
  focusElement,
  focusElementInGroup,
  toAriaBoolean
} from "./chunk-BUS2XAMG.js";
import "./chunk-L553G5FP.js";
import "./chunk-PJLSVRBA.js";
import {
  Host,
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-FNA2PYJM.js";
import "./chunk-Z4ZPL3B3.js";

// node_modules/@esri/calcite-components/dist/esm/calcite-card-group.entry.js
var cardGroupCss = ":host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{--calcite-card-group-gap:var(--calcite-size-md);display:block}.container{display:flex;flex-wrap:wrap;gap:var(--calcite-card-group-gap)}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}.interaction-container{display:contents}:host([hidden]){display:none}[hidden]{display:none}";
var CardGroup = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.calciteCardGroupSelect = createEvent(this, "calciteCardGroupSelect", 6);
    this.items = [];
    this.udpateItemsOnSelectionModeChange = () => {
      this.updateSlottedItems(this.slotRefEl);
      this.updateSelectedItems();
    };
    this.updateItemsOnSlotChange = (event) => {
      this.updateSlottedItems(event.target);
      this.updateSelectedItems();
    };
    this.updateSlottedItems = (target) => {
      this.items = target.assignedElements({ flatten: true }).filter((el) => el == null ? void 0 : el.matches("calcite-card"));
    };
    this.updateSelectedItems = () => {
      this.items.forEach((el) => {
        el.selectionMode = this.selectionMode;
      });
      this.setSelectedItems(false);
    };
    this.setSelectedItems = (emit, elToMatch) => {
      if (elToMatch) {
        this.items.forEach((el) => {
          const matchingEl = elToMatch === el;
          switch (this.selectionMode) {
            case "multiple":
              if (matchingEl) {
                el.selected = !el.selected;
              }
              break;
            case "single":
              el.selected = matchingEl ? !el.selected : false;
              break;
            case "single-persist":
              el.selected = !!matchingEl;
              break;
          }
        });
      }
      this.selectedItems = this.items.filter((el) => el.selected);
      if (emit && this.selectionMode !== "none" && !this.disabled) {
        this.calciteCardGroupSelect.emit();
      }
    };
    this.disabled = false;
    this.label = void 0;
    this.scale = "m";
    this.selectionMode = "none";
    this.selectedItems = [];
  }
  onSelectionModeChange() {
    this.udpateItemsOnSelectionModeChange();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  connectedCallback() {
    connectInteractive(this);
  }
  componentDidRender() {
    updateHostInteraction(this);
  }
  componentDidLoad() {
    setComponentLoaded(this);
  }
  disconnectedCallback() {
    disconnectInteractive(this);
  }
  async componentWillLoad() {
    setUpLoadableComponent(this);
  }
  //--------------------------------------------------------------------------
  //
  //  Event Listeners
  //
  //--------------------------------------------------------------------------
  calciteInternalCardKeyEventListener(event) {
    if (event.composedPath().includes(this.el)) {
      const interactiveItems = this.items.filter((el) => !el.disabled);
      switch (event.detail["key"]) {
        case "ArrowRight":
          focusElementInGroup(interactiveItems, event.target, "next");
          break;
        case "ArrowLeft":
          focusElementInGroup(interactiveItems, event.target, "previous");
          break;
        case "Home":
          focusElementInGroup(interactiveItems, event.target, "first");
          break;
        case "End":
          focusElementInGroup(interactiveItems, event.target, "last");
          break;
      }
    }
  }
  calciteCardSelectListener(event) {
    if (event.composedPath().includes(this.el) && !event.target.selectable) {
      this.setSelectedItems(true, event.target);
    }
  }
  // --------------------------------------------------------------------------
  //
  //  Public Methods
  //
  // --------------------------------------------------------------------------
  /**
   * Sets focus on the component's first focusable element.
   */
  async setFocus() {
    await componentLoaded(this);
    if (!this.disabled) {
      focusElement(this.items[0]);
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const role = this.selectionMode === "none" || this.selectionMode === "multiple" ? "group" : "radiogroup";
    return h(Host, null, h(InteractiveContainer, { disabled: this.disabled }, h("div", { "aria-disabled": toAriaBoolean(this.disabled), "aria-label": this.label, class: "container", role }, h("slot", { onSlotchange: this.updateItemsOnSlotChange, ref: (el) => this.slotRefEl = el }))));
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "selectionMode": ["onSelectionModeChange"]
    };
  }
};
CardGroup.style = cardGroupCss;
export {
  CardGroup as calcite_card_group
};
/*! Bundled license information:

@esri/calcite-components/dist/esm/calcite-card-group.entry.js:
  (*!
   * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
   * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
   * v2.6.0
   *)
*/
//# sourceMappingURL=calcite-card-group.entry-ZPGCCBZO.js.map
