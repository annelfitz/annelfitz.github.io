{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/components/src/components/input-time-zone/utils.ts", "../../@esri/calcite-components/dist/components/src/components/input-time-zone/input-time-zone.scss?tag=calcite-input-time-zone&encapsulation=shadow", "../../@esri/calcite-components/dist/components/src/components/input-time-zone/input-time-zone.tsx"],
  "sourcesContent": ["import { TimeZoneItem, TimeZoneMode, TimeZoneName } from \"./interfaces\";\nimport { getDateTimeFormat, SupportedLocale } from \"../../utils/locale\";\nimport { InputTimeZoneMessages } from \"./assets/input-time-zone/t9n\";\n\nconst hourToMinutes = 60;\n\nconst timeZoneNameBlockList = [\n  \"CET\",\n  \"CST6CDT\",\n  \"EET\",\n  \"EST\",\n  \"EST5EDT\",\n  \"Factory\",\n  \"HST\",\n  \"MET\",\n  \"MST\",\n  \"MST7MDT\",\n  \"PST8PDT\",\n  \"UTC\",\n  \"WET\",\n];\n\nfunction timeZoneOffsetToDecimal(shortOffsetTimeZoneName: string): string {\n  const minusSign = \"âˆ’\";\n  const hyphen = \"-\";\n\n  return (\n    shortOffsetTimeZoneName\n      .replace(\":15\", \".25\")\n      .replace(\":30\", \".5\")\n      .replace(\":45\", \".75\")\n\n      // ensures decimal string representation is parseable\n      .replace(minusSign, hyphen)\n  );\n}\n\nfunction toOffsetValue(timeZoneName: TimeZoneName, referenceDateInMs: number): number {\n  // we use \"en-US\" to allow us to reliably remove the standard time token\n  const offset = getTimeZoneShortOffset(timeZoneName, \"en-US\", referenceDateInMs).replace(\"GMT\", \"\");\n\n  if (offset === \"\") {\n    return 0;\n  }\n\n  return Number(timeZoneOffsetToDecimal(offset)) * hourToMinutes;\n}\n\nexport function getUserTimeZoneOffset(): number {\n  const localDate = new Date();\n  return localDate.getTimezoneOffset() * -1;\n}\n\nexport function getUserTimeZoneName(): string {\n  const dateFormatter = new Intl.DateTimeFormat();\n  return dateFormatter.resolvedOptions().timeZone;\n}\n\n/**\n * The lazy-loaded timezone-groups lib to be used across instances.\n */\nlet timeZoneGroups: Promise<[any, any]>;\n\nexport async function createTimeZoneItems(\n  locale: SupportedLocale,\n  messages: InputTimeZoneMessages,\n  mode: TimeZoneMode,\n  referenceDate: Date,\n): Promise<TimeZoneItem[]> {\n  const referenceDateInMs: number = referenceDate.getTime();\n  const timeZoneNames = Intl.supportedValuesOf(\"timeZone\");\n\n  if (mode === \"offset\") {\n    if (!timeZoneGroups) {\n      timeZoneGroups = Promise.all([\n        import(\"timezone-groups/dist/index.js\"),\n        import(\"timezone-groups/dist/strategy/native/index.js\"),\n      ]);\n    }\n\n    return timeZoneGroups.then(async ([{ groupTimeZones }, { DateEngine }]) => {\n      const timeZoneGroups: { labelTzIndices: number[]; tzs: TimeZoneName[] }[] = await groupTimeZones({\n        dateEngine: new DateEngine(),\n        groupDateRange: 1,\n        startDate: new Date(referenceDateInMs).toISOString(),\n      });\n\n      const listFormatter = new Intl.ListFormat(locale, { style: \"long\", type: \"conjunction\" });\n\n      // we remove blocked entries from tzs and adjust label indices accordingly\n      timeZoneGroups.forEach((group) => {\n        const indexOffsets: number[] = [];\n        let removedSoFar = 0;\n\n        group.tzs.forEach((tz, index) => {\n          if (timeZoneNameBlockList.includes(tz)) {\n            removedSoFar++;\n          }\n          indexOffsets[index] = removedSoFar;\n        });\n\n        group.tzs = group.tzs.filter((tz) => !timeZoneNameBlockList.includes(tz));\n\n        group.labelTzIndices = group.labelTzIndices\n          .map((index) => index - indexOffsets[index])\n          .filter((index) => index >= 0 && index < group.tzs.length);\n      });\n\n      return timeZoneGroups\n        .map<TimeZoneItem<number>>(({ labelTzIndices, tzs }) => {\n          const groupRepTz = tzs[0];\n          const decimalOffset = timeZoneOffsetToDecimal(getTimeZoneShortOffset(groupRepTz, locale, referenceDateInMs));\n          const value = toOffsetValue(groupRepTz, referenceDateInMs);\n          const tzLabels = labelTzIndices.map((index: number) => {\n            const timeZone = tzs[index];\n            const timeZoneLabel = messages[timeZone];\n            return (\n              timeZoneLabel ||\n              // get city token\n              timeZone.split(\"/\").pop()\n            );\n          });\n\n          const label = createTimeZoneOffsetLabel(messages, decimalOffset, listFormatter.format(tzLabels));\n\n          return {\n            label,\n            value,\n            filterValue: tzs.map((tz) => toUserFriendlyName(tz)),\n          };\n        })\n        .filter((group) => !!group)\n        .sort((groupA, groupB) => groupA.value - groupB.value);\n    });\n  }\n\n  return timeZoneNames\n    .map<TimeZoneItem<string>>((timeZone) => {\n      const label = toUserFriendlyName(timeZone);\n      const value = timeZone;\n\n      return {\n        label,\n        value,\n        filterValue: timeZone,\n      };\n    })\n    .filter((group) => !!group)\n    .sort();\n}\n\n/**\n * Exported for testing purposes only\n *\n * @internal\n */\nexport function toUserFriendlyName(timeZoneName: string): string {\n  return timeZoneName.replace(/_/g, \" \");\n}\n\nfunction createTimeZoneOffsetLabel(messages: InputTimeZoneMessages, offsetLabel: string, groupLabel: string): string {\n  return messages.timeZoneLabel.replace(\"{offset}\", offsetLabel).replace(\"{cities}\", groupLabel);\n}\n\nfunction getTimeZoneShortOffset(\n  timeZone: TimeZoneName,\n  locale: SupportedLocale,\n  referenceDateInMs: number = Date.now(),\n): string {\n  const dateTimeFormat = getDateTimeFormat(locale, { timeZone, timeZoneName: \"shortOffset\" });\n  const parts = dateTimeFormat.formatToParts(referenceDateInMs);\n  return parts.find(({ type }) => type === \"timeZoneName\").value;\n}\n", ":host {\n  display: block;\n}\n\n@include base-component();\n@include disabled();\n@include hidden-form-input();\n", "import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { connectLabel, disconnectLabel, LabelableComponent } from \"../../utils/label\";\nimport {\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport {\n  connectLocalized,\n  disconnectLocalized,\n  LocalizedComponent,\n  SupportedLocale,\n} from \"../../utils/locale\";\nimport { TimeZoneItem, TimeZoneMode } from \"./interfaces\";\nimport { Scale, Status } from \"../interfaces\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { InputTimeZoneMessages } from \"./assets/input-time-zone/t9n\";\nimport { createTimeZoneItems, getUserTimeZoneName, getUserTimeZoneOffset } from \"./utils\";\nimport { OverlayPositioning } from \"../../utils/floating-ui\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport {\n  afterConnectDefaultValueSet,\n  connectForm,\n  disconnectForm,\n  FormComponent,\n  HiddenFormInputSlot,\n} from \"../../utils/form\";\n\n@Component({\n  tag: \"calcite-input-time-zone\",\n  styleUrl: \"input-time-zone.scss\",\n  assetsDirs: [\"assets\"],\n  shadow: {\n    delegatesFocus: true,\n  },\n})\nexport class InputTimeZone\n  implements\n    FormComponent,\n    InteractiveComponent,\n    LabelableComponent,\n    LoadableComponent,\n    LocalizedComponent,\n    T9nComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * The `id` of the form that will be associated with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   */\n  @Prop({ reflect: true }) form: string;\n\n  /** Specifies the component's maximum number of options to display before displaying a scrollbar. */\n  @Prop({ reflect: true }) maxItems = 0;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: InputTimeZoneMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<InputTimeZoneMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /**\n   * This specifies the type of `value` and the associated options presented to the user:\n   *\n   * Using `\"offset\"` will provide options that show timezone offsets.\n   *\n   * Using `\"name\"` will provide options that show the IANA time zone names.\n   *\n   * @default \"offset\"\n   */\n  @Prop({ reflect: true }) mode: TimeZoneMode = \"offset\";\n\n  @Watch(\"messages\")\n  @Watch(\"mode\")\n  @Watch(\"referenceDate\")\n  handleTimeZoneItemPropsChange(): void {\n    this.updateTimeZoneItemsAndSelection();\n  }\n\n  /** Specifies the validation message to display under the component. */\n  @Prop() validationMessage: string;\n\n  /** Specifies the validation icon to display under the component. */\n  @Prop({ reflect: true }) validationIcon: string | boolean;\n\n  /**\n   * Specifies the name of the component.\n   *\n   * Required to pass the component's `value` on form submission.\n   */\n  @Prop({ reflect: true }) name: string;\n\n  /** When `true`, displays and positions the component. */\n  @Prop({ mutable: true, reflect: true }) open = false;\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  /**\n   * This `date` will be used as a reference to Daylight Savings Time when creating time zone item groups.\n   *\n   * It can be either a Date instance or a string in ISO format (`\"YYYY-MM-DD\"`, `\"YYYY-MM-DDTHH:MM:SS.SSSZ\"`).\n   *\n   * @see [Date.prototype.toISOString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\n   */\n  @Prop() referenceDate: Date | string;\n\n  /**\n   * When `true`, the component must have a value in order for the form to submit.\n   *\n   * @internal\n   */\n  @Prop({ reflect: true }) required = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the status of the input field, which determines message and icons. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  /**\n   * The component's value, where the value is the time zone offset or the difference, in minutes, between the selected time zone and UTC.\n   *\n   * If no value is provided, the user's time zone offset will be selected by default.\n   *\n   * @see https://www.w3.org/International/core/2005/09/timezone.html#:~:text=What%20is%20a%20%22zone%20offset,or%20%22%2D%22%20from%20UTC.\n   */\n  @Prop({ mutable: true }) value: string;\n\n  @Watch(\"value\")\n  handleValueChange(value: string, oldValue: string): void {\n    const timeZoneItem = this.findTimeZoneItem(value);\n\n    if (!timeZoneItem) {\n      this.value = oldValue;\n      return;\n    }\n\n    this.selectedTimeZoneItem = timeZoneItem;\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    await this.comboboxEl.setFocus();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Fires when the component is requested to be closed and before the closing transition begins.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneBeforeClose: EventEmitter<void>;\n\n  /**\n   * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneBeforeOpen: EventEmitter<void>;\n\n  /**\n   * Fires when the component's `value` changes.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneChange: EventEmitter<void>;\n\n  /**\n   * Fires after the component is closed and animation is complete.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneClose: EventEmitter<void>;\n\n  /**\n   * Fires after the component is opened and animation is complete.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneOpen: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteInputTimeZoneElement;\n\n  private comboboxEl: HTMLCalciteComboboxElement;\n\n  @State() defaultMessages: InputTimeZoneMessages;\n\n  defaultValue: InputTimeZone[\"value\"];\n\n  @State() effectiveLocale: SupportedLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleWatcher(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  formEl: HTMLFormElement;\n\n  labelEl: HTMLCalciteLabelElement;\n\n  private selectedTimeZoneItem: TimeZoneItem;\n\n  private timeZoneItems: TimeZoneItem[];\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  onLabelClick(): void {\n    this.setFocus();\n  }\n\n  private setComboboxRef = (el: HTMLCalciteComboboxElement): void => {\n    this.comboboxEl = el;\n  };\n\n  private onComboboxBeforeClose = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.calciteInputTimeZoneBeforeClose.emit();\n  };\n\n  private onComboboxBeforeOpen = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.calciteInputTimeZoneBeforeOpen.emit();\n  };\n\n  private onComboboxChange = (event: CustomEvent): void => {\n    event.stopPropagation();\n    const combobox = event.target as HTMLCalciteComboboxElement;\n    const selected = this.findTimeZoneItem(combobox.selectedItems[0].getAttribute(\"data-value\"));\n\n    const selectedValue = `${selected.value}`;\n    if (this.value === selectedValue) {\n      return;\n    }\n\n    this.value = selectedValue;\n    this.selectedTimeZoneItem = selected;\n    this.calciteInputTimeZoneChange.emit();\n  };\n\n  private onComboboxClose = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.open = false;\n    this.calciteInputTimeZoneClose.emit();\n  };\n\n  private onComboboxOpen = (event: CustomEvent): void => {\n    this.open = true;\n    event.stopPropagation();\n    this.calciteInputTimeZoneOpen.emit();\n  };\n\n  private findTimeZoneItem(value: number | string): TimeZoneItem {\n    const valueToMatch = value;\n\n    return this.timeZoneItems.find(\n      ({ value }) =>\n        // intentional == to match string to number\n        value == valueToMatch,\n    );\n  }\n\n  private async updateTimeZoneItemsAndSelection(): Promise<void> {\n    this.timeZoneItems = await this.createTimeZoneItems();\n\n    const fallbackValue = this.mode === \"offset\" ? getUserTimeZoneOffset() : getUserTimeZoneName();\n    const valueToMatch = this.value ?? fallbackValue;\n\n    this.selectedTimeZoneItem = this.findTimeZoneItem(valueToMatch);\n\n    if (!this.selectedTimeZoneItem) {\n      this.selectedTimeZoneItem = this.findTimeZoneItem(fallbackValue);\n    }\n  }\n\n  private async createTimeZoneItems(): Promise<TimeZoneItem[]> {\n    if (!this.effectiveLocale || !this.messages) {\n      return [];\n    }\n\n    return createTimeZoneItems(\n      this.effectiveLocale,\n      this.messages,\n      this.mode,\n      this.referenceDate instanceof Date\n        ? this.referenceDate\n        : new Date(this.referenceDate ?? Date.now()),\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectForm(this);\n    connectLabel(this);\n    connectLocalized(this);\n    connectMessages(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectForm(this);\n    disconnectLabel(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n\n    await this.updateTimeZoneItemsAndSelection();\n\n    const selectedValue = `${this.selectedTimeZoneItem.value}`;\n    afterConnectDefaultValueSet(this, selectedValue);\n    this.value = selectedValue;\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  render(): VNode {\n    return (\n      <Host>\n        <InteractiveContainer disabled={this.disabled}>\n          <calcite-combobox\n            clearDisabled={true}\n            disabled={this.disabled}\n            label={this.messages.chooseTimeZone}\n            lang={this.effectiveLocale}\n            maxItems={this.maxItems}\n            onCalciteComboboxBeforeClose={this.onComboboxBeforeClose}\n            onCalciteComboboxBeforeOpen={this.onComboboxBeforeOpen}\n            onCalciteComboboxChange={this.onComboboxChange}\n            onCalciteComboboxClose={this.onComboboxClose}\n            onCalciteComboboxOpen={this.onComboboxOpen}\n            open={this.open}\n            overlayPositioning={this.overlayPositioning}\n            scale={this.scale}\n            selectionMode=\"single-persist\"\n            status={this.status}\n            validation-icon={this.validationIcon}\n            validation-message={this.validationMessage}\n            // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n            ref={this.setComboboxRef}\n          >\n            {this.timeZoneItems.map((group) => {\n              const selected = this.selectedTimeZoneItem === group;\n              const { label, value } = group;\n\n              return (\n                <calcite-combobox-item\n                  data-value={value}\n                  key={label}\n                  selected={selected}\n                  textLabel={label}\n                  value={`${group.filterValue}`}\n                />\n              );\n            })}\n          </calcite-combobox>\n          <HiddenFormInputSlot component={this} />\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n}\n"],
  "mappings": "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",
  "names": ["timeZoneGroups", "InputTimeZone", "value"]
}
