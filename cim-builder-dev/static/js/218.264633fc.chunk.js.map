{"version":3,"sources":["../node_modules/@arcgis/core/layers/support/RasterWorker.js"],"names":["n","e","o","r","data","options","toJSON","symbolize","pixelBlock","fromJSON","extent","m","this","symbolizer","Promise","resolve","l","symbolizerJSON","histograms","rendererJSON","type","stretch","simpleStretch","srcPixelBlock","stretchParams","estimateStatisticsHistograms","s","split","tileSize","maximumPyramidLevel","forEach","set","srcPixelBlocks","map","t","srcMosaicSize","alignmentInfo","coefs","i","destDimension","sampleSpacing","interpolation"],"mappings":"0GAAA,6DAIg8CA,UAA5mC,MAAQ,aAAaC,GAAG,MAAMC,QAAQC,YAAEF,EAAEG,KAAKH,EAAEI,SAAS,OAAOH,GAAGA,EAAEI,SAASC,UAAUJ,GAAGA,EAAEK,WAAWP,IAAEQ,SAASN,EAAEK,YAAYL,EAAEO,OAAOP,EAAEO,OAAOC,IAAEF,SAASN,EAAEO,QAAQ,KAAK,MAAMR,EAAEU,KAAKC,WAAWN,UAAUJ,GAAG,OAAOW,QAAQC,QAAQb,GAAGA,EAAEI,UAAU,uBAAuBL,GAAG,IAAIE,EAAES,KAAKC,WAAWG,IAAEP,SAASR,EAAEgB,gBAAgBhB,EAAEiB,YAAY,mBAAmB,OAAOf,EAAES,KAAKC,iBAAY,EAAOV,EAAEgB,aAAaC,QAAQR,KAAKC,WAAWM,aAAaD,WAAWjB,EAAEiB,YAAYG,QAAQlB,GAAG,MAAMD,EAAEU,KAAKC,WAAWS,cAAcrB,IAAEQ,SAASN,EAAEoB,eAAepB,EAAEqB,eAAe,OAAOV,QAAQC,QAAQb,GAAGA,EAAEI,UAAUmB,6BAA6BtB,GAAG,MAAMuB,EAAExB,YAAED,IAAEQ,SAASN,EAAEoB,gBAAgB,OAAOT,QAAQC,QAAQW,GAAGC,MAAMxB,GAAG,MAAMD,EAAEwB,YAAEzB,IAAEQ,SAASN,EAAEoB,eAAepB,EAAEyB,SAASzB,EAAE0B,qBAAqB,OAAO3B,GAAGA,EAAE4B,QAAS,CAAC7B,EAAEE,KAAKD,EAAE6B,IAAI5B,EAAE,MAAMF,OAAE,EAAOA,EAAEK,YAAaQ,QAAQC,QAAQb,GAAG,yBAAyBC,GAAG,MAAMD,EAAEC,EAAE6B,eAAeC,IAAK9B,GAAGA,EAAE,IAAIF,IAAEE,GAAG,MAAOuB,EAAEQ,YAAEhC,EAAEC,EAAEgC,cAAc,KAAK,KAAKhC,EAAEiC,eAAe,IAAIjC,EAAEkC,MAAM,OAAOX,GAAGA,EAAEpB,SAAS,MAAMU,EAAEsB,YAAEZ,EAAEvB,EAAEoC,cAAcpC,EAAEkC,MAAMlC,EAAEqC,cAAcrC,EAAEsC,eAAe,OAAOzB,GAAGA,EAAEV","file":"static/js/218.264633fc.chunk.js","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport\"../../geometry.js\";import e from\"./PixelBlock.js\";import{decode as r}from\"./rasterFormats/RasterCodec.js\";import{estimateStatisticsHistograms as o,split as s,mosaic as t,approximateTransform as i}from\"./rasterFunctions/pixelUtils.js\";import l from\"../../renderers/support/RasterSymbolizer.js\";import m from\"../../geometry/Extent.js\";class n{async decode(e){const o=await r(e.data,e.options);return o&&o.toJSON()}symbolize(r){r.pixelBlock=e.fromJSON(r.pixelBlock),r.extent=r.extent?m.fromJSON(r.extent):null;const o=this.symbolizer.symbolize(r);return Promise.resolve(o&&o.toJSON())}async updateSymbolizer(e){var r;this.symbolizer=l.fromJSON(e.symbolizerJSON),e.histograms&&\"rasterStretch\"===(null==(r=this.symbolizer)?void 0:r.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(r){const o=this.symbolizer.simpleStretch(e.fromJSON(r.srcPixelBlock),r.stretchParams);return Promise.resolve(o&&o.toJSON())}estimateStatisticsHistograms(r){const s=o(e.fromJSON(r.srcPixelBlock));return Promise.resolve(s)}split(r){const o=s(e.fromJSON(r.srcPixelBlock),r.tileSize,r.maximumPyramidLevel);return o&&o.forEach(((e,r)=>{o.set(r,null==e?void 0:e.toJSON())})),Promise.resolve(o)}async mosaicAndTransform(r){const o=r.srcPixelBlocks.map((r=>r?new e(r):null)),s=t(o,r.srcMosaicSize,null,null,r.alignmentInfo);if(!r.coefs)return s&&s.toJSON();const l=i(s,r.destDimension,r.coefs,r.sampleSpacing,r.interpolation);return l&&l.toJSON()}}export default n;\n"],"sourceRoot":""}