(this["webpackJsonpmy-app"]=this["webpackJsonpmy-app"]||[]).push([[3],{526:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return s})),n.d(t,"c",(function(){return c})),n.d(t,"d",(function(){return l}));Number.POSITIVE_INFINITY;const i=Math.PI,a=128/i,o=1/Math.LN2;function r(e,t){return(e%=t)>=0?e:e+t}function l(e){return r(e*a,256)}function s(e){return r(e*(256/360),256)}function c(e){return Math.log(e)*o}function u(e,t,n){return e>=t&&e<=n||e>=n&&e<=t}},558:function(e,t,n){"use strict";n(5);var i=n(3),a=n(596),o=n(561),r=n(9),l=n(4),s=n(541),c=n(580),u=n(28),f=n(59),v=n(293),d=n(98),m=n(505),_=n(516);const p=l.a.getLogger("esri.views.2d.engine.webgl.Mesh2D"),g=(e,t,n,i)=>{let a=0;for(let o=1;o<n;o++){const n=e[2*(t+o-1)],i=e[2*(t+o-1)+1];a+=(e[2*(t+o)]-n)*(e[2*(t+o)+1]+i)}return i?a>0:a<0},x=({coords:e,lengths:t},n)=>{const i=[];for(let a=0,o=0;a<t.length;o+=t[a],a+=1){const r=o,l=[];for(;a<t.length-1&&g(e,o+t[a],t[a+1],n);a+=1,o+=t[a])l.push(o+t[a]-r);const s=e.slice(2*r,2*(o+t[a])),u=Object(c.a)(s,l,2);for(const e of u)i.push(e+r)}return i};class h{constructor(e,t,n,i=!1){this._cache={},this.vertices=e,this.indices=t,this.primitiveType=n,this.isMapSpace=i}static fromRect({x:e,y:t,width:n,height:i}){const a=e,o=t,r=a+n,l=o+i;return h.fromScreenExtent({xmin:a,ymin:o,xmax:r,ymax:l})}static fromPath(e){const t=Object(v.f)(new d.a,e.path,!1,!1),n=t.coords,i=new Uint32Array(x(t,!0)),a=new Uint32Array(n.length/2);for(let o=0;o<a.length;o++)a[o]=Object(m.a)(Math.floor(n[2*o]),Math.floor(n[2*o+1]));return new h({geometry:a},i,4)}static fromGeometry(e,t){const n=t.geometry.type;switch(n){case"polygon":return h.fromPolygon(e,t.geometry);case"extent":return h.fromMapExtent(e,t.geometry);default:return p.error(new r.a("mapview-bad-type","Unable to create a mesh from type "+n,t)),h.fromRect({x:0,y:0,width:1,height:1})}}static fromPolygon(e,t){const n=Object(v.g)(new d.a,t,!1,!1),i=n.coords,a=new Uint32Array(x(n,!1)),o=new Uint32Array(i.length/2),r=Object(f.a)(),l=Object(f.a)();for(let s=0;s<o.length;s++)Object(u.m)(r,i[2*s],i[2*s+1]),e.toScreen(l,r),o[s]=Object(m.a)(Math.floor(l[0]),Math.floor(l[1]));return new h({geometry:o},a,4,!0)}static fromScreenExtent({xmin:e,xmax:t,ymin:n,ymax:i}){const a={geometry:new Uint32Array([Object(m.a)(e,n),Object(m.a)(t,n),Object(m.a)(e,i),Object(m.a)(e,i),Object(m.a)(t,n),Object(m.a)(t,i)])},o=new Uint32Array([0,1,2,3,4,5]);return new h(a,o,4)}static fromMapExtent(e,t){const[n,i]=e.toScreen([0,0],[t.xmin,t.ymin]),[a,o]=e.toScreen([0,0],[t.xmax,t.ymax]),r={geometry:new Uint32Array([Object(m.a)(n,i),Object(m.a)(a,i),Object(m.a)(n,o),Object(m.a)(n,o),Object(m.a)(a,i),Object(m.a)(a,o)])},l=new Uint32Array([0,1,2,3,4,5]);return new h(r,l,4)}destroy(){Object(i.i)(this._cache.indexBuffer)&&this._cache.indexBuffer.dispose();for(const e in this._cache.vertexBuffers)Object(i.i)(this._cache.vertexBuffers[e])&&this._cache.vertexBuffers[e].dispose()}get elementType(){return(e=>{switch(e.BYTES_PER_ELEMENT){case 1:return 5121;case 2:return 5123;case 4:return 5125;default:throw new r.a("Cannot get DataType of array")}})(this.indices)}getIndexBuffer(e,t=35044){return this._cache.indexBuffer||(this._cache.indexBuffer=_.a.createIndex(e,t,this.indices)),this._cache.indexBuffer}getVertexBuffers(e,t=35044){return this._cache.vertexBuffers||(this._cache.vertexBuffers=Object.keys(this.vertices).reduce((n,i)=>({...n,[i]:_.a.createVertex(e,t,this.vertices[i])}),{})),this._cache.vertexBuffers}}var b=h,y=n(515);const S=l.a.getLogger("esri.views.2d.engine.webgl.ClippingInfo"),C=e=>parseFloat(e)/100;class T extends s.a{constructor(e,t){super(),this._clip=t,this._cache={},this.stage=e,this._handle=t.watch("version",()=>this._invalidate()),this.ready()}static fromClipArea(e,t){return new T(e,t)}_destroyGL(){Object(i.i)(this._cache.mesh)&&(this._cache.mesh.destroy(),this._cache.mesh=null),Object(i.i)(this._cache.vao)&&(this._cache.vao.dispose(),this._cache.vao=null)}destroy(){this._destroyGL(),this._handle.remove()}getVAO(e,t,n,a){const[o,r]=t.size;if("geometry"!==this._clip.type&&this._lastWidth===o&&this._lastHeight===r||(this._lastWidth=o,this._lastHeight=r,this._destroyGL()),Object(i.h)(this._cache.vao)){const i=this._createMesh(t,this._clip),o=i.getIndexBuffer(e),r=i.getVertexBuffers(e);this._cache.mesh=i,this._cache.vao=new y.a(e,n,a,r,o)}return this._cache.vao}_invalidate(){this._destroyGL(),this.requestRender()}_createScreenRect(e,t){const[n,i]=e.size,a="string"==typeof t.left?C(t.left)*n:t.left,o="string"==typeof t.right?C(t.right)*n:t.right,r="string"==typeof t.top?C(t.top)*i:t.top,l="string"==typeof t.bottom?C(t.bottom)*i:t.bottom,s=a,c=r;return{x:s,y:c,width:Math.max(n-o-s,0),height:Math.max(i-l-c,0)}}_createMesh(e,t){switch(t.type){case"rect":return b.fromRect(this._createScreenRect(e,t));case"path":return b.fromPath(t);case"geometry":return b.fromGeometry(e,t);default:return S.error(new r.a("mapview-bad-type","Unable to create ClippingInfo mesh from clip of type: ${clip.type}")),b.fromRect({x:0,y:0,width:1,height:1})}}}var O=T,z=n(502);class V extends o.a{constructor(){super(...arguments),this.name=this.constructor.name}set clips(e){this._clips=e,this.children.forEach(t=>t.clips=e),this._updateClippingInfo()}doRender(e){const t=this.createRenderParams(e),{painter:n,globalOpacity:i,profiler:a,drawPhase:o}=t,r=o===z.c.LABEL?1:i*this.computedOpacity;a.recordContainerStart(this.name),n.beforeRenderLayer(t,this._clippingInfos?255:0,r),this.updateTransforms(e.state),this.renderChildren(t),n.compositeLayer(t,r),a.recordContainerEnd()}renderChildren(e){Object(i.h)(this._renderPasses)&&(this._renderPasses=this.prepareRenderPasses(e.painter));for(const n of this.children)n.beforeRender(e);for(const n of this._renderPasses)try{n.render(e)}catch(t){}for(const n of this.children)n.afterRender(e)}createRenderParams(e){return{...e,requireFBO:this.requiresDedicatedFBO}}prepareRenderPasses(e){return[e.registerRenderPass({name:"clip",brushes:[a.a.clip],target:()=>this._clippingInfos,drawPhase:z.c.MAP|z.c.LABEL|z.c.LABEL_ALPHA|z.c.DEBUG|z.c.HIGHLIGHT})]}updateTransforms(e){for(const t of this.children)t.setTransform(e)}onAttach(){super.onAttach(),this._updateClippingInfo()}onDetach(){super.onDetach(),this._updateClippingInfo()}_updateClippingInfo(){if(Object(i.i)(this._clippingInfos)&&(this._clippingInfos.forEach(e=>e.destroy()),this._clippingInfos=null),!this.stage)return;const e=this._clips;Object(i.i)(e)&&e.length&&(this._clippingInfos=e.items.map(e=>O.fromClipArea(this.stage,e))),this.requestRender()}}t.a=V},580:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var i,a,o={exports:{}};i=o,void 0!==(a=function(){function e(e,n,a){a=a||2;var o,r,l,c,u,f,v,d=n&&n.length,m=d?n[0]*a:e.length,_=t(e,0,m,a,!0),p=[];if(!_||_.next===_.prev)return p;if(d&&(_=s(e,n,_,a)),e.length>80*a){o=l=e[0],r=c=e[1];for(var g=a;g<m;g+=a)(u=e[g])<o&&(o=u),(f=e[g+1])<r&&(r=f),u>l&&(l=u),f>c&&(c=f);v=0!==(v=Math.max(l-o,c-r))?1/v:0}return i(_,p,a,o,r,v),p}function t(e,t,n,i,a){var o,r;if(a===V(e,t,n,i)>0)for(o=t;o<n;o+=i)r=T(o,e[o],e[o+1],r);else for(o=n-i;o>=t;o-=i)r=T(o,e[o],e[o+1],r);return r&&x(r,r.next)&&(O(r),r=r.next),r}function n(e,t){if(!e)return e;t||(t=e);var n,i=e;do{if(n=!1,i.steiner||!x(i,i.next)&&0!==g(i.prev,i,i.next))i=i.next;else{if(O(i),(i=t=i.prev)===i.next)break;n=!0}}while(n||i!==t);return t}function i(e,t,s,c,u,f,d){if(e){!d&&f&&v(e,c,u,f);for(var m,_,p=e;e.prev!==e.next;)if(m=e.prev,_=e.next,f?o(e,c,u,f):a(e))t.push(m.i/s),t.push(e.i/s),t.push(_.i/s),O(e),e=_.next,p=_.next;else if((e=_)===p){d?1===d?i(e=r(n(e),t,s),t,s,c,u,f,2):2===d&&l(e,t,s,c,u,f):i(n(e),t,s,c,u,f,1);break}}}function a(e){var t=e.prev,n=e,i=e.next;if(g(t,n,i)>=0)return!1;for(var a=e.next.next;a!==e.prev;){if(_(t.x,t.y,n.x,n.y,i.x,i.y,a.x,a.y)&&g(a.prev,a,a.next)>=0)return!1;a=a.next}return!0}function o(e,t,n,i){var a=e.prev,o=e,r=e.next;if(g(a,o,r)>=0)return!1;for(var l=a.x<o.x?a.x<r.x?a.x:r.x:o.x<r.x?o.x:r.x,s=a.y<o.y?a.y<r.y?a.y:r.y:o.y<r.y?o.y:r.y,c=a.x>o.x?a.x>r.x?a.x:r.x:o.x>r.x?o.x:r.x,u=a.y>o.y?a.y>r.y?a.y:r.y:o.y>r.y?o.y:r.y,f=d(l,s,t,n,i),v=d(c,u,t,n,i),m=e.prevZ,p=e.nextZ;m&&m.z>=f&&p&&p.z<=v;){if(m!==e.prev&&m!==e.next&&_(a.x,a.y,o.x,o.y,r.x,r.y,m.x,m.y)&&g(m.prev,m,m.next)>=0)return!1;if(m=m.prevZ,p!==e.prev&&p!==e.next&&_(a.x,a.y,o.x,o.y,r.x,r.y,p.x,p.y)&&g(p.prev,p,p.next)>=0)return!1;p=p.nextZ}for(;m&&m.z>=f;){if(m!==e.prev&&m!==e.next&&_(a.x,a.y,o.x,o.y,r.x,r.y,m.x,m.y)&&g(m.prev,m,m.next)>=0)return!1;m=m.prevZ}for(;p&&p.z<=v;){if(p!==e.prev&&p!==e.next&&_(a.x,a.y,o.x,o.y,r.x,r.y,p.x,p.y)&&g(p.prev,p,p.next)>=0)return!1;p=p.nextZ}return!0}function r(e,t,i){var a=e;do{var o=a.prev,r=a.next.next;!x(o,r)&&h(o,a,a.next,r)&&S(o,r)&&S(r,o)&&(t.push(o.i/i),t.push(a.i/i),t.push(r.i/i),O(a),O(a.next),a=e=r),a=a.next}while(a!==e);return n(a)}function l(e,t,a,o,r,l){var s=e;do{for(var c=s.next.next;c!==s.prev;){if(s.i!==c.i&&p(s,c)){var u=C(s,c);return s=n(s,s.next),u=n(u,u.next),i(s,t,a,o,r,l),void i(u,t,a,o,r,l)}c=c.next}s=s.next}while(s!==e)}function s(e,i,a,o){var r,l,s,f=[];for(r=0,l=i.length;r<l;r++)(s=t(e,i[r]*o,r<l-1?i[r+1]*o:e.length,o,!1))===s.next&&(s.steiner=!0),f.push(m(s));for(f.sort(c),r=0;r<f.length;r++)a=n(a=u(f[r],a),a.next);return a}function c(e,t){return e.x-t.x}function u(e,t){var i=function(e,t){var n,i=t,a=e.x,o=e.y,r=-1/0;do{if(o<=i.y&&o>=i.next.y&&i.next.y!==i.y){var l=i.x+(o-i.y)*(i.next.x-i.x)/(i.next.y-i.y);if(l<=a&&l>r){if(r=l,l===a){if(o===i.y)return i;if(o===i.next.y)return i.next}n=i.x<i.next.x?i:i.next}}i=i.next}while(i!==t);if(!n)return null;if(a===r)return n;var s,c=n,u=n.x,v=n.y,d=1/0;i=n;do{a>=i.x&&i.x>=u&&a!==i.x&&_(o<v?a:r,o,u,v,o<v?r:a,o,i.x,i.y)&&(s=Math.abs(o-i.y)/(a-i.x),S(i,e)&&(s<d||s===d&&(i.x>n.x||i.x===n.x&&f(n,i)))&&(n=i,d=s)),i=i.next}while(i!==c);return n}(e,t);if(!i)return t;var a=C(i,e),o=n(i,i.next);return n(a,a.next),t===i?o:t}function f(e,t){return g(e.prev,e,t.prev)<0&&g(t.next,e,e.next)<0}function v(e,t,n,i){var a=e;do{if(null===a.z&&(a.z=d(a.x,a.y,t,n,i)),a.prev.next!==a||a.next.prev!==a)return a.prev.next=a,a.next.prev=a,v(e,t,n,i);a.prevZ=a.prev,a.nextZ=a.next,a=a.next}while(a!==e);a.prevZ.nextZ=null,a.prevZ=null,function(e){var t,n,i,a,o,r,l,s,c=1;do{for(n=e,e=null,o=null,r=0;n;){for(r++,i=n,l=0,t=0;t<c&&(l++,i=i.nextZ);t++);for(s=c;l>0||s>0&&i;)0!==l&&(0===s||!i||n.z<=i.z)?(a=n,n=n.nextZ,l--):(a=i,i=i.nextZ,s--),o?o.nextZ=a:e=a,a.prevZ=o,o=a;n=i}o.nextZ=null,c*=2}while(r>1)}(a)}function d(e,t,n,i,a){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-n)*a)|e<<8))|e<<4))|e<<2))|e<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-i)*a)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function m(e){var t=e,n=e;do{(t.x<n.x||t.x===n.x&&t.y<n.y)&&(n=t),t=t.next}while(t!==e);return n}function _(e,t,n,i,a,o,r,l){return(a-r)*(t-l)-(e-r)*(o-l)>=0&&(e-r)*(i-l)-(n-r)*(t-l)>=0&&(n-r)*(o-l)-(a-r)*(i-l)>=0}function p(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!function(e,t){var n=e;do{if(n.i!==e.i&&n.next.i!==e.i&&n.i!==t.i&&n.next.i!==t.i&&h(n,n.next,e,t))return!0;n=n.next}while(n!==e);return!1}(e,t)&&(S(e,t)&&S(t,e)&&function(e,t){var n=e,i=!1,a=(e.x+t.x)/2,o=(e.y+t.y)/2;do{n.y>o!=n.next.y>o&&n.next.y!==n.y&&a<(n.next.x-n.x)*(o-n.y)/(n.next.y-n.y)+n.x&&(i=!i),n=n.next}while(n!==e);return i}(e,t)&&(g(e.prev,e,t.prev)||g(e,t.prev,t))||x(e,t)&&g(e.prev,e,e.next)>0&&g(t.prev,t,t.next)>0)}function g(e,t,n){return(t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y)}function x(e,t){return e.x===t.x&&e.y===t.y}function h(e,t,n,i){var a=y(g(e,t,n)),o=y(g(e,t,i)),r=y(g(n,i,e)),l=y(g(n,i,t));return a!==o&&r!==l||!(0!==a||!b(e,n,t))||!(0!==o||!b(e,i,t))||!(0!==r||!b(n,e,i))||!(0!==l||!b(n,t,i))}function b(e,t,n){return t.x<=Math.max(e.x,n.x)&&t.x>=Math.min(e.x,n.x)&&t.y<=Math.max(e.y,n.y)&&t.y>=Math.min(e.y,n.y)}function y(e){return e>0?1:e<0?-1:0}function S(e,t){return g(e.prev,e,e.next)<0?g(e,t,e.next)>=0&&g(e,e.prev,t)>=0:g(e,t,e.prev)<0||g(e,e.next,t)<0}function C(e,t){var n=new z(e.i,e.x,e.y),i=new z(t.i,t.x,t.y),a=e.next,o=t.prev;return e.next=t,t.prev=e,n.next=a,a.prev=n,i.next=n,n.prev=i,o.next=i,i.prev=o,i}function T(e,t,n,i){var a=new z(e,t,n);return i?(a.next=i.next,a.prev=i,i.next.prev=a,i.next=a):(a.prev=a,a.next=a),a}function O(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function z(e,t,n){this.i=e,this.x=t,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function V(e,t,n,i){for(var a=0,o=t,r=n-i;o<n;o+=i)a+=(e[r]-e[o])*(e[o+1]+e[r+1]),r=o;return a}return e.deviation=function(e,t,n,i){var a=t&&t.length,o=a?t[0]*n:e.length,r=Math.abs(V(e,0,o,n));if(a)for(var l=0,s=t.length;l<s;l++){var c=t[l]*n,u=l<s-1?t[l+1]*n:e.length;r-=Math.abs(V(e,c,u,n))}var f=0;for(l=0;l<i.length;l+=3){var v=i[l]*n,d=i[l+1]*n,m=i[l+2]*n;f+=Math.abs((e[v]-e[m])*(e[d+1]-e[v+1])-(e[v]-e[d])*(e[m+1]-e[v+1]))}return 0===r&&0===f?0:Math.abs((f-r)/r)},e.flatten=function(e){for(var t=e[0][0].length,n={vertices:[],holes:[],dimensions:t},i=0,a=0;a<e.length;a++){for(var o=0;o<e[a].length;o++)for(var r=0;r<t;r++)n.vertices.push(e[a][o][r]);a>0&&(i+=e[a-1].length,n.holes.push(i))}return n},e}())&&(i.exports=a);var r=o.exports},581:function(e,t,n){"use strict";n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return a}));var i=n(611);function a(e){let t="";for(const n in e){const i=e[n];if("boolean"==typeof i)i&&(t+=`#define ${n}\n`);else if("number"==typeof i)t+=`#define ${n} ${i.toFixed()}\n`;else if("object"==typeof i){const e=i.options;let a=0;for(const n in e)t+=`#define ${e[n]} ${(a++).toFixed()}\n`;t+=`#define ${n} ${e[i.value]}\n`}}return t}function o(e,t,n,a){n=n||{},a=a||"";const o="function"==typeof t.shaders?t.shaders(n):t.shaders;return new i.a(e,a+o.vertexShader,a+o.fragmentShader,t.attributes)}},582:function(e,t,n){"use strict";var i=n(709),a=n(516),o=(n(514),n(5),n(512),n(513),n(518),n(581)),r=(n(511),n(515)),l=n(599),s=n(785);class c extends l.a{constructor(){super(...arguments),this._color=Object(i.a)(1,0,0,1),this._initialized=!1}dispose(){this._solidProgram&&(this._solidProgram.dispose(),this._solidProgram=null),this._solidVertexArrayObject&&(this._solidVertexArrayObject.dispose(),this._solidVertexArrayObject=null)}prepareState({context:e},t){e.setDepthWriteEnabled(!1),e.setDepthTestEnabled(!1),e.setStencilTestEnabled(!0),e.setBlendingEnabled(!1),e.setColorMask(!1,!1,!1,!1),e.setStencilOp(7680,7680,7681),e.setStencilWriteMask(255),e.setStencilFunctionSeparate(1032,516,t.stencilRef,255)}draw(e,t){const{context:n}=e;this._initialized||this._initialize(n),n.bindVAO(this._solidVertexArrayObject),n.useProgram(this._solidProgram),this._solidProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),this._solidProgram.setUniform2fv("u_coord_range",t.coordRange),this._solidProgram.setUniform1f("u_depth",0),this._solidProgram.setUniform4fv("u_color",this._color),n.drawArrays(5,0,4),n.bindVAO()}_initialize(e){if(this._initialized)return!0;const t=Object(o.a)(e,s.a);if(!t)return!1;const n=new Int8Array([0,0,1,0,0,1,1,1]),i=a.a.createVertex(e,35044,n),l=new r.a(e,s.a.attributes,{geometry:[{name:"a_pos",count:2,type:5120,offset:0,stride:2,normalized:!1,divisor:0}]},{geometry:i});return this._solidProgram=t,this._solidVertexArrayObject=l,this._initialized=!0,!0}}t.a=c},585:function(e,t,n){"use strict";var i=n(709),a=n(516),o=(n(514),n(5),n(512),n(513),n(518),n(581)),r=n(511),l=n(515),s=n(599),c=n(785),u=n(629);const f={shaders:{vertexShader:Object(u.a)("tileInfo/tileInfo.vert"),fragmentShader:Object(u.a)("tileInfo/tileInfo.frag")},attributes:new Map([["a_pos",0]])};class v extends s.a{constructor(){super(...arguments),this._color=Object(i.a)(1,0,0,1)}dispose(){this._outlineProgram&&(this._outlineProgram.dispose(),this._outlineProgram=null),this._tileInfoProgram&&(this._tileInfoProgram.dispose(),this._tileInfoProgram=null),this._outlineVertexArrayObject&&(this._outlineVertexArrayObject.dispose(),this._outlineVertexArrayObject=null),this._tileInfoVertexArrayObject&&(this._tileInfoVertexArrayObject.dispose(),this._tileInfoVertexArrayObject=null),this._canvas=null}prepareState({context:e}){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(1,771,1,771),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!1)}draw(e,t){const{context:n}=e;if(!t.isReady)return;this._loadWGLResources(n),n.bindVAO(this._outlineVertexArrayObject),n.useProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),this._outlineProgram.setUniform2f("u_coord_range",t.coordRange[0],t.coordRange[1]),this._outlineProgram.setUniform1f("u_depth",0),this._outlineProgram.setUniform4fv("u_color",this._color),n.drawArrays(3,0,4),n.bindVAO();const i=this._getTexture(n,t);i&&(n.bindVAO(this._tileInfoVertexArrayObject),n.useProgram(this._tileInfoProgram),n.bindTexture(i,0),this._tileInfoProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),this._tileInfoProgram.setUniform1f("u_depth",0),this._tileInfoProgram.setUniform2f("u_coord_ratio",t.coordRange[0]/t.size[0],t.coordRange[1]/t.size[1]),this._tileInfoProgram.setUniform2f("u_delta",8,8),this._tileInfoProgram.setUniform2f("u_dimensions",i.descriptor.width,i.descriptor.height),n.drawArrays(5,0,4),n.bindVAO())}_loadWGLResources(e){if(this._outlineProgram&&this._tileInfoProgram)return;const t=Object(o.a)(e,c.a),n=Object(o.a)(e,f),i={geometry:[{name:"a_pos",count:2,type:5120,offset:0,stride:2,normalized:!1,divisor:0}]},r=new Int8Array([0,0,1,0,1,1,0,1]),s=a.a.createVertex(e,35044,r),u=new l.a(e,c.a.attributes,i,{geometry:s}),v=new Int8Array([0,0,1,0,0,1,1,1]),d=a.a.createVertex(e,35044,v),m=new l.a(e,f.attributes,i,{geometry:d});this._outlineProgram=t,this._tileInfoProgram=n,this._outlineVertexArrayObject=u,this._tileInfoVertexArrayObject=m}_getTexture(e,t){if(t.texture&&t.triangleCountReportedInDebug===t.triangleCount)return t.texture;t.triangleCountReportedInDebug=t.triangleCount,this._canvas||(this._canvas=document.createElement("canvas"),this._canvas.setAttribute("id","canvas2d"),this._canvas.setAttribute("width","300"),this._canvas.setAttribute("height","32"),this._canvas.setAttribute("style","display:none"));const n=t.triangleCount;let i=t.key.id;t.triangleCount>0&&(i+=", "+n);const a=this._canvas,o=a.getContext("2d");return o.font="24px sans-serif",o.textAlign="left",o.textBaseline="top",o.clearRect(0,0,300,32),n>1e5?(o.fillStyle="red",o.fillRect(0,0,300,32),o.fillStyle="black"):(o.clearRect(0,0,300,32),o.fillStyle="blue"),o.fillText(i,0,0),t.texture=new r.a(e,{target:3553,pixelFormat:6408,dataType:5121,samplingMode:9728,wrapMode:33071},a),t.texture}}t.a=v},596:function(e,t,n){"use strict";n.d(t,"a",(function(){return Z}));var i=n(501),a=n(615),o=n(599);const r={nearest:{defines:[],samplingMode:9728,mips:!1},bilinear:{defines:[],samplingMode:9729,mips:!1},bicubic:{defines:["bicubic"],samplingMode:9729,mips:!1},trilinear:{defines:[],samplingMode:9987,mips:!0}};class l extends o.a{constructor(){super(...arguments),this._desc={vsPath:"raster/bitmap",fsPath:"raster/bitmap",attributes:new Map([["a_position",0],["a_texcoord",1]])}}dispose(){this._quad&&this._quad.dispose()}prepareState({context:e},t){e.setBlendingEnabled(!0),"additive"===t.blendFunction?e.setBlendFunctionSeparate(1,1,1,1):e.setBlendFunctionSeparate(1,771,1,771),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(514,t.stencilRef,255)}draw(e,t){const{context:n,renderingOptions:o,painter:l}=e;if(!t.source)return;e.timeline.begin(this.name),this._quad||(this._quad=new a.a(n,[0,0,1,0,0,1,1,1]));const s=((e,t,n)=>{if("dynamic"===n.samplingMode){const{state:n}=e,i=t.resolution/t.pixelRatio/n.resolution,a=Math.round(e.pixelRatio)!==e.pixelRatio,o=i>1.05||i<.95;return n.rotation||o||a||t.isSourceScaled||t.rotation?r.bilinear:r.nearest}return r[n.samplingMode]})(e,t,o),c=l.materialManager.getProgram(e,this._desc,s.defines),{coordScale:u,computedOpacity:f,transforms:v}=t;t.setSamplingProfile(s),t.bind(e.context,i.v),n.useProgram(c),c.setUniformMatrix3fv("u_dvsMat3",v.dvs),c.setUniform1i("u_texture",i.v),c.setUniform2fv("u_coordScale",u),c.setUniform1f("u_opacity",f),this._quad.draw(),e.timeline.end(this.name)}}var s=l,c=n(3),u=n(709),f=n(504),v=n(785),d=n(581);class m extends o.a{constructor(){super(...arguments),this._color=Object(u.a)(0,1,0,1)}dispose(){this._program&&this._program.dispose()}prepareState({context:e}){e.setStencilTestEnabled(!0),e.setBlendingEnabled(!1),e.setFaceCullingEnabled(!1),e.setColorMask(!1,!1,!1,!1),e.setStencilOp(7680,7680,7681),e.setStencilWriteMask(255),e.setStencilFunction(519,0,255)}draw(e,t){const{context:n,state:i}=e,a=Object(f.f)("clip",{geometry:[{location:0,name:"a_pos",count:2,type:5122}]}),o=t.getVAO(n,i,a.attributes,a.bufferLayouts);Object(c.h)(o.indexBuffer)||(this._program||(this._program=Object(d.a)(n,v.a)),n.useProgram(this._program),this._program.setUniform2fv("u_coord_range",[1,1]),this._program.setUniform4fv("u_color",this._color),this._program.setUniformMatrix3fv("u_dvsMat3",i.displayMat3),n.bindVAO(o),n.drawElements(4,o.indexBuffer.size,5125,0),n.bindVAO())}}var _=m,p=n(585),g=n(582),x=n(52),h=n(245),b=n(516),y=(n(514),n(5),n(512),n(513),n(518),n(511)),S=n(515),C=n(502),T=n(505);class O extends o.a{constructor(){super(...arguments),this._color=Object(u.a)(1,0,0,1),this._patternMatrix=Object(h.b)(),this._programOptions={id:!1,pattern:!1}}dispose(){this._vao&&(this._vao.dispose(),this._vao=null)}drawMany(e,t){const{context:n,painter:a,styleLayerUID:o}=e;this._loadWGLResources(e);const r=e.displayLevel,l=e.styleLayer,s=l.backgroundMaterial,u=a.vectorTilesMaterialManager,f=l.getPaintValue("background-color",r),v=l.getPaintValue("background-opacity",r),d=l.getPaintValue("background-pattern",r),m=void 0!==d,_=f[3]*v,p=1|window.devicePixelRatio,g=e.spriteMosaic;let h,b;const y=p>i.F?2:1,S=e.drawPhase===C.c.HITTEST,O=this._programOptions;O.id=S,O.pattern=m;const z=u.getMaterialProgram(n,s,O);if(n.bindVAO(this._vao),n.useProgram(z),m){const e=g.getMosaicItemPosition(d,!0);if(Object(c.i)(e)){const{tl:t,br:a,page:o}=e;h=a[0]-t[0],b=a[1]-t[1];const r=g.getPageSize(o);Object(c.i)(r)&&(g.bind(n,9729,o,i.H),z.setUniform4f("u_tlbr",t[0],t[1],a[0],a[1]),z.setUniform2fv("u_mosaicSize",r),z.setUniform1i("u_texture",i.H))}z.setUniform1f("u_opacity",v)}else this._color[0]=_*f[0],this._color[1]=_*f[1],this._color[2]=_*f[2],this._color[3]=_,z.setUniform4fv("u_color",this._color);if(z.setUniform1f("u_depth",l.z||0),S){const e=Object(T.c)(o+1);z.setUniform4fv("u_id",e)}for(const i of t){if(z.setUniform1f("u_coord_range",i.coordRange[0]),z.setUniformMatrix3fv("u_dvsMat3",i.transforms.dvs),m){const e=Math.max(2**(Math.round(r)-i.key.level),1),t=y*i.size[0]*e,n=t/Object(x.l)(h),a=t/Object(x.l)(b);this._patternMatrix[0]=n,this._patternMatrix[4]=a,z.setUniformMatrix3fv("u_pattern_matrix",this._patternMatrix)}n.setStencilFunction(514,i.stencilRef,255),n.drawArrays(5,0,4)}}_loadWGLResources(e){if(this._vao)return;const{context:t,styleLayer:n}=e,i=n.backgroundMaterial,a=new Int8Array([0,0,1,0,0,1,1,1]),o=b.a.createVertex(t,35044,a),r=new S.a(t,i.getAttributeLocations(),i.getLayoutInfo(),{geometry:o});this._vao=r}}class z extends o.a{constructor(){super(...arguments),this._programOptions={id:!1}}dispose(){}drawMany(e,t){const{context:n,displayLevel:i,requiredLevel:a,state:o,drawPhase:r,painter:l,spriteMosaic:s,styleLayerUID:u}=e;if(!t.some(e=>{var t,n;return null!=(t=null==(n=e.layerData.get(u))?void 0:n.circleIndexCount)&&t}))return;const f=e.styleLayer,v=f.circleMaterial,d=l.vectorTilesMaterialManager,m=f.getPaintValue("circle-translate",i),_=f.getPaintValue("circle-translate-anchor",i),p=r===C.c.HITTEST,g=this._programOptions;g.id=p;const x=d.getMaterialProgram(n,v,g);n.useProgram(x),x.setUniformMatrix3fv("u_displayMat3",1===_?o.displayMat3:o.displayViewMat3),x.setUniform2fv("u_circleTranslation",m),x.setUniform1f("u_depth",f.z),x.setUniform1f("u_antialiasingWidth",1.2);let h=-1;if(p){const e=Object(T.c)(u+1);x.setUniform4fv("u_id",e)}for(const b of t){if(!b.layerData.has(u))continue;b.key.level!==h&&(h=b.key.level,v.setDataUniforms(x,i,f,h,s));const e=b.layerData.get(u);if(!e.circleIndexCount)continue;e.prepareForRendering(n);const t=e.circleVertexArrayObject;Object(c.h)(t)||(n.bindVAO(t),x.setUniformMatrix3fv("u_dvsMat3",b.transforms.dvs),a!==b.key.level?n.setStencilFunction(514,b.stencilRef,255):n.setStencilFunction(516,255,255),n.drawElements(4,e.circleIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*e.circleIndexStart),b.triangleCount+=e.circleIndexCount/3)}}}class V extends o.a{constructor(){super(...arguments),this._fillProgramOptions={id:!1,pattern:!1},this._outlineProgramOptions={id:!1}}dispose(){}drawMany(e,t){const{displayLevel:n,drawPhase:i,renderPass:a,spriteMosaic:o,styleLayerUID:r}=e;let l=!1;for(const b of t)if(b.layerData.has(r)){const e=b.layerData.get(r);if(e.fillIndexCount>0||e.outlineIndexCount>0){l=!0;break}}if(!l)return;const s=e.styleLayer,c=s.getPaintProperty("fill-pattern"),u=void 0!==c,f=u&&c.isDataDriven;let v;if(u&&!f){const e=c.getValue(n);v=o.getMosaicItemPosition(e,!0)}const d=!u&&s.getPaintValue("fill-antialias",n);let m,_=!0,p=1;if(!u){const e=s.getPaintProperty("fill-color"),t=s.getPaintProperty("fill-opacity");if(!(null!=e&&e.isDataDriven||null!=t&&t.isDataDriven)){const e=s.getPaintValue("fill-color",n);p=s.getPaintValue("fill-opacity",n)*e[3],p>=1&&(_=!1)}}if(_&&"opaque"===a)return;i===C.c.HITTEST&&(m=Object(T.c)(r+1));const g=s.getPaintValue("fill-translate",n),x=s.getPaintValue("fill-translate-anchor",n);(_||"translucent"!==a)&&this._drawFill(e,r,s,t,g,x,u,v,f,m);const h=!s.hasDataDrivenOutlineColor&&s.outlineUsesFillColor&&p<1;d&&"opaque"!==a&&!h&&this._drawOutline(e,r,s,t,g,x,m)}_drawFill(e,t,n,a,o,r,l,s,u,f){if(l&&Object(c.h)(s))return;const{context:v,displayLevel:d,state:m,drawPhase:_,painter:p,pixelRatio:g,spriteMosaic:x}=e,h=n.fillMaterial,b=p.vectorTilesMaterialManager,y=g>i.F?2:1,S=_===C.c.HITTEST,T=this._fillProgramOptions;T.id=S,T.pattern=l;const O=b.getMaterialProgram(v,h,T);if(v.useProgram(O),Object(c.i)(s)){const{page:e}=s,t=x.getPageSize(e);Object(c.i)(t)&&(x.bind(v,9729,e,i.H),O.setUniform2fv("u_mosaicSize",t),O.setUniform1i("u_texture",i.H))}O.setUniformMatrix3fv("u_displayMat3",1===r?m.displayMat3:m.displayViewMat3),O.setUniform2fv("u_fillTranslation",o),O.setUniform1f("u_depth",n.z+1/65536),S&&O.setUniform4fv("u_id",f);let z=-1;for(const C of a){if(!C.layerData.has(t))continue;C.key.level!==z&&(z=C.key.level,h.setDataUniforms(O,d,n,z,x));const e=C.layerData.get(t);if(!e.fillIndexCount)continue;e.prepareForRendering(v);const a=e.fillVertexArrayObject;if(!Object(c.h)(a)){if(v.bindVAO(a),O.setUniformMatrix3fv("u_dvsMat3",C.transforms.dvs),v.setStencilFunction(514,C.stencilRef,255),l){const e=Math.max(2**(Math.round(d)-C.key.level),1),t=C.coordRange[0]/(y*C.size[0]*e);O.setUniform1f("u_patternFactor",t)}if(u){const t=e.patternMap;if(!t)continue;for(const[e,n]of t){const t=x.getPageSize(e);Object(c.i)(t)&&(x.bind(v,9729,e,i.H),O.setUniform2fv("u_mosaicSize",t),O.setUniform1i("u_texture",i.H),v.drawElements(4,n[1],5125,Uint32Array.BYTES_PER_ELEMENT*n[0]))}}else v.drawElements(4,e.fillIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*e.fillIndexStart);C.triangleCount+=e.fillIndexCount/3}}}_drawOutline(e,t,n,i,a,o,r){const{context:l,displayLevel:s,state:u,drawPhase:f,painter:v,pixelRatio:d,spriteMosaic:m}=e,_=n.outlineMaterial,p=v.vectorTilesMaterialManager,g=.75/d,x=f===C.c.HITTEST,h=this._outlineProgramOptions;h.id=x;const b=p.getMaterialProgram(l,_,h);l.useProgram(b),b.setUniformMatrix3fv("u_displayMat3",1===o?u.displayMat3:u.displayViewMat3),b.setUniform2fv("u_fillTranslation",a),b.setUniform1f("u_depth",n.z+1/65536),b.setUniform1f("u_outline_width",g),x&&b.setUniform4fv("u_id",r);let y=-1;for(const S of i){if(!S.layerData.has(t))continue;S.key.level!==y&&(y=S.key.level,_.setDataUniforms(b,s,n,y,m));const e=S.layerData.get(t);if(e.prepareForRendering(l),!e.outlineIndexCount)continue;const i=e.outlineVertexArrayObject;Object(c.h)(i)||(l.bindVAO(i),b.setUniformMatrix3fv("u_dvsMat3",S.transforms.dvs),l.setStencilFunction(514,S.stencilRef,255),l.drawElements(4,e.outlineIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*e.outlineIndexStart),S.triangleCount+=e.outlineIndexCount/3)}}}class D extends o.a{constructor(){super(...arguments),this._programOptions={id:!1,pattern:!1,sdf:!1}}dispose(){}drawMany(e,t){const{context:n,displayLevel:a,state:o,drawPhase:r,painter:l,pixelRatio:s,spriteMosaic:u,styleLayerUID:f}=e;if(!t.some(e=>{var t,n;return null!=(t=null==(n=e.layerData.get(f))?void 0:n.lineIndexCount)&&t}))return;const v=e.styleLayer,d=v.lineMaterial,m=l.vectorTilesMaterialManager,_=v.getPaintValue("line-translate",a),p=v.getPaintValue("line-translate-anchor",a),g=v.getPaintProperty("line-pattern"),x=void 0!==g,h=x&&g.isDataDriven;let b,y;if(x&&!h){const e=g.getValue(a);b=u.getMosaicItemPosition(e)}let S=!1;if(!x){const e=v.getPaintProperty("line-dasharray");if(y=void 0!==e,S=y&&e.isDataDriven,y&&!S){const t=e.getValue(a),n=v.getDashKey(t,v.getLayoutValue("line-cap",a));b=u.getMosaicItemPosition(n)}}const O=1/s,z=r===C.c.HITTEST,V=this._programOptions;V.id=z,V.pattern=x,V.sdf=y;const D=m.getMaterialProgram(n,d,V);if(n.useProgram(D),D.setUniformMatrix3fv("u_displayViewMat3",o.displayViewMat3),D.setUniformMatrix3fv("u_displayMat3",1===p?o.displayMat3:o.displayViewMat3),D.setUniform2fv("u_lineTranslation",_),D.setUniform1f("u_depth",v.z),D.setUniform1f("u_antialiasing",O),z){const e=Object(T.c)(f+1);D.setUniform4fv("u_id",e)}if(b&&Object(c.i)(b)){const{page:e}=b,t=u.getPageSize(e);Object(c.i)(t)&&(u.bind(n,9729,e,i.H),D.setUniform2fv("u_mosaicSize",t),D.setUniform1i("u_texture",i.H))}let I=-1;for(const C of t){if(!C.layerData.has(f))continue;C.key.level!==I&&(I=C.key.level,d.setDataUniforms(D,a,v,I,u));const e=2**(a-I)/s;D.setUniform1f("u_zoomFactor",e);const t=C.layerData.get(f);if(!t.lineIndexCount)continue;t.prepareForRendering(n);const o=t.lineVertexArrayObject;if(!Object(c.h)(o)){if(n.bindVAO(o),D.setUniformMatrix3fv("u_dvsMat3",C.transforms.dvs),n.setStencilFunction(514,C.stencilRef,255),h||S){const e=t.patternMap;if(!e)continue;for(const[t,a]of e){const e=u.getPageSize(t);Object(c.i)(e)&&(u.bind(n,9729,t,i.H),D.setUniform2fv("u_mosaicSize",e),D.setUniform1i("u_texture",i.H),n.drawElements(4,a[1],5125,Uint32Array.BYTES_PER_ELEMENT*a[0]))}}else n.drawElements(4,t.lineIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*t.lineIndexStart);C.triangleCount+=t.lineIndexCount/3}}}}var I=n(295),P=n(635),M=n(526);class A extends o.a{constructor(){super(...arguments),this._iconProgramOptions={id:!1,sdf:!1},this._sdfProgramOptions={id:!1},this._spritesTextureSize=Object(I.a)()}dispose(){}drawMany(e,t){const{drawPhase:n,styleLayerUID:i}=e,a=e.styleLayer;let o;n===C.c.HITTEST&&(o=Object(T.c)(i+1)),this._drawIcons(e,a,t,o),this._drawText(e,a,t,o)}_drawIcons(e,t,n,a){const{context:o,displayLevel:r,drawPhase:l,painter:s,spriteMosaic:u,state:f,styleLayerUID:v}=e,d=t.iconMaterial,m=s.vectorTilesMaterialManager;let _,p=!1;for(const i of n)if(i.layerData.has(v)&&(_=i.layerData.get(v),_.iconPerPageElementsMap.size>0)){p=!0;break}if(!p)return;const g=t.getPaintValue("icon-translate",r),x=t.getPaintValue("icon-translate-anchor",r);let h=t.getLayoutValue("icon-rotation-alignment",r);2===h&&(h=0===t.getLayoutValue("symbol-placement",r)?1:0);const b=0===h,y=t.getLayoutValue("icon-keep-upright",r)&&b,S=_.isIconSDF,T=l===C.c.HITTEST,O=this._iconProgramOptions;O.id=T,O.sdf=S;const z=m.getMaterialProgram(o,d,O);o.useProgram(z),z.setUniformMatrix3fv("u_displayViewMat3",0===h?f.displayViewMat3:f.displayMat3),z.setUniformMatrix3fv("u_displayMat3",1===x?f.displayMat3:f.displayViewMat3),z.setUniform2fv("u_iconTranslation",g),z.setUniform1f("u_depth",t.z),z.setUniform1f("u_mapRotation",Object(M.b)(f.rotation)),z.setUniform1f("u_keepUpright",y?1:0),z.setUniform1f("u_level",10*r),z.setUniform1i("u_texture",i.H),z.setUniform1f("u_fadeDuration",P.d/1e3),T&&z.setUniform4fv("u_id",a);let V=-1;for(const i of n){if(!i.layerData.has(v))continue;if(i.key.level!==V&&(V=i.key.level,d.setDataUniforms(z,r,t,V,u)),_=i.layerData.get(v),0===_.iconPerPageElementsMap.size)continue;_.prepareForRendering(o),_.updateOpacityInfo();const n=_.iconVertexArrayObject;if(!Object(c.h)(n)){o.bindVAO(n),z.setUniformMatrix3fv("u_dvsMat3",i.transforms.dvs),z.setUniform1f("u_time",(performance.now()-_.lastOpacityUpdate)/1e3);for(const[t,n]of _.iconPerPageElementsMap)this._renderIconRange(e,z,n,t,i)}}}_renderIconRange(e,t,n,a,o){const{context:r,spriteMosaic:l}=e;this._spritesTextureSize[0]=l.getWidth(a)/4,this._spritesTextureSize[1]=l.getHeight(a)/4,t.setUniform2fv("u_mosaicSize",this._spritesTextureSize),l.bind(r,9729,a,i.H),r.setStencilTestEnabled(!0),r.setStencilFunction(516,255,255),r.setStencilWriteMask(0),r.drawElements(4,n[1],5125,Uint32Array.BYTES_PER_ELEMENT*n[0]),o.triangleCount+=n[1]/3}_drawText(e,t,n,a){const{context:o,displayLevel:r,drawPhase:l,glyphMosaic:s,painter:u,pixelRatio:f,spriteMosaic:v,state:d,styleLayerUID:m}=e,_=t.textMaterial,p=u.vectorTilesMaterialManager;let g,x=!1;for(const i of n)if(i.layerData.has(m)&&(g=i.layerData.get(m),g.glyphPerPageElementsMap.size>0)){x=!0;break}if(!x)return;const h=t.getPaintProperty("text-opacity");if(h&&!h.isDataDriven&&0===h.getValue(r))return;const b=t.getPaintProperty("text-color"),y=!b||b.isDataDriven||b.getValue(r)[3]>0,S=t.getPaintProperty("text-halo-width"),T=t.getPaintProperty("text-halo-color"),O=(!S||S.isDataDriven||S.getValue(r)>0)&&(!T||T.isDataDriven||T.getValue(r)[3]>0);if(!y&&!O)return;let z=t.getLayoutValue("text-rotation-alignment",r);2===z&&(z=0===t.getLayoutValue("symbol-placement",r)?1:0);const V=0===z,D=t.getLayoutValue("text-keep-upright",r)&&V,A=l===C.c.HITTEST,w=.8*3/f;this._glyphTextureSize||(this._glyphTextureSize=Object(I.b)(s.width/4,s.height/4));const E=t.getPaintValue("text-translate",r),F=t.getPaintValue("text-translate-anchor",r),U=this._sdfProgramOptions;U.id=A;const L=p.getMaterialProgram(o,_,U);o.useProgram(L),L.setUniformMatrix3fv("u_displayViewMat3",0===z?d.displayViewMat3:d.displayMat3),L.setUniformMatrix3fv("u_displayMat3",1===F?d.displayMat3:d.displayViewMat3),L.setUniform2fv("u_textTranslation",E),L.setUniform1f("u_depth",t.z+1/65536),L.setUniform2fv("u_mosaicSize",this._glyphTextureSize),L.setUniform1f("u_mapRotation",Object(M.b)(d.rotation)),L.setUniform1f("u_keepUpright",D?1:0),L.setUniform1f("u_level",10*r),L.setUniform1i("u_texture",i.G),L.setUniform1f("u_antialiasingWidth",w),L.setUniform1f("u_fadeDuration",P.d/1e3),A&&L.setUniform4fv("u_id",a);let R=-1;for(const i of n){if(!i.layerData.has(m))continue;if(i.key.level!==R&&(R=i.key.level,_.setDataUniforms(L,r,t,R,v)),g=i.layerData.get(m),0===g.glyphPerPageElementsMap.size)continue;g.prepareForRendering(o),g.updateOpacityInfo();const e=g.textVertexArrayObject;if(Object(c.h)(e))continue;o.bindVAO(e),L.setUniformMatrix3fv("u_dvsMat3",i.transforms.dvs),o.setStencilTestEnabled(!0),o.setStencilFunction(516,255,255),o.setStencilWriteMask(0);const n=(performance.now()-g.lastOpacityUpdate)/1e3;L.setUniform1f("u_time",n),g.glyphPerPageElementsMap.forEach((e,t)=>{this._renderGlyphRange(o,e,t,s,L,O,y,i)})}}_renderGlyphRange(e,t,n,a,o,r,l,s){a.bind(e,9729,n,i.G),r&&(o.setUniform1f("u_halo",1),e.drawElements(4,t[1],5125,Uint32Array.BYTES_PER_ELEMENT*t[0]),s.triangleCount+=t[1]/3),l&&(o.setUniform1f("u_halo",0),e.drawElements(4,t[1],5125,Uint32Array.BYTES_PER_ELEMENT*t[0]),s.triangleCount+=t[1]/3)}}var w=n(349);class E extends o.a{prepareState({context:e},t,n){const i=n&&-1!==n.indexOf("id");e.setBlendingEnabled(!i),e.setBlendFunctionSeparate(1,771,1,771),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(514,t.stencilRef,255)}draw(e,t,n){const i=this.getGeometryType();t.commit(e);const a=t.getGeometry(i);Object(c.h)(a)||(e.timeline.begin(this.name),e.attributeView.bindTextures(e.context),a.forEachCommand(i=>this.drawGeometry(e,t,i,n)))}_setSharedUniforms(e,t,n){const{displayLevel:a,pixelRatio:o,state:r}=t;e.setUniform1f("u_pixelRatio",o),e.setUniformMatrix3fv("u_dvsMat3",n.transforms.dvs),e.setUniformMatrix3fv("u_displayViewMat3",r.displayViewMat3),e.setUniform1f("u_currentZoom",Math.round(a*i.m)),e.setUniform1i("u_attributeTextureSize",t.attributeView.size),e.setUniform1i("u_attributeData0",i.r),e.setUniform1i("u_attributeData1",i.s),e.setUniform1i("u_attributeData2",i.t),e.setUniform1i("u_attributeData3",i.u)}}var F=E,U=n(506);var L=class extends F{constructor(){super(...arguments),this._dotTextureSize=0,this._dotTextures=null,this._dotSamplers=new Int32Array([i.z,i.A])}dispose(){this._disposeTextures()}getGeometryType(){return C.d.FILL}drawGeometry(e,t,n,a){const{context:o,painter:r,rendererInfo:l,requiredLevel:s}=e,c=U.a.load(n.materialKey),{bufferLayouts:u,attributes:v}=(e=>Object(f.f)(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121},...e.dotDensity?[]:[{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_tlbr",count:4,type:5123},{location:4,name:"a_aux1",count:4,type:5121},{location:5,name:"a_aux2",count:2,type:5123},{location:6,name:"a_aux3",count:4,type:5121},{location:7,name:"a_zoomRange",count:2,type:5123}],...e.dotDensity?[{location:2,name:"a_inverseArea",count:1,type:5126}]:[]]}))(c),d=r.materialManager.getMaterialProgram(e,c,"materials/fill",v,a);if(o.useProgram(d),this._setSharedUniforms(d,e,t),c.textureBinding){r.textureManager.bindTextures(o,d,c);const n=1/2**(s-t.key.level)/e.pixelRatio;d.setUniform1f("u_zoomFactor",n)}if(c.vvColor&&(d.setUniform1fv("u_vvColorValues",l.vvColorValues),d.setUniform4fv("u_vvColors",l.vvColors)),c.vvOpacity&&(d.setUniform1fv("u_vvOpacityValues",l.vvOpacityValues),d.setUniform1fv("u_vvOpacities",l.vvOpacities)),c.dotDensity){const n=i.E/l.ddDotSize,a=n*window.devicePixelRatio*n*window.devicePixelRatio,r=1/2**(s-t.key.level),c=1/r*(1/r),u=l.ddDotScale?e.state.scale/l.ddDotScale:1;d.setUniform1f("u_tileZoomFactor",r),d.setUniform1f("u_tileDotsOverArea",a/(i.E*window.devicePixelRatio*i.E*window.devicePixelRatio)),d.setUniformMatrix4fv("u_dotColors",l.ddColors),d.setUniform4fv("u_isActive",l.ddActiveDots),d.setUniform4fv("u_dotBackgroundColor",l.ddBackgroundColor),d.setUniform1f("u_dotValue",Math.max(1,l.ddDotValue*u*c)),this._bindDotDensityTextures(o,d,l,n)}n.draw(o,u,v)}_disposeTextures(){if(this._dotTextures){for(let e=0;e<this._dotTextures.length;e++)this._dotTextures[e].dispose();this._dotTextures=null}}_bindDotDensityTextures(e,t,n,i){const a=this._createDotDensityTextures(e,i,n.ddSeed);t.setUniform1iv("u_dotTextures",this._dotSamplers);for(let o=0;o<a.length;o++)e.bindTexture(a[o],this._dotSamplers[o])}_createDotDensityTextures(e,t,n){if(this._dotTextureSize===t&&this._seed===n||(this._disposeTextures(),this._dotTextureSize=t,this._seed=n),null===this._dotTextures){const i=new w.a(n);this._dotTextures=[this._allocDotDensityTexture(e,t,i),this._allocDotDensityTexture(e,t,i)]}return this._dotTextures}_allocDotDensityTexture(e,t,n){const i=new Float32Array(t*t*4);for(let a=0;a<i.length;a++)i[a]=n.getFloat();return new y.a(e,{wrapMode:10497,pixelFormat:6408,dataType:5126,samplingMode:9728,width:t,height:t},i)}};var R=class extends F{dispose(){}getGeometryType(){return C.d.LABEL}drawGeometry(e,t,n,i){const{context:a,painter:o,state:r,rendererInfo:l}=e,s=U.b.load(n.materialKey),c=s.mapAligned?1:0;if(!c&&Math.abs(t.key.level-Math.round(100*e.displayLevel)/100)>=1)return;const{bufferLayouts:u,attributes:v}=(e=>Object(f.f)(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121},{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_haloColor",count:4,type:5121,normalized:!0},{location:4,name:"a_texAndSize",count:4,type:5121},{location:5,name:"a_refSymbolAndPlacementOffset",count:4,type:5121},{location:6,name:"a_glyphData",count:4,type:5121},{location:7,name:"a_vertexOffset",count:2,type:5122},{location:8,name:"a_texCoords",count:2,type:5123}]}))(s),d=o.materialManager.getMaterialProgram(e,s,"materials/label",v,i);e.context.setStencilFunction(514,0,255),a.useProgram(d),this._setSharedUniforms(d,e,t),o.textureManager.bindTextures(a,d,s);const m=1===c?r.displayViewMat3:r.displayMat3;if(s.vvSizeMinMaxValue&&d.setUniform4fv("u_vvSizeMinMaxValue",l.vvSizeMinMaxValue),s.vvSizeScaleStops&&d.setUniform1f("u_vvSizeScaleStopsValue",l.vvSizeScaleStopsValue),s.vvSizeFieldStops){const e=l.getSizeVVFieldStops(t.key.level);d.setUniform1fv("u_vvSizeFieldStopsValues",e.values),d.setUniform1fv("u_vvSizeFieldStopsSizes",e.sizes)}s.vvSizeUnitValue&&d.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",l.vvSizeUnitValueToPixelsRatio),d.setUniform1f("u_mapRotation",Math.floor(r.rotation/360*254)),d.setUniform1f("u_mapAligned",c),d.setUniformMatrix3fv("u_displayMat3",m),d.setUniform1f("u_opacity",1),d.setUniform2fv("u_screenSize",e.state.size),d.setUniform1f("u_isHalo",1),n.draw(a,u,v),d.setUniform1f("u_isHalo",0),n.draw(a,u,v),a.setStencilTestEnabled(!0),a.setBlendingEnabled(!0)}};var N=class extends F{dispose(){}getGeometryType(){return C.d.LINE}drawGeometry(e,t,n,i){const{context:a,painter:o,rendererInfo:r,displayLevel:l}=e,s=U.c.load(n.materialKey),{bufferLayouts:c,attributes:u}=(e=>Object(f.f)(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121},{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_offsetAndNormal",count:4,type:5120},{location:4,name:"a_accumulatedDistanceAndHalfWidth",count:2,type:5123},{location:5,name:"a_tlbr",count:4,type:5123},{location:6,name:"a_segmentDirection",count:4,type:5120},{location:7,name:"a_aux",count:2,type:5123},{location:8,name:"a_zoomRange",count:2,type:5123}]}))(s),v=o.materialManager.getMaterialProgram(e,s,"materials/line",u,i),d=1/e.pixelRatio;a.useProgram(v),this._setSharedUniforms(v,e,t),s.textureBinding&&o.textureManager.bindTextures(a,v,s);const m=2**(l-t.key.level)/e.pixelRatio;if(v.setUniform1f("u_zoomFactor",m),v.setUniform1f("u_blur",0+d),v.setUniform1f("u_antialiasing",d),s.vvSizeMinMaxValue&&v.setUniform4fv("u_vvSizeMinMaxValue",r.vvSizeMinMaxValue),s.vvSizeScaleStops&&v.setUniform1f("u_vvSizeScaleStopsValue",r.vvSizeScaleStopsValue),s.vvSizeFieldStops){const e=r.getSizeVVFieldStops(t.key.level);v.setUniform1fv("u_vvSizeFieldStopsValues",e.values),v.setUniform1fv("u_vvSizeFieldStopsSizes",e.sizes)}s.vvSizeUnitValue&&v.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",r.vvSizeUnitValueToPixelsRatio),s.vvColor&&(v.setUniform1fv("u_vvColorValues",r.vvColorValues),v.setUniform4fv("u_vvColors",r.vvColors)),s.vvOpacity&&(v.setUniform1fv("u_vvOpacityValues",r.vvOpacityValues),v.setUniform1fv("u_vvOpacities",r.vvOpacities)),a.setFaceCullingEnabled(!1),n.draw(a,c,u)}};var B=class extends F{dispose(){}getGeometryType(){return C.d.MARKER}drawGeometry(e,t,n,i){const{context:a,painter:o,rendererInfo:r,state:l}=e,s=U.d.load(n.materialKey),{bufferLayouts:c,attributes:u}=(e=>Object(f.f)(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_vertexOffset",count:2,type:5122},{location:2,name:"a_texCoords",count:2,type:5123},{location:3,name:"a_bitSetAndDistRatio",count:2,type:5123},{location:4,name:"a_id",count:4,type:5121},{location:5,name:"a_color",count:4,type:5121,normalized:!0},{location:6,name:"a_outlineColor",count:4,type:5121,normalized:!0},{location:7,name:"a_sizeAndOutlineWidth",count:4,type:5121},{location:8,name:"a_zoomRange",count:2,type:5123}]}))(s),v=o.materialManager.getMaterialProgram(e,s,"materials/icon",u,i);a.useProgram(v),s.textureBinding&&o.textureManager.bindTextures(a,v,s,!0),this._setSharedUniforms(v,e,t);const d=s.vvRotation?l.displayViewMat3:l.displayMat3;if(v.setUniformMatrix3fv("u_displayMat3",d),s.vvSizeMinMaxValue&&v.setUniform4fv("u_vvSizeMinMaxValue",r.vvSizeMinMaxValue),s.vvSizeScaleStops&&v.setUniform1f("u_vvSizeScaleStopsValue",r.vvSizeScaleStopsValue),s.vvSizeFieldStops){const e=r.getSizeVVFieldStops(t.key.level);v.setUniform1fv("u_vvSizeFieldStopsValues",e.values),v.setUniform1fv("u_vvSizeFieldStopsSizes",e.sizes)}s.vvSizeUnitValue&&v.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",r.vvSizeUnitValueToPixelsRatio),s.vvColor&&(v.setUniform1fv("u_vvColorValues",r.vvColorValues),v.setUniform4fv("u_vvColors",r.vvColors)),s.vvOpacity&&(v.setUniform1fv("u_vvOpacityValues",r.vvOpacityValues),v.setUniform1fv("u_vvOpacities",r.vvOpacities)),s.vvRotation&&v.setUniform1f("u_vvRotationType","geographic"===r.vvMaterialParameters.vvRotationType?0:1),n.draw(a,c,u)}};var G=class extends F{dispose(){}getGeometryType(){return C.d.TEXT}drawGeometry(e,t,n,i){const{context:a,painter:o,rendererInfo:r,state:l}=e,s=U.f.load(n.materialKey),{bufferLayouts:c,attributes:u}=(e=>Object(f.f)(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121},{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_haloColor",count:4,type:5121,normalized:!0},{location:4,name:"a_texFontSize",count:4,type:5121},{location:5,name:"a_aux",count:4,type:5120},{location:6,name:"a_zoomRange",count:2,type:5123},{location:7,name:"a_vertexOffset",count:2,type:5122},{location:8,name:"a_texCoords",count:2,type:5123}]}))(s),v=o.materialManager.getMaterialProgram(e,s,"materials/text",u,i);if(a.useProgram(v),this._setSharedUniforms(v,e,t),o.textureManager.bindTextures(a,v,s),v.setUniformMatrix3fv("u_displayMat3",l.displayMat3),v.setUniformMatrix3fv("u_displayViewMat3",l.displayViewMat3),s.vvSizeMinMaxValue&&v.setUniform4fv("u_vvSizeMinMaxValue",r.vvSizeMinMaxValue),s.vvSizeScaleStops&&v.setUniform1f("u_vvSizeScaleStopsValue",r.vvSizeScaleStopsValue),s.vvSizeFieldStops){const e=r.getSizeVVFieldStops(t.key.level);v.setUniform1fv("u_vvSizeFieldStopsValues",e.values),v.setUniform1fv("u_vvSizeFieldStopsSizes",e.sizes)}s.vvSizeUnitValue&&v.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",r.vvSizeUnitValueToPixelsRatio),s.vvColor&&(v.setUniform1fv("u_vvColorValues",r.vvColorValues),v.setUniform4fv("u_vvColors",r.vvColors)),s.vvOpacity&&(v.setUniform1fv("u_vvOpacityValues",r.vvOpacityValues),v.setUniform1fv("u_vvOpacities",r.vvOpacities)),s.vvRotation&&v.setUniform1f("u_vvRotationType","geographic"===r.vvMaterialParameters.vvRotationType?0:1),v.setUniform1f("u_isHalo",1),n.draw(a,c,u),v.setUniform1f("u_isHalo",0),n.draw(a,c,u)}},j=n(837);class H extends o.a{constructor(){super(...arguments),this._desc={lut:{vsPath:"raster/lut",fsPath:"raster/lut",attributes:new Map([["a_position",0],["a_texcoord",1]])},stretch:{vsPath:"raster/stretch",fsPath:"raster/stretch",attributes:new Map([["a_position",0],["a_texcoord",1]])},hillshade:{vsPath:"raster/hillshade",fsPath:"raster/hillshade",attributes:new Map([["a_position",0],["a_texcoord",1]])}},this._rendererUniformInfos=new Map}dispose(){this._quad&&this._quad.dispose()}prepareState({context:e},t){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(1,771,1,771),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(514,t.stencilRef,255)}draw(e,t){var n;if(!t.source)return;if(t.suspended)return;e.timeline.begin(this.name);const i=!(null!=(n=e.context.capabilities.textureFloat)&&n.textureFloatLinear);t.updateTexture(e);const a=this.getShaderVariations(t,i),o=e.painter.materialManager.getProgram(e,this._desc[t.symbolizerParameters.type],a);this.drawWithProgram(e.context,o,t),e.timeline.end(this.name)}drawWithProgram(e,t,n,i=1,o=[0,0],r=!1){this._quad||(this._quad=new a.a(e,[0,0,1,0,0,1,1,1]));const{symbolizerParameters:l,transformGrid:s,width:c,height:u,opacity:f}=n,v=l.type;e.useProgram(t);const d=this.getShaderVariations(n),m=this.getUniformInfos(v,e,t,d),{names:_,textures:p}=n.getTextures();Object(j.j)(e,t,_,p);const g=Object(j.d)(i,o),x=Object(j.f)(s,[c,u],[n.source.width,n.source.height],f,r);if(Object(j.k)(t,m,{u_coordScale:n.coordScale,u_dvsMat3:n.transforms.dvs,...g,...x}),l.colormap){const{colormap:e,colormapOffset:n}=l,i=Object(j.e)(e,n);Object(j.k)(t,m,i)}if("stretch"===l.type){const e=Object(j.h)(l);Object(j.k)(t,m,e)}else if("hillshade"===l.type){const e=Object(j.g)(l);Object(j.k)(t,m,e)}this._quad.draw()}getUniformInfos(e,t,n,i){const a=i.length>0?e+"-"+i.join("-"):e;if(this._rendererUniformInfos.has(a))return this._rendererUniformInfos.get(a);const o=Object(j.i)(t,n);return this._rendererUniformInfos.set(a,o),o}getShaderVariations(e,t=!1){const n=[];return"cubic"===e.interpolation?n.push("bicubic"):t&&"bilinear"===e.interpolation&&n.push("bilinear"),e.isRendereredSource?n.push("noop"):e.symbolizerParameters.colormap&&n.push("applyColormap"),e.transformGrid&&n.push("applyProjection"),n}}var k=H;const Z={marker:B,line:N,fill:L,text:G,label:R,clip:_,stencil:g.a,bitmap:s,raster:k,tileInfo:p.a,vtlBackground:O,vtlFill:V,vtlLine:D,vtlCircle:z,vtlSymbol:A}},599:function(e,t,n){"use strict";t.a=class{constructor(){this.name=this.constructor.name||"UnnamedBrush"}prepareState(e,t,n){}draw(e,t,n){}drawMany(e,t,n){for(const i of t)this.draw(e,i,n)}}},615:function(e,t,n){"use strict";var i=n(516),a=(n(514),n(5),n(512),n(513),n(518),n(511),n(515));t.a=class{constructor(e,t){this.rctx=e,this._vertexBuffer=i.a.createVertex(e,35044,new Uint16Array(t)),this._vao=new a.a(e,new Map([["a_position",0]]),{geometry:[{name:"a_position",count:2,type:5122,offset:0,stride:4,normalized:!1}]},{geometry:this._vertexBuffer}),this._count=t.length/2}bind(){this._vao.bind()}unbind(){this._vao.unbind()}dispose(){this._vao.dispose(!1),this._vertexBuffer.dispose()}draw(){this.rctx.bindVAO(this._vao),this.rctx.drawArrays(5,0,this._count)}}},629:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));n(516),n(514),n(5),n(512),n(513),n(518);var i=n(678),a=(n(511),n(515),{background:{"background.frag":"uniform lowp vec4 u_color;\nvoid main() {\ngl_FragColor = u_color;\n}","background.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump vec2 u_coord_range;\nuniform mediump float u_depth;\nvoid main() {\nvec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\n}"},bitBlit:{"bitBlit.frag":"uniform lowp sampler2D u_tex;\nuniform lowp float u_opacity;\nvarying mediump vec2 v_uv;\nvoid main() {\nlowp vec4 color = texture2D(u_tex, v_uv);\ngl_FragColor = color *  u_opacity;\n}","bitBlit.vert":"attribute vec2 a_pos;\nattribute vec2 a_tex;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position = vec4(a_pos, 0.0, 1.0);\nv_uv = a_tex;\n}"},blend:{"blend.frag":"precision mediump float;\nuniform sampler2D u_layerTexture;\nuniform lowp float u_opacity;\nuniform lowp float u_inFadeOpacity;\n#ifndef NORMAL\nuniform sampler2D u_backbufferTexture;\n#endif\nvarying mediump vec2 v_uv;\nfloat rgb2v(in vec3 c) {\nreturn max(c.x, max(c.y, c.z));\n}\nvec3 rgb2hsv(in vec3 c) {\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(in vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 tint(in vec3 Cb, in vec3 Cs) {\nfloat vIn = rgb2v(Cb);\nvec3 hsvTint = rgb2hsv(Cs);\nvec3 hsvOut = vec3(hsvTint.x, hsvTint.y, vIn * hsvTint.z);\nreturn hsv2rgb(hsvOut);\n}\nfloat overlay(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * (1.0 - 2.0 * (1.0 - Cs ) * (1.0 - Cb)) + step(0.5, Cs) * (2.0 * Cs * Cb);\n}\nfloat colorDodge(in float Cb, in float Cs) {\nreturn (Cb == 0.0) ? 0.0 : (Cs == 1.0) ? 1.0 : min(1.0, Cb / (1.0 - Cs));\n}\nfloat colorBurn(in float Cb, in float Cs) {\nreturn (Cb == 1.0) ? 1.0 : (Cs == 0.0) ? 0.0 : 1.0 - min(1.0, (1.0 - Cb) / Cs);\n}\nfloat hardLight(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * (2.0 * Cs * Cb) + step(0.5, Cs) * (1.0 - 2.0 * (1.0 - Cs) * (1.0 - Cb));\n}\nfloat reflectBlend(in float Cb, in float Cs) {\nreturn (Cs == 1.0) ? Cs : min(Cb * Cb / (1.0 - Cs), 1.0);\n}\nfloat softLight(in float Cb, in float Cs) {\nif (Cs <= 0.5) {\nreturn Cb - (1.0 - 2.0 * Cs) * Cb * (1.0 - Cb);\n}\nif (Cb <= 0.25) {\nreturn Cb + (2.0 * Cs - 1.0) * Cb * ((16.0 * Cb - 12.0) * Cb + 3.0);\n}\nreturn Cb + (2.0 * Cs - 1.0) * (sqrt(Cb) - Cb);\n}\nfloat vividLight(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * colorBurn(Cb, 2.0 * Cs) + step(0.5, Cs) * colorDodge(Cb, (2.0 * (Cs - 0.5)));\n}\nfloat minv3(in vec3 c) {\nreturn min(min(c.r, c.g), c.b);\n}\nfloat maxv3(in vec3 c) {\nreturn max(max(c.r, c.g), c.b);\n}\nfloat lumv3(in vec3 c) {\nreturn dot(c, vec3(0.3, 0.59, 0.11));\n}\nfloat satv3(vec3 c) {\nreturn maxv3(c) - minv3(c);\n}\nvec3 clipColor(vec3 color) {\nfloat lum = lumv3(color);\nfloat mincol = minv3(color);\nfloat maxcol = maxv3(color);\nif (mincol < 0.0) {\ncolor = lum + ((color - lum) * lum) / (lum - mincol);\n}\nif (maxcol > 1.0) {\ncolor = lum + ((color - lum) * (1.0 - lum)) / (maxcol - lum);\n}\nreturn color;\n}\nvec3 setLum(vec3 cbase, vec3 clum) {\nfloat lbase = lumv3(cbase);\nfloat llum = lumv3(clum);\nfloat ldiff = llum - lbase;\nvec3 color = cbase + vec3(ldiff);\nreturn clipColor(color);\n}\nvec3 setLumSat(vec3 cbase, vec3 csat, vec3 clum)\n{\nfloat minbase = minv3(cbase);\nfloat sbase = satv3(cbase);\nfloat ssat = satv3(csat);\nvec3 color;\nif (sbase > 0.0) {\ncolor = (cbase - minbase) * ssat / sbase;\n} else {\ncolor = vec3(0.0);\n}\nreturn setLum(color, clum);\n}\nvoid main() {\nvec4 src = texture2D(u_layerTexture, v_uv);\n#ifdef NORMAL\ngl_FragColor = src *  u_opacity;\n#else\nvec4 dst = texture2D(u_backbufferTexture, v_uv);\nvec3 Cs = src.a == 0.0 ? src.rgb : vec3(src.rgb / src.a);\nvec3 Cb = dst.a == 0.0 ? dst.rgb : vec3(dst.rgb / dst.a);\nfloat as = u_opacity * src.a;\nfloat ab = dst.a;\n#ifdef DESTINATION_OVER\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb, as + ab - as * ab);\n#endif\n#ifdef SOURCE_IN\nvec4 color = vec4(as * Cs * ab, as * ab);\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\ngl_FragColor = color + fadeColor;\n#endif\n#ifdef DESTINATION_IN\nvec4 color = vec4(ab * Cb * as, ab * as);\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\ngl_FragColor = color + fadeColor;\n#endif\n#ifdef SOURCE_OUT\ngl_FragColor = vec4(as * Cs * (1.0 - ab), as * (1.0 - ab));\n#endif\n#ifdef DESTINATION_OUT\ngl_FragColor = vec4(ab * Cb * (1.0 - as), ab * (1.0 - as));\n#endif\n#ifdef SOURCE_ATOP\ngl_FragColor = vec4(as * Cs * ab + ab * Cb * (1.0 - as), ab);\n#endif\n#ifdef DESTINATION_ATOP\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * as, as);\n#endif\n#ifdef XOR\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * (1.0 - as),\nas * (1.0 - ab) + ab * (1.0 - as));\n#endif\n#ifdef MULTIPLY\ngl_FragColor = vec4(as * Cs * ab * Cb + (1.0 - ab) * as * Cs + (1.0 - as) * ab * Cb,\nas + ab * (1.0 - as));\n#endif\n#ifdef SCREEN\ngl_FragColor = vec4((Cs + Cb - Cs * Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef OVERLAY\nvec3 f = vec3(overlay(Cb.r, Cs.r), overlay(Cb.g, Cs.g), overlay(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef DARKEN\ngl_FragColor = vec4(min(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef LIGHTER\ngl_FragColor = vec4(as * Cs + ab * Cb, as + ab);\n#endif\n#ifdef LIGHTEN\ngl_FragColor = vec4(max(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR_DODGE\nvec3 f = vec3(colorDodge(Cb.r, Cs.r), colorDodge(Cb.g, Cs.g), colorDodge(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR_BURN\nvec3 f = vec3(colorBurn(Cb.r, Cs.r), colorBurn(Cb.g, Cs.g), colorBurn(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef HARD_LIGHT\nvec3 f = vec3(hardLight(Cb.r, Cs.r), hardLight(Cb.g, Cs.g), hardLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef SOFT_LIGHT\nvec3 f = vec3(softLight(Cb.r, Cs.r), softLight(Cb.g, Cs.g), softLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef DIFFERENCE\ngl_FragColor = vec4(abs(Cb - Cs) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef EXCLUSION\nvec3 f = Cs + Cb - 2.0 * Cs * Cb;\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef INVERT\ngl_FragColor = vec4((1.0 - Cb) * as * ab + Cb * ab * (1.0 - as), ab);\n#endif\n#ifdef VIVID_LIGHT\nvec3 f = vec3(vividLight(Cb.r, Cs.r),\nvividLight(Cb.g, Cs.g),\nvividLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef HUE\nvec3 f = setLumSat(Cs,Cb,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef SATURATION\nvec3 f = setLumSat(Cb,Cs,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR\nvec3 f = setLum(Cs,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef LUMINOSITY\nvec3 f = setLum(Cb,Cs);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef PLUS\ngl_FragColor = clamp(vec4(src.r + Cb.r, src.g + Cb.g, src.b + Cb.b, as + ab), 0.0, 1.0);\n#endif\n#ifdef MINUS\ngl_FragColor = vec4(clamp(vec3(Cb.r - src.r, Cb.g - src.g, Cb.b - src.b), 0.0, 1.0), ab * as);\n#endif\n#ifdef AVERAGE\nvec3 f = (Cb + Cs) / 2.0;\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef REFLECT\nvec3 f = vec3(reflectBlend(Cb.r, Cs.r),\nreflectBlend(Cb.g, Cs.g),\nreflectBlend(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#endif\n}","blend.vert":"attribute vec2 a_position;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position = vec4(a_position , 0.0, 1.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"},filtering:{"bicubic.glsl":"vec4 computeWeights(float v) {\nfloat b = 1.0 / 6.0;\nfloat v2 = v * v;\nfloat v3 = v2 * v;\nfloat w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\nfloat w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\nfloat w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\nfloat w3 = b * v3;\nreturn vec4(w0, w1, w2, w3);\n}\nvec4 bicubicOffsetsAndWeights(float v) {\nvec4 w = computeWeights(v);\nfloat g0 = w.x + w.y;\nfloat g1 = w.z + w.w;\nfloat h0 = 1.0 - (w.y / g0) + v;\nfloat h1 = 1.0 + (w.w / g1) - v;\nreturn vec4(h0, h1, g0, g1);\n}\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 eX = vec2(1.0 / texSize.x, 0.0);\nvec2 eY = vec2(0.0, 1.0 / texSize.y);\nvec2 texel = coords * texSize - 0.5;\nvec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\nvec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\nvec2 coords10 = coords + hgX.x * eX;\nvec2 coords00 = coords - hgX.y * eX;\nvec2 coords11 = coords10 + hgY.x * eY;\nvec2 coords01 = coords00 + hgY.x * eY;\ncoords10 = coords10 - hgY.y * eY;\ncoords00 = coords00 - hgY.y * eY;\nvec4 color00 = texture2D(sampler, coords00);\nvec4 color10 = texture2D(sampler, coords10);\nvec4 color01 = texture2D(sampler, coords01);\nvec4 color11 = texture2D(sampler, coords11);\ncolor00 = mix(color00, color01, hgY.z);\ncolor10 = mix(color10, color11, hgY.z);\ncolor00 = mix(color00, color10, hgX.z);\nreturn color00;\n}","bilinear.glsl":"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 texelStart = floor(coords * texSize);\nvec2 coord0 = texelStart / texSize;\nvec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\nvec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\nvec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\nvec4 color0 = texture2D(sampler, coord0);\nvec4 color1 = texture2D(sampler, coord1);\nvec4 color2 = texture2D(sampler, coord2);\nvec4 color3 = texture2D(sampler, coord3);\nvec2 blend = fract(coords * texSize);\nvec4 color01 = mix(color0, color1, blend.x);\nvec4 color23 = mix(color2, color3, blend.x);\nreturn mix(color01, color23, blend.y);\n}","epx.glsl":"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\nvec2 invSize = 1.0 / texSize;\nvec2 texel = coords * texSize;\nvec2 texel_i = floor(texel);\nvec2 texel_frac = fract(texel);\nvec4 colorP = texture2D(sampler, texel_i * invSize);\nvec4 colorP1 = vec4(colorP);\nvec4 colorP2 = vec4(colorP);\nvec4 colorP3 = vec4(colorP);\nvec4 colorP4 = vec4(colorP);\nvec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\nvec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\nvec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\nvec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\nif (colorC == colorA && colorC != colorD && colorA != colorB) {\ncolorP1 = colorA;\n}\nif (colorA == colorB && colorA != colorC && colorB != colorD) {\ncolorP2 = colorB;\n}\nif (colorD == colorC && colorD != colorB && colorC != colorA) {\ncolorP3 = colorC;\n}\nif (colorB == colorD && colorB != colorA && colorD != colorC) {\ncolorP4 = colorD;\n}\nvec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\nvec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\nreturn mix(colorP12, colorP34, texel_frac.y);\n}"},fx:{integrate:{"integrate.frag":"precision mediump float;\nuniform lowp sampler2D u_sourceTexture;\nuniform lowp sampler2D u_maskTexture;\nuniform mediump float u_zoomLevel;\nuniform highp float u_timeDelta;\nuniform highp float u_animationTime;\nvarying highp vec2 v_texcoord;\n#include <materials/utils.glsl>\nvoid main()\n{\n#ifdef DELTA\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\nvec4 data0 = texture2D(u_maskTexture, v_texcoord);\nfloat flags = data0.r * 255.0;\nfloat groupMinZoom = data0.g * 255.0;\nfloat isVisible = getFilterBit(flags, 0);\nfloat wouldClip = step(groupMinZoom, u_zoomLevel);\nfloat direction = wouldClip * 1.0 + (1.0 - wouldClip) * -1.0;\nfloat dt = u_timeDelta / max(u_animationTime, 0.0001);\nvec4 nextState = vec4(texel + direction * dt);\ngl_FragColor =  vec4(nextState);\n#elif defined(UPDATE)\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\ngl_FragColor = texel;\n#endif\n}","integrate.vert":"precision mediump float;\nattribute vec2 a_pos;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\n}"}},highlight:{"blur.frag":"varying mediump vec2 v_texcoord;\nuniform mediump vec4 u_direction;\nuniform mediump mat4 u_channelSelector;\nuniform mediump float u_sigma;\nuniform sampler2D u_texture;\nmediump float gauss1(mediump vec2 dir) {\nreturn exp(-dot(dir, dir) / (2.0 * u_sigma * u_sigma));\n}\nmediump vec4 selectChannel(mediump vec4 sample) {\nreturn u_channelSelector * sample;\n}\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\nmediump float w = gauss1(i * u_direction.xy);\ntot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\nweight += w;\n}\nvoid main(void) {\nmediump float tot = 0.0;\nmediump float weight = 0.0;\naccumGauss1(-5.0, tot, weight);\naccumGauss1(-4.0, tot, weight);\naccumGauss1(-3.0, tot, weight);\naccumGauss1(-2.0, tot, weight);\naccumGauss1(-1.0, tot, weight);\naccumGauss1(0.0, tot, weight);\naccumGauss1(1.0, tot, weight);\naccumGauss1(2.0, tot, weight);\naccumGauss1(3.0, tot, weight);\naccumGauss1(4.0, tot, weight);\naccumGauss1(5.0, tot, weight);\ngl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\n}","highlight.frag":"varying mediump vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform mediump float u_sigma;\nuniform sampler2D u_shade;\nuniform mediump vec2 u_minMaxDistance;\nmediump float estimateDistance() {\nmediump float y = texture2D(u_texture, v_texcoord)[3];\nconst mediump float y0 = 0.5;\nmediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * u_sigma);\nmediump float d = (y - y0) / m0;\nreturn d;\n}\nmediump vec4 shade(mediump float d) {\nmediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\nmappedDistance = clamp(mappedDistance, 0.0, 1.0);\nreturn texture2D(u_shade, vec2(mappedDistance, 0.5));\n}\nvoid main(void) {\nmediump float d = estimateDistance();\ngl_FragColor = shade(d);\n}","textured.vert":"attribute mediump vec2 a_position;\nattribute mediump vec2 a_texcoord;\nvarying mediump vec2 v_texcoord;\nvoid main(void) {\ngl_Position = vec4(a_position, 0.0, 1.0);\nv_texcoord = a_texcoord;\n}"},magnifier:{"magnifier.frag":"uniform lowp vec4 u_background;\nuniform mediump sampler2D u_readbackTexture;\nuniform mediump sampler2D u_maskTexture;\nuniform mediump sampler2D u_overlayTexture;\nuniform bool u_maskEnabled;\nuniform bool u_overlayEnabled;\nvarying mediump vec2 v_texCoord;\nconst lowp float barrelFactor = 1.1;\nlowp vec2 barrel(lowp vec2 uv) {\nlowp vec2 uvn = uv * 2.0 - 1.0;\nif (uvn.x == 0.0 && uvn.y == 0.0) {\nreturn vec2(0.5, 0.5);\n}\nlowp float theta = atan(uvn.y, uvn.x);\nlowp float r = pow(length(uvn), barrelFactor);\nreturn r * vec2(cos(theta), sin(theta)) * 0.5 + 0.5;\n}\nvoid main(void)\n{\nlowp vec4 color = texture2D(u_readbackTexture, barrel(v_texCoord));\ncolor = (color + (1.0 - color.a) * u_background);\nlowp float mask = u_maskEnabled ? texture2D(u_maskTexture, v_texCoord).a : 1.0;\ncolor *= mask;\nlowp vec4 overlayColor = u_overlayEnabled ? texture2D(u_overlayTexture, v_texCoord) : vec4(0);\ngl_FragColor = overlayColor + (1.0 - overlayColor.a) * color;\n}","magnifier.vert":"precision mediump float;\nattribute mediump vec2 a_pos;\nuniform mediump vec4 u_drawPos;\nvarying mediump vec2 v_texCoord;\nvoid main(void)\n{\nv_texCoord = a_pos;\ngl_Position = vec4(u_drawPos.xy + vec2(a_pos - 0.5) * u_drawPos.zw, 0.0, 1.0);\n}"},materials:{"attributeData.glsl":"uniform highp sampler2D u_attributeData0;\nuniform highp sampler2D u_attributeData1;\nuniform highp sampler2D u_attributeData2;\nuniform highp sampler2D u_attributeData3;\nuniform highp int u_attributeTextureSize;\nhighp vec2 getAttributeDataCoords(in highp vec4 id) {\nhighp vec4 texel = unpackDisplayIdTexel(id);\nhighp float size = float(u_attributeTextureSize);\nhighp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256 + int(texel.a) * 256 * 256 * 256);\nhighp float col = mod(u32, size);\nhighp float row = (u32 - col) / size;\nhighp float u = col / size;\nhighp float v = row / size;\nreturn vec2(u, v);\n}\nhighp vec4 getAttributeData0(in highp vec4 id) {\nvec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData0, coords);\n}\nhighp vec4 getAttributeData1(in highp vec4 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData1, coords);\n}\nhighp vec4 getAttributeData2(in highp vec4 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData2, coords);\n}\nhighp vec4 getAttributeData3(in highp vec4 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData3, coords);\n}\nfloat u88VVToFloat(in vec2 v) {\nbool isMagic = v.x == 255.0 && v.y == 255.0;\nif (isMagic) {\nreturn NAN_MAGIC_NUMBER;\n}\nreturn (v.x + v.y * float(0x100)) - 32768.0;\n}","constants.glsl":"const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\nconst float SIGNED_BYTE_TO_UNSIGNED = 128.0;\nconst float POSITION_PRECISION = 1.0 / 8.0;\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\nconst float SOFT_EDGE_RATIO = 1.0;\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\nconst float THIN_LINE_HALF_WIDTH = 1.0;\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\nconst float OFFSET_PRECISION = 1.0 / 8.0;\nconst float OUTLINE_SCALE = 1.0 / 5.0;\nconst float SDF_FONT_SIZE = 24.0;\nconst float MAX_SDF_DISTANCE = 8.0;\nconst float PLACEMENT_PADDING = 8.0;\nconst float EPSILON = 0.0000001;\nconst int MAX_FILTER_COUNT = 2;\nconst int ATTR_VV_SIZE = 0;\nconst int ATTR_VV_COLOR = 1;\nconst int ATTR_VV_OPACITY = 2;\nconst int ATTR_VV_ROTATION = 3;\nconst highp float NAN_MAGIC_NUMBER = 1e-30;",fill:{"common.glsl":"#ifdef PATTERN\nuniform mediump vec2 u_mosaicSize;\n#endif\n#ifdef DOT_DENSITY\nuniform lowp vec4 u_isActive[ 2 ];\nuniform highp float u_dotValue;\nuniform highp float u_tileDotsOverArea;\nuniform highp float u_dotTextureDotCount;\nuniform mediump float u_tileZoomFactor;\n#endif\nvarying vec3 v_pos;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying highp vec4 v_id;\nvarying highp float v_flags;\n#ifdef PATTERN\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_tileTextureCoord;\n#endif\n#ifdef DOT_DENSITY\nvarying highp vec2 v_dotTextureCoords;\nvarying highp vec4 v_dotThresholds[ 2 ];\n#endif","fill.frag":"precision highp float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/fill/common.glsl>\n#ifdef PATTERN\nuniform lowp sampler2D u_texture;\n#endif\n#ifdef DOT_DENSITY\nuniform mediump mat4 u_dotColors[ 2 ];\nuniform sampler2D u_dotTextures[ 2 ];\nuniform vec4 u_dotBackgroundColor;\n#endif\nvoid main() {\n#ifdef ID\ngl_FragColor = v_id;\n#elif defined(PATTERN)\nmediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\nmediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\nlowp vec4 color = texture2D(u_texture, samplePos);\ngl_FragColor = v_opacity * v_color * color;\n#elif defined(DOT_DENSITY) && !defined(HIGHLIGHT)\nvec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\nvec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\nvec4 difference0 = v_dotThresholds[0] - textureThresholds0;\nvec4 difference1 = v_dotThresholds[1] - textureThresholds1;\n#ifdef DD_DOT_BLENDING\nvec4 isPositive0 = step(0.0, difference0);\nvec4 isPositive1 = step(0.0, difference1);\nfloat weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\nfloat lessThanEqZero = step(weightSum, 0.0);\nfloat greaterThanZero = 1.0 - lessThanEqZero ;\nfloat divisor = (weightSum + lessThanEqZero);\nvec4 weights0 = difference0 * isPositive0 / divisor;\nvec4 weights1 = difference1 * isPositive1 / divisor;\nvec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\nvec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\n#else\nfloat diffMax = max(max4(difference0), max4(difference1));\nfloat lessThanZero = step(diffMax, 0.0);\nfloat greaterOrEqZero = 1.0 - lessThanZero;\nvec4 isMax0 = step(diffMax, difference0);\nvec4 isMax1 = step(diffMax, difference1);\nvec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\nvec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\n#endif\ngl_FragColor = preEffectColor;\n#else\ngl_FragColor = v_opacity * v_color;\n#endif\n#ifdef HIGHLIGHT\ngl_FragColor.a = 1.0;\n#endif\n}","fill.vert":"precision highp float;\n#ifdef DOT_DENSITY\nattribute float a_inverseArea;\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\nvec4 a_aux3 = vec4(0.0);\nvec2 a_zoomRange = vec2(0.0, 10000.0);\n#else\nattribute vec4 a_color;\nattribute vec4 a_tlbr;\nattribute vec4 a_aux1;\nattribute vec2 a_aux2;\nattribute vec4 a_aux3;\nattribute vec2 a_zoomRange;\n#endif\n#include <materials/vcommon.glsl>\n#include <materials/fill/common.glsl>\n#ifdef DOT_DENSITY\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\nreturn featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\n}\n#endif\nvoid main()\n{\nINIT;\nfloat a_bitSet = a_aux3.a;\nv_color     = getColor(a_color, a_bitSet, 0);\nv_opacity   = getOpacity();\nv_id        = norm(a_id);\nv_pos       = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\nv_flags     = getFilterFlags();\n#ifdef PATTERN\nvec2 aux2 = (1.0 / SIGNED_BYTE_TO_UNSIGNED) * a_aux2;\nfloat width = u_zoomFactor * a_aux1.x * aux2.x;\nfloat height = u_zoomFactor * a_aux1.y * aux2.y;\nfloat angle = C_256_TO_RAD * a_aux3.z;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nmat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\n-sinA / width, cosA / height, 0,\n0,            0,             1);\nvec2 symbolOffset = (a_aux1.zw - SIGNED_BYTE_TO_UNSIGNED) / vec2(width, height);\nv_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\nv_tlbr = a_tlbr / u_mosaicSize.xyxy;\n#elif defined(DOT_DENSITY)\nvec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\nvec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\nfloat size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\nv_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\nv_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\nv_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\n#endif\ngl_Position = vec4(clip(v_color, v_pos, v_flags, a_zoomRange), 1.0);\n}"},icon:{"common.glsl":"uniform lowp vec2 u_mosaicSize;\nvarying lowp vec4 v_color;\nvarying highp vec4 v_id;\nvarying highp vec4 v_sizeTex;\nvarying mediump vec3 v_pos;\nvarying highp float v_filters;\nvarying lowp float v_opacity;\n#ifdef SDF\nvarying lowp vec4 v_outlineColor;\nvarying mediump float v_outlineWidth;\nvarying mediump float v_distRatio;\nvarying mediump float v_overridingOutlineColor;\nvarying mediump float v_isThin;\n#endif","icon.frag":"precision mediump float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <util/encoding.glsl>\n#include <materials/constants.glsl>\n#include <materials/icon/common.glsl>\nuniform lowp sampler2D u_texture;\nvoid main()\n{\nvec2 v_size = v_sizeTex.xy;\nvec2 v_tex  = v_sizeTex.zw;\n#ifdef SDF\nlowp vec4 fillPixelColor = v_color;\nfloat d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\nfloat size = max(v_size.x, v_size.y);\nfloat dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\nfillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\nfloat outlineWidth = v_outlineWidth;\n#ifdef HIGHLIGHT\noutlineWidth = max(outlineWidth, 4.0 * v_isThin);\n#endif\nif (outlineWidth > 0.25) {\nlowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\nfloat clampedOutlineSize = min(outlineWidth, size);\noutlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\ngl_FragColor = v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\n}\nelse {\ngl_FragColor = v_opacity * fillPixelColor;\n}\n#else\nlowp vec4 texColor = texture2D(u_texture, v_tex);\ngl_FragColor = v_opacity * texColor;\n#endif\n#ifdef HIGHLIGHT\ngl_FragColor.a = step(1.0 / 255.0, gl_FragColor.a);\n#endif\n#ifdef ID\nif (gl_FragColor.a < 1.0 / 255.0) {\ndiscard;\n}\ngl_FragColor = v_id;\n#endif\n}","icon.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_outlineColor;\nattribute vec4 a_sizeAndOutlineWidth;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nattribute vec2 a_bitSetAndDistRatio;\nattribute vec2 a_zoomRange;\n#include <materials/vcommon.glsl>\n#include <materials/icon/common.glsl>\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float referenceSize, in float bitSet) {\n#ifdef VV_SIZE\nfloat r = getSize(baseSize.y) / referenceSize;\nbaseSize.xy *= r;\noffset.xy *= r;\nfloat scaleSymbolProportionally = getBit(bitSet, 3);\noutlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\n#endif\nreturn baseSize;\n}\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\nfloat isMapAligned = getBit(a_bitSet, 0);\nvec3  offset       = getRotation() * vec3(in_offset, 0.0);\nreturn getMatrix(isMapAligned) * offset;\n}\nvoid main()\n{\nINIT;\nvec2  a_size   = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\nvec2  a_offset = a_vertexOffset / 16.0;\nfloat a_outlineSize = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\nfloat a_bitSet = a_bitSetAndDistRatio.x;\nvec2 v_size = getMarkerSize(a_offset, a_size, a_outlineSize, a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0, a_bitSet);\nvec2 v_tex      = a_texCoords / u_mosaicSize;\nv_color    = getColor(a_color, a_bitSet, 1);\nv_opacity  = getOpacity();\nv_id       = norm(a_id);\nv_filters  = getFilterFlags();\nv_pos      = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0) + getOffset(a_offset, a_bitSet);\nv_sizeTex  = vec4(v_size.xy, v_tex.xy);\n#ifdef SDF\nv_isThin   = getBit(a_bitSet, 2);\n#ifdef VV_COLOR\nv_overridingOutlineColor = v_isThin;\n#else\nv_overridingOutlineColor = 0.0;\n#endif\nv_outlineWidth = min(a_outlineSize, max(max(v_size.x, v_size.y) - 0.99, 0.0));\nv_outlineColor = a_outlineColor;\nv_distRatio = a_bitSetAndDistRatio.y / 126.0;\n#endif\ngl_Position = vec4(clip(v_color, v_pos, v_filters, a_zoomRange), 1.0);\n}"},label:{"common.glsl":"uniform mediump float u_zoomLevel;\nuniform mediump float u_mapRotation;\nuniform mediump float u_mapAligned;\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying mediump vec2 v_tex;\nvarying mediump vec4 v_color;\nvarying lowp vec4 v_animation;","label.frag":"#include <materials/text/text.frag>","label.vert":"precision highp float;\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texAndSize;\nattribute vec4 a_refSymbolAndPlacementOffset;\nattribute vec4 a_glyphData;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHalo;\nuniform float u_mapRotation;\nuniform float u_mapAligned;\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\nfloat glyphAngle = angle * 360.0 / 254.0;\nfloat mapAngle = u_mapRotation * 360.0 / 254.0;\nfloat diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\nfloat z = 0.0;\nz += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_currentZoom)));\nz += u_mapAligned * 2.0 * step(90.0, diffAngle);\nz += 2.0 * (1.0 - step(u_currentZoom, maxZoom));\nreturn z;\n}\nvoid main()\n{\nINIT;\nfloat groupMinZoom    = getMinZoom();\nfloat glyphMinZoom    = a_glyphData.x;\nfloat glyphMaxZoom    = a_glyphData.y;\nfloat glyphAngle      = a_glyphData.z;\nfloat a_minZoom          = max(groupMinZoom, glyphMinZoom);\nfloat a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\nvec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\nfloat a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\nfloat fontSize           = a_texAndSize.z;\nfloat haloSize           = a_texAndSize.w * OUTLINE_SCALE;\nvec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\nvec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\nfloat fontScale    = fontSize / SDF_FONT_SIZE;\nfloat halfSize     = getSize(a_refSymbolSize) / 2.0;\nfloat animation    = pow(getAnimationState(), vec4(2.0)).r;\nv_color     = animation * ((1.0 - u_isHalo) * a_color + (u_isHalo * a_haloColor));\nv_opacity   = 1.0;\nv_tex       = a_texCoords / u_mosaicSize;\nv_edgeDistanceOffset = u_isHalo * haloSize / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\nvec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\nvec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\nvec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\ngl_Position = vec4(applyFilterLabels(v_color, v_pos, getFilterFlags()), 1.0);\n#ifdef DEBUG\nv_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\n#endif\n}"},line:{"common.glsl":"varying lowp vec4 v_color;\nvarying highp vec4 v_id;\nvarying mediump vec2 v_normal;\nvarying mediump float v_lineHalfWidth;\nvarying lowp float v_opacity;\nvarying highp vec3 v_pos;\n#ifdef PATTERN\nuniform mediump vec2 u_mosaicSize;\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_patternSize;\n#endif\n#if defined(PATTERN) || defined(SDF)\nvarying highp float v_accumulatedDistance;\n#endif","line.frag":"precision lowp float;\n#include <util/encoding.glsl>\n#include <materials/constants.glsl>\n#include <materials/line/common.glsl>\nuniform lowp float u_blur;\n#if defined(PATTERN) || defined(SDF)\nuniform sampler2D u_texture;\n#endif\n#ifdef SDF\nconst float sdfPatternHalfWidth = 15.5;\nuniform mediump float u_antialiasing;\n#endif\nvoid main()\n{\nmediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(v_lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nmediump float fragDist = length(v_normal) * v_lineHalfWidth;\nlowp float alpha = clamp(thinLineFactor * (v_lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\n#if defined(SDF) && !defined(HIGHLIGHT)\nmediump float lineHalfWidth = v_lineHalfWidth;\nmediump float lineWidthRatio = max(lineHalfWidth - 0.55 * u_antialiasing, 0.25) / sdfPatternHalfWidth;\nmediump float relativeTexX = mod(v_accumulatedDistance * 0.5 / (lineWidthRatio * v_patternSize.x), 1.0);\nmediump float relativeTexY = 0.5 + 0.25 * v_normal.y;\nmediump vec2 texCoord = mix(v_tlbr.xy, v_tlbr.zw, vec2(relativeTexX, relativeTexY));\nmediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\nfloat dist = d * lineHalfWidth;\nlowp vec4 fillPixelColor = v_opacity * alpha * clamp(0.5 - dist, 0.0, 1.0) * v_color;\ngl_FragColor = fillPixelColor;\n#elif defined(PATTERN) && !defined(HIGHLIGHT)\nmediump float lineHalfWidth = v_lineHalfWidth;\nmediump float adjustedPatternWidth = v_patternSize.x * 2.0 * lineHalfWidth / v_patternSize.y;\nmediump float relativeTexX = mod(v_accumulatedDistance / adjustedPatternWidth, 1.0);\nmediump float relativeTexY = 0.5 + 0.5 * v_normal.y;\nmediump vec2 texCoord = mix(v_tlbr.xy, v_tlbr.zw, vec2(relativeTexY, relativeTexX));\nlowp vec4 color = texture2D(u_texture, texCoord);\ngl_FragColor = v_opacity * alpha * v_color * color;\n#else\ngl_FragColor = v_opacity * alpha * v_color;\n#endif\n#ifdef HIGHLIGHT\ngl_FragColor.a = step(1.0 / 255.0, gl_FragColor.a);\n#endif\n#ifdef ID\nif (gl_FragColor.a < 1.0 / 255.0) {\ndiscard;\n}\ngl_FragColor = v_id;\n#endif\n}","line.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_offsetAndNormal;\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\nattribute vec4 a_tlbr;\nattribute vec4 a_segmentDirection;\nattribute vec2 a_aux;\nattribute vec2 a_zoomRange;\n#include <materials/vcommon.glsl>\n#include <materials/line/common.glsl>\nconst float SCALE = 1.0 / 31.0;\nconst float WIDTH_SCALE = 1.0 / 1024.0;\nfloat getBaseLineHalfWidth(in float in_lineHalfWidth) {\n#ifdef VV_SIZE\nfloat referenceHalfWidth = a_aux.x * WIDTH_SCALE;\nfloat lineWidth = 2.0 * in_lineHalfWidth;\nreturn 0.5 * (in_lineHalfWidth / referenceHalfWidth) * getSize(lineWidth);\n#else\nreturn in_lineHalfWidth;\n#endif\n}\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\nfloat halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\n#ifdef HIGHLIGHT\nhalfWidth = max(halfWidth, 2.0);\n#endif\nreturn halfWidth;\n}\nvec2 getDist(in vec2 offset, in float halfWidth) {\nfloat thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nreturn thinLineFactor * halfWidth * offset * SCALE;\n}\nvoid main()\n{\nINIT;\nfloat a_bitSet          = a_segmentDirection.w;\nfloat a_accumulatedDist = a_accumulatedDistanceAndHalfWidth.x;\nfloat a_lineHalfWidth   = a_accumulatedDistanceAndHalfWidth.y * WIDTH_SCALE;\nfloat aa                = 0.5 * u_antialiasing;\nvec2  a_offset          = a_offsetAndNormal.xy;\nfloat baseWidth = getBaseLineHalfWidth(a_lineHalfWidth);\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\nfloat z         = 2.0 * step(baseWidth, 0.0);\nvec2  dist      = getDist(a_offset, halfWidth);\nvec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\nvec3  pos       = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0) + offset;\nv_color         = getColor(a_color, a_bitSet, 0);\nv_opacity       = getOpacity();\nv_lineHalfWidth = halfWidth;\nv_id            = norm(a_id);\nv_normal        = a_offsetAndNormal.zw * SCALE;\nv_pos           = vec3(pos.xy, z);\n#ifdef PATTERN\nv_tlbr          = a_tlbr / u_mosaicSize.xyxy;\nv_patternSize   = vec2(a_tlbr.z - a_tlbr.x, a_tlbr.w - a_tlbr.y);\n#endif\n#if defined(PATTERN) || defined(SDF)\nv_accumulatedDistance = a_accumulatedDist * u_zoomFactor + dot(SCALE * a_segmentDirection.xy, dist);\n#endif\ngl_Position = vec4(clip(v_color, v_pos, getFilterFlags(), a_zoomRange), 1.0);\n}"},text:{"common.glsl":"uniform highp vec2 u_mosaicSize;\nvarying highp vec4 v_id;\nvarying mediump vec3 v_pos;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying highp vec2 v_tex;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying lowp float v_transparency;","text.frag":"precision mediump float;\n#include <materials/text/common.glsl>\nuniform lowp sampler2D u_texture;\nvoid main()\n{\nfloat SDF_CUTOFF = (2.0 / 8.0);\nfloat SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\nlowp float dist = texture2D(u_texture, v_tex).a;\nmediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\n#ifdef HIGHLIGHT\nedge /= 2.0;\n#endif\nlowp float aa = v_antialiasingWidth;\nlowp float alpha = smoothstep(edge - aa, edge + aa, dist);\ngl_FragColor = alpha * v_color * v_opacity;\n#ifdef ID\nif (gl_FragColor.a < 1.0 / 255.0) {\ndiscard;\n}\ngl_FragColor = v_id;\n#endif\n}","text.vert":"precision highp float;\n#include <materials/utils.glsl>\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texFontSize;\nattribute vec4 a_aux;\nattribute vec2 a_zoomRange;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHalo;\nfloat getTextSize(in float baseSize, in float referenceSize) {\n#ifdef VV_SIZE\nreturn getSize(baseSize);\n#endif\nreturn baseSize;\n}\nvoid main()\n{\nINIT;\nfloat a_referenceSize = a_aux.z * a_aux.z / 256.0;\nfloat a_bitSet        = a_aux.w;\nfloat a_fontSize      = a_texFontSize.z;\nvec2  a_offset        = a_vertexOffset * OFFSET_PRECISION;\nvec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat fontSize      = getTextSize(a_fontSize, a_referenceSize);\nfloat scaleFactor   = fontSize / a_fontSize;\nfloat fontScale     = fontSize / SDF_FONT_SIZE;\nvec3  offset        = getRotation() * vec3(scaleFactor * a_offset, 0.0);\nmat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\nv_color   = u_isHalo * a_haloColor + (1.0 - u_isHalo) * getColor(a_color, a_bitSet, 1);\nv_opacity = getOpacity();\nv_id      = norm(a_id);\nv_tex     = a_texCoords / u_mosaicSize;\nv_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\nv_edgeDistanceOffset = u_isHalo * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\ngl_Position =  vec4(clip(v_color, v_pos, getFilterFlags(), a_zoomRange), 1.0);\n}"},"utils.glsl":"float rshift(in float u32, in int amount) {\nreturn floor(u32 / pow(2.0, float(amount)));\n}\nfloat getBit(in float bitset, in int bitIndex) {\nfloat offset = pow(2.0, float(bitIndex));\nreturn mod(floor(bitset / offset), 2.0);\n}\nfloat getFilterBit(in float bitset, in int bitIndex) {\nreturn getBit(bitset, bitIndex + 1);\n}\nfloat getHighlightBit(in float bitset) {\nreturn getBit(bitset, 0);\n}\nhighp vec4 unpackDisplayIdTexel(in highp vec4 bitset) {\nfloat isAggregate = getBit(bitset.a, 7);\nreturn (1.0 - isAggregate) * bitset + isAggregate * (vec4(bitset.rgba) - vec4(0.0, 0.0, 0.0, float(0x80)));\n}\nvec4 unpack(in float u32) {\nfloat r = mod(rshift(u32, 0), 255.0);\nfloat g = mod(rshift(u32, 8), 255.0);\nfloat b = mod(rshift(u32, 16), 255.0);\nfloat a = mod(rshift(u32, 24), 255.0);\nreturn vec4(r, g, b, a);\n}\nvec4 norm(in vec4 v) {\nreturn v /= 255.0;\n}\nfloat max4(vec4 target) {\nreturn max(max(max(target.x, target.y), target.z), target.w);\n}\nvec2 unpack_u8_nf32(vec2 bytes) {\nreturn (bytes - 127.0) / 127.0;\n}","vcommon.glsl":"#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/attributeData.glsl>\n#include <materials/vv.glsl>\nattribute vec2 a_pos;\nattribute highp vec4 a_id;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform highp float u_pixelRatio;\nuniform mediump float u_zoomFactor;\nuniform mediump float u_antialiasing;\nuniform mediump float u_currentZoom;\nvec4 VV_ADATA = vec4(0.0);\nvoid loadVisualVariableData(inout vec4 target) {\n#ifdef OES_TEXTURE_FLOAT\ntarget.rgba = getAttributeData2(a_id);\n#else\nvec4 data0 = getAttributeData2(a_id);\nvec4 data1 = getAttributeData3(a_id);\ntarget.r = u88VVToFloat(data0.rg * 255.0);\ntarget.g = u88VVToFloat(data0.ba * 255.0);\ntarget.b = u88VVToFloat(data1.rg * 255.0);\ntarget.a = u88VVToFloat(data1.ba * 255.0);\n#endif\n}\n#ifdef VV\n#define INIT loadVisualVariableData(VV_ADATA)\n#else\n#define INIT\n#endif\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\n#ifdef VV_COLOR\nfloat isColorLocked   = getBit(a_bitSet, index);\nreturn getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\n#else\nreturn a_color;\n#endif\n}\nfloat getOpacity() {\n#ifdef VV_OPACITY\nreturn getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\n#else\nreturn 1.0;\n#endif\n}\nfloat getSize(in float in_size) {\n#ifdef VV_SIZE\nreturn getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE]);\n#else\nreturn in_size;\n#endif\n}\nmat3 getRotation() {\n#ifdef VV_ROTATION\nreturn getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\n#else\nreturn mat3(1.0);\n#endif\n}\nfloat getFilterFlags() {\n#ifdef IGNORES_SAMPLER_PRECISION\nreturn ceil(getAttributeData0(a_id).x * 255.0);\n#else\nreturn getAttributeData0(a_id).x * 255.0;\n#endif\n}\nvec4 getAnimationState() {\nreturn getAttributeData1(a_id);\n}\nfloat getMinZoom() {\nvec4 data0 = getAttributeData0(a_id) * 255.0;\nreturn data0.g;\n}\nmat3 getMatrix(float isMapAligned) {\nreturn isMapAligned * u_displayViewMat3 + (1.0 - isMapAligned) * u_displayMat3;\n}\nvec3 clip(inout vec4 color, inout vec3 pos, in float filterFlags, in vec2 minMaxZoom) {\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\n#ifdef INSIDE\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\n#elif defined(OUTSIDE)\npos.z += 2.0 * getFilterBit(filterFlags, 1);\n#elif defined(HIGHLIGHT)\n#if !defined(HIGHLIGHT_ALL)\npos.z += 2.0 * (1.0 - getHighlightBit(filterFlags));\n#endif\n#endif\npos.z += 2.0 * (step(minMaxZoom.y, u_currentZoom) + (1.0 - step(minMaxZoom.x, u_currentZoom)));\nreturn pos;\n}\nvec3 applyFilterLabels(inout vec4 color, inout vec3 pos, in float filterFlags) {\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\n#ifndef OUTSIDE_LABELS_VISIBLE\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\n#endif\nreturn pos;\n}","vv.glsl":"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\n#define VV_SIZE\n#endif\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\n#define VV\n#endif\n#ifdef VV_COLOR\nuniform highp float u_vvColorValues[8];\nuniform vec4 u_vvColors[8];\n#endif\n#ifdef VV_SIZE_MIN_MAX_VALUE\nuniform highp vec4 u_vvSizeMinMaxValue;\n#endif\n#ifdef VV_SIZE_SCALE_STOPS\nuniform highp float u_vvSizeScaleStopsValue;\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nuniform highp float u_vvSizeFieldStopsValues[6];\nuniform float u_vvSizeFieldStopsSizes[6];\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nuniform highp float u_vvSizeUnitValueWorldToPixelsRatio;\n#endif\n#ifdef VV_OPACITY\nuniform highp float u_vvOpacityValues[8];\nuniform float u_vvOpacities[8];\n#endif\n#ifdef VV_ROTATION\nuniform lowp float u_vvRotationType;\n#endif\nbool isNan(float val) {\nreturn (val == NAN_MAGIC_NUMBER);\n}\n#ifdef VV_SIZE_MIN_MAX_VALUE\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nfloat interpolationRatio = (sizeValue  - u_vvSizeMinMaxValue.x) / (u_vvSizeMinMaxValue.y - u_vvSizeMinMaxValue.x);\ninterpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\nreturn u_vvSizeMinMaxValue.z + interpolationRatio * (u_vvSizeMinMaxValue.w - u_vvSizeMinMaxValue.z);\n}\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nconst int VV_SIZE_N = 6;\nfloat getVVStopsSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nif (sizeValue <= u_vvSizeFieldStopsValues[0]) {\nreturn u_vvSizeFieldStopsSizes[0];\n}\nfor (int i = 1; i < VV_SIZE_N; ++i) {\nif (u_vvSizeFieldStopsValues[i] >= sizeValue) {\nfloat f = (sizeValue - u_vvSizeFieldStopsValues[i-1]) / (u_vvSizeFieldStopsValues[i] - u_vvSizeFieldStopsValues[i-1]);\nreturn mix(u_vvSizeFieldStopsSizes[i-1], u_vvSizeFieldStopsSizes[i], f);\n}\n}\nreturn u_vvSizeFieldStopsSizes[VV_SIZE_N - 1];\n}\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nfloat getVVUnitValue(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nreturn u_vvSizeUnitValueWorldToPixelsRatio * sizeValue;\n}\n#endif\n#ifdef VV_OPACITY\nconst int VV_OPACITY_N = 8;\nfloat getVVOpacity(float opacityValue) {\nif (isNan(opacityValue)) {\nreturn 1.0;\n}\nif (opacityValue <= u_vvOpacityValues[0]) {\nreturn u_vvOpacities[0];\n}\nfor (int i = 1; i < VV_OPACITY_N; ++i) {\nif (u_vvOpacityValues[i] >= opacityValue) {\nfloat f = (opacityValue - u_vvOpacityValues[i-1]) / (u_vvOpacityValues[i] - u_vvOpacityValues[i-1]);\nreturn mix(u_vvOpacities[i-1], u_vvOpacities[i], f);\n}\n}\nreturn u_vvOpacities[VV_OPACITY_N - 1];\n}\n#endif\n#ifdef VV_ROTATION\nmat4 getVVRotation(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat4(1, 0, 0, 0,\n0, 1, 0, 0,\n0, 0, 1, 0,\n0, 0, 0, 1);\n}\nfloat rotation = rotationValue;\nif (u_vvRotationType == 1.0) {\nrotation = 90.0 - rotation;\n}\nfloat angle = C_DEG_TO_RAD * rotation;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nreturn mat4(cosA, sinA, 0, 0,\n-sinA,  cosA, 0, 0,\n0,     0, 1, 0,\n0,     0, 0, 1);\n}\nmat3 getVVRotationMat3(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat3(1, 0, 0,\n0, 1, 0,\n0, 0, 1);\n}\nfloat rotation = rotationValue;\nif (u_vvRotationType == 1.0) {\nrotation = 90.0 - rotation;\n}\nfloat angle = C_DEG_TO_RAD * -rotation;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nreturn mat3(cosA, -sinA, 0,\nsinA, cosA, 0,\n0,    0,    1);\n}\n#endif\n#ifdef VV_COLOR\nconst int VV_COLOR_N = 8;\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\nif (isNan(colorValue) || isColorLocked == 1.0) {\nreturn fallback;\n}\nif (colorValue <= u_vvColorValues[0]) {\nreturn u_vvColors[0];\n}\nfor (int i = 1; i < VV_COLOR_N; ++i) {\nif (u_vvColorValues[i] >= colorValue) {\nfloat f = (colorValue - u_vvColorValues[i-1]) / (u_vvColorValues[i] - u_vvColorValues[i-1]);\nreturn mix(u_vvColors[i-1], u_vvColors[i], f);\n}\n}\nreturn u_vvColors[VV_COLOR_N - 1];\n}\n#endif\nfloat getVVSize(in float size, in float vvSize)  {\n#ifdef VV_SIZE_MIN_MAX_VALUE\nreturn getVVMinMaxSize(vvSize, size);\n#elif defined(VV_SIZE_SCALE_STOPS)\nreturn u_vvSizeScaleStopsValue;\n#elif defined(VV_SIZE_FIELD_STOPS)\nfloat outSize = getVVStopsSize(vvSize, size);\nreturn isNan(outSize) ? size : outSize;\n#elif defined(VV_SIZE_UNIT_VALUE)\nreturn getVVUnitValue(vvSize, size);\n#else\nreturn size;\n#endif\n}"},"post-processing":{blit:{"blit.frag":"precision mediump float;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\ngl_FragColor = texture2D(u_texture, v_uv);\n}"},bloom:{composite:{"composite.frag":"precision mediump float;\nvarying vec2 v_uv;\nuniform sampler2D u_blurTexture1;\nuniform sampler2D u_blurTexture2;\nuniform sampler2D u_blurTexture3;\nuniform sampler2D u_blurTexture4;\nuniform sampler2D u_blurTexture5;\nuniform float u_bloomStrength;\nuniform float u_bloomRadius;\nuniform float u_bloomFactors[NUMMIPS];\nuniform vec3 u_bloomTintColors[NUMMIPS];\nfloat lerpBloomFactor(const in float factor) {\nfloat mirrorFactor = 1.2 - factor;\nreturn mix(factor, mirrorFactor, u_bloomRadius);\n}\nvoid main() {\ngl_FragColor = u_bloomStrength * (\nlerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\nlerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\nlerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\nlerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\nlerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\n);\n}"},gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\n#define SIGMA RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / u_texSize;\nfloat fSigma = float(SIGMA);\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = u_direction * invSize * x;\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\ngl_FragColor = pixelColorSum /weightSum;\n}"},luminosityHighPass:{"luminosityHighPass.frag":"precision mediump float;\nuniform sampler2D u_texture;\nuniform vec3 u_defaultColor;\nuniform float u_defaultOpacity;\nuniform float u_luminosityThreshold;\nuniform float u_smoothWidth;\nvarying vec2 v_uv;\nvoid main() {\nvec4 texel = texture2D(u_texture, v_uv);\nvec3 luma = vec3(0.299, 0.587, 0.114);\nfloat v = dot(texel.xyz, luma);\nvec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\nfloat alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\ngl_FragColor = mix(outputColor, texel, alpha);\n}"}},blur:{gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nuniform float u_sigma;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / u_texSize;\nfloat fSigma = u_sigma;\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = u_direction * invSize * x;\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\ngl_FragColor = pixelColorSum /weightSum;\n}"},"radial-blur":{"radial-blur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nconst float sampleDist = 1.0;\nconst float sampleStrength = 2.2;\nvoid main(void) {\nfloat samples[10];\nsamples[0] = -0.08;\nsamples[1] = -0.05;\nsamples[2] = -0.03;\nsamples[3] = -0.02;\nsamples[4] = -0.01;\nsamples[5] =  0.01;\nsamples[6] =  0.02;\nsamples[7] =  0.03;\nsamples[8] =  0.05;\nsamples[9] =  0.08;\nvec2 dir = 0.5 - v_uv;\nfloat dist = sqrt(dir.x * dir.x + dir.y * dir.y);\ndir = dir / dist;\nvec4 color = texture2D(u_colorTexture,v_uv);\nvec4 sum = color;\nfor (int i = 0; i < 10; i++) {\nsum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\n}\nsum *= 1.0 / 11.0;\nfloat t = dist * sampleStrength;\nt = clamp(t, 0.0, 1.0);\ngl_FragColor = mix(color, sum, t);\n}"}},dra:{"dra.frag":"precision mediump float;\nuniform sampler2D u_minColor;\nuniform sampler2D u_maxColor;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\nvec4 minColor = texture2D(u_minColor, vec2(0.5));\nvec4 maxColor = texture2D(u_maxColor, vec2(0.5));\nvec4 color = texture2D(u_texture, v_uv);\nvec3 minColorUnpremultiply = minColor.rgb / minColor.a;\nvec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\nvec3 colorUnpremultiply = color.rgb / color.a;\nvec3 range = maxColorUnpremultiply - minColorUnpremultiply;\ngl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\n}","min-max":{"min-max.frag":"#extension GL_EXT_draw_buffers : require\nprecision mediump float;\n#define CELL_SIZE 2\nuniform sampler2D u_minTexture;\nuniform sampler2D u_maxTexture;\nuniform vec2 u_srcResolution;\nuniform vec2 u_dstResolution;\nvarying vec2 v_uv;\nvoid main() {\nvec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\nvec2 onePixel = vec2(1.0) / u_srcResolution;\nvec2 uv = (srcPixel + 0.5) / u_srcResolution;\nvec4 minColor = vec4(1.0);\nvec4 maxColor = vec4(0.0);\nfor (int y = 0; y < CELL_SIZE; ++y) {\nfor (int x = 0; x < CELL_SIZE; ++x) {\nvec2 offset = uv + vec2(x, y) * onePixel;\nminColor = min(minColor, texture2D(u_minTexture, offset));\nmaxColor = max(maxColor, texture2D(u_maxTexture, offset));\n}\n}\ngl_FragData[0] = minColor;\ngl_FragData[1] = maxColor;\n}"}},"drop-shadow":{composite:{"composite.frag":"precision mediump float;\nuniform sampler2D u_layerFBOTexture;\nuniform sampler2D u_blurTexture;\nuniform vec4 u_shadowColor;\nvarying vec2 v_uv;\nvoid main() {\nvec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\nvec4 blurColor = texture2D(u_blurTexture, v_uv);\ngl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\n}"},"drop-shadow.vert":"precision mediump float;\nattribute vec2 a_position;\nuniform highp mat3 u_displayViewMat3;\nuniform highp vec2 u_offset;\nvarying vec2 v_uv;\nvoid main() {\nvec3 offset = u_displayViewMat3 * vec3(u_offset, 0.0);\ngl_Position = vec4(a_position, 0.0, 1.0) + vec4(offset, 0.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"},"edge-detect":{"frei-chen":{"frei-chen.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nvarying vec2 v_uv;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[9];\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\nvoid main() {\nG[0] = g0,\nG[1] = g1,\nG[2] = g2,\nG[3] = g3,\nG[4] = g4,\nG[5] = g5,\nG[6] = g6,\nG[7] = g7,\nG[8] = g8;\nmat3 I;\nfloat cnv[9];\nvec3 sample;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 9; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\nfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\nfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\ngl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\n}"},sobel:{"sobel.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] = g0;\nG[1] = g1;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 2; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\ngl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\n}"}},"edge-enhance":{"edge-enhance.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] = g0;\nG[1] = g1;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 2; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\nvec4 color = texture2D(u_colorTexture, v_uv);\ngl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\n}"},filterEffect:{"filterEffect.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform mat4 u_coefficients;\nvarying vec2 v_uv;\nvoid main() {\nvec4 color = texture2D(u_colorTexture, v_uv);\nvec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\nfloat a = color.a;\ngl_FragColor = vec4(a * rgbw.rgb, a);\n}"},pp:{"pp.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying vec2 v_uv;\nvoid main() {\ngl_Position = vec4(a_position, 0.0, 1.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"}},raster:{bitmap:{"bitmap.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform highp vec2 u_coordScale;\nuniform lowp float u_opacity;\n#include <filtering/bicubic.glsl>\nvoid main() {\n#ifdef BICUBIC\nvec4 color = sampleBicubicBSpline(u_texture, v_texcoord, u_coordScale);\n#else\nvec4 color = texture2D(u_texture, v_texcoord);\n#endif\nfloat alpha = u_opacity * color.a;\ngl_FragColor = vec4(alpha * color.rgb, alpha);\n}","bitmap.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},common:{"common.glsl":"uniform sampler2D u_image;\nuniform int u_bandCount;\nuniform bool u_isFloatTexture;\nuniform bool u_flipY;\nuniform float u_opacity;\nuniform int u_resampling;\nuniform vec2 u_srcImageSize;\n#ifdef APPLY_PROJECTION\n#include <raster/common/projection.glsl>\n#endif\n#ifdef BICUBIC\n#include <filtering/bicubic.glsl>\n#endif\n#ifdef BILINEAR\n#include <filtering/bilinear.glsl>\n#endif\nvec2 getPixelLocation(vec2 coords) {\nvec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\n#ifdef APPLY_PROJECTION\ntargetLocation = projectPixelLocation(targetLocation);\n#endif\nreturn targetLocation;\n}\nbool isOutside(vec2 coords){\nif (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\nreturn true;\n} else {\nreturn false;\n}\n}\nvec4 getPixel(vec2 pixelLocation) {\n#ifdef BICUBIC\nvec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\n#elif defined(BILINEAR)\nvec4 color = sampleBilinear(u_image, pixelLocation, u_srcImageSize);\n#else\nvec4 color = texture2D(u_image, pixelLocation);\n#endif\nreturn color;\n}","contrastBrightness.glsl":"uniform float u_contrastOffset;\nuniform float u_brightnessOffset;\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\nvec4 pixelValue = isFloat ? currentPixel * 255.0 : currentPixel;\nfloat maxI = 255.0;\nfloat mid = 128.0;\nfloat c = u_contrastOffset;\nfloat b = u_brightnessOffset;\nvec4 v;\nif (c > 0.0 && c < 100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\n} else if (c <= 0.0 && c > -100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\n} else if (c == 100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\nv = (sign(v) + 1.0) / 2.0;\n} else if (c == -100.0) {\nv = vec4(mid, mid, mid, currentPixel.a);\n}\nreturn vec4(v.r / 255.0, v.g / 255.0, v.b / 255.0, currentPixel.a);\n}","projection.glsl":"uniform sampler2D u_transformGrid;\nuniform vec2 u_transformSpacing;\nuniform vec2 u_transformGridSize;\nuniform vec2 u_targetImageSize;\nvec2 projectPixelLocation(vec2 coords) {\nvec2 index_image = floor(coords * u_targetImageSize);\nvec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\nvec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\nvec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\nvec2 srcLocation;\nvec2 transform_location = index_transform + oneTransformPixel * 0.5;\nif (pos.s <= pos.t) {\nvec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\nvec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\nsrcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\n} else {\nvec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\nvec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\nsrcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\n}\nreturn srcLocation;\n}"},hillshade:{"hillshade.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform int u_hillshadeType;\nuniform float u_sinZcosAs[6];\nuniform float u_sinZsinAs[6];\nuniform float u_cosZs[6];\nuniform float u_weights[6];\nuniform vec2 u_factor;\nuniform float u_minValue;\nuniform float u_maxValue;\n#include <raster/lut/colorize.glsl>\nfloat getNeighborHoodAlpha(float a, float b, float c, float d, float e, float f, float g, float h, float i){\nif (a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0) {\nreturn 0.0;\n}\nelse {\nreturn e;\n}\n}\nvec3 rgb2hsv(vec3 c) {\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\nval = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\nvec4 rgb = colorize(vec4(val, val, val, 1.0), 255.0);\nvec3 hsv = rgb2hsv(rgb.xyz);\nhsv.z = hillshade;\nreturn vec4(hsv2rgb(hsv), 1.0) * rgb.a;\n}\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\nif (currentPixel.a == 0.0) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec2 axy = vec2(-1.0, -1.0);\nvec2 bxy = vec2(0.0, -1.0);\nvec2 cxy = vec2(1.0, -1.0);\nvec2 dxy = vec2(-1.0, 0.0);\nvec2 fxy = vec2(1.0, 0.0);\nvec2 gxy = vec2(-1.0, 1.0);\nvec2 hxy = vec2(0.0, 1.0);\nvec2 ixy = vec2(1.0, 1.0);\nvec2 onePixel = 1.0 / u_srcImageSize;\nif (pixelLocation.s < onePixel.s) {\naxy[0] = 1.0;\ndxy[0] = 1.0;\ngxy[0] = 1.0;\n}\nif (pixelLocation.t < onePixel.t) {\naxy[1] = 1.0;\nbxy[1] = 1.0;\ncxy[1] = 1.0;\n}\nif (pixelLocation.s > 1.0 - onePixel.s) {\ncxy[0] = -1.0;\nfxy[0] = -1.0;\nixy[0] = -1.0;\n}\nif (pixelLocation.t > 1.0 - onePixel.t) {\ngxy[1] = -1.0;\nhxy[1] = -1.0;\nixy[1] = -1.0;\n}\nvec4 va = texture2D(u_image, pixelLocation + onePixel * axy);\nvec4 vb = texture2D(u_image, pixelLocation + onePixel * bxy);\nvec4 vc = texture2D(u_image, pixelLocation + onePixel * cxy);\nvec4 vd = texture2D(u_image, pixelLocation + onePixel * dxy);\nvec4 ve = texture2D(u_image, pixelLocation);\nvec4 vf = texture2D(u_image, pixelLocation + onePixel * fxy);\nvec4 vg = texture2D(u_image, pixelLocation + onePixel * gxy);\nvec4 vh = texture2D(u_image, pixelLocation + onePixel * hxy);\nvec4 vi = texture2D(u_image, pixelLocation + onePixel * ixy);\nfloat dzx = (vc + 2.0 * vf + vi - va - 2.0 * vd - vg).r * u_factor.s;\nfloat dzy = (vg + 2.0 * vh + vi - va - 2.0 * vb - vc).r * u_factor.t;\nfloat dzd = sqrt(1.0 + dzx * dzx + dzy * dzy);\nfloat hillshade = 0.0;\nif (u_hillshadeType == 0){\nfloat cosDelta = u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\nfloat z = (u_cosZs[0] + cosDelta) / dzd;\nif (z < 0.0)  z = 0.0;\nhillshade = z;\n} else {\nfor (int k = 0; k < 6; k++) {\nfloat cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\nfloat z = (u_cosZs[k] + cosDelta) / dzd;\nif (z < 0.0) z = 0.0;\nhillshade = hillshade + z * u_weights[k];\nif (k == 5) break;\n}\n}\nfloat alpha = getNeighborHoodAlpha(va.a, vb.a, vc.a, vd.a, ve.a, vf.a, vg.a, vh.a, vi.a);\n#ifdef APPLY_COLORMAP\ngl_FragColor = overlay(ve.r, u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\n#else\ngl_FragColor = vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\n#endif\n}","hillshade.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},lut:{"colorize.glsl":"uniform sampler2D u_colormap;\nuniform float u_colormapOffset;\nuniform float u_colormapMaxIndex;\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\nfloat clrIndex = clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\nvec2 clrPosition = vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\nvec4 color = texture2D(u_colormap, clrPosition);\nvec4 result = vec4(color.rgb, color.a * currentPixel.a);\nreturn result;\n}","lut.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\n#include <raster/lut/colorize.glsl>\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\nvec4 result = colorize(currentPixel, 1.0);\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * u_opacity;\n}","lut.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos * u_scale + u_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},stretch:{"stretch.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform float u_minCutOff[3];\nuniform float u_maxCutOff[3];\nuniform float u_minOutput;\nuniform float u_maxOutput;\nuniform float u_factor[3];\nuniform bool u_useGamma;\nuniform float u_gamma[3];\nuniform float u_gammaCorrection[3];\n#include <raster/lut/colorize.glsl>\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\nif (val >= maxCutOff) {\nreturn maxOutput;\n} else if (val <= minCutOff) {\nreturn minOutput;\n}\nfloat stretchedVal;\nif (useGamma) {\nfloat tempf = 1.0;\nfloat outRange = maxOutput - minOutput;\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\nif (gamma > 1.0) {\ntempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);\n}\nstretchedVal = (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\n} else {\nstretchedVal = minOutput + (val - minCutOff) * factor;\n}\nreturn stretchedVal;\n}\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\n#ifdef NOOP\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\nreturn;\n#endif\nif (u_bandCount == 1) {\nfloat grayVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\n#ifdef APPLY_COLORMAP\nvec4 result = colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\n#else\ngl_FragColor = vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\n#endif\n} else {\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\ngl_FragColor = vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\n}\n}","stretch.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos * u_scale + u_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"}},stencil:{"stencil.frag":"void main() {\ngl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}","stencil.vert":"attribute vec2 a_pos;\nvoid main() {\ngl_Position = vec4(a_pos, 0.0, 1.0);\n}"},tileInfo:{"tileInfo.frag":"uniform mediump sampler2D u_texture;\nvarying mediump vec2 v_tex;\nvoid main(void) {\nlowp vec4 color = texture2D(u_texture, v_tex);\ngl_FragColor = 0.75 * color;\n}","tileInfo.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump float u_depth;\nuniform mediump vec2 u_coord_ratio;\nuniform mediump vec2 u_delta;\nuniform mediump vec2 u_dimensions;\nvarying mediump vec2 v_tex;\nvoid main() {\nmediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\nvec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\nv_tex = a_pos;\n}"},util:{"encoding.glsl":"const vec4 rgba2float_factors = vec4(\n255.0 / (256.0),\n255.0 / (256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n);\nfloat rgba2float(vec4 rgba) {\nreturn dot(rgba, rgba2float_factors);\n}"}});const o=new i.a((function(e){let t=a;return e.split("/").forEach(e=>{t&&(t=t[e])}),t}));function r(e){return o.resolveIncludes(e)}},635:function(e,t,n){"use strict";n.d(t,"a",(function(){return a})),n.d(t,"b",(function(){return o})),n.d(t,"c",(function(){return i})),n.d(t,"d",(function(){return r}));const i=!0,a=32,o=1.5,r=200},678:function(e,t,n){"use strict";t.a=class{constructor(e){this.readFile=e}resolveIncludes(e){return this.resolve(e)}resolve(e,t=new Map){if(t.has(e))return t.get(e);const n=this.read(e);if(!n)throw new Error("cannot find shader file "+e);const i=/^[^\S\n]*#include\s+<(\S+)>[^\S\n]?/gm;let a=i.exec(n);const o=[];for(;null!=a;)o.push({path:a[1],start:a.index,length:a[0].length}),a=i.exec(n);let r=0,l="";return o.forEach(e=>{l+=n.slice(r,e.start),l+=t.has(e.path)?"":this.resolve(e.path,t),r=e.start+e.length}),l+=n.slice(r),t.set(e,l),l}read(e){return this.readFile(e)}}},709:function(e,t,n){"use strict";function i(){return new Float32Array(4)}function a(e,t,n,i){const a=new Float32Array(4);return a[0]=e,a[1]=t,a[2]=n,a[3]=i,a}function o(){return i()}function r(){return a(1,1,1,1)}function l(){return a(1,0,0,0)}function s(){return a(0,1,0,0)}function c(){return a(0,0,1,0)}function u(){return a(0,0,0,1)}n.d(t,"a",(function(){return a}));const f=o(),v=r(),d=l(),m=s(),_=c(),p=u();Object.freeze({__proto__:null,create:i,clone:function(e){const t=new Float32Array(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},fromValues:a,createView:function(e,t){return new Float32Array(e,t,4)},zeros:o,ones:r,unitX:l,unitY:s,unitZ:c,unitW:u,ZEROS:f,ONES:v,UNIT_X:d,UNIT_Y:m,UNIT_Z:_,UNIT_W:p})},785:function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var i=n(629);const a={shaders:{vertexShader:Object(i.a)("background/background.vert"),fragmentShader:Object(i.a)("background/background.frag")},attributes:new Map([["a_pos",0]])}},837:function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return a})),n.d(t,"c",(function(){return o})),n.d(t,"d",(function(){return c})),n.d(t,"e",(function(){return s})),n.d(t,"f",(function(){return l})),n.d(t,"g",(function(){return f})),n.d(t,"h",(function(){return u})),n.d(t,"i",(function(){return v})),n.d(t,"j",(function(){return m})),n.d(t,"k",(function(){return d}));n(514);var i=n(511);function a(e,t,n="nearest",a=!1){var o;const r=!(a&&"u8"===t.pixelType),l=r?5126:5121,s=null==t.pixels||0===t.pixels.length?null:r?t.getAsRGBAFloat():t.getAsRGBA(),c=null==(o=e.capabilities.textureFloat)?void 0:o.textureFloatLinear,u={width:t.width,height:t.height,target:3553,pixelFormat:6408,internalFormat:"webgl2"===e.webglVersion&&r?34836:6408,samplingMode:!c||"bilinear"!==n&&"cubic"!==n?9728:9729,dataType:l,wrapMode:33071,flipped:!1};return new i.a(e,u,s)}function o(e,t){const n=4*t.size[0],a=t.size[1],o={width:n,height:a,target:3553,pixelFormat:6408,internalFormat:"webgl2"===e.webglVersion?34836:6408,dataType:5126,samplingMode:9728,wrapMode:33071,flipped:!1},r=new Float32Array(n*a*4);let l=0;for(let i=0;i<t.coefficients.length;i++)r[l++]=t.coefficients[i],i%3==2&&(r[l++]=1);return new i.a(e,o,r)}function r(e,t){const n={width:t.length/4,height:1,target:3553,pixelFormat:6408,internalFormat:6408,dataType:5121,samplingMode:9728,wrapMode:33071,flipped:!1};return new i.a(e,n,t)}function l(e,t,n,i=1,a=!0,o=!1){return{u_flipY:a,u_isFloatTexture:o,u_applyTransform:!!e,u_opacity:i,u_transformSpacing:e?e.spacing:null,u_transformGridSize:e?e.size:null,u_targetImageSize:t,u_srcImageSize:n}}function s(e,t){return{u_colormapOffset:t||0,u_colormapMaxIndex:e?e.length/4-1:null}}function c(e,t){return{u_scale:e,u_offset:t}}function u(e){return{u_bandCount:e.bandCount,u_minOutput:e.outMin,u_maxOutput:e.outMax,u_minCutOff:e.minCutOff,u_maxCutOff:e.maxCutOff,u_factor:e.factor,u_useGamma:e.useGamma,u_gamma:e.gamma,u_gammaCorrection:e.gammaCorrection}}function f(e){return{u_hillshadeType:e.hillshadeType,u_sinZcosAs:e.sinZcosAs,u_sinZsinAs:e.sinZsinAs,u_cosZs:e.cosZs,u_weights:e.weights,u_factor:e.factor,u_minValue:e.minValue,u_maxValue:e.maxValue}}function v(e,t){const n=e.gl,i=t.glName,a=n.getProgramParameter(i,n.ACTIVE_UNIFORMS),o=new Map;let r;for(let l=0;l<a;l++)r=n.getActiveUniform(i,l),r&&o.set(r.name,{location:n.getUniformLocation(i,r.name),info:r});return o}function d(e,t,n){Object.keys(n).forEach(i=>{const a=t.get(i)||t.get(i+"[0]");a&&function(e,t,n,i){if(null===i||null==n)return!1;const{info:a}=i;switch(a.type){case 5126:a.size>1?e.setUniform1fv(t,n):e.setUniform1f(t,n);break;case 35664:e.setUniform2fv(t,n);break;case 35665:e.setUniform3fv(t,n);break;case 35666:e.setUniform4fv(t,n);break;case 35675:e.setUniformMatrix3fv(t,n);break;case 35676:e.setUniformMatrix4fv(t,n);break;case 5124:a.size>1?e.setUniform1iv(t,n):e.setUniform1i(t,n);break;case 35670:e.setUniform1i(t,n?1:0);break;case 35667:case 35671:e.setUniform2iv(t,n);break;case 35668:case 35672:e.setUniform3iv(t,n);break;case 35669:case 35673:e.setUniform4iv(t,n);break;default:return!1}}(e,i,n[i],a)})}function m(e,t,n,i){n.length===i.length&&(i.some(e=>null==e)||n.some(e=>null==e)||n.forEach((n,a)=>{t.setUniform1i(n,a),e.bindTexture(i[a],a)}))}}}]);
//# sourceMappingURL=3.549bd382.chunk.js.map