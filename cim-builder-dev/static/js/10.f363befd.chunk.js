"use strict";(globalThis.webpackChunkmy_app=globalThis.webpackChunkmy_app||[]).push([[10],{80010:(e,t,a)=>{a.r(t),a.d(t,{AssetMapEditFlags:()=>s,applyEdits:()=>m});var r,s,i,d=a(52639),n=a(40281),l=a(10064),o=a(84652),u=a(92026),p=a(35995),c=a(71907),h=a(50689),y=a(56601);async function m(e,t,a){let r,s,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const d={edits:a,result:new Promise(((e,t)=>{r=e,s=t}))};e.emit("apply-edits",d);try{const{results:s,edits:d}=await f(e,t,a,i),n=e=>e.filter((e=>!e.error)).map(o.d9),l={edits:d,addedFeatures:n(s.addFeatureResults),updatedFeatures:n(s.updateFeatureResults),deletedFeatures:n(s.deleteFeatureResults),addedAttachments:n(s.addAttachmentResults),updatedAttachments:n(s.updateAttachmentResults),deletedAttachments:n(s.deleteAttachmentResults)};return s.editedFeatureResults?.length&&(l.editedFeatures=s.editedFeatureResults),(l.addedFeatures.length||l.updatedFeatures.length||l.deletedFeatures.length||l.addedAttachments.length||l.updatedAttachments.length||l.deletedAttachments.length)&&(e.emit("edits",l),(0,y.lQ)(e)&&y.dU.emit("edits",{layer:e,event:l})),r(l),s}catch(n){throw s(n),n}}async function f(e,t,a,s){if(await e.load(),!function(e){return e&&null!=e.applyEdits}(t))throw new l.Z(`${e.type}-layer:no-editing-support`,"Layer source does not support applyEdits capability",{layer:e});if(!e.editingEnabled)throw new l.Z(`${e.type}-layer:editing-disabled`,"Editing is disabled for layer",{layer:e});const{edits:i,options:d}=await async function(e,t,a){const s=t&&(t.addFeatures||t.updateFeatures||t.deleteFeatures),i=t&&(t.addAttachments||t.updateAttachments||t.deleteAttachments),d=(0,u.pC)(e.infoFor3D);if(!t||!s&&!i)throw new l.Z(`${e.type}-layer:missing-parameters`,"'addFeatures', 'updateFeatures', 'deleteFeatures', 'addAttachments', 'updateAttachments' or 'deleteAttachments' parameter is required");if(!e.capabilities.data.isVersioned&&a&&a.gdbVersion)throw new l.Z(`${e.type}-layer:invalid-parameter`,"'gdbVersion' is applicable only if the layer supports versioned data. See: 'capabilities.data.isVersioned'");if(!e.capabilities.editing.supportsRollbackOnFailure&&a&&a.rollbackOnFailureEnabled)throw new l.Z(`${e.type}-layer:invalid-parameter`,"This layer does not support 'rollbackOnFailureEnabled' parameter. See: 'capabilities.editing.supportsRollbackOnFailure'");if(!e.capabilities.editing.supportsGlobalId&&a&&a.globalIdUsed)throw new l.Z(`${e.type}-layer:invalid-parameter`,"This layer does not support 'globalIdUsed' parameter. See: 'capabilities.editing.supportsGlobalId'");if(!e.capabilities.editing.supportsGlobalId&&i)throw new l.Z(`${e.type}-layer:invalid-parameter`,"'addAttachments', 'updateAttachments' and 'deleteAttachments' are applicable only if the layer supports global ids. See: 'capabilities.editing.supportsGlobalId'");if((!a||!a.globalIdUsed)&&i)throw new l.Z(`${e.type}-layer:invalid-parameter`,"When 'addAttachments', 'updateAttachments' or 'deleteAttachments' is specified, globalIdUsed should be set to true");const o={...a};if(null!=o.rollbackOnFailureEnabled||e.capabilities.editing.supportsRollbackOnFailure||(o.rollbackOnFailureEnabled=!0),!1===o.rollbackOnFailureEnabled&&"original-and-current-features"===o.returnServiceEditsOption)throw new l.Z(`${e.type}-layer:invalid-parameter`,"'original-and-current-features' is valid for 'returnServiceEditsOption' only when 'rollBackOnFailure' is true.");if(!e.capabilities.editing.supportsReturnServiceEditsInSourceSpatialReference&&o.returnServiceEditsInSourceSR)throw new l.Z(`${e.type}-layer:invalid-parameter`,"This layer does not support 'returnServiceEditsInSourceSR' parameter. See: 'capabilities.editing.supportsReturnServiceEditsInSourceSpatialReference'");if(o.returnServiceEditsInSourceSR&&"original-and-current-features"!==o.returnServiceEditsOption)throw new l.Z(`${e.type}-layer:invalid-parameter`,"'returnServiceEditsOption' is valid only when 'returnServiceEditsOption' is set to 'original-and-current-features'");const p={...t};if(p.addFeatures=t&&n.Z.isCollection(t.addFeatures)?t.addFeatures.toArray():p.addFeatures||[],p.updateFeatures=t&&n.Z.isCollection(t.updateFeatures)?t.updateFeatures.toArray():p.updateFeatures||[],p.deleteFeatures=t&&n.Z.isCollection(t.deleteFeatures)?t.deleteFeatures.toArray():p.deleteFeatures||[],p.addFeatures.length&&!e.capabilities.operations.supportsAdd)throw new l.Z(`${e.type}-layer:unsupported-operation`,"Layer does not support adding features.");if(p.updateFeatures.length&&!e.capabilities.operations.supportsUpdate)throw new l.Z(`${e.type}-layer:unsupported-operation`,"Layer does not support updating features.");if(p.deleteFeatures.length&&!e.capabilities.operations.supportsDelete)throw new l.Z(`${e.type}-layer:unsupported-operation`,"Layer does not support deleting features.");p.addAttachments=p.addAttachments||[],p.updateAttachments=p.updateAttachments||[],p.deleteAttachments=p.deleteAttachments||[],p.addFeatures=p.addFeatures.map(w),p.updateFeatures=p.updateFeatures.map(w),p.addAssets=[];const c=a&&a.globalIdUsed||d;return p.addFeatures.forEach((t=>function(e,t,a){g(e,t,a)}(t,e,c))),p.updateFeatures.forEach((t=>function(e,t,a){if(g(e,t,a),"geometry"in e&&(0,u.pC)(e.geometry)&&!t.capabilities.editing.supportsGeometryUpdate)throw new l.Z(`${t.type}-layer:unsupported-operation`,"Layer does not support geometry updates.")}(t,e,c))),p.deleteFeatures.forEach((t=>function(e,t,a){g(e,t,a)}(t,e,c))),p.addAttachments.forEach((t=>b(t,e))),p.updateAttachments.forEach((t=>b(t,e))),d&&await async function(e,t){if((0,u.Wi)(t.infoFor3D))return;const{infoFor3D:a}=t;let s=!1;for(const{id:n}of a.editFormats)if(n===r.GLTF_BINARY){s=!0;break}const i=[];for(const r of e.addFeatures)i.push(A(r,e,t,s));for(const r of e.updateFeatures)i.push(A(r,e,t,s));const d=await Promise.allSettled(i);for(const r of d)if("rejected"===r.status)throw r.reason}(p,e),{edits:await F(p),options:o}}(e,a,s);return i.addFeatures.length||i.updateFeatures.length||i.deleteFeatures.length||i.addAttachments.length||i.updateAttachments.length||i.deleteAttachments.length?{edits:i,results:await t.applyEdits(i,d)}:{edits:i,results:{addFeatureResults:[],updateFeatureResults:[],deleteFeatureResults:[],addAttachmentResults:[],updateAttachmentResults:[],deleteAttachmentResults:[]}}}function g(e,t,a){if(a){if("attributes"in e&&!e.attributes[t.globalIdField])throw new l.Z(`${t.type}-layer:invalid-parameter`,"Feature should have 'globalId' when 'globalIdUsed' is true");if(!("attributes"in e)&&!e.globalId)throw new l.Z(`${t.type}-layer:invalid-parameter`,"'globalId' of the feature should be passed when 'globalIdUsed' is true")}if("geometry"in e&&(0,u.pC)(e.geometry)){if(e.geometry.hasZ&&!1===t.capabilities.data.supportsZ)throw new l.Z(`${t.type}-layer:z-unsupported`,"Layer does not support z values while feature has z values.");if(e.geometry.hasM&&!1===t.capabilities.data.supportsM)throw new l.Z(`${t.type}-layer:m-unsupported`,"Layer does not support m values while feature has m values.")}}function b(e,t){const{feature:a,attachment:r}=e;if(!a||"attributes"in a&&!a.attributes[t.globalIdField])throw new l.Z(`${t.type}-layer:invalid-parameter`,"Attachment should have reference to a feature with 'globalId'");if(!("attributes"in a)&&!a.globalId)throw new l.Z(`${t.type}-layer:invalid-parameter`,"Attachment should have reference to 'globalId' of the parent feature");if(!r.globalId)throw new l.Z(`${t.type}-layer:invalid-parameter`,"Attachment should have 'globalId'");if(!r.data&&!r.uploadId)throw new l.Z(`${t.type}-layer:invalid-parameter`,"Attachment should have 'data' or 'uploadId'");if(!(r.data instanceof File&&r.data.name)&&!r.name)throw new l.Z(`${t.type}-layer:invalid-parameter`,"'name' is required when attachment is specified as Base64 encoded string using 'data'");if(!t.capabilities.editing.supportsUploadWithItemId&&r.uploadId)throw new l.Z(`${t.type}-layer:invalid-parameter`,"This layer does not support 'uploadId' parameter. See: 'capabilities.editing.supportsUploadWithItemId'");if("string"==typeof r.data){const e=(0,p.sJ)(r.data);if(e&&!e.isBase64)throw new l.Z(`${t.type}-layer:invalid-parameter`,"Attachment 'data' should be a Blob, File or Base64 encoded string")}}async function F(e){const t=e.addFeatures,a=e.updateFeatures,r=t.concat(a).map((e=>e.geometry)),s=await(0,h.aX)(r),i=t.length,d=a.length;return s.slice(0,i).forEach(((t,a)=>e.addFeatures[a].geometry=t)),s.slice(i,i+d).forEach(((t,a)=>e.updateFeatures[a].geometry=t)),e}function w(e){const t=new d.Z;return e.attributes||(e.attributes={}),t.geometry=e.geometry,t.attributes=e.attributes,t}async function A(e,t,a,s){if((0,u.Wi)(e.geometry)||"mesh"!==e.geometry.type)return;const i=e.geometry,d=a.globalIdField;if((0,u.pC)(a.parsedUrl)&&(0,u.pC)(i.external)&&"string"==typeof i.external.source&&i.external.source.startsWith(a.parsedUrl.path))return;if(!s)throw new l.Z(`${a.type}-layer:binary-gltf-asset-not-supported`,"3DObjectFeatureLayer requires binary glTF (.glb) support for updating mesh geometry.");const n=await i.toBinaryGLTF(),o=await n.buffer(),p=`{${(0,c.D)()}}`,h=`${p}.glb`;t.addAssets.push({featureGlobalId:e.getAttribute(d),assetMapGlobalId:p,assetName:h,flags:0,data:o.data,mimeType:o.type,assetType:r.GLTF_BINARY,feature:e})}!function(e){e.GLTF_BINARY="3D_glb",e.GLTF_JSON="3D_gltf"}(r||(r={})),(i=s||(s={}))[i.PROJECT_VERTICES=1]="PROJECT_VERTICES"}}]);
//# sourceMappingURL=10.f363befd.chunk.js.map