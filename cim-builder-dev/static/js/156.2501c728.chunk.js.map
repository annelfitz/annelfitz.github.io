{"version":3,"sources":["../node_modules/@arcgis/core/layers/support/RasterWorker.js"],"names":["n","e","r","s","data","options","toJSON","symbolize","pixelBlock","fromJSON","extent","o","this","symbolizer","Promise","resolve","l","symbolizerJSON","histograms","rendererJSON","type","stretch","simpleStretch","srcPixelBlock","stretchParams","estimateStatisticsHistograms","split","t","tileSize","maximumPyramidLevel","forEach","set","srcPixelBlocks","map","i","srcMosaicSize","coefs","m","destDimension","sampleSpacing","interpolation"],"mappings":"0GAAA,+DAIs6CA,UAAllC,MAAQ,aAAaC,GAAG,MAAMC,QAAQC,YAAEF,EAAEG,KAAKH,EAAEI,SAAS,OAAOH,GAAGA,EAAEI,SAASC,UAAUJ,GAAGA,EAAEK,WAAWN,IAAEO,SAASN,EAAEK,YAAYL,EAAEO,OAAOP,EAAEO,OAAOT,IAAEQ,SAASN,EAAEO,QAAQ,KAAK,MAAMC,EAAEC,KAAKC,WAAWN,UAAUJ,GAAG,OAAOW,QAAQC,QAAQJ,GAAGA,EAAEL,UAAU,uBAAuBL,GAAG,IAAIC,EAAEU,KAAKC,WAAWG,IAAEP,SAASR,EAAEgB,gBAAgBhB,EAAEiB,YAAY,mBAAmB,OAAOhB,EAAEU,KAAKC,iBAAY,EAAOX,EAAEiB,aAAaC,QAAQR,KAAKC,WAAWM,aAAaD,WAAWjB,EAAEiB,YAAYG,QAAQpB,GAAG,MAAME,EAAES,KAAKC,WAAWS,cAAcpB,IAAEO,SAASR,EAAEsB,eAAetB,EAAEuB,eAAe,OAAOV,QAAQC,QAAQZ,GAAGA,EAAEG,UAAUmB,6BAA6BxB,GAAG,MAAME,EAAEQ,YAAET,IAAEO,SAASR,EAAEsB,gBAAgB,OAAOT,QAAQC,QAAQZ,GAAGuB,MAAMzB,GAAG,MAAME,EAAEwB,YAAEzB,IAAEO,SAASR,EAAEsB,eAAetB,EAAE2B,SAAS3B,EAAE4B,qBAAqB,OAAO1B,GAAGA,EAAE2B,QAAS,CAAC7B,EAAEC,KAAKC,EAAE4B,IAAI7B,EAAE,MAAMD,OAAE,EAAOA,EAAEK,YAAaQ,QAAQC,QAAQZ,GAAG,yBAAyBF,GAAG,MAAME,EAAEF,EAAE+B,eAAeC,IAAKhC,GAAGA,EAAE,IAAIC,IAAED,GAAG,MAAOU,EAAEuB,YAAE/B,EAAEF,EAAEkC,eAAe,IAAIlC,EAAEmC,MAAM,OAAOzB,GAAGA,EAAEL,SAAS,MAAMqB,EAAEU,YAAE1B,EAAEV,EAAEqC,cAAcrC,EAAEmC,MAAMnC,EAAEsC,cAActC,EAAEuC,eAAe,OAAOb,GAAGA,EAAErB","file":"static/js/156.2501c728.chunk.js","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.19/esri/copyright.txt for details.\n*/\nimport e from\"../../geometry/Extent.js\";import\"../../geometry.js\";import r from\"./PixelBlock.js\";import{decode as s}from\"./rasterFormats/RasterCodec.js\";import{estimateStatisticsHistograms as o,split as t,mosaic as i,approximateTransform as m}from\"./rasterFunctions/pixelUtils.js\";import l from\"../../renderers/support/RasterSymbolizer.js\";class n{async decode(e){const r=await s(e.data,e.options);return r&&r.toJSON()}symbolize(s){s.pixelBlock=r.fromJSON(s.pixelBlock),s.extent=s.extent?e.fromJSON(s.extent):null;const o=this.symbolizer.symbolize(s);return Promise.resolve(o&&o.toJSON())}async updateSymbolizer(e){var r;this.symbolizer=l.fromJSON(e.symbolizerJSON),e.histograms&&\"rasterStretch\"===(null==(r=this.symbolizer)?void 0:r.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(e){const s=this.symbolizer.simpleStretch(r.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(s&&s.toJSON())}estimateStatisticsHistograms(e){const s=o(r.fromJSON(e.srcPixelBlock));return Promise.resolve(s)}split(e){const s=t(r.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return s&&s.forEach(((e,r)=>{s.set(r,null==e?void 0:e.toJSON())})),Promise.resolve(s)}async mosaicAndTransform(e){const s=e.srcPixelBlocks.map((e=>e?new r(e):null)),o=i(s,e.srcMosaicSize);if(!e.coefs)return o&&o.toJSON();const t=m(o,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation);return t&&t.toJSON()}}export default n;\n"],"sourceRoot":""}